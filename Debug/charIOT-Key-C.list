
charIOT-Key-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5f4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008b8  0800f788  0800f788  0001f788  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010040  08010040  00030078  2**0
                  CONTENTS
  4 .ARM          00000008  08010040  08010040  00020040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010048  08010048  00030078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010048  08010048  00020048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801004c  0801004c  0002004c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08010050  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000025ac  20000078  080100c8  00030078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20002624  080100c8  00032624  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006454e  00000000  00000000  000300a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005a40  00000000  00000000  000945f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004850  00000000  00000000  0009a038  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000045a8  00000000  00000000  0009e888  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005f05  00000000  00000000  000a2e30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002e6c0  00000000  00000000  000a8d35  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001043ad  00000000  00000000  000d73f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000049  00000000  00000000  001db7a2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000147f8  00000000  00000000  001db7ec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f76c 	.word	0x0800f76c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	0800f76c 	.word	0x0800f76c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2uiz>:
 8000b08:	004a      	lsls	r2, r1, #1
 8000b0a:	d211      	bcs.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b0c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b10:	d211      	bcs.n	8000b36 <__aeabi_d2uiz+0x2e>
 8000b12:	d50d      	bpl.n	8000b30 <__aeabi_d2uiz+0x28>
 8000b14:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b18:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b1c:	d40e      	bmi.n	8000b3c <__aeabi_d2uiz+0x34>
 8000b1e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b22:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b26:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b2a:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2e:	4770      	bx	lr
 8000b30:	f04f 0000 	mov.w	r0, #0
 8000b34:	4770      	bx	lr
 8000b36:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b3a:	d102      	bne.n	8000b42 <__aeabi_d2uiz+0x3a>
 8000b3c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b40:	4770      	bx	lr
 8000b42:	f04f 0000 	mov.w	r0, #0
 8000b46:	4770      	bx	lr

08000b48 <__aeabi_d2f>:
 8000b48:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b4c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b50:	bf24      	itt	cs
 8000b52:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b56:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b5a:	d90d      	bls.n	8000b78 <__aeabi_d2f+0x30>
 8000b5c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b60:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b64:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b68:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b6c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b70:	bf08      	it	eq
 8000b72:	f020 0001 	biceq.w	r0, r0, #1
 8000b76:	4770      	bx	lr
 8000b78:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b7c:	d121      	bne.n	8000bc2 <__aeabi_d2f+0x7a>
 8000b7e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b82:	bfbc      	itt	lt
 8000b84:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b88:	4770      	bxlt	lr
 8000b8a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b8e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b92:	f1c2 0218 	rsb	r2, r2, #24
 8000b96:	f1c2 0c20 	rsb	ip, r2, #32
 8000b9a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b9e:	fa20 f002 	lsr.w	r0, r0, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	f040 0001 	orrne.w	r0, r0, #1
 8000ba8:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bac:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bb0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bb4:	ea40 000c 	orr.w	r0, r0, ip
 8000bb8:	fa23 f302 	lsr.w	r3, r3, r2
 8000bbc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bc0:	e7cc      	b.n	8000b5c <__aeabi_d2f+0x14>
 8000bc2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bc6:	d107      	bne.n	8000bd8 <__aeabi_d2f+0x90>
 8000bc8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bcc:	bf1e      	ittt	ne
 8000bce:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bd2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bd6:	4770      	bxne	lr
 8000bd8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bdc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000be0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop

08000be8 <__aeabi_uldivmod>:
 8000be8:	b953      	cbnz	r3, 8000c00 <__aeabi_uldivmod+0x18>
 8000bea:	b94a      	cbnz	r2, 8000c00 <__aeabi_uldivmod+0x18>
 8000bec:	2900      	cmp	r1, #0
 8000bee:	bf08      	it	eq
 8000bf0:	2800      	cmpeq	r0, #0
 8000bf2:	bf1c      	itt	ne
 8000bf4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bf8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bfc:	f000 b974 	b.w	8000ee8 <__aeabi_idiv0>
 8000c00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c08:	f000 f806 	bl	8000c18 <__udivmoddi4>
 8000c0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c14:	b004      	add	sp, #16
 8000c16:	4770      	bx	lr

08000c18 <__udivmoddi4>:
 8000c18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c1c:	9d08      	ldr	r5, [sp, #32]
 8000c1e:	4604      	mov	r4, r0
 8000c20:	468e      	mov	lr, r1
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d14d      	bne.n	8000cc2 <__udivmoddi4+0xaa>
 8000c26:	428a      	cmp	r2, r1
 8000c28:	4694      	mov	ip, r2
 8000c2a:	d969      	bls.n	8000d00 <__udivmoddi4+0xe8>
 8000c2c:	fab2 f282 	clz	r2, r2
 8000c30:	b152      	cbz	r2, 8000c48 <__udivmoddi4+0x30>
 8000c32:	fa01 f302 	lsl.w	r3, r1, r2
 8000c36:	f1c2 0120 	rsb	r1, r2, #32
 8000c3a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c3e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c42:	ea41 0e03 	orr.w	lr, r1, r3
 8000c46:	4094      	lsls	r4, r2
 8000c48:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c4c:	0c21      	lsrs	r1, r4, #16
 8000c4e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c52:	fa1f f78c 	uxth.w	r7, ip
 8000c56:	fb08 e316 	mls	r3, r8, r6, lr
 8000c5a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c5e:	fb06 f107 	mul.w	r1, r6, r7
 8000c62:	4299      	cmp	r1, r3
 8000c64:	d90a      	bls.n	8000c7c <__udivmoddi4+0x64>
 8000c66:	eb1c 0303 	adds.w	r3, ip, r3
 8000c6a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c6e:	f080 811f 	bcs.w	8000eb0 <__udivmoddi4+0x298>
 8000c72:	4299      	cmp	r1, r3
 8000c74:	f240 811c 	bls.w	8000eb0 <__udivmoddi4+0x298>
 8000c78:	3e02      	subs	r6, #2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	1a5b      	subs	r3, r3, r1
 8000c7e:	b2a4      	uxth	r4, r4
 8000c80:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c84:	fb08 3310 	mls	r3, r8, r0, r3
 8000c88:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c8c:	fb00 f707 	mul.w	r7, r0, r7
 8000c90:	42a7      	cmp	r7, r4
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x92>
 8000c94:	eb1c 0404 	adds.w	r4, ip, r4
 8000c98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c9c:	f080 810a 	bcs.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca0:	42a7      	cmp	r7, r4
 8000ca2:	f240 8107 	bls.w	8000eb4 <__udivmoddi4+0x29c>
 8000ca6:	4464      	add	r4, ip
 8000ca8:	3802      	subs	r0, #2
 8000caa:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000cae:	1be4      	subs	r4, r4, r7
 8000cb0:	2600      	movs	r6, #0
 8000cb2:	b11d      	cbz	r5, 8000cbc <__udivmoddi4+0xa4>
 8000cb4:	40d4      	lsrs	r4, r2
 8000cb6:	2300      	movs	r3, #0
 8000cb8:	e9c5 4300 	strd	r4, r3, [r5]
 8000cbc:	4631      	mov	r1, r6
 8000cbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d909      	bls.n	8000cda <__udivmoddi4+0xc2>
 8000cc6:	2d00      	cmp	r5, #0
 8000cc8:	f000 80ef 	beq.w	8000eaa <__udivmoddi4+0x292>
 8000ccc:	2600      	movs	r6, #0
 8000cce:	e9c5 0100 	strd	r0, r1, [r5]
 8000cd2:	4630      	mov	r0, r6
 8000cd4:	4631      	mov	r1, r6
 8000cd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cda:	fab3 f683 	clz	r6, r3
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	d14a      	bne.n	8000d78 <__udivmoddi4+0x160>
 8000ce2:	428b      	cmp	r3, r1
 8000ce4:	d302      	bcc.n	8000cec <__udivmoddi4+0xd4>
 8000ce6:	4282      	cmp	r2, r0
 8000ce8:	f200 80f9 	bhi.w	8000ede <__udivmoddi4+0x2c6>
 8000cec:	1a84      	subs	r4, r0, r2
 8000cee:	eb61 0303 	sbc.w	r3, r1, r3
 8000cf2:	2001      	movs	r0, #1
 8000cf4:	469e      	mov	lr, r3
 8000cf6:	2d00      	cmp	r5, #0
 8000cf8:	d0e0      	beq.n	8000cbc <__udivmoddi4+0xa4>
 8000cfa:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cfe:	e7dd      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000d00:	b902      	cbnz	r2, 8000d04 <__udivmoddi4+0xec>
 8000d02:	deff      	udf	#255	; 0xff
 8000d04:	fab2 f282 	clz	r2, r2
 8000d08:	2a00      	cmp	r2, #0
 8000d0a:	f040 8092 	bne.w	8000e32 <__udivmoddi4+0x21a>
 8000d0e:	eba1 010c 	sub.w	r1, r1, ip
 8000d12:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d16:	fa1f fe8c 	uxth.w	lr, ip
 8000d1a:	2601      	movs	r6, #1
 8000d1c:	0c20      	lsrs	r0, r4, #16
 8000d1e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d22:	fb07 1113 	mls	r1, r7, r3, r1
 8000d26:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d2a:	fb0e f003 	mul.w	r0, lr, r3
 8000d2e:	4288      	cmp	r0, r1
 8000d30:	d908      	bls.n	8000d44 <__udivmoddi4+0x12c>
 8000d32:	eb1c 0101 	adds.w	r1, ip, r1
 8000d36:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000d3a:	d202      	bcs.n	8000d42 <__udivmoddi4+0x12a>
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	f200 80cb 	bhi.w	8000ed8 <__udivmoddi4+0x2c0>
 8000d42:	4643      	mov	r3, r8
 8000d44:	1a09      	subs	r1, r1, r0
 8000d46:	b2a4      	uxth	r4, r4
 8000d48:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d4c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d50:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d54:	fb0e fe00 	mul.w	lr, lr, r0
 8000d58:	45a6      	cmp	lr, r4
 8000d5a:	d908      	bls.n	8000d6e <__udivmoddi4+0x156>
 8000d5c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d60:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d64:	d202      	bcs.n	8000d6c <__udivmoddi4+0x154>
 8000d66:	45a6      	cmp	lr, r4
 8000d68:	f200 80bb 	bhi.w	8000ee2 <__udivmoddi4+0x2ca>
 8000d6c:	4608      	mov	r0, r1
 8000d6e:	eba4 040e 	sub.w	r4, r4, lr
 8000d72:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d76:	e79c      	b.n	8000cb2 <__udivmoddi4+0x9a>
 8000d78:	f1c6 0720 	rsb	r7, r6, #32
 8000d7c:	40b3      	lsls	r3, r6
 8000d7e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d82:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d86:	fa20 f407 	lsr.w	r4, r0, r7
 8000d8a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d8e:	431c      	orrs	r4, r3
 8000d90:	40f9      	lsrs	r1, r7
 8000d92:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d96:	fa00 f306 	lsl.w	r3, r0, r6
 8000d9a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d9e:	0c20      	lsrs	r0, r4, #16
 8000da0:	fa1f fe8c 	uxth.w	lr, ip
 8000da4:	fb09 1118 	mls	r1, r9, r8, r1
 8000da8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dac:	fb08 f00e 	mul.w	r0, r8, lr
 8000db0:	4288      	cmp	r0, r1
 8000db2:	fa02 f206 	lsl.w	r2, r2, r6
 8000db6:	d90b      	bls.n	8000dd0 <__udivmoddi4+0x1b8>
 8000db8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dbc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000dc0:	f080 8088 	bcs.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dc4:	4288      	cmp	r0, r1
 8000dc6:	f240 8085 	bls.w	8000ed4 <__udivmoddi4+0x2bc>
 8000dca:	f1a8 0802 	sub.w	r8, r8, #2
 8000dce:	4461      	add	r1, ip
 8000dd0:	1a09      	subs	r1, r1, r0
 8000dd2:	b2a4      	uxth	r4, r4
 8000dd4:	fbb1 f0f9 	udiv	r0, r1, r9
 8000dd8:	fb09 1110 	mls	r1, r9, r0, r1
 8000ddc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000de0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000de4:	458e      	cmp	lr, r1
 8000de6:	d908      	bls.n	8000dfa <__udivmoddi4+0x1e2>
 8000de8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dec:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000df0:	d26c      	bcs.n	8000ecc <__udivmoddi4+0x2b4>
 8000df2:	458e      	cmp	lr, r1
 8000df4:	d96a      	bls.n	8000ecc <__udivmoddi4+0x2b4>
 8000df6:	3802      	subs	r0, #2
 8000df8:	4461      	add	r1, ip
 8000dfa:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dfe:	fba0 9402 	umull	r9, r4, r0, r2
 8000e02:	eba1 010e 	sub.w	r1, r1, lr
 8000e06:	42a1      	cmp	r1, r4
 8000e08:	46c8      	mov	r8, r9
 8000e0a:	46a6      	mov	lr, r4
 8000e0c:	d356      	bcc.n	8000ebc <__udivmoddi4+0x2a4>
 8000e0e:	d053      	beq.n	8000eb8 <__udivmoddi4+0x2a0>
 8000e10:	b15d      	cbz	r5, 8000e2a <__udivmoddi4+0x212>
 8000e12:	ebb3 0208 	subs.w	r2, r3, r8
 8000e16:	eb61 010e 	sbc.w	r1, r1, lr
 8000e1a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e1e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e22:	40f1      	lsrs	r1, r6
 8000e24:	431f      	orrs	r7, r3
 8000e26:	e9c5 7100 	strd	r7, r1, [r5]
 8000e2a:	2600      	movs	r6, #0
 8000e2c:	4631      	mov	r1, r6
 8000e2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e32:	f1c2 0320 	rsb	r3, r2, #32
 8000e36:	40d8      	lsrs	r0, r3
 8000e38:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e3c:	fa21 f303 	lsr.w	r3, r1, r3
 8000e40:	4091      	lsls	r1, r2
 8000e42:	4301      	orrs	r1, r0
 8000e44:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e48:	fa1f fe8c 	uxth.w	lr, ip
 8000e4c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e50:	fb07 3610 	mls	r6, r7, r0, r3
 8000e54:	0c0b      	lsrs	r3, r1, #16
 8000e56:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e5a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e5e:	429e      	cmp	r6, r3
 8000e60:	fa04 f402 	lsl.w	r4, r4, r2
 8000e64:	d908      	bls.n	8000e78 <__udivmoddi4+0x260>
 8000e66:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e6e:	d22f      	bcs.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e70:	429e      	cmp	r6, r3
 8000e72:	d92d      	bls.n	8000ed0 <__udivmoddi4+0x2b8>
 8000e74:	3802      	subs	r0, #2
 8000e76:	4463      	add	r3, ip
 8000e78:	1b9b      	subs	r3, r3, r6
 8000e7a:	b289      	uxth	r1, r1
 8000e7c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e80:	fb07 3316 	mls	r3, r7, r6, r3
 8000e84:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e88:	fb06 f30e 	mul.w	r3, r6, lr
 8000e8c:	428b      	cmp	r3, r1
 8000e8e:	d908      	bls.n	8000ea2 <__udivmoddi4+0x28a>
 8000e90:	eb1c 0101 	adds.w	r1, ip, r1
 8000e94:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e98:	d216      	bcs.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9a:	428b      	cmp	r3, r1
 8000e9c:	d914      	bls.n	8000ec8 <__udivmoddi4+0x2b0>
 8000e9e:	3e02      	subs	r6, #2
 8000ea0:	4461      	add	r1, ip
 8000ea2:	1ac9      	subs	r1, r1, r3
 8000ea4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ea8:	e738      	b.n	8000d1c <__udivmoddi4+0x104>
 8000eaa:	462e      	mov	r6, r5
 8000eac:	4628      	mov	r0, r5
 8000eae:	e705      	b.n	8000cbc <__udivmoddi4+0xa4>
 8000eb0:	4606      	mov	r6, r0
 8000eb2:	e6e3      	b.n	8000c7c <__udivmoddi4+0x64>
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	e6f8      	b.n	8000caa <__udivmoddi4+0x92>
 8000eb8:	454b      	cmp	r3, r9
 8000eba:	d2a9      	bcs.n	8000e10 <__udivmoddi4+0x1f8>
 8000ebc:	ebb9 0802 	subs.w	r8, r9, r2
 8000ec0:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ec4:	3801      	subs	r0, #1
 8000ec6:	e7a3      	b.n	8000e10 <__udivmoddi4+0x1f8>
 8000ec8:	4646      	mov	r6, r8
 8000eca:	e7ea      	b.n	8000ea2 <__udivmoddi4+0x28a>
 8000ecc:	4620      	mov	r0, r4
 8000ece:	e794      	b.n	8000dfa <__udivmoddi4+0x1e2>
 8000ed0:	4640      	mov	r0, r8
 8000ed2:	e7d1      	b.n	8000e78 <__udivmoddi4+0x260>
 8000ed4:	46d0      	mov	r8, sl
 8000ed6:	e77b      	b.n	8000dd0 <__udivmoddi4+0x1b8>
 8000ed8:	3b02      	subs	r3, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	e732      	b.n	8000d44 <__udivmoddi4+0x12c>
 8000ede:	4630      	mov	r0, r6
 8000ee0:	e709      	b.n	8000cf6 <__udivmoddi4+0xde>
 8000ee2:	4464      	add	r4, ip
 8000ee4:	3802      	subs	r0, #2
 8000ee6:	e742      	b.n	8000d6e <__udivmoddi4+0x156>

08000ee8 <__aeabi_idiv0>:
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop

08000eec <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000eec:	b580      	push	{r7, lr}
 8000eee:	b084      	sub	sp, #16
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	7c1b      	ldrb	r3, [r3, #16]
 8000efa:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f02:	461a      	mov	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	fb02 f303 	mul.w	r3, r2, r3
 8000f0a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f16:	68fa      	ldr	r2, [r7, #12]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f00c fa18 	bl	800d350 <memset>
}
 8000f20:	bf00      	nop
 8000f22:	3710      	adds	r7, #16
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b086      	sub	sp, #24
 8000f2c:	af02      	add	r7, sp, #8
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	460b      	mov	r3, r1
 8000f32:	70fb      	strb	r3, [r7, #3]
 8000f34:	4613      	mov	r3, r2
 8000f36:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	7c1b      	ldrb	r3, [r3, #16]
 8000f3e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000f40:	78fb      	ldrb	r3, [r7, #3]
 8000f42:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f48:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	b29b      	uxth	r3, r3
 8000f4e:	89ba      	ldrh	r2, [r7, #12]
 8000f50:	fb12 f303 	smulbb	r3, r2, r3
 8000f54:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000f56:	89bb      	ldrh	r3, [r7, #12]
 8000f58:	00db      	lsls	r3, r3, #3
 8000f5a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000f5c:	89bb      	ldrh	r3, [r7, #12]
 8000f5e:	68ba      	ldr	r2, [r7, #8]
 8000f60:	4413      	add	r3, r2
 8000f62:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000f64:	7bf9      	ldrb	r1, [r7, #15]
 8000f66:	78ba      	ldrb	r2, [r7, #2]
 8000f68:	68bb      	ldr	r3, [r7, #8]
 8000f6a:	9300      	str	r3, [sp, #0]
 8000f6c:	460b      	mov	r3, r1
 8000f6e:	2100      	movs	r1, #0
 8000f70:	6878      	ldr	r0, [r7, #4]
 8000f72:	f001 fc96 	bl	80028a2 <u8x8_DrawTile>
}
 8000f76:	bf00      	nop
 8000f78:	3710      	adds	r7, #16
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}

08000f7e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000f7e:	b580      	push	{r7, lr}
 8000f80:	b084      	sub	sp, #16
 8000f82:	af00      	add	r7, sp, #0
 8000f84:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f90:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f98:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	7c5b      	ldrb	r3, [r3, #17]
 8000fa0:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000fa2:	7bba      	ldrb	r2, [r7, #14]
 8000fa4:	7bfb      	ldrb	r3, [r7, #15]
 8000fa6:	4619      	mov	r1, r3
 8000fa8:	6878      	ldr	r0, [r7, #4]
 8000faa:	f7ff ffbd 	bl	8000f28 <u8g2_send_tile_row>
    src_row++;
 8000fae:	7bfb      	ldrb	r3, [r7, #15]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000fb4:	7bbb      	ldrb	r3, [r7, #14]
 8000fb6:	3301      	adds	r3, #1
 8000fb8:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8000fba:	7bfa      	ldrb	r2, [r7, #15]
 8000fbc:	7b7b      	ldrb	r3, [r7, #13]
 8000fbe:	429a      	cmp	r2, r3
 8000fc0:	d203      	bcs.n	8000fca <u8g2_send_buffer+0x4c>
 8000fc2:	7bba      	ldrb	r2, [r7, #14]
 8000fc4:	7b3b      	ldrb	r3, [r7, #12]
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	d3eb      	bcc.n	8000fa2 <u8g2_send_buffer+0x24>
}
 8000fca:	bf00      	nop
 8000fcc:	3710      	adds	r7, #16
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	bd80      	pop	{r7, pc}

08000fd2 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000fd2:	b580      	push	{r7, lr}
 8000fd4:	b082      	sub	sp, #8
 8000fd6:	af00      	add	r7, sp, #0
 8000fd8:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8000fda:	6878      	ldr	r0, [r7, #4]
 8000fdc:	f7ff ffcf 	bl	8000f7e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000fe0:	6878      	ldr	r0, [r7, #4]
 8000fe2:	f001 fcaf 	bl	8002944 <u8x8_RefreshDisplay>
}
 8000fe6:	bf00      	nop
 8000fe8:	3708      	adds	r7, #8
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}

08000fee <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8000fee:	b580      	push	{r7, lr}
 8000ff0:	b082      	sub	sp, #8
 8000ff2:	af00      	add	r7, sp, #0
 8000ff4:	6078      	str	r0, [r7, #4]
 8000ff6:	460b      	mov	r3, r1
 8000ff8:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	78fa      	ldrb	r2, [r7, #3]
 8000ffe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	6878      	ldr	r0, [r7, #4]
 8001014:	4798      	blx	r3
}
 8001016:	bf00      	nop
 8001018:	3708      	adds	r7, #8
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}

0800101e <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800101e:	b580      	push	{r7, lr}
 8001020:	b082      	sub	sp, #8
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800102c:	2b00      	cmp	r3, #0
 800102e:	d002      	beq.n	8001036 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001030:	6878      	ldr	r0, [r7, #4]
 8001032:	f7ff ff5b 	bl	8000eec <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001036:	2100      	movs	r1, #0
 8001038:	6878      	ldr	r0, [r7, #4]
 800103a:	f7ff ffd8 	bl	8000fee <u8g2_SetBufferCurrTileRow>
}
 800103e:	bf00      	nop
 8001040:	3708      	adds	r7, #8
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800104e:	6878      	ldr	r0, [r7, #4]
 8001050:	f7ff ff95 	bl	8000f7e <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800105a:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001062:	7bfb      	ldrb	r3, [r7, #15]
 8001064:	4413      	add	r3, r2
 8001066:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	7c5b      	ldrb	r3, [r3, #17]
 800106e:	7bfa      	ldrb	r2, [r7, #15]
 8001070:	429a      	cmp	r2, r3
 8001072:	d304      	bcc.n	800107e <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001074:	6878      	ldr	r0, [r7, #4]
 8001076:	f001 fc65 	bl	8002944 <u8x8_RefreshDisplay>
    return 0;
 800107a:	2300      	movs	r3, #0
 800107c:	e00d      	b.n	800109a <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001084:	2b00      	cmp	r3, #0
 8001086:	d002      	beq.n	800108e <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001088:	6878      	ldr	r0, [r7, #4]
 800108a:	f7ff ff2f 	bl	8000eec <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800108e:	7bfb      	ldrb	r3, [r7, #15]
 8001090:	4619      	mov	r1, r3
 8001092:	6878      	ldr	r0, [r7, #4]
 8001094:	f7ff ffab 	bl	8000fee <u8g2_SetBufferCurrTileRow>
  return 1;
 8001098:	2301      	movs	r3, #1
}
 800109a:	4618      	mov	r0, r3
 800109c:	3710      	adds	r7, #16
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 80010aa:	6878      	ldr	r0, [r7, #4]
 80010ac:	f7ff ffb7 	bl	800101e <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 80010b0:	6878      	ldr	r0, [r7, #4]
 80010b2:	f7ff ffc8 	bl	8001046 <u8g2_NextPage>
 80010b6:	4603      	mov	r3, r0
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d1f9      	bne.n	80010b0 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80010bc:	2100      	movs	r1, #0
 80010be:	6878      	ldr	r0, [r7, #4]
 80010c0:	f7ff ff95 	bl	8000fee <u8g2_SetBufferCurrTileRow>
}
 80010c4:	bf00      	nop
 80010c6:	3708      	adds	r7, #8
 80010c8:	46bd      	mov	sp, r7
 80010ca:	bd80      	pop	{r7, pc}

080010cc <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 80010cc:	b480      	push	{r7}
 80010ce:	b083      	sub	sp, #12
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	2204      	movs	r2, #4
 80010d8:	701a      	strb	r2, [r3, #0]
  return buf;
 80010da:	4b03      	ldr	r3, [pc, #12]	; (80010e8 <u8g2_m_16_4_f+0x1c>)
  #endif
}
 80010dc:	4618      	mov	r0, r3
 80010de:	370c      	adds	r7, #12
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	20000094 	.word	0x20000094

080010ec <u8g2_Setup_ssd1305_i2c_128x32_noname_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1305 f */
void u8g2_Setup_ssd1305_i2c_128x32_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b088      	sub	sp, #32
 80010f0:	af02      	add	r7, sp, #8
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	607a      	str	r2, [r7, #4]
 80010f8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1305_128x32_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	9300      	str	r3, [sp, #0]
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	4a0b      	ldr	r2, [pc, #44]	; (8001130 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x44>)
 8001102:	490c      	ldr	r1, [pc, #48]	; (8001134 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x48>)
 8001104:	68f8      	ldr	r0, [r7, #12]
 8001106:	f001 fc7d 	bl	8002a04 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 800110a:	f107 0313 	add.w	r3, r7, #19
 800110e:	4618      	mov	r0, r3
 8001110:	f7ff ffdc 	bl	80010cc <u8g2_m_16_4_f>
 8001114:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001116:	7cfa      	ldrb	r2, [r7, #19]
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	9300      	str	r3, [sp, #0]
 800111c:	4b06      	ldr	r3, [pc, #24]	; (8001138 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x4c>)
 800111e:	6979      	ldr	r1, [r7, #20]
 8001120:	68f8      	ldr	r0, [r7, #12]
 8001122:	f000 ffc4 	bl	80020ae <u8g2_SetupBuffer>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	08002599 	.word	0x08002599
 8001134:	08002759 	.word	0x08002759
 8001138:	08001f31 	.word	0x08001f31

0800113c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800113c:	b480      	push	{r7}
 800113e:	b083      	sub	sp, #12
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	460b      	mov	r3, r1
 8001146:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001148:	78fb      	ldrb	r3, [r7, #3]
 800114a:	687a      	ldr	r2, [r7, #4]
 800114c:	4413      	add	r3, r2
 800114e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	781b      	ldrb	r3, [r3, #0]
}
 8001154:	4618      	mov	r0, r3
 8001156:	370c      	adds	r7, #12
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001160:	b480      	push	{r7}
 8001162:	b085      	sub	sp, #20
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	460b      	mov	r3, r1
 800116a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800116c:	78fb      	ldrb	r3, [r7, #3]
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	4413      	add	r3, r2
 8001172:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	781b      	ldrb	r3, [r3, #0]
 8001178:	81fb      	strh	r3, [r7, #14]
    font++;
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	3301      	adds	r3, #1
 800117e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001180:	89fb      	ldrh	r3, [r7, #14]
 8001182:	021b      	lsls	r3, r3, #8
 8001184:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	781b      	ldrb	r3, [r3, #0]
 800118a:	b29a      	uxth	r2, r3
 800118c:	89fb      	ldrh	r3, [r7, #14]
 800118e:	4413      	add	r3, r2
 8001190:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001192:	89fb      	ldrh	r3, [r7, #14]
}
 8001194:	4618      	mov	r0, r3
 8001196:	3714      	adds	r7, #20
 8001198:	46bd      	mov	sp, r7
 800119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119e:	4770      	bx	lr

080011a0 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b082      	sub	sp, #8
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
 80011a8:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 80011aa:	2100      	movs	r1, #0
 80011ac:	6838      	ldr	r0, [r7, #0]
 80011ae:	f7ff ffc5 	bl	800113c <u8g2_font_get_byte>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80011ba:	2101      	movs	r1, #1
 80011bc:	6838      	ldr	r0, [r7, #0]
 80011be:	f7ff ffbd 	bl	800113c <u8g2_font_get_byte>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80011ca:	2102      	movs	r1, #2
 80011cc:	6838      	ldr	r0, [r7, #0]
 80011ce:	f7ff ffb5 	bl	800113c <u8g2_font_get_byte>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80011da:	2103      	movs	r1, #3
 80011dc:	6838      	ldr	r0, [r7, #0]
 80011de:	f7ff ffad 	bl	800113c <u8g2_font_get_byte>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80011ea:	2104      	movs	r1, #4
 80011ec:	6838      	ldr	r0, [r7, #0]
 80011ee:	f7ff ffa5 	bl	800113c <u8g2_font_get_byte>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80011fa:	2105      	movs	r1, #5
 80011fc:	6838      	ldr	r0, [r7, #0]
 80011fe:	f7ff ff9d 	bl	800113c <u8g2_font_get_byte>
 8001202:	4603      	mov	r3, r0
 8001204:	461a      	mov	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800120a:	2106      	movs	r1, #6
 800120c:	6838      	ldr	r0, [r7, #0]
 800120e:	f7ff ff95 	bl	800113c <u8g2_font_get_byte>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800121a:	2107      	movs	r1, #7
 800121c:	6838      	ldr	r0, [r7, #0]
 800121e:	f7ff ff8d 	bl	800113c <u8g2_font_get_byte>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800122a:	2108      	movs	r1, #8
 800122c:	6838      	ldr	r0, [r7, #0]
 800122e:	f7ff ff85 	bl	800113c <u8g2_font_get_byte>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800123a:	2109      	movs	r1, #9
 800123c:	6838      	ldr	r0, [r7, #0]
 800123e:	f7ff ff7d 	bl	800113c <u8g2_font_get_byte>
 8001242:	4603      	mov	r3, r0
 8001244:	b25a      	sxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800124a:	210a      	movs	r1, #10
 800124c:	6838      	ldr	r0, [r7, #0]
 800124e:	f7ff ff75 	bl	800113c <u8g2_font_get_byte>
 8001252:	4603      	mov	r3, r0
 8001254:	b25a      	sxtb	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800125a:	210b      	movs	r1, #11
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f7ff ff6d 	bl	800113c <u8g2_font_get_byte>
 8001262:	4603      	mov	r3, r0
 8001264:	b25a      	sxtb	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800126a:	210c      	movs	r1, #12
 800126c:	6838      	ldr	r0, [r7, #0]
 800126e:	f7ff ff65 	bl	800113c <u8g2_font_get_byte>
 8001272:	4603      	mov	r3, r0
 8001274:	b25a      	sxtb	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800127a:	210d      	movs	r1, #13
 800127c:	6838      	ldr	r0, [r7, #0]
 800127e:	f7ff ff5d 	bl	800113c <u8g2_font_get_byte>
 8001282:	4603      	mov	r3, r0
 8001284:	b25a      	sxtb	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800128a:	210e      	movs	r1, #14
 800128c:	6838      	ldr	r0, [r7, #0]
 800128e:	f7ff ff55 	bl	800113c <u8g2_font_get_byte>
 8001292:	4603      	mov	r3, r0
 8001294:	b25a      	sxtb	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800129a:	210f      	movs	r1, #15
 800129c:	6838      	ldr	r0, [r7, #0]
 800129e:	f7ff ff4d 	bl	800113c <u8g2_font_get_byte>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b25a      	sxtb	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 80012aa:	2110      	movs	r1, #16
 80012ac:	6838      	ldr	r0, [r7, #0]
 80012ae:	f7ff ff45 	bl	800113c <u8g2_font_get_byte>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b25a      	sxtb	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80012ba:	2111      	movs	r1, #17
 80012bc:	6838      	ldr	r0, [r7, #0]
 80012be:	f7ff ff4f 	bl	8001160 <u8g2_font_get_word>
 80012c2:	4603      	mov	r3, r0
 80012c4:	461a      	mov	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80012ca:	2113      	movs	r1, #19
 80012cc:	6838      	ldr	r0, [r7, #0]
 80012ce:	f7ff ff47 	bl	8001160 <u8g2_font_get_word>
 80012d2:	4603      	mov	r3, r0
 80012d4:	461a      	mov	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80012da:	2115      	movs	r1, #21
 80012dc:	6838      	ldr	r0, [r7, #0]
 80012de:	f7ff ff3f 	bl	8001160 <u8g2_font_get_word>
 80012e2:	4603      	mov	r3, r0
 80012e4:	461a      	mov	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	82da      	strh	r2, [r3, #22]
#endif
}
 80012ea:	bf00      	nop
 80012ec:	3708      	adds	r7, #8
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}

080012f2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80012f2:	b480      	push	{r7}
 80012f4:	b085      	sub	sp, #20
 80012f6:	af00      	add	r7, sp, #0
 80012f8:	6078      	str	r0, [r7, #4]
 80012fa:	460b      	mov	r3, r1
 80012fc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	7b1b      	ldrb	r3, [r3, #12]
 8001302:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	781b      	ldrb	r3, [r3, #0]
 800130a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800130c:	7bfa      	ldrb	r2, [r7, #15]
 800130e:	7b7b      	ldrb	r3, [r7, #13]
 8001310:	fa42 f303 	asr.w	r3, r2, r3
 8001314:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001316:	7b7b      	ldrb	r3, [r7, #13]
 8001318:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800131a:	7bba      	ldrb	r2, [r7, #14]
 800131c:	78fb      	ldrb	r3, [r7, #3]
 800131e:	4413      	add	r3, r2
 8001320:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001322:	7bbb      	ldrb	r3, [r7, #14]
 8001324:	2b07      	cmp	r3, #7
 8001326:	d91a      	bls.n	800135e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001328:	2308      	movs	r3, #8
 800132a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800132c:	7b3a      	ldrb	r2, [r7, #12]
 800132e:	7b7b      	ldrb	r3, [r7, #13]
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	1c5a      	adds	r2, r3, #1
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	781b      	ldrb	r3, [r3, #0]
 8001344:	461a      	mov	r2, r3
 8001346:	7b3b      	ldrb	r3, [r7, #12]
 8001348:	fa02 f303 	lsl.w	r3, r2, r3
 800134c:	b25a      	sxtb	r2, r3
 800134e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001352:	4313      	orrs	r3, r2
 8001354:	b25b      	sxtb	r3, r3
 8001356:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001358:	7bbb      	ldrb	r3, [r7, #14]
 800135a:	3b08      	subs	r3, #8
 800135c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800135e:	78fb      	ldrb	r3, [r7, #3]
 8001360:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001364:	fa02 f303 	lsl.w	r3, r2, r3
 8001368:	b2db      	uxtb	r3, r3
 800136a:	43db      	mvns	r3, r3
 800136c:	b2da      	uxtb	r2, r3
 800136e:	7bfb      	ldrb	r3, [r7, #15]
 8001370:	4013      	ands	r3, r2
 8001372:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	7bba      	ldrb	r2, [r7, #14]
 8001378:	731a      	strb	r2, [r3, #12]
  return val;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
}
 800137c:	4618      	mov	r0, r3
 800137e:	3714      	adds	r7, #20
 8001380:	46bd      	mov	sp, r7
 8001382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001386:	4770      	bx	lr

08001388 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
 8001390:	460b      	mov	r3, r1
 8001392:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001394:	78fb      	ldrb	r3, [r7, #3]
 8001396:	4619      	mov	r1, r3
 8001398:	6878      	ldr	r0, [r7, #4]
 800139a:	f7ff ffaa 	bl	80012f2 <u8g2_font_decode_get_unsigned_bits>
 800139e:	4603      	mov	r3, r0
 80013a0:	73fb      	strb	r3, [r7, #15]
  d = 1;
 80013a2:	2301      	movs	r3, #1
 80013a4:	73bb      	strb	r3, [r7, #14]
  cnt--;
 80013a6:	78fb      	ldrb	r3, [r7, #3]
 80013a8:	3b01      	subs	r3, #1
 80013aa:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 80013ac:	f997 200e 	ldrsb.w	r2, [r7, #14]
 80013b0:	78fb      	ldrb	r3, [r7, #3]
 80013b2:	fa02 f303 	lsl.w	r3, r2, r3
 80013b6:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80013b8:	7bfa      	ldrb	r2, [r7, #15]
 80013ba:	7bbb      	ldrb	r3, [r7, #14]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	73fb      	strb	r3, [r7, #15]
  return v;
 80013c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80013c6:	4618      	mov	r0, r3
 80013c8:	3710      	adds	r7, #16
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}

080013ce <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80013ce:	b490      	push	{r4, r7}
 80013d0:	b082      	sub	sp, #8
 80013d2:	af00      	add	r7, sp, #0
 80013d4:	4604      	mov	r4, r0
 80013d6:	4608      	mov	r0, r1
 80013d8:	4611      	mov	r1, r2
 80013da:	461a      	mov	r2, r3
 80013dc:	4623      	mov	r3, r4
 80013de:	80fb      	strh	r3, [r7, #6]
 80013e0:	4603      	mov	r3, r0
 80013e2:	717b      	strb	r3, [r7, #5]
 80013e4:	460b      	mov	r3, r1
 80013e6:	713b      	strb	r3, [r7, #4]
 80013e8:	4613      	mov	r3, r2
 80013ea:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80013ec:	78fb      	ldrb	r3, [r7, #3]
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d014      	beq.n	800141c <u8g2_add_vector_y+0x4e>
 80013f2:	2b02      	cmp	r3, #2
 80013f4:	dc19      	bgt.n	800142a <u8g2_add_vector_y+0x5c>
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d002      	beq.n	8001400 <u8g2_add_vector_y+0x32>
 80013fa:	2b01      	cmp	r3, #1
 80013fc:	d007      	beq.n	800140e <u8g2_add_vector_y+0x40>
 80013fe:	e014      	b.n	800142a <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001400:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001404:	b29a      	uxth	r2, r3
 8001406:	88fb      	ldrh	r3, [r7, #6]
 8001408:	4413      	add	r3, r2
 800140a:	80fb      	strh	r3, [r7, #6]
      break;
 800140c:	e014      	b.n	8001438 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800140e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001412:	b29a      	uxth	r2, r3
 8001414:	88fb      	ldrh	r3, [r7, #6]
 8001416:	4413      	add	r3, r2
 8001418:	80fb      	strh	r3, [r7, #6]
      break;
 800141a:	e00d      	b.n	8001438 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800141c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001420:	b29b      	uxth	r3, r3
 8001422:	88fa      	ldrh	r2, [r7, #6]
 8001424:	1ad3      	subs	r3, r2, r3
 8001426:	80fb      	strh	r3, [r7, #6]
      break;
 8001428:	e006      	b.n	8001438 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800142a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800142e:	b29b      	uxth	r3, r3
 8001430:	88fa      	ldrh	r2, [r7, #6]
 8001432:	1ad3      	subs	r3, r2, r3
 8001434:	80fb      	strh	r3, [r7, #6]
      break;      
 8001436:	bf00      	nop
  }
  return dy;
 8001438:	88fb      	ldrh	r3, [r7, #6]
}
 800143a:	4618      	mov	r0, r3
 800143c:	3708      	adds	r7, #8
 800143e:	46bd      	mov	sp, r7
 8001440:	bc90      	pop	{r4, r7}
 8001442:	4770      	bx	lr

08001444 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001444:	b490      	push	{r4, r7}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	4604      	mov	r4, r0
 800144c:	4608      	mov	r0, r1
 800144e:	4611      	mov	r1, r2
 8001450:	461a      	mov	r2, r3
 8001452:	4623      	mov	r3, r4
 8001454:	80fb      	strh	r3, [r7, #6]
 8001456:	4603      	mov	r3, r0
 8001458:	717b      	strb	r3, [r7, #5]
 800145a:	460b      	mov	r3, r1
 800145c:	713b      	strb	r3, [r7, #4]
 800145e:	4613      	mov	r3, r2
 8001460:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001462:	78fb      	ldrb	r3, [r7, #3]
 8001464:	2b02      	cmp	r3, #2
 8001466:	d014      	beq.n	8001492 <u8g2_add_vector_x+0x4e>
 8001468:	2b02      	cmp	r3, #2
 800146a:	dc19      	bgt.n	80014a0 <u8g2_add_vector_x+0x5c>
 800146c:	2b00      	cmp	r3, #0
 800146e:	d002      	beq.n	8001476 <u8g2_add_vector_x+0x32>
 8001470:	2b01      	cmp	r3, #1
 8001472:	d007      	beq.n	8001484 <u8g2_add_vector_x+0x40>
 8001474:	e014      	b.n	80014a0 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8001476:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800147a:	b29a      	uxth	r2, r3
 800147c:	88fb      	ldrh	r3, [r7, #6]
 800147e:	4413      	add	r3, r2
 8001480:	80fb      	strh	r3, [r7, #6]
      break;
 8001482:	e014      	b.n	80014ae <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8001484:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001488:	b29b      	uxth	r3, r3
 800148a:	88fa      	ldrh	r2, [r7, #6]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	80fb      	strh	r3, [r7, #6]
      break;
 8001490:	e00d      	b.n	80014ae <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8001492:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001496:	b29b      	uxth	r3, r3
 8001498:	88fa      	ldrh	r2, [r7, #6]
 800149a:	1ad3      	subs	r3, r2, r3
 800149c:	80fb      	strh	r3, [r7, #6]
      break;
 800149e:	e006      	b.n	80014ae <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 80014a0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80014a4:	b29a      	uxth	r2, r3
 80014a6:	88fb      	ldrh	r3, [r7, #6]
 80014a8:	4413      	add	r3, r2
 80014aa:	80fb      	strh	r3, [r7, #6]
      break;      
 80014ac:	bf00      	nop
  }
  return dx;
 80014ae:	88fb      	ldrh	r3, [r7, #6]
}
 80014b0:	4618      	mov	r0, r3
 80014b2:	3708      	adds	r7, #8
 80014b4:	46bd      	mov	sp, r7
 80014b6:	bc90      	pop	{r4, r7}
 80014b8:	4770      	bx	lr

080014ba <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80014ba:	b580      	push	{r7, lr}
 80014bc:	b088      	sub	sp, #32
 80014be:	af02      	add	r7, sp, #8
 80014c0:	6078      	str	r0, [r7, #4]
 80014c2:	460b      	mov	r3, r1
 80014c4:	70fb      	strb	r3, [r7, #3]
 80014c6:	4613      	mov	r3, r2
 80014c8:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3360      	adds	r3, #96	; 0x60
 80014ce:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80014da:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80014e2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80014e4:	693b      	ldr	r3, [r7, #16]
 80014e6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80014ea:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80014ec:	7bfa      	ldrb	r2, [r7, #15]
 80014ee:	7d7b      	ldrb	r3, [r7, #21]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80014f4:	7bfb      	ldrb	r3, [r7, #15]
 80014f6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80014f8:	7dfa      	ldrb	r2, [r7, #23]
 80014fa:	7bfb      	ldrb	r3, [r7, #15]
 80014fc:	429a      	cmp	r2, r3
 80014fe:	d201      	bcs.n	8001504 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001500:	7dfb      	ldrb	r3, [r7, #23]
 8001502:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001504:	693b      	ldr	r3, [r7, #16]
 8001506:	889b      	ldrh	r3, [r3, #4]
 8001508:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800150a:	693b      	ldr	r3, [r7, #16]
 800150c:	88db      	ldrh	r3, [r3, #6]
 800150e:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001510:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001514:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	7c1b      	ldrb	r3, [r3, #16]
 800151c:	89b8      	ldrh	r0, [r7, #12]
 800151e:	f7ff ff91 	bl	8001444 <u8g2_add_vector_x>
 8001522:	4603      	mov	r3, r0
 8001524:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001526:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800152a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800152e:	693b      	ldr	r3, [r7, #16]
 8001530:	7c1b      	ldrb	r3, [r3, #16]
 8001532:	8978      	ldrh	r0, [r7, #10]
 8001534:	f7ff ff4b 	bl	80013ce <u8g2_add_vector_y>
 8001538:	4603      	mov	r3, r0
 800153a:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800153c:	78bb      	ldrb	r3, [r7, #2]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d010      	beq.n	8001564 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	7b9a      	ldrb	r2, [r3, #14]
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800154c:	7dbb      	ldrb	r3, [r7, #22]
 800154e:	b298      	uxth	r0, r3
 8001550:	693b      	ldr	r3, [r7, #16]
 8001552:	7c1b      	ldrb	r3, [r3, #16]
 8001554:	897a      	ldrh	r2, [r7, #10]
 8001556:	89b9      	ldrh	r1, [r7, #12]
 8001558:	9300      	str	r3, [sp, #0]
 800155a:	4603      	mov	r3, r0
 800155c:	6878      	ldr	r0, [r7, #4]
 800155e:	f000 fbfe 	bl	8001d5e <u8g2_DrawHVLine>
 8001562:	e013      	b.n	800158c <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	7b5b      	ldrb	r3, [r3, #13]
 8001568:	2b00      	cmp	r3, #0
 800156a:	d10f      	bne.n	800158c <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800156c:	693b      	ldr	r3, [r7, #16]
 800156e:	7bda      	ldrb	r2, [r3, #15]
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8001576:	7dbb      	ldrb	r3, [r7, #22]
 8001578:	b298      	uxth	r0, r3
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	7c1b      	ldrb	r3, [r3, #16]
 800157e:	897a      	ldrh	r2, [r7, #10]
 8001580:	89b9      	ldrh	r1, [r7, #12]
 8001582:	9300      	str	r3, [sp, #0]
 8001584:	4603      	mov	r3, r0
 8001586:	6878      	ldr	r0, [r7, #4]
 8001588:	f000 fbe9 	bl	8001d5e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800158c:	7dfa      	ldrb	r2, [r7, #23]
 800158e:	7bfb      	ldrb	r3, [r7, #15]
 8001590:	429a      	cmp	r2, r3
 8001592:	d309      	bcc.n	80015a8 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001594:	7dfa      	ldrb	r2, [r7, #23]
 8001596:	7bfb      	ldrb	r3, [r7, #15]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800159c:	2300      	movs	r3, #0
 800159e:	757b      	strb	r3, [r7, #21]
    ly++;
 80015a0:	7d3b      	ldrb	r3, [r7, #20]
 80015a2:	3301      	adds	r3, #1
 80015a4:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 80015a6:	e79d      	b.n	80014e4 <u8g2_font_decode_len+0x2a>
      break;
 80015a8:	bf00      	nop
  }
  lx += cnt;
 80015aa:	7d7a      	ldrb	r2, [r7, #21]
 80015ac:	7dfb      	ldrb	r3, [r7, #23]
 80015ae:	4413      	add	r3, r2
 80015b0:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 80015b2:	f997 2015 	ldrsb.w	r2, [r7, #21]
 80015b6:	693b      	ldr	r3, [r7, #16]
 80015b8:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80015ba:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	725a      	strb	r2, [r3, #9]
}
 80015c2:	bf00      	nop
 80015c4:	3718      	adds	r7, #24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}

080015ca <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b084      	sub	sp, #16
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	3360      	adds	r3, #96	; 0x60
 80015d8:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	683a      	ldr	r2, [r7, #0]
 80015de:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2200      	movs	r2, #0
 80015e4:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80015ec:	4619      	mov	r1, r3
 80015ee:	68f8      	ldr	r0, [r7, #12]
 80015f0:	f7ff fe7f 	bl	80012f2 <u8g2_font_decode_get_unsigned_bits>
 80015f4:	4603      	mov	r3, r0
 80015f6:	b25a      	sxtb	r2, r3
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001602:	4619      	mov	r1, r3
 8001604:	68f8      	ldr	r0, [r7, #12]
 8001606:	f7ff fe74 	bl	80012f2 <u8g2_font_decode_get_unsigned_bits>
 800160a:	4603      	mov	r3, r0
 800160c:	b25a      	sxtb	r2, r3
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001618:	68fb      	ldr	r3, [r7, #12]
 800161a:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	7b9b      	ldrb	r3, [r3, #14]
 8001620:	2b00      	cmp	r3, #0
 8001622:	bf0c      	ite	eq
 8001624:	2301      	moveq	r3, #1
 8001626:	2300      	movne	r3, #0
 8001628:	b2db      	uxtb	r3, r3
 800162a:	461a      	mov	r2, r3
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	73da      	strb	r2, [r3, #15]
}
 8001630:	bf00      	nop
 8001632:	3710      	adds	r7, #16
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}

08001638 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b08a      	sub	sp, #40	; 0x28
 800163c:	af02      	add	r7, sp, #8
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	3360      	adds	r3, #96	; 0x60
 8001646:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8001648:	6839      	ldr	r1, [r7, #0]
 800164a:	6878      	ldr	r0, [r7, #4]
 800164c:	f7ff ffbd 	bl	80015ca <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001656:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800165e:	4619      	mov	r1, r3
 8001660:	6978      	ldr	r0, [r7, #20]
 8001662:	f7ff fe91 	bl	8001388 <u8g2_font_decode_get_signed_bits>
 8001666:	4603      	mov	r3, r0
 8001668:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001670:	4619      	mov	r1, r3
 8001672:	6978      	ldr	r0, [r7, #20]
 8001674:	f7ff fe88 	bl	8001388 <u8g2_font_decode_get_signed_bits>
 8001678:	4603      	mov	r3, r0
 800167a:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001682:	4619      	mov	r1, r3
 8001684:	6978      	ldr	r0, [r7, #20]
 8001686:	f7ff fe7f 	bl	8001388 <u8g2_font_decode_get_signed_bits>
 800168a:	4603      	mov	r3, r0
 800168c:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001694:	2b00      	cmp	r3, #0
 8001696:	f340 80d7 	ble.w	8001848 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800169a:	697b      	ldr	r3, [r7, #20]
 800169c:	8898      	ldrh	r0, [r3, #4]
 800169e:	7cfa      	ldrb	r2, [r7, #19]
 80016a0:	7c7b      	ldrb	r3, [r7, #17]
 80016a2:	4413      	add	r3, r2
 80016a4:	b2db      	uxtb	r3, r3
 80016a6:	425b      	negs	r3, r3
 80016a8:	b2db      	uxtb	r3, r3
 80016aa:	b25a      	sxtb	r2, r3
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	7c1b      	ldrb	r3, [r3, #16]
 80016b0:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80016b4:	f7ff fec6 	bl	8001444 <u8g2_add_vector_x>
 80016b8:	4603      	mov	r3, r0
 80016ba:	461a      	mov	r2, r3
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 80016c0:	697b      	ldr	r3, [r7, #20]
 80016c2:	88d8      	ldrh	r0, [r3, #6]
 80016c4:	7cfa      	ldrb	r2, [r7, #19]
 80016c6:	7c7b      	ldrb	r3, [r7, #17]
 80016c8:	4413      	add	r3, r2
 80016ca:	b2db      	uxtb	r3, r3
 80016cc:	425b      	negs	r3, r3
 80016ce:	b2db      	uxtb	r3, r3
 80016d0:	b25a      	sxtb	r2, r3
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	7c1b      	ldrb	r3, [r3, #16]
 80016d6:	f997 1012 	ldrsb.w	r1, [r7, #18]
 80016da:	f7ff fe78 	bl	80013ce <u8g2_add_vector_y>
 80016de:	4603      	mov	r3, r0
 80016e0:	461a      	mov	r2, r3
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	889b      	ldrh	r3, [r3, #4]
 80016ea:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	88db      	ldrh	r3, [r3, #6]
 80016f0:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80016f2:	8bfb      	ldrh	r3, [r7, #30]
 80016f4:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80016f6:	8b7b      	ldrh	r3, [r7, #26]
 80016f8:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	7c1b      	ldrb	r3, [r3, #16]
 80016fe:	2b03      	cmp	r3, #3
 8001700:	d85a      	bhi.n	80017b8 <u8g2_font_decode_glyph+0x180>
 8001702:	a201      	add	r2, pc, #4	; (adr r2, 8001708 <u8g2_font_decode_glyph+0xd0>)
 8001704:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001708:	08001719 	.word	0x08001719
 800170c:	08001735 	.word	0x08001735
 8001710:	0800175d 	.word	0x0800175d
 8001714:	08001791 	.word	0x08001791
      {
	case 0:
	    x1 += decode->glyph_width;
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800171e:	b29a      	uxth	r2, r3
 8001720:	8bbb      	ldrh	r3, [r7, #28]
 8001722:	4413      	add	r3, r2
 8001724:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001726:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800172a:	b29a      	uxth	r2, r3
 800172c:	8b3b      	ldrh	r3, [r7, #24]
 800172e:	4413      	add	r3, r2
 8001730:	833b      	strh	r3, [r7, #24]
	    break;
 8001732:	e041      	b.n	80017b8 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001734:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001738:	b29b      	uxth	r3, r3
 800173a:	8bfa      	ldrh	r2, [r7, #30]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001740:	8bfb      	ldrh	r3, [r7, #30]
 8001742:	3301      	adds	r3, #1
 8001744:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001746:	8bbb      	ldrh	r3, [r7, #28]
 8001748:	3301      	adds	r3, #1
 800174a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001752:	b29a      	uxth	r2, r3
 8001754:	8b3b      	ldrh	r3, [r7, #24]
 8001756:	4413      	add	r3, r2
 8001758:	833b      	strh	r3, [r7, #24]
	    break;
 800175a:	e02d      	b.n	80017b8 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001762:	b29b      	uxth	r3, r3
 8001764:	8bfa      	ldrh	r2, [r7, #30]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800176a:	8bfb      	ldrh	r3, [r7, #30]
 800176c:	3301      	adds	r3, #1
 800176e:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001770:	8bbb      	ldrh	r3, [r7, #28]
 8001772:	3301      	adds	r3, #1
 8001774:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001776:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800177a:	b29b      	uxth	r3, r3
 800177c:	8b7a      	ldrh	r2, [r7, #26]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001782:	8b7b      	ldrh	r3, [r7, #26]
 8001784:	3301      	adds	r3, #1
 8001786:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001788:	8b3b      	ldrh	r3, [r7, #24]
 800178a:	3301      	adds	r3, #1
 800178c:	833b      	strh	r3, [r7, #24]
	    break;	  
 800178e:	e013      	b.n	80017b8 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001790:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001794:	b29a      	uxth	r2, r3
 8001796:	8bbb      	ldrh	r3, [r7, #28]
 8001798:	4413      	add	r3, r2
 800179a:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80017a2:	b29b      	uxth	r3, r3
 80017a4:	8b7a      	ldrh	r2, [r7, #26]
 80017a6:	1ad3      	subs	r3, r2, r3
 80017a8:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80017aa:	8b7b      	ldrh	r3, [r7, #26]
 80017ac:	3301      	adds	r3, #1
 80017ae:	837b      	strh	r3, [r7, #26]
	    y1++;
 80017b0:	8b3b      	ldrh	r3, [r7, #24]
 80017b2:	3301      	adds	r3, #1
 80017b4:	833b      	strh	r3, [r7, #24]
	    break;	  
 80017b6:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 80017b8:	8bb8      	ldrh	r0, [r7, #28]
 80017ba:	8b7a      	ldrh	r2, [r7, #26]
 80017bc:	8bf9      	ldrh	r1, [r7, #30]
 80017be:	8b3b      	ldrh	r3, [r7, #24]
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	4603      	mov	r3, r0
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 fb88 	bl	8001eda <u8g2_IsIntersection>
 80017ca:	4603      	mov	r3, r0
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d102      	bne.n	80017d6 <u8g2_font_decode_glyph+0x19e>
	return d;
 80017d0:	f997 3010 	ldrsb.w	r3, [r7, #16]
 80017d4:	e03a      	b.n	800184c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 80017d6:	697b      	ldr	r3, [r7, #20]
 80017d8:	2200      	movs	r2, #0
 80017da:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 80017dc:	697b      	ldr	r3, [r7, #20]
 80017de:	2200      	movs	r2, #0
 80017e0:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80017e8:	4619      	mov	r1, r3
 80017ea:	6978      	ldr	r0, [r7, #20]
 80017ec:	f7ff fd81 	bl	80012f2 <u8g2_font_decode_get_unsigned_bits>
 80017f0:	4603      	mov	r3, r0
 80017f2:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80017fa:	4619      	mov	r1, r3
 80017fc:	6978      	ldr	r0, [r7, #20]
 80017fe:	f7ff fd78 	bl	80012f2 <u8g2_font_decode_get_unsigned_bits>
 8001802:	4603      	mov	r3, r0
 8001804:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001806:	7bfb      	ldrb	r3, [r7, #15]
 8001808:	2200      	movs	r2, #0
 800180a:	4619      	mov	r1, r3
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff fe54 	bl	80014ba <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001812:	7bbb      	ldrb	r3, [r7, #14]
 8001814:	2201      	movs	r2, #1
 8001816:	4619      	mov	r1, r3
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f7ff fe4e 	bl	80014ba <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800181e:	2101      	movs	r1, #1
 8001820:	6978      	ldr	r0, [r7, #20]
 8001822:	f7ff fd66 	bl	80012f2 <u8g2_font_decode_get_unsigned_bits>
 8001826:	4603      	mov	r3, r0
 8001828:	2b00      	cmp	r3, #0
 800182a:	d1ec      	bne.n	8001806 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 800182c:	697b      	ldr	r3, [r7, #20]
 800182e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001832:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001836:	429a      	cmp	r2, r3
 8001838:	dd00      	ble.n	800183c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800183a:	e7d2      	b.n	80017e2 <u8g2_font_decode_glyph+0x1aa>
	break;
 800183c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800183e:	697b      	ldr	r3, [r7, #20]
 8001840:	7b9a      	ldrb	r2, [r3, #14]
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8001848:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 800184c:	4618      	mov	r0, r3
 800184e:	3720      	adds	r7, #32
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	6078      	str	r0, [r7, #4]
 800185c:	460b      	mov	r3, r1
 800185e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001864:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	3317      	adds	r3, #23
 800186a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 800186c:	887b      	ldrh	r3, [r7, #2]
 800186e:	2bff      	cmp	r3, #255	; 0xff
 8001870:	d82a      	bhi.n	80018c8 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001872:	887b      	ldrh	r3, [r7, #2]
 8001874:	2b60      	cmp	r3, #96	; 0x60
 8001876:	d907      	bls.n	8001888 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800187e:	461a      	mov	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	4413      	add	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
 8001886:	e009      	b.n	800189c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001888:	887b      	ldrh	r3, [r7, #2]
 800188a:	2b40      	cmp	r3, #64	; 0x40
 800188c:	d906      	bls.n	800189c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001894:	461a      	mov	r2, r3
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	4413      	add	r3, r2
 800189a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	3301      	adds	r3, #1
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d04e      	beq.n	8001944 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	781b      	ldrb	r3, [r3, #0]
 80018aa:	b29b      	uxth	r3, r3
 80018ac:	887a      	ldrh	r2, [r7, #2]
 80018ae:	429a      	cmp	r2, r3
 80018b0:	d102      	bne.n	80018b8 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 80018b2:	697b      	ldr	r3, [r7, #20]
 80018b4:	3302      	adds	r3, #2
 80018b6:	e049      	b.n	800194c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	3301      	adds	r3, #1
 80018bc:	781b      	ldrb	r3, [r3, #0]
 80018be:	461a      	mov	r2, r3
 80018c0:	697b      	ldr	r3, [r7, #20]
 80018c2:	4413      	add	r3, r2
 80018c4:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80018c6:	e7e9      	b.n	800189c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 80018ce:	461a      	mov	r2, r3
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	4413      	add	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 80018da:	2100      	movs	r1, #0
 80018dc:	6938      	ldr	r0, [r7, #16]
 80018de:	f7ff fc3f 	bl	8001160 <u8g2_font_get_word>
 80018e2:	4603      	mov	r3, r0
 80018e4:	461a      	mov	r2, r3
 80018e6:	697b      	ldr	r3, [r7, #20]
 80018e8:	4413      	add	r3, r2
 80018ea:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80018ec:	2102      	movs	r1, #2
 80018ee:	6938      	ldr	r0, [r7, #16]
 80018f0:	f7ff fc36 	bl	8001160 <u8g2_font_get_word>
 80018f4:	4603      	mov	r3, r0
 80018f6:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	3304      	adds	r3, #4
 80018fc:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80018fe:	89fa      	ldrh	r2, [r7, #14]
 8001900:	887b      	ldrh	r3, [r7, #2]
 8001902:	429a      	cmp	r2, r3
 8001904:	d3e9      	bcc.n	80018da <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800190c:	89fb      	ldrh	r3, [r7, #14]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3301      	adds	r3, #1
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	b29a      	uxth	r2, r3
 800191a:	89fb      	ldrh	r3, [r7, #14]
 800191c:	4313      	orrs	r3, r2
 800191e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001920:	89fb      	ldrh	r3, [r7, #14]
 8001922:	2b00      	cmp	r3, #0
 8001924:	d010      	beq.n	8001948 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001926:	89fa      	ldrh	r2, [r7, #14]
 8001928:	887b      	ldrh	r3, [r7, #2]
 800192a:	429a      	cmp	r2, r3
 800192c:	d102      	bne.n	8001934 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800192e:	697b      	ldr	r3, [r7, #20]
 8001930:	3303      	adds	r3, #3
 8001932:	e00b      	b.n	800194c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	3302      	adds	r3, #2
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	461a      	mov	r2, r3
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	4413      	add	r3, r2
 8001940:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001942:	e7e0      	b.n	8001906 <u8g2_font_get_glyph_data+0xb2>
	break;
 8001944:	bf00      	nop
 8001946:	e000      	b.n	800194a <u8g2_font_get_glyph_data+0xf6>
	break;
 8001948:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800194a:	2300      	movs	r3, #0
}
 800194c:	4618      	mov	r0, r3
 800194e:	3718      	adds	r7, #24
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}

08001954 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001954:	b580      	push	{r7, lr}
 8001956:	b086      	sub	sp, #24
 8001958:	af00      	add	r7, sp, #0
 800195a:	60f8      	str	r0, [r7, #12]
 800195c:	4608      	mov	r0, r1
 800195e:	4611      	mov	r1, r2
 8001960:	461a      	mov	r2, r3
 8001962:	4603      	mov	r3, r0
 8001964:	817b      	strh	r3, [r7, #10]
 8001966:	460b      	mov	r3, r1
 8001968:	813b      	strh	r3, [r7, #8]
 800196a:	4613      	mov	r3, r2
 800196c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800196e:	2300      	movs	r3, #0
 8001970:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	897a      	ldrh	r2, [r7, #10]
 8001976:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	893a      	ldrh	r2, [r7, #8]
 800197e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001982:	88fb      	ldrh	r3, [r7, #6]
 8001984:	4619      	mov	r1, r3
 8001986:	68f8      	ldr	r0, [r7, #12]
 8001988:	f7ff ff64 	bl	8001854 <u8g2_font_get_glyph_data>
 800198c:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	2b00      	cmp	r3, #0
 8001992:	d005      	beq.n	80019a0 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001994:	6939      	ldr	r1, [r7, #16]
 8001996:	68f8      	ldr	r0, [r7, #12]
 8001998:	f7ff fe4e 	bl	8001638 <u8g2_font_decode_glyph>
 800199c:	4603      	mov	r3, r0
 800199e:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 80019a0:	8afb      	ldrh	r3, [r7, #22]
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3718      	adds	r7, #24
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80019ac:	b580      	push	{r7, lr}
 80019ae:	b084      	sub	sp, #16
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	4608      	mov	r0, r1
 80019b6:	4611      	mov	r1, r2
 80019b8:	461a      	mov	r2, r3
 80019ba:	4603      	mov	r3, r0
 80019bc:	817b      	strh	r3, [r7, #10]
 80019be:	460b      	mov	r3, r1
 80019c0:	813b      	strh	r3, [r7, #8]
 80019c2:	4613      	mov	r3, r2
 80019c4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d833      	bhi.n	8001a38 <u8g2_DrawGlyph+0x8c>
 80019d0:	a201      	add	r2, pc, #4	; (adr r2, 80019d8 <u8g2_DrawGlyph+0x2c>)
 80019d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019d6:	bf00      	nop
 80019d8:	080019e9 	.word	0x080019e9
 80019dc:	080019fd 	.word	0x080019fd
 80019e0:	08001a11 	.word	0x08001a11
 80019e4:	08001a25 	.word	0x08001a25
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80019e8:	68fb      	ldr	r3, [r7, #12]
 80019ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	4798      	blx	r3
 80019f0:	4603      	mov	r3, r0
 80019f2:	461a      	mov	r2, r3
 80019f4:	893b      	ldrh	r3, [r7, #8]
 80019f6:	4413      	add	r3, r2
 80019f8:	813b      	strh	r3, [r7, #8]
      break;
 80019fa:	e01d      	b.n	8001a38 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80019fc:	68fb      	ldr	r3, [r7, #12]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a00:	68f8      	ldr	r0, [r7, #12]
 8001a02:	4798      	blx	r3
 8001a04:	4603      	mov	r3, r0
 8001a06:	461a      	mov	r2, r3
 8001a08:	897b      	ldrh	r3, [r7, #10]
 8001a0a:	1a9b      	subs	r3, r3, r2
 8001a0c:	817b      	strh	r3, [r7, #10]
      break;
 8001a0e:	e013      	b.n	8001a38 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a14:	68f8      	ldr	r0, [r7, #12]
 8001a16:	4798      	blx	r3
 8001a18:	4603      	mov	r3, r0
 8001a1a:	461a      	mov	r2, r3
 8001a1c:	893b      	ldrh	r3, [r7, #8]
 8001a1e:	1a9b      	subs	r3, r3, r2
 8001a20:	813b      	strh	r3, [r7, #8]
      break;
 8001a22:	e009      	b.n	8001a38 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001a24:	68fb      	ldr	r3, [r7, #12]
 8001a26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a28:	68f8      	ldr	r0, [r7, #12]
 8001a2a:	4798      	blx	r3
 8001a2c:	4603      	mov	r3, r0
 8001a2e:	461a      	mov	r2, r3
 8001a30:	897b      	ldrh	r3, [r7, #10]
 8001a32:	4413      	add	r3, r2
 8001a34:	817b      	strh	r3, [r7, #10]
      break;
 8001a36:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001a38:	88fb      	ldrh	r3, [r7, #6]
 8001a3a:	893a      	ldrh	r2, [r7, #8]
 8001a3c:	8979      	ldrh	r1, [r7, #10]
 8001a3e:	68f8      	ldr	r0, [r7, #12]
 8001a40:	f7ff ff88 	bl	8001954 <u8g2_font_draw_glyph>
 8001a44:	4603      	mov	r3, r0
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3710      	adds	r7, #16
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop

08001a50 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b086      	sub	sp, #24
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	60f8      	str	r0, [r7, #12]
 8001a58:	607b      	str	r3, [r7, #4]
 8001a5a:	460b      	mov	r3, r1
 8001a5c:	817b      	strh	r3, [r7, #10]
 8001a5e:	4613      	mov	r3, r2
 8001a60:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f000 fc6a 	bl	800233c <u8x8_utf8_init>
  sum = 0;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	687a      	ldr	r2, [r7, #4]
 8001a72:	7812      	ldrb	r2, [r2, #0]
 8001a74:	4611      	mov	r1, r2
 8001a76:	68f8      	ldr	r0, [r7, #12]
 8001a78:	4798      	blx	r3
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001a7e:	8abb      	ldrh	r3, [r7, #20]
 8001a80:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d038      	beq.n	8001afa <u8g2_draw_string+0xaa>
      break;
    str++;
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3301      	adds	r3, #1
 8001a8c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001a8e:	8abb      	ldrh	r3, [r7, #20]
 8001a90:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a94:	4293      	cmp	r3, r2
 8001a96:	d0e9      	beq.n	8001a6c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001a98:	8abb      	ldrh	r3, [r7, #20]
 8001a9a:	893a      	ldrh	r2, [r7, #8]
 8001a9c:	8979      	ldrh	r1, [r7, #10]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7ff ff84 	bl	80019ac <u8g2_DrawGlyph>
 8001aa4:	4603      	mov	r3, r0
 8001aa6:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d81e      	bhi.n	8001af0 <u8g2_draw_string+0xa0>
 8001ab2:	a201      	add	r2, pc, #4	; (adr r2, 8001ab8 <u8g2_draw_string+0x68>)
 8001ab4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab8:	08001ac9 	.word	0x08001ac9
 8001abc:	08001ad3 	.word	0x08001ad3
 8001ac0:	08001add 	.word	0x08001add
 8001ac4:	08001ae7 	.word	0x08001ae7
      {
	case 0:
	  x += delta;
 8001ac8:	897a      	ldrh	r2, [r7, #10]
 8001aca:	8a7b      	ldrh	r3, [r7, #18]
 8001acc:	4413      	add	r3, r2
 8001ace:	817b      	strh	r3, [r7, #10]
	  break;
 8001ad0:	e00e      	b.n	8001af0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001ad2:	893a      	ldrh	r2, [r7, #8]
 8001ad4:	8a7b      	ldrh	r3, [r7, #18]
 8001ad6:	4413      	add	r3, r2
 8001ad8:	813b      	strh	r3, [r7, #8]
	  break;
 8001ada:	e009      	b.n	8001af0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001adc:	897a      	ldrh	r2, [r7, #10]
 8001ade:	8a7b      	ldrh	r3, [r7, #18]
 8001ae0:	1ad3      	subs	r3, r2, r3
 8001ae2:	817b      	strh	r3, [r7, #10]
	  break;
 8001ae4:	e004      	b.n	8001af0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001ae6:	893a      	ldrh	r2, [r7, #8]
 8001ae8:	8a7b      	ldrh	r3, [r7, #18]
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	813b      	strh	r3, [r7, #8]
	  break;
 8001aee:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001af0:	8afa      	ldrh	r2, [r7, #22]
 8001af2:	8a7b      	ldrh	r3, [r7, #18]
 8001af4:	4413      	add	r3, r2
 8001af6:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001af8:	e7b8      	b.n	8001a6c <u8g2_draw_string+0x1c>
      break;
 8001afa:	bf00      	nop
    }
  }
  return sum;
 8001afc:	8afb      	ldrh	r3, [r7, #22]
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3718      	adds	r7, #24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop

08001b08 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b084      	sub	sp, #16
 8001b0c:	af00      	add	r7, sp, #0
 8001b0e:	60f8      	str	r0, [r7, #12]
 8001b10:	607b      	str	r3, [r7, #4]
 8001b12:	460b      	mov	r3, r1
 8001b14:	817b      	strh	r3, [r7, #10]
 8001b16:	4613      	mov	r3, r2
 8001b18:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	4a06      	ldr	r2, [pc, #24]	; (8001b38 <u8g2_DrawStr+0x30>)
 8001b1e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001b20:	893a      	ldrh	r2, [r7, #8]
 8001b22:	8979      	ldrh	r1, [r7, #10]
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	68f8      	ldr	r0, [r7, #12]
 8001b28:	f7ff ff92 	bl	8001a50 <u8g2_draw_string>
 8001b2c:	4603      	mov	r3, r0
}
 8001b2e:	4618      	mov	r0, r3
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	08002359 	.word	0x08002359

08001b3c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001b3c:	b480      	push	{r7}
 8001b3e:	b083      	sub	sp, #12
 8001b40:	af00      	add	r7, sp, #0
 8001b42:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d05d      	beq.n	8001c08 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d04d      	beq.n	8001c0a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001b74:	2b01      	cmp	r3, #1
 8001b76:	d11c      	bne.n	8001bb2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8001b84:	429a      	cmp	r2, r3
 8001b86:	da05      	bge.n	8001b94 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8001ba0:	429a      	cmp	r2, r3
 8001ba2:	dd32      	ble.n	8001c0a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001bb0:	e02b      	b.n	8001c0a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8001bb8:	461a      	mov	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001bc8:	440b      	add	r3, r1
 8001bca:	429a      	cmp	r2, r3
 8001bcc:	da0d      	bge.n	8001bea <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001bd4:	b2da      	uxtb	r2, r3
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	4413      	add	r3, r2
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	b25a      	sxtb	r2, r3
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001bf6:	429a      	cmp	r2, r3
 8001bf8:	dd07      	ble.n	8001c0a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001c06:	e000      	b.n	8001c0a <u8g2_UpdateRefHeight+0xce>
    return;
 8001c08:	bf00      	nop
  }  
}
 8001c0a:	370c      	adds	r7, #12
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c12:	4770      	bx	lr

08001c14 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return 0;
 8001c1c:	2300      	movs	r3, #0
}
 8001c1e:	4618      	mov	r0, r3
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
	...

08001c2c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	4a04      	ldr	r2, [pc, #16]	; (8001c48 <u8g2_SetFontPosBaseline+0x1c>)
 8001c38:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c3a:	bf00      	nop
 8001c3c:	370c      	adds	r7, #12
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c44:	4770      	bx	lr
 8001c46:	bf00      	nop
 8001c48:	08001c15 	.word	0x08001c15

08001c4c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
 8001c54:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c5a:	683a      	ldr	r2, [r7, #0]
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d00b      	beq.n	8001c78 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	683a      	ldr	r2, [r7, #0]
 8001c64:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	3374      	adds	r3, #116	; 0x74
 8001c6a:	6839      	ldr	r1, [r7, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7ff fa97 	bl	80011a0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001c72:	6878      	ldr	r0, [r7, #4]
 8001c74:	f7ff ff62 	bl	8001b3c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}

08001c80 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b087      	sub	sp, #28
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	60f8      	str	r0, [r7, #12]
 8001c88:	60b9      	str	r1, [r7, #8]
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	460b      	mov	r3, r1
 8001c90:	80fb      	strh	r3, [r7, #6]
 8001c92:	4613      	mov	r3, r2
 8001c94:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001c9c:	8afb      	ldrh	r3, [r7, #22]
 8001c9e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001ca0:	68bb      	ldr	r3, [r7, #8]
 8001ca2:	881a      	ldrh	r2, [r3, #0]
 8001ca4:	8abb      	ldrh	r3, [r7, #20]
 8001ca6:	4413      	add	r3, r2
 8001ca8:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001caa:	8afa      	ldrh	r2, [r7, #22]
 8001cac:	8abb      	ldrh	r3, [r7, #20]
 8001cae:	429a      	cmp	r2, r3
 8001cb0:	d90b      	bls.n	8001cca <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001cb2:	8afa      	ldrh	r2, [r7, #22]
 8001cb4:	88bb      	ldrh	r3, [r7, #4]
 8001cb6:	429a      	cmp	r2, r3
 8001cb8:	d205      	bcs.n	8001cc6 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001cba:	88bb      	ldrh	r3, [r7, #4]
 8001cbc:	82bb      	strh	r3, [r7, #20]
      b--;
 8001cbe:	8abb      	ldrh	r3, [r7, #20]
 8001cc0:	3b01      	subs	r3, #1
 8001cc2:	82bb      	strh	r3, [r7, #20]
 8001cc4:	e001      	b.n	8001cca <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001cc6:	88fb      	ldrh	r3, [r7, #6]
 8001cc8:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001cca:	8afa      	ldrh	r2, [r7, #22]
 8001ccc:	88bb      	ldrh	r3, [r7, #4]
 8001cce:	429a      	cmp	r2, r3
 8001cd0:	d301      	bcc.n	8001cd6 <u8g2_clip_intersection2+0x56>
    return 0;
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	e01c      	b.n	8001d10 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001cd6:	8aba      	ldrh	r2, [r7, #20]
 8001cd8:	88fb      	ldrh	r3, [r7, #6]
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	d801      	bhi.n	8001ce2 <u8g2_clip_intersection2+0x62>
    return 0;
 8001cde:	2300      	movs	r3, #0
 8001ce0:	e016      	b.n	8001d10 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001ce2:	8afa      	ldrh	r2, [r7, #22]
 8001ce4:	88fb      	ldrh	r3, [r7, #6]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d201      	bcs.n	8001cee <u8g2_clip_intersection2+0x6e>
    a = c;
 8001cea:	88fb      	ldrh	r3, [r7, #6]
 8001cec:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8001cee:	8aba      	ldrh	r2, [r7, #20]
 8001cf0:	88bb      	ldrh	r3, [r7, #4]
 8001cf2:	429a      	cmp	r2, r3
 8001cf4:	d901      	bls.n	8001cfa <u8g2_clip_intersection2+0x7a>
    b = d;
 8001cf6:	88bb      	ldrh	r3, [r7, #4]
 8001cf8:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	8afa      	ldrh	r2, [r7, #22]
 8001cfe:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001d00:	8aba      	ldrh	r2, [r7, #20]
 8001d02:	8afb      	ldrh	r3, [r7, #22]
 8001d04:	1ad3      	subs	r3, r2, r3
 8001d06:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	8aba      	ldrh	r2, [r7, #20]
 8001d0c:	801a      	strh	r2, [r3, #0]
  return 1;
 8001d0e:	2301      	movs	r3, #1
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	371c      	adds	r7, #28
 8001d14:	46bd      	mov	sp, r7
 8001d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d1a:	4770      	bx	lr

08001d1c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001d1c:	b590      	push	{r4, r7, lr}
 8001d1e:	b087      	sub	sp, #28
 8001d20:	af02      	add	r7, sp, #8
 8001d22:	60f8      	str	r0, [r7, #12]
 8001d24:	4608      	mov	r0, r1
 8001d26:	4611      	mov	r1, r2
 8001d28:	461a      	mov	r2, r3
 8001d2a:	4603      	mov	r3, r0
 8001d2c:	817b      	strh	r3, [r7, #10]
 8001d2e:	460b      	mov	r3, r1
 8001d30:	813b      	strh	r3, [r7, #8]
 8001d32:	4613      	mov	r3, r2
 8001d34:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d3a:	893a      	ldrh	r2, [r7, #8]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001d44:	88f8      	ldrh	r0, [r7, #6]
 8001d46:	893a      	ldrh	r2, [r7, #8]
 8001d48:	8979      	ldrh	r1, [r7, #10]
 8001d4a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d4e:	9300      	str	r3, [sp, #0]
 8001d50:	4603      	mov	r3, r0
 8001d52:	68f8      	ldr	r0, [r7, #12]
 8001d54:	47a0      	blx	r4
}
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bd90      	pop	{r4, r7, pc}

08001d5e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001d5e:	b590      	push	{r4, r7, lr}
 8001d60:	b087      	sub	sp, #28
 8001d62:	af02      	add	r7, sp, #8
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	4608      	mov	r0, r1
 8001d68:	4611      	mov	r1, r2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	817b      	strh	r3, [r7, #10]
 8001d70:	460b      	mov	r3, r1
 8001d72:	813b      	strh	r3, [r7, #8]
 8001d74:	4613      	mov	r3, r2
 8001d76:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d075      	beq.n	8001e6e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d072      	beq.n	8001e6e <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001d88:	88fb      	ldrh	r3, [r7, #6]
 8001d8a:	2b01      	cmp	r3, #1
 8001d8c:	d91a      	bls.n	8001dc4 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8001d8e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d109      	bne.n	8001daa <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8001d96:	897a      	ldrh	r2, [r7, #10]
 8001d98:	88fb      	ldrh	r3, [r7, #6]
 8001d9a:	1ad3      	subs	r3, r2, r3
 8001d9c:	b29b      	uxth	r3, r3
 8001d9e:	817b      	strh	r3, [r7, #10]
	  x++;
 8001da0:	897b      	ldrh	r3, [r7, #10]
 8001da2:	3301      	adds	r3, #1
 8001da4:	b29b      	uxth	r3, r3
 8001da6:	817b      	strh	r3, [r7, #10]
 8001da8:	e00c      	b.n	8001dc4 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8001daa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dae:	2b03      	cmp	r3, #3
 8001db0:	d108      	bne.n	8001dc4 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8001db2:	893a      	ldrh	r2, [r7, #8]
 8001db4:	88fb      	ldrh	r3, [r7, #6]
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	813b      	strh	r3, [r7, #8]
	  y++;
 8001dbc:	893b      	ldrh	r3, [r7, #8]
 8001dbe:	3301      	adds	r3, #1
 8001dc0:	b29b      	uxth	r3, r3
 8001dc2:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8001dc4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001dd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d11a      	bne.n	8001e0e <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001dde:	893b      	ldrh	r3, [r7, #8]
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d83b      	bhi.n	8001e5c <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8001de4:	68fb      	ldr	r3, [r7, #12]
 8001de6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8001dea:	893b      	ldrh	r3, [r7, #8]
 8001dec:	429a      	cmp	r2, r3
 8001dee:	d937      	bls.n	8001e60 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001dfc:	1db9      	adds	r1, r7, #6
 8001dfe:	f107 000a 	add.w	r0, r7, #10
 8001e02:	f7ff ff3d 	bl	8001c80 <u8g2_clip_intersection2>
 8001e06:	4603      	mov	r3, r0
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d11a      	bne.n	8001e42 <u8g2_DrawHVLine+0xe4>
	  return;
 8001e0c:	e02f      	b.n	8001e6e <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001e14:	897b      	ldrh	r3, [r7, #10]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d824      	bhi.n	8001e64 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001e20:	897b      	ldrh	r3, [r7, #10]
 8001e22:	429a      	cmp	r2, r3
 8001e24:	d920      	bls.n	8001e68 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001e32:	1db9      	adds	r1, r7, #6
 8001e34:	f107 0008 	add.w	r0, r7, #8
 8001e38:	f7ff ff22 	bl	8001c80 <u8g2_clip_intersection2>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d014      	beq.n	8001e6c <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e46:	689c      	ldr	r4, [r3, #8]
 8001e48:	8979      	ldrh	r1, [r7, #10]
 8001e4a:	893a      	ldrh	r2, [r7, #8]
 8001e4c:	88f8      	ldrh	r0, [r7, #6]
 8001e4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e52:	9300      	str	r3, [sp, #0]
 8001e54:	4603      	mov	r3, r0
 8001e56:	68f8      	ldr	r0, [r7, #12]
 8001e58:	47a0      	blx	r4
 8001e5a:	e008      	b.n	8001e6e <u8g2_DrawHVLine+0x110>
	  return;
 8001e5c:	bf00      	nop
 8001e5e:	e006      	b.n	8001e6e <u8g2_DrawHVLine+0x110>
	  return;
 8001e60:	bf00      	nop
 8001e62:	e004      	b.n	8001e6e <u8g2_DrawHVLine+0x110>
	  return;
 8001e64:	bf00      	nop
 8001e66:	e002      	b.n	8001e6e <u8g2_DrawHVLine+0x110>
	  return;
 8001e68:	bf00      	nop
 8001e6a:	e000      	b.n	8001e6e <u8g2_DrawHVLine+0x110>
	  return;
 8001e6c:	bf00      	nop
    }
}
 8001e6e:	3714      	adds	r7, #20
 8001e70:	46bd      	mov	sp, r7
 8001e72:	bd90      	pop	{r4, r7, pc}

08001e74 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001e74:	b490      	push	{r4, r7}
 8001e76:	b082      	sub	sp, #8
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	4604      	mov	r4, r0
 8001e7c:	4608      	mov	r0, r1
 8001e7e:	4611      	mov	r1, r2
 8001e80:	461a      	mov	r2, r3
 8001e82:	4623      	mov	r3, r4
 8001e84:	80fb      	strh	r3, [r7, #6]
 8001e86:	4603      	mov	r3, r0
 8001e88:	80bb      	strh	r3, [r7, #4]
 8001e8a:	460b      	mov	r3, r1
 8001e8c:	807b      	strh	r3, [r7, #2]
 8001e8e:	4613      	mov	r3, r2
 8001e90:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001e92:	887a      	ldrh	r2, [r7, #2]
 8001e94:	88bb      	ldrh	r3, [r7, #4]
 8001e96:	429a      	cmp	r2, r3
 8001e98:	d20d      	bcs.n	8001eb6 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001e9a:	883a      	ldrh	r2, [r7, #0]
 8001e9c:	88fb      	ldrh	r3, [r7, #6]
 8001e9e:	429a      	cmp	r2, r3
 8001ea0:	d901      	bls.n	8001ea6 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e014      	b.n	8001ed0 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001ea6:	887a      	ldrh	r2, [r7, #2]
 8001ea8:	883b      	ldrh	r3, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d901      	bls.n	8001eb2 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e00e      	b.n	8001ed0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001eb2:	2300      	movs	r3, #0
 8001eb4:	e00c      	b.n	8001ed0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001eb6:	883a      	ldrh	r2, [r7, #0]
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d907      	bls.n	8001ece <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001ebe:	887a      	ldrh	r2, [r7, #2]
 8001ec0:	883b      	ldrh	r3, [r7, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	d901      	bls.n	8001eca <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e002      	b.n	8001ed0 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001eca:	2300      	movs	r3, #0
 8001ecc:	e000      	b.n	8001ed0 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001ece:	2300      	movs	r3, #0
    }
  }
}
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	3708      	adds	r7, #8
 8001ed4:	46bd      	mov	sp, r7
 8001ed6:	bc90      	pop	{r4, r7}
 8001ed8:	4770      	bx	lr

08001eda <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b084      	sub	sp, #16
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	60f8      	str	r0, [r7, #12]
 8001ee2:	4608      	mov	r0, r1
 8001ee4:	4611      	mov	r1, r2
 8001ee6:	461a      	mov	r2, r3
 8001ee8:	4603      	mov	r3, r0
 8001eea:	817b      	strh	r3, [r7, #10]
 8001eec:	460b      	mov	r3, r1
 8001eee:	813b      	strh	r3, [r7, #8]
 8001ef0:	4613      	mov	r3, r2
 8001ef2:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8001f00:	8b3b      	ldrh	r3, [r7, #24]
 8001f02:	893a      	ldrh	r2, [r7, #8]
 8001f04:	f7ff ffb6 	bl	8001e74 <u8g2_is_intersection_decision_tree>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d101      	bne.n	8001f12 <u8g2_IsIntersection+0x38>
    return 0; 
 8001f0e:	2300      	movs	r3, #0
 8001f10:	e00a      	b.n	8001f28 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8001f1e:	88fb      	ldrh	r3, [r7, #6]
 8001f20:	897a      	ldrh	r2, [r7, #10]
 8001f22:	f7ff ffa7 	bl	8001e74 <u8g2_is_intersection_decision_tree>
 8001f26:	4603      	mov	r3, r0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3710      	adds	r7, #16
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b089      	sub	sp, #36	; 0x24
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	60f8      	str	r0, [r7, #12]
 8001f38:	4608      	mov	r0, r1
 8001f3a:	4611      	mov	r1, r2
 8001f3c:	461a      	mov	r2, r3
 8001f3e:	4603      	mov	r3, r0
 8001f40:	817b      	strh	r3, [r7, #10]
 8001f42:	460b      	mov	r3, r1
 8001f44:	813b      	strh	r3, [r7, #8]
 8001f46:	4613      	mov	r3, r2
 8001f48:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001f4a:	893b      	ldrh	r3, [r7, #8]
 8001f4c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001f4e:	7efb      	ldrb	r3, [r7, #27]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001f56:	2301      	movs	r3, #1
 8001f58:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001f5a:	7e3a      	ldrb	r2, [r7, #24]
 8001f5c:	7efb      	ldrb	r3, [r7, #27]
 8001f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f62:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001f64:	2300      	movs	r3, #0
 8001f66:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d801      	bhi.n	8001f7a <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001f76:	7e3b      	ldrb	r3, [r7, #24]
 8001f78:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001f80:	2b01      	cmp	r3, #1
 8001f82:	d001      	beq.n	8001f88 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001f84:	7e3b      	ldrb	r3, [r7, #24]
 8001f86:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001f88:	893b      	ldrh	r3, [r7, #8]
 8001f8a:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001f8c:	8afb      	ldrh	r3, [r7, #22]
 8001f8e:	f023 0307 	bic.w	r3, r3, #7
 8001f92:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	7c1b      	ldrb	r3, [r3, #16]
 8001f9a:	b29b      	uxth	r3, r3
 8001f9c:	8afa      	ldrh	r2, [r7, #22]
 8001f9e:	fb12 f303 	smulbb	r3, r2, r3
 8001fa2:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001fa8:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8001faa:	8afb      	ldrh	r3, [r7, #22]
 8001fac:	69fa      	ldr	r2, [r7, #28]
 8001fae:	4413      	add	r3, r2
 8001fb0:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8001fb2:	897b      	ldrh	r3, [r7, #10]
 8001fb4:	69fa      	ldr	r2, [r7, #28]
 8001fb6:	4413      	add	r3, r2
 8001fb8:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8001fba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d117      	bne.n	8001ff2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001fc2:	69fb      	ldr	r3, [r7, #28]
 8001fc4:	781a      	ldrb	r2, [r3, #0]
 8001fc6:	7ebb      	ldrb	r3, [r7, #26]
 8001fc8:	4313      	orrs	r3, r2
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	69fb      	ldr	r3, [r7, #28]
 8001fce:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	781a      	ldrb	r2, [r3, #0]
 8001fd4:	7e7b      	ldrb	r3, [r7, #25]
 8001fd6:	4053      	eors	r3, r2
 8001fd8:	b2da      	uxtb	r2, r3
 8001fda:	69fb      	ldr	r3, [r7, #28]
 8001fdc:	701a      	strb	r2, [r3, #0]
	ptr++;
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3301      	adds	r3, #1
 8001fe2:	61fb      	str	r3, [r7, #28]
	len--;
 8001fe4:	88fb      	ldrh	r3, [r7, #6]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8001fea:	88fb      	ldrh	r3, [r7, #6]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d1e8      	bne.n	8001fc2 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8001ff0:	e038      	b.n	8002064 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	781a      	ldrb	r2, [r3, #0]
 8001ff6:	7ebb      	ldrb	r3, [r7, #26]
 8001ff8:	4313      	orrs	r3, r2
 8001ffa:	b2da      	uxtb	r2, r3
 8001ffc:	69fb      	ldr	r3, [r7, #28]
 8001ffe:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	781a      	ldrb	r2, [r3, #0]
 8002004:	7e7b      	ldrb	r3, [r7, #25]
 8002006:	4053      	eors	r3, r2
 8002008:	b2da      	uxtb	r2, r3
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800200e:	7efb      	ldrb	r3, [r7, #27]
 8002010:	3301      	adds	r3, #1
 8002012:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002014:	7efb      	ldrb	r3, [r7, #27]
 8002016:	f003 0307 	and.w	r3, r3, #7
 800201a:	76fb      	strb	r3, [r7, #27]
      len--;
 800201c:	88fb      	ldrh	r3, [r7, #6]
 800201e:	3b01      	subs	r3, #1
 8002020:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002022:	7efb      	ldrb	r3, [r7, #27]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d114      	bne.n	8002052 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800202c:	461a      	mov	r2, r3
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	4413      	add	r3, r2
 8002032:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002034:	68fb      	ldr	r3, [r7, #12]
 8002036:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800203a:	2b01      	cmp	r3, #1
 800203c:	d801      	bhi.n	8002042 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800203e:	2301      	movs	r3, #1
 8002040:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002048:	2b01      	cmp	r3, #1
 800204a:	d008      	beq.n	800205e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800204c:	2301      	movs	r3, #1
 800204e:	767b      	strb	r3, [r7, #25]
 8002050:	e005      	b.n	800205e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002052:	7ebb      	ldrb	r3, [r7, #26]
 8002054:	005b      	lsls	r3, r3, #1
 8002056:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002058:	7e7b      	ldrb	r3, [r7, #25]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800205e:	88fb      	ldrh	r3, [r7, #6]
 8002060:	2b00      	cmp	r3, #0
 8002062:	d1c6      	bne.n	8001ff2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002064:	bf00      	nop
 8002066:	3724      	adds	r7, #36	; 0x24
 8002068:	46bd      	mov	sp, r7
 800206a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206e:	4770      	bx	lr

08002070 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	b082      	sub	sp, #8
 8002074:	af00      	add	r7, sp, #0
 8002076:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2200      	movs	r2, #0
 800207c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800208e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002098:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020a0:	685b      	ldr	r3, [r3, #4]
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	4798      	blx	r3
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}

080020ae <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 80020ae:	b580      	push	{r7, lr}
 80020b0:	b084      	sub	sp, #16
 80020b2:	af00      	add	r7, sp, #0
 80020b4:	60f8      	str	r0, [r7, #12]
 80020b6:	60b9      	str	r1, [r7, #8]
 80020b8:	603b      	str	r3, [r7, #0]
 80020ba:	4613      	mov	r3, r2
 80020bc:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	2200      	movs	r2, #0
 80020c2:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	68ba      	ldr	r2, [r7, #8]
 80020ce:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	79fa      	ldrb	r2, [r7, #7]
 80020d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	2200      	movs	r2, #0
 80020dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	2200      	movs	r2, #0
 80020f4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	2201      	movs	r2, #1
 80020fc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2201      	movs	r2, #1
 8002104:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	69ba      	ldr	r2, [r7, #24]
 800210c:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	68f8      	ldr	r0, [r7, #12]
 8002116:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002118:	68f8      	ldr	r0, [r7, #12]
 800211a:	f7ff ffa9 	bl	8002070 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7ff fd84 	bl	8001c2c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 800212c:	bf00      	nop
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002134:	b480      	push	{r7}
 8002136:	b085      	sub	sp, #20
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002148:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800214a:	89fb      	ldrh	r3, [r7, #14]
 800214c:	00db      	lsls	r3, r3, #3
 800214e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	89fa      	ldrh	r2, [r7, #14]
 8002154:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	7c1b      	ldrb	r3, [r3, #16]
 800215a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800215c:	89fb      	ldrh	r3, [r7, #14]
 800215e:	00db      	lsls	r3, r3, #3
 8002160:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	89fa      	ldrh	r2, [r7, #14]
 8002166:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800216e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002170:	89fb      	ldrh	r3, [r7, #14]
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	89fa      	ldrh	r2, [r7, #14]
 800217a:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002182:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002184:	89fb      	ldrh	r3, [r7, #14]
 8002186:	687a      	ldr	r2, [r7, #4]
 8002188:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800218c:	4413      	add	r3, r2
 800218e:	68ba      	ldr	r2, [r7, #8]
 8002190:	7c52      	ldrb	r2, [r2, #17]
 8002192:	4293      	cmp	r3, r2
 8002194:	dd08      	ble.n	80021a8 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	7c5b      	ldrb	r3, [r3, #17]
 800219a:	b29a      	uxth	r2, r3
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80021a8:	89fb      	ldrh	r3, [r7, #14]
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80021ca:	89fb      	ldrh	r3, [r7, #14]
 80021cc:	4413      	add	r3, r2
 80021ce:	b29a      	uxth	r2, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80021d6:	68bb      	ldr	r3, [r7, #8]
 80021d8:	8a9a      	ldrh	r2, [r3, #20]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80021e0:	68bb      	ldr	r3, [r7, #8]
 80021e2:	8ada      	ldrh	r2, [r3, #22]
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80021ea:	bf00      	nop
 80021ec:	3714      	adds	r7, #20
 80021ee:	46bd      	mov	sp, r7
 80021f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021f4:	4770      	bx	lr

080021f6 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b084      	sub	sp, #16
 80021fa:	af02      	add	r7, sp, #8
 80021fc:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002216:	9300      	str	r3, [sp, #0]
 8002218:	4603      	mov	r3, r0
 800221a:	6878      	ldr	r0, [r7, #4]
 800221c:	f7ff fe5d 	bl	8001eda <u8g2_IsIntersection>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d104      	bne.n	8002230 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2200      	movs	r2, #0
 800222a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800222e:	e03b      	b.n	80022a8 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	2201      	movs	r2, #1
 8002234:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002244:	429a      	cmp	r2, r3
 8002246:	d205      	bcs.n	8002254 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002260:	429a      	cmp	r2, r3
 8002262:	d905      	bls.n	8002270 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800227c:	429a      	cmp	r2, r3
 800227e:	d205      	bcs.n	800228c <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002298:	429a      	cmp	r2, r3
 800229a:	d905      	bls.n	80022a8 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 80022a8:	bf00      	nop
 80022aa:	3708      	adds	r7, #8
 80022ac:	46bd      	mov	sp, r7
 80022ae:	bd80      	pop	{r7, pc}

080022b0 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80022b8:	6878      	ldr	r0, [r7, #4]
 80022ba:	f7ff ff3b 	bl	8002134 <u8g2_update_dimension_common>
}
 80022be:	bf00      	nop
 80022c0:	3708      	adds	r7, #8
 80022c2:	46bd      	mov	sp, r7
 80022c4:	bd80      	pop	{r7, pc}

080022c6 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80022c6:	b580      	push	{r7, lr}
 80022c8:	b082      	sub	sp, #8
 80022ca:	af00      	add	r7, sp, #0
 80022cc:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	2200      	movs	r2, #0
 80022d2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80022fa:	6878      	ldr	r0, [r7, #4]
 80022fc:	f7ff ff7b 	bl	80021f6 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002300:	bf00      	nop
 8002302:	3708      	adds	r7, #8
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}

08002308 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	b086      	sub	sp, #24
 800230c:	af02      	add	r7, sp, #8
 800230e:	60f8      	str	r0, [r7, #12]
 8002310:	4608      	mov	r0, r1
 8002312:	4611      	mov	r1, r2
 8002314:	461a      	mov	r2, r3
 8002316:	4603      	mov	r3, r0
 8002318:	817b      	strh	r3, [r7, #10]
 800231a:	460b      	mov	r3, r1
 800231c:	813b      	strh	r3, [r7, #8]
 800231e:	4613      	mov	r3, r2
 8002320:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002322:	88f8      	ldrh	r0, [r7, #6]
 8002324:	893a      	ldrh	r2, [r7, #8]
 8002326:	8979      	ldrh	r1, [r7, #10]
 8002328:	7e3b      	ldrb	r3, [r7, #24]
 800232a:	9300      	str	r3, [sp, #0]
 800232c:	4603      	mov	r3, r0
 800232e:	68f8      	ldr	r0, [r7, #12]
 8002330:	f7ff fcf4 	bl	8001d1c <u8g2_draw_hv_line_2dir>
}
 8002334:	bf00      	nop
 8002336:	3710      	adds	r7, #16
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}

0800233c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800233c:	b480      	push	{r7}
 800233e:	b083      	sub	sp, #12
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	2200      	movs	r2, #0
 8002348:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800234c:	bf00      	nop
 800234e:	370c      	adds	r7, #12
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr

08002358 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002358:	b480      	push	{r7}
 800235a:	b083      	sub	sp, #12
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
 8002360:	460b      	mov	r3, r1
 8002362:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002364:	78fb      	ldrb	r3, [r7, #3]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d002      	beq.n	8002370 <u8x8_ascii_next+0x18>
 800236a:	78fb      	ldrb	r3, [r7, #3]
 800236c:	2b0a      	cmp	r3, #10
 800236e:	d102      	bne.n	8002376 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002370:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002374:	e001      	b.n	800237a <u8x8_ascii_next+0x22>
  return b;
 8002376:	78fb      	ldrb	r3, [r7, #3]
 8002378:	b29b      	uxth	r3, r3
}
 800237a:	4618      	mov	r0, r3
 800237c:	370c      	adds	r7, #12
 800237e:	46bd      	mov	sp, r7
 8002380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002384:	4770      	bx	lr

08002386 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002386:	b590      	push	{r4, r7, lr}
 8002388:	b085      	sub	sp, #20
 800238a:	af00      	add	r7, sp, #0
 800238c:	60f8      	str	r0, [r7, #12]
 800238e:	460b      	mov	r3, r1
 8002390:	607a      	str	r2, [r7, #4]
 8002392:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	691c      	ldr	r4, [r3, #16]
 8002398:	7afa      	ldrb	r2, [r7, #11]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2117      	movs	r1, #23
 800239e:	68f8      	ldr	r0, [r7, #12]
 80023a0:	47a0      	blx	r4
 80023a2:	4603      	mov	r3, r0
}
 80023a4:	4618      	mov	r0, r3
 80023a6:	3714      	adds	r7, #20
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd90      	pop	{r4, r7, pc}

080023ac <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b082      	sub	sp, #8
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
 80023b4:	460b      	mov	r3, r1
 80023b6:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 80023b8:	1cfb      	adds	r3, r7, #3
 80023ba:	461a      	mov	r2, r3
 80023bc:	2101      	movs	r1, #1
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	f7ff ffe1 	bl	8002386 <u8x8_byte_SendBytes>
 80023c4:	4603      	mov	r3, r0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	3708      	adds	r7, #8
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd80      	pop	{r7, pc}

080023ce <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 80023ce:	b590      	push	{r4, r7, lr}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	691c      	ldr	r4, [r3, #16]
 80023da:	2300      	movs	r3, #0
 80023dc:	2200      	movs	r2, #0
 80023de:	2118      	movs	r1, #24
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	47a0      	blx	r4
 80023e4:	4603      	mov	r3, r0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	370c      	adds	r7, #12
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd90      	pop	{r4, r7, pc}

080023ee <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 80023ee:	b590      	push	{r4, r7, lr}
 80023f0:	b083      	sub	sp, #12
 80023f2:	af00      	add	r7, sp, #0
 80023f4:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	691c      	ldr	r4, [r3, #16]
 80023fa:	2300      	movs	r3, #0
 80023fc:	2200      	movs	r2, #0
 80023fe:	2119      	movs	r1, #25
 8002400:	6878      	ldr	r0, [r7, #4]
 8002402:	47a0      	blx	r4
 8002404:	4603      	mov	r3, r0
}
 8002406:	4618      	mov	r0, r3
 8002408:	370c      	adds	r7, #12
 800240a:	46bd      	mov	sp, r7
 800240c:	bd90      	pop	{r4, r7, pc}

0800240e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800240e:	b590      	push	{r4, r7, lr}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	68dc      	ldr	r4, [r3, #12]
 800241e:	78fa      	ldrb	r2, [r7, #3]
 8002420:	2300      	movs	r3, #0
 8002422:	2115      	movs	r1, #21
 8002424:	6878      	ldr	r0, [r7, #4]
 8002426:	47a0      	blx	r4
 8002428:	4603      	mov	r3, r0
}
 800242a:	4618      	mov	r0, r3
 800242c:	370c      	adds	r7, #12
 800242e:	46bd      	mov	sp, r7
 8002430:	bd90      	pop	{r4, r7, pc}

08002432 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002432:	b590      	push	{r4, r7, lr}
 8002434:	b083      	sub	sp, #12
 8002436:	af00      	add	r7, sp, #0
 8002438:	6078      	str	r0, [r7, #4]
 800243a:	460b      	mov	r3, r1
 800243c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	68dc      	ldr	r4, [r3, #12]
 8002442:	78fa      	ldrb	r2, [r7, #3]
 8002444:	2300      	movs	r3, #0
 8002446:	2116      	movs	r1, #22
 8002448:	6878      	ldr	r0, [r7, #4]
 800244a:	47a0      	blx	r4
 800244c:	4603      	mov	r3, r0
}
 800244e:	4618      	mov	r0, r3
 8002450:	370c      	adds	r7, #12
 8002452:	46bd      	mov	sp, r7
 8002454:	bd90      	pop	{r4, r7, pc}

08002456 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002456:	b590      	push	{r4, r7, lr}
 8002458:	b085      	sub	sp, #20
 800245a:	af00      	add	r7, sp, #0
 800245c:	60f8      	str	r0, [r7, #12]
 800245e:	460b      	mov	r3, r1
 8002460:	607a      	str	r2, [r7, #4]
 8002462:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	68dc      	ldr	r4, [r3, #12]
 8002468:	7afa      	ldrb	r2, [r7, #11]
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2117      	movs	r1, #23
 800246e:	68f8      	ldr	r0, [r7, #12]
 8002470:	47a0      	blx	r4
 8002472:	4603      	mov	r3, r0
}
 8002474:	4618      	mov	r0, r3
 8002476:	3714      	adds	r7, #20
 8002478:	46bd      	mov	sp, r7
 800247a:	bd90      	pop	{r4, r7, pc}

0800247c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b083      	sub	sp, #12
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	68dc      	ldr	r4, [r3, #12]
 8002488:	2300      	movs	r3, #0
 800248a:	2200      	movs	r2, #0
 800248c:	2118      	movs	r1, #24
 800248e:	6878      	ldr	r0, [r7, #4]
 8002490:	47a0      	blx	r4
 8002492:	4603      	mov	r3, r0
}
 8002494:	4618      	mov	r0, r3
 8002496:	370c      	adds	r7, #12
 8002498:	46bd      	mov	sp, r7
 800249a:	bd90      	pop	{r4, r7, pc}

0800249c <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800249c:	b590      	push	{r4, r7, lr}
 800249e:	b083      	sub	sp, #12
 80024a0:	af00      	add	r7, sp, #0
 80024a2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	68dc      	ldr	r4, [r3, #12]
 80024a8:	2300      	movs	r3, #0
 80024aa:	2200      	movs	r2, #0
 80024ac:	2119      	movs	r1, #25
 80024ae:	6878      	ldr	r0, [r7, #4]
 80024b0:	47a0      	blx	r4
 80024b2:	4603      	mov	r3, r0
}
 80024b4:	4618      	mov	r0, r3
 80024b6:	370c      	adds	r7, #12
 80024b8:	46bd      	mov	sp, r7
 80024ba:	bd90      	pop	{r4, r7, pc}

080024bc <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 80024bc:	b590      	push	{r4, r7, lr}
 80024be:	b085      	sub	sp, #20
 80024c0:	af00      	add	r7, sp, #0
 80024c2:	6078      	str	r0, [r7, #4]
 80024c4:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	73fb      	strb	r3, [r7, #15]
    data++;
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	3301      	adds	r3, #1
 80024d0:	603b      	str	r3, [r7, #0]
    switch( cmd )
 80024d2:	7bfb      	ldrb	r3, [r7, #15]
 80024d4:	2bfe      	cmp	r3, #254	; 0xfe
 80024d6:	d031      	beq.n	800253c <u8x8_cad_SendSequence+0x80>
 80024d8:	2bfe      	cmp	r3, #254	; 0xfe
 80024da:	dc3d      	bgt.n	8002558 <u8x8_cad_SendSequence+0x9c>
 80024dc:	2b19      	cmp	r3, #25
 80024de:	dc3b      	bgt.n	8002558 <u8x8_cad_SendSequence+0x9c>
 80024e0:	2b18      	cmp	r3, #24
 80024e2:	da23      	bge.n	800252c <u8x8_cad_SendSequence+0x70>
 80024e4:	2b16      	cmp	r3, #22
 80024e6:	dc02      	bgt.n	80024ee <u8x8_cad_SendSequence+0x32>
 80024e8:	2b15      	cmp	r3, #21
 80024ea:	da03      	bge.n	80024f4 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80024ec:	e034      	b.n	8002558 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80024ee:	2b17      	cmp	r3, #23
 80024f0:	d00e      	beq.n	8002510 <u8x8_cad_SendSequence+0x54>
	return;
 80024f2:	e031      	b.n	8002558 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	68dc      	ldr	r4, [r3, #12]
 80024fe:	7bba      	ldrb	r2, [r7, #14]
 8002500:	7bf9      	ldrb	r1, [r7, #15]
 8002502:	2300      	movs	r3, #0
 8002504:	6878      	ldr	r0, [r7, #4]
 8002506:	47a0      	blx	r4
	  data++;
 8002508:	683b      	ldr	r3, [r7, #0]
 800250a:	3301      	adds	r3, #1
 800250c:	603b      	str	r3, [r7, #0]
	  break;
 800250e:	e022      	b.n	8002556 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002510:	683b      	ldr	r3, [r7, #0]
 8002512:	781b      	ldrb	r3, [r3, #0]
 8002514:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002516:	f107 030e 	add.w	r3, r7, #14
 800251a:	461a      	mov	r2, r3
 800251c:	2101      	movs	r1, #1
 800251e:	6878      	ldr	r0, [r7, #4]
 8002520:	f7ff ff99 	bl	8002456 <u8x8_cad_SendData>
	  data++;
 8002524:	683b      	ldr	r3, [r7, #0]
 8002526:	3301      	adds	r3, #1
 8002528:	603b      	str	r3, [r7, #0]
	  break;
 800252a:	e014      	b.n	8002556 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	68dc      	ldr	r4, [r3, #12]
 8002530:	7bf9      	ldrb	r1, [r7, #15]
 8002532:	2300      	movs	r3, #0
 8002534:	2200      	movs	r2, #0
 8002536:	6878      	ldr	r0, [r7, #4]
 8002538:	47a0      	blx	r4
	  break;
 800253a:	e00c      	b.n	8002556 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	781b      	ldrb	r3, [r3, #0]
 8002540:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002542:	7bbb      	ldrb	r3, [r7, #14]
 8002544:	461a      	mov	r2, r3
 8002546:	2129      	movs	r1, #41	; 0x29
 8002548:	6878      	ldr	r0, [r7, #4]
 800254a:	f000 fa0a 	bl	8002962 <u8x8_gpio_call>
	  data++;
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	3301      	adds	r3, #1
 8002552:	603b      	str	r3, [r7, #0]
	  break;
 8002554:	bf00      	nop
    cmd = *data;
 8002556:	e7b6      	b.n	80024c6 <u8x8_cad_SendSequence+0xa>
	return;
 8002558:	bf00      	nop
    }
  }
}
 800255a:	3714      	adds	r7, #20
 800255c:	46bd      	mov	sp, r7
 800255e:	bd90      	pop	{r4, r7, pc}

08002560 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002560:	b590      	push	{r4, r7, lr}
 8002562:	b085      	sub	sp, #20
 8002564:	af00      	add	r7, sp, #0
 8002566:	60f8      	str	r0, [r7, #12]
 8002568:	460b      	mov	r3, r1
 800256a:	607a      	str	r2, [r7, #4]
 800256c:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 800256e:	68f8      	ldr	r0, [r7, #12]
 8002570:	f7ff ff2d 	bl	80023ce <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002574:	2140      	movs	r1, #64	; 0x40
 8002576:	68f8      	ldr	r0, [r7, #12]
 8002578:	f7ff ff18 	bl	80023ac <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	691c      	ldr	r4, [r3, #16]
 8002580:	7afa      	ldrb	r2, [r7, #11]
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2117      	movs	r1, #23
 8002586:	68f8      	ldr	r0, [r7, #12]
 8002588:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 800258a:	68f8      	ldr	r0, [r7, #12]
 800258c:	f7ff ff2f 	bl	80023ee <u8x8_byte_EndTransfer>
}
 8002590:	bf00      	nop
 8002592:	3714      	adds	r7, #20
 8002594:	46bd      	mov	sp, r7
 8002596:	bd90      	pop	{r4, r7, pc}

08002598 <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002598:	b590      	push	{r4, r7, lr}
 800259a:	b087      	sub	sp, #28
 800259c:	af00      	add	r7, sp, #0
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	607b      	str	r3, [r7, #4]
 80025a2:	460b      	mov	r3, r1
 80025a4:	72fb      	strb	r3, [r7, #11]
 80025a6:	4613      	mov	r3, r2
 80025a8:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 80025aa:	7afb      	ldrb	r3, [r7, #11]
 80025ac:	3b14      	subs	r3, #20
 80025ae:	2b05      	cmp	r3, #5
 80025b0:	d848      	bhi.n	8002644 <u8x8_cad_ssd13xx_i2c+0xac>
 80025b2:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <u8x8_cad_ssd13xx_i2c+0x20>)
 80025b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b8:	08002621 	.word	0x08002621
 80025bc:	080025d1 	.word	0x080025d1
 80025c0:	080025d1 	.word	0x080025d1
 80025c4:	080025f1 	.word	0x080025f1
 80025c8:	08002649 	.word	0x08002649
 80025cc:	08002649 	.word	0x08002649
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 80025d0:	68f8      	ldr	r0, [r7, #12]
 80025d2:	f7ff fefc 	bl	80023ce <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 80025d6:	2100      	movs	r1, #0
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f7ff fee7 	bl	80023ac <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 80025de:	7abb      	ldrb	r3, [r7, #10]
 80025e0:	4619      	mov	r1, r3
 80025e2:	68f8      	ldr	r0, [r7, #12]
 80025e4:	f7ff fee2 	bl	80023ac <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 80025e8:	68f8      	ldr	r0, [r7, #12]
 80025ea:	f7ff ff00 	bl	80023ee <u8x8_byte_EndTransfer>
      break;
 80025ee:	e02c      	b.n	800264a <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80025f4:	e00a      	b.n	800260c <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 80025f6:	697a      	ldr	r2, [r7, #20]
 80025f8:	2118      	movs	r1, #24
 80025fa:	68f8      	ldr	r0, [r7, #12]
 80025fc:	f7ff ffb0 	bl	8002560 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002600:	7abb      	ldrb	r3, [r7, #10]
 8002602:	3b18      	subs	r3, #24
 8002604:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8002606:	697b      	ldr	r3, [r7, #20]
 8002608:	3318      	adds	r3, #24
 800260a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800260c:	7abb      	ldrb	r3, [r7, #10]
 800260e:	2b18      	cmp	r3, #24
 8002610:	d8f1      	bhi.n	80025f6 <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002612:	7abb      	ldrb	r3, [r7, #10]
 8002614:	697a      	ldr	r2, [r7, #20]
 8002616:	4619      	mov	r1, r3
 8002618:	68f8      	ldr	r0, [r7, #12]
 800261a:	f7ff ffa1 	bl	8002560 <u8x8_i2c_data_transfer>
      break;
 800261e:	e014      	b.n	800264a <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002620:	68fb      	ldr	r3, [r7, #12]
 8002622:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002626:	2bff      	cmp	r3, #255	; 0xff
 8002628:	d103      	bne.n	8002632 <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2278      	movs	r2, #120	; 0x78
 800262e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	691c      	ldr	r4, [r3, #16]
 8002636:	7aba      	ldrb	r2, [r7, #10]
 8002638:	7af9      	ldrb	r1, [r7, #11]
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	68f8      	ldr	r0, [r7, #12]
 800263e:	47a0      	blx	r4
 8002640:	4603      	mov	r3, r0
 8002642:	e003      	b.n	800264c <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 8002644:	2300      	movs	r3, #0
 8002646:	e001      	b.n	800264c <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 8002648:	bf00      	nop
  }
  return 1;
 800264a:	2301      	movs	r3, #1
}
 800264c:	4618      	mov	r0, r3
 800264e:	371c      	adds	r7, #28
 8002650:	46bd      	mov	sp, r7
 8002652:	bd90      	pop	{r4, r7, pc}

08002654 <u8x8_d_ssd1305_generic>:
};



static uint8_t u8x8_d_ssd1305_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	607b      	str	r3, [r7, #4]
 800265e:	460b      	mov	r3, r1
 8002660:	72fb      	strb	r3, [r7, #11]
 8002662:	4613      	mov	r3, r2
 8002664:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002666:	7afb      	ldrb	r3, [r7, #11]
 8002668:	2b0f      	cmp	r3, #15
 800266a:	d006      	beq.n	800267a <u8x8_d_ssd1305_generic+0x26>
 800266c:	2b0f      	cmp	r3, #15
 800266e:	dc67      	bgt.n	8002740 <u8x8_d_ssd1305_generic+0xec>
 8002670:	2b0b      	cmp	r3, #11
 8002672:	d048      	beq.n	8002706 <u8x8_d_ssd1305_generic+0xb2>
 8002674:	2b0e      	cmp	r3, #14
 8002676:	d053      	beq.n	8002720 <u8x8_d_ssd1305_generic+0xcc>
 8002678:	e062      	b.n	8002740 <u8x8_d_ssd1305_generic+0xec>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800267a:	68f8      	ldr	r0, [r7, #12]
 800267c:	f7ff fefe 	bl	800247c <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	795b      	ldrb	r3, [r3, #5]
 8002684:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8002686:	7dfb      	ldrb	r3, [r7, #23]
 8002688:	00db      	lsls	r3, r3, #3
 800268a:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002692:	7dfb      	ldrb	r3, [r7, #23]
 8002694:	4413      	add	r3, r2
 8002696:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002698:	2140      	movs	r1, #64	; 0x40
 800269a:	68f8      	ldr	r0, [r7, #12]
 800269c:	f7ff feb7 	bl	800240e <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 80026a0:	7dfb      	ldrb	r3, [r7, #23]
 80026a2:	091b      	lsrs	r3, r3, #4
 80026a4:	b2db      	uxtb	r3, r3
 80026a6:	f043 0310 	orr.w	r3, r3, #16
 80026aa:	b2db      	uxtb	r3, r3
 80026ac:	4619      	mov	r1, r3
 80026ae:	68f8      	ldr	r0, [r7, #12]
 80026b0:	f7ff fead 	bl	800240e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 80026b4:	7dfb      	ldrb	r3, [r7, #23]
 80026b6:	f003 030f 	and.w	r3, r3, #15
 80026ba:	b2db      	uxtb	r3, r3
 80026bc:	4619      	mov	r1, r3
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f7ff feb7 	bl	8002432 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	799b      	ldrb	r3, [r3, #6]
 80026c8:	f063 034f 	orn	r3, r3, #79	; 0x4f
 80026cc:	b2db      	uxtb	r3, r3
 80026ce:	4619      	mov	r1, r3
 80026d0:	68f8      	ldr	r0, [r7, #12]
 80026d2:	f7ff feae 	bl	8002432 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	791b      	ldrb	r3, [r3, #4]
 80026da:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80026e2:	7dbb      	ldrb	r3, [r7, #22]
 80026e4:	00db      	lsls	r3, r3, #3
 80026e6:	b2db      	uxtb	r3, r3
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4619      	mov	r1, r3
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f7ff feb2 	bl	8002456 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80026f2:	7abb      	ldrb	r3, [r7, #10]
 80026f4:	3b01      	subs	r3, #1
 80026f6:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80026f8:	7abb      	ldrb	r3, [r7, #10]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1eb      	bne.n	80026d6 <u8x8_d_ssd1305_generic+0x82>
      
      u8x8_cad_EndTransfer(u8x8);
 80026fe:	68f8      	ldr	r0, [r7, #12]
 8002700:	f7ff fecc 	bl	800249c <u8x8_cad_EndTransfer>
      break;
 8002704:	e01e      	b.n	8002744 <u8x8_d_ssd1305_generic+0xf0>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002706:	7abb      	ldrb	r3, [r7, #10]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d104      	bne.n	8002716 <u8x8_d_ssd1305_generic+0xc2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave0_seq);
 800270c:	4910      	ldr	r1, [pc, #64]	; (8002750 <u8x8_d_ssd1305_generic+0xfc>)
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff fed4 	bl	80024bc <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
      break;
 8002714:	e016      	b.n	8002744 <u8x8_d_ssd1305_generic+0xf0>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
 8002716:	490f      	ldr	r1, [pc, #60]	; (8002754 <u8x8_d_ssd1305_generic+0x100>)
 8002718:	68f8      	ldr	r0, [r7, #12]
 800271a:	f7ff fecf 	bl	80024bc <u8x8_cad_SendSequence>
      break;
 800271e:	e011      	b.n	8002744 <u8x8_d_ssd1305_generic+0xf0>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f7ff feab 	bl	800247c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002726:	2181      	movs	r1, #129	; 0x81
 8002728:	68f8      	ldr	r0, [r7, #12]
 800272a:	f7ff fe70 	bl	800240e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1305 has range from 0 to 255 */
 800272e:	7abb      	ldrb	r3, [r7, #10]
 8002730:	4619      	mov	r1, r3
 8002732:	68f8      	ldr	r0, [r7, #12]
 8002734:	f7ff fe7d 	bl	8002432 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002738:	68f8      	ldr	r0, [r7, #12]
 800273a:	f7ff feaf 	bl	800249c <u8x8_cad_EndTransfer>
      break;
 800273e:	e001      	b.n	8002744 <u8x8_d_ssd1305_generic+0xf0>
#endif
    default:
      return 0;
 8002740:	2300      	movs	r3, #0
 8002742:	e000      	b.n	8002746 <u8x8_d_ssd1305_generic+0xf2>
  }
  return 1;
 8002744:	2301      	movs	r3, #1
}
 8002746:	4618      	mov	r0, r3
 8002748:	3718      	adds	r7, #24
 800274a:	46bd      	mov	sp, r7
 800274c:	bd80      	pop	{r7, pc}
 800274e:	bf00      	nop
 8002750:	0800fcb8 	.word	0x0800fcb8
 8002754:	0800fcc0 	.word	0x0800fcc0

08002758 <u8x8_d_ssd1305_128x32_noname>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1305_128x32_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002758:	b580      	push	{r7, lr}
 800275a:	b084      	sub	sp, #16
 800275c:	af00      	add	r7, sp, #0
 800275e:	60f8      	str	r0, [r7, #12]
 8002760:	607b      	str	r3, [r7, #4]
 8002762:	460b      	mov	r3, r1
 8002764:	72fb      	strb	r3, [r7, #11]
 8002766:	4613      	mov	r3, r2
 8002768:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1305_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800276a:	7aba      	ldrb	r2, [r7, #10]
 800276c:	7af9      	ldrb	r1, [r7, #11]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	68f8      	ldr	r0, [r7, #12]
 8002772:	f7ff ff6f 	bl	8002654 <u8x8_d_ssd1305_generic>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d001      	beq.n	8002780 <u8x8_d_ssd1305_128x32_noname+0x28>
    return 1;
 800277c:	2301      	movs	r3, #1
 800277e:	e032      	b.n	80027e6 <u8x8_d_ssd1305_128x32_noname+0x8e>
  
  switch(msg)
 8002780:	7afb      	ldrb	r3, [r7, #11]
 8002782:	2b0d      	cmp	r3, #13
 8002784:	d006      	beq.n	8002794 <u8x8_d_ssd1305_128x32_noname+0x3c>
 8002786:	2b0d      	cmp	r3, #13
 8002788:	dc2a      	bgt.n	80027e0 <u8x8_d_ssd1305_128x32_noname+0x88>
 800278a:	2b09      	cmp	r3, #9
 800278c:	d023      	beq.n	80027d6 <u8x8_d_ssd1305_128x32_noname+0x7e>
 800278e:	2b0a      	cmp	r3, #10
 8002790:	d019      	beq.n	80027c6 <u8x8_d_ssd1305_128x32_noname+0x6e>
 8002792:	e025      	b.n	80027e0 <u8x8_d_ssd1305_128x32_noname+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002794:	7abb      	ldrb	r3, [r7, #10]
 8002796:	2b00      	cmp	r3, #0
 8002798:	d10a      	bne.n	80027b0 <u8x8_d_ssd1305_128x32_noname+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip0_seq);
 800279a:	4915      	ldr	r1, [pc, #84]	; (80027f0 <u8x8_d_ssd1305_128x32_noname+0x98>)
 800279c:	68f8      	ldr	r0, [r7, #12]
 800279e:	f7ff fe8d 	bl	80024bc <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	7c9a      	ldrb	r2, [r3, #18]
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 80027ae:	e019      	b.n	80027e4 <u8x8_d_ssd1305_128x32_noname+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
 80027b0:	4910      	ldr	r1, [pc, #64]	; (80027f4 <u8x8_d_ssd1305_128x32_noname+0x9c>)
 80027b2:	68f8      	ldr	r0, [r7, #12]
 80027b4:	f7ff fe82 	bl	80024bc <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	7cda      	ldrb	r2, [r3, #19]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 80027c4:	e00e      	b.n	80027e4 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 80027c6:	68f8      	ldr	r0, [r7, #12]
 80027c8:	f000 f82e 	bl	8002828 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_noname_init_seq);    
 80027cc:	490a      	ldr	r1, [pc, #40]	; (80027f8 <u8x8_d_ssd1305_128x32_noname+0xa0>)
 80027ce:	68f8      	ldr	r0, [r7, #12]
 80027d0:	f7ff fe74 	bl	80024bc <u8x8_cad_SendSequence>
      break;
 80027d4:	e006      	b.n	80027e4 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1305_128x32_noname_display_info);
 80027d6:	4909      	ldr	r1, [pc, #36]	; (80027fc <u8x8_d_ssd1305_128x32_noname+0xa4>)
 80027d8:	68f8      	ldr	r0, [r7, #12]
 80027da:	f000 f811 	bl	8002800 <u8x8_d_helper_display_setup_memory>
      break;
 80027de:	e001      	b.n	80027e4 <u8x8_d_ssd1305_128x32_noname+0x8c>
    default:
      return 0;
 80027e0:	2300      	movs	r3, #0
 80027e2:	e000      	b.n	80027e6 <u8x8_d_ssd1305_128x32_noname+0x8e>
  }
  return 1;
 80027e4:	2301      	movs	r3, #1
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	3710      	adds	r7, #16
 80027ea:	46bd      	mov	sp, r7
 80027ec:	bd80      	pop	{r7, pc}
 80027ee:	bf00      	nop
 80027f0:	0800fcc8 	.word	0x0800fcc8
 80027f4:	0800fcd4 	.word	0x0800fcd4
 80027f8:	0800fcf8 	.word	0x0800fcf8
 80027fc:	0800fce0 	.word	0x0800fce0

08002800 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002800:	b480      	push	{r7}
 8002802:	b083      	sub	sp, #12
 8002804:	af00      	add	r7, sp, #0
 8002806:	6078      	str	r0, [r7, #4]
 8002808:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	683a      	ldr	r2, [r7, #0]
 800280e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	7c9a      	ldrb	r2, [r3, #18]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002826:	4770      	bx	lr

08002828 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002828:	b590      	push	{r4, r7, lr}
 800282a:	b083      	sub	sp, #12
 800282c:	af00      	add	r7, sp, #0
 800282e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	695c      	ldr	r4, [r3, #20]
 8002834:	2300      	movs	r3, #0
 8002836:	2200      	movs	r2, #0
 8002838:	2128      	movs	r1, #40	; 0x28
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	68dc      	ldr	r4, [r3, #12]
 8002842:	2300      	movs	r3, #0
 8002844:	2200      	movs	r2, #0
 8002846:	2114      	movs	r1, #20
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800284c:	2201      	movs	r2, #1
 800284e:	214b      	movs	r1, #75	; 0x4b
 8002850:	6878      	ldr	r0, [r7, #4]
 8002852:	f000 f886 	bl	8002962 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	791b      	ldrb	r3, [r3, #4]
 800285c:	461a      	mov	r2, r3
 800285e:	2129      	movs	r1, #41	; 0x29
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f87e 	bl	8002962 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002866:	2200      	movs	r2, #0
 8002868:	214b      	movs	r1, #75	; 0x4b
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f879 	bl	8002962 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	791b      	ldrb	r3, [r3, #4]
 8002876:	461a      	mov	r2, r3
 8002878:	2129      	movs	r1, #41	; 0x29
 800287a:	6878      	ldr	r0, [r7, #4]
 800287c:	f000 f871 	bl	8002962 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002880:	2201      	movs	r2, #1
 8002882:	214b      	movs	r1, #75	; 0x4b
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f86c 	bl	8002962 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	795b      	ldrb	r3, [r3, #5]
 8002890:	461a      	mov	r2, r3
 8002892:	2129      	movs	r1, #41	; 0x29
 8002894:	6878      	ldr	r0, [r7, #4]
 8002896:	f000 f864 	bl	8002962 <u8x8_gpio_call>
}    
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd90      	pop	{r4, r7, pc}

080028a2 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 80028a2:	b590      	push	{r4, r7, lr}
 80028a4:	b085      	sub	sp, #20
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
 80028aa:	4608      	mov	r0, r1
 80028ac:	4611      	mov	r1, r2
 80028ae:	461a      	mov	r2, r3
 80028b0:	4603      	mov	r3, r0
 80028b2:	70fb      	strb	r3, [r7, #3]
 80028b4:	460b      	mov	r3, r1
 80028b6:	70bb      	strb	r3, [r7, #2]
 80028b8:	4613      	mov	r3, r2
 80028ba:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80028bc:	78fb      	ldrb	r3, [r7, #3]
 80028be:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80028c0:	78bb      	ldrb	r3, [r7, #2]
 80028c2:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80028c4:	787b      	ldrb	r3, [r7, #1]
 80028c6:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80028c8:	6a3b      	ldr	r3, [r7, #32]
 80028ca:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689c      	ldr	r4, [r3, #8]
 80028d0:	f107 0308 	add.w	r3, r7, #8
 80028d4:	2201      	movs	r2, #1
 80028d6:	210f      	movs	r1, #15
 80028d8:	6878      	ldr	r0, [r7, #4]
 80028da:	47a0      	blx	r4
 80028dc:	4603      	mov	r3, r0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3714      	adds	r7, #20
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}

080028e6 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80028e6:	b590      	push	{r4, r7, lr}
 80028e8:	b083      	sub	sp, #12
 80028ea:	af00      	add	r7, sp, #0
 80028ec:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689c      	ldr	r4, [r3, #8]
 80028f2:	2300      	movs	r3, #0
 80028f4:	2200      	movs	r2, #0
 80028f6:	2109      	movs	r1, #9
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	47a0      	blx	r4
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bd90      	pop	{r4, r7, pc}

08002904 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689c      	ldr	r4, [r3, #8]
 8002910:	2300      	movs	r3, #0
 8002912:	2200      	movs	r2, #0
 8002914:	210a      	movs	r1, #10
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bd90      	pop	{r4, r7, pc}

08002922 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002922:	b590      	push	{r4, r7, lr}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689c      	ldr	r4, [r3, #8]
 8002932:	78fa      	ldrb	r2, [r7, #3]
 8002934:	2300      	movs	r3, #0
 8002936:	210b      	movs	r1, #11
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	47a0      	blx	r4
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	bd90      	pop	{r4, r7, pc}

08002944 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002944:	b590      	push	{r4, r7, lr}
 8002946:	b083      	sub	sp, #12
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	689c      	ldr	r4, [r3, #8]
 8002950:	2300      	movs	r3, #0
 8002952:	2200      	movs	r2, #0
 8002954:	2110      	movs	r1, #16
 8002956:	6878      	ldr	r0, [r7, #4]
 8002958:	47a0      	blx	r4
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	bd90      	pop	{r4, r7, pc}

08002962 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002962:	b590      	push	{r4, r7, lr}
 8002964:	b083      	sub	sp, #12
 8002966:	af00      	add	r7, sp, #0
 8002968:	6078      	str	r0, [r7, #4]
 800296a:	460b      	mov	r3, r1
 800296c:	70fb      	strb	r3, [r7, #3]
 800296e:	4613      	mov	r3, r2
 8002970:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	695c      	ldr	r4, [r3, #20]
 8002976:	78ba      	ldrb	r2, [r7, #2]
 8002978:	78f9      	ldrb	r1, [r7, #3]
 800297a:	2300      	movs	r3, #0
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	47a0      	blx	r4
}
 8002980:	bf00      	nop
 8002982:	370c      	adds	r7, #12
 8002984:	46bd      	mov	sp, r7
 8002986:	bd90      	pop	{r4, r7, pc}

08002988 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002988:	b480      	push	{r7}
 800298a:	b085      	sub	sp, #20
 800298c:	af00      	add	r7, sp, #0
 800298e:	60f8      	str	r0, [r7, #12]
 8002990:	607b      	str	r3, [r7, #4]
 8002992:	460b      	mov	r3, r1
 8002994:	72fb      	strb	r3, [r7, #11]
 8002996:	4613      	mov	r3, r2
 8002998:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800299a:	2300      	movs	r3, #0
}
 800299c:	4618      	mov	r0, r3
 800299e:	3714      	adds	r7, #20
 80029a0:	46bd      	mov	sp, r7
 80029a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a6:	4770      	bx	lr

080029a8 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 80029a8:	b480      	push	{r7}
 80029aa:	b083      	sub	sp, #12
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	4a11      	ldr	r2, [pc, #68]	; (8002a00 <u8x8_SetupDefaults+0x58>)
 80029ba:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a10      	ldr	r2, [pc, #64]	; (8002a00 <u8x8_SetupDefaults+0x58>)
 80029c0:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	4a0e      	ldr	r2, [pc, #56]	; (8002a00 <u8x8_SetupDefaults+0x58>)
 80029c6:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	4a0d      	ldr	r2, [pc, #52]	; (8002a00 <u8x8_SetupDefaults+0x58>)
 80029cc:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2200      	movs	r2, #0
 80029d2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	22ff      	movs	r2, #255	; 0xff
 80029e8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	22ff      	movs	r2, #255	; 0xff
 80029f0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr
 8002a00:	08002989 	.word	0x08002989

08002a04 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b084      	sub	sp, #16
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
 8002a10:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002a12:	68f8      	ldr	r0, [r7, #12]
 8002a14:	f7ff ffc8 	bl	80029a8 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002a18:	68fb      	ldr	r3, [r7, #12]
 8002a1a:	68ba      	ldr	r2, [r7, #8]
 8002a1c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	687a      	ldr	r2, [r7, #4]
 8002a22:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	69ba      	ldr	r2, [r7, #24]
 8002a2e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002a30:	68f8      	ldr	r0, [r7, #12]
 8002a32:	f7ff ff58 	bl	80028e6 <u8x8_SetupMemory>
}
 8002a36:	bf00      	nop
 8002a38:	3710      	adds	r7, #16
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
	...

08002a40 <synthesize_waves>:

#define OUTPUT_SAMPLES 64 
uint16_t output_wave [OUTPUT_SAMPLES];
bool DMAkeysPressed [12];

inline void synthesize_waves(int index){
 8002a40:	b480      	push	{r7}
 8002a42:	b087      	sub	sp, #28
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
    uint16_t DMAkeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 8002a48:	4b2c      	ldr	r3, [pc, #176]	; (8002afc <synthesize_waves+0xbc>)
 8002a4a:	881b      	ldrh	r3, [r3, #0]
 8002a4c:	817b      	strh	r3, [r7, #10]
    for (int k = 0; k < 12; k++) {
 8002a4e:	2300      	movs	r3, #0
 8002a50:	617b      	str	r3, [r7, #20]
 8002a52:	e013      	b.n	8002a7c <synthesize_waves+0x3c>
        DMAkeysPressed[k] = ~DMAkeys & (1 << k);
 8002a54:	897b      	ldrh	r3, [r7, #10]
 8002a56:	43da      	mvns	r2, r3
 8002a58:	2101      	movs	r1, #1
 8002a5a:	697b      	ldr	r3, [r7, #20]
 8002a5c:	fa01 f303 	lsl.w	r3, r1, r3
 8002a60:	4013      	ands	r3, r2
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bf14      	ite	ne
 8002a66:	2301      	movne	r3, #1
 8002a68:	2300      	moveq	r3, #0
 8002a6a:	b2d9      	uxtb	r1, r3
 8002a6c:	4a24      	ldr	r2, [pc, #144]	; (8002b00 <synthesize_waves+0xc0>)
 8002a6e:	697b      	ldr	r3, [r7, #20]
 8002a70:	4413      	add	r3, r2
 8002a72:	460a      	mov	r2, r1
 8002a74:	701a      	strb	r2, [r3, #0]
    for (int k = 0; k < 12; k++) {
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	3301      	adds	r3, #1
 8002a7a:	617b      	str	r3, [r7, #20]
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	2b0b      	cmp	r3, #11
 8002a80:	dde8      	ble.n	8002a54 <synthesize_waves+0x14>
    }

    uint32_t out = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	613b      	str	r3, [r7, #16]

    for (int f = 0; f < 3; f++){
 8002a86:	2300      	movs	r3, #0
 8002a88:	60fb      	str	r3, [r7, #12]
 8002a8a:	e026      	b.n	8002ada <synthesize_waves+0x9a>
        freq_counts[f] += freq_increments[f];
 8002a8c:	4a1d      	ldr	r2, [pc, #116]	; (8002b04 <synthesize_waves+0xc4>)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	f832 2013 	ldrh.w	r2, [r2, r3, lsl #1]
 8002a94:	491c      	ldr	r1, [pc, #112]	; (8002b08 <synthesize_waves+0xc8>)
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8002a9c:	4413      	add	r3, r2
 8002a9e:	b299      	uxth	r1, r3
 8002aa0:	4a18      	ldr	r2, [pc, #96]	; (8002b04 <synthesize_waves+0xc4>)
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
        
        out += DMAkeysPressed[f] ? wavetable[freq_counts[f] & 0x03FF] : 2048;
 8002aa8:	4a15      	ldr	r2, [pc, #84]	; (8002b00 <synthesize_waves+0xc0>)
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	4413      	add	r3, r2
 8002aae:	781b      	ldrb	r3, [r3, #0]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00a      	beq.n	8002aca <synthesize_waves+0x8a>
 8002ab4:	4a13      	ldr	r2, [pc, #76]	; (8002b04 <synthesize_waves+0xc4>)
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002abc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002ac0:	4a12      	ldr	r2, [pc, #72]	; (8002b0c <synthesize_waves+0xcc>)
 8002ac2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8002ac6:	461a      	mov	r2, r3
 8002ac8:	e001      	b.n	8002ace <synthesize_waves+0x8e>
 8002aca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002ace:	693b      	ldr	r3, [r7, #16]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	613b      	str	r3, [r7, #16]
    for (int f = 0; f < 3; f++){
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	60fb      	str	r3, [r7, #12]
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	ddd5      	ble.n	8002a8c <synthesize_waves+0x4c>
    }

     output_wave[index] = out >> 4;
 8002ae0:	693b      	ldr	r3, [r7, #16]
 8002ae2:	091b      	lsrs	r3, r3, #4
 8002ae4:	b299      	uxth	r1, r3
 8002ae6:	4a0a      	ldr	r2, [pc, #40]	; (8002b10 <synthesize_waves+0xd0>)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
}
 8002aee:	bf00      	nop
 8002af0:	371c      	adds	r7, #28
 8002af2:	46bd      	mov	sp, r7
 8002af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af8:	4770      	bx	lr
 8002afa:	bf00      	nop
 8002afc:	20000000 	.word	0x20000000
 8002b00:	20000ed4 	.word	0x20000ed4
 8002b04:	20000e3c 	.word	0x20000e3c
 8002b08:	0800fda8 	.word	0x0800fda8
 8002b0c:	2000063c 	.word	0x2000063c
 8002b10:	20000e54 	.word	0x20000e54

08002b14 <HAL_DAC_ConvHalfCpltCallbackCh1>:


void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b084      	sub	sp, #16
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
    for (int i = 0; i < OUTPUT_SAMPLES/2; i++) {
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	60fb      	str	r3, [r7, #12]
 8002b20:	e005      	b.n	8002b2e <HAL_DAC_ConvHalfCpltCallbackCh1+0x1a>
        synthesize_waves(i);
 8002b22:	68f8      	ldr	r0, [r7, #12]
 8002b24:	f7ff ff8c 	bl	8002a40 <synthesize_waves>
    for (int i = 0; i < OUTPUT_SAMPLES/2; i++) {
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	60fb      	str	r3, [r7, #12]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	2b1f      	cmp	r3, #31
 8002b32:	ddf6      	ble.n	8002b22 <HAL_DAC_ConvHalfCpltCallbackCh1+0xe>
    }
}
 8002b34:	bf00      	nop
 8002b36:	bf00      	nop
 8002b38:	3710      	adds	r7, #16
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	bd80      	pop	{r7, pc}

08002b3e <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8002b3e:	b580      	push	{r7, lr}
 8002b40:	b084      	sub	sp, #16
 8002b42:	af00      	add	r7, sp, #0
 8002b44:	6078      	str	r0, [r7, #4]
    
    for (int i = OUTPUT_SAMPLES/2; i < OUTPUT_SAMPLES; i++) {
 8002b46:	2320      	movs	r3, #32
 8002b48:	60fb      	str	r3, [r7, #12]
 8002b4a:	e005      	b.n	8002b58 <HAL_DAC_ConvCpltCallbackCh1+0x1a>
        synthesize_waves(i);
 8002b4c:	68f8      	ldr	r0, [r7, #12]
 8002b4e:	f7ff ff77 	bl	8002a40 <synthesize_waves>
    for (int i = OUTPUT_SAMPLES/2; i < OUTPUT_SAMPLES; i++) {
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	3301      	adds	r3, #1
 8002b56:	60fb      	str	r3, [r7, #12]
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	2b3f      	cmp	r3, #63	; 0x3f
 8002b5c:	ddf6      	ble.n	8002b4c <HAL_DAC_ConvCpltCallbackCh1+0xe>
    }
}
 8002b5e:	bf00      	nop
 8002b60:	bf00      	nop
 8002b62:	3710      	adds	r7, #16
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}

08002b68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b088      	sub	sp, #32
 8002b6c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */

        rotationSteps(dreal, dimag);
 8002b6e:	496a      	ldr	r1, [pc, #424]	; (8002d18 <main+0x1b0>)
 8002b70:	486a      	ldr	r0, [pc, #424]	; (8002d1c <main+0x1b4>)
 8002b72:	f000 fd75 	bl	8003660 <rotationSteps>
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002b76:	f001 fa18 	bl	8003faa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002b7a:	f000 f903 	bl	8002d84 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002b7e:	f000 fb7d 	bl	800327c <MX_GPIO_Init>
  MX_DMA_Init();
 8002b82:	f000 fb5d 	bl	8003240 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8002b86:	f000 fb2b 	bl	80031e0 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8002b8a:	f000 f9c1 	bl	8002f10 <MX_CAN1_Init>
  MX_I2C1_Init();
 8002b8e:	f000 fa29 	bl	8002fe4 <MX_I2C1_Init>
  MX_ADC1_Init();
 8002b92:	f000 f959 	bl	8002e48 <MX_ADC1_Init>
  MX_DAC1_Init();
 8002b96:	f000 f9f3 	bl	8002f80 <MX_DAC1_Init>
  MX_TIM6_Init();
 8002b9a:	f000 fab5 	bl	8003108 <MX_TIM6_Init>
  MX_TIM7_Init();
 8002b9e:	f000 fae9 	bl	8003174 <MX_TIM7_Init>
  MX_TIM2_Init();
 8002ba2:	f000 fa63 	bl	800306c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */


    serialPrintln("charIOT-Key-C");
 8002ba6:	485e      	ldr	r0, [pc, #376]	; (8002d20 <main+0x1b8>)
 8002ba8:	f000 fbd6 	bl	8003358 <serialPrintln>
        serialPrintln(buf);
    }*/


    //Generate wave tables
    for (int i = 0; i < WAVETABLE_SAMPLES; i++) {
 8002bac:	2300      	movs	r3, #0
 8002bae:	617b      	str	r3, [r7, #20]
 8002bb0:	e03f      	b.n	8002c32 <main+0xca>
        wavetable[i] = 2048 + 2048 * sin(2.0 * PI * (float)i / (float) WAVETABLE_SAMPLES);
 8002bb2:	697b      	ldr	r3, [r7, #20]
 8002bb4:	ee07 3a90 	vmov	s15, r3
 8002bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bbc:	ee17 0a90 	vmov	r0, s15
 8002bc0:	f7fd fc72 	bl	80004a8 <__aeabi_f2d>
 8002bc4:	a352      	add	r3, pc, #328	; (adr r3, 8002d10 <main+0x1a8>)
 8002bc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bca:	f7fd fcc5 	bl	8000558 <__aeabi_dmul>
 8002bce:	4602      	mov	r2, r0
 8002bd0:	460b      	mov	r3, r1
 8002bd2:	4610      	mov	r0, r2
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f04f 0200 	mov.w	r2, #0
 8002bda:	4b52      	ldr	r3, [pc, #328]	; (8002d24 <main+0x1bc>)
 8002bdc:	f7fd fde6 	bl	80007ac <__aeabi_ddiv>
 8002be0:	4602      	mov	r2, r0
 8002be2:	460b      	mov	r3, r1
 8002be4:	ec43 2b17 	vmov	d7, r2, r3
 8002be8:	eeb0 0a47 	vmov.f32	s0, s14
 8002bec:	eef0 0a67 	vmov.f32	s1, s15
 8002bf0:	f00a fcc2 	bl	800d578 <sin>
 8002bf4:	ec51 0b10 	vmov	r0, r1, d0
 8002bf8:	f04f 0200 	mov.w	r2, #0
 8002bfc:	4b4a      	ldr	r3, [pc, #296]	; (8002d28 <main+0x1c0>)
 8002bfe:	f7fd fcab 	bl	8000558 <__aeabi_dmul>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4610      	mov	r0, r2
 8002c08:	4619      	mov	r1, r3
 8002c0a:	f04f 0200 	mov.w	r2, #0
 8002c0e:	4b46      	ldr	r3, [pc, #280]	; (8002d28 <main+0x1c0>)
 8002c10:	f7fd faec 	bl	80001ec <__adddf3>
 8002c14:	4602      	mov	r2, r0
 8002c16:	460b      	mov	r3, r1
 8002c18:	4610      	mov	r0, r2
 8002c1a:	4619      	mov	r1, r3
 8002c1c:	f7fd ff74 	bl	8000b08 <__aeabi_d2uiz>
 8002c20:	4603      	mov	r3, r0
 8002c22:	b299      	uxth	r1, r3
 8002c24:	4a41      	ldr	r2, [pc, #260]	; (8002d2c <main+0x1c4>)
 8002c26:	697b      	ldr	r3, [r7, #20]
 8002c28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
    for (int i = 0; i < WAVETABLE_SAMPLES; i++) {
 8002c2c:	697b      	ldr	r3, [r7, #20]
 8002c2e:	3301      	adds	r3, #1
 8002c30:	617b      	str	r3, [r7, #20]
 8002c32:	697b      	ldr	r3, [r7, #20]
 8002c34:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c38:	dbbb      	blt.n	8002bb2 <main+0x4a>
        //sprintf(buf, "%i %i ", i, wavetable[i]);
        //serialPrintln(buf);
    }

    serialPrintln("Wavetable gen done");
 8002c3a:	483d      	ldr	r0, [pc, #244]	; (8002d30 <main+0x1c8>)
 8002c3c:	f000 fb8c 	bl	8003358 <serialPrintln>

    HAL_TIM_Base_Start(&htim2);
 8002c40:	483c      	ldr	r0, [pc, #240]	; (8002d34 <main+0x1cc>)
 8002c42:	f005 ffed 	bl	8008c20 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim7);
 8002c46:	483c      	ldr	r0, [pc, #240]	; (8002d38 <main+0x1d0>)
 8002c48:	f005 ffea 	bl	8008c20 <HAL_TIM_Base_Start>

    HAL_TIM_Base_Start_IT(&htim6);
 8002c4c:	483b      	ldr	r0, [pc, #236]	; (8002d3c <main+0x1d4>)
 8002c4e:	f006 f833 	bl	8008cb8 <HAL_TIM_Base_Start_IT>


    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)output_wave, OUTPUT_SAMPLES, DAC_ALIGN_12B_R);
 8002c52:	2300      	movs	r3, #0
 8002c54:	9300      	str	r3, [sp, #0]
 8002c56:	2340      	movs	r3, #64	; 0x40
 8002c58:	4a39      	ldr	r2, [pc, #228]	; (8002d40 <main+0x1d8>)
 8002c5a:	2100      	movs	r1, #0
 8002c5c:	4839      	ldr	r0, [pc, #228]	; (8002d44 <main+0x1dc>)
 8002c5e:	f002 fd3b 	bl	80056d8 <HAL_DAC_Start_DMA>
    HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8002c62:	2110      	movs	r1, #16
 8002c64:	4837      	ldr	r0, [pc, #220]	; (8002d44 <main+0x1dc>)
 8002c66:	f002 fce9 	bl	800563c <HAL_DAC_Start>

    setOutMuxBit(DRST_BIT, GPIO_PIN_RESET);
 8002c6a:	2304      	movs	r3, #4
 8002c6c:	b2db      	uxtb	r3, r3
 8002c6e:	2100      	movs	r1, #0
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fba9 	bl	80033c8 <setOutMuxBit>
    delayMicro(2);
 8002c76:	2002      	movs	r0, #2
 8002c78:	f000 fb8c 	bl	8003394 <delayMicro>
    setOutMuxBit(DRST_BIT, GPIO_PIN_SET);
 8002c7c:	2304      	movs	r3, #4
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	2101      	movs	r1, #1
 8002c82:	4618      	mov	r0, r3
 8002c84:	f000 fba0 	bl	80033c8 <setOutMuxBit>
    u8g2_Setup_ssd1305_i2c_128x32_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c,
 8002c88:	4b2f      	ldr	r3, [pc, #188]	; (8002d48 <main+0x1e0>)
 8002c8a:	4a30      	ldr	r2, [pc, #192]	; (8002d4c <main+0x1e4>)
 8002c8c:	4930      	ldr	r1, [pc, #192]	; (8002d50 <main+0x1e8>)
 8002c8e:	4831      	ldr	r0, [pc, #196]	; (8002d54 <main+0x1ec>)
 8002c90:	f7fe fa2c 	bl	80010ec <u8g2_Setup_ssd1305_i2c_128x32_noname_f>
                u8x8_gpio_and_delay);
    u8g2_InitDisplay(&u8g2);
 8002c94:	482f      	ldr	r0, [pc, #188]	; (8002d54 <main+0x1ec>)
 8002c96:	f7ff fe35 	bl	8002904 <u8x8_InitDisplay>
    u8g2_ClearDisplay(&u8g2);
 8002c9a:	482e      	ldr	r0, [pc, #184]	; (8002d54 <main+0x1ec>)
 8002c9c:	f7fe fa01 	bl	80010a2 <u8g2_ClearDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	482c      	ldr	r0, [pc, #176]	; (8002d54 <main+0x1ec>)
 8002ca4:	f7ff fe3d 	bl	8002922 <u8x8_SetPowerSave>
    setOutMuxBit(DEN_BIT, GPIO_PIN_SET);
 8002ca8:	2303      	movs	r3, #3
 8002caa:	b2db      	uxtb	r3, r3
 8002cac:	2101      	movs	r1, #1
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f000 fb8a 	bl	80033c8 <setOutMuxBit>


  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002cb4:	f007 f8e8 	bl	8009e88 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of keysMutex */
  keysMutexHandle = osMutexNew(&keysMutex_attributes);
 8002cb8:	4827      	ldr	r0, [pc, #156]	; (8002d58 <main+0x1f0>)
 8002cba:	f007 f9dc 	bl	800a076 <osMutexNew>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	4a26      	ldr	r2, [pc, #152]	; (8002d5c <main+0x1f4>)
 8002cc2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
        /* add mutexes, ... */
        osMutexRelease(keysMutexHandle);
 8002cc4:	4b25      	ldr	r3, [pc, #148]	; (8002d5c <main+0x1f4>)
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	4618      	mov	r0, r3
 8002cca:	f007 faa5 	bl	800a218 <osMutexRelease>
        /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8002cce:	4a24      	ldr	r2, [pc, #144]	; (8002d60 <main+0x1f8>)
 8002cd0:	2100      	movs	r1, #0
 8002cd2:	4824      	ldr	r0, [pc, #144]	; (8002d64 <main+0x1fc>)
 8002cd4:	f007 f922 	bl	8009f1c <osThreadNew>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4a23      	ldr	r2, [pc, #140]	; (8002d68 <main+0x200>)
 8002cdc:	6013      	str	r3, [r2, #0]

  /* creation of scanKeys */
  scanKeysHandle = osThreadNew(scanKeysTask, NULL, &scanKeys_attributes);
 8002cde:	4a23      	ldr	r2, [pc, #140]	; (8002d6c <main+0x204>)
 8002ce0:	2100      	movs	r1, #0
 8002ce2:	4823      	ldr	r0, [pc, #140]	; (8002d70 <main+0x208>)
 8002ce4:	f007 f91a 	bl	8009f1c <osThreadNew>
 8002ce8:	4603      	mov	r3, r0
 8002cea:	4a22      	ldr	r2, [pc, #136]	; (8002d74 <main+0x20c>)
 8002cec:	6013      	str	r3, [r2, #0]

  /* creation of displayUpdate */
  displayUpdateHandle = osThreadNew(displayUpdateTask, NULL, &displayUpdate_attributes);
 8002cee:	4a22      	ldr	r2, [pc, #136]	; (8002d78 <main+0x210>)
 8002cf0:	2100      	movs	r1, #0
 8002cf2:	4822      	ldr	r0, [pc, #136]	; (8002d7c <main+0x214>)
 8002cf4:	f007 f912 	bl	8009f1c <osThreadNew>
 8002cf8:	4603      	mov	r3, r0
 8002cfa:	4a21      	ldr	r2, [pc, #132]	; (8002d80 <main+0x218>)
 8002cfc:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
        /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002cfe:	f007 f8e7 	bl	8009ed0 <osKernelStart>
 8002d02:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8002d04:	4618      	mov	r0, r3
 8002d06:	3718      	adds	r7, #24
 8002d08:	46bd      	mov	sp, r7
 8002d0a:	bd80      	pop	{r7, pc}
 8002d0c:	f3af 8000 	nop.w
 8002d10:	54442eea 	.word	0x54442eea
 8002d14:	401921fb 	.word	0x401921fb
 8002d18:	2000060c 	.word	0x2000060c
 8002d1c:	200005dc 	.word	0x200005dc
 8002d20:	0800f7c8 	.word	0x0800f7c8
 8002d24:	40900000 	.word	0x40900000
 8002d28:	40a00000 	.word	0x40a00000
 8002d2c:	2000063c 	.word	0x2000063c
 8002d30:	0800f7d8 	.word	0x0800f7d8
 8002d34:	200003d0 	.word	0x200003d0
 8002d38:	20000468 	.word	0x20000468
 8002d3c:	2000041c 	.word	0x2000041c
 8002d40:	20000e54 	.word	0x20000e54
 8002d44:	20000320 	.word	0x20000320
 8002d48:	08003451 	.word	0x08003451
 8002d4c:	08003471 	.word	0x08003471
 8002d50:	0800fcac 	.word	0x0800fcac
 8002d54:	20000548 	.word	0x20000548
 8002d58:	0800fd98 	.word	0x0800fd98
 8002d5c:	20000544 	.word	0x20000544
 8002d60:	0800fd2c 	.word	0x0800fd2c
 8002d64:	0800376d 	.word	0x0800376d
 8002d68:	20000538 	.word	0x20000538
 8002d6c:	0800fd50 	.word	0x0800fd50
 8002d70:	0800377d 	.word	0x0800377d
 8002d74:	2000053c 	.word	0x2000053c
 8002d78:	0800fd74 	.word	0x0800fd74
 8002d7c:	080037cd 	.word	0x080037cd
 8002d80:	20000540 	.word	0x20000540

08002d84 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b096      	sub	sp, #88	; 0x58
 8002d88:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002d8a:	f107 0314 	add.w	r3, r7, #20
 8002d8e:	2244      	movs	r2, #68	; 0x44
 8002d90:	2100      	movs	r1, #0
 8002d92:	4618      	mov	r0, r3
 8002d94:	f00a fadc 	bl	800d350 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002d98:	463b      	mov	r3, r7
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	601a      	str	r2, [r3, #0]
 8002d9e:	605a      	str	r2, [r3, #4]
 8002da0:	609a      	str	r2, [r3, #8]
 8002da2:	60da      	str	r2, [r3, #12]
 8002da4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002da6:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002daa:	f004 fd29 	bl	8007800 <HAL_PWREx_ControlVoltageScaling>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d001      	beq.n	8002db8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002db4:	f000 fd64 	bl	8003880 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002db8:	f004 fd04 	bl	80077c4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002dbc:	4b21      	ldr	r3, [pc, #132]	; (8002e44 <SystemClock_Config+0xc0>)
 8002dbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dc2:	4a20      	ldr	r2, [pc, #128]	; (8002e44 <SystemClock_Config+0xc0>)
 8002dc4:	f023 0318 	bic.w	r3, r3, #24
 8002dc8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002dcc:	2314      	movs	r3, #20
 8002dce:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002dd0:	2301      	movs	r3, #1
 8002dd2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002dd8:	2300      	movs	r3, #0
 8002dda:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002ddc:	2360      	movs	r3, #96	; 0x60
 8002dde:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002de0:	2302      	movs	r3, #2
 8002de2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002de4:	2301      	movs	r3, #1
 8002de6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002de8:	2301      	movs	r3, #1
 8002dea:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002dec:	2328      	movs	r3, #40	; 0x28
 8002dee:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002df0:	2307      	movs	r3, #7
 8002df2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002df4:	2302      	movs	r3, #2
 8002df6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002dfc:	f107 0314 	add.w	r3, r7, #20
 8002e00:	4618      	mov	r0, r3
 8002e02:	f004 fd53 	bl	80078ac <HAL_RCC_OscConfig>
 8002e06:	4603      	mov	r3, r0
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d001      	beq.n	8002e10 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002e0c:	f000 fd38 	bl	8003880 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002e10:	230f      	movs	r3, #15
 8002e12:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002e14:	2303      	movs	r3, #3
 8002e16:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002e18:	2300      	movs	r3, #0
 8002e1a:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002e20:	2300      	movs	r3, #0
 8002e22:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002e24:	463b      	mov	r3, r7
 8002e26:	2104      	movs	r1, #4
 8002e28:	4618      	mov	r0, r3
 8002e2a:	f005 f953 	bl	80080d4 <HAL_RCC_ClockConfig>
 8002e2e:	4603      	mov	r3, r0
 8002e30:	2b00      	cmp	r3, #0
 8002e32:	d001      	beq.n	8002e38 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002e34:	f000 fd24 	bl	8003880 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002e38:	f005 fd98 	bl	800896c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002e3c:	bf00      	nop
 8002e3e:	3758      	adds	r7, #88	; 0x58
 8002e40:	46bd      	mov	sp, r7
 8002e42:	bd80      	pop	{r7, pc}
 8002e44:	40021000 	.word	0x40021000

08002e48 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002e4e:	463b      	mov	r3, r7
 8002e50:	2200      	movs	r2, #0
 8002e52:	601a      	str	r2, [r3, #0]
 8002e54:	605a      	str	r2, [r3, #4]
 8002e56:	609a      	str	r2, [r3, #8]
 8002e58:	60da      	str	r2, [r3, #12]
 8002e5a:	611a      	str	r2, [r3, #16]
 8002e5c:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002e5e:	4b29      	ldr	r3, [pc, #164]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002e60:	4a29      	ldr	r2, [pc, #164]	; (8002f08 <MX_ADC1_Init+0xc0>)
 8002e62:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002e64:	4b27      	ldr	r3, [pc, #156]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002e66:	2200      	movs	r2, #0
 8002e68:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002e6a:	4b26      	ldr	r3, [pc, #152]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002e70:	4b24      	ldr	r3, [pc, #144]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002e76:	4b23      	ldr	r3, [pc, #140]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002e78:	2200      	movs	r2, #0
 8002e7a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002e7c:	4b21      	ldr	r3, [pc, #132]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002e7e:	2204      	movs	r2, #4
 8002e80:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002e82:	4b20      	ldr	r3, [pc, #128]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002e84:	2200      	movs	r2, #0
 8002e86:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002e88:	4b1e      	ldr	r3, [pc, #120]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002e8a:	2200      	movs	r2, #0
 8002e8c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 8002e8e:	4b1d      	ldr	r3, [pc, #116]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002e90:	2201      	movs	r2, #1
 8002e92:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002e94:	4b1b      	ldr	r3, [pc, #108]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002e9c:	4b19      	ldr	r3, [pc, #100]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002ea2:	4b18      	ldr	r3, [pc, #96]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002ea8:	4b16      	ldr	r3, [pc, #88]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002eb0:	4b14      	ldr	r3, [pc, #80]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002eb6:	4b13      	ldr	r3, [pc, #76]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002ebe:	4811      	ldr	r0, [pc, #68]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002ec0:	f001 fa5c 	bl	800437c <HAL_ADC_Init>
 8002ec4:	4603      	mov	r3, r0
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d001      	beq.n	8002ece <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 8002eca:	f000 fcd9 	bl	8003880 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002ece:	4b0f      	ldr	r3, [pc, #60]	; (8002f0c <MX_ADC1_Init+0xc4>)
 8002ed0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002ed2:	2306      	movs	r3, #6
 8002ed4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002ed6:	2300      	movs	r3, #0
 8002ed8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002eda:	237f      	movs	r3, #127	; 0x7f
 8002edc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ede:	2304      	movs	r3, #4
 8002ee0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002ee6:	463b      	mov	r3, r7
 8002ee8:	4619      	mov	r1, r3
 8002eea:	4806      	ldr	r0, [pc, #24]	; (8002f04 <MX_ADC1_Init+0xbc>)
 8002eec:	f001 fb8e 	bl	800460c <HAL_ADC_ConfigChannel>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d001      	beq.n	8002efa <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8002ef6:	f000 fcc3 	bl	8003880 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002efa:	bf00      	nop
 8002efc:	3718      	adds	r7, #24
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}
 8002f02:	bf00      	nop
 8002f04:	20000294 	.word	0x20000294
 8002f08:	50040000 	.word	0x50040000
 8002f0c:	14f00020 	.word	0x14f00020

08002f10 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002f14:	4b18      	ldr	r3, [pc, #96]	; (8002f78 <MX_CAN1_Init+0x68>)
 8002f16:	4a19      	ldr	r2, [pc, #100]	; (8002f7c <MX_CAN1_Init+0x6c>)
 8002f18:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 8002f1a:	4b17      	ldr	r3, [pc, #92]	; (8002f78 <MX_CAN1_Init+0x68>)
 8002f1c:	2228      	movs	r2, #40	; 0x28
 8002f1e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002f20:	4b15      	ldr	r3, [pc, #84]	; (8002f78 <MX_CAN1_Init+0x68>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8002f26:	4b14      	ldr	r3, [pc, #80]	; (8002f78 <MX_CAN1_Init+0x68>)
 8002f28:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002f2c:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002f2e:	4b12      	ldr	r3, [pc, #72]	; (8002f78 <MX_CAN1_Init+0x68>)
 8002f30:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002f34:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002f36:	4b10      	ldr	r3, [pc, #64]	; (8002f78 <MX_CAN1_Init+0x68>)
 8002f38:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f3c:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002f3e:	4b0e      	ldr	r3, [pc, #56]	; (8002f78 <MX_CAN1_Init+0x68>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002f44:	4b0c      	ldr	r3, [pc, #48]	; (8002f78 <MX_CAN1_Init+0x68>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8002f4a:	4b0b      	ldr	r3, [pc, #44]	; (8002f78 <MX_CAN1_Init+0x68>)
 8002f4c:	2201      	movs	r2, #1
 8002f4e:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8002f50:	4b09      	ldr	r3, [pc, #36]	; (8002f78 <MX_CAN1_Init+0x68>)
 8002f52:	2201      	movs	r2, #1
 8002f54:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002f56:	4b08      	ldr	r3, [pc, #32]	; (8002f78 <MX_CAN1_Init+0x68>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8002f5c:	4b06      	ldr	r3, [pc, #24]	; (8002f78 <MX_CAN1_Init+0x68>)
 8002f5e:	2201      	movs	r2, #1
 8002f60:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002f62:	4805      	ldr	r0, [pc, #20]	; (8002f78 <MX_CAN1_Init+0x68>)
 8002f64:	f001 ff32 	bl	8004dcc <HAL_CAN_Init>
 8002f68:	4603      	mov	r3, r0
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d001      	beq.n	8002f72 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8002f6e:	f000 fc87 	bl	8003880 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002f72:	bf00      	nop
 8002f74:	bd80      	pop	{r7, pc}
 8002f76:	bf00      	nop
 8002f78:	200002f8 	.word	0x200002f8
 8002f7c:	40006400 	.word	0x40006400

08002f80 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b08a      	sub	sp, #40	; 0x28
 8002f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002f86:	1d3b      	adds	r3, r7, #4
 8002f88:	2224      	movs	r2, #36	; 0x24
 8002f8a:	2100      	movs	r1, #0
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f00a f9df 	bl	800d350 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002f92:	4b12      	ldr	r3, [pc, #72]	; (8002fdc <MX_DAC1_Init+0x5c>)
 8002f94:	4a12      	ldr	r2, [pc, #72]	; (8002fe0 <MX_DAC1_Init+0x60>)
 8002f96:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002f98:	4810      	ldr	r0, [pc, #64]	; (8002fdc <MX_DAC1_Init+0x5c>)
 8002f9a:	f002 fb2d 	bl	80055f8 <HAL_DAC_Init>
 8002f9e:	4603      	mov	r3, r0
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d001      	beq.n	8002fa8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002fa4:	f000 fc6c 	bl	8003880 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002fa8:	2300      	movs	r3, #0
 8002faa:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 8002fac:	2324      	movs	r3, #36	; 0x24
 8002fae:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002fb0:	2300      	movs	r3, #0
 8002fb2:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8002fb4:	2300      	movs	r3, #0
 8002fb6:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	4619      	mov	r1, r3
 8002fc2:	4806      	ldr	r0, [pc, #24]	; (8002fdc <MX_DAC1_Init+0x5c>)
 8002fc4:	f002 fcc2 	bl	800594c <HAL_DAC_ConfigChannel>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d001      	beq.n	8002fd2 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002fce:	f000 fc57 	bl	8003880 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002fd2:	bf00      	nop
 8002fd4:	3728      	adds	r7, #40	; 0x28
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
 8002fda:	bf00      	nop
 8002fdc:	20000320 	.word	0x20000320
 8002fe0:	40007400 	.word	0x40007400

08002fe4 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002fe8:	4b1d      	ldr	r3, [pc, #116]	; (8003060 <MX_I2C1_Init+0x7c>)
 8002fea:	4a1e      	ldr	r2, [pc, #120]	; (8003064 <MX_I2C1_Init+0x80>)
 8002fec:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F33;
 8002fee:	4b1c      	ldr	r3, [pc, #112]	; (8003060 <MX_I2C1_Init+0x7c>)
 8002ff0:	4a1d      	ldr	r2, [pc, #116]	; (8003068 <MX_I2C1_Init+0x84>)
 8002ff2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002ff4:	4b1a      	ldr	r3, [pc, #104]	; (8003060 <MX_I2C1_Init+0x7c>)
 8002ff6:	2200      	movs	r2, #0
 8002ff8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002ffa:	4b19      	ldr	r3, [pc, #100]	; (8003060 <MX_I2C1_Init+0x7c>)
 8002ffc:	2201      	movs	r2, #1
 8002ffe:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003000:	4b17      	ldr	r3, [pc, #92]	; (8003060 <MX_I2C1_Init+0x7c>)
 8003002:	2200      	movs	r2, #0
 8003004:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003006:	4b16      	ldr	r3, [pc, #88]	; (8003060 <MX_I2C1_Init+0x7c>)
 8003008:	2200      	movs	r2, #0
 800300a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800300c:	4b14      	ldr	r3, [pc, #80]	; (8003060 <MX_I2C1_Init+0x7c>)
 800300e:	2200      	movs	r2, #0
 8003010:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003012:	4b13      	ldr	r3, [pc, #76]	; (8003060 <MX_I2C1_Init+0x7c>)
 8003014:	2200      	movs	r2, #0
 8003016:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003018:	4b11      	ldr	r3, [pc, #68]	; (8003060 <MX_I2C1_Init+0x7c>)
 800301a:	2200      	movs	r2, #0
 800301c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800301e:	4810      	ldr	r0, [pc, #64]	; (8003060 <MX_I2C1_Init+0x7c>)
 8003020:	f003 fa22 	bl	8006468 <HAL_I2C_Init>
 8003024:	4603      	mov	r3, r0
 8003026:	2b00      	cmp	r3, #0
 8003028:	d001      	beq.n	800302e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800302a:	f000 fc29 	bl	8003880 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800302e:	2100      	movs	r1, #0
 8003030:	480b      	ldr	r0, [pc, #44]	; (8003060 <MX_I2C1_Init+0x7c>)
 8003032:	f004 fb0f 	bl	8007654 <HAL_I2CEx_ConfigAnalogFilter>
 8003036:	4603      	mov	r3, r0
 8003038:	2b00      	cmp	r3, #0
 800303a:	d001      	beq.n	8003040 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 800303c:	f000 fc20 	bl	8003880 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003040:	2100      	movs	r1, #0
 8003042:	4807      	ldr	r0, [pc, #28]	; (8003060 <MX_I2C1_Init+0x7c>)
 8003044:	f004 fb51 	bl	80076ea <HAL_I2CEx_ConfigDigitalFilter>
 8003048:	4603      	mov	r3, r0
 800304a:	2b00      	cmp	r3, #0
 800304c:	d001      	beq.n	8003052 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 800304e:	f000 fc17 	bl	8003880 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8003052:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003056:	f004 fb95 	bl	8007784 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800305a:	bf00      	nop
 800305c:	bd80      	pop	{r7, pc}
 800305e:	bf00      	nop
 8003060:	2000037c 	.word	0x2000037c
 8003064:	40005400 	.word	0x40005400
 8003068:	00300f33 	.word	0x00300f33

0800306c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800306c:	b580      	push	{r7, lr}
 800306e:	b088      	sub	sp, #32
 8003070:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003072:	f107 0310 	add.w	r3, r7, #16
 8003076:	2200      	movs	r2, #0
 8003078:	601a      	str	r2, [r3, #0]
 800307a:	605a      	str	r2, [r3, #4]
 800307c:	609a      	str	r2, [r3, #8]
 800307e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003080:	1d3b      	adds	r3, r7, #4
 8003082:	2200      	movs	r2, #0
 8003084:	601a      	str	r2, [r3, #0]
 8003086:	605a      	str	r2, [r3, #4]
 8003088:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800308a:	4b1e      	ldr	r3, [pc, #120]	; (8003104 <MX_TIM2_Init+0x98>)
 800308c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003090:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8003092:	4b1c      	ldr	r3, [pc, #112]	; (8003104 <MX_TIM2_Init+0x98>)
 8003094:	2200      	movs	r2, #0
 8003096:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003098:	4b1a      	ldr	r3, [pc, #104]	; (8003104 <MX_TIM2_Init+0x98>)
 800309a:	2200      	movs	r2, #0
 800309c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 2300;
 800309e:	4b19      	ldr	r3, [pc, #100]	; (8003104 <MX_TIM2_Init+0x98>)
 80030a0:	f640 02fc 	movw	r2, #2300	; 0x8fc
 80030a4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80030a6:	4b17      	ldr	r3, [pc, #92]	; (8003104 <MX_TIM2_Init+0x98>)
 80030a8:	2200      	movs	r2, #0
 80030aa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80030ac:	4b15      	ldr	r3, [pc, #84]	; (8003104 <MX_TIM2_Init+0x98>)
 80030ae:	2200      	movs	r2, #0
 80030b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80030b2:	4814      	ldr	r0, [pc, #80]	; (8003104 <MX_TIM2_Init+0x98>)
 80030b4:	f005 fd5c 	bl	8008b70 <HAL_TIM_Base_Init>
 80030b8:	4603      	mov	r3, r0
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d001      	beq.n	80030c2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80030be:	f000 fbdf 	bl	8003880 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80030c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80030c6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80030c8:	f107 0310 	add.w	r3, r7, #16
 80030cc:	4619      	mov	r1, r3
 80030ce:	480d      	ldr	r0, [pc, #52]	; (8003104 <MX_TIM2_Init+0x98>)
 80030d0:	f005 ff65 	bl	8008f9e <HAL_TIM_ConfigClockSource>
 80030d4:	4603      	mov	r3, r0
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d001      	beq.n	80030de <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80030da:	f000 fbd1 	bl	8003880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80030de:	2320      	movs	r3, #32
 80030e0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80030e2:	2300      	movs	r3, #0
 80030e4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80030e6:	1d3b      	adds	r3, r7, #4
 80030e8:	4619      	mov	r1, r3
 80030ea:	4806      	ldr	r0, [pc, #24]	; (8003104 <MX_TIM2_Init+0x98>)
 80030ec:	f006 f946 	bl	800937c <HAL_TIMEx_MasterConfigSynchronization>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80030f6:	f000 fbc3 	bl	8003880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80030fa:	bf00      	nop
 80030fc:	3720      	adds	r7, #32
 80030fe:	46bd      	mov	sp, r7
 8003100:	bd80      	pop	{r7, pc}
 8003102:	bf00      	nop
 8003104:	200003d0 	.word	0x200003d0

08003108 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b084      	sub	sp, #16
 800310c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800310e:	1d3b      	adds	r3, r7, #4
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]
 8003114:	605a      	str	r2, [r3, #4]
 8003116:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8003118:	4b14      	ldr	r3, [pc, #80]	; (800316c <MX_TIM6_Init+0x64>)
 800311a:	4a15      	ldr	r2, [pc, #84]	; (8003170 <MX_TIM6_Init+0x68>)
 800311c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 800311e:	4b13      	ldr	r3, [pc, #76]	; (800316c <MX_TIM6_Init+0x64>)
 8003120:	2200      	movs	r2, #0
 8003122:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003124:	4b11      	ldr	r3, [pc, #68]	; (800316c <MX_TIM6_Init+0x64>)
 8003126:	2200      	movs	r2, #0
 8003128:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3636-1;
 800312a:	4b10      	ldr	r3, [pc, #64]	; (800316c <MX_TIM6_Init+0x64>)
 800312c:	f640 6233 	movw	r2, #3635	; 0xe33
 8003130:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003132:	4b0e      	ldr	r3, [pc, #56]	; (800316c <MX_TIM6_Init+0x64>)
 8003134:	2200      	movs	r2, #0
 8003136:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8003138:	480c      	ldr	r0, [pc, #48]	; (800316c <MX_TIM6_Init+0x64>)
 800313a:	f005 fd19 	bl	8008b70 <HAL_TIM_Base_Init>
 800313e:	4603      	mov	r3, r0
 8003140:	2b00      	cmp	r3, #0
 8003142:	d001      	beq.n	8003148 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8003144:	f000 fb9c 	bl	8003880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003148:	2320      	movs	r3, #32
 800314a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8003150:	1d3b      	adds	r3, r7, #4
 8003152:	4619      	mov	r1, r3
 8003154:	4805      	ldr	r0, [pc, #20]	; (800316c <MX_TIM6_Init+0x64>)
 8003156:	f006 f911 	bl	800937c <HAL_TIMEx_MasterConfigSynchronization>
 800315a:	4603      	mov	r3, r0
 800315c:	2b00      	cmp	r3, #0
 800315e:	d001      	beq.n	8003164 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8003160:	f000 fb8e 	bl	8003880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003164:	bf00      	nop
 8003166:	3710      	adds	r7, #16
 8003168:	46bd      	mov	sp, r7
 800316a:	bd80      	pop	{r7, pc}
 800316c:	2000041c 	.word	0x2000041c
 8003170:	40001000 	.word	0x40001000

08003174 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003174:	b580      	push	{r7, lr}
 8003176:	b084      	sub	sp, #16
 8003178:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800317a:	1d3b      	adds	r3, r7, #4
 800317c:	2200      	movs	r2, #0
 800317e:	601a      	str	r2, [r3, #0]
 8003180:	605a      	str	r2, [r3, #4]
 8003182:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003184:	4b14      	ldr	r3, [pc, #80]	; (80031d8 <MX_TIM7_Init+0x64>)
 8003186:	4a15      	ldr	r2, [pc, #84]	; (80031dc <MX_TIM7_Init+0x68>)
 8003188:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80-1;
 800318a:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <MX_TIM7_Init+0x64>)
 800318c:	224f      	movs	r2, #79	; 0x4f
 800318e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003190:	4b11      	ldr	r3, [pc, #68]	; (80031d8 <MX_TIM7_Init+0x64>)
 8003192:	2200      	movs	r2, #0
 8003194:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8003196:	4b10      	ldr	r3, [pc, #64]	; (80031d8 <MX_TIM7_Init+0x64>)
 8003198:	f240 32e7 	movw	r2, #999	; 0x3e7
 800319c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800319e:	4b0e      	ldr	r3, [pc, #56]	; (80031d8 <MX_TIM7_Init+0x64>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 80031a4:	480c      	ldr	r0, [pc, #48]	; (80031d8 <MX_TIM7_Init+0x64>)
 80031a6:	f005 fce3 	bl	8008b70 <HAL_TIM_Base_Init>
 80031aa:	4603      	mov	r3, r0
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d001      	beq.n	80031b4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 80031b0:	f000 fb66 	bl	8003880 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80031b4:	2300      	movs	r3, #0
 80031b6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80031b8:	2300      	movs	r3, #0
 80031ba:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 80031bc:	1d3b      	adds	r3, r7, #4
 80031be:	4619      	mov	r1, r3
 80031c0:	4805      	ldr	r0, [pc, #20]	; (80031d8 <MX_TIM7_Init+0x64>)
 80031c2:	f006 f8db 	bl	800937c <HAL_TIMEx_MasterConfigSynchronization>
 80031c6:	4603      	mov	r3, r0
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d001      	beq.n	80031d0 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 80031cc:	f000 fb58 	bl	8003880 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 80031d0:	bf00      	nop
 80031d2:	3710      	adds	r7, #16
 80031d4:	46bd      	mov	sp, r7
 80031d6:	bd80      	pop	{r7, pc}
 80031d8:	20000468 	.word	0x20000468
 80031dc:	40001400 	.word	0x40001400

080031e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80031e4:	4b14      	ldr	r3, [pc, #80]	; (8003238 <MX_USART2_UART_Init+0x58>)
 80031e6:	4a15      	ldr	r2, [pc, #84]	; (800323c <MX_USART2_UART_Init+0x5c>)
 80031e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80031ea:	4b13      	ldr	r3, [pc, #76]	; (8003238 <MX_USART2_UART_Init+0x58>)
 80031ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80031f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80031f2:	4b11      	ldr	r3, [pc, #68]	; (8003238 <MX_USART2_UART_Init+0x58>)
 80031f4:	2200      	movs	r2, #0
 80031f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80031f8:	4b0f      	ldr	r3, [pc, #60]	; (8003238 <MX_USART2_UART_Init+0x58>)
 80031fa:	2200      	movs	r2, #0
 80031fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80031fe:	4b0e      	ldr	r3, [pc, #56]	; (8003238 <MX_USART2_UART_Init+0x58>)
 8003200:	2200      	movs	r2, #0
 8003202:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003204:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <MX_USART2_UART_Init+0x58>)
 8003206:	220c      	movs	r2, #12
 8003208:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800320a:	4b0b      	ldr	r3, [pc, #44]	; (8003238 <MX_USART2_UART_Init+0x58>)
 800320c:	2200      	movs	r2, #0
 800320e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003210:	4b09      	ldr	r3, [pc, #36]	; (8003238 <MX_USART2_UART_Init+0x58>)
 8003212:	2200      	movs	r2, #0
 8003214:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003216:	4b08      	ldr	r3, [pc, #32]	; (8003238 <MX_USART2_UART_Init+0x58>)
 8003218:	2200      	movs	r2, #0
 800321a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800321c:	4b06      	ldr	r3, [pc, #24]	; (8003238 <MX_USART2_UART_Init+0x58>)
 800321e:	2200      	movs	r2, #0
 8003220:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003222:	4805      	ldr	r0, [pc, #20]	; (8003238 <MX_USART2_UART_Init+0x58>)
 8003224:	f006 f92e 	bl	8009484 <HAL_UART_Init>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800322e:	f000 fb27 	bl	8003880 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003232:	bf00      	nop
 8003234:	bd80      	pop	{r7, pc}
 8003236:	bf00      	nop
 8003238:	200004b4 	.word	0x200004b4
 800323c:	40004400 	.word	0x40004400

08003240 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8003240:	b580      	push	{r7, lr}
 8003242:	b082      	sub	sp, #8
 8003244:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003246:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <MX_DMA_Init+0x38>)
 8003248:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800324a:	4a0b      	ldr	r2, [pc, #44]	; (8003278 <MX_DMA_Init+0x38>)
 800324c:	f043 0301 	orr.w	r3, r3, #1
 8003250:	6493      	str	r3, [r2, #72]	; 0x48
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <MX_DMA_Init+0x38>)
 8003254:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003256:	f003 0301 	and.w	r3, r3, #1
 800325a:	607b      	str	r3, [r7, #4]
 800325c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800325e:	2200      	movs	r2, #0
 8003260:	2105      	movs	r1, #5
 8003262:	200d      	movs	r0, #13
 8003264:	f002 f99e 	bl	80055a4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003268:	200d      	movs	r0, #13
 800326a:	f002 f9b7 	bl	80055dc <HAL_NVIC_EnableIRQ>

}
 800326e:	bf00      	nop
 8003270:	3708      	adds	r7, #8
 8003272:	46bd      	mov	sp, r7
 8003274:	bd80      	pop	{r7, pc}
 8003276:	bf00      	nop
 8003278:	40021000 	.word	0x40021000

0800327c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003282:	f107 030c 	add.w	r3, r7, #12
 8003286:	2200      	movs	r2, #0
 8003288:	601a      	str	r2, [r3, #0]
 800328a:	605a      	str	r2, [r3, #4]
 800328c:	609a      	str	r2, [r3, #8]
 800328e:	60da      	str	r2, [r3, #12]
 8003290:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003292:	4b2f      	ldr	r3, [pc, #188]	; (8003350 <MX_GPIO_Init+0xd4>)
 8003294:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003296:	4a2e      	ldr	r2, [pc, #184]	; (8003350 <MX_GPIO_Init+0xd4>)
 8003298:	f043 0304 	orr.w	r3, r3, #4
 800329c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800329e:	4b2c      	ldr	r3, [pc, #176]	; (8003350 <MX_GPIO_Init+0xd4>)
 80032a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032a2:	f003 0304 	and.w	r3, r3, #4
 80032a6:	60bb      	str	r3, [r7, #8]
 80032a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80032aa:	4b29      	ldr	r3, [pc, #164]	; (8003350 <MX_GPIO_Init+0xd4>)
 80032ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ae:	4a28      	ldr	r2, [pc, #160]	; (8003350 <MX_GPIO_Init+0xd4>)
 80032b0:	f043 0301 	orr.w	r3, r3, #1
 80032b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032b6:	4b26      	ldr	r3, [pc, #152]	; (8003350 <MX_GPIO_Init+0xd4>)
 80032b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032ba:	f003 0301 	and.w	r3, r3, #1
 80032be:	607b      	str	r3, [r7, #4]
 80032c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80032c2:	4b23      	ldr	r3, [pc, #140]	; (8003350 <MX_GPIO_Init+0xd4>)
 80032c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032c6:	4a22      	ldr	r2, [pc, #136]	; (8003350 <MX_GPIO_Init+0xd4>)
 80032c8:	f043 0302 	orr.w	r3, r3, #2
 80032cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80032ce:	4b20      	ldr	r3, [pc, #128]	; (8003350 <MX_GPIO_Init+0xd4>)
 80032d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80032d2:	f003 0302 	and.w	r3, r3, #2
 80032d6:	603b      	str	r3, [r7, #0]
 80032d8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80032da:	2200      	movs	r2, #0
 80032dc:	2140      	movs	r1, #64	; 0x40
 80032de:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032e2:	f003 f8a9 	bl	8006438 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RA0_Pin|RA1_Pin|LED_BUILTIN_Pin|RA2_Pin
 80032e6:	2200      	movs	r2, #0
 80032e8:	213b      	movs	r1, #59	; 0x3b
 80032ea:	481a      	ldr	r0, [pc, #104]	; (8003354 <MX_GPIO_Init+0xd8>)
 80032ec:	f003 f8a4 	bl	8006438 <HAL_GPIO_WritePin>
                          |OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C0_Pin C2_Pin C1_Pin C3_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C2_Pin|C1_Pin|C3_Pin;
 80032f0:	f44f 7362 	mov.w	r3, #904	; 0x388
 80032f4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80032f6:	2300      	movs	r3, #0
 80032f8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032fa:	2300      	movs	r3, #0
 80032fc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80032fe:	f107 030c 	add.w	r3, r7, #12
 8003302:	4619      	mov	r1, r3
 8003304:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003308:	f002 ff14 	bl	8006134 <HAL_GPIO_Init>

  /*Configure GPIO pin : REN_Pin */
  GPIO_InitStruct.Pin = REN_Pin;
 800330c:	2340      	movs	r3, #64	; 0x40
 800330e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003310:	2301      	movs	r3, #1
 8003312:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003314:	2300      	movs	r3, #0
 8003316:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003318:	2300      	movs	r3, #0
 800331a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(REN_GPIO_Port, &GPIO_InitStruct);
 800331c:	f107 030c 	add.w	r3, r7, #12
 8003320:	4619      	mov	r1, r3
 8003322:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003326:	f002 ff05 	bl	8006134 <HAL_GPIO_Init>

  /*Configure GPIO pins : RA0_Pin RA1_Pin LED_BUILTIN_Pin RA2_Pin
                           OUT_Pin */
  GPIO_InitStruct.Pin = RA0_Pin|RA1_Pin|LED_BUILTIN_Pin|RA2_Pin
 800332a:	233b      	movs	r3, #59	; 0x3b
 800332c:	60fb      	str	r3, [r7, #12]
                          |OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800332e:	2301      	movs	r3, #1
 8003330:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003332:	2300      	movs	r3, #0
 8003334:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003336:	2300      	movs	r3, #0
 8003338:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800333a:	f107 030c 	add.w	r3, r7, #12
 800333e:	4619      	mov	r1, r3
 8003340:	4804      	ldr	r0, [pc, #16]	; (8003354 <MX_GPIO_Init+0xd8>)
 8003342:	f002 fef7 	bl	8006134 <HAL_GPIO_Init>

}
 8003346:	bf00      	nop
 8003348:	3720      	adds	r7, #32
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}
 800334e:	bf00      	nop
 8003350:	40021000 	.word	0x40021000
 8003354:	48000400 	.word	0x48000400

08003358 <serialPrintln>:

void serialPrint(char val[]) {
	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
}

void serialPrintln(char val[]) {
 8003358:	b580      	push	{r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f7fc ff35 	bl	80001d0 <strlen>
 8003366:	4603      	mov	r3, r0
 8003368:	b29a      	uxth	r2, r3
 800336a:	230a      	movs	r3, #10
 800336c:	6879      	ldr	r1, [r7, #4]
 800336e:	4808      	ldr	r0, [pc, #32]	; (8003390 <serialPrintln+0x38>)
 8003370:	f006 f8d6 	bl	8009520 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003374:	f640 230d 	movw	r3, #2573	; 0xa0d
 8003378:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) newline, 2, 10);
 800337a:	f107 010c 	add.w	r1, r7, #12
 800337e:	230a      	movs	r3, #10
 8003380:	2202      	movs	r2, #2
 8003382:	4803      	ldr	r0, [pc, #12]	; (8003390 <serialPrintln+0x38>)
 8003384:	f006 f8cc 	bl	8009520 <HAL_UART_Transmit>

}
 8003388:	bf00      	nop
 800338a:	3710      	adds	r7, #16
 800338c:	46bd      	mov	sp, r7
 800338e:	bd80      	pop	{r7, pc}
 8003390:	200004b4 	.word	0x200004b4

08003394 <delayMicro>:

void delayMicro(uint16_t us) {
 8003394:	b480      	push	{r7}
 8003396:	b083      	sub	sp, #12
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	80fb      	strh	r3, [r7, #6]

	htim7.Instance->CNT = 0;
 800339e:	4b09      	ldr	r3, [pc, #36]	; (80033c4 <delayMicro+0x30>)
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	2200      	movs	r2, #0
 80033a4:	625a      	str	r2, [r3, #36]	; 0x24
	while (htim7.Instance->CNT < us)
 80033a6:	bf00      	nop
 80033a8:	4b06      	ldr	r3, [pc, #24]	; (80033c4 <delayMicro+0x30>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80033ae:	88fb      	ldrh	r3, [r7, #6]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	d3f9      	bcc.n	80033a8 <delayMicro+0x14>
		;

}
 80033b4:	bf00      	nop
 80033b6:	bf00      	nop
 80033b8:	370c      	adds	r7, #12
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000468 	.word	0x20000468

080033c8 <setOutMuxBit>:

void setOutMuxBit(const uint8_t bitIdx, const bool value) {
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	4603      	mov	r3, r0
 80033d0:	460a      	mov	r2, r1
 80033d2:	71fb      	strb	r3, [r7, #7]
 80033d4:	4613      	mov	r3, r2
 80033d6:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80033d8:	2200      	movs	r2, #0
 80033da:	2140      	movs	r1, #64	; 0x40
 80033dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033e0:	f003 f82a 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, bitIdx & 0x01);
 80033e4:	79fb      	ldrb	r3, [r7, #7]
 80033e6:	f003 0301 	and.w	r3, r3, #1
 80033ea:	b2db      	uxtb	r3, r3
 80033ec:	461a      	mov	r2, r3
 80033ee:	2101      	movs	r1, #1
 80033f0:	4816      	ldr	r0, [pc, #88]	; (800344c <setOutMuxBit+0x84>)
 80033f2:	f003 f821 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, bitIdx & 0x02);
 80033f6:	79fb      	ldrb	r3, [r7, #7]
 80033f8:	f003 0302 	and.w	r3, r3, #2
 80033fc:	b2db      	uxtb	r3, r3
 80033fe:	461a      	mov	r2, r3
 8003400:	2102      	movs	r1, #2
 8003402:	4812      	ldr	r0, [pc, #72]	; (800344c <setOutMuxBit+0x84>)
 8003404:	f003 f818 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, bitIdx & 0x04);
 8003408:	79fb      	ldrb	r3, [r7, #7]
 800340a:	f003 0304 	and.w	r3, r3, #4
 800340e:	b2db      	uxtb	r3, r3
 8003410:	461a      	mov	r2, r3
 8003412:	2110      	movs	r1, #16
 8003414:	480d      	ldr	r0, [pc, #52]	; (800344c <setOutMuxBit+0x84>)
 8003416:	f003 f80f 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, value);
 800341a:	79bb      	ldrb	r3, [r7, #6]
 800341c:	461a      	mov	r2, r3
 800341e:	2120      	movs	r1, #32
 8003420:	480a      	ldr	r0, [pc, #40]	; (800344c <setOutMuxBit+0x84>)
 8003422:	f003 f809 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 8003426:	2201      	movs	r2, #1
 8003428:	2140      	movs	r1, #64	; 0x40
 800342a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800342e:	f003 f803 	bl	8006438 <HAL_GPIO_WritePin>
	delayMicro(2);
 8003432:	2002      	movs	r0, #2
 8003434:	f7ff ffae 	bl	8003394 <delayMicro>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003438:	2200      	movs	r2, #0
 800343a:	2140      	movs	r1, #64	; 0x40
 800343c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003440:	f002 fffa 	bl	8006438 <HAL_GPIO_WritePin>

}
 8003444:	bf00      	nop
 8003446:	3708      	adds	r7, #8
 8003448:	46bd      	mov	sp, r7
 800344a:	bd80      	pop	{r7, pc}
 800344c:	48000400 	.word	0x48000400

08003450 <u8x8_gpio_and_delay>:

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8003450:	b480      	push	{r7}
 8003452:	b085      	sub	sp, #20
 8003454:	af00      	add	r7, sp, #0
 8003456:	60f8      	str	r0, [r7, #12]
 8003458:	607b      	str	r3, [r7, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	72fb      	strb	r3, [r7, #11]
 800345e:	4613      	mov	r3, r2
 8003460:	72bb      	strb	r3, [r7, #10]

	return 1;
 8003462:	2301      	movs	r3, #1

}
 8003464:	4618      	mov	r0, r3
 8003466:	3714      	adds	r7, #20
 8003468:	46bd      	mov	sp, r7
 800346a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800346e:	4770      	bx	lr

08003470 <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003470:	b580      	push	{r7, lr}
 8003472:	b088      	sub	sp, #32
 8003474:	af02      	add	r7, sp, #8
 8003476:	60f8      	str	r0, [r7, #12]
 8003478:	607b      	str	r3, [r7, #4]
 800347a:	460b      	mov	r3, r1
 800347c:	72fb      	strb	r3, [r7, #11]
 800347e:	4613      	mov	r3, r2
 8003480:	72bb      	strb	r3, [r7, #10]

	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch (msg) {
 8003482:	7afb      	ldrb	r3, [r7, #11]
 8003484:	3b14      	subs	r3, #20
 8003486:	2b0c      	cmp	r3, #12
 8003488:	d847      	bhi.n	800351a <u8x8_byte_i2c+0xaa>
 800348a:	a201      	add	r2, pc, #4	; (adr r2, 8003490 <u8x8_byte_i2c+0x20>)
 800348c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003490:	0800351f 	.word	0x0800351f
 8003494:	0800351b 	.word	0x0800351b
 8003498:	0800351b 	.word	0x0800351b
 800349c:	080034c5 	.word	0x080034c5
 80034a0:	080034f5 	.word	0x080034f5
 80034a4:	080034fd 	.word	0x080034fd
 80034a8:	0800351b 	.word	0x0800351b
 80034ac:	0800351b 	.word	0x0800351b
 80034b0:	0800351b 	.word	0x0800351b
 80034b4:	0800351b 	.word	0x0800351b
 80034b8:	0800351b 	.word	0x0800351b
 80034bc:	0800351b 	.word	0x0800351b
 80034c0:	0800351f 	.word	0x0800351f
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t*) arg_ptr;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	617b      	str	r3, [r7, #20]
		while (arg_int > 0) {
 80034c8:	e010      	b.n	80034ec <u8x8_byte_i2c+0x7c>
			buffer[buf_idx++] = *data;
 80034ca:	4b18      	ldr	r3, [pc, #96]	; (800352c <u8x8_byte_i2c+0xbc>)
 80034cc:	781b      	ldrb	r3, [r3, #0]
 80034ce:	1c5a      	adds	r2, r3, #1
 80034d0:	b2d1      	uxtb	r1, r2
 80034d2:	4a16      	ldr	r2, [pc, #88]	; (800352c <u8x8_byte_i2c+0xbc>)
 80034d4:	7011      	strb	r1, [r2, #0]
 80034d6:	461a      	mov	r2, r3
 80034d8:	697b      	ldr	r3, [r7, #20]
 80034da:	7819      	ldrb	r1, [r3, #0]
 80034dc:	4b14      	ldr	r3, [pc, #80]	; (8003530 <u8x8_byte_i2c+0xc0>)
 80034de:	5499      	strb	r1, [r3, r2]
			data++;
 80034e0:	697b      	ldr	r3, [r7, #20]
 80034e2:	3301      	adds	r3, #1
 80034e4:	617b      	str	r3, [r7, #20]
			arg_int--;
 80034e6:	7abb      	ldrb	r3, [r7, #10]
 80034e8:	3b01      	subs	r3, #1
 80034ea:	72bb      	strb	r3, [r7, #10]
		while (arg_int > 0) {
 80034ec:	7abb      	ldrb	r3, [r7, #10]
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d1eb      	bne.n	80034ca <u8x8_byte_i2c+0x5a>
		}
		break;
 80034f2:	e015      	b.n	8003520 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 80034f4:	4b0d      	ldr	r3, [pc, #52]	; (800352c <u8x8_byte_i2c+0xbc>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	701a      	strb	r2, [r3, #0]
		break;
 80034fa:	e011      	b.n	8003520 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8),
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003502:	b299      	uxth	r1, r3
 8003504:	4b09      	ldr	r3, [pc, #36]	; (800352c <u8x8_byte_i2c+0xbc>)
 8003506:	781b      	ldrb	r3, [r3, #0]
 8003508:	b29b      	uxth	r3, r3
 800350a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800350e:	9200      	str	r2, [sp, #0]
 8003510:	4a07      	ldr	r2, [pc, #28]	; (8003530 <u8x8_byte_i2c+0xc0>)
 8003512:	4808      	ldr	r0, [pc, #32]	; (8003534 <u8x8_byte_i2c+0xc4>)
 8003514:	f003 f838 	bl	8006588 <HAL_I2C_Master_Transmit>
				(uint8_t*) buffer, buf_idx, HAL_MAX_DELAY);
		break;
 8003518:	e002      	b.n	8003520 <u8x8_byte_i2c+0xb0>
	default:
		return 0;
 800351a:	2300      	movs	r3, #0
 800351c:	e001      	b.n	8003522 <u8x8_byte_i2c+0xb2>
		break;
 800351e:	bf00      	nop
	}

	return 1;
 8003520:	2301      	movs	r3, #1

}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	20000ee0 	.word	0x20000ee0
 8003530:	20000ee4 	.word	0x20000ee4
 8003534:	2000037c 	.word	0x2000037c

08003538 <setRow>:

void setRow(uint8_t rowIdx) {
 8003538:	b580      	push	{r7, lr}
 800353a:	b082      	sub	sp, #8
 800353c:	af00      	add	r7, sp, #0
 800353e:	4603      	mov	r3, r0
 8003540:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003542:	2200      	movs	r2, #0
 8003544:	2140      	movs	r1, #64	; 0x40
 8003546:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800354a:	f002 ff75 	bl	8006438 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, rowIdx & 0x01);
 800354e:	79fb      	ldrb	r3, [r7, #7]
 8003550:	f003 0301 	and.w	r3, r3, #1
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
 8003558:	2101      	movs	r1, #1
 800355a:	480f      	ldr	r0, [pc, #60]	; (8003598 <setRow+0x60>)
 800355c:	f002 ff6c 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, rowIdx & 0x02);
 8003560:	79fb      	ldrb	r3, [r7, #7]
 8003562:	f003 0302 	and.w	r3, r3, #2
 8003566:	b2db      	uxtb	r3, r3
 8003568:	461a      	mov	r2, r3
 800356a:	2102      	movs	r1, #2
 800356c:	480a      	ldr	r0, [pc, #40]	; (8003598 <setRow+0x60>)
 800356e:	f002 ff63 	bl	8006438 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, rowIdx & 0x04);
 8003572:	79fb      	ldrb	r3, [r7, #7]
 8003574:	f003 0304 	and.w	r3, r3, #4
 8003578:	b2db      	uxtb	r3, r3
 800357a:	461a      	mov	r2, r3
 800357c:	2110      	movs	r1, #16
 800357e:	4806      	ldr	r0, [pc, #24]	; (8003598 <setRow+0x60>)
 8003580:	f002 ff5a 	bl	8006438 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 8003584:	2201      	movs	r2, #1
 8003586:	2140      	movs	r1, #64	; 0x40
 8003588:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800358c:	f002 ff54 	bl	8006438 <HAL_GPIO_WritePin>

}
 8003590:	bf00      	nop
 8003592:	3708      	adds	r7, #8
 8003594:	46bd      	mov	sp, r7
 8003596:	bd80      	pop	{r7, pc}
 8003598:	48000400 	.word	0x48000400

0800359c <readCols>:

uint8_t readCols() {
 800359c:	b580      	push	{r7, lr}
 800359e:	b082      	sub	sp, #8
 80035a0:	af00      	add	r7, sp, #0

	uint8_t C0_val = HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin);
 80035a2:	2108      	movs	r1, #8
 80035a4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035a8:	f002 ff2e 	bl	8006408 <HAL_GPIO_ReadPin>
 80035ac:	4603      	mov	r3, r0
 80035ae:	71fb      	strb	r3, [r7, #7]
	uint8_t C1_val = HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin);
 80035b0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80035b4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035b8:	f002 ff26 	bl	8006408 <HAL_GPIO_ReadPin>
 80035bc:	4603      	mov	r3, r0
 80035be:	71bb      	strb	r3, [r7, #6]
	uint8_t C2_val = HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin);
 80035c0:	2180      	movs	r1, #128	; 0x80
 80035c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035c6:	f002 ff1f 	bl	8006408 <HAL_GPIO_ReadPin>
 80035ca:	4603      	mov	r3, r0
 80035cc:	717b      	strb	r3, [r7, #5]
	uint8_t C3_val = HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin);
 80035ce:	f44f 7100 	mov.w	r1, #512	; 0x200
 80035d2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80035d6:	f002 ff17 	bl	8006408 <HAL_GPIO_ReadPin>
 80035da:	4603      	mov	r3, r0
 80035dc:	713b      	strb	r3, [r7, #4]

	return (C3_val << 3) | (C2_val << 2) | (C1_val << 1) | C0_val;
 80035de:	793b      	ldrb	r3, [r7, #4]
 80035e0:	00db      	lsls	r3, r3, #3
 80035e2:	b25a      	sxtb	r2, r3
 80035e4:	797b      	ldrb	r3, [r7, #5]
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	b25b      	sxtb	r3, r3
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b25a      	sxtb	r2, r3
 80035ee:	79bb      	ldrb	r3, [r7, #6]
 80035f0:	005b      	lsls	r3, r3, #1
 80035f2:	b25b      	sxtb	r3, r3
 80035f4:	4313      	orrs	r3, r2
 80035f6:	b25a      	sxtb	r2, r3
 80035f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035fc:	4313      	orrs	r3, r2
 80035fe:	b25b      	sxtb	r3, r3
 8003600:	b2db      	uxtb	r3, r3

}
 8003602:	4618      	mov	r0, r3
 8003604:	3708      	adds	r7, #8
 8003606:	46bd      	mov	sp, r7
 8003608:	bd80      	pop	{r7, pc}

0800360a <readKeys>:

uint16_t readKeys() {
 800360a:	b580      	push	{r7, lr}
 800360c:	b082      	sub	sp, #8
 800360e:	af00      	add	r7, sp, #0

	uint16_t keysRead = 0;
 8003610:	2300      	movs	r3, #0
 8003612:	80fb      	strh	r3, [r7, #6]

	for (int i = 0; i <= 2; i++) {
 8003614:	2300      	movs	r3, #0
 8003616:	603b      	str	r3, [r7, #0]
 8003618:	e018      	b.n	800364c <readKeys+0x42>

		setRow(i);
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2db      	uxtb	r3, r3
 800361e:	4618      	mov	r0, r3
 8003620:	f7ff ff8a 	bl	8003538 <setRow>
		delayMicro(5);
 8003624:	2005      	movs	r0, #5
 8003626:	f7ff feb5 	bl	8003394 <delayMicro>
		keysRead |= readCols() << (4 * i);
 800362a:	f7ff ffb7 	bl	800359c <readCols>
 800362e:	4603      	mov	r3, r0
 8003630:	461a      	mov	r2, r3
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	fa02 f303 	lsl.w	r3, r2, r3
 800363a:	b21a      	sxth	r2, r3
 800363c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003640:	4313      	orrs	r3, r2
 8003642:	b21b      	sxth	r3, r3
 8003644:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i <= 2; i++) {
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	3301      	adds	r3, #1
 800364a:	603b      	str	r3, [r7, #0]
 800364c:	683b      	ldr	r3, [r7, #0]
 800364e:	2b02      	cmp	r3, #2
 8003650:	dde3      	ble.n	800361a <readKeys+0x10>

	}

	return keysRead;
 8003652:	88fb      	ldrh	r3, [r7, #6]

}
 8003654:	4618      	mov	r0, r3
 8003656:	3708      	adds	r7, #8
 8003658:	46bd      	mov	sp, r7
 800365a:	bd80      	pop	{r7, pc}
 800365c:	0000      	movs	r0, r0
	...

08003660 <rotationSteps>:

void rotationSteps(float *dreal, float *dimag) {
 8003660:	b5b0      	push	{r4, r5, r7, lr}
 8003662:	b084      	sub	sp, #16
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]

	float phi;

	for (int i = 0; i < 12; i++) {
 800366a:	2300      	movs	r3, #0
 800366c:	60fb      	str	r3, [r7, #12]
 800366e:	e067      	b.n	8003740 <rotationSteps+0xe0>

		phi = 2 * M_PI * fA * pow(2, (i - 9) / 12.0) / fs;
 8003670:	4b3b      	ldr	r3, [pc, #236]	; (8003760 <rotationSteps+0x100>)
 8003672:	4618      	mov	r0, r3
 8003674:	f7fc ff18 	bl	80004a8 <__aeabi_f2d>
 8003678:	a335      	add	r3, pc, #212	; (adr r3, 8003750 <rotationSteps+0xf0>)
 800367a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800367e:	f7fc ff6b 	bl	8000558 <__aeabi_dmul>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4614      	mov	r4, r2
 8003688:	461d      	mov	r5, r3
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	3b09      	subs	r3, #9
 800368e:	4618      	mov	r0, r3
 8003690:	f7fc fef8 	bl	8000484 <__aeabi_i2d>
 8003694:	f04f 0200 	mov.w	r2, #0
 8003698:	4b32      	ldr	r3, [pc, #200]	; (8003764 <rotationSteps+0x104>)
 800369a:	f7fd f887 	bl	80007ac <__aeabi_ddiv>
 800369e:	4602      	mov	r2, r0
 80036a0:	460b      	mov	r3, r1
 80036a2:	ec43 2b17 	vmov	d7, r2, r3
 80036a6:	eeb0 1a47 	vmov.f32	s2, s14
 80036aa:	eef0 1a67 	vmov.f32	s3, s15
 80036ae:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8003758 <rotationSteps+0xf8>
 80036b2:	f009 ffa9 	bl	800d608 <pow>
 80036b6:	ec53 2b10 	vmov	r2, r3, d0
 80036ba:	4620      	mov	r0, r4
 80036bc:	4629      	mov	r1, r5
 80036be:	f7fc ff4b 	bl	8000558 <__aeabi_dmul>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4614      	mov	r4, r2
 80036c8:	461d      	mov	r5, r3
 80036ca:	4b27      	ldr	r3, [pc, #156]	; (8003768 <rotationSteps+0x108>)
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fc feeb 	bl	80004a8 <__aeabi_f2d>
 80036d2:	4602      	mov	r2, r0
 80036d4:	460b      	mov	r3, r1
 80036d6:	4620      	mov	r0, r4
 80036d8:	4629      	mov	r1, r5
 80036da:	f7fd f867 	bl	80007ac <__aeabi_ddiv>
 80036de:	4602      	mov	r2, r0
 80036e0:	460b      	mov	r3, r1
 80036e2:	4610      	mov	r0, r2
 80036e4:	4619      	mov	r1, r3
 80036e6:	f7fd fa2f 	bl	8000b48 <__aeabi_d2f>
 80036ea:	4603      	mov	r3, r0
 80036ec:	60bb      	str	r3, [r7, #8]
		dreal[i] = cos(phi);
 80036ee:	68b8      	ldr	r0, [r7, #8]
 80036f0:	f7fc feda 	bl	80004a8 <__aeabi_f2d>
 80036f4:	4602      	mov	r2, r0
 80036f6:	460b      	mov	r3, r1
 80036f8:	ec43 2b10 	vmov	d0, r2, r3
 80036fc:	f009 fef4 	bl	800d4e8 <cos>
 8003700:	ec51 0b10 	vmov	r0, r1, d0
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	687a      	ldr	r2, [r7, #4]
 800370a:	18d4      	adds	r4, r2, r3
 800370c:	f7fd fa1c 	bl	8000b48 <__aeabi_d2f>
 8003710:	4603      	mov	r3, r0
 8003712:	6023      	str	r3, [r4, #0]
		dimag[i] = sin(phi);
 8003714:	68b8      	ldr	r0, [r7, #8]
 8003716:	f7fc fec7 	bl	80004a8 <__aeabi_f2d>
 800371a:	4602      	mov	r2, r0
 800371c:	460b      	mov	r3, r1
 800371e:	ec43 2b10 	vmov	d0, r2, r3
 8003722:	f009 ff29 	bl	800d578 <sin>
 8003726:	ec51 0b10 	vmov	r0, r1, d0
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	009b      	lsls	r3, r3, #2
 800372e:	683a      	ldr	r2, [r7, #0]
 8003730:	18d4      	adds	r4, r2, r3
 8003732:	f7fd fa09 	bl	8000b48 <__aeabi_d2f>
 8003736:	4603      	mov	r3, r0
 8003738:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 12; i++) {
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	3301      	adds	r3, #1
 800373e:	60fb      	str	r3, [r7, #12]
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b0b      	cmp	r3, #11
 8003744:	dd94      	ble.n	8003670 <rotationSteps+0x10>

	}

}
 8003746:	bf00      	nop
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bdb0      	pop	{r4, r5, r7, pc}
 8003750:	54442d18 	.word	0x54442d18
 8003754:	401921fb 	.word	0x401921fb
 8003758:	00000000 	.word	0x00000000
 800375c:	40000000 	.word	0x40000000
 8003760:	43dc0000 	.word	0x43dc0000
 8003764:	40280000 	.word	0x40280000
 8003768:	46abe000 	.word	0x46abe000

0800376c <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b082      	sub	sp, #8
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8003774:	2001      	movs	r0, #1
 8003776:	f006 fc63 	bl	800a040 <osDelay>
 800377a:	e7fb      	b.n	8003774 <StartDefaultTask+0x8>

0800377c <scanKeysTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_scanKeysTask */
void scanKeysTask(void *argument)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b086      	sub	sp, #24
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN scanKeysTask */

	const TickType_t xFrequency = 50 / portTICK_PERIOD_MS;
 8003784:	2332      	movs	r3, #50	; 0x32
 8003786:	617b      	str	r3, [r7, #20]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8003788:	f008 f8f2 	bl	800b970 <xTaskGetTickCount>
 800378c:	4603      	mov	r3, r0
 800378e:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8003790:	f107 030c 	add.w	r3, r7, #12
 8003794:	6979      	ldr	r1, [r7, #20]
 8003796:	4618      	mov	r0, r3
 8003798:	f007 ff1c 	bl	800b5d4 <vTaskDelayUntil>

		uint16_t localKeys = readKeys();
 800379c:	f7ff ff35 	bl	800360a <readKeys>
 80037a0:	4603      	mov	r3, r0
 80037a2:	827b      	strh	r3, [r7, #18]

		osMutexAcquire(keysMutexHandle, osWaitForever);
 80037a4:	4b07      	ldr	r3, [pc, #28]	; (80037c4 <scanKeysTask+0x48>)
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037ac:	4618      	mov	r0, r3
 80037ae:	f006 fce8 	bl	800a182 <osMutexAcquire>

		__atomic_store_n(&keys, localKeys, __ATOMIC_RELAXED);
 80037b2:	4a05      	ldr	r2, [pc, #20]	; (80037c8 <scanKeysTask+0x4c>)
 80037b4:	8a7b      	ldrh	r3, [r7, #18]
 80037b6:	8013      	strh	r3, [r2, #0]

		osMutexRelease(keysMutexHandle);
 80037b8:	4b02      	ldr	r3, [pc, #8]	; (80037c4 <scanKeysTask+0x48>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	4618      	mov	r0, r3
 80037be:	f006 fd2b 	bl	800a218 <osMutexRelease>
	for (;;) {
 80037c2:	e7e5      	b.n	8003790 <scanKeysTask+0x14>
 80037c4:	20000544 	.word	0x20000544
 80037c8:	20000000 	.word	0x20000000

080037cc <displayUpdateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_displayUpdateTask */
void displayUpdateTask(void *argument)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b086      	sub	sp, #24
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayUpdateTask */

    const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
 80037d4:	2364      	movs	r3, #100	; 0x64
 80037d6:	617b      	str	r3, [r7, #20]
    TickType_t xLastWakeTime = xTaskGetTickCount();
 80037d8:	f008 f8ca 	bl	800b970 <xTaskGetTickCount>
 80037dc:	4603      	mov	r3, r0
 80037de:	60fb      	str	r3, [r7, #12]

    /* Infinite loop */
    for (;;) {
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80037e0:	f107 030c 	add.w	r3, r7, #12
 80037e4:	6979      	ldr	r1, [r7, #20]
 80037e6:	4618      	mov	r0, r3
 80037e8:	f007 fef4 	bl	800b5d4 <vTaskDelayUntil>

        osMutexAcquire(keysMutexHandle, osWaitForever);
 80037ec:	4b15      	ldr	r3, [pc, #84]	; (8003844 <displayUpdateTask+0x78>)
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037f4:	4618      	mov	r0, r3
 80037f6:	f006 fcc4 	bl	800a182 <osMutexAcquire>

        uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <displayUpdateTask+0x7c>)
 80037fc:	881b      	ldrh	r3, [r3, #0]
 80037fe:	827b      	strh	r3, [r7, #18]

        osMutexRelease(keysMutexHandle);
 8003800:	4b10      	ldr	r3, [pc, #64]	; (8003844 <displayUpdateTask+0x78>)
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	4618      	mov	r0, r3
 8003806:	f006 fd07 	bl	800a218 <osMutexRelease>

        u8g2_ClearBuffer(&u8g2);
 800380a:	4810      	ldr	r0, [pc, #64]	; (800384c <displayUpdateTask+0x80>)
 800380c:	f7fd fb6e 	bl	8000eec <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_ncenB08_tr);
 8003810:	490f      	ldr	r1, [pc, #60]	; (8003850 <displayUpdateTask+0x84>)
 8003812:	480e      	ldr	r0, [pc, #56]	; (800384c <displayUpdateTask+0x80>)
 8003814:	f7fe fa1a 	bl	8001c4c <u8g2_SetFont>

        if (localKeys == 0x0FFF) {
 8003818:	8a7b      	ldrh	r3, [r7, #18]
 800381a:	f640 72ff 	movw	r2, #4095	; 0xfff
 800381e:	4293      	cmp	r3, r2
 8003820:	d106      	bne.n	8003830 <displayUpdateTask+0x64>
                u8g2_DrawStr(&u8g2, 2, 20, "- ^_^ -");
 8003822:	4b0c      	ldr	r3, [pc, #48]	; (8003854 <displayUpdateTask+0x88>)
 8003824:	2214      	movs	r2, #20
 8003826:	2102      	movs	r1, #2
 8003828:	4808      	ldr	r0, [pc, #32]	; (800384c <displayUpdateTask+0x80>)
 800382a:	f7fe f96d 	bl	8001b08 <u8g2_DrawStr>
 800382e:	e005      	b.n	800383c <displayUpdateTask+0x70>
        } else {
                u8g2_DrawStr(&u8g2, 2, 20, "- ^0^ -");
 8003830:	4b09      	ldr	r3, [pc, #36]	; (8003858 <displayUpdateTask+0x8c>)
 8003832:	2214      	movs	r2, #20
 8003834:	2102      	movs	r1, #2
 8003836:	4805      	ldr	r0, [pc, #20]	; (800384c <displayUpdateTask+0x80>)
 8003838:	f7fe f966 	bl	8001b08 <u8g2_DrawStr>
        }

        u8g2_SendBuffer(&u8g2);
 800383c:	4803      	ldr	r0, [pc, #12]	; (800384c <displayUpdateTask+0x80>)
 800383e:	f7fd fbc8 	bl	8000fd2 <u8g2_SendBuffer>
    for (;;) {
 8003842:	e7cd      	b.n	80037e0 <displayUpdateTask+0x14>
 8003844:	20000544 	.word	0x20000544
 8003848:	20000000 	.word	0x20000000
 800384c:	20000548 	.word	0x20000548
 8003850:	0800f81c 	.word	0x0800f81c
 8003854:	0800f7ec 	.word	0x0800f7ec
 8003858:	0800f7f4 	.word	0x0800f7f4

0800385c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]

	}
        */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	4a04      	ldr	r2, [pc, #16]	; (800387c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d101      	bne.n	8003872 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800386e:	f000 fbb5 	bl	8003fdc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40014400 	.word	0x40014400

08003880 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003880:	b480      	push	{r7}
 8003882:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003884:	b672      	cpsid	i
}
 8003886:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003888:	e7fe      	b.n	8003888 <Error_Handler+0x8>
	...

0800388c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b082      	sub	sp, #8
 8003890:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003892:	4b11      	ldr	r3, [pc, #68]	; (80038d8 <HAL_MspInit+0x4c>)
 8003894:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003896:	4a10      	ldr	r2, [pc, #64]	; (80038d8 <HAL_MspInit+0x4c>)
 8003898:	f043 0301 	orr.w	r3, r3, #1
 800389c:	6613      	str	r3, [r2, #96]	; 0x60
 800389e:	4b0e      	ldr	r3, [pc, #56]	; (80038d8 <HAL_MspInit+0x4c>)
 80038a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	607b      	str	r3, [r7, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038aa:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_MspInit+0x4c>)
 80038ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ae:	4a0a      	ldr	r2, [pc, #40]	; (80038d8 <HAL_MspInit+0x4c>)
 80038b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80038b4:	6593      	str	r3, [r2, #88]	; 0x58
 80038b6:	4b08      	ldr	r3, [pc, #32]	; (80038d8 <HAL_MspInit+0x4c>)
 80038b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038be:	603b      	str	r3, [r7, #0]
 80038c0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80038c2:	2200      	movs	r2, #0
 80038c4:	210f      	movs	r1, #15
 80038c6:	f06f 0001 	mvn.w	r0, #1
 80038ca:	f001 fe6b 	bl	80055a4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038ce:	bf00      	nop
 80038d0:	3708      	adds	r7, #8
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
 80038d6:	bf00      	nop
 80038d8:	40021000 	.word	0x40021000

080038dc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b09e      	sub	sp, #120	; 0x78
 80038e0:	af00      	add	r7, sp, #0
 80038e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038e4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80038e8:	2200      	movs	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
 80038ec:	605a      	str	r2, [r3, #4]
 80038ee:	609a      	str	r2, [r3, #8]
 80038f0:	60da      	str	r2, [r3, #12]
 80038f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038f4:	f107 0310 	add.w	r3, r7, #16
 80038f8:	2254      	movs	r2, #84	; 0x54
 80038fa:	2100      	movs	r1, #0
 80038fc:	4618      	mov	r0, r3
 80038fe:	f009 fd27 	bl	800d350 <memset>
  if(hadc->Instance==ADC1)
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	4a25      	ldr	r2, [pc, #148]	; (800399c <HAL_ADC_MspInit+0xc0>)
 8003908:	4293      	cmp	r3, r2
 800390a:	d143      	bne.n	8003994 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800390c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003910:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003912:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8003916:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003918:	2301      	movs	r3, #1
 800391a:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 800391c:	2301      	movs	r3, #1
 800391e:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003920:	2310      	movs	r3, #16
 8003922:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003924:	2307      	movs	r3, #7
 8003926:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003928:	2302      	movs	r3, #2
 800392a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 800392c:	2302      	movs	r3, #2
 800392e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003930:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003934:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003936:	f107 0310 	add.w	r3, r7, #16
 800393a:	4618      	mov	r0, r3
 800393c:	f004 fe20 	bl	8008580 <HAL_RCCEx_PeriphCLKConfig>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d001      	beq.n	800394a <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8003946:	f7ff ff9b 	bl	8003880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800394a:	4b15      	ldr	r3, [pc, #84]	; (80039a0 <HAL_ADC_MspInit+0xc4>)
 800394c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394e:	4a14      	ldr	r2, [pc, #80]	; (80039a0 <HAL_ADC_MspInit+0xc4>)
 8003950:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003954:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003956:	4b12      	ldr	r3, [pc, #72]	; (80039a0 <HAL_ADC_MspInit+0xc4>)
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800395e:	60fb      	str	r3, [r7, #12]
 8003960:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003962:	4b0f      	ldr	r3, [pc, #60]	; (80039a0 <HAL_ADC_MspInit+0xc4>)
 8003964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003966:	4a0e      	ldr	r2, [pc, #56]	; (80039a0 <HAL_ADC_MspInit+0xc4>)
 8003968:	f043 0301 	orr.w	r3, r3, #1
 800396c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800396e:	4b0c      	ldr	r3, [pc, #48]	; (80039a0 <HAL_ADC_MspInit+0xc4>)
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	60bb      	str	r3, [r7, #8]
 8003978:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = JOYY_Pin|JOYX_Pin;
 800397a:	2303      	movs	r3, #3
 800397c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800397e:	230b      	movs	r3, #11
 8003980:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003982:	2300      	movs	r3, #0
 8003984:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003986:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800398a:	4619      	mov	r1, r3
 800398c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003990:	f002 fbd0 	bl	8006134 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003994:	bf00      	nop
 8003996:	3778      	adds	r7, #120	; 0x78
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}
 800399c:	50040000 	.word	0x50040000
 80039a0:	40021000 	.word	0x40021000

080039a4 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	b08a      	sub	sp, #40	; 0x28
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039ac:	f107 0314 	add.w	r3, r7, #20
 80039b0:	2200      	movs	r2, #0
 80039b2:	601a      	str	r2, [r3, #0]
 80039b4:	605a      	str	r2, [r3, #4]
 80039b6:	609a      	str	r2, [r3, #8]
 80039b8:	60da      	str	r2, [r3, #12]
 80039ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	4a29      	ldr	r2, [pc, #164]	; (8003a68 <HAL_CAN_MspInit+0xc4>)
 80039c2:	4293      	cmp	r3, r2
 80039c4:	d14b      	bne.n	8003a5e <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 80039c6:	4b29      	ldr	r3, [pc, #164]	; (8003a6c <HAL_CAN_MspInit+0xc8>)
 80039c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039ca:	4a28      	ldr	r2, [pc, #160]	; (8003a6c <HAL_CAN_MspInit+0xc8>)
 80039cc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80039d0:	6593      	str	r3, [r2, #88]	; 0x58
 80039d2:	4b26      	ldr	r3, [pc, #152]	; (8003a6c <HAL_CAN_MspInit+0xc8>)
 80039d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039da:	613b      	str	r3, [r7, #16]
 80039dc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039de:	4b23      	ldr	r3, [pc, #140]	; (8003a6c <HAL_CAN_MspInit+0xc8>)
 80039e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039e2:	4a22      	ldr	r2, [pc, #136]	; (8003a6c <HAL_CAN_MspInit+0xc8>)
 80039e4:	f043 0301 	orr.w	r3, r3, #1
 80039e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80039ea:	4b20      	ldr	r3, [pc, #128]	; (8003a6c <HAL_CAN_MspInit+0xc8>)
 80039ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80039ee:	f003 0301 	and.w	r3, r3, #1
 80039f2:	60fb      	str	r3, [r7, #12]
 80039f4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80039f6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039fc:	2302      	movs	r3, #2
 80039fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a00:	2301      	movs	r3, #1
 8003a02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003a04:	2301      	movs	r3, #1
 8003a06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003a08:	2309      	movs	r3, #9
 8003a0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0c:	f107 0314 	add.w	r3, r7, #20
 8003a10:	4619      	mov	r1, r3
 8003a12:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a16:	f002 fb8d 	bl	8006134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8003a1a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a20:	2302      	movs	r3, #2
 8003a22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a24:	2300      	movs	r3, #0
 8003a26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8003a28:	2301      	movs	r3, #1
 8003a2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003a2c:	2309      	movs	r3, #9
 8003a2e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a30:	f107 0314 	add.w	r3, r7, #20
 8003a34:	4619      	mov	r1, r3
 8003a36:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a3a:	f002 fb7b 	bl	8006134 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8003a3e:	2200      	movs	r2, #0
 8003a40:	2105      	movs	r1, #5
 8003a42:	2013      	movs	r0, #19
 8003a44:	f001 fdae 	bl	80055a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8003a48:	2013      	movs	r0, #19
 8003a4a:	f001 fdc7 	bl	80055dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8003a4e:	2200      	movs	r2, #0
 8003a50:	2105      	movs	r1, #5
 8003a52:	2014      	movs	r0, #20
 8003a54:	f001 fda6 	bl	80055a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003a58:	2014      	movs	r0, #20
 8003a5a:	f001 fdbf 	bl	80055dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003a5e:	bf00      	nop
 8003a60:	3728      	adds	r7, #40	; 0x28
 8003a62:	46bd      	mov	sp, r7
 8003a64:	bd80      	pop	{r7, pc}
 8003a66:	bf00      	nop
 8003a68:	40006400 	.word	0x40006400
 8003a6c:	40021000 	.word	0x40021000

08003a70 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003a70:	b580      	push	{r7, lr}
 8003a72:	b08a      	sub	sp, #40	; 0x28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a78:	f107 0314 	add.w	r3, r7, #20
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	601a      	str	r2, [r3, #0]
 8003a80:	605a      	str	r2, [r3, #4]
 8003a82:	609a      	str	r2, [r3, #8]
 8003a84:	60da      	str	r2, [r3, #12]
 8003a86:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a2f      	ldr	r2, [pc, #188]	; (8003b4c <HAL_DAC_MspInit+0xdc>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d158      	bne.n	8003b44 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003a92:	4b2f      	ldr	r3, [pc, #188]	; (8003b50 <HAL_DAC_MspInit+0xe0>)
 8003a94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a96:	4a2e      	ldr	r2, [pc, #184]	; (8003b50 <HAL_DAC_MspInit+0xe0>)
 8003a98:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a9c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a9e:	4b2c      	ldr	r3, [pc, #176]	; (8003b50 <HAL_DAC_MspInit+0xe0>)
 8003aa0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003aa6:	613b      	str	r3, [r7, #16]
 8003aa8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003aaa:	4b29      	ldr	r3, [pc, #164]	; (8003b50 <HAL_DAC_MspInit+0xe0>)
 8003aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aae:	4a28      	ldr	r2, [pc, #160]	; (8003b50 <HAL_DAC_MspInit+0xe0>)
 8003ab0:	f043 0301 	orr.w	r3, r3, #1
 8003ab4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ab6:	4b26      	ldr	r3, [pc, #152]	; (8003b50 <HAL_DAC_MspInit+0xe0>)
 8003ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003aba:	f003 0301 	and.w	r3, r3, #1
 8003abe:	60fb      	str	r3, [r7, #12]
 8003ac0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = OUTR_Pin|OUTL_Pin;
 8003ac2:	2330      	movs	r3, #48	; 0x30
 8003ac4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003ac6:	2303      	movs	r3, #3
 8003ac8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aca:	2300      	movs	r3, #0
 8003acc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ace:	f107 0314 	add.w	r3, r7, #20
 8003ad2:	4619      	mov	r1, r3
 8003ad4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ad8:	f002 fb2c 	bl	8006134 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8003adc:	4b1d      	ldr	r3, [pc, #116]	; (8003b54 <HAL_DAC_MspInit+0xe4>)
 8003ade:	4a1e      	ldr	r2, [pc, #120]	; (8003b58 <HAL_DAC_MspInit+0xe8>)
 8003ae0:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8003ae2:	4b1c      	ldr	r3, [pc, #112]	; (8003b54 <HAL_DAC_MspInit+0xe4>)
 8003ae4:	2206      	movs	r2, #6
 8003ae6:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003ae8:	4b1a      	ldr	r3, [pc, #104]	; (8003b54 <HAL_DAC_MspInit+0xe4>)
 8003aea:	2210      	movs	r2, #16
 8003aec:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8003aee:	4b19      	ldr	r3, [pc, #100]	; (8003b54 <HAL_DAC_MspInit+0xe4>)
 8003af0:	2200      	movs	r2, #0
 8003af2:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8003af4:	4b17      	ldr	r3, [pc, #92]	; (8003b54 <HAL_DAC_MspInit+0xe4>)
 8003af6:	2280      	movs	r2, #128	; 0x80
 8003af8:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8003afa:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_DAC_MspInit+0xe4>)
 8003afc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b00:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003b02:	4b14      	ldr	r3, [pc, #80]	; (8003b54 <HAL_DAC_MspInit+0xe4>)
 8003b04:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b08:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8003b0a:	4b12      	ldr	r3, [pc, #72]	; (8003b54 <HAL_DAC_MspInit+0xe4>)
 8003b0c:	2220      	movs	r2, #32
 8003b0e:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8003b10:	4b10      	ldr	r3, [pc, #64]	; (8003b54 <HAL_DAC_MspInit+0xe4>)
 8003b12:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003b16:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8003b18:	480e      	ldr	r0, [pc, #56]	; (8003b54 <HAL_DAC_MspInit+0xe4>)
 8003b1a:	f002 f8c5 	bl	8005ca8 <HAL_DMA_Init>
 8003b1e:	4603      	mov	r3, r0
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d001      	beq.n	8003b28 <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8003b24:	f7ff feac 	bl	8003880 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	4a0a      	ldr	r2, [pc, #40]	; (8003b54 <HAL_DAC_MspInit+0xe4>)
 8003b2c:	609a      	str	r2, [r3, #8]
 8003b2e:	4a09      	ldr	r2, [pc, #36]	; (8003b54 <HAL_DAC_MspInit+0xe4>)
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003b34:	2200      	movs	r2, #0
 8003b36:	2105      	movs	r1, #5
 8003b38:	2036      	movs	r0, #54	; 0x36
 8003b3a:	f001 fd33 	bl	80055a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b3e:	2036      	movs	r0, #54	; 0x36
 8003b40:	f001 fd4c 	bl	80055dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003b44:	bf00      	nop
 8003b46:	3728      	adds	r7, #40	; 0x28
 8003b48:	46bd      	mov	sp, r7
 8003b4a:	bd80      	pop	{r7, pc}
 8003b4c:	40007400 	.word	0x40007400
 8003b50:	40021000 	.word	0x40021000
 8003b54:	20000334 	.word	0x20000334
 8003b58:	40020030 	.word	0x40020030

08003b5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b09e      	sub	sp, #120	; 0x78
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b64:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b68:	2200      	movs	r2, #0
 8003b6a:	601a      	str	r2, [r3, #0]
 8003b6c:	605a      	str	r2, [r3, #4]
 8003b6e:	609a      	str	r2, [r3, #8]
 8003b70:	60da      	str	r2, [r3, #12]
 8003b72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003b74:	f107 0310 	add.w	r3, r7, #16
 8003b78:	2254      	movs	r2, #84	; 0x54
 8003b7a:	2100      	movs	r1, #0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f009 fbe7 	bl	800d350 <memset>
  if(hi2c->Instance==I2C1)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4a26      	ldr	r2, [pc, #152]	; (8003c20 <HAL_I2C_MspInit+0xc4>)
 8003b88:	4293      	cmp	r3, r2
 8003b8a:	d145      	bne.n	8003c18 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003b8c:	2340      	movs	r3, #64	; 0x40
 8003b8e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003b90:	2300      	movs	r3, #0
 8003b92:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b94:	f107 0310 	add.w	r3, r7, #16
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f004 fcf1 	bl	8008580 <HAL_RCCEx_PeriphCLKConfig>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d001      	beq.n	8003ba8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003ba4:	f7ff fe6c 	bl	8003880 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003ba8:	4b1e      	ldr	r3, [pc, #120]	; (8003c24 <HAL_I2C_MspInit+0xc8>)
 8003baa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bac:	4a1d      	ldr	r2, [pc, #116]	; (8003c24 <HAL_I2C_MspInit+0xc8>)
 8003bae:	f043 0302 	orr.w	r3, r3, #2
 8003bb2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bb4:	4b1b      	ldr	r3, [pc, #108]	; (8003c24 <HAL_I2C_MspInit+0xc8>)
 8003bb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bb8:	f003 0302 	and.w	r3, r3, #2
 8003bbc:	60fb      	str	r3, [r7, #12]
 8003bbe:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003bc0:	23c0      	movs	r3, #192	; 0xc0
 8003bc2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003bc4:	2312      	movs	r3, #18
 8003bc6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003bc8:	2300      	movs	r3, #0
 8003bca:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003bcc:	2303      	movs	r3, #3
 8003bce:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003bd0:	2304      	movs	r3, #4
 8003bd2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003bd8:	4619      	mov	r1, r3
 8003bda:	4813      	ldr	r0, [pc, #76]	; (8003c28 <HAL_I2C_MspInit+0xcc>)
 8003bdc:	f002 faaa 	bl	8006134 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003be0:	4b10      	ldr	r3, [pc, #64]	; (8003c24 <HAL_I2C_MspInit+0xc8>)
 8003be2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003be4:	4a0f      	ldr	r2, [pc, #60]	; (8003c24 <HAL_I2C_MspInit+0xc8>)
 8003be6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003bea:	6593      	str	r3, [r2, #88]	; 0x58
 8003bec:	4b0d      	ldr	r3, [pc, #52]	; (8003c24 <HAL_I2C_MspInit+0xc8>)
 8003bee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003bf4:	60bb      	str	r3, [r7, #8]
 8003bf6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	2105      	movs	r1, #5
 8003bfc:	201f      	movs	r0, #31
 8003bfe:	f001 fcd1 	bl	80055a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003c02:	201f      	movs	r0, #31
 8003c04:	f001 fcea 	bl	80055dc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8003c08:	2200      	movs	r2, #0
 8003c0a:	2105      	movs	r1, #5
 8003c0c:	2020      	movs	r0, #32
 8003c0e:	f001 fcc9 	bl	80055a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003c12:	2020      	movs	r0, #32
 8003c14:	f001 fce2 	bl	80055dc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003c18:	bf00      	nop
 8003c1a:	3778      	adds	r7, #120	; 0x78
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	40005400 	.word	0x40005400
 8003c24:	40021000 	.word	0x40021000
 8003c28:	48000400 	.word	0x48000400

08003c2c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	b086      	sub	sp, #24
 8003c30:	af00      	add	r7, sp, #0
 8003c32:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c3c:	d10c      	bne.n	8003c58 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003c3e:	4b1e      	ldr	r3, [pc, #120]	; (8003cb8 <HAL_TIM_Base_MspInit+0x8c>)
 8003c40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c42:	4a1d      	ldr	r2, [pc, #116]	; (8003cb8 <HAL_TIM_Base_MspInit+0x8c>)
 8003c44:	f043 0301 	orr.w	r3, r3, #1
 8003c48:	6593      	str	r3, [r2, #88]	; 0x58
 8003c4a:	4b1b      	ldr	r3, [pc, #108]	; (8003cb8 <HAL_TIM_Base_MspInit+0x8c>)
 8003c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c4e:	f003 0301 	and.w	r3, r3, #1
 8003c52:	617b      	str	r3, [r7, #20]
 8003c54:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003c56:	e02a      	b.n	8003cae <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	4a17      	ldr	r2, [pc, #92]	; (8003cbc <HAL_TIM_Base_MspInit+0x90>)
 8003c5e:	4293      	cmp	r3, r2
 8003c60:	d114      	bne.n	8003c8c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003c62:	4b15      	ldr	r3, [pc, #84]	; (8003cb8 <HAL_TIM_Base_MspInit+0x8c>)
 8003c64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c66:	4a14      	ldr	r2, [pc, #80]	; (8003cb8 <HAL_TIM_Base_MspInit+0x8c>)
 8003c68:	f043 0310 	orr.w	r3, r3, #16
 8003c6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003c6e:	4b12      	ldr	r3, [pc, #72]	; (8003cb8 <HAL_TIM_Base_MspInit+0x8c>)
 8003c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c72:	f003 0310 	and.w	r3, r3, #16
 8003c76:	613b      	str	r3, [r7, #16]
 8003c78:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003c7a:	2200      	movs	r2, #0
 8003c7c:	2105      	movs	r1, #5
 8003c7e:	2036      	movs	r0, #54	; 0x36
 8003c80:	f001 fc90 	bl	80055a4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003c84:	2036      	movs	r0, #54	; 0x36
 8003c86:	f001 fca9 	bl	80055dc <HAL_NVIC_EnableIRQ>
}
 8003c8a:	e010      	b.n	8003cae <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	4a0b      	ldr	r2, [pc, #44]	; (8003cc0 <HAL_TIM_Base_MspInit+0x94>)
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d10b      	bne.n	8003cae <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003c96:	4b08      	ldr	r3, [pc, #32]	; (8003cb8 <HAL_TIM_Base_MspInit+0x8c>)
 8003c98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c9a:	4a07      	ldr	r2, [pc, #28]	; (8003cb8 <HAL_TIM_Base_MspInit+0x8c>)
 8003c9c:	f043 0320 	orr.w	r3, r3, #32
 8003ca0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ca2:	4b05      	ldr	r3, [pc, #20]	; (8003cb8 <HAL_TIM_Base_MspInit+0x8c>)
 8003ca4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ca6:	f003 0320 	and.w	r3, r3, #32
 8003caa:	60fb      	str	r3, [r7, #12]
 8003cac:	68fb      	ldr	r3, [r7, #12]
}
 8003cae:	bf00      	nop
 8003cb0:	3718      	adds	r7, #24
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	40021000 	.word	0x40021000
 8003cbc:	40001000 	.word	0x40001000
 8003cc0:	40001400 	.word	0x40001400

08003cc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b09e      	sub	sp, #120	; 0x78
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ccc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	605a      	str	r2, [r3, #4]
 8003cd6:	609a      	str	r2, [r3, #8]
 8003cd8:	60da      	str	r2, [r3, #12]
 8003cda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003cdc:	f107 0310 	add.w	r3, r7, #16
 8003ce0:	2254      	movs	r2, #84	; 0x54
 8003ce2:	2100      	movs	r1, #0
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f009 fb33 	bl	800d350 <memset>
  if(huart->Instance==USART2)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	4a28      	ldr	r2, [pc, #160]	; (8003d90 <HAL_UART_MspInit+0xcc>)
 8003cf0:	4293      	cmp	r3, r2
 8003cf2:	d148      	bne.n	8003d86 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003cfc:	f107 0310 	add.w	r3, r7, #16
 8003d00:	4618      	mov	r0, r3
 8003d02:	f004 fc3d 	bl	8008580 <HAL_RCCEx_PeriphCLKConfig>
 8003d06:	4603      	mov	r3, r0
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d001      	beq.n	8003d10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003d0c:	f7ff fdb8 	bl	8003880 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003d10:	4b20      	ldr	r3, [pc, #128]	; (8003d94 <HAL_UART_MspInit+0xd0>)
 8003d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d14:	4a1f      	ldr	r2, [pc, #124]	; (8003d94 <HAL_UART_MspInit+0xd0>)
 8003d16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003d1c:	4b1d      	ldr	r3, [pc, #116]	; (8003d94 <HAL_UART_MspInit+0xd0>)
 8003d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d24:	60fb      	str	r3, [r7, #12]
 8003d26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003d28:	4b1a      	ldr	r3, [pc, #104]	; (8003d94 <HAL_UART_MspInit+0xd0>)
 8003d2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d2c:	4a19      	ldr	r2, [pc, #100]	; (8003d94 <HAL_UART_MspInit+0xd0>)
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003d34:	4b17      	ldr	r3, [pc, #92]	; (8003d94 <HAL_UART_MspInit+0xd0>)
 8003d36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d38:	f003 0301 	and.w	r3, r3, #1
 8003d3c:	60bb      	str	r3, [r7, #8]
 8003d3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003d40:	2304      	movs	r3, #4
 8003d42:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d44:	2302      	movs	r3, #2
 8003d46:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d48:	2300      	movs	r3, #0
 8003d4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d4c:	2303      	movs	r3, #3
 8003d4e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003d50:	2307      	movs	r3, #7
 8003d52:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d58:	4619      	mov	r1, r3
 8003d5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d5e:	f002 f9e9 	bl	8006134 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003d62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d68:	2302      	movs	r3, #2
 8003d6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d70:	2303      	movs	r3, #3
 8003d72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003d74:	2303      	movs	r3, #3
 8003d76:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d82:	f002 f9d7 	bl	8006134 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003d86:	bf00      	nop
 8003d88:	3778      	adds	r7, #120	; 0x78
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	bd80      	pop	{r7, pc}
 8003d8e:	bf00      	nop
 8003d90:	40004400 	.word	0x40004400
 8003d94:	40021000 	.word	0x40021000

08003d98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b08c      	sub	sp, #48	; 0x30
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003da0:	2300      	movs	r3, #0
 8003da2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8003da6:	4b2e      	ldr	r3, [pc, #184]	; (8003e60 <HAL_InitTick+0xc8>)
 8003da8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003daa:	4a2d      	ldr	r2, [pc, #180]	; (8003e60 <HAL_InitTick+0xc8>)
 8003dac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003db0:	6613      	str	r3, [r2, #96]	; 0x60
 8003db2:	4b2b      	ldr	r3, [pc, #172]	; (8003e60 <HAL_InitTick+0xc8>)
 8003db4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003db6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dba:	60bb      	str	r3, [r7, #8]
 8003dbc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003dbe:	f107 020c 	add.w	r2, r7, #12
 8003dc2:	f107 0310 	add.w	r3, r7, #16
 8003dc6:	4611      	mov	r1, r2
 8003dc8:	4618      	mov	r0, r3
 8003dca:	f004 fb47 	bl	800845c <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003dce:	f004 fb2f 	bl	8008430 <HAL_RCC_GetPCLK2Freq>
 8003dd2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dd6:	4a23      	ldr	r2, [pc, #140]	; (8003e64 <HAL_InitTick+0xcc>)
 8003dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003ddc:	0c9b      	lsrs	r3, r3, #18
 8003dde:	3b01      	subs	r3, #1
 8003de0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8003de2:	4b21      	ldr	r3, [pc, #132]	; (8003e68 <HAL_InitTick+0xd0>)
 8003de4:	4a21      	ldr	r2, [pc, #132]	; (8003e6c <HAL_InitTick+0xd4>)
 8003de6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8003de8:	4b1f      	ldr	r3, [pc, #124]	; (8003e68 <HAL_InitTick+0xd0>)
 8003dea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003dee:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8003df0:	4a1d      	ldr	r2, [pc, #116]	; (8003e68 <HAL_InitTick+0xd0>)
 8003df2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003df4:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8003df6:	4b1c      	ldr	r3, [pc, #112]	; (8003e68 <HAL_InitTick+0xd0>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003dfc:	4b1a      	ldr	r3, [pc, #104]	; (8003e68 <HAL_InitTick+0xd0>)
 8003dfe:	2200      	movs	r2, #0
 8003e00:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003e02:	4b19      	ldr	r3, [pc, #100]	; (8003e68 <HAL_InitTick+0xd0>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8003e08:	4817      	ldr	r0, [pc, #92]	; (8003e68 <HAL_InitTick+0xd0>)
 8003e0a:	f004 feb1 	bl	8008b70 <HAL_TIM_Base_Init>
 8003e0e:	4603      	mov	r3, r0
 8003e10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003e14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d11b      	bne.n	8003e54 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8003e1c:	4812      	ldr	r0, [pc, #72]	; (8003e68 <HAL_InitTick+0xd0>)
 8003e1e:	f004 ff4b 	bl	8008cb8 <HAL_TIM_Base_Start_IT>
 8003e22:	4603      	mov	r3, r0
 8003e24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003e28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d111      	bne.n	8003e54 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003e30:	2019      	movs	r0, #25
 8003e32:	f001 fbd3 	bl	80055dc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	2b0f      	cmp	r3, #15
 8003e3a:	d808      	bhi.n	8003e4e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	6879      	ldr	r1, [r7, #4]
 8003e40:	2019      	movs	r0, #25
 8003e42:	f001 fbaf 	bl	80055a4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003e46:	4a0a      	ldr	r2, [pc, #40]	; (8003e70 <HAL_InitTick+0xd8>)
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	e002      	b.n	8003e54 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8003e4e:	2301      	movs	r3, #1
 8003e50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003e54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3730      	adds	r7, #48	; 0x30
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	40021000 	.word	0x40021000
 8003e64:	431bde83 	.word	0x431bde83
 8003e68:	20000f04 	.word	0x20000f04
 8003e6c:	40014400 	.word	0x40014400
 8003e70:	20000008 	.word	0x20000008

08003e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003e74:	b480      	push	{r7}
 8003e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003e78:	e7fe      	b.n	8003e78 <NMI_Handler+0x4>

08003e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003e7e:	e7fe      	b.n	8003e7e <HardFault_Handler+0x4>

08003e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003e80:	b480      	push	{r7}
 8003e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003e84:	e7fe      	b.n	8003e84 <MemManage_Handler+0x4>

08003e86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003e86:	b480      	push	{r7}
 8003e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003e8a:	e7fe      	b.n	8003e8a <BusFault_Handler+0x4>

08003e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003e90:	e7fe      	b.n	8003e90 <UsageFault_Handler+0x4>

08003e92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003e92:	b480      	push	{r7}
 8003e94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003e96:	bf00      	nop
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr

08003ea0 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8003ea4:	4802      	ldr	r0, [pc, #8]	; (8003eb0 <DMA1_Channel3_IRQHandler+0x10>)
 8003ea6:	f002 f858 	bl	8005f5a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8003eaa:	bf00      	nop
 8003eac:	bd80      	pop	{r7, pc}
 8003eae:	bf00      	nop
 8003eb0:	20000334 	.word	0x20000334

08003eb4 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003eb8:	4802      	ldr	r0, [pc, #8]	; (8003ec4 <CAN1_TX_IRQHandler+0x10>)
 8003eba:	f001 f882 	bl	8004fc2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003ebe:	bf00      	nop
 8003ec0:	bd80      	pop	{r7, pc}
 8003ec2:	bf00      	nop
 8003ec4:	200002f8 	.word	0x200002f8

08003ec8 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003ecc:	4802      	ldr	r0, [pc, #8]	; (8003ed8 <CAN1_RX0_IRQHandler+0x10>)
 8003ece:	f001 f878 	bl	8004fc2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003ed2:	bf00      	nop
 8003ed4:	bd80      	pop	{r7, pc}
 8003ed6:	bf00      	nop
 8003ed8:	200002f8 	.word	0x200002f8

08003edc <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003ee0:	4802      	ldr	r0, [pc, #8]	; (8003eec <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003ee2:	f004 ff3d 	bl	8008d60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	20000f04 	.word	0x20000f04

08003ef0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003ef4:	4802      	ldr	r0, [pc, #8]	; (8003f00 <I2C1_EV_IRQHandler+0x10>)
 8003ef6:	f002 fc3b 	bl	8006770 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003efa:	bf00      	nop
 8003efc:	bd80      	pop	{r7, pc}
 8003efe:	bf00      	nop
 8003f00:	2000037c 	.word	0x2000037c

08003f04 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003f08:	4802      	ldr	r0, [pc, #8]	; (8003f14 <I2C1_ER_IRQHandler+0x10>)
 8003f0a:	f002 fc4b 	bl	80067a4 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003f0e:	bf00      	nop
 8003f10:	bd80      	pop	{r7, pc}
 8003f12:	bf00      	nop
 8003f14:	2000037c 	.word	0x2000037c

08003f18 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003f18:	b580      	push	{r7, lr}
 8003f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003f1c:	4803      	ldr	r0, [pc, #12]	; (8003f2c <TIM6_DAC_IRQHandler+0x14>)
 8003f1e:	f004 ff1f 	bl	8008d60 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003f22:	4803      	ldr	r0, [pc, #12]	; (8003f30 <TIM6_DAC_IRQHandler+0x18>)
 8003f24:	f001 fca4 	bl	8005870 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003f28:	bf00      	nop
 8003f2a:	bd80      	pop	{r7, pc}
 8003f2c:	2000041c 	.word	0x2000041c
 8003f30:	20000320 	.word	0x20000320

08003f34 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003f38:	4b06      	ldr	r3, [pc, #24]	; (8003f54 <SystemInit+0x20>)
 8003f3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f3e:	4a05      	ldr	r2, [pc, #20]	; (8003f54 <SystemInit+0x20>)
 8003f40:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f44:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003f48:	bf00      	nop
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	e000ed00 	.word	0xe000ed00

08003f58 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003f58:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f90 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003f5c:	f7ff ffea 	bl	8003f34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003f60:	480c      	ldr	r0, [pc, #48]	; (8003f94 <LoopForever+0x6>)
  ldr r1, =_edata
 8003f62:	490d      	ldr	r1, [pc, #52]	; (8003f98 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003f64:	4a0d      	ldr	r2, [pc, #52]	; (8003f9c <LoopForever+0xe>)
  movs r3, #0
 8003f66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003f68:	e002      	b.n	8003f70 <LoopCopyDataInit>

08003f6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003f6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003f6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003f6e:	3304      	adds	r3, #4

08003f70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003f70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003f72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003f74:	d3f9      	bcc.n	8003f6a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003f76:	4a0a      	ldr	r2, [pc, #40]	; (8003fa0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003f78:	4c0a      	ldr	r4, [pc, #40]	; (8003fa4 <LoopForever+0x16>)
  movs r3, #0
 8003f7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003f7c:	e001      	b.n	8003f82 <LoopFillZerobss>

08003f7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003f7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003f80:	3204      	adds	r2, #4

08003f82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003f82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003f84:	d3fb      	bcc.n	8003f7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003f86:	f009 f9af 	bl	800d2e8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003f8a:	f7fe fded 	bl	8002b68 <main>

08003f8e <LoopForever>:

LoopForever:
    b LoopForever
 8003f8e:	e7fe      	b.n	8003f8e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003f90:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003f94:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003f98:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8003f9c:	08010050 	.word	0x08010050
  ldr r2, =_sbss
 8003fa0:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8003fa4:	20002624 	.word	0x20002624

08003fa8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003fa8:	e7fe      	b.n	8003fa8 <ADC1_IRQHandler>

08003faa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fb4:	2003      	movs	r0, #3
 8003fb6:	f001 faea 	bl	800558e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003fba:	200f      	movs	r0, #15
 8003fbc:	f7ff feec 	bl	8003d98 <HAL_InitTick>
 8003fc0:	4603      	mov	r3, r0
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d002      	beq.n	8003fcc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	71fb      	strb	r3, [r7, #7]
 8003fca:	e001      	b.n	8003fd0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003fcc:	f7ff fc5e 	bl	800388c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003fd0:	79fb      	ldrb	r3, [r7, #7]
}
 8003fd2:	4618      	mov	r0, r3
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}
	...

08003fdc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fdc:	b480      	push	{r7}
 8003fde:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003fe0:	4b06      	ldr	r3, [pc, #24]	; (8003ffc <HAL_IncTick+0x20>)
 8003fe2:	781b      	ldrb	r3, [r3, #0]
 8003fe4:	461a      	mov	r2, r3
 8003fe6:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_IncTick+0x24>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4413      	add	r3, r2
 8003fec:	4a04      	ldr	r2, [pc, #16]	; (8004000 <HAL_IncTick+0x24>)
 8003fee:	6013      	str	r3, [r2, #0]
}
 8003ff0:	bf00      	nop
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff8:	4770      	bx	lr
 8003ffa:	bf00      	nop
 8003ffc:	2000000c 	.word	0x2000000c
 8004000:	20000f50 	.word	0x20000f50

08004004 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004004:	b480      	push	{r7}
 8004006:	af00      	add	r7, sp, #0
  return uwTick;
 8004008:	4b03      	ldr	r3, [pc, #12]	; (8004018 <HAL_GetTick+0x14>)
 800400a:	681b      	ldr	r3, [r3, #0]
}
 800400c:	4618      	mov	r0, r3
 800400e:	46bd      	mov	sp, r7
 8004010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004014:	4770      	bx	lr
 8004016:	bf00      	nop
 8004018:	20000f50 	.word	0x20000f50

0800401c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b084      	sub	sp, #16
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004024:	f7ff ffee 	bl	8004004 <HAL_GetTick>
 8004028:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004034:	d005      	beq.n	8004042 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8004036:	4b0a      	ldr	r3, [pc, #40]	; (8004060 <HAL_Delay+0x44>)
 8004038:	781b      	ldrb	r3, [r3, #0]
 800403a:	461a      	mov	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4413      	add	r3, r2
 8004040:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004042:	bf00      	nop
 8004044:	f7ff ffde 	bl	8004004 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	68fa      	ldr	r2, [r7, #12]
 8004050:	429a      	cmp	r2, r3
 8004052:	d8f7      	bhi.n	8004044 <HAL_Delay+0x28>
  {
  }
}
 8004054:	bf00      	nop
 8004056:	bf00      	nop
 8004058:	3710      	adds	r7, #16
 800405a:	46bd      	mov	sp, r7
 800405c:	bd80      	pop	{r7, pc}
 800405e:	bf00      	nop
 8004060:	2000000c 	.word	0x2000000c

08004064 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8004064:	b480      	push	{r7}
 8004066:	b083      	sub	sp, #12
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
 800406c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	689b      	ldr	r3, [r3, #8]
 8004072:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	431a      	orrs	r2, r3
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	609a      	str	r2, [r3, #8]
}
 800407e:	bf00      	nop
 8004080:	370c      	adds	r7, #12
 8004082:	46bd      	mov	sp, r7
 8004084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004088:	4770      	bx	lr

0800408a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800408a:	b480      	push	{r7}
 800408c:	b083      	sub	sp, #12
 800408e:	af00      	add	r7, sp, #0
 8004090:	6078      	str	r0, [r7, #4]
 8004092:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800409c:	683b      	ldr	r3, [r7, #0]
 800409e:	431a      	orrs	r2, r3
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	609a      	str	r2, [r3, #8]
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	689b      	ldr	r3, [r3, #8]
 80040bc:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80040cc:	b480      	push	{r7}
 80040ce:	b087      	sub	sp, #28
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	60f8      	str	r0, [r7, #12]
 80040d4:	60b9      	str	r1, [r7, #8]
 80040d6:	607a      	str	r2, [r7, #4]
 80040d8:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	3360      	adds	r3, #96	; 0x60
 80040de:	461a      	mov	r2, r3
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	4413      	add	r3, r2
 80040e6:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040e8:	697b      	ldr	r3, [r7, #20]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	4b08      	ldr	r3, [pc, #32]	; (8004110 <LL_ADC_SetOffset+0x44>)
 80040ee:	4013      	ands	r3, r2
 80040f0:	687a      	ldr	r2, [r7, #4]
 80040f2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80040f6:	683a      	ldr	r2, [r7, #0]
 80040f8:	430a      	orrs	r2, r1
 80040fa:	4313      	orrs	r3, r2
 80040fc:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004104:	bf00      	nop
 8004106:	371c      	adds	r7, #28
 8004108:	46bd      	mov	sp, r7
 800410a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800410e:	4770      	bx	lr
 8004110:	03fff000 	.word	0x03fff000

08004114 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004114:	b480      	push	{r7}
 8004116:	b085      	sub	sp, #20
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	3360      	adds	r3, #96	; 0x60
 8004122:	461a      	mov	r2, r3
 8004124:	683b      	ldr	r3, [r7, #0]
 8004126:	009b      	lsls	r3, r3, #2
 8004128:	4413      	add	r3, r2
 800412a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004134:	4618      	mov	r0, r3
 8004136:	3714      	adds	r7, #20
 8004138:	46bd      	mov	sp, r7
 800413a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800413e:	4770      	bx	lr

08004140 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004140:	b480      	push	{r7}
 8004142:	b087      	sub	sp, #28
 8004144:	af00      	add	r7, sp, #0
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	3360      	adds	r3, #96	; 0x60
 8004150:	461a      	mov	r2, r3
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	009b      	lsls	r3, r3, #2
 8004156:	4413      	add	r3, r2
 8004158:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800415a:	697b      	ldr	r3, [r7, #20]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	431a      	orrs	r2, r3
 8004166:	697b      	ldr	r3, [r7, #20]
 8004168:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800416a:	bf00      	nop
 800416c:	371c      	adds	r7, #28
 800416e:	46bd      	mov	sp, r7
 8004170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004174:	4770      	bx	lr

08004176 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8004176:	b480      	push	{r7}
 8004178:	b087      	sub	sp, #28
 800417a:	af00      	add	r7, sp, #0
 800417c:	60f8      	str	r0, [r7, #12]
 800417e:	60b9      	str	r1, [r7, #8]
 8004180:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	3330      	adds	r3, #48	; 0x30
 8004186:	461a      	mov	r2, r3
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	0a1b      	lsrs	r3, r3, #8
 800418c:	009b      	lsls	r3, r3, #2
 800418e:	f003 030c 	and.w	r3, r3, #12
 8004192:	4413      	add	r3, r2
 8004194:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004196:	697b      	ldr	r3, [r7, #20]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68bb      	ldr	r3, [r7, #8]
 800419c:	f003 031f 	and.w	r3, r3, #31
 80041a0:	211f      	movs	r1, #31
 80041a2:	fa01 f303 	lsl.w	r3, r1, r3
 80041a6:	43db      	mvns	r3, r3
 80041a8:	401a      	ands	r2, r3
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	0e9b      	lsrs	r3, r3, #26
 80041ae:	f003 011f 	and.w	r1, r3, #31
 80041b2:	68bb      	ldr	r3, [r7, #8]
 80041b4:	f003 031f 	and.w	r3, r3, #31
 80041b8:	fa01 f303 	lsl.w	r3, r1, r3
 80041bc:	431a      	orrs	r2, r3
 80041be:	697b      	ldr	r3, [r7, #20]
 80041c0:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80041c2:	bf00      	nop
 80041c4:	371c      	adds	r7, #28
 80041c6:	46bd      	mov	sp, r7
 80041c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041cc:	4770      	bx	lr

080041ce <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80041ce:	b480      	push	{r7}
 80041d0:	b087      	sub	sp, #28
 80041d2:	af00      	add	r7, sp, #0
 80041d4:	60f8      	str	r0, [r7, #12]
 80041d6:	60b9      	str	r1, [r7, #8]
 80041d8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	3314      	adds	r3, #20
 80041de:	461a      	mov	r2, r3
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	0e5b      	lsrs	r3, r3, #25
 80041e4:	009b      	lsls	r3, r3, #2
 80041e6:	f003 0304 	and.w	r3, r3, #4
 80041ea:	4413      	add	r3, r2
 80041ec:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80041ee:	697b      	ldr	r3, [r7, #20]
 80041f0:	681a      	ldr	r2, [r3, #0]
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	0d1b      	lsrs	r3, r3, #20
 80041f6:	f003 031f 	and.w	r3, r3, #31
 80041fa:	2107      	movs	r1, #7
 80041fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	401a      	ands	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	0d1b      	lsrs	r3, r3, #20
 8004208:	f003 031f 	and.w	r3, r3, #31
 800420c:	6879      	ldr	r1, [r7, #4]
 800420e:	fa01 f303 	lsl.w	r3, r1, r3
 8004212:	431a      	orrs	r2, r3
 8004214:	697b      	ldr	r3, [r7, #20]
 8004216:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004218:	bf00      	nop
 800421a:	371c      	adds	r7, #28
 800421c:	46bd      	mov	sp, r7
 800421e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004222:	4770      	bx	lr

08004224 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004224:	b480      	push	{r7}
 8004226:	b085      	sub	sp, #20
 8004228:	af00      	add	r7, sp, #0
 800422a:	60f8      	str	r0, [r7, #12]
 800422c:	60b9      	str	r1, [r7, #8]
 800422e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800423c:	43db      	mvns	r3, r3
 800423e:	401a      	ands	r2, r3
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f003 0318 	and.w	r3, r3, #24
 8004246:	4908      	ldr	r1, [pc, #32]	; (8004268 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004248:	40d9      	lsrs	r1, r3
 800424a:	68bb      	ldr	r3, [r7, #8]
 800424c:	400b      	ands	r3, r1
 800424e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004252:	431a      	orrs	r2, r3
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800425a:	bf00      	nop
 800425c:	3714      	adds	r7, #20
 800425e:	46bd      	mov	sp, r7
 8004260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004264:	4770      	bx	lr
 8004266:	bf00      	nop
 8004268:	0007ffff 	.word	0x0007ffff

0800426c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 800426c:	b480      	push	{r7}
 800426e:	b083      	sub	sp, #12
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	689b      	ldr	r3, [r3, #8]
 8004278:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 800427c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004280:	687a      	ldr	r2, [r7, #4]
 8004282:	6093      	str	r3, [r2, #8]
}
 8004284:	bf00      	nop
 8004286:	370c      	adds	r7, #12
 8004288:	46bd      	mov	sp, r7
 800428a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428e:	4770      	bx	lr

08004290 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8004290:	b480      	push	{r7}
 8004292:	b083      	sub	sp, #12
 8004294:	af00      	add	r7, sp, #0
 8004296:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	689b      	ldr	r3, [r3, #8]
 800429c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80042a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80042a4:	d101      	bne.n	80042aa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80042a6:	2301      	movs	r3, #1
 80042a8:	e000      	b.n	80042ac <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80042aa:	2300      	movs	r3, #0
}
 80042ac:	4618      	mov	r0, r3
 80042ae:	370c      	adds	r7, #12
 80042b0:	46bd      	mov	sp, r7
 80042b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b6:	4770      	bx	lr

080042b8 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80042b8:	b480      	push	{r7}
 80042ba:	b083      	sub	sp, #12
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	689b      	ldr	r3, [r3, #8]
 80042c4:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80042c8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80042cc:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80042d4:	bf00      	nop
 80042d6:	370c      	adds	r7, #12
 80042d8:	46bd      	mov	sp, r7
 80042da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042de:	4770      	bx	lr

080042e0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80042f4:	d101      	bne.n	80042fa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80042f6:	2301      	movs	r3, #1
 80042f8:	e000      	b.n	80042fc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80042fa:	2300      	movs	r3, #0
}
 80042fc:	4618      	mov	r0, r3
 80042fe:	370c      	adds	r7, #12
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr

08004308 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004308:	b480      	push	{r7}
 800430a:	b083      	sub	sp, #12
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	689b      	ldr	r3, [r3, #8]
 8004314:	f003 0301 	and.w	r3, r3, #1
 8004318:	2b01      	cmp	r3, #1
 800431a:	d101      	bne.n	8004320 <LL_ADC_IsEnabled+0x18>
 800431c:	2301      	movs	r3, #1
 800431e:	e000      	b.n	8004322 <LL_ADC_IsEnabled+0x1a>
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	370c      	adds	r7, #12
 8004326:	46bd      	mov	sp, r7
 8004328:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432c:	4770      	bx	lr

0800432e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800432e:	b480      	push	{r7}
 8004330:	b083      	sub	sp, #12
 8004332:	af00      	add	r7, sp, #0
 8004334:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	f003 0304 	and.w	r3, r3, #4
 800433e:	2b04      	cmp	r3, #4
 8004340:	d101      	bne.n	8004346 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004342:	2301      	movs	r3, #1
 8004344:	e000      	b.n	8004348 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004346:	2300      	movs	r3, #0
}
 8004348:	4618      	mov	r0, r3
 800434a:	370c      	adds	r7, #12
 800434c:	46bd      	mov	sp, r7
 800434e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004352:	4770      	bx	lr

08004354 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004354:	b480      	push	{r7}
 8004356:	b083      	sub	sp, #12
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	689b      	ldr	r3, [r3, #8]
 8004360:	f003 0308 	and.w	r3, r3, #8
 8004364:	2b08      	cmp	r3, #8
 8004366:	d101      	bne.n	800436c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8004368:	2301      	movs	r3, #1
 800436a:	e000      	b.n	800436e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800436c:	2300      	movs	r3, #0
}
 800436e:	4618      	mov	r0, r3
 8004370:	370c      	adds	r7, #12
 8004372:	46bd      	mov	sp, r7
 8004374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004378:	4770      	bx	lr
	...

0800437c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800437c:	b580      	push	{r7, lr}
 800437e:	b088      	sub	sp, #32
 8004380:	af00      	add	r7, sp, #0
 8004382:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004384:	2300      	movs	r3, #0
 8004386:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8004388:	2300      	movs	r3, #0
 800438a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	2b00      	cmp	r3, #0
 8004390:	d101      	bne.n	8004396 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8004392:	2301      	movs	r3, #1
 8004394:	e12c      	b.n	80045f0 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	691b      	ldr	r3, [r3, #16]
 800439a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d109      	bne.n	80043b8 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80043a4:	6878      	ldr	r0, [r7, #4]
 80043a6:	f7ff fa99 	bl	80038dc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ff67 	bl	8004290 <LL_ADC_IsDeepPowerDownEnabled>
 80043c2:	4603      	mov	r3, r0
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d004      	beq.n	80043d2 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4618      	mov	r0, r3
 80043ce:	f7ff ff4d 	bl	800426c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	4618      	mov	r0, r3
 80043d8:	f7ff ff82 	bl	80042e0 <LL_ADC_IsInternalRegulatorEnabled>
 80043dc:	4603      	mov	r3, r0
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d115      	bne.n	800440e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4618      	mov	r0, r3
 80043e8:	f7ff ff66 	bl	80042b8 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80043ec:	4b82      	ldr	r3, [pc, #520]	; (80045f8 <HAL_ADC_Init+0x27c>)
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	099b      	lsrs	r3, r3, #6
 80043f2:	4a82      	ldr	r2, [pc, #520]	; (80045fc <HAL_ADC_Init+0x280>)
 80043f4:	fba2 2303 	umull	r2, r3, r2, r3
 80043f8:	099b      	lsrs	r3, r3, #6
 80043fa:	3301      	adds	r3, #1
 80043fc:	005b      	lsls	r3, r3, #1
 80043fe:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004400:	e002      	b.n	8004408 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	3b01      	subs	r3, #1
 8004406:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	2b00      	cmp	r3, #0
 800440c:	d1f9      	bne.n	8004402 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4618      	mov	r0, r3
 8004414:	f7ff ff64 	bl	80042e0 <LL_ADC_IsInternalRegulatorEnabled>
 8004418:	4603      	mov	r3, r0
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10d      	bne.n	800443a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004422:	f043 0210 	orr.w	r2, r3, #16
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800442e:	f043 0201 	orr.w	r2, r3, #1
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004436:	2301      	movs	r3, #1
 8004438:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	4618      	mov	r0, r3
 8004440:	f7ff ff75 	bl	800432e <LL_ADC_REG_IsConversionOngoing>
 8004444:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	f003 0310 	and.w	r3, r3, #16
 800444e:	2b00      	cmp	r3, #0
 8004450:	f040 80c5 	bne.w	80045de <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8004454:	697b      	ldr	r3, [r7, #20]
 8004456:	2b00      	cmp	r3, #0
 8004458:	f040 80c1 	bne.w	80045de <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004460:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8004464:	f043 0202 	orr.w	r2, r3, #2
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	4618      	mov	r0, r3
 8004472:	f7ff ff49 	bl	8004308 <LL_ADC_IsEnabled>
 8004476:	4603      	mov	r3, r0
 8004478:	2b00      	cmp	r3, #0
 800447a:	d10b      	bne.n	8004494 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 800447c:	4860      	ldr	r0, [pc, #384]	; (8004600 <HAL_ADC_Init+0x284>)
 800447e:	f7ff ff43 	bl	8004308 <LL_ADC_IsEnabled>
 8004482:	4603      	mov	r3, r0
 8004484:	2b00      	cmp	r3, #0
 8004486:	d105      	bne.n	8004494 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	4619      	mov	r1, r3
 800448e:	485d      	ldr	r0, [pc, #372]	; (8004604 <HAL_ADC_Init+0x288>)
 8004490:	f7ff fde8 	bl	8004064 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	7e5b      	ldrb	r3, [r3, #25]
 8004498:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800449e:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80044a4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80044aa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044b2:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80044b4:	4313      	orrs	r3, r2
 80044b6:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	f893 3020 	ldrb.w	r3, [r3, #32]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d106      	bne.n	80044d0 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c6:	3b01      	subs	r3, #1
 80044c8:	045b      	lsls	r3, r3, #17
 80044ca:	69ba      	ldr	r2, [r7, #24]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d009      	beq.n	80044ec <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044dc:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80044e6:	69ba      	ldr	r2, [r7, #24]
 80044e8:	4313      	orrs	r3, r2
 80044ea:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	4b45      	ldr	r3, [pc, #276]	; (8004608 <HAL_ADC_Init+0x28c>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	687a      	ldr	r2, [r7, #4]
 80044f8:	6812      	ldr	r2, [r2, #0]
 80044fa:	69b9      	ldr	r1, [r7, #24]
 80044fc:	430b      	orrs	r3, r1
 80044fe:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	4618      	mov	r0, r3
 8004506:	f7ff ff12 	bl	800432e <LL_ADC_REG_IsConversionOngoing>
 800450a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	681b      	ldr	r3, [r3, #0]
 8004510:	4618      	mov	r0, r3
 8004512:	f7ff ff1f 	bl	8004354 <LL_ADC_INJ_IsConversionOngoing>
 8004516:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004518:	693b      	ldr	r3, [r7, #16]
 800451a:	2b00      	cmp	r3, #0
 800451c:	d13d      	bne.n	800459a <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	2b00      	cmp	r3, #0
 8004522:	d13a      	bne.n	800459a <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004528:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004530:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004532:	4313      	orrs	r3, r2
 8004534:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004540:	f023 0302 	bic.w	r3, r3, #2
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6812      	ldr	r2, [r2, #0]
 8004548:	69b9      	ldr	r1, [r7, #24]
 800454a:	430b      	orrs	r3, r1
 800454c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004554:	2b01      	cmp	r3, #1
 8004556:	d118      	bne.n	800458a <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	691b      	ldr	r3, [r3, #16]
 800455e:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004562:	f023 0304 	bic.w	r3, r3, #4
 8004566:	687a      	ldr	r2, [r7, #4]
 8004568:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800456e:	4311      	orrs	r1, r2
 8004570:	687a      	ldr	r2, [r7, #4]
 8004572:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8004574:	4311      	orrs	r1, r2
 8004576:	687a      	ldr	r2, [r7, #4]
 8004578:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800457a:	430a      	orrs	r2, r1
 800457c:	431a      	orrs	r2, r3
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f042 0201 	orr.w	r2, r2, #1
 8004586:	611a      	str	r2, [r3, #16]
 8004588:	e007      	b.n	800459a <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	691a      	ldr	r2, [r3, #16]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0201 	bic.w	r2, r2, #1
 8004598:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	691b      	ldr	r3, [r3, #16]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d10c      	bne.n	80045bc <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045a8:	f023 010f 	bic.w	r1, r3, #15
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	69db      	ldr	r3, [r3, #28]
 80045b0:	1e5a      	subs	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	430a      	orrs	r2, r1
 80045b8:	631a      	str	r2, [r3, #48]	; 0x30
 80045ba:	e007      	b.n	80045cc <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f022 020f 	bic.w	r2, r2, #15
 80045ca:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045d0:	f023 0303 	bic.w	r3, r3, #3
 80045d4:	f043 0201 	orr.w	r2, r3, #1
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	655a      	str	r2, [r3, #84]	; 0x54
 80045dc:	e007      	b.n	80045ee <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045e2:	f043 0210 	orr.w	r2, r3, #16
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80045ee:	7ffb      	ldrb	r3, [r7, #31]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3720      	adds	r7, #32
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	20000004 	.word	0x20000004
 80045fc:	053e2d63 	.word	0x053e2d63
 8004600:	50040000 	.word	0x50040000
 8004604:	50040300 	.word	0x50040300
 8004608:	fff0c007 	.word	0xfff0c007

0800460c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b0b6      	sub	sp, #216	; 0xd8
 8004610:	af00      	add	r7, sp, #0
 8004612:	6078      	str	r0, [r7, #4]
 8004614:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004616:	2300      	movs	r3, #0
 8004618:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800461c:	2300      	movs	r3, #0
 800461e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004626:	2b01      	cmp	r3, #1
 8004628:	d101      	bne.n	800462e <HAL_ADC_ConfigChannel+0x22>
 800462a:	2302      	movs	r3, #2
 800462c:	e3b9      	b.n	8004da2 <HAL_ADC_ConfigChannel+0x796>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2201      	movs	r2, #1
 8004632:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	4618      	mov	r0, r3
 800463c:	f7ff fe77 	bl	800432e <LL_ADC_REG_IsConversionOngoing>
 8004640:	4603      	mov	r3, r0
 8004642:	2b00      	cmp	r3, #0
 8004644:	f040 839e 	bne.w	8004d84 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004648:	683b      	ldr	r3, [r7, #0]
 800464a:	685b      	ldr	r3, [r3, #4]
 800464c:	2b05      	cmp	r3, #5
 800464e:	d824      	bhi.n	800469a <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	685b      	ldr	r3, [r3, #4]
 8004654:	3b02      	subs	r3, #2
 8004656:	2b03      	cmp	r3, #3
 8004658:	d81b      	bhi.n	8004692 <HAL_ADC_ConfigChannel+0x86>
 800465a:	a201      	add	r2, pc, #4	; (adr r2, 8004660 <HAL_ADC_ConfigChannel+0x54>)
 800465c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004660:	08004671 	.word	0x08004671
 8004664:	08004679 	.word	0x08004679
 8004668:	08004681 	.word	0x08004681
 800466c:	08004689 	.word	0x08004689
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	220c      	movs	r2, #12
 8004674:	605a      	str	r2, [r3, #4]
          break;
 8004676:	e011      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	2212      	movs	r2, #18
 800467c:	605a      	str	r2, [r3, #4]
          break;
 800467e:	e00d      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	2218      	movs	r2, #24
 8004684:	605a      	str	r2, [r3, #4]
          break;
 8004686:	e009      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800468e:	605a      	str	r2, [r3, #4]
          break;
 8004690:	e004      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8004692:	683b      	ldr	r3, [r7, #0]
 8004694:	2206      	movs	r2, #6
 8004696:	605a      	str	r2, [r3, #4]
          break;
 8004698:	e000      	b.n	800469c <HAL_ADC_ConfigChannel+0x90>
      }
    }
 800469a:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6818      	ldr	r0, [r3, #0]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	6859      	ldr	r1, [r3, #4]
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	461a      	mov	r2, r3
 80046aa:	f7ff fd64 	bl	8004176 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4618      	mov	r0, r3
 80046b4:	f7ff fe3b 	bl	800432e <LL_ADC_REG_IsConversionOngoing>
 80046b8:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fe47 	bl	8004354 <LL_ADC_INJ_IsConversionOngoing>
 80046c6:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80046ca:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	f040 81a6 	bne.w	8004a20 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80046d4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80046d8:	2b00      	cmp	r3, #0
 80046da:	f040 81a1 	bne.w	8004a20 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6818      	ldr	r0, [r3, #0]
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	6819      	ldr	r1, [r3, #0]
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	461a      	mov	r2, r3
 80046ec:	f7ff fd6f 	bl	80041ce <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	695a      	ldr	r2, [r3, #20]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	68db      	ldr	r3, [r3, #12]
 80046fa:	08db      	lsrs	r3, r3, #3
 80046fc:	f003 0303 	and.w	r3, r3, #3
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	fa02 f303 	lsl.w	r3, r2, r3
 8004706:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800470a:	683b      	ldr	r3, [r7, #0]
 800470c:	691b      	ldr	r3, [r3, #16]
 800470e:	2b04      	cmp	r3, #4
 8004710:	d00a      	beq.n	8004728 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6818      	ldr	r0, [r3, #0]
 8004716:	683b      	ldr	r3, [r7, #0]
 8004718:	6919      	ldr	r1, [r3, #16]
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004722:	f7ff fcd3 	bl	80040cc <LL_ADC_SetOffset>
 8004726:	e17b      	b.n	8004a20 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2100      	movs	r1, #0
 800472e:	4618      	mov	r0, r3
 8004730:	f7ff fcf0 	bl	8004114 <LL_ADC_GetOffsetChannel>
 8004734:	4603      	mov	r3, r0
 8004736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <HAL_ADC_ConfigChannel+0x148>
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	2100      	movs	r1, #0
 8004744:	4618      	mov	r0, r3
 8004746:	f7ff fce5 	bl	8004114 <LL_ADC_GetOffsetChannel>
 800474a:	4603      	mov	r3, r0
 800474c:	0e9b      	lsrs	r3, r3, #26
 800474e:	f003 021f 	and.w	r2, r3, #31
 8004752:	e01e      	b.n	8004792 <HAL_ADC_ConfigChannel+0x186>
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	2100      	movs	r1, #0
 800475a:	4618      	mov	r0, r3
 800475c:	f7ff fcda 	bl	8004114 <LL_ADC_GetOffsetChannel>
 8004760:	4603      	mov	r3, r0
 8004762:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004766:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800476a:	fa93 f3a3 	rbit	r3, r3
 800476e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8004772:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8004776:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800477a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8004782:	2320      	movs	r3, #32
 8004784:	e004      	b.n	8004790 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8004786:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800478a:	fab3 f383 	clz	r3, r3
 800478e:	b2db      	uxtb	r3, r3
 8004790:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800479a:	2b00      	cmp	r3, #0
 800479c:	d105      	bne.n	80047aa <HAL_ADC_ConfigChannel+0x19e>
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	0e9b      	lsrs	r3, r3, #26
 80047a4:	f003 031f 	and.w	r3, r3, #31
 80047a8:	e018      	b.n	80047dc <HAL_ADC_ConfigChannel+0x1d0>
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80047b6:	fa93 f3a3 	rbit	r3, r3
 80047ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80047be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80047c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80047c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d101      	bne.n	80047d2 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 80047ce:	2320      	movs	r3, #32
 80047d0:	e004      	b.n	80047dc <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 80047d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80047d6:	fab3 f383 	clz	r3, r3
 80047da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80047dc:	429a      	cmp	r2, r3
 80047de:	d106      	bne.n	80047ee <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	2200      	movs	r2, #0
 80047e6:	2100      	movs	r1, #0
 80047e8:	4618      	mov	r0, r3
 80047ea:	f7ff fca9 	bl	8004140 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2101      	movs	r1, #1
 80047f4:	4618      	mov	r0, r3
 80047f6:	f7ff fc8d 	bl	8004114 <LL_ADC_GetOffsetChannel>
 80047fa:	4603      	mov	r3, r0
 80047fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004800:	2b00      	cmp	r3, #0
 8004802:	d10a      	bne.n	800481a <HAL_ADC_ConfigChannel+0x20e>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	2101      	movs	r1, #1
 800480a:	4618      	mov	r0, r3
 800480c:	f7ff fc82 	bl	8004114 <LL_ADC_GetOffsetChannel>
 8004810:	4603      	mov	r3, r0
 8004812:	0e9b      	lsrs	r3, r3, #26
 8004814:	f003 021f 	and.w	r2, r3, #31
 8004818:	e01e      	b.n	8004858 <HAL_ADC_ConfigChannel+0x24c>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	2101      	movs	r1, #1
 8004820:	4618      	mov	r0, r3
 8004822:	f7ff fc77 	bl	8004114 <LL_ADC_GetOffsetChannel>
 8004826:	4603      	mov	r3, r0
 8004828:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800482c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004830:	fa93 f3a3 	rbit	r3, r3
 8004834:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004838:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800483c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004840:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004844:	2b00      	cmp	r3, #0
 8004846:	d101      	bne.n	800484c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004848:	2320      	movs	r3, #32
 800484a:	e004      	b.n	8004856 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800484c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004850:	fab3 f383 	clz	r3, r3
 8004854:	b2db      	uxtb	r3, r3
 8004856:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004860:	2b00      	cmp	r3, #0
 8004862:	d105      	bne.n	8004870 <HAL_ADC_ConfigChannel+0x264>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	0e9b      	lsrs	r3, r3, #26
 800486a:	f003 031f 	and.w	r3, r3, #31
 800486e:	e018      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x296>
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004878:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800487c:	fa93 f3a3 	rbit	r3, r3
 8004880:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8004884:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8004888:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800488c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004890:	2b00      	cmp	r3, #0
 8004892:	d101      	bne.n	8004898 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8004894:	2320      	movs	r3, #32
 8004896:	e004      	b.n	80048a2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8004898:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800489c:	fab3 f383 	clz	r3, r3
 80048a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d106      	bne.n	80048b4 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	2200      	movs	r2, #0
 80048ac:	2101      	movs	r1, #1
 80048ae:	4618      	mov	r0, r3
 80048b0:	f7ff fc46 	bl	8004140 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	2102      	movs	r1, #2
 80048ba:	4618      	mov	r0, r3
 80048bc:	f7ff fc2a 	bl	8004114 <LL_ADC_GetOffsetChannel>
 80048c0:	4603      	mov	r3, r0
 80048c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d10a      	bne.n	80048e0 <HAL_ADC_ConfigChannel+0x2d4>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2102      	movs	r1, #2
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fc1f 	bl	8004114 <LL_ADC_GetOffsetChannel>
 80048d6:	4603      	mov	r3, r0
 80048d8:	0e9b      	lsrs	r3, r3, #26
 80048da:	f003 021f 	and.w	r2, r3, #31
 80048de:	e01e      	b.n	800491e <HAL_ADC_ConfigChannel+0x312>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2102      	movs	r1, #2
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff fc14 	bl	8004114 <LL_ADC_GetOffsetChannel>
 80048ec:	4603      	mov	r3, r0
 80048ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80048f6:	fa93 f3a3 	rbit	r3, r3
 80048fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80048fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004902:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004906:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800490e:	2320      	movs	r3, #32
 8004910:	e004      	b.n	800491c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004912:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004916:	fab3 f383 	clz	r3, r3
 800491a:	b2db      	uxtb	r3, r3
 800491c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004926:	2b00      	cmp	r3, #0
 8004928:	d105      	bne.n	8004936 <HAL_ADC_ConfigChannel+0x32a>
 800492a:	683b      	ldr	r3, [r7, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	0e9b      	lsrs	r3, r3, #26
 8004930:	f003 031f 	and.w	r3, r3, #31
 8004934:	e016      	b.n	8004964 <HAL_ADC_ConfigChannel+0x358>
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800493e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004942:	fa93 f3a3 	rbit	r3, r3
 8004946:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004948:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800494a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800494e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8004956:	2320      	movs	r3, #32
 8004958:	e004      	b.n	8004964 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 800495a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800495e:	fab3 f383 	clz	r3, r3
 8004962:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004964:	429a      	cmp	r2, r3
 8004966:	d106      	bne.n	8004976 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	2200      	movs	r2, #0
 800496e:	2102      	movs	r1, #2
 8004970:	4618      	mov	r0, r3
 8004972:	f7ff fbe5 	bl	8004140 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	2103      	movs	r1, #3
 800497c:	4618      	mov	r0, r3
 800497e:	f7ff fbc9 	bl	8004114 <LL_ADC_GetOffsetChannel>
 8004982:	4603      	mov	r3, r0
 8004984:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004988:	2b00      	cmp	r3, #0
 800498a:	d10a      	bne.n	80049a2 <HAL_ADC_ConfigChannel+0x396>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	681b      	ldr	r3, [r3, #0]
 8004990:	2103      	movs	r1, #3
 8004992:	4618      	mov	r0, r3
 8004994:	f7ff fbbe 	bl	8004114 <LL_ADC_GetOffsetChannel>
 8004998:	4603      	mov	r3, r0
 800499a:	0e9b      	lsrs	r3, r3, #26
 800499c:	f003 021f 	and.w	r2, r3, #31
 80049a0:	e017      	b.n	80049d2 <HAL_ADC_ConfigChannel+0x3c6>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	2103      	movs	r1, #3
 80049a8:	4618      	mov	r0, r3
 80049aa:	f7ff fbb3 	bl	8004114 <LL_ADC_GetOffsetChannel>
 80049ae:	4603      	mov	r3, r0
 80049b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80049b4:	fa93 f3a3 	rbit	r3, r3
 80049b8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80049ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80049bc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80049be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d101      	bne.n	80049c8 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 80049c4:	2320      	movs	r3, #32
 80049c6:	e003      	b.n	80049d0 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 80049c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80049ca:	fab3 f383 	clz	r3, r3
 80049ce:	b2db      	uxtb	r3, r3
 80049d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d105      	bne.n	80049ea <HAL_ADC_ConfigChannel+0x3de>
 80049de:	683b      	ldr	r3, [r7, #0]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	0e9b      	lsrs	r3, r3, #26
 80049e4:	f003 031f 	and.w	r3, r3, #31
 80049e8:	e011      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x402>
 80049ea:	683b      	ldr	r3, [r7, #0]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80049f2:	fa93 f3a3 	rbit	r3, r3
 80049f6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80049f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80049fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80049fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d101      	bne.n	8004a06 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004a02:	2320      	movs	r3, #32
 8004a04:	e003      	b.n	8004a0e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004a06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004a08:	fab3 f383 	clz	r3, r3
 8004a0c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004a0e:	429a      	cmp	r2, r3
 8004a10:	d106      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	2200      	movs	r2, #0
 8004a18:	2103      	movs	r1, #3
 8004a1a:	4618      	mov	r0, r3
 8004a1c:	f7ff fb90 	bl	8004140 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	4618      	mov	r0, r3
 8004a26:	f7ff fc6f 	bl	8004308 <LL_ADC_IsEnabled>
 8004a2a:	4603      	mov	r3, r0
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	f040 813f 	bne.w	8004cb0 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	6818      	ldr	r0, [r3, #0]
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	6819      	ldr	r1, [r3, #0]
 8004a3a:	683b      	ldr	r3, [r7, #0]
 8004a3c:	68db      	ldr	r3, [r3, #12]
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f7ff fbf0 	bl	8004224 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	68db      	ldr	r3, [r3, #12]
 8004a48:	4a8e      	ldr	r2, [pc, #568]	; (8004c84 <HAL_ADC_ConfigChannel+0x678>)
 8004a4a:	4293      	cmp	r3, r2
 8004a4c:	f040 8130 	bne.w	8004cb0 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d10b      	bne.n	8004a78 <HAL_ADC_ConfigChannel+0x46c>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	0e9b      	lsrs	r3, r3, #26
 8004a66:	3301      	adds	r3, #1
 8004a68:	f003 031f 	and.w	r3, r3, #31
 8004a6c:	2b09      	cmp	r3, #9
 8004a6e:	bf94      	ite	ls
 8004a70:	2301      	movls	r3, #1
 8004a72:	2300      	movhi	r3, #0
 8004a74:	b2db      	uxtb	r3, r3
 8004a76:	e019      	b.n	8004aac <HAL_ADC_ConfigChannel+0x4a0>
 8004a78:	683b      	ldr	r3, [r7, #0]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a7e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004a80:	fa93 f3a3 	rbit	r3, r3
 8004a84:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8004a86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004a88:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8004a8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d101      	bne.n	8004a94 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8004a90:	2320      	movs	r3, #32
 8004a92:	e003      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8004a94:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004a96:	fab3 f383 	clz	r3, r3
 8004a9a:	b2db      	uxtb	r3, r3
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	f003 031f 	and.w	r3, r3, #31
 8004aa2:	2b09      	cmp	r3, #9
 8004aa4:	bf94      	ite	ls
 8004aa6:	2301      	movls	r3, #1
 8004aa8:	2300      	movhi	r3, #0
 8004aaa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d079      	beq.n	8004ba4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d107      	bne.n	8004acc <HAL_ADC_ConfigChannel+0x4c0>
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	0e9b      	lsrs	r3, r3, #26
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	069b      	lsls	r3, r3, #26
 8004ac6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004aca:	e015      	b.n	8004af8 <HAL_ADC_ConfigChannel+0x4ec>
 8004acc:	683b      	ldr	r3, [r7, #0]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ad2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004ad4:	fa93 f3a3 	rbit	r3, r3
 8004ad8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004ada:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004adc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004ade:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ae0:	2b00      	cmp	r3, #0
 8004ae2:	d101      	bne.n	8004ae8 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004ae4:	2320      	movs	r3, #32
 8004ae6:	e003      	b.n	8004af0 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004ae8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004aea:	fab3 f383 	clz	r3, r3
 8004aee:	b2db      	uxtb	r3, r3
 8004af0:	3301      	adds	r3, #1
 8004af2:	069b      	lsls	r3, r3, #26
 8004af4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d109      	bne.n	8004b18 <HAL_ADC_ConfigChannel+0x50c>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	0e9b      	lsrs	r3, r3, #26
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	f003 031f 	and.w	r3, r3, #31
 8004b10:	2101      	movs	r1, #1
 8004b12:	fa01 f303 	lsl.w	r3, r1, r3
 8004b16:	e017      	b.n	8004b48 <HAL_ADC_ConfigChannel+0x53c>
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004b20:	fa93 f3a3 	rbit	r3, r3
 8004b24:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b28:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004b2a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d101      	bne.n	8004b34 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004b30:	2320      	movs	r3, #32
 8004b32:	e003      	b.n	8004b3c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004b34:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004b36:	fab3 f383 	clz	r3, r3
 8004b3a:	b2db      	uxtb	r3, r3
 8004b3c:	3301      	adds	r3, #1
 8004b3e:	f003 031f 	and.w	r3, r3, #31
 8004b42:	2101      	movs	r1, #1
 8004b44:	fa01 f303 	lsl.w	r3, r1, r3
 8004b48:	ea42 0103 	orr.w	r1, r2, r3
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d10a      	bne.n	8004b6e <HAL_ADC_ConfigChannel+0x562>
 8004b58:	683b      	ldr	r3, [r7, #0]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	0e9b      	lsrs	r3, r3, #26
 8004b5e:	3301      	adds	r3, #1
 8004b60:	f003 021f 	and.w	r2, r3, #31
 8004b64:	4613      	mov	r3, r2
 8004b66:	005b      	lsls	r3, r3, #1
 8004b68:	4413      	add	r3, r2
 8004b6a:	051b      	lsls	r3, r3, #20
 8004b6c:	e018      	b.n	8004ba0 <HAL_ADC_ConfigChannel+0x594>
 8004b6e:	683b      	ldr	r3, [r7, #0]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b76:	fa93 f3a3 	rbit	r3, r3
 8004b7a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004b80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004b86:	2320      	movs	r3, #32
 8004b88:	e003      	b.n	8004b92 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004b8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004b8c:	fab3 f383 	clz	r3, r3
 8004b90:	b2db      	uxtb	r3, r3
 8004b92:	3301      	adds	r3, #1
 8004b94:	f003 021f 	and.w	r2, r3, #31
 8004b98:	4613      	mov	r3, r2
 8004b9a:	005b      	lsls	r3, r3, #1
 8004b9c:	4413      	add	r3, r2
 8004b9e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ba0:	430b      	orrs	r3, r1
 8004ba2:	e080      	b.n	8004ca6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d107      	bne.n	8004bc0 <HAL_ADC_ConfigChannel+0x5b4>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	0e9b      	lsrs	r3, r3, #26
 8004bb6:	3301      	adds	r3, #1
 8004bb8:	069b      	lsls	r3, r3, #26
 8004bba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bbe:	e015      	b.n	8004bec <HAL_ADC_ConfigChannel+0x5e0>
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc8:	fa93 f3a3 	rbit	r3, r3
 8004bcc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bd0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004bd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d101      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004bd8:	2320      	movs	r3, #32
 8004bda:	e003      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bde:	fab3 f383 	clz	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	3301      	adds	r3, #1
 8004be6:	069b      	lsls	r3, r3, #26
 8004be8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004bec:	683b      	ldr	r3, [r7, #0]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	d109      	bne.n	8004c0c <HAL_ADC_ConfigChannel+0x600>
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	0e9b      	lsrs	r3, r3, #26
 8004bfe:	3301      	adds	r3, #1
 8004c00:	f003 031f 	and.w	r3, r3, #31
 8004c04:	2101      	movs	r1, #1
 8004c06:	fa01 f303 	lsl.w	r3, r1, r3
 8004c0a:	e017      	b.n	8004c3c <HAL_ADC_ConfigChannel+0x630>
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c12:	6a3b      	ldr	r3, [r7, #32]
 8004c14:	fa93 f3a3 	rbit	r3, r3
 8004c18:	61fb      	str	r3, [r7, #28]
  return result;
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d101      	bne.n	8004c28 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004c24:	2320      	movs	r3, #32
 8004c26:	e003      	b.n	8004c30 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004c28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c2a:	fab3 f383 	clz	r3, r3
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	3301      	adds	r3, #1
 8004c32:	f003 031f 	and.w	r3, r3, #31
 8004c36:	2101      	movs	r1, #1
 8004c38:	fa01 f303 	lsl.w	r3, r1, r3
 8004c3c:	ea42 0103 	orr.w	r1, r2, r3
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d10d      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x65c>
 8004c4c:	683b      	ldr	r3, [r7, #0]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	0e9b      	lsrs	r3, r3, #26
 8004c52:	3301      	adds	r3, #1
 8004c54:	f003 021f 	and.w	r2, r3, #31
 8004c58:	4613      	mov	r3, r2
 8004c5a:	005b      	lsls	r3, r3, #1
 8004c5c:	4413      	add	r3, r2
 8004c5e:	3b1e      	subs	r3, #30
 8004c60:	051b      	lsls	r3, r3, #20
 8004c62:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004c66:	e01d      	b.n	8004ca4 <HAL_ADC_ConfigChannel+0x698>
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004c6e:	697b      	ldr	r3, [r7, #20]
 8004c70:	fa93 f3a3 	rbit	r3, r3
 8004c74:	613b      	str	r3, [r7, #16]
  return result;
 8004c76:	693b      	ldr	r3, [r7, #16]
 8004c78:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004c7a:	69bb      	ldr	r3, [r7, #24]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d103      	bne.n	8004c88 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004c80:	2320      	movs	r3, #32
 8004c82:	e005      	b.n	8004c90 <HAL_ADC_ConfigChannel+0x684>
 8004c84:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	fab3 f383 	clz	r3, r3
 8004c8e:	b2db      	uxtb	r3, r3
 8004c90:	3301      	adds	r3, #1
 8004c92:	f003 021f 	and.w	r2, r3, #31
 8004c96:	4613      	mov	r3, r2
 8004c98:	005b      	lsls	r3, r3, #1
 8004c9a:	4413      	add	r3, r2
 8004c9c:	3b1e      	subs	r3, #30
 8004c9e:	051b      	lsls	r3, r3, #20
 8004ca0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ca4:	430b      	orrs	r3, r1
 8004ca6:	683a      	ldr	r2, [r7, #0]
 8004ca8:	6892      	ldr	r2, [r2, #8]
 8004caa:	4619      	mov	r1, r3
 8004cac:	f7ff fa8f 	bl	80041ce <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004cb0:	683b      	ldr	r3, [r7, #0]
 8004cb2:	681a      	ldr	r2, [r3, #0]
 8004cb4:	4b3d      	ldr	r3, [pc, #244]	; (8004dac <HAL_ADC_ConfigChannel+0x7a0>)
 8004cb6:	4013      	ands	r3, r2
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d06c      	beq.n	8004d96 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004cbc:	483c      	ldr	r0, [pc, #240]	; (8004db0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004cbe:	f7ff f9f7 	bl	80040b0 <LL_ADC_GetCommonPathInternalCh>
 8004cc2:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	4a3a      	ldr	r2, [pc, #232]	; (8004db4 <HAL_ADC_ConfigChannel+0x7a8>)
 8004ccc:	4293      	cmp	r3, r2
 8004cce:	d127      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004cd0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cd4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d121      	bne.n	8004d20 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	4a35      	ldr	r2, [pc, #212]	; (8004db8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004ce2:	4293      	cmp	r3, r2
 8004ce4:	d157      	bne.n	8004d96 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ce6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cea:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004cee:	4619      	mov	r1, r3
 8004cf0:	482f      	ldr	r0, [pc, #188]	; (8004db0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004cf2:	f7ff f9ca 	bl	800408a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004cf6:	4b31      	ldr	r3, [pc, #196]	; (8004dbc <HAL_ADC_ConfigChannel+0x7b0>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	099b      	lsrs	r3, r3, #6
 8004cfc:	4a30      	ldr	r2, [pc, #192]	; (8004dc0 <HAL_ADC_ConfigChannel+0x7b4>)
 8004cfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004d02:	099b      	lsrs	r3, r3, #6
 8004d04:	1c5a      	adds	r2, r3, #1
 8004d06:	4613      	mov	r3, r2
 8004d08:	005b      	lsls	r3, r3, #1
 8004d0a:	4413      	add	r3, r2
 8004d0c:	009b      	lsls	r3, r3, #2
 8004d0e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d10:	e002      	b.n	8004d18 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	3b01      	subs	r3, #1
 8004d16:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d1f9      	bne.n	8004d12 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004d1e:	e03a      	b.n	8004d96 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	4a27      	ldr	r2, [pc, #156]	; (8004dc4 <HAL_ADC_ConfigChannel+0x7b8>)
 8004d26:	4293      	cmp	r3, r2
 8004d28:	d113      	bne.n	8004d52 <HAL_ADC_ConfigChannel+0x746>
 8004d2a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10d      	bne.n	8004d52 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	4a1f      	ldr	r2, [pc, #124]	; (8004db8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004d3c:	4293      	cmp	r3, r2
 8004d3e:	d12a      	bne.n	8004d96 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d44:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004d48:	4619      	mov	r1, r3
 8004d4a:	4819      	ldr	r0, [pc, #100]	; (8004db0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004d4c:	f7ff f99d 	bl	800408a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004d50:	e021      	b.n	8004d96 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004d52:	683b      	ldr	r3, [r7, #0]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a1c      	ldr	r2, [pc, #112]	; (8004dc8 <HAL_ADC_ConfigChannel+0x7bc>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d11c      	bne.n	8004d96 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004d5c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d60:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004d64:	2b00      	cmp	r3, #0
 8004d66:	d116      	bne.n	8004d96 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	4a12      	ldr	r2, [pc, #72]	; (8004db8 <HAL_ADC_ConfigChannel+0x7ac>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d111      	bne.n	8004d96 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004d72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004d76:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004d7a:	4619      	mov	r1, r3
 8004d7c:	480c      	ldr	r0, [pc, #48]	; (8004db0 <HAL_ADC_ConfigChannel+0x7a4>)
 8004d7e:	f7ff f984 	bl	800408a <LL_ADC_SetCommonPathInternalCh>
 8004d82:	e008      	b.n	8004d96 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d88:	f043 0220 	orr.w	r2, r3, #32
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004d90:	2301      	movs	r3, #1
 8004d92:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004d9e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	37d8      	adds	r7, #216	; 0xd8
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	80080000 	.word	0x80080000
 8004db0:	50040300 	.word	0x50040300
 8004db4:	c7520000 	.word	0xc7520000
 8004db8:	50040000 	.word	0x50040000
 8004dbc:	20000004 	.word	0x20000004
 8004dc0:	053e2d63 	.word	0x053e2d63
 8004dc4:	cb840000 	.word	0xcb840000
 8004dc8:	80000001 	.word	0x80000001

08004dcc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b084      	sub	sp, #16
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e0ed      	b.n	8004fba <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004de4:	b2db      	uxtb	r3, r3
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d102      	bne.n	8004df0 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004dea:	6878      	ldr	r0, [r7, #4]
 8004dec:	f7fe fdda 	bl	80039a4 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	681a      	ldr	r2, [r3, #0]
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f042 0201 	orr.w	r2, r2, #1
 8004dfe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e00:	f7ff f900 	bl	8004004 <HAL_GetTick>
 8004e04:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e06:	e012      	b.n	8004e2e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e08:	f7ff f8fc 	bl	8004004 <HAL_GetTick>
 8004e0c:	4602      	mov	r2, r0
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	2b0a      	cmp	r3, #10
 8004e14:	d90b      	bls.n	8004e2e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2205      	movs	r2, #5
 8004e26:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e2a:	2301      	movs	r3, #1
 8004e2c:	e0c5      	b.n	8004fba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f003 0301 	and.w	r3, r3, #1
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d0e5      	beq.n	8004e08 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	681a      	ldr	r2, [r3, #0]
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	f022 0202 	bic.w	r2, r2, #2
 8004e4a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004e4c:	f7ff f8da 	bl	8004004 <HAL_GetTick>
 8004e50:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e52:	e012      	b.n	8004e7a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004e54:	f7ff f8d6 	bl	8004004 <HAL_GetTick>
 8004e58:	4602      	mov	r2, r0
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	1ad3      	subs	r3, r2, r3
 8004e5e:	2b0a      	cmp	r3, #10
 8004e60:	d90b      	bls.n	8004e7a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e66:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	2205      	movs	r2, #5
 8004e72:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e09f      	b.n	8004fba <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	f003 0302 	and.w	r3, r3, #2
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d1e5      	bne.n	8004e54 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	7e1b      	ldrb	r3, [r3, #24]
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	d108      	bne.n	8004ea2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	681a      	ldr	r2, [r3, #0]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004e9e:	601a      	str	r2, [r3, #0]
 8004ea0:	e007      	b.n	8004eb2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	681a      	ldr	r2, [r3, #0]
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004eb0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	7e5b      	ldrb	r3, [r3, #25]
 8004eb6:	2b01      	cmp	r3, #1
 8004eb8:	d108      	bne.n	8004ecc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	681a      	ldr	r2, [r3, #0]
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004ec8:	601a      	str	r2, [r3, #0]
 8004eca:	e007      	b.n	8004edc <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	681a      	ldr	r2, [r3, #0]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004eda:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	7e9b      	ldrb	r3, [r3, #26]
 8004ee0:	2b01      	cmp	r3, #1
 8004ee2:	d108      	bne.n	8004ef6 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f042 0220 	orr.w	r2, r2, #32
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	e007      	b.n	8004f06 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681a      	ldr	r2, [r3, #0]
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f022 0220 	bic.w	r2, r2, #32
 8004f04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	7edb      	ldrb	r3, [r3, #27]
 8004f0a:	2b01      	cmp	r3, #1
 8004f0c:	d108      	bne.n	8004f20 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f022 0210 	bic.w	r2, r2, #16
 8004f1c:	601a      	str	r2, [r3, #0]
 8004f1e:	e007      	b.n	8004f30 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	681a      	ldr	r2, [r3, #0]
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f042 0210 	orr.w	r2, r2, #16
 8004f2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	7f1b      	ldrb	r3, [r3, #28]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d108      	bne.n	8004f4a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	681a      	ldr	r2, [r3, #0]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f042 0208 	orr.w	r2, r2, #8
 8004f46:	601a      	str	r2, [r3, #0]
 8004f48:	e007      	b.n	8004f5a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	681a      	ldr	r2, [r3, #0]
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f022 0208 	bic.w	r2, r2, #8
 8004f58:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	7f5b      	ldrb	r3, [r3, #29]
 8004f5e:	2b01      	cmp	r3, #1
 8004f60:	d108      	bne.n	8004f74 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0204 	orr.w	r2, r2, #4
 8004f70:	601a      	str	r2, [r3, #0]
 8004f72:	e007      	b.n	8004f84 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f022 0204 	bic.w	r2, r2, #4
 8004f82:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	689a      	ldr	r2, [r3, #8]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	431a      	orrs	r2, r3
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	691b      	ldr	r3, [r3, #16]
 8004f92:	431a      	orrs	r2, r3
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	695b      	ldr	r3, [r3, #20]
 8004f98:	ea42 0103 	orr.w	r1, r2, r3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	685b      	ldr	r3, [r3, #4]
 8004fa0:	1e5a      	subs	r2, r3, #1
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2200      	movs	r2, #0
 8004fae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004fb8:	2300      	movs	r3, #0
}
 8004fba:	4618      	mov	r0, r3
 8004fbc:	3710      	adds	r7, #16
 8004fbe:	46bd      	mov	sp, r7
 8004fc0:	bd80      	pop	{r7, pc}

08004fc2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8004fc2:	b580      	push	{r7, lr}
 8004fc4:	b08a      	sub	sp, #40	; 0x28
 8004fc6:	af00      	add	r7, sp, #0
 8004fc8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	695b      	ldr	r3, [r3, #20]
 8004fd4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	685b      	ldr	r3, [r3, #4]
 8004fdc:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	689b      	ldr	r3, [r3, #8]
 8004fe4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	691b      	ldr	r3, [r3, #16]
 8004ff4:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	699b      	ldr	r3, [r3, #24]
 8004ffc:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8004ffe:	6a3b      	ldr	r3, [r7, #32]
 8005000:	f003 0301 	and.w	r3, r3, #1
 8005004:	2b00      	cmp	r3, #0
 8005006:	d07c      	beq.n	8005102 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d023      	beq.n	800505a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	2201      	movs	r2, #1
 8005018:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 800501a:	69bb      	ldr	r3, [r7, #24]
 800501c:	f003 0302 	and.w	r3, r3, #2
 8005020:	2b00      	cmp	r3, #0
 8005022:	d003      	beq.n	800502c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8005024:	6878      	ldr	r0, [r7, #4]
 8005026:	f000 f983 	bl	8005330 <HAL_CAN_TxMailbox0CompleteCallback>
 800502a:	e016      	b.n	800505a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	d004      	beq.n	8005040 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005036:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005038:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800503c:	627b      	str	r3, [r7, #36]	; 0x24
 800503e:	e00c      	b.n	800505a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	f003 0308 	and.w	r3, r3, #8
 8005046:	2b00      	cmp	r3, #0
 8005048:	d004      	beq.n	8005054 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 800504a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8005050:	627b      	str	r3, [r7, #36]	; 0x24
 8005052:	e002      	b.n	800505a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005054:	6878      	ldr	r0, [r7, #4]
 8005056:	f000 f989 	bl	800536c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 800505a:	69bb      	ldr	r3, [r7, #24]
 800505c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005060:	2b00      	cmp	r3, #0
 8005062:	d024      	beq.n	80050ae <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	f44f 7280 	mov.w	r2, #256	; 0x100
 800506c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005074:	2b00      	cmp	r3, #0
 8005076:	d003      	beq.n	8005080 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005078:	6878      	ldr	r0, [r7, #4]
 800507a:	f000 f963 	bl	8005344 <HAL_CAN_TxMailbox1CompleteCallback>
 800507e:	e016      	b.n	80050ae <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005086:	2b00      	cmp	r3, #0
 8005088:	d004      	beq.n	8005094 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 800508a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800508c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8005090:	627b      	str	r3, [r7, #36]	; 0x24
 8005092:	e00c      	b.n	80050ae <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005094:	69bb      	ldr	r3, [r7, #24]
 8005096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800509a:	2b00      	cmp	r3, #0
 800509c:	d004      	beq.n	80050a8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80050a4:	627b      	str	r3, [r7, #36]	; 0x24
 80050a6:	e002      	b.n	80050ae <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f969 	bl	8005380 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80050ae:	69bb      	ldr	r3, [r7, #24]
 80050b0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d024      	beq.n	8005102 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80050c0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80050c2:	69bb      	ldr	r3, [r7, #24]
 80050c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d003      	beq.n	80050d4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80050cc:	6878      	ldr	r0, [r7, #4]
 80050ce:	f000 f943 	bl	8005358 <HAL_CAN_TxMailbox2CompleteCallback>
 80050d2:	e016      	b.n	8005102 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80050d4:	69bb      	ldr	r3, [r7, #24]
 80050d6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d004      	beq.n	80050e8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80050de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80050e4:	627b      	str	r3, [r7, #36]	; 0x24
 80050e6:	e00c      	b.n	8005102 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d004      	beq.n	80050fc <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80050f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
 80050fa:	e002      	b.n	8005102 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 f949 	bl	8005394 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8005102:	6a3b      	ldr	r3, [r7, #32]
 8005104:	f003 0308 	and.w	r3, r3, #8
 8005108:	2b00      	cmp	r3, #0
 800510a:	d00c      	beq.n	8005126 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800510c:	697b      	ldr	r3, [r7, #20]
 800510e:	f003 0310 	and.w	r3, r3, #16
 8005112:	2b00      	cmp	r3, #0
 8005114:	d007      	beq.n	8005126 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005118:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800511c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	2210      	movs	r2, #16
 8005124:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005126:	6a3b      	ldr	r3, [r7, #32]
 8005128:	f003 0304 	and.w	r3, r3, #4
 800512c:	2b00      	cmp	r3, #0
 800512e:	d00b      	beq.n	8005148 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	f003 0308 	and.w	r3, r3, #8
 8005136:	2b00      	cmp	r3, #0
 8005138:	d006      	beq.n	8005148 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	2208      	movs	r2, #8
 8005140:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 f93a 	bl	80053bc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	f003 0302 	and.w	r3, r3, #2
 800514e:	2b00      	cmp	r3, #0
 8005150:	d009      	beq.n	8005166 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	f003 0303 	and.w	r3, r3, #3
 800515c:	2b00      	cmp	r3, #0
 800515e:	d002      	beq.n	8005166 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8005160:	6878      	ldr	r0, [r7, #4]
 8005162:	f000 f921 	bl	80053a8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005166:	6a3b      	ldr	r3, [r7, #32]
 8005168:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800516c:	2b00      	cmp	r3, #0
 800516e:	d00c      	beq.n	800518a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	f003 0310 	and.w	r3, r3, #16
 8005176:	2b00      	cmp	r3, #0
 8005178:	d007      	beq.n	800518a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 800517a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005180:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2210      	movs	r2, #16
 8005188:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 800518a:	6a3b      	ldr	r3, [r7, #32]
 800518c:	f003 0320 	and.w	r3, r3, #32
 8005190:	2b00      	cmp	r3, #0
 8005192:	d00b      	beq.n	80051ac <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	f003 0308 	and.w	r3, r3, #8
 800519a:	2b00      	cmp	r3, #0
 800519c:	d006      	beq.n	80051ac <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2208      	movs	r2, #8
 80051a4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80051a6:	6878      	ldr	r0, [r7, #4]
 80051a8:	f000 f91c 	bl	80053e4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80051ac:	6a3b      	ldr	r3, [r7, #32]
 80051ae:	f003 0310 	and.w	r3, r3, #16
 80051b2:	2b00      	cmp	r3, #0
 80051b4:	d009      	beq.n	80051ca <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	691b      	ldr	r3, [r3, #16]
 80051bc:	f003 0303 	and.w	r3, r3, #3
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d002      	beq.n	80051ca <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80051c4:	6878      	ldr	r0, [r7, #4]
 80051c6:	f000 f903 	bl	80053d0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80051ca:	6a3b      	ldr	r3, [r7, #32]
 80051cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d00b      	beq.n	80051ec <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80051d4:	69fb      	ldr	r3, [r7, #28]
 80051d6:	f003 0310 	and.w	r3, r3, #16
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d006      	beq.n	80051ec <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	2210      	movs	r2, #16
 80051e4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80051e6:	6878      	ldr	r0, [r7, #4]
 80051e8:	f000 f906 	bl	80053f8 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80051ec:	6a3b      	ldr	r3, [r7, #32]
 80051ee:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d00b      	beq.n	800520e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80051f6:	69fb      	ldr	r3, [r7, #28]
 80051f8:	f003 0308 	and.w	r3, r3, #8
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	d006      	beq.n	800520e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	2208      	movs	r2, #8
 8005206:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005208:	6878      	ldr	r0, [r7, #4]
 800520a:	f000 f8ff 	bl	800540c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800520e:	6a3b      	ldr	r3, [r7, #32]
 8005210:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005214:	2b00      	cmp	r3, #0
 8005216:	d07b      	beq.n	8005310 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005218:	69fb      	ldr	r3, [r7, #28]
 800521a:	f003 0304 	and.w	r3, r3, #4
 800521e:	2b00      	cmp	r3, #0
 8005220:	d072      	beq.n	8005308 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005228:	2b00      	cmp	r3, #0
 800522a:	d008      	beq.n	800523e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8005232:	2b00      	cmp	r3, #0
 8005234:	d003      	beq.n	800523e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005238:	f043 0301 	orr.w	r3, r3, #1
 800523c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800523e:	6a3b      	ldr	r3, [r7, #32]
 8005240:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005244:	2b00      	cmp	r3, #0
 8005246:	d008      	beq.n	800525a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005248:	68fb      	ldr	r3, [r7, #12]
 800524a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800524e:	2b00      	cmp	r3, #0
 8005250:	d003      	beq.n	800525a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8005252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005254:	f043 0302 	orr.w	r3, r3, #2
 8005258:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800525a:	6a3b      	ldr	r3, [r7, #32]
 800525c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005260:	2b00      	cmp	r3, #0
 8005262:	d008      	beq.n	8005276 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800526e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005270:	f043 0304 	orr.w	r3, r3, #4
 8005274:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800527c:	2b00      	cmp	r3, #0
 800527e:	d043      	beq.n	8005308 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005286:	2b00      	cmp	r3, #0
 8005288:	d03e      	beq.n	8005308 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8005290:	2b60      	cmp	r3, #96	; 0x60
 8005292:	d02b      	beq.n	80052ec <HAL_CAN_IRQHandler+0x32a>
 8005294:	2b60      	cmp	r3, #96	; 0x60
 8005296:	d82e      	bhi.n	80052f6 <HAL_CAN_IRQHandler+0x334>
 8005298:	2b50      	cmp	r3, #80	; 0x50
 800529a:	d022      	beq.n	80052e2 <HAL_CAN_IRQHandler+0x320>
 800529c:	2b50      	cmp	r3, #80	; 0x50
 800529e:	d82a      	bhi.n	80052f6 <HAL_CAN_IRQHandler+0x334>
 80052a0:	2b40      	cmp	r3, #64	; 0x40
 80052a2:	d019      	beq.n	80052d8 <HAL_CAN_IRQHandler+0x316>
 80052a4:	2b40      	cmp	r3, #64	; 0x40
 80052a6:	d826      	bhi.n	80052f6 <HAL_CAN_IRQHandler+0x334>
 80052a8:	2b30      	cmp	r3, #48	; 0x30
 80052aa:	d010      	beq.n	80052ce <HAL_CAN_IRQHandler+0x30c>
 80052ac:	2b30      	cmp	r3, #48	; 0x30
 80052ae:	d822      	bhi.n	80052f6 <HAL_CAN_IRQHandler+0x334>
 80052b0:	2b10      	cmp	r3, #16
 80052b2:	d002      	beq.n	80052ba <HAL_CAN_IRQHandler+0x2f8>
 80052b4:	2b20      	cmp	r3, #32
 80052b6:	d005      	beq.n	80052c4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80052b8:	e01d      	b.n	80052f6 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80052ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052bc:	f043 0308 	orr.w	r3, r3, #8
 80052c0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052c2:	e019      	b.n	80052f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052c6:	f043 0310 	orr.w	r3, r3, #16
 80052ca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052cc:	e014      	b.n	80052f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80052ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d0:	f043 0320 	orr.w	r3, r3, #32
 80052d4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052d6:	e00f      	b.n	80052f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80052d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052da:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80052de:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052e0:	e00a      	b.n	80052f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80052e8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052ea:	e005      	b.n	80052f8 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80052ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80052f4:	e000      	b.n	80052f8 <HAL_CAN_IRQHandler+0x336>
            break;
 80052f6:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	699a      	ldr	r2, [r3, #24]
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005306:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	2204      	movs	r2, #4
 800530e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8005310:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005312:	2b00      	cmp	r3, #0
 8005314:	d008      	beq.n	8005328 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800531a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800531c:	431a      	orrs	r2, r3
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8005322:	6878      	ldr	r0, [r7, #4]
 8005324:	f000 f87c 	bl	8005420 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005328:	bf00      	nop
 800532a:	3728      	adds	r7, #40	; 0x28
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005330:	b480      	push	{r7}
 8005332:	b083      	sub	sp, #12
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8005338:	bf00      	nop
 800533a:	370c      	adds	r7, #12
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005344:	b480      	push	{r7}
 8005346:	b083      	sub	sp, #12
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800534c:	bf00      	nop
 800534e:	370c      	adds	r7, #12
 8005350:	46bd      	mov	sp, r7
 8005352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005356:	4770      	bx	lr

08005358 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8005358:	b480      	push	{r7}
 800535a:	b083      	sub	sp, #12
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005374:	bf00      	nop
 8005376:	370c      	adds	r7, #12
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr

08005380 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005380:	b480      	push	{r7}
 8005382:	b083      	sub	sp, #12
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005388:	bf00      	nop
 800538a:	370c      	adds	r7, #12
 800538c:	46bd      	mov	sp, r7
 800538e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005392:	4770      	bx	lr

08005394 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800539c:	bf00      	nop
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr

080053a8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80053a8:	b480      	push	{r7}
 80053aa:	b083      	sub	sp, #12
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80053b0:	bf00      	nop
 80053b2:	370c      	adds	r7, #12
 80053b4:	46bd      	mov	sp, r7
 80053b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ba:	4770      	bx	lr

080053bc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80053bc:	b480      	push	{r7}
 80053be:	b083      	sub	sp, #12
 80053c0:	af00      	add	r7, sp, #0
 80053c2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80053c4:	bf00      	nop
 80053c6:	370c      	adds	r7, #12
 80053c8:	46bd      	mov	sp, r7
 80053ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ce:	4770      	bx	lr

080053d0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80053d0:	b480      	push	{r7}
 80053d2:	b083      	sub	sp, #12
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80053d8:	bf00      	nop
 80053da:	370c      	adds	r7, #12
 80053dc:	46bd      	mov	sp, r7
 80053de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e2:	4770      	bx	lr

080053e4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80053e4:	b480      	push	{r7}
 80053e6:	b083      	sub	sp, #12
 80053e8:	af00      	add	r7, sp, #0
 80053ea:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80053ec:	bf00      	nop
 80053ee:	370c      	adds	r7, #12
 80053f0:	46bd      	mov	sp, r7
 80053f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f6:	4770      	bx	lr

080053f8 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80053f8:	b480      	push	{r7}
 80053fa:	b083      	sub	sp, #12
 80053fc:	af00      	add	r7, sp, #0
 80053fe:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8005400:	bf00      	nop
 8005402:	370c      	adds	r7, #12
 8005404:	46bd      	mov	sp, r7
 8005406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540a:	4770      	bx	lr

0800540c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800540c:	b480      	push	{r7}
 800540e:	b083      	sub	sp, #12
 8005410:	af00      	add	r7, sp, #0
 8005412:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005414:	bf00      	nop
 8005416:	370c      	adds	r7, #12
 8005418:	46bd      	mov	sp, r7
 800541a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541e:	4770      	bx	lr

08005420 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005420:	b480      	push	{r7}
 8005422:	b083      	sub	sp, #12
 8005424:	af00      	add	r7, sp, #0
 8005426:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005428:	bf00      	nop
 800542a:	370c      	adds	r7, #12
 800542c:	46bd      	mov	sp, r7
 800542e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005432:	4770      	bx	lr

08005434 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005434:	b480      	push	{r7}
 8005436:	b085      	sub	sp, #20
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	f003 0307 	and.w	r3, r3, #7
 8005442:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005444:	4b0c      	ldr	r3, [pc, #48]	; (8005478 <__NVIC_SetPriorityGrouping+0x44>)
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800544a:	68ba      	ldr	r2, [r7, #8]
 800544c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005450:	4013      	ands	r3, r2
 8005452:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800545c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005460:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005464:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005466:	4a04      	ldr	r2, [pc, #16]	; (8005478 <__NVIC_SetPriorityGrouping+0x44>)
 8005468:	68bb      	ldr	r3, [r7, #8]
 800546a:	60d3      	str	r3, [r2, #12]
}
 800546c:	bf00      	nop
 800546e:	3714      	adds	r7, #20
 8005470:	46bd      	mov	sp, r7
 8005472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005476:	4770      	bx	lr
 8005478:	e000ed00 	.word	0xe000ed00

0800547c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800547c:	b480      	push	{r7}
 800547e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005480:	4b04      	ldr	r3, [pc, #16]	; (8005494 <__NVIC_GetPriorityGrouping+0x18>)
 8005482:	68db      	ldr	r3, [r3, #12]
 8005484:	0a1b      	lsrs	r3, r3, #8
 8005486:	f003 0307 	and.w	r3, r3, #7
}
 800548a:	4618      	mov	r0, r3
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	e000ed00 	.word	0xe000ed00

08005498 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005498:	b480      	push	{r7}
 800549a:	b083      	sub	sp, #12
 800549c:	af00      	add	r7, sp, #0
 800549e:	4603      	mov	r3, r0
 80054a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	db0b      	blt.n	80054c2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	f003 021f 	and.w	r2, r3, #31
 80054b0:	4907      	ldr	r1, [pc, #28]	; (80054d0 <__NVIC_EnableIRQ+0x38>)
 80054b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054b6:	095b      	lsrs	r3, r3, #5
 80054b8:	2001      	movs	r0, #1
 80054ba:	fa00 f202 	lsl.w	r2, r0, r2
 80054be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80054c2:	bf00      	nop
 80054c4:	370c      	adds	r7, #12
 80054c6:	46bd      	mov	sp, r7
 80054c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054cc:	4770      	bx	lr
 80054ce:	bf00      	nop
 80054d0:	e000e100 	.word	0xe000e100

080054d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80054d4:	b480      	push	{r7}
 80054d6:	b083      	sub	sp, #12
 80054d8:	af00      	add	r7, sp, #0
 80054da:	4603      	mov	r3, r0
 80054dc:	6039      	str	r1, [r7, #0]
 80054de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	db0a      	blt.n	80054fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054e8:	683b      	ldr	r3, [r7, #0]
 80054ea:	b2da      	uxtb	r2, r3
 80054ec:	490c      	ldr	r1, [pc, #48]	; (8005520 <__NVIC_SetPriority+0x4c>)
 80054ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80054f2:	0112      	lsls	r2, r2, #4
 80054f4:	b2d2      	uxtb	r2, r2
 80054f6:	440b      	add	r3, r1
 80054f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80054fc:	e00a      	b.n	8005514 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	4908      	ldr	r1, [pc, #32]	; (8005524 <__NVIC_SetPriority+0x50>)
 8005504:	79fb      	ldrb	r3, [r7, #7]
 8005506:	f003 030f 	and.w	r3, r3, #15
 800550a:	3b04      	subs	r3, #4
 800550c:	0112      	lsls	r2, r2, #4
 800550e:	b2d2      	uxtb	r2, r2
 8005510:	440b      	add	r3, r1
 8005512:	761a      	strb	r2, [r3, #24]
}
 8005514:	bf00      	nop
 8005516:	370c      	adds	r7, #12
 8005518:	46bd      	mov	sp, r7
 800551a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800551e:	4770      	bx	lr
 8005520:	e000e100 	.word	0xe000e100
 8005524:	e000ed00 	.word	0xe000ed00

08005528 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005528:	b480      	push	{r7}
 800552a:	b089      	sub	sp, #36	; 0x24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f003 0307 	and.w	r3, r3, #7
 800553a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800553c:	69fb      	ldr	r3, [r7, #28]
 800553e:	f1c3 0307 	rsb	r3, r3, #7
 8005542:	2b04      	cmp	r3, #4
 8005544:	bf28      	it	cs
 8005546:	2304      	movcs	r3, #4
 8005548:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800554a:	69fb      	ldr	r3, [r7, #28]
 800554c:	3304      	adds	r3, #4
 800554e:	2b06      	cmp	r3, #6
 8005550:	d902      	bls.n	8005558 <NVIC_EncodePriority+0x30>
 8005552:	69fb      	ldr	r3, [r7, #28]
 8005554:	3b03      	subs	r3, #3
 8005556:	e000      	b.n	800555a <NVIC_EncodePriority+0x32>
 8005558:	2300      	movs	r3, #0
 800555a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800555c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005560:	69bb      	ldr	r3, [r7, #24]
 8005562:	fa02 f303 	lsl.w	r3, r2, r3
 8005566:	43da      	mvns	r2, r3
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	401a      	ands	r2, r3
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005570:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	fa01 f303 	lsl.w	r3, r1, r3
 800557a:	43d9      	mvns	r1, r3
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005580:	4313      	orrs	r3, r2
         );
}
 8005582:	4618      	mov	r0, r3
 8005584:	3724      	adds	r7, #36	; 0x24
 8005586:	46bd      	mov	sp, r7
 8005588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558c:	4770      	bx	lr

0800558e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800558e:	b580      	push	{r7, lr}
 8005590:	b082      	sub	sp, #8
 8005592:	af00      	add	r7, sp, #0
 8005594:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f7ff ff4c 	bl	8005434 <__NVIC_SetPriorityGrouping>
}
 800559c:	bf00      	nop
 800559e:	3708      	adds	r7, #8
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	4603      	mov	r3, r0
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80055b2:	2300      	movs	r3, #0
 80055b4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80055b6:	f7ff ff61 	bl	800547c <__NVIC_GetPriorityGrouping>
 80055ba:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	68b9      	ldr	r1, [r7, #8]
 80055c0:	6978      	ldr	r0, [r7, #20]
 80055c2:	f7ff ffb1 	bl	8005528 <NVIC_EncodePriority>
 80055c6:	4602      	mov	r2, r0
 80055c8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80055cc:	4611      	mov	r1, r2
 80055ce:	4618      	mov	r0, r3
 80055d0:	f7ff ff80 	bl	80054d4 <__NVIC_SetPriority>
}
 80055d4:	bf00      	nop
 80055d6:	3718      	adds	r7, #24
 80055d8:	46bd      	mov	sp, r7
 80055da:	bd80      	pop	{r7, pc}

080055dc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80055dc:	b580      	push	{r7, lr}
 80055de:	b082      	sub	sp, #8
 80055e0:	af00      	add	r7, sp, #0
 80055e2:	4603      	mov	r3, r0
 80055e4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80055e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80055ea:	4618      	mov	r0, r3
 80055ec:	f7ff ff54 	bl	8005498 <__NVIC_EnableIRQ>
}
 80055f0:	bf00      	nop
 80055f2:	3708      	adds	r7, #8
 80055f4:	46bd      	mov	sp, r7
 80055f6:	bd80      	pop	{r7, pc}

080055f8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 80055f8:	b580      	push	{r7, lr}
 80055fa:	b082      	sub	sp, #8
 80055fc:	af00      	add	r7, sp, #0
 80055fe:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d101      	bne.n	800560a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005606:	2301      	movs	r3, #1
 8005608:	e014      	b.n	8005634 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	791b      	ldrb	r3, [r3, #4]
 800560e:	b2db      	uxtb	r3, r3
 8005610:	2b00      	cmp	r3, #0
 8005612:	d105      	bne.n	8005620 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800561a:	6878      	ldr	r0, [r7, #4]
 800561c:	f7fe fa28 	bl	8003a70 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2202      	movs	r2, #2
 8005624:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	2200      	movs	r2, #0
 800562a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800562c:	687b      	ldr	r3, [r7, #4]
 800562e:	2201      	movs	r2, #1
 8005630:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005632:	2300      	movs	r3, #0
}
 8005634:	4618      	mov	r0, r3
 8005636:	3708      	adds	r7, #8
 8005638:	46bd      	mov	sp, r7
 800563a:	bd80      	pop	{r7, pc}

0800563c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
 8005644:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	795b      	ldrb	r3, [r3, #5]
 800564a:	2b01      	cmp	r3, #1
 800564c:	d101      	bne.n	8005652 <HAL_DAC_Start+0x16>
 800564e:	2302      	movs	r3, #2
 8005650:	e03b      	b.n	80056ca <HAL_DAC_Start+0x8e>
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	2201      	movs	r2, #1
 8005656:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2202      	movs	r2, #2
 800565c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	6819      	ldr	r1, [r3, #0]
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	f003 0310 	and.w	r3, r3, #16
 800566a:	2201      	movs	r2, #1
 800566c:	409a      	lsls	r2, r3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	430a      	orrs	r2, r1
 8005674:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8005676:	683b      	ldr	r3, [r7, #0]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10f      	bne.n	800569c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005686:	2b04      	cmp	r3, #4
 8005688:	d118      	bne.n	80056bc <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	685a      	ldr	r2, [r3, #4]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f042 0201 	orr.w	r2, r2, #1
 8005698:	605a      	str	r2, [r3, #4]
 800569a:	e00f      	b.n	80056bc <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80056a6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80056aa:	d107      	bne.n	80056bc <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	685a      	ldr	r2, [r3, #4]
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f042 0202 	orr.w	r2, r2, #2
 80056ba:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	2201      	movs	r2, #1
 80056c0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2200      	movs	r2, #0
 80056c6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80056c8:	2300      	movs	r3, #0
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	370c      	adds	r7, #12
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr
	...

080056d8 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80056d8:	b580      	push	{r7, lr}
 80056da:	b086      	sub	sp, #24
 80056dc:	af00      	add	r7, sp, #0
 80056de:	60f8      	str	r0, [r7, #12]
 80056e0:	60b9      	str	r1, [r7, #8]
 80056e2:	607a      	str	r2, [r7, #4]
 80056e4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80056e6:	2300      	movs	r3, #0
 80056e8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	795b      	ldrb	r3, [r3, #5]
 80056ee:	2b01      	cmp	r3, #1
 80056f0:	d101      	bne.n	80056f6 <HAL_DAC_Start_DMA+0x1e>
 80056f2:	2302      	movs	r3, #2
 80056f4:	e0ab      	b.n	800584e <HAL_DAC_Start_DMA+0x176>
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	2201      	movs	r2, #1
 80056fa:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	2202      	movs	r2, #2
 8005700:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d12f      	bne.n	8005768 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	4a52      	ldr	r2, [pc, #328]	; (8005858 <HAL_DAC_Start_DMA+0x180>)
 800570e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	689b      	ldr	r3, [r3, #8]
 8005714:	4a51      	ldr	r2, [pc, #324]	; (800585c <HAL_DAC_Start_DMA+0x184>)
 8005716:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	689b      	ldr	r3, [r3, #8]
 800571c:	4a50      	ldr	r2, [pc, #320]	; (8005860 <HAL_DAC_Start_DMA+0x188>)
 800571e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	681b      	ldr	r3, [r3, #0]
 8005724:	681a      	ldr	r2, [r3, #0]
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800572e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8005730:	6a3b      	ldr	r3, [r7, #32]
 8005732:	2b08      	cmp	r3, #8
 8005734:	d013      	beq.n	800575e <HAL_DAC_Start_DMA+0x86>
 8005736:	6a3b      	ldr	r3, [r7, #32]
 8005738:	2b08      	cmp	r3, #8
 800573a:	d845      	bhi.n	80057c8 <HAL_DAC_Start_DMA+0xf0>
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d003      	beq.n	800574a <HAL_DAC_Start_DMA+0x72>
 8005742:	6a3b      	ldr	r3, [r7, #32]
 8005744:	2b04      	cmp	r3, #4
 8005746:	d005      	beq.n	8005754 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8005748:	e03e      	b.n	80057c8 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	3308      	adds	r3, #8
 8005750:	613b      	str	r3, [r7, #16]
        break;
 8005752:	e03c      	b.n	80057ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	330c      	adds	r3, #12
 800575a:	613b      	str	r3, [r7, #16]
        break;
 800575c:	e037      	b.n	80057ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	3310      	adds	r3, #16
 8005764:	613b      	str	r3, [r7, #16]
        break;
 8005766:	e032      	b.n	80057ce <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	68db      	ldr	r3, [r3, #12]
 800576c:	4a3d      	ldr	r2, [pc, #244]	; (8005864 <HAL_DAC_Start_DMA+0x18c>)
 800576e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	68db      	ldr	r3, [r3, #12]
 8005774:	4a3c      	ldr	r2, [pc, #240]	; (8005868 <HAL_DAC_Start_DMA+0x190>)
 8005776:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	68db      	ldr	r3, [r3, #12]
 800577c:	4a3b      	ldr	r2, [pc, #236]	; (800586c <HAL_DAC_Start_DMA+0x194>)
 800577e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	681b      	ldr	r3, [r3, #0]
 8005784:	681a      	ldr	r2, [r3, #0]
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	681b      	ldr	r3, [r3, #0]
 800578a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800578e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8005790:	6a3b      	ldr	r3, [r7, #32]
 8005792:	2b08      	cmp	r3, #8
 8005794:	d013      	beq.n	80057be <HAL_DAC_Start_DMA+0xe6>
 8005796:	6a3b      	ldr	r3, [r7, #32]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d817      	bhi.n	80057cc <HAL_DAC_Start_DMA+0xf4>
 800579c:	6a3b      	ldr	r3, [r7, #32]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d003      	beq.n	80057aa <HAL_DAC_Start_DMA+0xd2>
 80057a2:	6a3b      	ldr	r3, [r7, #32]
 80057a4:	2b04      	cmp	r3, #4
 80057a6:	d005      	beq.n	80057b4 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80057a8:	e010      	b.n	80057cc <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	3314      	adds	r3, #20
 80057b0:	613b      	str	r3, [r7, #16]
        break;
 80057b2:	e00c      	b.n	80057ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	3318      	adds	r3, #24
 80057ba:	613b      	str	r3, [r7, #16]
        break;
 80057bc:	e007      	b.n	80057ce <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	331c      	adds	r3, #28
 80057c4:	613b      	str	r3, [r7, #16]
        break;
 80057c6:	e002      	b.n	80057ce <HAL_DAC_Start_DMA+0xf6>
        break;
 80057c8:	bf00      	nop
 80057ca:	e000      	b.n	80057ce <HAL_DAC_Start_DMA+0xf6>
        break;
 80057cc:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d111      	bne.n	80057f8 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	681a      	ldr	r2, [r3, #0]
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80057e2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	6898      	ldr	r0, [r3, #8]
 80057e8:	6879      	ldr	r1, [r7, #4]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	693a      	ldr	r2, [r7, #16]
 80057ee:	f000 fb13 	bl	8005e18 <HAL_DMA_Start_IT>
 80057f2:	4603      	mov	r3, r0
 80057f4:	75fb      	strb	r3, [r7, #23]
 80057f6:	e010      	b.n	800581a <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681a      	ldr	r2, [r3, #0]
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8005806:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	68d8      	ldr	r0, [r3, #12]
 800580c:	6879      	ldr	r1, [r7, #4]
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	693a      	ldr	r2, [r7, #16]
 8005812:	f000 fb01 	bl	8005e18 <HAL_DMA_Start_IT>
 8005816:	4603      	mov	r3, r0
 8005818:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2200      	movs	r2, #0
 800581e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8005820:	7dfb      	ldrb	r3, [r7, #23]
 8005822:	2b00      	cmp	r3, #0
 8005824:	d10c      	bne.n	8005840 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	6819      	ldr	r1, [r3, #0]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 0310 	and.w	r3, r3, #16
 8005832:	2201      	movs	r2, #1
 8005834:	409a      	lsls	r2, r3
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	430a      	orrs	r2, r1
 800583c:	601a      	str	r2, [r3, #0]
 800583e:	e005      	b.n	800584c <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	691b      	ldr	r3, [r3, #16]
 8005844:	f043 0204 	orr.w	r2, r3, #4
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 800584c:	7dfb      	ldrb	r3, [r7, #23]
}
 800584e:	4618      	mov	r0, r3
 8005850:	3718      	adds	r7, #24
 8005852:	46bd      	mov	sp, r7
 8005854:	bd80      	pop	{r7, pc}
 8005856:	bf00      	nop
 8005858:	08005b81 	.word	0x08005b81
 800585c:	08005ba3 	.word	0x08005ba3
 8005860:	08005bbf 	.word	0x08005bbf
 8005864:	08005c3d 	.word	0x08005c3d
 8005868:	08005c5f 	.word	0x08005c5f
 800586c:	08005c7b 	.word	0x08005c7b

08005870 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b082      	sub	sp, #8
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005882:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005886:	d120      	bne.n	80058ca <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800588e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005892:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005896:	d118      	bne.n	80058ca <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2204      	movs	r2, #4
 800589c:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f043 0201 	orr.w	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80058b2:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	681a      	ldr	r2, [r3, #0]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80058c2:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80058c4:	6878      	ldr	r0, [r7, #4]
 80058c6:	f000 f837 	bl	8005938 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058d4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058d8:	d120      	bne.n	800591c <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058e0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058e4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058e8:	d118      	bne.n	800591c <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2204      	movs	r2, #4
 80058ee:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	691b      	ldr	r3, [r3, #16]
 80058f4:	f043 0202 	orr.w	r2, r3, #2
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005904:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	681a      	ldr	r2, [r3, #0]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005914:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005916:	6878      	ldr	r0, [r7, #4]
 8005918:	f000 f986 	bl	8005c28 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 800591c:	bf00      	nop
 800591e:	3708      	adds	r7, #8
 8005920:	46bd      	mov	sp, r7
 8005922:	bd80      	pop	{r7, pc}

08005924 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005924:	b480      	push	{r7}
 8005926:	b083      	sub	sp, #12
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 800592c:	bf00      	nop
 800592e:	370c      	adds	r7, #12
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr

08005938 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005938:	b480      	push	{r7}
 800593a:	b083      	sub	sp, #12
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005940:	bf00      	nop
 8005942:	370c      	adds	r7, #12
 8005944:	46bd      	mov	sp, r7
 8005946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594a:	4770      	bx	lr

0800594c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800594c:	b580      	push	{r7, lr}
 800594e:	b088      	sub	sp, #32
 8005950:	af00      	add	r7, sp, #0
 8005952:	60f8      	str	r0, [r7, #12]
 8005954:	60b9      	str	r1, [r7, #8]
 8005956:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8005958:	2300      	movs	r3, #0
 800595a:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	795b      	ldrb	r3, [r3, #5]
 8005960:	2b01      	cmp	r3, #1
 8005962:	d101      	bne.n	8005968 <HAL_DAC_ConfigChannel+0x1c>
 8005964:	2302      	movs	r3, #2
 8005966:	e107      	b.n	8005b78 <HAL_DAC_ConfigChannel+0x22c>
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2201      	movs	r2, #1
 800596c:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2202      	movs	r2, #2
 8005972:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b04      	cmp	r3, #4
 800597a:	d174      	bne.n	8005a66 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 800597c:	f7fe fb42 	bl	8004004 <HAL_GetTick>
 8005980:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d134      	bne.n	80059f2 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005988:	e011      	b.n	80059ae <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800598a:	f7fe fb3b 	bl	8004004 <HAL_GetTick>
 800598e:	4602      	mov	r2, r0
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	1ad3      	subs	r3, r2, r3
 8005994:	2b01      	cmp	r3, #1
 8005996:	d90a      	bls.n	80059ae <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	691b      	ldr	r3, [r3, #16]
 800599c:	f043 0208 	orr.w	r2, r3, #8
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	2203      	movs	r2, #3
 80059a8:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80059aa:	2303      	movs	r3, #3
 80059ac:	e0e4      	b.n	8005b78 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059b8:	2b00      	cmp	r3, #0
 80059ba:	d1e6      	bne.n	800598a <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80059bc:	2001      	movs	r0, #1
 80059be:	f7fe fb2d 	bl	800401c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	68ba      	ldr	r2, [r7, #8]
 80059c8:	6992      	ldr	r2, [r2, #24]
 80059ca:	641a      	str	r2, [r3, #64]	; 0x40
 80059cc:	e01e      	b.n	8005a0c <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80059ce:	f7fe fb19 	bl	8004004 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	69fb      	ldr	r3, [r7, #28]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b01      	cmp	r3, #1
 80059da:	d90a      	bls.n	80059f2 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	691b      	ldr	r3, [r3, #16]
 80059e0:	f043 0208 	orr.w	r2, r3, #8
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	2203      	movs	r2, #3
 80059ec:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80059ee:	2303      	movs	r3, #3
 80059f0:	e0c2      	b.n	8005b78 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	dbe8      	blt.n	80059ce <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80059fc:	2001      	movs	r0, #1
 80059fe:	f7fe fb0d 	bl	800401c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	6992      	ldr	r2, [r2, #24]
 8005a0a:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f003 0310 	and.w	r3, r3, #16
 8005a18:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005a1c:	fa01 f303 	lsl.w	r3, r1, r3
 8005a20:	43db      	mvns	r3, r3
 8005a22:	ea02 0103 	and.w	r1, r2, r3
 8005a26:	68bb      	ldr	r3, [r7, #8]
 8005a28:	69da      	ldr	r2, [r3, #28]
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	f003 0310 	and.w	r3, r3, #16
 8005a30:	409a      	lsls	r2, r3
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	430a      	orrs	r2, r1
 8005a38:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	f003 0310 	and.w	r3, r3, #16
 8005a46:	21ff      	movs	r1, #255	; 0xff
 8005a48:	fa01 f303 	lsl.w	r3, r1, r3
 8005a4c:	43db      	mvns	r3, r3
 8005a4e:	ea02 0103 	and.w	r1, r2, r3
 8005a52:	68bb      	ldr	r3, [r7, #8]
 8005a54:	6a1a      	ldr	r2, [r3, #32]
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	f003 0310 	and.w	r3, r3, #16
 8005a5c:	409a      	lsls	r2, r3
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	430a      	orrs	r2, r1
 8005a64:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005a66:	68bb      	ldr	r3, [r7, #8]
 8005a68:	691b      	ldr	r3, [r3, #16]
 8005a6a:	2b01      	cmp	r3, #1
 8005a6c:	d11d      	bne.n	8005aaa <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a74:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	f003 0310 	and.w	r3, r3, #16
 8005a7c:	221f      	movs	r2, #31
 8005a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8005a82:	43db      	mvns	r3, r3
 8005a84:	69ba      	ldr	r2, [r7, #24]
 8005a86:	4013      	ands	r3, r2
 8005a88:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005a8a:	68bb      	ldr	r3, [r7, #8]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	f003 0310 	and.w	r3, r3, #16
 8005a96:	697a      	ldr	r2, [r7, #20]
 8005a98:	fa02 f303 	lsl.w	r3, r2, r3
 8005a9c:	69ba      	ldr	r2, [r7, #24]
 8005a9e:	4313      	orrs	r3, r2
 8005aa0:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	69ba      	ldr	r2, [r7, #24]
 8005aa8:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab0:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	f003 0310 	and.w	r3, r3, #16
 8005ab8:	2207      	movs	r2, #7
 8005aba:	fa02 f303 	lsl.w	r3, r2, r3
 8005abe:	43db      	mvns	r3, r3
 8005ac0:	69ba      	ldr	r2, [r7, #24]
 8005ac2:	4013      	ands	r3, r2
 8005ac4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8005ac6:	68bb      	ldr	r3, [r7, #8]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68bb      	ldr	r3, [r7, #8]
 8005acc:	689b      	ldr	r3, [r3, #8]
 8005ace:	431a      	orrs	r2, r3
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	68db      	ldr	r3, [r3, #12]
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	f003 0310 	and.w	r3, r3, #16
 8005ade:	697a      	ldr	r2, [r7, #20]
 8005ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae4:	69ba      	ldr	r2, [r7, #24]
 8005ae6:	4313      	orrs	r3, r2
 8005ae8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	69ba      	ldr	r2, [r7, #24]
 8005af0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	6819      	ldr	r1, [r3, #0]
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	f003 0310 	and.w	r3, r3, #16
 8005afe:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b02:	fa02 f303 	lsl.w	r3, r2, r3
 8005b06:	43da      	mvns	r2, r3
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	400a      	ands	r2, r1
 8005b0e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	f003 0310 	and.w	r3, r3, #16
 8005b1e:	f640 72fc 	movw	r2, #4092	; 0xffc
 8005b22:	fa02 f303 	lsl.w	r3, r2, r3
 8005b26:	43db      	mvns	r3, r3
 8005b28:	69ba      	ldr	r2, [r7, #24]
 8005b2a:	4013      	ands	r3, r2
 8005b2c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005b2e:	68bb      	ldr	r3, [r7, #8]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f003 0310 	and.w	r3, r3, #16
 8005b3a:	697a      	ldr	r2, [r7, #20]
 8005b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b40:	69ba      	ldr	r2, [r7, #24]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	69ba      	ldr	r2, [r7, #24]
 8005b4c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	6819      	ldr	r1, [r3, #0]
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f003 0310 	and.w	r3, r3, #16
 8005b5a:	22c0      	movs	r2, #192	; 0xc0
 8005b5c:	fa02 f303 	lsl.w	r3, r2, r3
 8005b60:	43da      	mvns	r2, r3
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	400a      	ands	r2, r1
 8005b68:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	2201      	movs	r2, #1
 8005b6e:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005b76:	2300      	movs	r3, #0
}
 8005b78:	4618      	mov	r0, r3
 8005b7a:	3720      	adds	r7, #32
 8005b7c:	46bd      	mov	sp, r7
 8005b7e:	bd80      	pop	{r7, pc}

08005b80 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005b80:	b580      	push	{r7, lr}
 8005b82:	b084      	sub	sp, #16
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b8c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8005b8e:	68f8      	ldr	r0, [r7, #12]
 8005b90:	f7fc ffd5 	bl	8002b3e <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2201      	movs	r2, #1
 8005b98:	711a      	strb	r2, [r3, #4]
}
 8005b9a:	bf00      	nop
 8005b9c:	3710      	adds	r7, #16
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}

08005ba2 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8005ba2:	b580      	push	{r7, lr}
 8005ba4:	b084      	sub	sp, #16
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bae:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8005bb0:	68f8      	ldr	r0, [r7, #12]
 8005bb2:	f7fc ffaf 	bl	8002b14 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005bb6:	bf00      	nop
 8005bb8:	3710      	adds	r7, #16
 8005bba:	46bd      	mov	sp, r7
 8005bbc:	bd80      	pop	{r7, pc}

08005bbe <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8005bbe:	b580      	push	{r7, lr}
 8005bc0:	b084      	sub	sp, #16
 8005bc2:	af00      	add	r7, sp, #0
 8005bc4:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005bca:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	691b      	ldr	r3, [r3, #16]
 8005bd0:	f043 0204 	orr.w	r2, r3, #4
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8005bd8:	68f8      	ldr	r0, [r7, #12]
 8005bda:	f7ff fea3 	bl	8005924 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	2201      	movs	r2, #1
 8005be2:	711a      	strb	r2, [r3, #4]
}
 8005be4:	bf00      	nop
 8005be6:	3710      	adds	r7, #16
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr

08005c00 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c00:	b480      	push	{r7}
 8005c02:	b083      	sub	sp, #12
 8005c04:	af00      	add	r7, sp, #0
 8005c06:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8005c08:	bf00      	nop
 8005c0a:	370c      	adds	r7, #12
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c12:	4770      	bx	lr

08005c14 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b083      	sub	sp, #12
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c26:	4770      	bx	lr

08005c28 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005c30:	bf00      	nop
 8005c32:	370c      	adds	r7, #12
 8005c34:	46bd      	mov	sp, r7
 8005c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3a:	4770      	bx	lr

08005c3c <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b084      	sub	sp, #16
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c48:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff ffce 	bl	8005bec <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	2201      	movs	r2, #1
 8005c54:	711a      	strb	r2, [r3, #4]
}
 8005c56:	bf00      	nop
 8005c58:	3710      	adds	r7, #16
 8005c5a:	46bd      	mov	sp, r7
 8005c5c:	bd80      	pop	{r7, pc}

08005c5e <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8005c5e:	b580      	push	{r7, lr}
 8005c60:	b084      	sub	sp, #16
 8005c62:	af00      	add	r7, sp, #0
 8005c64:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c6a:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8005c6c:	68f8      	ldr	r0, [r7, #12]
 8005c6e:	f7ff ffc7 	bl	8005c00 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8005c72:	bf00      	nop
 8005c74:	3710      	adds	r7, #16
 8005c76:	46bd      	mov	sp, r7
 8005c78:	bd80      	pop	{r7, pc}

08005c7a <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8005c7a:	b580      	push	{r7, lr}
 8005c7c:	b084      	sub	sp, #16
 8005c7e:	af00      	add	r7, sp, #0
 8005c80:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c86:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	691b      	ldr	r3, [r3, #16]
 8005c8c:	f043 0204 	orr.w	r2, r3, #4
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8005c94:	68f8      	ldr	r0, [r7, #12]
 8005c96:	f7ff ffbd 	bl	8005c14 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	2201      	movs	r2, #1
 8005c9e:	711a      	strb	r2, [r3, #4]
}
 8005ca0:	bf00      	nop
 8005ca2:	3710      	adds	r7, #16
 8005ca4:	46bd      	mov	sp, r7
 8005ca6:	bd80      	pop	{r7, pc}

08005ca8 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8005ca8:	b480      	push	{r7}
 8005caa:	b085      	sub	sp, #20
 8005cac:	af00      	add	r7, sp, #0
 8005cae:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 8005cb6:	2301      	movs	r3, #1
 8005cb8:	e098      	b.n	8005dec <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	461a      	mov	r2, r3
 8005cc0:	4b4d      	ldr	r3, [pc, #308]	; (8005df8 <HAL_DMA_Init+0x150>)
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d80f      	bhi.n	8005ce6 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	461a      	mov	r2, r3
 8005ccc:	4b4b      	ldr	r3, [pc, #300]	; (8005dfc <HAL_DMA_Init+0x154>)
 8005cce:	4413      	add	r3, r2
 8005cd0:	4a4b      	ldr	r2, [pc, #300]	; (8005e00 <HAL_DMA_Init+0x158>)
 8005cd2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cd6:	091b      	lsrs	r3, r3, #4
 8005cd8:	009a      	lsls	r2, r3, #2
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	4a48      	ldr	r2, [pc, #288]	; (8005e04 <HAL_DMA_Init+0x15c>)
 8005ce2:	641a      	str	r2, [r3, #64]	; 0x40
 8005ce4:	e00e      	b.n	8005d04 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	461a      	mov	r2, r3
 8005cec:	4b46      	ldr	r3, [pc, #280]	; (8005e08 <HAL_DMA_Init+0x160>)
 8005cee:	4413      	add	r3, r2
 8005cf0:	4a43      	ldr	r2, [pc, #268]	; (8005e00 <HAL_DMA_Init+0x158>)
 8005cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf6:	091b      	lsrs	r3, r3, #4
 8005cf8:	009a      	lsls	r2, r3, #2
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	4a42      	ldr	r2, [pc, #264]	; (8005e0c <HAL_DMA_Init+0x164>)
 8005d02:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	2202      	movs	r2, #2
 8005d08:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8005d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d1e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8005d28:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005d34:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	699b      	ldr	r3, [r3, #24]
 8005d3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005d40:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	6a1b      	ldr	r3, [r3, #32]
 8005d46:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8005d48:	68fa      	ldr	r2, [r7, #12]
 8005d4a:	4313      	orrs	r3, r2
 8005d4c:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	68fa      	ldr	r2, [r7, #12]
 8005d54:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	689b      	ldr	r3, [r3, #8]
 8005d5a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005d5e:	d039      	beq.n	8005dd4 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d64:	4a27      	ldr	r2, [pc, #156]	; (8005e04 <HAL_DMA_Init+0x15c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d11a      	bne.n	8005da0 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005d6a:	4b29      	ldr	r3, [pc, #164]	; (8005e10 <HAL_DMA_Init+0x168>)
 8005d6c:	681a      	ldr	r2, [r3, #0]
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d72:	f003 031c 	and.w	r3, r3, #28
 8005d76:	210f      	movs	r1, #15
 8005d78:	fa01 f303 	lsl.w	r3, r1, r3
 8005d7c:	43db      	mvns	r3, r3
 8005d7e:	4924      	ldr	r1, [pc, #144]	; (8005e10 <HAL_DMA_Init+0x168>)
 8005d80:	4013      	ands	r3, r2
 8005d82:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005d84:	4b22      	ldr	r3, [pc, #136]	; (8005e10 <HAL_DMA_Init+0x168>)
 8005d86:	681a      	ldr	r2, [r3, #0]
 8005d88:	687b      	ldr	r3, [r7, #4]
 8005d8a:	6859      	ldr	r1, [r3, #4]
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d90:	f003 031c 	and.w	r3, r3, #28
 8005d94:	fa01 f303 	lsl.w	r3, r1, r3
 8005d98:	491d      	ldr	r1, [pc, #116]	; (8005e10 <HAL_DMA_Init+0x168>)
 8005d9a:	4313      	orrs	r3, r2
 8005d9c:	600b      	str	r3, [r1, #0]
 8005d9e:	e019      	b.n	8005dd4 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8005da0:	4b1c      	ldr	r3, [pc, #112]	; (8005e14 <HAL_DMA_Init+0x16c>)
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005da8:	f003 031c 	and.w	r3, r3, #28
 8005dac:	210f      	movs	r1, #15
 8005dae:	fa01 f303 	lsl.w	r3, r1, r3
 8005db2:	43db      	mvns	r3, r3
 8005db4:	4917      	ldr	r1, [pc, #92]	; (8005e14 <HAL_DMA_Init+0x16c>)
 8005db6:	4013      	ands	r3, r2
 8005db8:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8005dba:	4b16      	ldr	r3, [pc, #88]	; (8005e14 <HAL_DMA_Init+0x16c>)
 8005dbc:	681a      	ldr	r2, [r3, #0]
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6859      	ldr	r1, [r3, #4]
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005dc6:	f003 031c 	and.w	r3, r3, #28
 8005dca:	fa01 f303 	lsl.w	r3, r1, r3
 8005dce:	4911      	ldr	r1, [pc, #68]	; (8005e14 <HAL_DMA_Init+0x16c>)
 8005dd0:	4313      	orrs	r3, r2
 8005dd2:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2200      	movs	r2, #0
 8005dd8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2201      	movs	r2, #1
 8005dde:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	2200      	movs	r2, #0
 8005de6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8005dea:	2300      	movs	r3, #0
}
 8005dec:	4618      	mov	r0, r3
 8005dee:	3714      	adds	r7, #20
 8005df0:	46bd      	mov	sp, r7
 8005df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df6:	4770      	bx	lr
 8005df8:	40020407 	.word	0x40020407
 8005dfc:	bffdfff8 	.word	0xbffdfff8
 8005e00:	cccccccd 	.word	0xcccccccd
 8005e04:	40020000 	.word	0x40020000
 8005e08:	bffdfbf8 	.word	0xbffdfbf8
 8005e0c:	40020400 	.word	0x40020400
 8005e10:	400200a8 	.word	0x400200a8
 8005e14:	400204a8 	.word	0x400204a8

08005e18 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
 8005e24:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e26:	2300      	movs	r3, #0
 8005e28:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005e30:	2b01      	cmp	r3, #1
 8005e32:	d101      	bne.n	8005e38 <HAL_DMA_Start_IT+0x20>
 8005e34:	2302      	movs	r3, #2
 8005e36:	e04b      	b.n	8005ed0 <HAL_DMA_Start_IT+0xb8>
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005e46:	b2db      	uxtb	r3, r3
 8005e48:	2b01      	cmp	r3, #1
 8005e4a:	d13a      	bne.n	8005ec2 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2202      	movs	r2, #2
 8005e50:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	2200      	movs	r2, #0
 8005e58:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	681b      	ldr	r3, [r3, #0]
 8005e5e:	681a      	ldr	r2, [r3, #0]
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f022 0201 	bic.w	r2, r2, #1
 8005e68:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8005e6a:	683b      	ldr	r3, [r7, #0]
 8005e6c:	687a      	ldr	r2, [r7, #4]
 8005e6e:	68b9      	ldr	r1, [r7, #8]
 8005e70:	68f8      	ldr	r0, [r7, #12]
 8005e72:	f000 f92f 	bl	80060d4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d008      	beq.n	8005e90 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005e7e:	68fb      	ldr	r3, [r7, #12]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681a      	ldr	r2, [r3, #0]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f042 020e 	orr.w	r2, r2, #14
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	e00f      	b.n	8005eb0 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f022 0204 	bic.w	r2, r2, #4
 8005e9e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	681a      	ldr	r2, [r3, #0]
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	f042 020a 	orr.w	r2, r2, #10
 8005eae:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	681a      	ldr	r2, [r3, #0]
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	681b      	ldr	r3, [r3, #0]
 8005eba:	f042 0201 	orr.w	r2, r2, #1
 8005ebe:	601a      	str	r2, [r3, #0]
 8005ec0:	e005      	b.n	8005ece <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8005eca:	2302      	movs	r3, #2
 8005ecc:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8005ece:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ed0:	4618      	mov	r0, r3
 8005ed2:	3718      	adds	r7, #24
 8005ed4:	46bd      	mov	sp, r7
 8005ed6:	bd80      	pop	{r7, pc}

08005ed8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ed8:	b580      	push	{r7, lr}
 8005eda:	b084      	sub	sp, #16
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005ee0:	2300      	movs	r3, #0
 8005ee2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005eea:	b2db      	uxtb	r3, r3
 8005eec:	2b02      	cmp	r3, #2
 8005eee:	d005      	beq.n	8005efc <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2204      	movs	r2, #4
 8005ef4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8005ef6:	2301      	movs	r3, #1
 8005ef8:	73fb      	strb	r3, [r7, #15]
 8005efa:	e029      	b.n	8005f50 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	681a      	ldr	r2, [r3, #0]
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	f022 020e 	bic.w	r2, r2, #14
 8005f0a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	681a      	ldr	r2, [r3, #0]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f022 0201 	bic.w	r2, r2, #1
 8005f1a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f20:	f003 021c 	and.w	r2, r3, #28
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f28:	2101      	movs	r1, #1
 8005f2a:	fa01 f202 	lsl.w	r2, r1, r2
 8005f2e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	2201      	movs	r2, #1
 8005f34:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d003      	beq.n	8005f50 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f4c:	6878      	ldr	r0, [r7, #4]
 8005f4e:	4798      	blx	r3
    }
  }
  return status;
 8005f50:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f52:	4618      	mov	r0, r3
 8005f54:	3710      	adds	r7, #16
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}

08005f5a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005f5a:	b580      	push	{r7, lr}
 8005f5c:	b084      	sub	sp, #16
 8005f5e:	af00      	add	r7, sp, #0
 8005f60:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f76:	f003 031c 	and.w	r3, r3, #28
 8005f7a:	2204      	movs	r2, #4
 8005f7c:	409a      	lsls	r2, r3
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	4013      	ands	r3, r2
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d026      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x7a>
 8005f86:	68bb      	ldr	r3, [r7, #8]
 8005f88:	f003 0304 	and.w	r3, r3, #4
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d021      	beq.n	8005fd4 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f003 0320 	and.w	r3, r3, #32
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d107      	bne.n	8005fae <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	681b      	ldr	r3, [r3, #0]
 8005fa2:	681a      	ldr	r2, [r3, #0]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	f022 0204 	bic.w	r2, r2, #4
 8005fac:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fb2:	f003 021c 	and.w	r2, r3, #28
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fba:	2104      	movs	r1, #4
 8005fbc:	fa01 f202 	lsl.w	r2, r1, r2
 8005fc0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d071      	beq.n	80060ae <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005fce:	6878      	ldr	r0, [r7, #4]
 8005fd0:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8005fd2:	e06c      	b.n	80060ae <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005fd8:	f003 031c 	and.w	r3, r3, #28
 8005fdc:	2202      	movs	r2, #2
 8005fde:	409a      	lsls	r2, r3
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	4013      	ands	r3, r2
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d02e      	beq.n	8006046 <HAL_DMA_IRQHandler+0xec>
 8005fe8:	68bb      	ldr	r3, [r7, #8]
 8005fea:	f003 0302 	and.w	r3, r3, #2
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d029      	beq.n	8006046 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d10b      	bne.n	8006018 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	681a      	ldr	r2, [r3, #0]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 020a 	bic.w	r2, r2, #10
 800600e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800601c:	f003 021c 	and.w	r2, r3, #28
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006024:	2102      	movs	r1, #2
 8006026:	fa01 f202 	lsl.w	r2, r1, r2
 800602a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2200      	movs	r2, #0
 8006030:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	2b00      	cmp	r3, #0
 800603a:	d038      	beq.n	80060ae <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006040:	6878      	ldr	r0, [r7, #4]
 8006042:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8006044:	e033      	b.n	80060ae <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800604a:	f003 031c 	and.w	r3, r3, #28
 800604e:	2208      	movs	r2, #8
 8006050:	409a      	lsls	r2, r3
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	4013      	ands	r3, r2
 8006056:	2b00      	cmp	r3, #0
 8006058:	d02a      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x156>
 800605a:	68bb      	ldr	r3, [r7, #8]
 800605c:	f003 0308 	and.w	r3, r3, #8
 8006060:	2b00      	cmp	r3, #0
 8006062:	d025      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	681a      	ldr	r2, [r3, #0]
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f022 020e 	bic.w	r2, r2, #14
 8006072:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006078:	f003 021c 	and.w	r2, r3, #28
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006080:	2101      	movs	r1, #1
 8006082:	fa01 f202 	lsl.w	r2, r1, r2
 8006086:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2201      	movs	r2, #1
 800608c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	2201      	movs	r2, #1
 8006092:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	2200      	movs	r2, #0
 800609a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d004      	beq.n	80060b0 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060aa:	6878      	ldr	r0, [r7, #4]
 80060ac:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80060ae:	bf00      	nop
 80060b0:	bf00      	nop
}
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80060b8:	b480      	push	{r7}
 80060ba:	b083      	sub	sp, #12
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80060c6:	b2db      	uxtb	r3, r3
}
 80060c8:	4618      	mov	r0, r3
 80060ca:	370c      	adds	r7, #12
 80060cc:	46bd      	mov	sp, r7
 80060ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d2:	4770      	bx	lr

080060d4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80060d4:	b480      	push	{r7}
 80060d6:	b085      	sub	sp, #20
 80060d8:	af00      	add	r7, sp, #0
 80060da:	60f8      	str	r0, [r7, #12]
 80060dc:	60b9      	str	r1, [r7, #8]
 80060de:	607a      	str	r2, [r7, #4]
 80060e0:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80060e6:	f003 021c 	and.w	r2, r3, #28
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	2101      	movs	r1, #1
 80060f0:	fa01 f202 	lsl.w	r2, r1, r2
 80060f4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	683a      	ldr	r2, [r7, #0]
 80060fc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80060fe:	68fb      	ldr	r3, [r7, #12]
 8006100:	689b      	ldr	r3, [r3, #8]
 8006102:	2b10      	cmp	r3, #16
 8006104:	d108      	bne.n	8006118 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	687a      	ldr	r2, [r7, #4]
 800610c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	68ba      	ldr	r2, [r7, #8]
 8006114:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8006116:	e007      	b.n	8006128 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8006118:	68fb      	ldr	r3, [r7, #12]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	68ba      	ldr	r2, [r7, #8]
 800611e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	681b      	ldr	r3, [r3, #0]
 8006124:	687a      	ldr	r2, [r7, #4]
 8006126:	60da      	str	r2, [r3, #12]
}
 8006128:	bf00      	nop
 800612a:	3714      	adds	r7, #20
 800612c:	46bd      	mov	sp, r7
 800612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006132:	4770      	bx	lr

08006134 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006134:	b480      	push	{r7}
 8006136:	b087      	sub	sp, #28
 8006138:	af00      	add	r7, sp, #0
 800613a:	6078      	str	r0, [r7, #4]
 800613c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800613e:	2300      	movs	r3, #0
 8006140:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8006142:	e148      	b.n	80063d6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	681a      	ldr	r2, [r3, #0]
 8006148:	2101      	movs	r1, #1
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	fa01 f303 	lsl.w	r3, r1, r3
 8006150:	4013      	ands	r3, r2
 8006152:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 813a 	beq.w	80063d0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f003 0303 	and.w	r3, r3, #3
 8006164:	2b01      	cmp	r3, #1
 8006166:	d005      	beq.n	8006174 <HAL_GPIO_Init+0x40>
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	685b      	ldr	r3, [r3, #4]
 800616c:	f003 0303 	and.w	r3, r3, #3
 8006170:	2b02      	cmp	r3, #2
 8006172:	d130      	bne.n	80061d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800617a:	697b      	ldr	r3, [r7, #20]
 800617c:	005b      	lsls	r3, r3, #1
 800617e:	2203      	movs	r2, #3
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	43db      	mvns	r3, r3
 8006186:	693a      	ldr	r2, [r7, #16]
 8006188:	4013      	ands	r3, r2
 800618a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800618c:	683b      	ldr	r3, [r7, #0]
 800618e:	68da      	ldr	r2, [r3, #12]
 8006190:	697b      	ldr	r3, [r7, #20]
 8006192:	005b      	lsls	r3, r3, #1
 8006194:	fa02 f303 	lsl.w	r3, r2, r3
 8006198:	693a      	ldr	r2, [r7, #16]
 800619a:	4313      	orrs	r3, r2
 800619c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80061aa:	2201      	movs	r2, #1
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	fa02 f303 	lsl.w	r3, r2, r3
 80061b2:	43db      	mvns	r3, r3
 80061b4:	693a      	ldr	r2, [r7, #16]
 80061b6:	4013      	ands	r3, r2
 80061b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80061ba:	683b      	ldr	r3, [r7, #0]
 80061bc:	685b      	ldr	r3, [r3, #4]
 80061be:	091b      	lsrs	r3, r3, #4
 80061c0:	f003 0201 	and.w	r2, r3, #1
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	fa02 f303 	lsl.w	r3, r2, r3
 80061ca:	693a      	ldr	r2, [r7, #16]
 80061cc:	4313      	orrs	r3, r2
 80061ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	693a      	ldr	r2, [r7, #16]
 80061d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	685b      	ldr	r3, [r3, #4]
 80061da:	f003 0303 	and.w	r3, r3, #3
 80061de:	2b03      	cmp	r3, #3
 80061e0:	d017      	beq.n	8006212 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	68db      	ldr	r3, [r3, #12]
 80061e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80061e8:	697b      	ldr	r3, [r7, #20]
 80061ea:	005b      	lsls	r3, r3, #1
 80061ec:	2203      	movs	r2, #3
 80061ee:	fa02 f303 	lsl.w	r3, r2, r3
 80061f2:	43db      	mvns	r3, r3
 80061f4:	693a      	ldr	r2, [r7, #16]
 80061f6:	4013      	ands	r3, r2
 80061f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80061fa:	683b      	ldr	r3, [r7, #0]
 80061fc:	689a      	ldr	r2, [r3, #8]
 80061fe:	697b      	ldr	r3, [r7, #20]
 8006200:	005b      	lsls	r3, r3, #1
 8006202:	fa02 f303 	lsl.w	r3, r2, r3
 8006206:	693a      	ldr	r2, [r7, #16]
 8006208:	4313      	orrs	r3, r2
 800620a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	693a      	ldr	r2, [r7, #16]
 8006210:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006212:	683b      	ldr	r3, [r7, #0]
 8006214:	685b      	ldr	r3, [r3, #4]
 8006216:	f003 0303 	and.w	r3, r3, #3
 800621a:	2b02      	cmp	r3, #2
 800621c:	d123      	bne.n	8006266 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800621e:	697b      	ldr	r3, [r7, #20]
 8006220:	08da      	lsrs	r2, r3, #3
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	3208      	adds	r2, #8
 8006226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800622c:	697b      	ldr	r3, [r7, #20]
 800622e:	f003 0307 	and.w	r3, r3, #7
 8006232:	009b      	lsls	r3, r3, #2
 8006234:	220f      	movs	r2, #15
 8006236:	fa02 f303 	lsl.w	r3, r2, r3
 800623a:	43db      	mvns	r3, r3
 800623c:	693a      	ldr	r2, [r7, #16]
 800623e:	4013      	ands	r3, r2
 8006240:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	691a      	ldr	r2, [r3, #16]
 8006246:	697b      	ldr	r3, [r7, #20]
 8006248:	f003 0307 	and.w	r3, r3, #7
 800624c:	009b      	lsls	r3, r3, #2
 800624e:	fa02 f303 	lsl.w	r3, r2, r3
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	08da      	lsrs	r2, r3, #3
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	3208      	adds	r2, #8
 8006260:	6939      	ldr	r1, [r7, #16]
 8006262:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800626c:	697b      	ldr	r3, [r7, #20]
 800626e:	005b      	lsls	r3, r3, #1
 8006270:	2203      	movs	r2, #3
 8006272:	fa02 f303 	lsl.w	r3, r2, r3
 8006276:	43db      	mvns	r3, r3
 8006278:	693a      	ldr	r2, [r7, #16]
 800627a:	4013      	ands	r3, r2
 800627c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800627e:	683b      	ldr	r3, [r7, #0]
 8006280:	685b      	ldr	r3, [r3, #4]
 8006282:	f003 0203 	and.w	r2, r3, #3
 8006286:	697b      	ldr	r3, [r7, #20]
 8006288:	005b      	lsls	r3, r3, #1
 800628a:	fa02 f303 	lsl.w	r3, r2, r3
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	693a      	ldr	r2, [r7, #16]
 8006298:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	685b      	ldr	r3, [r3, #4]
 800629e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	f000 8094 	beq.w	80063d0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80062a8:	4b52      	ldr	r3, [pc, #328]	; (80063f4 <HAL_GPIO_Init+0x2c0>)
 80062aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062ac:	4a51      	ldr	r2, [pc, #324]	; (80063f4 <HAL_GPIO_Init+0x2c0>)
 80062ae:	f043 0301 	orr.w	r3, r3, #1
 80062b2:	6613      	str	r3, [r2, #96]	; 0x60
 80062b4:	4b4f      	ldr	r3, [pc, #316]	; (80063f4 <HAL_GPIO_Init+0x2c0>)
 80062b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80062b8:	f003 0301 	and.w	r3, r3, #1
 80062bc:	60bb      	str	r3, [r7, #8]
 80062be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80062c0:	4a4d      	ldr	r2, [pc, #308]	; (80063f8 <HAL_GPIO_Init+0x2c4>)
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	089b      	lsrs	r3, r3, #2
 80062c6:	3302      	adds	r3, #2
 80062c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80062cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80062ce:	697b      	ldr	r3, [r7, #20]
 80062d0:	f003 0303 	and.w	r3, r3, #3
 80062d4:	009b      	lsls	r3, r3, #2
 80062d6:	220f      	movs	r2, #15
 80062d8:	fa02 f303 	lsl.w	r3, r2, r3
 80062dc:	43db      	mvns	r3, r3
 80062de:	693a      	ldr	r2, [r7, #16]
 80062e0:	4013      	ands	r3, r2
 80062e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80062ea:	d00d      	beq.n	8006308 <HAL_GPIO_Init+0x1d4>
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	4a43      	ldr	r2, [pc, #268]	; (80063fc <HAL_GPIO_Init+0x2c8>)
 80062f0:	4293      	cmp	r3, r2
 80062f2:	d007      	beq.n	8006304 <HAL_GPIO_Init+0x1d0>
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	4a42      	ldr	r2, [pc, #264]	; (8006400 <HAL_GPIO_Init+0x2cc>)
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d101      	bne.n	8006300 <HAL_GPIO_Init+0x1cc>
 80062fc:	2302      	movs	r3, #2
 80062fe:	e004      	b.n	800630a <HAL_GPIO_Init+0x1d6>
 8006300:	2307      	movs	r3, #7
 8006302:	e002      	b.n	800630a <HAL_GPIO_Init+0x1d6>
 8006304:	2301      	movs	r3, #1
 8006306:	e000      	b.n	800630a <HAL_GPIO_Init+0x1d6>
 8006308:	2300      	movs	r3, #0
 800630a:	697a      	ldr	r2, [r7, #20]
 800630c:	f002 0203 	and.w	r2, r2, #3
 8006310:	0092      	lsls	r2, r2, #2
 8006312:	4093      	lsls	r3, r2
 8006314:	693a      	ldr	r2, [r7, #16]
 8006316:	4313      	orrs	r3, r2
 8006318:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800631a:	4937      	ldr	r1, [pc, #220]	; (80063f8 <HAL_GPIO_Init+0x2c4>)
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	089b      	lsrs	r3, r3, #2
 8006320:	3302      	adds	r3, #2
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006328:	4b36      	ldr	r3, [pc, #216]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 800632a:	689b      	ldr	r3, [r3, #8]
 800632c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	43db      	mvns	r3, r3
 8006332:	693a      	ldr	r2, [r7, #16]
 8006334:	4013      	ands	r3, r2
 8006336:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006338:	683b      	ldr	r3, [r7, #0]
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006340:	2b00      	cmp	r3, #0
 8006342:	d003      	beq.n	800634c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	4313      	orrs	r3, r2
 800634a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800634c:	4a2d      	ldr	r2, [pc, #180]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8006352:	4b2c      	ldr	r3, [pc, #176]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	43db      	mvns	r3, r3
 800635c:	693a      	ldr	r2, [r7, #16]
 800635e:	4013      	ands	r3, r2
 8006360:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006362:	683b      	ldr	r3, [r7, #0]
 8006364:	685b      	ldr	r3, [r3, #4]
 8006366:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800636e:	693a      	ldr	r2, [r7, #16]
 8006370:	68fb      	ldr	r3, [r7, #12]
 8006372:	4313      	orrs	r3, r2
 8006374:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8006376:	4a23      	ldr	r2, [pc, #140]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 8006378:	693b      	ldr	r3, [r7, #16]
 800637a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800637c:	4b21      	ldr	r3, [pc, #132]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 800637e:	685b      	ldr	r3, [r3, #4]
 8006380:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006382:	68fb      	ldr	r3, [r7, #12]
 8006384:	43db      	mvns	r3, r3
 8006386:	693a      	ldr	r2, [r7, #16]
 8006388:	4013      	ands	r3, r2
 800638a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800638c:	683b      	ldr	r3, [r7, #0]
 800638e:	685b      	ldr	r3, [r3, #4]
 8006390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006394:	2b00      	cmp	r3, #0
 8006396:	d003      	beq.n	80063a0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006398:	693a      	ldr	r2, [r7, #16]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	4313      	orrs	r3, r2
 800639e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80063a0:	4a18      	ldr	r2, [pc, #96]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 80063a2:	693b      	ldr	r3, [r7, #16]
 80063a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80063a6:	4b17      	ldr	r3, [pc, #92]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	43db      	mvns	r3, r3
 80063b0:	693a      	ldr	r2, [r7, #16]
 80063b2:	4013      	ands	r3, r2
 80063b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d003      	beq.n	80063ca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80063c2:	693a      	ldr	r2, [r7, #16]
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	4313      	orrs	r3, r2
 80063c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80063ca:	4a0e      	ldr	r2, [pc, #56]	; (8006404 <HAL_GPIO_Init+0x2d0>)
 80063cc:	693b      	ldr	r3, [r7, #16]
 80063ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	3301      	adds	r3, #1
 80063d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80063d6:	683b      	ldr	r3, [r7, #0]
 80063d8:	681a      	ldr	r2, [r3, #0]
 80063da:	697b      	ldr	r3, [r7, #20]
 80063dc:	fa22 f303 	lsr.w	r3, r2, r3
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	f47f aeaf 	bne.w	8006144 <HAL_GPIO_Init+0x10>
  }
}
 80063e6:	bf00      	nop
 80063e8:	bf00      	nop
 80063ea:	371c      	adds	r7, #28
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	40021000 	.word	0x40021000
 80063f8:	40010000 	.word	0x40010000
 80063fc:	48000400 	.word	0x48000400
 8006400:	48000800 	.word	0x48000800
 8006404:	40010400 	.word	0x40010400

08006408 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006408:	b480      	push	{r7}
 800640a:	b085      	sub	sp, #20
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
 8006410:	460b      	mov	r3, r1
 8006412:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	691a      	ldr	r2, [r3, #16]
 8006418:	887b      	ldrh	r3, [r7, #2]
 800641a:	4013      	ands	r3, r2
 800641c:	2b00      	cmp	r3, #0
 800641e:	d002      	beq.n	8006426 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006420:	2301      	movs	r3, #1
 8006422:	73fb      	strb	r3, [r7, #15]
 8006424:	e001      	b.n	800642a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006426:	2300      	movs	r3, #0
 8006428:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800642a:	7bfb      	ldrb	r3, [r7, #15]
}
 800642c:	4618      	mov	r0, r3
 800642e:	3714      	adds	r7, #20
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
 8006440:	460b      	mov	r3, r1
 8006442:	807b      	strh	r3, [r7, #2]
 8006444:	4613      	mov	r3, r2
 8006446:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006448:	787b      	ldrb	r3, [r7, #1]
 800644a:	2b00      	cmp	r3, #0
 800644c:	d003      	beq.n	8006456 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800644e:	887a      	ldrh	r2, [r7, #2]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8006454:	e002      	b.n	800645c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8006456:	887a      	ldrh	r2, [r7, #2]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800645c:	bf00      	nop
 800645e:	370c      	adds	r7, #12
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006468:	b580      	push	{r7, lr}
 800646a:	b082      	sub	sp, #8
 800646c:	af00      	add	r7, sp, #0
 800646e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d101      	bne.n	800647a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006476:	2301      	movs	r3, #1
 8006478:	e081      	b.n	800657e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006480:	b2db      	uxtb	r3, r3
 8006482:	2b00      	cmp	r3, #0
 8006484:	d106      	bne.n	8006494 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	2200      	movs	r2, #0
 800648a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f7fd fb64 	bl	8003b5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2224      	movs	r2, #36	; 0x24
 8006498:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	681a      	ldr	r2, [r3, #0]
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	681b      	ldr	r3, [r3, #0]
 80064a6:	f022 0201 	bic.w	r2, r2, #1
 80064aa:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	685a      	ldr	r2, [r3, #4]
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064b8:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064c8:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	68db      	ldr	r3, [r3, #12]
 80064ce:	2b01      	cmp	r3, #1
 80064d0:	d107      	bne.n	80064e2 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064de:	609a      	str	r2, [r3, #8]
 80064e0:	e006      	b.n	80064f0 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	689a      	ldr	r2, [r3, #8]
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80064ee:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	68db      	ldr	r3, [r3, #12]
 80064f4:	2b02      	cmp	r3, #2
 80064f6:	d104      	bne.n	8006502 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006500:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	685b      	ldr	r3, [r3, #4]
 8006508:	687a      	ldr	r2, [r7, #4]
 800650a:	6812      	ldr	r2, [r2, #0]
 800650c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006510:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006514:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	68da      	ldr	r2, [r3, #12]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006524:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	691a      	ldr	r2, [r3, #16]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	699b      	ldr	r3, [r3, #24]
 8006536:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	69d9      	ldr	r1, [r3, #28]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	6a1a      	ldr	r2, [r3, #32]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	2200      	movs	r2, #0
 8006564:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	2220      	movs	r2, #32
 800656a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	2200      	movs	r2, #0
 8006572:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800657c:	2300      	movs	r3, #0
}
 800657e:	4618      	mov	r0, r3
 8006580:	3708      	adds	r7, #8
 8006582:	46bd      	mov	sp, r7
 8006584:	bd80      	pop	{r7, pc}
	...

08006588 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b088      	sub	sp, #32
 800658c:	af02      	add	r7, sp, #8
 800658e:	60f8      	str	r0, [r7, #12]
 8006590:	607a      	str	r2, [r7, #4]
 8006592:	461a      	mov	r2, r3
 8006594:	460b      	mov	r3, r1
 8006596:	817b      	strh	r3, [r7, #10]
 8006598:	4613      	mov	r3, r2
 800659a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800659c:	68fb      	ldr	r3, [r7, #12]
 800659e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065a2:	b2db      	uxtb	r3, r3
 80065a4:	2b20      	cmp	r3, #32
 80065a6:	f040 80da 	bne.w	800675e <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065b0:	2b01      	cmp	r3, #1
 80065b2:	d101      	bne.n	80065b8 <HAL_I2C_Master_Transmit+0x30>
 80065b4:	2302      	movs	r3, #2
 80065b6:	e0d3      	b.n	8006760 <HAL_I2C_Master_Transmit+0x1d8>
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	2201      	movs	r2, #1
 80065bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80065c0:	f7fd fd20 	bl	8004004 <HAL_GetTick>
 80065c4:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	9300      	str	r3, [sp, #0]
 80065ca:	2319      	movs	r3, #25
 80065cc:	2201      	movs	r2, #1
 80065ce:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80065d2:	68f8      	ldr	r0, [r7, #12]
 80065d4:	f000 fe05 	bl	80071e2 <I2C_WaitOnFlagUntilTimeout>
 80065d8:	4603      	mov	r3, r0
 80065da:	2b00      	cmp	r3, #0
 80065dc:	d001      	beq.n	80065e2 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80065de:	2301      	movs	r3, #1
 80065e0:	e0be      	b.n	8006760 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	2221      	movs	r2, #33	; 0x21
 80065e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2210      	movs	r2, #16
 80065ee:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	2200      	movs	r2, #0
 80065f6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	687a      	ldr	r2, [r7, #4]
 80065fc:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	893a      	ldrh	r2, [r7, #8]
 8006602:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	2200      	movs	r2, #0
 8006608:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800660a:	68fb      	ldr	r3, [r7, #12]
 800660c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800660e:	b29b      	uxth	r3, r3
 8006610:	2bff      	cmp	r3, #255	; 0xff
 8006612:	d90e      	bls.n	8006632 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	22ff      	movs	r2, #255	; 0xff
 8006618:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800661e:	b2da      	uxtb	r2, r3
 8006620:	8979      	ldrh	r1, [r7, #10]
 8006622:	4b51      	ldr	r3, [pc, #324]	; (8006768 <HAL_I2C_Master_Transmit+0x1e0>)
 8006624:	9300      	str	r3, [sp, #0]
 8006626:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800662a:	68f8      	ldr	r0, [r7, #12]
 800662c:	f000 ff82 	bl	8007534 <I2C_TransferConfig>
 8006630:	e06c      	b.n	800670c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006636:	b29a      	uxth	r2, r3
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006640:	b2da      	uxtb	r2, r3
 8006642:	8979      	ldrh	r1, [r7, #10]
 8006644:	4b48      	ldr	r3, [pc, #288]	; (8006768 <HAL_I2C_Master_Transmit+0x1e0>)
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 ff71 	bl	8007534 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8006652:	e05b      	b.n	800670c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006654:	697a      	ldr	r2, [r7, #20]
 8006656:	6a39      	ldr	r1, [r7, #32]
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f000 fe02 	bl	8007262 <I2C_WaitOnTXISFlagUntilTimeout>
 800665e:	4603      	mov	r3, r0
 8006660:	2b00      	cmp	r3, #0
 8006662:	d001      	beq.n	8006668 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	e07b      	b.n	8006760 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800666c:	781a      	ldrb	r2, [r3, #0]
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006678:	1c5a      	adds	r2, r3, #1
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800667e:	68fb      	ldr	r3, [r7, #12]
 8006680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006682:	b29b      	uxth	r3, r3
 8006684:	3b01      	subs	r3, #1
 8006686:	b29a      	uxth	r2, r3
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006690:	3b01      	subs	r3, #1
 8006692:	b29a      	uxth	r2, r3
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800669c:	b29b      	uxth	r3, r3
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d034      	beq.n	800670c <HAL_I2C_Master_Transmit+0x184>
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066a6:	2b00      	cmp	r3, #0
 80066a8:	d130      	bne.n	800670c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	9300      	str	r3, [sp, #0]
 80066ae:	6a3b      	ldr	r3, [r7, #32]
 80066b0:	2200      	movs	r2, #0
 80066b2:	2180      	movs	r1, #128	; 0x80
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 fd94 	bl	80071e2 <I2C_WaitOnFlagUntilTimeout>
 80066ba:	4603      	mov	r3, r0
 80066bc:	2b00      	cmp	r3, #0
 80066be:	d001      	beq.n	80066c4 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80066c0:	2301      	movs	r3, #1
 80066c2:	e04d      	b.n	8006760 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	2bff      	cmp	r3, #255	; 0xff
 80066cc:	d90e      	bls.n	80066ec <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	22ff      	movs	r2, #255	; 0xff
 80066d2:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066d8:	b2da      	uxtb	r2, r3
 80066da:	8979      	ldrh	r1, [r7, #10]
 80066dc:	2300      	movs	r3, #0
 80066de:	9300      	str	r3, [sp, #0]
 80066e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 ff25 	bl	8007534 <I2C_TransferConfig>
 80066ea:	e00f      	b.n	800670c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066f0:	b29a      	uxth	r2, r3
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80066fa:	b2da      	uxtb	r2, r3
 80066fc:	8979      	ldrh	r1, [r7, #10]
 80066fe:	2300      	movs	r3, #0
 8006700:	9300      	str	r3, [sp, #0]
 8006702:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006706:	68f8      	ldr	r0, [r7, #12]
 8006708:	f000 ff14 	bl	8007534 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006710:	b29b      	uxth	r3, r3
 8006712:	2b00      	cmp	r3, #0
 8006714:	d19e      	bne.n	8006654 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006716:	697a      	ldr	r2, [r7, #20]
 8006718:	6a39      	ldr	r1, [r7, #32]
 800671a:	68f8      	ldr	r0, [r7, #12]
 800671c:	f000 fde1 	bl	80072e2 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006720:	4603      	mov	r3, r0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d001      	beq.n	800672a <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8006726:	2301      	movs	r3, #1
 8006728:	e01a      	b.n	8006760 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	2220      	movs	r2, #32
 8006730:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6859      	ldr	r1, [r3, #4]
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	4b0b      	ldr	r3, [pc, #44]	; (800676c <HAL_I2C_Master_Transmit+0x1e4>)
 800673e:	400b      	ands	r3, r1
 8006740:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2220      	movs	r2, #32
 8006746:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	2200      	movs	r2, #0
 800674e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2200      	movs	r2, #0
 8006756:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800675a:	2300      	movs	r3, #0
 800675c:	e000      	b.n	8006760 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800675e:	2302      	movs	r3, #2
  }
}
 8006760:	4618      	mov	r0, r3
 8006762:	3718      	adds	r7, #24
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	80002000 	.word	0x80002000
 800676c:	fe00e800 	.word	0xfe00e800

08006770 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006770:	b580      	push	{r7, lr}
 8006772:	b084      	sub	sp, #16
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699b      	ldr	r3, [r3, #24]
 800677e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	681b      	ldr	r3, [r3, #0]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800678c:	2b00      	cmp	r3, #0
 800678e:	d005      	beq.n	800679c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006794:	68ba      	ldr	r2, [r7, #8]
 8006796:	68f9      	ldr	r1, [r7, #12]
 8006798:	6878      	ldr	r0, [r7, #4]
 800679a:	4798      	blx	r3
  }
}
 800679c:	bf00      	nop
 800679e:	3710      	adds	r7, #16
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd80      	pop	{r7, pc}

080067a4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b086      	sub	sp, #24
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80067ac:	687b      	ldr	r3, [r7, #4]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	699b      	ldr	r3, [r3, #24]
 80067b2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80067bc:	697b      	ldr	r3, [r7, #20]
 80067be:	0a1b      	lsrs	r3, r3, #8
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d010      	beq.n	80067ea <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80067c8:	693b      	ldr	r3, [r7, #16]
 80067ca:	09db      	lsrs	r3, r3, #7
 80067cc:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d00a      	beq.n	80067ea <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067d8:	f043 0201 	orr.w	r2, r3, #1
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80067e8:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80067ea:	697b      	ldr	r3, [r7, #20]
 80067ec:	0a9b      	lsrs	r3, r3, #10
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d010      	beq.n	8006818 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80067f6:	693b      	ldr	r3, [r7, #16]
 80067f8:	09db      	lsrs	r3, r3, #7
 80067fa:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d00a      	beq.n	8006818 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006806:	f043 0208 	orr.w	r2, r3, #8
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006816:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006818:	697b      	ldr	r3, [r7, #20]
 800681a:	0a5b      	lsrs	r3, r3, #9
 800681c:	f003 0301 	and.w	r3, r3, #1
 8006820:	2b00      	cmp	r3, #0
 8006822:	d010      	beq.n	8006846 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006824:	693b      	ldr	r3, [r7, #16]
 8006826:	09db      	lsrs	r3, r3, #7
 8006828:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800682c:	2b00      	cmp	r3, #0
 800682e:	d00a      	beq.n	8006846 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006834:	f043 0202 	orr.w	r2, r3, #2
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006844:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800684a:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	f003 030b 	and.w	r3, r3, #11
 8006852:	2b00      	cmp	r3, #0
 8006854:	d003      	beq.n	800685e <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8006856:	68f9      	ldr	r1, [r7, #12]
 8006858:	6878      	ldr	r0, [r7, #4]
 800685a:	f000 fb89 	bl	8006f70 <I2C_ITError>
  }
}
 800685e:	bf00      	nop
 8006860:	3718      	adds	r7, #24
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006866:	b480      	push	{r7}
 8006868:	b083      	sub	sp, #12
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800686e:	bf00      	nop
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006882:	bf00      	nop
 8006884:	370c      	adds	r7, #12
 8006886:	46bd      	mov	sp, r7
 8006888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688c:	4770      	bx	lr

0800688e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800688e:	b480      	push	{r7}
 8006890:	b083      	sub	sp, #12
 8006892:	af00      	add	r7, sp, #0
 8006894:	6078      	str	r0, [r7, #4]
 8006896:	460b      	mov	r3, r1
 8006898:	70fb      	strb	r3, [r7, #3]
 800689a:	4613      	mov	r3, r2
 800689c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800689e:	bf00      	nop
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr

080068aa <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068aa:	b480      	push	{r7}
 80068ac:	b083      	sub	sp, #12
 80068ae:	af00      	add	r7, sp, #0
 80068b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr

080068be <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80068be:	b480      	push	{r7}
 80068c0:	b083      	sub	sp, #12
 80068c2:	af00      	add	r7, sp, #0
 80068c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80068c6:	bf00      	nop
 80068c8:	370c      	adds	r7, #12
 80068ca:	46bd      	mov	sp, r7
 80068cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068d0:	4770      	bx	lr

080068d2 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80068d2:	b480      	push	{r7}
 80068d4:	b083      	sub	sp, #12
 80068d6:	af00      	add	r7, sp, #0
 80068d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 80068da:	bf00      	nop
 80068dc:	370c      	adds	r7, #12
 80068de:	46bd      	mov	sp, r7
 80068e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068e4:	4770      	bx	lr

080068e6 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80068e6:	b580      	push	{r7, lr}
 80068e8:	b086      	sub	sp, #24
 80068ea:	af00      	add	r7, sp, #0
 80068ec:	60f8      	str	r0, [r7, #12]
 80068ee:	60b9      	str	r1, [r7, #8]
 80068f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80068f2:	68fb      	ldr	r3, [r7, #12]
 80068f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068f6:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80068f8:	68bb      	ldr	r3, [r7, #8]
 80068fa:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006902:	2b01      	cmp	r3, #1
 8006904:	d101      	bne.n	800690a <I2C_Slave_ISR_IT+0x24>
 8006906:	2302      	movs	r3, #2
 8006908:	e0ec      	b.n	8006ae4 <I2C_Slave_ISR_IT+0x1fe>
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	2201      	movs	r2, #1
 800690e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006912:	693b      	ldr	r3, [r7, #16]
 8006914:	095b      	lsrs	r3, r3, #5
 8006916:	f003 0301 	and.w	r3, r3, #1
 800691a:	2b00      	cmp	r3, #0
 800691c:	d009      	beq.n	8006932 <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	095b      	lsrs	r3, r3, #5
 8006922:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006926:	2b00      	cmp	r3, #0
 8006928:	d003      	beq.n	8006932 <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800692a:	6939      	ldr	r1, [r7, #16]
 800692c:	68f8      	ldr	r0, [r7, #12]
 800692e:	f000 f9bf 	bl	8006cb0 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	091b      	lsrs	r3, r3, #4
 8006936:	f003 0301 	and.w	r3, r3, #1
 800693a:	2b00      	cmp	r3, #0
 800693c:	d04d      	beq.n	80069da <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	091b      	lsrs	r3, r3, #4
 8006942:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006946:	2b00      	cmp	r3, #0
 8006948:	d047      	beq.n	80069da <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800694e:	b29b      	uxth	r3, r3
 8006950:	2b00      	cmp	r3, #0
 8006952:	d128      	bne.n	80069a6 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800695a:	b2db      	uxtb	r3, r3
 800695c:	2b28      	cmp	r3, #40	; 0x28
 800695e:	d108      	bne.n	8006972 <I2C_Slave_ISR_IT+0x8c>
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006966:	d104      	bne.n	8006972 <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006968:	6939      	ldr	r1, [r7, #16]
 800696a:	68f8      	ldr	r0, [r7, #12]
 800696c:	f000 faaa 	bl	8006ec4 <I2C_ITListenCplt>
 8006970:	e032      	b.n	80069d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006978:	b2db      	uxtb	r3, r3
 800697a:	2b29      	cmp	r3, #41	; 0x29
 800697c:	d10e      	bne.n	800699c <I2C_Slave_ISR_IT+0xb6>
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006984:	d00a      	beq.n	800699c <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2210      	movs	r2, #16
 800698c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800698e:	68f8      	ldr	r0, [r7, #12]
 8006990:	f000 fbe5 	bl	800715e <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006994:	68f8      	ldr	r0, [r7, #12]
 8006996:	f000 f92d 	bl	8006bf4 <I2C_ITSlaveSeqCplt>
 800699a:	e01d      	b.n	80069d8 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	2210      	movs	r2, #16
 80069a2:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 80069a4:	e096      	b.n	8006ad4 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80069a6:	68fb      	ldr	r3, [r7, #12]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	2210      	movs	r2, #16
 80069ac:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80069ae:	68fb      	ldr	r3, [r7, #12]
 80069b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069b2:	f043 0204 	orr.w	r2, r3, #4
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d004      	beq.n	80069ca <I2C_Slave_ISR_IT+0xe4>
 80069c0:	697b      	ldr	r3, [r7, #20]
 80069c2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80069c6:	f040 8085 	bne.w	8006ad4 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069ce:	4619      	mov	r1, r3
 80069d0:	68f8      	ldr	r0, [r7, #12]
 80069d2:	f000 facd 	bl	8006f70 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80069d6:	e07d      	b.n	8006ad4 <I2C_Slave_ISR_IT+0x1ee>
 80069d8:	e07c      	b.n	8006ad4 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	089b      	lsrs	r3, r3, #2
 80069de:	f003 0301 	and.w	r3, r3, #1
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d030      	beq.n	8006a48 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	089b      	lsrs	r3, r3, #2
 80069ea:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d02a      	beq.n	8006a48 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 80069f2:	68fb      	ldr	r3, [r7, #12]
 80069f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80069f6:	b29b      	uxth	r3, r3
 80069f8:	2b00      	cmp	r3, #0
 80069fa:	d018      	beq.n	8006a2e <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006a02:	68fb      	ldr	r3, [r7, #12]
 8006a04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a06:	b2d2      	uxtb	r2, r2
 8006a08:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a0e:	1c5a      	adds	r2, r3, #1
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a18:	3b01      	subs	r3, #1
 8006a1a:	b29a      	uxth	r2, r3
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a24:	b29b      	uxth	r3, r3
 8006a26:	3b01      	subs	r3, #1
 8006a28:	b29a      	uxth	r2, r3
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d14f      	bne.n	8006ad8 <I2C_Slave_ISR_IT+0x1f2>
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006a3e:	d04b      	beq.n	8006ad8 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006a40:	68f8      	ldr	r0, [r7, #12]
 8006a42:	f000 f8d7 	bl	8006bf4 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006a46:	e047      	b.n	8006ad8 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006a48:	693b      	ldr	r3, [r7, #16]
 8006a4a:	08db      	lsrs	r3, r3, #3
 8006a4c:	f003 0301 	and.w	r3, r3, #1
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d00a      	beq.n	8006a6a <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	08db      	lsrs	r3, r3, #3
 8006a58:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d004      	beq.n	8006a6a <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006a60:	6939      	ldr	r1, [r7, #16]
 8006a62:	68f8      	ldr	r0, [r7, #12]
 8006a64:	f000 f842 	bl	8006aec <I2C_ITAddrCplt>
 8006a68:	e037      	b.n	8006ada <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	085b      	lsrs	r3, r3, #1
 8006a6e:	f003 0301 	and.w	r3, r3, #1
 8006a72:	2b00      	cmp	r3, #0
 8006a74:	d031      	beq.n	8006ada <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	085b      	lsrs	r3, r3, #1
 8006a7a:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d02b      	beq.n	8006ada <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a86:	b29b      	uxth	r3, r3
 8006a88:	2b00      	cmp	r3, #0
 8006a8a:	d018      	beq.n	8006abe <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a90:	781a      	ldrb	r2, [r3, #0]
 8006a92:	68fb      	ldr	r3, [r7, #12]
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a98:	68fb      	ldr	r3, [r7, #12]
 8006a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a9c:	1c5a      	adds	r2, r3, #1
 8006a9e:	68fb      	ldr	r3, [r7, #12]
 8006aa0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aa6:	b29b      	uxth	r3, r3
 8006aa8:	3b01      	subs	r3, #1
 8006aaa:	b29a      	uxth	r2, r3
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006ab4:	3b01      	subs	r3, #1
 8006ab6:	b29a      	uxth	r2, r3
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	851a      	strh	r2, [r3, #40]	; 0x28
 8006abc:	e00d      	b.n	8006ada <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ac4:	d002      	beq.n	8006acc <I2C_Slave_ISR_IT+0x1e6>
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d106      	bne.n	8006ada <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006acc:	68f8      	ldr	r0, [r7, #12]
 8006ace:	f000 f891 	bl	8006bf4 <I2C_ITSlaveSeqCplt>
 8006ad2:	e002      	b.n	8006ada <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8006ad4:	bf00      	nop
 8006ad6:	e000      	b.n	8006ada <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8006ad8:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	2200      	movs	r2, #0
 8006ade:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006ae2:	2300      	movs	r3, #0
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	3718      	adds	r7, #24
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}

08006aec <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006aec:	b580      	push	{r7, lr}
 8006aee:	b084      	sub	sp, #16
 8006af0:	af00      	add	r7, sp, #0
 8006af2:	6078      	str	r0, [r7, #4]
 8006af4:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006afc:	b2db      	uxtb	r3, r3
 8006afe:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006b02:	2b28      	cmp	r3, #40	; 0x28
 8006b04:	d16a      	bne.n	8006bdc <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	699b      	ldr	r3, [r3, #24]
 8006b0c:	0c1b      	lsrs	r3, r3, #16
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f003 0301 	and.w	r3, r3, #1
 8006b14:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	699b      	ldr	r3, [r3, #24]
 8006b1c:	0c1b      	lsrs	r3, r3, #16
 8006b1e:	b29b      	uxth	r3, r3
 8006b20:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006b24:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	689b      	ldr	r3, [r3, #8]
 8006b2c:	b29b      	uxth	r3, r3
 8006b2e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006b32:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	68db      	ldr	r3, [r3, #12]
 8006b3a:	b29b      	uxth	r3, r3
 8006b3c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8006b40:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	68db      	ldr	r3, [r3, #12]
 8006b46:	2b02      	cmp	r3, #2
 8006b48:	d138      	bne.n	8006bbc <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8006b4a:	897b      	ldrh	r3, [r7, #10]
 8006b4c:	09db      	lsrs	r3, r3, #7
 8006b4e:	b29a      	uxth	r2, r3
 8006b50:	89bb      	ldrh	r3, [r7, #12]
 8006b52:	4053      	eors	r3, r2
 8006b54:	b29b      	uxth	r3, r3
 8006b56:	f003 0306 	and.w	r3, r3, #6
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d11c      	bne.n	8006b98 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8006b5e:	897b      	ldrh	r3, [r7, #10]
 8006b60:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b66:	1c5a      	adds	r2, r3, #1
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006b70:	2b02      	cmp	r3, #2
 8006b72:	d13b      	bne.n	8006bec <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2200      	movs	r2, #0
 8006b78:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	2208      	movs	r2, #8
 8006b80:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006b8a:	89ba      	ldrh	r2, [r7, #12]
 8006b8c:	7bfb      	ldrb	r3, [r7, #15]
 8006b8e:	4619      	mov	r1, r3
 8006b90:	6878      	ldr	r0, [r7, #4]
 8006b92:	f7ff fe7c 	bl	800688e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006b96:	e029      	b.n	8006bec <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8006b98:	893b      	ldrh	r3, [r7, #8]
 8006b9a:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006b9c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fcf9 	bl	8007598 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2200      	movs	r2, #0
 8006baa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006bae:	89ba      	ldrh	r2, [r7, #12]
 8006bb0:	7bfb      	ldrb	r3, [r7, #15]
 8006bb2:	4619      	mov	r1, r3
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f7ff fe6a 	bl	800688e <HAL_I2C_AddrCallback>
}
 8006bba:	e017      	b.n	8006bec <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8006bbc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fce9 	bl	8007598 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2200      	movs	r2, #0
 8006bca:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8006bce:	89ba      	ldrh	r2, [r7, #12]
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	4619      	mov	r1, r3
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f7ff fe5a 	bl	800688e <HAL_I2C_AddrCallback>
}
 8006bda:	e007      	b.n	8006bec <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2208      	movs	r2, #8
 8006be2:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2200      	movs	r2, #0
 8006be8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8006bec:	bf00      	nop
 8006bee:	3710      	adds	r7, #16
 8006bf0:	46bd      	mov	sp, r7
 8006bf2:	bd80      	pop	{r7, pc}

08006bf4 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8006bf4:	b580      	push	{r7, lr}
 8006bf6:	b084      	sub	sp, #16
 8006bf8:	af00      	add	r7, sp, #0
 8006bfa:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2200      	movs	r2, #0
 8006c08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	0b9b      	lsrs	r3, r3, #14
 8006c10:	f003 0301 	and.w	r3, r3, #1
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d008      	beq.n	8006c2a <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	681a      	ldr	r2, [r3, #0]
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006c26:	601a      	str	r2, [r3, #0]
 8006c28:	e00d      	b.n	8006c46 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	0bdb      	lsrs	r3, r3, #15
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d007      	beq.n	8006c46 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	681a      	ldr	r2, [r3, #0]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006c44:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c4c:	b2db      	uxtb	r3, r3
 8006c4e:	2b29      	cmp	r3, #41	; 0x29
 8006c50:	d112      	bne.n	8006c78 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	2228      	movs	r2, #40	; 0x28
 8006c56:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2221      	movs	r2, #33	; 0x21
 8006c5e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8006c60:	2101      	movs	r1, #1
 8006c62:	6878      	ldr	r0, [r7, #4]
 8006c64:	f000 fc98 	bl	8007598 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	2200      	movs	r2, #0
 8006c6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006c70:	6878      	ldr	r0, [r7, #4]
 8006c72:	f7ff fdf8 	bl	8006866 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8006c76:	e017      	b.n	8006ca8 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c7e:	b2db      	uxtb	r3, r3
 8006c80:	2b2a      	cmp	r3, #42	; 0x2a
 8006c82:	d111      	bne.n	8006ca8 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006c84:	687b      	ldr	r3, [r7, #4]
 8006c86:	2228      	movs	r2, #40	; 0x28
 8006c88:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	2222      	movs	r2, #34	; 0x22
 8006c90:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006c92:	2102      	movs	r1, #2
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f000 fc7f 	bl	8007598 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2200      	movs	r2, #0
 8006c9e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006ca2:	6878      	ldr	r0, [r7, #4]
 8006ca4:	f7ff fde9 	bl	800687a <HAL_I2C_SlaveRxCpltCallback>
}
 8006ca8:	bf00      	nop
 8006caa:	3710      	adds	r7, #16
 8006cac:	46bd      	mov	sp, r7
 8006cae:	bd80      	pop	{r7, pc}

08006cb0 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006cb0:	b580      	push	{r7, lr}
 8006cb2:	b086      	sub	sp, #24
 8006cb4:	af00      	add	r7, sp, #0
 8006cb6:	6078      	str	r0, [r7, #4]
 8006cb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006ccc:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8006cd6:	7bfb      	ldrb	r3, [r7, #15]
 8006cd8:	2b21      	cmp	r3, #33	; 0x21
 8006cda:	d002      	beq.n	8006ce2 <I2C_ITSlaveCplt+0x32>
 8006cdc:	7bfb      	ldrb	r3, [r7, #15]
 8006cde:	2b29      	cmp	r3, #41	; 0x29
 8006ce0:	d108      	bne.n	8006cf4 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8006ce2:	f248 0101 	movw	r1, #32769	; 0x8001
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 fc56 	bl	8007598 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	2221      	movs	r2, #33	; 0x21
 8006cf0:	631a      	str	r2, [r3, #48]	; 0x30
 8006cf2:	e00d      	b.n	8006d10 <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006cf4:	7bfb      	ldrb	r3, [r7, #15]
 8006cf6:	2b22      	cmp	r3, #34	; 0x22
 8006cf8:	d002      	beq.n	8006d00 <I2C_ITSlaveCplt+0x50>
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
 8006cfc:	2b2a      	cmp	r3, #42	; 0x2a
 8006cfe:	d107      	bne.n	8006d10 <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8006d00:	f248 0102 	movw	r1, #32770	; 0x8002
 8006d04:	6878      	ldr	r0, [r7, #4]
 8006d06:	f000 fc47 	bl	8007598 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2222      	movs	r2, #34	; 0x22
 8006d0e:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006d1e:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	6859      	ldr	r1, [r3, #4]
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	4b64      	ldr	r3, [pc, #400]	; (8006ebc <I2C_ITSlaveCplt+0x20c>)
 8006d2c:	400b      	ands	r3, r1
 8006d2e:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8006d30:	6878      	ldr	r0, [r7, #4]
 8006d32:	f000 fa14 	bl	800715e <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8006d36:	693b      	ldr	r3, [r7, #16]
 8006d38:	0b9b      	lsrs	r3, r3, #14
 8006d3a:	f003 0301 	and.w	r3, r3, #1
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d013      	beq.n	8006d6a <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	681a      	ldr	r2, [r3, #0]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8006d50:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d020      	beq.n	8006d9c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	b29a      	uxth	r2, r3
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006d68:	e018      	b.n	8006d9c <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8006d6a:	693b      	ldr	r3, [r7, #16]
 8006d6c:	0bdb      	lsrs	r3, r3, #15
 8006d6e:	f003 0301 	and.w	r3, r3, #1
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d012      	beq.n	8006d9c <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d84:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d006      	beq.n	8006d9c <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	b29a      	uxth	r2, r3
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006d9c:	697b      	ldr	r3, [r7, #20]
 8006d9e:	089b      	lsrs	r3, r3, #2
 8006da0:	f003 0301 	and.w	r3, r3, #1
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d020      	beq.n	8006dea <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	f023 0304 	bic.w	r3, r3, #4
 8006dae:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dba:	b2d2      	uxtb	r2, r2
 8006dbc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006dc2:	1c5a      	adds	r2, r3, #1
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d00c      	beq.n	8006dea <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006dd4:	3b01      	subs	r3, #1
 8006dd6:	b29a      	uxth	r2, r3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006de0:	b29b      	uxth	r3, r3
 8006de2:	3b01      	subs	r3, #1
 8006de4:	b29a      	uxth	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006dee:	b29b      	uxth	r3, r3
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d005      	beq.n	8006e00 <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006df8:	f043 0204 	orr.w	r2, r3, #4
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d010      	beq.n	8006e38 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e1a:	4619      	mov	r1, r3
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f8a7 	bl	8006f70 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e28:	b2db      	uxtb	r3, r3
 8006e2a:	2b28      	cmp	r3, #40	; 0x28
 8006e2c:	d141      	bne.n	8006eb2 <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e2e:	6979      	ldr	r1, [r7, #20]
 8006e30:	6878      	ldr	r0, [r7, #4]
 8006e32:	f000 f847 	bl	8006ec4 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e36:	e03c      	b.n	8006eb2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e40:	d014      	beq.n	8006e6c <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f7ff fed6 	bl	8006bf4 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	4a1d      	ldr	r2, [pc, #116]	; (8006ec0 <I2C_ITSlaveCplt+0x210>)
 8006e4c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	2220      	movs	r2, #32
 8006e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	2200      	movs	r2, #0
 8006e5a:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f7ff fd20 	bl	80068aa <HAL_I2C_ListenCpltCallback>
}
 8006e6a:	e022      	b.n	8006eb2 <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e72:	b2db      	uxtb	r3, r3
 8006e74:	2b22      	cmp	r3, #34	; 0x22
 8006e76:	d10e      	bne.n	8006e96 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	2200      	movs	r2, #0
 8006e8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f7ff fcf3 	bl	800687a <HAL_I2C_SlaveRxCpltCallback>
}
 8006e94:	e00d      	b.n	8006eb2 <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	2220      	movs	r2, #32
 8006e9a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2200      	movs	r2, #0
 8006ea2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	2200      	movs	r2, #0
 8006ea8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f7ff fcda 	bl	8006866 <HAL_I2C_SlaveTxCpltCallback>
}
 8006eb2:	bf00      	nop
 8006eb4:	3718      	adds	r7, #24
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}
 8006eba:	bf00      	nop
 8006ebc:	fe00e800 	.word	0xfe00e800
 8006ec0:	ffff0000 	.word	0xffff0000

08006ec4 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b082      	sub	sp, #8
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	6078      	str	r0, [r7, #4]
 8006ecc:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a26      	ldr	r2, [pc, #152]	; (8006f6c <I2C_ITListenCplt+0xa8>)
 8006ed2:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	2220      	movs	r2, #32
 8006ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2200      	movs	r2, #0
 8006ee6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2200      	movs	r2, #0
 8006eee:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8006ef0:	683b      	ldr	r3, [r7, #0]
 8006ef2:	089b      	lsrs	r3, r3, #2
 8006ef4:	f003 0301 	and.w	r3, r3, #1
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d022      	beq.n	8006f42 <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f06:	b2d2      	uxtb	r2, r2
 8006f08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f0e:	1c5a      	adds	r2, r3, #1
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d012      	beq.n	8006f42 <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f20:	3b01      	subs	r3, #1
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	3b01      	subs	r3, #1
 8006f30:	b29a      	uxth	r2, r3
 8006f32:	687b      	ldr	r3, [r7, #4]
 8006f34:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006f3a:	f043 0204 	orr.w	r2, r3, #4
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006f42:	f248 0103 	movw	r1, #32771	; 0x8003
 8006f46:	6878      	ldr	r0, [r7, #4]
 8006f48:	f000 fb26 	bl	8007598 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	2210      	movs	r2, #16
 8006f52:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	2200      	movs	r2, #0
 8006f58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8006f5c:	6878      	ldr	r0, [r7, #4]
 8006f5e:	f7ff fca4 	bl	80068aa <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8006f62:	bf00      	nop
 8006f64:	3708      	adds	r7, #8
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	ffff0000 	.word	0xffff0000

08006f70 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f80:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	4a5d      	ldr	r2, [pc, #372]	; (8007104 <I2C_ITError+0x194>)
 8006f8e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	2200      	movs	r2, #0
 8006f94:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	431a      	orrs	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8006fa2:	7bfb      	ldrb	r3, [r7, #15]
 8006fa4:	2b28      	cmp	r3, #40	; 0x28
 8006fa6:	d005      	beq.n	8006fb4 <I2C_ITError+0x44>
 8006fa8:	7bfb      	ldrb	r3, [r7, #15]
 8006faa:	2b29      	cmp	r3, #41	; 0x29
 8006fac:	d002      	beq.n	8006fb4 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8006fae:	7bfb      	ldrb	r3, [r7, #15]
 8006fb0:	2b2a      	cmp	r3, #42	; 0x2a
 8006fb2:	d10b      	bne.n	8006fcc <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fb4:	2103      	movs	r1, #3
 8006fb6:	6878      	ldr	r0, [r7, #4]
 8006fb8:	f000 faee 	bl	8007598 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	2228      	movs	r2, #40	; 0x28
 8006fc0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006fc4:	687b      	ldr	r3, [r7, #4]
 8006fc6:	4a50      	ldr	r2, [pc, #320]	; (8007108 <I2C_ITError+0x198>)
 8006fc8:	635a      	str	r2, [r3, #52]	; 0x34
 8006fca:	e011      	b.n	8006ff0 <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006fcc:	f248 0103 	movw	r1, #32771	; 0x8003
 8006fd0:	6878      	ldr	r0, [r7, #4]
 8006fd2:	f000 fae1 	bl	8007598 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006fdc:	b2db      	uxtb	r3, r3
 8006fde:	2b60      	cmp	r3, #96	; 0x60
 8006fe0:	d003      	beq.n	8006fea <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	2220      	movs	r2, #32
 8006fe6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	2200      	movs	r2, #0
 8006fee:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ff4:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d039      	beq.n	8007072 <I2C_ITError+0x102>
 8006ffe:	68bb      	ldr	r3, [r7, #8]
 8007000:	2b11      	cmp	r3, #17
 8007002:	d002      	beq.n	800700a <I2C_ITError+0x9a>
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	2b21      	cmp	r3, #33	; 0x21
 8007008:	d133      	bne.n	8007072 <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007014:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007018:	d107      	bne.n	800702a <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	681a      	ldr	r2, [r3, #0]
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	681b      	ldr	r3, [r3, #0]
 8007024:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007028:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800702e:	4618      	mov	r0, r3
 8007030:	f7ff f842 	bl	80060b8 <HAL_DMA_GetState>
 8007034:	4603      	mov	r3, r0
 8007036:	2b01      	cmp	r3, #1
 8007038:	d017      	beq.n	800706a <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800703e:	4a33      	ldr	r2, [pc, #204]	; (800710c <I2C_ITError+0x19c>)
 8007040:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe ff42 	bl	8005ed8 <HAL_DMA_Abort_IT>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	d04d      	beq.n	80070f6 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800705e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007060:	687a      	ldr	r2, [r7, #4]
 8007062:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007064:	4610      	mov	r0, r2
 8007066:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007068:	e045      	b.n	80070f6 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800706a:	6878      	ldr	r0, [r7, #4]
 800706c:	f000 f850 	bl	8007110 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007070:	e041      	b.n	80070f6 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007076:	2b00      	cmp	r3, #0
 8007078:	d039      	beq.n	80070ee <I2C_ITError+0x17e>
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	2b12      	cmp	r3, #18
 800707e:	d002      	beq.n	8007086 <I2C_ITError+0x116>
 8007080:	68bb      	ldr	r3, [r7, #8]
 8007082:	2b22      	cmp	r3, #34	; 0x22
 8007084:	d133      	bne.n	80070ee <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007090:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007094:	d107      	bne.n	80070a6 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	681a      	ldr	r2, [r3, #0]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80070a4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070aa:	4618      	mov	r0, r3
 80070ac:	f7ff f804 	bl	80060b8 <HAL_DMA_GetState>
 80070b0:	4603      	mov	r3, r0
 80070b2:	2b01      	cmp	r3, #1
 80070b4:	d017      	beq.n	80070e6 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ba:	4a14      	ldr	r2, [pc, #80]	; (800710c <I2C_ITError+0x19c>)
 80070bc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	2200      	movs	r2, #0
 80070c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070ca:	4618      	mov	r0, r3
 80070cc:	f7fe ff04 	bl	8005ed8 <HAL_DMA_Abort_IT>
 80070d0:	4603      	mov	r3, r0
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d011      	beq.n	80070fa <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80070da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80070dc:	687a      	ldr	r2, [r7, #4]
 80070de:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80070e0:	4610      	mov	r0, r2
 80070e2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070e4:	e009      	b.n	80070fa <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f000 f812 	bl	8007110 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070ec:	e005      	b.n	80070fa <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80070ee:	6878      	ldr	r0, [r7, #4]
 80070f0:	f000 f80e 	bl	8007110 <I2C_TreatErrorCallback>
  }
}
 80070f4:	e002      	b.n	80070fc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80070f6:	bf00      	nop
 80070f8:	e000      	b.n	80070fc <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80070fa:	bf00      	nop
}
 80070fc:	bf00      	nop
 80070fe:	3710      	adds	r7, #16
 8007100:	46bd      	mov	sp, r7
 8007102:	bd80      	pop	{r7, pc}
 8007104:	ffff0000 	.word	0xffff0000
 8007108:	080068e7 	.word	0x080068e7
 800710c:	080071a7 	.word	0x080071a7

08007110 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800711e:	b2db      	uxtb	r3, r3
 8007120:	2b60      	cmp	r3, #96	; 0x60
 8007122:	d10e      	bne.n	8007142 <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	2220      	movs	r2, #32
 8007128:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2200      	movs	r2, #0
 8007130:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	2200      	movs	r2, #0
 8007136:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800713a:	6878      	ldr	r0, [r7, #4]
 800713c:	f7ff fbc9 	bl	80068d2 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007140:	e009      	b.n	8007156 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	2200      	movs	r2, #0
 8007146:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007150:	6878      	ldr	r0, [r7, #4]
 8007152:	f7ff fbb4 	bl	80068be <HAL_I2C_ErrorCallback>
}
 8007156:	bf00      	nop
 8007158:	3708      	adds	r7, #8
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	699b      	ldr	r3, [r3, #24]
 800716c:	f003 0302 	and.w	r3, r3, #2
 8007170:	2b02      	cmp	r3, #2
 8007172:	d103      	bne.n	800717c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	681b      	ldr	r3, [r3, #0]
 8007178:	2200      	movs	r2, #0
 800717a:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	699b      	ldr	r3, [r3, #24]
 8007182:	f003 0301 	and.w	r3, r3, #1
 8007186:	2b01      	cmp	r3, #1
 8007188:	d007      	beq.n	800719a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	681b      	ldr	r3, [r3, #0]
 800718e:	699a      	ldr	r2, [r3, #24]
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f042 0201 	orr.w	r2, r2, #1
 8007198:	619a      	str	r2, [r3, #24]
  }
}
 800719a:	bf00      	nop
 800719c:	370c      	adds	r7, #12
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr

080071a6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80071a6:	b580      	push	{r7, lr}
 80071a8:	b084      	sub	sp, #16
 80071aa:	af00      	add	r7, sp, #0
 80071ac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071c0:	2200      	movs	r2, #0
 80071c2:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071c8:	2b00      	cmp	r3, #0
 80071ca:	d003      	beq.n	80071d4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80071cc:	68fb      	ldr	r3, [r7, #12]
 80071ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071d0:	2200      	movs	r2, #0
 80071d2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 80071d4:	68f8      	ldr	r0, [r7, #12]
 80071d6:	f7ff ff9b 	bl	8007110 <I2C_TreatErrorCallback>
}
 80071da:	bf00      	nop
 80071dc:	3710      	adds	r7, #16
 80071de:	46bd      	mov	sp, r7
 80071e0:	bd80      	pop	{r7, pc}

080071e2 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80071e2:	b580      	push	{r7, lr}
 80071e4:	b084      	sub	sp, #16
 80071e6:	af00      	add	r7, sp, #0
 80071e8:	60f8      	str	r0, [r7, #12]
 80071ea:	60b9      	str	r1, [r7, #8]
 80071ec:	603b      	str	r3, [r7, #0]
 80071ee:	4613      	mov	r3, r2
 80071f0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80071f2:	e022      	b.n	800723a <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80071f4:	683b      	ldr	r3, [r7, #0]
 80071f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80071fa:	d01e      	beq.n	800723a <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80071fc:	f7fc ff02 	bl	8004004 <HAL_GetTick>
 8007200:	4602      	mov	r2, r0
 8007202:	69bb      	ldr	r3, [r7, #24]
 8007204:	1ad3      	subs	r3, r2, r3
 8007206:	683a      	ldr	r2, [r7, #0]
 8007208:	429a      	cmp	r2, r3
 800720a:	d302      	bcc.n	8007212 <I2C_WaitOnFlagUntilTimeout+0x30>
 800720c:	683b      	ldr	r3, [r7, #0]
 800720e:	2b00      	cmp	r3, #0
 8007210:	d113      	bne.n	800723a <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007216:	f043 0220 	orr.w	r2, r3, #32
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	2220      	movs	r2, #32
 8007222:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007226:	68fb      	ldr	r3, [r7, #12]
 8007228:	2200      	movs	r2, #0
 800722a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	2200      	movs	r2, #0
 8007232:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8007236:	2301      	movs	r3, #1
 8007238:	e00f      	b.n	800725a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800723a:	68fb      	ldr	r3, [r7, #12]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	699a      	ldr	r2, [r3, #24]
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	4013      	ands	r3, r2
 8007244:	68ba      	ldr	r2, [r7, #8]
 8007246:	429a      	cmp	r2, r3
 8007248:	bf0c      	ite	eq
 800724a:	2301      	moveq	r3, #1
 800724c:	2300      	movne	r3, #0
 800724e:	b2db      	uxtb	r3, r3
 8007250:	461a      	mov	r2, r3
 8007252:	79fb      	ldrb	r3, [r7, #7]
 8007254:	429a      	cmp	r2, r3
 8007256:	d0cd      	beq.n	80071f4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8007258:	2300      	movs	r3, #0
}
 800725a:	4618      	mov	r0, r3
 800725c:	3710      	adds	r7, #16
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}

08007262 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8007262:	b580      	push	{r7, lr}
 8007264:	b084      	sub	sp, #16
 8007266:	af00      	add	r7, sp, #0
 8007268:	60f8      	str	r0, [r7, #12]
 800726a:	60b9      	str	r1, [r7, #8]
 800726c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800726e:	e02c      	b.n	80072ca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007270:	687a      	ldr	r2, [r7, #4]
 8007272:	68b9      	ldr	r1, [r7, #8]
 8007274:	68f8      	ldr	r0, [r7, #12]
 8007276:	f000 f871 	bl	800735c <I2C_IsErrorOccurred>
 800727a:	4603      	mov	r3, r0
 800727c:	2b00      	cmp	r3, #0
 800727e:	d001      	beq.n	8007284 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007280:	2301      	movs	r3, #1
 8007282:	e02a      	b.n	80072da <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007284:	68bb      	ldr	r3, [r7, #8]
 8007286:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800728a:	d01e      	beq.n	80072ca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800728c:	f7fc feba 	bl	8004004 <HAL_GetTick>
 8007290:	4602      	mov	r2, r0
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	1ad3      	subs	r3, r2, r3
 8007296:	68ba      	ldr	r2, [r7, #8]
 8007298:	429a      	cmp	r2, r3
 800729a:	d302      	bcc.n	80072a2 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d113      	bne.n	80072ca <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a6:	f043 0220 	orr.w	r2, r3, #32
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2220      	movs	r2, #32
 80072b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072b6:	68fb      	ldr	r3, [r7, #12]
 80072b8:	2200      	movs	r2, #0
 80072ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2200      	movs	r2, #0
 80072c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80072c6:	2301      	movs	r3, #1
 80072c8:	e007      	b.n	80072da <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80072ca:	68fb      	ldr	r3, [r7, #12]
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	699b      	ldr	r3, [r3, #24]
 80072d0:	f003 0302 	and.w	r3, r3, #2
 80072d4:	2b02      	cmp	r3, #2
 80072d6:	d1cb      	bne.n	8007270 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3710      	adds	r7, #16
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b084      	sub	sp, #16
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	60f8      	str	r0, [r7, #12]
 80072ea:	60b9      	str	r1, [r7, #8]
 80072ec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80072ee:	e028      	b.n	8007342 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80072f0:	687a      	ldr	r2, [r7, #4]
 80072f2:	68b9      	ldr	r1, [r7, #8]
 80072f4:	68f8      	ldr	r0, [r7, #12]
 80072f6:	f000 f831 	bl	800735c <I2C_IsErrorOccurred>
 80072fa:	4603      	mov	r3, r0
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d001      	beq.n	8007304 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8007300:	2301      	movs	r3, #1
 8007302:	e026      	b.n	8007352 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007304:	f7fc fe7e 	bl	8004004 <HAL_GetTick>
 8007308:	4602      	mov	r2, r0
 800730a:	687b      	ldr	r3, [r7, #4]
 800730c:	1ad3      	subs	r3, r2, r3
 800730e:	68ba      	ldr	r2, [r7, #8]
 8007310:	429a      	cmp	r2, r3
 8007312:	d302      	bcc.n	800731a <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d113      	bne.n	8007342 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800731e:	f043 0220 	orr.w	r2, r3, #32
 8007322:	68fb      	ldr	r3, [r7, #12]
 8007324:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8007326:	68fb      	ldr	r3, [r7, #12]
 8007328:	2220      	movs	r2, #32
 800732a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800732e:	68fb      	ldr	r3, [r7, #12]
 8007330:	2200      	movs	r2, #0
 8007332:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	2200      	movs	r2, #0
 800733a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800733e:	2301      	movs	r3, #1
 8007340:	e007      	b.n	8007352 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	699b      	ldr	r3, [r3, #24]
 8007348:	f003 0320 	and.w	r3, r3, #32
 800734c:	2b20      	cmp	r3, #32
 800734e:	d1cf      	bne.n	80072f0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007350:	2300      	movs	r3, #0
}
 8007352:	4618      	mov	r0, r3
 8007354:	3710      	adds	r7, #16
 8007356:	46bd      	mov	sp, r7
 8007358:	bd80      	pop	{r7, pc}
	...

0800735c <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800735c:	b580      	push	{r7, lr}
 800735e:	b08a      	sub	sp, #40	; 0x28
 8007360:	af00      	add	r7, sp, #0
 8007362:	60f8      	str	r0, [r7, #12]
 8007364:	60b9      	str	r1, [r7, #8]
 8007366:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007368:	2300      	movs	r3, #0
 800736a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8007376:	2300      	movs	r3, #0
 8007378:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800737e:	69bb      	ldr	r3, [r7, #24]
 8007380:	f003 0310 	and.w	r3, r3, #16
 8007384:	2b00      	cmp	r3, #0
 8007386:	d075      	beq.n	8007474 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007388:	68fb      	ldr	r3, [r7, #12]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	2210      	movs	r2, #16
 800738e:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007390:	e056      	b.n	8007440 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007398:	d052      	beq.n	8007440 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800739a:	f7fc fe33 	bl	8004004 <HAL_GetTick>
 800739e:	4602      	mov	r2, r0
 80073a0:	69fb      	ldr	r3, [r7, #28]
 80073a2:	1ad3      	subs	r3, r2, r3
 80073a4:	68ba      	ldr	r2, [r7, #8]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d302      	bcc.n	80073b0 <I2C_IsErrorOccurred+0x54>
 80073aa:	68bb      	ldr	r3, [r7, #8]
 80073ac:	2b00      	cmp	r3, #0
 80073ae:	d147      	bne.n	8007440 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80073b0:	68fb      	ldr	r3, [r7, #12]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ba:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80073c2:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	699b      	ldr	r3, [r3, #24]
 80073ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073d2:	d12e      	bne.n	8007432 <I2C_IsErrorOccurred+0xd6>
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80073da:	d02a      	beq.n	8007432 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80073dc:	7cfb      	ldrb	r3, [r7, #19]
 80073de:	2b20      	cmp	r3, #32
 80073e0:	d027      	beq.n	8007432 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	685a      	ldr	r2, [r3, #4]
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073f0:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80073f2:	f7fc fe07 	bl	8004004 <HAL_GetTick>
 80073f6:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80073f8:	e01b      	b.n	8007432 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80073fa:	f7fc fe03 	bl	8004004 <HAL_GetTick>
 80073fe:	4602      	mov	r2, r0
 8007400:	69fb      	ldr	r3, [r7, #28]
 8007402:	1ad3      	subs	r3, r2, r3
 8007404:	2b19      	cmp	r3, #25
 8007406:	d914      	bls.n	8007432 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007408:	68fb      	ldr	r3, [r7, #12]
 800740a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800740c:	f043 0220 	orr.w	r2, r3, #32
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2220      	movs	r2, #32
 8007418:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	2200      	movs	r2, #0
 8007420:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8007424:	68fb      	ldr	r3, [r7, #12]
 8007426:	2200      	movs	r2, #0
 8007428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 800742c:	2301      	movs	r3, #1
 800742e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	f003 0320 	and.w	r3, r3, #32
 800743c:	2b20      	cmp	r3, #32
 800743e:	d1dc      	bne.n	80073fa <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	681b      	ldr	r3, [r3, #0]
 8007444:	699b      	ldr	r3, [r3, #24]
 8007446:	f003 0320 	and.w	r3, r3, #32
 800744a:	2b20      	cmp	r3, #32
 800744c:	d003      	beq.n	8007456 <I2C_IsErrorOccurred+0xfa>
 800744e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007452:	2b00      	cmp	r3, #0
 8007454:	d09d      	beq.n	8007392 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8007456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800745a:	2b00      	cmp	r3, #0
 800745c:	d103      	bne.n	8007466 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800745e:	68fb      	ldr	r3, [r7, #12]
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	2220      	movs	r2, #32
 8007464:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8007466:	6a3b      	ldr	r3, [r7, #32]
 8007468:	f043 0304 	orr.w	r3, r3, #4
 800746c:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800746e:	2301      	movs	r3, #1
 8007470:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	699b      	ldr	r3, [r3, #24]
 800747a:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800747c:	69bb      	ldr	r3, [r7, #24]
 800747e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007482:	2b00      	cmp	r3, #0
 8007484:	d00b      	beq.n	800749e <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8007486:	6a3b      	ldr	r3, [r7, #32]
 8007488:	f043 0301 	orr.w	r3, r3, #1
 800748c:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007496:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8007498:	2301      	movs	r3, #1
 800749a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800749e:	69bb      	ldr	r3, [r7, #24]
 80074a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d00b      	beq.n	80074c0 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80074a8:	6a3b      	ldr	r3, [r7, #32]
 80074aa:	f043 0308 	orr.w	r3, r3, #8
 80074ae:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80074b8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074ba:	2301      	movs	r3, #1
 80074bc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80074c0:	69bb      	ldr	r3, [r7, #24]
 80074c2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80074c6:	2b00      	cmp	r3, #0
 80074c8:	d00b      	beq.n	80074e2 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80074ca:	6a3b      	ldr	r3, [r7, #32]
 80074cc:	f043 0302 	orr.w	r3, r3, #2
 80074d0:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80074da:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80074dc:	2301      	movs	r3, #1
 80074de:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80074e2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d01c      	beq.n	8007524 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80074ea:	68f8      	ldr	r0, [r7, #12]
 80074ec:	f7ff fe37 	bl	800715e <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6859      	ldr	r1, [r3, #4]
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	681a      	ldr	r2, [r3, #0]
 80074fa:	4b0d      	ldr	r3, [pc, #52]	; (8007530 <I2C_IsErrorOccurred+0x1d4>)
 80074fc:	400b      	ands	r3, r1
 80074fe:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007504:	6a3b      	ldr	r3, [r7, #32]
 8007506:	431a      	orrs	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	2220      	movs	r2, #32
 8007510:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2200      	movs	r2, #0
 8007518:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800751c:	68fb      	ldr	r3, [r7, #12]
 800751e:	2200      	movs	r2, #0
 8007520:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8007524:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8007528:	4618      	mov	r0, r3
 800752a:	3728      	adds	r7, #40	; 0x28
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}
 8007530:	fe00e800 	.word	0xfe00e800

08007534 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007534:	b480      	push	{r7}
 8007536:	b087      	sub	sp, #28
 8007538:	af00      	add	r7, sp, #0
 800753a:	60f8      	str	r0, [r7, #12]
 800753c:	607b      	str	r3, [r7, #4]
 800753e:	460b      	mov	r3, r1
 8007540:	817b      	strh	r3, [r7, #10]
 8007542:	4613      	mov	r3, r2
 8007544:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007546:	897b      	ldrh	r3, [r7, #10]
 8007548:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800754c:	7a7b      	ldrb	r3, [r7, #9]
 800754e:	041b      	lsls	r3, r3, #16
 8007550:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007554:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800755a:	6a3b      	ldr	r3, [r7, #32]
 800755c:	4313      	orrs	r3, r2
 800755e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007562:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	685a      	ldr	r2, [r3, #4]
 800756a:	6a3b      	ldr	r3, [r7, #32]
 800756c:	0d5b      	lsrs	r3, r3, #21
 800756e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8007572:	4b08      	ldr	r3, [pc, #32]	; (8007594 <I2C_TransferConfig+0x60>)
 8007574:	430b      	orrs	r3, r1
 8007576:	43db      	mvns	r3, r3
 8007578:	ea02 0103 	and.w	r1, r2, r3
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	697a      	ldr	r2, [r7, #20]
 8007582:	430a      	orrs	r2, r1
 8007584:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007586:	bf00      	nop
 8007588:	371c      	adds	r7, #28
 800758a:	46bd      	mov	sp, r7
 800758c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007590:	4770      	bx	lr
 8007592:	bf00      	nop
 8007594:	03ff63ff 	.word	0x03ff63ff

08007598 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8007598:	b480      	push	{r7}
 800759a:	b085      	sub	sp, #20
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	460b      	mov	r3, r1
 80075a2:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 80075a4:	2300      	movs	r3, #0
 80075a6:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80075a8:	887b      	ldrh	r3, [r7, #2]
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d00f      	beq.n	80075d2 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 80075b8:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075c0:	b2db      	uxtb	r3, r3
 80075c2:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075c6:	2b28      	cmp	r3, #40	; 0x28
 80075c8:	d003      	beq.n	80075d2 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80075d0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80075d2:	887b      	ldrh	r3, [r7, #2]
 80075d4:	f003 0302 	and.w	r3, r3, #2
 80075d8:	2b00      	cmp	r3, #0
 80075da:	d00f      	beq.n	80075fc <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80075e2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075ea:	b2db      	uxtb	r3, r3
 80075ec:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075f0:	2b28      	cmp	r3, #40	; 0x28
 80075f2:	d003      	beq.n	80075fc <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80075fa:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80075fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007600:	2b00      	cmp	r3, #0
 8007602:	da03      	bge.n	800760c <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 800760a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800760c:	887b      	ldrh	r3, [r7, #2]
 800760e:	2b10      	cmp	r3, #16
 8007610:	d103      	bne.n	800761a <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8007618:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800761a:	887b      	ldrh	r3, [r7, #2]
 800761c:	2b20      	cmp	r3, #32
 800761e:	d103      	bne.n	8007628 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	f043 0320 	orr.w	r3, r3, #32
 8007626:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8007628:	887b      	ldrh	r3, [r7, #2]
 800762a:	2b40      	cmp	r3, #64	; 0x40
 800762c:	d103      	bne.n	8007636 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007634:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	6819      	ldr	r1, [r3, #0]
 800763c:	68fb      	ldr	r3, [r7, #12]
 800763e:	43da      	mvns	r2, r3
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	400a      	ands	r2, r1
 8007646:	601a      	str	r2, [r3, #0]
}
 8007648:	bf00      	nop
 800764a:	3714      	adds	r7, #20
 800764c:	46bd      	mov	sp, r7
 800764e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007652:	4770      	bx	lr

08007654 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007654:	b480      	push	{r7}
 8007656:	b083      	sub	sp, #12
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
 800765c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007664:	b2db      	uxtb	r3, r3
 8007666:	2b20      	cmp	r3, #32
 8007668:	d138      	bne.n	80076dc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007670:	2b01      	cmp	r3, #1
 8007672:	d101      	bne.n	8007678 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8007674:	2302      	movs	r3, #2
 8007676:	e032      	b.n	80076de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2201      	movs	r2, #1
 800767c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	2224      	movs	r2, #36	; 0x24
 8007684:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	681b      	ldr	r3, [r3, #0]
 800768c:	681a      	ldr	r2, [r3, #0]
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	681b      	ldr	r3, [r3, #0]
 8007692:	f022 0201 	bic.w	r2, r2, #1
 8007696:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	681b      	ldr	r3, [r3, #0]
 800769c:	681a      	ldr	r2, [r3, #0]
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80076a6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	6819      	ldr	r1, [r3, #0]
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	430a      	orrs	r2, r1
 80076b6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	681a      	ldr	r2, [r3, #0]
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	f042 0201 	orr.w	r2, r2, #1
 80076c6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80076c8:	687b      	ldr	r3, [r7, #4]
 80076ca:	2220      	movs	r2, #32
 80076cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	2200      	movs	r2, #0
 80076d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80076d8:	2300      	movs	r3, #0
 80076da:	e000      	b.n	80076de <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80076dc:	2302      	movs	r3, #2
  }
}
 80076de:	4618      	mov	r0, r3
 80076e0:	370c      	adds	r7, #12
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr

080076ea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80076ea:	b480      	push	{r7}
 80076ec:	b085      	sub	sp, #20
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
 80076f2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80076fa:	b2db      	uxtb	r3, r3
 80076fc:	2b20      	cmp	r3, #32
 80076fe:	d139      	bne.n	8007774 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007706:	2b01      	cmp	r3, #1
 8007708:	d101      	bne.n	800770e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800770a:	2302      	movs	r3, #2
 800770c:	e033      	b.n	8007776 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	2224      	movs	r2, #36	; 0x24
 800771a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	681a      	ldr	r2, [r3, #0]
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	f022 0201 	bic.w	r2, r2, #1
 800772c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	681b      	ldr	r3, [r3, #0]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800773c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800773e:	683b      	ldr	r3, [r7, #0]
 8007740:	021b      	lsls	r3, r3, #8
 8007742:	68fa      	ldr	r2, [r7, #12]
 8007744:	4313      	orrs	r3, r2
 8007746:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	68fa      	ldr	r2, [r7, #12]
 800774e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	681a      	ldr	r2, [r3, #0]
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	681b      	ldr	r3, [r3, #0]
 800775a:	f042 0201 	orr.w	r2, r2, #1
 800775e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2220      	movs	r2, #32
 8007764:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8007770:	2300      	movs	r3, #0
 8007772:	e000      	b.n	8007776 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8007774:	2302      	movs	r3, #2
  }
}
 8007776:	4618      	mov	r0, r3
 8007778:	3714      	adds	r7, #20
 800777a:	46bd      	mov	sp, r7
 800777c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007780:	4770      	bx	lr
	...

08007784 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8007784:	b480      	push	{r7}
 8007786:	b085      	sub	sp, #20
 8007788:	af00      	add	r7, sp, #0
 800778a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800778c:	4b0b      	ldr	r3, [pc, #44]	; (80077bc <HAL_I2CEx_EnableFastModePlus+0x38>)
 800778e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007790:	4a0a      	ldr	r2, [pc, #40]	; (80077bc <HAL_I2CEx_EnableFastModePlus+0x38>)
 8007792:	f043 0301 	orr.w	r3, r3, #1
 8007796:	6613      	str	r3, [r2, #96]	; 0x60
 8007798:	4b08      	ldr	r3, [pc, #32]	; (80077bc <HAL_I2CEx_EnableFastModePlus+0x38>)
 800779a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800779c:	f003 0301 	and.w	r3, r3, #1
 80077a0:	60fb      	str	r3, [r7, #12]
 80077a2:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 80077a4:	4b06      	ldr	r3, [pc, #24]	; (80077c0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	4905      	ldr	r1, [pc, #20]	; (80077c0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	4313      	orrs	r3, r2
 80077ae:	604b      	str	r3, [r1, #4]
}
 80077b0:	bf00      	nop
 80077b2:	3714      	adds	r7, #20
 80077b4:	46bd      	mov	sp, r7
 80077b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ba:	4770      	bx	lr
 80077bc:	40021000 	.word	0x40021000
 80077c0:	40010000 	.word	0x40010000

080077c4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80077c4:	b480      	push	{r7}
 80077c6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80077c8:	4b05      	ldr	r3, [pc, #20]	; (80077e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a04      	ldr	r2, [pc, #16]	; (80077e0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80077ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80077d2:	6013      	str	r3, [r2, #0]
}
 80077d4:	bf00      	nop
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	40007000 	.word	0x40007000

080077e4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80077e4:	b480      	push	{r7}
 80077e6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80077e8:	4b04      	ldr	r3, [pc, #16]	; (80077fc <HAL_PWREx_GetVoltageRange+0x18>)
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	46bd      	mov	sp, r7
 80077f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077f8:	4770      	bx	lr
 80077fa:	bf00      	nop
 80077fc:	40007000 	.word	0x40007000

08007800 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
 8007806:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800780e:	d130      	bne.n	8007872 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8007810:	4b23      	ldr	r3, [pc, #140]	; (80078a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8007818:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800781c:	d038      	beq.n	8007890 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800781e:	4b20      	ldr	r3, [pc, #128]	; (80078a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007826:	4a1e      	ldr	r2, [pc, #120]	; (80078a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007828:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800782c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800782e:	4b1d      	ldr	r3, [pc, #116]	; (80078a4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	2232      	movs	r2, #50	; 0x32
 8007834:	fb02 f303 	mul.w	r3, r2, r3
 8007838:	4a1b      	ldr	r2, [pc, #108]	; (80078a8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800783a:	fba2 2303 	umull	r2, r3, r2, r3
 800783e:	0c9b      	lsrs	r3, r3, #18
 8007840:	3301      	adds	r3, #1
 8007842:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8007844:	e002      	b.n	800784c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	3b01      	subs	r3, #1
 800784a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800784c:	4b14      	ldr	r3, [pc, #80]	; (80078a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800784e:	695b      	ldr	r3, [r3, #20]
 8007850:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007854:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007858:	d102      	bne.n	8007860 <HAL_PWREx_ControlVoltageScaling+0x60>
 800785a:	68fb      	ldr	r3, [r7, #12]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d1f2      	bne.n	8007846 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8007860:	4b0f      	ldr	r3, [pc, #60]	; (80078a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007862:	695b      	ldr	r3, [r3, #20]
 8007864:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007868:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800786c:	d110      	bne.n	8007890 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800786e:	2303      	movs	r3, #3
 8007870:	e00f      	b.n	8007892 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8007872:	4b0b      	ldr	r3, [pc, #44]	; (80078a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007874:	681b      	ldr	r3, [r3, #0]
 8007876:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800787a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800787e:	d007      	beq.n	8007890 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8007880:	4b07      	ldr	r3, [pc, #28]	; (80078a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8007888:	4a05      	ldr	r2, [pc, #20]	; (80078a0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800788a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800788e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8007890:	2300      	movs	r3, #0
}
 8007892:	4618      	mov	r0, r3
 8007894:	3714      	adds	r7, #20
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	40007000 	.word	0x40007000
 80078a4:	20000004 	.word	0x20000004
 80078a8:	431bde83 	.word	0x431bde83

080078ac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80078ac:	b580      	push	{r7, lr}
 80078ae:	b088      	sub	sp, #32
 80078b0:	af00      	add	r7, sp, #0
 80078b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d102      	bne.n	80078c0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80078ba:	2301      	movs	r3, #1
 80078bc:	f000 bc02 	b.w	80080c4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80078c0:	4b96      	ldr	r3, [pc, #600]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 80078c2:	689b      	ldr	r3, [r3, #8]
 80078c4:	f003 030c 	and.w	r3, r3, #12
 80078c8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80078ca:	4b94      	ldr	r3, [pc, #592]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 80078cc:	68db      	ldr	r3, [r3, #12]
 80078ce:	f003 0303 	and.w	r3, r3, #3
 80078d2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f003 0310 	and.w	r3, r3, #16
 80078dc:	2b00      	cmp	r3, #0
 80078de:	f000 80e4 	beq.w	8007aaa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80078e2:	69bb      	ldr	r3, [r7, #24]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d007      	beq.n	80078f8 <HAL_RCC_OscConfig+0x4c>
 80078e8:	69bb      	ldr	r3, [r7, #24]
 80078ea:	2b0c      	cmp	r3, #12
 80078ec:	f040 808b 	bne.w	8007a06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80078f0:	697b      	ldr	r3, [r7, #20]
 80078f2:	2b01      	cmp	r3, #1
 80078f4:	f040 8087 	bne.w	8007a06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80078f8:	4b88      	ldr	r3, [pc, #544]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	f003 0302 	and.w	r3, r3, #2
 8007900:	2b00      	cmp	r3, #0
 8007902:	d005      	beq.n	8007910 <HAL_RCC_OscConfig+0x64>
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	699b      	ldr	r3, [r3, #24]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d101      	bne.n	8007910 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800790c:	2301      	movs	r3, #1
 800790e:	e3d9      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a1a      	ldr	r2, [r3, #32]
 8007914:	4b81      	ldr	r3, [pc, #516]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007916:	681b      	ldr	r3, [r3, #0]
 8007918:	f003 0308 	and.w	r3, r3, #8
 800791c:	2b00      	cmp	r3, #0
 800791e:	d004      	beq.n	800792a <HAL_RCC_OscConfig+0x7e>
 8007920:	4b7e      	ldr	r3, [pc, #504]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007922:	681b      	ldr	r3, [r3, #0]
 8007924:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007928:	e005      	b.n	8007936 <HAL_RCC_OscConfig+0x8a>
 800792a:	4b7c      	ldr	r3, [pc, #496]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 800792c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007930:	091b      	lsrs	r3, r3, #4
 8007932:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007936:	4293      	cmp	r3, r2
 8007938:	d223      	bcs.n	8007982 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	6a1b      	ldr	r3, [r3, #32]
 800793e:	4618      	mov	r0, r3
 8007940:	f000 fdbe 	bl	80084c0 <RCC_SetFlashLatencyFromMSIRange>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800794a:	2301      	movs	r3, #1
 800794c:	e3ba      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800794e:	4b73      	ldr	r3, [pc, #460]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	4a72      	ldr	r2, [pc, #456]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007954:	f043 0308 	orr.w	r3, r3, #8
 8007958:	6013      	str	r3, [r2, #0]
 800795a:	4b70      	ldr	r3, [pc, #448]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	6a1b      	ldr	r3, [r3, #32]
 8007966:	496d      	ldr	r1, [pc, #436]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007968:	4313      	orrs	r3, r2
 800796a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800796c:	4b6b      	ldr	r3, [pc, #428]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 800796e:	685b      	ldr	r3, [r3, #4]
 8007970:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	69db      	ldr	r3, [r3, #28]
 8007978:	021b      	lsls	r3, r3, #8
 800797a:	4968      	ldr	r1, [pc, #416]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 800797c:	4313      	orrs	r3, r2
 800797e:	604b      	str	r3, [r1, #4]
 8007980:	e025      	b.n	80079ce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007982:	4b66      	ldr	r3, [pc, #408]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	4a65      	ldr	r2, [pc, #404]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007988:	f043 0308 	orr.w	r3, r3, #8
 800798c:	6013      	str	r3, [r2, #0]
 800798e:	4b63      	ldr	r3, [pc, #396]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a1b      	ldr	r3, [r3, #32]
 800799a:	4960      	ldr	r1, [pc, #384]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 800799c:	4313      	orrs	r3, r2
 800799e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80079a0:	4b5e      	ldr	r3, [pc, #376]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 80079a2:	685b      	ldr	r3, [r3, #4]
 80079a4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80079a8:	687b      	ldr	r3, [r7, #4]
 80079aa:	69db      	ldr	r3, [r3, #28]
 80079ac:	021b      	lsls	r3, r3, #8
 80079ae:	495b      	ldr	r1, [pc, #364]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 80079b0:	4313      	orrs	r3, r2
 80079b2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80079b4:	69bb      	ldr	r3, [r7, #24]
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d109      	bne.n	80079ce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	6a1b      	ldr	r3, [r3, #32]
 80079be:	4618      	mov	r0, r3
 80079c0:	f000 fd7e 	bl	80084c0 <RCC_SetFlashLatencyFromMSIRange>
 80079c4:	4603      	mov	r3, r0
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d001      	beq.n	80079ce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80079ca:	2301      	movs	r3, #1
 80079cc:	e37a      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80079ce:	f000 fc81 	bl	80082d4 <HAL_RCC_GetSysClockFreq>
 80079d2:	4602      	mov	r2, r0
 80079d4:	4b51      	ldr	r3, [pc, #324]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	091b      	lsrs	r3, r3, #4
 80079da:	f003 030f 	and.w	r3, r3, #15
 80079de:	4950      	ldr	r1, [pc, #320]	; (8007b20 <HAL_RCC_OscConfig+0x274>)
 80079e0:	5ccb      	ldrb	r3, [r1, r3]
 80079e2:	f003 031f 	and.w	r3, r3, #31
 80079e6:	fa22 f303 	lsr.w	r3, r2, r3
 80079ea:	4a4e      	ldr	r2, [pc, #312]	; (8007b24 <HAL_RCC_OscConfig+0x278>)
 80079ec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80079ee:	4b4e      	ldr	r3, [pc, #312]	; (8007b28 <HAL_RCC_OscConfig+0x27c>)
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4618      	mov	r0, r3
 80079f4:	f7fc f9d0 	bl	8003d98 <HAL_InitTick>
 80079f8:	4603      	mov	r3, r0
 80079fa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80079fc:	7bfb      	ldrb	r3, [r7, #15]
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d052      	beq.n	8007aa8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8007a02:	7bfb      	ldrb	r3, [r7, #15]
 8007a04:	e35e      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	699b      	ldr	r3, [r3, #24]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d032      	beq.n	8007a74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8007a0e:	4b43      	ldr	r3, [pc, #268]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	4a42      	ldr	r2, [pc, #264]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007a14:	f043 0301 	orr.w	r3, r3, #1
 8007a18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007a1a:	f7fc faf3 	bl	8004004 <HAL_GetTick>
 8007a1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007a20:	e008      	b.n	8007a34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a22:	f7fc faef 	bl	8004004 <HAL_GetTick>
 8007a26:	4602      	mov	r2, r0
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	1ad3      	subs	r3, r2, r3
 8007a2c:	2b02      	cmp	r3, #2
 8007a2e:	d901      	bls.n	8007a34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8007a30:	2303      	movs	r3, #3
 8007a32:	e347      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007a34:	4b39      	ldr	r3, [pc, #228]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f003 0302 	and.w	r3, r3, #2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d0f0      	beq.n	8007a22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8007a40:	4b36      	ldr	r3, [pc, #216]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4a35      	ldr	r2, [pc, #212]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007a46:	f043 0308 	orr.w	r3, r3, #8
 8007a4a:	6013      	str	r3, [r2, #0]
 8007a4c:	4b33      	ldr	r3, [pc, #204]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007a4e:	681b      	ldr	r3, [r3, #0]
 8007a50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	6a1b      	ldr	r3, [r3, #32]
 8007a58:	4930      	ldr	r1, [pc, #192]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007a5a:	4313      	orrs	r3, r2
 8007a5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8007a5e:	4b2f      	ldr	r3, [pc, #188]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007a60:	685b      	ldr	r3, [r3, #4]
 8007a62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	69db      	ldr	r3, [r3, #28]
 8007a6a:	021b      	lsls	r3, r3, #8
 8007a6c:	492b      	ldr	r1, [pc, #172]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007a6e:	4313      	orrs	r3, r2
 8007a70:	604b      	str	r3, [r1, #4]
 8007a72:	e01a      	b.n	8007aaa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8007a74:	4b29      	ldr	r3, [pc, #164]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a28      	ldr	r2, [pc, #160]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007a7a:	f023 0301 	bic.w	r3, r3, #1
 8007a7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8007a80:	f7fc fac0 	bl	8004004 <HAL_GetTick>
 8007a84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007a86:	e008      	b.n	8007a9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8007a88:	f7fc fabc 	bl	8004004 <HAL_GetTick>
 8007a8c:	4602      	mov	r2, r0
 8007a8e:	693b      	ldr	r3, [r7, #16]
 8007a90:	1ad3      	subs	r3, r2, r3
 8007a92:	2b02      	cmp	r3, #2
 8007a94:	d901      	bls.n	8007a9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8007a96:	2303      	movs	r3, #3
 8007a98:	e314      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8007a9a:	4b20      	ldr	r3, [pc, #128]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f003 0302 	and.w	r3, r3, #2
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d1f0      	bne.n	8007a88 <HAL_RCC_OscConfig+0x1dc>
 8007aa6:	e000      	b.n	8007aaa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8007aa8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681b      	ldr	r3, [r3, #0]
 8007aae:	f003 0301 	and.w	r3, r3, #1
 8007ab2:	2b00      	cmp	r3, #0
 8007ab4:	d073      	beq.n	8007b9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	2b08      	cmp	r3, #8
 8007aba:	d005      	beq.n	8007ac8 <HAL_RCC_OscConfig+0x21c>
 8007abc:	69bb      	ldr	r3, [r7, #24]
 8007abe:	2b0c      	cmp	r3, #12
 8007ac0:	d10e      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	2b03      	cmp	r3, #3
 8007ac6:	d10b      	bne.n	8007ae0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ac8:	4b14      	ldr	r3, [pc, #80]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007aca:	681b      	ldr	r3, [r3, #0]
 8007acc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d063      	beq.n	8007b9c <HAL_RCC_OscConfig+0x2f0>
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	685b      	ldr	r3, [r3, #4]
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d15f      	bne.n	8007b9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8007adc:	2301      	movs	r3, #1
 8007ade:	e2f1      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	685b      	ldr	r3, [r3, #4]
 8007ae4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ae8:	d106      	bne.n	8007af8 <HAL_RCC_OscConfig+0x24c>
 8007aea:	4b0c      	ldr	r3, [pc, #48]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	4a0b      	ldr	r2, [pc, #44]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007af0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007af4:	6013      	str	r3, [r2, #0]
 8007af6:	e025      	b.n	8007b44 <HAL_RCC_OscConfig+0x298>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	685b      	ldr	r3, [r3, #4]
 8007afc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007b00:	d114      	bne.n	8007b2c <HAL_RCC_OscConfig+0x280>
 8007b02:	4b06      	ldr	r3, [pc, #24]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a05      	ldr	r2, [pc, #20]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007b08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007b0c:	6013      	str	r3, [r2, #0]
 8007b0e:	4b03      	ldr	r3, [pc, #12]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	4a02      	ldr	r2, [pc, #8]	; (8007b1c <HAL_RCC_OscConfig+0x270>)
 8007b14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007b18:	6013      	str	r3, [r2, #0]
 8007b1a:	e013      	b.n	8007b44 <HAL_RCC_OscConfig+0x298>
 8007b1c:	40021000 	.word	0x40021000
 8007b20:	0800fdc0 	.word	0x0800fdc0
 8007b24:	20000004 	.word	0x20000004
 8007b28:	20000008 	.word	0x20000008
 8007b2c:	4ba0      	ldr	r3, [pc, #640]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a9f      	ldr	r2, [pc, #636]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007b32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007b36:	6013      	str	r3, [r2, #0]
 8007b38:	4b9d      	ldr	r3, [pc, #628]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a9c      	ldr	r2, [pc, #624]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007b3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007b42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	685b      	ldr	r3, [r3, #4]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d013      	beq.n	8007b74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b4c:	f7fc fa5a 	bl	8004004 <HAL_GetTick>
 8007b50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b52:	e008      	b.n	8007b66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b54:	f7fc fa56 	bl	8004004 <HAL_GetTick>
 8007b58:	4602      	mov	r2, r0
 8007b5a:	693b      	ldr	r3, [r7, #16]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	2b64      	cmp	r3, #100	; 0x64
 8007b60:	d901      	bls.n	8007b66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8007b62:	2303      	movs	r3, #3
 8007b64:	e2ae      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007b66:	4b92      	ldr	r3, [pc, #584]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d0f0      	beq.n	8007b54 <HAL_RCC_OscConfig+0x2a8>
 8007b72:	e014      	b.n	8007b9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b74:	f7fc fa46 	bl	8004004 <HAL_GetTick>
 8007b78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b7a:	e008      	b.n	8007b8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007b7c:	f7fc fa42 	bl	8004004 <HAL_GetTick>
 8007b80:	4602      	mov	r2, r0
 8007b82:	693b      	ldr	r3, [r7, #16]
 8007b84:	1ad3      	subs	r3, r2, r3
 8007b86:	2b64      	cmp	r3, #100	; 0x64
 8007b88:	d901      	bls.n	8007b8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	e29a      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8007b8e:	4b88      	ldr	r3, [pc, #544]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d1f0      	bne.n	8007b7c <HAL_RCC_OscConfig+0x2d0>
 8007b9a:	e000      	b.n	8007b9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 0302 	and.w	r3, r3, #2
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d060      	beq.n	8007c6c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8007baa:	69bb      	ldr	r3, [r7, #24]
 8007bac:	2b04      	cmp	r3, #4
 8007bae:	d005      	beq.n	8007bbc <HAL_RCC_OscConfig+0x310>
 8007bb0:	69bb      	ldr	r3, [r7, #24]
 8007bb2:	2b0c      	cmp	r3, #12
 8007bb4:	d119      	bne.n	8007bea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d116      	bne.n	8007bea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007bbc:	4b7c      	ldr	r3, [pc, #496]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d005      	beq.n	8007bd4 <HAL_RCC_OscConfig+0x328>
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	68db      	ldr	r3, [r3, #12]
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d101      	bne.n	8007bd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	e277      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007bd4:	4b76      	ldr	r3, [pc, #472]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007bd6:	685b      	ldr	r3, [r3, #4]
 8007bd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	691b      	ldr	r3, [r3, #16]
 8007be0:	061b      	lsls	r3, r3, #24
 8007be2:	4973      	ldr	r1, [pc, #460]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007be4:	4313      	orrs	r3, r2
 8007be6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8007be8:	e040      	b.n	8007c6c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d023      	beq.n	8007c3a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007bf2:	4b6f      	ldr	r3, [pc, #444]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	4a6e      	ldr	r2, [pc, #440]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007bf8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007bfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007bfe:	f7fc fa01 	bl	8004004 <HAL_GetTick>
 8007c02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c04:	e008      	b.n	8007c18 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c06:	f7fc f9fd 	bl	8004004 <HAL_GetTick>
 8007c0a:	4602      	mov	r2, r0
 8007c0c:	693b      	ldr	r3, [r7, #16]
 8007c0e:	1ad3      	subs	r3, r2, r3
 8007c10:	2b02      	cmp	r3, #2
 8007c12:	d901      	bls.n	8007c18 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007c14:	2303      	movs	r3, #3
 8007c16:	e255      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007c18:	4b65      	ldr	r3, [pc, #404]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007c1a:	681b      	ldr	r3, [r3, #0]
 8007c1c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d0f0      	beq.n	8007c06 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c24:	4b62      	ldr	r3, [pc, #392]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	691b      	ldr	r3, [r3, #16]
 8007c30:	061b      	lsls	r3, r3, #24
 8007c32:	495f      	ldr	r1, [pc, #380]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007c34:	4313      	orrs	r3, r2
 8007c36:	604b      	str	r3, [r1, #4]
 8007c38:	e018      	b.n	8007c6c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007c3a:	4b5d      	ldr	r3, [pc, #372]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	4a5c      	ldr	r2, [pc, #368]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007c40:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007c44:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c46:	f7fc f9dd 	bl	8004004 <HAL_GetTick>
 8007c4a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c4c:	e008      	b.n	8007c60 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c4e:	f7fc f9d9 	bl	8004004 <HAL_GetTick>
 8007c52:	4602      	mov	r2, r0
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	1ad3      	subs	r3, r2, r3
 8007c58:	2b02      	cmp	r3, #2
 8007c5a:	d901      	bls.n	8007c60 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8007c5c:	2303      	movs	r3, #3
 8007c5e:	e231      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007c60:	4b53      	ldr	r3, [pc, #332]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d1f0      	bne.n	8007c4e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	f003 0308 	and.w	r3, r3, #8
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d03c      	beq.n	8007cf2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	695b      	ldr	r3, [r3, #20]
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d01c      	beq.n	8007cba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007c80:	4b4b      	ldr	r3, [pc, #300]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007c82:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007c86:	4a4a      	ldr	r2, [pc, #296]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007c88:	f043 0301 	orr.w	r3, r3, #1
 8007c8c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007c90:	f7fc f9b8 	bl	8004004 <HAL_GetTick>
 8007c94:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007c96:	e008      	b.n	8007caa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c98:	f7fc f9b4 	bl	8004004 <HAL_GetTick>
 8007c9c:	4602      	mov	r2, r0
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	1ad3      	subs	r3, r2, r3
 8007ca2:	2b02      	cmp	r3, #2
 8007ca4:	d901      	bls.n	8007caa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8007ca6:	2303      	movs	r3, #3
 8007ca8:	e20c      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007caa:	4b41      	ldr	r3, [pc, #260]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007cac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cb0:	f003 0302 	and.w	r3, r3, #2
 8007cb4:	2b00      	cmp	r3, #0
 8007cb6:	d0ef      	beq.n	8007c98 <HAL_RCC_OscConfig+0x3ec>
 8007cb8:	e01b      	b.n	8007cf2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007cba:	4b3d      	ldr	r3, [pc, #244]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007cbc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cc0:	4a3b      	ldr	r2, [pc, #236]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007cc2:	f023 0301 	bic.w	r3, r3, #1
 8007cc6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007cca:	f7fc f99b 	bl	8004004 <HAL_GetTick>
 8007cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007cd0:	e008      	b.n	8007ce4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007cd2:	f7fc f997 	bl	8004004 <HAL_GetTick>
 8007cd6:	4602      	mov	r2, r0
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	1ad3      	subs	r3, r2, r3
 8007cdc:	2b02      	cmp	r3, #2
 8007cde:	d901      	bls.n	8007ce4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8007ce0:	2303      	movs	r3, #3
 8007ce2:	e1ef      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8007ce4:	4b32      	ldr	r3, [pc, #200]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007cea:	f003 0302 	and.w	r3, r3, #2
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d1ef      	bne.n	8007cd2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0304 	and.w	r3, r3, #4
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 80a6 	beq.w	8007e4c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d00:	2300      	movs	r3, #0
 8007d02:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007d04:	4b2a      	ldr	r3, [pc, #168]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007d06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d08:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d0c:	2b00      	cmp	r3, #0
 8007d0e:	d10d      	bne.n	8007d2c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d10:	4b27      	ldr	r3, [pc, #156]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007d12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d14:	4a26      	ldr	r2, [pc, #152]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007d16:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007d1a:	6593      	str	r3, [r2, #88]	; 0x58
 8007d1c:	4b24      	ldr	r3, [pc, #144]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007d1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007d24:	60bb      	str	r3, [r7, #8]
 8007d26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007d28:	2301      	movs	r3, #1
 8007d2a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d2c:	4b21      	ldr	r3, [pc, #132]	; (8007db4 <HAL_RCC_OscConfig+0x508>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d118      	bne.n	8007d6a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007d38:	4b1e      	ldr	r3, [pc, #120]	; (8007db4 <HAL_RCC_OscConfig+0x508>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a1d      	ldr	r2, [pc, #116]	; (8007db4 <HAL_RCC_OscConfig+0x508>)
 8007d3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007d42:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007d44:	f7fc f95e 	bl	8004004 <HAL_GetTick>
 8007d48:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d4a:	e008      	b.n	8007d5e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007d4c:	f7fc f95a 	bl	8004004 <HAL_GetTick>
 8007d50:	4602      	mov	r2, r0
 8007d52:	693b      	ldr	r3, [r7, #16]
 8007d54:	1ad3      	subs	r3, r2, r3
 8007d56:	2b02      	cmp	r3, #2
 8007d58:	d901      	bls.n	8007d5e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8007d5a:	2303      	movs	r3, #3
 8007d5c:	e1b2      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8007d5e:	4b15      	ldr	r3, [pc, #84]	; (8007db4 <HAL_RCC_OscConfig+0x508>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d0f0      	beq.n	8007d4c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007d6a:	687b      	ldr	r3, [r7, #4]
 8007d6c:	689b      	ldr	r3, [r3, #8]
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	d108      	bne.n	8007d84 <HAL_RCC_OscConfig+0x4d8>
 8007d72:	4b0f      	ldr	r3, [pc, #60]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007d74:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d78:	4a0d      	ldr	r2, [pc, #52]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007d7a:	f043 0301 	orr.w	r3, r3, #1
 8007d7e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d82:	e029      	b.n	8007dd8 <HAL_RCC_OscConfig+0x52c>
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	689b      	ldr	r3, [r3, #8]
 8007d88:	2b05      	cmp	r3, #5
 8007d8a:	d115      	bne.n	8007db8 <HAL_RCC_OscConfig+0x50c>
 8007d8c:	4b08      	ldr	r3, [pc, #32]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007d92:	4a07      	ldr	r2, [pc, #28]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007d94:	f043 0304 	orr.w	r3, r3, #4
 8007d98:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007d9c:	4b04      	ldr	r3, [pc, #16]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007d9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007da2:	4a03      	ldr	r2, [pc, #12]	; (8007db0 <HAL_RCC_OscConfig+0x504>)
 8007da4:	f043 0301 	orr.w	r3, r3, #1
 8007da8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007dac:	e014      	b.n	8007dd8 <HAL_RCC_OscConfig+0x52c>
 8007dae:	bf00      	nop
 8007db0:	40021000 	.word	0x40021000
 8007db4:	40007000 	.word	0x40007000
 8007db8:	4b9a      	ldr	r3, [pc, #616]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dbe:	4a99      	ldr	r2, [pc, #612]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007dc0:	f023 0301 	bic.w	r3, r3, #1
 8007dc4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007dc8:	4b96      	ldr	r3, [pc, #600]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007dca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007dce:	4a95      	ldr	r2, [pc, #596]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007dd0:	f023 0304 	bic.w	r3, r3, #4
 8007dd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	689b      	ldr	r3, [r3, #8]
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d016      	beq.n	8007e0e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007de0:	f7fc f910 	bl	8004004 <HAL_GetTick>
 8007de4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007de6:	e00a      	b.n	8007dfe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007de8:	f7fc f90c 	bl	8004004 <HAL_GetTick>
 8007dec:	4602      	mov	r2, r0
 8007dee:	693b      	ldr	r3, [r7, #16]
 8007df0:	1ad3      	subs	r3, r2, r3
 8007df2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007df6:	4293      	cmp	r3, r2
 8007df8:	d901      	bls.n	8007dfe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007dfa:	2303      	movs	r3, #3
 8007dfc:	e162      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007dfe:	4b89      	ldr	r3, [pc, #548]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007e00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e04:	f003 0302 	and.w	r3, r3, #2
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d0ed      	beq.n	8007de8 <HAL_RCC_OscConfig+0x53c>
 8007e0c:	e015      	b.n	8007e3a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e0e:	f7fc f8f9 	bl	8004004 <HAL_GetTick>
 8007e12:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e14:	e00a      	b.n	8007e2c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e16:	f7fc f8f5 	bl	8004004 <HAL_GetTick>
 8007e1a:	4602      	mov	r2, r0
 8007e1c:	693b      	ldr	r3, [r7, #16]
 8007e1e:	1ad3      	subs	r3, r2, r3
 8007e20:	f241 3288 	movw	r2, #5000	; 0x1388
 8007e24:	4293      	cmp	r3, r2
 8007e26:	d901      	bls.n	8007e2c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007e28:	2303      	movs	r3, #3
 8007e2a:	e14b      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007e2c:	4b7d      	ldr	r3, [pc, #500]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007e32:	f003 0302 	and.w	r3, r3, #2
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d1ed      	bne.n	8007e16 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007e3a:	7ffb      	ldrb	r3, [r7, #31]
 8007e3c:	2b01      	cmp	r3, #1
 8007e3e:	d105      	bne.n	8007e4c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007e40:	4b78      	ldr	r3, [pc, #480]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007e42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007e44:	4a77      	ldr	r2, [pc, #476]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007e46:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e4a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	f003 0320 	and.w	r3, r3, #32
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	d03c      	beq.n	8007ed2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007e5c:	2b00      	cmp	r3, #0
 8007e5e:	d01c      	beq.n	8007e9a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007e60:	4b70      	ldr	r3, [pc, #448]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007e62:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e66:	4a6f      	ldr	r2, [pc, #444]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007e68:	f043 0301 	orr.w	r3, r3, #1
 8007e6c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e70:	f7fc f8c8 	bl	8004004 <HAL_GetTick>
 8007e74:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e76:	e008      	b.n	8007e8a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007e78:	f7fc f8c4 	bl	8004004 <HAL_GetTick>
 8007e7c:	4602      	mov	r2, r0
 8007e7e:	693b      	ldr	r3, [r7, #16]
 8007e80:	1ad3      	subs	r3, r2, r3
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d901      	bls.n	8007e8a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007e86:	2303      	movs	r3, #3
 8007e88:	e11c      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007e8a:	4b66      	ldr	r3, [pc, #408]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007e8c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007e90:	f003 0302 	and.w	r3, r3, #2
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d0ef      	beq.n	8007e78 <HAL_RCC_OscConfig+0x5cc>
 8007e98:	e01b      	b.n	8007ed2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007e9a:	4b62      	ldr	r3, [pc, #392]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007e9c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007ea0:	4a60      	ldr	r2, [pc, #384]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007ea2:	f023 0301 	bic.w	r3, r3, #1
 8007ea6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007eaa:	f7fc f8ab 	bl	8004004 <HAL_GetTick>
 8007eae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007eb0:	e008      	b.n	8007ec4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007eb2:	f7fc f8a7 	bl	8004004 <HAL_GetTick>
 8007eb6:	4602      	mov	r2, r0
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	1ad3      	subs	r3, r2, r3
 8007ebc:	2b02      	cmp	r3, #2
 8007ebe:	d901      	bls.n	8007ec4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8007ec0:	2303      	movs	r3, #3
 8007ec2:	e0ff      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007ec4:	4b57      	ldr	r3, [pc, #348]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007ec6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007eca:	f003 0302 	and.w	r3, r3, #2
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d1ef      	bne.n	8007eb2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	f000 80f3 	beq.w	80080c2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ee0:	2b02      	cmp	r3, #2
 8007ee2:	f040 80c9 	bne.w	8008078 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007ee6:	4b4f      	ldr	r3, [pc, #316]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007ee8:	68db      	ldr	r3, [r3, #12]
 8007eea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007eec:	697b      	ldr	r3, [r7, #20]
 8007eee:	f003 0203 	and.w	r2, r3, #3
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ef6:	429a      	cmp	r2, r3
 8007ef8:	d12c      	bne.n	8007f54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007efa:	697b      	ldr	r3, [r7, #20]
 8007efc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007f00:	687b      	ldr	r3, [r7, #4]
 8007f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007f04:	3b01      	subs	r3, #1
 8007f06:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007f08:	429a      	cmp	r2, r3
 8007f0a:	d123      	bne.n	8007f54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007f16:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007f18:	429a      	cmp	r2, r3
 8007f1a:	d11b      	bne.n	8007f54 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f1c:	697b      	ldr	r3, [r7, #20]
 8007f1e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f26:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d113      	bne.n	8007f54 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f2c:	697b      	ldr	r3, [r7, #20]
 8007f2e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f36:	085b      	lsrs	r3, r3, #1
 8007f38:	3b01      	subs	r3, #1
 8007f3a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007f3c:	429a      	cmp	r2, r3
 8007f3e:	d109      	bne.n	8007f54 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007f40:	697b      	ldr	r3, [r7, #20]
 8007f42:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007f46:	687b      	ldr	r3, [r7, #4]
 8007f48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f4a:	085b      	lsrs	r3, r3, #1
 8007f4c:	3b01      	subs	r3, #1
 8007f4e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007f50:	429a      	cmp	r2, r3
 8007f52:	d06b      	beq.n	800802c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007f54:	69bb      	ldr	r3, [r7, #24]
 8007f56:	2b0c      	cmp	r3, #12
 8007f58:	d062      	beq.n	8008020 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8007f5a:	4b32      	ldr	r3, [pc, #200]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d001      	beq.n	8007f6a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007f66:	2301      	movs	r3, #1
 8007f68:	e0ac      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8007f6a:	4b2e      	ldr	r3, [pc, #184]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	4a2d      	ldr	r2, [pc, #180]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007f70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007f74:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007f76:	f7fc f845 	bl	8004004 <HAL_GetTick>
 8007f7a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f7c:	e008      	b.n	8007f90 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f7e:	f7fc f841 	bl	8004004 <HAL_GetTick>
 8007f82:	4602      	mov	r2, r0
 8007f84:	693b      	ldr	r3, [r7, #16]
 8007f86:	1ad3      	subs	r3, r2, r3
 8007f88:	2b02      	cmp	r3, #2
 8007f8a:	d901      	bls.n	8007f90 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007f8c:	2303      	movs	r3, #3
 8007f8e:	e099      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007f90:	4b24      	ldr	r3, [pc, #144]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1f0      	bne.n	8007f7e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007f9c:	4b21      	ldr	r3, [pc, #132]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007f9e:	68da      	ldr	r2, [r3, #12]
 8007fa0:	4b21      	ldr	r3, [pc, #132]	; (8008028 <HAL_RCC_OscConfig+0x77c>)
 8007fa2:	4013      	ands	r3, r2
 8007fa4:	687a      	ldr	r2, [r7, #4]
 8007fa6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007fa8:	687a      	ldr	r2, [r7, #4]
 8007faa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007fac:	3a01      	subs	r2, #1
 8007fae:	0112      	lsls	r2, r2, #4
 8007fb0:	4311      	orrs	r1, r2
 8007fb2:	687a      	ldr	r2, [r7, #4]
 8007fb4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007fb6:	0212      	lsls	r2, r2, #8
 8007fb8:	4311      	orrs	r1, r2
 8007fba:	687a      	ldr	r2, [r7, #4]
 8007fbc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007fbe:	0852      	lsrs	r2, r2, #1
 8007fc0:	3a01      	subs	r2, #1
 8007fc2:	0552      	lsls	r2, r2, #21
 8007fc4:	4311      	orrs	r1, r2
 8007fc6:	687a      	ldr	r2, [r7, #4]
 8007fc8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007fca:	0852      	lsrs	r2, r2, #1
 8007fcc:	3a01      	subs	r2, #1
 8007fce:	0652      	lsls	r2, r2, #25
 8007fd0:	4311      	orrs	r1, r2
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007fd6:	06d2      	lsls	r2, r2, #27
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	4912      	ldr	r1, [pc, #72]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8007fe0:	4b10      	ldr	r3, [pc, #64]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007fe2:	681b      	ldr	r3, [r3, #0]
 8007fe4:	4a0f      	ldr	r2, [pc, #60]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007fe6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007fea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007fec:	4b0d      	ldr	r3, [pc, #52]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007fee:	68db      	ldr	r3, [r3, #12]
 8007ff0:	4a0c      	ldr	r2, [pc, #48]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8007ff2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007ff6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007ff8:	f7fc f804 	bl	8004004 <HAL_GetTick>
 8007ffc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007ffe:	e008      	b.n	8008012 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008000:	f7fc f800 	bl	8004004 <HAL_GetTick>
 8008004:	4602      	mov	r2, r0
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1ad3      	subs	r3, r2, r3
 800800a:	2b02      	cmp	r3, #2
 800800c:	d901      	bls.n	8008012 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800800e:	2303      	movs	r3, #3
 8008010:	e058      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008012:	4b04      	ldr	r3, [pc, #16]	; (8008024 <HAL_RCC_OscConfig+0x778>)
 8008014:	681b      	ldr	r3, [r3, #0]
 8008016:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800801a:	2b00      	cmp	r3, #0
 800801c:	d0f0      	beq.n	8008000 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800801e:	e050      	b.n	80080c2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e04f      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
 8008024:	40021000 	.word	0x40021000
 8008028:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800802c:	4b27      	ldr	r3, [pc, #156]	; (80080cc <HAL_RCC_OscConfig+0x820>)
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008034:	2b00      	cmp	r3, #0
 8008036:	d144      	bne.n	80080c2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008038:	4b24      	ldr	r3, [pc, #144]	; (80080cc <HAL_RCC_OscConfig+0x820>)
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	4a23      	ldr	r2, [pc, #140]	; (80080cc <HAL_RCC_OscConfig+0x820>)
 800803e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008042:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008044:	4b21      	ldr	r3, [pc, #132]	; (80080cc <HAL_RCC_OscConfig+0x820>)
 8008046:	68db      	ldr	r3, [r3, #12]
 8008048:	4a20      	ldr	r2, [pc, #128]	; (80080cc <HAL_RCC_OscConfig+0x820>)
 800804a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800804e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008050:	f7fb ffd8 	bl	8004004 <HAL_GetTick>
 8008054:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008056:	e008      	b.n	800806a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008058:	f7fb ffd4 	bl	8004004 <HAL_GetTick>
 800805c:	4602      	mov	r2, r0
 800805e:	693b      	ldr	r3, [r7, #16]
 8008060:	1ad3      	subs	r3, r2, r3
 8008062:	2b02      	cmp	r3, #2
 8008064:	d901      	bls.n	800806a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8008066:	2303      	movs	r3, #3
 8008068:	e02c      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800806a:	4b18      	ldr	r3, [pc, #96]	; (80080cc <HAL_RCC_OscConfig+0x820>)
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008072:	2b00      	cmp	r3, #0
 8008074:	d0f0      	beq.n	8008058 <HAL_RCC_OscConfig+0x7ac>
 8008076:	e024      	b.n	80080c2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008078:	69bb      	ldr	r3, [r7, #24]
 800807a:	2b0c      	cmp	r3, #12
 800807c:	d01f      	beq.n	80080be <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800807e:	4b13      	ldr	r3, [pc, #76]	; (80080cc <HAL_RCC_OscConfig+0x820>)
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	4a12      	ldr	r2, [pc, #72]	; (80080cc <HAL_RCC_OscConfig+0x820>)
 8008084:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008088:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800808a:	f7fb ffbb 	bl	8004004 <HAL_GetTick>
 800808e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008090:	e008      	b.n	80080a4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008092:	f7fb ffb7 	bl	8004004 <HAL_GetTick>
 8008096:	4602      	mov	r2, r0
 8008098:	693b      	ldr	r3, [r7, #16]
 800809a:	1ad3      	subs	r3, r2, r3
 800809c:	2b02      	cmp	r3, #2
 800809e:	d901      	bls.n	80080a4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80080a0:	2303      	movs	r3, #3
 80080a2:	e00f      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80080a4:	4b09      	ldr	r3, [pc, #36]	; (80080cc <HAL_RCC_OscConfig+0x820>)
 80080a6:	681b      	ldr	r3, [r3, #0]
 80080a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1f0      	bne.n	8008092 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80080b0:	4b06      	ldr	r3, [pc, #24]	; (80080cc <HAL_RCC_OscConfig+0x820>)
 80080b2:	68da      	ldr	r2, [r3, #12]
 80080b4:	4905      	ldr	r1, [pc, #20]	; (80080cc <HAL_RCC_OscConfig+0x820>)
 80080b6:	4b06      	ldr	r3, [pc, #24]	; (80080d0 <HAL_RCC_OscConfig+0x824>)
 80080b8:	4013      	ands	r3, r2
 80080ba:	60cb      	str	r3, [r1, #12]
 80080bc:	e001      	b.n	80080c2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80080be:	2301      	movs	r3, #1
 80080c0:	e000      	b.n	80080c4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80080c2:	2300      	movs	r3, #0
}
 80080c4:	4618      	mov	r0, r3
 80080c6:	3720      	adds	r7, #32
 80080c8:	46bd      	mov	sp, r7
 80080ca:	bd80      	pop	{r7, pc}
 80080cc:	40021000 	.word	0x40021000
 80080d0:	feeefffc 	.word	0xfeeefffc

080080d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80080d4:	b580      	push	{r7, lr}
 80080d6:	b084      	sub	sp, #16
 80080d8:	af00      	add	r7, sp, #0
 80080da:	6078      	str	r0, [r7, #4]
 80080dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d101      	bne.n	80080e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80080e4:	2301      	movs	r3, #1
 80080e6:	e0e7      	b.n	80082b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80080e8:	4b75      	ldr	r3, [pc, #468]	; (80082c0 <HAL_RCC_ClockConfig+0x1ec>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f003 0307 	and.w	r3, r3, #7
 80080f0:	683a      	ldr	r2, [r7, #0]
 80080f2:	429a      	cmp	r2, r3
 80080f4:	d910      	bls.n	8008118 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80080f6:	4b72      	ldr	r3, [pc, #456]	; (80082c0 <HAL_RCC_ClockConfig+0x1ec>)
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f023 0207 	bic.w	r2, r3, #7
 80080fe:	4970      	ldr	r1, [pc, #448]	; (80082c0 <HAL_RCC_ClockConfig+0x1ec>)
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	4313      	orrs	r3, r2
 8008104:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008106:	4b6e      	ldr	r3, [pc, #440]	; (80082c0 <HAL_RCC_ClockConfig+0x1ec>)
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	f003 0307 	and.w	r3, r3, #7
 800810e:	683a      	ldr	r2, [r7, #0]
 8008110:	429a      	cmp	r2, r3
 8008112:	d001      	beq.n	8008118 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008114:	2301      	movs	r3, #1
 8008116:	e0cf      	b.n	80082b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	f003 0302 	and.w	r3, r3, #2
 8008120:	2b00      	cmp	r3, #0
 8008122:	d010      	beq.n	8008146 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	689a      	ldr	r2, [r3, #8]
 8008128:	4b66      	ldr	r3, [pc, #408]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 800812a:	689b      	ldr	r3, [r3, #8]
 800812c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008130:	429a      	cmp	r2, r3
 8008132:	d908      	bls.n	8008146 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008134:	4b63      	ldr	r3, [pc, #396]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008136:	689b      	ldr	r3, [r3, #8]
 8008138:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	689b      	ldr	r3, [r3, #8]
 8008140:	4960      	ldr	r1, [pc, #384]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008142:	4313      	orrs	r3, r2
 8008144:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0301 	and.w	r3, r3, #1
 800814e:	2b00      	cmp	r3, #0
 8008150:	d04c      	beq.n	80081ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	685b      	ldr	r3, [r3, #4]
 8008156:	2b03      	cmp	r3, #3
 8008158:	d107      	bne.n	800816a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800815a:	4b5a      	ldr	r3, [pc, #360]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008162:	2b00      	cmp	r3, #0
 8008164:	d121      	bne.n	80081aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8008166:	2301      	movs	r3, #1
 8008168:	e0a6      	b.n	80082b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	685b      	ldr	r3, [r3, #4]
 800816e:	2b02      	cmp	r3, #2
 8008170:	d107      	bne.n	8008182 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008172:	4b54      	ldr	r3, [pc, #336]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800817a:	2b00      	cmp	r3, #0
 800817c:	d115      	bne.n	80081aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800817e:	2301      	movs	r3, #1
 8008180:	e09a      	b.n	80082b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d107      	bne.n	800819a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800818a:	4b4e      	ldr	r3, [pc, #312]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	f003 0302 	and.w	r3, r3, #2
 8008192:	2b00      	cmp	r3, #0
 8008194:	d109      	bne.n	80081aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8008196:	2301      	movs	r3, #1
 8008198:	e08e      	b.n	80082b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800819a:	4b4a      	ldr	r3, [pc, #296]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d101      	bne.n	80081aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80081a6:	2301      	movs	r3, #1
 80081a8:	e086      	b.n	80082b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80081aa:	4b46      	ldr	r3, [pc, #280]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 80081ac:	689b      	ldr	r3, [r3, #8]
 80081ae:	f023 0203 	bic.w	r2, r3, #3
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	685b      	ldr	r3, [r3, #4]
 80081b6:	4943      	ldr	r1, [pc, #268]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 80081b8:	4313      	orrs	r3, r2
 80081ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80081bc:	f7fb ff22 	bl	8004004 <HAL_GetTick>
 80081c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081c2:	e00a      	b.n	80081da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80081c4:	f7fb ff1e 	bl	8004004 <HAL_GetTick>
 80081c8:	4602      	mov	r2, r0
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	1ad3      	subs	r3, r2, r3
 80081ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d901      	bls.n	80081da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80081d6:	2303      	movs	r3, #3
 80081d8:	e06e      	b.n	80082b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80081da:	4b3a      	ldr	r3, [pc, #232]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 80081dc:	689b      	ldr	r3, [r3, #8]
 80081de:	f003 020c 	and.w	r2, r3, #12
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	685b      	ldr	r3, [r3, #4]
 80081e6:	009b      	lsls	r3, r3, #2
 80081e8:	429a      	cmp	r2, r3
 80081ea:	d1eb      	bne.n	80081c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	f003 0302 	and.w	r3, r3, #2
 80081f4:	2b00      	cmp	r3, #0
 80081f6:	d010      	beq.n	800821a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	689a      	ldr	r2, [r3, #8]
 80081fc:	4b31      	ldr	r3, [pc, #196]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 80081fe:	689b      	ldr	r3, [r3, #8]
 8008200:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008204:	429a      	cmp	r2, r3
 8008206:	d208      	bcs.n	800821a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008208:	4b2e      	ldr	r3, [pc, #184]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 800820a:	689b      	ldr	r3, [r3, #8]
 800820c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	689b      	ldr	r3, [r3, #8]
 8008214:	492b      	ldr	r1, [pc, #172]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008216:	4313      	orrs	r3, r2
 8008218:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800821a:	4b29      	ldr	r3, [pc, #164]	; (80082c0 <HAL_RCC_ClockConfig+0x1ec>)
 800821c:	681b      	ldr	r3, [r3, #0]
 800821e:	f003 0307 	and.w	r3, r3, #7
 8008222:	683a      	ldr	r2, [r7, #0]
 8008224:	429a      	cmp	r2, r3
 8008226:	d210      	bcs.n	800824a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008228:	4b25      	ldr	r3, [pc, #148]	; (80082c0 <HAL_RCC_ClockConfig+0x1ec>)
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	f023 0207 	bic.w	r2, r3, #7
 8008230:	4923      	ldr	r1, [pc, #140]	; (80082c0 <HAL_RCC_ClockConfig+0x1ec>)
 8008232:	683b      	ldr	r3, [r7, #0]
 8008234:	4313      	orrs	r3, r2
 8008236:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008238:	4b21      	ldr	r3, [pc, #132]	; (80082c0 <HAL_RCC_ClockConfig+0x1ec>)
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	f003 0307 	and.w	r3, r3, #7
 8008240:	683a      	ldr	r2, [r7, #0]
 8008242:	429a      	cmp	r2, r3
 8008244:	d001      	beq.n	800824a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e036      	b.n	80082b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	681b      	ldr	r3, [r3, #0]
 800824e:	f003 0304 	and.w	r3, r3, #4
 8008252:	2b00      	cmp	r3, #0
 8008254:	d008      	beq.n	8008268 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008256:	4b1b      	ldr	r3, [pc, #108]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008258:	689b      	ldr	r3, [r3, #8]
 800825a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	68db      	ldr	r3, [r3, #12]
 8008262:	4918      	ldr	r1, [pc, #96]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008264:	4313      	orrs	r3, r2
 8008266:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	f003 0308 	and.w	r3, r3, #8
 8008270:	2b00      	cmp	r3, #0
 8008272:	d009      	beq.n	8008288 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008274:	4b13      	ldr	r3, [pc, #76]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008276:	689b      	ldr	r3, [r3, #8]
 8008278:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	00db      	lsls	r3, r3, #3
 8008282:	4910      	ldr	r1, [pc, #64]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008284:	4313      	orrs	r3, r2
 8008286:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008288:	f000 f824 	bl	80082d4 <HAL_RCC_GetSysClockFreq>
 800828c:	4602      	mov	r2, r0
 800828e:	4b0d      	ldr	r3, [pc, #52]	; (80082c4 <HAL_RCC_ClockConfig+0x1f0>)
 8008290:	689b      	ldr	r3, [r3, #8]
 8008292:	091b      	lsrs	r3, r3, #4
 8008294:	f003 030f 	and.w	r3, r3, #15
 8008298:	490b      	ldr	r1, [pc, #44]	; (80082c8 <HAL_RCC_ClockConfig+0x1f4>)
 800829a:	5ccb      	ldrb	r3, [r1, r3]
 800829c:	f003 031f 	and.w	r3, r3, #31
 80082a0:	fa22 f303 	lsr.w	r3, r2, r3
 80082a4:	4a09      	ldr	r2, [pc, #36]	; (80082cc <HAL_RCC_ClockConfig+0x1f8>)
 80082a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80082a8:	4b09      	ldr	r3, [pc, #36]	; (80082d0 <HAL_RCC_ClockConfig+0x1fc>)
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	4618      	mov	r0, r3
 80082ae:	f7fb fd73 	bl	8003d98 <HAL_InitTick>
 80082b2:	4603      	mov	r3, r0
 80082b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80082b6:	7afb      	ldrb	r3, [r7, #11]
}
 80082b8:	4618      	mov	r0, r3
 80082ba:	3710      	adds	r7, #16
 80082bc:	46bd      	mov	sp, r7
 80082be:	bd80      	pop	{r7, pc}
 80082c0:	40022000 	.word	0x40022000
 80082c4:	40021000 	.word	0x40021000
 80082c8:	0800fdc0 	.word	0x0800fdc0
 80082cc:	20000004 	.word	0x20000004
 80082d0:	20000008 	.word	0x20000008

080082d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b089      	sub	sp, #36	; 0x24
 80082d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80082da:	2300      	movs	r3, #0
 80082dc:	61fb      	str	r3, [r7, #28]
 80082de:	2300      	movs	r3, #0
 80082e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80082e2:	4b3e      	ldr	r3, [pc, #248]	; (80083dc <HAL_RCC_GetSysClockFreq+0x108>)
 80082e4:	689b      	ldr	r3, [r3, #8]
 80082e6:	f003 030c 	and.w	r3, r3, #12
 80082ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80082ec:	4b3b      	ldr	r3, [pc, #236]	; (80083dc <HAL_RCC_GetSysClockFreq+0x108>)
 80082ee:	68db      	ldr	r3, [r3, #12]
 80082f0:	f003 0303 	and.w	r3, r3, #3
 80082f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80082f6:	693b      	ldr	r3, [r7, #16]
 80082f8:	2b00      	cmp	r3, #0
 80082fa:	d005      	beq.n	8008308 <HAL_RCC_GetSysClockFreq+0x34>
 80082fc:	693b      	ldr	r3, [r7, #16]
 80082fe:	2b0c      	cmp	r3, #12
 8008300:	d121      	bne.n	8008346 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	2b01      	cmp	r3, #1
 8008306:	d11e      	bne.n	8008346 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008308:	4b34      	ldr	r3, [pc, #208]	; (80083dc <HAL_RCC_GetSysClockFreq+0x108>)
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	f003 0308 	and.w	r3, r3, #8
 8008310:	2b00      	cmp	r3, #0
 8008312:	d107      	bne.n	8008324 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008314:	4b31      	ldr	r3, [pc, #196]	; (80083dc <HAL_RCC_GetSysClockFreq+0x108>)
 8008316:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800831a:	0a1b      	lsrs	r3, r3, #8
 800831c:	f003 030f 	and.w	r3, r3, #15
 8008320:	61fb      	str	r3, [r7, #28]
 8008322:	e005      	b.n	8008330 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008324:	4b2d      	ldr	r3, [pc, #180]	; (80083dc <HAL_RCC_GetSysClockFreq+0x108>)
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	091b      	lsrs	r3, r3, #4
 800832a:	f003 030f 	and.w	r3, r3, #15
 800832e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008330:	4a2b      	ldr	r2, [pc, #172]	; (80083e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008338:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	2b00      	cmp	r3, #0
 800833e:	d10d      	bne.n	800835c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008340:	69fb      	ldr	r3, [r7, #28]
 8008342:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008344:	e00a      	b.n	800835c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008346:	693b      	ldr	r3, [r7, #16]
 8008348:	2b04      	cmp	r3, #4
 800834a:	d102      	bne.n	8008352 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800834c:	4b25      	ldr	r3, [pc, #148]	; (80083e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800834e:	61bb      	str	r3, [r7, #24]
 8008350:	e004      	b.n	800835c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008352:	693b      	ldr	r3, [r7, #16]
 8008354:	2b08      	cmp	r3, #8
 8008356:	d101      	bne.n	800835c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008358:	4b23      	ldr	r3, [pc, #140]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800835a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	2b0c      	cmp	r3, #12
 8008360:	d134      	bne.n	80083cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008362:	4b1e      	ldr	r3, [pc, #120]	; (80083dc <HAL_RCC_GetSysClockFreq+0x108>)
 8008364:	68db      	ldr	r3, [r3, #12]
 8008366:	f003 0303 	and.w	r3, r3, #3
 800836a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800836c:	68bb      	ldr	r3, [r7, #8]
 800836e:	2b02      	cmp	r3, #2
 8008370:	d003      	beq.n	800837a <HAL_RCC_GetSysClockFreq+0xa6>
 8008372:	68bb      	ldr	r3, [r7, #8]
 8008374:	2b03      	cmp	r3, #3
 8008376:	d003      	beq.n	8008380 <HAL_RCC_GetSysClockFreq+0xac>
 8008378:	e005      	b.n	8008386 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800837a:	4b1a      	ldr	r3, [pc, #104]	; (80083e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800837c:	617b      	str	r3, [r7, #20]
      break;
 800837e:	e005      	b.n	800838c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008380:	4b19      	ldr	r3, [pc, #100]	; (80083e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8008382:	617b      	str	r3, [r7, #20]
      break;
 8008384:	e002      	b.n	800838c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008386:	69fb      	ldr	r3, [r7, #28]
 8008388:	617b      	str	r3, [r7, #20]
      break;
 800838a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800838c:	4b13      	ldr	r3, [pc, #76]	; (80083dc <HAL_RCC_GetSysClockFreq+0x108>)
 800838e:	68db      	ldr	r3, [r3, #12]
 8008390:	091b      	lsrs	r3, r3, #4
 8008392:	f003 0307 	and.w	r3, r3, #7
 8008396:	3301      	adds	r3, #1
 8008398:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800839a:	4b10      	ldr	r3, [pc, #64]	; (80083dc <HAL_RCC_GetSysClockFreq+0x108>)
 800839c:	68db      	ldr	r3, [r3, #12]
 800839e:	0a1b      	lsrs	r3, r3, #8
 80083a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083a4:	697a      	ldr	r2, [r7, #20]
 80083a6:	fb03 f202 	mul.w	r2, r3, r2
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80083b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80083b2:	4b0a      	ldr	r3, [pc, #40]	; (80083dc <HAL_RCC_GetSysClockFreq+0x108>)
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	0e5b      	lsrs	r3, r3, #25
 80083b8:	f003 0303 	and.w	r3, r3, #3
 80083bc:	3301      	adds	r3, #1
 80083be:	005b      	lsls	r3, r3, #1
 80083c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80083c2:	697a      	ldr	r2, [r7, #20]
 80083c4:	683b      	ldr	r3, [r7, #0]
 80083c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80083cc:	69bb      	ldr	r3, [r7, #24]
}
 80083ce:	4618      	mov	r0, r3
 80083d0:	3724      	adds	r7, #36	; 0x24
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr
 80083da:	bf00      	nop
 80083dc:	40021000 	.word	0x40021000
 80083e0:	0800fdd8 	.word	0x0800fdd8
 80083e4:	00f42400 	.word	0x00f42400
 80083e8:	007a1200 	.word	0x007a1200

080083ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083ec:	b480      	push	{r7}
 80083ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083f0:	4b03      	ldr	r3, [pc, #12]	; (8008400 <HAL_RCC_GetHCLKFreq+0x14>)
 80083f2:	681b      	ldr	r3, [r3, #0]
}
 80083f4:	4618      	mov	r0, r3
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	20000004 	.word	0x20000004

08008404 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008404:	b580      	push	{r7, lr}
 8008406:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008408:	f7ff fff0 	bl	80083ec <HAL_RCC_GetHCLKFreq>
 800840c:	4602      	mov	r2, r0
 800840e:	4b06      	ldr	r3, [pc, #24]	; (8008428 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008410:	689b      	ldr	r3, [r3, #8]
 8008412:	0a1b      	lsrs	r3, r3, #8
 8008414:	f003 0307 	and.w	r3, r3, #7
 8008418:	4904      	ldr	r1, [pc, #16]	; (800842c <HAL_RCC_GetPCLK1Freq+0x28>)
 800841a:	5ccb      	ldrb	r3, [r1, r3]
 800841c:	f003 031f 	and.w	r3, r3, #31
 8008420:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008424:	4618      	mov	r0, r3
 8008426:	bd80      	pop	{r7, pc}
 8008428:	40021000 	.word	0x40021000
 800842c:	0800fdd0 	.word	0x0800fdd0

08008430 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008430:	b580      	push	{r7, lr}
 8008432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8008434:	f7ff ffda 	bl	80083ec <HAL_RCC_GetHCLKFreq>
 8008438:	4602      	mov	r2, r0
 800843a:	4b06      	ldr	r3, [pc, #24]	; (8008454 <HAL_RCC_GetPCLK2Freq+0x24>)
 800843c:	689b      	ldr	r3, [r3, #8]
 800843e:	0adb      	lsrs	r3, r3, #11
 8008440:	f003 0307 	and.w	r3, r3, #7
 8008444:	4904      	ldr	r1, [pc, #16]	; (8008458 <HAL_RCC_GetPCLK2Freq+0x28>)
 8008446:	5ccb      	ldrb	r3, [r1, r3]
 8008448:	f003 031f 	and.w	r3, r3, #31
 800844c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008450:	4618      	mov	r0, r3
 8008452:	bd80      	pop	{r7, pc}
 8008454:	40021000 	.word	0x40021000
 8008458:	0800fdd0 	.word	0x0800fdd0

0800845c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800845c:	b480      	push	{r7}
 800845e:	b083      	sub	sp, #12
 8008460:	af00      	add	r7, sp, #0
 8008462:	6078      	str	r0, [r7, #4]
 8008464:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	220f      	movs	r2, #15
 800846a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800846c:	4b12      	ldr	r3, [pc, #72]	; (80084b8 <HAL_RCC_GetClockConfig+0x5c>)
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f003 0203 	and.w	r2, r3, #3
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8008478:	4b0f      	ldr	r3, [pc, #60]	; (80084b8 <HAL_RCC_GetClockConfig+0x5c>)
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8008484:	4b0c      	ldr	r3, [pc, #48]	; (80084b8 <HAL_RCC_GetClockConfig+0x5c>)
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8008490:	4b09      	ldr	r3, [pc, #36]	; (80084b8 <HAL_RCC_GetClockConfig+0x5c>)
 8008492:	689b      	ldr	r3, [r3, #8]
 8008494:	08db      	lsrs	r3, r3, #3
 8008496:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800849e:	4b07      	ldr	r3, [pc, #28]	; (80084bc <HAL_RCC_GetClockConfig+0x60>)
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f003 0207 	and.w	r2, r3, #7
 80084a6:	683b      	ldr	r3, [r7, #0]
 80084a8:	601a      	str	r2, [r3, #0]
}
 80084aa:	bf00      	nop
 80084ac:	370c      	adds	r7, #12
 80084ae:	46bd      	mov	sp, r7
 80084b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084b4:	4770      	bx	lr
 80084b6:	bf00      	nop
 80084b8:	40021000 	.word	0x40021000
 80084bc:	40022000 	.word	0x40022000

080084c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80084c0:	b580      	push	{r7, lr}
 80084c2:	b086      	sub	sp, #24
 80084c4:	af00      	add	r7, sp, #0
 80084c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80084c8:	2300      	movs	r3, #0
 80084ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80084cc:	4b2a      	ldr	r3, [pc, #168]	; (8008578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d003      	beq.n	80084e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80084d8:	f7ff f984 	bl	80077e4 <HAL_PWREx_GetVoltageRange>
 80084dc:	6178      	str	r0, [r7, #20]
 80084de:	e014      	b.n	800850a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80084e0:	4b25      	ldr	r3, [pc, #148]	; (8008578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084e4:	4a24      	ldr	r2, [pc, #144]	; (8008578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80084ea:	6593      	str	r3, [r2, #88]	; 0x58
 80084ec:	4b22      	ldr	r3, [pc, #136]	; (8008578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80084ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80084f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80084f4:	60fb      	str	r3, [r7, #12]
 80084f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80084f8:	f7ff f974 	bl	80077e4 <HAL_PWREx_GetVoltageRange>
 80084fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80084fe:	4b1e      	ldr	r3, [pc, #120]	; (8008578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008502:	4a1d      	ldr	r2, [pc, #116]	; (8008578 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8008504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008508:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800850a:	697b      	ldr	r3, [r7, #20]
 800850c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008510:	d10b      	bne.n	800852a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8008512:	687b      	ldr	r3, [r7, #4]
 8008514:	2b80      	cmp	r3, #128	; 0x80
 8008516:	d919      	bls.n	800854c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2ba0      	cmp	r3, #160	; 0xa0
 800851c:	d902      	bls.n	8008524 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800851e:	2302      	movs	r3, #2
 8008520:	613b      	str	r3, [r7, #16]
 8008522:	e013      	b.n	800854c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008524:	2301      	movs	r3, #1
 8008526:	613b      	str	r3, [r7, #16]
 8008528:	e010      	b.n	800854c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	2b80      	cmp	r3, #128	; 0x80
 800852e:	d902      	bls.n	8008536 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8008530:	2303      	movs	r3, #3
 8008532:	613b      	str	r3, [r7, #16]
 8008534:	e00a      	b.n	800854c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8008536:	687b      	ldr	r3, [r7, #4]
 8008538:	2b80      	cmp	r3, #128	; 0x80
 800853a:	d102      	bne.n	8008542 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800853c:	2302      	movs	r3, #2
 800853e:	613b      	str	r3, [r7, #16]
 8008540:	e004      	b.n	800854c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b70      	cmp	r3, #112	; 0x70
 8008546:	d101      	bne.n	800854c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8008548:	2301      	movs	r3, #1
 800854a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800854c:	4b0b      	ldr	r3, [pc, #44]	; (800857c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800854e:	681b      	ldr	r3, [r3, #0]
 8008550:	f023 0207 	bic.w	r2, r3, #7
 8008554:	4909      	ldr	r1, [pc, #36]	; (800857c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8008556:	693b      	ldr	r3, [r7, #16]
 8008558:	4313      	orrs	r3, r2
 800855a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800855c:	4b07      	ldr	r3, [pc, #28]	; (800857c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f003 0307 	and.w	r3, r3, #7
 8008564:	693a      	ldr	r2, [r7, #16]
 8008566:	429a      	cmp	r2, r3
 8008568:	d001      	beq.n	800856e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e000      	b.n	8008570 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3718      	adds	r7, #24
 8008574:	46bd      	mov	sp, r7
 8008576:	bd80      	pop	{r7, pc}
 8008578:	40021000 	.word	0x40021000
 800857c:	40022000 	.word	0x40022000

08008580 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008580:	b580      	push	{r7, lr}
 8008582:	b086      	sub	sp, #24
 8008584:	af00      	add	r7, sp, #0
 8008586:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8008588:	2300      	movs	r3, #0
 800858a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800858c:	2300      	movs	r3, #0
 800858e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008598:	2b00      	cmp	r3, #0
 800859a:	d031      	beq.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80085a4:	d01a      	beq.n	80085dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80085a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80085aa:	d814      	bhi.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d009      	beq.n	80085c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80085b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80085b4:	d10f      	bne.n	80085d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80085b6:	4b5d      	ldr	r3, [pc, #372]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80085b8:	68db      	ldr	r3, [r3, #12]
 80085ba:	4a5c      	ldr	r2, [pc, #368]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80085bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80085c2:	e00c      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	3304      	adds	r3, #4
 80085c8:	2100      	movs	r1, #0
 80085ca:	4618      	mov	r0, r3
 80085cc:	f000 f9de 	bl	800898c <RCCEx_PLLSAI1_Config>
 80085d0:	4603      	mov	r3, r0
 80085d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80085d4:	e003      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	74fb      	strb	r3, [r7, #19]
      break;
 80085da:	e000      	b.n	80085de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80085dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80085de:	7cfb      	ldrb	r3, [r7, #19]
 80085e0:	2b00      	cmp	r3, #0
 80085e2:	d10b      	bne.n	80085fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80085e4:	4b51      	ldr	r3, [pc, #324]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80085e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80085ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80085f2:	494e      	ldr	r1, [pc, #312]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80085f4:	4313      	orrs	r3, r2
 80085f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80085fa:	e001      	b.n	8008600 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80085fc:	7cfb      	ldrb	r3, [r7, #19]
 80085fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008608:	2b00      	cmp	r3, #0
 800860a:	f000 809e 	beq.w	800874a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800860e:	2300      	movs	r3, #0
 8008610:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8008612:	4b46      	ldr	r3, [pc, #280]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008614:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008616:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d101      	bne.n	8008622 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800861e:	2301      	movs	r3, #1
 8008620:	e000      	b.n	8008624 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8008622:	2300      	movs	r3, #0
 8008624:	2b00      	cmp	r3, #0
 8008626:	d00d      	beq.n	8008644 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008628:	4b40      	ldr	r3, [pc, #256]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800862a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800862c:	4a3f      	ldr	r2, [pc, #252]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800862e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008632:	6593      	str	r3, [r2, #88]	; 0x58
 8008634:	4b3d      	ldr	r3, [pc, #244]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008636:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008638:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800863c:	60bb      	str	r3, [r7, #8]
 800863e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008640:	2301      	movs	r3, #1
 8008642:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008644:	4b3a      	ldr	r3, [pc, #232]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	4a39      	ldr	r2, [pc, #228]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800864a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800864e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8008650:	f7fb fcd8 	bl	8004004 <HAL_GetTick>
 8008654:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8008656:	e009      	b.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008658:	f7fb fcd4 	bl	8004004 <HAL_GetTick>
 800865c:	4602      	mov	r2, r0
 800865e:	68fb      	ldr	r3, [r7, #12]
 8008660:	1ad3      	subs	r3, r2, r3
 8008662:	2b02      	cmp	r3, #2
 8008664:	d902      	bls.n	800866c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8008666:	2303      	movs	r3, #3
 8008668:	74fb      	strb	r3, [r7, #19]
        break;
 800866a:	e005      	b.n	8008678 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800866c:	4b30      	ldr	r3, [pc, #192]	; (8008730 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008674:	2b00      	cmp	r3, #0
 8008676:	d0ef      	beq.n	8008658 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8008678:	7cfb      	ldrb	r3, [r7, #19]
 800867a:	2b00      	cmp	r3, #0
 800867c:	d15a      	bne.n	8008734 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800867e:	4b2b      	ldr	r3, [pc, #172]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8008680:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008684:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008688:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800868a:	697b      	ldr	r3, [r7, #20]
 800868c:	2b00      	cmp	r3, #0
 800868e:	d01e      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008694:	697a      	ldr	r2, [r7, #20]
 8008696:	429a      	cmp	r2, r3
 8008698:	d019      	beq.n	80086ce <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800869a:	4b24      	ldr	r3, [pc, #144]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800869c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80086a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80086a6:	4b21      	ldr	r3, [pc, #132]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086ac:	4a1f      	ldr	r2, [pc, #124]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80086b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80086b6:	4b1d      	ldr	r3, [pc, #116]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086bc:	4a1b      	ldr	r2, [pc, #108]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80086c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80086c6:	4a19      	ldr	r2, [pc, #100]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086c8:	697b      	ldr	r3, [r7, #20]
 80086ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80086ce:	697b      	ldr	r3, [r7, #20]
 80086d0:	f003 0301 	and.w	r3, r3, #1
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d016      	beq.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d8:	f7fb fc94 	bl	8004004 <HAL_GetTick>
 80086dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086de:	e00b      	b.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80086e0:	f7fb fc90 	bl	8004004 <HAL_GetTick>
 80086e4:	4602      	mov	r2, r0
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	1ad3      	subs	r3, r2, r3
 80086ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d902      	bls.n	80086f8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80086f2:	2303      	movs	r3, #3
 80086f4:	74fb      	strb	r3, [r7, #19]
            break;
 80086f6:	e006      	b.n	8008706 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80086f8:	4b0c      	ldr	r3, [pc, #48]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80086fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80086fe:	f003 0302 	and.w	r3, r3, #2
 8008702:	2b00      	cmp	r3, #0
 8008704:	d0ec      	beq.n	80086e0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8008706:	7cfb      	ldrb	r3, [r7, #19]
 8008708:	2b00      	cmp	r3, #0
 800870a:	d10b      	bne.n	8008724 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800870c:	4b07      	ldr	r3, [pc, #28]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800870e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008712:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800871a:	4904      	ldr	r1, [pc, #16]	; (800872c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800871c:	4313      	orrs	r3, r2
 800871e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8008722:	e009      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8008724:	7cfb      	ldrb	r3, [r7, #19]
 8008726:	74bb      	strb	r3, [r7, #18]
 8008728:	e006      	b.n	8008738 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800872a:	bf00      	nop
 800872c:	40021000 	.word	0x40021000
 8008730:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8008734:	7cfb      	ldrb	r3, [r7, #19]
 8008736:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008738:	7c7b      	ldrb	r3, [r7, #17]
 800873a:	2b01      	cmp	r3, #1
 800873c:	d105      	bne.n	800874a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800873e:	4b8a      	ldr	r3, [pc, #552]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008742:	4a89      	ldr	r2, [pc, #548]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008744:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008748:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	f003 0301 	and.w	r3, r3, #1
 8008752:	2b00      	cmp	r3, #0
 8008754:	d00a      	beq.n	800876c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8008756:	4b84      	ldr	r3, [pc, #528]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008758:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800875c:	f023 0203 	bic.w	r2, r3, #3
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	6a1b      	ldr	r3, [r3, #32]
 8008764:	4980      	ldr	r1, [pc, #512]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008766:	4313      	orrs	r3, r2
 8008768:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	681b      	ldr	r3, [r3, #0]
 8008770:	f003 0302 	and.w	r3, r3, #2
 8008774:	2b00      	cmp	r3, #0
 8008776:	d00a      	beq.n	800878e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8008778:	4b7b      	ldr	r3, [pc, #492]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800877a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800877e:	f023 020c 	bic.w	r2, r3, #12
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008786:	4978      	ldr	r1, [pc, #480]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008788:	4313      	orrs	r3, r2
 800878a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f003 0320 	and.w	r3, r3, #32
 8008796:	2b00      	cmp	r3, #0
 8008798:	d00a      	beq.n	80087b0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800879a:	4b73      	ldr	r3, [pc, #460]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800879c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80087a8:	496f      	ldr	r1, [pc, #444]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80087aa:	4313      	orrs	r3, r2
 80087ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80087b0:	687b      	ldr	r3, [r7, #4]
 80087b2:	681b      	ldr	r3, [r3, #0]
 80087b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d00a      	beq.n	80087d2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80087bc:	4b6a      	ldr	r3, [pc, #424]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80087be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087c2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80087ca:	4967      	ldr	r1, [pc, #412]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80087cc:	4313      	orrs	r3, r2
 80087ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d00a      	beq.n	80087f4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80087de:	4b62      	ldr	r3, [pc, #392]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80087e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087e4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	495e      	ldr	r1, [pc, #376]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80087ee:	4313      	orrs	r3, r2
 80087f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80087f4:	687b      	ldr	r3, [r7, #4]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d00a      	beq.n	8008816 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8008800:	4b59      	ldr	r3, [pc, #356]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008802:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008806:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800880e:	4956      	ldr	r1, [pc, #344]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008810:	4313      	orrs	r3, r2
 8008812:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8008816:	687b      	ldr	r3, [r7, #4]
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800881e:	2b00      	cmp	r3, #0
 8008820:	d00a      	beq.n	8008838 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8008822:	4b51      	ldr	r3, [pc, #324]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008828:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008830:	494d      	ldr	r1, [pc, #308]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008832:	4313      	orrs	r3, r2
 8008834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	681b      	ldr	r3, [r3, #0]
 800883c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8008840:	2b00      	cmp	r3, #0
 8008842:	d028      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8008844:	4b48      	ldr	r3, [pc, #288]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800884a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800884e:	687b      	ldr	r3, [r7, #4]
 8008850:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008852:	4945      	ldr	r1, [pc, #276]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008854:	4313      	orrs	r3, r2
 8008856:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800885e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8008862:	d106      	bne.n	8008872 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8008864:	4b40      	ldr	r3, [pc, #256]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008866:	68db      	ldr	r3, [r3, #12]
 8008868:	4a3f      	ldr	r2, [pc, #252]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800886a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800886e:	60d3      	str	r3, [r2, #12]
 8008870:	e011      	b.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800887a:	d10c      	bne.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	3304      	adds	r3, #4
 8008880:	2101      	movs	r1, #1
 8008882:	4618      	mov	r0, r3
 8008884:	f000 f882 	bl	800898c <RCCEx_PLLSAI1_Config>
 8008888:	4603      	mov	r3, r0
 800888a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800888c:	7cfb      	ldrb	r3, [r7, #19]
 800888e:	2b00      	cmp	r3, #0
 8008890:	d001      	beq.n	8008896 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8008892:	7cfb      	ldrb	r3, [r7, #19]
 8008894:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800889e:	2b00      	cmp	r3, #0
 80088a0:	d028      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80088a2:	4b31      	ldr	r3, [pc, #196]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80088a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088a8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088b0:	492d      	ldr	r1, [pc, #180]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80088b2:	4313      	orrs	r3, r2
 80088b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80088c0:	d106      	bne.n	80088d0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80088c2:	4b29      	ldr	r3, [pc, #164]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80088c4:	68db      	ldr	r3, [r3, #12]
 80088c6:	4a28      	ldr	r2, [pc, #160]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80088c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80088cc:	60d3      	str	r3, [r2, #12]
 80088ce:	e011      	b.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80088d8:	d10c      	bne.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	3304      	adds	r3, #4
 80088de:	2101      	movs	r1, #1
 80088e0:	4618      	mov	r0, r3
 80088e2:	f000 f853 	bl	800898c <RCCEx_PLLSAI1_Config>
 80088e6:	4603      	mov	r3, r0
 80088e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80088ea:	7cfb      	ldrb	r3, [r7, #19]
 80088ec:	2b00      	cmp	r3, #0
 80088ee:	d001      	beq.n	80088f4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80088f0:	7cfb      	ldrb	r3, [r7, #19]
 80088f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80088fc:	2b00      	cmp	r3, #0
 80088fe:	d01c      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8008900:	4b19      	ldr	r3, [pc, #100]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008902:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008906:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800890e:	4916      	ldr	r1, [pc, #88]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008910:	4313      	orrs	r3, r2
 8008912:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8008916:	687b      	ldr	r3, [r7, #4]
 8008918:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800891a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800891e:	d10c      	bne.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	3304      	adds	r3, #4
 8008924:	2102      	movs	r1, #2
 8008926:	4618      	mov	r0, r3
 8008928:	f000 f830 	bl	800898c <RCCEx_PLLSAI1_Config>
 800892c:	4603      	mov	r3, r0
 800892e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8008930:	7cfb      	ldrb	r3, [r7, #19]
 8008932:	2b00      	cmp	r3, #0
 8008934:	d001      	beq.n	800893a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8008936:	7cfb      	ldrb	r3, [r7, #19]
 8008938:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800893a:	687b      	ldr	r3, [r7, #4]
 800893c:	681b      	ldr	r3, [r3, #0]
 800893e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008942:	2b00      	cmp	r3, #0
 8008944:	d00a      	beq.n	800895c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8008946:	4b08      	ldr	r3, [pc, #32]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008948:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800894c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008954:	4904      	ldr	r1, [pc, #16]	; (8008968 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8008956:	4313      	orrs	r3, r2
 8008958:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800895c:	7cbb      	ldrb	r3, [r7, #18]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3718      	adds	r7, #24
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}
 8008966:	bf00      	nop
 8008968:	40021000 	.word	0x40021000

0800896c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800896c:	b480      	push	{r7}
 800896e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8008970:	4b05      	ldr	r3, [pc, #20]	; (8008988 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a04      	ldr	r2, [pc, #16]	; (8008988 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8008976:	f043 0304 	orr.w	r3, r3, #4
 800897a:	6013      	str	r3, [r2, #0]
}
 800897c:	bf00      	nop
 800897e:	46bd      	mov	sp, r7
 8008980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008984:	4770      	bx	lr
 8008986:	bf00      	nop
 8008988:	40021000 	.word	0x40021000

0800898c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800898c:	b580      	push	{r7, lr}
 800898e:	b084      	sub	sp, #16
 8008990:	af00      	add	r7, sp, #0
 8008992:	6078      	str	r0, [r7, #4]
 8008994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8008996:	2300      	movs	r3, #0
 8008998:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800899a:	4b74      	ldr	r3, [pc, #464]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 800899c:	68db      	ldr	r3, [r3, #12]
 800899e:	f003 0303 	and.w	r3, r3, #3
 80089a2:	2b00      	cmp	r3, #0
 80089a4:	d018      	beq.n	80089d8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80089a6:	4b71      	ldr	r3, [pc, #452]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80089a8:	68db      	ldr	r3, [r3, #12]
 80089aa:	f003 0203 	and.w	r2, r3, #3
 80089ae:	687b      	ldr	r3, [r7, #4]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	429a      	cmp	r2, r3
 80089b4:	d10d      	bne.n	80089d2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	681b      	ldr	r3, [r3, #0]
       ||
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d009      	beq.n	80089d2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80089be:	4b6b      	ldr	r3, [pc, #428]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80089c0:	68db      	ldr	r3, [r3, #12]
 80089c2:	091b      	lsrs	r3, r3, #4
 80089c4:	f003 0307 	and.w	r3, r3, #7
 80089c8:	1c5a      	adds	r2, r3, #1
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
       ||
 80089ce:	429a      	cmp	r2, r3
 80089d0:	d047      	beq.n	8008a62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80089d2:	2301      	movs	r3, #1
 80089d4:	73fb      	strb	r3, [r7, #15]
 80089d6:	e044      	b.n	8008a62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	2b03      	cmp	r3, #3
 80089de:	d018      	beq.n	8008a12 <RCCEx_PLLSAI1_Config+0x86>
 80089e0:	2b03      	cmp	r3, #3
 80089e2:	d825      	bhi.n	8008a30 <RCCEx_PLLSAI1_Config+0xa4>
 80089e4:	2b01      	cmp	r3, #1
 80089e6:	d002      	beq.n	80089ee <RCCEx_PLLSAI1_Config+0x62>
 80089e8:	2b02      	cmp	r3, #2
 80089ea:	d009      	beq.n	8008a00 <RCCEx_PLLSAI1_Config+0x74>
 80089ec:	e020      	b.n	8008a30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80089ee:	4b5f      	ldr	r3, [pc, #380]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	f003 0302 	and.w	r3, r3, #2
 80089f6:	2b00      	cmp	r3, #0
 80089f8:	d11d      	bne.n	8008a36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80089fa:	2301      	movs	r3, #1
 80089fc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80089fe:	e01a      	b.n	8008a36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8008a00:	4b5a      	ldr	r3, [pc, #360]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008a08:	2b00      	cmp	r3, #0
 8008a0a:	d116      	bne.n	8008a3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8008a0c:	2301      	movs	r3, #1
 8008a0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008a10:	e013      	b.n	8008a3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8008a12:	4b56      	ldr	r3, [pc, #344]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a14:	681b      	ldr	r3, [r3, #0]
 8008a16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a1a:	2b00      	cmp	r3, #0
 8008a1c:	d10f      	bne.n	8008a3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8008a1e:	4b53      	ldr	r3, [pc, #332]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a20:	681b      	ldr	r3, [r3, #0]
 8008a22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d109      	bne.n	8008a3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8008a2a:	2301      	movs	r3, #1
 8008a2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8008a2e:	e006      	b.n	8008a3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8008a30:	2301      	movs	r3, #1
 8008a32:	73fb      	strb	r3, [r7, #15]
      break;
 8008a34:	e004      	b.n	8008a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008a36:	bf00      	nop
 8008a38:	e002      	b.n	8008a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008a3a:	bf00      	nop
 8008a3c:	e000      	b.n	8008a40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8008a3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8008a40:	7bfb      	ldrb	r3, [r7, #15]
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	d10d      	bne.n	8008a62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8008a46:	4b49      	ldr	r3, [pc, #292]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a48:	68db      	ldr	r3, [r3, #12]
 8008a4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8008a4e:	687b      	ldr	r3, [r7, #4]
 8008a50:	6819      	ldr	r1, [r3, #0]
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	685b      	ldr	r3, [r3, #4]
 8008a56:	3b01      	subs	r3, #1
 8008a58:	011b      	lsls	r3, r3, #4
 8008a5a:	430b      	orrs	r3, r1
 8008a5c:	4943      	ldr	r1, [pc, #268]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a5e:	4313      	orrs	r3, r2
 8008a60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8008a62:	7bfb      	ldrb	r3, [r7, #15]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d17c      	bne.n	8008b62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8008a68:	4b40      	ldr	r3, [pc, #256]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	4a3f      	ldr	r2, [pc, #252]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8008a72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008a74:	f7fb fac6 	bl	8004004 <HAL_GetTick>
 8008a78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008a7a:	e009      	b.n	8008a90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008a7c:	f7fb fac2 	bl	8004004 <HAL_GetTick>
 8008a80:	4602      	mov	r2, r0
 8008a82:	68bb      	ldr	r3, [r7, #8]
 8008a84:	1ad3      	subs	r3, r2, r3
 8008a86:	2b02      	cmp	r3, #2
 8008a88:	d902      	bls.n	8008a90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8008a8a:	2303      	movs	r3, #3
 8008a8c:	73fb      	strb	r3, [r7, #15]
        break;
 8008a8e:	e005      	b.n	8008a9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8008a90:	4b36      	ldr	r3, [pc, #216]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d1ef      	bne.n	8008a7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8008a9c:	7bfb      	ldrb	r3, [r7, #15]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d15f      	bne.n	8008b62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8008aa2:	683b      	ldr	r3, [r7, #0]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d110      	bne.n	8008aca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008aa8:	4b30      	ldr	r3, [pc, #192]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008aaa:	691b      	ldr	r3, [r3, #16]
 8008aac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8008ab0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008ab4:	687a      	ldr	r2, [r7, #4]
 8008ab6:	6892      	ldr	r2, [r2, #8]
 8008ab8:	0211      	lsls	r1, r2, #8
 8008aba:	687a      	ldr	r2, [r7, #4]
 8008abc:	68d2      	ldr	r2, [r2, #12]
 8008abe:	06d2      	lsls	r2, r2, #27
 8008ac0:	430a      	orrs	r2, r1
 8008ac2:	492a      	ldr	r1, [pc, #168]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ac4:	4313      	orrs	r3, r2
 8008ac6:	610b      	str	r3, [r1, #16]
 8008ac8:	e027      	b.n	8008b1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8008aca:	683b      	ldr	r3, [r7, #0]
 8008acc:	2b01      	cmp	r3, #1
 8008ace:	d112      	bne.n	8008af6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008ad0:	4b26      	ldr	r3, [pc, #152]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008ad2:	691b      	ldr	r3, [r3, #16]
 8008ad4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8008ad8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008adc:	687a      	ldr	r2, [r7, #4]
 8008ade:	6892      	ldr	r2, [r2, #8]
 8008ae0:	0211      	lsls	r1, r2, #8
 8008ae2:	687a      	ldr	r2, [r7, #4]
 8008ae4:	6912      	ldr	r2, [r2, #16]
 8008ae6:	0852      	lsrs	r2, r2, #1
 8008ae8:	3a01      	subs	r2, #1
 8008aea:	0552      	lsls	r2, r2, #21
 8008aec:	430a      	orrs	r2, r1
 8008aee:	491f      	ldr	r1, [pc, #124]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008af0:	4313      	orrs	r3, r2
 8008af2:	610b      	str	r3, [r1, #16]
 8008af4:	e011      	b.n	8008b1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8008af6:	4b1d      	ldr	r3, [pc, #116]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008af8:	691b      	ldr	r3, [r3, #16]
 8008afa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8008afe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8008b02:	687a      	ldr	r2, [r7, #4]
 8008b04:	6892      	ldr	r2, [r2, #8]
 8008b06:	0211      	lsls	r1, r2, #8
 8008b08:	687a      	ldr	r2, [r7, #4]
 8008b0a:	6952      	ldr	r2, [r2, #20]
 8008b0c:	0852      	lsrs	r2, r2, #1
 8008b0e:	3a01      	subs	r2, #1
 8008b10:	0652      	lsls	r2, r2, #25
 8008b12:	430a      	orrs	r2, r1
 8008b14:	4915      	ldr	r1, [pc, #84]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b16:	4313      	orrs	r3, r2
 8008b18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8008b1a:	4b14      	ldr	r3, [pc, #80]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	4a13      	ldr	r2, [pc, #76]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8008b24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008b26:	f7fb fa6d 	bl	8004004 <HAL_GetTick>
 8008b2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008b2c:	e009      	b.n	8008b42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8008b2e:	f7fb fa69 	bl	8004004 <HAL_GetTick>
 8008b32:	4602      	mov	r2, r0
 8008b34:	68bb      	ldr	r3, [r7, #8]
 8008b36:	1ad3      	subs	r3, r2, r3
 8008b38:	2b02      	cmp	r3, #2
 8008b3a:	d902      	bls.n	8008b42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8008b3c:	2303      	movs	r3, #3
 8008b3e:	73fb      	strb	r3, [r7, #15]
          break;
 8008b40:	e005      	b.n	8008b4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8008b42:	4b0a      	ldr	r3, [pc, #40]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8008b4a:	2b00      	cmp	r3, #0
 8008b4c:	d0ef      	beq.n	8008b2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8008b4e:	7bfb      	ldrb	r3, [r7, #15]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d106      	bne.n	8008b62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8008b54:	4b05      	ldr	r3, [pc, #20]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b56:	691a      	ldr	r2, [r3, #16]
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	699b      	ldr	r3, [r3, #24]
 8008b5c:	4903      	ldr	r1, [pc, #12]	; (8008b6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8008b5e:	4313      	orrs	r3, r2
 8008b60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8008b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8008b64:	4618      	mov	r0, r3
 8008b66:	3710      	adds	r7, #16
 8008b68:	46bd      	mov	sp, r7
 8008b6a:	bd80      	pop	{r7, pc}
 8008b6c:	40021000 	.word	0x40021000

08008b70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b70:	b580      	push	{r7, lr}
 8008b72:	b082      	sub	sp, #8
 8008b74:	af00      	add	r7, sp, #0
 8008b76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d101      	bne.n	8008b82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b7e:	2301      	movs	r3, #1
 8008b80:	e049      	b.n	8008c16 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b88:	b2db      	uxtb	r3, r3
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d106      	bne.n	8008b9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b8e:	687b      	ldr	r3, [r7, #4]
 8008b90:	2200      	movs	r2, #0
 8008b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b96:	6878      	ldr	r0, [r7, #4]
 8008b98:	f7fb f848 	bl	8003c2c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	2202      	movs	r2, #2
 8008ba0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681a      	ldr	r2, [r3, #0]
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	3304      	adds	r3, #4
 8008bac:	4619      	mov	r1, r3
 8008bae:	4610      	mov	r0, r2
 8008bb0:	f000 fae6 	bl	8009180 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2201      	movs	r2, #1
 8008bb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2201      	movs	r2, #1
 8008bc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	2201      	movs	r2, #1
 8008bc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	2201      	movs	r2, #1
 8008bd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	2201      	movs	r2, #1
 8008bd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8008bdc:	687b      	ldr	r3, [r7, #4]
 8008bde:	2201      	movs	r2, #1
 8008be0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	2201      	movs	r2, #1
 8008be8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2201      	movs	r2, #1
 8008bf0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008bf4:	687b      	ldr	r3, [r7, #4]
 8008bf6:	2201      	movs	r2, #1
 8008bf8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	2201      	movs	r2, #1
 8008c00:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2201      	movs	r2, #1
 8008c08:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	2201      	movs	r2, #1
 8008c10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008c14:	2300      	movs	r3, #0
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3708      	adds	r7, #8
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
	...

08008c20 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008c20:	b480      	push	{r7}
 8008c22:	b085      	sub	sp, #20
 8008c24:	af00      	add	r7, sp, #0
 8008c26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c2e:	b2db      	uxtb	r3, r3
 8008c30:	2b01      	cmp	r3, #1
 8008c32:	d001      	beq.n	8008c38 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008c34:	2301      	movs	r3, #1
 8008c36:	e033      	b.n	8008ca0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	2202      	movs	r2, #2
 8008c3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	4a19      	ldr	r2, [pc, #100]	; (8008cac <HAL_TIM_Base_Start+0x8c>)
 8008c46:	4293      	cmp	r3, r2
 8008c48:	d009      	beq.n	8008c5e <HAL_TIM_Base_Start+0x3e>
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008c52:	d004      	beq.n	8008c5e <HAL_TIM_Base_Start+0x3e>
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	4a15      	ldr	r2, [pc, #84]	; (8008cb0 <HAL_TIM_Base_Start+0x90>)
 8008c5a:	4293      	cmp	r3, r2
 8008c5c:	d115      	bne.n	8008c8a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	689a      	ldr	r2, [r3, #8]
 8008c64:	4b13      	ldr	r3, [pc, #76]	; (8008cb4 <HAL_TIM_Base_Start+0x94>)
 8008c66:	4013      	ands	r3, r2
 8008c68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c6a:	68fb      	ldr	r3, [r7, #12]
 8008c6c:	2b06      	cmp	r3, #6
 8008c6e:	d015      	beq.n	8008c9c <HAL_TIM_Base_Start+0x7c>
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008c76:	d011      	beq.n	8008c9c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	681a      	ldr	r2, [r3, #0]
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	681b      	ldr	r3, [r3, #0]
 8008c82:	f042 0201 	orr.w	r2, r2, #1
 8008c86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c88:	e008      	b.n	8008c9c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	681a      	ldr	r2, [r3, #0]
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	681b      	ldr	r3, [r3, #0]
 8008c94:	f042 0201 	orr.w	r2, r2, #1
 8008c98:	601a      	str	r2, [r3, #0]
 8008c9a:	e000      	b.n	8008c9e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c9c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008c9e:	2300      	movs	r3, #0
}
 8008ca0:	4618      	mov	r0, r3
 8008ca2:	3714      	adds	r7, #20
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr
 8008cac:	40012c00 	.word	0x40012c00
 8008cb0:	40014000 	.word	0x40014000
 8008cb4:	00010007 	.word	0x00010007

08008cb8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008cb8:	b480      	push	{r7}
 8008cba:	b085      	sub	sp, #20
 8008cbc:	af00      	add	r7, sp, #0
 8008cbe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008cc6:	b2db      	uxtb	r3, r3
 8008cc8:	2b01      	cmp	r3, #1
 8008cca:	d001      	beq.n	8008cd0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ccc:	2301      	movs	r3, #1
 8008cce:	e03b      	b.n	8008d48 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	2202      	movs	r2, #2
 8008cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68da      	ldr	r2, [r3, #12]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f042 0201 	orr.w	r2, r2, #1
 8008ce6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a19      	ldr	r2, [pc, #100]	; (8008d54 <HAL_TIM_Base_Start_IT+0x9c>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d009      	beq.n	8008d06 <HAL_TIM_Base_Start_IT+0x4e>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cfa:	d004      	beq.n	8008d06 <HAL_TIM_Base_Start_IT+0x4e>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a15      	ldr	r2, [pc, #84]	; (8008d58 <HAL_TIM_Base_Start_IT+0xa0>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d115      	bne.n	8008d32 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	689a      	ldr	r2, [r3, #8]
 8008d0c:	4b13      	ldr	r3, [pc, #76]	; (8008d5c <HAL_TIM_Base_Start_IT+0xa4>)
 8008d0e:	4013      	ands	r3, r2
 8008d10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d12:	68fb      	ldr	r3, [r7, #12]
 8008d14:	2b06      	cmp	r3, #6
 8008d16:	d015      	beq.n	8008d44 <HAL_TIM_Base_Start_IT+0x8c>
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d1e:	d011      	beq.n	8008d44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	681a      	ldr	r2, [r3, #0]
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	681b      	ldr	r3, [r3, #0]
 8008d2a:	f042 0201 	orr.w	r2, r2, #1
 8008d2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d30:	e008      	b.n	8008d44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	681a      	ldr	r2, [r3, #0]
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f042 0201 	orr.w	r2, r2, #1
 8008d40:	601a      	str	r2, [r3, #0]
 8008d42:	e000      	b.n	8008d46 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008d44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008d46:	2300      	movs	r3, #0
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3714      	adds	r7, #20
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d52:	4770      	bx	lr
 8008d54:	40012c00 	.word	0x40012c00
 8008d58:	40014000 	.word	0x40014000
 8008d5c:	00010007 	.word	0x00010007

08008d60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008d60:	b580      	push	{r7, lr}
 8008d62:	b082      	sub	sp, #8
 8008d64:	af00      	add	r7, sp, #0
 8008d66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	691b      	ldr	r3, [r3, #16]
 8008d6e:	f003 0302 	and.w	r3, r3, #2
 8008d72:	2b02      	cmp	r3, #2
 8008d74:	d122      	bne.n	8008dbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	68db      	ldr	r3, [r3, #12]
 8008d7c:	f003 0302 	and.w	r3, r3, #2
 8008d80:	2b02      	cmp	r3, #2
 8008d82:	d11b      	bne.n	8008dbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	f06f 0202 	mvn.w	r2, #2
 8008d8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2201      	movs	r2, #1
 8008d92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	699b      	ldr	r3, [r3, #24]
 8008d9a:	f003 0303 	and.w	r3, r3, #3
 8008d9e:	2b00      	cmp	r3, #0
 8008da0:	d003      	beq.n	8008daa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008da2:	6878      	ldr	r0, [r7, #4]
 8008da4:	f000 f9ce 	bl	8009144 <HAL_TIM_IC_CaptureCallback>
 8008da8:	e005      	b.n	8008db6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008daa:	6878      	ldr	r0, [r7, #4]
 8008dac:	f000 f9c0 	bl	8009130 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008db0:	6878      	ldr	r0, [r7, #4]
 8008db2:	f000 f9d1 	bl	8009158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	681b      	ldr	r3, [r3, #0]
 8008dc0:	691b      	ldr	r3, [r3, #16]
 8008dc2:	f003 0304 	and.w	r3, r3, #4
 8008dc6:	2b04      	cmp	r3, #4
 8008dc8:	d122      	bne.n	8008e10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	68db      	ldr	r3, [r3, #12]
 8008dd0:	f003 0304 	and.w	r3, r3, #4
 8008dd4:	2b04      	cmp	r3, #4
 8008dd6:	d11b      	bne.n	8008e10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f06f 0204 	mvn.w	r2, #4
 8008de0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2202      	movs	r2, #2
 8008de6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008df2:	2b00      	cmp	r3, #0
 8008df4:	d003      	beq.n	8008dfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008df6:	6878      	ldr	r0, [r7, #4]
 8008df8:	f000 f9a4 	bl	8009144 <HAL_TIM_IC_CaptureCallback>
 8008dfc:	e005      	b.n	8008e0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dfe:	6878      	ldr	r0, [r7, #4]
 8008e00:	f000 f996 	bl	8009130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e04:	6878      	ldr	r0, [r7, #4]
 8008e06:	f000 f9a7 	bl	8009158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e0a:	687b      	ldr	r3, [r7, #4]
 8008e0c:	2200      	movs	r2, #0
 8008e0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	691b      	ldr	r3, [r3, #16]
 8008e16:	f003 0308 	and.w	r3, r3, #8
 8008e1a:	2b08      	cmp	r3, #8
 8008e1c:	d122      	bne.n	8008e64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	68db      	ldr	r3, [r3, #12]
 8008e24:	f003 0308 	and.w	r3, r3, #8
 8008e28:	2b08      	cmp	r3, #8
 8008e2a:	d11b      	bne.n	8008e64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	f06f 0208 	mvn.w	r2, #8
 8008e34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	2204      	movs	r2, #4
 8008e3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	69db      	ldr	r3, [r3, #28]
 8008e42:	f003 0303 	and.w	r3, r3, #3
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d003      	beq.n	8008e52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e4a:	6878      	ldr	r0, [r7, #4]
 8008e4c:	f000 f97a 	bl	8009144 <HAL_TIM_IC_CaptureCallback>
 8008e50:	e005      	b.n	8008e5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e52:	6878      	ldr	r0, [r7, #4]
 8008e54:	f000 f96c 	bl	8009130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e58:	6878      	ldr	r0, [r7, #4]
 8008e5a:	f000 f97d 	bl	8009158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	2200      	movs	r2, #0
 8008e62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	f003 0310 	and.w	r3, r3, #16
 8008e6e:	2b10      	cmp	r3, #16
 8008e70:	d122      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	681b      	ldr	r3, [r3, #0]
 8008e76:	68db      	ldr	r3, [r3, #12]
 8008e78:	f003 0310 	and.w	r3, r3, #16
 8008e7c:	2b10      	cmp	r3, #16
 8008e7e:	d11b      	bne.n	8008eb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f06f 0210 	mvn.w	r2, #16
 8008e88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	2208      	movs	r2, #8
 8008e8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	69db      	ldr	r3, [r3, #28]
 8008e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d003      	beq.n	8008ea6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e9e:	6878      	ldr	r0, [r7, #4]
 8008ea0:	f000 f950 	bl	8009144 <HAL_TIM_IC_CaptureCallback>
 8008ea4:	e005      	b.n	8008eb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ea6:	6878      	ldr	r0, [r7, #4]
 8008ea8:	f000 f942 	bl	8009130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008eac:	6878      	ldr	r0, [r7, #4]
 8008eae:	f000 f953 	bl	8009158 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	2200      	movs	r2, #0
 8008eb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	681b      	ldr	r3, [r3, #0]
 8008ebc:	691b      	ldr	r3, [r3, #16]
 8008ebe:	f003 0301 	and.w	r3, r3, #1
 8008ec2:	2b01      	cmp	r3, #1
 8008ec4:	d10e      	bne.n	8008ee4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68db      	ldr	r3, [r3, #12]
 8008ecc:	f003 0301 	and.w	r3, r3, #1
 8008ed0:	2b01      	cmp	r3, #1
 8008ed2:	d107      	bne.n	8008ee4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	f06f 0201 	mvn.w	r2, #1
 8008edc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008ede:	6878      	ldr	r0, [r7, #4]
 8008ee0:	f7fa fcbc 	bl	800385c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	681b      	ldr	r3, [r3, #0]
 8008ee8:	691b      	ldr	r3, [r3, #16]
 8008eea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008eee:	2b80      	cmp	r3, #128	; 0x80
 8008ef0:	d10e      	bne.n	8008f10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	68db      	ldr	r3, [r3, #12]
 8008ef8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008efc:	2b80      	cmp	r3, #128	; 0x80
 8008efe:	d107      	bne.n	8008f10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008f08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f000 faa6 	bl	800945c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	691b      	ldr	r3, [r3, #16]
 8008f16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008f1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008f1e:	d10e      	bne.n	8008f3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	68db      	ldr	r3, [r3, #12]
 8008f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f2a:	2b80      	cmp	r3, #128	; 0x80
 8008f2c:	d107      	bne.n	8008f3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008f36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008f38:	6878      	ldr	r0, [r7, #4]
 8008f3a:	f000 fa99 	bl	8009470 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	681b      	ldr	r3, [r3, #0]
 8008f42:	691b      	ldr	r3, [r3, #16]
 8008f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f48:	2b40      	cmp	r3, #64	; 0x40
 8008f4a:	d10e      	bne.n	8008f6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008f4c:	687b      	ldr	r3, [r7, #4]
 8008f4e:	681b      	ldr	r3, [r3, #0]
 8008f50:	68db      	ldr	r3, [r3, #12]
 8008f52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008f56:	2b40      	cmp	r3, #64	; 0x40
 8008f58:	d107      	bne.n	8008f6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008f5a:	687b      	ldr	r3, [r7, #4]
 8008f5c:	681b      	ldr	r3, [r3, #0]
 8008f5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008f62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008f64:	6878      	ldr	r0, [r7, #4]
 8008f66:	f000 f901 	bl	800916c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	681b      	ldr	r3, [r3, #0]
 8008f6e:	691b      	ldr	r3, [r3, #16]
 8008f70:	f003 0320 	and.w	r3, r3, #32
 8008f74:	2b20      	cmp	r3, #32
 8008f76:	d10e      	bne.n	8008f96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68db      	ldr	r3, [r3, #12]
 8008f7e:	f003 0320 	and.w	r3, r3, #32
 8008f82:	2b20      	cmp	r3, #32
 8008f84:	d107      	bne.n	8008f96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f06f 0220 	mvn.w	r2, #32
 8008f8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008f90:	6878      	ldr	r0, [r7, #4]
 8008f92:	f000 fa59 	bl	8009448 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008f96:	bf00      	nop
 8008f98:	3708      	adds	r7, #8
 8008f9a:	46bd      	mov	sp, r7
 8008f9c:	bd80      	pop	{r7, pc}

08008f9e <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008f9e:	b580      	push	{r7, lr}
 8008fa0:	b084      	sub	sp, #16
 8008fa2:	af00      	add	r7, sp, #0
 8008fa4:	6078      	str	r0, [r7, #4]
 8008fa6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008fa8:	2300      	movs	r3, #0
 8008faa:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008fb2:	2b01      	cmp	r3, #1
 8008fb4:	d101      	bne.n	8008fba <HAL_TIM_ConfigClockSource+0x1c>
 8008fb6:	2302      	movs	r3, #2
 8008fb8:	e0b6      	b.n	8009128 <HAL_TIM_ConfigClockSource+0x18a>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	2201      	movs	r2, #1
 8008fbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	2202      	movs	r2, #2
 8008fc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	689b      	ldr	r3, [r3, #8]
 8008fd0:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008fd2:	68bb      	ldr	r3, [r7, #8]
 8008fd4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fd8:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008fdc:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008fde:	68bb      	ldr	r3, [r7, #8]
 8008fe0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008fe4:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	68ba      	ldr	r2, [r7, #8]
 8008fec:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ff6:	d03e      	beq.n	8009076 <HAL_TIM_ConfigClockSource+0xd8>
 8008ff8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008ffc:	f200 8087 	bhi.w	800910e <HAL_TIM_ConfigClockSource+0x170>
 8009000:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009004:	f000 8086 	beq.w	8009114 <HAL_TIM_ConfigClockSource+0x176>
 8009008:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800900c:	d87f      	bhi.n	800910e <HAL_TIM_ConfigClockSource+0x170>
 800900e:	2b70      	cmp	r3, #112	; 0x70
 8009010:	d01a      	beq.n	8009048 <HAL_TIM_ConfigClockSource+0xaa>
 8009012:	2b70      	cmp	r3, #112	; 0x70
 8009014:	d87b      	bhi.n	800910e <HAL_TIM_ConfigClockSource+0x170>
 8009016:	2b60      	cmp	r3, #96	; 0x60
 8009018:	d050      	beq.n	80090bc <HAL_TIM_ConfigClockSource+0x11e>
 800901a:	2b60      	cmp	r3, #96	; 0x60
 800901c:	d877      	bhi.n	800910e <HAL_TIM_ConfigClockSource+0x170>
 800901e:	2b50      	cmp	r3, #80	; 0x50
 8009020:	d03c      	beq.n	800909c <HAL_TIM_ConfigClockSource+0xfe>
 8009022:	2b50      	cmp	r3, #80	; 0x50
 8009024:	d873      	bhi.n	800910e <HAL_TIM_ConfigClockSource+0x170>
 8009026:	2b40      	cmp	r3, #64	; 0x40
 8009028:	d058      	beq.n	80090dc <HAL_TIM_ConfigClockSource+0x13e>
 800902a:	2b40      	cmp	r3, #64	; 0x40
 800902c:	d86f      	bhi.n	800910e <HAL_TIM_ConfigClockSource+0x170>
 800902e:	2b30      	cmp	r3, #48	; 0x30
 8009030:	d064      	beq.n	80090fc <HAL_TIM_ConfigClockSource+0x15e>
 8009032:	2b30      	cmp	r3, #48	; 0x30
 8009034:	d86b      	bhi.n	800910e <HAL_TIM_ConfigClockSource+0x170>
 8009036:	2b20      	cmp	r3, #32
 8009038:	d060      	beq.n	80090fc <HAL_TIM_ConfigClockSource+0x15e>
 800903a:	2b20      	cmp	r3, #32
 800903c:	d867      	bhi.n	800910e <HAL_TIM_ConfigClockSource+0x170>
 800903e:	2b00      	cmp	r3, #0
 8009040:	d05c      	beq.n	80090fc <HAL_TIM_ConfigClockSource+0x15e>
 8009042:	2b10      	cmp	r3, #16
 8009044:	d05a      	beq.n	80090fc <HAL_TIM_ConfigClockSource+0x15e>
 8009046:	e062      	b.n	800910e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	6818      	ldr	r0, [r3, #0]
 800904c:	683b      	ldr	r3, [r7, #0]
 800904e:	6899      	ldr	r1, [r3, #8]
 8009050:	683b      	ldr	r3, [r7, #0]
 8009052:	685a      	ldr	r2, [r3, #4]
 8009054:	683b      	ldr	r3, [r7, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f000 f970 	bl	800933c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	689b      	ldr	r3, [r3, #8]
 8009062:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009064:	68bb      	ldr	r3, [r7, #8]
 8009066:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800906a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	68ba      	ldr	r2, [r7, #8]
 8009072:	609a      	str	r2, [r3, #8]
      break;
 8009074:	e04f      	b.n	8009116 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	6818      	ldr	r0, [r3, #0]
 800907a:	683b      	ldr	r3, [r7, #0]
 800907c:	6899      	ldr	r1, [r3, #8]
 800907e:	683b      	ldr	r3, [r7, #0]
 8009080:	685a      	ldr	r2, [r3, #4]
 8009082:	683b      	ldr	r3, [r7, #0]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	f000 f959 	bl	800933c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	689a      	ldr	r2, [r3, #8]
 8009090:	687b      	ldr	r3, [r7, #4]
 8009092:	681b      	ldr	r3, [r3, #0]
 8009094:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009098:	609a      	str	r2, [r3, #8]
      break;
 800909a:	e03c      	b.n	8009116 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	6818      	ldr	r0, [r3, #0]
 80090a0:	683b      	ldr	r3, [r7, #0]
 80090a2:	6859      	ldr	r1, [r3, #4]
 80090a4:	683b      	ldr	r3, [r7, #0]
 80090a6:	68db      	ldr	r3, [r3, #12]
 80090a8:	461a      	mov	r2, r3
 80090aa:	f000 f8cd 	bl	8009248 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2150      	movs	r1, #80	; 0x50
 80090b4:	4618      	mov	r0, r3
 80090b6:	f000 f926 	bl	8009306 <TIM_ITRx_SetConfig>
      break;
 80090ba:	e02c      	b.n	8009116 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	6818      	ldr	r0, [r3, #0]
 80090c0:	683b      	ldr	r3, [r7, #0]
 80090c2:	6859      	ldr	r1, [r3, #4]
 80090c4:	683b      	ldr	r3, [r7, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	461a      	mov	r2, r3
 80090ca:	f000 f8ec 	bl	80092a6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	2160      	movs	r1, #96	; 0x60
 80090d4:	4618      	mov	r0, r3
 80090d6:	f000 f916 	bl	8009306 <TIM_ITRx_SetConfig>
      break;
 80090da:	e01c      	b.n	8009116 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	6818      	ldr	r0, [r3, #0]
 80090e0:	683b      	ldr	r3, [r7, #0]
 80090e2:	6859      	ldr	r1, [r3, #4]
 80090e4:	683b      	ldr	r3, [r7, #0]
 80090e6:	68db      	ldr	r3, [r3, #12]
 80090e8:	461a      	mov	r2, r3
 80090ea:	f000 f8ad 	bl	8009248 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	681b      	ldr	r3, [r3, #0]
 80090f2:	2140      	movs	r1, #64	; 0x40
 80090f4:	4618      	mov	r0, r3
 80090f6:	f000 f906 	bl	8009306 <TIM_ITRx_SetConfig>
      break;
 80090fa:	e00c      	b.n	8009116 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80090fc:	687b      	ldr	r3, [r7, #4]
 80090fe:	681a      	ldr	r2, [r3, #0]
 8009100:	683b      	ldr	r3, [r7, #0]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4619      	mov	r1, r3
 8009106:	4610      	mov	r0, r2
 8009108:	f000 f8fd 	bl	8009306 <TIM_ITRx_SetConfig>
      break;
 800910c:	e003      	b.n	8009116 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800910e:	2301      	movs	r3, #1
 8009110:	73fb      	strb	r3, [r7, #15]
      break;
 8009112:	e000      	b.n	8009116 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8009114:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	2201      	movs	r2, #1
 800911a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009126:	7bfb      	ldrb	r3, [r7, #15]
}
 8009128:	4618      	mov	r0, r3
 800912a:	3710      	adds	r7, #16
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009130:	b480      	push	{r7}
 8009132:	b083      	sub	sp, #12
 8009134:	af00      	add	r7, sp, #0
 8009136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009138:	bf00      	nop
 800913a:	370c      	adds	r7, #12
 800913c:	46bd      	mov	sp, r7
 800913e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009142:	4770      	bx	lr

08009144 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009144:	b480      	push	{r7}
 8009146:	b083      	sub	sp, #12
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800914c:	bf00      	nop
 800914e:	370c      	adds	r7, #12
 8009150:	46bd      	mov	sp, r7
 8009152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009156:	4770      	bx	lr

08009158 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009158:	b480      	push	{r7}
 800915a:	b083      	sub	sp, #12
 800915c:	af00      	add	r7, sp, #0
 800915e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009160:	bf00      	nop
 8009162:	370c      	adds	r7, #12
 8009164:	46bd      	mov	sp, r7
 8009166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800916a:	4770      	bx	lr

0800916c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800916c:	b480      	push	{r7}
 800916e:	b083      	sub	sp, #12
 8009170:	af00      	add	r7, sp, #0
 8009172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009174:	bf00      	nop
 8009176:	370c      	adds	r7, #12
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr

08009180 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009180:	b480      	push	{r7}
 8009182:	b085      	sub	sp, #20
 8009184:	af00      	add	r7, sp, #0
 8009186:	6078      	str	r0, [r7, #4]
 8009188:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	4a2a      	ldr	r2, [pc, #168]	; (800923c <TIM_Base_SetConfig+0xbc>)
 8009194:	4293      	cmp	r3, r2
 8009196:	d003      	beq.n	80091a0 <TIM_Base_SetConfig+0x20>
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800919e:	d108      	bne.n	80091b2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80091a0:	68fb      	ldr	r3, [r7, #12]
 80091a2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80091a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80091a8:	683b      	ldr	r3, [r7, #0]
 80091aa:	685b      	ldr	r3, [r3, #4]
 80091ac:	68fa      	ldr	r2, [r7, #12]
 80091ae:	4313      	orrs	r3, r2
 80091b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	4a21      	ldr	r2, [pc, #132]	; (800923c <TIM_Base_SetConfig+0xbc>)
 80091b6:	4293      	cmp	r3, r2
 80091b8:	d00b      	beq.n	80091d2 <TIM_Base_SetConfig+0x52>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80091c0:	d007      	beq.n	80091d2 <TIM_Base_SetConfig+0x52>
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	4a1e      	ldr	r2, [pc, #120]	; (8009240 <TIM_Base_SetConfig+0xc0>)
 80091c6:	4293      	cmp	r3, r2
 80091c8:	d003      	beq.n	80091d2 <TIM_Base_SetConfig+0x52>
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	4a1d      	ldr	r2, [pc, #116]	; (8009244 <TIM_Base_SetConfig+0xc4>)
 80091ce:	4293      	cmp	r3, r2
 80091d0:	d108      	bne.n	80091e4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80091d8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80091da:	683b      	ldr	r3, [r7, #0]
 80091dc:	68db      	ldr	r3, [r3, #12]
 80091de:	68fa      	ldr	r2, [r7, #12]
 80091e0:	4313      	orrs	r3, r2
 80091e2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80091e4:	68fb      	ldr	r3, [r7, #12]
 80091e6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80091ea:	683b      	ldr	r3, [r7, #0]
 80091ec:	695b      	ldr	r3, [r3, #20]
 80091ee:	4313      	orrs	r3, r2
 80091f0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	68fa      	ldr	r2, [r7, #12]
 80091f6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80091f8:	683b      	ldr	r3, [r7, #0]
 80091fa:	689a      	ldr	r2, [r3, #8]
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009200:	683b      	ldr	r3, [r7, #0]
 8009202:	681a      	ldr	r2, [r3, #0]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	4a0c      	ldr	r2, [pc, #48]	; (800923c <TIM_Base_SetConfig+0xbc>)
 800920c:	4293      	cmp	r3, r2
 800920e:	d007      	beq.n	8009220 <TIM_Base_SetConfig+0xa0>
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	4a0b      	ldr	r2, [pc, #44]	; (8009240 <TIM_Base_SetConfig+0xc0>)
 8009214:	4293      	cmp	r3, r2
 8009216:	d003      	beq.n	8009220 <TIM_Base_SetConfig+0xa0>
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	4a0a      	ldr	r2, [pc, #40]	; (8009244 <TIM_Base_SetConfig+0xc4>)
 800921c:	4293      	cmp	r3, r2
 800921e:	d103      	bne.n	8009228 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009220:	683b      	ldr	r3, [r7, #0]
 8009222:	691a      	ldr	r2, [r3, #16]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	2201      	movs	r2, #1
 800922c:	615a      	str	r2, [r3, #20]
}
 800922e:	bf00      	nop
 8009230:	3714      	adds	r7, #20
 8009232:	46bd      	mov	sp, r7
 8009234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009238:	4770      	bx	lr
 800923a:	bf00      	nop
 800923c:	40012c00 	.word	0x40012c00
 8009240:	40014000 	.word	0x40014000
 8009244:	40014400 	.word	0x40014400

08009248 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009248:	b480      	push	{r7}
 800924a:	b087      	sub	sp, #28
 800924c:	af00      	add	r7, sp, #0
 800924e:	60f8      	str	r0, [r7, #12]
 8009250:	60b9      	str	r1, [r7, #8]
 8009252:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8009254:	68fb      	ldr	r3, [r7, #12]
 8009256:	6a1b      	ldr	r3, [r3, #32]
 8009258:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800925a:	68fb      	ldr	r3, [r7, #12]
 800925c:	6a1b      	ldr	r3, [r3, #32]
 800925e:	f023 0201 	bic.w	r2, r3, #1
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009266:	68fb      	ldr	r3, [r7, #12]
 8009268:	699b      	ldr	r3, [r3, #24]
 800926a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800926c:	693b      	ldr	r3, [r7, #16]
 800926e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009272:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	011b      	lsls	r3, r3, #4
 8009278:	693a      	ldr	r2, [r7, #16]
 800927a:	4313      	orrs	r3, r2
 800927c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800927e:	697b      	ldr	r3, [r7, #20]
 8009280:	f023 030a 	bic.w	r3, r3, #10
 8009284:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8009286:	697a      	ldr	r2, [r7, #20]
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	4313      	orrs	r3, r2
 800928c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800928e:	68fb      	ldr	r3, [r7, #12]
 8009290:	693a      	ldr	r2, [r7, #16]
 8009292:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	697a      	ldr	r2, [r7, #20]
 8009298:	621a      	str	r2, [r3, #32]
}
 800929a:	bf00      	nop
 800929c:	371c      	adds	r7, #28
 800929e:	46bd      	mov	sp, r7
 80092a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a4:	4770      	bx	lr

080092a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80092a6:	b480      	push	{r7}
 80092a8:	b087      	sub	sp, #28
 80092aa:	af00      	add	r7, sp, #0
 80092ac:	60f8      	str	r0, [r7, #12]
 80092ae:	60b9      	str	r1, [r7, #8]
 80092b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80092b2:	68fb      	ldr	r3, [r7, #12]
 80092b4:	6a1b      	ldr	r3, [r3, #32]
 80092b6:	f023 0210 	bic.w	r2, r3, #16
 80092ba:	68fb      	ldr	r3, [r7, #12]
 80092bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	699b      	ldr	r3, [r3, #24]
 80092c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	6a1b      	ldr	r3, [r3, #32]
 80092c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80092ca:	697b      	ldr	r3, [r7, #20]
 80092cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80092d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	031b      	lsls	r3, r3, #12
 80092d6:	697a      	ldr	r2, [r7, #20]
 80092d8:	4313      	orrs	r3, r2
 80092da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80092dc:	693b      	ldr	r3, [r7, #16]
 80092de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80092e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80092e4:	68bb      	ldr	r3, [r7, #8]
 80092e6:	011b      	lsls	r3, r3, #4
 80092e8:	693a      	ldr	r2, [r7, #16]
 80092ea:	4313      	orrs	r3, r2
 80092ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80092ee:	68fb      	ldr	r3, [r7, #12]
 80092f0:	697a      	ldr	r2, [r7, #20]
 80092f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80092f4:	68fb      	ldr	r3, [r7, #12]
 80092f6:	693a      	ldr	r2, [r7, #16]
 80092f8:	621a      	str	r2, [r3, #32]
}
 80092fa:	bf00      	nop
 80092fc:	371c      	adds	r7, #28
 80092fe:	46bd      	mov	sp, r7
 8009300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009304:	4770      	bx	lr

08009306 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8009306:	b480      	push	{r7}
 8009308:	b085      	sub	sp, #20
 800930a:	af00      	add	r7, sp, #0
 800930c:	6078      	str	r0, [r7, #4]
 800930e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	689b      	ldr	r3, [r3, #8]
 8009314:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009316:	68fb      	ldr	r3, [r7, #12]
 8009318:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800931c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800931e:	683a      	ldr	r2, [r7, #0]
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	4313      	orrs	r3, r2
 8009324:	f043 0307 	orr.w	r3, r3, #7
 8009328:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	68fa      	ldr	r2, [r7, #12]
 800932e:	609a      	str	r2, [r3, #8]
}
 8009330:	bf00      	nop
 8009332:	3714      	adds	r7, #20
 8009334:	46bd      	mov	sp, r7
 8009336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933a:	4770      	bx	lr

0800933c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800933c:	b480      	push	{r7}
 800933e:	b087      	sub	sp, #28
 8009340:	af00      	add	r7, sp, #0
 8009342:	60f8      	str	r0, [r7, #12]
 8009344:	60b9      	str	r1, [r7, #8]
 8009346:	607a      	str	r2, [r7, #4]
 8009348:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	689b      	ldr	r3, [r3, #8]
 800934e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009350:	697b      	ldr	r3, [r7, #20]
 8009352:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009356:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009358:	683b      	ldr	r3, [r7, #0]
 800935a:	021a      	lsls	r2, r3, #8
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	431a      	orrs	r2, r3
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	4313      	orrs	r3, r2
 8009364:	697a      	ldr	r2, [r7, #20]
 8009366:	4313      	orrs	r3, r2
 8009368:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	697a      	ldr	r2, [r7, #20]
 800936e:	609a      	str	r2, [r3, #8]
}
 8009370:	bf00      	nop
 8009372:	371c      	adds	r7, #28
 8009374:	46bd      	mov	sp, r7
 8009376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800937a:	4770      	bx	lr

0800937c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800937c:	b480      	push	{r7}
 800937e:	b085      	sub	sp, #20
 8009380:	af00      	add	r7, sp, #0
 8009382:	6078      	str	r0, [r7, #4]
 8009384:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009386:	687b      	ldr	r3, [r7, #4]
 8009388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800938c:	2b01      	cmp	r3, #1
 800938e:	d101      	bne.n	8009394 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009390:	2302      	movs	r3, #2
 8009392:	e04f      	b.n	8009434 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	2201      	movs	r2, #1
 8009398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	2202      	movs	r2, #2
 80093a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	681b      	ldr	r3, [r3, #0]
 80093a8:	685b      	ldr	r3, [r3, #4]
 80093aa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	689b      	ldr	r3, [r3, #8]
 80093b2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	4a21      	ldr	r2, [pc, #132]	; (8009440 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80093ba:	4293      	cmp	r3, r2
 80093bc:	d108      	bne.n	80093d0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80093c4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80093c6:	683b      	ldr	r3, [r7, #0]
 80093c8:	685b      	ldr	r3, [r3, #4]
 80093ca:	68fa      	ldr	r2, [r7, #12]
 80093cc:	4313      	orrs	r3, r2
 80093ce:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80093d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80093d8:	683b      	ldr	r3, [r7, #0]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	68fa      	ldr	r2, [r7, #12]
 80093de:	4313      	orrs	r3, r2
 80093e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	68fa      	ldr	r2, [r7, #12]
 80093e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	4a14      	ldr	r2, [pc, #80]	; (8009440 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80093f0:	4293      	cmp	r3, r2
 80093f2:	d009      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80093fc:	d004      	beq.n	8009408 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	4a10      	ldr	r2, [pc, #64]	; (8009444 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8009404:	4293      	cmp	r3, r2
 8009406:	d10c      	bne.n	8009422 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009408:	68bb      	ldr	r3, [r7, #8]
 800940a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800940e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009410:	683b      	ldr	r3, [r7, #0]
 8009412:	689b      	ldr	r3, [r3, #8]
 8009414:	68ba      	ldr	r2, [r7, #8]
 8009416:	4313      	orrs	r3, r2
 8009418:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	2201      	movs	r2, #1
 8009426:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3714      	adds	r7, #20
 8009438:	46bd      	mov	sp, r7
 800943a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800943e:	4770      	bx	lr
 8009440:	40012c00 	.word	0x40012c00
 8009444:	40014000 	.word	0x40014000

08009448 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009448:	b480      	push	{r7}
 800944a:	b083      	sub	sp, #12
 800944c:	af00      	add	r7, sp, #0
 800944e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009450:	bf00      	nop
 8009452:	370c      	adds	r7, #12
 8009454:	46bd      	mov	sp, r7
 8009456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800945a:	4770      	bx	lr

0800945c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800945c:	b480      	push	{r7}
 800945e:	b083      	sub	sp, #12
 8009460:	af00      	add	r7, sp, #0
 8009462:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009464:	bf00      	nop
 8009466:	370c      	adds	r7, #12
 8009468:	46bd      	mov	sp, r7
 800946a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800946e:	4770      	bx	lr

08009470 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8009470:	b480      	push	{r7}
 8009472:	b083      	sub	sp, #12
 8009474:	af00      	add	r7, sp, #0
 8009476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8009478:	bf00      	nop
 800947a:	370c      	adds	r7, #12
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr

08009484 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009484:	b580      	push	{r7, lr}
 8009486:	b082      	sub	sp, #8
 8009488:	af00      	add	r7, sp, #0
 800948a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	2b00      	cmp	r3, #0
 8009490:	d101      	bne.n	8009496 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009492:	2301      	movs	r3, #1
 8009494:	e040      	b.n	8009518 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800949a:	2b00      	cmp	r3, #0
 800949c:	d106      	bne.n	80094ac <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800949e:	687b      	ldr	r3, [r7, #4]
 80094a0:	2200      	movs	r2, #0
 80094a2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80094a6:	6878      	ldr	r0, [r7, #4]
 80094a8:	f7fa fc0c 	bl	8003cc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	2224      	movs	r2, #36	; 0x24
 80094b0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	681a      	ldr	r2, [r3, #0]
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	f022 0201 	bic.w	r2, r2, #1
 80094c0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80094c2:	6878      	ldr	r0, [r7, #4]
 80094c4:	f000 f8c0 	bl	8009648 <UART_SetConfig>
 80094c8:	4603      	mov	r3, r0
 80094ca:	2b01      	cmp	r3, #1
 80094cc:	d101      	bne.n	80094d2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80094ce:	2301      	movs	r3, #1
 80094d0:	e022      	b.n	8009518 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80094d2:	687b      	ldr	r3, [r7, #4]
 80094d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80094d6:	2b00      	cmp	r3, #0
 80094d8:	d002      	beq.n	80094e0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80094da:	6878      	ldr	r0, [r7, #4]
 80094dc:	f000 fae0 	bl	8009aa0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	685a      	ldr	r2, [r3, #4]
 80094e6:	687b      	ldr	r3, [r7, #4]
 80094e8:	681b      	ldr	r3, [r3, #0]
 80094ea:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80094ee:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	689a      	ldr	r2, [r3, #8]
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80094fe:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009500:	687b      	ldr	r3, [r7, #4]
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	681a      	ldr	r2, [r3, #0]
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	681b      	ldr	r3, [r3, #0]
 800950a:	f042 0201 	orr.w	r2, r2, #1
 800950e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009510:	6878      	ldr	r0, [r7, #4]
 8009512:	f000 fb67 	bl	8009be4 <UART_CheckIdleState>
 8009516:	4603      	mov	r3, r0
}
 8009518:	4618      	mov	r0, r3
 800951a:	3708      	adds	r7, #8
 800951c:	46bd      	mov	sp, r7
 800951e:	bd80      	pop	{r7, pc}

08009520 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009520:	b580      	push	{r7, lr}
 8009522:	b08a      	sub	sp, #40	; 0x28
 8009524:	af02      	add	r7, sp, #8
 8009526:	60f8      	str	r0, [r7, #12]
 8009528:	60b9      	str	r1, [r7, #8]
 800952a:	603b      	str	r3, [r7, #0]
 800952c:	4613      	mov	r3, r2
 800952e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009530:	68fb      	ldr	r3, [r7, #12]
 8009532:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009534:	2b20      	cmp	r3, #32
 8009536:	f040 8082 	bne.w	800963e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	2b00      	cmp	r3, #0
 800953e:	d002      	beq.n	8009546 <HAL_UART_Transmit+0x26>
 8009540:	88fb      	ldrh	r3, [r7, #6]
 8009542:	2b00      	cmp	r3, #0
 8009544:	d101      	bne.n	800954a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009546:	2301      	movs	r3, #1
 8009548:	e07a      	b.n	8009640 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800954a:	68fb      	ldr	r3, [r7, #12]
 800954c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8009550:	2b01      	cmp	r3, #1
 8009552:	d101      	bne.n	8009558 <HAL_UART_Transmit+0x38>
 8009554:	2302      	movs	r3, #2
 8009556:	e073      	b.n	8009640 <HAL_UART_Transmit+0x120>
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	2201      	movs	r2, #1
 800955c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	2200      	movs	r2, #0
 8009564:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	2221      	movs	r2, #33	; 0x21
 800956c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800956e:	f7fa fd49 	bl	8004004 <HAL_GetTick>
 8009572:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	88fa      	ldrh	r2, [r7, #6]
 8009578:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	88fa      	ldrh	r2, [r7, #6]
 8009580:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009584:	68fb      	ldr	r3, [r7, #12]
 8009586:	689b      	ldr	r3, [r3, #8]
 8009588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800958c:	d108      	bne.n	80095a0 <HAL_UART_Transmit+0x80>
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	691b      	ldr	r3, [r3, #16]
 8009592:	2b00      	cmp	r3, #0
 8009594:	d104      	bne.n	80095a0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8009596:	2300      	movs	r3, #0
 8009598:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800959a:	68bb      	ldr	r3, [r7, #8]
 800959c:	61bb      	str	r3, [r7, #24]
 800959e:	e003      	b.n	80095a8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80095a0:	68bb      	ldr	r3, [r7, #8]
 80095a2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80095a4:	2300      	movs	r3, #0
 80095a6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	2200      	movs	r2, #0
 80095ac:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80095b0:	e02d      	b.n	800960e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80095b2:	683b      	ldr	r3, [r7, #0]
 80095b4:	9300      	str	r3, [sp, #0]
 80095b6:	697b      	ldr	r3, [r7, #20]
 80095b8:	2200      	movs	r2, #0
 80095ba:	2180      	movs	r1, #128	; 0x80
 80095bc:	68f8      	ldr	r0, [r7, #12]
 80095be:	f000 fb5a 	bl	8009c76 <UART_WaitOnFlagUntilTimeout>
 80095c2:	4603      	mov	r3, r0
 80095c4:	2b00      	cmp	r3, #0
 80095c6:	d001      	beq.n	80095cc <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80095c8:	2303      	movs	r3, #3
 80095ca:	e039      	b.n	8009640 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80095cc:	69fb      	ldr	r3, [r7, #28]
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d10b      	bne.n	80095ea <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80095d2:	69bb      	ldr	r3, [r7, #24]
 80095d4:	881a      	ldrh	r2, [r3, #0]
 80095d6:	68fb      	ldr	r3, [r7, #12]
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80095de:	b292      	uxth	r2, r2
 80095e0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80095e2:	69bb      	ldr	r3, [r7, #24]
 80095e4:	3302      	adds	r3, #2
 80095e6:	61bb      	str	r3, [r7, #24]
 80095e8:	e008      	b.n	80095fc <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80095ea:	69fb      	ldr	r3, [r7, #28]
 80095ec:	781a      	ldrb	r2, [r3, #0]
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	681b      	ldr	r3, [r3, #0]
 80095f2:	b292      	uxth	r2, r2
 80095f4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80095f6:	69fb      	ldr	r3, [r7, #28]
 80095f8:	3301      	adds	r3, #1
 80095fa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80095fc:	68fb      	ldr	r3, [r7, #12]
 80095fe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009602:	b29b      	uxth	r3, r3
 8009604:	3b01      	subs	r3, #1
 8009606:	b29a      	uxth	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009614:	b29b      	uxth	r3, r3
 8009616:	2b00      	cmp	r3, #0
 8009618:	d1cb      	bne.n	80095b2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800961a:	683b      	ldr	r3, [r7, #0]
 800961c:	9300      	str	r3, [sp, #0]
 800961e:	697b      	ldr	r3, [r7, #20]
 8009620:	2200      	movs	r2, #0
 8009622:	2140      	movs	r1, #64	; 0x40
 8009624:	68f8      	ldr	r0, [r7, #12]
 8009626:	f000 fb26 	bl	8009c76 <UART_WaitOnFlagUntilTimeout>
 800962a:	4603      	mov	r3, r0
 800962c:	2b00      	cmp	r3, #0
 800962e:	d001      	beq.n	8009634 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8009630:	2303      	movs	r3, #3
 8009632:	e005      	b.n	8009640 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2220      	movs	r2, #32
 8009638:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800963a:	2300      	movs	r3, #0
 800963c:	e000      	b.n	8009640 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800963e:	2302      	movs	r3, #2
  }
}
 8009640:	4618      	mov	r0, r3
 8009642:	3720      	adds	r7, #32
 8009644:	46bd      	mov	sp, r7
 8009646:	bd80      	pop	{r7, pc}

08009648 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009648:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800964c:	b08a      	sub	sp, #40	; 0x28
 800964e:	af00      	add	r7, sp, #0
 8009650:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8009652:	2300      	movs	r3, #0
 8009654:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009658:	68fb      	ldr	r3, [r7, #12]
 800965a:	689a      	ldr	r2, [r3, #8]
 800965c:	68fb      	ldr	r3, [r7, #12]
 800965e:	691b      	ldr	r3, [r3, #16]
 8009660:	431a      	orrs	r2, r3
 8009662:	68fb      	ldr	r3, [r7, #12]
 8009664:	695b      	ldr	r3, [r3, #20]
 8009666:	431a      	orrs	r2, r3
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	69db      	ldr	r3, [r3, #28]
 800966c:	4313      	orrs	r3, r2
 800966e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681a      	ldr	r2, [r3, #0]
 8009676:	4bb4      	ldr	r3, [pc, #720]	; (8009948 <UART_SetConfig+0x300>)
 8009678:	4013      	ands	r3, r2
 800967a:	68fa      	ldr	r2, [r7, #12]
 800967c:	6812      	ldr	r2, [r2, #0]
 800967e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009680:	430b      	orrs	r3, r1
 8009682:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009684:	68fb      	ldr	r3, [r7, #12]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	685b      	ldr	r3, [r3, #4]
 800968a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800968e:	68fb      	ldr	r3, [r7, #12]
 8009690:	68da      	ldr	r2, [r3, #12]
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	430a      	orrs	r2, r1
 8009698:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800969a:	68fb      	ldr	r3, [r7, #12]
 800969c:	699b      	ldr	r3, [r3, #24]
 800969e:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80096a0:	68fb      	ldr	r3, [r7, #12]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4aa9      	ldr	r2, [pc, #676]	; (800994c <UART_SetConfig+0x304>)
 80096a6:	4293      	cmp	r3, r2
 80096a8:	d004      	beq.n	80096b4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80096aa:	68fb      	ldr	r3, [r7, #12]
 80096ac:	6a1b      	ldr	r3, [r3, #32]
 80096ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096b0:	4313      	orrs	r3, r2
 80096b2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	689b      	ldr	r3, [r3, #8]
 80096ba:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80096c4:	430a      	orrs	r2, r1
 80096c6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80096c8:	68fb      	ldr	r3, [r7, #12]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	4aa0      	ldr	r2, [pc, #640]	; (8009950 <UART_SetConfig+0x308>)
 80096ce:	4293      	cmp	r3, r2
 80096d0:	d126      	bne.n	8009720 <UART_SetConfig+0xd8>
 80096d2:	4ba0      	ldr	r3, [pc, #640]	; (8009954 <UART_SetConfig+0x30c>)
 80096d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096d8:	f003 0303 	and.w	r3, r3, #3
 80096dc:	2b03      	cmp	r3, #3
 80096de:	d81b      	bhi.n	8009718 <UART_SetConfig+0xd0>
 80096e0:	a201      	add	r2, pc, #4	; (adr r2, 80096e8 <UART_SetConfig+0xa0>)
 80096e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80096e6:	bf00      	nop
 80096e8:	080096f9 	.word	0x080096f9
 80096ec:	08009709 	.word	0x08009709
 80096f0:	08009701 	.word	0x08009701
 80096f4:	08009711 	.word	0x08009711
 80096f8:	2301      	movs	r3, #1
 80096fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80096fe:	e080      	b.n	8009802 <UART_SetConfig+0x1ba>
 8009700:	2302      	movs	r3, #2
 8009702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009706:	e07c      	b.n	8009802 <UART_SetConfig+0x1ba>
 8009708:	2304      	movs	r3, #4
 800970a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800970e:	e078      	b.n	8009802 <UART_SetConfig+0x1ba>
 8009710:	2308      	movs	r3, #8
 8009712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009716:	e074      	b.n	8009802 <UART_SetConfig+0x1ba>
 8009718:	2310      	movs	r3, #16
 800971a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800971e:	e070      	b.n	8009802 <UART_SetConfig+0x1ba>
 8009720:	68fb      	ldr	r3, [r7, #12]
 8009722:	681b      	ldr	r3, [r3, #0]
 8009724:	4a8c      	ldr	r2, [pc, #560]	; (8009958 <UART_SetConfig+0x310>)
 8009726:	4293      	cmp	r3, r2
 8009728:	d138      	bne.n	800979c <UART_SetConfig+0x154>
 800972a:	4b8a      	ldr	r3, [pc, #552]	; (8009954 <UART_SetConfig+0x30c>)
 800972c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009730:	f003 030c 	and.w	r3, r3, #12
 8009734:	2b0c      	cmp	r3, #12
 8009736:	d82d      	bhi.n	8009794 <UART_SetConfig+0x14c>
 8009738:	a201      	add	r2, pc, #4	; (adr r2, 8009740 <UART_SetConfig+0xf8>)
 800973a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800973e:	bf00      	nop
 8009740:	08009775 	.word	0x08009775
 8009744:	08009795 	.word	0x08009795
 8009748:	08009795 	.word	0x08009795
 800974c:	08009795 	.word	0x08009795
 8009750:	08009785 	.word	0x08009785
 8009754:	08009795 	.word	0x08009795
 8009758:	08009795 	.word	0x08009795
 800975c:	08009795 	.word	0x08009795
 8009760:	0800977d 	.word	0x0800977d
 8009764:	08009795 	.word	0x08009795
 8009768:	08009795 	.word	0x08009795
 800976c:	08009795 	.word	0x08009795
 8009770:	0800978d 	.word	0x0800978d
 8009774:	2300      	movs	r3, #0
 8009776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800977a:	e042      	b.n	8009802 <UART_SetConfig+0x1ba>
 800977c:	2302      	movs	r3, #2
 800977e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009782:	e03e      	b.n	8009802 <UART_SetConfig+0x1ba>
 8009784:	2304      	movs	r3, #4
 8009786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800978a:	e03a      	b.n	8009802 <UART_SetConfig+0x1ba>
 800978c:	2308      	movs	r3, #8
 800978e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009792:	e036      	b.n	8009802 <UART_SetConfig+0x1ba>
 8009794:	2310      	movs	r3, #16
 8009796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800979a:	e032      	b.n	8009802 <UART_SetConfig+0x1ba>
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	4a6a      	ldr	r2, [pc, #424]	; (800994c <UART_SetConfig+0x304>)
 80097a2:	4293      	cmp	r3, r2
 80097a4:	d12a      	bne.n	80097fc <UART_SetConfig+0x1b4>
 80097a6:	4b6b      	ldr	r3, [pc, #428]	; (8009954 <UART_SetConfig+0x30c>)
 80097a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097ac:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80097b0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097b4:	d01a      	beq.n	80097ec <UART_SetConfig+0x1a4>
 80097b6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80097ba:	d81b      	bhi.n	80097f4 <UART_SetConfig+0x1ac>
 80097bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097c0:	d00c      	beq.n	80097dc <UART_SetConfig+0x194>
 80097c2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80097c6:	d815      	bhi.n	80097f4 <UART_SetConfig+0x1ac>
 80097c8:	2b00      	cmp	r3, #0
 80097ca:	d003      	beq.n	80097d4 <UART_SetConfig+0x18c>
 80097cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80097d0:	d008      	beq.n	80097e4 <UART_SetConfig+0x19c>
 80097d2:	e00f      	b.n	80097f4 <UART_SetConfig+0x1ac>
 80097d4:	2300      	movs	r3, #0
 80097d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097da:	e012      	b.n	8009802 <UART_SetConfig+0x1ba>
 80097dc:	2302      	movs	r3, #2
 80097de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097e2:	e00e      	b.n	8009802 <UART_SetConfig+0x1ba>
 80097e4:	2304      	movs	r3, #4
 80097e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097ea:	e00a      	b.n	8009802 <UART_SetConfig+0x1ba>
 80097ec:	2308      	movs	r3, #8
 80097ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097f2:	e006      	b.n	8009802 <UART_SetConfig+0x1ba>
 80097f4:	2310      	movs	r3, #16
 80097f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80097fa:	e002      	b.n	8009802 <UART_SetConfig+0x1ba>
 80097fc:	2310      	movs	r3, #16
 80097fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8009802:	68fb      	ldr	r3, [r7, #12]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a51      	ldr	r2, [pc, #324]	; (800994c <UART_SetConfig+0x304>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d17a      	bne.n	8009902 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800980c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009810:	2b08      	cmp	r3, #8
 8009812:	d824      	bhi.n	800985e <UART_SetConfig+0x216>
 8009814:	a201      	add	r2, pc, #4	; (adr r2, 800981c <UART_SetConfig+0x1d4>)
 8009816:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800981a:	bf00      	nop
 800981c:	08009841 	.word	0x08009841
 8009820:	0800985f 	.word	0x0800985f
 8009824:	08009849 	.word	0x08009849
 8009828:	0800985f 	.word	0x0800985f
 800982c:	0800984f 	.word	0x0800984f
 8009830:	0800985f 	.word	0x0800985f
 8009834:	0800985f 	.word	0x0800985f
 8009838:	0800985f 	.word	0x0800985f
 800983c:	08009857 	.word	0x08009857
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009840:	f7fe fde0 	bl	8008404 <HAL_RCC_GetPCLK1Freq>
 8009844:	61f8      	str	r0, [r7, #28]
        break;
 8009846:	e010      	b.n	800986a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009848:	4b44      	ldr	r3, [pc, #272]	; (800995c <UART_SetConfig+0x314>)
 800984a:	61fb      	str	r3, [r7, #28]
        break;
 800984c:	e00d      	b.n	800986a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800984e:	f7fe fd41 	bl	80082d4 <HAL_RCC_GetSysClockFreq>
 8009852:	61f8      	str	r0, [r7, #28]
        break;
 8009854:	e009      	b.n	800986a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009856:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800985a:	61fb      	str	r3, [r7, #28]
        break;
 800985c:	e005      	b.n	800986a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800985e:	2300      	movs	r3, #0
 8009860:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009862:	2301      	movs	r3, #1
 8009864:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009868:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800986a:	69fb      	ldr	r3, [r7, #28]
 800986c:	2b00      	cmp	r3, #0
 800986e:	f000 8107 	beq.w	8009a80 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	685a      	ldr	r2, [r3, #4]
 8009876:	4613      	mov	r3, r2
 8009878:	005b      	lsls	r3, r3, #1
 800987a:	4413      	add	r3, r2
 800987c:	69fa      	ldr	r2, [r7, #28]
 800987e:	429a      	cmp	r2, r3
 8009880:	d305      	bcc.n	800988e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8009882:	68fb      	ldr	r3, [r7, #12]
 8009884:	685b      	ldr	r3, [r3, #4]
 8009886:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8009888:	69fa      	ldr	r2, [r7, #28]
 800988a:	429a      	cmp	r2, r3
 800988c:	d903      	bls.n	8009896 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800988e:	2301      	movs	r3, #1
 8009890:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009894:	e0f4      	b.n	8009a80 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	2200      	movs	r2, #0
 800989a:	461c      	mov	r4, r3
 800989c:	4615      	mov	r5, r2
 800989e:	f04f 0200 	mov.w	r2, #0
 80098a2:	f04f 0300 	mov.w	r3, #0
 80098a6:	022b      	lsls	r3, r5, #8
 80098a8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80098ac:	0222      	lsls	r2, r4, #8
 80098ae:	68f9      	ldr	r1, [r7, #12]
 80098b0:	6849      	ldr	r1, [r1, #4]
 80098b2:	0849      	lsrs	r1, r1, #1
 80098b4:	2000      	movs	r0, #0
 80098b6:	4688      	mov	r8, r1
 80098b8:	4681      	mov	r9, r0
 80098ba:	eb12 0a08 	adds.w	sl, r2, r8
 80098be:	eb43 0b09 	adc.w	fp, r3, r9
 80098c2:	68fb      	ldr	r3, [r7, #12]
 80098c4:	685b      	ldr	r3, [r3, #4]
 80098c6:	2200      	movs	r2, #0
 80098c8:	603b      	str	r3, [r7, #0]
 80098ca:	607a      	str	r2, [r7, #4]
 80098cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80098d0:	4650      	mov	r0, sl
 80098d2:	4659      	mov	r1, fp
 80098d4:	f7f7 f988 	bl	8000be8 <__aeabi_uldivmod>
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	4613      	mov	r3, r2
 80098de:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80098e0:	69bb      	ldr	r3, [r7, #24]
 80098e2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098e6:	d308      	bcc.n	80098fa <UART_SetConfig+0x2b2>
 80098e8:	69bb      	ldr	r3, [r7, #24]
 80098ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80098ee:	d204      	bcs.n	80098fa <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	69ba      	ldr	r2, [r7, #24]
 80098f6:	60da      	str	r2, [r3, #12]
 80098f8:	e0c2      	b.n	8009a80 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80098fa:	2301      	movs	r3, #1
 80098fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8009900:	e0be      	b.n	8009a80 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009902:	68fb      	ldr	r3, [r7, #12]
 8009904:	69db      	ldr	r3, [r3, #28]
 8009906:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800990a:	d16a      	bne.n	80099e2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800990c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009910:	2b08      	cmp	r3, #8
 8009912:	d834      	bhi.n	800997e <UART_SetConfig+0x336>
 8009914:	a201      	add	r2, pc, #4	; (adr r2, 800991c <UART_SetConfig+0x2d4>)
 8009916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800991a:	bf00      	nop
 800991c:	08009941 	.word	0x08009941
 8009920:	08009961 	.word	0x08009961
 8009924:	08009969 	.word	0x08009969
 8009928:	0800997f 	.word	0x0800997f
 800992c:	0800996f 	.word	0x0800996f
 8009930:	0800997f 	.word	0x0800997f
 8009934:	0800997f 	.word	0x0800997f
 8009938:	0800997f 	.word	0x0800997f
 800993c:	08009977 	.word	0x08009977
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009940:	f7fe fd60 	bl	8008404 <HAL_RCC_GetPCLK1Freq>
 8009944:	61f8      	str	r0, [r7, #28]
        break;
 8009946:	e020      	b.n	800998a <UART_SetConfig+0x342>
 8009948:	efff69f3 	.word	0xefff69f3
 800994c:	40008000 	.word	0x40008000
 8009950:	40013800 	.word	0x40013800
 8009954:	40021000 	.word	0x40021000
 8009958:	40004400 	.word	0x40004400
 800995c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009960:	f7fe fd66 	bl	8008430 <HAL_RCC_GetPCLK2Freq>
 8009964:	61f8      	str	r0, [r7, #28]
        break;
 8009966:	e010      	b.n	800998a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009968:	4b4c      	ldr	r3, [pc, #304]	; (8009a9c <UART_SetConfig+0x454>)
 800996a:	61fb      	str	r3, [r7, #28]
        break;
 800996c:	e00d      	b.n	800998a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800996e:	f7fe fcb1 	bl	80082d4 <HAL_RCC_GetSysClockFreq>
 8009972:	61f8      	str	r0, [r7, #28]
        break;
 8009974:	e009      	b.n	800998a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009976:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800997a:	61fb      	str	r3, [r7, #28]
        break;
 800997c:	e005      	b.n	800998a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800997e:	2300      	movs	r3, #0
 8009980:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009982:	2301      	movs	r3, #1
 8009984:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009988:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800998a:	69fb      	ldr	r3, [r7, #28]
 800998c:	2b00      	cmp	r3, #0
 800998e:	d077      	beq.n	8009a80 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8009990:	69fb      	ldr	r3, [r7, #28]
 8009992:	005a      	lsls	r2, r3, #1
 8009994:	68fb      	ldr	r3, [r7, #12]
 8009996:	685b      	ldr	r3, [r3, #4]
 8009998:	085b      	lsrs	r3, r3, #1
 800999a:	441a      	add	r2, r3
 800999c:	68fb      	ldr	r3, [r7, #12]
 800999e:	685b      	ldr	r3, [r3, #4]
 80099a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80099a4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	2b0f      	cmp	r3, #15
 80099aa:	d916      	bls.n	80099da <UART_SetConfig+0x392>
 80099ac:	69bb      	ldr	r3, [r7, #24]
 80099ae:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80099b2:	d212      	bcs.n	80099da <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80099b4:	69bb      	ldr	r3, [r7, #24]
 80099b6:	b29b      	uxth	r3, r3
 80099b8:	f023 030f 	bic.w	r3, r3, #15
 80099bc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80099be:	69bb      	ldr	r3, [r7, #24]
 80099c0:	085b      	lsrs	r3, r3, #1
 80099c2:	b29b      	uxth	r3, r3
 80099c4:	f003 0307 	and.w	r3, r3, #7
 80099c8:	b29a      	uxth	r2, r3
 80099ca:	8afb      	ldrh	r3, [r7, #22]
 80099cc:	4313      	orrs	r3, r2
 80099ce:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80099d0:	68fb      	ldr	r3, [r7, #12]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	8afa      	ldrh	r2, [r7, #22]
 80099d6:	60da      	str	r2, [r3, #12]
 80099d8:	e052      	b.n	8009a80 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80099da:	2301      	movs	r3, #1
 80099dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80099e0:	e04e      	b.n	8009a80 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80099e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80099e6:	2b08      	cmp	r3, #8
 80099e8:	d827      	bhi.n	8009a3a <UART_SetConfig+0x3f2>
 80099ea:	a201      	add	r2, pc, #4	; (adr r2, 80099f0 <UART_SetConfig+0x3a8>)
 80099ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80099f0:	08009a15 	.word	0x08009a15
 80099f4:	08009a1d 	.word	0x08009a1d
 80099f8:	08009a25 	.word	0x08009a25
 80099fc:	08009a3b 	.word	0x08009a3b
 8009a00:	08009a2b 	.word	0x08009a2b
 8009a04:	08009a3b 	.word	0x08009a3b
 8009a08:	08009a3b 	.word	0x08009a3b
 8009a0c:	08009a3b 	.word	0x08009a3b
 8009a10:	08009a33 	.word	0x08009a33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8009a14:	f7fe fcf6 	bl	8008404 <HAL_RCC_GetPCLK1Freq>
 8009a18:	61f8      	str	r0, [r7, #28]
        break;
 8009a1a:	e014      	b.n	8009a46 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8009a1c:	f7fe fd08 	bl	8008430 <HAL_RCC_GetPCLK2Freq>
 8009a20:	61f8      	str	r0, [r7, #28]
        break;
 8009a22:	e010      	b.n	8009a46 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8009a24:	4b1d      	ldr	r3, [pc, #116]	; (8009a9c <UART_SetConfig+0x454>)
 8009a26:	61fb      	str	r3, [r7, #28]
        break;
 8009a28:	e00d      	b.n	8009a46 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8009a2a:	f7fe fc53 	bl	80082d4 <HAL_RCC_GetSysClockFreq>
 8009a2e:	61f8      	str	r0, [r7, #28]
        break;
 8009a30:	e009      	b.n	8009a46 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8009a32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8009a36:	61fb      	str	r3, [r7, #28]
        break;
 8009a38:	e005      	b.n	8009a46 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8009a3a:	2300      	movs	r3, #0
 8009a3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8009a3e:	2301      	movs	r3, #1
 8009a40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8009a44:	bf00      	nop
    }

    if (pclk != 0U)
 8009a46:	69fb      	ldr	r3, [r7, #28]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d019      	beq.n	8009a80 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8009a4c:	68fb      	ldr	r3, [r7, #12]
 8009a4e:	685b      	ldr	r3, [r3, #4]
 8009a50:	085a      	lsrs	r2, r3, #1
 8009a52:	69fb      	ldr	r3, [r7, #28]
 8009a54:	441a      	add	r2, r3
 8009a56:	68fb      	ldr	r3, [r7, #12]
 8009a58:	685b      	ldr	r3, [r3, #4]
 8009a5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8009a5e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8009a60:	69bb      	ldr	r3, [r7, #24]
 8009a62:	2b0f      	cmp	r3, #15
 8009a64:	d909      	bls.n	8009a7a <UART_SetConfig+0x432>
 8009a66:	69bb      	ldr	r3, [r7, #24]
 8009a68:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009a6c:	d205      	bcs.n	8009a7a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8009a6e:	69bb      	ldr	r3, [r7, #24]
 8009a70:	b29a      	uxth	r2, r3
 8009a72:	68fb      	ldr	r3, [r7, #12]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	60da      	str	r2, [r3, #12]
 8009a78:	e002      	b.n	8009a80 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8009a7a:	2301      	movs	r3, #1
 8009a7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	2200      	movs	r2, #0
 8009a84:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8009a8c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8009a90:	4618      	mov	r0, r3
 8009a92:	3728      	adds	r7, #40	; 0x28
 8009a94:	46bd      	mov	sp, r7
 8009a96:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009a9a:	bf00      	nop
 8009a9c:	00f42400 	.word	0x00f42400

08009aa0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8009aa0:	b480      	push	{r7}
 8009aa2:	b083      	sub	sp, #12
 8009aa4:	af00      	add	r7, sp, #0
 8009aa6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009aac:	f003 0301 	and.w	r3, r3, #1
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d00a      	beq.n	8009aca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	430a      	orrs	r2, r1
 8009ac8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ace:	f003 0302 	and.w	r3, r3, #2
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00a      	beq.n	8009aec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	685b      	ldr	r3, [r3, #4]
 8009adc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	430a      	orrs	r2, r1
 8009aea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009af0:	f003 0304 	and.w	r3, r3, #4
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00a      	beq.n	8009b0e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	681b      	ldr	r3, [r3, #0]
 8009afc:	685b      	ldr	r3, [r3, #4]
 8009afe:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b06:	687b      	ldr	r3, [r7, #4]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	430a      	orrs	r2, r1
 8009b0c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8009b0e:	687b      	ldr	r3, [r7, #4]
 8009b10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b12:	f003 0308 	and.w	r3, r3, #8
 8009b16:	2b00      	cmp	r3, #0
 8009b18:	d00a      	beq.n	8009b30 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	685b      	ldr	r3, [r3, #4]
 8009b20:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	430a      	orrs	r2, r1
 8009b2e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8009b30:	687b      	ldr	r3, [r7, #4]
 8009b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b34:	f003 0310 	and.w	r3, r3, #16
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d00a      	beq.n	8009b52 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	681b      	ldr	r3, [r3, #0]
 8009b40:	689b      	ldr	r3, [r3, #8]
 8009b42:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	430a      	orrs	r2, r1
 8009b50:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8009b52:	687b      	ldr	r3, [r7, #4]
 8009b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b56:	f003 0320 	and.w	r3, r3, #32
 8009b5a:	2b00      	cmp	r3, #0
 8009b5c:	d00a      	beq.n	8009b74 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8009b5e:	687b      	ldr	r3, [r7, #4]
 8009b60:	681b      	ldr	r3, [r3, #0]
 8009b62:	689b      	ldr	r3, [r3, #8]
 8009b64:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8009b68:	687b      	ldr	r3, [r7, #4]
 8009b6a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	430a      	orrs	r2, r1
 8009b72:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d01a      	beq.n	8009bb6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	685b      	ldr	r3, [r3, #4]
 8009b86:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	430a      	orrs	r2, r1
 8009b94:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b9a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009b9e:	d10a      	bne.n	8009bb6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	685b      	ldr	r3, [r3, #4]
 8009ba6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	430a      	orrs	r2, r1
 8009bb4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8009bb6:	687b      	ldr	r3, [r7, #4]
 8009bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009bba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009bbe:	2b00      	cmp	r3, #0
 8009bc0:	d00a      	beq.n	8009bd8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	685b      	ldr	r3, [r3, #4]
 8009bc8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8009bd0:	687b      	ldr	r3, [r7, #4]
 8009bd2:	681b      	ldr	r3, [r3, #0]
 8009bd4:	430a      	orrs	r2, r1
 8009bd6:	605a      	str	r2, [r3, #4]
  }
}
 8009bd8:	bf00      	nop
 8009bda:	370c      	adds	r7, #12
 8009bdc:	46bd      	mov	sp, r7
 8009bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be2:	4770      	bx	lr

08009be4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8009be4:	b580      	push	{r7, lr}
 8009be6:	b086      	sub	sp, #24
 8009be8:	af02      	add	r7, sp, #8
 8009bea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009bec:	687b      	ldr	r3, [r7, #4]
 8009bee:	2200      	movs	r2, #0
 8009bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8009bf4:	f7fa fa06 	bl	8004004 <HAL_GetTick>
 8009bf8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	f003 0308 	and.w	r3, r3, #8
 8009c04:	2b08      	cmp	r3, #8
 8009c06:	d10e      	bne.n	8009c26 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	68fb      	ldr	r3, [r7, #12]
 8009c10:	2200      	movs	r2, #0
 8009c12:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009c16:	6878      	ldr	r0, [r7, #4]
 8009c18:	f000 f82d 	bl	8009c76 <UART_WaitOnFlagUntilTimeout>
 8009c1c:	4603      	mov	r3, r0
 8009c1e:	2b00      	cmp	r3, #0
 8009c20:	d001      	beq.n	8009c26 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c22:	2303      	movs	r3, #3
 8009c24:	e023      	b.n	8009c6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8009c26:	687b      	ldr	r3, [r7, #4]
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	681b      	ldr	r3, [r3, #0]
 8009c2c:	f003 0304 	and.w	r3, r3, #4
 8009c30:	2b04      	cmp	r3, #4
 8009c32:	d10e      	bne.n	8009c52 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8009c34:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8009c38:	9300      	str	r3, [sp, #0]
 8009c3a:	68fb      	ldr	r3, [r7, #12]
 8009c3c:	2200      	movs	r2, #0
 8009c3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8009c42:	6878      	ldr	r0, [r7, #4]
 8009c44:	f000 f817 	bl	8009c76 <UART_WaitOnFlagUntilTimeout>
 8009c48:	4603      	mov	r3, r0
 8009c4a:	2b00      	cmp	r3, #0
 8009c4c:	d001      	beq.n	8009c52 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8009c4e:	2303      	movs	r3, #3
 8009c50:	e00d      	b.n	8009c6e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	2220      	movs	r2, #32
 8009c56:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	2220      	movs	r2, #32
 8009c5c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	2200      	movs	r2, #0
 8009c62:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8009c64:	687b      	ldr	r3, [r7, #4]
 8009c66:	2200      	movs	r2, #0
 8009c68:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8009c6c:	2300      	movs	r3, #0
}
 8009c6e:	4618      	mov	r0, r3
 8009c70:	3710      	adds	r7, #16
 8009c72:	46bd      	mov	sp, r7
 8009c74:	bd80      	pop	{r7, pc}

08009c76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8009c76:	b580      	push	{r7, lr}
 8009c78:	b09c      	sub	sp, #112	; 0x70
 8009c7a:	af00      	add	r7, sp, #0
 8009c7c:	60f8      	str	r0, [r7, #12]
 8009c7e:	60b9      	str	r1, [r7, #8]
 8009c80:	603b      	str	r3, [r7, #0]
 8009c82:	4613      	mov	r3, r2
 8009c84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009c86:	e0a5      	b.n	8009dd4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009c88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009c8a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c8e:	f000 80a1 	beq.w	8009dd4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009c92:	f7fa f9b7 	bl	8004004 <HAL_GetTick>
 8009c96:	4602      	mov	r2, r0
 8009c98:	683b      	ldr	r3, [r7, #0]
 8009c9a:	1ad3      	subs	r3, r2, r3
 8009c9c:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d302      	bcc.n	8009ca8 <UART_WaitOnFlagUntilTimeout+0x32>
 8009ca2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d13e      	bne.n	8009d26 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009ca8:	68fb      	ldr	r3, [r7, #12]
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009cae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009cb0:	e853 3f00 	ldrex	r3, [r3]
 8009cb4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009cb6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009cb8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009cbc:	667b      	str	r3, [r7, #100]	; 0x64
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	681b      	ldr	r3, [r3, #0]
 8009cc2:	461a      	mov	r2, r3
 8009cc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009cc6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009cc8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cca:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8009ccc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8009cce:	e841 2300 	strex	r3, r2, [r1]
 8009cd2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009cd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009cd6:	2b00      	cmp	r3, #0
 8009cd8:	d1e6      	bne.n	8009ca8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009cda:	68fb      	ldr	r3, [r7, #12]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	3308      	adds	r3, #8
 8009ce0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ce2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009ce4:	e853 3f00 	ldrex	r3, [r3]
 8009ce8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009cec:	f023 0301 	bic.w	r3, r3, #1
 8009cf0:	663b      	str	r3, [r7, #96]	; 0x60
 8009cf2:	68fb      	ldr	r3, [r7, #12]
 8009cf4:	681b      	ldr	r3, [r3, #0]
 8009cf6:	3308      	adds	r3, #8
 8009cf8:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8009cfa:	64ba      	str	r2, [r7, #72]	; 0x48
 8009cfc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009cfe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8009d00:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009d02:	e841 2300 	strex	r3, r2, [r1]
 8009d06:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009d08:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d1e5      	bne.n	8009cda <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8009d0e:	68fb      	ldr	r3, [r7, #12]
 8009d10:	2220      	movs	r2, #32
 8009d12:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	2220      	movs	r2, #32
 8009d18:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	2200      	movs	r2, #0
 8009d1e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8009d22:	2303      	movs	r3, #3
 8009d24:	e067      	b.n	8009df6 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8009d26:	68fb      	ldr	r3, [r7, #12]
 8009d28:	681b      	ldr	r3, [r3, #0]
 8009d2a:	681b      	ldr	r3, [r3, #0]
 8009d2c:	f003 0304 	and.w	r3, r3, #4
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d04f      	beq.n	8009dd4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	69db      	ldr	r3, [r3, #28]
 8009d3a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009d3e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8009d42:	d147      	bne.n	8009dd4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8009d44:	68fb      	ldr	r3, [r7, #12]
 8009d46:	681b      	ldr	r3, [r3, #0]
 8009d48:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8009d4c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009d4e:	68fb      	ldr	r3, [r7, #12]
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d56:	e853 3f00 	ldrex	r3, [r3]
 8009d5a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009d5e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8009d62:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	461a      	mov	r2, r3
 8009d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009d6c:	637b      	str	r3, [r7, #52]	; 0x34
 8009d6e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009d70:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8009d72:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009d74:	e841 2300 	strex	r3, r2, [r1]
 8009d78:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7c:	2b00      	cmp	r3, #0
 8009d7e:	d1e6      	bne.n	8009d4e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009d80:	68fb      	ldr	r3, [r7, #12]
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	3308      	adds	r3, #8
 8009d86:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009d88:	697b      	ldr	r3, [r7, #20]
 8009d8a:	e853 3f00 	ldrex	r3, [r3]
 8009d8e:	613b      	str	r3, [r7, #16]
   return(result);
 8009d90:	693b      	ldr	r3, [r7, #16]
 8009d92:	f023 0301 	bic.w	r3, r3, #1
 8009d96:	66bb      	str	r3, [r7, #104]	; 0x68
 8009d98:	68fb      	ldr	r3, [r7, #12]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	3308      	adds	r3, #8
 8009d9e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8009da0:	623a      	str	r2, [r7, #32]
 8009da2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009da4:	69f9      	ldr	r1, [r7, #28]
 8009da6:	6a3a      	ldr	r2, [r7, #32]
 8009da8:	e841 2300 	strex	r3, r2, [r1]
 8009dac:	61bb      	str	r3, [r7, #24]
   return(result);
 8009dae:	69bb      	ldr	r3, [r7, #24]
 8009db0:	2b00      	cmp	r3, #0
 8009db2:	d1e5      	bne.n	8009d80 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8009db4:	68fb      	ldr	r3, [r7, #12]
 8009db6:	2220      	movs	r2, #32
 8009db8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8009dba:	68fb      	ldr	r3, [r7, #12]
 8009dbc:	2220      	movs	r2, #32
 8009dbe:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8009dc0:	68fb      	ldr	r3, [r7, #12]
 8009dc2:	2220      	movs	r2, #32
 8009dc4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009dc8:	68fb      	ldr	r3, [r7, #12]
 8009dca:	2200      	movs	r2, #0
 8009dcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8009dd0:	2303      	movs	r3, #3
 8009dd2:	e010      	b.n	8009df6 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009dd4:	68fb      	ldr	r3, [r7, #12]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	69da      	ldr	r2, [r3, #28]
 8009dda:	68bb      	ldr	r3, [r7, #8]
 8009ddc:	4013      	ands	r3, r2
 8009dde:	68ba      	ldr	r2, [r7, #8]
 8009de0:	429a      	cmp	r2, r3
 8009de2:	bf0c      	ite	eq
 8009de4:	2301      	moveq	r3, #1
 8009de6:	2300      	movne	r3, #0
 8009de8:	b2db      	uxtb	r3, r3
 8009dea:	461a      	mov	r2, r3
 8009dec:	79fb      	ldrb	r3, [r7, #7]
 8009dee:	429a      	cmp	r2, r3
 8009df0:	f43f af4a 	beq.w	8009c88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009df4:	2300      	movs	r3, #0
}
 8009df6:	4618      	mov	r0, r3
 8009df8:	3770      	adds	r7, #112	; 0x70
 8009dfa:	46bd      	mov	sp, r7
 8009dfc:	bd80      	pop	{r7, pc}
	...

08009e00 <__NVIC_SetPriority>:
{
 8009e00:	b480      	push	{r7}
 8009e02:	b083      	sub	sp, #12
 8009e04:	af00      	add	r7, sp, #0
 8009e06:	4603      	mov	r3, r0
 8009e08:	6039      	str	r1, [r7, #0]
 8009e0a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8009e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	db0a      	blt.n	8009e2a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e14:	683b      	ldr	r3, [r7, #0]
 8009e16:	b2da      	uxtb	r2, r3
 8009e18:	490c      	ldr	r1, [pc, #48]	; (8009e4c <__NVIC_SetPriority+0x4c>)
 8009e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009e1e:	0112      	lsls	r2, r2, #4
 8009e20:	b2d2      	uxtb	r2, r2
 8009e22:	440b      	add	r3, r1
 8009e24:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8009e28:	e00a      	b.n	8009e40 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009e2a:	683b      	ldr	r3, [r7, #0]
 8009e2c:	b2da      	uxtb	r2, r3
 8009e2e:	4908      	ldr	r1, [pc, #32]	; (8009e50 <__NVIC_SetPriority+0x50>)
 8009e30:	79fb      	ldrb	r3, [r7, #7]
 8009e32:	f003 030f 	and.w	r3, r3, #15
 8009e36:	3b04      	subs	r3, #4
 8009e38:	0112      	lsls	r2, r2, #4
 8009e3a:	b2d2      	uxtb	r2, r2
 8009e3c:	440b      	add	r3, r1
 8009e3e:	761a      	strb	r2, [r3, #24]
}
 8009e40:	bf00      	nop
 8009e42:	370c      	adds	r7, #12
 8009e44:	46bd      	mov	sp, r7
 8009e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e4a:	4770      	bx	lr
 8009e4c:	e000e100 	.word	0xe000e100
 8009e50:	e000ed00 	.word	0xe000ed00

08009e54 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009e54:	b580      	push	{r7, lr}
 8009e56:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009e58:	4b05      	ldr	r3, [pc, #20]	; (8009e70 <SysTick_Handler+0x1c>)
 8009e5a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009e5c:	f002 f8d8 	bl	800c010 <xTaskGetSchedulerState>
 8009e60:	4603      	mov	r3, r0
 8009e62:	2b01      	cmp	r3, #1
 8009e64:	d001      	beq.n	8009e6a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009e66:	f002 ffbf 	bl	800cde8 <xPortSysTickHandler>
  }
}
 8009e6a:	bf00      	nop
 8009e6c:	bd80      	pop	{r7, pc}
 8009e6e:	bf00      	nop
 8009e70:	e000e010 	.word	0xe000e010

08009e74 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009e74:	b580      	push	{r7, lr}
 8009e76:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009e78:	2100      	movs	r1, #0
 8009e7a:	f06f 0004 	mvn.w	r0, #4
 8009e7e:	f7ff ffbf 	bl	8009e00 <__NVIC_SetPriority>
#endif
}
 8009e82:	bf00      	nop
 8009e84:	bd80      	pop	{r7, pc}
	...

08009e88 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009e88:	b480      	push	{r7}
 8009e8a:	b083      	sub	sp, #12
 8009e8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009e8e:	f3ef 8305 	mrs	r3, IPSR
 8009e92:	603b      	str	r3, [r7, #0]
  return(result);
 8009e94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d003      	beq.n	8009ea2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009e9a:	f06f 0305 	mvn.w	r3, #5
 8009e9e:	607b      	str	r3, [r7, #4]
 8009ea0:	e00c      	b.n	8009ebc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009ea2:	4b0a      	ldr	r3, [pc, #40]	; (8009ecc <osKernelInitialize+0x44>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	2b00      	cmp	r3, #0
 8009ea8:	d105      	bne.n	8009eb6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009eaa:	4b08      	ldr	r3, [pc, #32]	; (8009ecc <osKernelInitialize+0x44>)
 8009eac:	2201      	movs	r2, #1
 8009eae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009eb0:	2300      	movs	r3, #0
 8009eb2:	607b      	str	r3, [r7, #4]
 8009eb4:	e002      	b.n	8009ebc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009eb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009eba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009ebc:	687b      	ldr	r3, [r7, #4]
}
 8009ebe:	4618      	mov	r0, r3
 8009ec0:	370c      	adds	r7, #12
 8009ec2:	46bd      	mov	sp, r7
 8009ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ec8:	4770      	bx	lr
 8009eca:	bf00      	nop
 8009ecc:	20000f54 	.word	0x20000f54

08009ed0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b082      	sub	sp, #8
 8009ed4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ed6:	f3ef 8305 	mrs	r3, IPSR
 8009eda:	603b      	str	r3, [r7, #0]
  return(result);
 8009edc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009ede:	2b00      	cmp	r3, #0
 8009ee0:	d003      	beq.n	8009eea <osKernelStart+0x1a>
    stat = osErrorISR;
 8009ee2:	f06f 0305 	mvn.w	r3, #5
 8009ee6:	607b      	str	r3, [r7, #4]
 8009ee8:	e010      	b.n	8009f0c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009eea:	4b0b      	ldr	r3, [pc, #44]	; (8009f18 <osKernelStart+0x48>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b01      	cmp	r3, #1
 8009ef0:	d109      	bne.n	8009f06 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009ef2:	f7ff ffbf 	bl	8009e74 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009ef6:	4b08      	ldr	r3, [pc, #32]	; (8009f18 <osKernelStart+0x48>)
 8009ef8:	2202      	movs	r2, #2
 8009efa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009efc:	f001 fc1c 	bl	800b738 <vTaskStartScheduler>
      stat = osOK;
 8009f00:	2300      	movs	r3, #0
 8009f02:	607b      	str	r3, [r7, #4]
 8009f04:	e002      	b.n	8009f0c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009f06:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f0a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009f0c:	687b      	ldr	r3, [r7, #4]
}
 8009f0e:	4618      	mov	r0, r3
 8009f10:	3708      	adds	r7, #8
 8009f12:	46bd      	mov	sp, r7
 8009f14:	bd80      	pop	{r7, pc}
 8009f16:	bf00      	nop
 8009f18:	20000f54 	.word	0x20000f54

08009f1c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009f1c:	b580      	push	{r7, lr}
 8009f1e:	b08e      	sub	sp, #56	; 0x38
 8009f20:	af04      	add	r7, sp, #16
 8009f22:	60f8      	str	r0, [r7, #12]
 8009f24:	60b9      	str	r1, [r7, #8]
 8009f26:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009f28:	2300      	movs	r3, #0
 8009f2a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009f2c:	f3ef 8305 	mrs	r3, IPSR
 8009f30:	617b      	str	r3, [r7, #20]
  return(result);
 8009f32:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009f34:	2b00      	cmp	r3, #0
 8009f36:	d17e      	bne.n	800a036 <osThreadNew+0x11a>
 8009f38:	68fb      	ldr	r3, [r7, #12]
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d07b      	beq.n	800a036 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009f3e:	2340      	movs	r3, #64	; 0x40
 8009f40:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009f42:	2318      	movs	r3, #24
 8009f44:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009f46:	2300      	movs	r3, #0
 8009f48:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009f4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8009f4e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009f50:	687b      	ldr	r3, [r7, #4]
 8009f52:	2b00      	cmp	r3, #0
 8009f54:	d045      	beq.n	8009fe2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d002      	beq.n	8009f64 <osThreadNew+0x48>
        name = attr->name;
 8009f5e:	687b      	ldr	r3, [r7, #4]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	699b      	ldr	r3, [r3, #24]
 8009f68:	2b00      	cmp	r3, #0
 8009f6a:	d002      	beq.n	8009f72 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009f6c:	687b      	ldr	r3, [r7, #4]
 8009f6e:	699b      	ldr	r3, [r3, #24]
 8009f70:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009f72:	69fb      	ldr	r3, [r7, #28]
 8009f74:	2b00      	cmp	r3, #0
 8009f76:	d008      	beq.n	8009f8a <osThreadNew+0x6e>
 8009f78:	69fb      	ldr	r3, [r7, #28]
 8009f7a:	2b38      	cmp	r3, #56	; 0x38
 8009f7c:	d805      	bhi.n	8009f8a <osThreadNew+0x6e>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	685b      	ldr	r3, [r3, #4]
 8009f82:	f003 0301 	and.w	r3, r3, #1
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d001      	beq.n	8009f8e <osThreadNew+0x72>
        return (NULL);
 8009f8a:	2300      	movs	r3, #0
 8009f8c:	e054      	b.n	800a038 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009f8e:	687b      	ldr	r3, [r7, #4]
 8009f90:	695b      	ldr	r3, [r3, #20]
 8009f92:	2b00      	cmp	r3, #0
 8009f94:	d003      	beq.n	8009f9e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	695b      	ldr	r3, [r3, #20]
 8009f9a:	089b      	lsrs	r3, r3, #2
 8009f9c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009f9e:	687b      	ldr	r3, [r7, #4]
 8009fa0:	689b      	ldr	r3, [r3, #8]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	d00e      	beq.n	8009fc4 <osThreadNew+0xa8>
 8009fa6:	687b      	ldr	r3, [r7, #4]
 8009fa8:	68db      	ldr	r3, [r3, #12]
 8009faa:	2bbb      	cmp	r3, #187	; 0xbb
 8009fac:	d90a      	bls.n	8009fc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	d006      	beq.n	8009fc4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009fb6:	687b      	ldr	r3, [r7, #4]
 8009fb8:	695b      	ldr	r3, [r3, #20]
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d002      	beq.n	8009fc4 <osThreadNew+0xa8>
        mem = 1;
 8009fbe:	2301      	movs	r3, #1
 8009fc0:	61bb      	str	r3, [r7, #24]
 8009fc2:	e010      	b.n	8009fe6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009fc4:	687b      	ldr	r3, [r7, #4]
 8009fc6:	689b      	ldr	r3, [r3, #8]
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10c      	bne.n	8009fe6 <osThreadNew+0xca>
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	68db      	ldr	r3, [r3, #12]
 8009fd0:	2b00      	cmp	r3, #0
 8009fd2:	d108      	bne.n	8009fe6 <osThreadNew+0xca>
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	2b00      	cmp	r3, #0
 8009fda:	d104      	bne.n	8009fe6 <osThreadNew+0xca>
          mem = 0;
 8009fdc:	2300      	movs	r3, #0
 8009fde:	61bb      	str	r3, [r7, #24]
 8009fe0:	e001      	b.n	8009fe6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009fe2:	2300      	movs	r3, #0
 8009fe4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009fe6:	69bb      	ldr	r3, [r7, #24]
 8009fe8:	2b01      	cmp	r3, #1
 8009fea:	d110      	bne.n	800a00e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009fec:	687b      	ldr	r3, [r7, #4]
 8009fee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009ff0:	687a      	ldr	r2, [r7, #4]
 8009ff2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009ff4:	9202      	str	r2, [sp, #8]
 8009ff6:	9301      	str	r3, [sp, #4]
 8009ff8:	69fb      	ldr	r3, [r7, #28]
 8009ffa:	9300      	str	r3, [sp, #0]
 8009ffc:	68bb      	ldr	r3, [r7, #8]
 8009ffe:	6a3a      	ldr	r2, [r7, #32]
 800a000:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a002:	68f8      	ldr	r0, [r7, #12]
 800a004:	f001 f92e 	bl	800b264 <xTaskCreateStatic>
 800a008:	4603      	mov	r3, r0
 800a00a:	613b      	str	r3, [r7, #16]
 800a00c:	e013      	b.n	800a036 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800a00e:	69bb      	ldr	r3, [r7, #24]
 800a010:	2b00      	cmp	r3, #0
 800a012:	d110      	bne.n	800a036 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800a014:	6a3b      	ldr	r3, [r7, #32]
 800a016:	b29a      	uxth	r2, r3
 800a018:	f107 0310 	add.w	r3, r7, #16
 800a01c:	9301      	str	r3, [sp, #4]
 800a01e:	69fb      	ldr	r3, [r7, #28]
 800a020:	9300      	str	r3, [sp, #0]
 800a022:	68bb      	ldr	r3, [r7, #8]
 800a024:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a026:	68f8      	ldr	r0, [r7, #12]
 800a028:	f001 f979 	bl	800b31e <xTaskCreate>
 800a02c:	4603      	mov	r3, r0
 800a02e:	2b01      	cmp	r3, #1
 800a030:	d001      	beq.n	800a036 <osThreadNew+0x11a>
            hTask = NULL;
 800a032:	2300      	movs	r3, #0
 800a034:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800a036:	693b      	ldr	r3, [r7, #16]
}
 800a038:	4618      	mov	r0, r3
 800a03a:	3728      	adds	r7, #40	; 0x28
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a048:	f3ef 8305 	mrs	r3, IPSR
 800a04c:	60bb      	str	r3, [r7, #8]
  return(result);
 800a04e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800a050:	2b00      	cmp	r3, #0
 800a052:	d003      	beq.n	800a05c <osDelay+0x1c>
    stat = osErrorISR;
 800a054:	f06f 0305 	mvn.w	r3, #5
 800a058:	60fb      	str	r3, [r7, #12]
 800a05a:	e007      	b.n	800a06c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800a05c:	2300      	movs	r3, #0
 800a05e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800a060:	687b      	ldr	r3, [r7, #4]
 800a062:	2b00      	cmp	r3, #0
 800a064:	d002      	beq.n	800a06c <osDelay+0x2c>
      vTaskDelay(ticks);
 800a066:	6878      	ldr	r0, [r7, #4]
 800a068:	f001 fb32 	bl	800b6d0 <vTaskDelay>
    }
  }

  return (stat);
 800a06c:	68fb      	ldr	r3, [r7, #12]
}
 800a06e:	4618      	mov	r0, r3
 800a070:	3710      	adds	r7, #16
 800a072:	46bd      	mov	sp, r7
 800a074:	bd80      	pop	{r7, pc}

0800a076 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800a076:	b580      	push	{r7, lr}
 800a078:	b088      	sub	sp, #32
 800a07a:	af00      	add	r7, sp, #0
 800a07c:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800a07e:	2300      	movs	r3, #0
 800a080:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a082:	f3ef 8305 	mrs	r3, IPSR
 800a086:	60bb      	str	r3, [r7, #8]
  return(result);
 800a088:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d174      	bne.n	800a178 <osMutexNew+0x102>
    if (attr != NULL) {
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d003      	beq.n	800a09c <osMutexNew+0x26>
      type = attr->attr_bits;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	685b      	ldr	r3, [r3, #4]
 800a098:	61bb      	str	r3, [r7, #24]
 800a09a:	e001      	b.n	800a0a0 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800a09c:	2300      	movs	r3, #0
 800a09e:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800a0a0:	69bb      	ldr	r3, [r7, #24]
 800a0a2:	f003 0301 	and.w	r3, r3, #1
 800a0a6:	2b00      	cmp	r3, #0
 800a0a8:	d002      	beq.n	800a0b0 <osMutexNew+0x3a>
      rmtx = 1U;
 800a0aa:	2301      	movs	r3, #1
 800a0ac:	617b      	str	r3, [r7, #20]
 800a0ae:	e001      	b.n	800a0b4 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800a0b0:	2300      	movs	r3, #0
 800a0b2:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800a0b4:	69bb      	ldr	r3, [r7, #24]
 800a0b6:	f003 0308 	and.w	r3, r3, #8
 800a0ba:	2b00      	cmp	r3, #0
 800a0bc:	d15c      	bne.n	800a178 <osMutexNew+0x102>
      mem = -1;
 800a0be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800a0c2:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2b00      	cmp	r3, #0
 800a0c8:	d015      	beq.n	800a0f6 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	689b      	ldr	r3, [r3, #8]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d006      	beq.n	800a0e0 <osMutexNew+0x6a>
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	68db      	ldr	r3, [r3, #12]
 800a0d6:	2b4f      	cmp	r3, #79	; 0x4f
 800a0d8:	d902      	bls.n	800a0e0 <osMutexNew+0x6a>
          mem = 1;
 800a0da:	2301      	movs	r3, #1
 800a0dc:	613b      	str	r3, [r7, #16]
 800a0de:	e00c      	b.n	800a0fa <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800a0e0:	687b      	ldr	r3, [r7, #4]
 800a0e2:	689b      	ldr	r3, [r3, #8]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d108      	bne.n	800a0fa <osMutexNew+0x84>
 800a0e8:	687b      	ldr	r3, [r7, #4]
 800a0ea:	68db      	ldr	r3, [r3, #12]
 800a0ec:	2b00      	cmp	r3, #0
 800a0ee:	d104      	bne.n	800a0fa <osMutexNew+0x84>
            mem = 0;
 800a0f0:	2300      	movs	r3, #0
 800a0f2:	613b      	str	r3, [r7, #16]
 800a0f4:	e001      	b.n	800a0fa <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800a0f6:	2300      	movs	r3, #0
 800a0f8:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	2b01      	cmp	r3, #1
 800a0fe:	d112      	bne.n	800a126 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800a100:	697b      	ldr	r3, [r7, #20]
 800a102:	2b00      	cmp	r3, #0
 800a104:	d007      	beq.n	800a116 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800a106:	687b      	ldr	r3, [r7, #4]
 800a108:	689b      	ldr	r3, [r3, #8]
 800a10a:	4619      	mov	r1, r3
 800a10c:	2004      	movs	r0, #4
 800a10e:	f000 fb18 	bl	800a742 <xQueueCreateMutexStatic>
 800a112:	61f8      	str	r0, [r7, #28]
 800a114:	e016      	b.n	800a144 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800a116:	687b      	ldr	r3, [r7, #4]
 800a118:	689b      	ldr	r3, [r3, #8]
 800a11a:	4619      	mov	r1, r3
 800a11c:	2001      	movs	r0, #1
 800a11e:	f000 fb10 	bl	800a742 <xQueueCreateMutexStatic>
 800a122:	61f8      	str	r0, [r7, #28]
 800a124:	e00e      	b.n	800a144 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800a126:	693b      	ldr	r3, [r7, #16]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d10b      	bne.n	800a144 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	2b00      	cmp	r3, #0
 800a130:	d004      	beq.n	800a13c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800a132:	2004      	movs	r0, #4
 800a134:	f000 faed 	bl	800a712 <xQueueCreateMutex>
 800a138:	61f8      	str	r0, [r7, #28]
 800a13a:	e003      	b.n	800a144 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800a13c:	2001      	movs	r0, #1
 800a13e:	f000 fae8 	bl	800a712 <xQueueCreateMutex>
 800a142:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	2b00      	cmp	r3, #0
 800a148:	d00c      	beq.n	800a164 <osMutexNew+0xee>
        if (attr != NULL) {
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d003      	beq.n	800a158 <osMutexNew+0xe2>
          name = attr->name;
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	60fb      	str	r3, [r7, #12]
 800a156:	e001      	b.n	800a15c <osMutexNew+0xe6>
        } else {
          name = NULL;
 800a158:	2300      	movs	r3, #0
 800a15a:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800a15c:	68f9      	ldr	r1, [r7, #12]
 800a15e:	69f8      	ldr	r0, [r7, #28]
 800a160:	f001 f822 	bl	800b1a8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800a164:	69fb      	ldr	r3, [r7, #28]
 800a166:	2b00      	cmp	r3, #0
 800a168:	d006      	beq.n	800a178 <osMutexNew+0x102>
 800a16a:	697b      	ldr	r3, [r7, #20]
 800a16c:	2b00      	cmp	r3, #0
 800a16e:	d003      	beq.n	800a178 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800a170:	69fb      	ldr	r3, [r7, #28]
 800a172:	f043 0301 	orr.w	r3, r3, #1
 800a176:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800a178:	69fb      	ldr	r3, [r7, #28]
}
 800a17a:	4618      	mov	r0, r3
 800a17c:	3720      	adds	r7, #32
 800a17e:	46bd      	mov	sp, r7
 800a180:	bd80      	pop	{r7, pc}

0800a182 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800a182:	b580      	push	{r7, lr}
 800a184:	b086      	sub	sp, #24
 800a186:	af00      	add	r7, sp, #0
 800a188:	6078      	str	r0, [r7, #4]
 800a18a:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	f023 0301 	bic.w	r3, r3, #1
 800a192:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	f003 0301 	and.w	r3, r3, #1
 800a19a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a19c:	2300      	movs	r3, #0
 800a19e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a1a0:	f3ef 8305 	mrs	r3, IPSR
 800a1a4:	60bb      	str	r3, [r7, #8]
  return(result);
 800a1a6:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d003      	beq.n	800a1b4 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800a1ac:	f06f 0305 	mvn.w	r3, #5
 800a1b0:	617b      	str	r3, [r7, #20]
 800a1b2:	e02c      	b.n	800a20e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800a1b4:	693b      	ldr	r3, [r7, #16]
 800a1b6:	2b00      	cmp	r3, #0
 800a1b8:	d103      	bne.n	800a1c2 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800a1ba:	f06f 0303 	mvn.w	r3, #3
 800a1be:	617b      	str	r3, [r7, #20]
 800a1c0:	e025      	b.n	800a20e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	2b00      	cmp	r3, #0
 800a1c6:	d011      	beq.n	800a1ec <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800a1c8:	6839      	ldr	r1, [r7, #0]
 800a1ca:	6938      	ldr	r0, [r7, #16]
 800a1cc:	f000 fb08 	bl	800a7e0 <xQueueTakeMutexRecursive>
 800a1d0:	4603      	mov	r3, r0
 800a1d2:	2b01      	cmp	r3, #1
 800a1d4:	d01b      	beq.n	800a20e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a1d6:	683b      	ldr	r3, [r7, #0]
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d003      	beq.n	800a1e4 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800a1dc:	f06f 0301 	mvn.w	r3, #1
 800a1e0:	617b      	str	r3, [r7, #20]
 800a1e2:	e014      	b.n	800a20e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a1e4:	f06f 0302 	mvn.w	r3, #2
 800a1e8:	617b      	str	r3, [r7, #20]
 800a1ea:	e010      	b.n	800a20e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800a1ec:	6839      	ldr	r1, [r7, #0]
 800a1ee:	6938      	ldr	r0, [r7, #16]
 800a1f0:	f000 fda6 	bl	800ad40 <xQueueSemaphoreTake>
 800a1f4:	4603      	mov	r3, r0
 800a1f6:	2b01      	cmp	r3, #1
 800a1f8:	d009      	beq.n	800a20e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800a1fa:	683b      	ldr	r3, [r7, #0]
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d003      	beq.n	800a208 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800a200:	f06f 0301 	mvn.w	r3, #1
 800a204:	617b      	str	r3, [r7, #20]
 800a206:	e002      	b.n	800a20e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800a208:	f06f 0302 	mvn.w	r3, #2
 800a20c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800a20e:	697b      	ldr	r3, [r7, #20]
}
 800a210:	4618      	mov	r0, r3
 800a212:	3718      	adds	r7, #24
 800a214:	46bd      	mov	sp, r7
 800a216:	bd80      	pop	{r7, pc}

0800a218 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800a218:	b580      	push	{r7, lr}
 800a21a:	b086      	sub	sp, #24
 800a21c:	af00      	add	r7, sp, #0
 800a21e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800a220:	687b      	ldr	r3, [r7, #4]
 800a222:	f023 0301 	bic.w	r3, r3, #1
 800a226:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	f003 0301 	and.w	r3, r3, #1
 800a22e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800a230:	2300      	movs	r3, #0
 800a232:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800a234:	f3ef 8305 	mrs	r3, IPSR
 800a238:	60bb      	str	r3, [r7, #8]
  return(result);
 800a23a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800a23c:	2b00      	cmp	r3, #0
 800a23e:	d003      	beq.n	800a248 <osMutexRelease+0x30>
    stat = osErrorISR;
 800a240:	f06f 0305 	mvn.w	r3, #5
 800a244:	617b      	str	r3, [r7, #20]
 800a246:	e01f      	b.n	800a288 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800a248:	693b      	ldr	r3, [r7, #16]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d103      	bne.n	800a256 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800a24e:	f06f 0303 	mvn.w	r3, #3
 800a252:	617b      	str	r3, [r7, #20]
 800a254:	e018      	b.n	800a288 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800a256:	68fb      	ldr	r3, [r7, #12]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d009      	beq.n	800a270 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800a25c:	6938      	ldr	r0, [r7, #16]
 800a25e:	f000 fa8b 	bl	800a778 <xQueueGiveMutexRecursive>
 800a262:	4603      	mov	r3, r0
 800a264:	2b01      	cmp	r3, #1
 800a266:	d00f      	beq.n	800a288 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a268:	f06f 0302 	mvn.w	r3, #2
 800a26c:	617b      	str	r3, [r7, #20]
 800a26e:	e00b      	b.n	800a288 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800a270:	2300      	movs	r3, #0
 800a272:	2200      	movs	r2, #0
 800a274:	2100      	movs	r1, #0
 800a276:	6938      	ldr	r0, [r7, #16]
 800a278:	f000 fae8 	bl	800a84c <xQueueGenericSend>
 800a27c:	4603      	mov	r3, r0
 800a27e:	2b01      	cmp	r3, #1
 800a280:	d002      	beq.n	800a288 <osMutexRelease+0x70>
        stat = osErrorResource;
 800a282:	f06f 0302 	mvn.w	r3, #2
 800a286:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800a288:	697b      	ldr	r3, [r7, #20]
}
 800a28a:	4618      	mov	r0, r3
 800a28c:	3718      	adds	r7, #24
 800a28e:	46bd      	mov	sp, r7
 800a290:	bd80      	pop	{r7, pc}
	...

0800a294 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800a294:	b480      	push	{r7}
 800a296:	b085      	sub	sp, #20
 800a298:	af00      	add	r7, sp, #0
 800a29a:	60f8      	str	r0, [r7, #12]
 800a29c:	60b9      	str	r1, [r7, #8]
 800a29e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	4a07      	ldr	r2, [pc, #28]	; (800a2c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800a2a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800a2a6:	68bb      	ldr	r3, [r7, #8]
 800a2a8:	4a06      	ldr	r2, [pc, #24]	; (800a2c4 <vApplicationGetIdleTaskMemory+0x30>)
 800a2aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800a2ac:	687b      	ldr	r3, [r7, #4]
 800a2ae:	2240      	movs	r2, #64	; 0x40
 800a2b0:	601a      	str	r2, [r3, #0]
}
 800a2b2:	bf00      	nop
 800a2b4:	3714      	adds	r7, #20
 800a2b6:	46bd      	mov	sp, r7
 800a2b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2bc:	4770      	bx	lr
 800a2be:	bf00      	nop
 800a2c0:	20000f58 	.word	0x20000f58
 800a2c4:	20001014 	.word	0x20001014

0800a2c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800a2c8:	b480      	push	{r7}
 800a2ca:	b085      	sub	sp, #20
 800a2cc:	af00      	add	r7, sp, #0
 800a2ce:	60f8      	str	r0, [r7, #12]
 800a2d0:	60b9      	str	r1, [r7, #8]
 800a2d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800a2d4:	68fb      	ldr	r3, [r7, #12]
 800a2d6:	4a07      	ldr	r2, [pc, #28]	; (800a2f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800a2d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800a2da:	68bb      	ldr	r3, [r7, #8]
 800a2dc:	4a06      	ldr	r2, [pc, #24]	; (800a2f8 <vApplicationGetTimerTaskMemory+0x30>)
 800a2de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800a2e0:	687b      	ldr	r3, [r7, #4]
 800a2e2:	2280      	movs	r2, #128	; 0x80
 800a2e4:	601a      	str	r2, [r3, #0]
}
 800a2e6:	bf00      	nop
 800a2e8:	3714      	adds	r7, #20
 800a2ea:	46bd      	mov	sp, r7
 800a2ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f0:	4770      	bx	lr
 800a2f2:	bf00      	nop
 800a2f4:	20001114 	.word	0x20001114
 800a2f8:	200011d0 	.word	0x200011d0

0800a2fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800a2fc:	b480      	push	{r7}
 800a2fe:	b083      	sub	sp, #12
 800a300:	af00      	add	r7, sp, #0
 800a302:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	f103 0208 	add.w	r2, r3, #8
 800a30a:	687b      	ldr	r3, [r7, #4]
 800a30c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800a314:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a316:	687b      	ldr	r3, [r7, #4]
 800a318:	f103 0208 	add.w	r2, r3, #8
 800a31c:	687b      	ldr	r3, [r7, #4]
 800a31e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800a320:	687b      	ldr	r3, [r7, #4]
 800a322:	f103 0208 	add.w	r2, r3, #8
 800a326:	687b      	ldr	r3, [r7, #4]
 800a328:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800a32a:	687b      	ldr	r3, [r7, #4]
 800a32c:	2200      	movs	r2, #0
 800a32e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800a330:	bf00      	nop
 800a332:	370c      	adds	r7, #12
 800a334:	46bd      	mov	sp, r7
 800a336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a33a:	4770      	bx	lr

0800a33c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800a33c:	b480      	push	{r7}
 800a33e:	b083      	sub	sp, #12
 800a340:	af00      	add	r7, sp, #0
 800a342:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	2200      	movs	r2, #0
 800a348:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800a34a:	bf00      	nop
 800a34c:	370c      	adds	r7, #12
 800a34e:	46bd      	mov	sp, r7
 800a350:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a354:	4770      	bx	lr

0800a356 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a356:	b480      	push	{r7}
 800a358:	b085      	sub	sp, #20
 800a35a:	af00      	add	r7, sp, #0
 800a35c:	6078      	str	r0, [r7, #4]
 800a35e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800a360:	687b      	ldr	r3, [r7, #4]
 800a362:	685b      	ldr	r3, [r3, #4]
 800a364:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800a366:	683b      	ldr	r3, [r7, #0]
 800a368:	68fa      	ldr	r2, [r7, #12]
 800a36a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	689a      	ldr	r2, [r3, #8]
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800a374:	68fb      	ldr	r3, [r7, #12]
 800a376:	689b      	ldr	r3, [r3, #8]
 800a378:	683a      	ldr	r2, [r7, #0]
 800a37a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	683a      	ldr	r2, [r7, #0]
 800a380:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800a382:	683b      	ldr	r3, [r7, #0]
 800a384:	687a      	ldr	r2, [r7, #4]
 800a386:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	1c5a      	adds	r2, r3, #1
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	601a      	str	r2, [r3, #0]
}
 800a392:	bf00      	nop
 800a394:	3714      	adds	r7, #20
 800a396:	46bd      	mov	sp, r7
 800a398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39c:	4770      	bx	lr

0800a39e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800a39e:	b480      	push	{r7}
 800a3a0:	b085      	sub	sp, #20
 800a3a2:	af00      	add	r7, sp, #0
 800a3a4:	6078      	str	r0, [r7, #4]
 800a3a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800a3ae:	68bb      	ldr	r3, [r7, #8]
 800a3b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a3b4:	d103      	bne.n	800a3be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	691b      	ldr	r3, [r3, #16]
 800a3ba:	60fb      	str	r3, [r7, #12]
 800a3bc:	e00c      	b.n	800a3d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800a3be:	687b      	ldr	r3, [r7, #4]
 800a3c0:	3308      	adds	r3, #8
 800a3c2:	60fb      	str	r3, [r7, #12]
 800a3c4:	e002      	b.n	800a3cc <vListInsert+0x2e>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	685b      	ldr	r3, [r3, #4]
 800a3ca:	60fb      	str	r3, [r7, #12]
 800a3cc:	68fb      	ldr	r3, [r7, #12]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	681b      	ldr	r3, [r3, #0]
 800a3d2:	68ba      	ldr	r2, [r7, #8]
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	d2f6      	bcs.n	800a3c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800a3d8:	68fb      	ldr	r3, [r7, #12]
 800a3da:	685a      	ldr	r2, [r3, #4]
 800a3dc:	683b      	ldr	r3, [r7, #0]
 800a3de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	683a      	ldr	r2, [r7, #0]
 800a3e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800a3e8:	683b      	ldr	r3, [r7, #0]
 800a3ea:	68fa      	ldr	r2, [r7, #12]
 800a3ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	683a      	ldr	r2, [r7, #0]
 800a3f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800a3f4:	683b      	ldr	r3, [r7, #0]
 800a3f6:	687a      	ldr	r2, [r7, #4]
 800a3f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800a3fa:	687b      	ldr	r3, [r7, #4]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	1c5a      	adds	r2, r3, #1
 800a400:	687b      	ldr	r3, [r7, #4]
 800a402:	601a      	str	r2, [r3, #0]
}
 800a404:	bf00      	nop
 800a406:	3714      	adds	r7, #20
 800a408:	46bd      	mov	sp, r7
 800a40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a40e:	4770      	bx	lr

0800a410 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800a410:	b480      	push	{r7}
 800a412:	b085      	sub	sp, #20
 800a414:	af00      	add	r7, sp, #0
 800a416:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	691b      	ldr	r3, [r3, #16]
 800a41c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800a41e:	687b      	ldr	r3, [r7, #4]
 800a420:	685b      	ldr	r3, [r3, #4]
 800a422:	687a      	ldr	r2, [r7, #4]
 800a424:	6892      	ldr	r2, [r2, #8]
 800a426:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	689b      	ldr	r3, [r3, #8]
 800a42c:	687a      	ldr	r2, [r7, #4]
 800a42e:	6852      	ldr	r2, [r2, #4]
 800a430:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800a432:	68fb      	ldr	r3, [r7, #12]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	687a      	ldr	r2, [r7, #4]
 800a438:	429a      	cmp	r2, r3
 800a43a:	d103      	bne.n	800a444 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	689a      	ldr	r2, [r3, #8]
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	2200      	movs	r2, #0
 800a448:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800a44a:	68fb      	ldr	r3, [r7, #12]
 800a44c:	681b      	ldr	r3, [r3, #0]
 800a44e:	1e5a      	subs	r2, r3, #1
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	681b      	ldr	r3, [r3, #0]
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3714      	adds	r7, #20
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800a464:	b580      	push	{r7, lr}
 800a466:	b084      	sub	sp, #16
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
 800a46c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800a46e:	687b      	ldr	r3, [r7, #4]
 800a470:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	2b00      	cmp	r3, #0
 800a476:	d10a      	bne.n	800a48e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800a478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a47c:	f383 8811 	msr	BASEPRI, r3
 800a480:	f3bf 8f6f 	isb	sy
 800a484:	f3bf 8f4f 	dsb	sy
 800a488:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800a48a:	bf00      	nop
 800a48c:	e7fe      	b.n	800a48c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800a48e:	f002 fc19 	bl	800ccc4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681a      	ldr	r2, [r3, #0]
 800a496:	68fb      	ldr	r3, [r7, #12]
 800a498:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a49a:	68f9      	ldr	r1, [r7, #12]
 800a49c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a49e:	fb01 f303 	mul.w	r3, r1, r3
 800a4a2:	441a      	add	r2, r3
 800a4a4:	68fb      	ldr	r3, [r7, #12]
 800a4a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	2200      	movs	r2, #0
 800a4ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	681a      	ldr	r2, [r3, #0]
 800a4b2:	68fb      	ldr	r3, [r7, #12]
 800a4b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	681a      	ldr	r2, [r3, #0]
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a4be:	3b01      	subs	r3, #1
 800a4c0:	68f9      	ldr	r1, [r7, #12]
 800a4c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800a4c4:	fb01 f303 	mul.w	r3, r1, r3
 800a4c8:	441a      	add	r2, r3
 800a4ca:	68fb      	ldr	r3, [r7, #12]
 800a4cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	22ff      	movs	r2, #255	; 0xff
 800a4d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	22ff      	movs	r2, #255	; 0xff
 800a4da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800a4de:	683b      	ldr	r3, [r7, #0]
 800a4e0:	2b00      	cmp	r3, #0
 800a4e2:	d114      	bne.n	800a50e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	691b      	ldr	r3, [r3, #16]
 800a4e8:	2b00      	cmp	r3, #0
 800a4ea:	d01a      	beq.n	800a522 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	3310      	adds	r3, #16
 800a4f0:	4618      	mov	r0, r3
 800a4f2:	f001 fbbb 	bl	800bc6c <xTaskRemoveFromEventList>
 800a4f6:	4603      	mov	r3, r0
 800a4f8:	2b00      	cmp	r3, #0
 800a4fa:	d012      	beq.n	800a522 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800a4fc:	4b0c      	ldr	r3, [pc, #48]	; (800a530 <xQueueGenericReset+0xcc>)
 800a4fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a502:	601a      	str	r2, [r3, #0]
 800a504:	f3bf 8f4f 	dsb	sy
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	e009      	b.n	800a522 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800a50e:	68fb      	ldr	r3, [r7, #12]
 800a510:	3310      	adds	r3, #16
 800a512:	4618      	mov	r0, r3
 800a514:	f7ff fef2 	bl	800a2fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800a518:	68fb      	ldr	r3, [r7, #12]
 800a51a:	3324      	adds	r3, #36	; 0x24
 800a51c:	4618      	mov	r0, r3
 800a51e:	f7ff feed 	bl	800a2fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a522:	f002 fbff 	bl	800cd24 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a526:	2301      	movs	r3, #1
}
 800a528:	4618      	mov	r0, r3
 800a52a:	3710      	adds	r7, #16
 800a52c:	46bd      	mov	sp, r7
 800a52e:	bd80      	pop	{r7, pc}
 800a530:	e000ed04 	.word	0xe000ed04

0800a534 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a534:	b580      	push	{r7, lr}
 800a536:	b08e      	sub	sp, #56	; 0x38
 800a538:	af02      	add	r7, sp, #8
 800a53a:	60f8      	str	r0, [r7, #12]
 800a53c:	60b9      	str	r1, [r7, #8]
 800a53e:	607a      	str	r2, [r7, #4]
 800a540:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a542:	68fb      	ldr	r3, [r7, #12]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d10a      	bne.n	800a55e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800a548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a54c:	f383 8811 	msr	BASEPRI, r3
 800a550:	f3bf 8f6f 	isb	sy
 800a554:	f3bf 8f4f 	dsb	sy
 800a558:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a55a:	bf00      	nop
 800a55c:	e7fe      	b.n	800a55c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a55e:	683b      	ldr	r3, [r7, #0]
 800a560:	2b00      	cmp	r3, #0
 800a562:	d10a      	bne.n	800a57a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800a564:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a568:	f383 8811 	msr	BASEPRI, r3
 800a56c:	f3bf 8f6f 	isb	sy
 800a570:	f3bf 8f4f 	dsb	sy
 800a574:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a576:	bf00      	nop
 800a578:	e7fe      	b.n	800a578 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d002      	beq.n	800a586 <xQueueGenericCreateStatic+0x52>
 800a580:	68bb      	ldr	r3, [r7, #8]
 800a582:	2b00      	cmp	r3, #0
 800a584:	d001      	beq.n	800a58a <xQueueGenericCreateStatic+0x56>
 800a586:	2301      	movs	r3, #1
 800a588:	e000      	b.n	800a58c <xQueueGenericCreateStatic+0x58>
 800a58a:	2300      	movs	r3, #0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10a      	bne.n	800a5a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800a590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a594:	f383 8811 	msr	BASEPRI, r3
 800a598:	f3bf 8f6f 	isb	sy
 800a59c:	f3bf 8f4f 	dsb	sy
 800a5a0:	623b      	str	r3, [r7, #32]
}
 800a5a2:	bf00      	nop
 800a5a4:	e7fe      	b.n	800a5a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	2b00      	cmp	r3, #0
 800a5aa:	d102      	bne.n	800a5b2 <xQueueGenericCreateStatic+0x7e>
 800a5ac:	68bb      	ldr	r3, [r7, #8]
 800a5ae:	2b00      	cmp	r3, #0
 800a5b0:	d101      	bne.n	800a5b6 <xQueueGenericCreateStatic+0x82>
 800a5b2:	2301      	movs	r3, #1
 800a5b4:	e000      	b.n	800a5b8 <xQueueGenericCreateStatic+0x84>
 800a5b6:	2300      	movs	r3, #0
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10a      	bne.n	800a5d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c0:	f383 8811 	msr	BASEPRI, r3
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	61fb      	str	r3, [r7, #28]
}
 800a5ce:	bf00      	nop
 800a5d0:	e7fe      	b.n	800a5d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a5d2:	2350      	movs	r3, #80	; 0x50
 800a5d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a5d6:	697b      	ldr	r3, [r7, #20]
 800a5d8:	2b50      	cmp	r3, #80	; 0x50
 800a5da:	d00a      	beq.n	800a5f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800a5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5e0:	f383 8811 	msr	BASEPRI, r3
 800a5e4:	f3bf 8f6f 	isb	sy
 800a5e8:	f3bf 8f4f 	dsb	sy
 800a5ec:	61bb      	str	r3, [r7, #24]
}
 800a5ee:	bf00      	nop
 800a5f0:	e7fe      	b.n	800a5f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a5f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a5f4:	683b      	ldr	r3, [r7, #0]
 800a5f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800a5f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00d      	beq.n	800a61a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a5fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a600:	2201      	movs	r2, #1
 800a602:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a606:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800a60a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a60c:	9300      	str	r3, [sp, #0]
 800a60e:	4613      	mov	r3, r2
 800a610:	687a      	ldr	r2, [r7, #4]
 800a612:	68b9      	ldr	r1, [r7, #8]
 800a614:	68f8      	ldr	r0, [r7, #12]
 800a616:	f000 f83f 	bl	800a698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a61a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800a61c:	4618      	mov	r0, r3
 800a61e:	3730      	adds	r7, #48	; 0x30
 800a620:	46bd      	mov	sp, r7
 800a622:	bd80      	pop	{r7, pc}

0800a624 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a624:	b580      	push	{r7, lr}
 800a626:	b08a      	sub	sp, #40	; 0x28
 800a628:	af02      	add	r7, sp, #8
 800a62a:	60f8      	str	r0, [r7, #12]
 800a62c:	60b9      	str	r1, [r7, #8]
 800a62e:	4613      	mov	r3, r2
 800a630:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a632:	68fb      	ldr	r3, [r7, #12]
 800a634:	2b00      	cmp	r3, #0
 800a636:	d10a      	bne.n	800a64e <xQueueGenericCreate+0x2a>
	__asm volatile
 800a638:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a63c:	f383 8811 	msr	BASEPRI, r3
 800a640:	f3bf 8f6f 	isb	sy
 800a644:	f3bf 8f4f 	dsb	sy
 800a648:	613b      	str	r3, [r7, #16]
}
 800a64a:	bf00      	nop
 800a64c:	e7fe      	b.n	800a64c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a64e:	68fb      	ldr	r3, [r7, #12]
 800a650:	68ba      	ldr	r2, [r7, #8]
 800a652:	fb02 f303 	mul.w	r3, r2, r3
 800a656:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a658:	69fb      	ldr	r3, [r7, #28]
 800a65a:	3350      	adds	r3, #80	; 0x50
 800a65c:	4618      	mov	r0, r3
 800a65e:	f002 fc53 	bl	800cf08 <pvPortMalloc>
 800a662:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a664:	69bb      	ldr	r3, [r7, #24]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d011      	beq.n	800a68e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a66a:	69bb      	ldr	r3, [r7, #24]
 800a66c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a66e:	697b      	ldr	r3, [r7, #20]
 800a670:	3350      	adds	r3, #80	; 0x50
 800a672:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a674:	69bb      	ldr	r3, [r7, #24]
 800a676:	2200      	movs	r2, #0
 800a678:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a67c:	79fa      	ldrb	r2, [r7, #7]
 800a67e:	69bb      	ldr	r3, [r7, #24]
 800a680:	9300      	str	r3, [sp, #0]
 800a682:	4613      	mov	r3, r2
 800a684:	697a      	ldr	r2, [r7, #20]
 800a686:	68b9      	ldr	r1, [r7, #8]
 800a688:	68f8      	ldr	r0, [r7, #12]
 800a68a:	f000 f805 	bl	800a698 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a68e:	69bb      	ldr	r3, [r7, #24]
	}
 800a690:	4618      	mov	r0, r3
 800a692:	3720      	adds	r7, #32
 800a694:	46bd      	mov	sp, r7
 800a696:	bd80      	pop	{r7, pc}

0800a698 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a698:	b580      	push	{r7, lr}
 800a69a:	b084      	sub	sp, #16
 800a69c:	af00      	add	r7, sp, #0
 800a69e:	60f8      	str	r0, [r7, #12]
 800a6a0:	60b9      	str	r1, [r7, #8]
 800a6a2:	607a      	str	r2, [r7, #4]
 800a6a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a6a6:	68bb      	ldr	r3, [r7, #8]
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d103      	bne.n	800a6b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a6ac:	69bb      	ldr	r3, [r7, #24]
 800a6ae:	69ba      	ldr	r2, [r7, #24]
 800a6b0:	601a      	str	r2, [r3, #0]
 800a6b2:	e002      	b.n	800a6ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a6b4:	69bb      	ldr	r3, [r7, #24]
 800a6b6:	687a      	ldr	r2, [r7, #4]
 800a6b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a6ba:	69bb      	ldr	r3, [r7, #24]
 800a6bc:	68fa      	ldr	r2, [r7, #12]
 800a6be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a6c0:	69bb      	ldr	r3, [r7, #24]
 800a6c2:	68ba      	ldr	r2, [r7, #8]
 800a6c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a6c6:	2101      	movs	r1, #1
 800a6c8:	69b8      	ldr	r0, [r7, #24]
 800a6ca:	f7ff fecb 	bl	800a464 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a6ce:	69bb      	ldr	r3, [r7, #24]
 800a6d0:	78fa      	ldrb	r2, [r7, #3]
 800a6d2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a6d6:	bf00      	nop
 800a6d8:	3710      	adds	r7, #16
 800a6da:	46bd      	mov	sp, r7
 800a6dc:	bd80      	pop	{r7, pc}

0800a6de <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a6de:	b580      	push	{r7, lr}
 800a6e0:	b082      	sub	sp, #8
 800a6e2:	af00      	add	r7, sp, #0
 800a6e4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00e      	beq.n	800a70a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	2200      	movs	r2, #0
 800a6f6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a6fe:	2300      	movs	r3, #0
 800a700:	2200      	movs	r2, #0
 800a702:	2100      	movs	r1, #0
 800a704:	6878      	ldr	r0, [r7, #4]
 800a706:	f000 f8a1 	bl	800a84c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a70a:	bf00      	nop
 800a70c:	3708      	adds	r7, #8
 800a70e:	46bd      	mov	sp, r7
 800a710:	bd80      	pop	{r7, pc}

0800a712 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a712:	b580      	push	{r7, lr}
 800a714:	b086      	sub	sp, #24
 800a716:	af00      	add	r7, sp, #0
 800a718:	4603      	mov	r3, r0
 800a71a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a71c:	2301      	movs	r3, #1
 800a71e:	617b      	str	r3, [r7, #20]
 800a720:	2300      	movs	r3, #0
 800a722:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a724:	79fb      	ldrb	r3, [r7, #7]
 800a726:	461a      	mov	r2, r3
 800a728:	6939      	ldr	r1, [r7, #16]
 800a72a:	6978      	ldr	r0, [r7, #20]
 800a72c:	f7ff ff7a 	bl	800a624 <xQueueGenericCreate>
 800a730:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a732:	68f8      	ldr	r0, [r7, #12]
 800a734:	f7ff ffd3 	bl	800a6de <prvInitialiseMutex>

		return xNewQueue;
 800a738:	68fb      	ldr	r3, [r7, #12]
	}
 800a73a:	4618      	mov	r0, r3
 800a73c:	3718      	adds	r7, #24
 800a73e:	46bd      	mov	sp, r7
 800a740:	bd80      	pop	{r7, pc}

0800a742 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a742:	b580      	push	{r7, lr}
 800a744:	b088      	sub	sp, #32
 800a746:	af02      	add	r7, sp, #8
 800a748:	4603      	mov	r3, r0
 800a74a:	6039      	str	r1, [r7, #0]
 800a74c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a74e:	2301      	movs	r3, #1
 800a750:	617b      	str	r3, [r7, #20]
 800a752:	2300      	movs	r3, #0
 800a754:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a756:	79fb      	ldrb	r3, [r7, #7]
 800a758:	9300      	str	r3, [sp, #0]
 800a75a:	683b      	ldr	r3, [r7, #0]
 800a75c:	2200      	movs	r2, #0
 800a75e:	6939      	ldr	r1, [r7, #16]
 800a760:	6978      	ldr	r0, [r7, #20]
 800a762:	f7ff fee7 	bl	800a534 <xQueueGenericCreateStatic>
 800a766:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a768:	68f8      	ldr	r0, [r7, #12]
 800a76a:	f7ff ffb8 	bl	800a6de <prvInitialiseMutex>

		return xNewQueue;
 800a76e:	68fb      	ldr	r3, [r7, #12]
	}
 800a770:	4618      	mov	r0, r3
 800a772:	3718      	adds	r7, #24
 800a774:	46bd      	mov	sp, r7
 800a776:	bd80      	pop	{r7, pc}

0800a778 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800a778:	b590      	push	{r4, r7, lr}
 800a77a:	b087      	sub	sp, #28
 800a77c:	af00      	add	r7, sp, #0
 800a77e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a784:	693b      	ldr	r3, [r7, #16]
 800a786:	2b00      	cmp	r3, #0
 800a788:	d10a      	bne.n	800a7a0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800a78a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a78e:	f383 8811 	msr	BASEPRI, r3
 800a792:	f3bf 8f6f 	isb	sy
 800a796:	f3bf 8f4f 	dsb	sy
 800a79a:	60fb      	str	r3, [r7, #12]
}
 800a79c:	bf00      	nop
 800a79e:	e7fe      	b.n	800a79e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	689c      	ldr	r4, [r3, #8]
 800a7a4:	f001 fc24 	bl	800bff0 <xTaskGetCurrentTaskHandle>
 800a7a8:	4603      	mov	r3, r0
 800a7aa:	429c      	cmp	r4, r3
 800a7ac:	d111      	bne.n	800a7d2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800a7ae:	693b      	ldr	r3, [r7, #16]
 800a7b0:	68db      	ldr	r3, [r3, #12]
 800a7b2:	1e5a      	subs	r2, r3, #1
 800a7b4:	693b      	ldr	r3, [r7, #16]
 800a7b6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800a7b8:	693b      	ldr	r3, [r7, #16]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	2b00      	cmp	r3, #0
 800a7be:	d105      	bne.n	800a7cc <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800a7c0:	2300      	movs	r3, #0
 800a7c2:	2200      	movs	r2, #0
 800a7c4:	2100      	movs	r1, #0
 800a7c6:	6938      	ldr	r0, [r7, #16]
 800a7c8:	f000 f840 	bl	800a84c <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800a7cc:	2301      	movs	r3, #1
 800a7ce:	617b      	str	r3, [r7, #20]
 800a7d0:	e001      	b.n	800a7d6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800a7d6:	697b      	ldr	r3, [r7, #20]
	}
 800a7d8:	4618      	mov	r0, r3
 800a7da:	371c      	adds	r7, #28
 800a7dc:	46bd      	mov	sp, r7
 800a7de:	bd90      	pop	{r4, r7, pc}

0800a7e0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800a7e0:	b590      	push	{r4, r7, lr}
 800a7e2:	b087      	sub	sp, #28
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	6078      	str	r0, [r7, #4]
 800a7e8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800a7ee:	693b      	ldr	r3, [r7, #16]
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d10a      	bne.n	800a80a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800a7f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a7f8:	f383 8811 	msr	BASEPRI, r3
 800a7fc:	f3bf 8f6f 	isb	sy
 800a800:	f3bf 8f4f 	dsb	sy
 800a804:	60fb      	str	r3, [r7, #12]
}
 800a806:	bf00      	nop
 800a808:	e7fe      	b.n	800a808 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800a80a:	693b      	ldr	r3, [r7, #16]
 800a80c:	689c      	ldr	r4, [r3, #8]
 800a80e:	f001 fbef 	bl	800bff0 <xTaskGetCurrentTaskHandle>
 800a812:	4603      	mov	r3, r0
 800a814:	429c      	cmp	r4, r3
 800a816:	d107      	bne.n	800a828 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a818:	693b      	ldr	r3, [r7, #16]
 800a81a:	68db      	ldr	r3, [r3, #12]
 800a81c:	1c5a      	adds	r2, r3, #1
 800a81e:	693b      	ldr	r3, [r7, #16]
 800a820:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800a822:	2301      	movs	r3, #1
 800a824:	617b      	str	r3, [r7, #20]
 800a826:	e00c      	b.n	800a842 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800a828:	6839      	ldr	r1, [r7, #0]
 800a82a:	6938      	ldr	r0, [r7, #16]
 800a82c:	f000 fa88 	bl	800ad40 <xQueueSemaphoreTake>
 800a830:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800a832:	697b      	ldr	r3, [r7, #20]
 800a834:	2b00      	cmp	r3, #0
 800a836:	d004      	beq.n	800a842 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800a838:	693b      	ldr	r3, [r7, #16]
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	1c5a      	adds	r2, r3, #1
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800a842:	697b      	ldr	r3, [r7, #20]
	}
 800a844:	4618      	mov	r0, r3
 800a846:	371c      	adds	r7, #28
 800a848:	46bd      	mov	sp, r7
 800a84a:	bd90      	pop	{r4, r7, pc}

0800a84c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a84c:	b580      	push	{r7, lr}
 800a84e:	b08e      	sub	sp, #56	; 0x38
 800a850:	af00      	add	r7, sp, #0
 800a852:	60f8      	str	r0, [r7, #12]
 800a854:	60b9      	str	r1, [r7, #8]
 800a856:	607a      	str	r2, [r7, #4]
 800a858:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a85a:	2300      	movs	r3, #0
 800a85c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a85e:	68fb      	ldr	r3, [r7, #12]
 800a860:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a862:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a864:	2b00      	cmp	r3, #0
 800a866:	d10a      	bne.n	800a87e <xQueueGenericSend+0x32>
	__asm volatile
 800a868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a86c:	f383 8811 	msr	BASEPRI, r3
 800a870:	f3bf 8f6f 	isb	sy
 800a874:	f3bf 8f4f 	dsb	sy
 800a878:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800a87a:	bf00      	nop
 800a87c:	e7fe      	b.n	800a87c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a87e:	68bb      	ldr	r3, [r7, #8]
 800a880:	2b00      	cmp	r3, #0
 800a882:	d103      	bne.n	800a88c <xQueueGenericSend+0x40>
 800a884:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a888:	2b00      	cmp	r3, #0
 800a88a:	d101      	bne.n	800a890 <xQueueGenericSend+0x44>
 800a88c:	2301      	movs	r3, #1
 800a88e:	e000      	b.n	800a892 <xQueueGenericSend+0x46>
 800a890:	2300      	movs	r3, #0
 800a892:	2b00      	cmp	r3, #0
 800a894:	d10a      	bne.n	800a8ac <xQueueGenericSend+0x60>
	__asm volatile
 800a896:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a89a:	f383 8811 	msr	BASEPRI, r3
 800a89e:	f3bf 8f6f 	isb	sy
 800a8a2:	f3bf 8f4f 	dsb	sy
 800a8a6:	627b      	str	r3, [r7, #36]	; 0x24
}
 800a8a8:	bf00      	nop
 800a8aa:	e7fe      	b.n	800a8aa <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	2b02      	cmp	r3, #2
 800a8b0:	d103      	bne.n	800a8ba <xQueueGenericSend+0x6e>
 800a8b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d101      	bne.n	800a8be <xQueueGenericSend+0x72>
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	e000      	b.n	800a8c0 <xQueueGenericSend+0x74>
 800a8be:	2300      	movs	r3, #0
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d10a      	bne.n	800a8da <xQueueGenericSend+0x8e>
	__asm volatile
 800a8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	623b      	str	r3, [r7, #32]
}
 800a8d6:	bf00      	nop
 800a8d8:	e7fe      	b.n	800a8d8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8da:	f001 fb99 	bl	800c010 <xTaskGetSchedulerState>
 800a8de:	4603      	mov	r3, r0
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	d102      	bne.n	800a8ea <xQueueGenericSend+0x9e>
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2b00      	cmp	r3, #0
 800a8e8:	d101      	bne.n	800a8ee <xQueueGenericSend+0xa2>
 800a8ea:	2301      	movs	r3, #1
 800a8ec:	e000      	b.n	800a8f0 <xQueueGenericSend+0xa4>
 800a8ee:	2300      	movs	r3, #0
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	d10a      	bne.n	800a90a <xQueueGenericSend+0xbe>
	__asm volatile
 800a8f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a8f8:	f383 8811 	msr	BASEPRI, r3
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f3bf 8f4f 	dsb	sy
 800a904:	61fb      	str	r3, [r7, #28]
}
 800a906:	bf00      	nop
 800a908:	e7fe      	b.n	800a908 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a90a:	f002 f9db 	bl	800ccc4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a90e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a910:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a912:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a914:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a916:	429a      	cmp	r2, r3
 800a918:	d302      	bcc.n	800a920 <xQueueGenericSend+0xd4>
 800a91a:	683b      	ldr	r3, [r7, #0]
 800a91c:	2b02      	cmp	r3, #2
 800a91e:	d129      	bne.n	800a974 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a920:	683a      	ldr	r2, [r7, #0]
 800a922:	68b9      	ldr	r1, [r7, #8]
 800a924:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a926:	f000 fb2f 	bl	800af88 <prvCopyDataToQueue>
 800a92a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a92c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a92e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a930:	2b00      	cmp	r3, #0
 800a932:	d010      	beq.n	800a956 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a934:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a936:	3324      	adds	r3, #36	; 0x24
 800a938:	4618      	mov	r0, r3
 800a93a:	f001 f997 	bl	800bc6c <xTaskRemoveFromEventList>
 800a93e:	4603      	mov	r3, r0
 800a940:	2b00      	cmp	r3, #0
 800a942:	d013      	beq.n	800a96c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a944:	4b3f      	ldr	r3, [pc, #252]	; (800aa44 <xQueueGenericSend+0x1f8>)
 800a946:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a94a:	601a      	str	r2, [r3, #0]
 800a94c:	f3bf 8f4f 	dsb	sy
 800a950:	f3bf 8f6f 	isb	sy
 800a954:	e00a      	b.n	800a96c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d007      	beq.n	800a96c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a95c:	4b39      	ldr	r3, [pc, #228]	; (800aa44 <xQueueGenericSend+0x1f8>)
 800a95e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	f3bf 8f4f 	dsb	sy
 800a968:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a96c:	f002 f9da 	bl	800cd24 <vPortExitCritical>
				return pdPASS;
 800a970:	2301      	movs	r3, #1
 800a972:	e063      	b.n	800aa3c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d103      	bne.n	800a982 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a97a:	f002 f9d3 	bl	800cd24 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a97e:	2300      	movs	r3, #0
 800a980:	e05c      	b.n	800aa3c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a982:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a984:	2b00      	cmp	r3, #0
 800a986:	d106      	bne.n	800a996 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a988:	f107 0314 	add.w	r3, r7, #20
 800a98c:	4618      	mov	r0, r3
 800a98e:	f001 f9d1 	bl	800bd34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a992:	2301      	movs	r3, #1
 800a994:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a996:	f002 f9c5 	bl	800cd24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a99a:	f000 ff3d 	bl	800b818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a99e:	f002 f991 	bl	800ccc4 <vPortEnterCritical>
 800a9a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a9a8:	b25b      	sxtb	r3, r3
 800a9aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9ae:	d103      	bne.n	800a9b8 <xQueueGenericSend+0x16c>
 800a9b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9b2:	2200      	movs	r2, #0
 800a9b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9ba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9be:	b25b      	sxtb	r3, r3
 800a9c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800a9c4:	d103      	bne.n	800a9ce <xQueueGenericSend+0x182>
 800a9c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9ce:	f002 f9a9 	bl	800cd24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9d2:	1d3a      	adds	r2, r7, #4
 800a9d4:	f107 0314 	add.w	r3, r7, #20
 800a9d8:	4611      	mov	r1, r2
 800a9da:	4618      	mov	r0, r3
 800a9dc:	f001 f9c0 	bl	800bd60 <xTaskCheckForTimeOut>
 800a9e0:	4603      	mov	r3, r0
 800a9e2:	2b00      	cmp	r3, #0
 800a9e4:	d124      	bne.n	800aa30 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a9e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a9e8:	f000 fbc6 	bl	800b178 <prvIsQueueFull>
 800a9ec:	4603      	mov	r3, r0
 800a9ee:	2b00      	cmp	r3, #0
 800a9f0:	d018      	beq.n	800aa24 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a9f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a9f4:	3310      	adds	r3, #16
 800a9f6:	687a      	ldr	r2, [r7, #4]
 800a9f8:	4611      	mov	r1, r2
 800a9fa:	4618      	mov	r0, r3
 800a9fc:	f001 f8e6 	bl	800bbcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800aa00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa02:	f000 fb51 	bl	800b0a8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800aa06:	f000 ff15 	bl	800b834 <xTaskResumeAll>
 800aa0a:	4603      	mov	r3, r0
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	f47f af7c 	bne.w	800a90a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800aa12:	4b0c      	ldr	r3, [pc, #48]	; (800aa44 <xQueueGenericSend+0x1f8>)
 800aa14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aa18:	601a      	str	r2, [r3, #0]
 800aa1a:	f3bf 8f4f 	dsb	sy
 800aa1e:	f3bf 8f6f 	isb	sy
 800aa22:	e772      	b.n	800a90a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800aa24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa26:	f000 fb3f 	bl	800b0a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa2a:	f000 ff03 	bl	800b834 <xTaskResumeAll>
 800aa2e:	e76c      	b.n	800a90a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800aa30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800aa32:	f000 fb39 	bl	800b0a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa36:	f000 fefd 	bl	800b834 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800aa3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800aa3c:	4618      	mov	r0, r3
 800aa3e:	3738      	adds	r7, #56	; 0x38
 800aa40:	46bd      	mov	sp, r7
 800aa42:	bd80      	pop	{r7, pc}
 800aa44:	e000ed04 	.word	0xe000ed04

0800aa48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800aa48:	b580      	push	{r7, lr}
 800aa4a:	b090      	sub	sp, #64	; 0x40
 800aa4c:	af00      	add	r7, sp, #0
 800aa4e:	60f8      	str	r0, [r7, #12]
 800aa50:	60b9      	str	r1, [r7, #8]
 800aa52:	607a      	str	r2, [r7, #4]
 800aa54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800aa56:	68fb      	ldr	r3, [r7, #12]
 800aa58:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800aa5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5c:	2b00      	cmp	r3, #0
 800aa5e:	d10a      	bne.n	800aa76 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800aa60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa64:	f383 8811 	msr	BASEPRI, r3
 800aa68:	f3bf 8f6f 	isb	sy
 800aa6c:	f3bf 8f4f 	dsb	sy
 800aa70:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800aa72:	bf00      	nop
 800aa74:	e7fe      	b.n	800aa74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800aa76:	68bb      	ldr	r3, [r7, #8]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d103      	bne.n	800aa84 <xQueueGenericSendFromISR+0x3c>
 800aa7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa80:	2b00      	cmp	r3, #0
 800aa82:	d101      	bne.n	800aa88 <xQueueGenericSendFromISR+0x40>
 800aa84:	2301      	movs	r3, #1
 800aa86:	e000      	b.n	800aa8a <xQueueGenericSendFromISR+0x42>
 800aa88:	2300      	movs	r3, #0
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d10a      	bne.n	800aaa4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800aa8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa92:	f383 8811 	msr	BASEPRI, r3
 800aa96:	f3bf 8f6f 	isb	sy
 800aa9a:	f3bf 8f4f 	dsb	sy
 800aa9e:	627b      	str	r3, [r7, #36]	; 0x24
}
 800aaa0:	bf00      	nop
 800aaa2:	e7fe      	b.n	800aaa2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800aaa4:	683b      	ldr	r3, [r7, #0]
 800aaa6:	2b02      	cmp	r3, #2
 800aaa8:	d103      	bne.n	800aab2 <xQueueGenericSendFromISR+0x6a>
 800aaaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aaae:	2b01      	cmp	r3, #1
 800aab0:	d101      	bne.n	800aab6 <xQueueGenericSendFromISR+0x6e>
 800aab2:	2301      	movs	r3, #1
 800aab4:	e000      	b.n	800aab8 <xQueueGenericSendFromISR+0x70>
 800aab6:	2300      	movs	r3, #0
 800aab8:	2b00      	cmp	r3, #0
 800aaba:	d10a      	bne.n	800aad2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800aabc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aac0:	f383 8811 	msr	BASEPRI, r3
 800aac4:	f3bf 8f6f 	isb	sy
 800aac8:	f3bf 8f4f 	dsb	sy
 800aacc:	623b      	str	r3, [r7, #32]
}
 800aace:	bf00      	nop
 800aad0:	e7fe      	b.n	800aad0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800aad2:	f002 f9d9 	bl	800ce88 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800aad6:	f3ef 8211 	mrs	r2, BASEPRI
 800aada:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aade:	f383 8811 	msr	BASEPRI, r3
 800aae2:	f3bf 8f6f 	isb	sy
 800aae6:	f3bf 8f4f 	dsb	sy
 800aaea:	61fa      	str	r2, [r7, #28]
 800aaec:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800aaee:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800aaf0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800aaf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaf6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aaf8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800aafa:	429a      	cmp	r2, r3
 800aafc:	d302      	bcc.n	800ab04 <xQueueGenericSendFromISR+0xbc>
 800aafe:	683b      	ldr	r3, [r7, #0]
 800ab00:	2b02      	cmp	r3, #2
 800ab02:	d12f      	bne.n	800ab64 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ab04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab06:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ab0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ab0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ab12:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800ab14:	683a      	ldr	r2, [r7, #0]
 800ab16:	68b9      	ldr	r1, [r7, #8]
 800ab18:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800ab1a:	f000 fa35 	bl	800af88 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ab1e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800ab22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ab26:	d112      	bne.n	800ab4e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ab28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d016      	beq.n	800ab5e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ab30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab32:	3324      	adds	r3, #36	; 0x24
 800ab34:	4618      	mov	r0, r3
 800ab36:	f001 f899 	bl	800bc6c <xTaskRemoveFromEventList>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	d00e      	beq.n	800ab5e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ab40:	687b      	ldr	r3, [r7, #4]
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d00b      	beq.n	800ab5e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ab46:	687b      	ldr	r3, [r7, #4]
 800ab48:	2201      	movs	r2, #1
 800ab4a:	601a      	str	r2, [r3, #0]
 800ab4c:	e007      	b.n	800ab5e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ab4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800ab52:	3301      	adds	r3, #1
 800ab54:	b2db      	uxtb	r3, r3
 800ab56:	b25a      	sxtb	r2, r3
 800ab58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ab5a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ab5e:	2301      	movs	r3, #1
 800ab60:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800ab62:	e001      	b.n	800ab68 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ab64:	2300      	movs	r3, #0
 800ab66:	63fb      	str	r3, [r7, #60]	; 0x3c
 800ab68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ab6a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ab6c:	697b      	ldr	r3, [r7, #20]
 800ab6e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800ab72:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800ab74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800ab76:	4618      	mov	r0, r3
 800ab78:	3740      	adds	r7, #64	; 0x40
 800ab7a:	46bd      	mov	sp, r7
 800ab7c:	bd80      	pop	{r7, pc}
	...

0800ab80 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800ab80:	b580      	push	{r7, lr}
 800ab82:	b08c      	sub	sp, #48	; 0x30
 800ab84:	af00      	add	r7, sp, #0
 800ab86:	60f8      	str	r0, [r7, #12]
 800ab88:	60b9      	str	r1, [r7, #8]
 800ab8a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800ab8c:	2300      	movs	r3, #0
 800ab8e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ab90:	68fb      	ldr	r3, [r7, #12]
 800ab92:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ab94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab96:	2b00      	cmp	r3, #0
 800ab98:	d10a      	bne.n	800abb0 <xQueueReceive+0x30>
	__asm volatile
 800ab9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab9e:	f383 8811 	msr	BASEPRI, r3
 800aba2:	f3bf 8f6f 	isb	sy
 800aba6:	f3bf 8f4f 	dsb	sy
 800abaa:	623b      	str	r3, [r7, #32]
}
 800abac:	bf00      	nop
 800abae:	e7fe      	b.n	800abae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800abb0:	68bb      	ldr	r3, [r7, #8]
 800abb2:	2b00      	cmp	r3, #0
 800abb4:	d103      	bne.n	800abbe <xQueueReceive+0x3e>
 800abb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d101      	bne.n	800abc2 <xQueueReceive+0x42>
 800abbe:	2301      	movs	r3, #1
 800abc0:	e000      	b.n	800abc4 <xQueueReceive+0x44>
 800abc2:	2300      	movs	r3, #0
 800abc4:	2b00      	cmp	r3, #0
 800abc6:	d10a      	bne.n	800abde <xQueueReceive+0x5e>
	__asm volatile
 800abc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abcc:	f383 8811 	msr	BASEPRI, r3
 800abd0:	f3bf 8f6f 	isb	sy
 800abd4:	f3bf 8f4f 	dsb	sy
 800abd8:	61fb      	str	r3, [r7, #28]
}
 800abda:	bf00      	nop
 800abdc:	e7fe      	b.n	800abdc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800abde:	f001 fa17 	bl	800c010 <xTaskGetSchedulerState>
 800abe2:	4603      	mov	r3, r0
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d102      	bne.n	800abee <xQueueReceive+0x6e>
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	2b00      	cmp	r3, #0
 800abec:	d101      	bne.n	800abf2 <xQueueReceive+0x72>
 800abee:	2301      	movs	r3, #1
 800abf0:	e000      	b.n	800abf4 <xQueueReceive+0x74>
 800abf2:	2300      	movs	r3, #0
 800abf4:	2b00      	cmp	r3, #0
 800abf6:	d10a      	bne.n	800ac0e <xQueueReceive+0x8e>
	__asm volatile
 800abf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abfc:	f383 8811 	msr	BASEPRI, r3
 800ac00:	f3bf 8f6f 	isb	sy
 800ac04:	f3bf 8f4f 	dsb	sy
 800ac08:	61bb      	str	r3, [r7, #24]
}
 800ac0a:	bf00      	nop
 800ac0c:	e7fe      	b.n	800ac0c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800ac0e:	f002 f859 	bl	800ccc4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ac12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac16:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ac18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac1a:	2b00      	cmp	r3, #0
 800ac1c:	d01f      	beq.n	800ac5e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ac1e:	68b9      	ldr	r1, [r7, #8]
 800ac20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ac22:	f000 fa1b 	bl	800b05c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ac26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ac28:	1e5a      	subs	r2, r3, #1
 800ac2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac2c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac30:	691b      	ldr	r3, [r3, #16]
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	d00f      	beq.n	800ac56 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac38:	3310      	adds	r3, #16
 800ac3a:	4618      	mov	r0, r3
 800ac3c:	f001 f816 	bl	800bc6c <xTaskRemoveFromEventList>
 800ac40:	4603      	mov	r3, r0
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d007      	beq.n	800ac56 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ac46:	4b3d      	ldr	r3, [pc, #244]	; (800ad3c <xQueueReceive+0x1bc>)
 800ac48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ac4c:	601a      	str	r2, [r3, #0]
 800ac4e:	f3bf 8f4f 	dsb	sy
 800ac52:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ac56:	f002 f865 	bl	800cd24 <vPortExitCritical>
				return pdPASS;
 800ac5a:	2301      	movs	r3, #1
 800ac5c:	e069      	b.n	800ad32 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	2b00      	cmp	r3, #0
 800ac62:	d103      	bne.n	800ac6c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800ac64:	f002 f85e 	bl	800cd24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ac68:	2300      	movs	r3, #0
 800ac6a:	e062      	b.n	800ad32 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ac6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d106      	bne.n	800ac80 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ac72:	f107 0310 	add.w	r3, r7, #16
 800ac76:	4618      	mov	r0, r3
 800ac78:	f001 f85c 	bl	800bd34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ac7c:	2301      	movs	r3, #1
 800ac7e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ac80:	f002 f850 	bl	800cd24 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ac84:	f000 fdc8 	bl	800b818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ac88:	f002 f81c 	bl	800ccc4 <vPortEnterCritical>
 800ac8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac8e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ac92:	b25b      	sxtb	r3, r3
 800ac94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ac98:	d103      	bne.n	800aca2 <xQueueReceive+0x122>
 800ac9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac9c:	2200      	movs	r2, #0
 800ac9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800aca2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aca4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800aca8:	b25b      	sxtb	r3, r3
 800acaa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800acae:	d103      	bne.n	800acb8 <xQueueReceive+0x138>
 800acb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb2:	2200      	movs	r2, #0
 800acb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800acb8:	f002 f834 	bl	800cd24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800acbc:	1d3a      	adds	r2, r7, #4
 800acbe:	f107 0310 	add.w	r3, r7, #16
 800acc2:	4611      	mov	r1, r2
 800acc4:	4618      	mov	r0, r3
 800acc6:	f001 f84b 	bl	800bd60 <xTaskCheckForTimeOut>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d123      	bne.n	800ad18 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800acd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acd2:	f000 fa3b 	bl	800b14c <prvIsQueueEmpty>
 800acd6:	4603      	mov	r3, r0
 800acd8:	2b00      	cmp	r3, #0
 800acda:	d017      	beq.n	800ad0c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800acdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acde:	3324      	adds	r3, #36	; 0x24
 800ace0:	687a      	ldr	r2, [r7, #4]
 800ace2:	4611      	mov	r1, r2
 800ace4:	4618      	mov	r0, r3
 800ace6:	f000 ff71 	bl	800bbcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800acea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800acec:	f000 f9dc 	bl	800b0a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800acf0:	f000 fda0 	bl	800b834 <xTaskResumeAll>
 800acf4:	4603      	mov	r3, r0
 800acf6:	2b00      	cmp	r3, #0
 800acf8:	d189      	bne.n	800ac0e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800acfa:	4b10      	ldr	r3, [pc, #64]	; (800ad3c <xQueueReceive+0x1bc>)
 800acfc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad00:	601a      	str	r2, [r3, #0]
 800ad02:	f3bf 8f4f 	dsb	sy
 800ad06:	f3bf 8f6f 	isb	sy
 800ad0a:	e780      	b.n	800ac0e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800ad0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad0e:	f000 f9cb 	bl	800b0a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800ad12:	f000 fd8f 	bl	800b834 <xTaskResumeAll>
 800ad16:	e77a      	b.n	800ac0e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800ad18:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad1a:	f000 f9c5 	bl	800b0a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800ad1e:	f000 fd89 	bl	800b834 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800ad22:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ad24:	f000 fa12 	bl	800b14c <prvIsQueueEmpty>
 800ad28:	4603      	mov	r3, r0
 800ad2a:	2b00      	cmp	r3, #0
 800ad2c:	f43f af6f 	beq.w	800ac0e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800ad30:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800ad32:	4618      	mov	r0, r3
 800ad34:	3730      	adds	r7, #48	; 0x30
 800ad36:	46bd      	mov	sp, r7
 800ad38:	bd80      	pop	{r7, pc}
 800ad3a:	bf00      	nop
 800ad3c:	e000ed04 	.word	0xe000ed04

0800ad40 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800ad40:	b580      	push	{r7, lr}
 800ad42:	b08e      	sub	sp, #56	; 0x38
 800ad44:	af00      	add	r7, sp, #0
 800ad46:	6078      	str	r0, [r7, #4]
 800ad48:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800ad4a:	2300      	movs	r3, #0
 800ad4c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800ad4e:	687b      	ldr	r3, [r7, #4]
 800ad50:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800ad52:	2300      	movs	r3, #0
 800ad54:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800ad56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad58:	2b00      	cmp	r3, #0
 800ad5a:	d10a      	bne.n	800ad72 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800ad5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad60:	f383 8811 	msr	BASEPRI, r3
 800ad64:	f3bf 8f6f 	isb	sy
 800ad68:	f3bf 8f4f 	dsb	sy
 800ad6c:	623b      	str	r3, [r7, #32]
}
 800ad6e:	bf00      	nop
 800ad70:	e7fe      	b.n	800ad70 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ad72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ad74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d00a      	beq.n	800ad90 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800ad7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad7e:	f383 8811 	msr	BASEPRI, r3
 800ad82:	f3bf 8f6f 	isb	sy
 800ad86:	f3bf 8f4f 	dsb	sy
 800ad8a:	61fb      	str	r3, [r7, #28]
}
 800ad8c:	bf00      	nop
 800ad8e:	e7fe      	b.n	800ad8e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ad90:	f001 f93e 	bl	800c010 <xTaskGetSchedulerState>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d102      	bne.n	800ada0 <xQueueSemaphoreTake+0x60>
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	d101      	bne.n	800ada4 <xQueueSemaphoreTake+0x64>
 800ada0:	2301      	movs	r3, #1
 800ada2:	e000      	b.n	800ada6 <xQueueSemaphoreTake+0x66>
 800ada4:	2300      	movs	r3, #0
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d10a      	bne.n	800adc0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800adaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adae:	f383 8811 	msr	BASEPRI, r3
 800adb2:	f3bf 8f6f 	isb	sy
 800adb6:	f3bf 8f4f 	dsb	sy
 800adba:	61bb      	str	r3, [r7, #24]
}
 800adbc:	bf00      	nop
 800adbe:	e7fe      	b.n	800adbe <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800adc0:	f001 ff80 	bl	800ccc4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800adc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adc6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800adc8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800adca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800adcc:	2b00      	cmp	r3, #0
 800adce:	d024      	beq.n	800ae1a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800add0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800add2:	1e5a      	subs	r2, r3, #1
 800add4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800add6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800add8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adda:	681b      	ldr	r3, [r3, #0]
 800addc:	2b00      	cmp	r3, #0
 800adde:	d104      	bne.n	800adea <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ade0:	f001 fa8c 	bl	800c2fc <pvTaskIncrementMutexHeldCount>
 800ade4:	4602      	mov	r2, r0
 800ade6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ade8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800adea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adec:	691b      	ldr	r3, [r3, #16]
 800adee:	2b00      	cmp	r3, #0
 800adf0:	d00f      	beq.n	800ae12 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800adf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800adf4:	3310      	adds	r3, #16
 800adf6:	4618      	mov	r0, r3
 800adf8:	f000 ff38 	bl	800bc6c <xTaskRemoveFromEventList>
 800adfc:	4603      	mov	r3, r0
 800adfe:	2b00      	cmp	r3, #0
 800ae00:	d007      	beq.n	800ae12 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800ae02:	4b54      	ldr	r3, [pc, #336]	; (800af54 <xQueueSemaphoreTake+0x214>)
 800ae04:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae08:	601a      	str	r2, [r3, #0]
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800ae12:	f001 ff87 	bl	800cd24 <vPortExitCritical>
				return pdPASS;
 800ae16:	2301      	movs	r3, #1
 800ae18:	e097      	b.n	800af4a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800ae1a:	683b      	ldr	r3, [r7, #0]
 800ae1c:	2b00      	cmp	r3, #0
 800ae1e:	d111      	bne.n	800ae44 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ae20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ae22:	2b00      	cmp	r3, #0
 800ae24:	d00a      	beq.n	800ae3c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800ae26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae2a:	f383 8811 	msr	BASEPRI, r3
 800ae2e:	f3bf 8f6f 	isb	sy
 800ae32:	f3bf 8f4f 	dsb	sy
 800ae36:	617b      	str	r3, [r7, #20]
}
 800ae38:	bf00      	nop
 800ae3a:	e7fe      	b.n	800ae3a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800ae3c:	f001 ff72 	bl	800cd24 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800ae40:	2300      	movs	r3, #0
 800ae42:	e082      	b.n	800af4a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800ae44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ae46:	2b00      	cmp	r3, #0
 800ae48:	d106      	bne.n	800ae58 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800ae4a:	f107 030c 	add.w	r3, r7, #12
 800ae4e:	4618      	mov	r0, r3
 800ae50:	f000 ff70 	bl	800bd34 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800ae54:	2301      	movs	r3, #1
 800ae56:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800ae58:	f001 ff64 	bl	800cd24 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800ae5c:	f000 fcdc 	bl	800b818 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800ae60:	f001 ff30 	bl	800ccc4 <vPortEnterCritical>
 800ae64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae66:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800ae6a:	b25b      	sxtb	r3, r3
 800ae6c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae70:	d103      	bne.n	800ae7a <xQueueSemaphoreTake+0x13a>
 800ae72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae74:	2200      	movs	r2, #0
 800ae76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800ae7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae7c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ae80:	b25b      	sxtb	r3, r3
 800ae82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ae86:	d103      	bne.n	800ae90 <xQueueSemaphoreTake+0x150>
 800ae88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ae90:	f001 ff48 	bl	800cd24 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ae94:	463a      	mov	r2, r7
 800ae96:	f107 030c 	add.w	r3, r7, #12
 800ae9a:	4611      	mov	r1, r2
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 ff5f 	bl	800bd60 <xTaskCheckForTimeOut>
 800aea2:	4603      	mov	r3, r0
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d132      	bne.n	800af0e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aea8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aeaa:	f000 f94f 	bl	800b14c <prvIsQueueEmpty>
 800aeae:	4603      	mov	r3, r0
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	d026      	beq.n	800af02 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aeb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aeb6:	681b      	ldr	r3, [r3, #0]
 800aeb8:	2b00      	cmp	r3, #0
 800aeba:	d109      	bne.n	800aed0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800aebc:	f001 ff02 	bl	800ccc4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aec0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aec2:	689b      	ldr	r3, [r3, #8]
 800aec4:	4618      	mov	r0, r3
 800aec6:	f001 f8c1 	bl	800c04c <xTaskPriorityInherit>
 800aeca:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800aecc:	f001 ff2a 	bl	800cd24 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aed2:	3324      	adds	r3, #36	; 0x24
 800aed4:	683a      	ldr	r2, [r7, #0]
 800aed6:	4611      	mov	r1, r2
 800aed8:	4618      	mov	r0, r3
 800aeda:	f000 fe77 	bl	800bbcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aede:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800aee0:	f000 f8e2 	bl	800b0a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aee4:	f000 fca6 	bl	800b834 <xTaskResumeAll>
 800aee8:	4603      	mov	r3, r0
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f47f af68 	bne.w	800adc0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800aef0:	4b18      	ldr	r3, [pc, #96]	; (800af54 <xQueueSemaphoreTake+0x214>)
 800aef2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800aef6:	601a      	str	r2, [r3, #0]
 800aef8:	f3bf 8f4f 	dsb	sy
 800aefc:	f3bf 8f6f 	isb	sy
 800af00:	e75e      	b.n	800adc0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800af02:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af04:	f000 f8d0 	bl	800b0a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800af08:	f000 fc94 	bl	800b834 <xTaskResumeAll>
 800af0c:	e758      	b.n	800adc0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800af0e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af10:	f000 f8ca 	bl	800b0a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800af14:	f000 fc8e 	bl	800b834 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800af18:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af1a:	f000 f917 	bl	800b14c <prvIsQueueEmpty>
 800af1e:	4603      	mov	r3, r0
 800af20:	2b00      	cmp	r3, #0
 800af22:	f43f af4d 	beq.w	800adc0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800af26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d00d      	beq.n	800af48 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800af2c:	f001 feca 	bl	800ccc4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800af30:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800af32:	f000 f811 	bl	800af58 <prvGetDisinheritPriorityAfterTimeout>
 800af36:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800af38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800af3a:	689b      	ldr	r3, [r3, #8]
 800af3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af3e:	4618      	mov	r0, r3
 800af40:	f001 f95a 	bl	800c1f8 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800af44:	f001 feee 	bl	800cd24 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800af48:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800af4a:	4618      	mov	r0, r3
 800af4c:	3738      	adds	r7, #56	; 0x38
 800af4e:	46bd      	mov	sp, r7
 800af50:	bd80      	pop	{r7, pc}
 800af52:	bf00      	nop
 800af54:	e000ed04 	.word	0xe000ed04

0800af58 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800af58:	b480      	push	{r7}
 800af5a:	b085      	sub	sp, #20
 800af5c:	af00      	add	r7, sp, #0
 800af5e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800af60:	687b      	ldr	r3, [r7, #4]
 800af62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800af64:	2b00      	cmp	r3, #0
 800af66:	d006      	beq.n	800af76 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800af72:	60fb      	str	r3, [r7, #12]
 800af74:	e001      	b.n	800af7a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800af76:	2300      	movs	r3, #0
 800af78:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800af7a:	68fb      	ldr	r3, [r7, #12]
	}
 800af7c:	4618      	mov	r0, r3
 800af7e:	3714      	adds	r7, #20
 800af80:	46bd      	mov	sp, r7
 800af82:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af86:	4770      	bx	lr

0800af88 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800af88:	b580      	push	{r7, lr}
 800af8a:	b086      	sub	sp, #24
 800af8c:	af00      	add	r7, sp, #0
 800af8e:	60f8      	str	r0, [r7, #12]
 800af90:	60b9      	str	r1, [r7, #8]
 800af92:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800af94:	2300      	movs	r3, #0
 800af96:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800af98:	68fb      	ldr	r3, [r7, #12]
 800af9a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af9c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afa2:	2b00      	cmp	r3, #0
 800afa4:	d10d      	bne.n	800afc2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800afa6:	68fb      	ldr	r3, [r7, #12]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d14d      	bne.n	800b04a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	689b      	ldr	r3, [r3, #8]
 800afb2:	4618      	mov	r0, r3
 800afb4:	f001 f8b2 	bl	800c11c <xTaskPriorityDisinherit>
 800afb8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800afba:	68fb      	ldr	r3, [r7, #12]
 800afbc:	2200      	movs	r2, #0
 800afbe:	609a      	str	r2, [r3, #8]
 800afc0:	e043      	b.n	800b04a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800afc2:	687b      	ldr	r3, [r7, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d119      	bne.n	800affc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800afc8:	68fb      	ldr	r3, [r7, #12]
 800afca:	6858      	ldr	r0, [r3, #4]
 800afcc:	68fb      	ldr	r3, [r7, #12]
 800afce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afd0:	461a      	mov	r2, r3
 800afd2:	68b9      	ldr	r1, [r7, #8]
 800afd4:	f002 f9ae 	bl	800d334 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800afd8:	68fb      	ldr	r3, [r7, #12]
 800afda:	685a      	ldr	r2, [r3, #4]
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800afe0:	441a      	add	r2, r3
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	685a      	ldr	r2, [r3, #4]
 800afea:	68fb      	ldr	r3, [r7, #12]
 800afec:	689b      	ldr	r3, [r3, #8]
 800afee:	429a      	cmp	r2, r3
 800aff0:	d32b      	bcc.n	800b04a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800aff2:	68fb      	ldr	r3, [r7, #12]
 800aff4:	681a      	ldr	r2, [r3, #0]
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	605a      	str	r2, [r3, #4]
 800affa:	e026      	b.n	800b04a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	68d8      	ldr	r0, [r3, #12]
 800b000:	68fb      	ldr	r3, [r7, #12]
 800b002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b004:	461a      	mov	r2, r3
 800b006:	68b9      	ldr	r1, [r7, #8]
 800b008:	f002 f994 	bl	800d334 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800b00c:	68fb      	ldr	r3, [r7, #12]
 800b00e:	68da      	ldr	r2, [r3, #12]
 800b010:	68fb      	ldr	r3, [r7, #12]
 800b012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b014:	425b      	negs	r3, r3
 800b016:	441a      	add	r2, r3
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	68da      	ldr	r2, [r3, #12]
 800b020:	68fb      	ldr	r3, [r7, #12]
 800b022:	681b      	ldr	r3, [r3, #0]
 800b024:	429a      	cmp	r2, r3
 800b026:	d207      	bcs.n	800b038 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800b028:	68fb      	ldr	r3, [r7, #12]
 800b02a:	689a      	ldr	r2, [r3, #8]
 800b02c:	68fb      	ldr	r3, [r7, #12]
 800b02e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b030:	425b      	negs	r3, r3
 800b032:	441a      	add	r2, r3
 800b034:	68fb      	ldr	r3, [r7, #12]
 800b036:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	2b02      	cmp	r3, #2
 800b03c:	d105      	bne.n	800b04a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800b03e:	693b      	ldr	r3, [r7, #16]
 800b040:	2b00      	cmp	r3, #0
 800b042:	d002      	beq.n	800b04a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800b044:	693b      	ldr	r3, [r7, #16]
 800b046:	3b01      	subs	r3, #1
 800b048:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800b04a:	693b      	ldr	r3, [r7, #16]
 800b04c:	1c5a      	adds	r2, r3, #1
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800b052:	697b      	ldr	r3, [r7, #20]
}
 800b054:	4618      	mov	r0, r3
 800b056:	3718      	adds	r7, #24
 800b058:	46bd      	mov	sp, r7
 800b05a:	bd80      	pop	{r7, pc}

0800b05c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800b05c:	b580      	push	{r7, lr}
 800b05e:	b082      	sub	sp, #8
 800b060:	af00      	add	r7, sp, #0
 800b062:	6078      	str	r0, [r7, #4]
 800b064:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d018      	beq.n	800b0a0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800b06e:	687b      	ldr	r3, [r7, #4]
 800b070:	68da      	ldr	r2, [r3, #12]
 800b072:	687b      	ldr	r3, [r7, #4]
 800b074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b076:	441a      	add	r2, r3
 800b078:	687b      	ldr	r3, [r7, #4]
 800b07a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800b07c:	687b      	ldr	r3, [r7, #4]
 800b07e:	68da      	ldr	r2, [r3, #12]
 800b080:	687b      	ldr	r3, [r7, #4]
 800b082:	689b      	ldr	r3, [r3, #8]
 800b084:	429a      	cmp	r2, r3
 800b086:	d303      	bcc.n	800b090 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800b088:	687b      	ldr	r3, [r7, #4]
 800b08a:	681a      	ldr	r2, [r3, #0]
 800b08c:	687b      	ldr	r3, [r7, #4]
 800b08e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	68d9      	ldr	r1, [r3, #12]
 800b094:	687b      	ldr	r3, [r7, #4]
 800b096:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b098:	461a      	mov	r2, r3
 800b09a:	6838      	ldr	r0, [r7, #0]
 800b09c:	f002 f94a 	bl	800d334 <memcpy>
	}
}
 800b0a0:	bf00      	nop
 800b0a2:	3708      	adds	r7, #8
 800b0a4:	46bd      	mov	sp, r7
 800b0a6:	bd80      	pop	{r7, pc}

0800b0a8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800b0a8:	b580      	push	{r7, lr}
 800b0aa:	b084      	sub	sp, #16
 800b0ac:	af00      	add	r7, sp, #0
 800b0ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800b0b0:	f001 fe08 	bl	800ccc4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800b0b4:	687b      	ldr	r3, [r7, #4]
 800b0b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b0ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0bc:	e011      	b.n	800b0e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	d012      	beq.n	800b0ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	3324      	adds	r3, #36	; 0x24
 800b0ca:	4618      	mov	r0, r3
 800b0cc:	f000 fdce 	bl	800bc6c <xTaskRemoveFromEventList>
 800b0d0:	4603      	mov	r3, r0
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	d001      	beq.n	800b0da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800b0d6:	f000 fea5 	bl	800be24 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800b0da:	7bfb      	ldrb	r3, [r7, #15]
 800b0dc:	3b01      	subs	r3, #1
 800b0de:	b2db      	uxtb	r3, r3
 800b0e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800b0e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	dce9      	bgt.n	800b0be <prvUnlockQueue+0x16>
 800b0ea:	e000      	b.n	800b0ee <prvUnlockQueue+0x46>
					break;
 800b0ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	22ff      	movs	r2, #255	; 0xff
 800b0f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800b0f6:	f001 fe15 	bl	800cd24 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800b0fa:	f001 fde3 	bl	800ccc4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800b0fe:	687b      	ldr	r3, [r7, #4]
 800b100:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b104:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b106:	e011      	b.n	800b12c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b108:	687b      	ldr	r3, [r7, #4]
 800b10a:	691b      	ldr	r3, [r3, #16]
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d012      	beq.n	800b136 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	3310      	adds	r3, #16
 800b114:	4618      	mov	r0, r3
 800b116:	f000 fda9 	bl	800bc6c <xTaskRemoveFromEventList>
 800b11a:	4603      	mov	r3, r0
 800b11c:	2b00      	cmp	r3, #0
 800b11e:	d001      	beq.n	800b124 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800b120:	f000 fe80 	bl	800be24 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800b124:	7bbb      	ldrb	r3, [r7, #14]
 800b126:	3b01      	subs	r3, #1
 800b128:	b2db      	uxtb	r3, r3
 800b12a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800b12c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800b130:	2b00      	cmp	r3, #0
 800b132:	dce9      	bgt.n	800b108 <prvUnlockQueue+0x60>
 800b134:	e000      	b.n	800b138 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800b136:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	22ff      	movs	r2, #255	; 0xff
 800b13c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800b140:	f001 fdf0 	bl	800cd24 <vPortExitCritical>
}
 800b144:	bf00      	nop
 800b146:	3710      	adds	r7, #16
 800b148:	46bd      	mov	sp, r7
 800b14a:	bd80      	pop	{r7, pc}

0800b14c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800b14c:	b580      	push	{r7, lr}
 800b14e:	b084      	sub	sp, #16
 800b150:	af00      	add	r7, sp, #0
 800b152:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b154:	f001 fdb6 	bl	800ccc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d102      	bne.n	800b166 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800b160:	2301      	movs	r3, #1
 800b162:	60fb      	str	r3, [r7, #12]
 800b164:	e001      	b.n	800b16a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800b166:	2300      	movs	r3, #0
 800b168:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b16a:	f001 fddb 	bl	800cd24 <vPortExitCritical>

	return xReturn;
 800b16e:	68fb      	ldr	r3, [r7, #12]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3710      	adds	r7, #16
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800b178:	b580      	push	{r7, lr}
 800b17a:	b084      	sub	sp, #16
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800b180:	f001 fda0 	bl	800ccc4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b18c:	429a      	cmp	r2, r3
 800b18e:	d102      	bne.n	800b196 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800b190:	2301      	movs	r3, #1
 800b192:	60fb      	str	r3, [r7, #12]
 800b194:	e001      	b.n	800b19a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800b196:	2300      	movs	r3, #0
 800b198:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800b19a:	f001 fdc3 	bl	800cd24 <vPortExitCritical>

	return xReturn;
 800b19e:	68fb      	ldr	r3, [r7, #12]
}
 800b1a0:	4618      	mov	r0, r3
 800b1a2:	3710      	adds	r7, #16
 800b1a4:	46bd      	mov	sp, r7
 800b1a6:	bd80      	pop	{r7, pc}

0800b1a8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800b1a8:	b480      	push	{r7}
 800b1aa:	b085      	sub	sp, #20
 800b1ac:	af00      	add	r7, sp, #0
 800b1ae:	6078      	str	r0, [r7, #4]
 800b1b0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1b2:	2300      	movs	r3, #0
 800b1b4:	60fb      	str	r3, [r7, #12]
 800b1b6:	e014      	b.n	800b1e2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800b1b8:	4a0f      	ldr	r2, [pc, #60]	; (800b1f8 <vQueueAddToRegistry+0x50>)
 800b1ba:	68fb      	ldr	r3, [r7, #12]
 800b1bc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800b1c0:	2b00      	cmp	r3, #0
 800b1c2:	d10b      	bne.n	800b1dc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800b1c4:	490c      	ldr	r1, [pc, #48]	; (800b1f8 <vQueueAddToRegistry+0x50>)
 800b1c6:	68fb      	ldr	r3, [r7, #12]
 800b1c8:	683a      	ldr	r2, [r7, #0]
 800b1ca:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800b1ce:	4a0a      	ldr	r2, [pc, #40]	; (800b1f8 <vQueueAddToRegistry+0x50>)
 800b1d0:	68fb      	ldr	r3, [r7, #12]
 800b1d2:	00db      	lsls	r3, r3, #3
 800b1d4:	4413      	add	r3, r2
 800b1d6:	687a      	ldr	r2, [r7, #4]
 800b1d8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800b1da:	e006      	b.n	800b1ea <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	3301      	adds	r3, #1
 800b1e0:	60fb      	str	r3, [r7, #12]
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	2b07      	cmp	r3, #7
 800b1e6:	d9e7      	bls.n	800b1b8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800b1e8:	bf00      	nop
 800b1ea:	bf00      	nop
 800b1ec:	3714      	adds	r7, #20
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1f4:	4770      	bx	lr
 800b1f6:	bf00      	nop
 800b1f8:	200013d0 	.word	0x200013d0

0800b1fc <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b1fc:	b580      	push	{r7, lr}
 800b1fe:	b086      	sub	sp, #24
 800b200:	af00      	add	r7, sp, #0
 800b202:	60f8      	str	r0, [r7, #12]
 800b204:	60b9      	str	r1, [r7, #8]
 800b206:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800b208:	68fb      	ldr	r3, [r7, #12]
 800b20a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800b20c:	f001 fd5a 	bl	800ccc4 <vPortEnterCritical>
 800b210:	697b      	ldr	r3, [r7, #20]
 800b212:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800b216:	b25b      	sxtb	r3, r3
 800b218:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b21c:	d103      	bne.n	800b226 <vQueueWaitForMessageRestricted+0x2a>
 800b21e:	697b      	ldr	r3, [r7, #20]
 800b220:	2200      	movs	r2, #0
 800b222:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b226:	697b      	ldr	r3, [r7, #20]
 800b228:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800b22c:	b25b      	sxtb	r3, r3
 800b22e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b232:	d103      	bne.n	800b23c <vQueueWaitForMessageRestricted+0x40>
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	2200      	movs	r2, #0
 800b238:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b23c:	f001 fd72 	bl	800cd24 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800b240:	697b      	ldr	r3, [r7, #20]
 800b242:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b244:	2b00      	cmp	r3, #0
 800b246:	d106      	bne.n	800b256 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800b248:	697b      	ldr	r3, [r7, #20]
 800b24a:	3324      	adds	r3, #36	; 0x24
 800b24c:	687a      	ldr	r2, [r7, #4]
 800b24e:	68b9      	ldr	r1, [r7, #8]
 800b250:	4618      	mov	r0, r3
 800b252:	f000 fcdf 	bl	800bc14 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800b256:	6978      	ldr	r0, [r7, #20]
 800b258:	f7ff ff26 	bl	800b0a8 <prvUnlockQueue>
	}
 800b25c:	bf00      	nop
 800b25e:	3718      	adds	r7, #24
 800b260:	46bd      	mov	sp, r7
 800b262:	bd80      	pop	{r7, pc}

0800b264 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800b264:	b580      	push	{r7, lr}
 800b266:	b08e      	sub	sp, #56	; 0x38
 800b268:	af04      	add	r7, sp, #16
 800b26a:	60f8      	str	r0, [r7, #12]
 800b26c:	60b9      	str	r1, [r7, #8]
 800b26e:	607a      	str	r2, [r7, #4]
 800b270:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800b272:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b274:	2b00      	cmp	r3, #0
 800b276:	d10a      	bne.n	800b28e <xTaskCreateStatic+0x2a>
	__asm volatile
 800b278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b27c:	f383 8811 	msr	BASEPRI, r3
 800b280:	f3bf 8f6f 	isb	sy
 800b284:	f3bf 8f4f 	dsb	sy
 800b288:	623b      	str	r3, [r7, #32]
}
 800b28a:	bf00      	nop
 800b28c:	e7fe      	b.n	800b28c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800b28e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b290:	2b00      	cmp	r3, #0
 800b292:	d10a      	bne.n	800b2aa <xTaskCreateStatic+0x46>
	__asm volatile
 800b294:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b298:	f383 8811 	msr	BASEPRI, r3
 800b29c:	f3bf 8f6f 	isb	sy
 800b2a0:	f3bf 8f4f 	dsb	sy
 800b2a4:	61fb      	str	r3, [r7, #28]
}
 800b2a6:	bf00      	nop
 800b2a8:	e7fe      	b.n	800b2a8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800b2aa:	23bc      	movs	r3, #188	; 0xbc
 800b2ac:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800b2ae:	693b      	ldr	r3, [r7, #16]
 800b2b0:	2bbc      	cmp	r3, #188	; 0xbc
 800b2b2:	d00a      	beq.n	800b2ca <xTaskCreateStatic+0x66>
	__asm volatile
 800b2b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2b8:	f383 8811 	msr	BASEPRI, r3
 800b2bc:	f3bf 8f6f 	isb	sy
 800b2c0:	f3bf 8f4f 	dsb	sy
 800b2c4:	61bb      	str	r3, [r7, #24]
}
 800b2c6:	bf00      	nop
 800b2c8:	e7fe      	b.n	800b2c8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800b2ca:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800b2cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2ce:	2b00      	cmp	r3, #0
 800b2d0:	d01e      	beq.n	800b310 <xTaskCreateStatic+0xac>
 800b2d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d01b      	beq.n	800b310 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b2d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b2da:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800b2dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800b2e0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800b2e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2e4:	2202      	movs	r2, #2
 800b2e6:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800b2ea:	2300      	movs	r3, #0
 800b2ec:	9303      	str	r3, [sp, #12]
 800b2ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b2f0:	9302      	str	r3, [sp, #8]
 800b2f2:	f107 0314 	add.w	r3, r7, #20
 800b2f6:	9301      	str	r3, [sp, #4]
 800b2f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b2fa:	9300      	str	r3, [sp, #0]
 800b2fc:	683b      	ldr	r3, [r7, #0]
 800b2fe:	687a      	ldr	r2, [r7, #4]
 800b300:	68b9      	ldr	r1, [r7, #8]
 800b302:	68f8      	ldr	r0, [r7, #12]
 800b304:	f000 f850 	bl	800b3a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b308:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800b30a:	f000 f8f3 	bl	800b4f4 <prvAddNewTaskToReadyList>
 800b30e:	e001      	b.n	800b314 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800b310:	2300      	movs	r3, #0
 800b312:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800b314:	697b      	ldr	r3, [r7, #20]
	}
 800b316:	4618      	mov	r0, r3
 800b318:	3728      	adds	r7, #40	; 0x28
 800b31a:	46bd      	mov	sp, r7
 800b31c:	bd80      	pop	{r7, pc}

0800b31e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800b31e:	b580      	push	{r7, lr}
 800b320:	b08c      	sub	sp, #48	; 0x30
 800b322:	af04      	add	r7, sp, #16
 800b324:	60f8      	str	r0, [r7, #12]
 800b326:	60b9      	str	r1, [r7, #8]
 800b328:	603b      	str	r3, [r7, #0]
 800b32a:	4613      	mov	r3, r2
 800b32c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800b32e:	88fb      	ldrh	r3, [r7, #6]
 800b330:	009b      	lsls	r3, r3, #2
 800b332:	4618      	mov	r0, r3
 800b334:	f001 fde8 	bl	800cf08 <pvPortMalloc>
 800b338:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800b33a:	697b      	ldr	r3, [r7, #20]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d00e      	beq.n	800b35e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800b340:	20bc      	movs	r0, #188	; 0xbc
 800b342:	f001 fde1 	bl	800cf08 <pvPortMalloc>
 800b346:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800b348:	69fb      	ldr	r3, [r7, #28]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d003      	beq.n	800b356 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800b34e:	69fb      	ldr	r3, [r7, #28]
 800b350:	697a      	ldr	r2, [r7, #20]
 800b352:	631a      	str	r2, [r3, #48]	; 0x30
 800b354:	e005      	b.n	800b362 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800b356:	6978      	ldr	r0, [r7, #20]
 800b358:	f001 fea2 	bl	800d0a0 <vPortFree>
 800b35c:	e001      	b.n	800b362 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800b35e:	2300      	movs	r3, #0
 800b360:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800b362:	69fb      	ldr	r3, [r7, #28]
 800b364:	2b00      	cmp	r3, #0
 800b366:	d017      	beq.n	800b398 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800b368:	69fb      	ldr	r3, [r7, #28]
 800b36a:	2200      	movs	r2, #0
 800b36c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800b370:	88fa      	ldrh	r2, [r7, #6]
 800b372:	2300      	movs	r3, #0
 800b374:	9303      	str	r3, [sp, #12]
 800b376:	69fb      	ldr	r3, [r7, #28]
 800b378:	9302      	str	r3, [sp, #8]
 800b37a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b37c:	9301      	str	r3, [sp, #4]
 800b37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b380:	9300      	str	r3, [sp, #0]
 800b382:	683b      	ldr	r3, [r7, #0]
 800b384:	68b9      	ldr	r1, [r7, #8]
 800b386:	68f8      	ldr	r0, [r7, #12]
 800b388:	f000 f80e 	bl	800b3a8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800b38c:	69f8      	ldr	r0, [r7, #28]
 800b38e:	f000 f8b1 	bl	800b4f4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800b392:	2301      	movs	r3, #1
 800b394:	61bb      	str	r3, [r7, #24]
 800b396:	e002      	b.n	800b39e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800b398:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b39c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800b39e:	69bb      	ldr	r3, [r7, #24]
	}
 800b3a0:	4618      	mov	r0, r3
 800b3a2:	3720      	adds	r7, #32
 800b3a4:	46bd      	mov	sp, r7
 800b3a6:	bd80      	pop	{r7, pc}

0800b3a8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b088      	sub	sp, #32
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	60f8      	str	r0, [r7, #12]
 800b3b0:	60b9      	str	r1, [r7, #8]
 800b3b2:	607a      	str	r2, [r7, #4]
 800b3b4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800b3b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3b8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	009b      	lsls	r3, r3, #2
 800b3be:	461a      	mov	r2, r3
 800b3c0:	21a5      	movs	r1, #165	; 0xa5
 800b3c2:	f001 ffc5 	bl	800d350 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800b3c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b3c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b3ca:	687b      	ldr	r3, [r7, #4]
 800b3cc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800b3d0:	3b01      	subs	r3, #1
 800b3d2:	009b      	lsls	r3, r3, #2
 800b3d4:	4413      	add	r3, r2
 800b3d6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800b3d8:	69bb      	ldr	r3, [r7, #24]
 800b3da:	f023 0307 	bic.w	r3, r3, #7
 800b3de:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800b3e0:	69bb      	ldr	r3, [r7, #24]
 800b3e2:	f003 0307 	and.w	r3, r3, #7
 800b3e6:	2b00      	cmp	r3, #0
 800b3e8:	d00a      	beq.n	800b400 <prvInitialiseNewTask+0x58>
	__asm volatile
 800b3ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3ee:	f383 8811 	msr	BASEPRI, r3
 800b3f2:	f3bf 8f6f 	isb	sy
 800b3f6:	f3bf 8f4f 	dsb	sy
 800b3fa:	617b      	str	r3, [r7, #20]
}
 800b3fc:	bf00      	nop
 800b3fe:	e7fe      	b.n	800b3fe <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800b400:	68bb      	ldr	r3, [r7, #8]
 800b402:	2b00      	cmp	r3, #0
 800b404:	d01f      	beq.n	800b446 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b406:	2300      	movs	r3, #0
 800b408:	61fb      	str	r3, [r7, #28]
 800b40a:	e012      	b.n	800b432 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800b40c:	68ba      	ldr	r2, [r7, #8]
 800b40e:	69fb      	ldr	r3, [r7, #28]
 800b410:	4413      	add	r3, r2
 800b412:	7819      	ldrb	r1, [r3, #0]
 800b414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b416:	69fb      	ldr	r3, [r7, #28]
 800b418:	4413      	add	r3, r2
 800b41a:	3334      	adds	r3, #52	; 0x34
 800b41c:	460a      	mov	r2, r1
 800b41e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800b420:	68ba      	ldr	r2, [r7, #8]
 800b422:	69fb      	ldr	r3, [r7, #28]
 800b424:	4413      	add	r3, r2
 800b426:	781b      	ldrb	r3, [r3, #0]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d006      	beq.n	800b43a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800b42c:	69fb      	ldr	r3, [r7, #28]
 800b42e:	3301      	adds	r3, #1
 800b430:	61fb      	str	r3, [r7, #28]
 800b432:	69fb      	ldr	r3, [r7, #28]
 800b434:	2b0f      	cmp	r3, #15
 800b436:	d9e9      	bls.n	800b40c <prvInitialiseNewTask+0x64>
 800b438:	e000      	b.n	800b43c <prvInitialiseNewTask+0x94>
			{
				break;
 800b43a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800b43c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b43e:	2200      	movs	r2, #0
 800b440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800b444:	e003      	b.n	800b44e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800b446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b448:	2200      	movs	r2, #0
 800b44a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800b44e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b450:	2b37      	cmp	r3, #55	; 0x37
 800b452:	d901      	bls.n	800b458 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800b454:	2337      	movs	r3, #55	; 0x37
 800b456:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800b458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b45a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b45c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800b45e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b460:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800b462:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800b464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b466:	2200      	movs	r2, #0
 800b468:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800b46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b46c:	3304      	adds	r3, #4
 800b46e:	4618      	mov	r0, r3
 800b470:	f7fe ff64 	bl	800a33c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800b474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b476:	3318      	adds	r3, #24
 800b478:	4618      	mov	r0, r3
 800b47a:	f7fe ff5f 	bl	800a33c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800b47e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b480:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b482:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b486:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b48c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800b48e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b490:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b492:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800b494:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b496:	2200      	movs	r2, #0
 800b498:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800b49c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b49e:	2200      	movs	r2, #0
 800b4a0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800b4a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4a6:	3354      	adds	r3, #84	; 0x54
 800b4a8:	2260      	movs	r2, #96	; 0x60
 800b4aa:	2100      	movs	r1, #0
 800b4ac:	4618      	mov	r0, r3
 800b4ae:	f001 ff4f 	bl	800d350 <memset>
 800b4b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4b4:	4a0c      	ldr	r2, [pc, #48]	; (800b4e8 <prvInitialiseNewTask+0x140>)
 800b4b6:	659a      	str	r2, [r3, #88]	; 0x58
 800b4b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4ba:	4a0c      	ldr	r2, [pc, #48]	; (800b4ec <prvInitialiseNewTask+0x144>)
 800b4bc:	65da      	str	r2, [r3, #92]	; 0x5c
 800b4be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4c0:	4a0b      	ldr	r2, [pc, #44]	; (800b4f0 <prvInitialiseNewTask+0x148>)
 800b4c2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b4c4:	683a      	ldr	r2, [r7, #0]
 800b4c6:	68f9      	ldr	r1, [r7, #12]
 800b4c8:	69b8      	ldr	r0, [r7, #24]
 800b4ca:	f001 facd 	bl	800ca68 <pxPortInitialiseStack>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b4d2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b4d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4d6:	2b00      	cmp	r3, #0
 800b4d8:	d002      	beq.n	800b4e0 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b4da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b4dc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b4de:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4e0:	bf00      	nop
 800b4e2:	3720      	adds	r7, #32
 800b4e4:	46bd      	mov	sp, r7
 800b4e6:	bd80      	pop	{r7, pc}
 800b4e8:	0800fe28 	.word	0x0800fe28
 800b4ec:	0800fe48 	.word	0x0800fe48
 800b4f0:	0800fe08 	.word	0x0800fe08

0800b4f4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b4f4:	b580      	push	{r7, lr}
 800b4f6:	b082      	sub	sp, #8
 800b4f8:	af00      	add	r7, sp, #0
 800b4fa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b4fc:	f001 fbe2 	bl	800ccc4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b500:	4b2d      	ldr	r3, [pc, #180]	; (800b5b8 <prvAddNewTaskToReadyList+0xc4>)
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	3301      	adds	r3, #1
 800b506:	4a2c      	ldr	r2, [pc, #176]	; (800b5b8 <prvAddNewTaskToReadyList+0xc4>)
 800b508:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b50a:	4b2c      	ldr	r3, [pc, #176]	; (800b5bc <prvAddNewTaskToReadyList+0xc8>)
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d109      	bne.n	800b526 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b512:	4a2a      	ldr	r2, [pc, #168]	; (800b5bc <prvAddNewTaskToReadyList+0xc8>)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b518:	4b27      	ldr	r3, [pc, #156]	; (800b5b8 <prvAddNewTaskToReadyList+0xc4>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	2b01      	cmp	r3, #1
 800b51e:	d110      	bne.n	800b542 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b520:	f000 fca4 	bl	800be6c <prvInitialiseTaskLists>
 800b524:	e00d      	b.n	800b542 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b526:	4b26      	ldr	r3, [pc, #152]	; (800b5c0 <prvAddNewTaskToReadyList+0xcc>)
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d109      	bne.n	800b542 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b52e:	4b23      	ldr	r3, [pc, #140]	; (800b5bc <prvAddNewTaskToReadyList+0xc8>)
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b534:	687b      	ldr	r3, [r7, #4]
 800b536:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b538:	429a      	cmp	r2, r3
 800b53a:	d802      	bhi.n	800b542 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b53c:	4a1f      	ldr	r2, [pc, #124]	; (800b5bc <prvAddNewTaskToReadyList+0xc8>)
 800b53e:	687b      	ldr	r3, [r7, #4]
 800b540:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b542:	4b20      	ldr	r3, [pc, #128]	; (800b5c4 <prvAddNewTaskToReadyList+0xd0>)
 800b544:	681b      	ldr	r3, [r3, #0]
 800b546:	3301      	adds	r3, #1
 800b548:	4a1e      	ldr	r2, [pc, #120]	; (800b5c4 <prvAddNewTaskToReadyList+0xd0>)
 800b54a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b54c:	4b1d      	ldr	r3, [pc, #116]	; (800b5c4 <prvAddNewTaskToReadyList+0xd0>)
 800b54e:	681a      	ldr	r2, [r3, #0]
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b558:	4b1b      	ldr	r3, [pc, #108]	; (800b5c8 <prvAddNewTaskToReadyList+0xd4>)
 800b55a:	681b      	ldr	r3, [r3, #0]
 800b55c:	429a      	cmp	r2, r3
 800b55e:	d903      	bls.n	800b568 <prvAddNewTaskToReadyList+0x74>
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b564:	4a18      	ldr	r2, [pc, #96]	; (800b5c8 <prvAddNewTaskToReadyList+0xd4>)
 800b566:	6013      	str	r3, [r2, #0]
 800b568:	687b      	ldr	r3, [r7, #4]
 800b56a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b56c:	4613      	mov	r3, r2
 800b56e:	009b      	lsls	r3, r3, #2
 800b570:	4413      	add	r3, r2
 800b572:	009b      	lsls	r3, r3, #2
 800b574:	4a15      	ldr	r2, [pc, #84]	; (800b5cc <prvAddNewTaskToReadyList+0xd8>)
 800b576:	441a      	add	r2, r3
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	3304      	adds	r3, #4
 800b57c:	4619      	mov	r1, r3
 800b57e:	4610      	mov	r0, r2
 800b580:	f7fe fee9 	bl	800a356 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b584:	f001 fbce 	bl	800cd24 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b588:	4b0d      	ldr	r3, [pc, #52]	; (800b5c0 <prvAddNewTaskToReadyList+0xcc>)
 800b58a:	681b      	ldr	r3, [r3, #0]
 800b58c:	2b00      	cmp	r3, #0
 800b58e:	d00e      	beq.n	800b5ae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b590:	4b0a      	ldr	r3, [pc, #40]	; (800b5bc <prvAddNewTaskToReadyList+0xc8>)
 800b592:	681b      	ldr	r3, [r3, #0]
 800b594:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b59a:	429a      	cmp	r2, r3
 800b59c:	d207      	bcs.n	800b5ae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b59e:	4b0c      	ldr	r3, [pc, #48]	; (800b5d0 <prvAddNewTaskToReadyList+0xdc>)
 800b5a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5a4:	601a      	str	r2, [r3, #0]
 800b5a6:	f3bf 8f4f 	dsb	sy
 800b5aa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b5ae:	bf00      	nop
 800b5b0:	3708      	adds	r7, #8
 800b5b2:	46bd      	mov	sp, r7
 800b5b4:	bd80      	pop	{r7, pc}
 800b5b6:	bf00      	nop
 800b5b8:	200018e4 	.word	0x200018e4
 800b5bc:	20001410 	.word	0x20001410
 800b5c0:	200018f0 	.word	0x200018f0
 800b5c4:	20001900 	.word	0x20001900
 800b5c8:	200018ec 	.word	0x200018ec
 800b5cc:	20001414 	.word	0x20001414
 800b5d0:	e000ed04 	.word	0xe000ed04

0800b5d4 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800b5d4:	b580      	push	{r7, lr}
 800b5d6:	b08a      	sub	sp, #40	; 0x28
 800b5d8:	af00      	add	r7, sp, #0
 800b5da:	6078      	str	r0, [r7, #4]
 800b5dc:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800b5de:	2300      	movs	r3, #0
 800b5e0:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d10a      	bne.n	800b5fe <vTaskDelayUntil+0x2a>
	__asm volatile
 800b5e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b5ec:	f383 8811 	msr	BASEPRI, r3
 800b5f0:	f3bf 8f6f 	isb	sy
 800b5f4:	f3bf 8f4f 	dsb	sy
 800b5f8:	617b      	str	r3, [r7, #20]
}
 800b5fa:	bf00      	nop
 800b5fc:	e7fe      	b.n	800b5fc <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800b5fe:	683b      	ldr	r3, [r7, #0]
 800b600:	2b00      	cmp	r3, #0
 800b602:	d10a      	bne.n	800b61a <vTaskDelayUntil+0x46>
	__asm volatile
 800b604:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b608:	f383 8811 	msr	BASEPRI, r3
 800b60c:	f3bf 8f6f 	isb	sy
 800b610:	f3bf 8f4f 	dsb	sy
 800b614:	613b      	str	r3, [r7, #16]
}
 800b616:	bf00      	nop
 800b618:	e7fe      	b.n	800b618 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800b61a:	4b2a      	ldr	r3, [pc, #168]	; (800b6c4 <vTaskDelayUntil+0xf0>)
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d00a      	beq.n	800b638 <vTaskDelayUntil+0x64>
	__asm volatile
 800b622:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b626:	f383 8811 	msr	BASEPRI, r3
 800b62a:	f3bf 8f6f 	isb	sy
 800b62e:	f3bf 8f4f 	dsb	sy
 800b632:	60fb      	str	r3, [r7, #12]
}
 800b634:	bf00      	nop
 800b636:	e7fe      	b.n	800b636 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800b638:	f000 f8ee 	bl	800b818 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800b63c:	4b22      	ldr	r3, [pc, #136]	; (800b6c8 <vTaskDelayUntil+0xf4>)
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	681b      	ldr	r3, [r3, #0]
 800b646:	683a      	ldr	r2, [r7, #0]
 800b648:	4413      	add	r3, r2
 800b64a:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	6a3a      	ldr	r2, [r7, #32]
 800b652:	429a      	cmp	r2, r3
 800b654:	d20b      	bcs.n	800b66e <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	69fa      	ldr	r2, [r7, #28]
 800b65c:	429a      	cmp	r2, r3
 800b65e:	d211      	bcs.n	800b684 <vTaskDelayUntil+0xb0>
 800b660:	69fa      	ldr	r2, [r7, #28]
 800b662:	6a3b      	ldr	r3, [r7, #32]
 800b664:	429a      	cmp	r2, r3
 800b666:	d90d      	bls.n	800b684 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b668:	2301      	movs	r3, #1
 800b66a:	627b      	str	r3, [r7, #36]	; 0x24
 800b66c:	e00a      	b.n	800b684 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800b66e:	687b      	ldr	r3, [r7, #4]
 800b670:	681b      	ldr	r3, [r3, #0]
 800b672:	69fa      	ldr	r2, [r7, #28]
 800b674:	429a      	cmp	r2, r3
 800b676:	d303      	bcc.n	800b680 <vTaskDelayUntil+0xac>
 800b678:	69fa      	ldr	r2, [r7, #28]
 800b67a:	6a3b      	ldr	r3, [r7, #32]
 800b67c:	429a      	cmp	r2, r3
 800b67e:	d901      	bls.n	800b684 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800b680:	2301      	movs	r3, #1
 800b682:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	69fa      	ldr	r2, [r7, #28]
 800b688:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800b68a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d006      	beq.n	800b69e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800b690:	69fa      	ldr	r2, [r7, #28]
 800b692:	6a3b      	ldr	r3, [r7, #32]
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	2100      	movs	r1, #0
 800b698:	4618      	mov	r0, r3
 800b69a:	f000 fe43 	bl	800c324 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800b69e:	f000 f8c9 	bl	800b834 <xTaskResumeAll>
 800b6a2:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b6a4:	69bb      	ldr	r3, [r7, #24]
 800b6a6:	2b00      	cmp	r3, #0
 800b6a8:	d107      	bne.n	800b6ba <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800b6aa:	4b08      	ldr	r3, [pc, #32]	; (800b6cc <vTaskDelayUntil+0xf8>)
 800b6ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b6b0:	601a      	str	r2, [r3, #0]
 800b6b2:	f3bf 8f4f 	dsb	sy
 800b6b6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b6ba:	bf00      	nop
 800b6bc:	3728      	adds	r7, #40	; 0x28
 800b6be:	46bd      	mov	sp, r7
 800b6c0:	bd80      	pop	{r7, pc}
 800b6c2:	bf00      	nop
 800b6c4:	2000190c 	.word	0x2000190c
 800b6c8:	200018e8 	.word	0x200018e8
 800b6cc:	e000ed04 	.word	0xe000ed04

0800b6d0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b6d0:	b580      	push	{r7, lr}
 800b6d2:	b084      	sub	sp, #16
 800b6d4:	af00      	add	r7, sp, #0
 800b6d6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b6d8:	2300      	movs	r3, #0
 800b6da:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2b00      	cmp	r3, #0
 800b6e0:	d017      	beq.n	800b712 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b6e2:	4b13      	ldr	r3, [pc, #76]	; (800b730 <vTaskDelay+0x60>)
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	2b00      	cmp	r3, #0
 800b6e8:	d00a      	beq.n	800b700 <vTaskDelay+0x30>
	__asm volatile
 800b6ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b6ee:	f383 8811 	msr	BASEPRI, r3
 800b6f2:	f3bf 8f6f 	isb	sy
 800b6f6:	f3bf 8f4f 	dsb	sy
 800b6fa:	60bb      	str	r3, [r7, #8]
}
 800b6fc:	bf00      	nop
 800b6fe:	e7fe      	b.n	800b6fe <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b700:	f000 f88a 	bl	800b818 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b704:	2100      	movs	r1, #0
 800b706:	6878      	ldr	r0, [r7, #4]
 800b708:	f000 fe0c 	bl	800c324 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b70c:	f000 f892 	bl	800b834 <xTaskResumeAll>
 800b710:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b712:	68fb      	ldr	r3, [r7, #12]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d107      	bne.n	800b728 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800b718:	4b06      	ldr	r3, [pc, #24]	; (800b734 <vTaskDelay+0x64>)
 800b71a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b71e:	601a      	str	r2, [r3, #0]
 800b720:	f3bf 8f4f 	dsb	sy
 800b724:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b728:	bf00      	nop
 800b72a:	3710      	adds	r7, #16
 800b72c:	46bd      	mov	sp, r7
 800b72e:	bd80      	pop	{r7, pc}
 800b730:	2000190c 	.word	0x2000190c
 800b734:	e000ed04 	.word	0xe000ed04

0800b738 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b08a      	sub	sp, #40	; 0x28
 800b73c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b73e:	2300      	movs	r3, #0
 800b740:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b742:	2300      	movs	r3, #0
 800b744:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b746:	463a      	mov	r2, r7
 800b748:	1d39      	adds	r1, r7, #4
 800b74a:	f107 0308 	add.w	r3, r7, #8
 800b74e:	4618      	mov	r0, r3
 800b750:	f7fe fda0 	bl	800a294 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b754:	6839      	ldr	r1, [r7, #0]
 800b756:	687b      	ldr	r3, [r7, #4]
 800b758:	68ba      	ldr	r2, [r7, #8]
 800b75a:	9202      	str	r2, [sp, #8]
 800b75c:	9301      	str	r3, [sp, #4]
 800b75e:	2300      	movs	r3, #0
 800b760:	9300      	str	r3, [sp, #0]
 800b762:	2300      	movs	r3, #0
 800b764:	460a      	mov	r2, r1
 800b766:	4924      	ldr	r1, [pc, #144]	; (800b7f8 <vTaskStartScheduler+0xc0>)
 800b768:	4824      	ldr	r0, [pc, #144]	; (800b7fc <vTaskStartScheduler+0xc4>)
 800b76a:	f7ff fd7b 	bl	800b264 <xTaskCreateStatic>
 800b76e:	4603      	mov	r3, r0
 800b770:	4a23      	ldr	r2, [pc, #140]	; (800b800 <vTaskStartScheduler+0xc8>)
 800b772:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b774:	4b22      	ldr	r3, [pc, #136]	; (800b800 <vTaskStartScheduler+0xc8>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d002      	beq.n	800b782 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b77c:	2301      	movs	r3, #1
 800b77e:	617b      	str	r3, [r7, #20]
 800b780:	e001      	b.n	800b786 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b782:	2300      	movs	r3, #0
 800b784:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b786:	697b      	ldr	r3, [r7, #20]
 800b788:	2b01      	cmp	r3, #1
 800b78a:	d102      	bne.n	800b792 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b78c:	f000 fe1e 	bl	800c3cc <xTimerCreateTimerTask>
 800b790:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b792:	697b      	ldr	r3, [r7, #20]
 800b794:	2b01      	cmp	r3, #1
 800b796:	d11b      	bne.n	800b7d0 <vTaskStartScheduler+0x98>
	__asm volatile
 800b798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b79c:	f383 8811 	msr	BASEPRI, r3
 800b7a0:	f3bf 8f6f 	isb	sy
 800b7a4:	f3bf 8f4f 	dsb	sy
 800b7a8:	613b      	str	r3, [r7, #16]
}
 800b7aa:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b7ac:	4b15      	ldr	r3, [pc, #84]	; (800b804 <vTaskStartScheduler+0xcc>)
 800b7ae:	681b      	ldr	r3, [r3, #0]
 800b7b0:	3354      	adds	r3, #84	; 0x54
 800b7b2:	4a15      	ldr	r2, [pc, #84]	; (800b808 <vTaskStartScheduler+0xd0>)
 800b7b4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b7b6:	4b15      	ldr	r3, [pc, #84]	; (800b80c <vTaskStartScheduler+0xd4>)
 800b7b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800b7bc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b7be:	4b14      	ldr	r3, [pc, #80]	; (800b810 <vTaskStartScheduler+0xd8>)
 800b7c0:	2201      	movs	r2, #1
 800b7c2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b7c4:	4b13      	ldr	r3, [pc, #76]	; (800b814 <vTaskStartScheduler+0xdc>)
 800b7c6:	2200      	movs	r2, #0
 800b7c8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b7ca:	f001 f9d9 	bl	800cb80 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b7ce:	e00e      	b.n	800b7ee <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b7d0:	697b      	ldr	r3, [r7, #20]
 800b7d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b7d6:	d10a      	bne.n	800b7ee <vTaskStartScheduler+0xb6>
	__asm volatile
 800b7d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7dc:	f383 8811 	msr	BASEPRI, r3
 800b7e0:	f3bf 8f6f 	isb	sy
 800b7e4:	f3bf 8f4f 	dsb	sy
 800b7e8:	60fb      	str	r3, [r7, #12]
}
 800b7ea:	bf00      	nop
 800b7ec:	e7fe      	b.n	800b7ec <vTaskStartScheduler+0xb4>
}
 800b7ee:	bf00      	nop
 800b7f0:	3718      	adds	r7, #24
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	0800f804 	.word	0x0800f804
 800b7fc:	0800be3d 	.word	0x0800be3d
 800b800:	20001908 	.word	0x20001908
 800b804:	20001410 	.word	0x20001410
 800b808:	20000014 	.word	0x20000014
 800b80c:	20001904 	.word	0x20001904
 800b810:	200018f0 	.word	0x200018f0
 800b814:	200018e8 	.word	0x200018e8

0800b818 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b818:	b480      	push	{r7}
 800b81a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b81c:	4b04      	ldr	r3, [pc, #16]	; (800b830 <vTaskSuspendAll+0x18>)
 800b81e:	681b      	ldr	r3, [r3, #0]
 800b820:	3301      	adds	r3, #1
 800b822:	4a03      	ldr	r2, [pc, #12]	; (800b830 <vTaskSuspendAll+0x18>)
 800b824:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b826:	bf00      	nop
 800b828:	46bd      	mov	sp, r7
 800b82a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b82e:	4770      	bx	lr
 800b830:	2000190c 	.word	0x2000190c

0800b834 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b834:	b580      	push	{r7, lr}
 800b836:	b084      	sub	sp, #16
 800b838:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b83a:	2300      	movs	r3, #0
 800b83c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b83e:	2300      	movs	r3, #0
 800b840:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b842:	4b42      	ldr	r3, [pc, #264]	; (800b94c <xTaskResumeAll+0x118>)
 800b844:	681b      	ldr	r3, [r3, #0]
 800b846:	2b00      	cmp	r3, #0
 800b848:	d10a      	bne.n	800b860 <xTaskResumeAll+0x2c>
	__asm volatile
 800b84a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b84e:	f383 8811 	msr	BASEPRI, r3
 800b852:	f3bf 8f6f 	isb	sy
 800b856:	f3bf 8f4f 	dsb	sy
 800b85a:	603b      	str	r3, [r7, #0]
}
 800b85c:	bf00      	nop
 800b85e:	e7fe      	b.n	800b85e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b860:	f001 fa30 	bl	800ccc4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b864:	4b39      	ldr	r3, [pc, #228]	; (800b94c <xTaskResumeAll+0x118>)
 800b866:	681b      	ldr	r3, [r3, #0]
 800b868:	3b01      	subs	r3, #1
 800b86a:	4a38      	ldr	r2, [pc, #224]	; (800b94c <xTaskResumeAll+0x118>)
 800b86c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b86e:	4b37      	ldr	r3, [pc, #220]	; (800b94c <xTaskResumeAll+0x118>)
 800b870:	681b      	ldr	r3, [r3, #0]
 800b872:	2b00      	cmp	r3, #0
 800b874:	d162      	bne.n	800b93c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b876:	4b36      	ldr	r3, [pc, #216]	; (800b950 <xTaskResumeAll+0x11c>)
 800b878:	681b      	ldr	r3, [r3, #0]
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d05e      	beq.n	800b93c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b87e:	e02f      	b.n	800b8e0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b880:	4b34      	ldr	r3, [pc, #208]	; (800b954 <xTaskResumeAll+0x120>)
 800b882:	68db      	ldr	r3, [r3, #12]
 800b884:	68db      	ldr	r3, [r3, #12]
 800b886:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b888:	68fb      	ldr	r3, [r7, #12]
 800b88a:	3318      	adds	r3, #24
 800b88c:	4618      	mov	r0, r3
 800b88e:	f7fe fdbf 	bl	800a410 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	3304      	adds	r3, #4
 800b896:	4618      	mov	r0, r3
 800b898:	f7fe fdba 	bl	800a410 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b89c:	68fb      	ldr	r3, [r7, #12]
 800b89e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8a0:	4b2d      	ldr	r3, [pc, #180]	; (800b958 <xTaskResumeAll+0x124>)
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	429a      	cmp	r2, r3
 800b8a6:	d903      	bls.n	800b8b0 <xTaskResumeAll+0x7c>
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ac:	4a2a      	ldr	r2, [pc, #168]	; (800b958 <xTaskResumeAll+0x124>)
 800b8ae:	6013      	str	r3, [r2, #0]
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8b4:	4613      	mov	r3, r2
 800b8b6:	009b      	lsls	r3, r3, #2
 800b8b8:	4413      	add	r3, r2
 800b8ba:	009b      	lsls	r3, r3, #2
 800b8bc:	4a27      	ldr	r2, [pc, #156]	; (800b95c <xTaskResumeAll+0x128>)
 800b8be:	441a      	add	r2, r3
 800b8c0:	68fb      	ldr	r3, [r7, #12]
 800b8c2:	3304      	adds	r3, #4
 800b8c4:	4619      	mov	r1, r3
 800b8c6:	4610      	mov	r0, r2
 800b8c8:	f7fe fd45 	bl	800a356 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b8cc:	68fb      	ldr	r3, [r7, #12]
 800b8ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b8d0:	4b23      	ldr	r3, [pc, #140]	; (800b960 <xTaskResumeAll+0x12c>)
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8d6:	429a      	cmp	r2, r3
 800b8d8:	d302      	bcc.n	800b8e0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800b8da:	4b22      	ldr	r3, [pc, #136]	; (800b964 <xTaskResumeAll+0x130>)
 800b8dc:	2201      	movs	r2, #1
 800b8de:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b8e0:	4b1c      	ldr	r3, [pc, #112]	; (800b954 <xTaskResumeAll+0x120>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d1cb      	bne.n	800b880 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b8e8:	68fb      	ldr	r3, [r7, #12]
 800b8ea:	2b00      	cmp	r3, #0
 800b8ec:	d001      	beq.n	800b8f2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b8ee:	f000 fb5f 	bl	800bfb0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b8f2:	4b1d      	ldr	r3, [pc, #116]	; (800b968 <xTaskResumeAll+0x134>)
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d010      	beq.n	800b920 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b8fe:	f000 f847 	bl	800b990 <xTaskIncrementTick>
 800b902:	4603      	mov	r3, r0
 800b904:	2b00      	cmp	r3, #0
 800b906:	d002      	beq.n	800b90e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800b908:	4b16      	ldr	r3, [pc, #88]	; (800b964 <xTaskResumeAll+0x130>)
 800b90a:	2201      	movs	r2, #1
 800b90c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b90e:	687b      	ldr	r3, [r7, #4]
 800b910:	3b01      	subs	r3, #1
 800b912:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	2b00      	cmp	r3, #0
 800b918:	d1f1      	bne.n	800b8fe <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800b91a:	4b13      	ldr	r3, [pc, #76]	; (800b968 <xTaskResumeAll+0x134>)
 800b91c:	2200      	movs	r2, #0
 800b91e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b920:	4b10      	ldr	r3, [pc, #64]	; (800b964 <xTaskResumeAll+0x130>)
 800b922:	681b      	ldr	r3, [r3, #0]
 800b924:	2b00      	cmp	r3, #0
 800b926:	d009      	beq.n	800b93c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b928:	2301      	movs	r3, #1
 800b92a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b92c:	4b0f      	ldr	r3, [pc, #60]	; (800b96c <xTaskResumeAll+0x138>)
 800b92e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b932:	601a      	str	r2, [r3, #0]
 800b934:	f3bf 8f4f 	dsb	sy
 800b938:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b93c:	f001 f9f2 	bl	800cd24 <vPortExitCritical>

	return xAlreadyYielded;
 800b940:	68bb      	ldr	r3, [r7, #8]
}
 800b942:	4618      	mov	r0, r3
 800b944:	3710      	adds	r7, #16
 800b946:	46bd      	mov	sp, r7
 800b948:	bd80      	pop	{r7, pc}
 800b94a:	bf00      	nop
 800b94c:	2000190c 	.word	0x2000190c
 800b950:	200018e4 	.word	0x200018e4
 800b954:	200018a4 	.word	0x200018a4
 800b958:	200018ec 	.word	0x200018ec
 800b95c:	20001414 	.word	0x20001414
 800b960:	20001410 	.word	0x20001410
 800b964:	200018f8 	.word	0x200018f8
 800b968:	200018f4 	.word	0x200018f4
 800b96c:	e000ed04 	.word	0xe000ed04

0800b970 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b970:	b480      	push	{r7}
 800b972:	b083      	sub	sp, #12
 800b974:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b976:	4b05      	ldr	r3, [pc, #20]	; (800b98c <xTaskGetTickCount+0x1c>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b97c:	687b      	ldr	r3, [r7, #4]
}
 800b97e:	4618      	mov	r0, r3
 800b980:	370c      	adds	r7, #12
 800b982:	46bd      	mov	sp, r7
 800b984:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b988:	4770      	bx	lr
 800b98a:	bf00      	nop
 800b98c:	200018e8 	.word	0x200018e8

0800b990 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b990:	b580      	push	{r7, lr}
 800b992:	b086      	sub	sp, #24
 800b994:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b996:	2300      	movs	r3, #0
 800b998:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b99a:	4b4f      	ldr	r3, [pc, #316]	; (800bad8 <xTaskIncrementTick+0x148>)
 800b99c:	681b      	ldr	r3, [r3, #0]
 800b99e:	2b00      	cmp	r3, #0
 800b9a0:	f040 808f 	bne.w	800bac2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b9a4:	4b4d      	ldr	r3, [pc, #308]	; (800badc <xTaskIncrementTick+0x14c>)
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	3301      	adds	r3, #1
 800b9aa:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b9ac:	4a4b      	ldr	r2, [pc, #300]	; (800badc <xTaskIncrementTick+0x14c>)
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b9b2:	693b      	ldr	r3, [r7, #16]
 800b9b4:	2b00      	cmp	r3, #0
 800b9b6:	d120      	bne.n	800b9fa <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b9b8:	4b49      	ldr	r3, [pc, #292]	; (800bae0 <xTaskIncrementTick+0x150>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	681b      	ldr	r3, [r3, #0]
 800b9be:	2b00      	cmp	r3, #0
 800b9c0:	d00a      	beq.n	800b9d8 <xTaskIncrementTick+0x48>
	__asm volatile
 800b9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c6:	f383 8811 	msr	BASEPRI, r3
 800b9ca:	f3bf 8f6f 	isb	sy
 800b9ce:	f3bf 8f4f 	dsb	sy
 800b9d2:	603b      	str	r3, [r7, #0]
}
 800b9d4:	bf00      	nop
 800b9d6:	e7fe      	b.n	800b9d6 <xTaskIncrementTick+0x46>
 800b9d8:	4b41      	ldr	r3, [pc, #260]	; (800bae0 <xTaskIncrementTick+0x150>)
 800b9da:	681b      	ldr	r3, [r3, #0]
 800b9dc:	60fb      	str	r3, [r7, #12]
 800b9de:	4b41      	ldr	r3, [pc, #260]	; (800bae4 <xTaskIncrementTick+0x154>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	4a3f      	ldr	r2, [pc, #252]	; (800bae0 <xTaskIncrementTick+0x150>)
 800b9e4:	6013      	str	r3, [r2, #0]
 800b9e6:	4a3f      	ldr	r2, [pc, #252]	; (800bae4 <xTaskIncrementTick+0x154>)
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	6013      	str	r3, [r2, #0]
 800b9ec:	4b3e      	ldr	r3, [pc, #248]	; (800bae8 <xTaskIncrementTick+0x158>)
 800b9ee:	681b      	ldr	r3, [r3, #0]
 800b9f0:	3301      	adds	r3, #1
 800b9f2:	4a3d      	ldr	r2, [pc, #244]	; (800bae8 <xTaskIncrementTick+0x158>)
 800b9f4:	6013      	str	r3, [r2, #0]
 800b9f6:	f000 fadb 	bl	800bfb0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b9fa:	4b3c      	ldr	r3, [pc, #240]	; (800baec <xTaskIncrementTick+0x15c>)
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	693a      	ldr	r2, [r7, #16]
 800ba00:	429a      	cmp	r2, r3
 800ba02:	d349      	bcc.n	800ba98 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba04:	4b36      	ldr	r3, [pc, #216]	; (800bae0 <xTaskIncrementTick+0x150>)
 800ba06:	681b      	ldr	r3, [r3, #0]
 800ba08:	681b      	ldr	r3, [r3, #0]
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d104      	bne.n	800ba18 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba0e:	4b37      	ldr	r3, [pc, #220]	; (800baec <xTaskIncrementTick+0x15c>)
 800ba10:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ba14:	601a      	str	r2, [r3, #0]
					break;
 800ba16:	e03f      	b.n	800ba98 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba18:	4b31      	ldr	r3, [pc, #196]	; (800bae0 <xTaskIncrementTick+0x150>)
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	68db      	ldr	r3, [r3, #12]
 800ba1e:	68db      	ldr	r3, [r3, #12]
 800ba20:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ba22:	68bb      	ldr	r3, [r7, #8]
 800ba24:	685b      	ldr	r3, [r3, #4]
 800ba26:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800ba28:	693a      	ldr	r2, [r7, #16]
 800ba2a:	687b      	ldr	r3, [r7, #4]
 800ba2c:	429a      	cmp	r2, r3
 800ba2e:	d203      	bcs.n	800ba38 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ba30:	4a2e      	ldr	r2, [pc, #184]	; (800baec <xTaskIncrementTick+0x15c>)
 800ba32:	687b      	ldr	r3, [r7, #4]
 800ba34:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ba36:	e02f      	b.n	800ba98 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ba38:	68bb      	ldr	r3, [r7, #8]
 800ba3a:	3304      	adds	r3, #4
 800ba3c:	4618      	mov	r0, r3
 800ba3e:	f7fe fce7 	bl	800a410 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ba42:	68bb      	ldr	r3, [r7, #8]
 800ba44:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800ba46:	2b00      	cmp	r3, #0
 800ba48:	d004      	beq.n	800ba54 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800ba4a:	68bb      	ldr	r3, [r7, #8]
 800ba4c:	3318      	adds	r3, #24
 800ba4e:	4618      	mov	r0, r3
 800ba50:	f7fe fcde 	bl	800a410 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800ba54:	68bb      	ldr	r3, [r7, #8]
 800ba56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba58:	4b25      	ldr	r3, [pc, #148]	; (800baf0 <xTaskIncrementTick+0x160>)
 800ba5a:	681b      	ldr	r3, [r3, #0]
 800ba5c:	429a      	cmp	r2, r3
 800ba5e:	d903      	bls.n	800ba68 <xTaskIncrementTick+0xd8>
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba64:	4a22      	ldr	r2, [pc, #136]	; (800baf0 <xTaskIncrementTick+0x160>)
 800ba66:	6013      	str	r3, [r2, #0]
 800ba68:	68bb      	ldr	r3, [r7, #8]
 800ba6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba6c:	4613      	mov	r3, r2
 800ba6e:	009b      	lsls	r3, r3, #2
 800ba70:	4413      	add	r3, r2
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	4a1f      	ldr	r2, [pc, #124]	; (800baf4 <xTaskIncrementTick+0x164>)
 800ba76:	441a      	add	r2, r3
 800ba78:	68bb      	ldr	r3, [r7, #8]
 800ba7a:	3304      	adds	r3, #4
 800ba7c:	4619      	mov	r1, r3
 800ba7e:	4610      	mov	r0, r2
 800ba80:	f7fe fc69 	bl	800a356 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800ba84:	68bb      	ldr	r3, [r7, #8]
 800ba86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba88:	4b1b      	ldr	r3, [pc, #108]	; (800baf8 <xTaskIncrementTick+0x168>)
 800ba8a:	681b      	ldr	r3, [r3, #0]
 800ba8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ba8e:	429a      	cmp	r2, r3
 800ba90:	d3b8      	bcc.n	800ba04 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800ba92:	2301      	movs	r3, #1
 800ba94:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba96:	e7b5      	b.n	800ba04 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800ba98:	4b17      	ldr	r3, [pc, #92]	; (800baf8 <xTaskIncrementTick+0x168>)
 800ba9a:	681b      	ldr	r3, [r3, #0]
 800ba9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ba9e:	4915      	ldr	r1, [pc, #84]	; (800baf4 <xTaskIncrementTick+0x164>)
 800baa0:	4613      	mov	r3, r2
 800baa2:	009b      	lsls	r3, r3, #2
 800baa4:	4413      	add	r3, r2
 800baa6:	009b      	lsls	r3, r3, #2
 800baa8:	440b      	add	r3, r1
 800baaa:	681b      	ldr	r3, [r3, #0]
 800baac:	2b01      	cmp	r3, #1
 800baae:	d901      	bls.n	800bab4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800bab0:	2301      	movs	r3, #1
 800bab2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800bab4:	4b11      	ldr	r3, [pc, #68]	; (800bafc <xTaskIncrementTick+0x16c>)
 800bab6:	681b      	ldr	r3, [r3, #0]
 800bab8:	2b00      	cmp	r3, #0
 800baba:	d007      	beq.n	800bacc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800babc:	2301      	movs	r3, #1
 800babe:	617b      	str	r3, [r7, #20]
 800bac0:	e004      	b.n	800bacc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800bac2:	4b0f      	ldr	r3, [pc, #60]	; (800bb00 <xTaskIncrementTick+0x170>)
 800bac4:	681b      	ldr	r3, [r3, #0]
 800bac6:	3301      	adds	r3, #1
 800bac8:	4a0d      	ldr	r2, [pc, #52]	; (800bb00 <xTaskIncrementTick+0x170>)
 800baca:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800bacc:	697b      	ldr	r3, [r7, #20]
}
 800bace:	4618      	mov	r0, r3
 800bad0:	3718      	adds	r7, #24
 800bad2:	46bd      	mov	sp, r7
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	2000190c 	.word	0x2000190c
 800badc:	200018e8 	.word	0x200018e8
 800bae0:	2000189c 	.word	0x2000189c
 800bae4:	200018a0 	.word	0x200018a0
 800bae8:	200018fc 	.word	0x200018fc
 800baec:	20001904 	.word	0x20001904
 800baf0:	200018ec 	.word	0x200018ec
 800baf4:	20001414 	.word	0x20001414
 800baf8:	20001410 	.word	0x20001410
 800bafc:	200018f8 	.word	0x200018f8
 800bb00:	200018f4 	.word	0x200018f4

0800bb04 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800bb04:	b480      	push	{r7}
 800bb06:	b085      	sub	sp, #20
 800bb08:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800bb0a:	4b2a      	ldr	r3, [pc, #168]	; (800bbb4 <vTaskSwitchContext+0xb0>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	2b00      	cmp	r3, #0
 800bb10:	d003      	beq.n	800bb1a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800bb12:	4b29      	ldr	r3, [pc, #164]	; (800bbb8 <vTaskSwitchContext+0xb4>)
 800bb14:	2201      	movs	r2, #1
 800bb16:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800bb18:	e046      	b.n	800bba8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800bb1a:	4b27      	ldr	r3, [pc, #156]	; (800bbb8 <vTaskSwitchContext+0xb4>)
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb20:	4b26      	ldr	r3, [pc, #152]	; (800bbbc <vTaskSwitchContext+0xb8>)
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	60fb      	str	r3, [r7, #12]
 800bb26:	e010      	b.n	800bb4a <vTaskSwitchContext+0x46>
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	2b00      	cmp	r3, #0
 800bb2c:	d10a      	bne.n	800bb44 <vTaskSwitchContext+0x40>
	__asm volatile
 800bb2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb32:	f383 8811 	msr	BASEPRI, r3
 800bb36:	f3bf 8f6f 	isb	sy
 800bb3a:	f3bf 8f4f 	dsb	sy
 800bb3e:	607b      	str	r3, [r7, #4]
}
 800bb40:	bf00      	nop
 800bb42:	e7fe      	b.n	800bb42 <vTaskSwitchContext+0x3e>
 800bb44:	68fb      	ldr	r3, [r7, #12]
 800bb46:	3b01      	subs	r3, #1
 800bb48:	60fb      	str	r3, [r7, #12]
 800bb4a:	491d      	ldr	r1, [pc, #116]	; (800bbc0 <vTaskSwitchContext+0xbc>)
 800bb4c:	68fa      	ldr	r2, [r7, #12]
 800bb4e:	4613      	mov	r3, r2
 800bb50:	009b      	lsls	r3, r3, #2
 800bb52:	4413      	add	r3, r2
 800bb54:	009b      	lsls	r3, r3, #2
 800bb56:	440b      	add	r3, r1
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	2b00      	cmp	r3, #0
 800bb5c:	d0e4      	beq.n	800bb28 <vTaskSwitchContext+0x24>
 800bb5e:	68fa      	ldr	r2, [r7, #12]
 800bb60:	4613      	mov	r3, r2
 800bb62:	009b      	lsls	r3, r3, #2
 800bb64:	4413      	add	r3, r2
 800bb66:	009b      	lsls	r3, r3, #2
 800bb68:	4a15      	ldr	r2, [pc, #84]	; (800bbc0 <vTaskSwitchContext+0xbc>)
 800bb6a:	4413      	add	r3, r2
 800bb6c:	60bb      	str	r3, [r7, #8]
 800bb6e:	68bb      	ldr	r3, [r7, #8]
 800bb70:	685b      	ldr	r3, [r3, #4]
 800bb72:	685a      	ldr	r2, [r3, #4]
 800bb74:	68bb      	ldr	r3, [r7, #8]
 800bb76:	605a      	str	r2, [r3, #4]
 800bb78:	68bb      	ldr	r3, [r7, #8]
 800bb7a:	685a      	ldr	r2, [r3, #4]
 800bb7c:	68bb      	ldr	r3, [r7, #8]
 800bb7e:	3308      	adds	r3, #8
 800bb80:	429a      	cmp	r2, r3
 800bb82:	d104      	bne.n	800bb8e <vTaskSwitchContext+0x8a>
 800bb84:	68bb      	ldr	r3, [r7, #8]
 800bb86:	685b      	ldr	r3, [r3, #4]
 800bb88:	685a      	ldr	r2, [r3, #4]
 800bb8a:	68bb      	ldr	r3, [r7, #8]
 800bb8c:	605a      	str	r2, [r3, #4]
 800bb8e:	68bb      	ldr	r3, [r7, #8]
 800bb90:	685b      	ldr	r3, [r3, #4]
 800bb92:	68db      	ldr	r3, [r3, #12]
 800bb94:	4a0b      	ldr	r2, [pc, #44]	; (800bbc4 <vTaskSwitchContext+0xc0>)
 800bb96:	6013      	str	r3, [r2, #0]
 800bb98:	4a08      	ldr	r2, [pc, #32]	; (800bbbc <vTaskSwitchContext+0xb8>)
 800bb9a:	68fb      	ldr	r3, [r7, #12]
 800bb9c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800bb9e:	4b09      	ldr	r3, [pc, #36]	; (800bbc4 <vTaskSwitchContext+0xc0>)
 800bba0:	681b      	ldr	r3, [r3, #0]
 800bba2:	3354      	adds	r3, #84	; 0x54
 800bba4:	4a08      	ldr	r2, [pc, #32]	; (800bbc8 <vTaskSwitchContext+0xc4>)
 800bba6:	6013      	str	r3, [r2, #0]
}
 800bba8:	bf00      	nop
 800bbaa:	3714      	adds	r7, #20
 800bbac:	46bd      	mov	sp, r7
 800bbae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb2:	4770      	bx	lr
 800bbb4:	2000190c 	.word	0x2000190c
 800bbb8:	200018f8 	.word	0x200018f8
 800bbbc:	200018ec 	.word	0x200018ec
 800bbc0:	20001414 	.word	0x20001414
 800bbc4:	20001410 	.word	0x20001410
 800bbc8:	20000014 	.word	0x20000014

0800bbcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800bbcc:	b580      	push	{r7, lr}
 800bbce:	b084      	sub	sp, #16
 800bbd0:	af00      	add	r7, sp, #0
 800bbd2:	6078      	str	r0, [r7, #4]
 800bbd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d10a      	bne.n	800bbf2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800bbdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbe0:	f383 8811 	msr	BASEPRI, r3
 800bbe4:	f3bf 8f6f 	isb	sy
 800bbe8:	f3bf 8f4f 	dsb	sy
 800bbec:	60fb      	str	r3, [r7, #12]
}
 800bbee:	bf00      	nop
 800bbf0:	e7fe      	b.n	800bbf0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bbf2:	4b07      	ldr	r3, [pc, #28]	; (800bc10 <vTaskPlaceOnEventList+0x44>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	3318      	adds	r3, #24
 800bbf8:	4619      	mov	r1, r3
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f7fe fbcf 	bl	800a39e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800bc00:	2101      	movs	r1, #1
 800bc02:	6838      	ldr	r0, [r7, #0]
 800bc04:	f000 fb8e 	bl	800c324 <prvAddCurrentTaskToDelayedList>
}
 800bc08:	bf00      	nop
 800bc0a:	3710      	adds	r7, #16
 800bc0c:	46bd      	mov	sp, r7
 800bc0e:	bd80      	pop	{r7, pc}
 800bc10:	20001410 	.word	0x20001410

0800bc14 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800bc14:	b580      	push	{r7, lr}
 800bc16:	b086      	sub	sp, #24
 800bc18:	af00      	add	r7, sp, #0
 800bc1a:	60f8      	str	r0, [r7, #12]
 800bc1c:	60b9      	str	r1, [r7, #8]
 800bc1e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800bc20:	68fb      	ldr	r3, [r7, #12]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d10a      	bne.n	800bc3c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800bc26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc2a:	f383 8811 	msr	BASEPRI, r3
 800bc2e:	f3bf 8f6f 	isb	sy
 800bc32:	f3bf 8f4f 	dsb	sy
 800bc36:	617b      	str	r3, [r7, #20]
}
 800bc38:	bf00      	nop
 800bc3a:	e7fe      	b.n	800bc3a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800bc3c:	4b0a      	ldr	r3, [pc, #40]	; (800bc68 <vTaskPlaceOnEventListRestricted+0x54>)
 800bc3e:	681b      	ldr	r3, [r3, #0]
 800bc40:	3318      	adds	r3, #24
 800bc42:	4619      	mov	r1, r3
 800bc44:	68f8      	ldr	r0, [r7, #12]
 800bc46:	f7fe fb86 	bl	800a356 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800bc4a:	687b      	ldr	r3, [r7, #4]
 800bc4c:	2b00      	cmp	r3, #0
 800bc4e:	d002      	beq.n	800bc56 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800bc50:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc54:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800bc56:	6879      	ldr	r1, [r7, #4]
 800bc58:	68b8      	ldr	r0, [r7, #8]
 800bc5a:	f000 fb63 	bl	800c324 <prvAddCurrentTaskToDelayedList>
	}
 800bc5e:	bf00      	nop
 800bc60:	3718      	adds	r7, #24
 800bc62:	46bd      	mov	sp, r7
 800bc64:	bd80      	pop	{r7, pc}
 800bc66:	bf00      	nop
 800bc68:	20001410 	.word	0x20001410

0800bc6c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800bc6c:	b580      	push	{r7, lr}
 800bc6e:	b086      	sub	sp, #24
 800bc70:	af00      	add	r7, sp, #0
 800bc72:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	68db      	ldr	r3, [r3, #12]
 800bc78:	68db      	ldr	r3, [r3, #12]
 800bc7a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800bc7c:	693b      	ldr	r3, [r7, #16]
 800bc7e:	2b00      	cmp	r3, #0
 800bc80:	d10a      	bne.n	800bc98 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800bc82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc86:	f383 8811 	msr	BASEPRI, r3
 800bc8a:	f3bf 8f6f 	isb	sy
 800bc8e:	f3bf 8f4f 	dsb	sy
 800bc92:	60fb      	str	r3, [r7, #12]
}
 800bc94:	bf00      	nop
 800bc96:	e7fe      	b.n	800bc96 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800bc98:	693b      	ldr	r3, [r7, #16]
 800bc9a:	3318      	adds	r3, #24
 800bc9c:	4618      	mov	r0, r3
 800bc9e:	f7fe fbb7 	bl	800a410 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800bca2:	4b1e      	ldr	r3, [pc, #120]	; (800bd1c <xTaskRemoveFromEventList+0xb0>)
 800bca4:	681b      	ldr	r3, [r3, #0]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d11d      	bne.n	800bce6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800bcaa:	693b      	ldr	r3, [r7, #16]
 800bcac:	3304      	adds	r3, #4
 800bcae:	4618      	mov	r0, r3
 800bcb0:	f7fe fbae 	bl	800a410 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800bcb4:	693b      	ldr	r3, [r7, #16]
 800bcb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcb8:	4b19      	ldr	r3, [pc, #100]	; (800bd20 <xTaskRemoveFromEventList+0xb4>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	429a      	cmp	r2, r3
 800bcbe:	d903      	bls.n	800bcc8 <xTaskRemoveFromEventList+0x5c>
 800bcc0:	693b      	ldr	r3, [r7, #16]
 800bcc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcc4:	4a16      	ldr	r2, [pc, #88]	; (800bd20 <xTaskRemoveFromEventList+0xb4>)
 800bcc6:	6013      	str	r3, [r2, #0]
 800bcc8:	693b      	ldr	r3, [r7, #16]
 800bcca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bccc:	4613      	mov	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	4413      	add	r3, r2
 800bcd2:	009b      	lsls	r3, r3, #2
 800bcd4:	4a13      	ldr	r2, [pc, #76]	; (800bd24 <xTaskRemoveFromEventList+0xb8>)
 800bcd6:	441a      	add	r2, r3
 800bcd8:	693b      	ldr	r3, [r7, #16]
 800bcda:	3304      	adds	r3, #4
 800bcdc:	4619      	mov	r1, r3
 800bcde:	4610      	mov	r0, r2
 800bce0:	f7fe fb39 	bl	800a356 <vListInsertEnd>
 800bce4:	e005      	b.n	800bcf2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800bce6:	693b      	ldr	r3, [r7, #16]
 800bce8:	3318      	adds	r3, #24
 800bcea:	4619      	mov	r1, r3
 800bcec:	480e      	ldr	r0, [pc, #56]	; (800bd28 <xTaskRemoveFromEventList+0xbc>)
 800bcee:	f7fe fb32 	bl	800a356 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800bcf2:	693b      	ldr	r3, [r7, #16]
 800bcf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800bcf6:	4b0d      	ldr	r3, [pc, #52]	; (800bd2c <xTaskRemoveFromEventList+0xc0>)
 800bcf8:	681b      	ldr	r3, [r3, #0]
 800bcfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800bcfc:	429a      	cmp	r2, r3
 800bcfe:	d905      	bls.n	800bd0c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800bd00:	2301      	movs	r3, #1
 800bd02:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800bd04:	4b0a      	ldr	r3, [pc, #40]	; (800bd30 <xTaskRemoveFromEventList+0xc4>)
 800bd06:	2201      	movs	r2, #1
 800bd08:	601a      	str	r2, [r3, #0]
 800bd0a:	e001      	b.n	800bd10 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800bd0c:	2300      	movs	r3, #0
 800bd0e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800bd10:	697b      	ldr	r3, [r7, #20]
}
 800bd12:	4618      	mov	r0, r3
 800bd14:	3718      	adds	r7, #24
 800bd16:	46bd      	mov	sp, r7
 800bd18:	bd80      	pop	{r7, pc}
 800bd1a:	bf00      	nop
 800bd1c:	2000190c 	.word	0x2000190c
 800bd20:	200018ec 	.word	0x200018ec
 800bd24:	20001414 	.word	0x20001414
 800bd28:	200018a4 	.word	0x200018a4
 800bd2c:	20001410 	.word	0x20001410
 800bd30:	200018f8 	.word	0x200018f8

0800bd34 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800bd34:	b480      	push	{r7}
 800bd36:	b083      	sub	sp, #12
 800bd38:	af00      	add	r7, sp, #0
 800bd3a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800bd3c:	4b06      	ldr	r3, [pc, #24]	; (800bd58 <vTaskInternalSetTimeOutState+0x24>)
 800bd3e:	681a      	ldr	r2, [r3, #0]
 800bd40:	687b      	ldr	r3, [r7, #4]
 800bd42:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800bd44:	4b05      	ldr	r3, [pc, #20]	; (800bd5c <vTaskInternalSetTimeOutState+0x28>)
 800bd46:	681a      	ldr	r2, [r3, #0]
 800bd48:	687b      	ldr	r3, [r7, #4]
 800bd4a:	605a      	str	r2, [r3, #4]
}
 800bd4c:	bf00      	nop
 800bd4e:	370c      	adds	r7, #12
 800bd50:	46bd      	mov	sp, r7
 800bd52:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd56:	4770      	bx	lr
 800bd58:	200018fc 	.word	0x200018fc
 800bd5c:	200018e8 	.word	0x200018e8

0800bd60 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800bd60:	b580      	push	{r7, lr}
 800bd62:	b088      	sub	sp, #32
 800bd64:	af00      	add	r7, sp, #0
 800bd66:	6078      	str	r0, [r7, #4]
 800bd68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	2b00      	cmp	r3, #0
 800bd6e:	d10a      	bne.n	800bd86 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800bd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd74:	f383 8811 	msr	BASEPRI, r3
 800bd78:	f3bf 8f6f 	isb	sy
 800bd7c:	f3bf 8f4f 	dsb	sy
 800bd80:	613b      	str	r3, [r7, #16]
}
 800bd82:	bf00      	nop
 800bd84:	e7fe      	b.n	800bd84 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800bd86:	683b      	ldr	r3, [r7, #0]
 800bd88:	2b00      	cmp	r3, #0
 800bd8a:	d10a      	bne.n	800bda2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800bd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd90:	f383 8811 	msr	BASEPRI, r3
 800bd94:	f3bf 8f6f 	isb	sy
 800bd98:	f3bf 8f4f 	dsb	sy
 800bd9c:	60fb      	str	r3, [r7, #12]
}
 800bd9e:	bf00      	nop
 800bda0:	e7fe      	b.n	800bda0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800bda2:	f000 ff8f 	bl	800ccc4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800bda6:	4b1d      	ldr	r3, [pc, #116]	; (800be1c <xTaskCheckForTimeOut+0xbc>)
 800bda8:	681b      	ldr	r3, [r3, #0]
 800bdaa:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800bdac:	687b      	ldr	r3, [r7, #4]
 800bdae:	685b      	ldr	r3, [r3, #4]
 800bdb0:	69ba      	ldr	r2, [r7, #24]
 800bdb2:	1ad3      	subs	r3, r2, r3
 800bdb4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800bdb6:	683b      	ldr	r3, [r7, #0]
 800bdb8:	681b      	ldr	r3, [r3, #0]
 800bdba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bdbe:	d102      	bne.n	800bdc6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800bdc0:	2300      	movs	r3, #0
 800bdc2:	61fb      	str	r3, [r7, #28]
 800bdc4:	e023      	b.n	800be0e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681a      	ldr	r2, [r3, #0]
 800bdca:	4b15      	ldr	r3, [pc, #84]	; (800be20 <xTaskCheckForTimeOut+0xc0>)
 800bdcc:	681b      	ldr	r3, [r3, #0]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d007      	beq.n	800bde2 <xTaskCheckForTimeOut+0x82>
 800bdd2:	687b      	ldr	r3, [r7, #4]
 800bdd4:	685b      	ldr	r3, [r3, #4]
 800bdd6:	69ba      	ldr	r2, [r7, #24]
 800bdd8:	429a      	cmp	r2, r3
 800bdda:	d302      	bcc.n	800bde2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800bddc:	2301      	movs	r3, #1
 800bdde:	61fb      	str	r3, [r7, #28]
 800bde0:	e015      	b.n	800be0e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800bde2:	683b      	ldr	r3, [r7, #0]
 800bde4:	681b      	ldr	r3, [r3, #0]
 800bde6:	697a      	ldr	r2, [r7, #20]
 800bde8:	429a      	cmp	r2, r3
 800bdea:	d20b      	bcs.n	800be04 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800bdec:	683b      	ldr	r3, [r7, #0]
 800bdee:	681a      	ldr	r2, [r3, #0]
 800bdf0:	697b      	ldr	r3, [r7, #20]
 800bdf2:	1ad2      	subs	r2, r2, r3
 800bdf4:	683b      	ldr	r3, [r7, #0]
 800bdf6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800bdf8:	6878      	ldr	r0, [r7, #4]
 800bdfa:	f7ff ff9b 	bl	800bd34 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800bdfe:	2300      	movs	r3, #0
 800be00:	61fb      	str	r3, [r7, #28]
 800be02:	e004      	b.n	800be0e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800be04:	683b      	ldr	r3, [r7, #0]
 800be06:	2200      	movs	r2, #0
 800be08:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800be0a:	2301      	movs	r3, #1
 800be0c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800be0e:	f000 ff89 	bl	800cd24 <vPortExitCritical>

	return xReturn;
 800be12:	69fb      	ldr	r3, [r7, #28]
}
 800be14:	4618      	mov	r0, r3
 800be16:	3720      	adds	r7, #32
 800be18:	46bd      	mov	sp, r7
 800be1a:	bd80      	pop	{r7, pc}
 800be1c:	200018e8 	.word	0x200018e8
 800be20:	200018fc 	.word	0x200018fc

0800be24 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800be24:	b480      	push	{r7}
 800be26:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800be28:	4b03      	ldr	r3, [pc, #12]	; (800be38 <vTaskMissedYield+0x14>)
 800be2a:	2201      	movs	r2, #1
 800be2c:	601a      	str	r2, [r3, #0]
}
 800be2e:	bf00      	nop
 800be30:	46bd      	mov	sp, r7
 800be32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be36:	4770      	bx	lr
 800be38:	200018f8 	.word	0x200018f8

0800be3c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800be3c:	b580      	push	{r7, lr}
 800be3e:	b082      	sub	sp, #8
 800be40:	af00      	add	r7, sp, #0
 800be42:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800be44:	f000 f852 	bl	800beec <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800be48:	4b06      	ldr	r3, [pc, #24]	; (800be64 <prvIdleTask+0x28>)
 800be4a:	681b      	ldr	r3, [r3, #0]
 800be4c:	2b01      	cmp	r3, #1
 800be4e:	d9f9      	bls.n	800be44 <prvIdleTask+0x8>
			{
				taskYIELD();
 800be50:	4b05      	ldr	r3, [pc, #20]	; (800be68 <prvIdleTask+0x2c>)
 800be52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be56:	601a      	str	r2, [r3, #0]
 800be58:	f3bf 8f4f 	dsb	sy
 800be5c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800be60:	e7f0      	b.n	800be44 <prvIdleTask+0x8>
 800be62:	bf00      	nop
 800be64:	20001414 	.word	0x20001414
 800be68:	e000ed04 	.word	0xe000ed04

0800be6c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800be6c:	b580      	push	{r7, lr}
 800be6e:	b082      	sub	sp, #8
 800be70:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be72:	2300      	movs	r3, #0
 800be74:	607b      	str	r3, [r7, #4]
 800be76:	e00c      	b.n	800be92 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800be78:	687a      	ldr	r2, [r7, #4]
 800be7a:	4613      	mov	r3, r2
 800be7c:	009b      	lsls	r3, r3, #2
 800be7e:	4413      	add	r3, r2
 800be80:	009b      	lsls	r3, r3, #2
 800be82:	4a12      	ldr	r2, [pc, #72]	; (800becc <prvInitialiseTaskLists+0x60>)
 800be84:	4413      	add	r3, r2
 800be86:	4618      	mov	r0, r3
 800be88:	f7fe fa38 	bl	800a2fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800be8c:	687b      	ldr	r3, [r7, #4]
 800be8e:	3301      	adds	r3, #1
 800be90:	607b      	str	r3, [r7, #4]
 800be92:	687b      	ldr	r3, [r7, #4]
 800be94:	2b37      	cmp	r3, #55	; 0x37
 800be96:	d9ef      	bls.n	800be78 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800be98:	480d      	ldr	r0, [pc, #52]	; (800bed0 <prvInitialiseTaskLists+0x64>)
 800be9a:	f7fe fa2f 	bl	800a2fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800be9e:	480d      	ldr	r0, [pc, #52]	; (800bed4 <prvInitialiseTaskLists+0x68>)
 800bea0:	f7fe fa2c 	bl	800a2fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800bea4:	480c      	ldr	r0, [pc, #48]	; (800bed8 <prvInitialiseTaskLists+0x6c>)
 800bea6:	f7fe fa29 	bl	800a2fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800beaa:	480c      	ldr	r0, [pc, #48]	; (800bedc <prvInitialiseTaskLists+0x70>)
 800beac:	f7fe fa26 	bl	800a2fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800beb0:	480b      	ldr	r0, [pc, #44]	; (800bee0 <prvInitialiseTaskLists+0x74>)
 800beb2:	f7fe fa23 	bl	800a2fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800beb6:	4b0b      	ldr	r3, [pc, #44]	; (800bee4 <prvInitialiseTaskLists+0x78>)
 800beb8:	4a05      	ldr	r2, [pc, #20]	; (800bed0 <prvInitialiseTaskLists+0x64>)
 800beba:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800bebc:	4b0a      	ldr	r3, [pc, #40]	; (800bee8 <prvInitialiseTaskLists+0x7c>)
 800bebe:	4a05      	ldr	r2, [pc, #20]	; (800bed4 <prvInitialiseTaskLists+0x68>)
 800bec0:	601a      	str	r2, [r3, #0]
}
 800bec2:	bf00      	nop
 800bec4:	3708      	adds	r7, #8
 800bec6:	46bd      	mov	sp, r7
 800bec8:	bd80      	pop	{r7, pc}
 800beca:	bf00      	nop
 800becc:	20001414 	.word	0x20001414
 800bed0:	20001874 	.word	0x20001874
 800bed4:	20001888 	.word	0x20001888
 800bed8:	200018a4 	.word	0x200018a4
 800bedc:	200018b8 	.word	0x200018b8
 800bee0:	200018d0 	.word	0x200018d0
 800bee4:	2000189c 	.word	0x2000189c
 800bee8:	200018a0 	.word	0x200018a0

0800beec <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bef2:	e019      	b.n	800bf28 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800bef4:	f000 fee6 	bl	800ccc4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bef8:	4b10      	ldr	r3, [pc, #64]	; (800bf3c <prvCheckTasksWaitingTermination+0x50>)
 800befa:	68db      	ldr	r3, [r3, #12]
 800befc:	68db      	ldr	r3, [r3, #12]
 800befe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	3304      	adds	r3, #4
 800bf04:	4618      	mov	r0, r3
 800bf06:	f7fe fa83 	bl	800a410 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800bf0a:	4b0d      	ldr	r3, [pc, #52]	; (800bf40 <prvCheckTasksWaitingTermination+0x54>)
 800bf0c:	681b      	ldr	r3, [r3, #0]
 800bf0e:	3b01      	subs	r3, #1
 800bf10:	4a0b      	ldr	r2, [pc, #44]	; (800bf40 <prvCheckTasksWaitingTermination+0x54>)
 800bf12:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800bf14:	4b0b      	ldr	r3, [pc, #44]	; (800bf44 <prvCheckTasksWaitingTermination+0x58>)
 800bf16:	681b      	ldr	r3, [r3, #0]
 800bf18:	3b01      	subs	r3, #1
 800bf1a:	4a0a      	ldr	r2, [pc, #40]	; (800bf44 <prvCheckTasksWaitingTermination+0x58>)
 800bf1c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800bf1e:	f000 ff01 	bl	800cd24 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800bf22:	6878      	ldr	r0, [r7, #4]
 800bf24:	f000 f810 	bl	800bf48 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800bf28:	4b06      	ldr	r3, [pc, #24]	; (800bf44 <prvCheckTasksWaitingTermination+0x58>)
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	2b00      	cmp	r3, #0
 800bf2e:	d1e1      	bne.n	800bef4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800bf30:	bf00      	nop
 800bf32:	bf00      	nop
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}
 800bf3a:	bf00      	nop
 800bf3c:	200018b8 	.word	0x200018b8
 800bf40:	200018e4 	.word	0x200018e4
 800bf44:	200018cc 	.word	0x200018cc

0800bf48 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800bf48:	b580      	push	{r7, lr}
 800bf4a:	b084      	sub	sp, #16
 800bf4c:	af00      	add	r7, sp, #0
 800bf4e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	3354      	adds	r3, #84	; 0x54
 800bf54:	4618      	mov	r0, r3
 800bf56:	f001 fa11 	bl	800d37c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf60:	2b00      	cmp	r3, #0
 800bf62:	d108      	bne.n	800bf76 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800bf68:	4618      	mov	r0, r3
 800bf6a:	f001 f899 	bl	800d0a0 <vPortFree>
				vPortFree( pxTCB );
 800bf6e:	6878      	ldr	r0, [r7, #4]
 800bf70:	f001 f896 	bl	800d0a0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800bf74:	e018      	b.n	800bfa8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf7c:	2b01      	cmp	r3, #1
 800bf7e:	d103      	bne.n	800bf88 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800bf80:	6878      	ldr	r0, [r7, #4]
 800bf82:	f001 f88d 	bl	800d0a0 <vPortFree>
	}
 800bf86:	e00f      	b.n	800bfa8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800bf8e:	2b02      	cmp	r3, #2
 800bf90:	d00a      	beq.n	800bfa8 <prvDeleteTCB+0x60>
	__asm volatile
 800bf92:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf96:	f383 8811 	msr	BASEPRI, r3
 800bf9a:	f3bf 8f6f 	isb	sy
 800bf9e:	f3bf 8f4f 	dsb	sy
 800bfa2:	60fb      	str	r3, [r7, #12]
}
 800bfa4:	bf00      	nop
 800bfa6:	e7fe      	b.n	800bfa6 <prvDeleteTCB+0x5e>
	}
 800bfa8:	bf00      	nop
 800bfaa:	3710      	adds	r7, #16
 800bfac:	46bd      	mov	sp, r7
 800bfae:	bd80      	pop	{r7, pc}

0800bfb0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800bfb0:	b480      	push	{r7}
 800bfb2:	b083      	sub	sp, #12
 800bfb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800bfb6:	4b0c      	ldr	r3, [pc, #48]	; (800bfe8 <prvResetNextTaskUnblockTime+0x38>)
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	681b      	ldr	r3, [r3, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d104      	bne.n	800bfca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800bfc0:	4b0a      	ldr	r3, [pc, #40]	; (800bfec <prvResetNextTaskUnblockTime+0x3c>)
 800bfc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bfc6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800bfc8:	e008      	b.n	800bfdc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bfca:	4b07      	ldr	r3, [pc, #28]	; (800bfe8 <prvResetNextTaskUnblockTime+0x38>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68db      	ldr	r3, [r3, #12]
 800bfd0:	68db      	ldr	r3, [r3, #12]
 800bfd2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	685b      	ldr	r3, [r3, #4]
 800bfd8:	4a04      	ldr	r2, [pc, #16]	; (800bfec <prvResetNextTaskUnblockTime+0x3c>)
 800bfda:	6013      	str	r3, [r2, #0]
}
 800bfdc:	bf00      	nop
 800bfde:	370c      	adds	r7, #12
 800bfe0:	46bd      	mov	sp, r7
 800bfe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfe6:	4770      	bx	lr
 800bfe8:	2000189c 	.word	0x2000189c
 800bfec:	20001904 	.word	0x20001904

0800bff0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800bff0:	b480      	push	{r7}
 800bff2:	b083      	sub	sp, #12
 800bff4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800bff6:	4b05      	ldr	r3, [pc, #20]	; (800c00c <xTaskGetCurrentTaskHandle+0x1c>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	607b      	str	r3, [r7, #4]

		return xReturn;
 800bffc:	687b      	ldr	r3, [r7, #4]
	}
 800bffe:	4618      	mov	r0, r3
 800c000:	370c      	adds	r7, #12
 800c002:	46bd      	mov	sp, r7
 800c004:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c008:	4770      	bx	lr
 800c00a:	bf00      	nop
 800c00c:	20001410 	.word	0x20001410

0800c010 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800c010:	b480      	push	{r7}
 800c012:	b083      	sub	sp, #12
 800c014:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800c016:	4b0b      	ldr	r3, [pc, #44]	; (800c044 <xTaskGetSchedulerState+0x34>)
 800c018:	681b      	ldr	r3, [r3, #0]
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	d102      	bne.n	800c024 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800c01e:	2301      	movs	r3, #1
 800c020:	607b      	str	r3, [r7, #4]
 800c022:	e008      	b.n	800c036 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800c024:	4b08      	ldr	r3, [pc, #32]	; (800c048 <xTaskGetSchedulerState+0x38>)
 800c026:	681b      	ldr	r3, [r3, #0]
 800c028:	2b00      	cmp	r3, #0
 800c02a:	d102      	bne.n	800c032 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800c02c:	2302      	movs	r3, #2
 800c02e:	607b      	str	r3, [r7, #4]
 800c030:	e001      	b.n	800c036 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800c032:	2300      	movs	r3, #0
 800c034:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800c036:	687b      	ldr	r3, [r7, #4]
	}
 800c038:	4618      	mov	r0, r3
 800c03a:	370c      	adds	r7, #12
 800c03c:	46bd      	mov	sp, r7
 800c03e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c042:	4770      	bx	lr
 800c044:	200018f0 	.word	0x200018f0
 800c048:	2000190c 	.word	0x2000190c

0800c04c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b084      	sub	sp, #16
 800c050:	af00      	add	r7, sp, #0
 800c052:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800c054:	687b      	ldr	r3, [r7, #4]
 800c056:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800c058:	2300      	movs	r3, #0
 800c05a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d051      	beq.n	800c106 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800c062:	68bb      	ldr	r3, [r7, #8]
 800c064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c066:	4b2a      	ldr	r3, [pc, #168]	; (800c110 <xTaskPriorityInherit+0xc4>)
 800c068:	681b      	ldr	r3, [r3, #0]
 800c06a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c06c:	429a      	cmp	r2, r3
 800c06e:	d241      	bcs.n	800c0f4 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c070:	68bb      	ldr	r3, [r7, #8]
 800c072:	699b      	ldr	r3, [r3, #24]
 800c074:	2b00      	cmp	r3, #0
 800c076:	db06      	blt.n	800c086 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c078:	4b25      	ldr	r3, [pc, #148]	; (800c110 <xTaskPriorityInherit+0xc4>)
 800c07a:	681b      	ldr	r3, [r3, #0]
 800c07c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c07e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c082:	68bb      	ldr	r3, [r7, #8]
 800c084:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800c086:	68bb      	ldr	r3, [r7, #8]
 800c088:	6959      	ldr	r1, [r3, #20]
 800c08a:	68bb      	ldr	r3, [r7, #8]
 800c08c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c08e:	4613      	mov	r3, r2
 800c090:	009b      	lsls	r3, r3, #2
 800c092:	4413      	add	r3, r2
 800c094:	009b      	lsls	r3, r3, #2
 800c096:	4a1f      	ldr	r2, [pc, #124]	; (800c114 <xTaskPriorityInherit+0xc8>)
 800c098:	4413      	add	r3, r2
 800c09a:	4299      	cmp	r1, r3
 800c09c:	d122      	bne.n	800c0e4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c09e:	68bb      	ldr	r3, [r7, #8]
 800c0a0:	3304      	adds	r3, #4
 800c0a2:	4618      	mov	r0, r3
 800c0a4:	f7fe f9b4 	bl	800a410 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c0a8:	4b19      	ldr	r3, [pc, #100]	; (800c110 <xTaskPriorityInherit+0xc4>)
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ae:	68bb      	ldr	r3, [r7, #8]
 800c0b0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800c0b2:	68bb      	ldr	r3, [r7, #8]
 800c0b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0b6:	4b18      	ldr	r3, [pc, #96]	; (800c118 <xTaskPriorityInherit+0xcc>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	429a      	cmp	r2, r3
 800c0bc:	d903      	bls.n	800c0c6 <xTaskPriorityInherit+0x7a>
 800c0be:	68bb      	ldr	r3, [r7, #8]
 800c0c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0c2:	4a15      	ldr	r2, [pc, #84]	; (800c118 <xTaskPriorityInherit+0xcc>)
 800c0c4:	6013      	str	r3, [r2, #0]
 800c0c6:	68bb      	ldr	r3, [r7, #8]
 800c0c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ca:	4613      	mov	r3, r2
 800c0cc:	009b      	lsls	r3, r3, #2
 800c0ce:	4413      	add	r3, r2
 800c0d0:	009b      	lsls	r3, r3, #2
 800c0d2:	4a10      	ldr	r2, [pc, #64]	; (800c114 <xTaskPriorityInherit+0xc8>)
 800c0d4:	441a      	add	r2, r3
 800c0d6:	68bb      	ldr	r3, [r7, #8]
 800c0d8:	3304      	adds	r3, #4
 800c0da:	4619      	mov	r1, r3
 800c0dc:	4610      	mov	r0, r2
 800c0de:	f7fe f93a 	bl	800a356 <vListInsertEnd>
 800c0e2:	e004      	b.n	800c0ee <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800c0e4:	4b0a      	ldr	r3, [pc, #40]	; (800c110 <xTaskPriorityInherit+0xc4>)
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c0ea:	68bb      	ldr	r3, [r7, #8]
 800c0ec:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	60fb      	str	r3, [r7, #12]
 800c0f2:	e008      	b.n	800c106 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c0f8:	4b05      	ldr	r3, [pc, #20]	; (800c110 <xTaskPriorityInherit+0xc4>)
 800c0fa:	681b      	ldr	r3, [r3, #0]
 800c0fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c0fe:	429a      	cmp	r2, r3
 800c100:	d201      	bcs.n	800c106 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800c102:	2301      	movs	r3, #1
 800c104:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c106:	68fb      	ldr	r3, [r7, #12]
	}
 800c108:	4618      	mov	r0, r3
 800c10a:	3710      	adds	r7, #16
 800c10c:	46bd      	mov	sp, r7
 800c10e:	bd80      	pop	{r7, pc}
 800c110:	20001410 	.word	0x20001410
 800c114:	20001414 	.word	0x20001414
 800c118:	200018ec 	.word	0x200018ec

0800c11c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800c11c:	b580      	push	{r7, lr}
 800c11e:	b086      	sub	sp, #24
 800c120:	af00      	add	r7, sp, #0
 800c122:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800c128:	2300      	movs	r3, #0
 800c12a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2b00      	cmp	r3, #0
 800c130:	d056      	beq.n	800c1e0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800c132:	4b2e      	ldr	r3, [pc, #184]	; (800c1ec <xTaskPriorityDisinherit+0xd0>)
 800c134:	681b      	ldr	r3, [r3, #0]
 800c136:	693a      	ldr	r2, [r7, #16]
 800c138:	429a      	cmp	r2, r3
 800c13a:	d00a      	beq.n	800c152 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800c13c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c140:	f383 8811 	msr	BASEPRI, r3
 800c144:	f3bf 8f6f 	isb	sy
 800c148:	f3bf 8f4f 	dsb	sy
 800c14c:	60fb      	str	r3, [r7, #12]
}
 800c14e:	bf00      	nop
 800c150:	e7fe      	b.n	800c150 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800c152:	693b      	ldr	r3, [r7, #16]
 800c154:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c156:	2b00      	cmp	r3, #0
 800c158:	d10a      	bne.n	800c170 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800c15a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c15e:	f383 8811 	msr	BASEPRI, r3
 800c162:	f3bf 8f6f 	isb	sy
 800c166:	f3bf 8f4f 	dsb	sy
 800c16a:	60bb      	str	r3, [r7, #8]
}
 800c16c:	bf00      	nop
 800c16e:	e7fe      	b.n	800c16e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800c170:	693b      	ldr	r3, [r7, #16]
 800c172:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c174:	1e5a      	subs	r2, r3, #1
 800c176:	693b      	ldr	r3, [r7, #16]
 800c178:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800c17a:	693b      	ldr	r3, [r7, #16]
 800c17c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c17e:	693b      	ldr	r3, [r7, #16]
 800c180:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c182:	429a      	cmp	r2, r3
 800c184:	d02c      	beq.n	800c1e0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800c186:	693b      	ldr	r3, [r7, #16]
 800c188:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	d128      	bne.n	800c1e0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c18e:	693b      	ldr	r3, [r7, #16]
 800c190:	3304      	adds	r3, #4
 800c192:	4618      	mov	r0, r3
 800c194:	f7fe f93c 	bl	800a410 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800c198:	693b      	ldr	r3, [r7, #16]
 800c19a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800c19c:	693b      	ldr	r3, [r7, #16]
 800c19e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c1a0:	693b      	ldr	r3, [r7, #16]
 800c1a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1a4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c1a8:	693b      	ldr	r3, [r7, #16]
 800c1aa:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800c1ac:	693b      	ldr	r3, [r7, #16]
 800c1ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1b0:	4b0f      	ldr	r3, [pc, #60]	; (800c1f0 <xTaskPriorityDisinherit+0xd4>)
 800c1b2:	681b      	ldr	r3, [r3, #0]
 800c1b4:	429a      	cmp	r2, r3
 800c1b6:	d903      	bls.n	800c1c0 <xTaskPriorityDisinherit+0xa4>
 800c1b8:	693b      	ldr	r3, [r7, #16]
 800c1ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c1bc:	4a0c      	ldr	r2, [pc, #48]	; (800c1f0 <xTaskPriorityDisinherit+0xd4>)
 800c1be:	6013      	str	r3, [r2, #0]
 800c1c0:	693b      	ldr	r3, [r7, #16]
 800c1c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c1c4:	4613      	mov	r3, r2
 800c1c6:	009b      	lsls	r3, r3, #2
 800c1c8:	4413      	add	r3, r2
 800c1ca:	009b      	lsls	r3, r3, #2
 800c1cc:	4a09      	ldr	r2, [pc, #36]	; (800c1f4 <xTaskPriorityDisinherit+0xd8>)
 800c1ce:	441a      	add	r2, r3
 800c1d0:	693b      	ldr	r3, [r7, #16]
 800c1d2:	3304      	adds	r3, #4
 800c1d4:	4619      	mov	r1, r3
 800c1d6:	4610      	mov	r0, r2
 800c1d8:	f7fe f8bd 	bl	800a356 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800c1dc:	2301      	movs	r3, #1
 800c1de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800c1e0:	697b      	ldr	r3, [r7, #20]
	}
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	3718      	adds	r7, #24
 800c1e6:	46bd      	mov	sp, r7
 800c1e8:	bd80      	pop	{r7, pc}
 800c1ea:	bf00      	nop
 800c1ec:	20001410 	.word	0x20001410
 800c1f0:	200018ec 	.word	0x200018ec
 800c1f4:	20001414 	.word	0x20001414

0800c1f8 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800c1f8:	b580      	push	{r7, lr}
 800c1fa:	b088      	sub	sp, #32
 800c1fc:	af00      	add	r7, sp, #0
 800c1fe:	6078      	str	r0, [r7, #4]
 800c200:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800c202:	687b      	ldr	r3, [r7, #4]
 800c204:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800c206:	2301      	movs	r3, #1
 800c208:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800c20a:	687b      	ldr	r3, [r7, #4]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d06a      	beq.n	800c2e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800c210:	69bb      	ldr	r3, [r7, #24]
 800c212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c214:	2b00      	cmp	r3, #0
 800c216:	d10a      	bne.n	800c22e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800c218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c21c:	f383 8811 	msr	BASEPRI, r3
 800c220:	f3bf 8f6f 	isb	sy
 800c224:	f3bf 8f4f 	dsb	sy
 800c228:	60fb      	str	r3, [r7, #12]
}
 800c22a:	bf00      	nop
 800c22c:	e7fe      	b.n	800c22c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800c22e:	69bb      	ldr	r3, [r7, #24]
 800c230:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c232:	683a      	ldr	r2, [r7, #0]
 800c234:	429a      	cmp	r2, r3
 800c236:	d902      	bls.n	800c23e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800c238:	683b      	ldr	r3, [r7, #0]
 800c23a:	61fb      	str	r3, [r7, #28]
 800c23c:	e002      	b.n	800c244 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800c23e:	69bb      	ldr	r3, [r7, #24]
 800c240:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c242:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800c244:	69bb      	ldr	r3, [r7, #24]
 800c246:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c248:	69fa      	ldr	r2, [r7, #28]
 800c24a:	429a      	cmp	r2, r3
 800c24c:	d04b      	beq.n	800c2e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800c24e:	69bb      	ldr	r3, [r7, #24]
 800c250:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c252:	697a      	ldr	r2, [r7, #20]
 800c254:	429a      	cmp	r2, r3
 800c256:	d146      	bne.n	800c2e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800c258:	4b25      	ldr	r3, [pc, #148]	; (800c2f0 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	69ba      	ldr	r2, [r7, #24]
 800c25e:	429a      	cmp	r2, r3
 800c260:	d10a      	bne.n	800c278 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800c262:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c266:	f383 8811 	msr	BASEPRI, r3
 800c26a:	f3bf 8f6f 	isb	sy
 800c26e:	f3bf 8f4f 	dsb	sy
 800c272:	60bb      	str	r3, [r7, #8]
}
 800c274:	bf00      	nop
 800c276:	e7fe      	b.n	800c276 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800c278:	69bb      	ldr	r3, [r7, #24]
 800c27a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c27c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800c27e:	69bb      	ldr	r3, [r7, #24]
 800c280:	69fa      	ldr	r2, [r7, #28]
 800c282:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800c284:	69bb      	ldr	r3, [r7, #24]
 800c286:	699b      	ldr	r3, [r3, #24]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	db04      	blt.n	800c296 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c28c:	69fb      	ldr	r3, [r7, #28]
 800c28e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c292:	69bb      	ldr	r3, [r7, #24]
 800c294:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800c296:	69bb      	ldr	r3, [r7, #24]
 800c298:	6959      	ldr	r1, [r3, #20]
 800c29a:	693a      	ldr	r2, [r7, #16]
 800c29c:	4613      	mov	r3, r2
 800c29e:	009b      	lsls	r3, r3, #2
 800c2a0:	4413      	add	r3, r2
 800c2a2:	009b      	lsls	r3, r3, #2
 800c2a4:	4a13      	ldr	r2, [pc, #76]	; (800c2f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c2a6:	4413      	add	r3, r2
 800c2a8:	4299      	cmp	r1, r3
 800c2aa:	d11c      	bne.n	800c2e6 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c2ac:	69bb      	ldr	r3, [r7, #24]
 800c2ae:	3304      	adds	r3, #4
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f7fe f8ad 	bl	800a410 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800c2b6:	69bb      	ldr	r3, [r7, #24]
 800c2b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ba:	4b0f      	ldr	r3, [pc, #60]	; (800c2f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	429a      	cmp	r2, r3
 800c2c0:	d903      	bls.n	800c2ca <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800c2c2:	69bb      	ldr	r3, [r7, #24]
 800c2c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c2c6:	4a0c      	ldr	r2, [pc, #48]	; (800c2f8 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800c2c8:	6013      	str	r3, [r2, #0]
 800c2ca:	69bb      	ldr	r3, [r7, #24]
 800c2cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c2ce:	4613      	mov	r3, r2
 800c2d0:	009b      	lsls	r3, r3, #2
 800c2d2:	4413      	add	r3, r2
 800c2d4:	009b      	lsls	r3, r3, #2
 800c2d6:	4a07      	ldr	r2, [pc, #28]	; (800c2f4 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800c2d8:	441a      	add	r2, r3
 800c2da:	69bb      	ldr	r3, [r7, #24]
 800c2dc:	3304      	adds	r3, #4
 800c2de:	4619      	mov	r1, r3
 800c2e0:	4610      	mov	r0, r2
 800c2e2:	f7fe f838 	bl	800a356 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c2e6:	bf00      	nop
 800c2e8:	3720      	adds	r7, #32
 800c2ea:	46bd      	mov	sp, r7
 800c2ec:	bd80      	pop	{r7, pc}
 800c2ee:	bf00      	nop
 800c2f0:	20001410 	.word	0x20001410
 800c2f4:	20001414 	.word	0x20001414
 800c2f8:	200018ec 	.word	0x200018ec

0800c2fc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800c2fc:	b480      	push	{r7}
 800c2fe:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800c300:	4b07      	ldr	r3, [pc, #28]	; (800c320 <pvTaskIncrementMutexHeldCount+0x24>)
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	2b00      	cmp	r3, #0
 800c306:	d004      	beq.n	800c312 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800c308:	4b05      	ldr	r3, [pc, #20]	; (800c320 <pvTaskIncrementMutexHeldCount+0x24>)
 800c30a:	681b      	ldr	r3, [r3, #0]
 800c30c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800c30e:	3201      	adds	r2, #1
 800c310:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800c312:	4b03      	ldr	r3, [pc, #12]	; (800c320 <pvTaskIncrementMutexHeldCount+0x24>)
 800c314:	681b      	ldr	r3, [r3, #0]
	}
 800c316:	4618      	mov	r0, r3
 800c318:	46bd      	mov	sp, r7
 800c31a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c31e:	4770      	bx	lr
 800c320:	20001410 	.word	0x20001410

0800c324 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800c324:	b580      	push	{r7, lr}
 800c326:	b084      	sub	sp, #16
 800c328:	af00      	add	r7, sp, #0
 800c32a:	6078      	str	r0, [r7, #4]
 800c32c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800c32e:	4b21      	ldr	r3, [pc, #132]	; (800c3b4 <prvAddCurrentTaskToDelayedList+0x90>)
 800c330:	681b      	ldr	r3, [r3, #0]
 800c332:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800c334:	4b20      	ldr	r3, [pc, #128]	; (800c3b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	3304      	adds	r3, #4
 800c33a:	4618      	mov	r0, r3
 800c33c:	f7fe f868 	bl	800a410 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c346:	d10a      	bne.n	800c35e <prvAddCurrentTaskToDelayedList+0x3a>
 800c348:	683b      	ldr	r3, [r7, #0]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d007      	beq.n	800c35e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c34e:	4b1a      	ldr	r3, [pc, #104]	; (800c3b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c350:	681b      	ldr	r3, [r3, #0]
 800c352:	3304      	adds	r3, #4
 800c354:	4619      	mov	r1, r3
 800c356:	4819      	ldr	r0, [pc, #100]	; (800c3bc <prvAddCurrentTaskToDelayedList+0x98>)
 800c358:	f7fd fffd 	bl	800a356 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800c35c:	e026      	b.n	800c3ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	687b      	ldr	r3, [r7, #4]
 800c362:	4413      	add	r3, r2
 800c364:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800c366:	4b14      	ldr	r3, [pc, #80]	; (800c3b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c368:	681b      	ldr	r3, [r3, #0]
 800c36a:	68ba      	ldr	r2, [r7, #8]
 800c36c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800c36e:	68ba      	ldr	r2, [r7, #8]
 800c370:	68fb      	ldr	r3, [r7, #12]
 800c372:	429a      	cmp	r2, r3
 800c374:	d209      	bcs.n	800c38a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c376:	4b12      	ldr	r3, [pc, #72]	; (800c3c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800c378:	681a      	ldr	r2, [r3, #0]
 800c37a:	4b0f      	ldr	r3, [pc, #60]	; (800c3b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c37c:	681b      	ldr	r3, [r3, #0]
 800c37e:	3304      	adds	r3, #4
 800c380:	4619      	mov	r1, r3
 800c382:	4610      	mov	r0, r2
 800c384:	f7fe f80b 	bl	800a39e <vListInsert>
}
 800c388:	e010      	b.n	800c3ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800c38a:	4b0e      	ldr	r3, [pc, #56]	; (800c3c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800c38c:	681a      	ldr	r2, [r3, #0]
 800c38e:	4b0a      	ldr	r3, [pc, #40]	; (800c3b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800c390:	681b      	ldr	r3, [r3, #0]
 800c392:	3304      	adds	r3, #4
 800c394:	4619      	mov	r1, r3
 800c396:	4610      	mov	r0, r2
 800c398:	f7fe f801 	bl	800a39e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800c39c:	4b0a      	ldr	r3, [pc, #40]	; (800c3c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	68ba      	ldr	r2, [r7, #8]
 800c3a2:	429a      	cmp	r2, r3
 800c3a4:	d202      	bcs.n	800c3ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800c3a6:	4a08      	ldr	r2, [pc, #32]	; (800c3c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800c3a8:	68bb      	ldr	r3, [r7, #8]
 800c3aa:	6013      	str	r3, [r2, #0]
}
 800c3ac:	bf00      	nop
 800c3ae:	3710      	adds	r7, #16
 800c3b0:	46bd      	mov	sp, r7
 800c3b2:	bd80      	pop	{r7, pc}
 800c3b4:	200018e8 	.word	0x200018e8
 800c3b8:	20001410 	.word	0x20001410
 800c3bc:	200018d0 	.word	0x200018d0
 800c3c0:	200018a0 	.word	0x200018a0
 800c3c4:	2000189c 	.word	0x2000189c
 800c3c8:	20001904 	.word	0x20001904

0800c3cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b08a      	sub	sp, #40	; 0x28
 800c3d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800c3d2:	2300      	movs	r3, #0
 800c3d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800c3d6:	f000 fb07 	bl	800c9e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800c3da:	4b1c      	ldr	r3, [pc, #112]	; (800c44c <xTimerCreateTimerTask+0x80>)
 800c3dc:	681b      	ldr	r3, [r3, #0]
 800c3de:	2b00      	cmp	r3, #0
 800c3e0:	d021      	beq.n	800c426 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800c3e2:	2300      	movs	r3, #0
 800c3e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800c3e6:	2300      	movs	r3, #0
 800c3e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800c3ea:	1d3a      	adds	r2, r7, #4
 800c3ec:	f107 0108 	add.w	r1, r7, #8
 800c3f0:	f107 030c 	add.w	r3, r7, #12
 800c3f4:	4618      	mov	r0, r3
 800c3f6:	f7fd ff67 	bl	800a2c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800c3fa:	6879      	ldr	r1, [r7, #4]
 800c3fc:	68bb      	ldr	r3, [r7, #8]
 800c3fe:	68fa      	ldr	r2, [r7, #12]
 800c400:	9202      	str	r2, [sp, #8]
 800c402:	9301      	str	r3, [sp, #4]
 800c404:	2302      	movs	r3, #2
 800c406:	9300      	str	r3, [sp, #0]
 800c408:	2300      	movs	r3, #0
 800c40a:	460a      	mov	r2, r1
 800c40c:	4910      	ldr	r1, [pc, #64]	; (800c450 <xTimerCreateTimerTask+0x84>)
 800c40e:	4811      	ldr	r0, [pc, #68]	; (800c454 <xTimerCreateTimerTask+0x88>)
 800c410:	f7fe ff28 	bl	800b264 <xTaskCreateStatic>
 800c414:	4603      	mov	r3, r0
 800c416:	4a10      	ldr	r2, [pc, #64]	; (800c458 <xTimerCreateTimerTask+0x8c>)
 800c418:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800c41a:	4b0f      	ldr	r3, [pc, #60]	; (800c458 <xTimerCreateTimerTask+0x8c>)
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d001      	beq.n	800c426 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800c422:	2301      	movs	r3, #1
 800c424:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800c426:	697b      	ldr	r3, [r7, #20]
 800c428:	2b00      	cmp	r3, #0
 800c42a:	d10a      	bne.n	800c442 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800c42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c430:	f383 8811 	msr	BASEPRI, r3
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	613b      	str	r3, [r7, #16]
}
 800c43e:	bf00      	nop
 800c440:	e7fe      	b.n	800c440 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800c442:	697b      	ldr	r3, [r7, #20]
}
 800c444:	4618      	mov	r0, r3
 800c446:	3718      	adds	r7, #24
 800c448:	46bd      	mov	sp, r7
 800c44a:	bd80      	pop	{r7, pc}
 800c44c:	20001940 	.word	0x20001940
 800c450:	0800f80c 	.word	0x0800f80c
 800c454:	0800c591 	.word	0x0800c591
 800c458:	20001944 	.word	0x20001944

0800c45c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b08a      	sub	sp, #40	; 0x28
 800c460:	af00      	add	r7, sp, #0
 800c462:	60f8      	str	r0, [r7, #12]
 800c464:	60b9      	str	r1, [r7, #8]
 800c466:	607a      	str	r2, [r7, #4]
 800c468:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800c46a:	2300      	movs	r3, #0
 800c46c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800c46e:	68fb      	ldr	r3, [r7, #12]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d10a      	bne.n	800c48a <xTimerGenericCommand+0x2e>
	__asm volatile
 800c474:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c478:	f383 8811 	msr	BASEPRI, r3
 800c47c:	f3bf 8f6f 	isb	sy
 800c480:	f3bf 8f4f 	dsb	sy
 800c484:	623b      	str	r3, [r7, #32]
}
 800c486:	bf00      	nop
 800c488:	e7fe      	b.n	800c488 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800c48a:	4b1a      	ldr	r3, [pc, #104]	; (800c4f4 <xTimerGenericCommand+0x98>)
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d02a      	beq.n	800c4e8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800c492:	68bb      	ldr	r3, [r7, #8]
 800c494:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800c49a:	68fb      	ldr	r3, [r7, #12]
 800c49c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800c49e:	68bb      	ldr	r3, [r7, #8]
 800c4a0:	2b05      	cmp	r3, #5
 800c4a2:	dc18      	bgt.n	800c4d6 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800c4a4:	f7ff fdb4 	bl	800c010 <xTaskGetSchedulerState>
 800c4a8:	4603      	mov	r3, r0
 800c4aa:	2b02      	cmp	r3, #2
 800c4ac:	d109      	bne.n	800c4c2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800c4ae:	4b11      	ldr	r3, [pc, #68]	; (800c4f4 <xTimerGenericCommand+0x98>)
 800c4b0:	6818      	ldr	r0, [r3, #0]
 800c4b2:	f107 0110 	add.w	r1, r7, #16
 800c4b6:	2300      	movs	r3, #0
 800c4b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c4ba:	f7fe f9c7 	bl	800a84c <xQueueGenericSend>
 800c4be:	6278      	str	r0, [r7, #36]	; 0x24
 800c4c0:	e012      	b.n	800c4e8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800c4c2:	4b0c      	ldr	r3, [pc, #48]	; (800c4f4 <xTimerGenericCommand+0x98>)
 800c4c4:	6818      	ldr	r0, [r3, #0]
 800c4c6:	f107 0110 	add.w	r1, r7, #16
 800c4ca:	2300      	movs	r3, #0
 800c4cc:	2200      	movs	r2, #0
 800c4ce:	f7fe f9bd 	bl	800a84c <xQueueGenericSend>
 800c4d2:	6278      	str	r0, [r7, #36]	; 0x24
 800c4d4:	e008      	b.n	800c4e8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800c4d6:	4b07      	ldr	r3, [pc, #28]	; (800c4f4 <xTimerGenericCommand+0x98>)
 800c4d8:	6818      	ldr	r0, [r3, #0]
 800c4da:	f107 0110 	add.w	r1, r7, #16
 800c4de:	2300      	movs	r3, #0
 800c4e0:	683a      	ldr	r2, [r7, #0]
 800c4e2:	f7fe fab1 	bl	800aa48 <xQueueGenericSendFromISR>
 800c4e6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800c4e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800c4ea:	4618      	mov	r0, r3
 800c4ec:	3728      	adds	r7, #40	; 0x28
 800c4ee:	46bd      	mov	sp, r7
 800c4f0:	bd80      	pop	{r7, pc}
 800c4f2:	bf00      	nop
 800c4f4:	20001940 	.word	0x20001940

0800c4f8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800c4f8:	b580      	push	{r7, lr}
 800c4fa:	b088      	sub	sp, #32
 800c4fc:	af02      	add	r7, sp, #8
 800c4fe:	6078      	str	r0, [r7, #4]
 800c500:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c502:	4b22      	ldr	r3, [pc, #136]	; (800c58c <prvProcessExpiredTimer+0x94>)
 800c504:	681b      	ldr	r3, [r3, #0]
 800c506:	68db      	ldr	r3, [r3, #12]
 800c508:	68db      	ldr	r3, [r3, #12]
 800c50a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	3304      	adds	r3, #4
 800c510:	4618      	mov	r0, r3
 800c512:	f7fd ff7d 	bl	800a410 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c516:	697b      	ldr	r3, [r7, #20]
 800c518:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c51c:	f003 0304 	and.w	r3, r3, #4
 800c520:	2b00      	cmp	r3, #0
 800c522:	d022      	beq.n	800c56a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800c524:	697b      	ldr	r3, [r7, #20]
 800c526:	699a      	ldr	r2, [r3, #24]
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	18d1      	adds	r1, r2, r3
 800c52c:	687b      	ldr	r3, [r7, #4]
 800c52e:	683a      	ldr	r2, [r7, #0]
 800c530:	6978      	ldr	r0, [r7, #20]
 800c532:	f000 f8d1 	bl	800c6d8 <prvInsertTimerInActiveList>
 800c536:	4603      	mov	r3, r0
 800c538:	2b00      	cmp	r3, #0
 800c53a:	d01f      	beq.n	800c57c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c53c:	2300      	movs	r3, #0
 800c53e:	9300      	str	r3, [sp, #0]
 800c540:	2300      	movs	r3, #0
 800c542:	687a      	ldr	r2, [r7, #4]
 800c544:	2100      	movs	r1, #0
 800c546:	6978      	ldr	r0, [r7, #20]
 800c548:	f7ff ff88 	bl	800c45c <xTimerGenericCommand>
 800c54c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	2b00      	cmp	r3, #0
 800c552:	d113      	bne.n	800c57c <prvProcessExpiredTimer+0x84>
	__asm volatile
 800c554:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c558:	f383 8811 	msr	BASEPRI, r3
 800c55c:	f3bf 8f6f 	isb	sy
 800c560:	f3bf 8f4f 	dsb	sy
 800c564:	60fb      	str	r3, [r7, #12]
}
 800c566:	bf00      	nop
 800c568:	e7fe      	b.n	800c568 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c56a:	697b      	ldr	r3, [r7, #20]
 800c56c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c570:	f023 0301 	bic.w	r3, r3, #1
 800c574:	b2da      	uxtb	r2, r3
 800c576:	697b      	ldr	r3, [r7, #20]
 800c578:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c57c:	697b      	ldr	r3, [r7, #20]
 800c57e:	6a1b      	ldr	r3, [r3, #32]
 800c580:	6978      	ldr	r0, [r7, #20]
 800c582:	4798      	blx	r3
}
 800c584:	bf00      	nop
 800c586:	3718      	adds	r7, #24
 800c588:	46bd      	mov	sp, r7
 800c58a:	bd80      	pop	{r7, pc}
 800c58c:	20001938 	.word	0x20001938

0800c590 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c598:	f107 0308 	add.w	r3, r7, #8
 800c59c:	4618      	mov	r0, r3
 800c59e:	f000 f857 	bl	800c650 <prvGetNextExpireTime>
 800c5a2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	4619      	mov	r1, r3
 800c5a8:	68f8      	ldr	r0, [r7, #12]
 800c5aa:	f000 f803 	bl	800c5b4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c5ae:	f000 f8d5 	bl	800c75c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c5b2:	e7f1      	b.n	800c598 <prvTimerTask+0x8>

0800c5b4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c5b4:	b580      	push	{r7, lr}
 800c5b6:	b084      	sub	sp, #16
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c5be:	f7ff f92b 	bl	800b818 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c5c2:	f107 0308 	add.w	r3, r7, #8
 800c5c6:	4618      	mov	r0, r3
 800c5c8:	f000 f866 	bl	800c698 <prvSampleTimeNow>
 800c5cc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c5ce:	68bb      	ldr	r3, [r7, #8]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d130      	bne.n	800c636 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c5d4:	683b      	ldr	r3, [r7, #0]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d10a      	bne.n	800c5f0 <prvProcessTimerOrBlockTask+0x3c>
 800c5da:	687a      	ldr	r2, [r7, #4]
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	429a      	cmp	r2, r3
 800c5e0:	d806      	bhi.n	800c5f0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c5e2:	f7ff f927 	bl	800b834 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c5e6:	68f9      	ldr	r1, [r7, #12]
 800c5e8:	6878      	ldr	r0, [r7, #4]
 800c5ea:	f7ff ff85 	bl	800c4f8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c5ee:	e024      	b.n	800c63a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c5f0:	683b      	ldr	r3, [r7, #0]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d008      	beq.n	800c608 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c5f6:	4b13      	ldr	r3, [pc, #76]	; (800c644 <prvProcessTimerOrBlockTask+0x90>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	681b      	ldr	r3, [r3, #0]
 800c5fc:	2b00      	cmp	r3, #0
 800c5fe:	d101      	bne.n	800c604 <prvProcessTimerOrBlockTask+0x50>
 800c600:	2301      	movs	r3, #1
 800c602:	e000      	b.n	800c606 <prvProcessTimerOrBlockTask+0x52>
 800c604:	2300      	movs	r3, #0
 800c606:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c608:	4b0f      	ldr	r3, [pc, #60]	; (800c648 <prvProcessTimerOrBlockTask+0x94>)
 800c60a:	6818      	ldr	r0, [r3, #0]
 800c60c:	687a      	ldr	r2, [r7, #4]
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	1ad3      	subs	r3, r2, r3
 800c612:	683a      	ldr	r2, [r7, #0]
 800c614:	4619      	mov	r1, r3
 800c616:	f7fe fdf1 	bl	800b1fc <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c61a:	f7ff f90b 	bl	800b834 <xTaskResumeAll>
 800c61e:	4603      	mov	r3, r0
 800c620:	2b00      	cmp	r3, #0
 800c622:	d10a      	bne.n	800c63a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c624:	4b09      	ldr	r3, [pc, #36]	; (800c64c <prvProcessTimerOrBlockTask+0x98>)
 800c626:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c62a:	601a      	str	r2, [r3, #0]
 800c62c:	f3bf 8f4f 	dsb	sy
 800c630:	f3bf 8f6f 	isb	sy
}
 800c634:	e001      	b.n	800c63a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c636:	f7ff f8fd 	bl	800b834 <xTaskResumeAll>
}
 800c63a:	bf00      	nop
 800c63c:	3710      	adds	r7, #16
 800c63e:	46bd      	mov	sp, r7
 800c640:	bd80      	pop	{r7, pc}
 800c642:	bf00      	nop
 800c644:	2000193c 	.word	0x2000193c
 800c648:	20001940 	.word	0x20001940
 800c64c:	e000ed04 	.word	0xe000ed04

0800c650 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c650:	b480      	push	{r7}
 800c652:	b085      	sub	sp, #20
 800c654:	af00      	add	r7, sp, #0
 800c656:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c658:	4b0e      	ldr	r3, [pc, #56]	; (800c694 <prvGetNextExpireTime+0x44>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	2b00      	cmp	r3, #0
 800c660:	d101      	bne.n	800c666 <prvGetNextExpireTime+0x16>
 800c662:	2201      	movs	r2, #1
 800c664:	e000      	b.n	800c668 <prvGetNextExpireTime+0x18>
 800c666:	2200      	movs	r2, #0
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c66c:	687b      	ldr	r3, [r7, #4]
 800c66e:	681b      	ldr	r3, [r3, #0]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d105      	bne.n	800c680 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c674:	4b07      	ldr	r3, [pc, #28]	; (800c694 <prvGetNextExpireTime+0x44>)
 800c676:	681b      	ldr	r3, [r3, #0]
 800c678:	68db      	ldr	r3, [r3, #12]
 800c67a:	681b      	ldr	r3, [r3, #0]
 800c67c:	60fb      	str	r3, [r7, #12]
 800c67e:	e001      	b.n	800c684 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c680:	2300      	movs	r3, #0
 800c682:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c684:	68fb      	ldr	r3, [r7, #12]
}
 800c686:	4618      	mov	r0, r3
 800c688:	3714      	adds	r7, #20
 800c68a:	46bd      	mov	sp, r7
 800c68c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c690:	4770      	bx	lr
 800c692:	bf00      	nop
 800c694:	20001938 	.word	0x20001938

0800c698 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c698:	b580      	push	{r7, lr}
 800c69a:	b084      	sub	sp, #16
 800c69c:	af00      	add	r7, sp, #0
 800c69e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c6a0:	f7ff f966 	bl	800b970 <xTaskGetTickCount>
 800c6a4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c6a6:	4b0b      	ldr	r3, [pc, #44]	; (800c6d4 <prvSampleTimeNow+0x3c>)
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	68fa      	ldr	r2, [r7, #12]
 800c6ac:	429a      	cmp	r2, r3
 800c6ae:	d205      	bcs.n	800c6bc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c6b0:	f000 f936 	bl	800c920 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c6b4:	687b      	ldr	r3, [r7, #4]
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	601a      	str	r2, [r3, #0]
 800c6ba:	e002      	b.n	800c6c2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	2200      	movs	r2, #0
 800c6c0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c6c2:	4a04      	ldr	r2, [pc, #16]	; (800c6d4 <prvSampleTimeNow+0x3c>)
 800c6c4:	68fb      	ldr	r3, [r7, #12]
 800c6c6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c6c8:	68fb      	ldr	r3, [r7, #12]
}
 800c6ca:	4618      	mov	r0, r3
 800c6cc:	3710      	adds	r7, #16
 800c6ce:	46bd      	mov	sp, r7
 800c6d0:	bd80      	pop	{r7, pc}
 800c6d2:	bf00      	nop
 800c6d4:	20001948 	.word	0x20001948

0800c6d8 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c6d8:	b580      	push	{r7, lr}
 800c6da:	b086      	sub	sp, #24
 800c6dc:	af00      	add	r7, sp, #0
 800c6de:	60f8      	str	r0, [r7, #12]
 800c6e0:	60b9      	str	r1, [r7, #8]
 800c6e2:	607a      	str	r2, [r7, #4]
 800c6e4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c6e6:	2300      	movs	r3, #0
 800c6e8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c6ea:	68fb      	ldr	r3, [r7, #12]
 800c6ec:	68ba      	ldr	r2, [r7, #8]
 800c6ee:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	68fa      	ldr	r2, [r7, #12]
 800c6f4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c6f6:	68ba      	ldr	r2, [r7, #8]
 800c6f8:	687b      	ldr	r3, [r7, #4]
 800c6fa:	429a      	cmp	r2, r3
 800c6fc:	d812      	bhi.n	800c724 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	683b      	ldr	r3, [r7, #0]
 800c702:	1ad2      	subs	r2, r2, r3
 800c704:	68fb      	ldr	r3, [r7, #12]
 800c706:	699b      	ldr	r3, [r3, #24]
 800c708:	429a      	cmp	r2, r3
 800c70a:	d302      	bcc.n	800c712 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c70c:	2301      	movs	r3, #1
 800c70e:	617b      	str	r3, [r7, #20]
 800c710:	e01b      	b.n	800c74a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c712:	4b10      	ldr	r3, [pc, #64]	; (800c754 <prvInsertTimerInActiveList+0x7c>)
 800c714:	681a      	ldr	r2, [r3, #0]
 800c716:	68fb      	ldr	r3, [r7, #12]
 800c718:	3304      	adds	r3, #4
 800c71a:	4619      	mov	r1, r3
 800c71c:	4610      	mov	r0, r2
 800c71e:	f7fd fe3e 	bl	800a39e <vListInsert>
 800c722:	e012      	b.n	800c74a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c724:	687a      	ldr	r2, [r7, #4]
 800c726:	683b      	ldr	r3, [r7, #0]
 800c728:	429a      	cmp	r2, r3
 800c72a:	d206      	bcs.n	800c73a <prvInsertTimerInActiveList+0x62>
 800c72c:	68ba      	ldr	r2, [r7, #8]
 800c72e:	683b      	ldr	r3, [r7, #0]
 800c730:	429a      	cmp	r2, r3
 800c732:	d302      	bcc.n	800c73a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c734:	2301      	movs	r3, #1
 800c736:	617b      	str	r3, [r7, #20]
 800c738:	e007      	b.n	800c74a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c73a:	4b07      	ldr	r3, [pc, #28]	; (800c758 <prvInsertTimerInActiveList+0x80>)
 800c73c:	681a      	ldr	r2, [r3, #0]
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	3304      	adds	r3, #4
 800c742:	4619      	mov	r1, r3
 800c744:	4610      	mov	r0, r2
 800c746:	f7fd fe2a 	bl	800a39e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c74a:	697b      	ldr	r3, [r7, #20]
}
 800c74c:	4618      	mov	r0, r3
 800c74e:	3718      	adds	r7, #24
 800c750:	46bd      	mov	sp, r7
 800c752:	bd80      	pop	{r7, pc}
 800c754:	2000193c 	.word	0x2000193c
 800c758:	20001938 	.word	0x20001938

0800c75c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c75c:	b580      	push	{r7, lr}
 800c75e:	b08e      	sub	sp, #56	; 0x38
 800c760:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c762:	e0ca      	b.n	800c8fa <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2b00      	cmp	r3, #0
 800c768:	da18      	bge.n	800c79c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c76a:	1d3b      	adds	r3, r7, #4
 800c76c:	3304      	adds	r3, #4
 800c76e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c770:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c772:	2b00      	cmp	r3, #0
 800c774:	d10a      	bne.n	800c78c <prvProcessReceivedCommands+0x30>
	__asm volatile
 800c776:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c77a:	f383 8811 	msr	BASEPRI, r3
 800c77e:	f3bf 8f6f 	isb	sy
 800c782:	f3bf 8f4f 	dsb	sy
 800c786:	61fb      	str	r3, [r7, #28]
}
 800c788:	bf00      	nop
 800c78a:	e7fe      	b.n	800c78a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c78c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c78e:	681b      	ldr	r3, [r3, #0]
 800c790:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c792:	6850      	ldr	r0, [r2, #4]
 800c794:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800c796:	6892      	ldr	r2, [r2, #8]
 800c798:	4611      	mov	r1, r2
 800c79a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	2b00      	cmp	r3, #0
 800c7a0:	f2c0 80aa 	blt.w	800c8f8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c7a4:	68fb      	ldr	r3, [r7, #12]
 800c7a6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c7a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7aa:	695b      	ldr	r3, [r3, #20]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d004      	beq.n	800c7ba <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c7b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7b2:	3304      	adds	r3, #4
 800c7b4:	4618      	mov	r0, r3
 800c7b6:	f7fd fe2b 	bl	800a410 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c7ba:	463b      	mov	r3, r7
 800c7bc:	4618      	mov	r0, r3
 800c7be:	f7ff ff6b 	bl	800c698 <prvSampleTimeNow>
 800c7c2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800c7c4:	687b      	ldr	r3, [r7, #4]
 800c7c6:	2b09      	cmp	r3, #9
 800c7c8:	f200 8097 	bhi.w	800c8fa <prvProcessReceivedCommands+0x19e>
 800c7cc:	a201      	add	r2, pc, #4	; (adr r2, 800c7d4 <prvProcessReceivedCommands+0x78>)
 800c7ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c7d2:	bf00      	nop
 800c7d4:	0800c7fd 	.word	0x0800c7fd
 800c7d8:	0800c7fd 	.word	0x0800c7fd
 800c7dc:	0800c7fd 	.word	0x0800c7fd
 800c7e0:	0800c871 	.word	0x0800c871
 800c7e4:	0800c885 	.word	0x0800c885
 800c7e8:	0800c8cf 	.word	0x0800c8cf
 800c7ec:	0800c7fd 	.word	0x0800c7fd
 800c7f0:	0800c7fd 	.word	0x0800c7fd
 800c7f4:	0800c871 	.word	0x0800c871
 800c7f8:	0800c885 	.word	0x0800c885
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c7fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c802:	f043 0301 	orr.w	r3, r3, #1
 800c806:	b2da      	uxtb	r2, r3
 800c808:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c80a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c80e:	68ba      	ldr	r2, [r7, #8]
 800c810:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c812:	699b      	ldr	r3, [r3, #24]
 800c814:	18d1      	adds	r1, r2, r3
 800c816:	68bb      	ldr	r3, [r7, #8]
 800c818:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c81a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c81c:	f7ff ff5c 	bl	800c6d8 <prvInsertTimerInActiveList>
 800c820:	4603      	mov	r3, r0
 800c822:	2b00      	cmp	r3, #0
 800c824:	d069      	beq.n	800c8fa <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c826:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c828:	6a1b      	ldr	r3, [r3, #32]
 800c82a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c82c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c82e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c830:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c834:	f003 0304 	and.w	r3, r3, #4
 800c838:	2b00      	cmp	r3, #0
 800c83a:	d05e      	beq.n	800c8fa <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c83c:	68ba      	ldr	r2, [r7, #8]
 800c83e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c840:	699b      	ldr	r3, [r3, #24]
 800c842:	441a      	add	r2, r3
 800c844:	2300      	movs	r3, #0
 800c846:	9300      	str	r3, [sp, #0]
 800c848:	2300      	movs	r3, #0
 800c84a:	2100      	movs	r1, #0
 800c84c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c84e:	f7ff fe05 	bl	800c45c <xTimerGenericCommand>
 800c852:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c854:	6a3b      	ldr	r3, [r7, #32]
 800c856:	2b00      	cmp	r3, #0
 800c858:	d14f      	bne.n	800c8fa <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800c85a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c85e:	f383 8811 	msr	BASEPRI, r3
 800c862:	f3bf 8f6f 	isb	sy
 800c866:	f3bf 8f4f 	dsb	sy
 800c86a:	61bb      	str	r3, [r7, #24]
}
 800c86c:	bf00      	nop
 800c86e:	e7fe      	b.n	800c86e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c870:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c872:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c876:	f023 0301 	bic.w	r3, r3, #1
 800c87a:	b2da      	uxtb	r2, r3
 800c87c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c87e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800c882:	e03a      	b.n	800c8fa <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c886:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c88a:	f043 0301 	orr.w	r3, r3, #1
 800c88e:	b2da      	uxtb	r2, r3
 800c890:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c892:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c896:	68ba      	ldr	r2, [r7, #8]
 800c898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c89e:	699b      	ldr	r3, [r3, #24]
 800c8a0:	2b00      	cmp	r3, #0
 800c8a2:	d10a      	bne.n	800c8ba <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800c8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c8a8:	f383 8811 	msr	BASEPRI, r3
 800c8ac:	f3bf 8f6f 	isb	sy
 800c8b0:	f3bf 8f4f 	dsb	sy
 800c8b4:	617b      	str	r3, [r7, #20]
}
 800c8b6:	bf00      	nop
 800c8b8:	e7fe      	b.n	800c8b8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8bc:	699a      	ldr	r2, [r3, #24]
 800c8be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c0:	18d1      	adds	r1, r2, r3
 800c8c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c8c6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8c8:	f7ff ff06 	bl	800c6d8 <prvInsertTimerInActiveList>
					break;
 800c8cc:	e015      	b.n	800c8fa <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c8ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8d4:	f003 0302 	and.w	r3, r3, #2
 800c8d8:	2b00      	cmp	r3, #0
 800c8da:	d103      	bne.n	800c8e4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800c8dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c8de:	f000 fbdf 	bl	800d0a0 <vPortFree>
 800c8e2:	e00a      	b.n	800c8fa <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c8e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c8ea:	f023 0301 	bic.w	r3, r3, #1
 800c8ee:	b2da      	uxtb	r2, r3
 800c8f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c8f6:	e000      	b.n	800c8fa <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800c8f8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c8fa:	4b08      	ldr	r3, [pc, #32]	; (800c91c <prvProcessReceivedCommands+0x1c0>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	1d39      	adds	r1, r7, #4
 800c900:	2200      	movs	r2, #0
 800c902:	4618      	mov	r0, r3
 800c904:	f7fe f93c 	bl	800ab80 <xQueueReceive>
 800c908:	4603      	mov	r3, r0
 800c90a:	2b00      	cmp	r3, #0
 800c90c:	f47f af2a 	bne.w	800c764 <prvProcessReceivedCommands+0x8>
	}
}
 800c910:	bf00      	nop
 800c912:	bf00      	nop
 800c914:	3730      	adds	r7, #48	; 0x30
 800c916:	46bd      	mov	sp, r7
 800c918:	bd80      	pop	{r7, pc}
 800c91a:	bf00      	nop
 800c91c:	20001940 	.word	0x20001940

0800c920 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c920:	b580      	push	{r7, lr}
 800c922:	b088      	sub	sp, #32
 800c924:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c926:	e048      	b.n	800c9ba <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c928:	4b2d      	ldr	r3, [pc, #180]	; (800c9e0 <prvSwitchTimerLists+0xc0>)
 800c92a:	681b      	ldr	r3, [r3, #0]
 800c92c:	68db      	ldr	r3, [r3, #12]
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c932:	4b2b      	ldr	r3, [pc, #172]	; (800c9e0 <prvSwitchTimerLists+0xc0>)
 800c934:	681b      	ldr	r3, [r3, #0]
 800c936:	68db      	ldr	r3, [r3, #12]
 800c938:	68db      	ldr	r3, [r3, #12]
 800c93a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c93c:	68fb      	ldr	r3, [r7, #12]
 800c93e:	3304      	adds	r3, #4
 800c940:	4618      	mov	r0, r3
 800c942:	f7fd fd65 	bl	800a410 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c946:	68fb      	ldr	r3, [r7, #12]
 800c948:	6a1b      	ldr	r3, [r3, #32]
 800c94a:	68f8      	ldr	r0, [r7, #12]
 800c94c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c94e:	68fb      	ldr	r3, [r7, #12]
 800c950:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800c954:	f003 0304 	and.w	r3, r3, #4
 800c958:	2b00      	cmp	r3, #0
 800c95a:	d02e      	beq.n	800c9ba <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c95c:	68fb      	ldr	r3, [r7, #12]
 800c95e:	699b      	ldr	r3, [r3, #24]
 800c960:	693a      	ldr	r2, [r7, #16]
 800c962:	4413      	add	r3, r2
 800c964:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c966:	68ba      	ldr	r2, [r7, #8]
 800c968:	693b      	ldr	r3, [r7, #16]
 800c96a:	429a      	cmp	r2, r3
 800c96c:	d90e      	bls.n	800c98c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c96e:	68fb      	ldr	r3, [r7, #12]
 800c970:	68ba      	ldr	r2, [r7, #8]
 800c972:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c974:	68fb      	ldr	r3, [r7, #12]
 800c976:	68fa      	ldr	r2, [r7, #12]
 800c978:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c97a:	4b19      	ldr	r3, [pc, #100]	; (800c9e0 <prvSwitchTimerLists+0xc0>)
 800c97c:	681a      	ldr	r2, [r3, #0]
 800c97e:	68fb      	ldr	r3, [r7, #12]
 800c980:	3304      	adds	r3, #4
 800c982:	4619      	mov	r1, r3
 800c984:	4610      	mov	r0, r2
 800c986:	f7fd fd0a 	bl	800a39e <vListInsert>
 800c98a:	e016      	b.n	800c9ba <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c98c:	2300      	movs	r3, #0
 800c98e:	9300      	str	r3, [sp, #0]
 800c990:	2300      	movs	r3, #0
 800c992:	693a      	ldr	r2, [r7, #16]
 800c994:	2100      	movs	r1, #0
 800c996:	68f8      	ldr	r0, [r7, #12]
 800c998:	f7ff fd60 	bl	800c45c <xTimerGenericCommand>
 800c99c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d10a      	bne.n	800c9ba <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c9a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9a8:	f383 8811 	msr	BASEPRI, r3
 800c9ac:	f3bf 8f6f 	isb	sy
 800c9b0:	f3bf 8f4f 	dsb	sy
 800c9b4:	603b      	str	r3, [r7, #0]
}
 800c9b6:	bf00      	nop
 800c9b8:	e7fe      	b.n	800c9b8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c9ba:	4b09      	ldr	r3, [pc, #36]	; (800c9e0 <prvSwitchTimerLists+0xc0>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	681b      	ldr	r3, [r3, #0]
 800c9c0:	2b00      	cmp	r3, #0
 800c9c2:	d1b1      	bne.n	800c928 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c9c4:	4b06      	ldr	r3, [pc, #24]	; (800c9e0 <prvSwitchTimerLists+0xc0>)
 800c9c6:	681b      	ldr	r3, [r3, #0]
 800c9c8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c9ca:	4b06      	ldr	r3, [pc, #24]	; (800c9e4 <prvSwitchTimerLists+0xc4>)
 800c9cc:	681b      	ldr	r3, [r3, #0]
 800c9ce:	4a04      	ldr	r2, [pc, #16]	; (800c9e0 <prvSwitchTimerLists+0xc0>)
 800c9d0:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c9d2:	4a04      	ldr	r2, [pc, #16]	; (800c9e4 <prvSwitchTimerLists+0xc4>)
 800c9d4:	697b      	ldr	r3, [r7, #20]
 800c9d6:	6013      	str	r3, [r2, #0]
}
 800c9d8:	bf00      	nop
 800c9da:	3718      	adds	r7, #24
 800c9dc:	46bd      	mov	sp, r7
 800c9de:	bd80      	pop	{r7, pc}
 800c9e0:	20001938 	.word	0x20001938
 800c9e4:	2000193c 	.word	0x2000193c

0800c9e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c9ee:	f000 f969 	bl	800ccc4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c9f2:	4b15      	ldr	r3, [pc, #84]	; (800ca48 <prvCheckForValidListAndQueue+0x60>)
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	2b00      	cmp	r3, #0
 800c9f8:	d120      	bne.n	800ca3c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c9fa:	4814      	ldr	r0, [pc, #80]	; (800ca4c <prvCheckForValidListAndQueue+0x64>)
 800c9fc:	f7fd fc7e 	bl	800a2fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ca00:	4813      	ldr	r0, [pc, #76]	; (800ca50 <prvCheckForValidListAndQueue+0x68>)
 800ca02:	f7fd fc7b 	bl	800a2fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ca06:	4b13      	ldr	r3, [pc, #76]	; (800ca54 <prvCheckForValidListAndQueue+0x6c>)
 800ca08:	4a10      	ldr	r2, [pc, #64]	; (800ca4c <prvCheckForValidListAndQueue+0x64>)
 800ca0a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ca0c:	4b12      	ldr	r3, [pc, #72]	; (800ca58 <prvCheckForValidListAndQueue+0x70>)
 800ca0e:	4a10      	ldr	r2, [pc, #64]	; (800ca50 <prvCheckForValidListAndQueue+0x68>)
 800ca10:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ca12:	2300      	movs	r3, #0
 800ca14:	9300      	str	r3, [sp, #0]
 800ca16:	4b11      	ldr	r3, [pc, #68]	; (800ca5c <prvCheckForValidListAndQueue+0x74>)
 800ca18:	4a11      	ldr	r2, [pc, #68]	; (800ca60 <prvCheckForValidListAndQueue+0x78>)
 800ca1a:	2110      	movs	r1, #16
 800ca1c:	200a      	movs	r0, #10
 800ca1e:	f7fd fd89 	bl	800a534 <xQueueGenericCreateStatic>
 800ca22:	4603      	mov	r3, r0
 800ca24:	4a08      	ldr	r2, [pc, #32]	; (800ca48 <prvCheckForValidListAndQueue+0x60>)
 800ca26:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ca28:	4b07      	ldr	r3, [pc, #28]	; (800ca48 <prvCheckForValidListAndQueue+0x60>)
 800ca2a:	681b      	ldr	r3, [r3, #0]
 800ca2c:	2b00      	cmp	r3, #0
 800ca2e:	d005      	beq.n	800ca3c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ca30:	4b05      	ldr	r3, [pc, #20]	; (800ca48 <prvCheckForValidListAndQueue+0x60>)
 800ca32:	681b      	ldr	r3, [r3, #0]
 800ca34:	490b      	ldr	r1, [pc, #44]	; (800ca64 <prvCheckForValidListAndQueue+0x7c>)
 800ca36:	4618      	mov	r0, r3
 800ca38:	f7fe fbb6 	bl	800b1a8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ca3c:	f000 f972 	bl	800cd24 <vPortExitCritical>
}
 800ca40:	bf00      	nop
 800ca42:	46bd      	mov	sp, r7
 800ca44:	bd80      	pop	{r7, pc}
 800ca46:	bf00      	nop
 800ca48:	20001940 	.word	0x20001940
 800ca4c:	20001910 	.word	0x20001910
 800ca50:	20001924 	.word	0x20001924
 800ca54:	20001938 	.word	0x20001938
 800ca58:	2000193c 	.word	0x2000193c
 800ca5c:	200019ec 	.word	0x200019ec
 800ca60:	2000194c 	.word	0x2000194c
 800ca64:	0800f814 	.word	0x0800f814

0800ca68 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ca68:	b480      	push	{r7}
 800ca6a:	b085      	sub	sp, #20
 800ca6c:	af00      	add	r7, sp, #0
 800ca6e:	60f8      	str	r0, [r7, #12]
 800ca70:	60b9      	str	r1, [r7, #8]
 800ca72:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ca74:	68fb      	ldr	r3, [r7, #12]
 800ca76:	3b04      	subs	r3, #4
 800ca78:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ca7a:	68fb      	ldr	r3, [r7, #12]
 800ca7c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ca80:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca82:	68fb      	ldr	r3, [r7, #12]
 800ca84:	3b04      	subs	r3, #4
 800ca86:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ca88:	68bb      	ldr	r3, [r7, #8]
 800ca8a:	f023 0201 	bic.w	r2, r3, #1
 800ca8e:	68fb      	ldr	r3, [r7, #12]
 800ca90:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ca92:	68fb      	ldr	r3, [r7, #12]
 800ca94:	3b04      	subs	r3, #4
 800ca96:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ca98:	4a0c      	ldr	r2, [pc, #48]	; (800cacc <pxPortInitialiseStack+0x64>)
 800ca9a:	68fb      	ldr	r3, [r7, #12]
 800ca9c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ca9e:	68fb      	ldr	r3, [r7, #12]
 800caa0:	3b14      	subs	r3, #20
 800caa2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800caa4:	687a      	ldr	r2, [r7, #4]
 800caa6:	68fb      	ldr	r3, [r7, #12]
 800caa8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800caaa:	68fb      	ldr	r3, [r7, #12]
 800caac:	3b04      	subs	r3, #4
 800caae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f06f 0202 	mvn.w	r2, #2
 800cab6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800cab8:	68fb      	ldr	r3, [r7, #12]
 800caba:	3b20      	subs	r3, #32
 800cabc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800cabe:	68fb      	ldr	r3, [r7, #12]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	3714      	adds	r7, #20
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr
 800cacc:	0800cad1 	.word	0x0800cad1

0800cad0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800cad0:	b480      	push	{r7}
 800cad2:	b085      	sub	sp, #20
 800cad4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800cad6:	2300      	movs	r3, #0
 800cad8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800cada:	4b12      	ldr	r3, [pc, #72]	; (800cb24 <prvTaskExitError+0x54>)
 800cadc:	681b      	ldr	r3, [r3, #0]
 800cade:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cae2:	d00a      	beq.n	800cafa <prvTaskExitError+0x2a>
	__asm volatile
 800cae4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cae8:	f383 8811 	msr	BASEPRI, r3
 800caec:	f3bf 8f6f 	isb	sy
 800caf0:	f3bf 8f4f 	dsb	sy
 800caf4:	60fb      	str	r3, [r7, #12]
}
 800caf6:	bf00      	nop
 800caf8:	e7fe      	b.n	800caf8 <prvTaskExitError+0x28>
	__asm volatile
 800cafa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cafe:	f383 8811 	msr	BASEPRI, r3
 800cb02:	f3bf 8f6f 	isb	sy
 800cb06:	f3bf 8f4f 	dsb	sy
 800cb0a:	60bb      	str	r3, [r7, #8]
}
 800cb0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800cb0e:	bf00      	nop
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	2b00      	cmp	r3, #0
 800cb14:	d0fc      	beq.n	800cb10 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800cb16:	bf00      	nop
 800cb18:	bf00      	nop
 800cb1a:	3714      	adds	r7, #20
 800cb1c:	46bd      	mov	sp, r7
 800cb1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb22:	4770      	bx	lr
 800cb24:	20000010 	.word	0x20000010
	...

0800cb30 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800cb30:	4b07      	ldr	r3, [pc, #28]	; (800cb50 <pxCurrentTCBConst2>)
 800cb32:	6819      	ldr	r1, [r3, #0]
 800cb34:	6808      	ldr	r0, [r1, #0]
 800cb36:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb3a:	f380 8809 	msr	PSP, r0
 800cb3e:	f3bf 8f6f 	isb	sy
 800cb42:	f04f 0000 	mov.w	r0, #0
 800cb46:	f380 8811 	msr	BASEPRI, r0
 800cb4a:	4770      	bx	lr
 800cb4c:	f3af 8000 	nop.w

0800cb50 <pxCurrentTCBConst2>:
 800cb50:	20001410 	.word	0x20001410
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800cb54:	bf00      	nop
 800cb56:	bf00      	nop

0800cb58 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800cb58:	4808      	ldr	r0, [pc, #32]	; (800cb7c <prvPortStartFirstTask+0x24>)
 800cb5a:	6800      	ldr	r0, [r0, #0]
 800cb5c:	6800      	ldr	r0, [r0, #0]
 800cb5e:	f380 8808 	msr	MSP, r0
 800cb62:	f04f 0000 	mov.w	r0, #0
 800cb66:	f380 8814 	msr	CONTROL, r0
 800cb6a:	b662      	cpsie	i
 800cb6c:	b661      	cpsie	f
 800cb6e:	f3bf 8f4f 	dsb	sy
 800cb72:	f3bf 8f6f 	isb	sy
 800cb76:	df00      	svc	0
 800cb78:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800cb7a:	bf00      	nop
 800cb7c:	e000ed08 	.word	0xe000ed08

0800cb80 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800cb80:	b580      	push	{r7, lr}
 800cb82:	b086      	sub	sp, #24
 800cb84:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800cb86:	4b46      	ldr	r3, [pc, #280]	; (800cca0 <xPortStartScheduler+0x120>)
 800cb88:	681b      	ldr	r3, [r3, #0]
 800cb8a:	4a46      	ldr	r2, [pc, #280]	; (800cca4 <xPortStartScheduler+0x124>)
 800cb8c:	4293      	cmp	r3, r2
 800cb8e:	d10a      	bne.n	800cba6 <xPortStartScheduler+0x26>
	__asm volatile
 800cb90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb94:	f383 8811 	msr	BASEPRI, r3
 800cb98:	f3bf 8f6f 	isb	sy
 800cb9c:	f3bf 8f4f 	dsb	sy
 800cba0:	613b      	str	r3, [r7, #16]
}
 800cba2:	bf00      	nop
 800cba4:	e7fe      	b.n	800cba4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800cba6:	4b3e      	ldr	r3, [pc, #248]	; (800cca0 <xPortStartScheduler+0x120>)
 800cba8:	681b      	ldr	r3, [r3, #0]
 800cbaa:	4a3f      	ldr	r2, [pc, #252]	; (800cca8 <xPortStartScheduler+0x128>)
 800cbac:	4293      	cmp	r3, r2
 800cbae:	d10a      	bne.n	800cbc6 <xPortStartScheduler+0x46>
	__asm volatile
 800cbb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cbb4:	f383 8811 	msr	BASEPRI, r3
 800cbb8:	f3bf 8f6f 	isb	sy
 800cbbc:	f3bf 8f4f 	dsb	sy
 800cbc0:	60fb      	str	r3, [r7, #12]
}
 800cbc2:	bf00      	nop
 800cbc4:	e7fe      	b.n	800cbc4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800cbc6:	4b39      	ldr	r3, [pc, #228]	; (800ccac <xPortStartScheduler+0x12c>)
 800cbc8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800cbca:	697b      	ldr	r3, [r7, #20]
 800cbcc:	781b      	ldrb	r3, [r3, #0]
 800cbce:	b2db      	uxtb	r3, r3
 800cbd0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800cbd2:	697b      	ldr	r3, [r7, #20]
 800cbd4:	22ff      	movs	r2, #255	; 0xff
 800cbd6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800cbd8:	697b      	ldr	r3, [r7, #20]
 800cbda:	781b      	ldrb	r3, [r3, #0]
 800cbdc:	b2db      	uxtb	r3, r3
 800cbde:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800cbe0:	78fb      	ldrb	r3, [r7, #3]
 800cbe2:	b2db      	uxtb	r3, r3
 800cbe4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800cbe8:	b2da      	uxtb	r2, r3
 800cbea:	4b31      	ldr	r3, [pc, #196]	; (800ccb0 <xPortStartScheduler+0x130>)
 800cbec:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800cbee:	4b31      	ldr	r3, [pc, #196]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cbf0:	2207      	movs	r2, #7
 800cbf2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cbf4:	e009      	b.n	800cc0a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800cbf6:	4b2f      	ldr	r3, [pc, #188]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cbf8:	681b      	ldr	r3, [r3, #0]
 800cbfa:	3b01      	subs	r3, #1
 800cbfc:	4a2d      	ldr	r2, [pc, #180]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cbfe:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800cc00:	78fb      	ldrb	r3, [r7, #3]
 800cc02:	b2db      	uxtb	r3, r3
 800cc04:	005b      	lsls	r3, r3, #1
 800cc06:	b2db      	uxtb	r3, r3
 800cc08:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800cc0a:	78fb      	ldrb	r3, [r7, #3]
 800cc0c:	b2db      	uxtb	r3, r3
 800cc0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cc12:	2b80      	cmp	r3, #128	; 0x80
 800cc14:	d0ef      	beq.n	800cbf6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800cc16:	4b27      	ldr	r3, [pc, #156]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cc18:	681b      	ldr	r3, [r3, #0]
 800cc1a:	f1c3 0307 	rsb	r3, r3, #7
 800cc1e:	2b04      	cmp	r3, #4
 800cc20:	d00a      	beq.n	800cc38 <xPortStartScheduler+0xb8>
	__asm volatile
 800cc22:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc26:	f383 8811 	msr	BASEPRI, r3
 800cc2a:	f3bf 8f6f 	isb	sy
 800cc2e:	f3bf 8f4f 	dsb	sy
 800cc32:	60bb      	str	r3, [r7, #8]
}
 800cc34:	bf00      	nop
 800cc36:	e7fe      	b.n	800cc36 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800cc38:	4b1e      	ldr	r3, [pc, #120]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cc3a:	681b      	ldr	r3, [r3, #0]
 800cc3c:	021b      	lsls	r3, r3, #8
 800cc3e:	4a1d      	ldr	r2, [pc, #116]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cc40:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800cc42:	4b1c      	ldr	r3, [pc, #112]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800cc4a:	4a1a      	ldr	r2, [pc, #104]	; (800ccb4 <xPortStartScheduler+0x134>)
 800cc4c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800cc4e:	687b      	ldr	r3, [r7, #4]
 800cc50:	b2da      	uxtb	r2, r3
 800cc52:	697b      	ldr	r3, [r7, #20]
 800cc54:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800cc56:	4b18      	ldr	r3, [pc, #96]	; (800ccb8 <xPortStartScheduler+0x138>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4a17      	ldr	r2, [pc, #92]	; (800ccb8 <xPortStartScheduler+0x138>)
 800cc5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800cc60:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800cc62:	4b15      	ldr	r3, [pc, #84]	; (800ccb8 <xPortStartScheduler+0x138>)
 800cc64:	681b      	ldr	r3, [r3, #0]
 800cc66:	4a14      	ldr	r2, [pc, #80]	; (800ccb8 <xPortStartScheduler+0x138>)
 800cc68:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800cc6c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800cc6e:	f000 f8dd 	bl	800ce2c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800cc72:	4b12      	ldr	r3, [pc, #72]	; (800ccbc <xPortStartScheduler+0x13c>)
 800cc74:	2200      	movs	r2, #0
 800cc76:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800cc78:	f000 f8fc 	bl	800ce74 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800cc7c:	4b10      	ldr	r3, [pc, #64]	; (800ccc0 <xPortStartScheduler+0x140>)
 800cc7e:	681b      	ldr	r3, [r3, #0]
 800cc80:	4a0f      	ldr	r2, [pc, #60]	; (800ccc0 <xPortStartScheduler+0x140>)
 800cc82:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800cc86:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800cc88:	f7ff ff66 	bl	800cb58 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800cc8c:	f7fe ff3a 	bl	800bb04 <vTaskSwitchContext>
	prvTaskExitError();
 800cc90:	f7ff ff1e 	bl	800cad0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800cc94:	2300      	movs	r3, #0
}
 800cc96:	4618      	mov	r0, r3
 800cc98:	3718      	adds	r7, #24
 800cc9a:	46bd      	mov	sp, r7
 800cc9c:	bd80      	pop	{r7, pc}
 800cc9e:	bf00      	nop
 800cca0:	e000ed00 	.word	0xe000ed00
 800cca4:	410fc271 	.word	0x410fc271
 800cca8:	410fc270 	.word	0x410fc270
 800ccac:	e000e400 	.word	0xe000e400
 800ccb0:	20001a3c 	.word	0x20001a3c
 800ccb4:	20001a40 	.word	0x20001a40
 800ccb8:	e000ed20 	.word	0xe000ed20
 800ccbc:	20000010 	.word	0x20000010
 800ccc0:	e000ef34 	.word	0xe000ef34

0800ccc4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800ccc4:	b480      	push	{r7}
 800ccc6:	b083      	sub	sp, #12
 800ccc8:	af00      	add	r7, sp, #0
	__asm volatile
 800ccca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccce:	f383 8811 	msr	BASEPRI, r3
 800ccd2:	f3bf 8f6f 	isb	sy
 800ccd6:	f3bf 8f4f 	dsb	sy
 800ccda:	607b      	str	r3, [r7, #4]
}
 800ccdc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ccde:	4b0f      	ldr	r3, [pc, #60]	; (800cd1c <vPortEnterCritical+0x58>)
 800cce0:	681b      	ldr	r3, [r3, #0]
 800cce2:	3301      	adds	r3, #1
 800cce4:	4a0d      	ldr	r2, [pc, #52]	; (800cd1c <vPortEnterCritical+0x58>)
 800cce6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800cce8:	4b0c      	ldr	r3, [pc, #48]	; (800cd1c <vPortEnterCritical+0x58>)
 800ccea:	681b      	ldr	r3, [r3, #0]
 800ccec:	2b01      	cmp	r3, #1
 800ccee:	d10f      	bne.n	800cd10 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ccf0:	4b0b      	ldr	r3, [pc, #44]	; (800cd20 <vPortEnterCritical+0x5c>)
 800ccf2:	681b      	ldr	r3, [r3, #0]
 800ccf4:	b2db      	uxtb	r3, r3
 800ccf6:	2b00      	cmp	r3, #0
 800ccf8:	d00a      	beq.n	800cd10 <vPortEnterCritical+0x4c>
	__asm volatile
 800ccfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ccfe:	f383 8811 	msr	BASEPRI, r3
 800cd02:	f3bf 8f6f 	isb	sy
 800cd06:	f3bf 8f4f 	dsb	sy
 800cd0a:	603b      	str	r3, [r7, #0]
}
 800cd0c:	bf00      	nop
 800cd0e:	e7fe      	b.n	800cd0e <vPortEnterCritical+0x4a>
	}
}
 800cd10:	bf00      	nop
 800cd12:	370c      	adds	r7, #12
 800cd14:	46bd      	mov	sp, r7
 800cd16:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd1a:	4770      	bx	lr
 800cd1c:	20000010 	.word	0x20000010
 800cd20:	e000ed04 	.word	0xe000ed04

0800cd24 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800cd24:	b480      	push	{r7}
 800cd26:	b083      	sub	sp, #12
 800cd28:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800cd2a:	4b12      	ldr	r3, [pc, #72]	; (800cd74 <vPortExitCritical+0x50>)
 800cd2c:	681b      	ldr	r3, [r3, #0]
 800cd2e:	2b00      	cmp	r3, #0
 800cd30:	d10a      	bne.n	800cd48 <vPortExitCritical+0x24>
	__asm volatile
 800cd32:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd36:	f383 8811 	msr	BASEPRI, r3
 800cd3a:	f3bf 8f6f 	isb	sy
 800cd3e:	f3bf 8f4f 	dsb	sy
 800cd42:	607b      	str	r3, [r7, #4]
}
 800cd44:	bf00      	nop
 800cd46:	e7fe      	b.n	800cd46 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800cd48:	4b0a      	ldr	r3, [pc, #40]	; (800cd74 <vPortExitCritical+0x50>)
 800cd4a:	681b      	ldr	r3, [r3, #0]
 800cd4c:	3b01      	subs	r3, #1
 800cd4e:	4a09      	ldr	r2, [pc, #36]	; (800cd74 <vPortExitCritical+0x50>)
 800cd50:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cd52:	4b08      	ldr	r3, [pc, #32]	; (800cd74 <vPortExitCritical+0x50>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d105      	bne.n	800cd66 <vPortExitCritical+0x42>
 800cd5a:	2300      	movs	r3, #0
 800cd5c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800cd5e:	683b      	ldr	r3, [r7, #0]
 800cd60:	f383 8811 	msr	BASEPRI, r3
}
 800cd64:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800cd66:	bf00      	nop
 800cd68:	370c      	adds	r7, #12
 800cd6a:	46bd      	mov	sp, r7
 800cd6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd70:	4770      	bx	lr
 800cd72:	bf00      	nop
 800cd74:	20000010 	.word	0x20000010
	...

0800cd80 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800cd80:	f3ef 8009 	mrs	r0, PSP
 800cd84:	f3bf 8f6f 	isb	sy
 800cd88:	4b15      	ldr	r3, [pc, #84]	; (800cde0 <pxCurrentTCBConst>)
 800cd8a:	681a      	ldr	r2, [r3, #0]
 800cd8c:	f01e 0f10 	tst.w	lr, #16
 800cd90:	bf08      	it	eq
 800cd92:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800cd96:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd9a:	6010      	str	r0, [r2, #0]
 800cd9c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800cda0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800cda4:	f380 8811 	msr	BASEPRI, r0
 800cda8:	f3bf 8f4f 	dsb	sy
 800cdac:	f3bf 8f6f 	isb	sy
 800cdb0:	f7fe fea8 	bl	800bb04 <vTaskSwitchContext>
 800cdb4:	f04f 0000 	mov.w	r0, #0
 800cdb8:	f380 8811 	msr	BASEPRI, r0
 800cdbc:	bc09      	pop	{r0, r3}
 800cdbe:	6819      	ldr	r1, [r3, #0]
 800cdc0:	6808      	ldr	r0, [r1, #0]
 800cdc2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cdc6:	f01e 0f10 	tst.w	lr, #16
 800cdca:	bf08      	it	eq
 800cdcc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cdd0:	f380 8809 	msr	PSP, r0
 800cdd4:	f3bf 8f6f 	isb	sy
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	f3af 8000 	nop.w

0800cde0 <pxCurrentTCBConst>:
 800cde0:	20001410 	.word	0x20001410
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800cde4:	bf00      	nop
 800cde6:	bf00      	nop

0800cde8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cde8:	b580      	push	{r7, lr}
 800cdea:	b082      	sub	sp, #8
 800cdec:	af00      	add	r7, sp, #0
	__asm volatile
 800cdee:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdf2:	f383 8811 	msr	BASEPRI, r3
 800cdf6:	f3bf 8f6f 	isb	sy
 800cdfa:	f3bf 8f4f 	dsb	sy
 800cdfe:	607b      	str	r3, [r7, #4]
}
 800ce00:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800ce02:	f7fe fdc5 	bl	800b990 <xTaskIncrementTick>
 800ce06:	4603      	mov	r3, r0
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d003      	beq.n	800ce14 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800ce0c:	4b06      	ldr	r3, [pc, #24]	; (800ce28 <xPortSysTickHandler+0x40>)
 800ce0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce12:	601a      	str	r2, [r3, #0]
 800ce14:	2300      	movs	r3, #0
 800ce16:	603b      	str	r3, [r7, #0]
	__asm volatile
 800ce18:	683b      	ldr	r3, [r7, #0]
 800ce1a:	f383 8811 	msr	BASEPRI, r3
}
 800ce1e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800ce20:	bf00      	nop
 800ce22:	3708      	adds	r7, #8
 800ce24:	46bd      	mov	sp, r7
 800ce26:	bd80      	pop	{r7, pc}
 800ce28:	e000ed04 	.word	0xe000ed04

0800ce2c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800ce2c:	b480      	push	{r7}
 800ce2e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800ce30:	4b0b      	ldr	r3, [pc, #44]	; (800ce60 <vPortSetupTimerInterrupt+0x34>)
 800ce32:	2200      	movs	r2, #0
 800ce34:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800ce36:	4b0b      	ldr	r3, [pc, #44]	; (800ce64 <vPortSetupTimerInterrupt+0x38>)
 800ce38:	2200      	movs	r2, #0
 800ce3a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800ce3c:	4b0a      	ldr	r3, [pc, #40]	; (800ce68 <vPortSetupTimerInterrupt+0x3c>)
 800ce3e:	681b      	ldr	r3, [r3, #0]
 800ce40:	4a0a      	ldr	r2, [pc, #40]	; (800ce6c <vPortSetupTimerInterrupt+0x40>)
 800ce42:	fba2 2303 	umull	r2, r3, r2, r3
 800ce46:	099b      	lsrs	r3, r3, #6
 800ce48:	4a09      	ldr	r2, [pc, #36]	; (800ce70 <vPortSetupTimerInterrupt+0x44>)
 800ce4a:	3b01      	subs	r3, #1
 800ce4c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800ce4e:	4b04      	ldr	r3, [pc, #16]	; (800ce60 <vPortSetupTimerInterrupt+0x34>)
 800ce50:	2207      	movs	r2, #7
 800ce52:	601a      	str	r2, [r3, #0]
}
 800ce54:	bf00      	nop
 800ce56:	46bd      	mov	sp, r7
 800ce58:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5c:	4770      	bx	lr
 800ce5e:	bf00      	nop
 800ce60:	e000e010 	.word	0xe000e010
 800ce64:	e000e018 	.word	0xe000e018
 800ce68:	20000004 	.word	0x20000004
 800ce6c:	10624dd3 	.word	0x10624dd3
 800ce70:	e000e014 	.word	0xe000e014

0800ce74 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800ce74:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800ce84 <vPortEnableVFP+0x10>
 800ce78:	6801      	ldr	r1, [r0, #0]
 800ce7a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800ce7e:	6001      	str	r1, [r0, #0]
 800ce80:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ce82:	bf00      	nop
 800ce84:	e000ed88 	.word	0xe000ed88

0800ce88 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800ce88:	b480      	push	{r7}
 800ce8a:	b085      	sub	sp, #20
 800ce8c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800ce8e:	f3ef 8305 	mrs	r3, IPSR
 800ce92:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ce94:	68fb      	ldr	r3, [r7, #12]
 800ce96:	2b0f      	cmp	r3, #15
 800ce98:	d914      	bls.n	800cec4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ce9a:	4a17      	ldr	r2, [pc, #92]	; (800cef8 <vPortValidateInterruptPriority+0x70>)
 800ce9c:	68fb      	ldr	r3, [r7, #12]
 800ce9e:	4413      	add	r3, r2
 800cea0:	781b      	ldrb	r3, [r3, #0]
 800cea2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cea4:	4b15      	ldr	r3, [pc, #84]	; (800cefc <vPortValidateInterruptPriority+0x74>)
 800cea6:	781b      	ldrb	r3, [r3, #0]
 800cea8:	7afa      	ldrb	r2, [r7, #11]
 800ceaa:	429a      	cmp	r2, r3
 800ceac:	d20a      	bcs.n	800cec4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800ceae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ceb2:	f383 8811 	msr	BASEPRI, r3
 800ceb6:	f3bf 8f6f 	isb	sy
 800ceba:	f3bf 8f4f 	dsb	sy
 800cebe:	607b      	str	r3, [r7, #4]
}
 800cec0:	bf00      	nop
 800cec2:	e7fe      	b.n	800cec2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cec4:	4b0e      	ldr	r3, [pc, #56]	; (800cf00 <vPortValidateInterruptPriority+0x78>)
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800cecc:	4b0d      	ldr	r3, [pc, #52]	; (800cf04 <vPortValidateInterruptPriority+0x7c>)
 800cece:	681b      	ldr	r3, [r3, #0]
 800ced0:	429a      	cmp	r2, r3
 800ced2:	d90a      	bls.n	800ceea <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800ced4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced8:	f383 8811 	msr	BASEPRI, r3
 800cedc:	f3bf 8f6f 	isb	sy
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	603b      	str	r3, [r7, #0]
}
 800cee6:	bf00      	nop
 800cee8:	e7fe      	b.n	800cee8 <vPortValidateInterruptPriority+0x60>
	}
 800ceea:	bf00      	nop
 800ceec:	3714      	adds	r7, #20
 800ceee:	46bd      	mov	sp, r7
 800cef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cef4:	4770      	bx	lr
 800cef6:	bf00      	nop
 800cef8:	e000e3f0 	.word	0xe000e3f0
 800cefc:	20001a3c 	.word	0x20001a3c
 800cf00:	e000ed0c 	.word	0xe000ed0c
 800cf04:	20001a40 	.word	0x20001a40

0800cf08 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800cf08:	b580      	push	{r7, lr}
 800cf0a:	b08a      	sub	sp, #40	; 0x28
 800cf0c:	af00      	add	r7, sp, #0
 800cf0e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800cf10:	2300      	movs	r3, #0
 800cf12:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800cf14:	f7fe fc80 	bl	800b818 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800cf18:	4b5b      	ldr	r3, [pc, #364]	; (800d088 <pvPortMalloc+0x180>)
 800cf1a:	681b      	ldr	r3, [r3, #0]
 800cf1c:	2b00      	cmp	r3, #0
 800cf1e:	d101      	bne.n	800cf24 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800cf20:	f000 f920 	bl	800d164 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800cf24:	4b59      	ldr	r3, [pc, #356]	; (800d08c <pvPortMalloc+0x184>)
 800cf26:	681a      	ldr	r2, [r3, #0]
 800cf28:	687b      	ldr	r3, [r7, #4]
 800cf2a:	4013      	ands	r3, r2
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	f040 8093 	bne.w	800d058 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800cf32:	687b      	ldr	r3, [r7, #4]
 800cf34:	2b00      	cmp	r3, #0
 800cf36:	d01d      	beq.n	800cf74 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800cf38:	2208      	movs	r2, #8
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	4413      	add	r3, r2
 800cf3e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cf40:	687b      	ldr	r3, [r7, #4]
 800cf42:	f003 0307 	and.w	r3, r3, #7
 800cf46:	2b00      	cmp	r3, #0
 800cf48:	d014      	beq.n	800cf74 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cf4a:	687b      	ldr	r3, [r7, #4]
 800cf4c:	f023 0307 	bic.w	r3, r3, #7
 800cf50:	3308      	adds	r3, #8
 800cf52:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cf54:	687b      	ldr	r3, [r7, #4]
 800cf56:	f003 0307 	and.w	r3, r3, #7
 800cf5a:	2b00      	cmp	r3, #0
 800cf5c:	d00a      	beq.n	800cf74 <pvPortMalloc+0x6c>
	__asm volatile
 800cf5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf62:	f383 8811 	msr	BASEPRI, r3
 800cf66:	f3bf 8f6f 	isb	sy
 800cf6a:	f3bf 8f4f 	dsb	sy
 800cf6e:	617b      	str	r3, [r7, #20]
}
 800cf70:	bf00      	nop
 800cf72:	e7fe      	b.n	800cf72 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800cf74:	687b      	ldr	r3, [r7, #4]
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d06e      	beq.n	800d058 <pvPortMalloc+0x150>
 800cf7a:	4b45      	ldr	r3, [pc, #276]	; (800d090 <pvPortMalloc+0x188>)
 800cf7c:	681b      	ldr	r3, [r3, #0]
 800cf7e:	687a      	ldr	r2, [r7, #4]
 800cf80:	429a      	cmp	r2, r3
 800cf82:	d869      	bhi.n	800d058 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800cf84:	4b43      	ldr	r3, [pc, #268]	; (800d094 <pvPortMalloc+0x18c>)
 800cf86:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800cf88:	4b42      	ldr	r3, [pc, #264]	; (800d094 <pvPortMalloc+0x18c>)
 800cf8a:	681b      	ldr	r3, [r3, #0]
 800cf8c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf8e:	e004      	b.n	800cf9a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800cf90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf92:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800cf94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf96:	681b      	ldr	r3, [r3, #0]
 800cf98:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cf9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf9c:	685b      	ldr	r3, [r3, #4]
 800cf9e:	687a      	ldr	r2, [r7, #4]
 800cfa0:	429a      	cmp	r2, r3
 800cfa2:	d903      	bls.n	800cfac <pvPortMalloc+0xa4>
 800cfa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d1f1      	bne.n	800cf90 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800cfac:	4b36      	ldr	r3, [pc, #216]	; (800d088 <pvPortMalloc+0x180>)
 800cfae:	681b      	ldr	r3, [r3, #0]
 800cfb0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfb2:	429a      	cmp	r2, r3
 800cfb4:	d050      	beq.n	800d058 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cfb6:	6a3b      	ldr	r3, [r7, #32]
 800cfb8:	681b      	ldr	r3, [r3, #0]
 800cfba:	2208      	movs	r2, #8
 800cfbc:	4413      	add	r3, r2
 800cfbe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cfc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfc2:	681a      	ldr	r2, [r3, #0]
 800cfc4:	6a3b      	ldr	r3, [r7, #32]
 800cfc6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cfc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cfca:	685a      	ldr	r2, [r3, #4]
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	1ad2      	subs	r2, r2, r3
 800cfd0:	2308      	movs	r3, #8
 800cfd2:	005b      	lsls	r3, r3, #1
 800cfd4:	429a      	cmp	r2, r3
 800cfd6:	d91f      	bls.n	800d018 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cfd8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800cfda:	687b      	ldr	r3, [r7, #4]
 800cfdc:	4413      	add	r3, r2
 800cfde:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cfe0:	69bb      	ldr	r3, [r7, #24]
 800cfe2:	f003 0307 	and.w	r3, r3, #7
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d00a      	beq.n	800d000 <pvPortMalloc+0xf8>
	__asm volatile
 800cfea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfee:	f383 8811 	msr	BASEPRI, r3
 800cff2:	f3bf 8f6f 	isb	sy
 800cff6:	f3bf 8f4f 	dsb	sy
 800cffa:	613b      	str	r3, [r7, #16]
}
 800cffc:	bf00      	nop
 800cffe:	e7fe      	b.n	800cffe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800d000:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d002:	685a      	ldr	r2, [r3, #4]
 800d004:	687b      	ldr	r3, [r7, #4]
 800d006:	1ad2      	subs	r2, r2, r3
 800d008:	69bb      	ldr	r3, [r7, #24]
 800d00a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800d00c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d00e:	687a      	ldr	r2, [r7, #4]
 800d010:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800d012:	69b8      	ldr	r0, [r7, #24]
 800d014:	f000 f908 	bl	800d228 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800d018:	4b1d      	ldr	r3, [pc, #116]	; (800d090 <pvPortMalloc+0x188>)
 800d01a:	681a      	ldr	r2, [r3, #0]
 800d01c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d01e:	685b      	ldr	r3, [r3, #4]
 800d020:	1ad3      	subs	r3, r2, r3
 800d022:	4a1b      	ldr	r2, [pc, #108]	; (800d090 <pvPortMalloc+0x188>)
 800d024:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800d026:	4b1a      	ldr	r3, [pc, #104]	; (800d090 <pvPortMalloc+0x188>)
 800d028:	681a      	ldr	r2, [r3, #0]
 800d02a:	4b1b      	ldr	r3, [pc, #108]	; (800d098 <pvPortMalloc+0x190>)
 800d02c:	681b      	ldr	r3, [r3, #0]
 800d02e:	429a      	cmp	r2, r3
 800d030:	d203      	bcs.n	800d03a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800d032:	4b17      	ldr	r3, [pc, #92]	; (800d090 <pvPortMalloc+0x188>)
 800d034:	681b      	ldr	r3, [r3, #0]
 800d036:	4a18      	ldr	r2, [pc, #96]	; (800d098 <pvPortMalloc+0x190>)
 800d038:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800d03a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d03c:	685a      	ldr	r2, [r3, #4]
 800d03e:	4b13      	ldr	r3, [pc, #76]	; (800d08c <pvPortMalloc+0x184>)
 800d040:	681b      	ldr	r3, [r3, #0]
 800d042:	431a      	orrs	r2, r3
 800d044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d046:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800d048:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d04a:	2200      	movs	r2, #0
 800d04c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800d04e:	4b13      	ldr	r3, [pc, #76]	; (800d09c <pvPortMalloc+0x194>)
 800d050:	681b      	ldr	r3, [r3, #0]
 800d052:	3301      	adds	r3, #1
 800d054:	4a11      	ldr	r2, [pc, #68]	; (800d09c <pvPortMalloc+0x194>)
 800d056:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800d058:	f7fe fbec 	bl	800b834 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800d05c:	69fb      	ldr	r3, [r7, #28]
 800d05e:	f003 0307 	and.w	r3, r3, #7
 800d062:	2b00      	cmp	r3, #0
 800d064:	d00a      	beq.n	800d07c <pvPortMalloc+0x174>
	__asm volatile
 800d066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d06a:	f383 8811 	msr	BASEPRI, r3
 800d06e:	f3bf 8f6f 	isb	sy
 800d072:	f3bf 8f4f 	dsb	sy
 800d076:	60fb      	str	r3, [r7, #12]
}
 800d078:	bf00      	nop
 800d07a:	e7fe      	b.n	800d07a <pvPortMalloc+0x172>
	return pvReturn;
 800d07c:	69fb      	ldr	r3, [r7, #28]
}
 800d07e:	4618      	mov	r0, r3
 800d080:	3728      	adds	r7, #40	; 0x28
 800d082:	46bd      	mov	sp, r7
 800d084:	bd80      	pop	{r7, pc}
 800d086:	bf00      	nop
 800d088:	20002604 	.word	0x20002604
 800d08c:	20002618 	.word	0x20002618
 800d090:	20002608 	.word	0x20002608
 800d094:	200025fc 	.word	0x200025fc
 800d098:	2000260c 	.word	0x2000260c
 800d09c:	20002610 	.word	0x20002610

0800d0a0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800d0a0:	b580      	push	{r7, lr}
 800d0a2:	b086      	sub	sp, #24
 800d0a4:	af00      	add	r7, sp, #0
 800d0a6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800d0a8:	687b      	ldr	r3, [r7, #4]
 800d0aa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800d0ac:	687b      	ldr	r3, [r7, #4]
 800d0ae:	2b00      	cmp	r3, #0
 800d0b0:	d04d      	beq.n	800d14e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800d0b2:	2308      	movs	r3, #8
 800d0b4:	425b      	negs	r3, r3
 800d0b6:	697a      	ldr	r2, [r7, #20]
 800d0b8:	4413      	add	r3, r2
 800d0ba:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800d0bc:	697b      	ldr	r3, [r7, #20]
 800d0be:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800d0c0:	693b      	ldr	r3, [r7, #16]
 800d0c2:	685a      	ldr	r2, [r3, #4]
 800d0c4:	4b24      	ldr	r3, [pc, #144]	; (800d158 <vPortFree+0xb8>)
 800d0c6:	681b      	ldr	r3, [r3, #0]
 800d0c8:	4013      	ands	r3, r2
 800d0ca:	2b00      	cmp	r3, #0
 800d0cc:	d10a      	bne.n	800d0e4 <vPortFree+0x44>
	__asm volatile
 800d0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0d2:	f383 8811 	msr	BASEPRI, r3
 800d0d6:	f3bf 8f6f 	isb	sy
 800d0da:	f3bf 8f4f 	dsb	sy
 800d0de:	60fb      	str	r3, [r7, #12]
}
 800d0e0:	bf00      	nop
 800d0e2:	e7fe      	b.n	800d0e2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800d0e4:	693b      	ldr	r3, [r7, #16]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b00      	cmp	r3, #0
 800d0ea:	d00a      	beq.n	800d102 <vPortFree+0x62>
	__asm volatile
 800d0ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0f0:	f383 8811 	msr	BASEPRI, r3
 800d0f4:	f3bf 8f6f 	isb	sy
 800d0f8:	f3bf 8f4f 	dsb	sy
 800d0fc:	60bb      	str	r3, [r7, #8]
}
 800d0fe:	bf00      	nop
 800d100:	e7fe      	b.n	800d100 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800d102:	693b      	ldr	r3, [r7, #16]
 800d104:	685a      	ldr	r2, [r3, #4]
 800d106:	4b14      	ldr	r3, [pc, #80]	; (800d158 <vPortFree+0xb8>)
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4013      	ands	r3, r2
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d01e      	beq.n	800d14e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800d110:	693b      	ldr	r3, [r7, #16]
 800d112:	681b      	ldr	r3, [r3, #0]
 800d114:	2b00      	cmp	r3, #0
 800d116:	d11a      	bne.n	800d14e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800d118:	693b      	ldr	r3, [r7, #16]
 800d11a:	685a      	ldr	r2, [r3, #4]
 800d11c:	4b0e      	ldr	r3, [pc, #56]	; (800d158 <vPortFree+0xb8>)
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	43db      	mvns	r3, r3
 800d122:	401a      	ands	r2, r3
 800d124:	693b      	ldr	r3, [r7, #16]
 800d126:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800d128:	f7fe fb76 	bl	800b818 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800d12c:	693b      	ldr	r3, [r7, #16]
 800d12e:	685a      	ldr	r2, [r3, #4]
 800d130:	4b0a      	ldr	r3, [pc, #40]	; (800d15c <vPortFree+0xbc>)
 800d132:	681b      	ldr	r3, [r3, #0]
 800d134:	4413      	add	r3, r2
 800d136:	4a09      	ldr	r2, [pc, #36]	; (800d15c <vPortFree+0xbc>)
 800d138:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800d13a:	6938      	ldr	r0, [r7, #16]
 800d13c:	f000 f874 	bl	800d228 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800d140:	4b07      	ldr	r3, [pc, #28]	; (800d160 <vPortFree+0xc0>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	3301      	adds	r3, #1
 800d146:	4a06      	ldr	r2, [pc, #24]	; (800d160 <vPortFree+0xc0>)
 800d148:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800d14a:	f7fe fb73 	bl	800b834 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800d14e:	bf00      	nop
 800d150:	3718      	adds	r7, #24
 800d152:	46bd      	mov	sp, r7
 800d154:	bd80      	pop	{r7, pc}
 800d156:	bf00      	nop
 800d158:	20002618 	.word	0x20002618
 800d15c:	20002608 	.word	0x20002608
 800d160:	20002614 	.word	0x20002614

0800d164 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800d164:	b480      	push	{r7}
 800d166:	b085      	sub	sp, #20
 800d168:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800d16a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800d16e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800d170:	4b27      	ldr	r3, [pc, #156]	; (800d210 <prvHeapInit+0xac>)
 800d172:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800d174:	68fb      	ldr	r3, [r7, #12]
 800d176:	f003 0307 	and.w	r3, r3, #7
 800d17a:	2b00      	cmp	r3, #0
 800d17c:	d00c      	beq.n	800d198 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800d17e:	68fb      	ldr	r3, [r7, #12]
 800d180:	3307      	adds	r3, #7
 800d182:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	f023 0307 	bic.w	r3, r3, #7
 800d18a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800d18c:	68ba      	ldr	r2, [r7, #8]
 800d18e:	68fb      	ldr	r3, [r7, #12]
 800d190:	1ad3      	subs	r3, r2, r3
 800d192:	4a1f      	ldr	r2, [pc, #124]	; (800d210 <prvHeapInit+0xac>)
 800d194:	4413      	add	r3, r2
 800d196:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800d198:	68fb      	ldr	r3, [r7, #12]
 800d19a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800d19c:	4a1d      	ldr	r2, [pc, #116]	; (800d214 <prvHeapInit+0xb0>)
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800d1a2:	4b1c      	ldr	r3, [pc, #112]	; (800d214 <prvHeapInit+0xb0>)
 800d1a4:	2200      	movs	r2, #0
 800d1a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800d1a8:	687b      	ldr	r3, [r7, #4]
 800d1aa:	68ba      	ldr	r2, [r7, #8]
 800d1ac:	4413      	add	r3, r2
 800d1ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800d1b0:	2208      	movs	r2, #8
 800d1b2:	68fb      	ldr	r3, [r7, #12]
 800d1b4:	1a9b      	subs	r3, r3, r2
 800d1b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800d1b8:	68fb      	ldr	r3, [r7, #12]
 800d1ba:	f023 0307 	bic.w	r3, r3, #7
 800d1be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800d1c0:	68fb      	ldr	r3, [r7, #12]
 800d1c2:	4a15      	ldr	r2, [pc, #84]	; (800d218 <prvHeapInit+0xb4>)
 800d1c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800d1c6:	4b14      	ldr	r3, [pc, #80]	; (800d218 <prvHeapInit+0xb4>)
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	2200      	movs	r2, #0
 800d1cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800d1ce:	4b12      	ldr	r3, [pc, #72]	; (800d218 <prvHeapInit+0xb4>)
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	2200      	movs	r2, #0
 800d1d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800d1d6:	687b      	ldr	r3, [r7, #4]
 800d1d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800d1da:	683b      	ldr	r3, [r7, #0]
 800d1dc:	68fa      	ldr	r2, [r7, #12]
 800d1de:	1ad2      	subs	r2, r2, r3
 800d1e0:	683b      	ldr	r3, [r7, #0]
 800d1e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800d1e4:	4b0c      	ldr	r3, [pc, #48]	; (800d218 <prvHeapInit+0xb4>)
 800d1e6:	681a      	ldr	r2, [r3, #0]
 800d1e8:	683b      	ldr	r3, [r7, #0]
 800d1ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	685b      	ldr	r3, [r3, #4]
 800d1f0:	4a0a      	ldr	r2, [pc, #40]	; (800d21c <prvHeapInit+0xb8>)
 800d1f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800d1f4:	683b      	ldr	r3, [r7, #0]
 800d1f6:	685b      	ldr	r3, [r3, #4]
 800d1f8:	4a09      	ldr	r2, [pc, #36]	; (800d220 <prvHeapInit+0xbc>)
 800d1fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800d1fc:	4b09      	ldr	r3, [pc, #36]	; (800d224 <prvHeapInit+0xc0>)
 800d1fe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800d202:	601a      	str	r2, [r3, #0]
}
 800d204:	bf00      	nop
 800d206:	3714      	adds	r7, #20
 800d208:	46bd      	mov	sp, r7
 800d20a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d20e:	4770      	bx	lr
 800d210:	20001a44 	.word	0x20001a44
 800d214:	200025fc 	.word	0x200025fc
 800d218:	20002604 	.word	0x20002604
 800d21c:	2000260c 	.word	0x2000260c
 800d220:	20002608 	.word	0x20002608
 800d224:	20002618 	.word	0x20002618

0800d228 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800d228:	b480      	push	{r7}
 800d22a:	b085      	sub	sp, #20
 800d22c:	af00      	add	r7, sp, #0
 800d22e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800d230:	4b28      	ldr	r3, [pc, #160]	; (800d2d4 <prvInsertBlockIntoFreeList+0xac>)
 800d232:	60fb      	str	r3, [r7, #12]
 800d234:	e002      	b.n	800d23c <prvInsertBlockIntoFreeList+0x14>
 800d236:	68fb      	ldr	r3, [r7, #12]
 800d238:	681b      	ldr	r3, [r3, #0]
 800d23a:	60fb      	str	r3, [r7, #12]
 800d23c:	68fb      	ldr	r3, [r7, #12]
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	687a      	ldr	r2, [r7, #4]
 800d242:	429a      	cmp	r2, r3
 800d244:	d8f7      	bhi.n	800d236 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800d246:	68fb      	ldr	r3, [r7, #12]
 800d248:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800d24a:	68fb      	ldr	r3, [r7, #12]
 800d24c:	685b      	ldr	r3, [r3, #4]
 800d24e:	68ba      	ldr	r2, [r7, #8]
 800d250:	4413      	add	r3, r2
 800d252:	687a      	ldr	r2, [r7, #4]
 800d254:	429a      	cmp	r2, r3
 800d256:	d108      	bne.n	800d26a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800d258:	68fb      	ldr	r3, [r7, #12]
 800d25a:	685a      	ldr	r2, [r3, #4]
 800d25c:	687b      	ldr	r3, [r7, #4]
 800d25e:	685b      	ldr	r3, [r3, #4]
 800d260:	441a      	add	r2, r3
 800d262:	68fb      	ldr	r3, [r7, #12]
 800d264:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800d266:	68fb      	ldr	r3, [r7, #12]
 800d268:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800d26a:	687b      	ldr	r3, [r7, #4]
 800d26c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	685b      	ldr	r3, [r3, #4]
 800d272:	68ba      	ldr	r2, [r7, #8]
 800d274:	441a      	add	r2, r3
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	681b      	ldr	r3, [r3, #0]
 800d27a:	429a      	cmp	r2, r3
 800d27c:	d118      	bne.n	800d2b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800d27e:	68fb      	ldr	r3, [r7, #12]
 800d280:	681a      	ldr	r2, [r3, #0]
 800d282:	4b15      	ldr	r3, [pc, #84]	; (800d2d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	429a      	cmp	r2, r3
 800d288:	d00d      	beq.n	800d2a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	685a      	ldr	r2, [r3, #4]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	681b      	ldr	r3, [r3, #0]
 800d292:	685b      	ldr	r3, [r3, #4]
 800d294:	441a      	add	r2, r3
 800d296:	687b      	ldr	r3, [r7, #4]
 800d298:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800d29a:	68fb      	ldr	r3, [r7, #12]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	681a      	ldr	r2, [r3, #0]
 800d2a0:	687b      	ldr	r3, [r7, #4]
 800d2a2:	601a      	str	r2, [r3, #0]
 800d2a4:	e008      	b.n	800d2b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800d2a6:	4b0c      	ldr	r3, [pc, #48]	; (800d2d8 <prvInsertBlockIntoFreeList+0xb0>)
 800d2a8:	681a      	ldr	r2, [r3, #0]
 800d2aa:	687b      	ldr	r3, [r7, #4]
 800d2ac:	601a      	str	r2, [r3, #0]
 800d2ae:	e003      	b.n	800d2b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	681a      	ldr	r2, [r3, #0]
 800d2b4:	687b      	ldr	r3, [r7, #4]
 800d2b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800d2b8:	68fa      	ldr	r2, [r7, #12]
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	429a      	cmp	r2, r3
 800d2be:	d002      	beq.n	800d2c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800d2c6:	bf00      	nop
 800d2c8:	3714      	adds	r7, #20
 800d2ca:	46bd      	mov	sp, r7
 800d2cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2d0:	4770      	bx	lr
 800d2d2:	bf00      	nop
 800d2d4:	200025fc 	.word	0x200025fc
 800d2d8:	20002604 	.word	0x20002604

0800d2dc <__errno>:
 800d2dc:	4b01      	ldr	r3, [pc, #4]	; (800d2e4 <__errno+0x8>)
 800d2de:	6818      	ldr	r0, [r3, #0]
 800d2e0:	4770      	bx	lr
 800d2e2:	bf00      	nop
 800d2e4:	20000014 	.word	0x20000014

0800d2e8 <__libc_init_array>:
 800d2e8:	b570      	push	{r4, r5, r6, lr}
 800d2ea:	4d0d      	ldr	r5, [pc, #52]	; (800d320 <__libc_init_array+0x38>)
 800d2ec:	4c0d      	ldr	r4, [pc, #52]	; (800d324 <__libc_init_array+0x3c>)
 800d2ee:	1b64      	subs	r4, r4, r5
 800d2f0:	10a4      	asrs	r4, r4, #2
 800d2f2:	2600      	movs	r6, #0
 800d2f4:	42a6      	cmp	r6, r4
 800d2f6:	d109      	bne.n	800d30c <__libc_init_array+0x24>
 800d2f8:	4d0b      	ldr	r5, [pc, #44]	; (800d328 <__libc_init_array+0x40>)
 800d2fa:	4c0c      	ldr	r4, [pc, #48]	; (800d32c <__libc_init_array+0x44>)
 800d2fc:	f002 fa36 	bl	800f76c <_init>
 800d300:	1b64      	subs	r4, r4, r5
 800d302:	10a4      	asrs	r4, r4, #2
 800d304:	2600      	movs	r6, #0
 800d306:	42a6      	cmp	r6, r4
 800d308:	d105      	bne.n	800d316 <__libc_init_array+0x2e>
 800d30a:	bd70      	pop	{r4, r5, r6, pc}
 800d30c:	f855 3b04 	ldr.w	r3, [r5], #4
 800d310:	4798      	blx	r3
 800d312:	3601      	adds	r6, #1
 800d314:	e7ee      	b.n	800d2f4 <__libc_init_array+0xc>
 800d316:	f855 3b04 	ldr.w	r3, [r5], #4
 800d31a:	4798      	blx	r3
 800d31c:	3601      	adds	r6, #1
 800d31e:	e7f2      	b.n	800d306 <__libc_init_array+0x1e>
 800d320:	08010048 	.word	0x08010048
 800d324:	08010048 	.word	0x08010048
 800d328:	08010048 	.word	0x08010048
 800d32c:	0801004c 	.word	0x0801004c

0800d330 <__retarget_lock_acquire_recursive>:
 800d330:	4770      	bx	lr

0800d332 <__retarget_lock_release_recursive>:
 800d332:	4770      	bx	lr

0800d334 <memcpy>:
 800d334:	440a      	add	r2, r1
 800d336:	4291      	cmp	r1, r2
 800d338:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800d33c:	d100      	bne.n	800d340 <memcpy+0xc>
 800d33e:	4770      	bx	lr
 800d340:	b510      	push	{r4, lr}
 800d342:	f811 4b01 	ldrb.w	r4, [r1], #1
 800d346:	f803 4f01 	strb.w	r4, [r3, #1]!
 800d34a:	4291      	cmp	r1, r2
 800d34c:	d1f9      	bne.n	800d342 <memcpy+0xe>
 800d34e:	bd10      	pop	{r4, pc}

0800d350 <memset>:
 800d350:	4402      	add	r2, r0
 800d352:	4603      	mov	r3, r0
 800d354:	4293      	cmp	r3, r2
 800d356:	d100      	bne.n	800d35a <memset+0xa>
 800d358:	4770      	bx	lr
 800d35a:	f803 1b01 	strb.w	r1, [r3], #1
 800d35e:	e7f9      	b.n	800d354 <memset+0x4>

0800d360 <cleanup_glue>:
 800d360:	b538      	push	{r3, r4, r5, lr}
 800d362:	460c      	mov	r4, r1
 800d364:	6809      	ldr	r1, [r1, #0]
 800d366:	4605      	mov	r5, r0
 800d368:	b109      	cbz	r1, 800d36e <cleanup_glue+0xe>
 800d36a:	f7ff fff9 	bl	800d360 <cleanup_glue>
 800d36e:	4621      	mov	r1, r4
 800d370:	4628      	mov	r0, r5
 800d372:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d376:	f000 b869 	b.w	800d44c <_free_r>
	...

0800d37c <_reclaim_reent>:
 800d37c:	4b2c      	ldr	r3, [pc, #176]	; (800d430 <_reclaim_reent+0xb4>)
 800d37e:	681b      	ldr	r3, [r3, #0]
 800d380:	4283      	cmp	r3, r0
 800d382:	b570      	push	{r4, r5, r6, lr}
 800d384:	4604      	mov	r4, r0
 800d386:	d051      	beq.n	800d42c <_reclaim_reent+0xb0>
 800d388:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800d38a:	b143      	cbz	r3, 800d39e <_reclaim_reent+0x22>
 800d38c:	68db      	ldr	r3, [r3, #12]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d14a      	bne.n	800d428 <_reclaim_reent+0xac>
 800d392:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d394:	6819      	ldr	r1, [r3, #0]
 800d396:	b111      	cbz	r1, 800d39e <_reclaim_reent+0x22>
 800d398:	4620      	mov	r0, r4
 800d39a:	f000 f857 	bl	800d44c <_free_r>
 800d39e:	6961      	ldr	r1, [r4, #20]
 800d3a0:	b111      	cbz	r1, 800d3a8 <_reclaim_reent+0x2c>
 800d3a2:	4620      	mov	r0, r4
 800d3a4:	f000 f852 	bl	800d44c <_free_r>
 800d3a8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800d3aa:	b111      	cbz	r1, 800d3b2 <_reclaim_reent+0x36>
 800d3ac:	4620      	mov	r0, r4
 800d3ae:	f000 f84d 	bl	800d44c <_free_r>
 800d3b2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800d3b4:	b111      	cbz	r1, 800d3bc <_reclaim_reent+0x40>
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	f000 f848 	bl	800d44c <_free_r>
 800d3bc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800d3be:	b111      	cbz	r1, 800d3c6 <_reclaim_reent+0x4a>
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f000 f843 	bl	800d44c <_free_r>
 800d3c6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800d3c8:	b111      	cbz	r1, 800d3d0 <_reclaim_reent+0x54>
 800d3ca:	4620      	mov	r0, r4
 800d3cc:	f000 f83e 	bl	800d44c <_free_r>
 800d3d0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800d3d2:	b111      	cbz	r1, 800d3da <_reclaim_reent+0x5e>
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f000 f839 	bl	800d44c <_free_r>
 800d3da:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800d3dc:	b111      	cbz	r1, 800d3e4 <_reclaim_reent+0x68>
 800d3de:	4620      	mov	r0, r4
 800d3e0:	f000 f834 	bl	800d44c <_free_r>
 800d3e4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d3e6:	b111      	cbz	r1, 800d3ee <_reclaim_reent+0x72>
 800d3e8:	4620      	mov	r0, r4
 800d3ea:	f000 f82f 	bl	800d44c <_free_r>
 800d3ee:	69a3      	ldr	r3, [r4, #24]
 800d3f0:	b1e3      	cbz	r3, 800d42c <_reclaim_reent+0xb0>
 800d3f2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800d3f4:	4620      	mov	r0, r4
 800d3f6:	4798      	blx	r3
 800d3f8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800d3fa:	b1b9      	cbz	r1, 800d42c <_reclaim_reent+0xb0>
 800d3fc:	4620      	mov	r0, r4
 800d3fe:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800d402:	f7ff bfad 	b.w	800d360 <cleanup_glue>
 800d406:	5949      	ldr	r1, [r1, r5]
 800d408:	b941      	cbnz	r1, 800d41c <_reclaim_reent+0xa0>
 800d40a:	3504      	adds	r5, #4
 800d40c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d40e:	2d80      	cmp	r5, #128	; 0x80
 800d410:	68d9      	ldr	r1, [r3, #12]
 800d412:	d1f8      	bne.n	800d406 <_reclaim_reent+0x8a>
 800d414:	4620      	mov	r0, r4
 800d416:	f000 f819 	bl	800d44c <_free_r>
 800d41a:	e7ba      	b.n	800d392 <_reclaim_reent+0x16>
 800d41c:	680e      	ldr	r6, [r1, #0]
 800d41e:	4620      	mov	r0, r4
 800d420:	f000 f814 	bl	800d44c <_free_r>
 800d424:	4631      	mov	r1, r6
 800d426:	e7ef      	b.n	800d408 <_reclaim_reent+0x8c>
 800d428:	2500      	movs	r5, #0
 800d42a:	e7ef      	b.n	800d40c <_reclaim_reent+0x90>
 800d42c:	bd70      	pop	{r4, r5, r6, pc}
 800d42e:	bf00      	nop
 800d430:	20000014 	.word	0x20000014

0800d434 <__malloc_lock>:
 800d434:	4801      	ldr	r0, [pc, #4]	; (800d43c <__malloc_lock+0x8>)
 800d436:	f7ff bf7b 	b.w	800d330 <__retarget_lock_acquire_recursive>
 800d43a:	bf00      	nop
 800d43c:	2000261c 	.word	0x2000261c

0800d440 <__malloc_unlock>:
 800d440:	4801      	ldr	r0, [pc, #4]	; (800d448 <__malloc_unlock+0x8>)
 800d442:	f7ff bf76 	b.w	800d332 <__retarget_lock_release_recursive>
 800d446:	bf00      	nop
 800d448:	2000261c 	.word	0x2000261c

0800d44c <_free_r>:
 800d44c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d44e:	2900      	cmp	r1, #0
 800d450:	d044      	beq.n	800d4dc <_free_r+0x90>
 800d452:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d456:	9001      	str	r0, [sp, #4]
 800d458:	2b00      	cmp	r3, #0
 800d45a:	f1a1 0404 	sub.w	r4, r1, #4
 800d45e:	bfb8      	it	lt
 800d460:	18e4      	addlt	r4, r4, r3
 800d462:	f7ff ffe7 	bl	800d434 <__malloc_lock>
 800d466:	4a1e      	ldr	r2, [pc, #120]	; (800d4e0 <_free_r+0x94>)
 800d468:	9801      	ldr	r0, [sp, #4]
 800d46a:	6813      	ldr	r3, [r2, #0]
 800d46c:	b933      	cbnz	r3, 800d47c <_free_r+0x30>
 800d46e:	6063      	str	r3, [r4, #4]
 800d470:	6014      	str	r4, [r2, #0]
 800d472:	b003      	add	sp, #12
 800d474:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d478:	f7ff bfe2 	b.w	800d440 <__malloc_unlock>
 800d47c:	42a3      	cmp	r3, r4
 800d47e:	d908      	bls.n	800d492 <_free_r+0x46>
 800d480:	6825      	ldr	r5, [r4, #0]
 800d482:	1961      	adds	r1, r4, r5
 800d484:	428b      	cmp	r3, r1
 800d486:	bf01      	itttt	eq
 800d488:	6819      	ldreq	r1, [r3, #0]
 800d48a:	685b      	ldreq	r3, [r3, #4]
 800d48c:	1949      	addeq	r1, r1, r5
 800d48e:	6021      	streq	r1, [r4, #0]
 800d490:	e7ed      	b.n	800d46e <_free_r+0x22>
 800d492:	461a      	mov	r2, r3
 800d494:	685b      	ldr	r3, [r3, #4]
 800d496:	b10b      	cbz	r3, 800d49c <_free_r+0x50>
 800d498:	42a3      	cmp	r3, r4
 800d49a:	d9fa      	bls.n	800d492 <_free_r+0x46>
 800d49c:	6811      	ldr	r1, [r2, #0]
 800d49e:	1855      	adds	r5, r2, r1
 800d4a0:	42a5      	cmp	r5, r4
 800d4a2:	d10b      	bne.n	800d4bc <_free_r+0x70>
 800d4a4:	6824      	ldr	r4, [r4, #0]
 800d4a6:	4421      	add	r1, r4
 800d4a8:	1854      	adds	r4, r2, r1
 800d4aa:	42a3      	cmp	r3, r4
 800d4ac:	6011      	str	r1, [r2, #0]
 800d4ae:	d1e0      	bne.n	800d472 <_free_r+0x26>
 800d4b0:	681c      	ldr	r4, [r3, #0]
 800d4b2:	685b      	ldr	r3, [r3, #4]
 800d4b4:	6053      	str	r3, [r2, #4]
 800d4b6:	4421      	add	r1, r4
 800d4b8:	6011      	str	r1, [r2, #0]
 800d4ba:	e7da      	b.n	800d472 <_free_r+0x26>
 800d4bc:	d902      	bls.n	800d4c4 <_free_r+0x78>
 800d4be:	230c      	movs	r3, #12
 800d4c0:	6003      	str	r3, [r0, #0]
 800d4c2:	e7d6      	b.n	800d472 <_free_r+0x26>
 800d4c4:	6825      	ldr	r5, [r4, #0]
 800d4c6:	1961      	adds	r1, r4, r5
 800d4c8:	428b      	cmp	r3, r1
 800d4ca:	bf04      	itt	eq
 800d4cc:	6819      	ldreq	r1, [r3, #0]
 800d4ce:	685b      	ldreq	r3, [r3, #4]
 800d4d0:	6063      	str	r3, [r4, #4]
 800d4d2:	bf04      	itt	eq
 800d4d4:	1949      	addeq	r1, r1, r5
 800d4d6:	6021      	streq	r1, [r4, #0]
 800d4d8:	6054      	str	r4, [r2, #4]
 800d4da:	e7ca      	b.n	800d472 <_free_r+0x26>
 800d4dc:	b003      	add	sp, #12
 800d4de:	bd30      	pop	{r4, r5, pc}
 800d4e0:	20002620 	.word	0x20002620
 800d4e4:	00000000 	.word	0x00000000

0800d4e8 <cos>:
 800d4e8:	ec51 0b10 	vmov	r0, r1, d0
 800d4ec:	4a20      	ldr	r2, [pc, #128]	; (800d570 <cos+0x88>)
 800d4ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d4f2:	4293      	cmp	r3, r2
 800d4f4:	dd20      	ble.n	800d538 <cos+0x50>
 800d4f6:	b500      	push	{lr}
 800d4f8:	4a1e      	ldr	r2, [pc, #120]	; (800d574 <cos+0x8c>)
 800d4fa:	4293      	cmp	r3, r2
 800d4fc:	b085      	sub	sp, #20
 800d4fe:	dd09      	ble.n	800d514 <cos+0x2c>
 800d500:	ee10 2a10 	vmov	r2, s0
 800d504:	460b      	mov	r3, r1
 800d506:	f7f2 fe6f 	bl	80001e8 <__aeabi_dsub>
 800d50a:	ec41 0b10 	vmov	d0, r0, r1
 800d50e:	b005      	add	sp, #20
 800d510:	f85d fb04 	ldr.w	pc, [sp], #4
 800d514:	4668      	mov	r0, sp
 800d516:	f000 feab 	bl	800e270 <__ieee754_rem_pio2>
 800d51a:	f000 0003 	and.w	r0, r0, #3
 800d51e:	2801      	cmp	r0, #1
 800d520:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d524:	ed9d 0b00 	vldr	d0, [sp]
 800d528:	d00a      	beq.n	800d540 <cos+0x58>
 800d52a:	2802      	cmp	r0, #2
 800d52c:	d016      	beq.n	800d55c <cos+0x74>
 800d52e:	b190      	cbz	r0, 800d556 <cos+0x6e>
 800d530:	2001      	movs	r0, #1
 800d532:	f001 fef9 	bl	800f328 <__kernel_sin>
 800d536:	e7ea      	b.n	800d50e <cos+0x26>
 800d538:	ed9f 1b0b 	vldr	d1, [pc, #44]	; 800d568 <cos+0x80>
 800d53c:	f001 b98c 	b.w	800e858 <__kernel_cos>
 800d540:	f001 fef2 	bl	800f328 <__kernel_sin>
 800d544:	ec53 2b10 	vmov	r2, r3, d0
 800d548:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d54c:	ee00 3a90 	vmov	s1, r3
 800d550:	b005      	add	sp, #20
 800d552:	f85d fb04 	ldr.w	pc, [sp], #4
 800d556:	f001 f97f 	bl	800e858 <__kernel_cos>
 800d55a:	e7d8      	b.n	800d50e <cos+0x26>
 800d55c:	f001 f97c 	bl	800e858 <__kernel_cos>
 800d560:	e7f0      	b.n	800d544 <cos+0x5c>
 800d562:	bf00      	nop
 800d564:	f3af 8000 	nop.w
	...
 800d570:	3fe921fb 	.word	0x3fe921fb
 800d574:	7fefffff 	.word	0x7fefffff

0800d578 <sin>:
 800d578:	ec51 0b10 	vmov	r0, r1, d0
 800d57c:	4a20      	ldr	r2, [pc, #128]	; (800d600 <sin+0x88>)
 800d57e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800d582:	4293      	cmp	r3, r2
 800d584:	dd27      	ble.n	800d5d6 <sin+0x5e>
 800d586:	b500      	push	{lr}
 800d588:	4a1e      	ldr	r2, [pc, #120]	; (800d604 <sin+0x8c>)
 800d58a:	4293      	cmp	r3, r2
 800d58c:	b085      	sub	sp, #20
 800d58e:	dd09      	ble.n	800d5a4 <sin+0x2c>
 800d590:	ee10 2a10 	vmov	r2, s0
 800d594:	460b      	mov	r3, r1
 800d596:	f7f2 fe27 	bl	80001e8 <__aeabi_dsub>
 800d59a:	ec41 0b10 	vmov	d0, r0, r1
 800d59e:	b005      	add	sp, #20
 800d5a0:	f85d fb04 	ldr.w	pc, [sp], #4
 800d5a4:	4668      	mov	r0, sp
 800d5a6:	f000 fe63 	bl	800e270 <__ieee754_rem_pio2>
 800d5aa:	f000 0003 	and.w	r0, r0, #3
 800d5ae:	2801      	cmp	r0, #1
 800d5b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800d5b4:	ed9d 0b00 	vldr	d0, [sp]
 800d5b8:	d012      	beq.n	800d5e0 <sin+0x68>
 800d5ba:	2802      	cmp	r0, #2
 800d5bc:	d017      	beq.n	800d5ee <sin+0x76>
 800d5be:	b190      	cbz	r0, 800d5e6 <sin+0x6e>
 800d5c0:	f001 f94a 	bl	800e858 <__kernel_cos>
 800d5c4:	ec53 2b10 	vmov	r2, r3, d0
 800d5c8:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800d5cc:	ee00 3a90 	vmov	s1, r3
 800d5d0:	b005      	add	sp, #20
 800d5d2:	f85d fb04 	ldr.w	pc, [sp], #4
 800d5d6:	ed9f 1b08 	vldr	d1, [pc, #32]	; 800d5f8 <sin+0x80>
 800d5da:	2000      	movs	r0, #0
 800d5dc:	f001 bea4 	b.w	800f328 <__kernel_sin>
 800d5e0:	f001 f93a 	bl	800e858 <__kernel_cos>
 800d5e4:	e7db      	b.n	800d59e <sin+0x26>
 800d5e6:	2001      	movs	r0, #1
 800d5e8:	f001 fe9e 	bl	800f328 <__kernel_sin>
 800d5ec:	e7d7      	b.n	800d59e <sin+0x26>
 800d5ee:	2001      	movs	r0, #1
 800d5f0:	f001 fe9a 	bl	800f328 <__kernel_sin>
 800d5f4:	e7e6      	b.n	800d5c4 <sin+0x4c>
 800d5f6:	bf00      	nop
	...
 800d600:	3fe921fb 	.word	0x3fe921fb
 800d604:	7fefffff 	.word	0x7fefffff

0800d608 <pow>:
 800d608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d60a:	ed2d 8b02 	vpush	{d8}
 800d60e:	ec55 4b11 	vmov	r4, r5, d1
 800d612:	ec57 6b10 	vmov	r6, r7, d0
 800d616:	f000 f86f 	bl	800d6f8 <__ieee754_pow>
 800d61a:	4622      	mov	r2, r4
 800d61c:	462b      	mov	r3, r5
 800d61e:	4620      	mov	r0, r4
 800d620:	4629      	mov	r1, r5
 800d622:	eeb0 8a40 	vmov.f32	s16, s0
 800d626:	eef0 8a60 	vmov.f32	s17, s1
 800d62a:	f7f3 fa2f 	bl	8000a8c <__aeabi_dcmpun>
 800d62e:	b978      	cbnz	r0, 800d650 <pow+0x48>
 800d630:	2200      	movs	r2, #0
 800d632:	2300      	movs	r3, #0
 800d634:	4630      	mov	r0, r6
 800d636:	4639      	mov	r1, r7
 800d638:	f7f3 f9f6 	bl	8000a28 <__aeabi_dcmpeq>
 800d63c:	b1f0      	cbz	r0, 800d67c <pow+0x74>
 800d63e:	2200      	movs	r2, #0
 800d640:	2300      	movs	r3, #0
 800d642:	4620      	mov	r0, r4
 800d644:	4629      	mov	r1, r5
 800d646:	f7f3 f9ef 	bl	8000a28 <__aeabi_dcmpeq>
 800d64a:	b140      	cbz	r0, 800d65e <pow+0x56>
 800d64c:	ed9f 8b28 	vldr	d8, [pc, #160]	; 800d6f0 <pow+0xe8>
 800d650:	eeb0 0a48 	vmov.f32	s0, s16
 800d654:	eef0 0a68 	vmov.f32	s1, s17
 800d658:	ecbd 8b02 	vpop	{d8}
 800d65c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d65e:	ec45 4b10 	vmov	d0, r4, r5
 800d662:	f001 ff5f 	bl	800f524 <finite>
 800d666:	2800      	cmp	r0, #0
 800d668:	d0f2      	beq.n	800d650 <pow+0x48>
 800d66a:	4620      	mov	r0, r4
 800d66c:	4629      	mov	r1, r5
 800d66e:	2200      	movs	r2, #0
 800d670:	2300      	movs	r3, #0
 800d672:	f7f3 f9e3 	bl	8000a3c <__aeabi_dcmplt>
 800d676:	2800      	cmp	r0, #0
 800d678:	d0ea      	beq.n	800d650 <pow+0x48>
 800d67a:	e02e      	b.n	800d6da <pow+0xd2>
 800d67c:	eeb0 0a48 	vmov.f32	s0, s16
 800d680:	eef0 0a68 	vmov.f32	s1, s17
 800d684:	f001 ff4e 	bl	800f524 <finite>
 800d688:	b1a0      	cbz	r0, 800d6b4 <pow+0xac>
 800d68a:	ec51 0b18 	vmov	r0, r1, d8
 800d68e:	2200      	movs	r2, #0
 800d690:	2300      	movs	r3, #0
 800d692:	f7f3 f9c9 	bl	8000a28 <__aeabi_dcmpeq>
 800d696:	2800      	cmp	r0, #0
 800d698:	d0da      	beq.n	800d650 <pow+0x48>
 800d69a:	ec47 6b10 	vmov	d0, r6, r7
 800d69e:	f001 ff41 	bl	800f524 <finite>
 800d6a2:	2800      	cmp	r0, #0
 800d6a4:	d0d4      	beq.n	800d650 <pow+0x48>
 800d6a6:	ec45 4b10 	vmov	d0, r4, r5
 800d6aa:	f001 ff3b 	bl	800f524 <finite>
 800d6ae:	2800      	cmp	r0, #0
 800d6b0:	d0ce      	beq.n	800d650 <pow+0x48>
 800d6b2:	e012      	b.n	800d6da <pow+0xd2>
 800d6b4:	ec47 6b10 	vmov	d0, r6, r7
 800d6b8:	f001 ff34 	bl	800f524 <finite>
 800d6bc:	2800      	cmp	r0, #0
 800d6be:	d0e4      	beq.n	800d68a <pow+0x82>
 800d6c0:	ec45 4b10 	vmov	d0, r4, r5
 800d6c4:	f001 ff2e 	bl	800f524 <finite>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d0de      	beq.n	800d68a <pow+0x82>
 800d6cc:	ec53 2b18 	vmov	r2, r3, d8
 800d6d0:	ec51 0b18 	vmov	r0, r1, d8
 800d6d4:	f7f3 f9da 	bl	8000a8c <__aeabi_dcmpun>
 800d6d8:	b920      	cbnz	r0, 800d6e4 <pow+0xdc>
 800d6da:	f7ff fdff 	bl	800d2dc <__errno>
 800d6de:	2322      	movs	r3, #34	; 0x22
 800d6e0:	6003      	str	r3, [r0, #0]
 800d6e2:	e7b5      	b.n	800d650 <pow+0x48>
 800d6e4:	f7ff fdfa 	bl	800d2dc <__errno>
 800d6e8:	2321      	movs	r3, #33	; 0x21
 800d6ea:	6003      	str	r3, [r0, #0]
 800d6ec:	e7b0      	b.n	800d650 <pow+0x48>
 800d6ee:	bf00      	nop
 800d6f0:	00000000 	.word	0x00000000
 800d6f4:	3ff00000 	.word	0x3ff00000

0800d6f8 <__ieee754_pow>:
 800d6f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6fc:	ec55 4b11 	vmov	r4, r5, d1
 800d700:	ed2d 8b0c 	vpush	{d8-d13}
 800d704:	f025 4a00 	bic.w	sl, r5, #2147483648	; 0x80000000
 800d708:	ea5a 0104 	orrs.w	r1, sl, r4
 800d70c:	ec57 6b10 	vmov	r6, r7, d0
 800d710:	b087      	sub	sp, #28
 800d712:	d115      	bne.n	800d740 <__ieee754_pow+0x48>
 800d714:	19b3      	adds	r3, r6, r6
 800d716:	487e      	ldr	r0, [pc, #504]	; (800d910 <__ieee754_pow+0x218>)
 800d718:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800d71c:	4152      	adcs	r2, r2
 800d71e:	4299      	cmp	r1, r3
 800d720:	eb70 0302 	sbcs.w	r3, r0, r2
 800d724:	d224      	bcs.n	800d770 <__ieee754_pow+0x78>
 800d726:	4622      	mov	r2, r4
 800d728:	462b      	mov	r3, r5
 800d72a:	4630      	mov	r0, r6
 800d72c:	4639      	mov	r1, r7
 800d72e:	f7f2 fd5d 	bl	80001ec <__adddf3>
 800d732:	ec41 0b10 	vmov	d0, r0, r1
 800d736:	b007      	add	sp, #28
 800d738:	ecbd 8b0c 	vpop	{d8-d13}
 800d73c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d740:	4974      	ldr	r1, [pc, #464]	; (800d914 <__ieee754_pow+0x21c>)
 800d742:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 800d746:	4589      	cmp	r9, r1
 800d748:	ee10 2a10 	vmov	r2, s0
 800d74c:	46b8      	mov	r8, r7
 800d74e:	dd16      	ble.n	800d77e <__ieee754_pow+0x86>
 800d750:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 800d754:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 800d758:	ea58 0802 	orrs.w	r8, r8, r2
 800d75c:	d1e3      	bne.n	800d726 <__ieee754_pow+0x2e>
 800d75e:	1923      	adds	r3, r4, r4
 800d760:	496b      	ldr	r1, [pc, #428]	; (800d910 <__ieee754_pow+0x218>)
 800d762:	f485 2200 	eor.w	r2, r5, #524288	; 0x80000
 800d766:	4152      	adcs	r2, r2
 800d768:	4598      	cmp	r8, r3
 800d76a:	eb71 0302 	sbcs.w	r3, r1, r2
 800d76e:	d3da      	bcc.n	800d726 <__ieee754_pow+0x2e>
 800d770:	ed9f 0b65 	vldr	d0, [pc, #404]	; 800d908 <__ieee754_pow+0x210>
 800d774:	b007      	add	sp, #28
 800d776:	ecbd 8b0c 	vpop	{d8-d13}
 800d77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d77e:	ee11 3a10 	vmov	r3, s2
 800d782:	46ab      	mov	fp, r5
 800d784:	d042      	beq.n	800d80c <__ieee754_pow+0x114>
 800d786:	4963      	ldr	r1, [pc, #396]	; (800d914 <__ieee754_pow+0x21c>)
 800d788:	458a      	cmp	sl, r1
 800d78a:	dce1      	bgt.n	800d750 <__ieee754_pow+0x58>
 800d78c:	f000 8094 	beq.w	800d8b8 <__ieee754_pow+0x1c0>
 800d790:	f1b8 0f00 	cmp.w	r8, #0
 800d794:	db73      	blt.n	800d87e <__ieee754_pow+0x186>
 800d796:	2100      	movs	r1, #0
 800d798:	9100      	str	r1, [sp, #0]
 800d79a:	b97b      	cbnz	r3, 800d7bc <__ieee754_pow+0xc4>
 800d79c:	4b5d      	ldr	r3, [pc, #372]	; (800d914 <__ieee754_pow+0x21c>)
 800d79e:	459a      	cmp	sl, r3
 800d7a0:	f000 808e 	beq.w	800d8c0 <__ieee754_pow+0x1c8>
 800d7a4:	4b5c      	ldr	r3, [pc, #368]	; (800d918 <__ieee754_pow+0x220>)
 800d7a6:	459a      	cmp	sl, r3
 800d7a8:	f000 80a2 	beq.w	800d8f0 <__ieee754_pow+0x1f8>
 800d7ac:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 800d7b0:	f000 84c2 	beq.w	800e138 <__ieee754_pow+0xa40>
 800d7b4:	4b59      	ldr	r3, [pc, #356]	; (800d91c <__ieee754_pow+0x224>)
 800d7b6:	459b      	cmp	fp, r3
 800d7b8:	f000 83d7 	beq.w	800df6a <__ieee754_pow+0x872>
 800d7bc:	ec47 6b10 	vmov	d0, r6, r7
 800d7c0:	9202      	str	r2, [sp, #8]
 800d7c2:	f001 fea5 	bl	800f510 <fabs>
 800d7c6:	9a02      	ldr	r2, [sp, #8]
 800d7c8:	b362      	cbz	r2, 800d824 <__ieee754_pow+0x12c>
 800d7ca:	9a00      	ldr	r2, [sp, #0]
 800d7cc:	ea4f 73d8 	mov.w	r3, r8, lsr #31
 800d7d0:	3b01      	subs	r3, #1
 800d7d2:	9304      	str	r3, [sp, #16]
 800d7d4:	4313      	orrs	r3, r2
 800d7d6:	f000 8092 	beq.w	800d8fe <__ieee754_pow+0x206>
 800d7da:	4b51      	ldr	r3, [pc, #324]	; (800d920 <__ieee754_pow+0x228>)
 800d7dc:	459a      	cmp	sl, r3
 800d7de:	f340 80a5 	ble.w	800d92c <__ieee754_pow+0x234>
 800d7e2:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800d7e6:	459a      	cmp	sl, r3
 800d7e8:	4b4e      	ldr	r3, [pc, #312]	; (800d924 <__ieee754_pow+0x22c>)
 800d7ea:	f340 843f 	ble.w	800e06c <__ieee754_pow+0x974>
 800d7ee:	4599      	cmp	r9, r3
 800d7f0:	f340 84b4 	ble.w	800e15c <__ieee754_pow+0xa64>
 800d7f4:	f1bb 0f00 	cmp.w	fp, #0
 800d7f8:	f340 84b4 	ble.w	800e164 <__ieee754_pow+0xa6c>
 800d7fc:	2000      	movs	r0, #0
 800d7fe:	b007      	add	sp, #28
 800d800:	ecbd 8b0c 	vpop	{d8-d13}
 800d804:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d808:	f001 be78 	b.w	800f4fc <__math_oflow>
 800d80c:	2e00      	cmp	r6, #0
 800d80e:	d18a      	bne.n	800d726 <__ieee754_pow+0x2e>
 800d810:	e7b9      	b.n	800d786 <__ieee754_pow+0x8e>
 800d812:	ec47 6b10 	vmov	d0, r6, r7
 800d816:	9200      	str	r2, [sp, #0]
 800d818:	f001 fe7a 	bl	800f510 <fabs>
 800d81c:	9a00      	ldr	r2, [sp, #0]
 800d81e:	2a00      	cmp	r2, #0
 800d820:	d16d      	bne.n	800d8fe <__ieee754_pow+0x206>
 800d822:	9200      	str	r2, [sp, #0]
 800d824:	f1b9 0f00 	cmp.w	r9, #0
 800d828:	d004      	beq.n	800d834 <__ieee754_pow+0x13c>
 800d82a:	4b3b      	ldr	r3, [pc, #236]	; (800d918 <__ieee754_pow+0x220>)
 800d82c:	f028 4240 	bic.w	r2, r8, #3221225472	; 0xc0000000
 800d830:	429a      	cmp	r2, r3
 800d832:	d1ca      	bne.n	800d7ca <__ieee754_pow+0xd2>
 800d834:	f1bb 0f00 	cmp.w	fp, #0
 800d838:	da07      	bge.n	800d84a <__ieee754_pow+0x152>
 800d83a:	ec53 2b10 	vmov	r2, r3, d0
 800d83e:	4936      	ldr	r1, [pc, #216]	; (800d918 <__ieee754_pow+0x220>)
 800d840:	2000      	movs	r0, #0
 800d842:	f7f2 ffb3 	bl	80007ac <__aeabi_ddiv>
 800d846:	ec41 0b10 	vmov	d0, r0, r1
 800d84a:	f1b8 0f00 	cmp.w	r8, #0
 800d84e:	f6bf af72 	bge.w	800d736 <__ieee754_pow+0x3e>
 800d852:	9b00      	ldr	r3, [sp, #0]
 800d854:	f109 4940 	add.w	r9, r9, #3221225472	; 0xc0000000
 800d858:	f509 1980 	add.w	r9, r9, #1048576	; 0x100000
 800d85c:	ea59 0303 	orrs.w	r3, r9, r3
 800d860:	f040 8490 	bne.w	800e184 <__ieee754_pow+0xa8c>
 800d864:	ec53 2b10 	vmov	r2, r3, d0
 800d868:	4610      	mov	r0, r2
 800d86a:	4619      	mov	r1, r3
 800d86c:	f7f2 fcbc 	bl	80001e8 <__aeabi_dsub>
 800d870:	4602      	mov	r2, r0
 800d872:	460b      	mov	r3, r1
 800d874:	f7f2 ff9a 	bl	80007ac <__aeabi_ddiv>
 800d878:	ec41 0b10 	vmov	d0, r0, r1
 800d87c:	e75b      	b.n	800d736 <__ieee754_pow+0x3e>
 800d87e:	492a      	ldr	r1, [pc, #168]	; (800d928 <__ieee754_pow+0x230>)
 800d880:	458a      	cmp	sl, r1
 800d882:	dc2f      	bgt.n	800d8e4 <__ieee754_pow+0x1ec>
 800d884:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800d888:	458a      	cmp	sl, r1
 800d88a:	dd0f      	ble.n	800d8ac <__ieee754_pow+0x1b4>
 800d88c:	ea4f 512a 	mov.w	r1, sl, asr #20
 800d890:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800d894:	2914      	cmp	r1, #20
 800d896:	f340 8467 	ble.w	800e168 <__ieee754_pow+0xa70>
 800d89a:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800d89e:	fa23 f001 	lsr.w	r0, r3, r1
 800d8a2:	fa00 f101 	lsl.w	r1, r0, r1
 800d8a6:	4299      	cmp	r1, r3
 800d8a8:	f000 84a5 	beq.w	800e1f6 <__ieee754_pow+0xafe>
 800d8ac:	2100      	movs	r1, #0
 800d8ae:	9100      	str	r1, [sp, #0]
 800d8b0:	2b00      	cmp	r3, #0
 800d8b2:	f43f af77 	beq.w	800d7a4 <__ieee754_pow+0xac>
 800d8b6:	e781      	b.n	800d7bc <__ieee754_pow+0xc4>
 800d8b8:	2b00      	cmp	r3, #0
 800d8ba:	f43f af69 	beq.w	800d790 <__ieee754_pow+0x98>
 800d8be:	e747      	b.n	800d750 <__ieee754_pow+0x58>
 800d8c0:	f109 4340 	add.w	r3, r9, #3221225472	; 0xc0000000
 800d8c4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800d8c8:	4313      	orrs	r3, r2
 800d8ca:	f43f af51 	beq.w	800d770 <__ieee754_pow+0x78>
 800d8ce:	4b15      	ldr	r3, [pc, #84]	; (800d924 <__ieee754_pow+0x22c>)
 800d8d0:	4599      	cmp	r9, r3
 800d8d2:	f340 8384 	ble.w	800dfde <__ieee754_pow+0x8e6>
 800d8d6:	f1bb 0f00 	cmp.w	fp, #0
 800d8da:	f2c0 8461 	blt.w	800e1a0 <__ieee754_pow+0xaa8>
 800d8de:	ec45 4b10 	vmov	d0, r4, r5
 800d8e2:	e728      	b.n	800d736 <__ieee754_pow+0x3e>
 800d8e4:	2102      	movs	r1, #2
 800d8e6:	9100      	str	r1, [sp, #0]
 800d8e8:	2b00      	cmp	r3, #0
 800d8ea:	f43f af57 	beq.w	800d79c <__ieee754_pow+0xa4>
 800d8ee:	e765      	b.n	800d7bc <__ieee754_pow+0xc4>
 800d8f0:	f1bb 0f00 	cmp.w	fp, #0
 800d8f4:	f2c0 8416 	blt.w	800e124 <__ieee754_pow+0xa2c>
 800d8f8:	ec47 6b10 	vmov	d0, r6, r7
 800d8fc:	e71b      	b.n	800d736 <__ieee754_pow+0x3e>
 800d8fe:	4632      	mov	r2, r6
 800d900:	463b      	mov	r3, r7
 800d902:	e7b1      	b.n	800d868 <__ieee754_pow+0x170>
 800d904:	f3af 8000 	nop.w
 800d908:	00000000 	.word	0x00000000
 800d90c:	3ff00000 	.word	0x3ff00000
 800d910:	fff00000 	.word	0xfff00000
 800d914:	7ff00000 	.word	0x7ff00000
 800d918:	3ff00000 	.word	0x3ff00000
 800d91c:	3fe00000 	.word	0x3fe00000
 800d920:	41e00000 	.word	0x41e00000
 800d924:	3fefffff 	.word	0x3fefffff
 800d928:	433fffff 	.word	0x433fffff
 800d92c:	4be4      	ldr	r3, [pc, #912]	; (800dcc0 <__ieee754_pow+0x5c8>)
 800d92e:	ea08 0303 	and.w	r3, r8, r3
 800d932:	2200      	movs	r2, #0
 800d934:	b953      	cbnz	r3, 800d94c <__ieee754_pow+0x254>
 800d936:	ec51 0b10 	vmov	r0, r1, d0
 800d93a:	4be2      	ldr	r3, [pc, #904]	; (800dcc4 <__ieee754_pow+0x5cc>)
 800d93c:	f7f2 fe0c 	bl	8000558 <__aeabi_dmul>
 800d940:	ec41 0b10 	vmov	d0, r0, r1
 800d944:	ee10 9a90 	vmov	r9, s1
 800d948:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800d94c:	ea4f 5329 	mov.w	r3, r9, asr #20
 800d950:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800d954:	189a      	adds	r2, r3, r2
 800d956:	4bdc      	ldr	r3, [pc, #880]	; (800dcc8 <__ieee754_pow+0x5d0>)
 800d958:	9205      	str	r2, [sp, #20]
 800d95a:	f3c9 0913 	ubfx	r9, r9, #0, #20
 800d95e:	f049 567f 	orr.w	r6, r9, #1069547520	; 0x3fc00000
 800d962:	4599      	cmp	r9, r3
 800d964:	f446 1640 	orr.w	r6, r6, #3145728	; 0x300000
 800d968:	dd07      	ble.n	800d97a <__ieee754_pow+0x282>
 800d96a:	4bd8      	ldr	r3, [pc, #864]	; (800dccc <__ieee754_pow+0x5d4>)
 800d96c:	4599      	cmp	r9, r3
 800d96e:	f340 841b 	ble.w	800e1a8 <__ieee754_pow+0xab0>
 800d972:	3201      	adds	r2, #1
 800d974:	9205      	str	r2, [sp, #20]
 800d976:	f5a6 1680 	sub.w	r6, r6, #1048576	; 0x100000
 800d97a:	ed9f 6bb9 	vldr	d6, [pc, #740]	; 800dc60 <__ieee754_pow+0x568>
 800d97e:	ed9f 7bba 	vldr	d7, [pc, #744]	; 800dc68 <__ieee754_pow+0x570>
 800d982:	ec53 2b16 	vmov	r2, r3, d6
 800d986:	eeb0 ca47 	vmov.f32	s24, s14
 800d98a:	eef0 ca67 	vmov.f32	s25, s15
 800d98e:	2700      	movs	r7, #0
 800d990:	eeb0 da47 	vmov.f32	s26, s14
 800d994:	eef0 da67 	vmov.f32	s27, s15
 800d998:	ec5b ab10 	vmov	sl, fp, d0
 800d99c:	46b3      	mov	fp, r6
 800d99e:	4650      	mov	r0, sl
 800d9a0:	4659      	mov	r1, fp
 800d9a2:	ec43 2b1a 	vmov	d10, r2, r3
 800d9a6:	f7f2 fc1f 	bl	80001e8 <__aeabi_dsub>
 800d9aa:	ec53 2b1a 	vmov	r2, r3, d10
 800d9ae:	4680      	mov	r8, r0
 800d9b0:	4689      	mov	r9, r1
 800d9b2:	4650      	mov	r0, sl
 800d9b4:	4659      	mov	r1, fp
 800d9b6:	f7f2 fc19 	bl	80001ec <__adddf3>
 800d9ba:	4602      	mov	r2, r0
 800d9bc:	460b      	mov	r3, r1
 800d9be:	2000      	movs	r0, #0
 800d9c0:	49c3      	ldr	r1, [pc, #780]	; (800dcd0 <__ieee754_pow+0x5d8>)
 800d9c2:	f7f2 fef3 	bl	80007ac <__aeabi_ddiv>
 800d9c6:	ec41 0b1b 	vmov	d11, r0, r1
 800d9ca:	4640      	mov	r0, r8
 800d9cc:	ec53 2b1b 	vmov	r2, r3, d11
 800d9d0:	4649      	mov	r1, r9
 800d9d2:	f7f2 fdc1 	bl	8000558 <__aeabi_dmul>
 800d9d6:	ec41 0b18 	vmov	d8, r0, r1
 800d9da:	460a      	mov	r2, r1
 800d9dc:	4601      	mov	r1, r0
 800d9de:	e9cd 1202 	strd	r1, r2, [sp, #8]
 800d9e2:	2100      	movs	r1, #0
 800d9e4:	9102      	str	r1, [sp, #8]
 800d9e6:	1076      	asrs	r6, r6, #1
 800d9e8:	ec4b ab19 	vmov	d9, sl, fp
 800d9ec:	f046 5600 	orr.w	r6, r6, #536870912	; 0x20000000
 800d9f0:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 800d9f4:	f506 2300 	add.w	r3, r6, #524288	; 0x80000
 800d9f8:	2000      	movs	r0, #0
 800d9fa:	19d9      	adds	r1, r3, r7
 800d9fc:	4606      	mov	r6, r0
 800d9fe:	460f      	mov	r7, r1
 800da00:	4602      	mov	r2, r0
 800da02:	460b      	mov	r3, r1
 800da04:	4650      	mov	r0, sl
 800da06:	4659      	mov	r1, fp
 800da08:	f7f2 fda6 	bl	8000558 <__aeabi_dmul>
 800da0c:	4602      	mov	r2, r0
 800da0e:	460b      	mov	r3, r1
 800da10:	4640      	mov	r0, r8
 800da12:	4649      	mov	r1, r9
 800da14:	f7f2 fbe8 	bl	80001e8 <__aeabi_dsub>
 800da18:	ec53 2b1a 	vmov	r2, r3, d10
 800da1c:	4680      	mov	r8, r0
 800da1e:	4689      	mov	r9, r1
 800da20:	4630      	mov	r0, r6
 800da22:	4639      	mov	r1, r7
 800da24:	f7f2 fbe0 	bl	80001e8 <__aeabi_dsub>
 800da28:	4602      	mov	r2, r0
 800da2a:	460b      	mov	r3, r1
 800da2c:	ec51 0b19 	vmov	r0, r1, d9
 800da30:	f7f2 fbda 	bl	80001e8 <__aeabi_dsub>
 800da34:	4652      	mov	r2, sl
 800da36:	465b      	mov	r3, fp
 800da38:	f7f2 fd8e 	bl	8000558 <__aeabi_dmul>
 800da3c:	4602      	mov	r2, r0
 800da3e:	460b      	mov	r3, r1
 800da40:	4640      	mov	r0, r8
 800da42:	4649      	mov	r1, r9
 800da44:	f7f2 fbd0 	bl	80001e8 <__aeabi_dsub>
 800da48:	ec53 2b1b 	vmov	r2, r3, d11
 800da4c:	f7f2 fd84 	bl	8000558 <__aeabi_dmul>
 800da50:	ec53 2b18 	vmov	r2, r3, d8
 800da54:	ec41 0b1b 	vmov	d11, r0, r1
 800da58:	ec51 0b18 	vmov	r0, r1, d8
 800da5c:	f7f2 fd7c 	bl	8000558 <__aeabi_dmul>
 800da60:	a383      	add	r3, pc, #524	; (adr r3, 800dc70 <__ieee754_pow+0x578>)
 800da62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da66:	4606      	mov	r6, r0
 800da68:	460f      	mov	r7, r1
 800da6a:	f7f2 fd75 	bl	8000558 <__aeabi_dmul>
 800da6e:	a382      	add	r3, pc, #520	; (adr r3, 800dc78 <__ieee754_pow+0x580>)
 800da70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da74:	f7f2 fbba 	bl	80001ec <__adddf3>
 800da78:	4632      	mov	r2, r6
 800da7a:	463b      	mov	r3, r7
 800da7c:	f7f2 fd6c 	bl	8000558 <__aeabi_dmul>
 800da80:	a37f      	add	r3, pc, #508	; (adr r3, 800dc80 <__ieee754_pow+0x588>)
 800da82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da86:	f7f2 fbb1 	bl	80001ec <__adddf3>
 800da8a:	4632      	mov	r2, r6
 800da8c:	463b      	mov	r3, r7
 800da8e:	f7f2 fd63 	bl	8000558 <__aeabi_dmul>
 800da92:	a37d      	add	r3, pc, #500	; (adr r3, 800dc88 <__ieee754_pow+0x590>)
 800da94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800da98:	f7f2 fba8 	bl	80001ec <__adddf3>
 800da9c:	4632      	mov	r2, r6
 800da9e:	463b      	mov	r3, r7
 800daa0:	f7f2 fd5a 	bl	8000558 <__aeabi_dmul>
 800daa4:	a37a      	add	r3, pc, #488	; (adr r3, 800dc90 <__ieee754_pow+0x598>)
 800daa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800daaa:	f7f2 fb9f 	bl	80001ec <__adddf3>
 800daae:	4632      	mov	r2, r6
 800dab0:	463b      	mov	r3, r7
 800dab2:	f7f2 fd51 	bl	8000558 <__aeabi_dmul>
 800dab6:	a378      	add	r3, pc, #480	; (adr r3, 800dc98 <__ieee754_pow+0x5a0>)
 800dab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dabc:	f7f2 fb96 	bl	80001ec <__adddf3>
 800dac0:	4632      	mov	r2, r6
 800dac2:	4680      	mov	r8, r0
 800dac4:	4689      	mov	r9, r1
 800dac6:	463b      	mov	r3, r7
 800dac8:	4630      	mov	r0, r6
 800daca:	4639      	mov	r1, r7
 800dacc:	f7f2 fd44 	bl	8000558 <__aeabi_dmul>
 800dad0:	4602      	mov	r2, r0
 800dad2:	460b      	mov	r3, r1
 800dad4:	4640      	mov	r0, r8
 800dad6:	4649      	mov	r1, r9
 800dad8:	f7f2 fd3e 	bl	8000558 <__aeabi_dmul>
 800dadc:	4652      	mov	r2, sl
 800dade:	4606      	mov	r6, r0
 800dae0:	460f      	mov	r7, r1
 800dae2:	465b      	mov	r3, fp
 800dae4:	ec51 0b18 	vmov	r0, r1, d8
 800dae8:	f7f2 fb80 	bl	80001ec <__adddf3>
 800daec:	ec53 2b1b 	vmov	r2, r3, d11
 800daf0:	f7f2 fd32 	bl	8000558 <__aeabi_dmul>
 800daf4:	4632      	mov	r2, r6
 800daf6:	463b      	mov	r3, r7
 800daf8:	f7f2 fb78 	bl	80001ec <__adddf3>
 800dafc:	4652      	mov	r2, sl
 800dafe:	ec41 0b1a 	vmov	d10, r0, r1
 800db02:	465b      	mov	r3, fp
 800db04:	4650      	mov	r0, sl
 800db06:	4659      	mov	r1, fp
 800db08:	f7f2 fd26 	bl	8000558 <__aeabi_dmul>
 800db0c:	4b71      	ldr	r3, [pc, #452]	; (800dcd4 <__ieee754_pow+0x5dc>)
 800db0e:	2200      	movs	r2, #0
 800db10:	4680      	mov	r8, r0
 800db12:	4689      	mov	r9, r1
 800db14:	f7f2 fb6a 	bl	80001ec <__adddf3>
 800db18:	ec53 2b1a 	vmov	r2, r3, d10
 800db1c:	f7f2 fb66 	bl	80001ec <__adddf3>
 800db20:	4650      	mov	r0, sl
 800db22:	460f      	mov	r7, r1
 800db24:	4659      	mov	r1, fp
 800db26:	e9dd ab02 	ldrd	sl, fp, [sp, #8]
 800db2a:	463b      	mov	r3, r7
 800db2c:	4652      	mov	r2, sl
 800db2e:	f7f2 fd13 	bl	8000558 <__aeabi_dmul>
 800db32:	4b68      	ldr	r3, [pc, #416]	; (800dcd4 <__ieee754_pow+0x5dc>)
 800db34:	ec41 0b19 	vmov	d9, r0, r1
 800db38:	2200      	movs	r2, #0
 800db3a:	4650      	mov	r0, sl
 800db3c:	4639      	mov	r1, r7
 800db3e:	f7f2 fb53 	bl	80001e8 <__aeabi_dsub>
 800db42:	4642      	mov	r2, r8
 800db44:	464b      	mov	r3, r9
 800db46:	f7f2 fb4f 	bl	80001e8 <__aeabi_dsub>
 800db4a:	4602      	mov	r2, r0
 800db4c:	460b      	mov	r3, r1
 800db4e:	ec51 0b1a 	vmov	r0, r1, d10
 800db52:	f7f2 fb49 	bl	80001e8 <__aeabi_dsub>
 800db56:	ec53 2b18 	vmov	r2, r3, d8
 800db5a:	f7f2 fcfd 	bl	8000558 <__aeabi_dmul>
 800db5e:	4652      	mov	r2, sl
 800db60:	463b      	mov	r3, r7
 800db62:	4606      	mov	r6, r0
 800db64:	460f      	mov	r7, r1
 800db66:	ec51 0b1b 	vmov	r0, r1, d11
 800db6a:	f7f2 fcf5 	bl	8000558 <__aeabi_dmul>
 800db6e:	4602      	mov	r2, r0
 800db70:	460b      	mov	r3, r1
 800db72:	4630      	mov	r0, r6
 800db74:	4639      	mov	r1, r7
 800db76:	f7f2 fb39 	bl	80001ec <__adddf3>
 800db7a:	4680      	mov	r8, r0
 800db7c:	4689      	mov	r9, r1
 800db7e:	4642      	mov	r2, r8
 800db80:	464b      	mov	r3, r9
 800db82:	ec51 0b19 	vmov	r0, r1, d9
 800db86:	f7f2 fb31 	bl	80001ec <__adddf3>
 800db8a:	a345      	add	r3, pc, #276	; (adr r3, 800dca0 <__ieee754_pow+0x5a8>)
 800db8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db90:	4650      	mov	r0, sl
 800db92:	460f      	mov	r7, r1
 800db94:	f7f2 fce0 	bl	8000558 <__aeabi_dmul>
 800db98:	ec53 2b19 	vmov	r2, r3, d9
 800db9c:	ec41 0b19 	vmov	d9, r0, r1
 800dba0:	4650      	mov	r0, sl
 800dba2:	4639      	mov	r1, r7
 800dba4:	f7f2 fb20 	bl	80001e8 <__aeabi_dsub>
 800dba8:	4602      	mov	r2, r0
 800dbaa:	460b      	mov	r3, r1
 800dbac:	4640      	mov	r0, r8
 800dbae:	4649      	mov	r1, r9
 800dbb0:	f7f2 fb1a 	bl	80001e8 <__aeabi_dsub>
 800dbb4:	a33c      	add	r3, pc, #240	; (adr r3, 800dca8 <__ieee754_pow+0x5b0>)
 800dbb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbba:	f7f2 fccd 	bl	8000558 <__aeabi_dmul>
 800dbbe:	4602      	mov	r2, r0
 800dbc0:	460b      	mov	r3, r1
 800dbc2:	4616      	mov	r6, r2
 800dbc4:	4650      	mov	r0, sl
 800dbc6:	4639      	mov	r1, r7
 800dbc8:	461f      	mov	r7, r3
 800dbca:	a339      	add	r3, pc, #228	; (adr r3, 800dcb0 <__ieee754_pow+0x5b8>)
 800dbcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dbd0:	f7f2 fcc2 	bl	8000558 <__aeabi_dmul>
 800dbd4:	4602      	mov	r2, r0
 800dbd6:	460b      	mov	r3, r1
 800dbd8:	4630      	mov	r0, r6
 800dbda:	4639      	mov	r1, r7
 800dbdc:	f7f2 fb06 	bl	80001ec <__adddf3>
 800dbe0:	ec53 2b1d 	vmov	r2, r3, d13
 800dbe4:	f7f2 fb02 	bl	80001ec <__adddf3>
 800dbe8:	4680      	mov	r8, r0
 800dbea:	9805      	ldr	r0, [sp, #20]
 800dbec:	4689      	mov	r9, r1
 800dbee:	f7f2 fc49 	bl	8000484 <__aeabi_i2d>
 800dbf2:	4642      	mov	r2, r8
 800dbf4:	4682      	mov	sl, r0
 800dbf6:	468b      	mov	fp, r1
 800dbf8:	464b      	mov	r3, r9
 800dbfa:	ec51 0b19 	vmov	r0, r1, d9
 800dbfe:	f7f2 faf5 	bl	80001ec <__adddf3>
 800dc02:	ec53 2b1c 	vmov	r2, r3, d12
 800dc06:	f7f2 faf1 	bl	80001ec <__adddf3>
 800dc0a:	4652      	mov	r2, sl
 800dc0c:	465b      	mov	r3, fp
 800dc0e:	f7f2 faed 	bl	80001ec <__adddf3>
 800dc12:	4652      	mov	r2, sl
 800dc14:	465b      	mov	r3, fp
 800dc16:	2000      	movs	r0, #0
 800dc18:	4606      	mov	r6, r0
 800dc1a:	460f      	mov	r7, r1
 800dc1c:	f7f2 fae4 	bl	80001e8 <__aeabi_dsub>
 800dc20:	ec53 2b1c 	vmov	r2, r3, d12
 800dc24:	f7f2 fae0 	bl	80001e8 <__aeabi_dsub>
 800dc28:	ec53 2b19 	vmov	r2, r3, d9
 800dc2c:	f7f2 fadc 	bl	80001e8 <__aeabi_dsub>
 800dc30:	4602      	mov	r2, r0
 800dc32:	460b      	mov	r3, r1
 800dc34:	4640      	mov	r0, r8
 800dc36:	4649      	mov	r1, r9
 800dc38:	f7f2 fad6 	bl	80001e8 <__aeabi_dsub>
 800dc3c:	9b00      	ldr	r3, [sp, #0]
 800dc3e:	9a04      	ldr	r2, [sp, #16]
 800dc40:	3b01      	subs	r3, #1
 800dc42:	4313      	orrs	r3, r2
 800dc44:	4682      	mov	sl, r0
 800dc46:	468b      	mov	fp, r1
 800dc48:	f040 81c2 	bne.w	800dfd0 <__ieee754_pow+0x8d8>
 800dc4c:	ed9f 7b1a 	vldr	d7, [pc, #104]	; 800dcb8 <__ieee754_pow+0x5c0>
 800dc50:	eeb0 8a47 	vmov.f32	s16, s14
 800dc54:	eef0 8a67 	vmov.f32	s17, s15
 800dc58:	e03e      	b.n	800dcd8 <__ieee754_pow+0x5e0>
 800dc5a:	bf00      	nop
 800dc5c:	f3af 8000 	nop.w
 800dc60:	00000000 	.word	0x00000000
 800dc64:	3ff00000 	.word	0x3ff00000
	...
 800dc70:	4a454eef 	.word	0x4a454eef
 800dc74:	3fca7e28 	.word	0x3fca7e28
 800dc78:	93c9db65 	.word	0x93c9db65
 800dc7c:	3fcd864a 	.word	0x3fcd864a
 800dc80:	a91d4101 	.word	0xa91d4101
 800dc84:	3fd17460 	.word	0x3fd17460
 800dc88:	518f264d 	.word	0x518f264d
 800dc8c:	3fd55555 	.word	0x3fd55555
 800dc90:	db6fabff 	.word	0xdb6fabff
 800dc94:	3fdb6db6 	.word	0x3fdb6db6
 800dc98:	33333303 	.word	0x33333303
 800dc9c:	3fe33333 	.word	0x3fe33333
 800dca0:	e0000000 	.word	0xe0000000
 800dca4:	3feec709 	.word	0x3feec709
 800dca8:	dc3a03fd 	.word	0xdc3a03fd
 800dcac:	3feec709 	.word	0x3feec709
 800dcb0:	145b01f5 	.word	0x145b01f5
 800dcb4:	be3e2fe0 	.word	0xbe3e2fe0
 800dcb8:	00000000 	.word	0x00000000
 800dcbc:	bff00000 	.word	0xbff00000
 800dcc0:	7ff00000 	.word	0x7ff00000
 800dcc4:	43400000 	.word	0x43400000
 800dcc8:	0003988e 	.word	0x0003988e
 800dccc:	000bb679 	.word	0x000bb679
 800dcd0:	3ff00000 	.word	0x3ff00000
 800dcd4:	40080000 	.word	0x40080000
 800dcd8:	2300      	movs	r3, #0
 800dcda:	e9cd 4500 	strd	r4, r5, [sp]
 800dcde:	9300      	str	r3, [sp, #0]
 800dce0:	e9dd 8900 	ldrd	r8, r9, [sp]
 800dce4:	4620      	mov	r0, r4
 800dce6:	4642      	mov	r2, r8
 800dce8:	464b      	mov	r3, r9
 800dcea:	4629      	mov	r1, r5
 800dcec:	f7f2 fa7c 	bl	80001e8 <__aeabi_dsub>
 800dcf0:	4632      	mov	r2, r6
 800dcf2:	463b      	mov	r3, r7
 800dcf4:	f7f2 fc30 	bl	8000558 <__aeabi_dmul>
 800dcf8:	4622      	mov	r2, r4
 800dcfa:	462b      	mov	r3, r5
 800dcfc:	4604      	mov	r4, r0
 800dcfe:	460d      	mov	r5, r1
 800dd00:	4650      	mov	r0, sl
 800dd02:	4659      	mov	r1, fp
 800dd04:	f7f2 fc28 	bl	8000558 <__aeabi_dmul>
 800dd08:	4602      	mov	r2, r0
 800dd0a:	460b      	mov	r3, r1
 800dd0c:	4620      	mov	r0, r4
 800dd0e:	4629      	mov	r1, r5
 800dd10:	f7f2 fa6c 	bl	80001ec <__adddf3>
 800dd14:	4642      	mov	r2, r8
 800dd16:	4604      	mov	r4, r0
 800dd18:	460d      	mov	r5, r1
 800dd1a:	464b      	mov	r3, r9
 800dd1c:	4630      	mov	r0, r6
 800dd1e:	4639      	mov	r1, r7
 800dd20:	f7f2 fc1a 	bl	8000558 <__aeabi_dmul>
 800dd24:	4626      	mov	r6, r4
 800dd26:	462f      	mov	r7, r5
 800dd28:	4604      	mov	r4, r0
 800dd2a:	460d      	mov	r5, r1
 800dd2c:	462b      	mov	r3, r5
 800dd2e:	4630      	mov	r0, r6
 800dd30:	4639      	mov	r1, r7
 800dd32:	4622      	mov	r2, r4
 800dd34:	f7f2 fa5a 	bl	80001ec <__adddf3>
 800dd38:	4bc7      	ldr	r3, [pc, #796]	; (800e058 <__ieee754_pow+0x960>)
 800dd3a:	4299      	cmp	r1, r3
 800dd3c:	4680      	mov	r8, r0
 800dd3e:	4689      	mov	r9, r1
 800dd40:	468a      	mov	sl, r1
 800dd42:	f340 811f 	ble.w	800df84 <__ieee754_pow+0x88c>
 800dd46:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800dd4a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800dd4e:	4303      	orrs	r3, r0
 800dd50:	f040 823e 	bne.w	800e1d0 <__ieee754_pow+0xad8>
 800dd54:	a3aa      	add	r3, pc, #680	; (adr r3, 800e000 <__ieee754_pow+0x908>)
 800dd56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5a:	4630      	mov	r0, r6
 800dd5c:	4639      	mov	r1, r7
 800dd5e:	f7f2 fa45 	bl	80001ec <__adddf3>
 800dd62:	4602      	mov	r2, r0
 800dd64:	460b      	mov	r3, r1
 800dd66:	4640      	mov	r0, r8
 800dd68:	4649      	mov	r1, r9
 800dd6a:	4690      	mov	r8, r2
 800dd6c:	4699      	mov	r9, r3
 800dd6e:	4622      	mov	r2, r4
 800dd70:	462b      	mov	r3, r5
 800dd72:	f7f2 fa39 	bl	80001e8 <__aeabi_dsub>
 800dd76:	4602      	mov	r2, r0
 800dd78:	460b      	mov	r3, r1
 800dd7a:	4640      	mov	r0, r8
 800dd7c:	4649      	mov	r1, r9
 800dd7e:	f7f2 fe7b 	bl	8000a78 <__aeabi_dcmpgt>
 800dd82:	2800      	cmp	r0, #0
 800dd84:	f040 8224 	bne.w	800e1d0 <__ieee754_pow+0xad8>
 800dd88:	f3ca 530a 	ubfx	r3, sl, #20, #11
 800dd8c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800dd90:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800dd94:	fa42 f303 	asr.w	r3, r2, r3
 800dd98:	4453      	add	r3, sl
 800dd9a:	49b0      	ldr	r1, [pc, #704]	; (800e05c <__ieee754_pow+0x964>)
 800dd9c:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800dda0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800dda4:	fa41 fc02 	asr.w	ip, r1, r2
 800dda8:	f3c3 0113 	ubfx	r1, r3, #0, #20
 800ddac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800ddb0:	f1c2 0214 	rsb	r2, r2, #20
 800ddb4:	fa41 f202 	asr.w	r2, r1, r2
 800ddb8:	2000      	movs	r0, #0
 800ddba:	ea23 010c 	bic.w	r1, r3, ip
 800ddbe:	f1ba 0f00 	cmp.w	sl, #0
 800ddc2:	9200      	str	r2, [sp, #0]
 800ddc4:	460b      	mov	r3, r1
 800ddc6:	4602      	mov	r2, r0
 800ddc8:	da02      	bge.n	800ddd0 <__ieee754_pow+0x6d8>
 800ddca:	9900      	ldr	r1, [sp, #0]
 800ddcc:	4249      	negs	r1, r1
 800ddce:	9100      	str	r1, [sp, #0]
 800ddd0:	4620      	mov	r0, r4
 800ddd2:	4629      	mov	r1, r5
 800ddd4:	f7f2 fa08 	bl	80001e8 <__aeabi_dsub>
 800ddd8:	9b00      	ldr	r3, [sp, #0]
 800ddda:	051b      	lsls	r3, r3, #20
 800dddc:	9302      	str	r3, [sp, #8]
 800ddde:	4602      	mov	r2, r0
 800dde0:	460b      	mov	r3, r1
 800dde2:	4604      	mov	r4, r0
 800dde4:	460d      	mov	r5, r1
 800dde6:	4630      	mov	r0, r6
 800dde8:	4639      	mov	r1, r7
 800ddea:	f7f2 f9ff 	bl	80001ec <__adddf3>
 800ddee:	4689      	mov	r9, r1
 800ddf0:	f04f 0800 	mov.w	r8, #0
 800ddf4:	a384      	add	r3, pc, #528	; (adr r3, 800e008 <__ieee754_pow+0x910>)
 800ddf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddfa:	4640      	mov	r0, r8
 800ddfc:	4649      	mov	r1, r9
 800ddfe:	f7f2 fbab 	bl	8000558 <__aeabi_dmul>
 800de02:	4622      	mov	r2, r4
 800de04:	462b      	mov	r3, r5
 800de06:	4682      	mov	sl, r0
 800de08:	468b      	mov	fp, r1
 800de0a:	4640      	mov	r0, r8
 800de0c:	4649      	mov	r1, r9
 800de0e:	f7f2 f9eb 	bl	80001e8 <__aeabi_dsub>
 800de12:	4602      	mov	r2, r0
 800de14:	460b      	mov	r3, r1
 800de16:	4630      	mov	r0, r6
 800de18:	4639      	mov	r1, r7
 800de1a:	f7f2 f9e5 	bl	80001e8 <__aeabi_dsub>
 800de1e:	a37c      	add	r3, pc, #496	; (adr r3, 800e010 <__ieee754_pow+0x918>)
 800de20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de24:	f7f2 fb98 	bl	8000558 <__aeabi_dmul>
 800de28:	a37b      	add	r3, pc, #492	; (adr r3, 800e018 <__ieee754_pow+0x920>)
 800de2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de2e:	4604      	mov	r4, r0
 800de30:	460d      	mov	r5, r1
 800de32:	4640      	mov	r0, r8
 800de34:	4649      	mov	r1, r9
 800de36:	f7f2 fb8f 	bl	8000558 <__aeabi_dmul>
 800de3a:	4602      	mov	r2, r0
 800de3c:	460b      	mov	r3, r1
 800de3e:	4620      	mov	r0, r4
 800de40:	4629      	mov	r1, r5
 800de42:	f7f2 f9d3 	bl	80001ec <__adddf3>
 800de46:	4606      	mov	r6, r0
 800de48:	460f      	mov	r7, r1
 800de4a:	4632      	mov	r2, r6
 800de4c:	463b      	mov	r3, r7
 800de4e:	4650      	mov	r0, sl
 800de50:	4659      	mov	r1, fp
 800de52:	f7f2 f9cb 	bl	80001ec <__adddf3>
 800de56:	4652      	mov	r2, sl
 800de58:	465b      	mov	r3, fp
 800de5a:	4604      	mov	r4, r0
 800de5c:	460d      	mov	r5, r1
 800de5e:	f7f2 f9c3 	bl	80001e8 <__aeabi_dsub>
 800de62:	4602      	mov	r2, r0
 800de64:	460b      	mov	r3, r1
 800de66:	4630      	mov	r0, r6
 800de68:	4639      	mov	r1, r7
 800de6a:	f7f2 f9bd 	bl	80001e8 <__aeabi_dsub>
 800de6e:	4622      	mov	r2, r4
 800de70:	4680      	mov	r8, r0
 800de72:	4689      	mov	r9, r1
 800de74:	462b      	mov	r3, r5
 800de76:	4620      	mov	r0, r4
 800de78:	4629      	mov	r1, r5
 800de7a:	f7f2 fb6d 	bl	8000558 <__aeabi_dmul>
 800de7e:	a368      	add	r3, pc, #416	; (adr r3, 800e020 <__ieee754_pow+0x928>)
 800de80:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de84:	4606      	mov	r6, r0
 800de86:	460f      	mov	r7, r1
 800de88:	f7f2 fb66 	bl	8000558 <__aeabi_dmul>
 800de8c:	a366      	add	r3, pc, #408	; (adr r3, 800e028 <__ieee754_pow+0x930>)
 800de8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de92:	f7f2 f9a9 	bl	80001e8 <__aeabi_dsub>
 800de96:	4632      	mov	r2, r6
 800de98:	463b      	mov	r3, r7
 800de9a:	f7f2 fb5d 	bl	8000558 <__aeabi_dmul>
 800de9e:	a364      	add	r3, pc, #400	; (adr r3, 800e030 <__ieee754_pow+0x938>)
 800dea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dea4:	f7f2 f9a2 	bl	80001ec <__adddf3>
 800dea8:	4632      	mov	r2, r6
 800deaa:	463b      	mov	r3, r7
 800deac:	f7f2 fb54 	bl	8000558 <__aeabi_dmul>
 800deb0:	a361      	add	r3, pc, #388	; (adr r3, 800e038 <__ieee754_pow+0x940>)
 800deb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deb6:	f7f2 f997 	bl	80001e8 <__aeabi_dsub>
 800deba:	4632      	mov	r2, r6
 800debc:	463b      	mov	r3, r7
 800debe:	f7f2 fb4b 	bl	8000558 <__aeabi_dmul>
 800dec2:	a35f      	add	r3, pc, #380	; (adr r3, 800e040 <__ieee754_pow+0x948>)
 800dec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dec8:	f7f2 f990 	bl	80001ec <__adddf3>
 800decc:	4632      	mov	r2, r6
 800dece:	463b      	mov	r3, r7
 800ded0:	f7f2 fb42 	bl	8000558 <__aeabi_dmul>
 800ded4:	4602      	mov	r2, r0
 800ded6:	460b      	mov	r3, r1
 800ded8:	4620      	mov	r0, r4
 800deda:	4629      	mov	r1, r5
 800dedc:	f7f2 f984 	bl	80001e8 <__aeabi_dsub>
 800dee0:	4606      	mov	r6, r0
 800dee2:	460f      	mov	r7, r1
 800dee4:	4632      	mov	r2, r6
 800dee6:	463b      	mov	r3, r7
 800dee8:	4620      	mov	r0, r4
 800deea:	4629      	mov	r1, r5
 800deec:	f7f2 fb34 	bl	8000558 <__aeabi_dmul>
 800def0:	4602      	mov	r2, r0
 800def2:	460b      	mov	r3, r1
 800def4:	4630      	mov	r0, r6
 800def6:	4639      	mov	r1, r7
 800def8:	4616      	mov	r6, r2
 800defa:	461f      	mov	r7, r3
 800defc:	2200      	movs	r2, #0
 800defe:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800df02:	f7f2 f971 	bl	80001e8 <__aeabi_dsub>
 800df06:	4602      	mov	r2, r0
 800df08:	460b      	mov	r3, r1
 800df0a:	4630      	mov	r0, r6
 800df0c:	4639      	mov	r1, r7
 800df0e:	f7f2 fc4d 	bl	80007ac <__aeabi_ddiv>
 800df12:	4642      	mov	r2, r8
 800df14:	4606      	mov	r6, r0
 800df16:	460f      	mov	r7, r1
 800df18:	464b      	mov	r3, r9
 800df1a:	4620      	mov	r0, r4
 800df1c:	4629      	mov	r1, r5
 800df1e:	f7f2 fb1b 	bl	8000558 <__aeabi_dmul>
 800df22:	4642      	mov	r2, r8
 800df24:	464b      	mov	r3, r9
 800df26:	f7f2 f961 	bl	80001ec <__adddf3>
 800df2a:	4602      	mov	r2, r0
 800df2c:	460b      	mov	r3, r1
 800df2e:	4630      	mov	r0, r6
 800df30:	4639      	mov	r1, r7
 800df32:	f7f2 f959 	bl	80001e8 <__aeabi_dsub>
 800df36:	4622      	mov	r2, r4
 800df38:	462b      	mov	r3, r5
 800df3a:	f7f2 f955 	bl	80001e8 <__aeabi_dsub>
 800df3e:	4602      	mov	r2, r0
 800df40:	460b      	mov	r3, r1
 800df42:	2000      	movs	r0, #0
 800df44:	4946      	ldr	r1, [pc, #280]	; (800e060 <__ieee754_pow+0x968>)
 800df46:	f7f2 f94f 	bl	80001e8 <__aeabi_dsub>
 800df4a:	9a02      	ldr	r2, [sp, #8]
 800df4c:	460b      	mov	r3, r1
 800df4e:	4413      	add	r3, r2
 800df50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800df54:	f2c0 8147 	blt.w	800e1e6 <__ieee754_pow+0xaee>
 800df58:	4619      	mov	r1, r3
 800df5a:	ec53 2b18 	vmov	r2, r3, d8
 800df5e:	f7f2 fafb 	bl	8000558 <__aeabi_dmul>
 800df62:	ec41 0b10 	vmov	d0, r0, r1
 800df66:	f7ff bbe6 	b.w	800d736 <__ieee754_pow+0x3e>
 800df6a:	f1b8 0f00 	cmp.w	r8, #0
 800df6e:	f6ff ac25 	blt.w	800d7bc <__ieee754_pow+0xc4>
 800df72:	ec47 6b10 	vmov	d0, r6, r7
 800df76:	b007      	add	sp, #28
 800df78:	ecbd 8b0c 	vpop	{d8-d13}
 800df7c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df80:	f000 bb9c 	b.w	800e6bc <__ieee754_sqrt>
 800df84:	f8df c0e0 	ldr.w	ip, [pc, #224]	; 800e068 <__ieee754_pow+0x970>
 800df88:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800df8c:	4563      	cmp	r3, ip
 800df8e:	f340 80dd 	ble.w	800e14c <__ieee754_pow+0xa54>
 800df92:	4b34      	ldr	r3, [pc, #208]	; (800e064 <__ieee754_pow+0x96c>)
 800df94:	440b      	add	r3, r1
 800df96:	4303      	orrs	r3, r0
 800df98:	d10a      	bne.n	800dfb0 <__ieee754_pow+0x8b8>
 800df9a:	4622      	mov	r2, r4
 800df9c:	462b      	mov	r3, r5
 800df9e:	f7f2 f923 	bl	80001e8 <__aeabi_dsub>
 800dfa2:	4632      	mov	r2, r6
 800dfa4:	463b      	mov	r3, r7
 800dfa6:	f7f2 fd5d 	bl	8000a64 <__aeabi_dcmpge>
 800dfaa:	2800      	cmp	r0, #0
 800dfac:	f43f aeec 	beq.w	800dd88 <__ieee754_pow+0x690>
 800dfb0:	ec51 0b18 	vmov	r0, r1, d8
 800dfb4:	2200      	movs	r2, #0
 800dfb6:	2300      	movs	r3, #0
 800dfb8:	f7f2 fd40 	bl	8000a3c <__aeabi_dcmplt>
 800dfbc:	3800      	subs	r0, #0
 800dfbe:	bf18      	it	ne
 800dfc0:	2001      	movne	r0, #1
 800dfc2:	b007      	add	sp, #28
 800dfc4:	ecbd 8b0c 	vpop	{d8-d13}
 800dfc8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfcc:	f001 ba8c 	b.w	800f4e8 <__math_uflow>
 800dfd0:	ed9f 7b1d 	vldr	d7, [pc, #116]	; 800e048 <__ieee754_pow+0x950>
 800dfd4:	eeb0 8a47 	vmov.f32	s16, s14
 800dfd8:	eef0 8a67 	vmov.f32	s17, s15
 800dfdc:	e67c      	b.n	800dcd8 <__ieee754_pow+0x5e0>
 800dfde:	f1bb 0f00 	cmp.w	fp, #0
 800dfe2:	ed9f 0b1b 	vldr	d0, [pc, #108]	; 800e050 <__ieee754_pow+0x958>
 800dfe6:	f6bf aba6 	bge.w	800d736 <__ieee754_pow+0x3e>
 800dfea:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800dfee:	ee00 4a10 	vmov	s0, r4
 800dff2:	ee00 3a90 	vmov	s1, r3
 800dff6:	f7ff bb9e 	b.w	800d736 <__ieee754_pow+0x3e>
 800dffa:	bf00      	nop
 800dffc:	f3af 8000 	nop.w
 800e000:	652b82fe 	.word	0x652b82fe
 800e004:	3c971547 	.word	0x3c971547
 800e008:	00000000 	.word	0x00000000
 800e00c:	3fe62e43 	.word	0x3fe62e43
 800e010:	fefa39ef 	.word	0xfefa39ef
 800e014:	3fe62e42 	.word	0x3fe62e42
 800e018:	0ca86c39 	.word	0x0ca86c39
 800e01c:	be205c61 	.word	0xbe205c61
 800e020:	72bea4d0 	.word	0x72bea4d0
 800e024:	3e663769 	.word	0x3e663769
 800e028:	c5d26bf1 	.word	0xc5d26bf1
 800e02c:	3ebbbd41 	.word	0x3ebbbd41
 800e030:	af25de2c 	.word	0xaf25de2c
 800e034:	3f11566a 	.word	0x3f11566a
 800e038:	16bebd93 	.word	0x16bebd93
 800e03c:	3f66c16c 	.word	0x3f66c16c
 800e040:	5555553e 	.word	0x5555553e
 800e044:	3fc55555 	.word	0x3fc55555
 800e048:	00000000 	.word	0x00000000
 800e04c:	3ff00000 	.word	0x3ff00000
	...
 800e058:	408fffff 	.word	0x408fffff
 800e05c:	000fffff 	.word	0x000fffff
 800e060:	3ff00000 	.word	0x3ff00000
 800e064:	3f6f3400 	.word	0x3f6f3400
 800e068:	4090cbff 	.word	0x4090cbff
 800e06c:	4599      	cmp	r9, r3
 800e06e:	db75      	blt.n	800e15c <__ieee754_pow+0xa64>
 800e070:	4b7b      	ldr	r3, [pc, #492]	; (800e260 <__ieee754_pow+0xb68>)
 800e072:	4599      	cmp	r9, r3
 800e074:	f73f abbe 	bgt.w	800d7f4 <__ieee754_pow+0xfc>
 800e078:	ec51 0b10 	vmov	r0, r1, d0
 800e07c:	4b78      	ldr	r3, [pc, #480]	; (800e260 <__ieee754_pow+0xb68>)
 800e07e:	2200      	movs	r2, #0
 800e080:	f7f2 f8b2 	bl	80001e8 <__aeabi_dsub>
 800e084:	a366      	add	r3, pc, #408	; (adr r3, 800e220 <__ieee754_pow+0xb28>)
 800e086:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e08a:	4606      	mov	r6, r0
 800e08c:	460f      	mov	r7, r1
 800e08e:	f7f2 fa63 	bl	8000558 <__aeabi_dmul>
 800e092:	a365      	add	r3, pc, #404	; (adr r3, 800e228 <__ieee754_pow+0xb30>)
 800e094:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e098:	4682      	mov	sl, r0
 800e09a:	468b      	mov	fp, r1
 800e09c:	4630      	mov	r0, r6
 800e09e:	4639      	mov	r1, r7
 800e0a0:	f7f2 fa5a 	bl	8000558 <__aeabi_dmul>
 800e0a4:	4b6f      	ldr	r3, [pc, #444]	; (800e264 <__ieee754_pow+0xb6c>)
 800e0a6:	ec41 0b18 	vmov	d8, r0, r1
 800e0aa:	2200      	movs	r2, #0
 800e0ac:	4630      	mov	r0, r6
 800e0ae:	4639      	mov	r1, r7
 800e0b0:	f7f2 fa52 	bl	8000558 <__aeabi_dmul>
 800e0b4:	4602      	mov	r2, r0
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	a15d      	add	r1, pc, #372	; (adr r1, 800e230 <__ieee754_pow+0xb38>)
 800e0ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e0be:	f7f2 f893 	bl	80001e8 <__aeabi_dsub>
 800e0c2:	4632      	mov	r2, r6
 800e0c4:	463b      	mov	r3, r7
 800e0c6:	f7f2 fa47 	bl	8000558 <__aeabi_dmul>
 800e0ca:	4602      	mov	r2, r0
 800e0cc:	460b      	mov	r3, r1
 800e0ce:	2000      	movs	r0, #0
 800e0d0:	4965      	ldr	r1, [pc, #404]	; (800e268 <__ieee754_pow+0xb70>)
 800e0d2:	f7f2 f889 	bl	80001e8 <__aeabi_dsub>
 800e0d6:	4632      	mov	r2, r6
 800e0d8:	4680      	mov	r8, r0
 800e0da:	4689      	mov	r9, r1
 800e0dc:	463b      	mov	r3, r7
 800e0de:	4630      	mov	r0, r6
 800e0e0:	4639      	mov	r1, r7
 800e0e2:	f7f2 fa39 	bl	8000558 <__aeabi_dmul>
 800e0e6:	4602      	mov	r2, r0
 800e0e8:	460b      	mov	r3, r1
 800e0ea:	4640      	mov	r0, r8
 800e0ec:	4649      	mov	r1, r9
 800e0ee:	f7f2 fa33 	bl	8000558 <__aeabi_dmul>
 800e0f2:	a351      	add	r3, pc, #324	; (adr r3, 800e238 <__ieee754_pow+0xb40>)
 800e0f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f8:	f7f2 fa2e 	bl	8000558 <__aeabi_dmul>
 800e0fc:	4602      	mov	r2, r0
 800e0fe:	460b      	mov	r3, r1
 800e100:	ec51 0b18 	vmov	r0, r1, d8
 800e104:	f7f2 f870 	bl	80001e8 <__aeabi_dsub>
 800e108:	4680      	mov	r8, r0
 800e10a:	4689      	mov	r9, r1
 800e10c:	4642      	mov	r2, r8
 800e10e:	464b      	mov	r3, r9
 800e110:	4650      	mov	r0, sl
 800e112:	4659      	mov	r1, fp
 800e114:	f7f2 f86a 	bl	80001ec <__adddf3>
 800e118:	2000      	movs	r0, #0
 800e11a:	4652      	mov	r2, sl
 800e11c:	465b      	mov	r3, fp
 800e11e:	4606      	mov	r6, r0
 800e120:	460f      	mov	r7, r1
 800e122:	e583      	b.n	800dc2c <__ieee754_pow+0x534>
 800e124:	494e      	ldr	r1, [pc, #312]	; (800e260 <__ieee754_pow+0xb68>)
 800e126:	2000      	movs	r0, #0
 800e128:	4632      	mov	r2, r6
 800e12a:	463b      	mov	r3, r7
 800e12c:	f7f2 fb3e 	bl	80007ac <__aeabi_ddiv>
 800e130:	ec41 0b10 	vmov	d0, r0, r1
 800e134:	f7ff baff 	b.w	800d736 <__ieee754_pow+0x3e>
 800e138:	4632      	mov	r2, r6
 800e13a:	463b      	mov	r3, r7
 800e13c:	4630      	mov	r0, r6
 800e13e:	4639      	mov	r1, r7
 800e140:	f7f2 fa0a 	bl	8000558 <__aeabi_dmul>
 800e144:	ec41 0b10 	vmov	d0, r0, r1
 800e148:	f7ff baf5 	b.w	800d736 <__ieee754_pow+0x3e>
 800e14c:	4a46      	ldr	r2, [pc, #280]	; (800e268 <__ieee754_pow+0xb70>)
 800e14e:	4293      	cmp	r3, r2
 800e150:	dc62      	bgt.n	800e218 <__ieee754_pow+0xb20>
 800e152:	e9dd 1200 	ldrd	r1, r2, [sp]
 800e156:	9102      	str	r1, [sp, #8]
 800e158:	9100      	str	r1, [sp, #0]
 800e15a:	e649      	b.n	800ddf0 <__ieee754_pow+0x6f8>
 800e15c:	f1bb 0f00 	cmp.w	fp, #0
 800e160:	f6ff ab4c 	blt.w	800d7fc <__ieee754_pow+0x104>
 800e164:	2000      	movs	r0, #0
 800e166:	e72c      	b.n	800dfc2 <__ieee754_pow+0x8ca>
 800e168:	2b00      	cmp	r3, #0
 800e16a:	f47f ab52 	bne.w	800d812 <__ieee754_pow+0x11a>
 800e16e:	f1c1 0114 	rsb	r1, r1, #20
 800e172:	fa4a f001 	asr.w	r0, sl, r1
 800e176:	fa00 f101 	lsl.w	r1, r0, r1
 800e17a:	4551      	cmp	r1, sl
 800e17c:	d045      	beq.n	800e20a <__ieee754_pow+0xb12>
 800e17e:	9300      	str	r3, [sp, #0]
 800e180:	f7ff bb10 	b.w	800d7a4 <__ieee754_pow+0xac>
 800e184:	9b00      	ldr	r3, [sp, #0]
 800e186:	2b01      	cmp	r3, #1
 800e188:	f47f aad5 	bne.w	800d736 <__ieee754_pow+0x3e>
 800e18c:	ee10 1a90 	vmov	r1, s1
 800e190:	ee10 2a10 	vmov	r2, s0
 800e194:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e198:	ec43 2b10 	vmov	d0, r2, r3
 800e19c:	f7ff bacb 	b.w	800d736 <__ieee754_pow+0x3e>
 800e1a0:	ed9f 0b27 	vldr	d0, [pc, #156]	; 800e240 <__ieee754_pow+0xb48>
 800e1a4:	f7ff bac7 	b.w	800d736 <__ieee754_pow+0x3e>
 800e1a8:	ed9f 7b27 	vldr	d7, [pc, #156]	; 800e248 <__ieee754_pow+0xb50>
 800e1ac:	eeb0 ca47 	vmov.f32	s24, s14
 800e1b0:	eef0 ca67 	vmov.f32	s25, s15
 800e1b4:	ed9f 7b26 	vldr	d7, [pc, #152]	; 800e250 <__ieee754_pow+0xb58>
 800e1b8:	eeb0 da47 	vmov.f32	s26, s14
 800e1bc:	eef0 da67 	vmov.f32	s27, s15
 800e1c0:	ed9f 7b25 	vldr	d7, [pc, #148]	; 800e258 <__ieee754_pow+0xb60>
 800e1c4:	f44f 2780 	mov.w	r7, #262144	; 0x40000
 800e1c8:	ec53 2b17 	vmov	r2, r3, d7
 800e1cc:	f7ff bbe4 	b.w	800d998 <__ieee754_pow+0x2a0>
 800e1d0:	ec51 0b18 	vmov	r0, r1, d8
 800e1d4:	2200      	movs	r2, #0
 800e1d6:	2300      	movs	r3, #0
 800e1d8:	f7f2 fc30 	bl	8000a3c <__aeabi_dcmplt>
 800e1dc:	3800      	subs	r0, #0
 800e1de:	bf18      	it	ne
 800e1e0:	2001      	movne	r0, #1
 800e1e2:	f7ff bb0c 	b.w	800d7fe <__ieee754_pow+0x106>
 800e1e6:	ec41 0b10 	vmov	d0, r0, r1
 800e1ea:	9800      	ldr	r0, [sp, #0]
 800e1ec:	f001 fa2c 	bl	800f648 <scalbn>
 800e1f0:	ec51 0b10 	vmov	r0, r1, d0
 800e1f4:	e6b1      	b.n	800df5a <__ieee754_pow+0x862>
 800e1f6:	f000 0001 	and.w	r0, r0, #1
 800e1fa:	f1c0 0102 	rsb	r1, r0, #2
 800e1fe:	9100      	str	r1, [sp, #0]
 800e200:	2b00      	cmp	r3, #0
 800e202:	f43f aacf 	beq.w	800d7a4 <__ieee754_pow+0xac>
 800e206:	f7ff bad9 	b.w	800d7bc <__ieee754_pow+0xc4>
 800e20a:	f000 0001 	and.w	r0, r0, #1
 800e20e:	f1c0 0302 	rsb	r3, r0, #2
 800e212:	9300      	str	r3, [sp, #0]
 800e214:	f7ff bac6 	b.w	800d7a4 <__ieee754_pow+0xac>
 800e218:	151b      	asrs	r3, r3, #20
 800e21a:	e5b7      	b.n	800dd8c <__ieee754_pow+0x694>
 800e21c:	f3af 8000 	nop.w
 800e220:	60000000 	.word	0x60000000
 800e224:	3ff71547 	.word	0x3ff71547
 800e228:	f85ddf44 	.word	0xf85ddf44
 800e22c:	3e54ae0b 	.word	0x3e54ae0b
 800e230:	55555555 	.word	0x55555555
 800e234:	3fd55555 	.word	0x3fd55555
 800e238:	652b82fe 	.word	0x652b82fe
 800e23c:	3ff71547 	.word	0x3ff71547
	...
 800e248:	40000000 	.word	0x40000000
 800e24c:	3fe2b803 	.word	0x3fe2b803
 800e250:	43cfd006 	.word	0x43cfd006
 800e254:	3e4cfdeb 	.word	0x3e4cfdeb
 800e258:	00000000 	.word	0x00000000
 800e25c:	3ff80000 	.word	0x3ff80000
 800e260:	3ff00000 	.word	0x3ff00000
 800e264:	3fd00000 	.word	0x3fd00000
 800e268:	3fe00000 	.word	0x3fe00000
 800e26c:	00000000 	.word	0x00000000

0800e270 <__ieee754_rem_pio2>:
 800e270:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e274:	ec53 2b10 	vmov	r2, r3, d0
 800e278:	ed2d 8b04 	vpush	{d8-d9}
 800e27c:	4990      	ldr	r1, [pc, #576]	; (800e4c0 <__ieee754_rem_pio2+0x250>)
 800e27e:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800e282:	428d      	cmp	r5, r1
 800e284:	b08b      	sub	sp, #44	; 0x2c
 800e286:	4604      	mov	r4, r0
 800e288:	f340 808c 	ble.w	800e3a4 <__ieee754_rem_pio2+0x134>
 800e28c:	498d      	ldr	r1, [pc, #564]	; (800e4c4 <__ieee754_rem_pio2+0x254>)
 800e28e:	428d      	cmp	r5, r1
 800e290:	461f      	mov	r7, r3
 800e292:	dc2b      	bgt.n	800e2ec <__ieee754_rem_pio2+0x7c>
 800e294:	2f00      	cmp	r7, #0
 800e296:	4619      	mov	r1, r3
 800e298:	ee10 0a10 	vmov	r0, s0
 800e29c:	a37e      	add	r3, pc, #504	; (adr r3, 800e498 <__ieee754_rem_pio2+0x228>)
 800e29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a2:	f340 81b6 	ble.w	800e612 <__ieee754_rem_pio2+0x3a2>
 800e2a6:	f7f1 ff9f 	bl	80001e8 <__aeabi_dsub>
 800e2aa:	4b87      	ldr	r3, [pc, #540]	; (800e4c8 <__ieee754_rem_pio2+0x258>)
 800e2ac:	429d      	cmp	r5, r3
 800e2ae:	4680      	mov	r8, r0
 800e2b0:	4689      	mov	r9, r1
 800e2b2:	f000 808f 	beq.w	800e3d4 <__ieee754_rem_pio2+0x164>
 800e2b6:	a37a      	add	r3, pc, #488	; (adr r3, 800e4a0 <__ieee754_rem_pio2+0x230>)
 800e2b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2bc:	f7f1 ff94 	bl	80001e8 <__aeabi_dsub>
 800e2c0:	4602      	mov	r2, r0
 800e2c2:	460b      	mov	r3, r1
 800e2c4:	e9c4 2300 	strd	r2, r3, [r4]
 800e2c8:	4640      	mov	r0, r8
 800e2ca:	4649      	mov	r1, r9
 800e2cc:	f7f1 ff8c 	bl	80001e8 <__aeabi_dsub>
 800e2d0:	a373      	add	r3, pc, #460	; (adr r3, 800e4a0 <__ieee754_rem_pio2+0x230>)
 800e2d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2d6:	f7f1 ff87 	bl	80001e8 <__aeabi_dsub>
 800e2da:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e2de:	2601      	movs	r6, #1
 800e2e0:	4630      	mov	r0, r6
 800e2e2:	b00b      	add	sp, #44	; 0x2c
 800e2e4:	ecbd 8b04 	vpop	{d8-d9}
 800e2e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2ec:	4977      	ldr	r1, [pc, #476]	; (800e4cc <__ieee754_rem_pio2+0x25c>)
 800e2ee:	428d      	cmp	r5, r1
 800e2f0:	f340 8092 	ble.w	800e418 <__ieee754_rem_pio2+0x1a8>
 800e2f4:	4976      	ldr	r1, [pc, #472]	; (800e4d0 <__ieee754_rem_pio2+0x260>)
 800e2f6:	428d      	cmp	r5, r1
 800e2f8:	dc61      	bgt.n	800e3be <__ieee754_rem_pio2+0x14e>
 800e2fa:	152e      	asrs	r6, r5, #20
 800e2fc:	f2a6 4616 	subw	r6, r6, #1046	; 0x416
 800e300:	ee10 0a10 	vmov	r0, s0
 800e304:	eba5 5106 	sub.w	r1, r5, r6, lsl #20
 800e308:	4690      	mov	r8, r2
 800e30a:	4689      	mov	r9, r1
 800e30c:	f7f2 fbd4 	bl	8000ab8 <__aeabi_d2iz>
 800e310:	f7f2 f8b8 	bl	8000484 <__aeabi_i2d>
 800e314:	4602      	mov	r2, r0
 800e316:	460b      	mov	r3, r1
 800e318:	4640      	mov	r0, r8
 800e31a:	4649      	mov	r1, r9
 800e31c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e320:	f7f1 ff62 	bl	80001e8 <__aeabi_dsub>
 800e324:	4b6b      	ldr	r3, [pc, #428]	; (800e4d4 <__ieee754_rem_pio2+0x264>)
 800e326:	2200      	movs	r2, #0
 800e328:	f7f2 f916 	bl	8000558 <__aeabi_dmul>
 800e32c:	4689      	mov	r9, r1
 800e32e:	4680      	mov	r8, r0
 800e330:	f7f2 fbc2 	bl	8000ab8 <__aeabi_d2iz>
 800e334:	4605      	mov	r5, r0
 800e336:	f7f2 f8a5 	bl	8000484 <__aeabi_i2d>
 800e33a:	4602      	mov	r2, r0
 800e33c:	460b      	mov	r3, r1
 800e33e:	4640      	mov	r0, r8
 800e340:	4649      	mov	r1, r9
 800e342:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800e346:	f7f1 ff4f 	bl	80001e8 <__aeabi_dsub>
 800e34a:	4b62      	ldr	r3, [pc, #392]	; (800e4d4 <__ieee754_rem_pio2+0x264>)
 800e34c:	2200      	movs	r2, #0
 800e34e:	f7f2 f903 	bl	8000558 <__aeabi_dmul>
 800e352:	4602      	mov	r2, r0
 800e354:	460b      	mov	r3, r1
 800e356:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800e35a:	2200      	movs	r2, #0
 800e35c:	2300      	movs	r3, #0
 800e35e:	f7f2 fb63 	bl	8000a28 <__aeabi_dcmpeq>
 800e362:	2800      	cmp	r0, #0
 800e364:	f000 8153 	beq.w	800e60e <__ieee754_rem_pio2+0x39e>
 800e368:	2d00      	cmp	r5, #0
 800e36a:	bf0c      	ite	eq
 800e36c:	2301      	moveq	r3, #1
 800e36e:	2302      	movne	r3, #2
 800e370:	4a59      	ldr	r2, [pc, #356]	; (800e4d8 <__ieee754_rem_pio2+0x268>)
 800e372:	9201      	str	r2, [sp, #4]
 800e374:	2202      	movs	r2, #2
 800e376:	9200      	str	r2, [sp, #0]
 800e378:	4621      	mov	r1, r4
 800e37a:	4632      	mov	r2, r6
 800e37c:	a804      	add	r0, sp, #16
 800e37e:	f000 fbab 	bl	800ead8 <__kernel_rem_pio2>
 800e382:	2f00      	cmp	r7, #0
 800e384:	4606      	mov	r6, r0
 800e386:	daab      	bge.n	800e2e0 <__ieee754_rem_pio2+0x70>
 800e388:	6861      	ldr	r1, [r4, #4]
 800e38a:	6822      	ldr	r2, [r4, #0]
 800e38c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e390:	68e1      	ldr	r1, [r4, #12]
 800e392:	e9c4 2300 	strd	r2, r3, [r4]
 800e396:	68a2      	ldr	r2, [r4, #8]
 800e398:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e39c:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800e3a0:	4246      	negs	r6, r0
 800e3a2:	e79d      	b.n	800e2e0 <__ieee754_rem_pio2+0x70>
 800e3a4:	2000      	movs	r0, #0
 800e3a6:	2100      	movs	r1, #0
 800e3a8:	2600      	movs	r6, #0
 800e3aa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e3ae:	4630      	mov	r0, r6
 800e3b0:	ed84 0b00 	vstr	d0, [r4]
 800e3b4:	b00b      	add	sp, #44	; 0x2c
 800e3b6:	ecbd 8b04 	vpop	{d8-d9}
 800e3ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e3be:	ee10 0a10 	vmov	r0, s0
 800e3c2:	4619      	mov	r1, r3
 800e3c4:	f7f1 ff10 	bl	80001e8 <__aeabi_dsub>
 800e3c8:	2600      	movs	r6, #0
 800e3ca:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e3ce:	e9c4 0100 	strd	r0, r1, [r4]
 800e3d2:	e785      	b.n	800e2e0 <__ieee754_rem_pio2+0x70>
 800e3d4:	a334      	add	r3, pc, #208	; (adr r3, 800e4a8 <__ieee754_rem_pio2+0x238>)
 800e3d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3da:	f7f1 ff05 	bl	80001e8 <__aeabi_dsub>
 800e3de:	a334      	add	r3, pc, #208	; (adr r3, 800e4b0 <__ieee754_rem_pio2+0x240>)
 800e3e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e3e4:	4680      	mov	r8, r0
 800e3e6:	4689      	mov	r9, r1
 800e3e8:	f7f1 fefe 	bl	80001e8 <__aeabi_dsub>
 800e3ec:	4602      	mov	r2, r0
 800e3ee:	460b      	mov	r3, r1
 800e3f0:	e9c4 2300 	strd	r2, r3, [r4]
 800e3f4:	4640      	mov	r0, r8
 800e3f6:	4649      	mov	r1, r9
 800e3f8:	f7f1 fef6 	bl	80001e8 <__aeabi_dsub>
 800e3fc:	a32c      	add	r3, pc, #176	; (adr r3, 800e4b0 <__ieee754_rem_pio2+0x240>)
 800e3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e402:	f7f1 fef1 	bl	80001e8 <__aeabi_dsub>
 800e406:	2601      	movs	r6, #1
 800e408:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e40c:	4630      	mov	r0, r6
 800e40e:	b00b      	add	sp, #44	; 0x2c
 800e410:	ecbd 8b04 	vpop	{d8-d9}
 800e414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e418:	f001 f87a 	bl	800f510 <fabs>
 800e41c:	ec59 8b10 	vmov	r8, r9, d0
 800e420:	ee10 0a10 	vmov	r0, s0
 800e424:	a324      	add	r3, pc, #144	; (adr r3, 800e4b8 <__ieee754_rem_pio2+0x248>)
 800e426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e42a:	4649      	mov	r1, r9
 800e42c:	f7f2 f894 	bl	8000558 <__aeabi_dmul>
 800e430:	4b2a      	ldr	r3, [pc, #168]	; (800e4dc <__ieee754_rem_pio2+0x26c>)
 800e432:	2200      	movs	r2, #0
 800e434:	f7f1 feda 	bl	80001ec <__adddf3>
 800e438:	f7f2 fb3e 	bl	8000ab8 <__aeabi_d2iz>
 800e43c:	4606      	mov	r6, r0
 800e43e:	f7f2 f821 	bl	8000484 <__aeabi_i2d>
 800e442:	4602      	mov	r2, r0
 800e444:	460b      	mov	r3, r1
 800e446:	ec43 2b18 	vmov	d8, r2, r3
 800e44a:	a313      	add	r3, pc, #76	; (adr r3, 800e498 <__ieee754_rem_pio2+0x228>)
 800e44c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e450:	eeb0 9a48 	vmov.f32	s18, s16
 800e454:	eef0 9a68 	vmov.f32	s19, s17
 800e458:	f7f2 f87e 	bl	8000558 <__aeabi_dmul>
 800e45c:	4602      	mov	r2, r0
 800e45e:	460b      	mov	r3, r1
 800e460:	4640      	mov	r0, r8
 800e462:	4649      	mov	r1, r9
 800e464:	f7f1 fec0 	bl	80001e8 <__aeabi_dsub>
 800e468:	a30d      	add	r3, pc, #52	; (adr r3, 800e4a0 <__ieee754_rem_pio2+0x230>)
 800e46a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e46e:	4682      	mov	sl, r0
 800e470:	468b      	mov	fp, r1
 800e472:	ec51 0b18 	vmov	r0, r1, d8
 800e476:	f7f2 f86f 	bl	8000558 <__aeabi_dmul>
 800e47a:	2e1f      	cmp	r6, #31
 800e47c:	ec41 0b18 	vmov	d8, r0, r1
 800e480:	dc30      	bgt.n	800e4e4 <__ieee754_rem_pio2+0x274>
 800e482:	4b17      	ldr	r3, [pc, #92]	; (800e4e0 <__ieee754_rem_pio2+0x270>)
 800e484:	1e72      	subs	r2, r6, #1
 800e486:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800e48a:	42ab      	cmp	r3, r5
 800e48c:	d02a      	beq.n	800e4e4 <__ieee754_rem_pio2+0x274>
 800e48e:	4602      	mov	r2, r0
 800e490:	460b      	mov	r3, r1
 800e492:	e09b      	b.n	800e5cc <__ieee754_rem_pio2+0x35c>
 800e494:	f3af 8000 	nop.w
 800e498:	54400000 	.word	0x54400000
 800e49c:	3ff921fb 	.word	0x3ff921fb
 800e4a0:	1a626331 	.word	0x1a626331
 800e4a4:	3dd0b461 	.word	0x3dd0b461
 800e4a8:	1a600000 	.word	0x1a600000
 800e4ac:	3dd0b461 	.word	0x3dd0b461
 800e4b0:	2e037073 	.word	0x2e037073
 800e4b4:	3ba3198a 	.word	0x3ba3198a
 800e4b8:	6dc9c883 	.word	0x6dc9c883
 800e4bc:	3fe45f30 	.word	0x3fe45f30
 800e4c0:	3fe921fb 	.word	0x3fe921fb
 800e4c4:	4002d97b 	.word	0x4002d97b
 800e4c8:	3ff921fb 	.word	0x3ff921fb
 800e4cc:	413921fb 	.word	0x413921fb
 800e4d0:	7fefffff 	.word	0x7fefffff
 800e4d4:	41700000 	.word	0x41700000
 800e4d8:	0800fee8 	.word	0x0800fee8
 800e4dc:	3fe00000 	.word	0x3fe00000
 800e4e0:	0800fe68 	.word	0x0800fe68
 800e4e4:	152b      	asrs	r3, r5, #20
 800e4e6:	9303      	str	r3, [sp, #12]
 800e4e8:	4650      	mov	r0, sl
 800e4ea:	ec53 2b18 	vmov	r2, r3, d8
 800e4ee:	4659      	mov	r1, fp
 800e4f0:	f7f1 fe7a 	bl	80001e8 <__aeabi_dsub>
 800e4f4:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e4f8:	ebc3 5515 	rsb	r5, r3, r5, lsr #20
 800e4fc:	2d10      	cmp	r5, #16
 800e4fe:	4680      	mov	r8, r0
 800e500:	4689      	mov	r9, r1
 800e502:	dd69      	ble.n	800e5d8 <__ieee754_rem_pio2+0x368>
 800e504:	a364      	add	r3, pc, #400	; (adr r3, 800e698 <__ieee754_rem_pio2+0x428>)
 800e506:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e50a:	ec51 0b19 	vmov	r0, r1, d9
 800e50e:	f7f2 f823 	bl	8000558 <__aeabi_dmul>
 800e512:	4680      	mov	r8, r0
 800e514:	4689      	mov	r9, r1
 800e516:	4642      	mov	r2, r8
 800e518:	464b      	mov	r3, r9
 800e51a:	4650      	mov	r0, sl
 800e51c:	4659      	mov	r1, fp
 800e51e:	f7f1 fe63 	bl	80001e8 <__aeabi_dsub>
 800e522:	4602      	mov	r2, r0
 800e524:	460b      	mov	r3, r1
 800e526:	4650      	mov	r0, sl
 800e528:	4659      	mov	r1, fp
 800e52a:	4692      	mov	sl, r2
 800e52c:	469b      	mov	fp, r3
 800e52e:	f7f1 fe5b 	bl	80001e8 <__aeabi_dsub>
 800e532:	4642      	mov	r2, r8
 800e534:	464b      	mov	r3, r9
 800e536:	f7f1 fe57 	bl	80001e8 <__aeabi_dsub>
 800e53a:	a359      	add	r3, pc, #356	; (adr r3, 800e6a0 <__ieee754_rem_pio2+0x430>)
 800e53c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e540:	4680      	mov	r8, r0
 800e542:	4689      	mov	r9, r1
 800e544:	ec51 0b19 	vmov	r0, r1, d9
 800e548:	f7f2 f806 	bl	8000558 <__aeabi_dmul>
 800e54c:	4642      	mov	r2, r8
 800e54e:	464b      	mov	r3, r9
 800e550:	f7f1 fe4a 	bl	80001e8 <__aeabi_dsub>
 800e554:	4602      	mov	r2, r0
 800e556:	460b      	mov	r3, r1
 800e558:	4650      	mov	r0, sl
 800e55a:	4659      	mov	r1, fp
 800e55c:	ec43 2b18 	vmov	d8, r2, r3
 800e560:	f7f1 fe42 	bl	80001e8 <__aeabi_dsub>
 800e564:	9a03      	ldr	r2, [sp, #12]
 800e566:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800e56a:	1ad3      	subs	r3, r2, r3
 800e56c:	2b31      	cmp	r3, #49	; 0x31
 800e56e:	4680      	mov	r8, r0
 800e570:	4689      	mov	r9, r1
 800e572:	dd31      	ble.n	800e5d8 <__ieee754_rem_pio2+0x368>
 800e574:	a34d      	add	r3, pc, #308	; (adr r3, 800e6ac <__ieee754_rem_pio2+0x43c>)
 800e576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e57a:	ec51 0b19 	vmov	r0, r1, d9
 800e57e:	f7f1 ffeb 	bl	8000558 <__aeabi_dmul>
 800e582:	4680      	mov	r8, r0
 800e584:	4689      	mov	r9, r1
 800e586:	4642      	mov	r2, r8
 800e588:	464b      	mov	r3, r9
 800e58a:	4650      	mov	r0, sl
 800e58c:	4659      	mov	r1, fp
 800e58e:	f7f1 fe2b 	bl	80001e8 <__aeabi_dsub>
 800e592:	4602      	mov	r2, r0
 800e594:	460b      	mov	r3, r1
 800e596:	4650      	mov	r0, sl
 800e598:	4659      	mov	r1, fp
 800e59a:	4692      	mov	sl, r2
 800e59c:	469b      	mov	fp, r3
 800e59e:	f7f1 fe23 	bl	80001e8 <__aeabi_dsub>
 800e5a2:	4642      	mov	r2, r8
 800e5a4:	464b      	mov	r3, r9
 800e5a6:	f7f1 fe1f 	bl	80001e8 <__aeabi_dsub>
 800e5aa:	a342      	add	r3, pc, #264	; (adr r3, 800e6b4 <__ieee754_rem_pio2+0x444>)
 800e5ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5b0:	4680      	mov	r8, r0
 800e5b2:	4689      	mov	r9, r1
 800e5b4:	ec51 0b19 	vmov	r0, r1, d9
 800e5b8:	f7f1 ffce 	bl	8000558 <__aeabi_dmul>
 800e5bc:	4642      	mov	r2, r8
 800e5be:	464b      	mov	r3, r9
 800e5c0:	f7f1 fe12 	bl	80001e8 <__aeabi_dsub>
 800e5c4:	4602      	mov	r2, r0
 800e5c6:	460b      	mov	r3, r1
 800e5c8:	ec43 2b18 	vmov	d8, r2, r3
 800e5cc:	4650      	mov	r0, sl
 800e5ce:	4659      	mov	r1, fp
 800e5d0:	f7f1 fe0a 	bl	80001e8 <__aeabi_dsub>
 800e5d4:	4680      	mov	r8, r0
 800e5d6:	4689      	mov	r9, r1
 800e5d8:	4642      	mov	r2, r8
 800e5da:	464b      	mov	r3, r9
 800e5dc:	e9c4 8900 	strd	r8, r9, [r4]
 800e5e0:	4650      	mov	r0, sl
 800e5e2:	4659      	mov	r1, fp
 800e5e4:	f7f1 fe00 	bl	80001e8 <__aeabi_dsub>
 800e5e8:	ec53 2b18 	vmov	r2, r3, d8
 800e5ec:	f7f1 fdfc 	bl	80001e8 <__aeabi_dsub>
 800e5f0:	2f00      	cmp	r7, #0
 800e5f2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e5f6:	f6bf ae73 	bge.w	800e2e0 <__ieee754_rem_pio2+0x70>
 800e5fa:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800e5fe:	e9c4 8300 	strd	r8, r3, [r4]
 800e602:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800e606:	e9c4 0302 	strd	r0, r3, [r4, #8]
 800e60a:	4276      	negs	r6, r6
 800e60c:	e668      	b.n	800e2e0 <__ieee754_rem_pio2+0x70>
 800e60e:	2303      	movs	r3, #3
 800e610:	e6ae      	b.n	800e370 <__ieee754_rem_pio2+0x100>
 800e612:	f7f1 fdeb 	bl	80001ec <__adddf3>
 800e616:	4b24      	ldr	r3, [pc, #144]	; (800e6a8 <__ieee754_rem_pio2+0x438>)
 800e618:	429d      	cmp	r5, r3
 800e61a:	4680      	mov	r8, r0
 800e61c:	4689      	mov	r9, r1
 800e61e:	d016      	beq.n	800e64e <__ieee754_rem_pio2+0x3de>
 800e620:	a31b      	add	r3, pc, #108	; (adr r3, 800e690 <__ieee754_rem_pio2+0x420>)
 800e622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e626:	f7f1 fde1 	bl	80001ec <__adddf3>
 800e62a:	4602      	mov	r2, r0
 800e62c:	460b      	mov	r3, r1
 800e62e:	e9c4 2300 	strd	r2, r3, [r4]
 800e632:	4640      	mov	r0, r8
 800e634:	4649      	mov	r1, r9
 800e636:	f7f1 fdd7 	bl	80001e8 <__aeabi_dsub>
 800e63a:	a315      	add	r3, pc, #84	; (adr r3, 800e690 <__ieee754_rem_pio2+0x420>)
 800e63c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e640:	f7f1 fdd4 	bl	80001ec <__adddf3>
 800e644:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e648:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e64c:	e648      	b.n	800e2e0 <__ieee754_rem_pio2+0x70>
 800e64e:	a312      	add	r3, pc, #72	; (adr r3, 800e698 <__ieee754_rem_pio2+0x428>)
 800e650:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e654:	f7f1 fdca 	bl	80001ec <__adddf3>
 800e658:	a311      	add	r3, pc, #68	; (adr r3, 800e6a0 <__ieee754_rem_pio2+0x430>)
 800e65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e65e:	4680      	mov	r8, r0
 800e660:	4689      	mov	r9, r1
 800e662:	f7f1 fdc3 	bl	80001ec <__adddf3>
 800e666:	4602      	mov	r2, r0
 800e668:	460b      	mov	r3, r1
 800e66a:	e9c4 2300 	strd	r2, r3, [r4]
 800e66e:	4640      	mov	r0, r8
 800e670:	4649      	mov	r1, r9
 800e672:	f7f1 fdb9 	bl	80001e8 <__aeabi_dsub>
 800e676:	a30a      	add	r3, pc, #40	; (adr r3, 800e6a0 <__ieee754_rem_pio2+0x430>)
 800e678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e67c:	f7f1 fdb6 	bl	80001ec <__adddf3>
 800e680:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800e684:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800e688:	e62a      	b.n	800e2e0 <__ieee754_rem_pio2+0x70>
 800e68a:	bf00      	nop
 800e68c:	f3af 8000 	nop.w
 800e690:	1a626331 	.word	0x1a626331
 800e694:	3dd0b461 	.word	0x3dd0b461
 800e698:	1a600000 	.word	0x1a600000
 800e69c:	3dd0b461 	.word	0x3dd0b461
 800e6a0:	2e037073 	.word	0x2e037073
 800e6a4:	3ba3198a 	.word	0x3ba3198a
 800e6a8:	3ff921fb 	.word	0x3ff921fb
 800e6ac:	2e000000 	.word	0x2e000000
 800e6b0:	3ba3198a 	.word	0x3ba3198a
 800e6b4:	252049c1 	.word	0x252049c1
 800e6b8:	397b839a 	.word	0x397b839a

0800e6bc <__ieee754_sqrt>:
 800e6bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6c0:	4a63      	ldr	r2, [pc, #396]	; (800e850 <__ieee754_sqrt+0x194>)
 800e6c2:	ec55 4b10 	vmov	r4, r5, d0
 800e6c6:	43aa      	bics	r2, r5
 800e6c8:	f000 809f 	beq.w	800e80a <__ieee754_sqrt+0x14e>
 800e6cc:	2d00      	cmp	r5, #0
 800e6ce:	ee10 ca10 	vmov	ip, s0
 800e6d2:	462b      	mov	r3, r5
 800e6d4:	dd54      	ble.n	800e780 <__ieee754_sqrt+0xc4>
 800e6d6:	1529      	asrs	r1, r5, #20
 800e6d8:	d063      	beq.n	800e7a2 <__ieee754_sqrt+0xe6>
 800e6da:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e6de:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800e6e2:	07c9      	lsls	r1, r1, #31
 800e6e4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e6e8:	d404      	bmi.n	800e6f4 <__ieee754_sqrt+0x38>
 800e6ea:	005b      	lsls	r3, r3, #1
 800e6ec:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 800e6f0:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800e6f4:	ea4f 72dc 	mov.w	r2, ip, lsr #31
 800e6f8:	2600      	movs	r6, #0
 800e6fa:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800e6fe:	107f      	asrs	r7, r7, #1
 800e700:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800e704:	f04f 0e16 	mov.w	lr, #22
 800e708:	4634      	mov	r4, r6
 800e70a:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800e70e:	18a1      	adds	r1, r4, r2
 800e710:	4299      	cmp	r1, r3
 800e712:	dc02      	bgt.n	800e71a <__ieee754_sqrt+0x5e>
 800e714:	1a5b      	subs	r3, r3, r1
 800e716:	188c      	adds	r4, r1, r2
 800e718:	4416      	add	r6, r2
 800e71a:	005b      	lsls	r3, r3, #1
 800e71c:	f1be 0e01 	subs.w	lr, lr, #1
 800e720:	eb03 73dc 	add.w	r3, r3, ip, lsr #31
 800e724:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e728:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800e72c:	d1ef      	bne.n	800e70e <__ieee754_sqrt+0x52>
 800e72e:	4675      	mov	r5, lr
 800e730:	2020      	movs	r0, #32
 800e732:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e736:	e00a      	b.n	800e74e <__ieee754_sqrt+0x92>
 800e738:	d044      	beq.n	800e7c4 <__ieee754_sqrt+0x108>
 800e73a:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800e73e:	3801      	subs	r0, #1
 800e740:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 800e744:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
 800e748:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800e74c:	d043      	beq.n	800e7d6 <__ieee754_sqrt+0x11a>
 800e74e:	42a3      	cmp	r3, r4
 800e750:	eb02 010e 	add.w	r1, r2, lr
 800e754:	ddf0      	ble.n	800e738 <__ieee754_sqrt+0x7c>
 800e756:	2900      	cmp	r1, #0
 800e758:	eb01 0e02 	add.w	lr, r1, r2
 800e75c:	db0a      	blt.n	800e774 <__ieee754_sqrt+0xb8>
 800e75e:	46a0      	mov	r8, r4
 800e760:	1b1b      	subs	r3, r3, r4
 800e762:	4561      	cmp	r1, ip
 800e764:	bf88      	it	hi
 800e766:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
 800e76a:	ebac 0c01 	sub.w	ip, ip, r1
 800e76e:	4415      	add	r5, r2
 800e770:	4644      	mov	r4, r8
 800e772:	e7e2      	b.n	800e73a <__ieee754_sqrt+0x7e>
 800e774:	f1be 0f00 	cmp.w	lr, #0
 800e778:	dbf1      	blt.n	800e75e <__ieee754_sqrt+0xa2>
 800e77a:	f104 0801 	add.w	r8, r4, #1
 800e77e:	e7ef      	b.n	800e760 <__ieee754_sqrt+0xa4>
 800e780:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800e784:	4322      	orrs	r2, r4
 800e786:	d038      	beq.n	800e7fa <__ieee754_sqrt+0x13e>
 800e788:	2d00      	cmp	r5, #0
 800e78a:	d14e      	bne.n	800e82a <__ieee754_sqrt+0x16e>
 800e78c:	4629      	mov	r1, r5
 800e78e:	ea4f 22dc 	mov.w	r2, ip, lsr #11
 800e792:	3915      	subs	r1, #21
 800e794:	4613      	mov	r3, r2
 800e796:	ea4f 5c4c 	mov.w	ip, ip, lsl #21
 800e79a:	2a00      	cmp	r2, #0
 800e79c:	d0f7      	beq.n	800e78e <__ieee754_sqrt+0xd2>
 800e79e:	02d6      	lsls	r6, r2, #11
 800e7a0:	d450      	bmi.n	800e844 <__ieee754_sqrt+0x188>
 800e7a2:	2000      	movs	r0, #0
 800e7a4:	005b      	lsls	r3, r3, #1
 800e7a6:	02dd      	lsls	r5, r3, #11
 800e7a8:	4604      	mov	r4, r0
 800e7aa:	f100 0001 	add.w	r0, r0, #1
 800e7ae:	d5f9      	bpl.n	800e7a4 <__ieee754_sqrt+0xe8>
 800e7b0:	461a      	mov	r2, r3
 800e7b2:	4663      	mov	r3, ip
 800e7b4:	fa0c fc00 	lsl.w	ip, ip, r0
 800e7b8:	f1c0 0020 	rsb	r0, r0, #32
 800e7bc:	40c3      	lsrs	r3, r0
 800e7be:	1b09      	subs	r1, r1, r4
 800e7c0:	4313      	orrs	r3, r2
 800e7c2:	e78a      	b.n	800e6da <__ieee754_sqrt+0x1e>
 800e7c4:	4561      	cmp	r1, ip
 800e7c6:	d8b8      	bhi.n	800e73a <__ieee754_sqrt+0x7e>
 800e7c8:	2900      	cmp	r1, #0
 800e7ca:	eb01 0e02 	add.w	lr, r1, r2
 800e7ce:	dbd1      	blt.n	800e774 <__ieee754_sqrt+0xb8>
 800e7d0:	4698      	mov	r8, r3
 800e7d2:	2300      	movs	r3, #0
 800e7d4:	e7c9      	b.n	800e76a <__ieee754_sqrt+0xae>
 800e7d6:	ea53 030c 	orrs.w	r3, r3, ip
 800e7da:	d110      	bne.n	800e7fe <__ieee754_sqrt+0x142>
 800e7dc:	0868      	lsrs	r0, r5, #1
 800e7de:	1071      	asrs	r1, r6, #1
 800e7e0:	07f3      	lsls	r3, r6, #31
 800e7e2:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 800e7e6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 800e7ea:	bf48      	it	mi
 800e7ec:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
 800e7f0:	eb01 5307 	add.w	r3, r1, r7, lsl #20
 800e7f4:	4602      	mov	r2, r0
 800e7f6:	ec43 2b10 	vmov	d0, r2, r3
 800e7fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e7fe:	1c6a      	adds	r2, r5, #1
 800e800:	bf16      	itet	ne
 800e802:	1c68      	addne	r0, r5, #1
 800e804:	3601      	addeq	r6, #1
 800e806:	0840      	lsrne	r0, r0, #1
 800e808:	e7e9      	b.n	800e7de <__ieee754_sqrt+0x122>
 800e80a:	ee10 2a10 	vmov	r2, s0
 800e80e:	ee10 0a10 	vmov	r0, s0
 800e812:	462b      	mov	r3, r5
 800e814:	4629      	mov	r1, r5
 800e816:	f7f1 fe9f 	bl	8000558 <__aeabi_dmul>
 800e81a:	4622      	mov	r2, r4
 800e81c:	462b      	mov	r3, r5
 800e81e:	f7f1 fce5 	bl	80001ec <__adddf3>
 800e822:	ec41 0b10 	vmov	d0, r0, r1
 800e826:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e82a:	ee10 2a10 	vmov	r2, s0
 800e82e:	4620      	mov	r0, r4
 800e830:	4629      	mov	r1, r5
 800e832:	f7f1 fcd9 	bl	80001e8 <__aeabi_dsub>
 800e836:	4602      	mov	r2, r0
 800e838:	460b      	mov	r3, r1
 800e83a:	f7f1 ffb7 	bl	80007ac <__aeabi_ddiv>
 800e83e:	ec41 0b10 	vmov	d0, r0, r1
 800e842:	e7da      	b.n	800e7fa <__ieee754_sqrt+0x13e>
 800e844:	4663      	mov	r3, ip
 800e846:	2020      	movs	r0, #32
 800e848:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 800e84c:	e7b6      	b.n	800e7bc <__ieee754_sqrt+0x100>
 800e84e:	bf00      	nop
 800e850:	7ff00000 	.word	0x7ff00000
 800e854:	00000000 	.word	0x00000000

0800e858 <__kernel_cos>:
 800e858:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e85c:	ec57 6b10 	vmov	r6, r7, d0
 800e860:	f027 4900 	bic.w	r9, r7, #2147483648	; 0x80000000
 800e864:	f1b9 5f79 	cmp.w	r9, #1044381696	; 0x3e400000
 800e868:	ed2d 8b04 	vpush	{d8-d9}
 800e86c:	ec5b ab11 	vmov	sl, fp, d1
 800e870:	da71      	bge.n	800e956 <__kernel_cos+0xfe>
 800e872:	ee10 0a10 	vmov	r0, s0
 800e876:	4639      	mov	r1, r7
 800e878:	f7f2 f91e 	bl	8000ab8 <__aeabi_d2iz>
 800e87c:	2800      	cmp	r0, #0
 800e87e:	f000 80f6 	beq.w	800ea6e <__kernel_cos+0x216>
 800e882:	4632      	mov	r2, r6
 800e884:	463b      	mov	r3, r7
 800e886:	4630      	mov	r0, r6
 800e888:	4639      	mov	r1, r7
 800e88a:	f7f1 fe65 	bl	8000558 <__aeabi_dmul>
 800e88e:	a37c      	add	r3, pc, #496	; (adr r3, 800ea80 <__kernel_cos+0x228>)
 800e890:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e894:	4604      	mov	r4, r0
 800e896:	460d      	mov	r5, r1
 800e898:	f7f1 fe5e 	bl	8000558 <__aeabi_dmul>
 800e89c:	a37a      	add	r3, pc, #488	; (adr r3, 800ea88 <__kernel_cos+0x230>)
 800e89e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8a2:	f7f1 fca3 	bl	80001ec <__adddf3>
 800e8a6:	4622      	mov	r2, r4
 800e8a8:	462b      	mov	r3, r5
 800e8aa:	f7f1 fe55 	bl	8000558 <__aeabi_dmul>
 800e8ae:	a378      	add	r3, pc, #480	; (adr r3, 800ea90 <__kernel_cos+0x238>)
 800e8b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8b4:	f7f1 fc98 	bl	80001e8 <__aeabi_dsub>
 800e8b8:	4622      	mov	r2, r4
 800e8ba:	462b      	mov	r3, r5
 800e8bc:	f7f1 fe4c 	bl	8000558 <__aeabi_dmul>
 800e8c0:	a375      	add	r3, pc, #468	; (adr r3, 800ea98 <__kernel_cos+0x240>)
 800e8c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8c6:	f7f1 fc91 	bl	80001ec <__adddf3>
 800e8ca:	4622      	mov	r2, r4
 800e8cc:	462b      	mov	r3, r5
 800e8ce:	f7f1 fe43 	bl	8000558 <__aeabi_dmul>
 800e8d2:	a373      	add	r3, pc, #460	; (adr r3, 800eaa0 <__kernel_cos+0x248>)
 800e8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d8:	f7f1 fc86 	bl	80001e8 <__aeabi_dsub>
 800e8dc:	4622      	mov	r2, r4
 800e8de:	462b      	mov	r3, r5
 800e8e0:	f7f1 fe3a 	bl	8000558 <__aeabi_dmul>
 800e8e4:	a370      	add	r3, pc, #448	; (adr r3, 800eaa8 <__kernel_cos+0x250>)
 800e8e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8ea:	f7f1 fc7f 	bl	80001ec <__adddf3>
 800e8ee:	4622      	mov	r2, r4
 800e8f0:	462b      	mov	r3, r5
 800e8f2:	f7f1 fe31 	bl	8000558 <__aeabi_dmul>
 800e8f6:	ec41 0b18 	vmov	d8, r0, r1
 800e8fa:	4b71      	ldr	r3, [pc, #452]	; (800eac0 <__kernel_cos+0x268>)
 800e8fc:	2200      	movs	r2, #0
 800e8fe:	4620      	mov	r0, r4
 800e900:	4629      	mov	r1, r5
 800e902:	f7f1 fe29 	bl	8000558 <__aeabi_dmul>
 800e906:	ec53 2b18 	vmov	r2, r3, d8
 800e90a:	4680      	mov	r8, r0
 800e90c:	4689      	mov	r9, r1
 800e90e:	4620      	mov	r0, r4
 800e910:	4629      	mov	r1, r5
 800e912:	f7f1 fe21 	bl	8000558 <__aeabi_dmul>
 800e916:	4652      	mov	r2, sl
 800e918:	465b      	mov	r3, fp
 800e91a:	4604      	mov	r4, r0
 800e91c:	460d      	mov	r5, r1
 800e91e:	4630      	mov	r0, r6
 800e920:	4639      	mov	r1, r7
 800e922:	f7f1 fe19 	bl	8000558 <__aeabi_dmul>
 800e926:	4602      	mov	r2, r0
 800e928:	460b      	mov	r3, r1
 800e92a:	4620      	mov	r0, r4
 800e92c:	4629      	mov	r1, r5
 800e92e:	f7f1 fc5b 	bl	80001e8 <__aeabi_dsub>
 800e932:	4602      	mov	r2, r0
 800e934:	460b      	mov	r3, r1
 800e936:	4640      	mov	r0, r8
 800e938:	4649      	mov	r1, r9
 800e93a:	f7f1 fc55 	bl	80001e8 <__aeabi_dsub>
 800e93e:	4602      	mov	r2, r0
 800e940:	460b      	mov	r3, r1
 800e942:	2000      	movs	r0, #0
 800e944:	495f      	ldr	r1, [pc, #380]	; (800eac4 <__kernel_cos+0x26c>)
 800e946:	f7f1 fc4f 	bl	80001e8 <__aeabi_dsub>
 800e94a:	ecbd 8b04 	vpop	{d8-d9}
 800e94e:	ec41 0b10 	vmov	d0, r0, r1
 800e952:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e956:	ee10 2a10 	vmov	r2, s0
 800e95a:	ee10 0a10 	vmov	r0, s0
 800e95e:	463b      	mov	r3, r7
 800e960:	4639      	mov	r1, r7
 800e962:	f7f1 fdf9 	bl	8000558 <__aeabi_dmul>
 800e966:	a346      	add	r3, pc, #280	; (adr r3, 800ea80 <__kernel_cos+0x228>)
 800e968:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e96c:	4604      	mov	r4, r0
 800e96e:	460d      	mov	r5, r1
 800e970:	f7f1 fdf2 	bl	8000558 <__aeabi_dmul>
 800e974:	a344      	add	r3, pc, #272	; (adr r3, 800ea88 <__kernel_cos+0x230>)
 800e976:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e97a:	f7f1 fc37 	bl	80001ec <__adddf3>
 800e97e:	4622      	mov	r2, r4
 800e980:	462b      	mov	r3, r5
 800e982:	f7f1 fde9 	bl	8000558 <__aeabi_dmul>
 800e986:	a342      	add	r3, pc, #264	; (adr r3, 800ea90 <__kernel_cos+0x238>)
 800e988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e98c:	f7f1 fc2c 	bl	80001e8 <__aeabi_dsub>
 800e990:	4622      	mov	r2, r4
 800e992:	462b      	mov	r3, r5
 800e994:	f7f1 fde0 	bl	8000558 <__aeabi_dmul>
 800e998:	a33f      	add	r3, pc, #252	; (adr r3, 800ea98 <__kernel_cos+0x240>)
 800e99a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e99e:	f7f1 fc25 	bl	80001ec <__adddf3>
 800e9a2:	4622      	mov	r2, r4
 800e9a4:	462b      	mov	r3, r5
 800e9a6:	f7f1 fdd7 	bl	8000558 <__aeabi_dmul>
 800e9aa:	a33d      	add	r3, pc, #244	; (adr r3, 800eaa0 <__kernel_cos+0x248>)
 800e9ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9b0:	f7f1 fc1a 	bl	80001e8 <__aeabi_dsub>
 800e9b4:	4622      	mov	r2, r4
 800e9b6:	462b      	mov	r3, r5
 800e9b8:	f7f1 fdce 	bl	8000558 <__aeabi_dmul>
 800e9bc:	a33a      	add	r3, pc, #232	; (adr r3, 800eaa8 <__kernel_cos+0x250>)
 800e9be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9c2:	f7f1 fc13 	bl	80001ec <__adddf3>
 800e9c6:	462b      	mov	r3, r5
 800e9c8:	4622      	mov	r2, r4
 800e9ca:	f7f1 fdc5 	bl	8000558 <__aeabi_dmul>
 800e9ce:	4b3e      	ldr	r3, [pc, #248]	; (800eac8 <__kernel_cos+0x270>)
 800e9d0:	4599      	cmp	r9, r3
 800e9d2:	ec41 0b18 	vmov	d8, r0, r1
 800e9d6:	dd90      	ble.n	800e8fa <__kernel_cos+0xa2>
 800e9d8:	4b3c      	ldr	r3, [pc, #240]	; (800eacc <__kernel_cos+0x274>)
 800e9da:	4599      	cmp	r9, r3
 800e9dc:	dc3c      	bgt.n	800ea58 <__kernel_cos+0x200>
 800e9de:	2200      	movs	r2, #0
 800e9e0:	f5a9 1300 	sub.w	r3, r9, #2097152	; 0x200000
 800e9e4:	4937      	ldr	r1, [pc, #220]	; (800eac4 <__kernel_cos+0x26c>)
 800e9e6:	2000      	movs	r0, #0
 800e9e8:	4690      	mov	r8, r2
 800e9ea:	4699      	mov	r9, r3
 800e9ec:	f7f1 fbfc 	bl	80001e8 <__aeabi_dsub>
 800e9f0:	ec41 0b19 	vmov	d9, r0, r1
 800e9f4:	4b32      	ldr	r3, [pc, #200]	; (800eac0 <__kernel_cos+0x268>)
 800e9f6:	2200      	movs	r2, #0
 800e9f8:	4620      	mov	r0, r4
 800e9fa:	4629      	mov	r1, r5
 800e9fc:	f7f1 fdac 	bl	8000558 <__aeabi_dmul>
 800ea00:	4642      	mov	r2, r8
 800ea02:	464b      	mov	r3, r9
 800ea04:	f7f1 fbf0 	bl	80001e8 <__aeabi_dsub>
 800ea08:	ec53 2b18 	vmov	r2, r3, d8
 800ea0c:	4680      	mov	r8, r0
 800ea0e:	4689      	mov	r9, r1
 800ea10:	4620      	mov	r0, r4
 800ea12:	4629      	mov	r1, r5
 800ea14:	f7f1 fda0 	bl	8000558 <__aeabi_dmul>
 800ea18:	4652      	mov	r2, sl
 800ea1a:	465b      	mov	r3, fp
 800ea1c:	4604      	mov	r4, r0
 800ea1e:	460d      	mov	r5, r1
 800ea20:	4630      	mov	r0, r6
 800ea22:	4639      	mov	r1, r7
 800ea24:	f7f1 fd98 	bl	8000558 <__aeabi_dmul>
 800ea28:	4602      	mov	r2, r0
 800ea2a:	460b      	mov	r3, r1
 800ea2c:	4620      	mov	r0, r4
 800ea2e:	4629      	mov	r1, r5
 800ea30:	f7f1 fbda 	bl	80001e8 <__aeabi_dsub>
 800ea34:	4602      	mov	r2, r0
 800ea36:	460b      	mov	r3, r1
 800ea38:	4640      	mov	r0, r8
 800ea3a:	4649      	mov	r1, r9
 800ea3c:	f7f1 fbd4 	bl	80001e8 <__aeabi_dsub>
 800ea40:	4602      	mov	r2, r0
 800ea42:	460b      	mov	r3, r1
 800ea44:	ec51 0b19 	vmov	r0, r1, d9
 800ea48:	f7f1 fbce 	bl	80001e8 <__aeabi_dsub>
 800ea4c:	ecbd 8b04 	vpop	{d8-d9}
 800ea50:	ec41 0b10 	vmov	d0, r0, r1
 800ea54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea58:	ed9f 7b15 	vldr	d7, [pc, #84]	; 800eab0 <__kernel_cos+0x258>
 800ea5c:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800ead0 <__kernel_cos+0x278>
 800ea60:	eeb0 9a47 	vmov.f32	s18, s14
 800ea64:	eef0 9a67 	vmov.f32	s19, s15
 800ea68:	f04f 0800 	mov.w	r8, #0
 800ea6c:	e7c2      	b.n	800e9f4 <__kernel_cos+0x19c>
 800ea6e:	ecbd 8b04 	vpop	{d8-d9}
 800ea72:	ed9f 0b11 	vldr	d0, [pc, #68]	; 800eab8 <__kernel_cos+0x260>
 800ea76:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea7a:	bf00      	nop
 800ea7c:	f3af 8000 	nop.w
 800ea80:	be8838d4 	.word	0xbe8838d4
 800ea84:	bda8fae9 	.word	0xbda8fae9
 800ea88:	bdb4b1c4 	.word	0xbdb4b1c4
 800ea8c:	3e21ee9e 	.word	0x3e21ee9e
 800ea90:	809c52ad 	.word	0x809c52ad
 800ea94:	3e927e4f 	.word	0x3e927e4f
 800ea98:	19cb1590 	.word	0x19cb1590
 800ea9c:	3efa01a0 	.word	0x3efa01a0
 800eaa0:	16c15177 	.word	0x16c15177
 800eaa4:	3f56c16c 	.word	0x3f56c16c
 800eaa8:	5555554c 	.word	0x5555554c
 800eaac:	3fa55555 	.word	0x3fa55555
 800eab0:	00000000 	.word	0x00000000
 800eab4:	3fe70000 	.word	0x3fe70000
 800eab8:	00000000 	.word	0x00000000
 800eabc:	3ff00000 	.word	0x3ff00000
 800eac0:	3fe00000 	.word	0x3fe00000
 800eac4:	3ff00000 	.word	0x3ff00000
 800eac8:	3fd33332 	.word	0x3fd33332
 800eacc:	3fe90000 	.word	0x3fe90000
 800ead0:	3fd20000 	.word	0x3fd20000
 800ead4:	00000000 	.word	0x00000000

0800ead8 <__kernel_rem_pio2>:
 800ead8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eadc:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800eae0:	461c      	mov	r4, r3
 800eae2:	9308      	str	r3, [sp, #32]
 800eae4:	910b      	str	r1, [sp, #44]	; 0x2c
 800eae6:	4bba      	ldr	r3, [pc, #744]	; (800edd0 <__kernel_rem_pio2+0x2f8>)
 800eae8:	99a2      	ldr	r1, [sp, #648]	; 0x288
 800eaea:	9004      	str	r0, [sp, #16]
 800eaec:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800eaf0:	9105      	str	r1, [sp, #20]
 800eaf2:	1e63      	subs	r3, r4, #1
 800eaf4:	f112 0f14 	cmn.w	r2, #20
 800eaf8:	9303      	str	r3, [sp, #12]
 800eafa:	f2c0 834b 	blt.w	800f194 <__kernel_rem_pio2+0x6bc>
 800eafe:	49b5      	ldr	r1, [pc, #724]	; (800edd4 <__kernel_rem_pio2+0x2fc>)
 800eb00:	1ed3      	subs	r3, r2, #3
 800eb02:	fb81 0103 	smull	r0, r1, r1, r3
 800eb06:	17db      	asrs	r3, r3, #31
 800eb08:	ebc3 03a1 	rsb	r3, r3, r1, asr #2
 800eb0c:	9307      	str	r3, [sp, #28]
 800eb0e:	3301      	adds	r3, #1
 800eb10:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
 800eb14:	00db      	lsls	r3, r3, #3
 800eb16:	18d3      	adds	r3, r2, r3
 800eb18:	9306      	str	r3, [sp, #24]
 800eb1a:	9a07      	ldr	r2, [sp, #28]
 800eb1c:	9b03      	ldr	r3, [sp, #12]
 800eb1e:	1ad4      	subs	r4, r2, r3
 800eb20:	9a05      	ldr	r2, [sp, #20]
 800eb22:	18d6      	adds	r6, r2, r3
 800eb24:	d41a      	bmi.n	800eb5c <__kernel_rem_pio2+0x84>
 800eb26:	3601      	adds	r6, #1
 800eb28:	9fa3      	ldr	r7, [sp, #652]	; 0x28c
 800eb2a:	4426      	add	r6, r4
 800eb2c:	ad20      	add	r5, sp, #128	; 0x80
 800eb2e:	f04f 0800 	mov.w	r8, #0
 800eb32:	f04f 0900 	mov.w	r9, #0
 800eb36:	e008      	b.n	800eb4a <__kernel_rem_pio2+0x72>
 800eb38:	f857 0024 	ldr.w	r0, [r7, r4, lsl #2]
 800eb3c:	f7f1 fca2 	bl	8000484 <__aeabi_i2d>
 800eb40:	3401      	adds	r4, #1
 800eb42:	42b4      	cmp	r4, r6
 800eb44:	e8e5 0102 	strd	r0, r1, [r5], #8
 800eb48:	d008      	beq.n	800eb5c <__kernel_rem_pio2+0x84>
 800eb4a:	2c00      	cmp	r4, #0
 800eb4c:	daf4      	bge.n	800eb38 <__kernel_rem_pio2+0x60>
 800eb4e:	3401      	adds	r4, #1
 800eb50:	4640      	mov	r0, r8
 800eb52:	4649      	mov	r1, r9
 800eb54:	42b4      	cmp	r4, r6
 800eb56:	e8e5 0102 	strd	r0, r1, [r5], #8
 800eb5a:	d1f6      	bne.n	800eb4a <__kernel_rem_pio2+0x72>
 800eb5c:	9b05      	ldr	r3, [sp, #20]
 800eb5e:	2b00      	cmp	r3, #0
 800eb60:	f2c0 83c6 	blt.w	800f2f0 <__kernel_rem_pio2+0x818>
 800eb64:	9b08      	ldr	r3, [sp, #32]
 800eb66:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800eb6a:	aa20      	add	r2, sp, #128	; 0x80
 800eb6c:	eb02 0ac3 	add.w	sl, r2, r3, lsl #3
 800eb70:	00da      	lsls	r2, r3, #3
 800eb72:	9202      	str	r2, [sp, #8]
 800eb74:	9a05      	ldr	r2, [sp, #20]
 800eb76:	441a      	add	r2, r3
 800eb78:	9201      	str	r2, [sp, #4]
 800eb7a:	9a04      	ldr	r2, [sp, #16]
 800eb7c:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 800eb80:	eb02 08c3 	add.w	r8, r2, r3, lsl #3
 800eb84:	9b03      	ldr	r3, [sp, #12]
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	f2c0 81a7 	blt.w	800eeda <__kernel_rem_pio2+0x402>
 800eb8c:	9e04      	ldr	r6, [sp, #16]
 800eb8e:	4657      	mov	r7, sl
 800eb90:	2400      	movs	r4, #0
 800eb92:	2500      	movs	r5, #0
 800eb94:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 800eb98:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800eb9c:	f7f1 fcdc 	bl	8000558 <__aeabi_dmul>
 800eba0:	4602      	mov	r2, r0
 800eba2:	460b      	mov	r3, r1
 800eba4:	4620      	mov	r0, r4
 800eba6:	4629      	mov	r1, r5
 800eba8:	f7f1 fb20 	bl	80001ec <__adddf3>
 800ebac:	4546      	cmp	r6, r8
 800ebae:	4604      	mov	r4, r0
 800ebb0:	460d      	mov	r5, r1
 800ebb2:	d1ef      	bne.n	800eb94 <__kernel_rem_pio2+0xbc>
 800ebb4:	9b01      	ldr	r3, [sp, #4]
 800ebb6:	f109 0901 	add.w	r9, r9, #1
 800ebba:	4599      	cmp	r9, r3
 800ebbc:	e8eb 4502 	strd	r4, r5, [fp], #8
 800ebc0:	f10a 0a08 	add.w	sl, sl, #8
 800ebc4:	d1de      	bne.n	800eb84 <__kernel_rem_pio2+0xac>
 800ebc6:	9a04      	ldr	r2, [sp, #16]
 800ebc8:	9b02      	ldr	r3, [sp, #8]
 800ebca:	4413      	add	r3, r2
 800ebcc:	9a05      	ldr	r2, [sp, #20]
 800ebce:	9201      	str	r2, [sp, #4]
 800ebd0:	469b      	mov	fp, r3
 800ebd2:	ab0b      	add	r3, sp, #44	; 0x2c
 800ebd4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ebd8:	930a      	str	r3, [sp, #40]	; 0x28
 800ebda:	ab0c      	add	r3, sp, #48	; 0x30
 800ebdc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 800ebe0:	3b08      	subs	r3, #8
 800ebe2:	9309      	str	r3, [sp, #36]	; 0x24
 800ebe4:	9a01      	ldr	r2, [sp, #4]
 800ebe6:	ab98      	add	r3, sp, #608	; 0x260
 800ebe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ebec:	2a00      	cmp	r2, #0
 800ebee:	e953 4528 	ldrd	r4, r5, [r3, #-160]	; 0xa0
 800ebf2:	dd29      	ble.n	800ec48 <__kernel_rem_pio2+0x170>
 800ebf4:	f50d 7ae0 	add.w	sl, sp, #448	; 0x1c0
 800ebf8:	eb0a 08c2 	add.w	r8, sl, r2, lsl #3
 800ebfc:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 800ec00:	4b75      	ldr	r3, [pc, #468]	; (800edd8 <__kernel_rem_pio2+0x300>)
 800ec02:	2200      	movs	r2, #0
 800ec04:	4620      	mov	r0, r4
 800ec06:	4629      	mov	r1, r5
 800ec08:	f7f1 fca6 	bl	8000558 <__aeabi_dmul>
 800ec0c:	f7f1 ff54 	bl	8000ab8 <__aeabi_d2iz>
 800ec10:	f7f1 fc38 	bl	8000484 <__aeabi_i2d>
 800ec14:	4b71      	ldr	r3, [pc, #452]	; (800eddc <__kernel_rem_pio2+0x304>)
 800ec16:	2200      	movs	r2, #0
 800ec18:	4606      	mov	r6, r0
 800ec1a:	460f      	mov	r7, r1
 800ec1c:	f7f1 fc9c 	bl	8000558 <__aeabi_dmul>
 800ec20:	4602      	mov	r2, r0
 800ec22:	460b      	mov	r3, r1
 800ec24:	4620      	mov	r0, r4
 800ec26:	4629      	mov	r1, r5
 800ec28:	f7f1 fade 	bl	80001e8 <__aeabi_dsub>
 800ec2c:	f7f1 ff44 	bl	8000ab8 <__aeabi_d2iz>
 800ec30:	e978 2302 	ldrd	r2, r3, [r8, #-8]!
 800ec34:	f849 0b04 	str.w	r0, [r9], #4
 800ec38:	4639      	mov	r1, r7
 800ec3a:	4630      	mov	r0, r6
 800ec3c:	f7f1 fad6 	bl	80001ec <__adddf3>
 800ec40:	45d0      	cmp	r8, sl
 800ec42:	4604      	mov	r4, r0
 800ec44:	460d      	mov	r5, r1
 800ec46:	d1db      	bne.n	800ec00 <__kernel_rem_pio2+0x128>
 800ec48:	f8dd 9018 	ldr.w	r9, [sp, #24]
 800ec4c:	ec45 4b10 	vmov	d0, r4, r5
 800ec50:	4648      	mov	r0, r9
 800ec52:	f000 fcf9 	bl	800f648 <scalbn>
 800ec56:	ec55 4b10 	vmov	r4, r5, d0
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800ec60:	ee10 0a10 	vmov	r0, s0
 800ec64:	4629      	mov	r1, r5
 800ec66:	f7f1 fc77 	bl	8000558 <__aeabi_dmul>
 800ec6a:	ec41 0b10 	vmov	d0, r0, r1
 800ec6e:	f000 fc67 	bl	800f540 <floor>
 800ec72:	4b5b      	ldr	r3, [pc, #364]	; (800ede0 <__kernel_rem_pio2+0x308>)
 800ec74:	ec51 0b10 	vmov	r0, r1, d0
 800ec78:	2200      	movs	r2, #0
 800ec7a:	f7f1 fc6d 	bl	8000558 <__aeabi_dmul>
 800ec7e:	4602      	mov	r2, r0
 800ec80:	460b      	mov	r3, r1
 800ec82:	4620      	mov	r0, r4
 800ec84:	4629      	mov	r1, r5
 800ec86:	f7f1 faaf 	bl	80001e8 <__aeabi_dsub>
 800ec8a:	460d      	mov	r5, r1
 800ec8c:	4604      	mov	r4, r0
 800ec8e:	f7f1 ff13 	bl	8000ab8 <__aeabi_d2iz>
 800ec92:	4680      	mov	r8, r0
 800ec94:	f7f1 fbf6 	bl	8000484 <__aeabi_i2d>
 800ec98:	460b      	mov	r3, r1
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	4629      	mov	r1, r5
 800ec9e:	4620      	mov	r0, r4
 800eca0:	f7f1 faa2 	bl	80001e8 <__aeabi_dsub>
 800eca4:	464b      	mov	r3, r9
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	4606      	mov	r6, r0
 800ecaa:	460f      	mov	r7, r1
 800ecac:	f340 809a 	ble.w	800ede4 <__kernel_rem_pio2+0x30c>
 800ecb0:	9a01      	ldr	r2, [sp, #4]
 800ecb2:	1e51      	subs	r1, r2, #1
 800ecb4:	aa0c      	add	r2, sp, #48	; 0x30
 800ecb6:	f1c9 0318 	rsb	r3, r9, #24
 800ecba:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 800ecbe:	fa42 f003 	asr.w	r0, r2, r3
 800ecc2:	fa00 f303 	lsl.w	r3, r0, r3
 800ecc6:	1ad3      	subs	r3, r2, r3
 800ecc8:	f1c9 0517 	rsb	r5, r9, #23
 800eccc:	aa0c      	add	r2, sp, #48	; 0x30
 800ecce:	fa43 f505 	asr.w	r5, r3, r5
 800ecd2:	2d00      	cmp	r5, #0
 800ecd4:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800ecd8:	4480      	add	r8, r0
 800ecda:	f300 808d 	bgt.w	800edf8 <__kernel_rem_pio2+0x320>
 800ecde:	2200      	movs	r2, #0
 800ece0:	2300      	movs	r3, #0
 800ece2:	4630      	mov	r0, r6
 800ece4:	4639      	mov	r1, r7
 800ece6:	f7f1 fe9f 	bl	8000a28 <__aeabi_dcmpeq>
 800ecea:	2800      	cmp	r0, #0
 800ecec:	f000 8259 	beq.w	800f1a2 <__kernel_rem_pio2+0x6ca>
 800ecf0:	9b01      	ldr	r3, [sp, #4]
 800ecf2:	9a05      	ldr	r2, [sp, #20]
 800ecf4:	f103 3aff 	add.w	sl, r3, #4294967295	; 0xffffffff
 800ecf8:	4552      	cmp	r2, sl
 800ecfa:	dc10      	bgt.n	800ed1e <__kernel_rem_pio2+0x246>
 800ecfc:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ed00:	aa0c      	add	r2, sp, #48	; 0x30
 800ed02:	3b01      	subs	r3, #1
 800ed04:	980a      	ldr	r0, [sp, #40]	; 0x28
 800ed06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800ed0a:	2200      	movs	r2, #0
 800ed0c:	f853 1904 	ldr.w	r1, [r3], #-4
 800ed10:	4283      	cmp	r3, r0
 800ed12:	ea42 0201 	orr.w	r2, r2, r1
 800ed16:	d1f9      	bne.n	800ed0c <__kernel_rem_pio2+0x234>
 800ed18:	2a00      	cmp	r2, #0
 800ed1a:	f040 80e1 	bne.w	800eee0 <__kernel_rem_pio2+0x408>
 800ed1e:	9b05      	ldr	r3, [sp, #20]
 800ed20:	aa0c      	add	r2, sp, #48	; 0x30
 800ed22:	3b01      	subs	r3, #1
 800ed24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ed28:	2b00      	cmp	r3, #0
 800ed2a:	f040 80d1 	bne.w	800eed0 <__kernel_rem_pio2+0x3f8>
 800ed2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ed30:	2301      	movs	r3, #1
 800ed32:	f852 1904 	ldr.w	r1, [r2], #-4
 800ed36:	3301      	adds	r3, #1
 800ed38:	2900      	cmp	r1, #0
 800ed3a:	d0fa      	beq.n	800ed32 <__kernel_rem_pio2+0x25a>
 800ed3c:	9a01      	ldr	r2, [sp, #4]
 800ed3e:	18d3      	adds	r3, r2, r3
 800ed40:	9302      	str	r3, [sp, #8]
 800ed42:	1c53      	adds	r3, r2, #1
 800ed44:	4699      	mov	r9, r3
 800ed46:	9a01      	ldr	r2, [sp, #4]
 800ed48:	9908      	ldr	r1, [sp, #32]
 800ed4a:	440a      	add	r2, r1
 800ed4c:	4690      	mov	r8, r2
 800ed4e:	9a07      	ldr	r2, [sp, #28]
 800ed50:	eb02 0a03 	add.w	sl, r2, r3
 800ed54:	f10a 4a80 	add.w	sl, sl, #1073741824	; 0x40000000
 800ed58:	9aa3      	ldr	r2, [sp, #652]	; 0x28c
 800ed5a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ed5e:	eb02 0a8a 	add.w	sl, r2, sl, lsl #2
 800ed62:	aa20      	add	r2, sp, #128	; 0x80
 800ed64:	eb02 08c8 	add.w	r8, r2, r8, lsl #3
 800ed68:	aa70      	add	r2, sp, #448	; 0x1c0
 800ed6a:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ed6e:	9301      	str	r3, [sp, #4]
 800ed70:	f85a 0f04 	ldr.w	r0, [sl, #4]!
 800ed74:	f7f1 fb86 	bl	8000484 <__aeabi_i2d>
 800ed78:	460b      	mov	r3, r1
 800ed7a:	9903      	ldr	r1, [sp, #12]
 800ed7c:	4602      	mov	r2, r0
 800ed7e:	2900      	cmp	r1, #0
 800ed80:	e9c8 2300 	strd	r2, r3, [r8]
 800ed84:	4647      	mov	r7, r8
 800ed86:	f108 0808 	add.w	r8, r8, #8
 800ed8a:	db1e      	blt.n	800edca <__kernel_rem_pio2+0x2f2>
 800ed8c:	9e04      	ldr	r6, [sp, #16]
 800ed8e:	2400      	movs	r4, #0
 800ed90:	2500      	movs	r5, #0
 800ed92:	e001      	b.n	800ed98 <__kernel_rem_pio2+0x2c0>
 800ed94:	e977 2302 	ldrd	r2, r3, [r7, #-8]!
 800ed98:	e8f6 0102 	ldrd	r0, r1, [r6], #8
 800ed9c:	f7f1 fbdc 	bl	8000558 <__aeabi_dmul>
 800eda0:	4602      	mov	r2, r0
 800eda2:	460b      	mov	r3, r1
 800eda4:	4620      	mov	r0, r4
 800eda6:	4629      	mov	r1, r5
 800eda8:	f7f1 fa20 	bl	80001ec <__adddf3>
 800edac:	455e      	cmp	r6, fp
 800edae:	4604      	mov	r4, r0
 800edb0:	460d      	mov	r5, r1
 800edb2:	d1ef      	bne.n	800ed94 <__kernel_rem_pio2+0x2bc>
 800edb4:	9b01      	ldr	r3, [sp, #4]
 800edb6:	e8e3 4502 	strd	r4, r5, [r3], #8
 800edba:	9301      	str	r3, [sp, #4]
 800edbc:	9b02      	ldr	r3, [sp, #8]
 800edbe:	f109 0901 	add.w	r9, r9, #1
 800edc2:	4599      	cmp	r9, r3
 800edc4:	ddd4      	ble.n	800ed70 <__kernel_rem_pio2+0x298>
 800edc6:	9301      	str	r3, [sp, #4]
 800edc8:	e70c      	b.n	800ebe4 <__kernel_rem_pio2+0x10c>
 800edca:	2400      	movs	r4, #0
 800edcc:	2500      	movs	r5, #0
 800edce:	e7f1      	b.n	800edb4 <__kernel_rem_pio2+0x2dc>
 800edd0:	08010030 	.word	0x08010030
 800edd4:	2aaaaaab 	.word	0x2aaaaaab
 800edd8:	3e700000 	.word	0x3e700000
 800eddc:	41700000 	.word	0x41700000
 800ede0:	40200000 	.word	0x40200000
 800ede4:	d16b      	bne.n	800eebe <__kernel_rem_pio2+0x3e6>
 800ede6:	9b01      	ldr	r3, [sp, #4]
 800ede8:	aa0c      	add	r2, sp, #48	; 0x30
 800edea:	3b01      	subs	r3, #1
 800edec:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
 800edf0:	15ed      	asrs	r5, r5, #23
 800edf2:	2d00      	cmp	r5, #0
 800edf4:	f77f af73 	ble.w	800ecde <__kernel_rem_pio2+0x206>
 800edf8:	9b01      	ldr	r3, [sp, #4]
 800edfa:	2b00      	cmp	r3, #0
 800edfc:	f108 0801 	add.w	r8, r8, #1
 800ee00:	f340 81cd 	ble.w	800f19e <__kernel_rem_pio2+0x6c6>
 800ee04:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 800ee06:	2c00      	cmp	r4, #0
 800ee08:	d151      	bne.n	800eeae <__kernel_rem_pio2+0x3d6>
 800ee0a:	9b01      	ldr	r3, [sp, #4]
 800ee0c:	2b01      	cmp	r3, #1
 800ee0e:	d020      	beq.n	800ee52 <__kernel_rem_pio2+0x37a>
 800ee10:	ab0c      	add	r3, sp, #48	; 0x30
 800ee12:	2201      	movs	r2, #1
 800ee14:	f853 4f04 	ldr.w	r4, [r3, #4]!
 800ee18:	2c00      	cmp	r4, #0
 800ee1a:	d04b      	beq.n	800eeb4 <__kernel_rem_pio2+0x3dc>
 800ee1c:	1c53      	adds	r3, r2, #1
 800ee1e:	a90c      	add	r1, sp, #48	; 0x30
 800ee20:	f1c4 7480 	rsb	r4, r4, #16777216	; 0x1000000
 800ee24:	f841 4022 	str.w	r4, [r1, r2, lsl #2]
 800ee28:	9901      	ldr	r1, [sp, #4]
 800ee2a:	4299      	cmp	r1, r3
 800ee2c:	dd10      	ble.n	800ee50 <__kernel_rem_pio2+0x378>
 800ee2e:	aa0c      	add	r2, sp, #48	; 0x30
 800ee30:	a80c      	add	r0, sp, #48	; 0x30
 800ee32:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800ee36:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 800ee3a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800ee3e:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800ee42:	e000      	b.n	800ee46 <__kernel_rem_pio2+0x36e>
 800ee44:	681a      	ldr	r2, [r3, #0]
 800ee46:	1a8a      	subs	r2, r1, r2
 800ee48:	f843 2b04 	str.w	r2, [r3], #4
 800ee4c:	4283      	cmp	r3, r0
 800ee4e:	d1f9      	bne.n	800ee44 <__kernel_rem_pio2+0x36c>
 800ee50:	2401      	movs	r4, #1
 800ee52:	9b06      	ldr	r3, [sp, #24]
 800ee54:	2b00      	cmp	r3, #0
 800ee56:	dd0e      	ble.n	800ee76 <__kernel_rem_pio2+0x39e>
 800ee58:	2b01      	cmp	r3, #1
 800ee5a:	f000 816c 	beq.w	800f136 <__kernel_rem_pio2+0x65e>
 800ee5e:	2b02      	cmp	r3, #2
 800ee60:	d109      	bne.n	800ee76 <__kernel_rem_pio2+0x39e>
 800ee62:	9b01      	ldr	r3, [sp, #4]
 800ee64:	1e5a      	subs	r2, r3, #1
 800ee66:	ab0c      	add	r3, sp, #48	; 0x30
 800ee68:	a90c      	add	r1, sp, #48	; 0x30
 800ee6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ee6e:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800ee72:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800ee76:	2d02      	cmp	r5, #2
 800ee78:	f47f af31 	bne.w	800ecde <__kernel_rem_pio2+0x206>
 800ee7c:	4632      	mov	r2, r6
 800ee7e:	463b      	mov	r3, r7
 800ee80:	49b7      	ldr	r1, [pc, #732]	; (800f160 <__kernel_rem_pio2+0x688>)
 800ee82:	2000      	movs	r0, #0
 800ee84:	f7f1 f9b0 	bl	80001e8 <__aeabi_dsub>
 800ee88:	4606      	mov	r6, r0
 800ee8a:	460f      	mov	r7, r1
 800ee8c:	2c00      	cmp	r4, #0
 800ee8e:	f43f af26 	beq.w	800ecde <__kernel_rem_pio2+0x206>
 800ee92:	9806      	ldr	r0, [sp, #24]
 800ee94:	ed9f 0bae 	vldr	d0, [pc, #696]	; 800f150 <__kernel_rem_pio2+0x678>
 800ee98:	f000 fbd6 	bl	800f648 <scalbn>
 800ee9c:	4630      	mov	r0, r6
 800ee9e:	4639      	mov	r1, r7
 800eea0:	ec53 2b10 	vmov	r2, r3, d0
 800eea4:	f7f1 f9a0 	bl	80001e8 <__aeabi_dsub>
 800eea8:	4606      	mov	r6, r0
 800eeaa:	460f      	mov	r7, r1
 800eeac:	e717      	b.n	800ecde <__kernel_rem_pio2+0x206>
 800eeae:	2301      	movs	r3, #1
 800eeb0:	2200      	movs	r2, #0
 800eeb2:	e7b4      	b.n	800ee1e <__kernel_rem_pio2+0x346>
 800eeb4:	9901      	ldr	r1, [sp, #4]
 800eeb6:	3201      	adds	r2, #1
 800eeb8:	428a      	cmp	r2, r1
 800eeba:	d1ab      	bne.n	800ee14 <__kernel_rem_pio2+0x33c>
 800eebc:	e7c9      	b.n	800ee52 <__kernel_rem_pio2+0x37a>
 800eebe:	4ba9      	ldr	r3, [pc, #676]	; (800f164 <__kernel_rem_pio2+0x68c>)
 800eec0:	2200      	movs	r2, #0
 800eec2:	f7f1 fdcf 	bl	8000a64 <__aeabi_dcmpge>
 800eec6:	2800      	cmp	r0, #0
 800eec8:	f040 8152 	bne.w	800f170 <__kernel_rem_pio2+0x698>
 800eecc:	4605      	mov	r5, r0
 800eece:	e706      	b.n	800ecde <__kernel_rem_pio2+0x206>
 800eed0:	9b01      	ldr	r3, [sp, #4]
 800eed2:	3301      	adds	r3, #1
 800eed4:	4699      	mov	r9, r3
 800eed6:	9302      	str	r3, [sp, #8]
 800eed8:	e735      	b.n	800ed46 <__kernel_rem_pio2+0x26e>
 800eeda:	2400      	movs	r4, #0
 800eedc:	2500      	movs	r5, #0
 800eede:	e669      	b.n	800ebb4 <__kernel_rem_pio2+0xdc>
 800eee0:	9b06      	ldr	r3, [sp, #24]
 800eee2:	9503      	str	r5, [sp, #12]
 800eee4:	f1a3 0218 	sub.w	r2, r3, #24
 800eee8:	ab0c      	add	r3, sp, #48	; 0x30
 800eeea:	f8cd 801c 	str.w	r8, [sp, #28]
 800eeee:	f853 302a 	ldr.w	r3, [r3, sl, lsl #2]
 800eef2:	9206      	str	r2, [sp, #24]
 800eef4:	b973      	cbnz	r3, 800ef14 <__kernel_rem_pio2+0x43c>
 800eef6:	9b01      	ldr	r3, [sp, #4]
 800eef8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800eefc:	3b02      	subs	r3, #2
 800eefe:	a90c      	add	r1, sp, #48	; 0x30
 800ef00:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800ef04:	f853 1904 	ldr.w	r1, [r3], #-4
 800ef08:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800ef0c:	3a18      	subs	r2, #24
 800ef0e:	2900      	cmp	r1, #0
 800ef10:	d0f8      	beq.n	800ef04 <__kernel_rem_pio2+0x42c>
 800ef12:	9206      	str	r2, [sp, #24]
 800ef14:	ed9f 0b8e 	vldr	d0, [pc, #568]	; 800f150 <__kernel_rem_pio2+0x678>
 800ef18:	9806      	ldr	r0, [sp, #24]
 800ef1a:	f000 fb95 	bl	800f648 <scalbn>
 800ef1e:	f1ba 0f00 	cmp.w	sl, #0
 800ef22:	ec55 4b10 	vmov	r4, r5, d0
 800ef26:	f2c0 81d9 	blt.w	800f2dc <__kernel_rem_pio2+0x804>
 800ef2a:	ab70      	add	r3, sp, #448	; 0x1c0
 800ef2c:	eb03 0bca 	add.w	fp, r3, sl, lsl #3
 800ef30:	aa0c      	add	r2, sp, #48	; 0x30
 800ef32:	f10a 0301 	add.w	r3, sl, #1
 800ef36:	9306      	str	r3, [sp, #24]
 800ef38:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 800ef3c:	f8df 9228 	ldr.w	r9, [pc, #552]	; 800f168 <__kernel_rem_pio2+0x690>
 800ef40:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800ef44:	9304      	str	r3, [sp, #16]
 800ef46:	f10b 0708 	add.w	r7, fp, #8
 800ef4a:	f04f 0800 	mov.w	r8, #0
 800ef4e:	f856 0d04 	ldr.w	r0, [r6, #-4]!
 800ef52:	f7f1 fa97 	bl	8000484 <__aeabi_i2d>
 800ef56:	4622      	mov	r2, r4
 800ef58:	462b      	mov	r3, r5
 800ef5a:	f7f1 fafd 	bl	8000558 <__aeabi_dmul>
 800ef5e:	464b      	mov	r3, r9
 800ef60:	e967 0102 	strd	r0, r1, [r7, #-8]!
 800ef64:	4642      	mov	r2, r8
 800ef66:	4620      	mov	r0, r4
 800ef68:	4629      	mov	r1, r5
 800ef6a:	f7f1 faf5 	bl	8000558 <__aeabi_dmul>
 800ef6e:	ab0c      	add	r3, sp, #48	; 0x30
 800ef70:	429e      	cmp	r6, r3
 800ef72:	4604      	mov	r4, r0
 800ef74:	460d      	mov	r5, r1
 800ef76:	d1ea      	bne.n	800ef4e <__kernel_rem_pio2+0x476>
 800ef78:	ab48      	add	r3, sp, #288	; 0x120
 800ef7a:	e9cd 3a01 	strd	r3, sl, [sp, #4]
 800ef7e:	f8dd a014 	ldr.w	sl, [sp, #20]
 800ef82:	f1ba 0f00 	cmp.w	sl, #0
 800ef86:	f04f 0900 	mov.w	r9, #0
 800ef8a:	db2c      	blt.n	800efe6 <__kernel_rem_pio2+0x50e>
 800ef8c:	a372      	add	r3, pc, #456	; (adr r3, 800f158 <__kernel_rem_pio2+0x680>)
 800ef8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef92:	f8df 81d8 	ldr.w	r8, [pc, #472]	; 800f16c <__kernel_rem_pio2+0x694>
 800ef96:	465f      	mov	r7, fp
 800ef98:	2600      	movs	r6, #0
 800ef9a:	2400      	movs	r4, #0
 800ef9c:	2500      	movs	r5, #0
 800ef9e:	e003      	b.n	800efa8 <__kernel_rem_pio2+0x4d0>
 800efa0:	45b1      	cmp	r9, r6
 800efa2:	db10      	blt.n	800efc6 <__kernel_rem_pio2+0x4ee>
 800efa4:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 800efa8:	e8f7 0102 	ldrd	r0, r1, [r7], #8
 800efac:	f7f1 fad4 	bl	8000558 <__aeabi_dmul>
 800efb0:	4602      	mov	r2, r0
 800efb2:	460b      	mov	r3, r1
 800efb4:	4620      	mov	r0, r4
 800efb6:	4629      	mov	r1, r5
 800efb8:	f7f1 f918 	bl	80001ec <__adddf3>
 800efbc:	3601      	adds	r6, #1
 800efbe:	45b2      	cmp	sl, r6
 800efc0:	4604      	mov	r4, r0
 800efc2:	460d      	mov	r5, r1
 800efc4:	daec      	bge.n	800efa0 <__kernel_rem_pio2+0x4c8>
 800efc6:	9b01      	ldr	r3, [sp, #4]
 800efc8:	9a02      	ldr	r2, [sp, #8]
 800efca:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800efce:	454a      	cmp	r2, r9
 800efd0:	e9c3 4500 	strd	r4, r5, [r3]
 800efd4:	f1ab 0b08 	sub.w	fp, fp, #8
 800efd8:	f109 0301 	add.w	r3, r9, #1
 800efdc:	d006      	beq.n	800efec <__kernel_rem_pio2+0x514>
 800efde:	f1ba 0f00 	cmp.w	sl, #0
 800efe2:	4699      	mov	r9, r3
 800efe4:	dad2      	bge.n	800ef8c <__kernel_rem_pio2+0x4b4>
 800efe6:	2400      	movs	r4, #0
 800efe8:	2500      	movs	r5, #0
 800efea:	e7ec      	b.n	800efc6 <__kernel_rem_pio2+0x4ee>
 800efec:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800efee:	f8dd a008 	ldr.w	sl, [sp, #8]
 800eff2:	2b02      	cmp	r3, #2
 800eff4:	dc1e      	bgt.n	800f034 <__kernel_rem_pio2+0x55c>
 800eff6:	2b00      	cmp	r3, #0
 800eff8:	f300 8109 	bgt.w	800f20e <__kernel_rem_pio2+0x736>
 800effc:	d113      	bne.n	800f026 <__kernel_rem_pio2+0x54e>
 800effe:	9c04      	ldr	r4, [sp, #16]
 800f000:	9d01      	ldr	r5, [sp, #4]
 800f002:	3408      	adds	r4, #8
 800f004:	442c      	add	r4, r5
 800f006:	2000      	movs	r0, #0
 800f008:	2100      	movs	r1, #0
 800f00a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f00e:	f7f1 f8ed 	bl	80001ec <__adddf3>
 800f012:	42a5      	cmp	r5, r4
 800f014:	d1f9      	bne.n	800f00a <__kernel_rem_pio2+0x532>
 800f016:	9b03      	ldr	r3, [sp, #12]
 800f018:	b113      	cbz	r3, 800f020 <__kernel_rem_pio2+0x548>
 800f01a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f01e:	4619      	mov	r1, r3
 800f020:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f022:	e9c3 0100 	strd	r0, r1, [r3]
 800f026:	9b07      	ldr	r3, [sp, #28]
 800f028:	f003 0007 	and.w	r0, r3, #7
 800f02c:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f030:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f034:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800f036:	2b03      	cmp	r3, #3
 800f038:	d1f5      	bne.n	800f026 <__kernel_rem_pio2+0x54e>
 800f03a:	f1ba 0f00 	cmp.w	sl, #0
 800f03e:	f000 8169 	beq.w	800f314 <__kernel_rem_pio2+0x83c>
 800f042:	9a01      	ldr	r2, [sp, #4]
 800f044:	9b04      	ldr	r3, [sp, #16]
 800f046:	18d3      	adds	r3, r2, r3
 800f048:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f04c:	eb02 0bca 	add.w	fp, r2, sl, lsl #3
 800f050:	e97b 6702 	ldrd	r6, r7, [fp, #-8]!
 800f054:	4620      	mov	r0, r4
 800f056:	4629      	mov	r1, r5
 800f058:	4632      	mov	r2, r6
 800f05a:	463b      	mov	r3, r7
 800f05c:	f7f1 f8c6 	bl	80001ec <__adddf3>
 800f060:	46a0      	mov	r8, r4
 800f062:	46a9      	mov	r9, r5
 800f064:	4604      	mov	r4, r0
 800f066:	460d      	mov	r5, r1
 800f068:	4622      	mov	r2, r4
 800f06a:	462b      	mov	r3, r5
 800f06c:	4630      	mov	r0, r6
 800f06e:	4639      	mov	r1, r7
 800f070:	f7f1 f8ba 	bl	80001e8 <__aeabi_dsub>
 800f074:	464b      	mov	r3, r9
 800f076:	4642      	mov	r2, r8
 800f078:	f7f1 f8b8 	bl	80001ec <__adddf3>
 800f07c:	9b01      	ldr	r3, [sp, #4]
 800f07e:	455b      	cmp	r3, fp
 800f080:	e9cb 0102 	strd	r0, r1, [fp, #8]
 800f084:	e9cb 4500 	strd	r4, r5, [fp]
 800f088:	d1e2      	bne.n	800f050 <__kernel_rem_pio2+0x578>
 800f08a:	f1ba 0f01 	cmp.w	sl, #1
 800f08e:	f340 8141 	ble.w	800f314 <__kernel_rem_pio2+0x83c>
 800f092:	9a01      	ldr	r2, [sp, #4]
 800f094:	9b04      	ldr	r3, [sp, #16]
 800f096:	f10a 5a00 	add.w	sl, sl, #536870912	; 0x20000000
 800f09a:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 800f09e:	4413      	add	r3, r2
 800f0a0:	ea4f 01ca 	mov.w	r1, sl, lsl #3
 800f0a4:	e9d3 4500 	ldrd	r4, r5, [r3]
 800f0a8:	f101 0a08 	add.w	sl, r1, #8
 800f0ac:	9102      	str	r1, [sp, #8]
 800f0ae:	4492      	add	sl, r2
 800f0b0:	f50d 7b94 	add.w	fp, sp, #296	; 0x128
 800f0b4:	e97a 6702 	ldrd	r6, r7, [sl, #-8]!
 800f0b8:	4620      	mov	r0, r4
 800f0ba:	4629      	mov	r1, r5
 800f0bc:	4632      	mov	r2, r6
 800f0be:	463b      	mov	r3, r7
 800f0c0:	f7f1 f894 	bl	80001ec <__adddf3>
 800f0c4:	46a0      	mov	r8, r4
 800f0c6:	46a9      	mov	r9, r5
 800f0c8:	4604      	mov	r4, r0
 800f0ca:	460d      	mov	r5, r1
 800f0cc:	4622      	mov	r2, r4
 800f0ce:	462b      	mov	r3, r5
 800f0d0:	4630      	mov	r0, r6
 800f0d2:	4639      	mov	r1, r7
 800f0d4:	f7f1 f888 	bl	80001e8 <__aeabi_dsub>
 800f0d8:	4642      	mov	r2, r8
 800f0da:	464b      	mov	r3, r9
 800f0dc:	f7f1 f886 	bl	80001ec <__adddf3>
 800f0e0:	45d3      	cmp	fp, sl
 800f0e2:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f0e6:	e9ca 4500 	strd	r4, r5, [sl]
 800f0ea:	d1e3      	bne.n	800f0b4 <__kernel_rem_pio2+0x5dc>
 800f0ec:	9c02      	ldr	r4, [sp, #8]
 800f0ee:	9b01      	ldr	r3, [sp, #4]
 800f0f0:	3410      	adds	r4, #16
 800f0f2:	441c      	add	r4, r3
 800f0f4:	f103 0510 	add.w	r5, r3, #16
 800f0f8:	2000      	movs	r0, #0
 800f0fa:	2100      	movs	r1, #0
 800f0fc:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f100:	f7f1 f874 	bl	80001ec <__adddf3>
 800f104:	42a5      	cmp	r5, r4
 800f106:	d1f9      	bne.n	800f0fc <__kernel_rem_pio2+0x624>
 800f108:	9b03      	ldr	r3, [sp, #12]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	f040 80bd 	bne.w	800f28a <__kernel_rem_pio2+0x7b2>
 800f110:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800f112:	e9c4 0104 	strd	r0, r1, [r4, #16]
 800f116:	9801      	ldr	r0, [sp, #4]
 800f118:	e9d0 2300 	ldrd	r2, r3, [r0]
 800f11c:	e9c4 2300 	strd	r2, r3, [r4]
 800f120:	e9d0 2302 	ldrd	r2, r3, [r0, #8]
 800f124:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800f128:	9b07      	ldr	r3, [sp, #28]
 800f12a:	f003 0007 	and.w	r0, r3, #7
 800f12e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f132:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f136:	9b01      	ldr	r3, [sp, #4]
 800f138:	1e5a      	subs	r2, r3, #1
 800f13a:	ab0c      	add	r3, sp, #48	; 0x30
 800f13c:	a90c      	add	r1, sp, #48	; 0x30
 800f13e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f142:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800f146:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800f14a:	e694      	b.n	800ee76 <__kernel_rem_pio2+0x39e>
 800f14c:	f3af 8000 	nop.w
 800f150:	00000000 	.word	0x00000000
 800f154:	3ff00000 	.word	0x3ff00000
 800f158:	40000000 	.word	0x40000000
 800f15c:	3ff921fb 	.word	0x3ff921fb
 800f160:	3ff00000 	.word	0x3ff00000
 800f164:	3fe00000 	.word	0x3fe00000
 800f168:	3e700000 	.word	0x3e700000
 800f16c:	0800fff8 	.word	0x0800fff8
 800f170:	9b01      	ldr	r3, [sp, #4]
 800f172:	2b00      	cmp	r3, #0
 800f174:	f108 0801 	add.w	r8, r8, #1
 800f178:	bfc8      	it	gt
 800f17a:	2502      	movgt	r5, #2
 800f17c:	f73f ae42 	bgt.w	800ee04 <__kernel_rem_pio2+0x32c>
 800f180:	4632      	mov	r2, r6
 800f182:	463b      	mov	r3, r7
 800f184:	4965      	ldr	r1, [pc, #404]	; (800f31c <__kernel_rem_pio2+0x844>)
 800f186:	2000      	movs	r0, #0
 800f188:	f7f1 f82e 	bl	80001e8 <__aeabi_dsub>
 800f18c:	2502      	movs	r5, #2
 800f18e:	4606      	mov	r6, r0
 800f190:	460f      	mov	r7, r1
 800f192:	e5a4      	b.n	800ecde <__kernel_rem_pio2+0x206>
 800f194:	2100      	movs	r1, #0
 800f196:	f06f 0317 	mvn.w	r3, #23
 800f19a:	9107      	str	r1, [sp, #28]
 800f19c:	e4bb      	b.n	800eb16 <__kernel_rem_pio2+0x3e>
 800f19e:	2400      	movs	r4, #0
 800f1a0:	e657      	b.n	800ee52 <__kernel_rem_pio2+0x37a>
 800f1a2:	ec47 6b10 	vmov	d0, r6, r7
 800f1a6:	9e06      	ldr	r6, [sp, #24]
 800f1a8:	9503      	str	r5, [sp, #12]
 800f1aa:	4270      	negs	r0, r6
 800f1ac:	f8cd 801c 	str.w	r8, [sp, #28]
 800f1b0:	f000 fa4a 	bl	800f648 <scalbn>
 800f1b4:	ec55 4b10 	vmov	r4, r5, d0
 800f1b8:	4b59      	ldr	r3, [pc, #356]	; (800f320 <__kernel_rem_pio2+0x848>)
 800f1ba:	ee10 0a10 	vmov	r0, s0
 800f1be:	2200      	movs	r2, #0
 800f1c0:	4629      	mov	r1, r5
 800f1c2:	f7f1 fc4f 	bl	8000a64 <__aeabi_dcmpge>
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	d055      	beq.n	800f276 <__kernel_rem_pio2+0x79e>
 800f1ca:	4b56      	ldr	r3, [pc, #344]	; (800f324 <__kernel_rem_pio2+0x84c>)
 800f1cc:	9f01      	ldr	r7, [sp, #4]
 800f1ce:	2200      	movs	r2, #0
 800f1d0:	3618      	adds	r6, #24
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	4629      	mov	r1, r5
 800f1d6:	9606      	str	r6, [sp, #24]
 800f1d8:	f7f1 f9be 	bl	8000558 <__aeabi_dmul>
 800f1dc:	f7f1 fc6c 	bl	8000ab8 <__aeabi_d2iz>
 800f1e0:	4606      	mov	r6, r0
 800f1e2:	f7f1 f94f 	bl	8000484 <__aeabi_i2d>
 800f1e6:	4b4e      	ldr	r3, [pc, #312]	; (800f320 <__kernel_rem_pio2+0x848>)
 800f1e8:	2200      	movs	r2, #0
 800f1ea:	f7f1 f9b5 	bl	8000558 <__aeabi_dmul>
 800f1ee:	460b      	mov	r3, r1
 800f1f0:	4602      	mov	r2, r0
 800f1f2:	4629      	mov	r1, r5
 800f1f4:	4620      	mov	r0, r4
 800f1f6:	f7f0 fff7 	bl	80001e8 <__aeabi_dsub>
 800f1fa:	f7f1 fc5d 	bl	8000ab8 <__aeabi_d2iz>
 800f1fe:	f107 0a01 	add.w	sl, r7, #1
 800f202:	ab0c      	add	r3, sp, #48	; 0x30
 800f204:	f843 0027 	str.w	r0, [r3, r7, lsl #2]
 800f208:	f843 602a 	str.w	r6, [r3, sl, lsl #2]
 800f20c:	e682      	b.n	800ef14 <__kernel_rem_pio2+0x43c>
 800f20e:	9d01      	ldr	r5, [sp, #4]
 800f210:	9b06      	ldr	r3, [sp, #24]
 800f212:	2000      	movs	r0, #0
 800f214:	eb05 04c3 	add.w	r4, r5, r3, lsl #3
 800f218:	2100      	movs	r1, #0
 800f21a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800f21e:	f7f0 ffe5 	bl	80001ec <__adddf3>
 800f222:	42a5      	cmp	r5, r4
 800f224:	d1f9      	bne.n	800f21a <__kernel_rem_pio2+0x742>
 800f226:	9b03      	ldr	r3, [sp, #12]
 800f228:	2b00      	cmp	r3, #0
 800f22a:	d147      	bne.n	800f2bc <__kernel_rem_pio2+0x7e4>
 800f22c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f22e:	e9c3 0100 	strd	r0, r1, [r3]
 800f232:	460b      	mov	r3, r1
 800f234:	9901      	ldr	r1, [sp, #4]
 800f236:	4602      	mov	r2, r0
 800f238:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f23c:	f7f0 ffd4 	bl	80001e8 <__aeabi_dsub>
 800f240:	f1ba 0f00 	cmp.w	sl, #0
 800f244:	dd0d      	ble.n	800f262 <__kernel_rem_pio2+0x78a>
 800f246:	ad4a      	add	r5, sp, #296	; 0x128
 800f248:	2401      	movs	r4, #1
 800f24a:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 800f24e:	3401      	adds	r4, #1
 800f250:	f7f0 ffcc 	bl	80001ec <__adddf3>
 800f254:	45a2      	cmp	sl, r4
 800f256:	daf8      	bge.n	800f24a <__kernel_rem_pio2+0x772>
 800f258:	9b03      	ldr	r3, [sp, #12]
 800f25a:	b113      	cbz	r3, 800f262 <__kernel_rem_pio2+0x78a>
 800f25c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f260:	4619      	mov	r1, r3
 800f262:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800f264:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800f268:	9b07      	ldr	r3, [sp, #28]
 800f26a:	f003 0007 	and.w	r0, r3, #7
 800f26e:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f272:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f276:	4620      	mov	r0, r4
 800f278:	4629      	mov	r1, r5
 800f27a:	f7f1 fc1d 	bl	8000ab8 <__aeabi_d2iz>
 800f27e:	9b01      	ldr	r3, [sp, #4]
 800f280:	aa0c      	add	r2, sp, #48	; 0x30
 800f282:	469a      	mov	sl, r3
 800f284:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
 800f288:	e644      	b.n	800ef14 <__kernel_rem_pio2+0x43c>
 800f28a:	9e01      	ldr	r6, [sp, #4]
 800f28c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f290:	6874      	ldr	r4, [r6, #4]
 800f292:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800f294:	6832      	ldr	r2, [r6, #0]
 800f296:	68f5      	ldr	r5, [r6, #12]
 800f298:	e9c1 0304 	strd	r0, r3, [r1, #16]
 800f29c:	f104 4300 	add.w	r3, r4, #2147483648	; 0x80000000
 800f2a0:	e9c1 2300 	strd	r2, r3, [r1]
 800f2a4:	68b2      	ldr	r2, [r6, #8]
 800f2a6:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 800f2aa:	e9c1 2302 	strd	r2, r3, [r1, #8]
 800f2ae:	9b07      	ldr	r3, [sp, #28]
 800f2b0:	f003 0007 	and.w	r0, r3, #7
 800f2b4:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 800f2b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2bc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800f2be:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f2c2:	6053      	str	r3, [r2, #4]
 800f2c4:	460b      	mov	r3, r1
 800f2c6:	9901      	ldr	r1, [sp, #4]
 800f2c8:	6010      	str	r0, [r2, #0]
 800f2ca:	4602      	mov	r2, r0
 800f2cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f2d0:	f7f0 ff8a 	bl	80001e8 <__aeabi_dsub>
 800f2d4:	f1ba 0f00 	cmp.w	sl, #0
 800f2d8:	dcb5      	bgt.n	800f246 <__kernel_rem_pio2+0x76e>
 800f2da:	e7bf      	b.n	800f25c <__kernel_rem_pio2+0x784>
 800f2dc:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800f2de:	2b02      	cmp	r3, #2
 800f2e0:	dc0a      	bgt.n	800f2f8 <__kernel_rem_pio2+0x820>
 800f2e2:	2b00      	cmp	r3, #0
 800f2e4:	dc11      	bgt.n	800f30a <__kernel_rem_pio2+0x832>
 800f2e6:	f47f ae9e 	bne.w	800f026 <__kernel_rem_pio2+0x54e>
 800f2ea:	2000      	movs	r0, #0
 800f2ec:	2100      	movs	r1, #0
 800f2ee:	e692      	b.n	800f016 <__kernel_rem_pio2+0x53e>
 800f2f0:	9b08      	ldr	r3, [sp, #32]
 800f2f2:	00db      	lsls	r3, r3, #3
 800f2f4:	9302      	str	r3, [sp, #8]
 800f2f6:	e466      	b.n	800ebc6 <__kernel_rem_pio2+0xee>
 800f2f8:	9ba2      	ldr	r3, [sp, #648]	; 0x288
 800f2fa:	2b03      	cmp	r3, #3
 800f2fc:	f47f ae93 	bne.w	800f026 <__kernel_rem_pio2+0x54e>
 800f300:	ab48      	add	r3, sp, #288	; 0x120
 800f302:	2000      	movs	r0, #0
 800f304:	2100      	movs	r1, #0
 800f306:	9301      	str	r3, [sp, #4]
 800f308:	e6fe      	b.n	800f108 <__kernel_rem_pio2+0x630>
 800f30a:	ab48      	add	r3, sp, #288	; 0x120
 800f30c:	2000      	movs	r0, #0
 800f30e:	2100      	movs	r1, #0
 800f310:	9301      	str	r3, [sp, #4]
 800f312:	e788      	b.n	800f226 <__kernel_rem_pio2+0x74e>
 800f314:	2000      	movs	r0, #0
 800f316:	2100      	movs	r1, #0
 800f318:	e6f6      	b.n	800f108 <__kernel_rem_pio2+0x630>
 800f31a:	bf00      	nop
 800f31c:	3ff00000 	.word	0x3ff00000
 800f320:	41700000 	.word	0x41700000
 800f324:	3e700000 	.word	0x3e700000

0800f328 <__kernel_sin>:
 800f328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f32c:	ec55 4b10 	vmov	r4, r5, d0
 800f330:	b085      	sub	sp, #20
 800f332:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f336:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800f33a:	ed8d 1b00 	vstr	d1, [sp]
 800f33e:	9003      	str	r0, [sp, #12]
 800f340:	da07      	bge.n	800f352 <__kernel_sin+0x2a>
 800f342:	ee10 0a10 	vmov	r0, s0
 800f346:	4629      	mov	r1, r5
 800f348:	f7f1 fbb6 	bl	8000ab8 <__aeabi_d2iz>
 800f34c:	2800      	cmp	r0, #0
 800f34e:	f000 8089 	beq.w	800f464 <__kernel_sin+0x13c>
 800f352:	4622      	mov	r2, r4
 800f354:	462b      	mov	r3, r5
 800f356:	4620      	mov	r0, r4
 800f358:	4629      	mov	r1, r5
 800f35a:	f7f1 f8fd 	bl	8000558 <__aeabi_dmul>
 800f35e:	4606      	mov	r6, r0
 800f360:	460f      	mov	r7, r1
 800f362:	4632      	mov	r2, r6
 800f364:	463b      	mov	r3, r7
 800f366:	4620      	mov	r0, r4
 800f368:	4629      	mov	r1, r5
 800f36a:	f7f1 f8f5 	bl	8000558 <__aeabi_dmul>
 800f36e:	a343      	add	r3, pc, #268	; (adr r3, 800f47c <__kernel_sin+0x154>)
 800f370:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f374:	4682      	mov	sl, r0
 800f376:	468b      	mov	fp, r1
 800f378:	4630      	mov	r0, r6
 800f37a:	4639      	mov	r1, r7
 800f37c:	f7f1 f8ec 	bl	8000558 <__aeabi_dmul>
 800f380:	a340      	add	r3, pc, #256	; (adr r3, 800f484 <__kernel_sin+0x15c>)
 800f382:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f386:	f7f0 ff2f 	bl	80001e8 <__aeabi_dsub>
 800f38a:	4632      	mov	r2, r6
 800f38c:	463b      	mov	r3, r7
 800f38e:	f7f1 f8e3 	bl	8000558 <__aeabi_dmul>
 800f392:	a33e      	add	r3, pc, #248	; (adr r3, 800f48c <__kernel_sin+0x164>)
 800f394:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f398:	f7f0 ff28 	bl	80001ec <__adddf3>
 800f39c:	4632      	mov	r2, r6
 800f39e:	463b      	mov	r3, r7
 800f3a0:	f7f1 f8da 	bl	8000558 <__aeabi_dmul>
 800f3a4:	a33b      	add	r3, pc, #236	; (adr r3, 800f494 <__kernel_sin+0x16c>)
 800f3a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3aa:	f7f0 ff1d 	bl	80001e8 <__aeabi_dsub>
 800f3ae:	4632      	mov	r2, r6
 800f3b0:	463b      	mov	r3, r7
 800f3b2:	f7f1 f8d1 	bl	8000558 <__aeabi_dmul>
 800f3b6:	a339      	add	r3, pc, #228	; (adr r3, 800f49c <__kernel_sin+0x174>)
 800f3b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f3bc:	f7f0 ff16 	bl	80001ec <__adddf3>
 800f3c0:	9b03      	ldr	r3, [sp, #12]
 800f3c2:	4680      	mov	r8, r0
 800f3c4:	4689      	mov	r9, r1
 800f3c6:	b3ab      	cbz	r3, 800f434 <__kernel_sin+0x10c>
 800f3c8:	e9dd 0100 	ldrd	r0, r1, [sp]
 800f3cc:	4b2a      	ldr	r3, [pc, #168]	; (800f478 <__kernel_sin+0x150>)
 800f3ce:	2200      	movs	r2, #0
 800f3d0:	f7f1 f8c2 	bl	8000558 <__aeabi_dmul>
 800f3d4:	4642      	mov	r2, r8
 800f3d6:	464b      	mov	r3, r9
 800f3d8:	4680      	mov	r8, r0
 800f3da:	4689      	mov	r9, r1
 800f3dc:	4650      	mov	r0, sl
 800f3de:	4659      	mov	r1, fp
 800f3e0:	f7f1 f8ba 	bl	8000558 <__aeabi_dmul>
 800f3e4:	4602      	mov	r2, r0
 800f3e6:	460b      	mov	r3, r1
 800f3e8:	4640      	mov	r0, r8
 800f3ea:	4649      	mov	r1, r9
 800f3ec:	f7f0 fefc 	bl	80001e8 <__aeabi_dsub>
 800f3f0:	4632      	mov	r2, r6
 800f3f2:	463b      	mov	r3, r7
 800f3f4:	f7f1 f8b0 	bl	8000558 <__aeabi_dmul>
 800f3f8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f3fc:	f7f0 fef4 	bl	80001e8 <__aeabi_dsub>
 800f400:	a31b      	add	r3, pc, #108	; (adr r3, 800f470 <__kernel_sin+0x148>)
 800f402:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f406:	4606      	mov	r6, r0
 800f408:	460f      	mov	r7, r1
 800f40a:	4650      	mov	r0, sl
 800f40c:	4659      	mov	r1, fp
 800f40e:	f7f1 f8a3 	bl	8000558 <__aeabi_dmul>
 800f412:	4602      	mov	r2, r0
 800f414:	460b      	mov	r3, r1
 800f416:	4630      	mov	r0, r6
 800f418:	4639      	mov	r1, r7
 800f41a:	f7f0 fee7 	bl	80001ec <__adddf3>
 800f41e:	4602      	mov	r2, r0
 800f420:	460b      	mov	r3, r1
 800f422:	4620      	mov	r0, r4
 800f424:	4629      	mov	r1, r5
 800f426:	f7f0 fedf 	bl	80001e8 <__aeabi_dsub>
 800f42a:	ec41 0b10 	vmov	d0, r0, r1
 800f42e:	b005      	add	sp, #20
 800f430:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f434:	4602      	mov	r2, r0
 800f436:	460b      	mov	r3, r1
 800f438:	4630      	mov	r0, r6
 800f43a:	4639      	mov	r1, r7
 800f43c:	f7f1 f88c 	bl	8000558 <__aeabi_dmul>
 800f440:	a30b      	add	r3, pc, #44	; (adr r3, 800f470 <__kernel_sin+0x148>)
 800f442:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f446:	f7f0 fecf 	bl	80001e8 <__aeabi_dsub>
 800f44a:	4652      	mov	r2, sl
 800f44c:	465b      	mov	r3, fp
 800f44e:	f7f1 f883 	bl	8000558 <__aeabi_dmul>
 800f452:	4622      	mov	r2, r4
 800f454:	462b      	mov	r3, r5
 800f456:	f7f0 fec9 	bl	80001ec <__adddf3>
 800f45a:	ec41 0b10 	vmov	d0, r0, r1
 800f45e:	b005      	add	sp, #20
 800f460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f464:	ec45 4b10 	vmov	d0, r4, r5
 800f468:	b005      	add	sp, #20
 800f46a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f46e:	bf00      	nop
 800f470:	55555549 	.word	0x55555549
 800f474:	3fc55555 	.word	0x3fc55555
 800f478:	3fe00000 	.word	0x3fe00000
 800f47c:	5acfd57c 	.word	0x5acfd57c
 800f480:	3de5d93a 	.word	0x3de5d93a
 800f484:	8a2b9ceb 	.word	0x8a2b9ceb
 800f488:	3e5ae5e6 	.word	0x3e5ae5e6
 800f48c:	57b1fe7d 	.word	0x57b1fe7d
 800f490:	3ec71de3 	.word	0x3ec71de3
 800f494:	19c161d5 	.word	0x19c161d5
 800f498:	3f2a01a0 	.word	0x3f2a01a0
 800f49c:	1110f8a6 	.word	0x1110f8a6
 800f4a0:	3f811111 	.word	0x3f811111

0800f4a4 <with_errno>:
 800f4a4:	b5d0      	push	{r4, r6, r7, lr}
 800f4a6:	4606      	mov	r6, r0
 800f4a8:	460f      	mov	r7, r1
 800f4aa:	4614      	mov	r4, r2
 800f4ac:	f7fd ff16 	bl	800d2dc <__errno>
 800f4b0:	4603      	mov	r3, r0
 800f4b2:	4639      	mov	r1, r7
 800f4b4:	4630      	mov	r0, r6
 800f4b6:	601c      	str	r4, [r3, #0]
 800f4b8:	bdd0      	pop	{r4, r6, r7, pc}
 800f4ba:	bf00      	nop

0800f4bc <xflow>:
 800f4bc:	b530      	push	{r4, r5, lr}
 800f4be:	4614      	mov	r4, r2
 800f4c0:	b083      	sub	sp, #12
 800f4c2:	461d      	mov	r5, r3
 800f4c4:	b108      	cbz	r0, 800f4ca <xflow+0xe>
 800f4c6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f4ca:	e9cd 2300 	strd	r2, r3, [sp]
 800f4ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f4d2:	4620      	mov	r0, r4
 800f4d4:	4629      	mov	r1, r5
 800f4d6:	f7f1 f83f 	bl	8000558 <__aeabi_dmul>
 800f4da:	2222      	movs	r2, #34	; 0x22
 800f4dc:	b003      	add	sp, #12
 800f4de:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f4e2:	f7ff bfdf 	b.w	800f4a4 <with_errno>
 800f4e6:	bf00      	nop

0800f4e8 <__math_uflow>:
 800f4e8:	b508      	push	{r3, lr}
 800f4ea:	2200      	movs	r2, #0
 800f4ec:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f4f0:	f7ff ffe4 	bl	800f4bc <xflow>
 800f4f4:	ec41 0b10 	vmov	d0, r0, r1
 800f4f8:	bd08      	pop	{r3, pc}
 800f4fa:	bf00      	nop

0800f4fc <__math_oflow>:
 800f4fc:	b508      	push	{r3, lr}
 800f4fe:	2200      	movs	r2, #0
 800f500:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f504:	f7ff ffda 	bl	800f4bc <xflow>
 800f508:	ec41 0b10 	vmov	d0, r0, r1
 800f50c:	bd08      	pop	{r3, pc}
 800f50e:	bf00      	nop

0800f510 <fabs>:
 800f510:	ec51 0b10 	vmov	r0, r1, d0
 800f514:	ee10 2a10 	vmov	r2, s0
 800f518:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f51c:	ec43 2b10 	vmov	d0, r2, r3
 800f520:	4770      	bx	lr
 800f522:	bf00      	nop

0800f524 <finite>:
 800f524:	b082      	sub	sp, #8
 800f526:	ed8d 0b00 	vstr	d0, [sp]
 800f52a:	9801      	ldr	r0, [sp, #4]
 800f52c:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f530:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f534:	0fc0      	lsrs	r0, r0, #31
 800f536:	b002      	add	sp, #8
 800f538:	4770      	bx	lr
 800f53a:	bf00      	nop
 800f53c:	0000      	movs	r0, r0
	...

0800f540 <floor>:
 800f540:	ec51 0b10 	vmov	r0, r1, d0
 800f544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f546:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f54a:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 800f54e:	2d13      	cmp	r5, #19
 800f550:	ee10 6a10 	vmov	r6, s0
 800f554:	460c      	mov	r4, r1
 800f556:	dc30      	bgt.n	800f5ba <floor+0x7a>
 800f558:	2d00      	cmp	r5, #0
 800f55a:	db1e      	blt.n	800f59a <floor+0x5a>
 800f55c:	4f38      	ldr	r7, [pc, #224]	; (800f640 <floor+0x100>)
 800f55e:	412f      	asrs	r7, r5
 800f560:	ea01 0307 	and.w	r3, r1, r7
 800f564:	4303      	orrs	r3, r0
 800f566:	d02d      	beq.n	800f5c4 <floor+0x84>
 800f568:	a333      	add	r3, pc, #204	; (adr r3, 800f638 <floor+0xf8>)
 800f56a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f56e:	f7f0 fe3d 	bl	80001ec <__adddf3>
 800f572:	2200      	movs	r2, #0
 800f574:	2300      	movs	r3, #0
 800f576:	f7f1 fa7f 	bl	8000a78 <__aeabi_dcmpgt>
 800f57a:	b148      	cbz	r0, 800f590 <floor+0x50>
 800f57c:	2c00      	cmp	r4, #0
 800f57e:	da04      	bge.n	800f58a <floor+0x4a>
 800f580:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 800f584:	fa43 f505 	asr.w	r5, r3, r5
 800f588:	442c      	add	r4, r5
 800f58a:	ea24 0407 	bic.w	r4, r4, r7
 800f58e:	2600      	movs	r6, #0
 800f590:	4623      	mov	r3, r4
 800f592:	4632      	mov	r2, r6
 800f594:	ec43 2b10 	vmov	d0, r2, r3
 800f598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f59a:	a327      	add	r3, pc, #156	; (adr r3, 800f638 <floor+0xf8>)
 800f59c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5a0:	f7f0 fe24 	bl	80001ec <__adddf3>
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	2300      	movs	r3, #0
 800f5a8:	f7f1 fa66 	bl	8000a78 <__aeabi_dcmpgt>
 800f5ac:	2800      	cmp	r0, #0
 800f5ae:	d0ef      	beq.n	800f590 <floor+0x50>
 800f5b0:	2c00      	cmp	r4, #0
 800f5b2:	db29      	blt.n	800f608 <floor+0xc8>
 800f5b4:	2600      	movs	r6, #0
 800f5b6:	4634      	mov	r4, r6
 800f5b8:	e7ea      	b.n	800f590 <floor+0x50>
 800f5ba:	2d33      	cmp	r5, #51	; 0x33
 800f5bc:	dd05      	ble.n	800f5ca <floor+0x8a>
 800f5be:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 800f5c2:	d019      	beq.n	800f5f8 <floor+0xb8>
 800f5c4:	ec41 0b10 	vmov	d0, r0, r1
 800f5c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f5ca:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800f5ce:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800f5d2:	40df      	lsrs	r7, r3
 800f5d4:	4207      	tst	r7, r0
 800f5d6:	d0f5      	beq.n	800f5c4 <floor+0x84>
 800f5d8:	a317      	add	r3, pc, #92	; (adr r3, 800f638 <floor+0xf8>)
 800f5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5de:	f7f0 fe05 	bl	80001ec <__adddf3>
 800f5e2:	2200      	movs	r2, #0
 800f5e4:	2300      	movs	r3, #0
 800f5e6:	f7f1 fa47 	bl	8000a78 <__aeabi_dcmpgt>
 800f5ea:	2800      	cmp	r0, #0
 800f5ec:	d0d0      	beq.n	800f590 <floor+0x50>
 800f5ee:	2c00      	cmp	r4, #0
 800f5f0:	db13      	blt.n	800f61a <floor+0xda>
 800f5f2:	ea26 0607 	bic.w	r6, r6, r7
 800f5f6:	e7cb      	b.n	800f590 <floor+0x50>
 800f5f8:	ee10 2a10 	vmov	r2, s0
 800f5fc:	460b      	mov	r3, r1
 800f5fe:	f7f0 fdf5 	bl	80001ec <__adddf3>
 800f602:	ec41 0b10 	vmov	d0, r0, r1
 800f606:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f608:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800f60c:	4a0d      	ldr	r2, [pc, #52]	; (800f644 <floor+0x104>)
 800f60e:	431e      	orrs	r6, r3
 800f610:	2e00      	cmp	r6, #0
 800f612:	bf18      	it	ne
 800f614:	4614      	movne	r4, r2
 800f616:	2600      	movs	r6, #0
 800f618:	e7ba      	b.n	800f590 <floor+0x50>
 800f61a:	2d14      	cmp	r5, #20
 800f61c:	d008      	beq.n	800f630 <floor+0xf0>
 800f61e:	2301      	movs	r3, #1
 800f620:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 800f624:	fa03 f505 	lsl.w	r5, r3, r5
 800f628:	19ae      	adds	r6, r5, r6
 800f62a:	bf28      	it	cs
 800f62c:	18e4      	addcs	r4, r4, r3
 800f62e:	e7e0      	b.n	800f5f2 <floor+0xb2>
 800f630:	3401      	adds	r4, #1
 800f632:	e7de      	b.n	800f5f2 <floor+0xb2>
 800f634:	f3af 8000 	nop.w
 800f638:	8800759c 	.word	0x8800759c
 800f63c:	7e37e43c 	.word	0x7e37e43c
 800f640:	000fffff 	.word	0x000fffff
 800f644:	bff00000 	.word	0xbff00000

0800f648 <scalbn>:
 800f648:	b538      	push	{r3, r4, r5, lr}
 800f64a:	ec53 2b10 	vmov	r2, r3, d0
 800f64e:	f3c3 510a 	ubfx	r1, r3, #20, #11
 800f652:	4604      	mov	r4, r0
 800f654:	469c      	mov	ip, r3
 800f656:	bb89      	cbnz	r1, 800f6bc <scalbn+0x74>
 800f658:	ee10 1a10 	vmov	r1, s0
 800f65c:	f023 4c00 	bic.w	ip, r3, #2147483648	; 0x80000000
 800f660:	ea5c 0101 	orrs.w	r1, ip, r1
 800f664:	d029      	beq.n	800f6ba <scalbn+0x72>
 800f666:	4619      	mov	r1, r3
 800f668:	2200      	movs	r2, #0
 800f66a:	4b3d      	ldr	r3, [pc, #244]	; (800f760 <scalbn+0x118>)
 800f66c:	4d3d      	ldr	r5, [pc, #244]	; (800f764 <scalbn+0x11c>)
 800f66e:	ee10 0a10 	vmov	r0, s0
 800f672:	f7f0 ff71 	bl	8000558 <__aeabi_dmul>
 800f676:	42ac      	cmp	r4, r5
 800f678:	4602      	mov	r2, r0
 800f67a:	460b      	mov	r3, r1
 800f67c:	db16      	blt.n	800f6ac <scalbn+0x64>
 800f67e:	468c      	mov	ip, r1
 800f680:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f684:	3936      	subs	r1, #54	; 0x36
 800f686:	4421      	add	r1, r4
 800f688:	f240 70fe 	movw	r0, #2046	; 0x7fe
 800f68c:	4281      	cmp	r1, r0
 800f68e:	dc21      	bgt.n	800f6d4 <scalbn+0x8c>
 800f690:	2900      	cmp	r1, #0
 800f692:	dc47      	bgt.n	800f724 <scalbn+0xdc>
 800f694:	f111 0f35 	cmn.w	r1, #53	; 0x35
 800f698:	da34      	bge.n	800f704 <scalbn+0xbc>
 800f69a:	f24c 3150 	movw	r1, #50000	; 0xc350
 800f69e:	428c      	cmp	r4, r1
 800f6a0:	dc18      	bgt.n	800f6d4 <scalbn+0x8c>
 800f6a2:	2b00      	cmp	r3, #0
 800f6a4:	a126      	add	r1, pc, #152	; (adr r1, 800f740 <scalbn+0xf8>)
 800f6a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6aa:	db44      	blt.n	800f736 <scalbn+0xee>
 800f6ac:	a324      	add	r3, pc, #144	; (adr r3, 800f740 <scalbn+0xf8>)
 800f6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6b2:	f7f0 ff51 	bl	8000558 <__aeabi_dmul>
 800f6b6:	ec41 0b10 	vmov	d0, r0, r1
 800f6ba:	bd38      	pop	{r3, r4, r5, pc}
 800f6bc:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800f6c0:	4281      	cmp	r1, r0
 800f6c2:	d1e0      	bne.n	800f686 <scalbn+0x3e>
 800f6c4:	ee10 0a10 	vmov	r0, s0
 800f6c8:	4619      	mov	r1, r3
 800f6ca:	f7f0 fd8f 	bl	80001ec <__adddf3>
 800f6ce:	ec41 0b10 	vmov	d0, r0, r1
 800f6d2:	bd38      	pop	{r3, r4, r5, pc}
 800f6d4:	2b00      	cmp	r3, #0
 800f6d6:	a11c      	add	r1, pc, #112	; (adr r1, 800f748 <scalbn+0x100>)
 800f6d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6dc:	db07      	blt.n	800f6ee <scalbn+0xa6>
 800f6de:	a31a      	add	r3, pc, #104	; (adr r3, 800f748 <scalbn+0x100>)
 800f6e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e4:	f7f0 ff38 	bl	8000558 <__aeabi_dmul>
 800f6e8:	ec41 0b10 	vmov	d0, r0, r1
 800f6ec:	bd38      	pop	{r3, r4, r5, pc}
 800f6ee:	a118      	add	r1, pc, #96	; (adr r1, 800f750 <scalbn+0x108>)
 800f6f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6f4:	a314      	add	r3, pc, #80	; (adr r3, 800f748 <scalbn+0x100>)
 800f6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fa:	f7f0 ff2d 	bl	8000558 <__aeabi_dmul>
 800f6fe:	ec41 0b10 	vmov	d0, r0, r1
 800f702:	e7f3      	b.n	800f6ec <scalbn+0xa4>
 800f704:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 800f708:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 800f70c:	3136      	adds	r1, #54	; 0x36
 800f70e:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
 800f712:	4610      	mov	r0, r2
 800f714:	4619      	mov	r1, r3
 800f716:	2200      	movs	r2, #0
 800f718:	4b13      	ldr	r3, [pc, #76]	; (800f768 <scalbn+0x120>)
 800f71a:	f7f0 ff1d 	bl	8000558 <__aeabi_dmul>
 800f71e:	ec41 0b10 	vmov	d0, r0, r1
 800f722:	bd38      	pop	{r3, r4, r5, pc}
 800f724:	f02c 4cff 	bic.w	ip, ip, #2139095040	; 0x7f800000
 800f728:	f42c 0ce0 	bic.w	ip, ip, #7340032	; 0x700000
 800f72c:	ea4c 5301 	orr.w	r3, ip, r1, lsl #20
 800f730:	ec43 2b10 	vmov	d0, r2, r3
 800f734:	bd38      	pop	{r3, r4, r5, pc}
 800f736:	a108      	add	r1, pc, #32	; (adr r1, 800f758 <scalbn+0x110>)
 800f738:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f73c:	e7b6      	b.n	800f6ac <scalbn+0x64>
 800f73e:	bf00      	nop
 800f740:	c2f8f359 	.word	0xc2f8f359
 800f744:	01a56e1f 	.word	0x01a56e1f
 800f748:	8800759c 	.word	0x8800759c
 800f74c:	7e37e43c 	.word	0x7e37e43c
 800f750:	8800759c 	.word	0x8800759c
 800f754:	fe37e43c 	.word	0xfe37e43c
 800f758:	c2f8f359 	.word	0xc2f8f359
 800f75c:	81a56e1f 	.word	0x81a56e1f
 800f760:	43500000 	.word	0x43500000
 800f764:	ffff3cb0 	.word	0xffff3cb0
 800f768:	3c900000 	.word	0x3c900000

0800f76c <_init>:
 800f76c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f76e:	bf00      	nop
 800f770:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f772:	bc08      	pop	{r3}
 800f774:	469e      	mov	lr, r3
 800f776:	4770      	bx	lr

0800f778 <_fini>:
 800f778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f77a:	bf00      	nop
 800f77c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f77e:	bc08      	pop	{r3}
 800f780:	469e      	mov	lr, r3
 800f782:	4770      	bx	lr
