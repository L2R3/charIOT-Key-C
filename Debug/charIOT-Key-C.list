
charIOT-Key-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001265c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d368  080127f0  080127f0  000227f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801fb58  0801fb58  000300c0  2**0
                  CONTENTS
  4 .ARM          00000008  0801fb58  0801fb58  0002fb58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801fb60  0801fb60  000300c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801fb60  0801fb60  0002fb60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801fb64  0801fb64  0002fb64  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0801fb68  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00009268  200000c0  0801fc28  000300c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20009328  0801fc28  00039328  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000300c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006fe7f  00000000  00000000  000300f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00007345  00000000  00000000  0009ff6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004a80  00000000  00000000  000a72b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004758  00000000  00000000  000abd38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00027012  00000000  00000000  000b0490  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00038b0e  00000000  00000000  000d74a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0010634c  00000000  00000000  0010ffb0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  002162fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00015020  00000000  00000000  0021634c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080127d4 	.word	0x080127d4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	080127d4 	.word	0x080127d4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c9c:	f000 b974 	b.w	8000f88 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f806 	bl	8000cb8 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__udivmoddi4>:
 8000cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cbc:	9d08      	ldr	r5, [sp, #32]
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	468e      	mov	lr, r1
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d14d      	bne.n	8000d62 <__udivmoddi4+0xaa>
 8000cc6:	428a      	cmp	r2, r1
 8000cc8:	4694      	mov	ip, r2
 8000cca:	d969      	bls.n	8000da0 <__udivmoddi4+0xe8>
 8000ccc:	fab2 f282 	clz	r2, r2
 8000cd0:	b152      	cbz	r2, 8000ce8 <__udivmoddi4+0x30>
 8000cd2:	fa01 f302 	lsl.w	r3, r1, r2
 8000cd6:	f1c2 0120 	rsb	r1, r2, #32
 8000cda:	fa20 f101 	lsr.w	r1, r0, r1
 8000cde:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ce2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ce6:	4094      	lsls	r4, r2
 8000ce8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cec:	0c21      	lsrs	r1, r4, #16
 8000cee:	fbbe f6f8 	udiv	r6, lr, r8
 8000cf2:	fa1f f78c 	uxth.w	r7, ip
 8000cf6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cfa:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cfe:	fb06 f107 	mul.w	r1, r6, r7
 8000d02:	4299      	cmp	r1, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x64>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000d0e:	f080 811f 	bcs.w	8000f50 <__udivmoddi4+0x298>
 8000d12:	4299      	cmp	r1, r3
 8000d14:	f240 811c 	bls.w	8000f50 <__udivmoddi4+0x298>
 8000d18:	3e02      	subs	r6, #2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	1a5b      	subs	r3, r3, r1
 8000d1e:	b2a4      	uxth	r4, r4
 8000d20:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d24:	fb08 3310 	mls	r3, r8, r0, r3
 8000d28:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d2c:	fb00 f707 	mul.w	r7, r0, r7
 8000d30:	42a7      	cmp	r7, r4
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x92>
 8000d34:	eb1c 0404 	adds.w	r4, ip, r4
 8000d38:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3c:	f080 810a 	bcs.w	8000f54 <__udivmoddi4+0x29c>
 8000d40:	42a7      	cmp	r7, r4
 8000d42:	f240 8107 	bls.w	8000f54 <__udivmoddi4+0x29c>
 8000d46:	4464      	add	r4, ip
 8000d48:	3802      	subs	r0, #2
 8000d4a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d4e:	1be4      	subs	r4, r4, r7
 8000d50:	2600      	movs	r6, #0
 8000d52:	b11d      	cbz	r5, 8000d5c <__udivmoddi4+0xa4>
 8000d54:	40d4      	lsrs	r4, r2
 8000d56:	2300      	movs	r3, #0
 8000d58:	e9c5 4300 	strd	r4, r3, [r5]
 8000d5c:	4631      	mov	r1, r6
 8000d5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d62:	428b      	cmp	r3, r1
 8000d64:	d909      	bls.n	8000d7a <__udivmoddi4+0xc2>
 8000d66:	2d00      	cmp	r5, #0
 8000d68:	f000 80ef 	beq.w	8000f4a <__udivmoddi4+0x292>
 8000d6c:	2600      	movs	r6, #0
 8000d6e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d72:	4630      	mov	r0, r6
 8000d74:	4631      	mov	r1, r6
 8000d76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d7a:	fab3 f683 	clz	r6, r3
 8000d7e:	2e00      	cmp	r6, #0
 8000d80:	d14a      	bne.n	8000e18 <__udivmoddi4+0x160>
 8000d82:	428b      	cmp	r3, r1
 8000d84:	d302      	bcc.n	8000d8c <__udivmoddi4+0xd4>
 8000d86:	4282      	cmp	r2, r0
 8000d88:	f200 80f9 	bhi.w	8000f7e <__udivmoddi4+0x2c6>
 8000d8c:	1a84      	subs	r4, r0, r2
 8000d8e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d92:	2001      	movs	r0, #1
 8000d94:	469e      	mov	lr, r3
 8000d96:	2d00      	cmp	r5, #0
 8000d98:	d0e0      	beq.n	8000d5c <__udivmoddi4+0xa4>
 8000d9a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d9e:	e7dd      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000da0:	b902      	cbnz	r2, 8000da4 <__udivmoddi4+0xec>
 8000da2:	deff      	udf	#255	; 0xff
 8000da4:	fab2 f282 	clz	r2, r2
 8000da8:	2a00      	cmp	r2, #0
 8000daa:	f040 8092 	bne.w	8000ed2 <__udivmoddi4+0x21a>
 8000dae:	eba1 010c 	sub.w	r1, r1, ip
 8000db2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000db6:	fa1f fe8c 	uxth.w	lr, ip
 8000dba:	2601      	movs	r6, #1
 8000dbc:	0c20      	lsrs	r0, r4, #16
 8000dbe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000dc2:	fb07 1113 	mls	r1, r7, r3, r1
 8000dc6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000dca:	fb0e f003 	mul.w	r0, lr, r3
 8000dce:	4288      	cmp	r0, r1
 8000dd0:	d908      	bls.n	8000de4 <__udivmoddi4+0x12c>
 8000dd2:	eb1c 0101 	adds.w	r1, ip, r1
 8000dd6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000dda:	d202      	bcs.n	8000de2 <__udivmoddi4+0x12a>
 8000ddc:	4288      	cmp	r0, r1
 8000dde:	f200 80cb 	bhi.w	8000f78 <__udivmoddi4+0x2c0>
 8000de2:	4643      	mov	r3, r8
 8000de4:	1a09      	subs	r1, r1, r0
 8000de6:	b2a4      	uxth	r4, r4
 8000de8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dec:	fb07 1110 	mls	r1, r7, r0, r1
 8000df0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000df4:	fb0e fe00 	mul.w	lr, lr, r0
 8000df8:	45a6      	cmp	lr, r4
 8000dfa:	d908      	bls.n	8000e0e <__udivmoddi4+0x156>
 8000dfc:	eb1c 0404 	adds.w	r4, ip, r4
 8000e00:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000e04:	d202      	bcs.n	8000e0c <__udivmoddi4+0x154>
 8000e06:	45a6      	cmp	lr, r4
 8000e08:	f200 80bb 	bhi.w	8000f82 <__udivmoddi4+0x2ca>
 8000e0c:	4608      	mov	r0, r1
 8000e0e:	eba4 040e 	sub.w	r4, r4, lr
 8000e12:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e16:	e79c      	b.n	8000d52 <__udivmoddi4+0x9a>
 8000e18:	f1c6 0720 	rsb	r7, r6, #32
 8000e1c:	40b3      	lsls	r3, r6
 8000e1e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e22:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e26:	fa20 f407 	lsr.w	r4, r0, r7
 8000e2a:	fa01 f306 	lsl.w	r3, r1, r6
 8000e2e:	431c      	orrs	r4, r3
 8000e30:	40f9      	lsrs	r1, r7
 8000e32:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e36:	fa00 f306 	lsl.w	r3, r0, r6
 8000e3a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000e3e:	0c20      	lsrs	r0, r4, #16
 8000e40:	fa1f fe8c 	uxth.w	lr, ip
 8000e44:	fb09 1118 	mls	r1, r9, r8, r1
 8000e48:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e4c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e50:	4288      	cmp	r0, r1
 8000e52:	fa02 f206 	lsl.w	r2, r2, r6
 8000e56:	d90b      	bls.n	8000e70 <__udivmoddi4+0x1b8>
 8000e58:	eb1c 0101 	adds.w	r1, ip, r1
 8000e5c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000e60:	f080 8088 	bcs.w	8000f74 <__udivmoddi4+0x2bc>
 8000e64:	4288      	cmp	r0, r1
 8000e66:	f240 8085 	bls.w	8000f74 <__udivmoddi4+0x2bc>
 8000e6a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e6e:	4461      	add	r1, ip
 8000e70:	1a09      	subs	r1, r1, r0
 8000e72:	b2a4      	uxth	r4, r4
 8000e74:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e78:	fb09 1110 	mls	r1, r9, r0, r1
 8000e7c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e80:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e84:	458e      	cmp	lr, r1
 8000e86:	d908      	bls.n	8000e9a <__udivmoddi4+0x1e2>
 8000e88:	eb1c 0101 	adds.w	r1, ip, r1
 8000e8c:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000e90:	d26c      	bcs.n	8000f6c <__udivmoddi4+0x2b4>
 8000e92:	458e      	cmp	lr, r1
 8000e94:	d96a      	bls.n	8000f6c <__udivmoddi4+0x2b4>
 8000e96:	3802      	subs	r0, #2
 8000e98:	4461      	add	r1, ip
 8000e9a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e9e:	fba0 9402 	umull	r9, r4, r0, r2
 8000ea2:	eba1 010e 	sub.w	r1, r1, lr
 8000ea6:	42a1      	cmp	r1, r4
 8000ea8:	46c8      	mov	r8, r9
 8000eaa:	46a6      	mov	lr, r4
 8000eac:	d356      	bcc.n	8000f5c <__udivmoddi4+0x2a4>
 8000eae:	d053      	beq.n	8000f58 <__udivmoddi4+0x2a0>
 8000eb0:	b15d      	cbz	r5, 8000eca <__udivmoddi4+0x212>
 8000eb2:	ebb3 0208 	subs.w	r2, r3, r8
 8000eb6:	eb61 010e 	sbc.w	r1, r1, lr
 8000eba:	fa01 f707 	lsl.w	r7, r1, r7
 8000ebe:	fa22 f306 	lsr.w	r3, r2, r6
 8000ec2:	40f1      	lsrs	r1, r6
 8000ec4:	431f      	orrs	r7, r3
 8000ec6:	e9c5 7100 	strd	r7, r1, [r5]
 8000eca:	2600      	movs	r6, #0
 8000ecc:	4631      	mov	r1, r6
 8000ece:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ed2:	f1c2 0320 	rsb	r3, r2, #32
 8000ed6:	40d8      	lsrs	r0, r3
 8000ed8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000edc:	fa21 f303 	lsr.w	r3, r1, r3
 8000ee0:	4091      	lsls	r1, r2
 8000ee2:	4301      	orrs	r1, r0
 8000ee4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ee8:	fa1f fe8c 	uxth.w	lr, ip
 8000eec:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ef0:	fb07 3610 	mls	r6, r7, r0, r3
 8000ef4:	0c0b      	lsrs	r3, r1, #16
 8000ef6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000efa:	fb00 f60e 	mul.w	r6, r0, lr
 8000efe:	429e      	cmp	r6, r3
 8000f00:	fa04 f402 	lsl.w	r4, r4, r2
 8000f04:	d908      	bls.n	8000f18 <__udivmoddi4+0x260>
 8000f06:	eb1c 0303 	adds.w	r3, ip, r3
 8000f0a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000f0e:	d22f      	bcs.n	8000f70 <__udivmoddi4+0x2b8>
 8000f10:	429e      	cmp	r6, r3
 8000f12:	d92d      	bls.n	8000f70 <__udivmoddi4+0x2b8>
 8000f14:	3802      	subs	r0, #2
 8000f16:	4463      	add	r3, ip
 8000f18:	1b9b      	subs	r3, r3, r6
 8000f1a:	b289      	uxth	r1, r1
 8000f1c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f20:	fb07 3316 	mls	r3, r7, r6, r3
 8000f24:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f28:	fb06 f30e 	mul.w	r3, r6, lr
 8000f2c:	428b      	cmp	r3, r1
 8000f2e:	d908      	bls.n	8000f42 <__udivmoddi4+0x28a>
 8000f30:	eb1c 0101 	adds.w	r1, ip, r1
 8000f34:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000f38:	d216      	bcs.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3a:	428b      	cmp	r3, r1
 8000f3c:	d914      	bls.n	8000f68 <__udivmoddi4+0x2b0>
 8000f3e:	3e02      	subs	r6, #2
 8000f40:	4461      	add	r1, ip
 8000f42:	1ac9      	subs	r1, r1, r3
 8000f44:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f48:	e738      	b.n	8000dbc <__udivmoddi4+0x104>
 8000f4a:	462e      	mov	r6, r5
 8000f4c:	4628      	mov	r0, r5
 8000f4e:	e705      	b.n	8000d5c <__udivmoddi4+0xa4>
 8000f50:	4606      	mov	r6, r0
 8000f52:	e6e3      	b.n	8000d1c <__udivmoddi4+0x64>
 8000f54:	4618      	mov	r0, r3
 8000f56:	e6f8      	b.n	8000d4a <__udivmoddi4+0x92>
 8000f58:	454b      	cmp	r3, r9
 8000f5a:	d2a9      	bcs.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f5c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f60:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f64:	3801      	subs	r0, #1
 8000f66:	e7a3      	b.n	8000eb0 <__udivmoddi4+0x1f8>
 8000f68:	4646      	mov	r6, r8
 8000f6a:	e7ea      	b.n	8000f42 <__udivmoddi4+0x28a>
 8000f6c:	4620      	mov	r0, r4
 8000f6e:	e794      	b.n	8000e9a <__udivmoddi4+0x1e2>
 8000f70:	4640      	mov	r0, r8
 8000f72:	e7d1      	b.n	8000f18 <__udivmoddi4+0x260>
 8000f74:	46d0      	mov	r8, sl
 8000f76:	e77b      	b.n	8000e70 <__udivmoddi4+0x1b8>
 8000f78:	3b02      	subs	r3, #2
 8000f7a:	4461      	add	r1, ip
 8000f7c:	e732      	b.n	8000de4 <__udivmoddi4+0x12c>
 8000f7e:	4630      	mov	r0, r6
 8000f80:	e709      	b.n	8000d96 <__udivmoddi4+0xde>
 8000f82:	4464      	add	r4, ip
 8000f84:	3802      	subs	r0, #2
 8000f86:	e742      	b.n	8000e0e <__udivmoddi4+0x156>

08000f88 <__aeabi_idiv0>:
 8000f88:	4770      	bx	lr
 8000f8a:	bf00      	nop

08000f8c <u8g2_SetBitmapMode>:
*/

#include "u8g2.h"


void u8g2_SetBitmapMode(u8g2_t *u8g2, uint8_t is_transparent) {
 8000f8c:	b480      	push	{r7}
 8000f8e:	b083      	sub	sp, #12
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
 8000f94:	460b      	mov	r3, r1
 8000f96:	70fb      	strb	r3, [r7, #3]
  u8g2->bitmap_transparency = is_transparent;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	78fa      	ldrb	r2, [r7, #3]
 8000f9c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
}
 8000fa0:	bf00      	nop
 8000fa2:	370c      	adds	r7, #12
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af02      	add	r7, sp, #8
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	4608      	mov	r0, r1
 8000fb6:	4611      	mov	r1, r2
 8000fb8:	461a      	mov	r2, r3
 8000fba:	4603      	mov	r3, r0
 8000fbc:	817b      	strh	r3, [r7, #10]
 8000fbe:	460b      	mov	r3, r1
 8000fc0:	813b      	strh	r3, [r7, #8]
 8000fc2:	4613      	mov	r3, r2
 8000fc4:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000fc6:	897a      	ldrh	r2, [r7, #10]
 8000fc8:	88fb      	ldrh	r3, [r7, #6]
 8000fca:	4413      	add	r3, r2
 8000fcc:	b298      	uxth	r0, r3
 8000fce:	893a      	ldrh	r2, [r7, #8]
 8000fd0:	8b3b      	ldrh	r3, [r7, #24]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	b29b      	uxth	r3, r3
 8000fd6:	893a      	ldrh	r2, [r7, #8]
 8000fd8:	8979      	ldrh	r1, [r7, #10]
 8000fda:	9300      	str	r3, [sp, #0]
 8000fdc:	4603      	mov	r3, r0
 8000fde:	68f8      	ldr	r0, [r7, #12]
 8000fe0:	f001 faf0 	bl	80025c4 <u8g2_IsIntersection>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d012      	beq.n	8001010 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8000fea:	e00d      	b.n	8001008 <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000fec:	88fb      	ldrh	r3, [r7, #6]
 8000fee:	893a      	ldrh	r2, [r7, #8]
 8000ff0:	8979      	ldrh	r1, [r7, #10]
 8000ff2:	2000      	movs	r0, #0
 8000ff4:	9000      	str	r0, [sp, #0]
 8000ff6:	68f8      	ldr	r0, [r7, #12]
 8000ff8:	f001 f9dd 	bl	80023b6 <u8g2_DrawHVLine>
    y++;    
 8000ffc:	893b      	ldrh	r3, [r7, #8]
 8000ffe:	3301      	adds	r3, #1
 8001000:	813b      	strh	r3, [r7, #8]
    h--;
 8001002:	8b3b      	ldrh	r3, [r7, #24]
 8001004:	3b01      	subs	r3, #1
 8001006:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8001008:	8b3b      	ldrh	r3, [r7, #24]
 800100a:	2b00      	cmp	r3, #0
 800100c:	d1ee      	bne.n	8000fec <u8g2_DrawBox+0x40>
 800100e:	e000      	b.n	8001012 <u8g2_DrawBox+0x66>
    return;
 8001010:	bf00      	nop
  }
}
 8001012:	3710      	adds	r7, #16
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b088      	sub	sp, #32
 800101c:	af02      	add	r7, sp, #8
 800101e:	60f8      	str	r0, [r7, #12]
 8001020:	4608      	mov	r0, r1
 8001022:	4611      	mov	r1, r2
 8001024:	461a      	mov	r2, r3
 8001026:	4603      	mov	r3, r0
 8001028:	817b      	strh	r3, [r7, #10]
 800102a:	460b      	mov	r3, r1
 800102c:	813b      	strh	r3, [r7, #8]
 800102e:	4613      	mov	r3, r2
 8001030:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8001032:	897b      	ldrh	r3, [r7, #10]
 8001034:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8001036:	897a      	ldrh	r2, [r7, #10]
 8001038:	88fb      	ldrh	r3, [r7, #6]
 800103a:	4413      	add	r3, r2
 800103c:	b298      	uxth	r0, r3
 800103e:	893a      	ldrh	r2, [r7, #8]
 8001040:	8c3b      	ldrh	r3, [r7, #32]
 8001042:	4413      	add	r3, r2
 8001044:	b29b      	uxth	r3, r3
 8001046:	893a      	ldrh	r2, [r7, #8]
 8001048:	8979      	ldrh	r1, [r7, #10]
 800104a:	9300      	str	r3, [sp, #0]
 800104c:	4603      	mov	r3, r0
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f001 fab8 	bl	80025c4 <u8g2_IsIntersection>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d037      	beq.n	80010ca <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 800105a:	88fb      	ldrh	r3, [r7, #6]
 800105c:	893a      	ldrh	r2, [r7, #8]
 800105e:	8979      	ldrh	r1, [r7, #10]
 8001060:	2000      	movs	r0, #0
 8001062:	9000      	str	r0, [sp, #0]
 8001064:	68f8      	ldr	r0, [r7, #12]
 8001066:	f001 f9a6 	bl	80023b6 <u8g2_DrawHVLine>
  if (h >= 2) {
 800106a:	8c3b      	ldrh	r3, [r7, #32]
 800106c:	2b01      	cmp	r3, #1
 800106e:	d92d      	bls.n	80010cc <u8g2_DrawFrame+0xb4>
    h-=2;
 8001070:	8c3b      	ldrh	r3, [r7, #32]
 8001072:	3b02      	subs	r3, #2
 8001074:	843b      	strh	r3, [r7, #32]
    y++;
 8001076:	893b      	ldrh	r3, [r7, #8]
 8001078:	3301      	adds	r3, #1
 800107a:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 800107c:	8c3b      	ldrh	r3, [r7, #32]
 800107e:	2b00      	cmp	r3, #0
 8001080:	d01a      	beq.n	80010b8 <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001082:	8c3b      	ldrh	r3, [r7, #32]
 8001084:	893a      	ldrh	r2, [r7, #8]
 8001086:	8979      	ldrh	r1, [r7, #10]
 8001088:	2001      	movs	r0, #1
 800108a:	9000      	str	r0, [sp, #0]
 800108c:	68f8      	ldr	r0, [r7, #12]
 800108e:	f001 f992 	bl	80023b6 <u8g2_DrawHVLine>
      x+=w;
 8001092:	897a      	ldrh	r2, [r7, #10]
 8001094:	88fb      	ldrh	r3, [r7, #6]
 8001096:	4413      	add	r3, r2
 8001098:	817b      	strh	r3, [r7, #10]
      x--;
 800109a:	897b      	ldrh	r3, [r7, #10]
 800109c:	3b01      	subs	r3, #1
 800109e:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 80010a0:	8c3b      	ldrh	r3, [r7, #32]
 80010a2:	893a      	ldrh	r2, [r7, #8]
 80010a4:	8979      	ldrh	r1, [r7, #10]
 80010a6:	2001      	movs	r0, #1
 80010a8:	9000      	str	r0, [sp, #0]
 80010aa:	68f8      	ldr	r0, [r7, #12]
 80010ac:	f001 f983 	bl	80023b6 <u8g2_DrawHVLine>
      y+=h;
 80010b0:	893a      	ldrh	r2, [r7, #8]
 80010b2:	8c3b      	ldrh	r3, [r7, #32]
 80010b4:	4413      	add	r3, r2
 80010b6:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 80010b8:	88fb      	ldrh	r3, [r7, #6]
 80010ba:	893a      	ldrh	r2, [r7, #8]
 80010bc:	8af9      	ldrh	r1, [r7, #22]
 80010be:	2000      	movs	r0, #0
 80010c0:	9000      	str	r0, [sp, #0]
 80010c2:	68f8      	ldr	r0, [r7, #12]
 80010c4:	f001 f977 	bl	80023b6 <u8g2_DrawHVLine>
 80010c8:	e000      	b.n	80010cc <u8g2_DrawFrame+0xb4>
    return;
 80010ca:	bf00      	nop
  }
}
 80010cc:	3718      	adds	r7, #24
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}

080010d2 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 80010d2:	b580      	push	{r7, lr}
 80010d4:	b084      	sub	sp, #16
 80010d6:	af00      	add	r7, sp, #0
 80010d8:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	7c1b      	ldrb	r3, [r3, #16]
 80010e0:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010e8:	461a      	mov	r2, r3
 80010ea:	68fb      	ldr	r3, [r7, #12]
 80010ec:	fb02 f303 	mul.w	r3, r2, r3
 80010f0:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	00db      	lsls	r3, r3, #3
 80010f6:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010fc:	68fa      	ldr	r2, [r7, #12]
 80010fe:	2100      	movs	r1, #0
 8001100:	4618      	mov	r0, r3
 8001102:	f00e ffbd 	bl	8010080 <memset>
}
 8001106:	bf00      	nop
 8001108:	3710      	adds	r7, #16
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}

0800110e <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 800110e:	b580      	push	{r7, lr}
 8001110:	b086      	sub	sp, #24
 8001112:	af02      	add	r7, sp, #8
 8001114:	6078      	str	r0, [r7, #4]
 8001116:	460b      	mov	r3, r1
 8001118:	70fb      	strb	r3, [r7, #3]
 800111a:	4613      	mov	r3, r2
 800111c:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	7c1b      	ldrb	r3, [r3, #16]
 8001124:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8001126:	78fb      	ldrb	r3, [r7, #3]
 8001128:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112e:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8001130:	7bfb      	ldrb	r3, [r7, #15]
 8001132:	b29b      	uxth	r3, r3
 8001134:	89ba      	ldrh	r2, [r7, #12]
 8001136:	fb12 f303 	smulbb	r3, r2, r3
 800113a:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 800113c:	89bb      	ldrh	r3, [r7, #12]
 800113e:	00db      	lsls	r3, r3, #3
 8001140:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8001142:	89bb      	ldrh	r3, [r7, #12]
 8001144:	68ba      	ldr	r2, [r7, #8]
 8001146:	4413      	add	r3, r2
 8001148:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 800114a:	7bf9      	ldrb	r1, [r7, #15]
 800114c:	78ba      	ldrb	r2, [r7, #2]
 800114e:	68bb      	ldr	r3, [r7, #8]
 8001150:	9300      	str	r3, [sp, #0]
 8001152:	460b      	mov	r3, r1
 8001154:	2100      	movs	r1, #0
 8001156:	6878      	ldr	r0, [r7, #4]
 8001158:	f001 ff9d 	bl	8003096 <u8x8_DrawTile>
}
 800115c:	bf00      	nop
 800115e:	3710      	adds	r7, #16
 8001160:	46bd      	mov	sp, r7
 8001162:	bd80      	pop	{r7, pc}

08001164 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	b084      	sub	sp, #16
 8001168:	af00      	add	r7, sp, #0
 800116a:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 800116c:	2300      	movs	r3, #0
 800116e:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001176:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800117e:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	7c5b      	ldrb	r3, [r3, #17]
 8001186:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001188:	7bba      	ldrb	r2, [r7, #14]
 800118a:	7bfb      	ldrb	r3, [r7, #15]
 800118c:	4619      	mov	r1, r3
 800118e:	6878      	ldr	r0, [r7, #4]
 8001190:	f7ff ffbd 	bl	800110e <u8g2_send_tile_row>
    src_row++;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
 8001196:	3301      	adds	r3, #1
 8001198:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800119a:	7bbb      	ldrb	r3, [r7, #14]
 800119c:	3301      	adds	r3, #1
 800119e:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 80011a0:	7bfa      	ldrb	r2, [r7, #15]
 80011a2:	7b7b      	ldrb	r3, [r7, #13]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d203      	bcs.n	80011b0 <u8g2_send_buffer+0x4c>
 80011a8:	7bba      	ldrb	r2, [r7, #14]
 80011aa:	7b3b      	ldrb	r3, [r7, #12]
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d3eb      	bcc.n	8001188 <u8g2_send_buffer+0x24>
}
 80011b0:	bf00      	nop
 80011b2:	3710      	adds	r7, #16
 80011b4:	46bd      	mov	sp, r7
 80011b6:	bd80      	pop	{r7, pc}

080011b8 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 80011c0:	6878      	ldr	r0, [r7, #4]
 80011c2:	f7ff ffcf 	bl	8001164 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 80011c6:	6878      	ldr	r0, [r7, #4]
 80011c8:	f001 ffb6 	bl	8003138 <u8x8_RefreshDisplay>
}
 80011cc:	bf00      	nop
 80011ce:	3708      	adds	r7, #8
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}

080011d4 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	460b      	mov	r3, r1
 80011de:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	78fa      	ldrb	r2, [r7, #3]
 80011e4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	6878      	ldr	r0, [r7, #4]
 80011f0:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	6878      	ldr	r0, [r7, #4]
 80011fa:	4798      	blx	r3
}
 80011fc:	bf00      	nop
 80011fe:	3708      	adds	r7, #8
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001212:	2b00      	cmp	r3, #0
 8001214:	d002      	beq.n	800121c <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001216:	6878      	ldr	r0, [r7, #4]
 8001218:	f7ff ff5b 	bl	80010d2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 800121c:	2100      	movs	r1, #0
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f7ff ffd8 	bl	80011d4 <u8g2_SetBufferCurrTileRow>
}
 8001224:	bf00      	nop
 8001226:	3708      	adds	r7, #8
 8001228:	46bd      	mov	sp, r7
 800122a:	bd80      	pop	{r7, pc}

0800122c <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 800122c:	b580      	push	{r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8001234:	6878      	ldr	r0, [r7, #4]
 8001236:	f7ff ff95 	bl	8001164 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 800123a:	687b      	ldr	r3, [r7, #4]
 800123c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001240:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001248:	7bfb      	ldrb	r3, [r7, #15]
 800124a:	4413      	add	r3, r2
 800124c:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	7c5b      	ldrb	r3, [r3, #17]
 8001254:	7bfa      	ldrb	r2, [r7, #15]
 8001256:	429a      	cmp	r2, r3
 8001258:	d304      	bcc.n	8001264 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 800125a:	6878      	ldr	r0, [r7, #4]
 800125c:	f001 ff6c 	bl	8003138 <u8x8_RefreshDisplay>
    return 0;
 8001260:	2300      	movs	r3, #0
 8001262:	e00d      	b.n	8001280 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800126a:	2b00      	cmp	r3, #0
 800126c:	d002      	beq.n	8001274 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 800126e:	6878      	ldr	r0, [r7, #4]
 8001270:	f7ff ff2f 	bl	80010d2 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8001274:	7bfb      	ldrb	r3, [r7, #15]
 8001276:	4619      	mov	r1, r3
 8001278:	6878      	ldr	r0, [r7, #4]
 800127a:	f7ff ffab 	bl	80011d4 <u8g2_SetBufferCurrTileRow>
  return 1;
 800127e:	2301      	movs	r3, #1
}
 8001280:	4618      	mov	r0, r3
 8001282:	3710      	adds	r7, #16
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b08c      	sub	sp, #48	; 0x30
 800128c:	af02      	add	r7, sp, #8
 800128e:	60f8      	str	r0, [r7, #12]
 8001290:	4608      	mov	r0, r1
 8001292:	4611      	mov	r1, r2
 8001294:	461a      	mov	r2, r3
 8001296:	4603      	mov	r3, r0
 8001298:	817b      	strh	r3, [r7, #10]
 800129a:	460b      	mov	r3, r1
 800129c:	813b      	strh	r3, [r7, #8]
 800129e:	4613      	mov	r3, r2
 80012a0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 80012a2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80012a4:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 80012a6:	2308      	movs	r3, #8
 80012a8:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 80012aa:	88fb      	ldrh	r3, [r7, #6]
 80012ac:	f003 0307 	and.w	r3, r3, #7
 80012b0:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 80012b8:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 80012c0:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80012c8:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 80012ca:	88fb      	ldrh	r3, [r7, #6]
 80012cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 80012d4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012d6:	3301      	adds	r3, #1
 80012d8:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 80012da:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012dc:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 80012de:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012e0:	3301      	adds	r3, #1
 80012e2:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 80012e4:	897b      	ldrh	r3, [r7, #10]
 80012e6:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 80012e8:	8b7a      	ldrh	r2, [r7, #26]
 80012ea:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 80012f0:	8b7a      	ldrh	r2, [r7, #26]
 80012f2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012f4:	1ad3      	subs	r3, r2, r3
 80012f6:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 80012f8:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80012fa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012fc:	4413      	add	r3, r2
 80012fe:	b29b      	uxth	r3, r3
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	b29a      	uxth	r2, r3
 8001304:	8c3b      	ldrh	r3, [r7, #32]
 8001306:	4413      	add	r3, r2
 8001308:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 800130a:	893b      	ldrh	r3, [r7, #8]
 800130c:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001312:	68f8      	ldr	r0, [r7, #12]
 8001314:	4798      	blx	r3
 8001316:	4603      	mov	r3, r0
 8001318:	461a      	mov	r2, r3
 800131a:	8afb      	ldrh	r3, [r7, #22]
 800131c:	4413      	add	r3, r2
 800131e:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8001320:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001324:	b29b      	uxth	r3, r3
 8001326:	8afa      	ldrh	r2, [r7, #22]
 8001328:	1ad3      	subs	r3, r2, r3
 800132a:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 800132c:	8afa      	ldrh	r2, [r7, #22]
 800132e:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001330:	1ad3      	subs	r3, r2, r3
 8001332:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 8001334:	8afa      	ldrh	r2, [r7, #22]
 8001336:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001338:	1ad3      	subs	r3, r2, r3
 800133a:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 800133c:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001340:	b21a      	sxth	r2, r3
 8001342:	f997 301e 	ldrsb.w	r3, [r7, #30]
 8001346:	b21b      	sxth	r3, r3
 8001348:	1ad3      	subs	r3, r2, r3
 800134a:	b21b      	sxth	r3, r3
 800134c:	b29a      	uxth	r2, r3
 800134e:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 8001350:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 8001352:	440b      	add	r3, r1
 8001354:	b29b      	uxth	r3, r3
 8001356:	005b      	lsls	r3, r3, #1
 8001358:	b29b      	uxth	r3, r3
 800135a:	4413      	add	r3, r2
 800135c:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 800135e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001360:	2b00      	cmp	r3, #0
 8001362:	d067      	beq.n	8001434 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 8001364:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8001366:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8001368:	429a      	cmp	r2, r3
 800136a:	d109      	bne.n	8001380 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 800136c:	7f7b      	ldrb	r3, [r7, #29]
 800136e:	2b00      	cmp	r3, #0
 8001370:	bf0c      	ite	eq
 8001372:	2301      	moveq	r3, #1
 8001374:	2300      	movne	r3, #0
 8001376:	b2db      	uxtb	r3, r3
 8001378:	4619      	mov	r1, r3
 800137a:	68f8      	ldr	r0, [r7, #12]
 800137c:	f001 f8d8 	bl	8002530 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 8001380:	8b38      	ldrh	r0, [r7, #24]
 8001382:	8afa      	ldrh	r2, [r7, #22]
 8001384:	8b79      	ldrh	r1, [r7, #26]
 8001386:	8abb      	ldrh	r3, [r7, #20]
 8001388:	9300      	str	r3, [sp, #0]
 800138a:	4603      	mov	r3, r0
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f7ff fe43 	bl	8001018 <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001392:	7f7b      	ldrb	r3, [r7, #29]
 8001394:	4619      	mov	r1, r3
 8001396:	68f8      	ldr	r0, [r7, #12]
 8001398:	f001 f8ca 	bl	8002530 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 800139c:	88fb      	ldrh	r3, [r7, #6]
 800139e:	f003 0318 	and.w	r3, r3, #24
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d042      	beq.n	800142c <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 80013a6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80013a8:	88fb      	ldrh	r3, [r7, #6]
 80013aa:	f003 0307 	and.w	r3, r3, #7
 80013ae:	429a      	cmp	r2, r3
 80013b0:	d13c      	bne.n	800142c <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 80013b2:	88fb      	ldrh	r3, [r7, #6]
 80013b4:	10db      	asrs	r3, r3, #3
 80013b6:	b29b      	uxth	r3, r3
 80013b8:	f003 0303 	and.w	r3, r3, #3
 80013bc:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 80013be:	8a7b      	ldrh	r3, [r7, #18]
 80013c0:	3b01      	subs	r3, #1
 80013c2:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 80013c4:	2300      	movs	r3, #0
 80013c6:	847b      	strh	r3, [r7, #34]	; 0x22
 80013c8:	e02c      	b.n	8001424 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 80013ca:	8b7a      	ldrh	r2, [r7, #26]
 80013cc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013ce:	4413      	add	r3, r2
 80013d0:	b29a      	uxth	r2, r3
 80013d2:	8a7b      	ldrh	r3, [r7, #18]
 80013d4:	4413      	add	r3, r2
 80013d6:	b299      	uxth	r1, r3
 80013d8:	8afa      	ldrh	r2, [r7, #22]
 80013da:	8abb      	ldrh	r3, [r7, #20]
 80013dc:	4413      	add	r3, r2
 80013de:	b29a      	uxth	r2, r3
 80013e0:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013e2:	4413      	add	r3, r2
 80013e4:	b29a      	uxth	r2, r3
 80013e6:	8a7b      	ldrh	r3, [r7, #18]
 80013e8:	4413      	add	r3, r2
 80013ea:	b29a      	uxth	r2, r3
 80013ec:	8b3b      	ldrh	r3, [r7, #24]
 80013ee:	68f8      	ldr	r0, [r7, #12]
 80013f0:	f001 f86c 	bl	80024cc <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 80013f4:	8b7a      	ldrh	r2, [r7, #26]
 80013f6:	8b3b      	ldrh	r3, [r7, #24]
 80013f8:	4413      	add	r3, r2
 80013fa:	b29a      	uxth	r2, r3
 80013fc:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80013fe:	4413      	add	r3, r2
 8001400:	b29a      	uxth	r2, r3
 8001402:	8a7b      	ldrh	r3, [r7, #18]
 8001404:	4413      	add	r3, r2
 8001406:	b299      	uxth	r1, r3
 8001408:	8afa      	ldrh	r2, [r7, #22]
 800140a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800140c:	4413      	add	r3, r2
 800140e:	b29a      	uxth	r2, r3
 8001410:	8a7b      	ldrh	r3, [r7, #18]
 8001412:	4413      	add	r3, r2
 8001414:	b29a      	uxth	r2, r3
 8001416:	8abb      	ldrh	r3, [r7, #20]
 8001418:	68f8      	ldr	r0, [r7, #12]
 800141a:	f001 f870 	bl	80024fe <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 800141e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001420:	3301      	adds	r3, #1
 8001422:	847b      	strh	r3, [r7, #34]	; 0x22
 8001424:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8001426:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001428:	429a      	cmp	r2, r3
 800142a:	d3ce      	bcc.n	80013ca <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 800142c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800142e:	3b01      	subs	r3, #1
 8001430:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 8001432:	e757      	b.n	80012e4 <u8g2_DrawButtonFrame+0x5c>
      break;
 8001434:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 8001436:	88fb      	ldrh	r3, [r7, #6]
 8001438:	f003 0320 	and.w	r3, r3, #32
 800143c:	2b00      	cmp	r3, #0
 800143e:	d011      	beq.n	8001464 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 8001440:	2102      	movs	r1, #2
 8001442:	68f8      	ldr	r0, [r7, #12]
 8001444:	f001 f874 	bl	8002530 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 8001448:	8b38      	ldrh	r0, [r7, #24]
 800144a:	8afa      	ldrh	r2, [r7, #22]
 800144c:	8b79      	ldrh	r1, [r7, #26]
 800144e:	8abb      	ldrh	r3, [r7, #20]
 8001450:	9300      	str	r3, [sp, #0]
 8001452:	4603      	mov	r3, r0
 8001454:	68f8      	ldr	r0, [r7, #12]
 8001456:	f7ff fda9 	bl	8000fac <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 800145a:	7f7b      	ldrb	r3, [r7, #29]
 800145c:	4619      	mov	r1, r3
 800145e:	68f8      	ldr	r0, [r7, #12]
 8001460:	f001 f866 	bl	8002530 <u8g2_SetDrawColor>
  }
}
 8001464:	bf00      	nop
 8001466:	3728      	adds	r7, #40	; 0x28
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}

0800146c <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b08a      	sub	sp, #40	; 0x28
 8001470:	af04      	add	r7, sp, #16
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	4608      	mov	r0, r1
 8001476:	4611      	mov	r1, r2
 8001478:	461a      	mov	r2, r3
 800147a:	4603      	mov	r3, r0
 800147c:	817b      	strh	r3, [r7, #10]
 800147e:	460b      	mov	r3, r1
 8001480:	813b      	strh	r3, [r7, #8]
 8001482:	4613      	mov	r3, r2
 8001484:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 8001486:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f000 ff11 	bl	80022b0 <u8g2_GetUTF8Width>
 800148e:	4603      	mov	r3, r0
 8001490:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 8001492:	2300      	movs	r3, #0
 8001494:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 8001496:	88fb      	ldrh	r3, [r7, #6]
 8001498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800149c:	2b00      	cmp	r3, #0
 800149e:	d009      	beq.n	80014b4 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 80014a0:	8afb      	ldrh	r3, [r7, #22]
 80014a2:	3301      	adds	r3, #1
 80014a4:	0fda      	lsrs	r2, r3, #31
 80014a6:	4413      	add	r3, r2
 80014a8:	105b      	asrs	r3, r3, #1
 80014aa:	425b      	negs	r3, r3
 80014ac:	b29a      	uxth	r2, r3
 80014ae:	897b      	ldrh	r3, [r7, #10]
 80014b0:	4413      	add	r3, r2
 80014b2:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 80014b4:	8afa      	ldrh	r2, [r7, #22]
 80014b6:	8c3b      	ldrh	r3, [r7, #32]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d20d      	bcs.n	80014d8 <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 80014bc:	88fb      	ldrh	r3, [r7, #6]
 80014be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d006      	beq.n	80014d4 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 80014c6:	8c3a      	ldrh	r2, [r7, #32]
 80014c8:	8afb      	ldrh	r3, [r7, #22]
 80014ca:	1ad3      	subs	r3, r2, r3
 80014cc:	0fda      	lsrs	r2, r3, #31
 80014ce:	4413      	add	r3, r2
 80014d0:	105b      	asrs	r3, r3, #1
 80014d2:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 80014d4:	8c3b      	ldrh	r3, [r7, #32]
 80014d6:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 80014d8:	2101      	movs	r1, #1
 80014da:	68f8      	ldr	r0, [r7, #12]
 80014dc:	f000 fcdc 	bl	8001e98 <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 80014e0:	893a      	ldrh	r2, [r7, #8]
 80014e2:	8979      	ldrh	r1, [r7, #10]
 80014e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014e6:	68f8      	ldr	r0, [r7, #12]
 80014e8:	f000 fdae 	bl	8002048 <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 80014ec:	897a      	ldrh	r2, [r7, #10]
 80014ee:	8abb      	ldrh	r3, [r7, #20]
 80014f0:	1ad3      	subs	r3, r2, r3
 80014f2:	b299      	uxth	r1, r3
 80014f4:	88f8      	ldrh	r0, [r7, #6]
 80014f6:	893a      	ldrh	r2, [r7, #8]
 80014f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80014fa:	9302      	str	r3, [sp, #8]
 80014fc:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80014fe:	9301      	str	r3, [sp, #4]
 8001500:	8afb      	ldrh	r3, [r7, #22]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	4603      	mov	r3, r0
 8001506:	68f8      	ldr	r0, [r7, #12]
 8001508:	f7ff febe 	bl	8001288 <u8g2_DrawButtonFrame>
  
}
 800150c:	bf00      	nop
 800150e:	3718      	adds	r7, #24
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}

08001514 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b082      	sub	sp, #8
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f7ff fe71 	bl	8001204 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001522:	6878      	ldr	r0, [r7, #4]
 8001524:	f7ff fe82 	bl	800122c <u8g2_NextPage>
 8001528:	4603      	mov	r3, r0
 800152a:	2b00      	cmp	r3, #0
 800152c:	d1f9      	bne.n	8001522 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800152e:	2100      	movs	r1, #0
 8001530:	6878      	ldr	r0, [r7, #4]
 8001532:	f7ff fe4f 	bl	80011d4 <u8g2_SetBufferCurrTileRow>
}
 8001536:	bf00      	nop
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
	...

08001540 <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	2204      	movs	r2, #4
 800154c:	701a      	strb	r2, [r3, #0]
  return buf;
 800154e:	4b03      	ldr	r3, [pc, #12]	; (800155c <u8g2_m_16_4_f+0x1c>)
  #endif
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr
 800155c:	200000dc 	.word	0x200000dc

08001560 <u8g2_Setup_ssd1305_i2c_128x32_noname_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1305 f */
void u8g2_Setup_ssd1305_i2c_128x32_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af02      	add	r7, sp, #8
 8001566:	60f8      	str	r0, [r7, #12]
 8001568:	60b9      	str	r1, [r7, #8]
 800156a:	607a      	str	r2, [r7, #4]
 800156c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1305_128x32_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	9300      	str	r3, [sp, #0]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	4a0b      	ldr	r2, [pc, #44]	; (80015a4 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x44>)
 8001576:	490c      	ldr	r1, [pc, #48]	; (80015a8 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x48>)
 8001578:	68f8      	ldr	r0, [r7, #12]
 800157a:	f001 fe3d 	bl	80031f8 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 800157e:	f107 0313 	add.w	r3, r7, #19
 8001582:	4618      	mov	r0, r3
 8001584:	f7ff ffdc 	bl	8001540 <u8g2_m_16_4_f>
 8001588:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 800158a:	7cfa      	ldrb	r2, [r7, #19]
 800158c:	68bb      	ldr	r3, [r7, #8]
 800158e:	9300      	str	r3, [sp, #0]
 8001590:	4b06      	ldr	r3, [pc, #24]	; (80015ac <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x4c>)
 8001592:	6979      	ldr	r1, [r7, #20]
 8001594:	68f8      	ldr	r0, [r7, #12]
 8001596:	f001 f8ff 	bl	8002798 <u8g2_SetupBuffer>
}
 800159a:	bf00      	nop
 800159c:	3718      	adds	r7, #24
 800159e:	46bd      	mov	sp, r7
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	08002d8d 	.word	0x08002d8d
 80015a8:	08002f4d 	.word	0x08002f4d
 80015ac:	0800261b 	.word	0x0800261b

080015b0 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
 80015b8:	460b      	mov	r3, r1
 80015ba:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80015bc:	78fb      	ldrb	r3, [r7, #3]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	4413      	add	r3, r2
 80015c2:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	781b      	ldrb	r3, [r3, #0]
}
 80015c8:	4618      	mov	r0, r3
 80015ca:	370c      	adds	r7, #12
 80015cc:	46bd      	mov	sp, r7
 80015ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d2:	4770      	bx	lr

080015d4 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80015d4:	b480      	push	{r7}
 80015d6:	b085      	sub	sp, #20
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	460b      	mov	r3, r1
 80015de:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80015e0:	78fb      	ldrb	r3, [r7, #3]
 80015e2:	687a      	ldr	r2, [r7, #4]
 80015e4:	4413      	add	r3, r2
 80015e6:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	781b      	ldrb	r3, [r3, #0]
 80015ec:	81fb      	strh	r3, [r7, #14]
    font++;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	3301      	adds	r3, #1
 80015f2:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80015f4:	89fb      	ldrh	r3, [r7, #14]
 80015f6:	021b      	lsls	r3, r3, #8
 80015f8:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	781b      	ldrb	r3, [r3, #0]
 80015fe:	b29a      	uxth	r2, r3
 8001600:	89fb      	ldrh	r3, [r7, #14]
 8001602:	4413      	add	r3, r2
 8001604:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001606:	89fb      	ldrh	r3, [r7, #14]
}
 8001608:	4618      	mov	r0, r3
 800160a:	3714      	adds	r7, #20
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
 800161c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800161e:	2100      	movs	r1, #0
 8001620:	6838      	ldr	r0, [r7, #0]
 8001622:	f7ff ffc5 	bl	80015b0 <u8g2_font_get_byte>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800162e:	2101      	movs	r1, #1
 8001630:	6838      	ldr	r0, [r7, #0]
 8001632:	f7ff ffbd 	bl	80015b0 <u8g2_font_get_byte>
 8001636:	4603      	mov	r3, r0
 8001638:	461a      	mov	r2, r3
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800163e:	2102      	movs	r1, #2
 8001640:	6838      	ldr	r0, [r7, #0]
 8001642:	f7ff ffb5 	bl	80015b0 <u8g2_font_get_byte>
 8001646:	4603      	mov	r3, r0
 8001648:	461a      	mov	r2, r3
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800164e:	2103      	movs	r1, #3
 8001650:	6838      	ldr	r0, [r7, #0]
 8001652:	f7ff ffad 	bl	80015b0 <u8g2_font_get_byte>
 8001656:	4603      	mov	r3, r0
 8001658:	461a      	mov	r2, r3
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800165e:	2104      	movs	r1, #4
 8001660:	6838      	ldr	r0, [r7, #0]
 8001662:	f7ff ffa5 	bl	80015b0 <u8g2_font_get_byte>
 8001666:	4603      	mov	r3, r0
 8001668:	461a      	mov	r2, r3
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800166e:	2105      	movs	r1, #5
 8001670:	6838      	ldr	r0, [r7, #0]
 8001672:	f7ff ff9d 	bl	80015b0 <u8g2_font_get_byte>
 8001676:	4603      	mov	r3, r0
 8001678:	461a      	mov	r2, r3
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800167e:	2106      	movs	r1, #6
 8001680:	6838      	ldr	r0, [r7, #0]
 8001682:	f7ff ff95 	bl	80015b0 <u8g2_font_get_byte>
 8001686:	4603      	mov	r3, r0
 8001688:	461a      	mov	r2, r3
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800168e:	2107      	movs	r1, #7
 8001690:	6838      	ldr	r0, [r7, #0]
 8001692:	f7ff ff8d 	bl	80015b0 <u8g2_font_get_byte>
 8001696:	4603      	mov	r3, r0
 8001698:	461a      	mov	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800169e:	2108      	movs	r1, #8
 80016a0:	6838      	ldr	r0, [r7, #0]
 80016a2:	f7ff ff85 	bl	80015b0 <u8g2_font_get_byte>
 80016a6:	4603      	mov	r3, r0
 80016a8:	461a      	mov	r2, r3
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80016ae:	2109      	movs	r1, #9
 80016b0:	6838      	ldr	r0, [r7, #0]
 80016b2:	f7ff ff7d 	bl	80015b0 <u8g2_font_get_byte>
 80016b6:	4603      	mov	r3, r0
 80016b8:	b25a      	sxtb	r2, r3
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80016be:	210a      	movs	r1, #10
 80016c0:	6838      	ldr	r0, [r7, #0]
 80016c2:	f7ff ff75 	bl	80015b0 <u8g2_font_get_byte>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b25a      	sxtb	r2, r3
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80016ce:	210b      	movs	r1, #11
 80016d0:	6838      	ldr	r0, [r7, #0]
 80016d2:	f7ff ff6d 	bl	80015b0 <u8g2_font_get_byte>
 80016d6:	4603      	mov	r3, r0
 80016d8:	b25a      	sxtb	r2, r3
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80016de:	210c      	movs	r1, #12
 80016e0:	6838      	ldr	r0, [r7, #0]
 80016e2:	f7ff ff65 	bl	80015b0 <u8g2_font_get_byte>
 80016e6:	4603      	mov	r3, r0
 80016e8:	b25a      	sxtb	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80016ee:	210d      	movs	r1, #13
 80016f0:	6838      	ldr	r0, [r7, #0]
 80016f2:	f7ff ff5d 	bl	80015b0 <u8g2_font_get_byte>
 80016f6:	4603      	mov	r3, r0
 80016f8:	b25a      	sxtb	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80016fe:	210e      	movs	r1, #14
 8001700:	6838      	ldr	r0, [r7, #0]
 8001702:	f7ff ff55 	bl	80015b0 <u8g2_font_get_byte>
 8001706:	4603      	mov	r3, r0
 8001708:	b25a      	sxtb	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800170e:	210f      	movs	r1, #15
 8001710:	6838      	ldr	r0, [r7, #0]
 8001712:	f7ff ff4d 	bl	80015b0 <u8g2_font_get_byte>
 8001716:	4603      	mov	r3, r0
 8001718:	b25a      	sxtb	r2, r3
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800171e:	2110      	movs	r1, #16
 8001720:	6838      	ldr	r0, [r7, #0]
 8001722:	f7ff ff45 	bl	80015b0 <u8g2_font_get_byte>
 8001726:	4603      	mov	r3, r0
 8001728:	b25a      	sxtb	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800172e:	2111      	movs	r1, #17
 8001730:	6838      	ldr	r0, [r7, #0]
 8001732:	f7ff ff4f 	bl	80015d4 <u8g2_font_get_word>
 8001736:	4603      	mov	r3, r0
 8001738:	461a      	mov	r2, r3
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800173e:	2113      	movs	r1, #19
 8001740:	6838      	ldr	r0, [r7, #0]
 8001742:	f7ff ff47 	bl	80015d4 <u8g2_font_get_word>
 8001746:	4603      	mov	r3, r0
 8001748:	461a      	mov	r2, r3
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800174e:	2115      	movs	r1, #21
 8001750:	6838      	ldr	r0, [r7, #0]
 8001752:	f7ff ff3f 	bl	80015d4 <u8g2_font_get_word>
 8001756:	4603      	mov	r3, r0
 8001758:	461a      	mov	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	82da      	strh	r2, [r3, #22]
#endif
}
 800175e:	bf00      	nop
 8001760:	3708      	adds	r7, #8
 8001762:	46bd      	mov	sp, r7
 8001764:	bd80      	pop	{r7, pc}

08001766 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001766:	b480      	push	{r7}
 8001768:	b085      	sub	sp, #20
 800176a:	af00      	add	r7, sp, #0
 800176c:	6078      	str	r0, [r7, #4]
 800176e:	460b      	mov	r3, r1
 8001770:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	7b1b      	ldrb	r3, [r3, #12]
 8001776:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	781b      	ldrb	r3, [r3, #0]
 800177e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001780:	7bfa      	ldrb	r2, [r7, #15]
 8001782:	7b7b      	ldrb	r3, [r7, #13]
 8001784:	fa42 f303 	asr.w	r3, r2, r3
 8001788:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800178a:	7b7b      	ldrb	r3, [r7, #13]
 800178c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800178e:	7bba      	ldrb	r2, [r7, #14]
 8001790:	78fb      	ldrb	r3, [r7, #3]
 8001792:	4413      	add	r3, r2
 8001794:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001796:	7bbb      	ldrb	r3, [r7, #14]
 8001798:	2b07      	cmp	r3, #7
 800179a:	d91a      	bls.n	80017d2 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 800179c:	2308      	movs	r3, #8
 800179e:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80017a0:	7b3a      	ldrb	r2, [r7, #12]
 80017a2:	7b7b      	ldrb	r3, [r7, #13]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	1c5a      	adds	r2, r3, #1
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	781b      	ldrb	r3, [r3, #0]
 80017b8:	461a      	mov	r2, r3
 80017ba:	7b3b      	ldrb	r3, [r7, #12]
 80017bc:	fa02 f303 	lsl.w	r3, r2, r3
 80017c0:	b25a      	sxtb	r2, r3
 80017c2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	b25b      	sxtb	r3, r3
 80017ca:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80017cc:	7bbb      	ldrb	r3, [r7, #14]
 80017ce:	3b08      	subs	r3, #8
 80017d0:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80017d2:	78fb      	ldrb	r3, [r7, #3]
 80017d4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80017d8:	fa02 f303 	lsl.w	r3, r2, r3
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	43db      	mvns	r3, r3
 80017e0:	b2da      	uxtb	r2, r3
 80017e2:	7bfb      	ldrb	r3, [r7, #15]
 80017e4:	4013      	ands	r3, r2
 80017e6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	7bba      	ldrb	r2, [r7, #14]
 80017ec:	731a      	strb	r2, [r3, #12]
  return val;
 80017ee:	7bfb      	ldrb	r3, [r7, #15]
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3714      	adds	r7, #20
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
 8001804:	460b      	mov	r3, r1
 8001806:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001808:	78fb      	ldrb	r3, [r7, #3]
 800180a:	4619      	mov	r1, r3
 800180c:	6878      	ldr	r0, [r7, #4]
 800180e:	f7ff ffaa 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001812:	4603      	mov	r3, r0
 8001814:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001816:	2301      	movs	r3, #1
 8001818:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800181a:	78fb      	ldrb	r3, [r7, #3]
 800181c:	3b01      	subs	r3, #1
 800181e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001820:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001824:	78fb      	ldrb	r3, [r7, #3]
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800182c:	7bfa      	ldrb	r2, [r7, #15]
 800182e:	7bbb      	ldrb	r3, [r7, #14]
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	b2db      	uxtb	r3, r3
 8001834:	73fb      	strb	r3, [r7, #15]
  return v;
 8001836:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001842:	b490      	push	{r4, r7}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	4604      	mov	r4, r0
 800184a:	4608      	mov	r0, r1
 800184c:	4611      	mov	r1, r2
 800184e:	461a      	mov	r2, r3
 8001850:	4623      	mov	r3, r4
 8001852:	80fb      	strh	r3, [r7, #6]
 8001854:	4603      	mov	r3, r0
 8001856:	717b      	strb	r3, [r7, #5]
 8001858:	460b      	mov	r3, r1
 800185a:	713b      	strb	r3, [r7, #4]
 800185c:	4613      	mov	r3, r2
 800185e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001860:	78fb      	ldrb	r3, [r7, #3]
 8001862:	2b02      	cmp	r3, #2
 8001864:	d014      	beq.n	8001890 <u8g2_add_vector_y+0x4e>
 8001866:	2b02      	cmp	r3, #2
 8001868:	dc19      	bgt.n	800189e <u8g2_add_vector_y+0x5c>
 800186a:	2b00      	cmp	r3, #0
 800186c:	d002      	beq.n	8001874 <u8g2_add_vector_y+0x32>
 800186e:	2b01      	cmp	r3, #1
 8001870:	d007      	beq.n	8001882 <u8g2_add_vector_y+0x40>
 8001872:	e014      	b.n	800189e <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001874:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001878:	b29a      	uxth	r2, r3
 800187a:	88fb      	ldrh	r3, [r7, #6]
 800187c:	4413      	add	r3, r2
 800187e:	80fb      	strh	r3, [r7, #6]
      break;
 8001880:	e014      	b.n	80018ac <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8001882:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001886:	b29a      	uxth	r2, r3
 8001888:	88fb      	ldrh	r3, [r7, #6]
 800188a:	4413      	add	r3, r2
 800188c:	80fb      	strh	r3, [r7, #6]
      break;
 800188e:	e00d      	b.n	80018ac <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8001890:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001894:	b29b      	uxth	r3, r3
 8001896:	88fa      	ldrh	r2, [r7, #6]
 8001898:	1ad3      	subs	r3, r2, r3
 800189a:	80fb      	strh	r3, [r7, #6]
      break;
 800189c:	e006      	b.n	80018ac <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800189e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	88fa      	ldrh	r2, [r7, #6]
 80018a6:	1ad3      	subs	r3, r2, r3
 80018a8:	80fb      	strh	r3, [r7, #6]
      break;      
 80018aa:	bf00      	nop
  }
  return dy;
 80018ac:	88fb      	ldrh	r3, [r7, #6]
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	3708      	adds	r7, #8
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc90      	pop	{r4, r7}
 80018b6:	4770      	bx	lr

080018b8 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80018b8:	b490      	push	{r4, r7}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4604      	mov	r4, r0
 80018c0:	4608      	mov	r0, r1
 80018c2:	4611      	mov	r1, r2
 80018c4:	461a      	mov	r2, r3
 80018c6:	4623      	mov	r3, r4
 80018c8:	80fb      	strh	r3, [r7, #6]
 80018ca:	4603      	mov	r3, r0
 80018cc:	717b      	strb	r3, [r7, #5]
 80018ce:	460b      	mov	r3, r1
 80018d0:	713b      	strb	r3, [r7, #4]
 80018d2:	4613      	mov	r3, r2
 80018d4:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80018d6:	78fb      	ldrb	r3, [r7, #3]
 80018d8:	2b02      	cmp	r3, #2
 80018da:	d014      	beq.n	8001906 <u8g2_add_vector_x+0x4e>
 80018dc:	2b02      	cmp	r3, #2
 80018de:	dc19      	bgt.n	8001914 <u8g2_add_vector_x+0x5c>
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d002      	beq.n	80018ea <u8g2_add_vector_x+0x32>
 80018e4:	2b01      	cmp	r3, #1
 80018e6:	d007      	beq.n	80018f8 <u8g2_add_vector_x+0x40>
 80018e8:	e014      	b.n	8001914 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80018ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80018ee:	b29a      	uxth	r2, r3
 80018f0:	88fb      	ldrh	r3, [r7, #6]
 80018f2:	4413      	add	r3, r2
 80018f4:	80fb      	strh	r3, [r7, #6]
      break;
 80018f6:	e014      	b.n	8001922 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80018f8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80018fc:	b29b      	uxth	r3, r3
 80018fe:	88fa      	ldrh	r2, [r7, #6]
 8001900:	1ad3      	subs	r3, r2, r3
 8001902:	80fb      	strh	r3, [r7, #6]
      break;
 8001904:	e00d      	b.n	8001922 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8001906:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800190a:	b29b      	uxth	r3, r3
 800190c:	88fa      	ldrh	r2, [r7, #6]
 800190e:	1ad3      	subs	r3, r2, r3
 8001910:	80fb      	strh	r3, [r7, #6]
      break;
 8001912:	e006      	b.n	8001922 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001914:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001918:	b29a      	uxth	r2, r3
 800191a:	88fb      	ldrh	r3, [r7, #6]
 800191c:	4413      	add	r3, r2
 800191e:	80fb      	strh	r3, [r7, #6]
      break;      
 8001920:	bf00      	nop
  }
  return dx;
 8001922:	88fb      	ldrh	r3, [r7, #6]
}
 8001924:	4618      	mov	r0, r3
 8001926:	3708      	adds	r7, #8
 8001928:	46bd      	mov	sp, r7
 800192a:	bc90      	pop	{r4, r7}
 800192c:	4770      	bx	lr

0800192e <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800192e:	b580      	push	{r7, lr}
 8001930:	b088      	sub	sp, #32
 8001932:	af02      	add	r7, sp, #8
 8001934:	6078      	str	r0, [r7, #4]
 8001936:	460b      	mov	r3, r1
 8001938:	70fb      	strb	r3, [r7, #3]
 800193a:	4613      	mov	r3, r2
 800193c:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	3360      	adds	r3, #96	; 0x60
 8001942:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001944:	78fb      	ldrb	r3, [r7, #3]
 8001946:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001948:	693b      	ldr	r3, [r7, #16]
 800194a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800194e:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001950:	693b      	ldr	r3, [r7, #16]
 8001952:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001956:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800195e:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001960:	7bfa      	ldrb	r2, [r7, #15]
 8001962:	7d7b      	ldrb	r3, [r7, #21]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800196c:	7dfa      	ldrb	r2, [r7, #23]
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	429a      	cmp	r2, r3
 8001972:	d201      	bcs.n	8001978 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001974:	7dfb      	ldrb	r3, [r7, #23]
 8001976:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001978:	693b      	ldr	r3, [r7, #16]
 800197a:	889b      	ldrh	r3, [r3, #4]
 800197c:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	88db      	ldrh	r3, [r3, #6]
 8001982:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001984:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001988:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800198c:	693b      	ldr	r3, [r7, #16]
 800198e:	7c1b      	ldrb	r3, [r3, #16]
 8001990:	89b8      	ldrh	r0, [r7, #12]
 8001992:	f7ff ff91 	bl	80018b8 <u8g2_add_vector_x>
 8001996:	4603      	mov	r3, r0
 8001998:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800199a:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800199e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80019a2:	693b      	ldr	r3, [r7, #16]
 80019a4:	7c1b      	ldrb	r3, [r3, #16]
 80019a6:	8978      	ldrh	r0, [r7, #10]
 80019a8:	f7ff ff4b 	bl	8001842 <u8g2_add_vector_y>
 80019ac:	4603      	mov	r3, r0
 80019ae:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80019b0:	78bb      	ldrb	r3, [r7, #2]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d010      	beq.n	80019d8 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	7b9a      	ldrb	r2, [r3, #14]
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80019c0:	7dbb      	ldrb	r3, [r7, #22]
 80019c2:	b298      	uxth	r0, r3
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	7c1b      	ldrb	r3, [r3, #16]
 80019c8:	897a      	ldrh	r2, [r7, #10]
 80019ca:	89b9      	ldrh	r1, [r7, #12]
 80019cc:	9300      	str	r3, [sp, #0]
 80019ce:	4603      	mov	r3, r0
 80019d0:	6878      	ldr	r0, [r7, #4]
 80019d2:	f000 fcf0 	bl	80023b6 <u8g2_DrawHVLine>
 80019d6:	e013      	b.n	8001a00 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80019d8:	693b      	ldr	r3, [r7, #16]
 80019da:	7b5b      	ldrb	r3, [r3, #13]
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d10f      	bne.n	8001a00 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80019e0:	693b      	ldr	r3, [r7, #16]
 80019e2:	7bda      	ldrb	r2, [r3, #15]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80019ea:	7dbb      	ldrb	r3, [r7, #22]
 80019ec:	b298      	uxth	r0, r3
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	7c1b      	ldrb	r3, [r3, #16]
 80019f2:	897a      	ldrh	r2, [r7, #10]
 80019f4:	89b9      	ldrh	r1, [r7, #12]
 80019f6:	9300      	str	r3, [sp, #0]
 80019f8:	4603      	mov	r3, r0
 80019fa:	6878      	ldr	r0, [r7, #4]
 80019fc:	f000 fcdb 	bl	80023b6 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001a00:	7dfa      	ldrb	r2, [r7, #23]
 8001a02:	7bfb      	ldrb	r3, [r7, #15]
 8001a04:	429a      	cmp	r2, r3
 8001a06:	d309      	bcc.n	8001a1c <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001a08:	7dfa      	ldrb	r2, [r7, #23]
 8001a0a:	7bfb      	ldrb	r3, [r7, #15]
 8001a0c:	1ad3      	subs	r3, r2, r3
 8001a0e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001a10:	2300      	movs	r3, #0
 8001a12:	757b      	strb	r3, [r7, #21]
    ly++;
 8001a14:	7d3b      	ldrb	r3, [r7, #20]
 8001a16:	3301      	adds	r3, #1
 8001a18:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001a1a:	e79d      	b.n	8001958 <u8g2_font_decode_len+0x2a>
      break;
 8001a1c:	bf00      	nop
  }
  lx += cnt;
 8001a1e:	7d7a      	ldrb	r2, [r7, #21]
 8001a20:	7dfb      	ldrb	r3, [r7, #23]
 8001a22:	4413      	add	r3, r2
 8001a24:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001a26:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001a2a:	693b      	ldr	r3, [r7, #16]
 8001a2c:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 8001a2e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001a32:	693b      	ldr	r3, [r7, #16]
 8001a34:	725a      	strb	r2, [r3, #9]
}
 8001a36:	bf00      	nop
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001a3e:	b580      	push	{r7, lr}
 8001a40:	b084      	sub	sp, #16
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3360      	adds	r3, #96	; 0x60
 8001a4c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	683a      	ldr	r2, [r7, #0]
 8001a52:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	2200      	movs	r2, #0
 8001a58:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001a60:	4619      	mov	r1, r3
 8001a62:	68f8      	ldr	r0, [r7, #12]
 8001a64:	f7ff fe7f 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	b25a      	sxtb	r2, r3
 8001a6c:	68fb      	ldr	r3, [r7, #12]
 8001a6e:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001a76:	4619      	mov	r1, r3
 8001a78:	68f8      	ldr	r0, [r7, #12]
 8001a7a:	f7ff fe74 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	b25a      	sxtb	r2, r3
 8001a82:	68fb      	ldr	r3, [r7, #12]
 8001a84:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001a90:	68fb      	ldr	r3, [r7, #12]
 8001a92:	7b9b      	ldrb	r3, [r3, #14]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	bf0c      	ite	eq
 8001a98:	2301      	moveq	r3, #1
 8001a9a:	2300      	movne	r3, #0
 8001a9c:	b2db      	uxtb	r3, r3
 8001a9e:	461a      	mov	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	73da      	strb	r2, [r3, #15]
}
 8001aa4:	bf00      	nop
 8001aa6:	3710      	adds	r7, #16
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	bd80      	pop	{r7, pc}

08001aac <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	; 0x28
 8001ab0:	af02      	add	r7, sp, #8
 8001ab2:	6078      	str	r0, [r7, #4]
 8001ab4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	3360      	adds	r3, #96	; 0x60
 8001aba:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8001abc:	6839      	ldr	r1, [r7, #0]
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f7ff ffbd 	bl	8001a3e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001aca:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	6978      	ldr	r0, [r7, #20]
 8001ad6:	f7ff fe91 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001ada:	4603      	mov	r3, r0
 8001adc:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	6978      	ldr	r0, [r7, #20]
 8001ae8:	f7ff fe88 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001aec:	4603      	mov	r3, r0
 8001aee:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001af6:	4619      	mov	r1, r3
 8001af8:	6978      	ldr	r0, [r7, #20]
 8001afa:	f7ff fe7f 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001afe:	4603      	mov	r3, r0
 8001b00:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	f340 80d7 	ble.w	8001cbc <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001b0e:	697b      	ldr	r3, [r7, #20]
 8001b10:	8898      	ldrh	r0, [r3, #4]
 8001b12:	7cfa      	ldrb	r2, [r7, #19]
 8001b14:	7c7b      	ldrb	r3, [r7, #17]
 8001b16:	4413      	add	r3, r2
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	425b      	negs	r3, r3
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	b25a      	sxtb	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	7c1b      	ldrb	r3, [r3, #16]
 8001b24:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001b28:	f7ff fec6 	bl	80018b8 <u8g2_add_vector_x>
 8001b2c:	4603      	mov	r3, r0
 8001b2e:	461a      	mov	r2, r3
 8001b30:	697b      	ldr	r3, [r7, #20]
 8001b32:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	88d8      	ldrh	r0, [r3, #6]
 8001b38:	7cfa      	ldrb	r2, [r7, #19]
 8001b3a:	7c7b      	ldrb	r3, [r7, #17]
 8001b3c:	4413      	add	r3, r2
 8001b3e:	b2db      	uxtb	r3, r3
 8001b40:	425b      	negs	r3, r3
 8001b42:	b2db      	uxtb	r3, r3
 8001b44:	b25a      	sxtb	r2, r3
 8001b46:	697b      	ldr	r3, [r7, #20]
 8001b48:	7c1b      	ldrb	r3, [r3, #16]
 8001b4a:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001b4e:	f7ff fe78 	bl	8001842 <u8g2_add_vector_y>
 8001b52:	4603      	mov	r3, r0
 8001b54:	461a      	mov	r2, r3
 8001b56:	697b      	ldr	r3, [r7, #20]
 8001b58:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	889b      	ldrh	r3, [r3, #4]
 8001b5e:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	88db      	ldrh	r3, [r3, #6]
 8001b64:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001b66:	8bfb      	ldrh	r3, [r7, #30]
 8001b68:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001b6a:	8b7b      	ldrh	r3, [r7, #26]
 8001b6c:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	7c1b      	ldrb	r3, [r3, #16]
 8001b72:	2b03      	cmp	r3, #3
 8001b74:	d85a      	bhi.n	8001c2c <u8g2_font_decode_glyph+0x180>
 8001b76:	a201      	add	r2, pc, #4	; (adr r2, 8001b7c <u8g2_font_decode_glyph+0xd0>)
 8001b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b7c:	08001b8d 	.word	0x08001b8d
 8001b80:	08001ba9 	.word	0x08001ba9
 8001b84:	08001bd1 	.word	0x08001bd1
 8001b88:	08001c05 	.word	0x08001c05
      {
	case 0:
	    x1 += decode->glyph_width;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b92:	b29a      	uxth	r2, r3
 8001b94:	8bbb      	ldrh	r3, [r7, #28]
 8001b96:	4413      	add	r3, r2
 8001b98:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001b9a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b9e:	b29a      	uxth	r2, r3
 8001ba0:	8b3b      	ldrh	r3, [r7, #24]
 8001ba2:	4413      	add	r3, r2
 8001ba4:	833b      	strh	r3, [r7, #24]
	    break;
 8001ba6:	e041      	b.n	8001c2c <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001ba8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bac:	b29b      	uxth	r3, r3
 8001bae:	8bfa      	ldrh	r2, [r7, #30]
 8001bb0:	1ad3      	subs	r3, r2, r3
 8001bb2:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001bb4:	8bfb      	ldrh	r3, [r7, #30]
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001bba:	8bbb      	ldrh	r3, [r7, #28]
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001bc0:	697b      	ldr	r3, [r7, #20]
 8001bc2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001bc6:	b29a      	uxth	r2, r3
 8001bc8:	8b3b      	ldrh	r3, [r7, #24]
 8001bca:	4413      	add	r3, r2
 8001bcc:	833b      	strh	r3, [r7, #24]
	    break;
 8001bce:	e02d      	b.n	8001c2c <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001bd6:	b29b      	uxth	r3, r3
 8001bd8:	8bfa      	ldrh	r2, [r7, #30]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001bde:	8bfb      	ldrh	r3, [r7, #30]
 8001be0:	3301      	adds	r3, #1
 8001be2:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001be4:	8bbb      	ldrh	r3, [r7, #28]
 8001be6:	3301      	adds	r3, #1
 8001be8:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001bea:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001bee:	b29b      	uxth	r3, r3
 8001bf0:	8b7a      	ldrh	r2, [r7, #26]
 8001bf2:	1ad3      	subs	r3, r2, r3
 8001bf4:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001bf6:	8b7b      	ldrh	r3, [r7, #26]
 8001bf8:	3301      	adds	r3, #1
 8001bfa:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001bfc:	8b3b      	ldrh	r3, [r7, #24]
 8001bfe:	3301      	adds	r3, #1
 8001c00:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001c02:	e013      	b.n	8001c2c <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001c04:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001c08:	b29a      	uxth	r2, r3
 8001c0a:	8bbb      	ldrh	r3, [r7, #28]
 8001c0c:	4413      	add	r3, r2
 8001c0e:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001c10:	697b      	ldr	r3, [r7, #20]
 8001c12:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001c16:	b29b      	uxth	r3, r3
 8001c18:	8b7a      	ldrh	r2, [r7, #26]
 8001c1a:	1ad3      	subs	r3, r2, r3
 8001c1c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001c1e:	8b7b      	ldrh	r3, [r7, #26]
 8001c20:	3301      	adds	r3, #1
 8001c22:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001c24:	8b3b      	ldrh	r3, [r7, #24]
 8001c26:	3301      	adds	r3, #1
 8001c28:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001c2a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001c2c:	8bb8      	ldrh	r0, [r7, #28]
 8001c2e:	8b7a      	ldrh	r2, [r7, #26]
 8001c30:	8bf9      	ldrh	r1, [r7, #30]
 8001c32:	8b3b      	ldrh	r3, [r7, #24]
 8001c34:	9300      	str	r3, [sp, #0]
 8001c36:	4603      	mov	r3, r0
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 fcc3 	bl	80025c4 <u8g2_IsIntersection>
 8001c3e:	4603      	mov	r3, r0
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d102      	bne.n	8001c4a <u8g2_font_decode_glyph+0x19e>
	return d;
 8001c44:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001c48:	e03a      	b.n	8001cc0 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2200      	movs	r2, #0
 8001c4e:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2200      	movs	r2, #0
 8001c54:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	6978      	ldr	r0, [r7, #20]
 8001c60:	f7ff fd81 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001c64:	4603      	mov	r3, r0
 8001c66:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001c6e:	4619      	mov	r1, r3
 8001c70:	6978      	ldr	r0, [r7, #20]
 8001c72:	f7ff fd78 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001c76:	4603      	mov	r3, r0
 8001c78:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001c7a:	7bfb      	ldrb	r3, [r7, #15]
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	6878      	ldr	r0, [r7, #4]
 8001c82:	f7ff fe54 	bl	800192e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001c86:	7bbb      	ldrb	r3, [r7, #14]
 8001c88:	2201      	movs	r2, #1
 8001c8a:	4619      	mov	r1, r3
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7ff fe4e 	bl	800192e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001c92:	2101      	movs	r1, #1
 8001c94:	6978      	ldr	r0, [r7, #20]
 8001c96:	f7ff fd66 	bl	8001766 <u8g2_font_decode_get_unsigned_bits>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d1ec      	bne.n	8001c7a <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001ca6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001caa:	429a      	cmp	r2, r3
 8001cac:	dd00      	ble.n	8001cb0 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001cae:	e7d2      	b.n	8001c56 <u8g2_font_decode_glyph+0x1aa>
	break;
 8001cb0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001cb2:	697b      	ldr	r3, [r7, #20]
 8001cb4:	7b9a      	ldrb	r2, [r3, #14]
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8001cbc:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001cc0:	4618      	mov	r0, r3
 8001cc2:	3720      	adds	r7, #32
 8001cc4:	46bd      	mov	sp, r7
 8001cc6:	bd80      	pop	{r7, pc}

08001cc8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b086      	sub	sp, #24
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	460b      	mov	r3, r1
 8001cd2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cd8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001cda:	697b      	ldr	r3, [r7, #20]
 8001cdc:	3317      	adds	r3, #23
 8001cde:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001ce0:	887b      	ldrh	r3, [r7, #2]
 8001ce2:	2bff      	cmp	r3, #255	; 0xff
 8001ce4:	d82a      	bhi.n	8001d3c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001ce6:	887b      	ldrh	r3, [r7, #2]
 8001ce8:	2b60      	cmp	r3, #96	; 0x60
 8001cea:	d907      	bls.n	8001cfc <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001cf2:	461a      	mov	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	4413      	add	r3, r2
 8001cf8:	617b      	str	r3, [r7, #20]
 8001cfa:	e009      	b.n	8001d10 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001cfc:	887b      	ldrh	r3, [r7, #2]
 8001cfe:	2b40      	cmp	r3, #64	; 0x40
 8001d00:	d906      	bls.n	8001d10 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001d08:	461a      	mov	r2, r3
 8001d0a:	697b      	ldr	r3, [r7, #20]
 8001d0c:	4413      	add	r3, r2
 8001d0e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001d10:	697b      	ldr	r3, [r7, #20]
 8001d12:	3301      	adds	r3, #1
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d04e      	beq.n	8001db8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	781b      	ldrb	r3, [r3, #0]
 8001d1e:	b29b      	uxth	r3, r3
 8001d20:	887a      	ldrh	r2, [r7, #2]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d102      	bne.n	8001d2c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	3302      	adds	r3, #2
 8001d2a:	e049      	b.n	8001dc0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	781b      	ldrb	r3, [r3, #0]
 8001d32:	461a      	mov	r2, r3
 8001d34:	697b      	ldr	r3, [r7, #20]
 8001d36:	4413      	add	r3, r2
 8001d38:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001d3a:	e7e9      	b.n	8001d10 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001d42:	461a      	mov	r2, r3
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	4413      	add	r3, r2
 8001d48:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001d4a:	697b      	ldr	r3, [r7, #20]
 8001d4c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001d4e:	2100      	movs	r1, #0
 8001d50:	6938      	ldr	r0, [r7, #16]
 8001d52:	f7ff fc3f 	bl	80015d4 <u8g2_font_get_word>
 8001d56:	4603      	mov	r3, r0
 8001d58:	461a      	mov	r2, r3
 8001d5a:	697b      	ldr	r3, [r7, #20]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001d60:	2102      	movs	r1, #2
 8001d62:	6938      	ldr	r0, [r7, #16]
 8001d64:	f7ff fc36 	bl	80015d4 <u8g2_font_get_word>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001d6c:	693b      	ldr	r3, [r7, #16]
 8001d6e:	3304      	adds	r3, #4
 8001d70:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001d72:	89fa      	ldrh	r2, [r7, #14]
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	429a      	cmp	r2, r3
 8001d78:	d3e9      	bcc.n	8001d4e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001d7a:	697b      	ldr	r3, [r7, #20]
 8001d7c:	781b      	ldrb	r3, [r3, #0]
 8001d7e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001d80:	89fb      	ldrh	r3, [r7, #14]
 8001d82:	021b      	lsls	r3, r3, #8
 8001d84:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001d86:	697b      	ldr	r3, [r7, #20]
 8001d88:	3301      	adds	r3, #1
 8001d8a:	781b      	ldrb	r3, [r3, #0]
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	89fb      	ldrh	r3, [r7, #14]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001d94:	89fb      	ldrh	r3, [r7, #14]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d010      	beq.n	8001dbc <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001d9a:	89fa      	ldrh	r2, [r7, #14]
 8001d9c:	887b      	ldrh	r3, [r7, #2]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d102      	bne.n	8001da8 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	3303      	adds	r3, #3
 8001da6:	e00b      	b.n	8001dc0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001da8:	697b      	ldr	r3, [r7, #20]
 8001daa:	3302      	adds	r3, #2
 8001dac:	781b      	ldrb	r3, [r3, #0]
 8001dae:	461a      	mov	r2, r3
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	4413      	add	r3, r2
 8001db4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001db6:	e7e0      	b.n	8001d7a <u8g2_font_get_glyph_data+0xb2>
	break;
 8001db8:	bf00      	nop
 8001dba:	e000      	b.n	8001dbe <u8g2_font_get_glyph_data+0xf6>
	break;
 8001dbc:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001dbe:	2300      	movs	r3, #0
}
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	3718      	adds	r7, #24
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	bd80      	pop	{r7, pc}

08001dc8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b086      	sub	sp, #24
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	60f8      	str	r0, [r7, #12]
 8001dd0:	4608      	mov	r0, r1
 8001dd2:	4611      	mov	r1, r2
 8001dd4:	461a      	mov	r2, r3
 8001dd6:	4603      	mov	r3, r0
 8001dd8:	817b      	strh	r3, [r7, #10]
 8001dda:	460b      	mov	r3, r1
 8001ddc:	813b      	strh	r3, [r7, #8]
 8001dde:	4613      	mov	r3, r2
 8001de0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001de2:	2300      	movs	r3, #0
 8001de4:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	897a      	ldrh	r2, [r7, #10]
 8001dea:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	893a      	ldrh	r2, [r7, #8]
 8001df2:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001df6:	88fb      	ldrh	r3, [r7, #6]
 8001df8:	4619      	mov	r1, r3
 8001dfa:	68f8      	ldr	r0, [r7, #12]
 8001dfc:	f7ff ff64 	bl	8001cc8 <u8g2_font_get_glyph_data>
 8001e00:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	2b00      	cmp	r3, #0
 8001e06:	d005      	beq.n	8001e14 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001e08:	6939      	ldr	r1, [r7, #16]
 8001e0a:	68f8      	ldr	r0, [r7, #12]
 8001e0c:	f7ff fe4e 	bl	8001aac <u8g2_font_decode_glyph>
 8001e10:	4603      	mov	r3, r0
 8001e12:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001e14:	8afb      	ldrh	r3, [r7, #22]
}
 8001e16:	4618      	mov	r0, r3
 8001e18:	3718      	adds	r7, #24
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b084      	sub	sp, #16
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
 8001e26:	460b      	mov	r3, r1
 8001e28:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001e2a:	887b      	ldrh	r3, [r7, #2]
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	6878      	ldr	r0, [r7, #4]
 8001e30:	f7ff ff4a 	bl	8001cc8 <u8g2_font_get_glyph_data>
 8001e34:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d101      	bne.n	8001e40 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	e027      	b.n	8001e90 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001e40:	68f9      	ldr	r1, [r7, #12]
 8001e42:	6878      	ldr	r0, [r7, #4]
 8001e44:	f7ff fdfb 	bl	8001a3e <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f7ff fcd0 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	461a      	mov	r2, r3
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001e72:	4619      	mov	r1, r3
 8001e74:	4610      	mov	r0, r2
 8001e76:	f7ff fcc1 	bl	80017fc <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001e86:	4619      	mov	r1, r3
 8001e88:	4610      	mov	r0, r2
 8001e8a:	f7ff fcb7 	bl	80017fc <u8g2_font_decode_get_signed_bits>
 8001e8e:	4603      	mov	r3, r0
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3710      	adds	r7, #16
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
 8001e9e:	6078      	str	r0, [r7, #4]
 8001ea0:	460b      	mov	r3, r1
 8001ea2:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	78fa      	ldrb	r2, [r7, #3]
 8001ea8:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	60f8      	str	r0, [r7, #12]
 8001ec0:	4608      	mov	r0, r1
 8001ec2:	4611      	mov	r1, r2
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	4603      	mov	r3, r0
 8001ec8:	817b      	strh	r3, [r7, #10]
 8001eca:	460b      	mov	r3, r1
 8001ecc:	813b      	strh	r3, [r7, #8]
 8001ece:	4613      	mov	r3, r2
 8001ed0:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001ed8:	2b03      	cmp	r3, #3
 8001eda:	d833      	bhi.n	8001f44 <u8g2_DrawGlyph+0x8c>
 8001edc:	a201      	add	r2, pc, #4	; (adr r2, 8001ee4 <u8g2_DrawGlyph+0x2c>)
 8001ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ee2:	bf00      	nop
 8001ee4:	08001ef5 	.word	0x08001ef5
 8001ee8:	08001f09 	.word	0x08001f09
 8001eec:	08001f1d 	.word	0x08001f1d
 8001ef0:	08001f31 	.word	0x08001f31
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef8:	68f8      	ldr	r0, [r7, #12]
 8001efa:	4798      	blx	r3
 8001efc:	4603      	mov	r3, r0
 8001efe:	461a      	mov	r2, r3
 8001f00:	893b      	ldrh	r3, [r7, #8]
 8001f02:	4413      	add	r3, r2
 8001f04:	813b      	strh	r3, [r7, #8]
      break;
 8001f06:	e01d      	b.n	8001f44 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001f08:	68fb      	ldr	r3, [r7, #12]
 8001f0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f0c:	68f8      	ldr	r0, [r7, #12]
 8001f0e:	4798      	blx	r3
 8001f10:	4603      	mov	r3, r0
 8001f12:	461a      	mov	r2, r3
 8001f14:	897b      	ldrh	r3, [r7, #10]
 8001f16:	1a9b      	subs	r3, r3, r2
 8001f18:	817b      	strh	r3, [r7, #10]
      break;
 8001f1a:	e013      	b.n	8001f44 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f20:	68f8      	ldr	r0, [r7, #12]
 8001f22:	4798      	blx	r3
 8001f24:	4603      	mov	r3, r0
 8001f26:	461a      	mov	r2, r3
 8001f28:	893b      	ldrh	r3, [r7, #8]
 8001f2a:	1a9b      	subs	r3, r3, r2
 8001f2c:	813b      	strh	r3, [r7, #8]
      break;
 8001f2e:	e009      	b.n	8001f44 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f34:	68f8      	ldr	r0, [r7, #12]
 8001f36:	4798      	blx	r3
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461a      	mov	r2, r3
 8001f3c:	897b      	ldrh	r3, [r7, #10]
 8001f3e:	4413      	add	r3, r2
 8001f40:	817b      	strh	r3, [r7, #10]
      break;
 8001f42:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001f44:	88fb      	ldrh	r3, [r7, #6]
 8001f46:	893a      	ldrh	r2, [r7, #8]
 8001f48:	8979      	ldrh	r1, [r7, #10]
 8001f4a:	68f8      	ldr	r0, [r7, #12]
 8001f4c:	f7ff ff3c 	bl	8001dc8 <u8g2_font_draw_glyph>
 8001f50:	4603      	mov	r3, r0
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3710      	adds	r7, #16
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop

08001f5c <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	60f8      	str	r0, [r7, #12]
 8001f64:	607b      	str	r3, [r7, #4]
 8001f66:	460b      	mov	r3, r1
 8001f68:	817b      	strh	r3, [r7, #10]
 8001f6a:	4613      	mov	r3, r2
 8001f6c:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001f6e:	68f8      	ldr	r0, [r7, #12]
 8001f70:	f000 fd59 	bl	8002a26 <u8x8_utf8_init>
  sum = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	685b      	ldr	r3, [r3, #4]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	7812      	ldrb	r2, [r2, #0]
 8001f80:	4611      	mov	r1, r2
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	4798      	blx	r3
 8001f86:	4603      	mov	r3, r0
 8001f88:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001f8a:	8abb      	ldrh	r3, [r7, #20]
 8001f8c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f90:	4293      	cmp	r3, r2
 8001f92:	d038      	beq.n	8002006 <u8g2_draw_string+0xaa>
      break;
    str++;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	3301      	adds	r3, #1
 8001f98:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001f9a:	8abb      	ldrh	r3, [r7, #20]
 8001f9c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d0e9      	beq.n	8001f78 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001fa4:	8abb      	ldrh	r3, [r7, #20]
 8001fa6:	893a      	ldrh	r2, [r7, #8]
 8001fa8:	8979      	ldrh	r1, [r7, #10]
 8001faa:	68f8      	ldr	r0, [r7, #12]
 8001fac:	f7ff ff84 	bl	8001eb8 <u8g2_DrawGlyph>
 8001fb0:	4603      	mov	r3, r0
 8001fb2:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001fba:	2b03      	cmp	r3, #3
 8001fbc:	d81e      	bhi.n	8001ffc <u8g2_draw_string+0xa0>
 8001fbe:	a201      	add	r2, pc, #4	; (adr r2, 8001fc4 <u8g2_draw_string+0x68>)
 8001fc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fc4:	08001fd5 	.word	0x08001fd5
 8001fc8:	08001fdf 	.word	0x08001fdf
 8001fcc:	08001fe9 	.word	0x08001fe9
 8001fd0:	08001ff3 	.word	0x08001ff3
      {
	case 0:
	  x += delta;
 8001fd4:	897a      	ldrh	r2, [r7, #10]
 8001fd6:	8a7b      	ldrh	r3, [r7, #18]
 8001fd8:	4413      	add	r3, r2
 8001fda:	817b      	strh	r3, [r7, #10]
	  break;
 8001fdc:	e00e      	b.n	8001ffc <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001fde:	893a      	ldrh	r2, [r7, #8]
 8001fe0:	8a7b      	ldrh	r3, [r7, #18]
 8001fe2:	4413      	add	r3, r2
 8001fe4:	813b      	strh	r3, [r7, #8]
	  break;
 8001fe6:	e009      	b.n	8001ffc <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001fe8:	897a      	ldrh	r2, [r7, #10]
 8001fea:	8a7b      	ldrh	r3, [r7, #18]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	817b      	strh	r3, [r7, #10]
	  break;
 8001ff0:	e004      	b.n	8001ffc <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001ff2:	893a      	ldrh	r2, [r7, #8]
 8001ff4:	8a7b      	ldrh	r3, [r7, #18]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	813b      	strh	r3, [r7, #8]
	  break;
 8001ffa:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001ffc:	8afa      	ldrh	r2, [r7, #22]
 8001ffe:	8a7b      	ldrh	r3, [r7, #18]
 8002000:	4413      	add	r3, r2
 8002002:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002004:	e7b8      	b.n	8001f78 <u8g2_draw_string+0x1c>
      break;
 8002006:	bf00      	nop
    }
  }
  return sum;
 8002008:	8afb      	ldrh	r3, [r7, #22]
}
 800200a:	4618      	mov	r0, r3
 800200c:	3718      	adds	r7, #24
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop

08002014 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b084      	sub	sp, #16
 8002018:	af00      	add	r7, sp, #0
 800201a:	60f8      	str	r0, [r7, #12]
 800201c:	607b      	str	r3, [r7, #4]
 800201e:	460b      	mov	r3, r1
 8002020:	817b      	strh	r3, [r7, #10]
 8002022:	4613      	mov	r3, r2
 8002024:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	4a06      	ldr	r2, [pc, #24]	; (8002044 <u8g2_DrawStr+0x30>)
 800202a:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 800202c:	893a      	ldrh	r2, [r7, #8]
 800202e:	8979      	ldrh	r1, [r7, #10]
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f7ff ff92 	bl	8001f5c <u8g2_draw_string>
 8002038:	4603      	mov	r3, r0
}
 800203a:	4618      	mov	r0, r3
 800203c:	3710      	adds	r7, #16
 800203e:	46bd      	mov	sp, r7
 8002040:	bd80      	pop	{r7, pc}
 8002042:	bf00      	nop
 8002044:	08002a43 	.word	0x08002a43

08002048 <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	60f8      	str	r0, [r7, #12]
 8002050:	607b      	str	r3, [r7, #4]
 8002052:	460b      	mov	r3, r1
 8002054:	817b      	strh	r3, [r7, #10]
 8002056:	4613      	mov	r3, r2
 8002058:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	4a06      	ldr	r2, [pc, #24]	; (8002078 <u8g2_DrawUTF8+0x30>)
 800205e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8002060:	893a      	ldrh	r2, [r7, #8]
 8002062:	8979      	ldrh	r1, [r7, #10]
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68f8      	ldr	r0, [r7, #12]
 8002068:	f7ff ff78 	bl	8001f5c <u8g2_draw_string>
 800206c:	4603      	mov	r3, r0
}
 800206e:	4618      	mov	r0, r3
 8002070:	3710      	adds	r7, #16
 8002072:	46bd      	mov	sp, r7
 8002074:	bd80      	pop	{r7, pc}
 8002076:	bf00      	nop
 8002078:	08002a71 	.word	0x08002a71

0800207c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002088:	2b00      	cmp	r3, #0
 800208a:	d05d      	beq.n	8002148 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d04d      	beq.n	800214a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80020b4:	2b01      	cmp	r3, #1
 80020b6:	d11c      	bne.n	80020f2 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 80020c4:	429a      	cmp	r2, r3
 80020c6:	da05      	bge.n	80020d4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 80020e0:	429a      	cmp	r2, r3
 80020e2:	dd32      	ble.n	800214a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80020f0:	e02b      	b.n	800214a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 80020f8:	461a      	mov	r2, r3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002100:	4619      	mov	r1, r3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002108:	440b      	add	r3, r1
 800210a:	429a      	cmp	r2, r3
 800210c:	da0d      	bge.n	800212a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002114:	b2da      	uxtb	r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800211c:	b2db      	uxtb	r3, r3
 800211e:	4413      	add	r3, r2
 8002120:	b2db      	uxtb	r3, r3
 8002122:	b25a      	sxtb	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002136:	429a      	cmp	r2, r3
 8002138:	dd07      	ble.n	800214a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002146:	e000      	b.n	800214a <u8g2_UpdateRefHeight+0xce>
    return;
 8002148:	bf00      	nop
  }  
}
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8002154:	b480      	push	{r7}
 8002156:	b083      	sub	sp, #12
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  return 0;
 800215c:	2300      	movs	r3, #0
}
 800215e:	4618      	mov	r0, r3
 8002160:	370c      	adds	r7, #12
 8002162:	46bd      	mov	sp, r7
 8002164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002168:	4770      	bx	lr
	...

0800216c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 800216c:	b480      	push	{r7}
 800216e:	b083      	sub	sp, #12
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	4a04      	ldr	r2, [pc, #16]	; (8002188 <u8g2_SetFontPosBaseline+0x1c>)
 8002178:	65da      	str	r2, [r3, #92]	; 0x5c
}
 800217a:	bf00      	nop
 800217c:	370c      	adds	r7, #12
 800217e:	46bd      	mov	sp, r7
 8002180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002184:	4770      	bx	lr
 8002186:	bf00      	nop
 8002188:	08002155 	.word	0x08002155

0800218c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b082      	sub	sp, #8
 8002190:	af00      	add	r7, sp, #0
 8002192:	6078      	str	r0, [r7, #4]
 8002194:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	429a      	cmp	r2, r3
 800219e:	d00b      	beq.n	80021b8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	683a      	ldr	r2, [r7, #0]
 80021a4:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	3374      	adds	r3, #116	; 0x74
 80021aa:	6839      	ldr	r1, [r7, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f7ff fa31 	bl	8001614 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 80021b2:	6878      	ldr	r0, [r7, #4]
 80021b4:	f7ff ff62 	bl	800207c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 80021b8:	bf00      	nop
 80021ba:	3708      	adds	r7, #8
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
  int8_t initial_x_offset = -64;
 80021ca:	23c0      	movs	r3, #192	; 0xc0
 80021cc:	72fb      	strb	r3, [r7, #11]
#endif 
  
  u8g2->font_decode.glyph_width = 0;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2200      	movs	r2, #0
 80021d2:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80021d6:	6878      	ldr	r0, [r7, #4]
 80021d8:	f000 fc25 	bl	8002a26 <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 80021dc:	2300      	movs	r3, #0
 80021de:	81fb      	strh	r3, [r7, #14]
  dx = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	81bb      	strh	r3, [r7, #12]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	685b      	ldr	r3, [r3, #4]
 80021e8:	683a      	ldr	r2, [r7, #0]
 80021ea:	7812      	ldrb	r2, [r2, #0]
 80021ec:	4611      	mov	r1, r2
 80021ee:	6878      	ldr	r0, [r7, #4]
 80021f0:	4798      	blx	r3
 80021f2:	4603      	mov	r3, r0
 80021f4:	813b      	strh	r3, [r7, #8]
    if ( e == 0x0ffff )
 80021f6:	893b      	ldrh	r3, [r7, #8]
 80021f8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d01c      	beq.n	800223a <u8g2_string_width+0x7a>
      break;
    str++;
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	3301      	adds	r3, #1
 8002204:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 8002206:	893b      	ldrh	r3, [r7, #8]
 8002208:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800220c:	4293      	cmp	r3, r2
 800220e:	d0e9      	beq.n	80021e4 <u8g2_string_width+0x24>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8002210:	893b      	ldrh	r3, [r7, #8]
 8002212:	4619      	mov	r1, r3
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7ff fe02 	bl	8001e1e <u8g2_GetGlyphWidth>
 800221a:	4603      	mov	r3, r0
 800221c:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
      if ( initial_x_offset == -64 )
 800221e:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002222:	f113 0f40 	cmn.w	r3, #64	; 0x40
 8002226:	d103      	bne.n	8002230 <u8g2_string_width+0x70>
        initial_x_offset = u8g2->glyph_x_offset;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 800222e:	72fb      	strb	r3, [r7, #11]
#endif 
      //printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
      w += dx;
 8002230:	89fa      	ldrh	r2, [r7, #14]
 8002232:	89bb      	ldrh	r3, [r7, #12]
 8002234:	4413      	add	r3, r2
 8002236:	81fb      	strh	r3, [r7, #14]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002238:	e7d4      	b.n	80021e4 <u8g2_string_width+0x24>
      break;
 800223a:	bf00      	nop
    }
  }
  //printf("\n");
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8002242:	2b00      	cmp	r3, #0
 8002244:	d01b      	beq.n	800227e <u8g2_string_width+0xbe>
  {
    //printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
    w -= dx;
 8002246:	89fa      	ldrh	r2, [r7, #14]
 8002248:	89bb      	ldrh	r3, [r7, #12]
 800224a:	1ad3      	subs	r3, r2, r3
 800224c:	81fb      	strh	r3, [r7, #14]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 8002254:	b29a      	uxth	r2, r3
 8002256:	89fb      	ldrh	r3, [r7, #14]
 8002258:	4413      	add	r3, r2
 800225a:	81fb      	strh	r3, [r7, #14]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 8002262:	b29a      	uxth	r2, r3
 8002264:	89fb      	ldrh	r3, [r7, #14]
 8002266:	4413      	add	r3, r2
 8002268:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
    /* https://github.com/olikraus/u8g2/issues/1561 */
    if ( initial_x_offset > 0 )
 800226a:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800226e:	2b00      	cmp	r3, #0
 8002270:	dd05      	ble.n	800227e <u8g2_string_width+0xbe>
      w+=initial_x_offset;
 8002272:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002276:	b29a      	uxth	r2, r3
 8002278:	89fb      	ldrh	r3, [r7, #14]
 800227a:	4413      	add	r3, r2
 800227c:	81fb      	strh	r3, [r7, #14]
#endif 
  }
  // printf("w=%d \n", w);
  
  return w;  
 800227e:	89fb      	ldrh	r3, [r7, #14]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3710      	adds	r7, #16
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}

08002288 <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b082      	sub	sp, #8
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
 8002290:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	4a05      	ldr	r2, [pc, #20]	; (80022ac <u8g2_GetStrWidth+0x24>)
 8002296:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 8002298:	6839      	ldr	r1, [r7, #0]
 800229a:	6878      	ldr	r0, [r7, #4]
 800229c:	f7ff ff90 	bl	80021c0 <u8g2_string_width>
 80022a0:	4603      	mov	r3, r0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	3708      	adds	r7, #8
 80022a6:	46bd      	mov	sp, r7
 80022a8:	bd80      	pop	{r7, pc}
 80022aa:	bf00      	nop
 80022ac:	08002a43 	.word	0x08002a43

080022b0 <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 80022b0:	b580      	push	{r7, lr}
 80022b2:	b082      	sub	sp, #8
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a05      	ldr	r2, [pc, #20]	; (80022d4 <u8g2_GetUTF8Width+0x24>)
 80022be:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, str);
 80022c0:	6839      	ldr	r1, [r7, #0]
 80022c2:	6878      	ldr	r0, [r7, #4]
 80022c4:	f7ff ff7c 	bl	80021c0 <u8g2_string_width>
 80022c8:	4603      	mov	r3, r0
}
 80022ca:	4618      	mov	r0, r3
 80022cc:	3708      	adds	r7, #8
 80022ce:	46bd      	mov	sp, r7
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	08002a71 	.word	0x08002a71

080022d8 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 80022d8:	b480      	push	{r7}
 80022da:	b087      	sub	sp, #28
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	4611      	mov	r1, r2
 80022e4:	461a      	mov	r2, r3
 80022e6:	460b      	mov	r3, r1
 80022e8:	80fb      	strh	r3, [r7, #6]
 80022ea:	4613      	mov	r3, r2
 80022ec:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	881b      	ldrh	r3, [r3, #0]
 80022f2:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 80022f4:	8afb      	ldrh	r3, [r7, #22]
 80022f6:	82bb      	strh	r3, [r7, #20]
  b += *len;
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	881a      	ldrh	r2, [r3, #0]
 80022fc:	8abb      	ldrh	r3, [r7, #20]
 80022fe:	4413      	add	r3, r2
 8002300:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002302:	8afa      	ldrh	r2, [r7, #22]
 8002304:	8abb      	ldrh	r3, [r7, #20]
 8002306:	429a      	cmp	r2, r3
 8002308:	d90b      	bls.n	8002322 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800230a:	8afa      	ldrh	r2, [r7, #22]
 800230c:	88bb      	ldrh	r3, [r7, #4]
 800230e:	429a      	cmp	r2, r3
 8002310:	d205      	bcs.n	800231e <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002312:	88bb      	ldrh	r3, [r7, #4]
 8002314:	82bb      	strh	r3, [r7, #20]
      b--;
 8002316:	8abb      	ldrh	r3, [r7, #20]
 8002318:	3b01      	subs	r3, #1
 800231a:	82bb      	strh	r3, [r7, #20]
 800231c:	e001      	b.n	8002322 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 800231e:	88fb      	ldrh	r3, [r7, #6]
 8002320:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002322:	8afa      	ldrh	r2, [r7, #22]
 8002324:	88bb      	ldrh	r3, [r7, #4]
 8002326:	429a      	cmp	r2, r3
 8002328:	d301      	bcc.n	800232e <u8g2_clip_intersection2+0x56>
    return 0;
 800232a:	2300      	movs	r3, #0
 800232c:	e01c      	b.n	8002368 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 800232e:	8aba      	ldrh	r2, [r7, #20]
 8002330:	88fb      	ldrh	r3, [r7, #6]
 8002332:	429a      	cmp	r2, r3
 8002334:	d801      	bhi.n	800233a <u8g2_clip_intersection2+0x62>
    return 0;
 8002336:	2300      	movs	r3, #0
 8002338:	e016      	b.n	8002368 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 800233a:	8afa      	ldrh	r2, [r7, #22]
 800233c:	88fb      	ldrh	r3, [r7, #6]
 800233e:	429a      	cmp	r2, r3
 8002340:	d201      	bcs.n	8002346 <u8g2_clip_intersection2+0x6e>
    a = c;
 8002342:	88fb      	ldrh	r3, [r7, #6]
 8002344:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8002346:	8aba      	ldrh	r2, [r7, #20]
 8002348:	88bb      	ldrh	r3, [r7, #4]
 800234a:	429a      	cmp	r2, r3
 800234c:	d901      	bls.n	8002352 <u8g2_clip_intersection2+0x7a>
    b = d;
 800234e:	88bb      	ldrh	r3, [r7, #4]
 8002350:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	8afa      	ldrh	r2, [r7, #22]
 8002356:	801a      	strh	r2, [r3, #0]
  b -= a;
 8002358:	8aba      	ldrh	r2, [r7, #20]
 800235a:	8afb      	ldrh	r3, [r7, #22]
 800235c:	1ad3      	subs	r3, r2, r3
 800235e:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	8aba      	ldrh	r2, [r7, #20]
 8002364:	801a      	strh	r2, [r3, #0]
  return 1;
 8002366:	2301      	movs	r3, #1
}
 8002368:	4618      	mov	r0, r3
 800236a:	371c      	adds	r7, #28
 800236c:	46bd      	mov	sp, r7
 800236e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002372:	4770      	bx	lr

08002374 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002374:	b590      	push	{r4, r7, lr}
 8002376:	b087      	sub	sp, #28
 8002378:	af02      	add	r7, sp, #8
 800237a:	60f8      	str	r0, [r7, #12]
 800237c:	4608      	mov	r0, r1
 800237e:	4611      	mov	r1, r2
 8002380:	461a      	mov	r2, r3
 8002382:	4603      	mov	r3, r0
 8002384:	817b      	strh	r3, [r7, #10]
 8002386:	460b      	mov	r3, r1
 8002388:	813b      	strh	r3, [r7, #8]
 800238a:	4613      	mov	r3, r2
 800238c:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002392:	893a      	ldrh	r2, [r7, #8]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 800239c:	88f8      	ldrh	r0, [r7, #6]
 800239e:	893a      	ldrh	r2, [r7, #8]
 80023a0:	8979      	ldrh	r1, [r7, #10]
 80023a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023a6:	9300      	str	r3, [sp, #0]
 80023a8:	4603      	mov	r3, r0
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	47a0      	blx	r4
}
 80023ae:	bf00      	nop
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd90      	pop	{r4, r7, pc}

080023b6 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80023b6:	b590      	push	{r4, r7, lr}
 80023b8:	b087      	sub	sp, #28
 80023ba:	af02      	add	r7, sp, #8
 80023bc:	60f8      	str	r0, [r7, #12]
 80023be:	4608      	mov	r0, r1
 80023c0:	4611      	mov	r1, r2
 80023c2:	461a      	mov	r2, r3
 80023c4:	4603      	mov	r3, r0
 80023c6:	817b      	strh	r3, [r7, #10]
 80023c8:	460b      	mov	r3, r1
 80023ca:	813b      	strh	r3, [r7, #8]
 80023cc:	4613      	mov	r3, r2
 80023ce:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d075      	beq.n	80024c6 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 80023da:	88fb      	ldrh	r3, [r7, #6]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d072      	beq.n	80024c6 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 80023e0:	88fb      	ldrh	r3, [r7, #6]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d91a      	bls.n	800241c <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 80023e6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023ea:	2b02      	cmp	r3, #2
 80023ec:	d109      	bne.n	8002402 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 80023ee:	897a      	ldrh	r2, [r7, #10]
 80023f0:	88fb      	ldrh	r3, [r7, #6]
 80023f2:	1ad3      	subs	r3, r2, r3
 80023f4:	b29b      	uxth	r3, r3
 80023f6:	817b      	strh	r3, [r7, #10]
	  x++;
 80023f8:	897b      	ldrh	r3, [r7, #10]
 80023fa:	3301      	adds	r3, #1
 80023fc:	b29b      	uxth	r3, r3
 80023fe:	817b      	strh	r3, [r7, #10]
 8002400:	e00c      	b.n	800241c <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002402:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002406:	2b03      	cmp	r3, #3
 8002408:	d108      	bne.n	800241c <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800240a:	893a      	ldrh	r2, [r7, #8]
 800240c:	88fb      	ldrh	r3, [r7, #6]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	b29b      	uxth	r3, r3
 8002412:	813b      	strh	r3, [r7, #8]
	  y++;
 8002414:	893b      	ldrh	r3, [r7, #8]
 8002416:	3301      	adds	r3, #1
 8002418:	b29b      	uxth	r3, r3
 800241a:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 800241c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002420:	f003 0301 	and.w	r3, r3, #1
 8002424:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8002428:	f897 3020 	ldrb.w	r3, [r7, #32]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d11a      	bne.n	8002466 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002436:	893b      	ldrh	r3, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	d83b      	bhi.n	80024b4 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002442:	893b      	ldrh	r3, [r7, #8]
 8002444:	429a      	cmp	r2, r3
 8002446:	d937      	bls.n	80024b8 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8002454:	1db9      	adds	r1, r7, #6
 8002456:	f107 000a 	add.w	r0, r7, #10
 800245a:	f7ff ff3d 	bl	80022d8 <u8g2_clip_intersection2>
 800245e:	4603      	mov	r3, r0
 8002460:	2b00      	cmp	r3, #0
 8002462:	d11a      	bne.n	800249a <u8g2_DrawHVLine+0xe4>
	  return;
 8002464:	e02f      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800246c:	897b      	ldrh	r3, [r7, #10]
 800246e:	429a      	cmp	r2, r3
 8002470:	d824      	bhi.n	80024bc <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002478:	897b      	ldrh	r3, [r7, #10]
 800247a:	429a      	cmp	r2, r3
 800247c:	d920      	bls.n	80024c0 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 800248a:	1db9      	adds	r1, r7, #6
 800248c:	f107 0008 	add.w	r0, r7, #8
 8002490:	f7ff ff22 	bl	80022d8 <u8g2_clip_intersection2>
 8002494:	4603      	mov	r3, r0
 8002496:	2b00      	cmp	r3, #0
 8002498:	d014      	beq.n	80024c4 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	689c      	ldr	r4, [r3, #8]
 80024a0:	8979      	ldrh	r1, [r7, #10]
 80024a2:	893a      	ldrh	r2, [r7, #8]
 80024a4:	88f8      	ldrh	r0, [r7, #6]
 80024a6:	f897 3020 	ldrb.w	r3, [r7, #32]
 80024aa:	9300      	str	r3, [sp, #0]
 80024ac:	4603      	mov	r3, r0
 80024ae:	68f8      	ldr	r0, [r7, #12]
 80024b0:	47a0      	blx	r4
 80024b2:	e008      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024b4:	bf00      	nop
 80024b6:	e006      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024b8:	bf00      	nop
 80024ba:	e004      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024bc:	bf00      	nop
 80024be:	e002      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024c0:	bf00      	nop
 80024c2:	e000      	b.n	80024c6 <u8g2_DrawHVLine+0x110>
	  return;
 80024c4:	bf00      	nop
    }
}
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd90      	pop	{r4, r7, pc}

080024cc <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b086      	sub	sp, #24
 80024d0:	af02      	add	r7, sp, #8
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	4608      	mov	r0, r1
 80024d6:	4611      	mov	r1, r2
 80024d8:	461a      	mov	r2, r3
 80024da:	4603      	mov	r3, r0
 80024dc:	817b      	strh	r3, [r7, #10]
 80024de:	460b      	mov	r3, r1
 80024e0:	813b      	strh	r3, [r7, #8]
 80024e2:	4613      	mov	r3, r2
 80024e4:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 80024e6:	88fb      	ldrh	r3, [r7, #6]
 80024e8:	893a      	ldrh	r2, [r7, #8]
 80024ea:	8979      	ldrh	r1, [r7, #10]
 80024ec:	2000      	movs	r0, #0
 80024ee:	9000      	str	r0, [sp, #0]
 80024f0:	68f8      	ldr	r0, [r7, #12]
 80024f2:	f7ff ff60 	bl	80023b6 <u8g2_DrawHVLine>
}
 80024f6:	bf00      	nop
 80024f8:	3710      	adds	r7, #16
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af02      	add	r7, sp, #8
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	4608      	mov	r0, r1
 8002508:	4611      	mov	r1, r2
 800250a:	461a      	mov	r2, r3
 800250c:	4603      	mov	r3, r0
 800250e:	817b      	strh	r3, [r7, #10]
 8002510:	460b      	mov	r3, r1
 8002512:	813b      	strh	r3, [r7, #8]
 8002514:	4613      	mov	r3, r2
 8002516:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 8002518:	88fb      	ldrh	r3, [r7, #6]
 800251a:	893a      	ldrh	r2, [r7, #8]
 800251c:	8979      	ldrh	r1, [r7, #10]
 800251e:	2001      	movs	r0, #1
 8002520:	9000      	str	r0, [sp, #0]
 8002522:	68f8      	ldr	r0, [r7, #12]
 8002524:	f7ff ff47 	bl	80023b6 <u8g2_DrawHVLine>
}
 8002528:	bf00      	nop
 800252a:	3710      	adds	r7, #16
 800252c:	46bd      	mov	sp, r7
 800252e:	bd80      	pop	{r7, pc}

08002530 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	460b      	mov	r3, r1
 800253a:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	78fa      	ldrb	r2, [r7, #3]
 8002540:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 8002544:	78fb      	ldrb	r3, [r7, #3]
 8002546:	2b02      	cmp	r3, #2
 8002548:	d903      	bls.n	8002552 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	2201      	movs	r2, #1
 800254e:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 8002552:	bf00      	nop
 8002554:	370c      	adds	r7, #12
 8002556:	46bd      	mov	sp, r7
 8002558:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255c:	4770      	bx	lr

0800255e <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 800255e:	b490      	push	{r4, r7}
 8002560:	b082      	sub	sp, #8
 8002562:	af00      	add	r7, sp, #0
 8002564:	4604      	mov	r4, r0
 8002566:	4608      	mov	r0, r1
 8002568:	4611      	mov	r1, r2
 800256a:	461a      	mov	r2, r3
 800256c:	4623      	mov	r3, r4
 800256e:	80fb      	strh	r3, [r7, #6]
 8002570:	4603      	mov	r3, r0
 8002572:	80bb      	strh	r3, [r7, #4]
 8002574:	460b      	mov	r3, r1
 8002576:	807b      	strh	r3, [r7, #2]
 8002578:	4613      	mov	r3, r2
 800257a:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 800257c:	887a      	ldrh	r2, [r7, #2]
 800257e:	88bb      	ldrh	r3, [r7, #4]
 8002580:	429a      	cmp	r2, r3
 8002582:	d20d      	bcs.n	80025a0 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8002584:	883a      	ldrh	r2, [r7, #0]
 8002586:	88fb      	ldrh	r3, [r7, #6]
 8002588:	429a      	cmp	r2, r3
 800258a:	d901      	bls.n	8002590 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 800258c:	2301      	movs	r3, #1
 800258e:	e014      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002590:	887a      	ldrh	r2, [r7, #2]
 8002592:	883b      	ldrh	r3, [r7, #0]
 8002594:	429a      	cmp	r2, r3
 8002596:	d901      	bls.n	800259c <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8002598:	2301      	movs	r3, #1
 800259a:	e00e      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 800259c:	2300      	movs	r3, #0
 800259e:	e00c      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 80025a0:	883a      	ldrh	r2, [r7, #0]
 80025a2:	88fb      	ldrh	r3, [r7, #6]
 80025a4:	429a      	cmp	r2, r3
 80025a6:	d907      	bls.n	80025b8 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 80025a8:	887a      	ldrh	r2, [r7, #2]
 80025aa:	883b      	ldrh	r3, [r7, #0]
 80025ac:	429a      	cmp	r2, r3
 80025ae:	d901      	bls.n	80025b4 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 80025b0:	2301      	movs	r3, #1
 80025b2:	e002      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 80025b4:	2300      	movs	r3, #0
 80025b6:	e000      	b.n	80025ba <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 80025b8:	2300      	movs	r3, #0
    }
  }
}
 80025ba:	4618      	mov	r0, r3
 80025bc:	3708      	adds	r7, #8
 80025be:	46bd      	mov	sp, r7
 80025c0:	bc90      	pop	{r4, r7}
 80025c2:	4770      	bx	lr

080025c4 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 80025c4:	b580      	push	{r7, lr}
 80025c6:	b084      	sub	sp, #16
 80025c8:	af00      	add	r7, sp, #0
 80025ca:	60f8      	str	r0, [r7, #12]
 80025cc:	4608      	mov	r0, r1
 80025ce:	4611      	mov	r1, r2
 80025d0:	461a      	mov	r2, r3
 80025d2:	4603      	mov	r3, r0
 80025d4:	817b      	strh	r3, [r7, #10]
 80025d6:	460b      	mov	r3, r1
 80025d8:	813b      	strh	r3, [r7, #8]
 80025da:	4613      	mov	r3, r2
 80025dc:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 80025ea:	8b3b      	ldrh	r3, [r7, #24]
 80025ec:	893a      	ldrh	r2, [r7, #8]
 80025ee:	f7ff ffb6 	bl	800255e <u8g2_is_intersection_decision_tree>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d101      	bne.n	80025fc <u8g2_IsIntersection+0x38>
    return 0; 
 80025f8:	2300      	movs	r3, #0
 80025fa:	e00a      	b.n	8002612 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8002608:	88fb      	ldrh	r3, [r7, #6]
 800260a:	897a      	ldrh	r2, [r7, #10]
 800260c:	f7ff ffa7 	bl	800255e <u8g2_is_intersection_decision_tree>
 8002610:	4603      	mov	r3, r0
}
 8002612:	4618      	mov	r0, r3
 8002614:	3710      	adds	r7, #16
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800261a:	b480      	push	{r7}
 800261c:	b089      	sub	sp, #36	; 0x24
 800261e:	af00      	add	r7, sp, #0
 8002620:	60f8      	str	r0, [r7, #12]
 8002622:	4608      	mov	r0, r1
 8002624:	4611      	mov	r1, r2
 8002626:	461a      	mov	r2, r3
 8002628:	4603      	mov	r3, r0
 800262a:	817b      	strh	r3, [r7, #10]
 800262c:	460b      	mov	r3, r1
 800262e:	813b      	strh	r3, [r7, #8]
 8002630:	4613      	mov	r3, r2
 8002632:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8002634:	893b      	ldrh	r3, [r7, #8]
 8002636:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8002638:	7efb      	ldrb	r3, [r7, #27]
 800263a:	f003 0307 	and.w	r3, r3, #7
 800263e:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8002640:	2301      	movs	r3, #1
 8002642:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8002644:	7e3a      	ldrb	r2, [r7, #24]
 8002646:	7efb      	ldrb	r3, [r7, #27]
 8002648:	fa02 f303 	lsl.w	r3, r2, r3
 800264c:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 800264e:	2300      	movs	r3, #0
 8002650:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8002652:	2300      	movs	r3, #0
 8002654:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800265c:	2b01      	cmp	r3, #1
 800265e:	d801      	bhi.n	8002664 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8002660:	7e3b      	ldrb	r3, [r7, #24]
 8002662:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800266a:	2b01      	cmp	r3, #1
 800266c:	d001      	beq.n	8002672 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 800266e:	7e3b      	ldrb	r3, [r7, #24]
 8002670:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8002672:	893b      	ldrh	r3, [r7, #8]
 8002674:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8002676:	8afb      	ldrh	r3, [r7, #22]
 8002678:	f023 0307 	bic.w	r3, r3, #7
 800267c:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	7c1b      	ldrb	r3, [r3, #16]
 8002684:	b29b      	uxth	r3, r3
 8002686:	8afa      	ldrh	r2, [r7, #22]
 8002688:	fb12 f303 	smulbb	r3, r2, r3
 800268c:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002692:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002694:	8afb      	ldrh	r3, [r7, #22]
 8002696:	69fa      	ldr	r2, [r7, #28]
 8002698:	4413      	add	r3, r2
 800269a:	61fb      	str	r3, [r7, #28]
  ptr += x;
 800269c:	897b      	ldrh	r3, [r7, #10]
 800269e:	69fa      	ldr	r2, [r7, #28]
 80026a0:	4413      	add	r3, r2
 80026a2:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 80026a4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d117      	bne.n	80026dc <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	781a      	ldrb	r2, [r3, #0]
 80026b0:	7ebb      	ldrb	r3, [r7, #26]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	b2da      	uxtb	r2, r3
 80026b6:	69fb      	ldr	r3, [r7, #28]
 80026b8:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	781a      	ldrb	r2, [r3, #0]
 80026be:	7e7b      	ldrb	r3, [r7, #25]
 80026c0:	4053      	eors	r3, r2
 80026c2:	b2da      	uxtb	r2, r3
 80026c4:	69fb      	ldr	r3, [r7, #28]
 80026c6:	701a      	strb	r2, [r3, #0]
	ptr++;
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	3301      	adds	r3, #1
 80026cc:	61fb      	str	r3, [r7, #28]
	len--;
 80026ce:	88fb      	ldrh	r3, [r7, #6]
 80026d0:	3b01      	subs	r3, #1
 80026d2:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 80026d4:	88fb      	ldrh	r3, [r7, #6]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d1e8      	bne.n	80026ac <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 80026da:	e038      	b.n	800274e <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 80026dc:	69fb      	ldr	r3, [r7, #28]
 80026de:	781a      	ldrb	r2, [r3, #0]
 80026e0:	7ebb      	ldrb	r3, [r7, #26]
 80026e2:	4313      	orrs	r3, r2
 80026e4:	b2da      	uxtb	r2, r3
 80026e6:	69fb      	ldr	r3, [r7, #28]
 80026e8:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 80026ea:	69fb      	ldr	r3, [r7, #28]
 80026ec:	781a      	ldrb	r2, [r3, #0]
 80026ee:	7e7b      	ldrb	r3, [r7, #25]
 80026f0:	4053      	eors	r3, r2
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	69fb      	ldr	r3, [r7, #28]
 80026f6:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 80026f8:	7efb      	ldrb	r3, [r7, #27]
 80026fa:	3301      	adds	r3, #1
 80026fc:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 80026fe:	7efb      	ldrb	r3, [r7, #27]
 8002700:	f003 0307 	and.w	r3, r3, #7
 8002704:	76fb      	strb	r3, [r7, #27]
      len--;
 8002706:	88fb      	ldrh	r3, [r7, #6]
 8002708:	3b01      	subs	r3, #1
 800270a:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 800270c:	7efb      	ldrb	r3, [r7, #27]
 800270e:	2b00      	cmp	r3, #0
 8002710:	d114      	bne.n	800273c <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8002716:	461a      	mov	r2, r3
 8002718:	69fb      	ldr	r3, [r7, #28]
 800271a:	4413      	add	r3, r2
 800271c:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 800271e:	68fb      	ldr	r3, [r7, #12]
 8002720:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002724:	2b01      	cmp	r3, #1
 8002726:	d801      	bhi.n	800272c <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8002728:	2301      	movs	r3, #1
 800272a:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002732:	2b01      	cmp	r3, #1
 8002734:	d008      	beq.n	8002748 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8002736:	2301      	movs	r3, #1
 8002738:	767b      	strb	r3, [r7, #25]
 800273a:	e005      	b.n	8002748 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 800273c:	7ebb      	ldrb	r3, [r7, #26]
 800273e:	005b      	lsls	r3, r3, #1
 8002740:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002742:	7e7b      	ldrb	r3, [r7, #25]
 8002744:	005b      	lsls	r3, r3, #1
 8002746:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8002748:	88fb      	ldrh	r3, [r7, #6]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1c6      	bne.n	80026dc <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 800274e:	bf00      	nop
 8002750:	3724      	adds	r7, #36	; 0x24
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 800275a:	b580      	push	{r7, lr}
 800275c:	b082      	sub	sp, #8
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2200      	movs	r2, #0
 8002766:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002778:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002782:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	4798      	blx	r3
}
 8002790:	bf00      	nop
 8002792:	3708      	adds	r7, #8
 8002794:	46bd      	mov	sp, r7
 8002796:	bd80      	pop	{r7, pc}

08002798 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b084      	sub	sp, #16
 800279c:	af00      	add	r7, sp, #0
 800279e:	60f8      	str	r0, [r7, #12]
 80027a0:	60b9      	str	r1, [r7, #8]
 80027a2:	603b      	str	r3, [r7, #0]
 80027a4:	4613      	mov	r3, r2
 80027a6:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2200      	movs	r2, #0
 80027ac:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	683a      	ldr	r2, [r7, #0]
 80027b2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	68ba      	ldr	r2, [r7, #8]
 80027b8:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	79fa      	ldrb	r2, [r7, #7]
 80027be:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	2200      	movs	r2, #0
 80027ce:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	2200      	movs	r2, #0
 80027d6:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	2200      	movs	r2, #0
 80027de:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 80027e2:	68fb      	ldr	r3, [r7, #12]
 80027e4:	2201      	movs	r2, #1
 80027e6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	2201      	movs	r2, #1
 80027ee:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	69ba      	ldr	r2, [r7, #24]
 80027f6:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	68f8      	ldr	r0, [r7, #12]
 8002800:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002802:	68f8      	ldr	r0, [r7, #12]
 8002804:	f7ff ffa9 	bl	800275a <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8002808:	68f8      	ldr	r0, [r7, #12]
 800280a:	f7ff fcaf 	bl	800216c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8002816:	bf00      	nop
 8002818:	3710      	adds	r7, #16
 800281a:	46bd      	mov	sp, r7
 800281c:	bd80      	pop	{r7, pc}

0800281e <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 800281e:	b480      	push	{r7}
 8002820:	b085      	sub	sp, #20
 8002822:	af00      	add	r7, sp, #0
 8002824:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002832:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002834:	89fb      	ldrh	r3, [r7, #14]
 8002836:	00db      	lsls	r3, r3, #3
 8002838:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	89fa      	ldrh	r2, [r7, #14]
 800283e:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	7c1b      	ldrb	r3, [r3, #16]
 8002844:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8002846:	89fb      	ldrh	r3, [r7, #14]
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	89fa      	ldrh	r2, [r7, #14]
 8002850:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002858:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800285a:	89fb      	ldrh	r3, [r7, #14]
 800285c:	00db      	lsls	r3, r3, #3
 800285e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	89fa      	ldrh	r2, [r7, #14]
 8002864:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800286c:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 800286e:	89fb      	ldrh	r3, [r7, #14]
 8002870:	687a      	ldr	r2, [r7, #4]
 8002872:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002876:	4413      	add	r3, r2
 8002878:	68ba      	ldr	r2, [r7, #8]
 800287a:	7c52      	ldrb	r2, [r2, #17]
 800287c:	4293      	cmp	r3, r2
 800287e:	dd08      	ble.n	8002892 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002880:	68bb      	ldr	r3, [r7, #8]
 8002882:	7c5b      	ldrb	r3, [r3, #17]
 8002884:	b29a      	uxth	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800288c:	b29b      	uxth	r3, r3
 800288e:	1ad3      	subs	r3, r2, r3
 8002890:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002892:	89fb      	ldrh	r3, [r7, #14]
 8002894:	00db      	lsls	r3, r3, #3
 8002896:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80028b4:	89fb      	ldrh	r3, [r7, #14]
 80028b6:	4413      	add	r3, r2
 80028b8:	b29a      	uxth	r2, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 80028c0:	68bb      	ldr	r3, [r7, #8]
 80028c2:	8a9a      	ldrh	r2, [r3, #20]
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80028ca:	68bb      	ldr	r3, [r7, #8]
 80028cc:	8ada      	ldrh	r2, [r3, #22]
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr

080028e0 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b084      	sub	sp, #16
 80028e4:	af02      	add	r7, sp, #8
 80028e6:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002900:	9300      	str	r3, [sp, #0]
 8002902:	4603      	mov	r3, r0
 8002904:	6878      	ldr	r0, [r7, #4]
 8002906:	f7ff fe5d 	bl	80025c4 <u8g2_IsIntersection>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d104      	bne.n	800291a <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 8002918:	e03b      	b.n	8002992 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	2201      	movs	r2, #1
 800291e:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 800292e:	429a      	cmp	r2, r3
 8002930:	d205      	bcs.n	800293e <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800294a:	429a      	cmp	r2, r3
 800294c:	d905      	bls.n	800295a <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002966:	429a      	cmp	r2, r3
 8002968:	d205      	bcs.n	8002976 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002982:	429a      	cmp	r2, r3
 8002984:	d905      	bls.n	8002992 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002992:	bf00      	nop
 8002994:	3708      	adds	r7, #8
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800299a:	b580      	push	{r7, lr}
 800299c:	b082      	sub	sp, #8
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 80029a2:	6878      	ldr	r0, [r7, #4]
 80029a4:	f7ff ff3b 	bl	800281e <u8g2_update_dimension_common>
}
 80029a8:	bf00      	nop
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b082      	sub	sp, #8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2200      	movs	r2, #0
 80029bc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80029e4:	6878      	ldr	r0, [r7, #4]
 80029e6:	f7ff ff7b 	bl	80028e0 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80029ea:	bf00      	nop
 80029ec:	3708      	adds	r7, #8
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bd80      	pop	{r7, pc}

080029f2 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80029f2:	b580      	push	{r7, lr}
 80029f4:	b086      	sub	sp, #24
 80029f6:	af02      	add	r7, sp, #8
 80029f8:	60f8      	str	r0, [r7, #12]
 80029fa:	4608      	mov	r0, r1
 80029fc:	4611      	mov	r1, r2
 80029fe:	461a      	mov	r2, r3
 8002a00:	4603      	mov	r3, r0
 8002a02:	817b      	strh	r3, [r7, #10]
 8002a04:	460b      	mov	r3, r1
 8002a06:	813b      	strh	r3, [r7, #8]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002a0c:	88f8      	ldrh	r0, [r7, #6]
 8002a0e:	893a      	ldrh	r2, [r7, #8]
 8002a10:	8979      	ldrh	r1, [r7, #10]
 8002a12:	7e3b      	ldrb	r3, [r7, #24]
 8002a14:	9300      	str	r3, [sp, #0]
 8002a16:	4603      	mov	r3, r0
 8002a18:	68f8      	ldr	r0, [r7, #12]
 8002a1a:	f7ff fcab 	bl	8002374 <u8g2_draw_hv_line_2dir>
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}

08002a26 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b083      	sub	sp, #12
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 8002a36:	bf00      	nop
 8002a38:	370c      	adds	r7, #12
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr

08002a42 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002a42:	b480      	push	{r7}
 8002a44:	b083      	sub	sp, #12
 8002a46:	af00      	add	r7, sp, #0
 8002a48:	6078      	str	r0, [r7, #4]
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002a4e:	78fb      	ldrb	r3, [r7, #3]
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d002      	beq.n	8002a5a <u8x8_ascii_next+0x18>
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	2b0a      	cmp	r3, #10
 8002a58:	d102      	bne.n	8002a60 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002a5a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a5e:	e001      	b.n	8002a64 <u8x8_ascii_next+0x22>
  return b;
 8002a60:	78fb      	ldrb	r3, [r7, #3]
 8002a62:	b29b      	uxth	r3, r3
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	370c      	adds	r7, #12
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr

08002a70 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 8002a70:	b480      	push	{r7}
 8002a72:	b083      	sub	sp, #12
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	6078      	str	r0, [r7, #4]
 8002a78:	460b      	mov	r3, r1
 8002a7a:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 8002a7c:	78fb      	ldrb	r3, [r7, #3]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d002      	beq.n	8002a88 <u8x8_utf8_next+0x18>
 8002a82:	78fb      	ldrb	r3, [r7, #3]
 8002a84:	2b0a      	cmp	r3, #10
 8002a86:	d102      	bne.n	8002a8e <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 8002a88:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a8c:	e06e      	b.n	8002b6c <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d145      	bne.n	8002b24 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8002a98:	78fb      	ldrb	r3, [r7, #3]
 8002a9a:	2bfb      	cmp	r3, #251	; 0xfb
 8002a9c:	d908      	bls.n	8002ab0 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2205      	movs	r2, #5
 8002aa2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8002aa6:	78fb      	ldrb	r3, [r7, #3]
 8002aa8:	f003 0301 	and.w	r3, r3, #1
 8002aac:	70fb      	strb	r3, [r7, #3]
 8002aae:	e032      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8002ab0:	78fb      	ldrb	r3, [r7, #3]
 8002ab2:	2bf7      	cmp	r3, #247	; 0xf7
 8002ab4:	d908      	bls.n	8002ac8 <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8002abe:	78fb      	ldrb	r3, [r7, #3]
 8002ac0:	f003 0303 	and.w	r3, r3, #3
 8002ac4:	70fb      	strb	r3, [r7, #3]
 8002ac6:	e026      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8002ac8:	78fb      	ldrb	r3, [r7, #3]
 8002aca:	2bef      	cmp	r3, #239	; 0xef
 8002acc:	d908      	bls.n	8002ae0 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	2203      	movs	r2, #3
 8002ad2:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8002ad6:	78fb      	ldrb	r3, [r7, #3]
 8002ad8:	f003 0307 	and.w	r3, r3, #7
 8002adc:	70fb      	strb	r3, [r7, #3]
 8002ade:	e01a      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	2bdf      	cmp	r3, #223	; 0xdf
 8002ae4:	d908      	bls.n	8002af8 <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2202      	movs	r2, #2
 8002aea:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8002aee:	78fb      	ldrb	r3, [r7, #3]
 8002af0:	f003 030f 	and.w	r3, r3, #15
 8002af4:	70fb      	strb	r3, [r7, #3]
 8002af6:	e00e      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8002af8:	78fb      	ldrb	r3, [r7, #3]
 8002afa:	2bbf      	cmp	r3, #191	; 0xbf
 8002afc:	d908      	bls.n	8002b10 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	2201      	movs	r2, #1
 8002b02:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8002b06:	78fb      	ldrb	r3, [r7, #3]
 8002b08:	f003 031f 	and.w	r3, r3, #31
 8002b0c:	70fb      	strb	r3, [r7, #3]
 8002b0e:	e002      	b.n	8002b16 <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8002b10:	78fb      	ldrb	r3, [r7, #3]
 8002b12:	b29b      	uxth	r3, r3
 8002b14:	e02a      	b.n	8002b6c <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8002b16:	78fb      	ldrb	r3, [r7, #3]
 8002b18:	b29a      	uxth	r2, r3
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8002b1e:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002b22:	e023      	b.n	8002b6c <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002b2a:	3b01      	subs	r3, #1
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	8c1b      	ldrh	r3, [r3, #32]
 8002b38:	019b      	lsls	r3, r3, #6
 8002b3a:	b29a      	uxth	r2, r3
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8002b40:	78fb      	ldrb	r3, [r7, #3]
 8002b42:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b46:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	8c1a      	ldrh	r2, [r3, #32]
 8002b4c:	78fb      	ldrb	r3, [r7, #3]
 8002b4e:	b29b      	uxth	r3, r3
 8002b50:	4313      	orrs	r3, r2
 8002b52:	b29a      	uxth	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8002b62:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002b66:	e001      	b.n	8002b6c <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	8c1b      	ldrh	r3, [r3, #32]
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b76:	4770      	bx	lr

08002b78 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002b78:	b590      	push	{r4, r7, lr}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	460b      	mov	r3, r1
 8002b82:	607a      	str	r2, [r7, #4]
 8002b84:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	691c      	ldr	r4, [r3, #16]
 8002b8a:	7afa      	ldrb	r2, [r7, #11]
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2117      	movs	r1, #23
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	47a0      	blx	r4
 8002b94:	4603      	mov	r3, r0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	3714      	adds	r7, #20
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}

08002b9e <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	b082      	sub	sp, #8
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
 8002ba6:	460b      	mov	r3, r1
 8002ba8:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002baa:	1cfb      	adds	r3, r7, #3
 8002bac:	461a      	mov	r2, r3
 8002bae:	2101      	movs	r1, #1
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f7ff ffe1 	bl	8002b78 <u8x8_byte_SendBytes>
 8002bb6:	4603      	mov	r3, r0
}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3708      	adds	r7, #8
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002bc0:	b590      	push	{r4, r7, lr}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	691c      	ldr	r4, [r3, #16]
 8002bcc:	2300      	movs	r3, #0
 8002bce:	2200      	movs	r2, #0
 8002bd0:	2118      	movs	r1, #24
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	47a0      	blx	r4
 8002bd6:	4603      	mov	r3, r0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	370c      	adds	r7, #12
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd90      	pop	{r4, r7, pc}

08002be0 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002be0:	b590      	push	{r4, r7, lr}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	691c      	ldr	r4, [r3, #16]
 8002bec:	2300      	movs	r3, #0
 8002bee:	2200      	movs	r2, #0
 8002bf0:	2119      	movs	r1, #25
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	47a0      	blx	r4
 8002bf6:	4603      	mov	r3, r0
}
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	370c      	adds	r7, #12
 8002bfc:	46bd      	mov	sp, r7
 8002bfe:	bd90      	pop	{r4, r7, pc}

08002c00 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002c00:	b590      	push	{r4, r7, lr}
 8002c02:	b083      	sub	sp, #12
 8002c04:	af00      	add	r7, sp, #0
 8002c06:	6078      	str	r0, [r7, #4]
 8002c08:	460b      	mov	r3, r1
 8002c0a:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	68dc      	ldr	r4, [r3, #12]
 8002c10:	78fa      	ldrb	r2, [r7, #3]
 8002c12:	2300      	movs	r3, #0
 8002c14:	2115      	movs	r1, #21
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	47a0      	blx	r4
 8002c1a:	4603      	mov	r3, r0
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	370c      	adds	r7, #12
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd90      	pop	{r4, r7, pc}

08002c24 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002c24:	b590      	push	{r4, r7, lr}
 8002c26:	b083      	sub	sp, #12
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	6078      	str	r0, [r7, #4]
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	68dc      	ldr	r4, [r3, #12]
 8002c34:	78fa      	ldrb	r2, [r7, #3]
 8002c36:	2300      	movs	r3, #0
 8002c38:	2116      	movs	r1, #22
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	47a0      	blx	r4
 8002c3e:	4603      	mov	r3, r0
}
 8002c40:	4618      	mov	r0, r3
 8002c42:	370c      	adds	r7, #12
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd90      	pop	{r4, r7, pc}

08002c48 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002c48:	b590      	push	{r4, r7, lr}
 8002c4a:	b085      	sub	sp, #20
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	460b      	mov	r3, r1
 8002c52:	607a      	str	r2, [r7, #4]
 8002c54:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	68dc      	ldr	r4, [r3, #12]
 8002c5a:	7afa      	ldrb	r2, [r7, #11]
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2117      	movs	r1, #23
 8002c60:	68f8      	ldr	r0, [r7, #12]
 8002c62:	47a0      	blx	r4
 8002c64:	4603      	mov	r3, r0
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3714      	adds	r7, #20
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd90      	pop	{r4, r7, pc}

08002c6e <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002c6e:	b590      	push	{r4, r7, lr}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	68dc      	ldr	r4, [r3, #12]
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	2118      	movs	r1, #24
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	47a0      	blx	r4
 8002c84:	4603      	mov	r3, r0
}
 8002c86:	4618      	mov	r0, r3
 8002c88:	370c      	adds	r7, #12
 8002c8a:	46bd      	mov	sp, r7
 8002c8c:	bd90      	pop	{r4, r7, pc}

08002c8e <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002c8e:	b590      	push	{r4, r7, lr}
 8002c90:	b083      	sub	sp, #12
 8002c92:	af00      	add	r7, sp, #0
 8002c94:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68dc      	ldr	r4, [r3, #12]
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	2119      	movs	r1, #25
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	47a0      	blx	r4
 8002ca4:	4603      	mov	r3, r0
}
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	370c      	adds	r7, #12
 8002caa:	46bd      	mov	sp, r7
 8002cac:	bd90      	pop	{r4, r7, pc}

08002cae <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002cae:	b590      	push	{r4, r7, lr}
 8002cb0:	b085      	sub	sp, #20
 8002cb2:	af00      	add	r7, sp, #0
 8002cb4:	6078      	str	r0, [r7, #4]
 8002cb6:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	781b      	ldrb	r3, [r3, #0]
 8002cbc:	73fb      	strb	r3, [r7, #15]
    data++;
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	3301      	adds	r3, #1
 8002cc2:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2bfe      	cmp	r3, #254	; 0xfe
 8002cc8:	d031      	beq.n	8002d2e <u8x8_cad_SendSequence+0x80>
 8002cca:	2bfe      	cmp	r3, #254	; 0xfe
 8002ccc:	dc3d      	bgt.n	8002d4a <u8x8_cad_SendSequence+0x9c>
 8002cce:	2b19      	cmp	r3, #25
 8002cd0:	dc3b      	bgt.n	8002d4a <u8x8_cad_SendSequence+0x9c>
 8002cd2:	2b18      	cmp	r3, #24
 8002cd4:	da23      	bge.n	8002d1e <u8x8_cad_SendSequence+0x70>
 8002cd6:	2b16      	cmp	r3, #22
 8002cd8:	dc02      	bgt.n	8002ce0 <u8x8_cad_SendSequence+0x32>
 8002cda:	2b15      	cmp	r3, #21
 8002cdc:	da03      	bge.n	8002ce6 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002cde:	e034      	b.n	8002d4a <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002ce0:	2b17      	cmp	r3, #23
 8002ce2:	d00e      	beq.n	8002d02 <u8x8_cad_SendSequence+0x54>
	return;
 8002ce4:	e031      	b.n	8002d4a <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	781b      	ldrb	r3, [r3, #0]
 8002cea:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	68dc      	ldr	r4, [r3, #12]
 8002cf0:	7bba      	ldrb	r2, [r7, #14]
 8002cf2:	7bf9      	ldrb	r1, [r7, #15]
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	6878      	ldr	r0, [r7, #4]
 8002cf8:	47a0      	blx	r4
	  data++;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	3301      	adds	r3, #1
 8002cfe:	603b      	str	r3, [r7, #0]
	  break;
 8002d00:	e022      	b.n	8002d48 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	781b      	ldrb	r3, [r3, #0]
 8002d06:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002d08:	f107 030e 	add.w	r3, r7, #14
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2101      	movs	r1, #1
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f7ff ff99 	bl	8002c48 <u8x8_cad_SendData>
	  data++;
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	603b      	str	r3, [r7, #0]
	  break;
 8002d1c:	e014      	b.n	8002d48 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	68dc      	ldr	r4, [r3, #12]
 8002d22:	7bf9      	ldrb	r1, [r7, #15]
 8002d24:	2300      	movs	r3, #0
 8002d26:	2200      	movs	r2, #0
 8002d28:	6878      	ldr	r0, [r7, #4]
 8002d2a:	47a0      	blx	r4
	  break;
 8002d2c:	e00c      	b.n	8002d48 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	781b      	ldrb	r3, [r3, #0]
 8002d32:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002d34:	7bbb      	ldrb	r3, [r7, #14]
 8002d36:	461a      	mov	r2, r3
 8002d38:	2129      	movs	r1, #41	; 0x29
 8002d3a:	6878      	ldr	r0, [r7, #4]
 8002d3c:	f000 fa0b 	bl	8003156 <u8x8_gpio_call>
	  data++;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	3301      	adds	r3, #1
 8002d44:	603b      	str	r3, [r7, #0]
	  break;
 8002d46:	bf00      	nop
    cmd = *data;
 8002d48:	e7b6      	b.n	8002cb8 <u8x8_cad_SendSequence+0xa>
	return;
 8002d4a:	bf00      	nop
    }
  }
}
 8002d4c:	3714      	adds	r7, #20
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd90      	pop	{r4, r7, pc}

08002d52 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002d52:	b590      	push	{r4, r7, lr}
 8002d54:	b085      	sub	sp, #20
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
 8002d5a:	460b      	mov	r3, r1
 8002d5c:	607a      	str	r2, [r7, #4]
 8002d5e:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8002d60:	68f8      	ldr	r0, [r7, #12]
 8002d62:	f7ff ff2d 	bl	8002bc0 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002d66:	2140      	movs	r1, #64	; 0x40
 8002d68:	68f8      	ldr	r0, [r7, #12]
 8002d6a:	f7ff ff18 	bl	8002b9e <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	691c      	ldr	r4, [r3, #16]
 8002d72:	7afa      	ldrb	r2, [r7, #11]
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	2117      	movs	r1, #23
 8002d78:	68f8      	ldr	r0, [r7, #12]
 8002d7a:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f7ff ff2f 	bl	8002be0 <u8x8_byte_EndTransfer>
}
 8002d82:	bf00      	nop
 8002d84:	3714      	adds	r7, #20
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd90      	pop	{r4, r7, pc}
	...

08002d8c <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002d8c:	b590      	push	{r4, r7, lr}
 8002d8e:	b087      	sub	sp, #28
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	60f8      	str	r0, [r7, #12]
 8002d94:	607b      	str	r3, [r7, #4]
 8002d96:	460b      	mov	r3, r1
 8002d98:	72fb      	strb	r3, [r7, #11]
 8002d9a:	4613      	mov	r3, r2
 8002d9c:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 8002d9e:	7afb      	ldrb	r3, [r7, #11]
 8002da0:	3b14      	subs	r3, #20
 8002da2:	2b05      	cmp	r3, #5
 8002da4:	d848      	bhi.n	8002e38 <u8x8_cad_ssd13xx_i2c+0xac>
 8002da6:	a201      	add	r2, pc, #4	; (adr r2, 8002dac <u8x8_cad_ssd13xx_i2c+0x20>)
 8002da8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dac:	08002e15 	.word	0x08002e15
 8002db0:	08002dc5 	.word	0x08002dc5
 8002db4:	08002dc5 	.word	0x08002dc5
 8002db8:	08002de5 	.word	0x08002de5
 8002dbc:	08002e3d 	.word	0x08002e3d
 8002dc0:	08002e3d 	.word	0x08002e3d
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 8002dc4:	68f8      	ldr	r0, [r7, #12]
 8002dc6:	f7ff fefb 	bl	8002bc0 <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 8002dca:	2100      	movs	r1, #0
 8002dcc:	68f8      	ldr	r0, [r7, #12]
 8002dce:	f7ff fee6 	bl	8002b9e <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002dd2:	7abb      	ldrb	r3, [r7, #10]
 8002dd4:	4619      	mov	r1, r3
 8002dd6:	68f8      	ldr	r0, [r7, #12]
 8002dd8:	f7ff fee1 	bl	8002b9e <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 8002ddc:	68f8      	ldr	r0, [r7, #12]
 8002dde:	f7ff feff 	bl	8002be0 <u8x8_byte_EndTransfer>
      break;
 8002de2:	e02c      	b.n	8002e3e <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002de8:	e00a      	b.n	8002e00 <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002dea:	697a      	ldr	r2, [r7, #20]
 8002dec:	2118      	movs	r1, #24
 8002dee:	68f8      	ldr	r0, [r7, #12]
 8002df0:	f7ff ffaf 	bl	8002d52 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002df4:	7abb      	ldrb	r3, [r7, #10]
 8002df6:	3b18      	subs	r3, #24
 8002df8:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	3318      	adds	r3, #24
 8002dfe:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002e00:	7abb      	ldrb	r3, [r7, #10]
 8002e02:	2b18      	cmp	r3, #24
 8002e04:	d8f1      	bhi.n	8002dea <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002e06:	7abb      	ldrb	r3, [r7, #10]
 8002e08:	697a      	ldr	r2, [r7, #20]
 8002e0a:	4619      	mov	r1, r3
 8002e0c:	68f8      	ldr	r0, [r7, #12]
 8002e0e:	f7ff ffa0 	bl	8002d52 <u8x8_i2c_data_transfer>
      break;
 8002e12:	e014      	b.n	8002e3e <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002e1a:	2bff      	cmp	r3, #255	; 0xff
 8002e1c:	d103      	bne.n	8002e26 <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2278      	movs	r2, #120	; 0x78
 8002e22:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	691c      	ldr	r4, [r3, #16]
 8002e2a:	7aba      	ldrb	r2, [r7, #10]
 8002e2c:	7af9      	ldrb	r1, [r7, #11]
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	68f8      	ldr	r0, [r7, #12]
 8002e32:	47a0      	blx	r4
 8002e34:	4603      	mov	r3, r0
 8002e36:	e003      	b.n	8002e40 <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 8002e38:	2300      	movs	r3, #0
 8002e3a:	e001      	b.n	8002e40 <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 8002e3c:	bf00      	nop
  }
  return 1;
 8002e3e:	2301      	movs	r3, #1
}
 8002e40:	4618      	mov	r0, r3
 8002e42:	371c      	adds	r7, #28
 8002e44:	46bd      	mov	sp, r7
 8002e46:	bd90      	pop	{r4, r7, pc}

08002e48 <u8x8_d_ssd1305_generic>:
};



static uint8_t u8x8_d_ssd1305_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b086      	sub	sp, #24
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	60f8      	str	r0, [r7, #12]
 8002e50:	607b      	str	r3, [r7, #4]
 8002e52:	460b      	mov	r3, r1
 8002e54:	72fb      	strb	r3, [r7, #11]
 8002e56:	4613      	mov	r3, r2
 8002e58:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002e5a:	7afb      	ldrb	r3, [r7, #11]
 8002e5c:	2b0f      	cmp	r3, #15
 8002e5e:	d006      	beq.n	8002e6e <u8x8_d_ssd1305_generic+0x26>
 8002e60:	2b0f      	cmp	r3, #15
 8002e62:	dc67      	bgt.n	8002f34 <u8x8_d_ssd1305_generic+0xec>
 8002e64:	2b0b      	cmp	r3, #11
 8002e66:	d048      	beq.n	8002efa <u8x8_d_ssd1305_generic+0xb2>
 8002e68:	2b0e      	cmp	r3, #14
 8002e6a:	d053      	beq.n	8002f14 <u8x8_d_ssd1305_generic+0xcc>
 8002e6c:	e062      	b.n	8002f34 <u8x8_d_ssd1305_generic+0xec>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002e6e:	68f8      	ldr	r0, [r7, #12]
 8002e70:	f7ff fefd 	bl	8002c6e <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	795b      	ldrb	r3, [r3, #5]
 8002e78:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8002e7a:	7dfb      	ldrb	r3, [r7, #23]
 8002e7c:	00db      	lsls	r3, r3, #3
 8002e7e:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002e86:	7dfb      	ldrb	r3, [r7, #23]
 8002e88:	4413      	add	r3, r2
 8002e8a:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002e8c:	2140      	movs	r1, #64	; 0x40
 8002e8e:	68f8      	ldr	r0, [r7, #12]
 8002e90:	f7ff feb6 	bl	8002c00 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002e94:	7dfb      	ldrb	r3, [r7, #23]
 8002e96:	091b      	lsrs	r3, r3, #4
 8002e98:	b2db      	uxtb	r3, r3
 8002e9a:	f043 0310 	orr.w	r3, r3, #16
 8002e9e:	b2db      	uxtb	r3, r3
 8002ea0:	4619      	mov	r1, r3
 8002ea2:	68f8      	ldr	r0, [r7, #12]
 8002ea4:	f7ff feac 	bl	8002c00 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 8002ea8:	7dfb      	ldrb	r3, [r7, #23]
 8002eaa:	f003 030f 	and.w	r3, r3, #15
 8002eae:	b2db      	uxtb	r3, r3
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	68f8      	ldr	r0, [r7, #12]
 8002eb4:	f7ff feb6 	bl	8002c24 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	799b      	ldrb	r3, [r3, #6]
 8002ebc:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002ec0:	b2db      	uxtb	r3, r3
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	68f8      	ldr	r0, [r7, #12]
 8002ec6:	f7ff fead 	bl	8002c24 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	791b      	ldrb	r3, [r3, #4]
 8002ece:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002ed6:	7dbb      	ldrb	r3, [r7, #22]
 8002ed8:	00db      	lsls	r3, r3, #3
 8002eda:	b2db      	uxtb	r3, r3
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	4619      	mov	r1, r3
 8002ee0:	68f8      	ldr	r0, [r7, #12]
 8002ee2:	f7ff feb1 	bl	8002c48 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8002ee6:	7abb      	ldrb	r3, [r7, #10]
 8002ee8:	3b01      	subs	r3, #1
 8002eea:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002eec:	7abb      	ldrb	r3, [r7, #10]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1eb      	bne.n	8002eca <u8x8_d_ssd1305_generic+0x82>
      
      u8x8_cad_EndTransfer(u8x8);
 8002ef2:	68f8      	ldr	r0, [r7, #12]
 8002ef4:	f7ff fecb 	bl	8002c8e <u8x8_cad_EndTransfer>
      break;
 8002ef8:	e01e      	b.n	8002f38 <u8x8_d_ssd1305_generic+0xf0>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002efa:	7abb      	ldrb	r3, [r7, #10]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d104      	bne.n	8002f0a <u8x8_d_ssd1305_generic+0xc2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave0_seq);
 8002f00:	4910      	ldr	r1, [pc, #64]	; (8002f44 <u8x8_d_ssd1305_generic+0xfc>)
 8002f02:	68f8      	ldr	r0, [r7, #12]
 8002f04:	f7ff fed3 	bl	8002cae <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
      break;
 8002f08:	e016      	b.n	8002f38 <u8x8_d_ssd1305_generic+0xf0>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
 8002f0a:	490f      	ldr	r1, [pc, #60]	; (8002f48 <u8x8_d_ssd1305_generic+0x100>)
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f7ff fece 	bl	8002cae <u8x8_cad_SendSequence>
      break;
 8002f12:	e011      	b.n	8002f38 <u8x8_d_ssd1305_generic+0xf0>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f7ff feaa 	bl	8002c6e <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002f1a:	2181      	movs	r1, #129	; 0x81
 8002f1c:	68f8      	ldr	r0, [r7, #12]
 8002f1e:	f7ff fe6f 	bl	8002c00 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1305 has range from 0 to 255 */
 8002f22:	7abb      	ldrb	r3, [r7, #10]
 8002f24:	4619      	mov	r1, r3
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f7ff fe7c 	bl	8002c24 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002f2c:	68f8      	ldr	r0, [r7, #12]
 8002f2e:	f7ff feae 	bl	8002c8e <u8x8_cad_EndTransfer>
      break;
 8002f32:	e001      	b.n	8002f38 <u8x8_d_ssd1305_generic+0xf0>
#endif
    default:
      return 0;
 8002f34:	2300      	movs	r3, #0
 8002f36:	e000      	b.n	8002f3a <u8x8_d_ssd1305_generic+0xf2>
  }
  return 1;
 8002f38:	2301      	movs	r3, #1
}
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	3718      	adds	r7, #24
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	0801f6bc 	.word	0x0801f6bc
 8002f48:	0801f6c4 	.word	0x0801f6c4

08002f4c <u8x8_d_ssd1305_128x32_noname>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1305_128x32_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b084      	sub	sp, #16
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	607b      	str	r3, [r7, #4]
 8002f56:	460b      	mov	r3, r1
 8002f58:	72fb      	strb	r3, [r7, #11]
 8002f5a:	4613      	mov	r3, r2
 8002f5c:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1305_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002f5e:	7aba      	ldrb	r2, [r7, #10]
 8002f60:	7af9      	ldrb	r1, [r7, #11]
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	68f8      	ldr	r0, [r7, #12]
 8002f66:	f7ff ff6f 	bl	8002e48 <u8x8_d_ssd1305_generic>
 8002f6a:	4603      	mov	r3, r0
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d001      	beq.n	8002f74 <u8x8_d_ssd1305_128x32_noname+0x28>
    return 1;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e032      	b.n	8002fda <u8x8_d_ssd1305_128x32_noname+0x8e>
  
  switch(msg)
 8002f74:	7afb      	ldrb	r3, [r7, #11]
 8002f76:	2b0d      	cmp	r3, #13
 8002f78:	d006      	beq.n	8002f88 <u8x8_d_ssd1305_128x32_noname+0x3c>
 8002f7a:	2b0d      	cmp	r3, #13
 8002f7c:	dc2a      	bgt.n	8002fd4 <u8x8_d_ssd1305_128x32_noname+0x88>
 8002f7e:	2b09      	cmp	r3, #9
 8002f80:	d023      	beq.n	8002fca <u8x8_d_ssd1305_128x32_noname+0x7e>
 8002f82:	2b0a      	cmp	r3, #10
 8002f84:	d019      	beq.n	8002fba <u8x8_d_ssd1305_128x32_noname+0x6e>
 8002f86:	e025      	b.n	8002fd4 <u8x8_d_ssd1305_128x32_noname+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002f88:	7abb      	ldrb	r3, [r7, #10]
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10a      	bne.n	8002fa4 <u8x8_d_ssd1305_128x32_noname+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip0_seq);
 8002f8e:	4915      	ldr	r1, [pc, #84]	; (8002fe4 <u8x8_d_ssd1305_128x32_noname+0x98>)
 8002f90:	68f8      	ldr	r0, [r7, #12]
 8002f92:	f7ff fe8c 	bl	8002cae <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	7c9a      	ldrb	r2, [r3, #18]
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002fa2:	e019      	b.n	8002fd8 <u8x8_d_ssd1305_128x32_noname+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
 8002fa4:	4910      	ldr	r1, [pc, #64]	; (8002fe8 <u8x8_d_ssd1305_128x32_noname+0x9c>)
 8002fa6:	68f8      	ldr	r0, [r7, #12]
 8002fa8:	f7ff fe81 	bl	8002cae <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	7cda      	ldrb	r2, [r3, #19]
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8002fb8:	e00e      	b.n	8002fd8 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002fba:	68f8      	ldr	r0, [r7, #12]
 8002fbc:	f000 f82e 	bl	800301c <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_noname_init_seq);    
 8002fc0:	490a      	ldr	r1, [pc, #40]	; (8002fec <u8x8_d_ssd1305_128x32_noname+0xa0>)
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f7ff fe73 	bl	8002cae <u8x8_cad_SendSequence>
      break;
 8002fc8:	e006      	b.n	8002fd8 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1305_128x32_noname_display_info);
 8002fca:	4909      	ldr	r1, [pc, #36]	; (8002ff0 <u8x8_d_ssd1305_128x32_noname+0xa4>)
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f811 	bl	8002ff4 <u8x8_d_helper_display_setup_memory>
      break;
 8002fd2:	e001      	b.n	8002fd8 <u8x8_d_ssd1305_128x32_noname+0x8c>
    default:
      return 0;
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	e000      	b.n	8002fda <u8x8_d_ssd1305_128x32_noname+0x8e>
  }
  return 1;
 8002fd8:	2301      	movs	r3, #1
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	3710      	adds	r7, #16
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd80      	pop	{r7, pc}
 8002fe2:	bf00      	nop
 8002fe4:	0801f6cc 	.word	0x0801f6cc
 8002fe8:	0801f6d8 	.word	0x0801f6d8
 8002fec:	0801f6fc 	.word	0x0801f6fc
 8002ff0:	0801f6e4 	.word	0x0801f6e4

08002ff4 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	683a      	ldr	r2, [r7, #0]
 8003002:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	7c9a      	ldrb	r2, [r3, #18]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8003010:	bf00      	nop
 8003012:	370c      	adds	r7, #12
 8003014:	46bd      	mov	sp, r7
 8003016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301a:	4770      	bx	lr

0800301c <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 800301c:	b590      	push	{r4, r7, lr}
 800301e:	b083      	sub	sp, #12
 8003020:	af00      	add	r7, sp, #0
 8003022:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	695c      	ldr	r4, [r3, #20]
 8003028:	2300      	movs	r3, #0
 800302a:	2200      	movs	r2, #0
 800302c:	2128      	movs	r1, #40	; 0x28
 800302e:	6878      	ldr	r0, [r7, #4]
 8003030:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	68dc      	ldr	r4, [r3, #12]
 8003036:	2300      	movs	r3, #0
 8003038:	2200      	movs	r2, #0
 800303a:	2114      	movs	r1, #20
 800303c:	6878      	ldr	r0, [r7, #4]
 800303e:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8003040:	2201      	movs	r2, #1
 8003042:	214b      	movs	r1, #75	; 0x4b
 8003044:	6878      	ldr	r0, [r7, #4]
 8003046:	f000 f886 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	791b      	ldrb	r3, [r3, #4]
 8003050:	461a      	mov	r2, r3
 8003052:	2129      	movs	r1, #41	; 0x29
 8003054:	6878      	ldr	r0, [r7, #4]
 8003056:	f000 f87e 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 800305a:	2200      	movs	r2, #0
 800305c:	214b      	movs	r1, #75	; 0x4b
 800305e:	6878      	ldr	r0, [r7, #4]
 8003060:	f000 f879 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	791b      	ldrb	r3, [r3, #4]
 800306a:	461a      	mov	r2, r3
 800306c:	2129      	movs	r1, #41	; 0x29
 800306e:	6878      	ldr	r0, [r7, #4]
 8003070:	f000 f871 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8003074:	2201      	movs	r2, #1
 8003076:	214b      	movs	r1, #75	; 0x4b
 8003078:	6878      	ldr	r0, [r7, #4]
 800307a:	f000 f86c 	bl	8003156 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	795b      	ldrb	r3, [r3, #5]
 8003084:	461a      	mov	r2, r3
 8003086:	2129      	movs	r1, #41	; 0x29
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 f864 	bl	8003156 <u8x8_gpio_call>
}    
 800308e:	bf00      	nop
 8003090:	370c      	adds	r7, #12
 8003092:	46bd      	mov	sp, r7
 8003094:	bd90      	pop	{r4, r7, pc}

08003096 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8003096:	b590      	push	{r4, r7, lr}
 8003098:	b085      	sub	sp, #20
 800309a:	af00      	add	r7, sp, #0
 800309c:	6078      	str	r0, [r7, #4]
 800309e:	4608      	mov	r0, r1
 80030a0:	4611      	mov	r1, r2
 80030a2:	461a      	mov	r2, r3
 80030a4:	4603      	mov	r3, r0
 80030a6:	70fb      	strb	r3, [r7, #3]
 80030a8:	460b      	mov	r3, r1
 80030aa:	70bb      	strb	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 80030b0:	78fb      	ldrb	r3, [r7, #3]
 80030b2:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 80030b4:	78bb      	ldrb	r3, [r7, #2]
 80030b6:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 80030b8:	787b      	ldrb	r3, [r7, #1]
 80030ba:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 80030bc:	6a3b      	ldr	r3, [r7, #32]
 80030be:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	689c      	ldr	r4, [r3, #8]
 80030c4:	f107 0308 	add.w	r3, r7, #8
 80030c8:	2201      	movs	r2, #1
 80030ca:	210f      	movs	r1, #15
 80030cc:	6878      	ldr	r0, [r7, #4]
 80030ce:	47a0      	blx	r4
 80030d0:	4603      	mov	r3, r0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3714      	adds	r7, #20
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd90      	pop	{r4, r7, pc}

080030da <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80030da:	b590      	push	{r4, r7, lr}
 80030dc:	b083      	sub	sp, #12
 80030de:	af00      	add	r7, sp, #0
 80030e0:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	689c      	ldr	r4, [r3, #8]
 80030e6:	2300      	movs	r3, #0
 80030e8:	2200      	movs	r2, #0
 80030ea:	2109      	movs	r1, #9
 80030ec:	6878      	ldr	r0, [r7, #4]
 80030ee:	47a0      	blx	r4
}
 80030f0:	bf00      	nop
 80030f2:	370c      	adds	r7, #12
 80030f4:	46bd      	mov	sp, r7
 80030f6:	bd90      	pop	{r4, r7, pc}

080030f8 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80030f8:	b590      	push	{r4, r7, lr}
 80030fa:	b083      	sub	sp, #12
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	689c      	ldr	r4, [r3, #8]
 8003104:	2300      	movs	r3, #0
 8003106:	2200      	movs	r2, #0
 8003108:	210a      	movs	r1, #10
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	bd90      	pop	{r4, r7, pc}

08003116 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8003116:	b590      	push	{r4, r7, lr}
 8003118:	b083      	sub	sp, #12
 800311a:	af00      	add	r7, sp, #0
 800311c:	6078      	str	r0, [r7, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	689c      	ldr	r4, [r3, #8]
 8003126:	78fa      	ldrb	r2, [r7, #3]
 8003128:	2300      	movs	r3, #0
 800312a:	210b      	movs	r1, #11
 800312c:	6878      	ldr	r0, [r7, #4]
 800312e:	47a0      	blx	r4
}
 8003130:	bf00      	nop
 8003132:	370c      	adds	r7, #12
 8003134:	46bd      	mov	sp, r7
 8003136:	bd90      	pop	{r4, r7, pc}

08003138 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8003138:	b590      	push	{r4, r7, lr}
 800313a:	b083      	sub	sp, #12
 800313c:	af00      	add	r7, sp, #0
 800313e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	689c      	ldr	r4, [r3, #8]
 8003144:	2300      	movs	r3, #0
 8003146:	2200      	movs	r2, #0
 8003148:	2110      	movs	r1, #16
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	47a0      	blx	r4
}
 800314e:	bf00      	nop
 8003150:	370c      	adds	r7, #12
 8003152:	46bd      	mov	sp, r7
 8003154:	bd90      	pop	{r4, r7, pc}

08003156 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8003156:	b590      	push	{r4, r7, lr}
 8003158:	b083      	sub	sp, #12
 800315a:	af00      	add	r7, sp, #0
 800315c:	6078      	str	r0, [r7, #4]
 800315e:	460b      	mov	r3, r1
 8003160:	70fb      	strb	r3, [r7, #3]
 8003162:	4613      	mov	r3, r2
 8003164:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	695c      	ldr	r4, [r3, #20]
 800316a:	78ba      	ldrb	r2, [r7, #2]
 800316c:	78f9      	ldrb	r1, [r7, #3]
 800316e:	2300      	movs	r3, #0
 8003170:	6878      	ldr	r0, [r7, #4]
 8003172:	47a0      	blx	r4
}
 8003174:	bf00      	nop
 8003176:	370c      	adds	r7, #12
 8003178:	46bd      	mov	sp, r7
 800317a:	bd90      	pop	{r4, r7, pc}

0800317c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	60f8      	str	r0, [r7, #12]
 8003184:	607b      	str	r3, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	72fb      	strb	r3, [r7, #11]
 800318a:	4613      	mov	r3, r2
 800318c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800318e:	2300      	movs	r3, #0
}
 8003190:	4618      	mov	r0, r3
 8003192:	3714      	adds	r7, #20
 8003194:	46bd      	mov	sp, r7
 8003196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319a:	4770      	bx	lr

0800319c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800319c:	b480      	push	{r7}
 800319e:	b083      	sub	sp, #12
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a11      	ldr	r2, [pc, #68]	; (80031f4 <u8x8_SetupDefaults+0x58>)
 80031ae:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a10      	ldr	r2, [pc, #64]	; (80031f4 <u8x8_SetupDefaults+0x58>)
 80031b4:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	4a0e      	ldr	r2, [pc, #56]	; (80031f4 <u8x8_SetupDefaults+0x58>)
 80031ba:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a0d      	ldr	r2, [pc, #52]	; (80031f4 <u8x8_SetupDefaults+0x58>)
 80031c0:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2200      	movs	r2, #0
 80031ce:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	22ff      	movs	r2, #255	; 0xff
 80031dc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	22ff      	movs	r2, #255	; 0xff
 80031e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80031e8:	bf00      	nop
 80031ea:	370c      	adds	r7, #12
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr
 80031f4:	0800317d 	.word	0x0800317d

080031f8 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8003206:	68f8      	ldr	r0, [r7, #12]
 8003208:	f7ff ffc8 	bl	800319c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	687a      	ldr	r2, [r7, #4]
 8003216:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	683a      	ldr	r2, [r7, #0]
 800321c:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003224:	68f8      	ldr	r0, [r7, #12]
 8003226:	f7ff ff58 	bl	80030da <u8x8_SetupMemory>
}
 800322a:	bf00      	nop
 800322c:	3710      	adds	r7, #16
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
	...

08003234 <decode>:
volatile bool HKIW = false;
volatile bool HKIE = false;

bool handshakeRequest = 0;

void decode(void *argument) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b086      	sub	sp, #24
 8003238:	af00      	add	r7, sp, #0
 800323a:	6078      	str	r0, [r7, #4]
		osMessageQueuePut(msgInQHandle, &RX, 0, 0);

    	htim15.Instance->CNT = 0;
#endif

		osMessageQueueGet(msgInQHandle, &RX, NULL, osWaitForever);
 800323c:	4b29      	ldr	r3, [pc, #164]	; (80032e4 <decode+0xb0>)
 800323e:	6818      	ldr	r0, [r3, #0]
 8003240:	f107 0108 	add.w	r1, r7, #8
 8003244:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003248:	2200      	movs	r2, #0
 800324a:	f009 f9d3 	bl	800c5f4 <osMessageQueueGet>

		switch (RX.Message[0]) {
 800324e:	7a3b      	ldrb	r3, [r7, #8]
 8003250:	2b4f      	cmp	r3, #79	; 0x4f
 8003252:	d01a      	beq.n	800328a <decode+0x56>
 8003254:	2b4f      	cmp	r3, #79	; 0x4f
 8003256:	dcf1      	bgt.n	800323c <decode+0x8>
 8003258:	2b48      	cmp	r3, #72	; 0x48
 800325a:	d002      	beq.n	8003262 <decode+0x2e>
 800325c:	2b4b      	cmp	r3, #75	; 0x4b
 800325e:	d02f      	beq.n	80032c0 <decode+0x8c>
 8003260:	e03e      	b.n	80032e0 <decode+0xac>
		case HANDSHAKE: {

			keyboard_count += 1;
 8003262:	4b21      	ldr	r3, [pc, #132]	; (80032e8 <decode+0xb4>)
 8003264:	781b      	ldrb	r3, [r3, #0]
 8003266:	b2db      	uxtb	r3, r3
 8003268:	3301      	adds	r3, #1
 800326a:	b2da      	uxtb	r2, r3
 800326c:	4b1e      	ldr	r3, [pc, #120]	; (80032e8 <decode+0xb4>)
 800326e:	701a      	strb	r2, [r3, #0]

			// not implemented
			if (RX.Message[1] == TERMINATE) {
 8003270:	7a7b      	ldrb	r3, [r7, #9]
 8003272:	2b58      	cmp	r3, #88	; 0x58
 8003274:	d133      	bne.n	80032de <decode+0xaa>

				handshakeRequest = 0;
 8003276:	4b1d      	ldr	r3, [pc, #116]	; (80032ec <decode+0xb8>)
 8003278:	2200      	movs	r2, #0
 800327a:	701a      	strb	r2, [r3, #0]

				outbits[5] = 1;
 800327c:	4b1c      	ldr	r3, [pc, #112]	; (80032f0 <decode+0xbc>)
 800327e:	2201      	movs	r2, #1
 8003280:	715a      	strb	r2, [r3, #5]
				outbits[6] = 1;
 8003282:	4b1b      	ldr	r3, [pc, #108]	; (80032f0 <decode+0xbc>)
 8003284:	2201      	movs	r2, #1
 8003286:	719a      	strb	r2, [r3, #6]

			}

		}
			break;
 8003288:	e029      	b.n	80032de <decode+0xaa>

		case OCTAVE_CHANGE: {
			octave = RX.Message[2] + keyboard_position - RX.Message[1];
 800328a:	7abb      	ldrb	r3, [r7, #10]
 800328c:	b29a      	uxth	r2, r3
 800328e:	4b19      	ldr	r3, [pc, #100]	; (80032f4 <decode+0xc0>)
 8003290:	781b      	ldrb	r3, [r3, #0]
 8003292:	b2db      	uxtb	r3, r3
 8003294:	b29b      	uxth	r3, r3
 8003296:	4413      	add	r3, r2
 8003298:	b29a      	uxth	r2, r3
 800329a:	7a7b      	ldrb	r3, [r7, #9]
 800329c:	b29b      	uxth	r3, r3
 800329e:	1ad3      	subs	r3, r2, r3
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	4b15      	ldr	r3, [pc, #84]	; (80032f8 <decode+0xc4>)
 80032a4:	801a      	strh	r2, [r3, #0]
			int8_t localDiff = keyboard_position - octave;
 80032a6:	4b13      	ldr	r3, [pc, #76]	; (80032f4 <decode+0xc0>)
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	b2da      	uxtb	r2, r3
 80032ac:	4b12      	ldr	r3, [pc, #72]	; (80032f8 <decode+0xc4>)
 80032ae:	881b      	ldrh	r3, [r3, #0]
 80032b0:	b2db      	uxtb	r3, r3
 80032b2:	1ad3      	subs	r3, r2, r3
 80032b4:	b2db      	uxtb	r3, r3
 80032b6:	75fb      	strb	r3, [r7, #23]
			__atomic_store_n(&pos_oct_diff, localDiff, __ATOMIC_RELAXED);
 80032b8:	7dfa      	ldrb	r2, [r7, #23]
 80032ba:	4b10      	ldr	r3, [pc, #64]	; (80032fc <decode+0xc8>)
 80032bc:	701a      	strb	r2, [r3, #0]
		}
			break;
 80032be:	e00f      	b.n	80032e0 <decode+0xac>

		case KEYS: {
			uint16_t localKeys = (uint16_t) RX.Message[2] << 8 | RX.Message[1];
 80032c0:	7abb      	ldrb	r3, [r7, #10]
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	b21a      	sxth	r2, r3
 80032c6:	7a7b      	ldrb	r3, [r7, #9]
 80032c8:	b21b      	sxth	r3, r3
 80032ca:	4313      	orrs	r3, r2
 80032cc:	b21b      	sxth	r3, r3
 80032ce:	82bb      	strh	r3, [r7, #20]
			allKeys[RX.Message[3]] = localKeys;
 80032d0:	7afb      	ldrb	r3, [r7, #11]
 80032d2:	4619      	mov	r1, r3
 80032d4:	4a0a      	ldr	r2, [pc, #40]	; (8003300 <decode+0xcc>)
 80032d6:	8abb      	ldrh	r3, [r7, #20]
 80032d8:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
		}
			break;
 80032dc:	e000      	b.n	80032e0 <decode+0xac>
			break;
 80032de:	bf00      	nop
		osMessageQueueGet(msgInQHandle, &RX, NULL, osWaitForever);
 80032e0:	e7ac      	b.n	800323c <decode+0x8>
 80032e2:	bf00      	nop
 80032e4:	200002e0 	.word	0x200002e0
 80032e8:	20000000 	.word	0x20000000
 80032ec:	200002ee 	.word	0x200002ee
 80032f0:	20000004 	.word	0x20000004
 80032f4:	20000720 	.word	0x20000720
 80032f8:	20000014 	.word	0x20000014
 80032fc:	20000016 	.word	0x20000016
 8003300:	2000067c 	.word	0x2000067c

08003304 <CAN_Transmit>:

	}

}

void CAN_Transmit(void *argument) {
 8003304:	b580      	push	{r7, lr}
 8003306:	b086      	sub	sp, #24
 8003308:	af00      	add	r7, sp, #0
 800330a:	6078      	str	r0, [r7, #4]
		osMessageQueuePut(msgOutQHandle, &TX, 0, 0);

		htim15.Instance->CNT = 0;
#endif

		osMessageQueueGet(msgOutQHandle, &TX, NULL, osWaitForever);
 800330c:	4b0b      	ldr	r3, [pc, #44]	; (800333c <CAN_Transmit+0x38>)
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	f107 010c 	add.w	r1, r7, #12
 8003314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003318:	2200      	movs	r2, #0
 800331a:	f009 f96b 	bl	800c5f4 <osMessageQueueGet>
		osSemaphoreAcquire(CAN_TX_SemaphoreHandle, osWaitForever);
 800331e:	4b08      	ldr	r3, [pc, #32]	; (8003340 <CAN_Transmit+0x3c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003326:	4618      	mov	r0, r3
 8003328:	f008 fffa 	bl	800c320 <osSemaphoreAcquire>
		CAN_TX(TX.ID, TX.Message);
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	f107 020c 	add.w	r2, r7, #12
 8003332:	4611      	mov	r1, r2
 8003334:	4618      	mov	r0, r3
 8003336:	f000 f8d1 	bl	80034dc <CAN_TX>
		osMessageQueueGet(msgOutQHandle, &TX, NULL, osWaitForever);
 800333a:	e7e7      	b.n	800330c <CAN_Transmit+0x8>
 800333c:	200002e4 	.word	0x200002e4
 8003340:	200002dc 	.word	0x200002dc

08003344 <handshake>:
#endif

	}
}

void handshake(void *argument) {
 8003344:	b580      	push	{r7, lr}
 8003346:	b088      	sub	sp, #32
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]

	// write the outgoing handshaking signals to high
	outbits[5] = 1;
 800334c:	4b3e      	ldr	r3, [pc, #248]	; (8003448 <handshake+0x104>)
 800334e:	2201      	movs	r2, #1
 8003350:	715a      	strb	r2, [r3, #5]
	outbits[6] = 1;
 8003352:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <handshake+0x104>)
 8003354:	2201      	movs	r2, #1
 8003356:	719a      	strb	r2, [r3, #6]

	// wait until other modules turn on
	osDelay(1000);
 8003358:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800335c:	f008 fd44 	bl	800bde8 <osDelay>

	// the keyboards turn off their east outgoing signal in turn
	// starting from the leftmost keyboard

	// wait for the west-side handshaking signal to go high
	while (!HKIW) {
 8003360:	e002      	b.n	8003368 <handshake+0x24>
		osDelay(100);
 8003362:	2064      	movs	r0, #100	; 0x64
 8003364:	f008 fd40 	bl	800bde8 <osDelay>
	while (!HKIW) {
 8003368:	4b38      	ldr	r3, [pc, #224]	; (800344c <handshake+0x108>)
 800336a:	781b      	ldrb	r3, [r3, #0]
 800336c:	b2db      	uxtb	r3, r3
 800336e:	f083 0301 	eor.w	r3, r3, #1
 8003372:	b2db      	uxtb	r3, r3
 8003374:	2b00      	cmp	r3, #0
 8003376:	d1f4      	bne.n	8003362 <handshake+0x1e>
	}

	// keyboard_count is incremented at every received CAN message
	// -> see the decode task
	uint8_t localPosition = keyboard_count - 1;
 8003378:	4b35      	ldr	r3, [pc, #212]	; (8003450 <handshake+0x10c>)
 800337a:	781b      	ldrb	r3, [r3, #0]
 800337c:	b2db      	uxtb	r3, r3
 800337e:	3b01      	subs	r3, #1
 8003380:	77fb      	strb	r3, [r7, #31]
	__atomic_store_n(&keyboard_position, localPosition, __ATOMIC_RELAXED);
 8003382:	4a34      	ldr	r2, [pc, #208]	; (8003454 <handshake+0x110>)
 8003384:	7ffb      	ldrb	r3, [r7, #31]
 8003386:	7013      	strb	r3, [r2, #0]
	uint8_t localOctave = keyboard_position + 4;
 8003388:	4b32      	ldr	r3, [pc, #200]	; (8003454 <handshake+0x110>)
 800338a:	781b      	ldrb	r3, [r3, #0]
 800338c:	b2db      	uxtb	r3, r3
 800338e:	3304      	adds	r3, #4
 8003390:	77bb      	strb	r3, [r7, #30]
	__atomic_store_n(&octave, localOctave, __ATOMIC_RELAXED);
 8003392:	7fbb      	ldrb	r3, [r7, #30]
 8003394:	b29a      	uxth	r2, r3
 8003396:	4b30      	ldr	r3, [pc, #192]	; (8003458 <handshake+0x114>)
 8003398:	801a      	strh	r2, [r3, #0]
	int8_t localDiff = keyboard_position - octave;
 800339a:	4b2e      	ldr	r3, [pc, #184]	; (8003454 <handshake+0x110>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	b2da      	uxtb	r2, r3
 80033a0:	4b2d      	ldr	r3, [pc, #180]	; (8003458 <handshake+0x114>)
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	1ad3      	subs	r3, r2, r3
 80033a8:	b2db      	uxtb	r3, r3
 80033aa:	777b      	strb	r3, [r7, #29]
	__atomic_store_n(&pos_oct_diff, localDiff, __ATOMIC_RELAXED);
 80033ac:	7f7a      	ldrb	r2, [r7, #29]
 80033ae:	4b2b      	ldr	r3, [pc, #172]	; (800345c <handshake+0x118>)
 80033b0:	701a      	strb	r2, [r3, #0]
	// inform other keyboards
	// send unique ID and position as per instructions

	CanMsg_t TX;

	TX.ID = IDout;
 80033b2:	f240 1323 	movw	r3, #291	; 0x123
 80033b6:	617b      	str	r3, [r7, #20]
	TX.Message[0] = 'H';
 80033b8:	2348      	movs	r3, #72	; 0x48
 80033ba:	733b      	strb	r3, [r7, #12]
	TX.Message[1] = (uint8_t) (UID0 & 0xF000) >> 24;
 80033bc:	2300      	movs	r3, #0
 80033be:	737b      	strb	r3, [r7, #13]
	TX.Message[2] = (uint8_t) (UID0 & 0x0F00) >> 16;
 80033c0:	2300      	movs	r3, #0
 80033c2:	73bb      	strb	r3, [r7, #14]
	TX.Message[3] = (uint8_t) (UID0 & 0x00F0) >> 8;
 80033c4:	2300      	movs	r3, #0
 80033c6:	73fb      	strb	r3, [r7, #15]
	TX.Message[4] = (uint8_t) (UID0 & 0x000F);
 80033c8:	4b25      	ldr	r3, [pc, #148]	; (8003460 <handshake+0x11c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	b2db      	uxtb	r3, r3
 80033ce:	f003 030f 	and.w	r3, r3, #15
 80033d2:	b2db      	uxtb	r3, r3
 80033d4:	743b      	strb	r3, [r7, #16]
	TX.Message[5] = localPosition;
 80033d6:	7ffb      	ldrb	r3, [r7, #31]
 80033d8:	747b      	strb	r3, [r7, #17]

	osMessageQueuePut(msgOutQHandle, &TX, 0, 0);
 80033da:	4b22      	ldr	r3, [pc, #136]	; (8003464 <handshake+0x120>)
 80033dc:	6818      	ldr	r0, [r3, #0]
 80033de:	f107 010c 	add.w	r1, r7, #12
 80033e2:	2300      	movs	r3, #0
 80033e4:	2200      	movs	r2, #0
 80033e6:	f009 f8a5 	bl	800c534 <osMessageQueuePut>

	osDelay(100);
 80033ea:	2064      	movs	r0, #100	; 0x64
 80033ec:	f008 fcfc 	bl	800bde8 <osDelay>

	// turn off the east outgoing signal to inform the next keyboard
	outbits[6] = 0;
 80033f0:	4b15      	ldr	r3, [pc, #84]	; (8003448 <handshake+0x104>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	719a      	strb	r2, [r3, #6]

	const TickType_t xFrequency = 1000 / portTICK_PERIOD_MS;
 80033f6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80033fa:	61bb      	str	r3, [r7, #24]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80033fc:	f00b f878 	bl	800e4f0 <xTaskGetTickCount>
 8003400:	4603      	mov	r3, r0
 8003402:	60bb      	str	r3, [r7, #8]

	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8003404:	f107 0308 	add.w	r3, r7, #8
 8003408:	69b9      	ldr	r1, [r7, #24]
 800340a:	4618      	mov	r0, r3
 800340c:	f00a fea2 	bl	800e154 <vTaskDelayUntil>
#ifdef TIMING_TEST
		selected = 1;
    	htim15.Instance->CNT = 0;
#endif

		if (selected) {
 8003410:	4b15      	ldr	r3, [pc, #84]	; (8003468 <handshake+0x124>)
 8003412:	781b      	ldrb	r3, [r3, #0]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d0f5      	beq.n	8003404 <handshake+0xc0>

			is_receiver = !is_receiver;
 8003418:	4b14      	ldr	r3, [pc, #80]	; (800346c <handshake+0x128>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	2b00      	cmp	r3, #0
 800341e:	bf14      	ite	ne
 8003420:	2301      	movne	r3, #1
 8003422:	2300      	moveq	r3, #0
 8003424:	b2db      	uxtb	r3, r3
 8003426:	f083 0301 	eor.w	r3, r3, #1
 800342a:	b2db      	uxtb	r3, r3
 800342c:	f003 0301 	and.w	r3, r3, #1
 8003430:	b2da      	uxtb	r2, r3
 8003432:	4b0e      	ldr	r3, [pc, #56]	; (800346c <handshake+0x128>)
 8003434:	701a      	strb	r2, [r3, #0]

			if (is_receiver) {
 8003436:	4b0d      	ldr	r3, [pc, #52]	; (800346c <handshake+0x128>)
 8003438:	781b      	ldrb	r3, [r3, #0]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d0e2      	beq.n	8003404 <handshake+0xc0>
				__atomic_store_n(&volume, 8, __ATOMIC_RELAXED);
 800343e:	4b0c      	ldr	r3, [pc, #48]	; (8003470 <handshake+0x12c>)
 8003440:	2208      	movs	r2, #8
 8003442:	701a      	strb	r2, [r3, #0]
		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8003444:	e7de      	b.n	8003404 <handshake+0xc0>
 8003446:	bf00      	nop
 8003448:	20000004 	.word	0x20000004
 800344c:	200002ec 	.word	0x200002ec
 8003450:	20000000 	.word	0x20000000
 8003454:	20000720 	.word	0x20000720
 8003458:	20000014 	.word	0x20000014
 800345c:	20000016 	.word	0x20000016
 8003460:	200002e8 	.word	0x200002e8
 8003464:	200002e4 	.word	0x200002e4
 8003468:	20000649 	.word	0x20000649
 800346c:	20000648 	.word	0x20000648
 8003470:	20000012 	.word	0x20000012

08003474 <setCANFilter>:

//---------------------
// CAN LIBRARY PROVIDED
//---------------------

uint32_t setCANFilter(uint32_t filterID, uint32_t maskID, uint32_t filterBank) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b08e      	sub	sp, #56	; 0x38
 8003478:	af00      	add	r7, sp, #0
 800347a:	60f8      	str	r0, [r7, #12]
 800347c:	60b9      	str	r1, [r7, #8]
 800347e:	607a      	str	r2, [r7, #4]

	CAN_FilterTypeDef filterInfo = { 0 };
 8003480:	f107 0310 	add.w	r3, r7, #16
 8003484:	2228      	movs	r2, #40	; 0x28
 8003486:	2100      	movs	r1, #0
 8003488:	4618      	mov	r0, r3
 800348a:	f00c fdf9 	bl	8010080 <memset>

	filterInfo.FilterIdHigh = (filterID << 5) & 0xffe0;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	015b      	lsls	r3, r3, #5
 8003492:	b29b      	uxth	r3, r3
 8003494:	613b      	str	r3, [r7, #16]
	filterInfo.FilterIdLow = 0;
 8003496:	2300      	movs	r3, #0
 8003498:	617b      	str	r3, [r7, #20]
	filterInfo.FilterMaskIdHigh = (maskID << 5) & 0xffe0;
 800349a:	68bb      	ldr	r3, [r7, #8]
 800349c:	015b      	lsls	r3, r3, #5
 800349e:	b29b      	uxth	r3, r3
 80034a0:	61bb      	str	r3, [r7, #24]
	filterInfo.FilterMaskIdLow = 0;
 80034a2:	2300      	movs	r3, #0
 80034a4:	61fb      	str	r3, [r7, #28]
	filterInfo.FilterFIFOAssignment = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	623b      	str	r3, [r7, #32]
	filterInfo.FilterBank = filterBank & 0xf;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f003 030f 	and.w	r3, r3, #15
 80034b0:	627b      	str	r3, [r7, #36]	; 0x24
	filterInfo.FilterMode = CAN_FILTERMODE_IDMASK;
 80034b2:	2300      	movs	r3, #0
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
	filterInfo.FilterScale = CAN_FILTERSCALE_32BIT;
 80034b6:	2301      	movs	r3, #1
 80034b8:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterInfo.FilterActivation = CAN_FILTER_ENABLE;
 80034ba:	2301      	movs	r3, #1
 80034bc:	633b      	str	r3, [r7, #48]	; 0x30
	filterInfo.SlaveStartFilterBank = 0;
 80034be:	2300      	movs	r3, #0
 80034c0:	637b      	str	r3, [r7, #52]	; 0x34

	return (uint32_t) HAL_CAN_ConfigFilter(&hcan1, &filterInfo);
 80034c2:	f107 0310 	add.w	r3, r7, #16
 80034c6:	4619      	mov	r1, r3
 80034c8:	4803      	ldr	r0, [pc, #12]	; (80034d8 <setCANFilter+0x64>)
 80034ca:	f003 fef8 	bl	80072be <HAL_CAN_ConfigFilter>
 80034ce:	4603      	mov	r3, r0

}
 80034d0:	4618      	mov	r0, r3
 80034d2:	3738      	adds	r7, #56	; 0x38
 80034d4:	46bd      	mov	sp, r7
 80034d6:	bd80      	pop	{r7, pc}
 80034d8:	20000354 	.word	0x20000354

080034dc <CAN_TX>:

uint32_t CAN_TX(uint32_t ID, uint8_t data[8]) {
 80034dc:	b580      	push	{r7, lr}
 80034de:	b088      	sub	sp, #32
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]

	CAN_TxHeaderTypeDef txHeader = { 0 };
 80034e6:	f107 0308 	add.w	r3, r7, #8
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]
 80034ee:	605a      	str	r2, [r3, #4]
 80034f0:	609a      	str	r2, [r3, #8]
 80034f2:	60da      	str	r2, [r3, #12]
 80034f4:	611a      	str	r2, [r3, #16]
 80034f6:	615a      	str	r2, [r3, #20]

	txHeader.StdId = ID & 0x7ff;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80034fe:	60bb      	str	r3, [r7, #8]
	txHeader.ExtId = 0;
 8003500:	2300      	movs	r3, #0
 8003502:	60fb      	str	r3, [r7, #12]
	txHeader.IDE = CAN_ID_STD;
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]
	txHeader.RTR = CAN_RTR_DATA;
 8003508:	2300      	movs	r3, #0
 800350a:	617b      	str	r3, [r7, #20]
	txHeader.DLC = 8;
 800350c:	2308      	movs	r3, #8
 800350e:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 8003510:	2300      	movs	r3, #0
 8003512:	773b      	strb	r3, [r7, #28]

	while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1))
 8003514:	bf00      	nop
 8003516:	4809      	ldr	r0, [pc, #36]	; (800353c <CAN_TX+0x60>)
 8003518:	f004 f8af 	bl	800767a <HAL_CAN_GetTxMailboxesFreeLevel>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d0f9      	beq.n	8003516 <CAN_TX+0x3a>
		;

	return (uint32_t) HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, NULL);
 8003522:	f107 0108 	add.w	r1, r7, #8
 8003526:	2300      	movs	r3, #0
 8003528:	683a      	ldr	r2, [r7, #0]
 800352a:	4804      	ldr	r0, [pc, #16]	; (800353c <CAN_TX+0x60>)
 800352c:	f003 ffd5 	bl	80074da <HAL_CAN_AddTxMessage>
 8003530:	4603      	mov	r3, r0

}
 8003532:	4618      	mov	r0, r3
 8003534:	3720      	adds	r7, #32
 8003536:	46bd      	mov	sp, r7
 8003538:	bd80      	pop	{r7, pc}
 800353a:	bf00      	nop
 800353c:	20000354 	.word	0x20000354

08003540 <CAN_RX>:

	return HAL_CAN_GetRxFifoFillLevel(&hcan1, 0);

}

uint32_t CAN_RX(uint32_t *ID, uint8_t data[8]) {
 8003540:	b580      	push	{r7, lr}
 8003542:	b08a      	sub	sp, #40	; 0x28
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
 8003548:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef rxHeader;

	while (!HAL_CAN_GetRxFifoFillLevel(&hcan1, 0))
 800354a:	bf00      	nop
 800354c:	2100      	movs	r1, #0
 800354e:	480b      	ldr	r0, [pc, #44]	; (800357c <CAN_RX+0x3c>)
 8003550:	f004 f9da 	bl	8007908 <HAL_CAN_GetRxFifoFillLevel>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f8      	beq.n	800354c <CAN_RX+0xc>
		;

	uint32_t result = (uint32_t) HAL_CAN_GetRxMessage(&hcan1, 0, &rxHeader,
 800355a:	f107 0208 	add.w	r2, r7, #8
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	2100      	movs	r1, #0
 8003562:	4806      	ldr	r0, [pc, #24]	; (800357c <CAN_RX+0x3c>)
 8003564:	f004 f8be 	bl	80076e4 <HAL_CAN_GetRxMessage>
 8003568:	4603      	mov	r3, r0
 800356a:	627b      	str	r3, [r7, #36]	; 0x24
			data);

	*ID = rxHeader.StdId;
 800356c:	68ba      	ldr	r2, [r7, #8]
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	601a      	str	r2, [r3, #0]

	return result;
 8003572:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 8003574:	4618      	mov	r0, r3
 8003576:	3728      	adds	r7, #40	; 0x28
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	20000354 	.word	0x20000354

08003580 <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003580:	b580      	push	{r7, lr}
 8003582:	b086      	sub	sp, #24
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
#ifdef CANRX_TEST
	htim15.Instance->CNT = 0;
#endif

	CanMsg_t RX;
	CAN_RX(&RX.ID, RX.Message);
 8003588:	f107 020c 	add.w	r2, r7, #12
 800358c:	f107 030c 	add.w	r3, r7, #12
 8003590:	3308      	adds	r3, #8
 8003592:	4611      	mov	r1, r2
 8003594:	4618      	mov	r0, r3
 8003596:	f7ff ffd3 	bl	8003540 <CAN_RX>
	osMessageQueuePut(msgInQHandle, &RX.Message, 0, 0);
 800359a:	4b06      	ldr	r3, [pc, #24]	; (80035b4 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800359c:	6818      	ldr	r0, [r3, #0]
 800359e:	f107 010c 	add.w	r1, r7, #12
 80035a2:	2300      	movs	r3, #0
 80035a4:	2200      	movs	r2, #0
 80035a6:	f008 ffc5 	bl	800c534 <osMessageQueuePut>
	char timBuf[10];
	sprintf(timBuf, "%lu", htim15.Instance->CNT);
	serialPrintln(timBuf);
#endif

}
 80035aa:	bf00      	nop
 80035ac:	3718      	adds	r7, #24
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bd80      	pop	{r7, pc}
 80035b2:	bf00      	nop
 80035b4:	200002e0 	.word	0x200002e0

080035b8 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 80035b8:	b580      	push	{r7, lr}
 80035ba:	b082      	sub	sp, #8
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80035c0:	4b04      	ldr	r3, [pc, #16]	; (80035d4 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f008 fefd 	bl	800c3c4 <osSemaphoreRelease>
}
 80035ca:	bf00      	nop
 80035cc:	3708      	adds	r7, #8
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}
 80035d2:	bf00      	nop
 80035d4:	200002dc 	.word	0x200002dc

080035d8 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
 80035de:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80035e0:	4b04      	ldr	r3, [pc, #16]	; (80035f4 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4618      	mov	r0, r3
 80035e6:	f008 feed 	bl	800c3c4 <osSemaphoreRelease>
}
 80035ea:	bf00      	nop
 80035ec:	3708      	adds	r7, #8
 80035ee:	46bd      	mov	sp, r7
 80035f0:	bd80      	pop	{r7, pc}
 80035f2:	bf00      	nop
 80035f4:	200002dc 	.word	0x200002dc

080035f8 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 8003600:	4b04      	ldr	r3, [pc, #16]	; (8003614 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	4618      	mov	r0, r3
 8003606:	f008 fedd 	bl	800c3c4 <osSemaphoreRelease>
}
 800360a:	bf00      	nop
 800360c:	3708      	adds	r7, #8
 800360e:	46bd      	mov	sp, r7
 8003610:	bd80      	pop	{r7, pc}
 8003612:	bf00      	nop
 8003614:	200002dc 	.word	0x200002dc

08003618 <MX_DMA_Init>:
UART_HandleTypeDef huart2;

DMA_HandleTypeDef hdma_memtomem_dma1_channel1;

//Enable DMA controller clock
void MX_DMA_Init(void) {
 8003618:	b580      	push	{r7, lr}
 800361a:	b082      	sub	sp, #8
 800361c:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800361e:	4b27      	ldr	r3, [pc, #156]	; (80036bc <MX_DMA_Init+0xa4>)
 8003620:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003622:	4a26      	ldr	r2, [pc, #152]	; (80036bc <MX_DMA_Init+0xa4>)
 8003624:	f043 0301 	orr.w	r3, r3, #1
 8003628:	6493      	str	r3, [r2, #72]	; 0x48
 800362a:	4b24      	ldr	r3, [pc, #144]	; (80036bc <MX_DMA_Init+0xa4>)
 800362c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800362e:	f003 0301 	and.w	r3, r3, #1
 8003632:	607b      	str	r3, [r7, #4]
 8003634:	687b      	ldr	r3, [r7, #4]

	/* Configure DMA request hdma_memtomem_dma1_channel1 on DMA1_Channel1 */
	hdma_memtomem_dma1_channel1.Instance = DMA1_Channel1;
 8003636:	4b22      	ldr	r3, [pc, #136]	; (80036c0 <MX_DMA_Init+0xa8>)
 8003638:	4a22      	ldr	r2, [pc, #136]	; (80036c4 <MX_DMA_Init+0xac>)
 800363a:	601a      	str	r2, [r3, #0]
	hdma_memtomem_dma1_channel1.Init.Request = DMA_REQUEST_0;
 800363c:	4b20      	ldr	r3, [pc, #128]	; (80036c0 <MX_DMA_Init+0xa8>)
 800363e:	2200      	movs	r2, #0
 8003640:	605a      	str	r2, [r3, #4]
	hdma_memtomem_dma1_channel1.Init.Direction = DMA_MEMORY_TO_MEMORY;
 8003642:	4b1f      	ldr	r3, [pc, #124]	; (80036c0 <MX_DMA_Init+0xa8>)
 8003644:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003648:	609a      	str	r2, [r3, #8]
	hdma_memtomem_dma1_channel1.Init.PeriphInc = DMA_PINC_ENABLE;
 800364a:	4b1d      	ldr	r3, [pc, #116]	; (80036c0 <MX_DMA_Init+0xa8>)
 800364c:	2240      	movs	r2, #64	; 0x40
 800364e:	60da      	str	r2, [r3, #12]
	hdma_memtomem_dma1_channel1.Init.MemInc = DMA_MINC_ENABLE;
 8003650:	4b1b      	ldr	r3, [pc, #108]	; (80036c0 <MX_DMA_Init+0xa8>)
 8003652:	2280      	movs	r2, #128	; 0x80
 8003654:	611a      	str	r2, [r3, #16]
	hdma_memtomem_dma1_channel1.Init.PeriphDataAlignment =
 8003656:	4b1a      	ldr	r3, [pc, #104]	; (80036c0 <MX_DMA_Init+0xa8>)
 8003658:	f44f 7280 	mov.w	r2, #256	; 0x100
 800365c:	615a      	str	r2, [r3, #20]
	DMA_PDATAALIGN_HALFWORD;
	hdma_memtomem_dma1_channel1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 800365e:	4b18      	ldr	r3, [pc, #96]	; (80036c0 <MX_DMA_Init+0xa8>)
 8003660:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003664:	619a      	str	r2, [r3, #24]
	hdma_memtomem_dma1_channel1.Init.Mode = DMA_NORMAL;
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <MX_DMA_Init+0xa8>)
 8003668:	2200      	movs	r2, #0
 800366a:	61da      	str	r2, [r3, #28]
	hdma_memtomem_dma1_channel1.Init.Priority = DMA_PRIORITY_HIGH;
 800366c:	4b14      	ldr	r3, [pc, #80]	; (80036c0 <MX_DMA_Init+0xa8>)
 800366e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003672:	621a      	str	r2, [r3, #32]
	if (HAL_DMA_Init(&hdma_memtomem_dma1_channel1) != HAL_OK) {
 8003674:	4812      	ldr	r0, [pc, #72]	; (80036c0 <MX_DMA_Init+0xa8>)
 8003676:	f004 ff93 	bl	80085a0 <HAL_DMA_Init>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d001      	beq.n	8003684 <MX_DMA_Init+0x6c>
		Error_Handler();
 8003680:	f001 fa04 	bl	8004a8c <Error_Handler>
	}

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8003684:	2200      	movs	r2, #0
 8003686:	2105      	movs	r1, #5
 8003688:	200b      	movs	r0, #11
 800368a:	f004 fc55 	bl	8007f38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800368e:	200b      	movs	r0, #11
 8003690:	f004 fc6e 	bl	8007f70 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel3_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 8003694:	2200      	movs	r2, #0
 8003696:	2105      	movs	r1, #5
 8003698:	200d      	movs	r0, #13
 800369a:	f004 fc4d 	bl	8007f38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 800369e:	200d      	movs	r0, #13
 80036a0:	f004 fc66 	bl	8007f70 <HAL_NVIC_EnableIRQ>
	/* DMA1_Channel4_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 5, 0);
 80036a4:	2200      	movs	r2, #0
 80036a6:	2105      	movs	r1, #5
 80036a8:	200e      	movs	r0, #14
 80036aa:	f004 fc45 	bl	8007f38 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80036ae:	200e      	movs	r0, #14
 80036b0:	f004 fc5e 	bl	8007f70 <HAL_NVIC_EnableIRQ>

}
 80036b4:	bf00      	nop
 80036b6:	3708      	adds	r7, #8
 80036b8:	46bd      	mov	sp, r7
 80036ba:	bd80      	pop	{r7, pc}
 80036bc:	40021000 	.word	0x40021000
 80036c0:	200005dc 	.word	0x200005dc
 80036c4:	40020008 	.word	0x40020008

080036c8 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b096      	sub	sp, #88	; 0x58
 80036cc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80036ce:	f107 0314 	add.w	r3, r7, #20
 80036d2:	2244      	movs	r2, #68	; 0x44
 80036d4:	2100      	movs	r1, #0
 80036d6:	4618      	mov	r0, r3
 80036d8:	f00c fcd2 	bl	8010080 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80036dc:	463b      	mov	r3, r7
 80036de:	2200      	movs	r2, #0
 80036e0:	601a      	str	r2, [r3, #0]
 80036e2:	605a      	str	r2, [r3, #4]
 80036e4:	609a      	str	r2, [r3, #8]
 80036e6:	60da      	str	r2, [r3, #12]
 80036e8:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 80036ea:	f44f 7000 	mov.w	r0, #512	; 0x200
 80036ee:	f005 ff5b 	bl	80095a8 <HAL_PWREx_ControlVoltageScaling>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d001      	beq.n	80036fc <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 80036f8:	f001 f9c8 	bl	8004a8c <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 80036fc:	f005 ff36 	bl	800956c <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8003700:	4b21      	ldr	r3, [pc, #132]	; (8003788 <SystemClock_Config+0xc0>)
 8003702:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003706:	4a20      	ldr	r2, [pc, #128]	; (8003788 <SystemClock_Config+0xc0>)
 8003708:	f023 0318 	bic.w	r3, r3, #24
 800370c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8003710:	2314      	movs	r3, #20
 8003712:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003714:	2301      	movs	r3, #1
 8003716:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003718:	2301      	movs	r3, #1
 800371a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 800371c:	2300      	movs	r3, #0
 800371e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003720:	2360      	movs	r3, #96	; 0x60
 8003722:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003724:	2302      	movs	r3, #2
 8003726:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003728:	2301      	movs	r3, #1
 800372a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 800372c:	2301      	movs	r3, #1
 800372e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8003730:	2328      	movs	r3, #40	; 0x28
 8003732:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003734:	2307      	movs	r3, #7
 8003736:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003738:	2302      	movs	r3, #2
 800373a:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800373c:	2302      	movs	r3, #2
 800373e:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8003740:	f107 0314 	add.w	r3, r7, #20
 8003744:	4618      	mov	r0, r3
 8003746:	f005 ff85 	bl	8009654 <HAL_RCC_OscConfig>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <SystemClock_Config+0x8c>
		Error_Handler();
 8003750:	f001 f99c 	bl	8004a8c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8003754:	230f      	movs	r3, #15
 8003756:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003758:	2303      	movs	r3, #3
 800375a:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800375c:	2300      	movs	r3, #0
 800375e:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003760:	2300      	movs	r3, #0
 8003762:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003764:	2300      	movs	r3, #0
 8003766:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8003768:	463b      	mov	r3, r7
 800376a:	2104      	movs	r1, #4
 800376c:	4618      	mov	r0, r3
 800376e:	f006 fb85 	bl	8009e7c <HAL_RCC_ClockConfig>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d001      	beq.n	800377c <SystemClock_Config+0xb4>
		Error_Handler();
 8003778:	f001 f988 	bl	8004a8c <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 800377c:	f006 ffca 	bl	800a714 <HAL_RCCEx_EnableMSIPLLMode>
}
 8003780:	bf00      	nop
 8003782:	3758      	adds	r7, #88	; 0x58
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	40021000 	.word	0x40021000

0800378c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
void MX_ADC1_Init(void) {
 800378c:	b580      	push	{r7, lr}
 800378e:	b086      	sub	sp, #24
 8003790:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8003792:	463b      	mov	r3, r7
 8003794:	2200      	movs	r2, #0
 8003796:	601a      	str	r2, [r3, #0]
 8003798:	605a      	str	r2, [r3, #4]
 800379a:	609a      	str	r2, [r3, #8]
 800379c:	60da      	str	r2, [r3, #12]
 800379e:	611a      	str	r2, [r3, #16]
 80037a0:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80037a2:	4b29      	ldr	r3, [pc, #164]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037a4:	4a29      	ldr	r2, [pc, #164]	; (800384c <MX_ADC1_Init+0xc0>)
 80037a6:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80037a8:	4b27      	ldr	r3, [pc, #156]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037aa:	2200      	movs	r2, #0
 80037ac:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80037ae:	4b26      	ldr	r3, [pc, #152]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037b0:	2200      	movs	r2, #0
 80037b2:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80037b4:	4b24      	ldr	r3, [pc, #144]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037b6:	2200      	movs	r2, #0
 80037b8:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80037ba:	4b23      	ldr	r3, [pc, #140]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037bc:	2200      	movs	r2, #0
 80037be:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80037c0:	4b21      	ldr	r3, [pc, #132]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037c2:	2204      	movs	r2, #4
 80037c4:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80037c6:	4b20      	ldr	r3, [pc, #128]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037c8:	2200      	movs	r2, #0
 80037ca:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80037cc:	4b1e      	ldr	r3, [pc, #120]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037ce:	2200      	movs	r2, #0
 80037d0:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80037d2:	4b1d      	ldr	r3, [pc, #116]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037d4:	2201      	movs	r2, #1
 80037d6:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80037d8:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037da:	2200      	movs	r2, #0
 80037dc:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80037e0:	4b19      	ldr	r3, [pc, #100]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037e2:	2200      	movs	r2, #0
 80037e4:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80037e6:	4b18      	ldr	r3, [pc, #96]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80037ec:	4b16      	ldr	r3, [pc, #88]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80037f4:	4b14      	ldr	r3, [pc, #80]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037f6:	2200      	movs	r2, #0
 80037f8:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80037fa:	4b13      	ldr	r3, [pc, #76]	; (8003848 <MX_ADC1_Init+0xbc>)
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003802:	4811      	ldr	r0, [pc, #68]	; (8003848 <MX_ADC1_Init+0xbc>)
 8003804:	f002 ff38 	bl	8006678 <HAL_ADC_Init>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d001      	beq.n	8003812 <MX_ADC1_Init+0x86>
		Error_Handler();
 800380e:	f001 f93d 	bl	8004a8c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8003812:	4b0f      	ldr	r3, [pc, #60]	; (8003850 <MX_ADC1_Init+0xc4>)
 8003814:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8003816:	2306      	movs	r3, #6
 8003818:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800381a:	2300      	movs	r3, #0
 800381c:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800381e:	237f      	movs	r3, #127	; 0x7f
 8003820:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8003822:	2304      	movs	r3, #4
 8003824:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 800382a:	463b      	mov	r3, r7
 800382c:	4619      	mov	r1, r3
 800382e:	4806      	ldr	r0, [pc, #24]	; (8003848 <MX_ADC1_Init+0xbc>)
 8003830:	f003 f86a 	bl	8006908 <HAL_ADC_ConfigChannel>
 8003834:	4603      	mov	r3, r0
 8003836:	2b00      	cmp	r3, #0
 8003838:	d001      	beq.n	800383e <MX_ADC1_Init+0xb2>
		Error_Handler();
 800383a:	f001 f927 	bl	8004a8c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 800383e:	bf00      	nop
 8003840:	3718      	adds	r7, #24
 8003842:	46bd      	mov	sp, r7
 8003844:	bd80      	pop	{r7, pc}
 8003846:	bf00      	nop
 8003848:	200002f0 	.word	0x200002f0
 800384c:	50040000 	.word	0x50040000
 8003850:	14f00020 	.word	0x14f00020

08003854 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
void MX_CAN1_Init(void) {
 8003854:	b580      	push	{r7, lr}
 8003856:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8003858:	4b18      	ldr	r3, [pc, #96]	; (80038bc <MX_CAN1_Init+0x68>)
 800385a:	4a19      	ldr	r2, [pc, #100]	; (80038c0 <MX_CAN1_Init+0x6c>)
 800385c:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 40;
 800385e:	4b17      	ldr	r3, [pc, #92]	; (80038bc <MX_CAN1_Init+0x68>)
 8003860:	2228      	movs	r2, #40	; 0x28
 8003862:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8003864:	4b15      	ldr	r3, [pc, #84]	; (80038bc <MX_CAN1_Init+0x68>)
 8003866:	2200      	movs	r2, #0
 8003868:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 800386a:	4b14      	ldr	r3, [pc, #80]	; (80038bc <MX_CAN1_Init+0x68>)
 800386c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003870:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8003872:	4b12      	ldr	r3, [pc, #72]	; (80038bc <MX_CAN1_Init+0x68>)
 8003874:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8003878:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 800387a:	4b10      	ldr	r3, [pc, #64]	; (80038bc <MX_CAN1_Init+0x68>)
 800387c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003880:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8003882:	4b0e      	ldr	r3, [pc, #56]	; (80038bc <MX_CAN1_Init+0x68>)
 8003884:	2200      	movs	r2, #0
 8003886:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8003888:	4b0c      	ldr	r3, [pc, #48]	; (80038bc <MX_CAN1_Init+0x68>)
 800388a:	2200      	movs	r2, #0
 800388c:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = ENABLE;
 800388e:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <MX_CAN1_Init+0x68>)
 8003890:	2201      	movs	r2, #1
 8003892:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8003894:	4b09      	ldr	r3, [pc, #36]	; (80038bc <MX_CAN1_Init+0x68>)
 8003896:	2201      	movs	r2, #1
 8003898:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 800389a:	4b08      	ldr	r3, [pc, #32]	; (80038bc <MX_CAN1_Init+0x68>)
 800389c:	2200      	movs	r2, #0
 800389e:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 80038a0:	4b06      	ldr	r3, [pc, #24]	; (80038bc <MX_CAN1_Init+0x68>)
 80038a2:	2201      	movs	r2, #1
 80038a4:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 80038a6:	4805      	ldr	r0, [pc, #20]	; (80038bc <MX_CAN1_Init+0x68>)
 80038a8:	f003 fc0e 	bl	80070c8 <HAL_CAN_Init>
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d001      	beq.n	80038b6 <MX_CAN1_Init+0x62>
		Error_Handler();
 80038b2:	f001 f8eb 	bl	8004a8c <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 80038b6:	bf00      	nop
 80038b8:	bd80      	pop	{r7, pc}
 80038ba:	bf00      	nop
 80038bc:	20000354 	.word	0x20000354
 80038c0:	40006400 	.word	0x40006400

080038c4 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
void MX_DAC1_Init(void) {
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b08a      	sub	sp, #40	; 0x28
 80038c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 80038ca:	1d3b      	adds	r3, r7, #4
 80038cc:	2224      	movs	r2, #36	; 0x24
 80038ce:	2100      	movs	r1, #0
 80038d0:	4618      	mov	r0, r3
 80038d2:	f00c fbd5 	bl	8010080 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 80038d6:	4b17      	ldr	r3, [pc, #92]	; (8003934 <MX_DAC1_Init+0x70>)
 80038d8:	4a17      	ldr	r2, [pc, #92]	; (8003938 <MX_DAC1_Init+0x74>)
 80038da:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 80038dc:	4815      	ldr	r0, [pc, #84]	; (8003934 <MX_DAC1_Init+0x70>)
 80038de:	f004 fb55 	bl	8007f8c <HAL_DAC_Init>
 80038e2:	4603      	mov	r3, r0
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d001      	beq.n	80038ec <MX_DAC1_Init+0x28>
		Error_Handler();
 80038e8:	f001 f8d0 	bl	8004a8c <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80038ec:	2300      	movs	r3, #0
 80038ee:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 80038f0:	2304      	movs	r3, #4
 80038f2:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80038f4:	2300      	movs	r3, #0
 80038f6:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 80038f8:	2300      	movs	r3, #0
 80038fa:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80038fc:	2300      	movs	r3, #0
 80038fe:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8003900:	1d3b      	adds	r3, r7, #4
 8003902:	2200      	movs	r2, #0
 8003904:	4619      	mov	r1, r3
 8003906:	480b      	ldr	r0, [pc, #44]	; (8003934 <MX_DAC1_Init+0x70>)
 8003908:	f004 fc9c 	bl	8008244 <HAL_DAC_ConfigChannel>
 800390c:	4603      	mov	r3, r0
 800390e:	2b00      	cmp	r3, #0
 8003910:	d001      	beq.n	8003916 <MX_DAC1_Init+0x52>
		Error_Handler();
 8003912:	f001 f8bb 	bl	8004a8c <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 8003916:	1d3b      	adds	r3, r7, #4
 8003918:	2210      	movs	r2, #16
 800391a:	4619      	mov	r1, r3
 800391c:	4805      	ldr	r0, [pc, #20]	; (8003934 <MX_DAC1_Init+0x70>)
 800391e:	f004 fc91 	bl	8008244 <HAL_DAC_ConfigChannel>
 8003922:	4603      	mov	r3, r0
 8003924:	2b00      	cmp	r3, #0
 8003926:	d001      	beq.n	800392c <MX_DAC1_Init+0x68>
		Error_Handler();
 8003928:	f001 f8b0 	bl	8004a8c <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 800392c:	bf00      	nop
 800392e:	3728      	adds	r7, #40	; 0x28
 8003930:	46bd      	mov	sp, r7
 8003932:	bd80      	pop	{r7, pc}
 8003934:	2000037c 	.word	0x2000037c
 8003938:	40007400 	.word	0x40007400

0800393c <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
void MX_I2C1_Init(void) {
 800393c:	b580      	push	{r7, lr}
 800393e:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8003940:	4b1d      	ldr	r3, [pc, #116]	; (80039b8 <MX_I2C1_Init+0x7c>)
 8003942:	4a1e      	ldr	r2, [pc, #120]	; (80039bc <MX_I2C1_Init+0x80>)
 8003944:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00300F33;
 8003946:	4b1c      	ldr	r3, [pc, #112]	; (80039b8 <MX_I2C1_Init+0x7c>)
 8003948:	4a1d      	ldr	r2, [pc, #116]	; (80039c0 <MX_I2C1_Init+0x84>)
 800394a:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 800394c:	4b1a      	ldr	r3, [pc, #104]	; (80039b8 <MX_I2C1_Init+0x7c>)
 800394e:	2200      	movs	r2, #0
 8003950:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003952:	4b19      	ldr	r3, [pc, #100]	; (80039b8 <MX_I2C1_Init+0x7c>)
 8003954:	2201      	movs	r2, #1
 8003956:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003958:	4b17      	ldr	r3, [pc, #92]	; (80039b8 <MX_I2C1_Init+0x7c>)
 800395a:	2200      	movs	r2, #0
 800395c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 800395e:	4b16      	ldr	r3, [pc, #88]	; (80039b8 <MX_I2C1_Init+0x7c>)
 8003960:	2200      	movs	r2, #0
 8003962:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003964:	4b14      	ldr	r3, [pc, #80]	; (80039b8 <MX_I2C1_Init+0x7c>)
 8003966:	2200      	movs	r2, #0
 8003968:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800396a:	4b13      	ldr	r3, [pc, #76]	; (80039b8 <MX_I2C1_Init+0x7c>)
 800396c:	2200      	movs	r2, #0
 800396e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003970:	4b11      	ldr	r3, [pc, #68]	; (80039b8 <MX_I2C1_Init+0x7c>)
 8003972:	2200      	movs	r2, #0
 8003974:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8003976:	4810      	ldr	r0, [pc, #64]	; (80039b8 <MX_I2C1_Init+0x7c>)
 8003978:	f005 f9be 	bl	8008cf8 <HAL_I2C_Init>
 800397c:	4603      	mov	r3, r0
 800397e:	2b00      	cmp	r3, #0
 8003980:	d001      	beq.n	8003986 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8003982:	f001 f883 	bl	8004a8c <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8003986:	2100      	movs	r1, #0
 8003988:	480b      	ldr	r0, [pc, #44]	; (80039b8 <MX_I2C1_Init+0x7c>)
 800398a:	f005 fd37 	bl	80093fc <HAL_I2CEx_ConfigAnalogFilter>
 800398e:	4603      	mov	r3, r0
 8003990:	2b00      	cmp	r3, #0
 8003992:	d001      	beq.n	8003998 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8003994:	f001 f87a 	bl	8004a8c <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8003998:	2100      	movs	r1, #0
 800399a:	4807      	ldr	r0, [pc, #28]	; (80039b8 <MX_I2C1_Init+0x7c>)
 800399c:	f005 fd79 	bl	8009492 <HAL_I2CEx_ConfigDigitalFilter>
 80039a0:	4603      	mov	r3, r0
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d001      	beq.n	80039aa <MX_I2C1_Init+0x6e>
		Error_Handler();
 80039a6:	f001 f871 	bl	8004a8c <Error_Handler>
	}

	/** I2C Fast mode Plus enable
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80039aa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80039ae:	f005 fdbd 	bl	800952c <HAL_I2CEx_EnableFastModePlus>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 80039b2:	bf00      	nop
 80039b4:	bd80      	pop	{r7, pc}
 80039b6:	bf00      	nop
 80039b8:	20000420 	.word	0x20000420
 80039bc:	40005400 	.word	0x40005400
 80039c0:	00300f33 	.word	0x00300f33

080039c4 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM6_Init(void) {
 80039c4:	b580      	push	{r7, lr}
 80039c6:	b084      	sub	sp, #16
 80039c8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 80039ca:	1d3b      	adds	r3, r7, #4
 80039cc:	2200      	movs	r2, #0
 80039ce:	601a      	str	r2, [r3, #0]
 80039d0:	605a      	str	r2, [r3, #4]
 80039d2:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 80039d4:	4b14      	ldr	r3, [pc, #80]	; (8003a28 <MX_TIM6_Init+0x64>)
 80039d6:	4a15      	ldr	r2, [pc, #84]	; (8003a2c <MX_TIM6_Init+0x68>)
 80039d8:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <MX_TIM6_Init+0x64>)
 80039dc:	2200      	movs	r2, #0
 80039de:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80039e0:	4b11      	ldr	r3, [pc, #68]	; (8003a28 <MX_TIM6_Init+0x64>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 1814 - 1;
 80039e6:	4b10      	ldr	r3, [pc, #64]	; (8003a28 <MX_TIM6_Init+0x64>)
 80039e8:	f240 7215 	movw	r2, #1813	; 0x715
 80039ec:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80039ee:	4b0e      	ldr	r3, [pc, #56]	; (8003a28 <MX_TIM6_Init+0x64>)
 80039f0:	2200      	movs	r2, #0
 80039f2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 80039f4:	480c      	ldr	r0, [pc, #48]	; (8003a28 <MX_TIM6_Init+0x64>)
 80039f6:	f006 ff8f 	bl	800a918 <HAL_TIM_Base_Init>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d001      	beq.n	8003a04 <MX_TIM6_Init+0x40>
		Error_Handler();
 8003a00:	f001 f844 	bl	8004a8c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003a04:	2320      	movs	r3, #32
 8003a06:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8003a0c:	1d3b      	adds	r3, r7, #4
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4805      	ldr	r0, [pc, #20]	; (8003a28 <MX_TIM6_Init+0x64>)
 8003a12:	f007 fb87 	bl	800b124 <HAL_TIMEx_MasterConfigSynchronization>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d001      	beq.n	8003a20 <MX_TIM6_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8003a1c:	f001 f836 	bl	8004a8c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8003a20:	bf00      	nop
 8003a22:	3710      	adds	r7, #16
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	20000474 	.word	0x20000474
 8003a2c:	40001000 	.word	0x40001000

08003a30 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM7_Init(void) {
 8003a30:	b580      	push	{r7, lr}
 8003a32:	b084      	sub	sp, #16
 8003a34:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003a36:	1d3b      	adds	r3, r7, #4
 8003a38:	2200      	movs	r2, #0
 8003a3a:	601a      	str	r2, [r3, #0]
 8003a3c:	605a      	str	r2, [r3, #4]
 8003a3e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8003a40:	4b14      	ldr	r3, [pc, #80]	; (8003a94 <MX_TIM7_Init+0x64>)
 8003a42:	4a15      	ldr	r2, [pc, #84]	; (8003a98 <MX_TIM7_Init+0x68>)
 8003a44:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 80 - 1;
 8003a46:	4b13      	ldr	r3, [pc, #76]	; (8003a94 <MX_TIM7_Init+0x64>)
 8003a48:	224f      	movs	r2, #79	; 0x4f
 8003a4a:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a4c:	4b11      	ldr	r3, [pc, #68]	; (8003a94 <MX_TIM7_Init+0x64>)
 8003a4e:	2200      	movs	r2, #0
 8003a50:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 1000 - 1;
 8003a52:	4b10      	ldr	r3, [pc, #64]	; (8003a94 <MX_TIM7_Init+0x64>)
 8003a54:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003a58:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a5a:	4b0e      	ldr	r3, [pc, #56]	; (8003a94 <MX_TIM7_Init+0x64>)
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003a60:	480c      	ldr	r0, [pc, #48]	; (8003a94 <MX_TIM7_Init+0x64>)
 8003a62:	f006 ff59 	bl	800a918 <HAL_TIM_Base_Init>
 8003a66:	4603      	mov	r3, r0
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d001      	beq.n	8003a70 <MX_TIM7_Init+0x40>
		Error_Handler();
 8003a6c:	f001 f80e 	bl	8004a8c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003a70:	2300      	movs	r3, #0
 8003a72:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003a74:	2300      	movs	r3, #0
 8003a76:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8003a78:	1d3b      	adds	r3, r7, #4
 8003a7a:	4619      	mov	r1, r3
 8003a7c:	4805      	ldr	r0, [pc, #20]	; (8003a94 <MX_TIM7_Init+0x64>)
 8003a7e:	f007 fb51 	bl	800b124 <HAL_TIMEx_MasterConfigSynchronization>
 8003a82:	4603      	mov	r3, r0
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d001      	beq.n	8003a8c <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8003a88:	f001 f800 	bl	8004a8c <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8003a8c:	bf00      	nop
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	200004c0 	.word	0x200004c0
 8003a98:	40001400 	.word	0x40001400

08003a9c <MX_TIM15_Init>:
/**
 * @brief TIM15 Initialization Function
 * @param None
 * @retval None
 */
void MX_TIM15_Init(void) {
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	b088      	sub	sp, #32
 8003aa0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM15_Init 0 */

	/* USER CODE END TIM15_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = { 0 };
 8003aa2:	f107 0310 	add.w	r3, r7, #16
 8003aa6:	2200      	movs	r2, #0
 8003aa8:	601a      	str	r2, [r3, #0]
 8003aaa:	605a      	str	r2, [r3, #4]
 8003aac:	609a      	str	r2, [r3, #8]
 8003aae:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8003ab0:	1d3b      	adds	r3, r7, #4
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	601a      	str	r2, [r3, #0]
 8003ab6:	605a      	str	r2, [r3, #4]
 8003ab8:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM15_Init 1 */

	/* USER CODE END TIM15_Init 1 */
	htim15.Instance = TIM15;
 8003aba:	4b1f      	ldr	r3, [pc, #124]	; (8003b38 <MX_TIM15_Init+0x9c>)
 8003abc:	4a1f      	ldr	r2, [pc, #124]	; (8003b3c <MX_TIM15_Init+0xa0>)
 8003abe:	601a      	str	r2, [r3, #0]
	htim15.Init.Prescaler = 80 - 1;
 8003ac0:	4b1d      	ldr	r3, [pc, #116]	; (8003b38 <MX_TIM15_Init+0x9c>)
 8003ac2:	224f      	movs	r2, #79	; 0x4f
 8003ac4:	605a      	str	r2, [r3, #4]
	htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ac6:	4b1c      	ldr	r3, [pc, #112]	; (8003b38 <MX_TIM15_Init+0x9c>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	609a      	str	r2, [r3, #8]
	htim15.Init.Period = 65535;
 8003acc:	4b1a      	ldr	r3, [pc, #104]	; (8003b38 <MX_TIM15_Init+0x9c>)
 8003ace:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8003ad2:	60da      	str	r2, [r3, #12]
	htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003ad4:	4b18      	ldr	r3, [pc, #96]	; (8003b38 <MX_TIM15_Init+0x9c>)
 8003ad6:	2200      	movs	r2, #0
 8003ad8:	611a      	str	r2, [r3, #16]
	htim15.Init.RepetitionCounter = 0;
 8003ada:	4b17      	ldr	r3, [pc, #92]	; (8003b38 <MX_TIM15_Init+0x9c>)
 8003adc:	2200      	movs	r2, #0
 8003ade:	615a      	str	r2, [r3, #20]
	htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003ae0:	4b15      	ldr	r3, [pc, #84]	; (8003b38 <MX_TIM15_Init+0x9c>)
 8003ae2:	2200      	movs	r2, #0
 8003ae4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim15) != HAL_OK) {
 8003ae6:	4814      	ldr	r0, [pc, #80]	; (8003b38 <MX_TIM15_Init+0x9c>)
 8003ae8:	f006 ff16 	bl	800a918 <HAL_TIM_Base_Init>
 8003aec:	4603      	mov	r3, r0
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d001      	beq.n	8003af6 <MX_TIM15_Init+0x5a>
		Error_Handler();
 8003af2:	f000 ffcb 	bl	8004a8c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003af6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003afa:	613b      	str	r3, [r7, #16]
	if (HAL_TIM_ConfigClockSource(&htim15, &sClockSourceConfig) != HAL_OK) {
 8003afc:	f107 0310 	add.w	r3, r7, #16
 8003b00:	4619      	mov	r1, r3
 8003b02:	480d      	ldr	r0, [pc, #52]	; (8003b38 <MX_TIM15_Init+0x9c>)
 8003b04:	f007 f91f 	bl	800ad46 <HAL_TIM_ConfigClockSource>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d001      	beq.n	8003b12 <MX_TIM15_Init+0x76>
		Error_Handler();
 8003b0e:	f000 ffbd 	bl	8004a8c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003b12:	2300      	movs	r3, #0
 8003b14:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003b16:	2300      	movs	r3, #0
 8003b18:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig)
 8003b1a:	1d3b      	adds	r3, r7, #4
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	4806      	ldr	r0, [pc, #24]	; (8003b38 <MX_TIM15_Init+0x9c>)
 8003b20:	f007 fb00 	bl	800b124 <HAL_TIMEx_MasterConfigSynchronization>
 8003b24:	4603      	mov	r3, r0
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d001      	beq.n	8003b2e <MX_TIM15_Init+0x92>
			!= HAL_OK) {
		Error_Handler();
 8003b2a:	f000 ffaf 	bl	8004a8c <Error_Handler>
	}
	/* USER CODE BEGIN TIM15_Init 2 */

	/* USER CODE END TIM15_Init 2 */

}
 8003b2e:	bf00      	nop
 8003b30:	3720      	adds	r7, #32
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	2000050c 	.word	0x2000050c
 8003b3c:	40014000 	.word	0x40014000

08003b40 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
void MX_USART2_UART_Init(void) {
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003b44:	4b14      	ldr	r3, [pc, #80]	; (8003b98 <MX_USART2_UART_Init+0x58>)
 8003b46:	4a15      	ldr	r2, [pc, #84]	; (8003b9c <MX_USART2_UART_Init+0x5c>)
 8003b48:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003b4a:	4b13      	ldr	r3, [pc, #76]	; (8003b98 <MX_USART2_UART_Init+0x58>)
 8003b4c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b50:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003b52:	4b11      	ldr	r3, [pc, #68]	; (8003b98 <MX_USART2_UART_Init+0x58>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003b58:	4b0f      	ldr	r3, [pc, #60]	; (8003b98 <MX_USART2_UART_Init+0x58>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8003b5e:	4b0e      	ldr	r3, [pc, #56]	; (8003b98 <MX_USART2_UART_Init+0x58>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003b64:	4b0c      	ldr	r3, [pc, #48]	; (8003b98 <MX_USART2_UART_Init+0x58>)
 8003b66:	220c      	movs	r2, #12
 8003b68:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b6a:	4b0b      	ldr	r3, [pc, #44]	; (8003b98 <MX_USART2_UART_Init+0x58>)
 8003b6c:	2200      	movs	r2, #0
 8003b6e:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b70:	4b09      	ldr	r3, [pc, #36]	; (8003b98 <MX_USART2_UART_Init+0x58>)
 8003b72:	2200      	movs	r2, #0
 8003b74:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003b76:	4b08      	ldr	r3, [pc, #32]	; (8003b98 <MX_USART2_UART_Init+0x58>)
 8003b78:	2200      	movs	r2, #0
 8003b7a:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003b7c:	4b06      	ldr	r3, [pc, #24]	; (8003b98 <MX_USART2_UART_Init+0x58>)
 8003b7e:	2200      	movs	r2, #0
 8003b80:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8003b82:	4805      	ldr	r0, [pc, #20]	; (8003b98 <MX_USART2_UART_Init+0x58>)
 8003b84:	f007 fb52 	bl	800b22c <HAL_UART_Init>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8003b8e:	f000 ff7d 	bl	8004a8c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8003b92:	bf00      	nop
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000558 	.word	0x20000558
 8003b9c:	40004400 	.word	0x40004400

08003ba0 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
void MX_GPIO_Init(void) {
 8003ba0:	b580      	push	{r7, lr}
 8003ba2:	b088      	sub	sp, #32
 8003ba4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8003ba6:	f107 030c 	add.w	r3, r7, #12
 8003baa:	2200      	movs	r2, #0
 8003bac:	601a      	str	r2, [r3, #0]
 8003bae:	605a      	str	r2, [r3, #4]
 8003bb0:	609a      	str	r2, [r3, #8]
 8003bb2:	60da      	str	r2, [r3, #12]
 8003bb4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8003bb6:	4b2f      	ldr	r3, [pc, #188]	; (8003c74 <MX_GPIO_Init+0xd4>)
 8003bb8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bba:	4a2e      	ldr	r2, [pc, #184]	; (8003c74 <MX_GPIO_Init+0xd4>)
 8003bbc:	f043 0304 	orr.w	r3, r3, #4
 8003bc0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bc2:	4b2c      	ldr	r3, [pc, #176]	; (8003c74 <MX_GPIO_Init+0xd4>)
 8003bc4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	60bb      	str	r3, [r7, #8]
 8003bcc:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8003bce:	4b29      	ldr	r3, [pc, #164]	; (8003c74 <MX_GPIO_Init+0xd4>)
 8003bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bd2:	4a28      	ldr	r2, [pc, #160]	; (8003c74 <MX_GPIO_Init+0xd4>)
 8003bd4:	f043 0301 	orr.w	r3, r3, #1
 8003bd8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bda:	4b26      	ldr	r3, [pc, #152]	; (8003c74 <MX_GPIO_Init+0xd4>)
 8003bdc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bde:	f003 0301 	and.w	r3, r3, #1
 8003be2:	607b      	str	r3, [r7, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8003be6:	4b23      	ldr	r3, [pc, #140]	; (8003c74 <MX_GPIO_Init+0xd4>)
 8003be8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bea:	4a22      	ldr	r2, [pc, #136]	; (8003c74 <MX_GPIO_Init+0xd4>)
 8003bec:	f043 0302 	orr.w	r3, r3, #2
 8003bf0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003bf2:	4b20      	ldr	r3, [pc, #128]	; (8003c74 <MX_GPIO_Init+0xd4>)
 8003bf4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	603b      	str	r3, [r7, #0]
 8003bfc:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003bfe:	2200      	movs	r2, #0
 8003c00:	2140      	movs	r1, #64	; 0x40
 8003c02:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c06:	f005 f845 	bl	8008c94 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8003c0a:	2200      	movs	r2, #0
 8003c0c:	213b      	movs	r1, #59	; 0x3b
 8003c0e:	481a      	ldr	r0, [pc, #104]	; (8003c78 <MX_GPIO_Init+0xd8>)
 8003c10:	f005 f840 	bl	8008c94 <HAL_GPIO_WritePin>
	RA0_Pin | RA1_Pin | LED_BUILTIN_Pin | RA2_Pin | OUT_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : C0_Pin C2_Pin C1_Pin C3_Pin */
	GPIO_InitStruct.Pin = C0_Pin | C2_Pin | C1_Pin | C3_Pin;
 8003c14:	f44f 7362 	mov.w	r3, #904	; 0x388
 8003c18:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c1e:	2300      	movs	r3, #0
 8003c20:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c22:	f107 030c 	add.w	r3, r7, #12
 8003c26:	4619      	mov	r1, r3
 8003c28:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c2c:	f004 feb0 	bl	8008990 <HAL_GPIO_Init>

	/*Configure GPIO pin : REN_Pin */
	GPIO_InitStruct.Pin = REN_Pin;
 8003c30:	2340      	movs	r3, #64	; 0x40
 8003c32:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c34:	2301      	movs	r3, #1
 8003c36:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c3c:	2300      	movs	r3, #0
 8003c3e:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(REN_GPIO_Port, &GPIO_InitStruct);
 8003c40:	f107 030c 	add.w	r3, r7, #12
 8003c44:	4619      	mov	r1, r3
 8003c46:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c4a:	f004 fea1 	bl	8008990 <HAL_GPIO_Init>

	/*Configure GPIO pins : RA0_Pin RA1_Pin LED_BUILTIN_Pin RA2_Pin
	 OUT_Pin */
	GPIO_InitStruct.Pin = RA0_Pin | RA1_Pin | LED_BUILTIN_Pin | RA2_Pin
 8003c4e:	233b      	movs	r3, #59	; 0x3b
 8003c50:	60fb      	str	r3, [r7, #12]
			| OUT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c52:	2301      	movs	r3, #1
 8003c54:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c56:	2300      	movs	r3, #0
 8003c58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c5a:	2300      	movs	r3, #0
 8003c5c:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c5e:	f107 030c 	add.w	r3, r7, #12
 8003c62:	4619      	mov	r1, r3
 8003c64:	4804      	ldr	r0, [pc, #16]	; (8003c78 <MX_GPIO_Init+0xd8>)
 8003c66:	f004 fe93 	bl	8008990 <HAL_GPIO_Init>

}
 8003c6a:	bf00      	nop
 8003c6c:	3720      	adds	r7, #32
 8003c6e:	46bd      	mov	sp, r7
 8003c70:	bd80      	pop	{r7, pc}
 8003c72:	bf00      	nop
 8003c74:	40021000 	.word	0x40021000
 8003c78:	48000400 	.word	0x48000400

08003c7c <u8x8_gpio_and_delay>:

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	60f8      	str	r0, [r7, #12]
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	460b      	mov	r3, r1
 8003c88:	72fb      	strb	r3, [r7, #11]
 8003c8a:	4613      	mov	r3, r2
 8003c8c:	72bb      	strb	r3, [r7, #10]
	return 1;
 8003c8e:	2301      	movs	r3, #1
}
 8003c90:	4618      	mov	r0, r3
 8003c92:	3714      	adds	r7, #20
 8003c94:	46bd      	mov	sp, r7
 8003c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9a:	4770      	bx	lr

08003c9c <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003c9c:	b580      	push	{r7, lr}
 8003c9e:	b088      	sub	sp, #32
 8003ca0:	af02      	add	r7, sp, #8
 8003ca2:	60f8      	str	r0, [r7, #12]
 8003ca4:	607b      	str	r3, [r7, #4]
 8003ca6:	460b      	mov	r3, r1
 8003ca8:	72fb      	strb	r3, [r7, #11]
 8003caa:	4613      	mov	r3, r2
 8003cac:	72bb      	strb	r3, [r7, #10]
	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch (msg) {
 8003cae:	7afb      	ldrb	r3, [r7, #11]
 8003cb0:	3b14      	subs	r3, #20
 8003cb2:	2b0c      	cmp	r3, #12
 8003cb4:	d847      	bhi.n	8003d46 <u8x8_byte_i2c+0xaa>
 8003cb6:	a201      	add	r2, pc, #4	; (adr r2, 8003cbc <u8x8_byte_i2c+0x20>)
 8003cb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cbc:	08003d4b 	.word	0x08003d4b
 8003cc0:	08003d47 	.word	0x08003d47
 8003cc4:	08003d47 	.word	0x08003d47
 8003cc8:	08003cf1 	.word	0x08003cf1
 8003ccc:	08003d21 	.word	0x08003d21
 8003cd0:	08003d29 	.word	0x08003d29
 8003cd4:	08003d47 	.word	0x08003d47
 8003cd8:	08003d47 	.word	0x08003d47
 8003cdc:	08003d47 	.word	0x08003d47
 8003ce0:	08003d47 	.word	0x08003d47
 8003ce4:	08003d47 	.word	0x08003d47
 8003ce8:	08003d47 	.word	0x08003d47
 8003cec:	08003d4b 	.word	0x08003d4b
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t*) arg_ptr;
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	617b      	str	r3, [r7, #20]
		while (arg_int > 0) {
 8003cf4:	e010      	b.n	8003d18 <u8x8_byte_i2c+0x7c>
			buffer[buf_idx++] = *data;
 8003cf6:	4b18      	ldr	r3, [pc, #96]	; (8003d58 <u8x8_byte_i2c+0xbc>)
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	1c5a      	adds	r2, r3, #1
 8003cfc:	b2d1      	uxtb	r1, r2
 8003cfe:	4a16      	ldr	r2, [pc, #88]	; (8003d58 <u8x8_byte_i2c+0xbc>)
 8003d00:	7011      	strb	r1, [r2, #0]
 8003d02:	461a      	mov	r2, r3
 8003d04:	697b      	ldr	r3, [r7, #20]
 8003d06:	7819      	ldrb	r1, [r3, #0]
 8003d08:	4b14      	ldr	r3, [pc, #80]	; (8003d5c <u8x8_byte_i2c+0xc0>)
 8003d0a:	5499      	strb	r1, [r3, r2]
			data++;
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	3301      	adds	r3, #1
 8003d10:	617b      	str	r3, [r7, #20]
			arg_int--;
 8003d12:	7abb      	ldrb	r3, [r7, #10]
 8003d14:	3b01      	subs	r3, #1
 8003d16:	72bb      	strb	r3, [r7, #10]
		while (arg_int > 0) {
 8003d18:	7abb      	ldrb	r3, [r7, #10]
 8003d1a:	2b00      	cmp	r3, #0
 8003d1c:	d1eb      	bne.n	8003cf6 <u8x8_byte_i2c+0x5a>
		}
		break;
 8003d1e:	e015      	b.n	8003d4c <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 8003d20:	4b0d      	ldr	r3, [pc, #52]	; (8003d58 <u8x8_byte_i2c+0xbc>)
 8003d22:	2200      	movs	r2, #0
 8003d24:	701a      	strb	r2, [r3, #0]
		break;
 8003d26:	e011      	b.n	8003d4c <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8),
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003d2e:	b299      	uxth	r1, r3
 8003d30:	4b09      	ldr	r3, [pc, #36]	; (8003d58 <u8x8_byte_i2c+0xbc>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003d3a:	9200      	str	r2, [sp, #0]
 8003d3c:	4a07      	ldr	r2, [pc, #28]	; (8003d5c <u8x8_byte_i2c+0xc0>)
 8003d3e:	4808      	ldr	r0, [pc, #32]	; (8003d60 <u8x8_byte_i2c+0xc4>)
 8003d40:	f005 f86a 	bl	8008e18 <HAL_I2C_Master_Transmit>
				(uint8_t*) buffer, buf_idx, HAL_MAX_DELAY);
		break;
 8003d44:	e002      	b.n	8003d4c <u8x8_byte_i2c+0xb0>
	default:
		return 0;
 8003d46:	2300      	movs	r3, #0
 8003d48:	e001      	b.n	8003d4e <u8x8_byte_i2c+0xb2>
		break;
 8003d4a:	bf00      	nop
	}

	return 1;
 8003d4c:	2301      	movs	r3, #1

}
 8003d4e:	4618      	mov	r0, r3
 8003d50:	3718      	adds	r7, #24
 8003d52:	46bd      	mov	sp, r7
 8003d54:	bd80      	pop	{r7, pc}
 8003d56:	bf00      	nop
 8003d58:	20000624 	.word	0x20000624
 8003d5c:	20000628 	.word	0x20000628
 8003d60:	20000420 	.word	0x20000420

08003d64 <main>:
void scanKnob(uint16_t localKnobs, uint16_t prev_Knobs, uint8_t knob_index, char type);
void fill_output_first_half();
void fill_output_second_half();

int main(void)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b092      	sub	sp, #72	; 0x48
 8003d68:	af02      	add	r7, sp, #8
    /* MCU Configuration--------------------------------------------------------*/
    // Reset of all peripherals, Initializes the Flash interface and the Systick.
    HAL_Init();
 8003d6a:	f002 fa90 	bl	800628e <HAL_Init>
    // Configure the system clock
    SystemClock_Config();
 8003d6e:	f7ff fcab 	bl	80036c8 <SystemClock_Config>

    // Initialize all configured peripherals
    MX_GPIO_Init();
 8003d72:	f7ff ff15 	bl	8003ba0 <MX_GPIO_Init>
    MX_DMA_Init();
 8003d76:	f7ff fc4f 	bl	8003618 <MX_DMA_Init>
    MX_USART2_UART_Init();
 8003d7a:	f7ff fee1 	bl	8003b40 <MX_USART2_UART_Init>
    MX_CAN1_Init();
 8003d7e:	f7ff fd69 	bl	8003854 <MX_CAN1_Init>
    MX_I2C1_Init();
 8003d82:	f7ff fddb 	bl	800393c <MX_I2C1_Init>
    MX_ADC1_Init();
 8003d86:	f7ff fd01 	bl	800378c <MX_ADC1_Init>
    MX_DAC1_Init();
 8003d8a:	f7ff fd9b 	bl	80038c4 <MX_DAC1_Init>
    MX_TIM6_Init();
 8003d8e:	f7ff fe19 	bl	80039c4 <MX_TIM6_Init>
    MX_TIM7_Init();
 8003d92:	f7ff fe4d 	bl	8003a30 <MX_TIM7_Init>
    MX_TIM15_Init();
 8003d96:	f7ff fe81 	bl	8003a9c <MX_TIM15_Init>

    HAL_TIM_Base_Start(&htim7);
 8003d9a:	4885      	ldr	r0, [pc, #532]	; (8003fb0 <main+0x24c>)
 8003d9c:	f006 fe14 	bl	800a9c8 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim6);
 8003da0:	4884      	ldr	r0, [pc, #528]	; (8003fb4 <main+0x250>)
 8003da2:	f006 fe11 	bl	800a9c8 <HAL_TIM_Base_Start>
    HAL_TIM_Base_Start(&htim15);
 8003da6:	4884      	ldr	r0, [pc, #528]	; (8003fb8 <main+0x254>)
 8003da8:	f006 fe0e 	bl	800a9c8 <HAL_TIM_Base_Start>

    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t *)DDS_OUT, DDS_OUT_SAMPLES, DAC_ALIGN_12B_R);
 8003dac:	2300      	movs	r3, #0
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003db4:	4a81      	ldr	r2, [pc, #516]	; (8003fbc <main+0x258>)
 8003db6:	2100      	movs	r1, #0
 8003db8:	4881      	ldr	r0, [pc, #516]	; (8003fc0 <main+0x25c>)
 8003dba:	f004 f909 	bl	8007fd0 <HAL_DAC_Start_DMA>
    HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_2, (uint32_t *)DDS_OUT, DDS_OUT_SAMPLES, DAC_ALIGN_12B_R);
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	9300      	str	r3, [sp, #0]
 8003dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003dc6:	4a7d      	ldr	r2, [pc, #500]	; (8003fbc <main+0x258>)
 8003dc8:	2110      	movs	r1, #16
 8003dca:	487d      	ldr	r0, [pc, #500]	; (8003fc0 <main+0x25c>)
 8003dcc:	f004 f900 	bl	8007fd0 <HAL_DAC_Start_DMA>
    //	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
    //	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);

    setOutMuxBit(DRST_BIT, GPIO_PIN_RESET);
 8003dd0:	2100      	movs	r1, #0
 8003dd2:	2004      	movs	r0, #4
 8003dd4:	f000 f9c8 	bl	8004168 <setOutMuxBit>
    delayMicro(2);
 8003dd8:	2002      	movs	r0, #2
 8003dda:	f000 f96b 	bl	80040b4 <delayMicro>
    setOutMuxBit(DRST_BIT, GPIO_PIN_SET);
 8003dde:	2101      	movs	r1, #1
 8003de0:	2004      	movs	r0, #4
 8003de2:	f000 f9c1 	bl	8004168 <setOutMuxBit>
    u8g2_Setup_ssd1305_i2c_128x32_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c, u8x8_gpio_and_delay);
 8003de6:	4b77      	ldr	r3, [pc, #476]	; (8003fc4 <main+0x260>)
 8003de8:	4a77      	ldr	r2, [pc, #476]	; (8003fc8 <main+0x264>)
 8003dea:	4978      	ldr	r1, [pc, #480]	; (8003fcc <main+0x268>)
 8003dec:	4878      	ldr	r0, [pc, #480]	; (8003fd0 <main+0x26c>)
 8003dee:	f7fd fbb7 	bl	8001560 <u8g2_Setup_ssd1305_i2c_128x32_noname_f>
    u8g2_InitDisplay(&u8g2);
 8003df2:	4877      	ldr	r0, [pc, #476]	; (8003fd0 <main+0x26c>)
 8003df4:	f7ff f980 	bl	80030f8 <u8x8_InitDisplay>
    u8g2_ClearDisplay(&u8g2);
 8003df8:	4875      	ldr	r0, [pc, #468]	; (8003fd0 <main+0x26c>)
 8003dfa:	f7fd fb8b 	bl	8001514 <u8g2_ClearDisplay>
    u8g2_SetPowerSave(&u8g2, 0);
 8003dfe:	2100      	movs	r1, #0
 8003e00:	4873      	ldr	r0, [pc, #460]	; (8003fd0 <main+0x26c>)
 8003e02:	f7ff f988 	bl	8003116 <u8x8_SetPowerSave>
    setOutMuxBit(DEN_BIT, GPIO_PIN_SET);
 8003e06:	2101      	movs	r1, #1
 8003e08:	2003      	movs	r0, #3
 8003e0a:	f000 f9ad 	bl	8004168 <setOutMuxBit>

    setCANFilter(IDin, 0x7ff, 0);
 8003e0e:	4b71      	ldr	r3, [pc, #452]	; (8003fd4 <main+0x270>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	2200      	movs	r2, #0
 8003e14:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7ff fb2b 	bl	8003474 <setCANFilter>
    HAL_CAN_Start(&hcan1);
 8003e1e:	486e      	ldr	r0, [pc, #440]	; (8003fd8 <main+0x274>)
 8003e20:	f003 fb17 	bl	8007452 <HAL_CAN_Start>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003e24:	2102      	movs	r1, #2
 8003e26:	486c      	ldr	r0, [pc, #432]	; (8003fd8 <main+0x274>)
 8003e28:	f003 fd96 	bl	8007958 <HAL_CAN_ActivateNotification>
    HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 8003e2c:	2101      	movs	r1, #1
 8003e2e:	486a      	ldr	r0, [pc, #424]	; (8003fd8 <main+0x274>)
 8003e30:	f003 fd92 	bl	8007958 <HAL_CAN_ActivateNotification>

    serialPrintln("charIOT-Key-C");
 8003e34:	4869      	ldr	r0, [pc, #420]	; (8003fdc <main+0x278>)
 8003e36:	f000 f91f 	bl	8004078 <serialPrintln>
    UID0 = HAL_GetUIDw0();
 8003e3a:	f002 fa85 	bl	8006348 <HAL_GetUIDw0>
 8003e3e:	4603      	mov	r3, r0
 8003e40:	4a67      	ldr	r2, [pc, #412]	; (8003fe0 <main+0x27c>)
 8003e42:	6013      	str	r3, [r2, #0]

    init_lookup_tables();
 8003e44:	f001 f9e8 	bl	8005218 <init_lookup_tables>
    set_output_waveform(SAWTOOTH);
 8003e48:	2000      	movs	r0, #0
 8003e4a:	f001 ff3b 	bl	8005cc4 <set_output_waveform>

    // Init scheduler
    osKernelInitialize();
 8003e4e:	f007 feef 	bl	800bc30 <osKernelInitialize>

    // Mutex creation
    keysMutexHandle = osMutexNew(&keysMutex_attributes);
 8003e52:	4864      	ldr	r0, [pc, #400]	; (8003fe4 <main+0x280>)
 8003e54:	f008 f8cc 	bl	800bff0 <osMutexNew>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	4a63      	ldr	r2, [pc, #396]	; (8003fe8 <main+0x284>)
 8003e5c:	6013      	str	r3, [r2, #0]
    knobsMutexHandle = osMutexNew(&knobsMutex_attributes);
 8003e5e:	4863      	ldr	r0, [pc, #396]	; (8003fec <main+0x288>)
 8003e60:	f008 f8c6 	bl	800bff0 <osMutexNew>
 8003e64:	4603      	mov	r3, r0
 8003e66:	4a62      	ldr	r2, [pc, #392]	; (8003ff0 <main+0x28c>)
 8003e68:	6013      	str	r3, [r2, #0]
    notesMutexHandle = osMutexNew(&notesMutex_attributes);
 8003e6a:	4862      	ldr	r0, [pc, #392]	; (8003ff4 <main+0x290>)
 8003e6c:	f008 f8c0 	bl	800bff0 <osMutexNew>
 8003e70:	4603      	mov	r3, r0
 8003e72:	4a61      	ldr	r2, [pc, #388]	; (8003ff8 <main+0x294>)
 8003e74:	6013      	str	r3, [r2, #0]

    // Add mutexes
    osMutexRelease(keysMutexHandle);
 8003e76:	4b5c      	ldr	r3, [pc, #368]	; (8003fe8 <main+0x284>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f008 f989 	bl	800c192 <osMutexRelease>
    osMutexRelease(knobsMutexHandle);
 8003e80:	4b5b      	ldr	r3, [pc, #364]	; (8003ff0 <main+0x28c>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4618      	mov	r0, r3
 8003e86:	f008 f984 	bl	800c192 <osMutexRelease>
    osMutexRelease(notesMutexHandle);
 8003e8a:	4b5b      	ldr	r3, [pc, #364]	; (8003ff8 <main+0x294>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f008 f97f 	bl	800c192 <osMutexRelease>

    // Create semaphores
    const osSemaphoreAttr_t CAN_TX_Semaphore_attributes = {.name = "CAN_TX_Semaphore"};
 8003e94:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003e98:	2200      	movs	r2, #0
 8003e9a:	601a      	str	r2, [r3, #0]
 8003e9c:	605a      	str	r2, [r3, #4]
 8003e9e:	609a      	str	r2, [r3, #8]
 8003ea0:	60da      	str	r2, [r3, #12]
 8003ea2:	4b56      	ldr	r3, [pc, #344]	; (8003ffc <main+0x298>)
 8003ea4:	633b      	str	r3, [r7, #48]	; 0x30
    CAN_TX_SemaphoreHandle = osSemaphoreNew(3, 3, &CAN_TX_Semaphore_attributes);
 8003ea6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8003eaa:	461a      	mov	r2, r3
 8003eac:	2103      	movs	r1, #3
 8003eae:	2003      	movs	r0, #3
 8003eb0:	f008 f9ac 	bl	800c20c <osSemaphoreNew>
 8003eb4:	4603      	mov	r3, r0
 8003eb6:	4a52      	ldr	r2, [pc, #328]	; (8004000 <main+0x29c>)
 8003eb8:	6013      	str	r3, [r2, #0]

    // Add semaphores
    osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 8003eba:	4b51      	ldr	r3, [pc, #324]	; (8004000 <main+0x29c>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f008 fa80 	bl	800c3c4 <osSemaphoreRelease>

    // Create queues
    const osMessageQueueAttr_t msgInQ_attributes = {.name = "msgInQ"};
 8003ec4:	f107 0318 	add.w	r3, r7, #24
 8003ec8:	2200      	movs	r2, #0
 8003eca:	601a      	str	r2, [r3, #0]
 8003ecc:	605a      	str	r2, [r3, #4]
 8003ece:	609a      	str	r2, [r3, #8]
 8003ed0:	60da      	str	r2, [r3, #12]
 8003ed2:	611a      	str	r2, [r3, #16]
 8003ed4:	615a      	str	r2, [r3, #20]
 8003ed6:	4b4b      	ldr	r3, [pc, #300]	; (8004004 <main+0x2a0>)
 8003ed8:	61bb      	str	r3, [r7, #24]
    const osMessageQueueAttr_t msgOutQ_attributes = {.name = "msgOutQ"};
 8003eda:	463b      	mov	r3, r7
 8003edc:	2200      	movs	r2, #0
 8003ede:	601a      	str	r2, [r3, #0]
 8003ee0:	605a      	str	r2, [r3, #4]
 8003ee2:	609a      	str	r2, [r3, #8]
 8003ee4:	60da      	str	r2, [r3, #12]
 8003ee6:	611a      	str	r2, [r3, #16]
 8003ee8:	615a      	str	r2, [r3, #20]
 8003eea:	4b47      	ldr	r3, [pc, #284]	; (8004008 <main+0x2a4>)
 8003eec:	603b      	str	r3, [r7, #0]
    msgInQHandle = osMessageQueueNew(36, sizeof(CanMsg_t), &msgInQ_attributes);
 8003eee:	f107 0318 	add.w	r3, r7, #24
 8003ef2:	461a      	mov	r2, r3
 8003ef4:	210c      	movs	r1, #12
 8003ef6:	2024      	movs	r0, #36	; 0x24
 8003ef8:	f008 faa8 	bl	800c44c <osMessageQueueNew>
 8003efc:	4603      	mov	r3, r0
 8003efe:	4a43      	ldr	r2, [pc, #268]	; (800400c <main+0x2a8>)
 8003f00:	6013      	str	r3, [r2, #0]
    msgOutQHandle = osMessageQueueNew(36, sizeof(CanMsg_t), &msgOutQ_attributes);
 8003f02:	463b      	mov	r3, r7
 8003f04:	461a      	mov	r2, r3
 8003f06:	210c      	movs	r1, #12
 8003f08:	2024      	movs	r0, #36	; 0x24
 8003f0a:	f008 fa9f 	bl	800c44c <osMessageQueueNew>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	4a3f      	ldr	r2, [pc, #252]	; (8004010 <main+0x2ac>)
 8003f12:	6013      	str	r3, [r2, #0]

    // Create threads
    defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003f14:	4a3f      	ldr	r2, [pc, #252]	; (8004014 <main+0x2b0>)
 8003f16:	2100      	movs	r1, #0
 8003f18:	483f      	ldr	r0, [pc, #252]	; (8004018 <main+0x2b4>)
 8003f1a:	f007 fed3 	bl	800bcc4 <osThreadNew>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	4a3e      	ldr	r2, [pc, #248]	; (800401c <main+0x2b8>)
 8003f22:	6013      	str	r3, [r2, #0]
#ifdef SCANKEYS_TEST
    scanKeysHandle = osThreadNew(scanKeysTask, NULL, &scanKeys_attributes);
 8003f24:	4a3e      	ldr	r2, [pc, #248]	; (8004020 <main+0x2bc>)
 8003f26:	2100      	movs	r1, #0
 8003f28:	483e      	ldr	r0, [pc, #248]	; (8004024 <main+0x2c0>)
 8003f2a:	f007 fecb 	bl	800bcc4 <osThreadNew>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	4a3d      	ldr	r2, [pc, #244]	; (8004028 <main+0x2c4>)
 8003f32:	6013      	str	r3, [r2, #0]
#endif
#ifdef DISPLAY_TEST
    displayUpdateHandle = osThreadNew(displayUpdateTask, NULL, &displayUpdate_attributes);
 8003f34:	4a3d      	ldr	r2, [pc, #244]	; (800402c <main+0x2c8>)
 8003f36:	2100      	movs	r1, #0
 8003f38:	483d      	ldr	r0, [pc, #244]	; (8004030 <main+0x2cc>)
 8003f3a:	f007 fec3 	bl	800bcc4 <osThreadNew>
 8003f3e:	4603      	mov	r3, r0
 8003f40:	4a3c      	ldr	r2, [pc, #240]	; (8004034 <main+0x2d0>)
 8003f42:	6013      	str	r3, [r2, #0]
#endif
#ifdef DECODE_TEST
    decodeTaskHandle = osThreadNew(decode, NULL, &decodeTask_attributes);
 8003f44:	4a3c      	ldr	r2, [pc, #240]	; (8004038 <main+0x2d4>)
 8003f46:	2100      	movs	r1, #0
 8003f48:	483c      	ldr	r0, [pc, #240]	; (800403c <main+0x2d8>)
 8003f4a:	f007 febb 	bl	800bcc4 <osThreadNew>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	4a3b      	ldr	r2, [pc, #236]	; (8004040 <main+0x2dc>)
 8003f52:	6013      	str	r3, [r2, #0]
#endif
#ifdef CANTX_TEST
    CAN_TX_TaskNameHandle = osThreadNew(CAN_Transmit, NULL, &CAN_TX_TaskName_attributes);
 8003f54:	4a3b      	ldr	r2, [pc, #236]	; (8004044 <main+0x2e0>)
 8003f56:	2100      	movs	r1, #0
 8003f58:	483b      	ldr	r0, [pc, #236]	; (8004048 <main+0x2e4>)
 8003f5a:	f007 feb3 	bl	800bcc4 <osThreadNew>
 8003f5e:	4603      	mov	r3, r0
 8003f60:	4a3a      	ldr	r2, [pc, #232]	; (800404c <main+0x2e8>)
 8003f62:	6013      	str	r3, [r2, #0]
#endif
#ifdef HANDSHAKE_TEST
    handshakeTaskHandle = osThreadNew(handshake, NULL, &handshakeTask_attributes);
 8003f64:	4a3a      	ldr	r2, [pc, #232]	; (8004050 <main+0x2ec>)
 8003f66:	2100      	movs	r1, #0
 8003f68:	483a      	ldr	r0, [pc, #232]	; (8004054 <main+0x2f0>)
 8003f6a:	f007 feab 	bl	800bcc4 <osThreadNew>
 8003f6e:	4603      	mov	r3, r0
 8003f70:	4a39      	ldr	r2, [pc, #228]	; (8004058 <main+0x2f4>)
 8003f72:	6013      	str	r3, [r2, #0]
#endif
#ifdef OUTPUT_TEST
    OutputTaskFirstHalfHandle = osThreadNew(fill_output_first_half, NULL, &OutputTask_attributes);
 8003f74:	4a39      	ldr	r2, [pc, #228]	; (800405c <main+0x2f8>)
 8003f76:	2100      	movs	r1, #0
 8003f78:	4839      	ldr	r0, [pc, #228]	; (8004060 <main+0x2fc>)
 8003f7a:	f007 fea3 	bl	800bcc4 <osThreadNew>
 8003f7e:	4603      	mov	r3, r0
 8003f80:	4a38      	ldr	r2, [pc, #224]	; (8004064 <main+0x300>)
 8003f82:	6013      	str	r3, [r2, #0]
    OutputTaskSecondHalfHandle = osThreadNew(fill_output_second_half, NULL, &OutputTask_attributes);
 8003f84:	4a35      	ldr	r2, [pc, #212]	; (800405c <main+0x2f8>)
 8003f86:	2100      	movs	r1, #0
 8003f88:	4837      	ldr	r0, [pc, #220]	; (8004068 <main+0x304>)
 8003f8a:	f007 fe9b 	bl	800bcc4 <osThreadNew>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	4a36      	ldr	r2, [pc, #216]	; (800406c <main+0x308>)
 8003f92:	6013      	str	r3, [r2, #0]
#endif

    /* creation of outputFlag */
    outputFlagHandle = osEventFlagsNew(&outputFlag_attributes);
 8003f94:	4836      	ldr	r0, [pc, #216]	; (8004070 <main+0x30c>)
 8003f96:	f007 ff42 	bl	800be1e <osEventFlagsNew>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	4a35      	ldr	r2, [pc, #212]	; (8004074 <main+0x310>)
 8003f9e:	6013      	str	r3, [r2, #0]
#ifdef CANRX_TEST
    __enable_irq();
#endif

    // Start scheduler
    osKernelStart();
 8003fa0:	f007 fe6a 	bl	800bc78 <osKernelStart>
 8003fa4:	2300      	movs	r3, #0
}
 8003fa6:	4618      	mov	r0, r3
 8003fa8:	3740      	adds	r7, #64	; 0x40
 8003faa:	46bd      	mov	sp, r7
 8003fac:	bd80      	pop	{r7, pc}
 8003fae:	bf00      	nop
 8003fb0:	200004c0 	.word	0x200004c0
 8003fb4:	20000474 	.word	0x20000474
 8003fb8:	2000050c 	.word	0x2000050c
 8003fbc:	20004804 	.word	0x20004804
 8003fc0:	2000037c 	.word	0x2000037c
 8003fc4:	08003c7d 	.word	0x08003c7d
 8003fc8:	08003c9d 	.word	0x08003c9d
 8003fcc:	0801f6b0 	.word	0x0801f6b0
 8003fd0:	2000068c 	.word	0x2000068c
 8003fd4:	0801f730 	.word	0x0801f730
 8003fd8:	20000354 	.word	0x20000354
 8003fdc:	080128c0 	.word	0x080128c0
 8003fe0:	200002e8 	.word	0x200002e8
 8003fe4:	0801f830 	.word	0x0801f830
 8003fe8:	2000066c 	.word	0x2000066c
 8003fec:	0801f840 	.word	0x0801f840
 8003ff0:	20000670 	.word	0x20000670
 8003ff4:	0801f850 	.word	0x0801f850
 8003ff8:	20000674 	.word	0x20000674
 8003ffc:	080128d0 	.word	0x080128d0
 8004000:	200002dc 	.word	0x200002dc
 8004004:	080128e4 	.word	0x080128e4
 8004008:	080128ec 	.word	0x080128ec
 800400c:	200002e0 	.word	0x200002e0
 8004010:	200002e4 	.word	0x200002e4
 8004014:	0801f734 	.word	0x0801f734
 8004018:	0800456d 	.word	0x0800456d
 800401c:	2000064c 	.word	0x2000064c
 8004020:	0801f758 	.word	0x0801f758
 8004024:	08004581 	.word	0x08004581
 8004028:	20000650 	.word	0x20000650
 800402c:	0801f77c 	.word	0x0801f77c
 8004030:	0800478d 	.word	0x0800478d
 8004034:	20000654 	.word	0x20000654
 8004038:	0801f7a0 	.word	0x0801f7a0
 800403c:	08003235 	.word	0x08003235
 8004040:	20000658 	.word	0x20000658
 8004044:	0801f7c4 	.word	0x0801f7c4
 8004048:	08003305 	.word	0x08003305
 800404c:	2000065c 	.word	0x2000065c
 8004050:	0801f7e8 	.word	0x0801f7e8
 8004054:	08003345 	.word	0x08003345
 8004058:	20000660 	.word	0x20000660
 800405c:	0801f80c 	.word	0x0801f80c
 8004060:	080040e9 	.word	0x080040e9
 8004064:	20000664 	.word	0x20000664
 8004068:	08004109 	.word	0x08004109
 800406c:	20000668 	.word	0x20000668
 8004070:	0801f860 	.word	0x0801f860
 8004074:	20000678 	.word	0x20000678

08004078 <serialPrintln>:
{
    HAL_UART_Transmit(&huart2, (uint8_t *)val, strlen(val), 10);
}

void serialPrintln(char val[])
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b084      	sub	sp, #16
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t *)val, strlen(val), 10);
 8004080:	6878      	ldr	r0, [r7, #4]
 8004082:	f7fc f8a5 	bl	80001d0 <strlen>
 8004086:	4603      	mov	r3, r0
 8004088:	b29a      	uxth	r2, r3
 800408a:	230a      	movs	r3, #10
 800408c:	6879      	ldr	r1, [r7, #4]
 800408e:	4808      	ldr	r0, [pc, #32]	; (80040b0 <serialPrintln+0x38>)
 8004090:	f007 f91a 	bl	800b2c8 <HAL_UART_Transmit>
    char rn[2] = "\r\n";
 8004094:	f640 230d 	movw	r3, #2573	; 0xa0d
 8004098:	81bb      	strh	r3, [r7, #12]
    HAL_UART_Transmit(&huart2, (uint8_t *)rn, 2, 10);
 800409a:	f107 010c 	add.w	r1, r7, #12
 800409e:	230a      	movs	r3, #10
 80040a0:	2202      	movs	r2, #2
 80040a2:	4803      	ldr	r0, [pc, #12]	; (80040b0 <serialPrintln+0x38>)
 80040a4:	f007 f910 	bl	800b2c8 <HAL_UART_Transmit>
}
 80040a8:	bf00      	nop
 80040aa:	3710      	adds	r7, #16
 80040ac:	46bd      	mov	sp, r7
 80040ae:	bd80      	pop	{r7, pc}
 80040b0:	20000558 	.word	0x20000558

080040b4 <delayMicro>:

void delayMicro(uint16_t us)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	4603      	mov	r3, r0
 80040bc:	80fb      	strh	r3, [r7, #6]
    htim7.Instance->CNT = 0;
 80040be:	4b09      	ldr	r3, [pc, #36]	; (80040e4 <delayMicro+0x30>)
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	2200      	movs	r2, #0
 80040c4:	625a      	str	r2, [r3, #36]	; 0x24
    while (htim7.Instance->CNT < us)
 80040c6:	bf00      	nop
 80040c8:	4b06      	ldr	r3, [pc, #24]	; (80040e4 <delayMicro+0x30>)
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80040ce:	88fb      	ldrh	r3, [r7, #6]
 80040d0:	429a      	cmp	r2, r3
 80040d2:	d3f9      	bcc.n	80040c8 <delayMicro+0x14>
        ;
}
 80040d4:	bf00      	nop
 80040d6:	bf00      	nop
 80040d8:	370c      	adds	r7, #12
 80040da:	46bd      	mov	sp, r7
 80040dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	200004c0 	.word	0x200004c0

080040e8 <fill_output_first_half>:

// Tasks to fill the first half of the DMA output buffer
void fill_output_first_half()
{
 80040e8:	b580      	push	{r7, lr}
 80040ea:	af00      	add	r7, sp, #0
    for (;;)
    {
#ifdef TIMING_TEST
    	htim15.Instance->CNT = 0;
#else
    	osEventFlagsWait(outputFlagHandle, 0x1, osFlagsWaitAny, osWaitForever);
 80040ec:	4b05      	ldr	r3, [pc, #20]	; (8004104 <fill_output_first_half+0x1c>)
 80040ee:	6818      	ldr	r0, [r3, #0]
 80040f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040f4:	2200      	movs	r2, #0
 80040f6:	2101      	movs	r1, #1
 80040f8:	f007 ff14 	bl	800bf24 <osEventFlagsWait>
#endif
        synthesise_output1();
 80040fc:	f001 fe8a 	bl	8005e14 <synthesise_output1>
    	osEventFlagsWait(outputFlagHandle, 0x1, osFlagsWaitAny, osWaitForever);
 8004100:	e7f4      	b.n	80040ec <fill_output_first_half+0x4>
 8004102:	bf00      	nop
 8004104:	20000678 	.word	0x20000678

08004108 <fill_output_second_half>:

    }
}

void fill_output_second_half()
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
    for (;;)
    {
        osEventFlagsWait(outputFlagHandle, 0x2, osFlagsWaitAny, osWaitForever);
 800410c:	4b05      	ldr	r3, [pc, #20]	; (8004124 <fill_output_second_half+0x1c>)
 800410e:	6818      	ldr	r0, [r3, #0]
 8004110:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004114:	2200      	movs	r2, #0
 8004116:	2102      	movs	r1, #2
 8004118:	f007 ff04 	bl	800bf24 <osEventFlagsWait>
        synthesise_output2();
 800411c:	f001 ff84 	bl	8006028 <synthesise_output2>
        osEventFlagsWait(outputFlagHandle, 0x2, osFlagsWaitAny, osWaitForever);
 8004120:	e7f4      	b.n	800410c <fill_output_second_half+0x4>
 8004122:	bf00      	nop
 8004124:	20000678 	.word	0x20000678

08004128 <HAL_DAC_ConvHalfCpltCallbackCh1>:
    }
}

void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004128:	b580      	push	{r7, lr}
 800412a:	b082      	sub	sp, #8
 800412c:	af00      	add	r7, sp, #0
 800412e:	6078      	str	r0, [r7, #4]
    osEventFlagsSet(outputFlagHandle, 0x1);
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <HAL_DAC_ConvHalfCpltCallbackCh1+0x1c>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	2101      	movs	r1, #1
 8004136:	4618      	mov	r0, r3
 8004138:	f007 feb0 	bl	800be9c <osEventFlagsSet>
}
 800413c:	bf00      	nop
 800413e:	3708      	adds	r7, #8
 8004140:	46bd      	mov	sp, r7
 8004142:	bd80      	pop	{r7, pc}
 8004144:	20000678 	.word	0x20000678

08004148 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b082      	sub	sp, #8
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
    osEventFlagsSet(outputFlagHandle, 0x2);
 8004150:	4b04      	ldr	r3, [pc, #16]	; (8004164 <HAL_DAC_ConvCpltCallbackCh1+0x1c>)
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	2102      	movs	r1, #2
 8004156:	4618      	mov	r0, r3
 8004158:	f007 fea0 	bl	800be9c <osEventFlagsSet>
}
 800415c:	bf00      	nop
 800415e:	3708      	adds	r7, #8
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}
 8004164:	20000678 	.word	0x20000678

08004168 <setOutMuxBit>:

void setOutMuxBit(const uint8_t bitIdx, const bool value)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b082      	sub	sp, #8
 800416c:	af00      	add	r7, sp, #0
 800416e:	4603      	mov	r3, r0
 8004170:	460a      	mov	r2, r1
 8004172:	71fb      	strb	r3, [r7, #7]
 8004174:	4613      	mov	r3, r2
 8004176:	71bb      	strb	r3, [r7, #6]

    HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8004178:	2200      	movs	r2, #0
 800417a:	2140      	movs	r1, #64	; 0x40
 800417c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004180:	f004 fd88 	bl	8008c94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, bitIdx & 0x01);
 8004184:	79fb      	ldrb	r3, [r7, #7]
 8004186:	f003 0301 	and.w	r3, r3, #1
 800418a:	b2db      	uxtb	r3, r3
 800418c:	461a      	mov	r2, r3
 800418e:	2101      	movs	r1, #1
 8004190:	4816      	ldr	r0, [pc, #88]	; (80041ec <setOutMuxBit+0x84>)
 8004192:	f004 fd7f 	bl	8008c94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, bitIdx & 0x02);
 8004196:	79fb      	ldrb	r3, [r7, #7]
 8004198:	f003 0302 	and.w	r3, r3, #2
 800419c:	b2db      	uxtb	r3, r3
 800419e:	461a      	mov	r2, r3
 80041a0:	2102      	movs	r1, #2
 80041a2:	4812      	ldr	r0, [pc, #72]	; (80041ec <setOutMuxBit+0x84>)
 80041a4:	f004 fd76 	bl	8008c94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, bitIdx & 0x04);
 80041a8:	79fb      	ldrb	r3, [r7, #7]
 80041aa:	f003 0304 	and.w	r3, r3, #4
 80041ae:	b2db      	uxtb	r3, r3
 80041b0:	461a      	mov	r2, r3
 80041b2:	2110      	movs	r1, #16
 80041b4:	480d      	ldr	r0, [pc, #52]	; (80041ec <setOutMuxBit+0x84>)
 80041b6:	f004 fd6d 	bl	8008c94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, value);
 80041ba:	79bb      	ldrb	r3, [r7, #6]
 80041bc:	461a      	mov	r2, r3
 80041be:	2120      	movs	r1, #32
 80041c0:	480a      	ldr	r0, [pc, #40]	; (80041ec <setOutMuxBit+0x84>)
 80041c2:	f004 fd67 	bl	8008c94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 80041c6:	2201      	movs	r2, #1
 80041c8:	2140      	movs	r1, #64	; 0x40
 80041ca:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041ce:	f004 fd61 	bl	8008c94 <HAL_GPIO_WritePin>
    delayMicro(5);
 80041d2:	2005      	movs	r0, #5
 80041d4:	f7ff ff6e 	bl	80040b4 <delayMicro>
    HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80041d8:	2200      	movs	r2, #0
 80041da:	2140      	movs	r1, #64	; 0x40
 80041dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80041e0:	f004 fd58 	bl	8008c94 <HAL_GPIO_WritePin>
}
 80041e4:	bf00      	nop
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	48000400 	.word	0x48000400

080041f0 <selectRow>:

void selectRow(uint8_t rowIdx)
{
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b082      	sub	sp, #8
 80041f4:	af00      	add	r7, sp, #0
 80041f6:	4603      	mov	r3, r0
 80041f8:	71fb      	strb	r3, [r7, #7]
    HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80041fa:	2200      	movs	r2, #0
 80041fc:	2140      	movs	r1, #64	; 0x40
 80041fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004202:	f004 fd47 	bl	8008c94 <HAL_GPIO_WritePin>

    HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, rowIdx & 0x01);
 8004206:	79fb      	ldrb	r3, [r7, #7]
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	b2db      	uxtb	r3, r3
 800420e:	461a      	mov	r2, r3
 8004210:	2101      	movs	r1, #1
 8004212:	480c      	ldr	r0, [pc, #48]	; (8004244 <selectRow+0x54>)
 8004214:	f004 fd3e 	bl	8008c94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, rowIdx & 0x02);
 8004218:	79fb      	ldrb	r3, [r7, #7]
 800421a:	f003 0302 	and.w	r3, r3, #2
 800421e:	b2db      	uxtb	r3, r3
 8004220:	461a      	mov	r2, r3
 8004222:	2102      	movs	r1, #2
 8004224:	4807      	ldr	r0, [pc, #28]	; (8004244 <selectRow+0x54>)
 8004226:	f004 fd35 	bl	8008c94 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, rowIdx & 0x04);
 800422a:	79fb      	ldrb	r3, [r7, #7]
 800422c:	f003 0304 	and.w	r3, r3, #4
 8004230:	b2db      	uxtb	r3, r3
 8004232:	461a      	mov	r2, r3
 8004234:	2110      	movs	r1, #16
 8004236:	4803      	ldr	r0, [pc, #12]	; (8004244 <selectRow+0x54>)
 8004238:	f004 fd2c 	bl	8008c94 <HAL_GPIO_WritePin>
}
 800423c:	bf00      	nop
 800423e:	3708      	adds	r7, #8
 8004240:	46bd      	mov	sp, r7
 8004242:	bd80      	pop	{r7, pc}
 8004244:	48000400 	.word	0x48000400

08004248 <readCols>:

uint8_t readCols()
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0

    uint8_t C0_val = HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin);
 800424e:	2108      	movs	r1, #8
 8004250:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004254:	f004 fd06 	bl	8008c64 <HAL_GPIO_ReadPin>
 8004258:	4603      	mov	r3, r0
 800425a:	71fb      	strb	r3, [r7, #7]
    uint8_t C1_val = HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin);
 800425c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004260:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004264:	f004 fcfe 	bl	8008c64 <HAL_GPIO_ReadPin>
 8004268:	4603      	mov	r3, r0
 800426a:	71bb      	strb	r3, [r7, #6]
    uint8_t C2_val = HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin);
 800426c:	2180      	movs	r1, #128	; 0x80
 800426e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004272:	f004 fcf7 	bl	8008c64 <HAL_GPIO_ReadPin>
 8004276:	4603      	mov	r3, r0
 8004278:	717b      	strb	r3, [r7, #5]
    uint8_t C3_val = HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin);
 800427a:	f44f 7100 	mov.w	r1, #512	; 0x200
 800427e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004282:	f004 fcef 	bl	8008c64 <HAL_GPIO_ReadPin>
 8004286:	4603      	mov	r3, r0
 8004288:	713b      	strb	r3, [r7, #4]

    return (C3_val << 3) | (C2_val << 2) | (C1_val << 1) | C0_val;
 800428a:	793b      	ldrb	r3, [r7, #4]
 800428c:	00db      	lsls	r3, r3, #3
 800428e:	b25a      	sxtb	r2, r3
 8004290:	797b      	ldrb	r3, [r7, #5]
 8004292:	009b      	lsls	r3, r3, #2
 8004294:	b25b      	sxtb	r3, r3
 8004296:	4313      	orrs	r3, r2
 8004298:	b25a      	sxtb	r2, r3
 800429a:	79bb      	ldrb	r3, [r7, #6]
 800429c:	005b      	lsls	r3, r3, #1
 800429e:	b25b      	sxtb	r3, r3
 80042a0:	4313      	orrs	r3, r2
 80042a2:	b25a      	sxtb	r2, r3
 80042a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042a8:	4313      	orrs	r3, r2
 80042aa:	b25b      	sxtb	r3, r3
 80042ac:	b2db      	uxtb	r3, r3
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3708      	adds	r7, #8
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}

080042b6 <changeKnobState>:

int16_t changeKnobState(uint8_t knob_state, uint8_t previousKnobState, uint16_t knobRotation, int8_t top_limit,
                        int8_t bottom_limit)
{
 80042b6:	b490      	push	{r4, r7}
 80042b8:	b086      	sub	sp, #24
 80042ba:	af00      	add	r7, sp, #0
 80042bc:	4604      	mov	r4, r0
 80042be:	4608      	mov	r0, r1
 80042c0:	4611      	mov	r1, r2
 80042c2:	461a      	mov	r2, r3
 80042c4:	4623      	mov	r3, r4
 80042c6:	71fb      	strb	r3, [r7, #7]
 80042c8:	4603      	mov	r3, r0
 80042ca:	71bb      	strb	r3, [r7, #6]
 80042cc:	460b      	mov	r3, r1
 80042ce:	80bb      	strh	r3, [r7, #4]
 80042d0:	4613      	mov	r3, r2
 80042d2:	70fb      	strb	r3, [r7, #3]
    int16_t rotation = 0;
 80042d4:	2300      	movs	r3, #0
 80042d6:	82fb      	strh	r3, [r7, #22]
    int current_knob = knob_state;
 80042d8:	79fb      	ldrb	r3, [r7, #7]
 80042da:	613b      	str	r3, [r7, #16]
    int prev_knob = previousKnobState;
 80042dc:	79bb      	ldrb	r3, [r7, #6]
 80042de:	60fb      	str	r3, [r7, #12]

    // upper and bottom levels for knob
    if ((((prev_knob == 0b11) && (current_knob == 0b10)) || ((prev_knob == 0b00) && (current_knob == 0b01))) &&
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2b03      	cmp	r3, #3
 80042e4:	d102      	bne.n	80042ec <changeKnobState+0x36>
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	2b02      	cmp	r3, #2
 80042ea:	d005      	beq.n	80042f8 <changeKnobState+0x42>
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d10e      	bne.n	8004310 <changeKnobState+0x5a>
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d10b      	bne.n	8004310 <changeKnobState+0x5a>
        knobRotation < top_limit)
 80042f8:	88ba      	ldrh	r2, [r7, #4]
 80042fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
    if ((((prev_knob == 0b11) && (current_knob == 0b10)) || ((prev_knob == 0b00) && (current_knob == 0b01))) &&
 80042fe:	429a      	cmp	r2, r3
 8004300:	da06      	bge.n	8004310 <changeKnobState+0x5a>
    {
        rotation++;
 8004302:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004306:	b29b      	uxth	r3, r3
 8004308:	3301      	adds	r3, #1
 800430a:	b29b      	uxth	r3, r3
 800430c:	82fb      	strh	r3, [r7, #22]
 800430e:	e016      	b.n	800433e <changeKnobState+0x88>
    }
    else if ((((prev_knob == 0b01) && (current_knob == 0b00)) || ((prev_knob == 0b10) && (current_knob == 0b11))) &&
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	2b01      	cmp	r3, #1
 8004314:	d102      	bne.n	800431c <changeKnobState+0x66>
 8004316:	693b      	ldr	r3, [r7, #16]
 8004318:	2b00      	cmp	r3, #0
 800431a:	d005      	beq.n	8004328 <changeKnobState+0x72>
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	2b02      	cmp	r3, #2
 8004320:	d10d      	bne.n	800433e <changeKnobState+0x88>
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	2b03      	cmp	r3, #3
 8004326:	d10a      	bne.n	800433e <changeKnobState+0x88>
             knobRotation > bottom_limit)
 8004328:	88ba      	ldrh	r2, [r7, #4]
 800432a:	f997 3020 	ldrsb.w	r3, [r7, #32]
    else if ((((prev_knob == 0b01) && (current_knob == 0b00)) || ((prev_knob == 0b10) && (current_knob == 0b11))) &&
 800432e:	429a      	cmp	r2, r3
 8004330:	dd05      	ble.n	800433e <changeKnobState+0x88>
    {
        rotation--;
 8004332:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004336:	b29b      	uxth	r3, r3
 8004338:	3b01      	subs	r3, #1
 800433a:	b29b      	uxth	r3, r3
 800433c:	82fb      	strh	r3, [r7, #22]
    }

    return rotation;
 800433e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004342:	4618      	mov	r0, r3
 8004344:	3718      	adds	r7, #24
 8004346:	46bd      	mov	sp, r7
 8004348:	bc90      	pop	{r4, r7}
 800434a:	4770      	bx	lr

0800434c <scanKnob>:

void scanKnob(uint16_t localKnobs, uint16_t prevKnobs, uint8_t knob_index, char type)
{
 800434c:	b590      	push	{r4, r7, lr}
 800434e:	b08d      	sub	sp, #52	; 0x34
 8004350:	af02      	add	r7, sp, #8
 8004352:	4604      	mov	r4, r0
 8004354:	4608      	mov	r0, r1
 8004356:	4611      	mov	r1, r2
 8004358:	461a      	mov	r2, r3
 800435a:	4623      	mov	r3, r4
 800435c:	80fb      	strh	r3, [r7, #6]
 800435e:	4603      	mov	r3, r0
 8004360:	80bb      	strh	r3, [r7, #4]
 8004362:	460b      	mov	r3, r1
 8004364:	70fb      	strb	r3, [r7, #3]
 8004366:	4613      	mov	r3, r2
 8004368:	70bb      	strb	r3, [r7, #2]
    uint8_t shift_row = (knob_index >= 2) ? 0 : 4;
 800436a:	78fb      	ldrb	r3, [r7, #3]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d901      	bls.n	8004374 <scanKnob+0x28>
 8004370:	2300      	movs	r3, #0
 8004372:	e000      	b.n	8004376 <scanKnob+0x2a>
 8004374:	2304      	movs	r3, #4
 8004376:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t row = 0xF;
 800437a:	230f      	movs	r3, #15
 800437c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint8_t knob_on_row = 1 - knob_index % 2;
 8004380:	78fb      	ldrb	r3, [r7, #3]
 8004382:	f003 0301 	and.w	r3, r3, #1
 8004386:	2b00      	cmp	r3, #0
 8004388:	bf0c      	ite	eq
 800438a:	2301      	moveq	r3, #1
 800438c:	2300      	movne	r3, #0
 800438e:	b2db      	uxtb	r3, r3
 8004390:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

    uint8_t rowKnobStates = (localKnobs >> shift_row) & row;
 8004394:	88fa      	ldrh	r2, [r7, #6]
 8004396:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800439a:	fa42 f303 	asr.w	r3, r2, r3
 800439e:	b25a      	sxtb	r2, r3
 80043a0:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80043a4:	4013      	ands	r3, r2
 80043a6:	b25b      	sxtb	r3, r3
 80043a8:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
    uint8_t rowPrevKnobStates = (prevKnobs >> shift_row) & row;
 80043ac:	88ba      	ldrh	r2, [r7, #4]
 80043ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80043b2:	fa42 f303 	asr.w	r3, r2, r3
 80043b6:	b25a      	sxtb	r2, r3
 80043b8:	f997 3026 	ldrsb.w	r3, [r7, #38]	; 0x26
 80043bc:	4013      	ands	r3, r2
 80043be:	b25b      	sxtb	r3, r3
 80043c0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

    //	char s[32];
    //	sprintf(s, "rowKnobStates:%x", rowKnobStates);
    //	serialPrintln(s);

    uint8_t knobState = (rowKnobStates >> knob_on_row * 2) & 0b11;
 80043c4:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 80043c8:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80043cc:	005b      	lsls	r3, r3, #1
 80043ce:	fa42 f303 	asr.w	r3, r2, r3
 80043d2:	b2db      	uxtb	r3, r3
 80043d4:	f003 0303 	and.w	r3, r3, #3
 80043d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
    uint8_t previousKnobState = (rowPrevKnobStates >> knob_on_row * 2) & 0b11;
 80043dc:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80043e0:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 80043e4:	005b      	lsls	r3, r3, #1
 80043e6:	fa42 f303 	asr.w	r3, r2, r3
 80043ea:	b2db      	uxtb	r3, r3
 80043ec:	f003 0303 	and.w	r3, r3, #3
 80043f0:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21

    //	UPDATE GLOBAL VARIABLES
    osMutexAcquire(knobsMutexHandle, osWaitForever);
 80043f4:	4b53      	ldr	r3, [pc, #332]	; (8004544 <scanKnob+0x1f8>)
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80043fc:	4618      	mov	r0, r3
 80043fe:	f007 fe7d 	bl	800c0fc <osMutexAcquire>
    __atomic_store_n(&knobs, localKnobs, __ATOMIC_RELAXED);
 8004402:	4a51      	ldr	r2, [pc, #324]	; (8004548 <scanKnob+0x1fc>)
 8004404:	88fb      	ldrh	r3, [r7, #6]
 8004406:	8013      	strh	r3, [r2, #0]
    osMutexRelease(knobsMutexHandle);
 8004408:	4b4e      	ldr	r3, [pc, #312]	; (8004544 <scanKnob+0x1f8>)
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	4618      	mov	r0, r3
 800440e:	f007 fec0 	bl	800c192 <osMutexRelease>

    if (previousKnobState != knobState)
 8004412:	f897 2021 	ldrb.w	r2, [r7, #33]	; 0x21
 8004416:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 800441a:	429a      	cmp	r2, r3
 800441c:	f000 808e 	beq.w	800453c <scanKnob+0x1f0>
    {
        osMutexAcquire(knobsMutexHandle, osWaitForever);
 8004420:	4b48      	ldr	r3, [pc, #288]	; (8004544 <scanKnob+0x1f8>)
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8004428:	4618      	mov	r0, r3
 800442a:	f007 fe67 	bl	800c0fc <osMutexAcquire>
        __atomic_store_n(&prev_knobs, localKnobs, __ATOMIC_RELAXED);
 800442e:	4a47      	ldr	r2, [pc, #284]	; (800454c <scanKnob+0x200>)
 8004430:	88fb      	ldrh	r3, [r7, #6]
 8004432:	8013      	strh	r3, [r2, #0]
        osMutexRelease(knobsMutexHandle);
 8004434:	4b43      	ldr	r3, [pc, #268]	; (8004544 <scanKnob+0x1f8>)
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	4618      	mov	r0, r3
 800443a:	f007 feaa 	bl	800c192 <osMutexRelease>

        if (type == 'v')
 800443e:	78bb      	ldrb	r3, [r7, #2]
 8004440:	2b76      	cmp	r3, #118	; 0x76
 8004442:	d118      	bne.n	8004476 <scanKnob+0x12a>
        {
            int16_t change_volume = changeKnobState(knobState, previousKnobState, volume, 12, 0);
 8004444:	4b42      	ldr	r3, [pc, #264]	; (8004550 <scanKnob+0x204>)
 8004446:	781b      	ldrb	r3, [r3, #0]
 8004448:	b2db      	uxtb	r3, r3
 800444a:	b29a      	uxth	r2, r3
 800444c:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8004450:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 8004454:	2300      	movs	r3, #0
 8004456:	9300      	str	r3, [sp, #0]
 8004458:	230c      	movs	r3, #12
 800445a:	f7ff ff2c 	bl	80042b6 <changeKnobState>
 800445e:	4603      	mov	r3, r0
 8004460:	82fb      	strh	r3, [r7, #22]
            volume = volume + change_volume;
 8004462:	8afb      	ldrh	r3, [r7, #22]
 8004464:	b2da      	uxtb	r2, r3
 8004466:	4b3a      	ldr	r3, [pc, #232]	; (8004550 <scanKnob+0x204>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	b2db      	uxtb	r3, r3
 800446c:	4413      	add	r3, r2
 800446e:	b2da      	uxtb	r2, r3
 8004470:	4b37      	ldr	r3, [pc, #220]	; (8004550 <scanKnob+0x204>)
 8004472:	701a      	strb	r2, [r3, #0]
            int16_t change_wave = changeKnobState(knobState, previousKnobState, output_wavetype, END_WAVETYPE - 1, 0);
            WaveType new_wavetype = (output_wavetype + change_wave) % END_WAVETYPE;
            set_output_waveform(new_wavetype);
        }
    }
}
 8004474:	e062      	b.n	800453c <scanKnob+0x1f0>
        else if (type == 'o')
 8004476:	78bb      	ldrb	r3, [r7, #2]
 8004478:	2b6f      	cmp	r3, #111	; 0x6f
 800447a:	d135      	bne.n	80044e8 <scanKnob+0x19c>
            int16_t change_octave = changeKnobState(knobState, previousKnobState, octave, 8,
 800447c:	4b35      	ldr	r3, [pc, #212]	; (8004554 <scanKnob+0x208>)
 800447e:	881a      	ldrh	r2, [r3, #0]
 8004480:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 8004484:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 8004488:	2302      	movs	r3, #2
 800448a:	9300      	str	r3, [sp, #0]
 800448c:	2308      	movs	r3, #8
 800448e:	f7ff ff12 	bl	80042b6 <changeKnobState>
 8004492:	4603      	mov	r3, r0
 8004494:	837b      	strh	r3, [r7, #26]
            octave = octave + change_octave;
 8004496:	4b2f      	ldr	r3, [pc, #188]	; (8004554 <scanKnob+0x208>)
 8004498:	881a      	ldrh	r2, [r3, #0]
 800449a:	8b7b      	ldrh	r3, [r7, #26]
 800449c:	4413      	add	r3, r2
 800449e:	b29a      	uxth	r2, r3
 80044a0:	4b2c      	ldr	r3, [pc, #176]	; (8004554 <scanKnob+0x208>)
 80044a2:	801a      	strh	r2, [r3, #0]
            int8_t localDiff = keyboard_position - octave;
 80044a4:	4b2c      	ldr	r3, [pc, #176]	; (8004558 <scanKnob+0x20c>)
 80044a6:	781b      	ldrb	r3, [r3, #0]
 80044a8:	b2da      	uxtb	r2, r3
 80044aa:	4b2a      	ldr	r3, [pc, #168]	; (8004554 <scanKnob+0x208>)
 80044ac:	881b      	ldrh	r3, [r3, #0]
 80044ae:	b2db      	uxtb	r3, r3
 80044b0:	1ad3      	subs	r3, r2, r3
 80044b2:	b2db      	uxtb	r3, r3
 80044b4:	767b      	strb	r3, [r7, #25]
            __atomic_store_n(&pos_oct_diff, localDiff, __ATOMIC_RELAXED);
 80044b6:	7e7a      	ldrb	r2, [r7, #25]
 80044b8:	4b28      	ldr	r3, [pc, #160]	; (800455c <scanKnob+0x210>)
 80044ba:	701a      	strb	r2, [r3, #0]
            TX.ID = 0x123;
 80044bc:	f240 1323 	movw	r3, #291	; 0x123
 80044c0:	613b      	str	r3, [r7, #16]
            TX.Message[0] = OCTAVE_CHANGE;
 80044c2:	234f      	movs	r3, #79	; 0x4f
 80044c4:	723b      	strb	r3, [r7, #8]
            TX.Message[1] = keyboard_position;
 80044c6:	4b24      	ldr	r3, [pc, #144]	; (8004558 <scanKnob+0x20c>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	727b      	strb	r3, [r7, #9]
            TX.Message[2] = octave;
 80044ce:	4b21      	ldr	r3, [pc, #132]	; (8004554 <scanKnob+0x208>)
 80044d0:	881b      	ldrh	r3, [r3, #0]
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	72bb      	strb	r3, [r7, #10]
            osMessageQueuePut(msgOutQHandle, &TX, 0, 0);
 80044d6:	4b22      	ldr	r3, [pc, #136]	; (8004560 <scanKnob+0x214>)
 80044d8:	6818      	ldr	r0, [r3, #0]
 80044da:	f107 0108 	add.w	r1, r7, #8
 80044de:	2300      	movs	r3, #0
 80044e0:	2200      	movs	r2, #0
 80044e2:	f008 f827 	bl	800c534 <osMessageQueuePut>
}
 80044e6:	e029      	b.n	800453c <scanKnob+0x1f0>
        else if (type == 'w')
 80044e8:	78bb      	ldrb	r3, [r7, #2]
 80044ea:	2b77      	cmp	r3, #119	; 0x77
 80044ec:	d126      	bne.n	800453c <scanKnob+0x1f0>
            int16_t change_wave = changeKnobState(knobState, previousKnobState, output_wavetype, END_WAVETYPE - 1, 0);
 80044ee:	4b1d      	ldr	r3, [pc, #116]	; (8004564 <scanKnob+0x218>)
 80044f0:	781b      	ldrb	r3, [r3, #0]
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	b29a      	uxth	r2, r3
 80044f6:	f897 1021 	ldrb.w	r1, [r7, #33]	; 0x21
 80044fa:	f897 0022 	ldrb.w	r0, [r7, #34]	; 0x22
 80044fe:	2300      	movs	r3, #0
 8004500:	9300      	str	r3, [sp, #0]
 8004502:	2306      	movs	r3, #6
 8004504:	f7ff fed7 	bl	80042b6 <changeKnobState>
 8004508:	4603      	mov	r3, r0
 800450a:	83fb      	strh	r3, [r7, #30]
            WaveType new_wavetype = (output_wavetype + change_wave) % END_WAVETYPE;
 800450c:	4b15      	ldr	r3, [pc, #84]	; (8004564 <scanKnob+0x218>)
 800450e:	781b      	ldrb	r3, [r3, #0]
 8004510:	b2db      	uxtb	r3, r3
 8004512:	461a      	mov	r2, r3
 8004514:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8004518:	441a      	add	r2, r3
 800451a:	4b13      	ldr	r3, [pc, #76]	; (8004568 <scanKnob+0x21c>)
 800451c:	fb83 1302 	smull	r1, r3, r3, r2
 8004520:	4413      	add	r3, r2
 8004522:	1099      	asrs	r1, r3, #2
 8004524:	17d3      	asrs	r3, r2, #31
 8004526:	1ac9      	subs	r1, r1, r3
 8004528:	460b      	mov	r3, r1
 800452a:	00db      	lsls	r3, r3, #3
 800452c:	1a5b      	subs	r3, r3, r1
 800452e:	1ad1      	subs	r1, r2, r3
 8004530:	460b      	mov	r3, r1
 8004532:	777b      	strb	r3, [r7, #29]
            set_output_waveform(new_wavetype);
 8004534:	7f7b      	ldrb	r3, [r7, #29]
 8004536:	4618      	mov	r0, r3
 8004538:	f001 fbc4 	bl	8005cc4 <set_output_waveform>
}
 800453c:	bf00      	nop
 800453e:	372c      	adds	r7, #44	; 0x2c
 8004540:	46bd      	mov	sp, r7
 8004542:	bd90      	pop	{r4, r7, pc}
 8004544:	20000670 	.word	0x20000670
 8004548:	2000000e 	.word	0x2000000e
 800454c:	20000010 	.word	0x20000010
 8004550:	20000012 	.word	0x20000012
 8004554:	20000014 	.word	0x20000014
 8004558:	20000720 	.word	0x20000720
 800455c:	20000016 	.word	0x20000016
 8004560:	200002e4 	.word	0x200002e4
 8004564:	2000004c 	.word	0x2000004c
 8004568:	92492493 	.word	0x92492493

0800456c <StartDefaultTask>:

void StartDefaultTask(void *argument)
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
    for (;;)
    {
        vTaskDelay(1000);
 8004574:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004578:	f009 fe6a 	bl	800e250 <vTaskDelay>
 800457c:	e7fa      	b.n	8004574 <StartDefaultTask+0x8>
	...

08004580 <scanKeysTask>:
        */
    }
}

void scanKeysTask(void *argument)
{
 8004580:	b580      	push	{r7, lr}
 8004582:	b08a      	sub	sp, #40	; 0x28
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
    const TickType_t xFrequency = 20 / portTICK_PERIOD_MS;
 8004588:	2314      	movs	r3, #20
 800458a:	61bb      	str	r3, [r7, #24]
    TickType_t xLastWakeTime = xTaskGetTickCount();
 800458c:	f009 ffb0 	bl	800e4f0 <xTaskGetTickCount>
 8004590:	4603      	mov	r3, r0
 8004592:	617b      	str	r3, [r7, #20]

    /* Infinite loop */
    for (;;)
    {
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8004594:	f107 0314 	add.w	r3, r7, #20
 8004598:	69b9      	ldr	r1, [r7, #24]
 800459a:	4618      	mov	r0, r3
 800459c:	f009 fdda 	bl	800e154 <vTaskDelayUntil>

#ifdef TIMING_TEST
    	htim15.Instance->CNT = 0;
#endif

        uint16_t localKeys = 0;
 80045a0:	2300      	movs	r3, #0
 80045a2:	84fb      	strh	r3, [r7, #38]	; 0x26
		uint16_t localKnobs = 0;
 80045a4:	2300      	movs	r3, #0
 80045a6:	84bb      	strh	r3, [r7, #36]	; 0x24
		bool localHKIW = 0;
 80045a8:	2300      	movs	r3, #0
 80045aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
		bool localHKIE = 0;
 80045ae:	2300      	movs	r3, #0
 80045b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22

		for (int r = 0; r < 7; r++)
 80045b4:	2300      	movs	r3, #0
 80045b6:	61fb      	str	r3, [r7, #28]
 80045b8:	e06b      	b.n	8004692 <scanKeysTask+0x112>
		{
			selectRow(r);
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	4618      	mov	r0, r3
 80045c0:	f7ff fe16 	bl	80041f0 <selectRow>
			HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, outbits[r]);
 80045c4:	4a63      	ldr	r2, [pc, #396]	; (8004754 <scanKeysTask+0x1d4>)
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	4413      	add	r3, r2
 80045ca:	781b      	ldrb	r3, [r3, #0]
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	461a      	mov	r2, r3
 80045d0:	2120      	movs	r1, #32
 80045d2:	4861      	ldr	r0, [pc, #388]	; (8004758 <scanKeysTask+0x1d8>)
 80045d4:	f004 fb5e 	bl	8008c94 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 80045d8:	2201      	movs	r2, #1
 80045da:	2140      	movs	r1, #64	; 0x40
 80045dc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80045e0:	f004 fb58 	bl	8008c94 <HAL_GPIO_WritePin>
			delayMicro(5);
 80045e4:	2005      	movs	r0, #5
 80045e6:	f7ff fd65 	bl	80040b4 <delayMicro>
			if (r < 3)
 80045ea:	69fb      	ldr	r3, [r7, #28]
 80045ec:	2b02      	cmp	r3, #2
 80045ee:	dc0e      	bgt.n	800460e <scanKeysTask+0x8e>
			{
				localKeys |= readCols() << (r * 4);
 80045f0:	f7ff fe2a 	bl	8004248 <readCols>
 80045f4:	4603      	mov	r3, r0
 80045f6:	461a      	mov	r2, r3
 80045f8:	69fb      	ldr	r3, [r7, #28]
 80045fa:	009b      	lsls	r3, r3, #2
 80045fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004600:	b21a      	sxth	r2, r3
 8004602:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8004606:	4313      	orrs	r3, r2
 8004608:	b21b      	sxth	r3, r3
 800460a:	84fb      	strh	r3, [r7, #38]	; 0x26
 800460c:	e038      	b.n	8004680 <scanKeysTask+0x100>
			}
			else if (r < 5)
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	2b04      	cmp	r3, #4
 8004612:	dc0f      	bgt.n	8004634 <scanKeysTask+0xb4>
			{
				localKnobs |= (readCols() << ((r - 3) * 4));
 8004614:	f7ff fe18 	bl	8004248 <readCols>
 8004618:	4603      	mov	r3, r0
 800461a:	461a      	mov	r2, r3
 800461c:	69fb      	ldr	r3, [r7, #28]
 800461e:	3b03      	subs	r3, #3
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	fa02 f303 	lsl.w	r3, r2, r3
 8004626:	b21a      	sxth	r2, r3
 8004628:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 800462c:	4313      	orrs	r3, r2
 800462e:	b21b      	sxth	r3, r3
 8004630:	84bb      	strh	r3, [r7, #36]	; 0x24
 8004632:	e025      	b.n	8004680 <scanKeysTask+0x100>
			}
			else if (r == 5)
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	2b05      	cmp	r3, #5
 8004638:	d10b      	bne.n	8004652 <scanKeysTask+0xd2>
			{
				localHKIW = readCols() >> 3;
 800463a:	f7ff fe05 	bl	8004248 <readCols>
 800463e:	4603      	mov	r3, r0
 8004640:	08db      	lsrs	r3, r3, #3
 8004642:	b2db      	uxtb	r3, r3
 8004644:	2b00      	cmp	r3, #0
 8004646:	bf14      	ite	ne
 8004648:	2301      	movne	r3, #1
 800464a:	2300      	moveq	r3, #0
 800464c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004650:	e016      	b.n	8004680 <scanKeysTask+0x100>
			}
			else
			{
				localHKIE = readCols() >> 3;
 8004652:	f7ff fdf9 	bl	8004248 <readCols>
 8004656:	4603      	mov	r3, r0
 8004658:	08db      	lsrs	r3, r3, #3
 800465a:	b2db      	uxtb	r3, r3
 800465c:	2b00      	cmp	r3, #0
 800465e:	bf14      	ite	ne
 8004660:	2301      	movne	r3, #1
 8004662:	2300      	moveq	r3, #0
 8004664:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
				selected = ~readCols() & 0x01;
 8004668:	f7ff fdee 	bl	8004248 <readCols>
 800466c:	4603      	mov	r3, r0
 800466e:	f003 0301 	and.w	r3, r3, #1
 8004672:	2b00      	cmp	r3, #0
 8004674:	bf0c      	ite	eq
 8004676:	2301      	moveq	r3, #1
 8004678:	2300      	movne	r3, #0
 800467a:	b2da      	uxtb	r2, r3
 800467c:	4b37      	ldr	r3, [pc, #220]	; (800475c <scanKeysTask+0x1dc>)
 800467e:	701a      	strb	r2, [r3, #0]
			}
			HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8004680:	2200      	movs	r2, #0
 8004682:	2140      	movs	r1, #64	; 0x40
 8004684:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004688:	f004 fb04 	bl	8008c94 <HAL_GPIO_WritePin>
		for (int r = 0; r < 7; r++)
 800468c:	69fb      	ldr	r3, [r7, #28]
 800468e:	3301      	adds	r3, #1
 8004690:	61fb      	str	r3, [r7, #28]
 8004692:	69fb      	ldr	r3, [r7, #28]
 8004694:	2b06      	cmp	r3, #6
 8004696:	dd90      	ble.n	80045ba <scanKeysTask+0x3a>
		}

        osMutexAcquire(notesMutexHandle, osWaitForever);
 8004698:	4b31      	ldr	r3, [pc, #196]	; (8004760 <scanKeysTask+0x1e0>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80046a0:	4618      	mov	r0, r3
 80046a2:	f007 fd2b 	bl	800c0fc <osMutexAcquire>
        allKeys[keyboard_position] = localKeys;
 80046a6:	4b2f      	ldr	r3, [pc, #188]	; (8004764 <scanKeysTask+0x1e4>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	b2db      	uxtb	r3, r3
 80046ac:	4619      	mov	r1, r3
 80046ae:	4a2e      	ldr	r2, [pc, #184]	; (8004768 <scanKeysTask+0x1e8>)
 80046b0:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046b2:	f822 3011 	strh.w	r3, [r2, r1, lsl #1]
        osMutexRelease(notesMutexHandle);
 80046b6:	4b2a      	ldr	r3, [pc, #168]	; (8004760 <scanKeysTask+0x1e0>)
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4618      	mov	r0, r3
 80046bc:	f007 fd69 	bl	800c192 <osMutexRelease>

        __atomic_store_n(&HKIW, localHKIW, __ATOMIC_RELAXED);
 80046c0:	f897 2023 	ldrb.w	r2, [r7, #35]	; 0x23
 80046c4:	4b29      	ldr	r3, [pc, #164]	; (800476c <scanKeysTask+0x1ec>)
 80046c6:	701a      	strb	r2, [r3, #0]
		__atomic_store_n(&HKIE, localHKIE, __ATOMIC_RELAXED);
 80046c8:	f897 2022 	ldrb.w	r2, [r7, #34]	; 0x22
 80046cc:	4b28      	ldr	r3, [pc, #160]	; (8004770 <scanKeysTask+0x1f0>)
 80046ce:	701a      	strb	r2, [r3, #0]
		__atomic_store_n(&keys, localKeys, __ATOMIC_RELAXED);
 80046d0:	4a28      	ldr	r2, [pc, #160]	; (8004774 <scanKeysTask+0x1f4>)
 80046d2:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80046d4:	8013      	strh	r3, [r2, #0]
		__atomic_store_n(&knobs, localKnobs, __ATOMIC_RELAXED);
 80046d6:	4a28      	ldr	r2, [pc, #160]	; (8004778 <scanKeysTask+0x1f8>)
 80046d8:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80046da:	8013      	strh	r3, [r2, #0]

        scanKnob(localKnobs, (uint16_t)prev_knobs, 3, 'v');
 80046dc:	4b27      	ldr	r3, [pc, #156]	; (800477c <scanKeysTask+0x1fc>)
 80046de:	881b      	ldrh	r3, [r3, #0]
 80046e0:	b299      	uxth	r1, r3
 80046e2:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80046e4:	2376      	movs	r3, #118	; 0x76
 80046e6:	2203      	movs	r2, #3
 80046e8:	f7ff fe30 	bl	800434c <scanKnob>
        scanKnob(localKnobs, (uint16_t)prev_knobs, 2, 'o');
 80046ec:	4b23      	ldr	r3, [pc, #140]	; (800477c <scanKeysTask+0x1fc>)
 80046ee:	881b      	ldrh	r3, [r3, #0]
 80046f0:	b299      	uxth	r1, r3
 80046f2:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 80046f4:	236f      	movs	r3, #111	; 0x6f
 80046f6:	2202      	movs	r2, #2
 80046f8:	f7ff fe28 	bl	800434c <scanKnob>
        scanKnob(localKnobs, (uint16_t)prev_knobs, 1, 'w');
 80046fc:	4b1f      	ldr	r3, [pc, #124]	; (800477c <scanKeysTask+0x1fc>)
 80046fe:	881b      	ldrh	r3, [r3, #0]
 8004700:	b299      	uxth	r1, r3
 8004702:	8cb8      	ldrh	r0, [r7, #36]	; 0x24
 8004704:	2377      	movs	r3, #119	; 0x77
 8004706:	2201      	movs	r2, #1
 8004708:	f7ff fe20 	bl	800434c <scanKnob>

        // set the volume to zero if not receiving
        if (!is_receiver)
 800470c:	4b1c      	ldr	r3, [pc, #112]	; (8004780 <scanKeysTask+0x200>)
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	f083 0301 	eor.w	r3, r3, #1
 8004714:	b2db      	uxtb	r3, r3
 8004716:	2b00      	cmp	r3, #0
 8004718:	d002      	beq.n	8004720 <scanKeysTask+0x1a0>
        {
            __atomic_store_n(&volume, 0, __ATOMIC_RELAXED);
 800471a:	4b1a      	ldr	r3, [pc, #104]	; (8004784 <scanKeysTask+0x204>)
 800471c:	2200      	movs	r2, #0
 800471e:	701a      	strb	r2, [r3, #0]
        }

        CanMsg_t TX;

        TX.ID = 0x123;
 8004720:	f240 1323 	movw	r3, #291	; 0x123
 8004724:	613b      	str	r3, [r7, #16]
        TX.Message[0] = 'K';
 8004726:	234b      	movs	r3, #75	; 0x4b
 8004728:	723b      	strb	r3, [r7, #8]
        TX.Message[1] = (uint8_t)(localKeys & 0x00FF);
 800472a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800472c:	b2db      	uxtb	r3, r3
 800472e:	727b      	strb	r3, [r7, #9]
        TX.Message[2] = (uint8_t)((localKeys & 0xFF00) >> 8);
 8004730:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8004732:	0a1b      	lsrs	r3, r3, #8
 8004734:	b29b      	uxth	r3, r3
 8004736:	b2db      	uxtb	r3, r3
 8004738:	72bb      	strb	r3, [r7, #10]
        TX.Message[3] = (uint8_t)keyboard_position;
 800473a:	4b0a      	ldr	r3, [pc, #40]	; (8004764 <scanKeysTask+0x1e4>)
 800473c:	781b      	ldrb	r3, [r3, #0]
 800473e:	b2db      	uxtb	r3, r3
 8004740:	72fb      	strb	r3, [r7, #11]

        osMessageQueuePut(msgOutQHandle, &TX, 0, 0);
 8004742:	4b11      	ldr	r3, [pc, #68]	; (8004788 <scanKeysTask+0x208>)
 8004744:	6818      	ldr	r0, [r3, #0]
 8004746:	f107 0108 	add.w	r1, r7, #8
 800474a:	2300      	movs	r3, #0
 800474c:	2200      	movs	r2, #0
 800474e:	f007 fef1 	bl	800c534 <osMessageQueuePut>
    {
 8004752:	e71f      	b.n	8004594 <scanKeysTask+0x14>
 8004754:	20000004 	.word	0x20000004
 8004758:	48000400 	.word	0x48000400
 800475c:	20000649 	.word	0x20000649
 8004760:	20000674 	.word	0x20000674
 8004764:	20000720 	.word	0x20000720
 8004768:	2000067c 	.word	0x2000067c
 800476c:	200002ec 	.word	0x200002ec
 8004770:	200002ed 	.word	0x200002ed
 8004774:	2000000c 	.word	0x2000000c
 8004778:	2000000e 	.word	0x2000000e
 800477c:	20000010 	.word	0x20000010
 8004780:	20000648 	.word	0x20000648
 8004784:	20000012 	.word	0x20000012
 8004788:	200002e4 	.word	0x200002e4

0800478c <displayUpdateTask>:
    }

}

void displayUpdateTask(void *argument)
{
 800478c:	b580      	push	{r7, lr}
 800478e:	b09a      	sub	sp, #104	; 0x68
 8004790:	af04      	add	r7, sp, #16
 8004792:	6078      	str	r0, [r7, #4]

    const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
 8004794:	2364      	movs	r3, #100	; 0x64
 8004796:	64bb      	str	r3, [r7, #72]	; 0x48
    TickType_t xLastWakeTime = xTaskGetTickCount();
 8004798:	f009 feaa 	bl	800e4f0 <xTaskGetTickCount>
 800479c:	4603      	mov	r3, r0
 800479e:	63fb      	str	r3, [r7, #60]	; 0x3c

    for (;;)
    {
        vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80047a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80047a4:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 80047a6:	4618      	mov	r0, r3
 80047a8:	f009 fcd4 	bl	800e154 <vTaskDelayUntil>
#ifdef TIMING_TEST
    	htim15.Instance->CNT = 0;
#endif

        //osMutexAcquire(keysMutexHandle, osWaitForever);
        uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 80047ac:	4b97      	ldr	r3, [pc, #604]	; (8004a0c <displayUpdateTask+0x280>)
 80047ae:	881b      	ldrh	r3, [r3, #0]
 80047b0:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
        //osMutexRelease(keysMutexHandle);

        static char *notesPressed[12];

        for (int t = 0; t < 12; t++)
 80047b4:	2300      	movs	r3, #0
 80047b6:	657b      	str	r3, [r7, #84]	; 0x54
 80047b8:	e022      	b.n	8004800 <displayUpdateTask+0x74>
		{
			bool pressed = ~localKeys & (1 << t);
 80047ba:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80047be:	43da      	mvns	r2, r3
 80047c0:	2101      	movs	r1, #1
 80047c2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047c4:	fa01 f303 	lsl.w	r3, r1, r3
 80047c8:	4013      	ands	r3, r2
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	bf14      	ite	ne
 80047ce:	2301      	movne	r3, #1
 80047d0:	2300      	moveq	r3, #0
 80047d2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

			if (pressed)
 80047d6:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d008      	beq.n	80047f0 <displayUpdateTask+0x64>
			{
				notesPressed[t] = keyNotes[t];
 80047de:	4a8c      	ldr	r2, [pc, #560]	; (8004a10 <displayUpdateTask+0x284>)
 80047e0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047e2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80047e6:	498b      	ldr	r1, [pc, #556]	; (8004a14 <displayUpdateTask+0x288>)
 80047e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 80047ee:	e004      	b.n	80047fa <displayUpdateTask+0x6e>
			}
			else
			{
				notesPressed[t] = NULL;
 80047f0:	4a88      	ldr	r2, [pc, #544]	; (8004a14 <displayUpdateTask+0x288>)
 80047f2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047f4:	2100      	movs	r1, #0
 80047f6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
        for (int t = 0; t < 12; t++)
 80047fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80047fc:	3301      	adds	r3, #1
 80047fe:	657b      	str	r3, [r7, #84]	; 0x54
 8004800:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004802:	2b0b      	cmp	r3, #11
 8004804:	ddd9      	ble.n	80047ba <displayUpdateTask+0x2e>
			}
		}

        u8g2_ClearBuffer(&u8g2);
 8004806:	4884      	ldr	r0, [pc, #528]	; (8004a18 <displayUpdateTask+0x28c>)
 8004808:	f7fc fc63 	bl	80010d2 <u8g2_ClearBuffer>
        u8g2_SetFont(&u8g2, u8g2_font_new3x9pixelfont_tr);
 800480c:	4983      	ldr	r1, [pc, #524]	; (8004a1c <displayUpdateTask+0x290>)
 800480e:	4882      	ldr	r0, [pc, #520]	; (8004a18 <displayUpdateTask+0x28c>)
 8004810:	f7fd fcbc 	bl	800218c <u8g2_SetFont>

        // PRINTING THE NOTES PRESSED
        uint8_t string_size = 2;
 8004814:	2302      	movs	r3, #2
 8004816:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        uint8_t space = 3;
 800481a:	2303      	movs	r3, #3
 800481c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
        if (is_receiver)
 8004820:	4b7f      	ldr	r3, [pc, #508]	; (8004a20 <displayUpdateTask+0x294>)
 8004822:	781b      	ldrb	r3, [r3, #0]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d008      	beq.n	800483a <displayUpdateTask+0xae>
        {
            u8g2_DrawStr(&u8g2, string_size, 7, "|rcv|");
 8004828:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800482c:	b299      	uxth	r1, r3
 800482e:	4b7d      	ldr	r3, [pc, #500]	; (8004a24 <displayUpdateTask+0x298>)
 8004830:	2207      	movs	r2, #7
 8004832:	4879      	ldr	r0, [pc, #484]	; (8004a18 <displayUpdateTask+0x28c>)
 8004834:	f7fd fbee 	bl	8002014 <u8g2_DrawStr>
 8004838:	e021      	b.n	800487e <displayUpdateTask+0xf2>
        }
        else
        {
            u8g2_DrawStr(&u8g2, string_size, 7, "|snd|");
 800483a:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 800483e:	b299      	uxth	r1, r3
 8004840:	4b79      	ldr	r3, [pc, #484]	; (8004a28 <displayUpdateTask+0x29c>)
 8004842:	2207      	movs	r2, #7
 8004844:	4874      	ldr	r0, [pc, #464]	; (8004a18 <displayUpdateTask+0x28c>)
 8004846:	f7fd fbe5 	bl	8002014 <u8g2_DrawStr>
            u8g2_SetDrawColor(&u8g2, 1);
 800484a:	2101      	movs	r1, #1
 800484c:	4872      	ldr	r0, [pc, #456]	; (8004a18 <displayUpdateTask+0x28c>)
 800484e:	f7fd fe6f 	bl	8002530 <u8g2_SetDrawColor>
			u8g2_SetBitmapMode(&u8g2, 0);
 8004852:	2100      	movs	r1, #0
 8004854:	4870      	ldr	r0, [pc, #448]	; (8004a18 <displayUpdateTask+0x28c>)
 8004856:	f7fc fb99 	bl	8000f8c <u8g2_SetBitmapMode>
			u8g2_DrawButtonUTF8(&u8g2, 35, 16, U8G2_BTN_INV, u8g2_GetDisplayWidth(&u8g2) - 35 * 2, 2, 1,
 800485a:	4b6f      	ldr	r3, [pc, #444]	; (8004a18 <displayUpdateTask+0x28c>)
 800485c:	f8b3 3044 	ldrh.w	r3, [r3, #68]	; 0x44
 8004860:	3b46      	subs	r3, #70	; 0x46
 8004862:	b29b      	uxth	r3, r3
 8004864:	4a71      	ldr	r2, [pc, #452]	; (8004a2c <displayUpdateTask+0x2a0>)
 8004866:	9203      	str	r2, [sp, #12]
 8004868:	2201      	movs	r2, #1
 800486a:	9202      	str	r2, [sp, #8]
 800486c:	2202      	movs	r2, #2
 800486e:	9201      	str	r2, [sp, #4]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	2320      	movs	r3, #32
 8004874:	2210      	movs	r2, #16
 8004876:	2123      	movs	r1, #35	; 0x23
 8004878:	4867      	ldr	r0, [pc, #412]	; (8004a18 <displayUpdateTask+0x28c>)
 800487a:	f7fc fdf7 	bl	800146c <u8g2_DrawButtonUTF8>
								"Knob 0 to receive");
        }
        string_size += 19;
 800487e:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 8004882:	3313      	adds	r3, #19
 8004884:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53

        for (int t = 0; t < 12; t++)
 8004888:	2300      	movs	r3, #0
 800488a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800488c:	e029      	b.n	80048e2 <displayUpdateTask+0x156>
        {
            if (notesPressed[t] != NULL)
 800488e:	4a61      	ldr	r2, [pc, #388]	; (8004a14 <displayUpdateTask+0x288>)
 8004890:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004892:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d020      	beq.n	80048dc <displayUpdateTask+0x150>
            {
                uint8_t w = u8g2_GetStrWidth(&u8g2, keyNotes[t]);
 800489a:	4a5d      	ldr	r2, [pc, #372]	; (8004a10 <displayUpdateTask+0x284>)
 800489c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048a2:	4619      	mov	r1, r3
 80048a4:	485c      	ldr	r0, [pc, #368]	; (8004a18 <displayUpdateTask+0x28c>)
 80048a6:	f7fd fcef 	bl	8002288 <u8g2_GetStrWidth>
 80048aa:	4603      	mov	r3, r0
 80048ac:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
                u8g2_DrawStr(&u8g2, string_size, 7, notesPressed[t]);
 80048b0:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80048b4:	b299      	uxth	r1, r3
 80048b6:	4a57      	ldr	r2, [pc, #348]	; (8004a14 <displayUpdateTask+0x288>)
 80048b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048be:	2207      	movs	r2, #7
 80048c0:	4855      	ldr	r0, [pc, #340]	; (8004a18 <displayUpdateTask+0x28c>)
 80048c2:	f7fd fba7 	bl	8002014 <u8g2_DrawStr>
                string_size += w + space;
 80048c6:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80048ca:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80048ce:	4413      	add	r3, r2
 80048d0:	b2da      	uxtb	r2, r3
 80048d2:	f897 3053 	ldrb.w	r3, [r7, #83]	; 0x53
 80048d6:	4413      	add	r3, r2
 80048d8:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
        for (int t = 0; t < 12; t++)
 80048dc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048de:	3301      	adds	r3, #1
 80048e0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80048e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80048e4:	2b0b      	cmp	r3, #11
 80048e6:	ddd2      	ble.n	800488e <displayUpdateTask+0x102>
            }
        }

        // PRINTING VOLUME
        u8g2_DrawButtonUTF8(&u8g2, 105, 30, U8G2_BTN_BW1, 18, 4, 2, "Vol:");
 80048e8:	4b51      	ldr	r3, [pc, #324]	; (8004a30 <displayUpdateTask+0x2a4>)
 80048ea:	9303      	str	r3, [sp, #12]
 80048ec:	2302      	movs	r3, #2
 80048ee:	9302      	str	r3, [sp, #8]
 80048f0:	2304      	movs	r3, #4
 80048f2:	9301      	str	r3, [sp, #4]
 80048f4:	2312      	movs	r3, #18
 80048f6:	9300      	str	r3, [sp, #0]
 80048f8:	2301      	movs	r3, #1
 80048fa:	221e      	movs	r2, #30
 80048fc:	2169      	movs	r1, #105	; 0x69
 80048fe:	4846      	ldr	r0, [pc, #280]	; (8004a18 <displayUpdateTask+0x28c>)
 8004900:	f7fc fdb4 	bl	800146c <u8g2_DrawButtonUTF8>
        char volume_s[16];
        sprintf(volume_s, "%x", volume);
 8004904:	4b4b      	ldr	r3, [pc, #300]	; (8004a34 <displayUpdateTask+0x2a8>)
 8004906:	781b      	ldrb	r3, [r3, #0]
 8004908:	b2db      	uxtb	r3, r3
 800490a:	461a      	mov	r2, r3
 800490c:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8004910:	4949      	ldr	r1, [pc, #292]	; (8004a38 <displayUpdateTask+0x2ac>)
 8004912:	4618      	mov	r0, r3
 8004914:	f00b fcca 	bl	80102ac <siprintf>
        u8g2_DrawStr(&u8g2, 118, 30, volume_s);
 8004918:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 800491c:	221e      	movs	r2, #30
 800491e:	2176      	movs	r1, #118	; 0x76
 8004920:	483d      	ldr	r0, [pc, #244]	; (8004a18 <displayUpdateTask+0x28c>)
 8004922:	f7fd fb77 	bl	8002014 <u8g2_DrawStr>

        // PRINTING Octave
        u8g2_DrawButtonUTF8(&u8g2, 75, 30, U8G2_BTN_BW1, 18, 4, 2, "Oct:");
 8004926:	4b45      	ldr	r3, [pc, #276]	; (8004a3c <displayUpdateTask+0x2b0>)
 8004928:	9303      	str	r3, [sp, #12]
 800492a:	2302      	movs	r3, #2
 800492c:	9302      	str	r3, [sp, #8]
 800492e:	2304      	movs	r3, #4
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	2312      	movs	r3, #18
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	2301      	movs	r3, #1
 8004938:	221e      	movs	r2, #30
 800493a:	214b      	movs	r1, #75	; 0x4b
 800493c:	4836      	ldr	r0, [pc, #216]	; (8004a18 <displayUpdateTask+0x28c>)
 800493e:	f7fc fd95 	bl	800146c <u8g2_DrawButtonUTF8>
        char s[16];
        sprintf(s, "%x", octave);
 8004942:	4b3f      	ldr	r3, [pc, #252]	; (8004a40 <displayUpdateTask+0x2b4>)
 8004944:	881b      	ldrh	r3, [r3, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	f107 031c 	add.w	r3, r7, #28
 800494c:	493a      	ldr	r1, [pc, #232]	; (8004a38 <displayUpdateTask+0x2ac>)
 800494e:	4618      	mov	r0, r3
 8004950:	f00b fcac 	bl	80102ac <siprintf>
        u8g2_DrawStr(&u8g2, 89, 30, s);
 8004954:	f107 031c 	add.w	r3, r7, #28
 8004958:	221e      	movs	r2, #30
 800495a:	2159      	movs	r1, #89	; 0x59
 800495c:	482e      	ldr	r0, [pc, #184]	; (8004a18 <displayUpdateTask+0x28c>)
 800495e:	f7fd fb59 	bl	8002014 <u8g2_DrawStr>

        // PRINTING WAVE_FORM
        u8g2_DrawButtonUTF8(&u8g2, 33, 30, 0, 30, 4, 3, "Wave:");
 8004962:	4b38      	ldr	r3, [pc, #224]	; (8004a44 <displayUpdateTask+0x2b8>)
 8004964:	9303      	str	r3, [sp, #12]
 8004966:	2303      	movs	r3, #3
 8004968:	9302      	str	r3, [sp, #8]
 800496a:	2304      	movs	r3, #4
 800496c:	9301      	str	r3, [sp, #4]
 800496e:	231e      	movs	r3, #30
 8004970:	9300      	str	r3, [sp, #0]
 8004972:	2300      	movs	r3, #0
 8004974:	221e      	movs	r2, #30
 8004976:	2121      	movs	r1, #33	; 0x21
 8004978:	4827      	ldr	r0, [pc, #156]	; (8004a18 <displayUpdateTask+0x28c>)
 800497a:	f7fc fd77 	bl	800146c <u8g2_DrawButtonUTF8>
        char wave_s[16];
        sprintf(wave_s, "%x", output_wavetype);
 800497e:	4b32      	ldr	r3, [pc, #200]	; (8004a48 <displayUpdateTask+0x2bc>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	b2db      	uxtb	r3, r3
 8004984:	461a      	mov	r2, r3
 8004986:	f107 030c 	add.w	r3, r7, #12
 800498a:	492b      	ldr	r1, [pc, #172]	; (8004a38 <displayUpdateTask+0x2ac>)
 800498c:	4618      	mov	r0, r3
 800498e:	f00b fc8d 	bl	80102ac <siprintf>
        display_wave(&u8g2, 51, 30);
 8004992:	221e      	movs	r2, #30
 8004994:	2133      	movs	r1, #51	; 0x33
 8004996:	4820      	ldr	r0, [pc, #128]	; (8004a18 <displayUpdateTask+0x28c>)
 8004998:	f001 f9ba 	bl	8005d10 <display_wave>

        // PRINTING PET
        u8g2_SetFont(&u8g2, u8g2_font_ncenB08_tr);
 800499c:	492b      	ldr	r1, [pc, #172]	; (8004a4c <displayUpdateTask+0x2c0>)
 800499e:	481e      	ldr	r0, [pc, #120]	; (8004a18 <displayUpdateTask+0x28c>)
 80049a0:	f7fd fbf4 	bl	800218c <u8g2_SetFont>
        if (localKeys == 0x0FFF)
 80049a4:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 80049a8:	f640 72ff 	movw	r2, #4095	; 0xfff
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10a      	bne.n	80049c6 <displayUpdateTask+0x23a>
        {
            u8g2_SetFont(&u8g2, u8g2_font_streamline_all_t);
 80049b0:	4927      	ldr	r1, [pc, #156]	; (8004a50 <displayUpdateTask+0x2c4>)
 80049b2:	4819      	ldr	r0, [pc, #100]	; (8004a18 <displayUpdateTask+0x28c>)
 80049b4:	f7fd fbea 	bl	800218c <u8g2_SetFont>
            u8g2_DrawUTF8(&u8g2, 2, 30, " \u029a");
 80049b8:	4b26      	ldr	r3, [pc, #152]	; (8004a54 <displayUpdateTask+0x2c8>)
 80049ba:	221e      	movs	r2, #30
 80049bc:	2102      	movs	r1, #2
 80049be:	4816      	ldr	r0, [pc, #88]	; (8004a18 <displayUpdateTask+0x28c>)
 80049c0:	f7fd fb42 	bl	8002048 <u8g2_DrawUTF8>
 80049c4:	e019      	b.n	80049fa <displayUpdateTask+0x26e>
        }
        else
        {
            u8g2_SetFont(&u8g2, u8g2_font_streamline_all_t); // 21x21
 80049c6:	4922      	ldr	r1, [pc, #136]	; (8004a50 <displayUpdateTask+0x2c4>)
 80049c8:	4813      	ldr	r0, [pc, #76]	; (8004a18 <displayUpdateTask+0x28c>)
 80049ca:	f7fd fbdf 	bl	800218c <u8g2_SetFont>
            u8g2_DrawUTF8(&u8g2, 2, 30, " \u0299");
 80049ce:	4b22      	ldr	r3, [pc, #136]	; (8004a58 <displayUpdateTask+0x2cc>)
 80049d0:	221e      	movs	r2, #30
 80049d2:	2102      	movs	r1, #2
 80049d4:	4810      	ldr	r0, [pc, #64]	; (8004a18 <displayUpdateTask+0x28c>)
 80049d6:	f7fd fb37 	bl	8002048 <u8g2_DrawUTF8>
            u8g2_SetFont(&u8g2, u8g2_font_unifont_t_0_76); // 16x16
 80049da:	4920      	ldr	r1, [pc, #128]	; (8004a5c <displayUpdateTask+0x2d0>)
 80049dc:	480e      	ldr	r0, [pc, #56]	; (8004a18 <displayUpdateTask+0x28c>)
 80049de:	f7fd fbd5 	bl	800218c <u8g2_SetFont>
            u8g2_DrawUTF8(&u8g2, 16, 27, " \u266a");
 80049e2:	4b1f      	ldr	r3, [pc, #124]	; (8004a60 <displayUpdateTask+0x2d4>)
 80049e4:	221b      	movs	r2, #27
 80049e6:	2110      	movs	r1, #16
 80049e8:	480b      	ldr	r0, [pc, #44]	; (8004a18 <displayUpdateTask+0x28c>)
 80049ea:	f7fd fb2d 	bl	8002048 <u8g2_DrawUTF8>
            u8g2_DrawUTF8(&u8g2, 13, 19, " \u266a");
 80049ee:	4b1c      	ldr	r3, [pc, #112]	; (8004a60 <displayUpdateTask+0x2d4>)
 80049f0:	2213      	movs	r2, #19
 80049f2:	210d      	movs	r1, #13
 80049f4:	4808      	ldr	r0, [pc, #32]	; (8004a18 <displayUpdateTask+0x28c>)
 80049f6:	f7fd fb27 	bl	8002048 <u8g2_DrawUTF8>
        }

        u8g2_SendBuffer(&u8g2);
 80049fa:	4807      	ldr	r0, [pc, #28]	; (8004a18 <displayUpdateTask+0x28c>)
 80049fc:	f7fc fbdc 	bl	80011b8 <u8g2_SendBuffer>

        HAL_GPIO_TogglePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin);
 8004a00:	2108      	movs	r1, #8
 8004a02:	4818      	ldr	r0, [pc, #96]	; (8004a64 <displayUpdateTask+0x2d8>)
 8004a04:	f004 f95e 	bl	8008cc4 <HAL_GPIO_TogglePin>
    {
 8004a08:	e6ca      	b.n	80047a0 <displayUpdateTask+0x14>
 8004a0a:	bf00      	nop
 8004a0c:	2000000c 	.word	0x2000000c
 8004a10:	20000018 	.word	0x20000018
 8004a14:	20000724 	.word	0x20000724
 8004a18:	2000068c 	.word	0x2000068c
 8004a1c:	0801df38 	.word	0x0801df38
 8004a20:	20000648 	.word	0x20000648
 8004a24:	080128f4 	.word	0x080128f4
 8004a28:	080128fc 	.word	0x080128fc
 8004a2c:	08012904 	.word	0x08012904
 8004a30:	08012918 	.word	0x08012918
 8004a34:	20000012 	.word	0x20000012
 8004a38:	08012920 	.word	0x08012920
 8004a3c:	08012924 	.word	0x08012924
 8004a40:	20000014 	.word	0x20000014
 8004a44:	0801292c 	.word	0x0801292c
 8004a48:	2000004c 	.word	0x2000004c
 8004a4c:	0801f220 	.word	0x0801f220
 8004a50:	08013f98 	.word	0x08013f98
 8004a54:	08012934 	.word	0x08012934
 8004a58:	08012938 	.word	0x08012938
 8004a5c:	0801e244 	.word	0x0801e244
 8004a60:	0801293c 	.word	0x0801293c
 8004a64:	48000400 	.word	0x48000400

08004a68 <HAL_TIM_PeriodElapsedCallback>:
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004a68:	b580      	push	{r7, lr}
 8004a6a:	b082      	sub	sp, #8
 8004a6c:	af00      	add	r7, sp, #0
 8004a6e:	6078      	str	r0, [r7, #4]
    if (htim->Instance == TIM16)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a04      	ldr	r2, [pc, #16]	; (8004a88 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d101      	bne.n	8004a7e <HAL_TIM_PeriodElapsedCallback+0x16>
    {
        HAL_IncTick();
 8004a7a:	f001 fc21 	bl	80062c0 <HAL_IncTick>
    }
}
 8004a7e:	bf00      	nop
 8004a80:	3708      	adds	r7, #8
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bd80      	pop	{r7, pc}
 8004a86:	bf00      	nop
 8004a88:	40014400 	.word	0x40014400

08004a8c <Error_Handler>:

// This function is executed in case of error occurrence.
void Error_Handler(void)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004a90:	b672      	cpsid	i
}
 8004a92:	bf00      	nop
    __disable_irq();
    while (1)
 8004a94:	e7fe      	b.n	8004a94 <Error_Handler+0x8>
	...

08004a98 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a9e:	4b11      	ldr	r3, [pc, #68]	; (8004ae4 <HAL_MspInit+0x4c>)
 8004aa0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aa2:	4a10      	ldr	r2, [pc, #64]	; (8004ae4 <HAL_MspInit+0x4c>)
 8004aa4:	f043 0301 	orr.w	r3, r3, #1
 8004aa8:	6613      	str	r3, [r2, #96]	; 0x60
 8004aaa:	4b0e      	ldr	r3, [pc, #56]	; (8004ae4 <HAL_MspInit+0x4c>)
 8004aac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004aae:	f003 0301 	and.w	r3, r3, #1
 8004ab2:	607b      	str	r3, [r7, #4]
 8004ab4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004ab6:	4b0b      	ldr	r3, [pc, #44]	; (8004ae4 <HAL_MspInit+0x4c>)
 8004ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aba:	4a0a      	ldr	r2, [pc, #40]	; (8004ae4 <HAL_MspInit+0x4c>)
 8004abc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8004ac2:	4b08      	ldr	r3, [pc, #32]	; (8004ae4 <HAL_MspInit+0x4c>)
 8004ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ac6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004aca:	603b      	str	r3, [r7, #0]
 8004acc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004ace:	2200      	movs	r2, #0
 8004ad0:	210f      	movs	r1, #15
 8004ad2:	f06f 0001 	mvn.w	r0, #1
 8004ad6:	f003 fa2f 	bl	8007f38 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004ada:	bf00      	nop
 8004adc:	3708      	adds	r7, #8
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	bf00      	nop
 8004ae4:	40021000 	.word	0x40021000

08004ae8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b09e      	sub	sp, #120	; 0x78
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004af0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004af4:	2200      	movs	r2, #0
 8004af6:	601a      	str	r2, [r3, #0]
 8004af8:	605a      	str	r2, [r3, #4]
 8004afa:	609a      	str	r2, [r3, #8]
 8004afc:	60da      	str	r2, [r3, #12]
 8004afe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004b00:	f107 0310 	add.w	r3, r7, #16
 8004b04:	2254      	movs	r2, #84	; 0x54
 8004b06:	2100      	movs	r1, #0
 8004b08:	4618      	mov	r0, r3
 8004b0a:	f00b fab9 	bl	8010080 <memset>
  if(hadc->Instance==ADC1)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	4a25      	ldr	r2, [pc, #148]	; (8004ba8 <HAL_ADC_MspInit+0xc0>)
 8004b14:	4293      	cmp	r3, r2
 8004b16:	d143      	bne.n	8004ba0 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004b18:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004b1c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004b1e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004b22:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004b24:	2301      	movs	r3, #1
 8004b26:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004b28:	2301      	movs	r3, #1
 8004b2a:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8004b2c:	2310      	movs	r3, #16
 8004b2e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004b30:	2307      	movs	r3, #7
 8004b32:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004b34:	2302      	movs	r3, #2
 8004b36:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004b38:	2302      	movs	r3, #2
 8004b3a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004b3c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004b40:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004b42:	f107 0310 	add.w	r3, r7, #16
 8004b46:	4618      	mov	r0, r3
 8004b48:	f005 fbee 	bl	800a328 <HAL_RCCEx_PeriphCLKConfig>
 8004b4c:	4603      	mov	r3, r0
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d001      	beq.n	8004b56 <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8004b52:	f7ff ff9b 	bl	8004a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004b56:	4b15      	ldr	r3, [pc, #84]	; (8004bac <HAL_ADC_MspInit+0xc4>)
 8004b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b5a:	4a14      	ldr	r2, [pc, #80]	; (8004bac <HAL_ADC_MspInit+0xc4>)
 8004b5c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004b60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b62:	4b12      	ldr	r3, [pc, #72]	; (8004bac <HAL_ADC_MspInit+0xc4>)
 8004b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b66:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004b6a:	60fb      	str	r3, [r7, #12]
 8004b6c:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004b6e:	4b0f      	ldr	r3, [pc, #60]	; (8004bac <HAL_ADC_MspInit+0xc4>)
 8004b70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b72:	4a0e      	ldr	r2, [pc, #56]	; (8004bac <HAL_ADC_MspInit+0xc4>)
 8004b74:	f043 0301 	orr.w	r3, r3, #1
 8004b78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004b7a:	4b0c      	ldr	r3, [pc, #48]	; (8004bac <HAL_ADC_MspInit+0xc4>)
 8004b7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b7e:	f003 0301 	and.w	r3, r3, #1
 8004b82:	60bb      	str	r3, [r7, #8]
 8004b84:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = JOYY_Pin|JOYX_Pin;
 8004b86:	2303      	movs	r3, #3
 8004b88:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004b8a:	230b      	movs	r3, #11
 8004b8c:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b8e:	2300      	movs	r3, #0
 8004b90:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b92:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004b96:	4619      	mov	r1, r3
 8004b98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004b9c:	f003 fef8 	bl	8008990 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004ba0:	bf00      	nop
 8004ba2:	3778      	adds	r7, #120	; 0x78
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	bd80      	pop	{r7, pc}
 8004ba8:	50040000 	.word	0x50040000
 8004bac:	40021000 	.word	0x40021000

08004bb0 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b08a      	sub	sp, #40	; 0x28
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004bb8:	f107 0314 	add.w	r3, r7, #20
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	601a      	str	r2, [r3, #0]
 8004bc0:	605a      	str	r2, [r3, #4]
 8004bc2:	609a      	str	r2, [r3, #8]
 8004bc4:	60da      	str	r2, [r3, #12]
 8004bc6:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	4a29      	ldr	r2, [pc, #164]	; (8004c74 <HAL_CAN_MspInit+0xc4>)
 8004bce:	4293      	cmp	r3, r2
 8004bd0:	d14b      	bne.n	8004c6a <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004bd2:	4b29      	ldr	r3, [pc, #164]	; (8004c78 <HAL_CAN_MspInit+0xc8>)
 8004bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004bd6:	4a28      	ldr	r2, [pc, #160]	; (8004c78 <HAL_CAN_MspInit+0xc8>)
 8004bd8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bdc:	6593      	str	r3, [r2, #88]	; 0x58
 8004bde:	4b26      	ldr	r3, [pc, #152]	; (8004c78 <HAL_CAN_MspInit+0xc8>)
 8004be0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004be2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004be6:	613b      	str	r3, [r7, #16]
 8004be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004bea:	4b23      	ldr	r3, [pc, #140]	; (8004c78 <HAL_CAN_MspInit+0xc8>)
 8004bec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bee:	4a22      	ldr	r2, [pc, #136]	; (8004c78 <HAL_CAN_MspInit+0xc8>)
 8004bf0:	f043 0301 	orr.w	r3, r3, #1
 8004bf4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004bf6:	4b20      	ldr	r3, [pc, #128]	; (8004c78 <HAL_CAN_MspInit+0xc8>)
 8004bf8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bfa:	f003 0301 	and.w	r3, r3, #1
 8004bfe:	60fb      	str	r3, [r7, #12]
 8004c00:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004c02:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c08:	2302      	movs	r3, #2
 8004c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004c0c:	2301      	movs	r3, #1
 8004c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004c10:	2301      	movs	r3, #1
 8004c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004c14:	2309      	movs	r3, #9
 8004c16:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c18:	f107 0314 	add.w	r3, r7, #20
 8004c1c:	4619      	mov	r1, r3
 8004c1e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c22:	f003 feb5 	bl	8008990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004c26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004c2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004c2c:	2302      	movs	r3, #2
 8004c2e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004c30:	2300      	movs	r3, #0
 8004c32:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004c34:	2301      	movs	r3, #1
 8004c36:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004c38:	2309      	movs	r3, #9
 8004c3a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004c3c:	f107 0314 	add.w	r3, r7, #20
 8004c40:	4619      	mov	r1, r3
 8004c42:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004c46:	f003 fea3 	bl	8008990 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 8004c4a:	2200      	movs	r2, #0
 8004c4c:	2106      	movs	r1, #6
 8004c4e:	2013      	movs	r0, #19
 8004c50:	f003 f972 	bl	8007f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8004c54:	2013      	movs	r0, #19
 8004c56:	f003 f98b 	bl	8007f70 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 8004c5a:	2200      	movs	r2, #0
 8004c5c:	2106      	movs	r1, #6
 8004c5e:	2014      	movs	r0, #20
 8004c60:	f003 f96a 	bl	8007f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004c64:	2014      	movs	r0, #20
 8004c66:	f003 f983 	bl	8007f70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004c6a:	bf00      	nop
 8004c6c:	3728      	adds	r7, #40	; 0x28
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	40006400 	.word	0x40006400
 8004c78:	40021000 	.word	0x40021000

08004c7c <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004c7c:	b580      	push	{r7, lr}
 8004c7e:	b08a      	sub	sp, #40	; 0x28
 8004c80:	af00      	add	r7, sp, #0
 8004c82:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004c84:	f107 0314 	add.w	r3, r7, #20
 8004c88:	2200      	movs	r2, #0
 8004c8a:	601a      	str	r2, [r3, #0]
 8004c8c:	605a      	str	r2, [r3, #4]
 8004c8e:	609a      	str	r2, [r3, #8]
 8004c90:	60da      	str	r2, [r3, #12]
 8004c92:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	4a46      	ldr	r2, [pc, #280]	; (8004db4 <HAL_DAC_MspInit+0x138>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	f040 8085 	bne.w	8004daa <HAL_DAC_MspInit+0x12e>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004ca0:	4b45      	ldr	r3, [pc, #276]	; (8004db8 <HAL_DAC_MspInit+0x13c>)
 8004ca2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ca4:	4a44      	ldr	r2, [pc, #272]	; (8004db8 <HAL_DAC_MspInit+0x13c>)
 8004ca6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004caa:	6593      	str	r3, [r2, #88]	; 0x58
 8004cac:	4b42      	ldr	r3, [pc, #264]	; (8004db8 <HAL_DAC_MspInit+0x13c>)
 8004cae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004cb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004cb4:	613b      	str	r3, [r7, #16]
 8004cb6:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004cb8:	4b3f      	ldr	r3, [pc, #252]	; (8004db8 <HAL_DAC_MspInit+0x13c>)
 8004cba:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cbc:	4a3e      	ldr	r2, [pc, #248]	; (8004db8 <HAL_DAC_MspInit+0x13c>)
 8004cbe:	f043 0301 	orr.w	r3, r3, #1
 8004cc2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004cc4:	4b3c      	ldr	r3, [pc, #240]	; (8004db8 <HAL_DAC_MspInit+0x13c>)
 8004cc6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004cc8:	f003 0301 	and.w	r3, r3, #1
 8004ccc:	60fb      	str	r3, [r7, #12]
 8004cce:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = OUTR_Pin|OUTL_Pin;
 8004cd0:	2330      	movs	r3, #48	; 0x30
 8004cd2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004cd4:	2303      	movs	r3, #3
 8004cd6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004cdc:	f107 0314 	add.w	r3, r7, #20
 8004ce0:	4619      	mov	r1, r3
 8004ce2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004ce6:	f003 fe53 	bl	8008990 <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8004cea:	4b34      	ldr	r3, [pc, #208]	; (8004dbc <HAL_DAC_MspInit+0x140>)
 8004cec:	4a34      	ldr	r2, [pc, #208]	; (8004dc0 <HAL_DAC_MspInit+0x144>)
 8004cee:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8004cf0:	4b32      	ldr	r3, [pc, #200]	; (8004dbc <HAL_DAC_MspInit+0x140>)
 8004cf2:	2206      	movs	r2, #6
 8004cf4:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004cf6:	4b31      	ldr	r3, [pc, #196]	; (8004dbc <HAL_DAC_MspInit+0x140>)
 8004cf8:	2210      	movs	r2, #16
 8004cfa:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004cfc:	4b2f      	ldr	r3, [pc, #188]	; (8004dbc <HAL_DAC_MspInit+0x140>)
 8004cfe:	2200      	movs	r2, #0
 8004d00:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004d02:	4b2e      	ldr	r3, [pc, #184]	; (8004dbc <HAL_DAC_MspInit+0x140>)
 8004d04:	2280      	movs	r2, #128	; 0x80
 8004d06:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d08:	4b2c      	ldr	r3, [pc, #176]	; (8004dbc <HAL_DAC_MspInit+0x140>)
 8004d0a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d0e:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d10:	4b2a      	ldr	r3, [pc, #168]	; (8004dbc <HAL_DAC_MspInit+0x140>)
 8004d12:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d16:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8004d18:	4b28      	ldr	r3, [pc, #160]	; (8004dbc <HAL_DAC_MspInit+0x140>)
 8004d1a:	2220      	movs	r2, #32
 8004d1c:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8004d1e:	4b27      	ldr	r3, [pc, #156]	; (8004dbc <HAL_DAC_MspInit+0x140>)
 8004d20:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d24:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8004d26:	4825      	ldr	r0, [pc, #148]	; (8004dbc <HAL_DAC_MspInit+0x140>)
 8004d28:	f003 fc3a 	bl	80085a0 <HAL_DMA_Init>
 8004d2c:	4603      	mov	r3, r0
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d001      	beq.n	8004d36 <HAL_DAC_MspInit+0xba>
    {
      Error_Handler();
 8004d32:	f7ff feab 	bl	8004a8c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	4a20      	ldr	r2, [pc, #128]	; (8004dbc <HAL_DAC_MspInit+0x140>)
 8004d3a:	609a      	str	r2, [r3, #8]
 8004d3c:	4a1f      	ldr	r2, [pc, #124]	; (8004dbc <HAL_DAC_MspInit+0x140>)
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC_CH2 Init */
    hdma_dac_ch2.Instance = DMA1_Channel4;
 8004d42:	4b20      	ldr	r3, [pc, #128]	; (8004dc4 <HAL_DAC_MspInit+0x148>)
 8004d44:	4a20      	ldr	r2, [pc, #128]	; (8004dc8 <HAL_DAC_MspInit+0x14c>)
 8004d46:	601a      	str	r2, [r3, #0]
    hdma_dac_ch2.Init.Request = DMA_REQUEST_5;
 8004d48:	4b1e      	ldr	r3, [pc, #120]	; (8004dc4 <HAL_DAC_MspInit+0x148>)
 8004d4a:	2205      	movs	r2, #5
 8004d4c:	605a      	str	r2, [r3, #4]
    hdma_dac_ch2.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004d4e:	4b1d      	ldr	r3, [pc, #116]	; (8004dc4 <HAL_DAC_MspInit+0x148>)
 8004d50:	2210      	movs	r2, #16
 8004d52:	609a      	str	r2, [r3, #8]
    hdma_dac_ch2.Init.PeriphInc = DMA_PINC_DISABLE;
 8004d54:	4b1b      	ldr	r3, [pc, #108]	; (8004dc4 <HAL_DAC_MspInit+0x148>)
 8004d56:	2200      	movs	r2, #0
 8004d58:	60da      	str	r2, [r3, #12]
    hdma_dac_ch2.Init.MemInc = DMA_MINC_ENABLE;
 8004d5a:	4b1a      	ldr	r3, [pc, #104]	; (8004dc4 <HAL_DAC_MspInit+0x148>)
 8004d5c:	2280      	movs	r2, #128	; 0x80
 8004d5e:	611a      	str	r2, [r3, #16]
    hdma_dac_ch2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004d60:	4b18      	ldr	r3, [pc, #96]	; (8004dc4 <HAL_DAC_MspInit+0x148>)
 8004d62:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004d66:	615a      	str	r2, [r3, #20]
    hdma_dac_ch2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004d68:	4b16      	ldr	r3, [pc, #88]	; (8004dc4 <HAL_DAC_MspInit+0x148>)
 8004d6a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004d6e:	619a      	str	r2, [r3, #24]
    hdma_dac_ch2.Init.Mode = DMA_CIRCULAR;
 8004d70:	4b14      	ldr	r3, [pc, #80]	; (8004dc4 <HAL_DAC_MspInit+0x148>)
 8004d72:	2220      	movs	r2, #32
 8004d74:	61da      	str	r2, [r3, #28]
    hdma_dac_ch2.Init.Priority = DMA_PRIORITY_HIGH;
 8004d76:	4b13      	ldr	r3, [pc, #76]	; (8004dc4 <HAL_DAC_MspInit+0x148>)
 8004d78:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d7c:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch2) != HAL_OK)
 8004d7e:	4811      	ldr	r0, [pc, #68]	; (8004dc4 <HAL_DAC_MspInit+0x148>)
 8004d80:	f003 fc0e 	bl	80085a0 <HAL_DMA_Init>
 8004d84:	4603      	mov	r3, r0
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d001      	beq.n	8004d8e <HAL_DAC_MspInit+0x112>
    {
      Error_Handler();
 8004d8a:	f7ff fe7f 	bl	8004a8c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle2,hdma_dac_ch2);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	4a0c      	ldr	r2, [pc, #48]	; (8004dc4 <HAL_DAC_MspInit+0x148>)
 8004d92:	60da      	str	r2, [r3, #12]
 8004d94:	4a0b      	ldr	r2, [pc, #44]	; (8004dc4 <HAL_DAC_MspInit+0x148>)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004d9a:	2200      	movs	r2, #0
 8004d9c:	2105      	movs	r1, #5
 8004d9e:	2036      	movs	r0, #54	; 0x36
 8004da0:	f003 f8ca 	bl	8007f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004da4:	2036      	movs	r0, #54	; 0x36
 8004da6:	f003 f8e3 	bl	8007f70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8004daa:	bf00      	nop
 8004dac:	3728      	adds	r7, #40	; 0x28
 8004dae:	46bd      	mov	sp, r7
 8004db0:	bd80      	pop	{r7, pc}
 8004db2:	bf00      	nop
 8004db4:	40007400 	.word	0x40007400
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	20000390 	.word	0x20000390
 8004dc0:	40020030 	.word	0x40020030
 8004dc4:	200003d8 	.word	0x200003d8
 8004dc8:	40020044 	.word	0x40020044

08004dcc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b09e      	sub	sp, #120	; 0x78
 8004dd0:	af00      	add	r7, sp, #0
 8004dd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004dd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004dd8:	2200      	movs	r2, #0
 8004dda:	601a      	str	r2, [r3, #0]
 8004ddc:	605a      	str	r2, [r3, #4]
 8004dde:	609a      	str	r2, [r3, #8]
 8004de0:	60da      	str	r2, [r3, #12]
 8004de2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004de4:	f107 0310 	add.w	r3, r7, #16
 8004de8:	2254      	movs	r2, #84	; 0x54
 8004dea:	2100      	movs	r1, #0
 8004dec:	4618      	mov	r0, r3
 8004dee:	f00b f947 	bl	8010080 <memset>
  if(hi2c->Instance==I2C1)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a1e      	ldr	r2, [pc, #120]	; (8004e70 <HAL_I2C_MspInit+0xa4>)
 8004df8:	4293      	cmp	r3, r2
 8004dfa:	d135      	bne.n	8004e68 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8004dfc:	2340      	movs	r3, #64	; 0x40
 8004dfe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8004e00:	2300      	movs	r3, #0
 8004e02:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004e04:	f107 0310 	add.w	r3, r7, #16
 8004e08:	4618      	mov	r0, r3
 8004e0a:	f005 fa8d 	bl	800a328 <HAL_RCCEx_PeriphCLKConfig>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d001      	beq.n	8004e18 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8004e14:	f7ff fe3a 	bl	8004a8c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004e18:	4b16      	ldr	r3, [pc, #88]	; (8004e74 <HAL_I2C_MspInit+0xa8>)
 8004e1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1c:	4a15      	ldr	r2, [pc, #84]	; (8004e74 <HAL_I2C_MspInit+0xa8>)
 8004e1e:	f043 0302 	orr.w	r3, r3, #2
 8004e22:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e24:	4b13      	ldr	r3, [pc, #76]	; (8004e74 <HAL_I2C_MspInit+0xa8>)
 8004e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e28:	f003 0302 	and.w	r3, r3, #2
 8004e2c:	60fb      	str	r3, [r7, #12]
 8004e2e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8004e30:	23c0      	movs	r3, #192	; 0xc0
 8004e32:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004e34:	2312      	movs	r3, #18
 8004e36:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e38:	2300      	movs	r3, #0
 8004e3a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004e3c:	2303      	movs	r3, #3
 8004e3e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004e40:	2304      	movs	r3, #4
 8004e42:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004e44:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004e48:	4619      	mov	r1, r3
 8004e4a:	480b      	ldr	r0, [pc, #44]	; (8004e78 <HAL_I2C_MspInit+0xac>)
 8004e4c:	f003 fda0 	bl	8008990 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004e50:	4b08      	ldr	r3, [pc, #32]	; (8004e74 <HAL_I2C_MspInit+0xa8>)
 8004e52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e54:	4a07      	ldr	r2, [pc, #28]	; (8004e74 <HAL_I2C_MspInit+0xa8>)
 8004e56:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004e5a:	6593      	str	r3, [r2, #88]	; 0x58
 8004e5c:	4b05      	ldr	r3, [pc, #20]	; (8004e74 <HAL_I2C_MspInit+0xa8>)
 8004e5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004e64:	60bb      	str	r3, [r7, #8]
 8004e66:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8004e68:	bf00      	nop
 8004e6a:	3778      	adds	r7, #120	; 0x78
 8004e6c:	46bd      	mov	sp, r7
 8004e6e:	bd80      	pop	{r7, pc}
 8004e70:	40005400 	.word	0x40005400
 8004e74:	40021000 	.word	0x40021000
 8004e78:	48000400 	.word	0x48000400

08004e7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8004e7c:	b580      	push	{r7, lr}
 8004e7e:	b086      	sub	sp, #24
 8004e80:	af00      	add	r7, sp, #0
 8004e82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a1f      	ldr	r2, [pc, #124]	; (8004f08 <HAL_TIM_Base_MspInit+0x8c>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d114      	bne.n	8004eb8 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8004e8e:	4b1f      	ldr	r3, [pc, #124]	; (8004f0c <HAL_TIM_Base_MspInit+0x90>)
 8004e90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e92:	4a1e      	ldr	r2, [pc, #120]	; (8004f0c <HAL_TIM_Base_MspInit+0x90>)
 8004e94:	f043 0310 	orr.w	r3, r3, #16
 8004e98:	6593      	str	r3, [r2, #88]	; 0x58
 8004e9a:	4b1c      	ldr	r3, [pc, #112]	; (8004f0c <HAL_TIM_Base_MspInit+0x90>)
 8004e9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9e:	f003 0310 	and.w	r3, r3, #16
 8004ea2:	617b      	str	r3, [r7, #20]
 8004ea4:	697b      	ldr	r3, [r7, #20]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	2105      	movs	r1, #5
 8004eaa:	2036      	movs	r0, #54	; 0x36
 8004eac:	f003 f844 	bl	8007f38 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8004eb0:	2036      	movs	r0, #54	; 0x36
 8004eb2:	f003 f85d 	bl	8007f70 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8004eb6:	e022      	b.n	8004efe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	681b      	ldr	r3, [r3, #0]
 8004ebc:	4a14      	ldr	r2, [pc, #80]	; (8004f10 <HAL_TIM_Base_MspInit+0x94>)
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d10c      	bne.n	8004edc <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8004ec2:	4b12      	ldr	r3, [pc, #72]	; (8004f0c <HAL_TIM_Base_MspInit+0x90>)
 8004ec4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ec6:	4a11      	ldr	r2, [pc, #68]	; (8004f0c <HAL_TIM_Base_MspInit+0x90>)
 8004ec8:	f043 0320 	orr.w	r3, r3, #32
 8004ecc:	6593      	str	r3, [r2, #88]	; 0x58
 8004ece:	4b0f      	ldr	r3, [pc, #60]	; (8004f0c <HAL_TIM_Base_MspInit+0x90>)
 8004ed0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004ed2:	f003 0320 	and.w	r3, r3, #32
 8004ed6:	613b      	str	r3, [r7, #16]
 8004ed8:	693b      	ldr	r3, [r7, #16]
}
 8004eda:	e010      	b.n	8004efe <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM15)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a0c      	ldr	r2, [pc, #48]	; (8004f14 <HAL_TIM_Base_MspInit+0x98>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d10b      	bne.n	8004efe <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM15_CLK_ENABLE();
 8004ee6:	4b09      	ldr	r3, [pc, #36]	; (8004f0c <HAL_TIM_Base_MspInit+0x90>)
 8004ee8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004eea:	4a08      	ldr	r2, [pc, #32]	; (8004f0c <HAL_TIM_Base_MspInit+0x90>)
 8004eec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004ef0:	6613      	str	r3, [r2, #96]	; 0x60
 8004ef2:	4b06      	ldr	r3, [pc, #24]	; (8004f0c <HAL_TIM_Base_MspInit+0x90>)
 8004ef4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ef6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004efa:	60fb      	str	r3, [r7, #12]
 8004efc:	68fb      	ldr	r3, [r7, #12]
}
 8004efe:	bf00      	nop
 8004f00:	3718      	adds	r7, #24
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
 8004f06:	bf00      	nop
 8004f08:	40001000 	.word	0x40001000
 8004f0c:	40021000 	.word	0x40021000
 8004f10:	40001400 	.word	0x40001400
 8004f14:	40014000 	.word	0x40014000

08004f18 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b09e      	sub	sp, #120	; 0x78
 8004f1c:	af00      	add	r7, sp, #0
 8004f1e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004f24:	2200      	movs	r2, #0
 8004f26:	601a      	str	r2, [r3, #0]
 8004f28:	605a      	str	r2, [r3, #4]
 8004f2a:	609a      	str	r2, [r3, #8]
 8004f2c:	60da      	str	r2, [r3, #12]
 8004f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004f30:	f107 0310 	add.w	r3, r7, #16
 8004f34:	2254      	movs	r2, #84	; 0x54
 8004f36:	2100      	movs	r1, #0
 8004f38:	4618      	mov	r0, r3
 8004f3a:	f00b f8a1 	bl	8010080 <memset>
  if(huart->Instance==USART2)
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	4a28      	ldr	r2, [pc, #160]	; (8004fe4 <HAL_UART_MspInit+0xcc>)
 8004f44:	4293      	cmp	r3, r2
 8004f46:	d148      	bne.n	8004fda <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8004f48:	2302      	movs	r3, #2
 8004f4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004f50:	f107 0310 	add.w	r3, r7, #16
 8004f54:	4618      	mov	r0, r3
 8004f56:	f005 f9e7 	bl	800a328 <HAL_RCCEx_PeriphCLKConfig>
 8004f5a:	4603      	mov	r3, r0
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d001      	beq.n	8004f64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8004f60:	f7ff fd94 	bl	8004a8c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004f64:	4b20      	ldr	r3, [pc, #128]	; (8004fe8 <HAL_UART_MspInit+0xd0>)
 8004f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f68:	4a1f      	ldr	r2, [pc, #124]	; (8004fe8 <HAL_UART_MspInit+0xd0>)
 8004f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8004f70:	4b1d      	ldr	r3, [pc, #116]	; (8004fe8 <HAL_UART_MspInit+0xd0>)
 8004f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f78:	60fb      	str	r3, [r7, #12]
 8004f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f7c:	4b1a      	ldr	r3, [pc, #104]	; (8004fe8 <HAL_UART_MspInit+0xd0>)
 8004f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f80:	4a19      	ldr	r2, [pc, #100]	; (8004fe8 <HAL_UART_MspInit+0xd0>)
 8004f82:	f043 0301 	orr.w	r3, r3, #1
 8004f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f88:	4b17      	ldr	r3, [pc, #92]	; (8004fe8 <HAL_UART_MspInit+0xd0>)
 8004f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f8c:	f003 0301 	and.w	r3, r3, #1
 8004f90:	60bb      	str	r3, [r7, #8]
 8004f92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8004f94:	2304      	movs	r3, #4
 8004f96:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f98:	2302      	movs	r3, #2
 8004f9a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f9c:	2300      	movs	r3, #0
 8004f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fa0:	2303      	movs	r3, #3
 8004fa2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004fa4:	2307      	movs	r3, #7
 8004fa6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fa8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004fac:	4619      	mov	r1, r3
 8004fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fb2:	f003 fced 	bl	8008990 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8004fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004fba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004fbc:	2302      	movs	r3, #2
 8004fbe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004fc0:	2300      	movs	r3, #0
 8004fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004fc4:	2303      	movs	r3, #3
 8004fc6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8004fc8:	2303      	movs	r3, #3
 8004fca:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004fcc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004fd0:	4619      	mov	r1, r3
 8004fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004fd6:	f003 fcdb 	bl	8008990 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004fda:	bf00      	nop
 8004fdc:	3778      	adds	r7, #120	; 0x78
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40004400 	.word	0x40004400
 8004fe8:	40021000 	.word	0x40021000

08004fec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08c      	sub	sp, #48	; 0x30
 8004ff0:	af00      	add	r7, sp, #0
 8004ff2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8004ff4:	2300      	movs	r3, #0
 8004ff6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8004ffa:	4b2e      	ldr	r3, [pc, #184]	; (80050b4 <HAL_InitTick+0xc8>)
 8004ffc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004ffe:	4a2d      	ldr	r2, [pc, #180]	; (80050b4 <HAL_InitTick+0xc8>)
 8005000:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005004:	6613      	str	r3, [r2, #96]	; 0x60
 8005006:	4b2b      	ldr	r3, [pc, #172]	; (80050b4 <HAL_InitTick+0xc8>)
 8005008:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800500a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800500e:	60bb      	str	r3, [r7, #8]
 8005010:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005012:	f107 020c 	add.w	r2, r7, #12
 8005016:	f107 0310 	add.w	r3, r7, #16
 800501a:	4611      	mov	r1, r2
 800501c:	4618      	mov	r0, r3
 800501e:	f005 f8f1 	bl	800a204 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005022:	f005 f8d9 	bl	800a1d8 <HAL_RCC_GetPCLK2Freq>
 8005026:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502a:	4a23      	ldr	r2, [pc, #140]	; (80050b8 <HAL_InitTick+0xcc>)
 800502c:	fba2 2303 	umull	r2, r3, r2, r3
 8005030:	0c9b      	lsrs	r3, r3, #18
 8005032:	3b01      	subs	r3, #1
 8005034:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8005036:	4b21      	ldr	r3, [pc, #132]	; (80050bc <HAL_InitTick+0xd0>)
 8005038:	4a21      	ldr	r2, [pc, #132]	; (80050c0 <HAL_InitTick+0xd4>)
 800503a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800503c:	4b1f      	ldr	r3, [pc, #124]	; (80050bc <HAL_InitTick+0xd0>)
 800503e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005042:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8005044:	4a1d      	ldr	r2, [pc, #116]	; (80050bc <HAL_InitTick+0xd0>)
 8005046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005048:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800504a:	4b1c      	ldr	r3, [pc, #112]	; (80050bc <HAL_InitTick+0xd0>)
 800504c:	2200      	movs	r2, #0
 800504e:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005050:	4b1a      	ldr	r3, [pc, #104]	; (80050bc <HAL_InitTick+0xd0>)
 8005052:	2200      	movs	r2, #0
 8005054:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005056:	4b19      	ldr	r3, [pc, #100]	; (80050bc <HAL_InitTick+0xd0>)
 8005058:	2200      	movs	r2, #0
 800505a:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 800505c:	4817      	ldr	r0, [pc, #92]	; (80050bc <HAL_InitTick+0xd0>)
 800505e:	f005 fc5b 	bl	800a918 <HAL_TIM_Base_Init>
 8005062:	4603      	mov	r3, r0
 8005064:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8005068:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800506c:	2b00      	cmp	r3, #0
 800506e:	d11b      	bne.n	80050a8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8005070:	4812      	ldr	r0, [pc, #72]	; (80050bc <HAL_InitTick+0xd0>)
 8005072:	f005 fcf5 	bl	800aa60 <HAL_TIM_Base_Start_IT>
 8005076:	4603      	mov	r3, r0
 8005078:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 800507c:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8005080:	2b00      	cmp	r3, #0
 8005082:	d111      	bne.n	80050a8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8005084:	2019      	movs	r0, #25
 8005086:	f002 ff73 	bl	8007f70 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	2b0f      	cmp	r3, #15
 800508e:	d808      	bhi.n	80050a2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8005090:	2200      	movs	r2, #0
 8005092:	6879      	ldr	r1, [r7, #4]
 8005094:	2019      	movs	r0, #25
 8005096:	f002 ff4f 	bl	8007f38 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800509a:	4a0a      	ldr	r2, [pc, #40]	; (80050c4 <HAL_InitTick+0xd8>)
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	6013      	str	r3, [r2, #0]
 80050a0:	e002      	b.n	80050a8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80050a2:	2301      	movs	r3, #1
 80050a4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80050a8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80050ac:	4618      	mov	r0, r3
 80050ae:	3730      	adds	r7, #48	; 0x30
 80050b0:	46bd      	mov	sp, r7
 80050b2:	bd80      	pop	{r7, pc}
 80050b4:	40021000 	.word	0x40021000
 80050b8:	431bde83 	.word	0x431bde83
 80050bc:	20000754 	.word	0x20000754
 80050c0:	40014400 	.word	0x40014400
 80050c4:	20000050 	.word	0x20000050

080050c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80050c8:	b480      	push	{r7}
 80050ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80050cc:	e7fe      	b.n	80050cc <NMI_Handler+0x4>

080050ce <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80050ce:	b480      	push	{r7}
 80050d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80050d2:	e7fe      	b.n	80050d2 <HardFault_Handler+0x4>

080050d4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80050d4:	b480      	push	{r7}
 80050d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80050d8:	e7fe      	b.n	80050d8 <MemManage_Handler+0x4>

080050da <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80050da:	b480      	push	{r7}
 80050dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80050de:	e7fe      	b.n	80050de <BusFault_Handler+0x4>

080050e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80050e0:	b480      	push	{r7}
 80050e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80050e4:	e7fe      	b.n	80050e4 <UsageFault_Handler+0x4>

080050e6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80050e6:	b480      	push	{r7}
 80050e8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80050ea:	bf00      	nop
 80050ec:	46bd      	mov	sp, r7
 80050ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f2:	4770      	bx	lr

080050f4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80050f4:	b580      	push	{r7, lr}
 80050f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_memtomem_dma1_channel1);
 80050f8:	4802      	ldr	r0, [pc, #8]	; (8005104 <DMA1_Channel1_IRQHandler+0x10>)
 80050fa:	f003 fb69 	bl	80087d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80050fe:	bf00      	nop
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	200005dc 	.word	0x200005dc

08005108 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005108:	b580      	push	{r7, lr}
 800510a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 800510c:	4802      	ldr	r0, [pc, #8]	; (8005118 <DMA1_Channel3_IRQHandler+0x10>)
 800510e:	f003 fb5f 	bl	80087d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 8005112:	bf00      	nop
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000390 	.word	0x20000390

0800511c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800511c:	b580      	push	{r7, lr}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch2);
 8005120:	4802      	ldr	r0, [pc, #8]	; (800512c <DMA1_Channel4_IRQHandler+0x10>)
 8005122:	f003 fb55 	bl	80087d0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8005126:	bf00      	nop
 8005128:	bd80      	pop	{r7, pc}
 800512a:	bf00      	nop
 800512c:	200003d8 	.word	0x200003d8

08005130 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8005130:	b580      	push	{r7, lr}
 8005132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005134:	4802      	ldr	r0, [pc, #8]	; (8005140 <CAN1_TX_IRQHandler+0x10>)
 8005136:	f002 fc35 	bl	80079a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 800513a:	bf00      	nop
 800513c:	bd80      	pop	{r7, pc}
 800513e:	bf00      	nop
 8005140:	20000354 	.word	0x20000354

08005144 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8005144:	b580      	push	{r7, lr}
 8005146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005148:	4802      	ldr	r0, [pc, #8]	; (8005154 <CAN1_RX0_IRQHandler+0x10>)
 800514a:	f002 fc2b 	bl	80079a4 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800514e:	bf00      	nop
 8005150:	bd80      	pop	{r7, pc}
 8005152:	bf00      	nop
 8005154:	20000354 	.word	0x20000354

08005158 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005158:	b580      	push	{r7, lr}
 800515a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 800515c:	4802      	ldr	r0, [pc, #8]	; (8005168 <TIM1_UP_TIM16_IRQHandler+0x10>)
 800515e:	f005 fcd3 	bl	800ab08 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8005162:	bf00      	nop
 8005164:	bd80      	pop	{r7, pc}
 8005166:	bf00      	nop
 8005168:	20000754 	.word	0x20000754

0800516c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005170:	4803      	ldr	r0, [pc, #12]	; (8005180 <TIM6_DAC_IRQHandler+0x14>)
 8005172:	f005 fcc9 	bl	800ab08 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8005176:	4803      	ldr	r0, [pc, #12]	; (8005184 <TIM6_DAC_IRQHandler+0x18>)
 8005178:	f002 fff6 	bl	8008168 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800517c:	bf00      	nop
 800517e:	bd80      	pop	{r7, pc}
 8005180:	20000474 	.word	0x20000474
 8005184:	2000037c 	.word	0x2000037c

08005188 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005188:	b580      	push	{r7, lr}
 800518a:	b086      	sub	sp, #24
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005190:	4a14      	ldr	r2, [pc, #80]	; (80051e4 <_sbrk+0x5c>)
 8005192:	4b15      	ldr	r3, [pc, #84]	; (80051e8 <_sbrk+0x60>)
 8005194:	1ad3      	subs	r3, r2, r3
 8005196:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800519c:	4b13      	ldr	r3, [pc, #76]	; (80051ec <_sbrk+0x64>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d102      	bne.n	80051aa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80051a4:	4b11      	ldr	r3, [pc, #68]	; (80051ec <_sbrk+0x64>)
 80051a6:	4a12      	ldr	r2, [pc, #72]	; (80051f0 <_sbrk+0x68>)
 80051a8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80051aa:	4b10      	ldr	r3, [pc, #64]	; (80051ec <_sbrk+0x64>)
 80051ac:	681a      	ldr	r2, [r3, #0]
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	4413      	add	r3, r2
 80051b2:	693a      	ldr	r2, [r7, #16]
 80051b4:	429a      	cmp	r2, r3
 80051b6:	d207      	bcs.n	80051c8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80051b8:	f00a ff28 	bl	801000c <__errno>
 80051bc:	4603      	mov	r3, r0
 80051be:	220c      	movs	r2, #12
 80051c0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80051c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80051c6:	e009      	b.n	80051dc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80051c8:	4b08      	ldr	r3, [pc, #32]	; (80051ec <_sbrk+0x64>)
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80051ce:	4b07      	ldr	r3, [pc, #28]	; (80051ec <_sbrk+0x64>)
 80051d0:	681a      	ldr	r2, [r3, #0]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	4413      	add	r3, r2
 80051d6:	4a05      	ldr	r2, [pc, #20]	; (80051ec <_sbrk+0x64>)
 80051d8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80051da:	68fb      	ldr	r3, [r7, #12]
}
 80051dc:	4618      	mov	r0, r3
 80051de:	3718      	adds	r7, #24
 80051e0:	46bd      	mov	sp, r7
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	20010000 	.word	0x20010000
 80051e8:	00000400 	.word	0x00000400
 80051ec:	200007a0 	.word	0x200007a0
 80051f0:	20009328 	.word	0x20009328

080051f4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80051f4:	b480      	push	{r7}
 80051f6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80051f8:	4b06      	ldr	r3, [pc, #24]	; (8005214 <SystemInit+0x20>)
 80051fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051fe:	4a05      	ldr	r2, [pc, #20]	; (8005214 <SystemInit+0x20>)
 8005200:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005204:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005208:	bf00      	nop
 800520a:	46bd      	mov	sp, r7
 800520c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005210:	4770      	bx	lr
 8005212:	bf00      	nop
 8005214:	e000ed00 	.word	0xe000ed00

08005218 <init_lookup_tables>:

uint16_t DDS_OUT[DDS_OUT_SAMPLES];

// Initialise the contents of the all the LUTs
// This means generating the different instrument waveforms
void init_lookup_tables() {
 8005218:	b580      	push	{r7, lr}
 800521a:	b082      	sub	sp, #8
 800521c:	af00      	add	r7, sp, #0

	for (int t = 0; t < 12; t++) {
 800521e:	2300      	movs	r3, #0
 8005220:	607b      	str	r3, [r7, #4]
 8005222:	e03c      	b.n	800529e <init_lookup_tables+0x86>
		DDS_steps[t] = 3520.0 * pow(2, (t - 9) / 12.0) / 44100 * 65536.0;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	3b09      	subs	r3, #9
 8005228:	4618      	mov	r0, r3
 800522a:	f7fb f97b 	bl	8000524 <__aeabi_i2d>
 800522e:	f04f 0200 	mov.w	r2, #0
 8005232:	4b2d      	ldr	r3, [pc, #180]	; (80052e8 <init_lookup_tables+0xd0>)
 8005234:	f7fb fb0a 	bl	800084c <__aeabi_ddiv>
 8005238:	4602      	mov	r2, r0
 800523a:	460b      	mov	r3, r1
 800523c:	ec43 2b17 	vmov	d7, r2, r3
 8005240:	eeb0 1a47 	vmov.f32	s2, s14
 8005244:	eef0 1a67 	vmov.f32	s3, s15
 8005248:	ed9f 0b23 	vldr	d0, [pc, #140]	; 80052d8 <init_lookup_tables+0xc0>
 800524c:	f00b fc40 	bl	8010ad0 <pow>
 8005250:	ec51 0b10 	vmov	r0, r1, d0
 8005254:	f04f 0200 	mov.w	r2, #0
 8005258:	4b24      	ldr	r3, [pc, #144]	; (80052ec <init_lookup_tables+0xd4>)
 800525a:	f7fb f9cd 	bl	80005f8 <__aeabi_dmul>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4610      	mov	r0, r2
 8005264:	4619      	mov	r1, r3
 8005266:	a31e      	add	r3, pc, #120	; (adr r3, 80052e0 <init_lookup_tables+0xc8>)
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f7fb faee 	bl	800084c <__aeabi_ddiv>
 8005270:	4602      	mov	r2, r0
 8005272:	460b      	mov	r3, r1
 8005274:	4610      	mov	r0, r2
 8005276:	4619      	mov	r1, r3
 8005278:	f04f 0200 	mov.w	r2, #0
 800527c:	4b1c      	ldr	r3, [pc, #112]	; (80052f0 <init_lookup_tables+0xd8>)
 800527e:	f7fb f9bb 	bl	80005f8 <__aeabi_dmul>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4610      	mov	r0, r2
 8005288:	4619      	mov	r1, r3
 800528a:	f7fb fc8d 	bl	8000ba8 <__aeabi_d2uiz>
 800528e:	4602      	mov	r2, r0
 8005290:	4918      	ldr	r1, [pc, #96]	; (80052f4 <init_lookup_tables+0xdc>)
 8005292:	687b      	ldr	r3, [r7, #4]
 8005294:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int t = 0; t < 12; t++) {
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3301      	adds	r3, #1
 800529c:	607b      	str	r3, [r7, #4]
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2b0b      	cmp	r3, #11
 80052a2:	ddbf      	ble.n	8005224 <init_lookup_tables+0xc>
	}

	for (WaveType type = 0; type < END_WAVETYPE; type++) {
 80052a4:	2300      	movs	r3, #0
 80052a6:	70fb      	strb	r3, [r7, #3]
 80052a8:	e00b      	b.n	80052c2 <init_lookup_tables+0xaa>
		generate_waveform(DDS_LUT[type], type);
 80052aa:	78fb      	ldrb	r3, [r7, #3]
 80052ac:	02db      	lsls	r3, r3, #11
 80052ae:	4a12      	ldr	r2, [pc, #72]	; (80052f8 <init_lookup_tables+0xe0>)
 80052b0:	4413      	add	r3, r2
 80052b2:	78fa      	ldrb	r2, [r7, #3]
 80052b4:	4611      	mov	r1, r2
 80052b6:	4618      	mov	r0, r3
 80052b8:	f000 f822 	bl	8005300 <generate_waveform>
	for (WaveType type = 0; type < END_WAVETYPE; type++) {
 80052bc:	78fb      	ldrb	r3, [r7, #3]
 80052be:	3301      	adds	r3, #1
 80052c0:	70fb      	strb	r3, [r7, #3]
 80052c2:	78fb      	ldrb	r3, [r7, #3]
 80052c4:	2b06      	cmp	r3, #6
 80052c6:	d9f0      	bls.n	80052aa <init_lookup_tables+0x92>
	}
}
 80052c8:	bf00      	nop
 80052ca:	bf00      	nop
 80052cc:	3708      	adds	r7, #8
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	f3af 8000 	nop.w
 80052d8:	00000000 	.word	0x00000000
 80052dc:	40000000 	.word	0x40000000
 80052e0:	00000000 	.word	0x00000000
 80052e4:	40e58880 	.word	0x40e58880
 80052e8:	40280000 	.word	0x40280000
 80052ec:	40ab8000 	.word	0x40ab8000
 80052f0:	40f00000 	.word	0x40f00000
 80052f4:	200047d4 	.word	0x200047d4
 80052f8:	200007a4 	.word	0x200007a4
 80052fc:	00000000 	.word	0x00000000

08005300 <generate_waveform>:

void generate_waveform(int16_t lookup_table[DDS_LUT_SAMPLES], WaveType wave) {
 8005300:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005304:	b0a6      	sub	sp, #152	; 0x98
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
 800530a:	460b      	mov	r3, r1
 800530c:	70fb      	strb	r3, [r7, #3]

	int half_samples = DDS_LUT_SAMPLES / 2;
 800530e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005312:	667b      	str	r3, [r7, #100]	; 0x64

	switch (wave) {
 8005314:	78fb      	ldrb	r3, [r7, #3]
 8005316:	2b06      	cmp	r3, #6
 8005318:	f200 83a6 	bhi.w	8005a68 <generate_waveform+0x768>
 800531c:	a201      	add	r2, pc, #4	; (adr r2, 8005324 <generate_waveform+0x24>)
 800531e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005322:	bf00      	nop
 8005324:	08005341 	.word	0x08005341
 8005328:	08005397 	.word	0x08005397
 800532c:	08005425 	.word	0x08005425
 8005330:	08005465 	.word	0x08005465
 8005334:	08005a69 	.word	0x08005a69
 8005338:	08005559 	.word	0x08005559
 800533c:	08005881 	.word	0x08005881
	case SAWTOOTH: {
		for (int i = 0; i < DDS_LUT_SAMPLES; i++) {
 8005340:	2300      	movs	r3, #0
 8005342:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005346:	e01f      	b.n	8005388 <generate_waveform+0x88>
			lookup_table[i] =
					(i <= half_samples) ?
							2048
									* ((float) (i - half_samples)
 8005348:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800534c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	ee07 3a90 	vmov	s15, r3
 8005354:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
											/ (float) DDS_LUT_SAMPLES) :
 8005358:	eddf 6acd 	vldr	s13, [pc, #820]	; 8005690 <generate_waveform+0x390>
 800535c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005360:	ed9f 7acc 	vldr	s14, [pc, #816]	; 8005694 <generate_waveform+0x394>
 8005364:	ee67 7a87 	vmul.f32	s15, s15, s14
			lookup_table[i] =
 8005368:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800536c:	005b      	lsls	r3, r3, #1
 800536e:	687a      	ldr	r2, [r7, #4]
 8005370:	4413      	add	r3, r2
 8005372:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005376:	ee17 2a90 	vmov	r2, s15
 800537a:	b212      	sxth	r2, r2
 800537c:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < DDS_LUT_SAMPLES; i++) {
 800537e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005382:	3301      	adds	r3, #1
 8005384:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005388:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800538c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005390:	dbda      	blt.n	8005348 <generate_waveform+0x48>
							2048
									* ((float) (i - half_samples)
											/ (float) DDS_LUT_SAMPLES);
		}
	}
		break;
 8005392:	f000 bc7a 	b.w	8005c8a <generate_waveform+0x98a>
	case SINE: {
		for (int i = 0; i < DDS_LUT_SAMPLES; i++) {
 8005396:	2300      	movs	r3, #0
 8005398:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800539c:	e03b      	b.n	8005416 <generate_waveform+0x116>
			lookup_table[i] = 2048
					* sin(2.0 * M_PI * (float) i / (float) DDS_LUT_SAMPLES);
 800539e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053a2:	ee07 3a90 	vmov	s15, r3
 80053a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053aa:	ee17 0a90 	vmov	r0, s15
 80053ae:	f7fb f8cb 	bl	8000548 <__aeabi_f2d>
 80053b2:	a3b3      	add	r3, pc, #716	; (adr r3, 8005680 <generate_waveform+0x380>)
 80053b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b8:	f7fb f91e 	bl	80005f8 <__aeabi_dmul>
 80053bc:	4602      	mov	r2, r0
 80053be:	460b      	mov	r3, r1
 80053c0:	4610      	mov	r0, r2
 80053c2:	4619      	mov	r1, r3
 80053c4:	f04f 0200 	mov.w	r2, #0
 80053c8:	4bb3      	ldr	r3, [pc, #716]	; (8005698 <generate_waveform+0x398>)
 80053ca:	f7fb fa3f 	bl	800084c <__aeabi_ddiv>
 80053ce:	4602      	mov	r2, r0
 80053d0:	460b      	mov	r3, r1
 80053d2:	ec43 2b17 	vmov	d7, r2, r3
 80053d6:	eeb0 0a47 	vmov.f32	s0, s14
 80053da:	eef0 0a67 	vmov.f32	s1, s15
 80053de:	f00b fb1f 	bl	8010a20 <sin>
 80053e2:	ec51 0b10 	vmov	r0, r1, d0
 80053e6:	f04f 0200 	mov.w	r2, #0
 80053ea:	4bac      	ldr	r3, [pc, #688]	; (800569c <generate_waveform+0x39c>)
 80053ec:	f7fb f904 	bl	80005f8 <__aeabi_dmul>
 80053f0:	4602      	mov	r2, r0
 80053f2:	460b      	mov	r3, r1
 80053f4:	4610      	mov	r0, r2
 80053f6:	4619      	mov	r1, r3
			lookup_table[i] = 2048
 80053f8:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80053fc:	005b      	lsls	r3, r3, #1
 80053fe:	687a      	ldr	r2, [r7, #4]
 8005400:	18d4      	adds	r4, r2, r3
 8005402:	f7fb fba9 	bl	8000b58 <__aeabi_d2iz>
 8005406:	4603      	mov	r3, r0
 8005408:	b21b      	sxth	r3, r3
 800540a:	8023      	strh	r3, [r4, #0]
		for (int i = 0; i < DDS_LUT_SAMPLES; i++) {
 800540c:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005410:	3301      	adds	r3, #1
 8005412:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005416:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800541a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800541e:	dbbe      	blt.n	800539e <generate_waveform+0x9e>
		}
	}
		break;
 8005420:	f000 bc33 	b.w	8005c8a <generate_waveform+0x98a>
	case SQUARE: {
		for (int i = 0; i < DDS_LUT_SAMPLES; i++) {
 8005424:	2300      	movs	r3, #0
 8005426:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800542a:	e014      	b.n	8005456 <generate_waveform+0x156>
			lookup_table[i] =
 800542c:	f8d7 208c 	ldr.w	r2, [r7, #140]	; 0x8c
 8005430:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005432:	429a      	cmp	r2, r3
 8005434:	dc02      	bgt.n	800543c <generate_waveform+0x13c>
 8005436:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800543a:	e000      	b.n	800543e <generate_waveform+0x13e>
 800543c:	4998      	ldr	r1, [pc, #608]	; (80056a0 <generate_waveform+0x3a0>)
 800543e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005442:	005b      	lsls	r3, r3, #1
 8005444:	687a      	ldr	r2, [r7, #4]
 8005446:	4413      	add	r3, r2
 8005448:	460a      	mov	r2, r1
 800544a:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < DDS_LUT_SAMPLES; i++) {
 800544c:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005450:	3301      	adds	r3, #1
 8005452:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005456:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800545a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800545e:	dbe5      	blt.n	800542c <generate_waveform+0x12c>
					(i <= half_samples) ? 2048 * (1.0) : 2048 * (-1.0);
		}
	}
		break;
 8005460:	f000 bc13 	b.w	8005c8a <generate_waveform+0x98a>
	case TRIANGLE: {
		int half_samples = DDS_LUT_SAMPLES / 2;
 8005464:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005468:	61bb      	str	r3, [r7, #24]
		int first_fourth = DDS_LUT_SAMPLES / 4;
 800546a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800546e:	617b      	str	r3, [r7, #20]
		int third_fourth = half_samples + first_fourth;
 8005470:	69ba      	ldr	r2, [r7, #24]
 8005472:	697b      	ldr	r3, [r7, #20]
 8005474:	4413      	add	r3, r2
 8005476:	613b      	str	r3, [r7, #16]
		for (int i = 0; i < DDS_LUT_SAMPLES; i++) {
 8005478:	2300      	movs	r3, #0
 800547a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800547e:	e065      	b.n	800554c <generate_waveform+0x24c>
			lookup_table[i] =
 8005480:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	429a      	cmp	r2, r3
 8005488:	dc14      	bgt.n	80054b4 <generate_waveform+0x1b4>
					(i <= first_fourth) ?
							2048 * ((float) (-i) / (float) DDS_LUT_SAMPLES) :
 800548a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800548e:	425b      	negs	r3, r3
 8005490:	ee07 3a90 	vmov	s15, r3
 8005494:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005498:	eddf 6a7d 	vldr	s13, [pc, #500]	; 8005690 <generate_waveform+0x390>
 800549c:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80054a0:	ed9f 7a7c 	vldr	s14, [pc, #496]	; 8005694 <generate_waveform+0x394>
 80054a4:	ee67 7a87 	vmul.f32	s15, s15, s14
			lookup_table[i] =
 80054a8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054ac:	ee17 3a90 	vmov	r3, s15
 80054b0:	b21b      	sxth	r3, r3
 80054b2:	e02f      	b.n	8005514 <generate_waveform+0x214>
 80054b4:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80054b8:	693b      	ldr	r3, [r7, #16]
 80054ba:	429a      	cmp	r2, r3
 80054bc:	dc15      	bgt.n	80054ea <generate_waveform+0x1ea>
					(i <= third_fourth) ?
							2048
									* ((float) (i - half_samples)
 80054be:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 80054c2:	69bb      	ldr	r3, [r7, #24]
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	ee07 3a90 	vmov	s15, r3
 80054ca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
											/ (float) DDS_LUT_SAMPLES) :
 80054ce:	eddf 6a70 	vldr	s13, [pc, #448]	; 8005690 <generate_waveform+0x390>
 80054d2:	eec7 7a26 	vdiv.f32	s15, s14, s13
									* ((float) (i - half_samples)
 80054d6:	ed9f 7a6f 	vldr	s14, [pc, #444]	; 8005694 <generate_waveform+0x394>
 80054da:	ee67 7a87 	vmul.f32	s15, s15, s14
			lookup_table[i] =
 80054de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80054e2:	ee17 3a90 	vmov	r3, s15
 80054e6:	b21b      	sxth	r3, r3
 80054e8:	e014      	b.n	8005514 <generate_waveform+0x214>
							2048
									* ((float) (DDS_LUT_SAMPLES - i)
 80054ea:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054ee:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 80054f2:	ee07 3a90 	vmov	s15, r3
 80054f6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
											/ (float) DDS_LUT_SAMPLES);
 80054fa:	eddf 6a65 	vldr	s13, [pc, #404]	; 8005690 <generate_waveform+0x390>
 80054fe:	eec7 7a26 	vdiv.f32	s15, s14, s13
									* ((float) (DDS_LUT_SAMPLES - i)
 8005502:	ed9f 7a64 	vldr	s14, [pc, #400]	; 8005694 <generate_waveform+0x394>
 8005506:	ee67 7a87 	vmul.f32	s15, s15, s14
			lookup_table[i] =
 800550a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800550e:	ee17 3a90 	vmov	r3, s15
 8005512:	b21b      	sxth	r3, r3
 8005514:	f8d7 2088 	ldr.w	r2, [r7, #136]	; 0x88
 8005518:	0052      	lsls	r2, r2, #1
 800551a:	6879      	ldr	r1, [r7, #4]
 800551c:	440a      	add	r2, r1
 800551e:	8013      	strh	r3, [r2, #0]
			lookup_table[i] *= 4;
 8005520:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005524:	005b      	lsls	r3, r3, #1
 8005526:	687a      	ldr	r2, [r7, #4]
 8005528:	4413      	add	r3, r2
 800552a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800552e:	b29b      	uxth	r3, r3
 8005530:	009b      	lsls	r3, r3, #2
 8005532:	b299      	uxth	r1, r3
 8005534:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005538:	005b      	lsls	r3, r3, #1
 800553a:	687a      	ldr	r2, [r7, #4]
 800553c:	4413      	add	r3, r2
 800553e:	b20a      	sxth	r2, r1
 8005540:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < DDS_LUT_SAMPLES; i++) {
 8005542:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005546:	3301      	adds	r3, #1
 8005548:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800554c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005550:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005554:	db94      	blt.n	8005480 <generate_waveform+0x180>
		}
	}
		break;
 8005556:	e398      	b.n	8005c8a <generate_waveform+0x98a>
	case RETRO1: {
		int tone1 = DDS_LUT_SAMPLES * 0.2;
 8005558:	23cc      	movs	r3, #204	; 0xcc
 800555a:	643b      	str	r3, [r7, #64]	; 0x40
		int tone2 = DDS_LUT_SAMPLES * 0.4;
 800555c:	f240 1399 	movw	r3, #409	; 0x199
 8005560:	63fb      	str	r3, [r7, #60]	; 0x3c
		int tone3 = DDS_LUT_SAMPLES * 0.3;
 8005562:	f240 1333 	movw	r3, #307	; 0x133
 8005566:	63bb      	str	r3, [r7, #56]	; 0x38
		uint32_t curr_samples = 0;
 8005568:	2300      	movs	r3, #0
 800556a:	637b      	str	r3, [r7, #52]	; 0x34
		uint32_t step_samples = curr_samples + tone1;
 800556c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800556e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005570:	4413      	add	r3, r2
 8005572:	633b      	str	r3, [r7, #48]	; 0x30
		uint32_t half_step_samples = step_samples / 2;
 8005574:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005576:	085b      	lsrs	r3, r3, #1
 8005578:	62fb      	str	r3, [r7, #44]	; 0x2c

		for (int i = curr_samples; i < step_samples; i++) {
 800557a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800557c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005580:	e067      	b.n	8005652 <generate_waveform+0x352>
			float wave = 2048
					* sin(2.0 * M_PI * (float) i * 5 / ((float) tone1)) / 5;
 8005582:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005586:	ee07 3a90 	vmov	s15, r3
 800558a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800558e:	ee17 0a90 	vmov	r0, s15
 8005592:	f7fa ffd9 	bl	8000548 <__aeabi_f2d>
 8005596:	a33a      	add	r3, pc, #232	; (adr r3, 8005680 <generate_waveform+0x380>)
 8005598:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559c:	f7fb f82c 	bl	80005f8 <__aeabi_dmul>
 80055a0:	4602      	mov	r2, r0
 80055a2:	460b      	mov	r3, r1
 80055a4:	4610      	mov	r0, r2
 80055a6:	4619      	mov	r1, r3
 80055a8:	f04f 0200 	mov.w	r2, #0
 80055ac:	4b3d      	ldr	r3, [pc, #244]	; (80056a4 <generate_waveform+0x3a4>)
 80055ae:	f7fb f823 	bl	80005f8 <__aeabi_dmul>
 80055b2:	4602      	mov	r2, r0
 80055b4:	460b      	mov	r3, r1
 80055b6:	4614      	mov	r4, r2
 80055b8:	461d      	mov	r5, r3
 80055ba:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80055bc:	ee07 3a90 	vmov	s15, r3
 80055c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80055c4:	ee17 0a90 	vmov	r0, s15
 80055c8:	f7fa ffbe 	bl	8000548 <__aeabi_f2d>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4620      	mov	r0, r4
 80055d2:	4629      	mov	r1, r5
 80055d4:	f7fb f93a 	bl	800084c <__aeabi_ddiv>
 80055d8:	4602      	mov	r2, r0
 80055da:	460b      	mov	r3, r1
 80055dc:	ec43 2b17 	vmov	d7, r2, r3
 80055e0:	eeb0 0a47 	vmov.f32	s0, s14
 80055e4:	eef0 0a67 	vmov.f32	s1, s15
 80055e8:	f00b fa1a 	bl	8010a20 <sin>
 80055ec:	ec51 0b10 	vmov	r0, r1, d0
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	4b29      	ldr	r3, [pc, #164]	; (800569c <generate_waveform+0x39c>)
 80055f6:	f7fa ffff 	bl	80005f8 <__aeabi_dmul>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4610      	mov	r0, r2
 8005600:	4619      	mov	r1, r3
 8005602:	f04f 0200 	mov.w	r2, #0
 8005606:	4b27      	ldr	r3, [pc, #156]	; (80056a4 <generate_waveform+0x3a4>)
 8005608:	f7fb f920 	bl	800084c <__aeabi_ddiv>
 800560c:	4602      	mov	r2, r0
 800560e:	460b      	mov	r3, r1
			float wave = 2048
 8005610:	4610      	mov	r0, r2
 8005612:	4619      	mov	r1, r3
 8005614:	f7fb fae8 	bl	8000be8 <__aeabi_d2f>
 8005618:	4603      	mov	r3, r0
 800561a:	61fb      	str	r3, [r7, #28]
			lookup_table[i] = 0.4 * wave;
 800561c:	69f8      	ldr	r0, [r7, #28]
 800561e:	f7fa ff93 	bl	8000548 <__aeabi_f2d>
 8005622:	a319      	add	r3, pc, #100	; (adr r3, 8005688 <generate_waveform+0x388>)
 8005624:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005628:	f7fa ffe6 	bl	80005f8 <__aeabi_dmul>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	4610      	mov	r0, r2
 8005632:	4619      	mov	r1, r3
 8005634:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005638:	005b      	lsls	r3, r3, #1
 800563a:	687a      	ldr	r2, [r7, #4]
 800563c:	18d4      	adds	r4, r2, r3
 800563e:	f7fb fa8b 	bl	8000b58 <__aeabi_d2iz>
 8005642:	4603      	mov	r3, r0
 8005644:	b21b      	sxth	r3, r3
 8005646:	8023      	strh	r3, [r4, #0]
		for (int i = curr_samples; i < step_samples; i++) {
 8005648:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800564c:	3301      	adds	r3, #1
 800564e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005652:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005656:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005658:	429a      	cmp	r2, r3
 800565a:	d892      	bhi.n	8005582 <generate_waveform+0x282>
		}
		curr_samples = step_samples;
 800565c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800565e:	637b      	str	r3, [r7, #52]	; 0x34

		step_samples = curr_samples + tone2;
 8005660:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005662:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005664:	4413      	add	r3, r2
 8005666:	633b      	str	r3, [r7, #48]	; 0x30
		half_step_samples = curr_samples + tone2 / 2;
 8005668:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800566a:	0fda      	lsrs	r2, r3, #31
 800566c:	4413      	add	r3, r2
 800566e:	105b      	asrs	r3, r3, #1
 8005670:	461a      	mov	r2, r3
 8005672:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005674:	4413      	add	r3, r2
 8005676:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = curr_samples; i < step_samples; i++) {
 8005678:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800567a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800567e:	e060      	b.n	8005742 <generate_waveform+0x442>
 8005680:	54442d18 	.word	0x54442d18
 8005684:	401921fb 	.word	0x401921fb
 8005688:	9999999a 	.word	0x9999999a
 800568c:	3fd99999 	.word	0x3fd99999
 8005690:	44800000 	.word	0x44800000
 8005694:	45000000 	.word	0x45000000
 8005698:	40900000 	.word	0x40900000
 800569c:	40a00000 	.word	0x40a00000
 80056a0:	fffff800 	.word	0xfffff800
 80056a4:	40140000 	.word	0x40140000
			float wave = 2048 * sin(2.0 * M_PI * (float) i / ((float) tone2));
 80056a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80056ac:	ee07 3a90 	vmov	s15, r3
 80056b0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056b4:	ee17 0a90 	vmov	r0, s15
 80056b8:	f7fa ff46 	bl	8000548 <__aeabi_f2d>
 80056bc:	a3ba      	add	r3, pc, #744	; (adr r3, 80059a8 <generate_waveform+0x6a8>)
 80056be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056c2:	f7fa ff99 	bl	80005f8 <__aeabi_dmul>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4614      	mov	r4, r2
 80056cc:	461d      	mov	r5, r3
 80056ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80056d0:	ee07 3a90 	vmov	s15, r3
 80056d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80056d8:	ee17 0a90 	vmov	r0, s15
 80056dc:	f7fa ff34 	bl	8000548 <__aeabi_f2d>
 80056e0:	4602      	mov	r2, r0
 80056e2:	460b      	mov	r3, r1
 80056e4:	4620      	mov	r0, r4
 80056e6:	4629      	mov	r1, r5
 80056e8:	f7fb f8b0 	bl	800084c <__aeabi_ddiv>
 80056ec:	4602      	mov	r2, r0
 80056ee:	460b      	mov	r3, r1
 80056f0:	ec43 2b17 	vmov	d7, r2, r3
 80056f4:	eeb0 0a47 	vmov.f32	s0, s14
 80056f8:	eef0 0a67 	vmov.f32	s1, s15
 80056fc:	f00b f990 	bl	8010a20 <sin>
 8005700:	ec51 0b10 	vmov	r0, r1, d0
 8005704:	f04f 0200 	mov.w	r2, #0
 8005708:	4bad      	ldr	r3, [pc, #692]	; (80059c0 <generate_waveform+0x6c0>)
 800570a:	f7fa ff75 	bl	80005f8 <__aeabi_dmul>
 800570e:	4602      	mov	r2, r0
 8005710:	460b      	mov	r3, r1
 8005712:	4610      	mov	r0, r2
 8005714:	4619      	mov	r1, r3
 8005716:	f7fb fa67 	bl	8000be8 <__aeabi_d2f>
 800571a:	4603      	mov	r3, r0
 800571c:	623b      	str	r3, [r7, #32]
			lookup_table[i] = 1 * wave;
 800571e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005722:	005b      	lsls	r3, r3, #1
 8005724:	687a      	ldr	r2, [r7, #4]
 8005726:	4413      	add	r3, r2
 8005728:	edd7 7a08 	vldr	s15, [r7, #32]
 800572c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005730:	ee17 2a90 	vmov	r2, s15
 8005734:	b212      	sxth	r2, r2
 8005736:	801a      	strh	r2, [r3, #0]
		for (int i = curr_samples; i < step_samples; i++) {
 8005738:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800573c:	3301      	adds	r3, #1
 800573e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005742:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005746:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005748:	429a      	cmp	r2, r3
 800574a:	d8ad      	bhi.n	80056a8 <generate_waveform+0x3a8>
		}
		curr_samples = step_samples;
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	637b      	str	r3, [r7, #52]	; 0x34

		step_samples = curr_samples + tone3;
 8005750:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005752:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005754:	4413      	add	r3, r2
 8005756:	633b      	str	r3, [r7, #48]	; 0x30
		half_step_samples = curr_samples + tone3 / 2;
 8005758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800575a:	0fda      	lsrs	r2, r3, #31
 800575c:	4413      	add	r3, r2
 800575e:	105b      	asrs	r3, r3, #1
 8005760:	461a      	mov	r2, r3
 8005762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005764:	4413      	add	r3, r2
 8005766:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = curr_samples; i < step_samples; i++) {
 8005768:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800576a:	67fb      	str	r3, [r7, #124]	; 0x7c
 800576c:	e051      	b.n	8005812 <generate_waveform+0x512>
			float wave = 2048 * sin(2.0 * M_PI * (float) i / ((float) tone3));
 800576e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005770:	ee07 3a90 	vmov	s15, r3
 8005774:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005778:	ee17 0a90 	vmov	r0, s15
 800577c:	f7fa fee4 	bl	8000548 <__aeabi_f2d>
 8005780:	a389      	add	r3, pc, #548	; (adr r3, 80059a8 <generate_waveform+0x6a8>)
 8005782:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005786:	f7fa ff37 	bl	80005f8 <__aeabi_dmul>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4614      	mov	r4, r2
 8005790:	461d      	mov	r5, r3
 8005792:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005794:	ee07 3a90 	vmov	s15, r3
 8005798:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800579c:	ee17 0a90 	vmov	r0, s15
 80057a0:	f7fa fed2 	bl	8000548 <__aeabi_f2d>
 80057a4:	4602      	mov	r2, r0
 80057a6:	460b      	mov	r3, r1
 80057a8:	4620      	mov	r0, r4
 80057aa:	4629      	mov	r1, r5
 80057ac:	f7fb f84e 	bl	800084c <__aeabi_ddiv>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	ec43 2b17 	vmov	d7, r2, r3
 80057b8:	eeb0 0a47 	vmov.f32	s0, s14
 80057bc:	eef0 0a67 	vmov.f32	s1, s15
 80057c0:	f00b f92e 	bl	8010a20 <sin>
 80057c4:	ec51 0b10 	vmov	r0, r1, d0
 80057c8:	f04f 0200 	mov.w	r2, #0
 80057cc:	4b7c      	ldr	r3, [pc, #496]	; (80059c0 <generate_waveform+0x6c0>)
 80057ce:	f7fa ff13 	bl	80005f8 <__aeabi_dmul>
 80057d2:	4602      	mov	r2, r0
 80057d4:	460b      	mov	r3, r1
 80057d6:	4610      	mov	r0, r2
 80057d8:	4619      	mov	r1, r3
 80057da:	f7fb fa05 	bl	8000be8 <__aeabi_d2f>
 80057de:	4603      	mov	r3, r0
 80057e0:	627b      	str	r3, [r7, #36]	; 0x24
			lookup_table[i] = 0.7 * wave;
 80057e2:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80057e4:	f7fa feb0 	bl	8000548 <__aeabi_f2d>
 80057e8:	a371      	add	r3, pc, #452	; (adr r3, 80059b0 <generate_waveform+0x6b0>)
 80057ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ee:	f7fa ff03 	bl	80005f8 <__aeabi_dmul>
 80057f2:	4602      	mov	r2, r0
 80057f4:	460b      	mov	r3, r1
 80057f6:	4610      	mov	r0, r2
 80057f8:	4619      	mov	r1, r3
 80057fa:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80057fc:	005b      	lsls	r3, r3, #1
 80057fe:	687a      	ldr	r2, [r7, #4]
 8005800:	18d4      	adds	r4, r2, r3
 8005802:	f7fb f9a9 	bl	8000b58 <__aeabi_d2iz>
 8005806:	4603      	mov	r3, r0
 8005808:	b21b      	sxth	r3, r3
 800580a:	8023      	strh	r3, [r4, #0]
		for (int i = curr_samples; i < step_samples; i++) {
 800580c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800580e:	3301      	adds	r3, #1
 8005810:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005812:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005816:	429a      	cmp	r2, r3
 8005818:	d8a9      	bhi.n	800576e <generate_waveform+0x46e>
		}
		curr_samples = step_samples;
 800581a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581c:	637b      	str	r3, [r7, #52]	; 0x34

		half_step_samples = step_samples + (DDS_LUT_SAMPLES - step_samples) / 2;
 800581e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005820:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8005824:	085b      	lsrs	r3, r3, #1
 8005826:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005828:	4413      	add	r3, r2
 800582a:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = curr_samples; i < DDS_LUT_SAMPLES; i++) {
 800582c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800582e:	67bb      	str	r3, [r7, #120]	; 0x78
 8005830:	e021      	b.n	8005876 <generate_waveform+0x576>
			float wave =
					(i <= half_step_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 8005832:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005836:	429a      	cmp	r2, r3
 8005838:	d302      	bcc.n	8005840 <generate_waveform+0x540>
 800583a:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 800583e:	e001      	b.n	8005844 <generate_waveform+0x544>
 8005840:	f04f 4345 	mov.w	r3, #3305111552	; 0xc5000000
			float wave =
 8005844:	62bb      	str	r3, [r7, #40]	; 0x28
			;
			lookup_table[i] = 0.3 * wave;
 8005846:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005848:	f7fa fe7e 	bl	8000548 <__aeabi_f2d>
 800584c:	a35a      	add	r3, pc, #360	; (adr r3, 80059b8 <generate_waveform+0x6b8>)
 800584e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005852:	f7fa fed1 	bl	80005f8 <__aeabi_dmul>
 8005856:	4602      	mov	r2, r0
 8005858:	460b      	mov	r3, r1
 800585a:	4610      	mov	r0, r2
 800585c:	4619      	mov	r1, r3
 800585e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005860:	005b      	lsls	r3, r3, #1
 8005862:	687a      	ldr	r2, [r7, #4]
 8005864:	18d4      	adds	r4, r2, r3
 8005866:	f7fb f977 	bl	8000b58 <__aeabi_d2iz>
 800586a:	4603      	mov	r3, r0
 800586c:	b21b      	sxth	r3, r3
 800586e:	8023      	strh	r3, [r4, #0]
		for (int i = curr_samples; i < DDS_LUT_SAMPLES; i++) {
 8005870:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005872:	3301      	adds	r3, #1
 8005874:	67bb      	str	r3, [r7, #120]	; 0x78
 8005876:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005878:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800587c:	dbd9      	blt.n	8005832 <generate_waveform+0x532>
		}
	}
		break;
 800587e:	e204      	b.n	8005c8a <generate_waveform+0x98a>
	case RETRO2: {
		int tone1 = DDS_LUT_SAMPLES * 0.4;
 8005880:	f240 1399 	movw	r3, #409	; 0x199
 8005884:	663b      	str	r3, [r7, #96]	; 0x60
		int tone2 = DDS_LUT_SAMPLES * 0.3;
 8005886:	f240 1333 	movw	r3, #307	; 0x133
 800588a:	65fb      	str	r3, [r7, #92]	; 0x5c
		uint32_t curr_samples = 0;
 800588c:	2300      	movs	r3, #0
 800588e:	65bb      	str	r3, [r7, #88]	; 0x58
		uint32_t step_samples = curr_samples + tone1;
 8005890:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005892:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005894:	4413      	add	r3, r2
 8005896:	657b      	str	r3, [r7, #84]	; 0x54
		uint32_t half_step_samples = curr_samples + tone1 / 2;
 8005898:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800589a:	0fda      	lsrs	r2, r3, #31
 800589c:	4413      	add	r3, r2
 800589e:	105b      	asrs	r3, r3, #1
 80058a0:	461a      	mov	r2, r3
 80058a2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058a4:	4413      	add	r3, r2
 80058a6:	653b      	str	r3, [r7, #80]	; 0x50
		for (int i = curr_samples; i < step_samples; i++) {
 80058a8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80058aa:	677b      	str	r3, [r7, #116]	; 0x74
 80058ac:	e05d      	b.n	800596a <generate_waveform+0x66a>
			float wave =
					(i <= half_step_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 80058ae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058b0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80058b2:	429a      	cmp	r2, r3
 80058b4:	d302      	bcc.n	80058bc <generate_waveform+0x5bc>
 80058b6:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80058ba:	e001      	b.n	80058c0 <generate_waveform+0x5c0>
 80058bc:	f04f 4345 	mov.w	r3, #3305111552	; 0xc5000000
			float wave =
 80058c0:	647b      	str	r3, [r7, #68]	; 0x44
			wave += 2048 * sin(2.0 * M_PI * (float) i / ((float) tone1));
 80058c2:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80058c4:	f7fa fe40 	bl	8000548 <__aeabi_f2d>
 80058c8:	4604      	mov	r4, r0
 80058ca:	460d      	mov	r5, r1
 80058cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ce:	ee07 3a90 	vmov	s15, r3
 80058d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058d6:	ee17 0a90 	vmov	r0, s15
 80058da:	f7fa fe35 	bl	8000548 <__aeabi_f2d>
 80058de:	a332      	add	r3, pc, #200	; (adr r3, 80059a8 <generate_waveform+0x6a8>)
 80058e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058e4:	f7fa fe88 	bl	80005f8 <__aeabi_dmul>
 80058e8:	4602      	mov	r2, r0
 80058ea:	460b      	mov	r3, r1
 80058ec:	4690      	mov	r8, r2
 80058ee:	4699      	mov	r9, r3
 80058f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80058f2:	ee07 3a90 	vmov	s15, r3
 80058f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80058fa:	ee17 0a90 	vmov	r0, s15
 80058fe:	f7fa fe23 	bl	8000548 <__aeabi_f2d>
 8005902:	4602      	mov	r2, r0
 8005904:	460b      	mov	r3, r1
 8005906:	4640      	mov	r0, r8
 8005908:	4649      	mov	r1, r9
 800590a:	f7fa ff9f 	bl	800084c <__aeabi_ddiv>
 800590e:	4602      	mov	r2, r0
 8005910:	460b      	mov	r3, r1
 8005912:	ec43 2b17 	vmov	d7, r2, r3
 8005916:	eeb0 0a47 	vmov.f32	s0, s14
 800591a:	eef0 0a67 	vmov.f32	s1, s15
 800591e:	f00b f87f 	bl	8010a20 <sin>
 8005922:	ec51 0b10 	vmov	r0, r1, d0
 8005926:	f04f 0200 	mov.w	r2, #0
 800592a:	4b25      	ldr	r3, [pc, #148]	; (80059c0 <generate_waveform+0x6c0>)
 800592c:	f7fa fe64 	bl	80005f8 <__aeabi_dmul>
 8005930:	4602      	mov	r2, r0
 8005932:	460b      	mov	r3, r1
 8005934:	4620      	mov	r0, r4
 8005936:	4629      	mov	r1, r5
 8005938:	f7fa fca8 	bl	800028c <__adddf3>
 800593c:	4602      	mov	r2, r0
 800593e:	460b      	mov	r3, r1
 8005940:	4610      	mov	r0, r2
 8005942:	4619      	mov	r1, r3
 8005944:	f7fb f950 	bl	8000be8 <__aeabi_d2f>
 8005948:	4603      	mov	r3, r0
 800594a:	647b      	str	r3, [r7, #68]	; 0x44
			lookup_table[i] = 1 * wave;
 800594c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800594e:	005b      	lsls	r3, r3, #1
 8005950:	687a      	ldr	r2, [r7, #4]
 8005952:	4413      	add	r3, r2
 8005954:	edd7 7a11 	vldr	s15, [r7, #68]	; 0x44
 8005958:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800595c:	ee17 2a90 	vmov	r2, s15
 8005960:	b212      	sxth	r2, r2
 8005962:	801a      	strh	r2, [r3, #0]
		for (int i = curr_samples; i < step_samples; i++) {
 8005964:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005966:	3301      	adds	r3, #1
 8005968:	677b      	str	r3, [r7, #116]	; 0x74
 800596a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800596c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800596e:	429a      	cmp	r2, r3
 8005970:	d89d      	bhi.n	80058ae <generate_waveform+0x5ae>
		}
		curr_samples = step_samples;
 8005972:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005974:	65bb      	str	r3, [r7, #88]	; 0x58

		step_samples = curr_samples + tone2;
 8005976:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005978:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800597a:	4413      	add	r3, r2
 800597c:	657b      	str	r3, [r7, #84]	; 0x54
		half_step_samples = curr_samples + tone2 / 2;
 800597e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005980:	0fda      	lsrs	r2, r3, #31
 8005982:	4413      	add	r3, r2
 8005984:	105b      	asrs	r3, r3, #1
 8005986:	461a      	mov	r2, r3
 8005988:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800598a:	4413      	add	r3, r2
 800598c:	653b      	str	r3, [r7, #80]	; 0x50
		for (int i = curr_samples; i < step_samples; i++) {
 800598e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005990:	673b      	str	r3, [r7, #112]	; 0x70
 8005992:	e032      	b.n	80059fa <generate_waveform+0x6fa>
			float wave =
					(i <= half_step_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 8005994:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005996:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005998:	429a      	cmp	r2, r3
 800599a:	d313      	bcc.n	80059c4 <generate_waveform+0x6c4>
 800599c:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 80059a0:	e012      	b.n	80059c8 <generate_waveform+0x6c8>
 80059a2:	bf00      	nop
 80059a4:	f3af 8000 	nop.w
 80059a8:	54442d18 	.word	0x54442d18
 80059ac:	401921fb 	.word	0x401921fb
 80059b0:	66666666 	.word	0x66666666
 80059b4:	3fe66666 	.word	0x3fe66666
 80059b8:	33333333 	.word	0x33333333
 80059bc:	3fd33333 	.word	0x3fd33333
 80059c0:	40a00000 	.word	0x40a00000
 80059c4:	f04f 4345 	mov.w	r3, #3305111552	; 0xc5000000
			float wave =
 80059c8:	64bb      	str	r3, [r7, #72]	; 0x48
			lookup_table[i] = 0.7 * wave;
 80059ca:	6cb8      	ldr	r0, [r7, #72]	; 0x48
 80059cc:	f7fa fdbc 	bl	8000548 <__aeabi_f2d>
 80059d0:	a3b8      	add	r3, pc, #736	; (adr r3, 8005cb4 <generate_waveform+0x9b4>)
 80059d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80059d6:	f7fa fe0f 	bl	80005f8 <__aeabi_dmul>
 80059da:	4602      	mov	r2, r0
 80059dc:	460b      	mov	r3, r1
 80059de:	4610      	mov	r0, r2
 80059e0:	4619      	mov	r1, r3
 80059e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	687a      	ldr	r2, [r7, #4]
 80059e8:	18d4      	adds	r4, r2, r3
 80059ea:	f7fb f8b5 	bl	8000b58 <__aeabi_d2iz>
 80059ee:	4603      	mov	r3, r0
 80059f0:	b21b      	sxth	r3, r3
 80059f2:	8023      	strh	r3, [r4, #0]
		for (int i = curr_samples; i < step_samples; i++) {
 80059f4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059f6:	3301      	adds	r3, #1
 80059f8:	673b      	str	r3, [r7, #112]	; 0x70
 80059fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80059fe:	429a      	cmp	r2, r3
 8005a00:	d8c8      	bhi.n	8005994 <generate_waveform+0x694>
		}
		curr_samples = step_samples;
 8005a02:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a04:	65bb      	str	r3, [r7, #88]	; 0x58

		half_step_samples = step_samples + (DDS_LUT_SAMPLES - step_samples) / 2;
 8005a06:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a08:	f5c3 6380 	rsb	r3, r3, #1024	; 0x400
 8005a0c:	085b      	lsrs	r3, r3, #1
 8005a0e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005a10:	4413      	add	r3, r2
 8005a12:	653b      	str	r3, [r7, #80]	; 0x50
		for (int i = curr_samples; i < DDS_LUT_SAMPLES; i++) {
 8005a14:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005a16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a18:	e021      	b.n	8005a5e <generate_waveform+0x75e>
			float wave =
					(i <= half_step_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 8005a1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1c:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d302      	bcc.n	8005a28 <generate_waveform+0x728>
 8005a22:	f04f 438a 	mov.w	r3, #1157627904	; 0x45000000
 8005a26:	e001      	b.n	8005a2c <generate_waveform+0x72c>
 8005a28:	f04f 4345 	mov.w	r3, #3305111552	; 0xc5000000
			float wave =
 8005a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
			lookup_table[i] = 0.3 * wave;
 8005a2e:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005a30:	f7fa fd8a 	bl	8000548 <__aeabi_f2d>
 8005a34:	a3a1      	add	r3, pc, #644	; (adr r3, 8005cbc <generate_waveform+0x9bc>)
 8005a36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3a:	f7fa fddd 	bl	80005f8 <__aeabi_dmul>
 8005a3e:	4602      	mov	r2, r0
 8005a40:	460b      	mov	r3, r1
 8005a42:	4610      	mov	r0, r2
 8005a44:	4619      	mov	r1, r3
 8005a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a48:	005b      	lsls	r3, r3, #1
 8005a4a:	687a      	ldr	r2, [r7, #4]
 8005a4c:	18d4      	adds	r4, r2, r3
 8005a4e:	f7fb f883 	bl	8000b58 <__aeabi_d2iz>
 8005a52:	4603      	mov	r3, r0
 8005a54:	b21b      	sxth	r3, r3
 8005a56:	8023      	strh	r3, [r4, #0]
		for (int i = curr_samples; i < DDS_LUT_SAMPLES; i++) {
 8005a58:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5a:	3301      	adds	r3, #1
 8005a5c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005a5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a60:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a64:	dbd9      	blt.n	8005a1a <generate_waveform+0x71a>
		}
	}
		break;
 8005a66:	e110      	b.n	8005c8a <generate_waveform+0x98a>
	default:
	case CLARINET: {
		for (int i = 0; i < DDS_LUT_SAMPLES; i++) {
 8005a68:	2300      	movs	r3, #0
 8005a6a:	66bb      	str	r3, [r7, #104]	; 0x68
 8005a6c:	e107      	b.n	8005c7e <generate_waveform+0x97e>
			float harmonic_sample = sin(
					2.0 * M_PI * (float) i / ((float) DDS_LUT_SAMPLES));
 8005a6e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005a70:	ee07 3a90 	vmov	s15, r3
 8005a74:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005a78:	ee17 0a90 	vmov	r0, s15
 8005a7c:	f7fa fd64 	bl	8000548 <__aeabi_f2d>
 8005a80:	a385      	add	r3, pc, #532	; (adr r3, 8005c98 <generate_waveform+0x998>)
 8005a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a86:	f7fa fdb7 	bl	80005f8 <__aeabi_dmul>
 8005a8a:	4602      	mov	r2, r0
 8005a8c:	460b      	mov	r3, r1
 8005a8e:	4610      	mov	r0, r2
 8005a90:	4619      	mov	r1, r3
			float harmonic_sample = sin(
 8005a92:	f04f 0200 	mov.w	r2, #0
 8005a96:	4b82      	ldr	r3, [pc, #520]	; (8005ca0 <generate_waveform+0x9a0>)
 8005a98:	f7fa fed8 	bl	800084c <__aeabi_ddiv>
 8005a9c:	4602      	mov	r2, r0
 8005a9e:	460b      	mov	r3, r1
 8005aa0:	ec43 2b17 	vmov	d7, r2, r3
 8005aa4:	eeb0 0a47 	vmov.f32	s0, s14
 8005aa8:	eef0 0a67 	vmov.f32	s1, s15
 8005aac:	f00a ffb8 	bl	8010a20 <sin>
 8005ab0:	ec53 2b10 	vmov	r2, r3, d0
 8005ab4:	4610      	mov	r0, r2
 8005ab6:	4619      	mov	r1, r3
 8005ab8:	f7fb f896 	bl	8000be8 <__aeabi_d2f>
 8005abc:	4603      	mov	r3, r0
 8005abe:	60fb      	str	r3, [r7, #12]
			harmonic_sample += sin(
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f7fa fd41 	bl	8000548 <__aeabi_f2d>
 8005ac6:	4604      	mov	r4, r0
 8005ac8:	460d      	mov	r5, r1
					2.0 * M_PI * (float) i * 3 / ((float) DDS_LUT_SAMPLES)) / 3;
 8005aca:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005acc:	ee07 3a90 	vmov	s15, r3
 8005ad0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005ad4:	ee17 0a90 	vmov	r0, s15
 8005ad8:	f7fa fd36 	bl	8000548 <__aeabi_f2d>
 8005adc:	a36e      	add	r3, pc, #440	; (adr r3, 8005c98 <generate_waveform+0x998>)
 8005ade:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ae2:	f7fa fd89 	bl	80005f8 <__aeabi_dmul>
 8005ae6:	4602      	mov	r2, r0
 8005ae8:	460b      	mov	r3, r1
 8005aea:	4610      	mov	r0, r2
 8005aec:	4619      	mov	r1, r3
 8005aee:	f04f 0200 	mov.w	r2, #0
 8005af2:	4b6c      	ldr	r3, [pc, #432]	; (8005ca4 <generate_waveform+0x9a4>)
 8005af4:	f7fa fd80 	bl	80005f8 <__aeabi_dmul>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4610      	mov	r0, r2
 8005afe:	4619      	mov	r1, r3
			harmonic_sample += sin(
 8005b00:	f04f 0200 	mov.w	r2, #0
 8005b04:	4b66      	ldr	r3, [pc, #408]	; (8005ca0 <generate_waveform+0x9a0>)
 8005b06:	f7fa fea1 	bl	800084c <__aeabi_ddiv>
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	ec43 2b17 	vmov	d7, r2, r3
 8005b12:	eeb0 0a47 	vmov.f32	s0, s14
 8005b16:	eef0 0a67 	vmov.f32	s1, s15
 8005b1a:	f00a ff81 	bl	8010a20 <sin>
 8005b1e:	ec51 0b10 	vmov	r0, r1, d0
					2.0 * M_PI * (float) i * 3 / ((float) DDS_LUT_SAMPLES)) / 3;
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	4b5f      	ldr	r3, [pc, #380]	; (8005ca4 <generate_waveform+0x9a4>)
 8005b28:	f7fa fe90 	bl	800084c <__aeabi_ddiv>
 8005b2c:	4602      	mov	r2, r0
 8005b2e:	460b      	mov	r3, r1
			harmonic_sample += sin(
 8005b30:	4620      	mov	r0, r4
 8005b32:	4629      	mov	r1, r5
 8005b34:	f7fa fbaa 	bl	800028c <__adddf3>
 8005b38:	4602      	mov	r2, r0
 8005b3a:	460b      	mov	r3, r1
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4619      	mov	r1, r3
 8005b40:	f7fb f852 	bl	8000be8 <__aeabi_d2f>
 8005b44:	4603      	mov	r3, r0
 8005b46:	60fb      	str	r3, [r7, #12]
			harmonic_sample += sin(
 8005b48:	68f8      	ldr	r0, [r7, #12]
 8005b4a:	f7fa fcfd 	bl	8000548 <__aeabi_f2d>
 8005b4e:	4604      	mov	r4, r0
 8005b50:	460d      	mov	r5, r1
					2.0 * M_PI * (float) i * 7 / ((float) DDS_LUT_SAMPLES)) / 7;
 8005b52:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b54:	ee07 3a90 	vmov	s15, r3
 8005b58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005b5c:	ee17 0a90 	vmov	r0, s15
 8005b60:	f7fa fcf2 	bl	8000548 <__aeabi_f2d>
 8005b64:	a34c      	add	r3, pc, #304	; (adr r3, 8005c98 <generate_waveform+0x998>)
 8005b66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005b6a:	f7fa fd45 	bl	80005f8 <__aeabi_dmul>
 8005b6e:	4602      	mov	r2, r0
 8005b70:	460b      	mov	r3, r1
 8005b72:	4610      	mov	r0, r2
 8005b74:	4619      	mov	r1, r3
 8005b76:	f04f 0200 	mov.w	r2, #0
 8005b7a:	4b4b      	ldr	r3, [pc, #300]	; (8005ca8 <generate_waveform+0x9a8>)
 8005b7c:	f7fa fd3c 	bl	80005f8 <__aeabi_dmul>
 8005b80:	4602      	mov	r2, r0
 8005b82:	460b      	mov	r3, r1
 8005b84:	4610      	mov	r0, r2
 8005b86:	4619      	mov	r1, r3
			harmonic_sample += sin(
 8005b88:	f04f 0200 	mov.w	r2, #0
 8005b8c:	4b44      	ldr	r3, [pc, #272]	; (8005ca0 <generate_waveform+0x9a0>)
 8005b8e:	f7fa fe5d 	bl	800084c <__aeabi_ddiv>
 8005b92:	4602      	mov	r2, r0
 8005b94:	460b      	mov	r3, r1
 8005b96:	ec43 2b17 	vmov	d7, r2, r3
 8005b9a:	eeb0 0a47 	vmov.f32	s0, s14
 8005b9e:	eef0 0a67 	vmov.f32	s1, s15
 8005ba2:	f00a ff3d 	bl	8010a20 <sin>
 8005ba6:	ec51 0b10 	vmov	r0, r1, d0
					2.0 * M_PI * (float) i * 7 / ((float) DDS_LUT_SAMPLES)) / 7;
 8005baa:	f04f 0200 	mov.w	r2, #0
 8005bae:	4b3e      	ldr	r3, [pc, #248]	; (8005ca8 <generate_waveform+0x9a8>)
 8005bb0:	f7fa fe4c 	bl	800084c <__aeabi_ddiv>
 8005bb4:	4602      	mov	r2, r0
 8005bb6:	460b      	mov	r3, r1
			harmonic_sample += sin(
 8005bb8:	4620      	mov	r0, r4
 8005bba:	4629      	mov	r1, r5
 8005bbc:	f7fa fb66 	bl	800028c <__adddf3>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	460b      	mov	r3, r1
 8005bc4:	4610      	mov	r0, r2
 8005bc6:	4619      	mov	r1, r3
 8005bc8:	f7fb f80e 	bl	8000be8 <__aeabi_d2f>
 8005bcc:	4603      	mov	r3, r0
 8005bce:	60fb      	str	r3, [r7, #12]
			harmonic_sample += sin(
 8005bd0:	68f8      	ldr	r0, [r7, #12]
 8005bd2:	f7fa fcb9 	bl	8000548 <__aeabi_f2d>
 8005bd6:	4604      	mov	r4, r0
 8005bd8:	460d      	mov	r5, r1
					2.0 * M_PI * (float) i * 8 / ((float) DDS_LUT_SAMPLES)) / 8;
 8005bda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bdc:	ee07 3a90 	vmov	s15, r3
 8005be0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8005be4:	ee17 0a90 	vmov	r0, s15
 8005be8:	f7fa fcae 	bl	8000548 <__aeabi_f2d>
 8005bec:	a32a      	add	r3, pc, #168	; (adr r3, 8005c98 <generate_waveform+0x998>)
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	f7fa fd01 	bl	80005f8 <__aeabi_dmul>
 8005bf6:	4602      	mov	r2, r0
 8005bf8:	460b      	mov	r3, r1
 8005bfa:	4610      	mov	r0, r2
 8005bfc:	4619      	mov	r1, r3
 8005bfe:	f04f 0200 	mov.w	r2, #0
 8005c02:	4b2a      	ldr	r3, [pc, #168]	; (8005cac <generate_waveform+0x9ac>)
 8005c04:	f7fa fcf8 	bl	80005f8 <__aeabi_dmul>
 8005c08:	4602      	mov	r2, r0
 8005c0a:	460b      	mov	r3, r1
 8005c0c:	4610      	mov	r0, r2
 8005c0e:	4619      	mov	r1, r3
			harmonic_sample += sin(
 8005c10:	f04f 0200 	mov.w	r2, #0
 8005c14:	4b22      	ldr	r3, [pc, #136]	; (8005ca0 <generate_waveform+0x9a0>)
 8005c16:	f7fa fe19 	bl	800084c <__aeabi_ddiv>
 8005c1a:	4602      	mov	r2, r0
 8005c1c:	460b      	mov	r3, r1
 8005c1e:	ec43 2b17 	vmov	d7, r2, r3
 8005c22:	eeb0 0a47 	vmov.f32	s0, s14
 8005c26:	eef0 0a67 	vmov.f32	s1, s15
 8005c2a:	f00a fef9 	bl	8010a20 <sin>
 8005c2e:	ec51 0b10 	vmov	r0, r1, d0
					2.0 * M_PI * (float) i * 8 / ((float) DDS_LUT_SAMPLES)) / 8;
 8005c32:	f04f 0200 	mov.w	r2, #0
 8005c36:	4b1d      	ldr	r3, [pc, #116]	; (8005cac <generate_waveform+0x9ac>)
 8005c38:	f7fa fe08 	bl	800084c <__aeabi_ddiv>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	460b      	mov	r3, r1
			harmonic_sample += sin(
 8005c40:	4620      	mov	r0, r4
 8005c42:	4629      	mov	r1, r5
 8005c44:	f7fa fb22 	bl	800028c <__adddf3>
 8005c48:	4602      	mov	r2, r0
 8005c4a:	460b      	mov	r3, r1
 8005c4c:	4610      	mov	r0, r2
 8005c4e:	4619      	mov	r1, r3
 8005c50:	f7fa ffca 	bl	8000be8 <__aeabi_d2f>
 8005c54:	4603      	mov	r3, r0
 8005c56:	60fb      	str	r3, [r7, #12]
			lookup_table[i] = (2048 * harmonic_sample);
 8005c58:	edd7 7a03 	vldr	s15, [r7, #12]
 8005c5c:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8005cb0 <generate_waveform+0x9b0>
 8005c60:	ee67 7a87 	vmul.f32	s15, s15, s14
 8005c64:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c66:	005b      	lsls	r3, r3, #1
 8005c68:	687a      	ldr	r2, [r7, #4]
 8005c6a:	4413      	add	r3, r2
 8005c6c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8005c70:	ee17 2a90 	vmov	r2, s15
 8005c74:	b212      	sxth	r2, r2
 8005c76:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < DDS_LUT_SAMPLES; i++) {
 8005c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c7a:	3301      	adds	r3, #1
 8005c7c:	66bb      	str	r3, [r7, #104]	; 0x68
 8005c7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c80:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005c84:	f6ff aef3 	blt.w	8005a6e <generate_waveform+0x76e>
		}
	}
		break;
 8005c88:	bf00      	nop
	}
}
 8005c8a:	bf00      	nop
 8005c8c:	3798      	adds	r7, #152	; 0x98
 8005c8e:	46bd      	mov	sp, r7
 8005c90:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8005c94:	f3af 8000 	nop.w
 8005c98:	54442d18 	.word	0x54442d18
 8005c9c:	401921fb 	.word	0x401921fb
 8005ca0:	40900000 	.word	0x40900000
 8005ca4:	40080000 	.word	0x40080000
 8005ca8:	401c0000 	.word	0x401c0000
 8005cac:	40200000 	.word	0x40200000
 8005cb0:	45000000 	.word	0x45000000
 8005cb4:	66666666 	.word	0x66666666
 8005cb8:	3fe66666 	.word	0x3fe66666
 8005cbc:	33333333 	.word	0x33333333
 8005cc0:	3fd33333 	.word	0x3fd33333

08005cc4 <set_output_waveform>:

void set_output_waveform(WaveType wave) {
 8005cc4:	b580      	push	{r7, lr}
 8005cc6:	b082      	sub	sp, #8
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	4603      	mov	r3, r0
 8005ccc:	71fb      	strb	r3, [r7, #7]

	// change only if different
	if (output_wavetype == wave) {
 8005cce:	4b0c      	ldr	r3, [pc, #48]	; (8005d00 <set_output_waveform+0x3c>)
 8005cd0:	781b      	ldrb	r3, [r3, #0]
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	79fa      	ldrb	r2, [r7, #7]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d00e      	beq.n	8005cf8 <set_output_waveform+0x34>
		return;
	}
	output_wavetype = wave;
 8005cda:	4a09      	ldr	r2, [pc, #36]	; (8005d00 <set_output_waveform+0x3c>)
 8005cdc:	79fb      	ldrb	r3, [r7, #7]
 8005cde:	7013      	strb	r3, [r2, #0]

	// start M2M DMA transfer
	HAL_DMA_Start_IT(&hdma_memtomem_dma1_channel1, (uint32_t) DDS_LUT[wave],
 8005ce0:	79fb      	ldrb	r3, [r7, #7]
 8005ce2:	02db      	lsls	r3, r3, #11
 8005ce4:	4a07      	ldr	r2, [pc, #28]	; (8005d04 <set_output_waveform+0x40>)
 8005ce6:	4413      	add	r3, r2
 8005ce8:	4619      	mov	r1, r3
 8005cea:	4a07      	ldr	r2, [pc, #28]	; (8005d08 <set_output_waveform+0x44>)
 8005cec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005cf0:	4806      	ldr	r0, [pc, #24]	; (8005d0c <set_output_waveform+0x48>)
 8005cf2:	f002 fd0d 	bl	8008710 <HAL_DMA_Start_IT>
 8005cf6:	e000      	b.n	8005cfa <set_output_waveform+0x36>
		return;
 8005cf8:	bf00      	nop
			(uint32_t) DDS_LUT_SEL, DDS_LUT_SAMPLES);

}
 8005cfa:	3708      	adds	r7, #8
 8005cfc:	46bd      	mov	sp, r7
 8005cfe:	bd80      	pop	{r7, pc}
 8005d00:	2000004c 	.word	0x2000004c
 8005d04:	200007a4 	.word	0x200007a4
 8005d08:	20003fa4 	.word	0x20003fa4
 8005d0c:	200005dc 	.word	0x200005dc

08005d10 <display_wave>:

void display_wave(u8g2_t *u8g2, uint16_t x, uint16_t y) {
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b082      	sub	sp, #8
 8005d14:	af00      	add	r7, sp, #0
 8005d16:	6078      	str	r0, [r7, #4]
 8005d18:	460b      	mov	r3, r1
 8005d1a:	807b      	strh	r3, [r7, #2]
 8005d1c:	4613      	mov	r3, r2
 8005d1e:	803b      	strh	r3, [r7, #0]
	switch (output_wavetype) {
 8005d20:	4b33      	ldr	r3, [pc, #204]	; (8005df0 <display_wave+0xe0>)
 8005d22:	781b      	ldrb	r3, [r3, #0]
 8005d24:	b2db      	uxtb	r3, r3
 8005d26:	2b06      	cmp	r3, #6
 8005d28:	d852      	bhi.n	8005dd0 <display_wave+0xc0>
 8005d2a:	a201      	add	r2, pc, #4	; (adr r2, 8005d30 <display_wave+0x20>)
 8005d2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d30:	08005d4d 	.word	0x08005d4d
 8005d34:	08005d63 	.word	0x08005d63
 8005d38:	08005d79 	.word	0x08005d79
 8005d3c:	08005d8f 	.word	0x08005d8f
 8005d40:	08005dd1 	.word	0x08005dd1
 8005d44:	08005da5 	.word	0x08005da5
 8005d48:	08005dbb 	.word	0x08005dbb
	case SAWTOOTH: {
		u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005d4c:	4929      	ldr	r1, [pc, #164]	; (8005df4 <display_wave+0xe4>)
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7fc fa1c 	bl	800218c <u8g2_SetFont>
		u8g2_DrawUTF8(u8g2, x, y, "//");
 8005d54:	883a      	ldrh	r2, [r7, #0]
 8005d56:	8879      	ldrh	r1, [r7, #2]
 8005d58:	4b27      	ldr	r3, [pc, #156]	; (8005df8 <display_wave+0xe8>)
 8005d5a:	6878      	ldr	r0, [r7, #4]
 8005d5c:	f7fc f974 	bl	8002048 <u8g2_DrawUTF8>
		break;
 8005d60:	e041      	b.n	8005de6 <display_wave+0xd6>
	}
		break;
	case SINE: {
		u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005d62:	4924      	ldr	r1, [pc, #144]	; (8005df4 <display_wave+0xe4>)
 8005d64:	6878      	ldr	r0, [r7, #4]
 8005d66:	f7fc fa11 	bl	800218c <u8g2_SetFont>
		u8g2_DrawUTF8(u8g2, x, y, "◠◡");
 8005d6a:	883a      	ldrh	r2, [r7, #0]
 8005d6c:	8879      	ldrh	r1, [r7, #2]
 8005d6e:	4b23      	ldr	r3, [pc, #140]	; (8005dfc <display_wave+0xec>)
 8005d70:	6878      	ldr	r0, [r7, #4]
 8005d72:	f7fc f969 	bl	8002048 <u8g2_DrawUTF8>
	}
		break;
 8005d76:	e036      	b.n	8005de6 <display_wave+0xd6>
	case SQUARE: {
		u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005d78:	491e      	ldr	r1, [pc, #120]	; (8005df4 <display_wave+0xe4>)
 8005d7a:	6878      	ldr	r0, [r7, #4]
 8005d7c:	f7fc fa06 	bl	800218c <u8g2_SetFont>
		u8g2_DrawUTF8(u8g2, x, y, " \u25a0");
 8005d80:	883a      	ldrh	r2, [r7, #0]
 8005d82:	8879      	ldrh	r1, [r7, #2]
 8005d84:	4b1e      	ldr	r3, [pc, #120]	; (8005e00 <display_wave+0xf0>)
 8005d86:	6878      	ldr	r0, [r7, #4]
 8005d88:	f7fc f95e 	bl	8002048 <u8g2_DrawUTF8>
	}
		break;
 8005d8c:	e02b      	b.n	8005de6 <display_wave+0xd6>
	case TRIANGLE: {
		u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005d8e:	4919      	ldr	r1, [pc, #100]	; (8005df4 <display_wave+0xe4>)
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f7fc f9fb 	bl	800218c <u8g2_SetFont>
		u8g2_DrawUTF8(u8g2, x, y, " \u25b2");
 8005d96:	883a      	ldrh	r2, [r7, #0]
 8005d98:	8879      	ldrh	r1, [r7, #2]
 8005d9a:	4b1a      	ldr	r3, [pc, #104]	; (8005e04 <display_wave+0xf4>)
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f7fc f953 	bl	8002048 <u8g2_DrawUTF8>
	}
		break;
 8005da2:	e020      	b.n	8005de6 <display_wave+0xd6>
	case RETRO1: {
		u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005da4:	4913      	ldr	r1, [pc, #76]	; (8005df4 <display_wave+0xe4>)
 8005da6:	6878      	ldr	r0, [r7, #4]
 8005da8:	f7fc f9f0 	bl	800218c <u8g2_SetFont>
		u8g2_DrawUTF8(u8g2, x, y, " \u2600");
 8005dac:	883a      	ldrh	r2, [r7, #0]
 8005dae:	8879      	ldrh	r1, [r7, #2]
 8005db0:	4b15      	ldr	r3, [pc, #84]	; (8005e08 <display_wave+0xf8>)
 8005db2:	6878      	ldr	r0, [r7, #4]
 8005db4:	f7fc f948 	bl	8002048 <u8g2_DrawUTF8>
	}
		break;
 8005db8:	e015      	b.n	8005de6 <display_wave+0xd6>
	case RETRO2: {
		u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005dba:	490e      	ldr	r1, [pc, #56]	; (8005df4 <display_wave+0xe4>)
 8005dbc:	6878      	ldr	r0, [r7, #4]
 8005dbe:	f7fc f9e5 	bl	800218c <u8g2_SetFont>
		u8g2_DrawUTF8(u8g2, x, y, " \u2604");
 8005dc2:	883a      	ldrh	r2, [r7, #0]
 8005dc4:	8879      	ldrh	r1, [r7, #2]
 8005dc6:	4b11      	ldr	r3, [pc, #68]	; (8005e0c <display_wave+0xfc>)
 8005dc8:	6878      	ldr	r0, [r7, #4]
 8005dca:	f7fc f93d 	bl	8002048 <u8g2_DrawUTF8>
	}
		break;
 8005dce:	e00a      	b.n	8005de6 <display_wave+0xd6>
	default:
	case CLARINET: {
		u8g2_SetFont(u8g2, u8g2_font_7x13_t_symbols);
 8005dd0:	4908      	ldr	r1, [pc, #32]	; (8005df4 <display_wave+0xe4>)
 8005dd2:	6878      	ldr	r0, [r7, #4]
 8005dd4:	f7fc f9da 	bl	800218c <u8g2_SetFont>
		u8g2_DrawUTF8(u8g2, x, y, " \u265b");
 8005dd8:	883a      	ldrh	r2, [r7, #0]
 8005dda:	8879      	ldrh	r1, [r7, #2]
 8005ddc:	4b0c      	ldr	r3, [pc, #48]	; (8005e10 <display_wave+0x100>)
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f7fc f932 	bl	8002048 <u8g2_DrawUTF8>
	}
		break;
 8005de4:	bf00      	nop
	}
}
 8005de6:	bf00      	nop
 8005de8:	3708      	adds	r7, #8
 8005dea:	46bd      	mov	sp, r7
 8005dec:	bd80      	pop	{r7, pc}
 8005dee:	bf00      	nop
 8005df0:	2000004c 	.word	0x2000004c
 8005df4:	08012990 	.word	0x08012990
 8005df8:	08012944 	.word	0x08012944
 8005dfc:	08012948 	.word	0x08012948
 8005e00:	08012950 	.word	0x08012950
 8005e04:	08012958 	.word	0x08012958
 8005e08:	08012960 	.word	0x08012960
 8005e0c:	08012968 	.word	0x08012968
 8005e10:	08012970 	.word	0x08012970

08005e14 <synthesise_output1>:

inline void synthesise_output1() {
 8005e14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e18:	b08e      	sub	sp, #56	; 0x38
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	466b      	mov	r3, sp
 8005e1e:	4698      	mov	r8, r3

	// load the keys, protected by Mutex
	uint16_t localKeys[keyboard_count];
 8005e20:	4b78      	ldr	r3, [pc, #480]	; (8006004 <synthesise_output1+0x1f0>)
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	b2de      	uxtb	r6, r3
 8005e26:	4633      	mov	r3, r6
 8005e28:	3b01      	subs	r3, #1
 8005e2a:	61bb      	str	r3, [r7, #24]
 8005e2c:	b2f3      	uxtb	r3, r6
 8005e2e:	2200      	movs	r2, #0
 8005e30:	461c      	mov	r4, r3
 8005e32:	4615      	mov	r5, r2
 8005e34:	f04f 0200 	mov.w	r2, #0
 8005e38:	f04f 0300 	mov.w	r3, #0
 8005e3c:	012b      	lsls	r3, r5, #4
 8005e3e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8005e42:	0122      	lsls	r2, r4, #4
 8005e44:	b2f3      	uxtb	r3, r6
 8005e46:	2200      	movs	r2, #0
 8005e48:	4618      	mov	r0, r3
 8005e4a:	4611      	mov	r1, r2
 8005e4c:	f04f 0200 	mov.w	r2, #0
 8005e50:	f04f 0300 	mov.w	r3, #0
 8005e54:	010b      	lsls	r3, r1, #4
 8005e56:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 8005e5a:	0102      	lsls	r2, r0, #4
 8005e5c:	4633      	mov	r3, r6
 8005e5e:	005b      	lsls	r3, r3, #1
 8005e60:	3307      	adds	r3, #7
 8005e62:	08db      	lsrs	r3, r3, #3
 8005e64:	00db      	lsls	r3, r3, #3
 8005e66:	ebad 0d03 	sub.w	sp, sp, r3
 8005e6a:	466b      	mov	r3, sp
 8005e6c:	3301      	adds	r3, #1
 8005e6e:	085b      	lsrs	r3, r3, #1
 8005e70:	005b      	lsls	r3, r3, #1
 8005e72:	617b      	str	r3, [r7, #20]
	osMutexAcquire(notesMutexHandle, osWaitForever);
 8005e74:	4b64      	ldr	r3, [pc, #400]	; (8006008 <synthesise_output1+0x1f4>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005e7c:	4618      	mov	r0, r3
 8005e7e:	f006 f93d 	bl	800c0fc <osMutexAcquire>
	for (int board = 0; board < keyboard_count; board++) {
 8005e82:	2300      	movs	r3, #0
 8005e84:	627b      	str	r3, [r7, #36]	; 0x24
 8005e86:	e00b      	b.n	8005ea0 <synthesise_output1+0x8c>
		localKeys[board] = allKeys[board];
 8005e88:	4a60      	ldr	r2, [pc, #384]	; (800600c <synthesise_output1+0x1f8>)
 8005e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e8c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005e90:	b299      	uxth	r1, r3
 8005e92:	697b      	ldr	r3, [r7, #20]
 8005e94:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005e96:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int board = 0; board < keyboard_count; board++) {
 8005e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e9c:	3301      	adds	r3, #1
 8005e9e:	627b      	str	r3, [r7, #36]	; 0x24
 8005ea0:	4b58      	ldr	r3, [pc, #352]	; (8006004 <synthesise_output1+0x1f0>)
 8005ea2:	781b      	ldrb	r3, [r3, #0]
 8005ea4:	b2db      	uxtb	r3, r3
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005eaa:	4293      	cmp	r3, r2
 8005eac:	dbec      	blt.n	8005e88 <synthesise_output1+0x74>
	}
	osMutexRelease(notesMutexHandle);
 8005eae:	4b56      	ldr	r3, [pc, #344]	; (8006008 <synthesise_output1+0x1f4>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f006 f96d 	bl	800c192 <osMutexRelease>

	// re-shuffle into notes
	uint8_t localNotes[12];
	for (int key = 0; key < 12; key++) {
 8005eb8:	2300      	movs	r3, #0
 8005eba:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ebc:	e02f      	b.n	8005f1e <synthesise_output1+0x10a>
		localNotes[key] = 0;
 8005ebe:	1d3a      	adds	r2, r7, #4
 8005ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec2:	4413      	add	r3, r2
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	701a      	strb	r2, [r3, #0]
		for (int board = 0; board < keyboard_count; board++) {
 8005ec8:	2300      	movs	r3, #0
 8005eca:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ecc:	e01d      	b.n	8005f0a <synthesise_output1+0xf6>
			localNotes[key] |= ((~(localKeys[board]) >> key) & 1) << board;
 8005ece:	1d3a      	adds	r2, r7, #4
 8005ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed2:	4413      	add	r3, r2
 8005ed4:	781b      	ldrb	r3, [r3, #0]
 8005ed6:	b25a      	sxtb	r2, r3
 8005ed8:	697b      	ldr	r3, [r7, #20]
 8005eda:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005edc:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 8005ee0:	43d9      	mvns	r1, r3
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	fa41 f303 	asr.w	r3, r1, r3
 8005ee8:	f003 0101 	and.w	r1, r3, #1
 8005eec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eee:	fa01 f303 	lsl.w	r3, r1, r3
 8005ef2:	b25b      	sxtb	r3, r3
 8005ef4:	4313      	orrs	r3, r2
 8005ef6:	b25b      	sxtb	r3, r3
 8005ef8:	b2d9      	uxtb	r1, r3
 8005efa:	1d3a      	adds	r2, r7, #4
 8005efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005efe:	4413      	add	r3, r2
 8005f00:	460a      	mov	r2, r1
 8005f02:	701a      	strb	r2, [r3, #0]
		for (int board = 0; board < keyboard_count; board++) {
 8005f04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f06:	3301      	adds	r3, #1
 8005f08:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005f0a:	4b3e      	ldr	r3, [pc, #248]	; (8006004 <synthesise_output1+0x1f0>)
 8005f0c:	781b      	ldrb	r3, [r3, #0]
 8005f0e:	b2db      	uxtb	r3, r3
 8005f10:	461a      	mov	r2, r3
 8005f12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005f14:	4293      	cmp	r3, r2
 8005f16:	dbda      	blt.n	8005ece <synthesise_output1+0xba>
	for (int key = 0; key < 12; key++) {
 8005f18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f1a:	3301      	adds	r3, #1
 8005f1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8005f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f20:	2b0b      	cmp	r3, #11
 8005f22:	ddcc      	ble.n	8005ebe <synthesise_output1+0xaa>
		}
	}

	// load the position-octave difference atomically
	uint8_t localDiff = __atomic_load_n(&pos_oct_diff, __ATOMIC_RELAXED);
 8005f24:	4b3a      	ldr	r3, [pc, #232]	; (8006010 <synthesise_output1+0x1fc>)
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	74fb      	strb	r3, [r7, #19]

	// load the volume atomically
	uint8_t localVolume = __atomic_load_n(&volume, __ATOMIC_RELAXED);
 8005f2a:	4b3a      	ldr	r3, [pc, #232]	; (8006014 <synthesise_output1+0x200>)
 8005f2c:	781b      	ldrb	r3, [r3, #0]
 8005f2e:	74bb      	strb	r3, [r7, #18]

	for (int i = 0; i < DDS_OUT_SAMPLES / 2; i++) {
 8005f30:	2300      	movs	r3, #0
 8005f32:	633b      	str	r3, [r7, #48]	; 0x30
 8005f34:	e05b      	b.n	8005fee <synthesise_output1+0x1da>
		int32_t out = 0;
 8005f36:	2300      	movs	r3, #0
 8005f38:	637b      	str	r3, [r7, #52]	; 0x34
		for (int key = 0; key < 12; key++) {
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	623b      	str	r3, [r7, #32]
 8005f3e:	e042      	b.n	8005fc6 <synthesise_output1+0x1b2>
			if (localNotes[key]) {
 8005f40:	1d3a      	adds	r2, r7, #4
 8005f42:	6a3b      	ldr	r3, [r7, #32]
 8005f44:	4413      	add	r3, r2
 8005f46:	781b      	ldrb	r3, [r3, #0]
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d039      	beq.n	8005fc0 <synthesise_output1+0x1ac>
				DDS_indices[key] += DDS_steps[key];
 8005f4c:	4a32      	ldr	r2, [pc, #200]	; (8006018 <synthesise_output1+0x204>)
 8005f4e:	6a3b      	ldr	r3, [r7, #32]
 8005f50:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f54:	4931      	ldr	r1, [pc, #196]	; (800601c <synthesise_output1+0x208>)
 8005f56:	6a3b      	ldr	r3, [r7, #32]
 8005f58:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8005f5c:	441a      	add	r2, r3
 8005f5e:	492e      	ldr	r1, [pc, #184]	; (8006018 <synthesise_output1+0x204>)
 8005f60:	6a3b      	ldr	r3, [r7, #32]
 8005f62:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for (int board = 0; board < keyboard_count; board++) {
 8005f66:	2300      	movs	r3, #0
 8005f68:	61fb      	str	r3, [r7, #28]
 8005f6a:	e022      	b.n	8005fb2 <synthesise_output1+0x19e>
					if (localNotes[key] & (1 << board)) {
 8005f6c:	1d3a      	adds	r2, r7, #4
 8005f6e:	6a3b      	ldr	r3, [r7, #32]
 8005f70:	4413      	add	r3, r2
 8005f72:	781b      	ldrb	r3, [r3, #0]
 8005f74:	461a      	mov	r2, r3
 8005f76:	69fb      	ldr	r3, [r7, #28]
 8005f78:	fa42 f303 	asr.w	r3, r2, r3
 8005f7c:	f003 0301 	and.w	r3, r3, #1
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d013      	beq.n	8005fac <synthesise_output1+0x198>
						out += DDS_LUT_SEL[(DDS_indices[key]
 8005f84:	4a24      	ldr	r2, [pc, #144]	; (8006018 <synthesise_output1+0x204>)
 8005f86:	6a3b      	ldr	r3, [r7, #32]
 8005f88:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
								>> (13 - board + localDiff)) & 0x03FF];
 8005f8c:	69fb      	ldr	r3, [r7, #28]
 8005f8e:	f1c3 010d 	rsb	r1, r3, #13
 8005f92:	7cfb      	ldrb	r3, [r7, #19]
 8005f94:	440b      	add	r3, r1
 8005f96:	fa22 f303 	lsr.w	r3, r2, r3
 8005f9a:	f3c3 0309 	ubfx	r3, r3, #0, #10
						out += DDS_LUT_SEL[(DDS_indices[key]
 8005f9e:	4a20      	ldr	r2, [pc, #128]	; (8006020 <synthesise_output1+0x20c>)
 8005fa0:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 8005fa4:	461a      	mov	r2, r3
 8005fa6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fa8:	4413      	add	r3, r2
 8005faa:	637b      	str	r3, [r7, #52]	; 0x34
				for (int board = 0; board < keyboard_count; board++) {
 8005fac:	69fb      	ldr	r3, [r7, #28]
 8005fae:	3301      	adds	r3, #1
 8005fb0:	61fb      	str	r3, [r7, #28]
 8005fb2:	4b14      	ldr	r3, [pc, #80]	; (8006004 <synthesise_output1+0x1f0>)
 8005fb4:	781b      	ldrb	r3, [r3, #0]
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	461a      	mov	r2, r3
 8005fba:	69fb      	ldr	r3, [r7, #28]
 8005fbc:	4293      	cmp	r3, r2
 8005fbe:	dbd5      	blt.n	8005f6c <synthesise_output1+0x158>
		for (int key = 0; key < 12; key++) {
 8005fc0:	6a3b      	ldr	r3, [r7, #32]
 8005fc2:	3301      	adds	r3, #1
 8005fc4:	623b      	str	r3, [r7, #32]
 8005fc6:	6a3b      	ldr	r3, [r7, #32]
 8005fc8:	2b0b      	cmp	r3, #11
 8005fca:	ddb9      	ble.n	8005f40 <synthesise_output1+0x12c>
					}
				}
			}
		}
		DDS_OUT[i] = ((uint16_t) (out >> (12 - localVolume))) + 2048;
 8005fcc:	7cbb      	ldrb	r3, [r7, #18]
 8005fce:	f1c3 030c 	rsb	r3, r3, #12
 8005fd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005fd4:	fa42 f303 	asr.w	r3, r2, r3
 8005fd8:	b29b      	uxth	r3, r3
 8005fda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005fde:	b299      	uxth	r1, r3
 8005fe0:	4a10      	ldr	r2, [pc, #64]	; (8006024 <synthesise_output1+0x210>)
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = 0; i < DDS_OUT_SAMPLES / 2; i++) {
 8005fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fea:	3301      	adds	r3, #1
 8005fec:	633b      	str	r3, [r7, #48]	; 0x30
 8005fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ff0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ff4:	db9f      	blt.n	8005f36 <synthesise_output1+0x122>
 8005ff6:	46c5      	mov	sp, r8
	}

}
 8005ff8:	bf00      	nop
 8005ffa:	3738      	adds	r7, #56	; 0x38
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006002:	bf00      	nop
 8006004:	20000000 	.word	0x20000000
 8006008:	20000674 	.word	0x20000674
 800600c:	2000067c 	.word	0x2000067c
 8006010:	20000016 	.word	0x20000016
 8006014:	20000012 	.word	0x20000012
 8006018:	200047a4 	.word	0x200047a4
 800601c:	200047d4 	.word	0x200047d4
 8006020:	20003fa4 	.word	0x20003fa4
 8006024:	20004804 	.word	0x20004804

08006028 <synthesise_output2>:

inline void synthesise_output2() {
 8006028:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800602c:	b08e      	sub	sp, #56	; 0x38
 800602e:	af00      	add	r7, sp, #0
 8006030:	466b      	mov	r3, sp
 8006032:	4698      	mov	r8, r3

	// load the keys, protected by Mutex
	uint16_t localKeys[keyboard_count];
 8006034:	4b78      	ldr	r3, [pc, #480]	; (8006218 <synthesise_output2+0x1f0>)
 8006036:	781b      	ldrb	r3, [r3, #0]
 8006038:	b2de      	uxtb	r6, r3
 800603a:	4633      	mov	r3, r6
 800603c:	3b01      	subs	r3, #1
 800603e:	61bb      	str	r3, [r7, #24]
 8006040:	b2f3      	uxtb	r3, r6
 8006042:	2200      	movs	r2, #0
 8006044:	461c      	mov	r4, r3
 8006046:	4615      	mov	r5, r2
 8006048:	f04f 0200 	mov.w	r2, #0
 800604c:	f04f 0300 	mov.w	r3, #0
 8006050:	012b      	lsls	r3, r5, #4
 8006052:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8006056:	0122      	lsls	r2, r4, #4
 8006058:	b2f3      	uxtb	r3, r6
 800605a:	2200      	movs	r2, #0
 800605c:	4618      	mov	r0, r3
 800605e:	4611      	mov	r1, r2
 8006060:	f04f 0200 	mov.w	r2, #0
 8006064:	f04f 0300 	mov.w	r3, #0
 8006068:	010b      	lsls	r3, r1, #4
 800606a:	ea43 7310 	orr.w	r3, r3, r0, lsr #28
 800606e:	0102      	lsls	r2, r0, #4
 8006070:	4633      	mov	r3, r6
 8006072:	005b      	lsls	r3, r3, #1
 8006074:	3307      	adds	r3, #7
 8006076:	08db      	lsrs	r3, r3, #3
 8006078:	00db      	lsls	r3, r3, #3
 800607a:	ebad 0d03 	sub.w	sp, sp, r3
 800607e:	466b      	mov	r3, sp
 8006080:	3301      	adds	r3, #1
 8006082:	085b      	lsrs	r3, r3, #1
 8006084:	005b      	lsls	r3, r3, #1
 8006086:	617b      	str	r3, [r7, #20]
	osMutexAcquire(notesMutexHandle, osWaitForever);
 8006088:	4b64      	ldr	r3, [pc, #400]	; (800621c <synthesise_output2+0x1f4>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8006090:	4618      	mov	r0, r3
 8006092:	f006 f833 	bl	800c0fc <osMutexAcquire>
	for (int board = 0; board < keyboard_count; board++) {
 8006096:	2300      	movs	r3, #0
 8006098:	627b      	str	r3, [r7, #36]	; 0x24
 800609a:	e00b      	b.n	80060b4 <synthesise_output2+0x8c>
		localKeys[board] = allKeys[board];
 800609c:	4a60      	ldr	r2, [pc, #384]	; (8006220 <synthesise_output2+0x1f8>)
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80060a4:	b299      	uxth	r1, r3
 80060a6:	697b      	ldr	r3, [r7, #20]
 80060a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060aa:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
	for (int board = 0; board < keyboard_count; board++) {
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	3301      	adds	r3, #1
 80060b2:	627b      	str	r3, [r7, #36]	; 0x24
 80060b4:	4b58      	ldr	r3, [pc, #352]	; (8006218 <synthesise_output2+0x1f0>)
 80060b6:	781b      	ldrb	r3, [r3, #0]
 80060b8:	b2db      	uxtb	r3, r3
 80060ba:	461a      	mov	r2, r3
 80060bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060be:	4293      	cmp	r3, r2
 80060c0:	dbec      	blt.n	800609c <synthesise_output2+0x74>
	}
	osMutexRelease(notesMutexHandle);
 80060c2:	4b56      	ldr	r3, [pc, #344]	; (800621c <synthesise_output2+0x1f4>)
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	4618      	mov	r0, r3
 80060c8:	f006 f863 	bl	800c192 <osMutexRelease>

	// re-shuffle into notes
	uint8_t localNotes[12];
	for (int key = 0; key < 12; key++) {
 80060cc:	2300      	movs	r3, #0
 80060ce:	62bb      	str	r3, [r7, #40]	; 0x28
 80060d0:	e02f      	b.n	8006132 <synthesise_output2+0x10a>
		localNotes[key] = 0;
 80060d2:	1d3a      	adds	r2, r7, #4
 80060d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060d6:	4413      	add	r3, r2
 80060d8:	2200      	movs	r2, #0
 80060da:	701a      	strb	r2, [r3, #0]
		for (int board = 0; board < keyboard_count; board++) {
 80060dc:	2300      	movs	r3, #0
 80060de:	62fb      	str	r3, [r7, #44]	; 0x2c
 80060e0:	e01d      	b.n	800611e <synthesise_output2+0xf6>
			localNotes[key] |= ((~(localKeys[board]) >> key) & 1) << board;
 80060e2:	1d3a      	adds	r2, r7, #4
 80060e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e6:	4413      	add	r3, r2
 80060e8:	781b      	ldrb	r3, [r3, #0]
 80060ea:	b25a      	sxtb	r2, r3
 80060ec:	697b      	ldr	r3, [r7, #20]
 80060ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80060f0:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 80060f4:	43d9      	mvns	r1, r3
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	fa41 f303 	asr.w	r3, r1, r3
 80060fc:	f003 0101 	and.w	r1, r3, #1
 8006100:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006102:	fa01 f303 	lsl.w	r3, r1, r3
 8006106:	b25b      	sxtb	r3, r3
 8006108:	4313      	orrs	r3, r2
 800610a:	b25b      	sxtb	r3, r3
 800610c:	b2d9      	uxtb	r1, r3
 800610e:	1d3a      	adds	r2, r7, #4
 8006110:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006112:	4413      	add	r3, r2
 8006114:	460a      	mov	r2, r1
 8006116:	701a      	strb	r2, [r3, #0]
		for (int board = 0; board < keyboard_count; board++) {
 8006118:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800611a:	3301      	adds	r3, #1
 800611c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800611e:	4b3e      	ldr	r3, [pc, #248]	; (8006218 <synthesise_output2+0x1f0>)
 8006120:	781b      	ldrb	r3, [r3, #0]
 8006122:	b2db      	uxtb	r3, r3
 8006124:	461a      	mov	r2, r3
 8006126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006128:	4293      	cmp	r3, r2
 800612a:	dbda      	blt.n	80060e2 <synthesise_output2+0xba>
	for (int key = 0; key < 12; key++) {
 800612c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612e:	3301      	adds	r3, #1
 8006130:	62bb      	str	r3, [r7, #40]	; 0x28
 8006132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006134:	2b0b      	cmp	r3, #11
 8006136:	ddcc      	ble.n	80060d2 <synthesise_output2+0xaa>
		}
	}

	// load the position-octave difference atomically
	uint8_t localDiff = __atomic_load_n(&pos_oct_diff, __ATOMIC_RELAXED);
 8006138:	4b3a      	ldr	r3, [pc, #232]	; (8006224 <synthesise_output2+0x1fc>)
 800613a:	781b      	ldrb	r3, [r3, #0]
 800613c:	74fb      	strb	r3, [r7, #19]

	// load the volume atomically
	uint8_t localVolume = __atomic_load_n(&volume, __ATOMIC_RELAXED);
 800613e:	4b3a      	ldr	r3, [pc, #232]	; (8006228 <synthesise_output2+0x200>)
 8006140:	781b      	ldrb	r3, [r3, #0]
 8006142:	74bb      	strb	r3, [r7, #18]

	for (int i = DDS_OUT_SAMPLES / 2; i < DDS_OUT_SAMPLES; i++) {
 8006144:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006148:	633b      	str	r3, [r7, #48]	; 0x30
 800614a:	e05b      	b.n	8006204 <synthesise_output2+0x1dc>
		int32_t out = 0;
 800614c:	2300      	movs	r3, #0
 800614e:	637b      	str	r3, [r7, #52]	; 0x34
		for (int key = 0; key < 12; key++) {
 8006150:	2300      	movs	r3, #0
 8006152:	623b      	str	r3, [r7, #32]
 8006154:	e042      	b.n	80061dc <synthesise_output2+0x1b4>
			if (localNotes[key]) {
 8006156:	1d3a      	adds	r2, r7, #4
 8006158:	6a3b      	ldr	r3, [r7, #32]
 800615a:	4413      	add	r3, r2
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	2b00      	cmp	r3, #0
 8006160:	d039      	beq.n	80061d6 <synthesise_output2+0x1ae>
				DDS_indices[key] += DDS_steps[key];
 8006162:	4a32      	ldr	r2, [pc, #200]	; (800622c <synthesise_output2+0x204>)
 8006164:	6a3b      	ldr	r3, [r7, #32]
 8006166:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800616a:	4931      	ldr	r1, [pc, #196]	; (8006230 <synthesise_output2+0x208>)
 800616c:	6a3b      	ldr	r3, [r7, #32]
 800616e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8006172:	441a      	add	r2, r3
 8006174:	492d      	ldr	r1, [pc, #180]	; (800622c <synthesise_output2+0x204>)
 8006176:	6a3b      	ldr	r3, [r7, #32]
 8006178:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				for (int board = 0; board < keyboard_count; board++) {
 800617c:	2300      	movs	r3, #0
 800617e:	61fb      	str	r3, [r7, #28]
 8006180:	e022      	b.n	80061c8 <synthesise_output2+0x1a0>
					if (localNotes[key] & (1 << board)) {
 8006182:	1d3a      	adds	r2, r7, #4
 8006184:	6a3b      	ldr	r3, [r7, #32]
 8006186:	4413      	add	r3, r2
 8006188:	781b      	ldrb	r3, [r3, #0]
 800618a:	461a      	mov	r2, r3
 800618c:	69fb      	ldr	r3, [r7, #28]
 800618e:	fa42 f303 	asr.w	r3, r2, r3
 8006192:	f003 0301 	and.w	r3, r3, #1
 8006196:	2b00      	cmp	r3, #0
 8006198:	d013      	beq.n	80061c2 <synthesise_output2+0x19a>
						out += DDS_LUT_SEL[(DDS_indices[key]
 800619a:	4a24      	ldr	r2, [pc, #144]	; (800622c <synthesise_output2+0x204>)
 800619c:	6a3b      	ldr	r3, [r7, #32]
 800619e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
								>> (13 - board + localDiff)) & 0x03FF];
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	f1c3 010d 	rsb	r1, r3, #13
 80061a8:	7cfb      	ldrb	r3, [r7, #19]
 80061aa:	440b      	add	r3, r1
 80061ac:	fa22 f303 	lsr.w	r3, r2, r3
 80061b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
						out += DDS_LUT_SEL[(DDS_indices[key]
 80061b4:	4a1f      	ldr	r2, [pc, #124]	; (8006234 <synthesise_output2+0x20c>)
 80061b6:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 80061ba:	461a      	mov	r2, r3
 80061bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061be:	4413      	add	r3, r2
 80061c0:	637b      	str	r3, [r7, #52]	; 0x34
				for (int board = 0; board < keyboard_count; board++) {
 80061c2:	69fb      	ldr	r3, [r7, #28]
 80061c4:	3301      	adds	r3, #1
 80061c6:	61fb      	str	r3, [r7, #28]
 80061c8:	4b13      	ldr	r3, [pc, #76]	; (8006218 <synthesise_output2+0x1f0>)
 80061ca:	781b      	ldrb	r3, [r3, #0]
 80061cc:	b2db      	uxtb	r3, r3
 80061ce:	461a      	mov	r2, r3
 80061d0:	69fb      	ldr	r3, [r7, #28]
 80061d2:	4293      	cmp	r3, r2
 80061d4:	dbd5      	blt.n	8006182 <synthesise_output2+0x15a>
		for (int key = 0; key < 12; key++) {
 80061d6:	6a3b      	ldr	r3, [r7, #32]
 80061d8:	3301      	adds	r3, #1
 80061da:	623b      	str	r3, [r7, #32]
 80061dc:	6a3b      	ldr	r3, [r7, #32]
 80061de:	2b0b      	cmp	r3, #11
 80061e0:	ddb9      	ble.n	8006156 <synthesise_output2+0x12e>
					}
				}
			}
		}
		DDS_OUT[i] = ((uint16_t) (out >> (12 - localVolume))) + 2048;
 80061e2:	7cbb      	ldrb	r3, [r7, #18]
 80061e4:	f1c3 030c 	rsb	r3, r3, #12
 80061e8:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80061ea:	fa42 f303 	asr.w	r3, r2, r3
 80061ee:	b29b      	uxth	r3, r3
 80061f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80061f4:	b299      	uxth	r1, r3
 80061f6:	4a10      	ldr	r2, [pc, #64]	; (8006238 <synthesise_output2+0x210>)
 80061f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061fa:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for (int i = DDS_OUT_SAMPLES / 2; i < DDS_OUT_SAMPLES; i++) {
 80061fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006200:	3301      	adds	r3, #1
 8006202:	633b      	str	r3, [r7, #48]	; 0x30
 8006204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006206:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800620a:	db9f      	blt.n	800614c <synthesise_output2+0x124>
 800620c:	46c5      	mov	sp, r8
	}

}
 800620e:	bf00      	nop
 8006210:	3738      	adds	r7, #56	; 0x38
 8006212:	46bd      	mov	sp, r7
 8006214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006218:	20000000 	.word	0x20000000
 800621c:	20000674 	.word	0x20000674
 8006220:	2000067c 	.word	0x2000067c
 8006224:	20000016 	.word	0x20000016
 8006228:	20000012 	.word	0x20000012
 800622c:	200047a4 	.word	0x200047a4
 8006230:	200047d4 	.word	0x200047d4
 8006234:	20003fa4 	.word	0x20003fa4
 8006238:	20004804 	.word	0x20004804

0800623c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 800623c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006274 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8006240:	f7fe ffd8 	bl	80051f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8006244:	480c      	ldr	r0, [pc, #48]	; (8006278 <LoopForever+0x6>)
  ldr r1, =_edata
 8006246:	490d      	ldr	r1, [pc, #52]	; (800627c <LoopForever+0xa>)
  ldr r2, =_sidata
 8006248:	4a0d      	ldr	r2, [pc, #52]	; (8006280 <LoopForever+0xe>)
  movs r3, #0
 800624a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800624c:	e002      	b.n	8006254 <LoopCopyDataInit>

0800624e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800624e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006250:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006252:	3304      	adds	r3, #4

08006254 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006254:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006256:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006258:	d3f9      	bcc.n	800624e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800625a:	4a0a      	ldr	r2, [pc, #40]	; (8006284 <LoopForever+0x12>)
  ldr r4, =_ebss
 800625c:	4c0a      	ldr	r4, [pc, #40]	; (8006288 <LoopForever+0x16>)
  movs r3, #0
 800625e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006260:	e001      	b.n	8006266 <LoopFillZerobss>

08006262 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006262:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006264:	3204      	adds	r2, #4

08006266 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006266:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006268:	d3fb      	bcc.n	8006262 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800626a:	f009 fed5 	bl	8010018 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800626e:	f7fd fd79 	bl	8003d64 <main>

08006272 <LoopForever>:

LoopForever:
    b LoopForever
 8006272:	e7fe      	b.n	8006272 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8006274:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8006278:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800627c:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 8006280:	0801fb68 	.word	0x0801fb68
  ldr r2, =_sbss
 8006284:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8006288:	20009328 	.word	0x20009328

0800628c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800628c:	e7fe      	b.n	800628c <ADC1_IRQHandler>

0800628e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800628e:	b580      	push	{r7, lr}
 8006290:	b082      	sub	sp, #8
 8006292:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8006294:	2300      	movs	r3, #0
 8006296:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006298:	2003      	movs	r0, #3
 800629a:	f001 fe42 	bl	8007f22 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800629e:	200f      	movs	r0, #15
 80062a0:	f7fe fea4 	bl	8004fec <HAL_InitTick>
 80062a4:	4603      	mov	r3, r0
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d002      	beq.n	80062b0 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80062aa:	2301      	movs	r3, #1
 80062ac:	71fb      	strb	r3, [r7, #7]
 80062ae:	e001      	b.n	80062b4 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80062b0:	f7fe fbf2 	bl	8004a98 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80062b4:	79fb      	ldrb	r3, [r7, #7]
}
 80062b6:	4618      	mov	r0, r3
 80062b8:	3708      	adds	r7, #8
 80062ba:	46bd      	mov	sp, r7
 80062bc:	bd80      	pop	{r7, pc}
	...

080062c0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80062c0:	b480      	push	{r7}
 80062c2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80062c4:	4b06      	ldr	r3, [pc, #24]	; (80062e0 <HAL_IncTick+0x20>)
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	461a      	mov	r2, r3
 80062ca:	4b06      	ldr	r3, [pc, #24]	; (80062e4 <HAL_IncTick+0x24>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4413      	add	r3, r2
 80062d0:	4a04      	ldr	r2, [pc, #16]	; (80062e4 <HAL_IncTick+0x24>)
 80062d2:	6013      	str	r3, [r2, #0]
}
 80062d4:	bf00      	nop
 80062d6:	46bd      	mov	sp, r7
 80062d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	20000054 	.word	0x20000054
 80062e4:	20006804 	.word	0x20006804

080062e8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80062e8:	b480      	push	{r7}
 80062ea:	af00      	add	r7, sp, #0
  return uwTick;
 80062ec:	4b03      	ldr	r3, [pc, #12]	; (80062fc <HAL_GetTick+0x14>)
 80062ee:	681b      	ldr	r3, [r3, #0]
}
 80062f0:	4618      	mov	r0, r3
 80062f2:	46bd      	mov	sp, r7
 80062f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062f8:	4770      	bx	lr
 80062fa:	bf00      	nop
 80062fc:	20006804 	.word	0x20006804

08006300 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006300:	b580      	push	{r7, lr}
 8006302:	b084      	sub	sp, #16
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006308:	f7ff ffee 	bl	80062e8 <HAL_GetTick>
 800630c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006318:	d005      	beq.n	8006326 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800631a:	4b0a      	ldr	r3, [pc, #40]	; (8006344 <HAL_Delay+0x44>)
 800631c:	781b      	ldrb	r3, [r3, #0]
 800631e:	461a      	mov	r2, r3
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4413      	add	r3, r2
 8006324:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006326:	bf00      	nop
 8006328:	f7ff ffde 	bl	80062e8 <HAL_GetTick>
 800632c:	4602      	mov	r2, r0
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	1ad3      	subs	r3, r2, r3
 8006332:	68fa      	ldr	r2, [r7, #12]
 8006334:	429a      	cmp	r2, r3
 8006336:	d8f7      	bhi.n	8006328 <HAL_Delay+0x28>
  {
  }
}
 8006338:	bf00      	nop
 800633a:	bf00      	nop
 800633c:	3710      	adds	r7, #16
 800633e:	46bd      	mov	sp, r7
 8006340:	bd80      	pop	{r7, pc}
 8006342:	bf00      	nop
 8006344:	20000054 	.word	0x20000054

08006348 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8006348:	b480      	push	{r7}
 800634a:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800634c:	4b03      	ldr	r3, [pc, #12]	; (800635c <HAL_GetUIDw0+0x14>)
 800634e:	681b      	ldr	r3, [r3, #0]
}
 8006350:	4618      	mov	r0, r3
 8006352:	46bd      	mov	sp, r7
 8006354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006358:	4770      	bx	lr
 800635a:	bf00      	nop
 800635c:	1fff7590 	.word	0x1fff7590

08006360 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8006360:	b480      	push	{r7}
 8006362:	b083      	sub	sp, #12
 8006364:	af00      	add	r7, sp, #0
 8006366:	6078      	str	r0, [r7, #4]
 8006368:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	689b      	ldr	r3, [r3, #8]
 800636e:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	431a      	orrs	r2, r3
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	609a      	str	r2, [r3, #8]
}
 800637a:	bf00      	nop
 800637c:	370c      	adds	r7, #12
 800637e:	46bd      	mov	sp, r7
 8006380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006384:	4770      	bx	lr

08006386 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8006386:	b480      	push	{r7}
 8006388:	b083      	sub	sp, #12
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
 800638e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	689b      	ldr	r3, [r3, #8]
 8006394:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	431a      	orrs	r2, r3
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	609a      	str	r2, [r3, #8]
}
 80063a0:	bf00      	nop
 80063a2:	370c      	adds	r7, #12
 80063a4:	46bd      	mov	sp, r7
 80063a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063aa:	4770      	bx	lr

080063ac <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80063ac:	b480      	push	{r7}
 80063ae:	b083      	sub	sp, #12
 80063b0:	af00      	add	r7, sp, #0
 80063b2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	689b      	ldr	r3, [r3, #8]
 80063b8:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80063bc:	4618      	mov	r0, r3
 80063be:	370c      	adds	r7, #12
 80063c0:	46bd      	mov	sp, r7
 80063c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c6:	4770      	bx	lr

080063c8 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b087      	sub	sp, #28
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
 80063d4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3360      	adds	r3, #96	; 0x60
 80063da:	461a      	mov	r2, r3
 80063dc:	68bb      	ldr	r3, [r7, #8]
 80063de:	009b      	lsls	r3, r3, #2
 80063e0:	4413      	add	r3, r2
 80063e2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	681a      	ldr	r2, [r3, #0]
 80063e8:	4b08      	ldr	r3, [pc, #32]	; (800640c <LL_ADC_SetOffset+0x44>)
 80063ea:	4013      	ands	r3, r2
 80063ec:	687a      	ldr	r2, [r7, #4]
 80063ee:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80063f2:	683a      	ldr	r2, [r7, #0]
 80063f4:	430a      	orrs	r2, r1
 80063f6:	4313      	orrs	r3, r2
 80063f8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8006400:	bf00      	nop
 8006402:	371c      	adds	r7, #28
 8006404:	46bd      	mov	sp, r7
 8006406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640a:	4770      	bx	lr
 800640c:	03fff000 	.word	0x03fff000

08006410 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8006410:	b480      	push	{r7}
 8006412:	b085      	sub	sp, #20
 8006414:	af00      	add	r7, sp, #0
 8006416:	6078      	str	r0, [r7, #4]
 8006418:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	3360      	adds	r3, #96	; 0x60
 800641e:	461a      	mov	r2, r3
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	009b      	lsls	r3, r3, #2
 8006424:	4413      	add	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8006430:	4618      	mov	r0, r3
 8006432:	3714      	adds	r7, #20
 8006434:	46bd      	mov	sp, r7
 8006436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643a:	4770      	bx	lr

0800643c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 800643c:	b480      	push	{r7}
 800643e:	b087      	sub	sp, #28
 8006440:	af00      	add	r7, sp, #0
 8006442:	60f8      	str	r0, [r7, #12]
 8006444:	60b9      	str	r1, [r7, #8]
 8006446:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	3360      	adds	r3, #96	; 0x60
 800644c:	461a      	mov	r2, r3
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	009b      	lsls	r3, r3, #2
 8006452:	4413      	add	r3, r2
 8006454:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006456:	697b      	ldr	r3, [r7, #20]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	431a      	orrs	r2, r3
 8006462:	697b      	ldr	r3, [r7, #20]
 8006464:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr

08006472 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8006472:	b480      	push	{r7}
 8006474:	b087      	sub	sp, #28
 8006476:	af00      	add	r7, sp, #0
 8006478:	60f8      	str	r0, [r7, #12]
 800647a:	60b9      	str	r1, [r7, #8]
 800647c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	3330      	adds	r3, #48	; 0x30
 8006482:	461a      	mov	r2, r3
 8006484:	68bb      	ldr	r3, [r7, #8]
 8006486:	0a1b      	lsrs	r3, r3, #8
 8006488:	009b      	lsls	r3, r3, #2
 800648a:	f003 030c 	and.w	r3, r3, #12
 800648e:	4413      	add	r3, r2
 8006490:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	681a      	ldr	r2, [r3, #0]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	f003 031f 	and.w	r3, r3, #31
 800649c:	211f      	movs	r1, #31
 800649e:	fa01 f303 	lsl.w	r3, r1, r3
 80064a2:	43db      	mvns	r3, r3
 80064a4:	401a      	ands	r2, r3
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	0e9b      	lsrs	r3, r3, #26
 80064aa:	f003 011f 	and.w	r1, r3, #31
 80064ae:	68bb      	ldr	r3, [r7, #8]
 80064b0:	f003 031f 	and.w	r3, r3, #31
 80064b4:	fa01 f303 	lsl.w	r3, r1, r3
 80064b8:	431a      	orrs	r2, r3
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80064be:	bf00      	nop
 80064c0:	371c      	adds	r7, #28
 80064c2:	46bd      	mov	sp, r7
 80064c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c8:	4770      	bx	lr

080064ca <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80064ca:	b480      	push	{r7}
 80064cc:	b087      	sub	sp, #28
 80064ce:	af00      	add	r7, sp, #0
 80064d0:	60f8      	str	r0, [r7, #12]
 80064d2:	60b9      	str	r1, [r7, #8]
 80064d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	3314      	adds	r3, #20
 80064da:	461a      	mov	r2, r3
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	0e5b      	lsrs	r3, r3, #25
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	f003 0304 	and.w	r3, r3, #4
 80064e6:	4413      	add	r3, r2
 80064e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80064ea:	697b      	ldr	r3, [r7, #20]
 80064ec:	681a      	ldr	r2, [r3, #0]
 80064ee:	68bb      	ldr	r3, [r7, #8]
 80064f0:	0d1b      	lsrs	r3, r3, #20
 80064f2:	f003 031f 	and.w	r3, r3, #31
 80064f6:	2107      	movs	r1, #7
 80064f8:	fa01 f303 	lsl.w	r3, r1, r3
 80064fc:	43db      	mvns	r3, r3
 80064fe:	401a      	ands	r2, r3
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	0d1b      	lsrs	r3, r3, #20
 8006504:	f003 031f 	and.w	r3, r3, #31
 8006508:	6879      	ldr	r1, [r7, #4]
 800650a:	fa01 f303 	lsl.w	r3, r1, r3
 800650e:	431a      	orrs	r2, r3
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8006514:	bf00      	nop
 8006516:	371c      	adds	r7, #28
 8006518:	46bd      	mov	sp, r7
 800651a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651e:	4770      	bx	lr

08006520 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8006520:	b480      	push	{r7}
 8006522:	b085      	sub	sp, #20
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006538:	43db      	mvns	r3, r3
 800653a:	401a      	ands	r2, r3
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f003 0318 	and.w	r3, r3, #24
 8006542:	4908      	ldr	r1, [pc, #32]	; (8006564 <LL_ADC_SetChannelSingleDiff+0x44>)
 8006544:	40d9      	lsrs	r1, r3
 8006546:	68bb      	ldr	r3, [r7, #8]
 8006548:	400b      	ands	r3, r1
 800654a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800654e:	431a      	orrs	r2, r3
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8006556:	bf00      	nop
 8006558:	3714      	adds	r7, #20
 800655a:	46bd      	mov	sp, r7
 800655c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006560:	4770      	bx	lr
 8006562:	bf00      	nop
 8006564:	0007ffff 	.word	0x0007ffff

08006568 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8006568:	b480      	push	{r7}
 800656a:	b083      	sub	sp, #12
 800656c:	af00      	add	r7, sp, #0
 800656e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	689b      	ldr	r3, [r3, #8]
 8006574:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8006578:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800657c:	687a      	ldr	r2, [r7, #4]
 800657e:	6093      	str	r3, [r2, #8]
}
 8006580:	bf00      	nop
 8006582:	370c      	adds	r7, #12
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 800658c:	b480      	push	{r7}
 800658e:	b083      	sub	sp, #12
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	689b      	ldr	r3, [r3, #8]
 8006598:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800659c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80065a0:	d101      	bne.n	80065a6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80065a2:	2301      	movs	r3, #1
 80065a4:	e000      	b.n	80065a8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80065a6:	2300      	movs	r3, #0
}
 80065a8:	4618      	mov	r0, r3
 80065aa:	370c      	adds	r7, #12
 80065ac:	46bd      	mov	sp, r7
 80065ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b2:	4770      	bx	lr

080065b4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	689b      	ldr	r3, [r3, #8]
 80065c0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80065c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80065c8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80065d0:	bf00      	nop
 80065d2:	370c      	adds	r7, #12
 80065d4:	46bd      	mov	sp, r7
 80065d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065da:	4770      	bx	lr

080065dc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	689b      	ldr	r3, [r3, #8]
 80065e8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80065ec:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80065f0:	d101      	bne.n	80065f6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80065f2:	2301      	movs	r3, #1
 80065f4:	e000      	b.n	80065f8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80065f6:	2300      	movs	r3, #0
}
 80065f8:	4618      	mov	r0, r3
 80065fa:	370c      	adds	r7, #12
 80065fc:	46bd      	mov	sp, r7
 80065fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006602:	4770      	bx	lr

08006604 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8006604:	b480      	push	{r7}
 8006606:	b083      	sub	sp, #12
 8006608:	af00      	add	r7, sp, #0
 800660a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	689b      	ldr	r3, [r3, #8]
 8006610:	f003 0301 	and.w	r3, r3, #1
 8006614:	2b01      	cmp	r3, #1
 8006616:	d101      	bne.n	800661c <LL_ADC_IsEnabled+0x18>
 8006618:	2301      	movs	r3, #1
 800661a:	e000      	b.n	800661e <LL_ADC_IsEnabled+0x1a>
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	370c      	adds	r7, #12
 8006622:	46bd      	mov	sp, r7
 8006624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006628:	4770      	bx	lr

0800662a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800662a:	b480      	push	{r7}
 800662c:	b083      	sub	sp, #12
 800662e:	af00      	add	r7, sp, #0
 8006630:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	689b      	ldr	r3, [r3, #8]
 8006636:	f003 0304 	and.w	r3, r3, #4
 800663a:	2b04      	cmp	r3, #4
 800663c:	d101      	bne.n	8006642 <LL_ADC_REG_IsConversionOngoing+0x18>
 800663e:	2301      	movs	r3, #1
 8006640:	e000      	b.n	8006644 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8006642:	2300      	movs	r3, #0
}
 8006644:	4618      	mov	r0, r3
 8006646:	370c      	adds	r7, #12
 8006648:	46bd      	mov	sp, r7
 800664a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664e:	4770      	bx	lr

08006650 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8006650:	b480      	push	{r7}
 8006652:	b083      	sub	sp, #12
 8006654:	af00      	add	r7, sp, #0
 8006656:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	689b      	ldr	r3, [r3, #8]
 800665c:	f003 0308 	and.w	r3, r3, #8
 8006660:	2b08      	cmp	r3, #8
 8006662:	d101      	bne.n	8006668 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8006664:	2301      	movs	r3, #1
 8006666:	e000      	b.n	800666a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8006668:	2300      	movs	r3, #0
}
 800666a:	4618      	mov	r0, r3
 800666c:	370c      	adds	r7, #12
 800666e:	46bd      	mov	sp, r7
 8006670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006674:	4770      	bx	lr
	...

08006678 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006680:	2300      	movs	r3, #0
 8006682:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8006684:	2300      	movs	r3, #0
 8006686:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d101      	bne.n	8006692 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800668e:	2301      	movs	r3, #1
 8006690:	e12c      	b.n	80068ec <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	691b      	ldr	r3, [r3, #16]
 8006696:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800669c:	2b00      	cmp	r3, #0
 800669e:	d109      	bne.n	80066b4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7fe fa21 	bl	8004ae8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80066b4:	687b      	ldr	r3, [r7, #4]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	4618      	mov	r0, r3
 80066ba:	f7ff ff67 	bl	800658c <LL_ADC_IsDeepPowerDownEnabled>
 80066be:	4603      	mov	r3, r0
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d004      	beq.n	80066ce <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f7ff ff4d 	bl	8006568 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	4618      	mov	r0, r3
 80066d4:	f7ff ff82 	bl	80065dc <LL_ADC_IsInternalRegulatorEnabled>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d115      	bne.n	800670a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff ff66 	bl	80065b4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80066e8:	4b82      	ldr	r3, [pc, #520]	; (80068f4 <HAL_ADC_Init+0x27c>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	099b      	lsrs	r3, r3, #6
 80066ee:	4a82      	ldr	r2, [pc, #520]	; (80068f8 <HAL_ADC_Init+0x280>)
 80066f0:	fba2 2303 	umull	r2, r3, r2, r3
 80066f4:	099b      	lsrs	r3, r3, #6
 80066f6:	3301      	adds	r3, #1
 80066f8:	005b      	lsls	r3, r3, #1
 80066fa:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80066fc:	e002      	b.n	8006704 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	3b01      	subs	r3, #1
 8006702:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2b00      	cmp	r3, #0
 8006708:	d1f9      	bne.n	80066fe <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800670a:	687b      	ldr	r3, [r7, #4]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	4618      	mov	r0, r3
 8006710:	f7ff ff64 	bl	80065dc <LL_ADC_IsInternalRegulatorEnabled>
 8006714:	4603      	mov	r3, r0
 8006716:	2b00      	cmp	r3, #0
 8006718:	d10d      	bne.n	8006736 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800671e:	f043 0210 	orr.w	r2, r3, #16
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800672a:	f043 0201 	orr.w	r2, r3, #1
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8006732:	2301      	movs	r3, #1
 8006734:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f7ff ff75 	bl	800662a <LL_ADC_REG_IsConversionOngoing>
 8006740:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006746:	f003 0310 	and.w	r3, r3, #16
 800674a:	2b00      	cmp	r3, #0
 800674c:	f040 80c5 	bne.w	80068da <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8006750:	697b      	ldr	r3, [r7, #20]
 8006752:	2b00      	cmp	r3, #0
 8006754:	f040 80c1 	bne.w	80068da <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800675c:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8006760:	f043 0202 	orr.w	r2, r3, #2
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4618      	mov	r0, r3
 800676e:	f7ff ff49 	bl	8006604 <LL_ADC_IsEnabled>
 8006772:	4603      	mov	r3, r0
 8006774:	2b00      	cmp	r3, #0
 8006776:	d10b      	bne.n	8006790 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8006778:	4860      	ldr	r0, [pc, #384]	; (80068fc <HAL_ADC_Init+0x284>)
 800677a:	f7ff ff43 	bl	8006604 <LL_ADC_IsEnabled>
 800677e:	4603      	mov	r3, r0
 8006780:	2b00      	cmp	r3, #0
 8006782:	d105      	bne.n	8006790 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	685b      	ldr	r3, [r3, #4]
 8006788:	4619      	mov	r1, r3
 800678a:	485d      	ldr	r0, [pc, #372]	; (8006900 <HAL_ADC_Init+0x288>)
 800678c:	f7ff fde8 	bl	8006360 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	7e5b      	ldrb	r3, [r3, #25]
 8006794:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800679a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80067a0:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80067a6:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067ae:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80067b0:	4313      	orrs	r3, r2
 80067b2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80067ba:	2b01      	cmp	r3, #1
 80067bc:	d106      	bne.n	80067cc <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067c2:	3b01      	subs	r3, #1
 80067c4:	045b      	lsls	r3, r3, #17
 80067c6:	69ba      	ldr	r2, [r7, #24]
 80067c8:	4313      	orrs	r3, r2
 80067ca:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d009      	beq.n	80067e8 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80067d8:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067e0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80067e2:	69ba      	ldr	r2, [r7, #24]
 80067e4:	4313      	orrs	r3, r2
 80067e6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	4b45      	ldr	r3, [pc, #276]	; (8006904 <HAL_ADC_Init+0x28c>)
 80067f0:	4013      	ands	r3, r2
 80067f2:	687a      	ldr	r2, [r7, #4]
 80067f4:	6812      	ldr	r2, [r2, #0]
 80067f6:	69b9      	ldr	r1, [r7, #24]
 80067f8:	430b      	orrs	r3, r1
 80067fa:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	4618      	mov	r0, r3
 8006802:	f7ff ff12 	bl	800662a <LL_ADC_REG_IsConversionOngoing>
 8006806:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	4618      	mov	r0, r3
 800680e:	f7ff ff1f 	bl	8006650 <LL_ADC_INJ_IsConversionOngoing>
 8006812:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8006814:	693b      	ldr	r3, [r7, #16]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d13d      	bne.n	8006896 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d13a      	bne.n	8006896 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8006824:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800682c:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800682e:	4313      	orrs	r3, r2
 8006830:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	68db      	ldr	r3, [r3, #12]
 8006838:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800683c:	f023 0302 	bic.w	r3, r3, #2
 8006840:	687a      	ldr	r2, [r7, #4]
 8006842:	6812      	ldr	r2, [r2, #0]
 8006844:	69b9      	ldr	r1, [r7, #24]
 8006846:	430b      	orrs	r3, r1
 8006848:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8006850:	2b01      	cmp	r3, #1
 8006852:	d118      	bne.n	8006886 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	691b      	ldr	r3, [r3, #16]
 800685a:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800685e:	f023 0304 	bic.w	r3, r3, #4
 8006862:	687a      	ldr	r2, [r7, #4]
 8006864:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800686a:	4311      	orrs	r1, r2
 800686c:	687a      	ldr	r2, [r7, #4]
 800686e:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8006870:	4311      	orrs	r1, r2
 8006872:	687a      	ldr	r2, [r7, #4]
 8006874:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8006876:	430a      	orrs	r2, r1
 8006878:	431a      	orrs	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	f042 0201 	orr.w	r2, r2, #1
 8006882:	611a      	str	r2, [r3, #16]
 8006884:	e007      	b.n	8006896 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	691a      	ldr	r2, [r3, #16]
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	f022 0201 	bic.w	r2, r2, #1
 8006894:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	691b      	ldr	r3, [r3, #16]
 800689a:	2b01      	cmp	r3, #1
 800689c:	d10c      	bne.n	80068b8 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068a4:	f023 010f 	bic.w	r1, r3, #15
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	69db      	ldr	r3, [r3, #28]
 80068ac:	1e5a      	subs	r2, r3, #1
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	430a      	orrs	r2, r1
 80068b4:	631a      	str	r2, [r3, #48]	; 0x30
 80068b6:	e007      	b.n	80068c8 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	681b      	ldr	r3, [r3, #0]
 80068bc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	f022 020f 	bic.w	r2, r2, #15
 80068c6:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068cc:	f023 0303 	bic.w	r3, r3, #3
 80068d0:	f043 0201 	orr.w	r2, r3, #1
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	655a      	str	r2, [r3, #84]	; 0x54
 80068d8:	e007      	b.n	80068ea <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80068de:	f043 0210 	orr.w	r2, r3, #16
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 80068e6:	2301      	movs	r3, #1
 80068e8:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80068ea:	7ffb      	ldrb	r3, [r7, #31]
}
 80068ec:	4618      	mov	r0, r3
 80068ee:	3720      	adds	r7, #32
 80068f0:	46bd      	mov	sp, r7
 80068f2:	bd80      	pop	{r7, pc}
 80068f4:	20000048 	.word	0x20000048
 80068f8:	053e2d63 	.word	0x053e2d63
 80068fc:	50040000 	.word	0x50040000
 8006900:	50040300 	.word	0x50040300
 8006904:	fff0c007 	.word	0xfff0c007

08006908 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	b0b6      	sub	sp, #216	; 0xd8
 800690c:	af00      	add	r7, sp, #0
 800690e:	6078      	str	r0, [r7, #4]
 8006910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8006912:	2300      	movs	r3, #0
 8006914:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8006918:	2300      	movs	r3, #0
 800691a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8006922:	2b01      	cmp	r3, #1
 8006924:	d101      	bne.n	800692a <HAL_ADC_ConfigChannel+0x22>
 8006926:	2302      	movs	r3, #2
 8006928:	e3b9      	b.n	800709e <HAL_ADC_ConfigChannel+0x796>
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	2201      	movs	r2, #1
 800692e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4618      	mov	r0, r3
 8006938:	f7ff fe77 	bl	800662a <LL_ADC_REG_IsConversionOngoing>
 800693c:	4603      	mov	r3, r0
 800693e:	2b00      	cmp	r3, #0
 8006940:	f040 839e 	bne.w	8007080 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	2b05      	cmp	r3, #5
 800694a:	d824      	bhi.n	8006996 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	3b02      	subs	r3, #2
 8006952:	2b03      	cmp	r3, #3
 8006954:	d81b      	bhi.n	800698e <HAL_ADC_ConfigChannel+0x86>
 8006956:	a201      	add	r2, pc, #4	; (adr r2, 800695c <HAL_ADC_ConfigChannel+0x54>)
 8006958:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800695c:	0800696d 	.word	0x0800696d
 8006960:	08006975 	.word	0x08006975
 8006964:	0800697d 	.word	0x0800697d
 8006968:	08006985 	.word	0x08006985
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	220c      	movs	r2, #12
 8006970:	605a      	str	r2, [r3, #4]
          break;
 8006972:	e011      	b.n	8006998 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	2212      	movs	r2, #18
 8006978:	605a      	str	r2, [r3, #4]
          break;
 800697a:	e00d      	b.n	8006998 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	2218      	movs	r2, #24
 8006980:	605a      	str	r2, [r3, #4]
          break;
 8006982:	e009      	b.n	8006998 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	f44f 7280 	mov.w	r2, #256	; 0x100
 800698a:	605a      	str	r2, [r3, #4]
          break;
 800698c:	e004      	b.n	8006998 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 800698e:	683b      	ldr	r3, [r7, #0]
 8006990:	2206      	movs	r2, #6
 8006992:	605a      	str	r2, [r3, #4]
          break;
 8006994:	e000      	b.n	8006998 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8006996:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	6818      	ldr	r0, [r3, #0]
 800699c:	683b      	ldr	r3, [r7, #0]
 800699e:	6859      	ldr	r1, [r3, #4]
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	461a      	mov	r2, r3
 80069a6:	f7ff fd64 	bl	8006472 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f7ff fe3b 	bl	800662a <LL_ADC_REG_IsConversionOngoing>
 80069b4:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	4618      	mov	r0, r3
 80069be:	f7ff fe47 	bl	8006650 <LL_ADC_INJ_IsConversionOngoing>
 80069c2:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80069c6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f040 81a6 	bne.w	8006d1c <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80069d0:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	f040 81a1 	bne.w	8006d1c <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6818      	ldr	r0, [r3, #0]
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	6819      	ldr	r1, [r3, #0]
 80069e2:	683b      	ldr	r3, [r7, #0]
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	461a      	mov	r2, r3
 80069e8:	f7ff fd6f 	bl	80064ca <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80069ec:	683b      	ldr	r3, [r7, #0]
 80069ee:	695a      	ldr	r2, [r3, #20]
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	68db      	ldr	r3, [r3, #12]
 80069f6:	08db      	lsrs	r3, r3, #3
 80069f8:	f003 0303 	and.w	r3, r3, #3
 80069fc:	005b      	lsls	r3, r3, #1
 80069fe:	fa02 f303 	lsl.w	r3, r2, r3
 8006a02:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	691b      	ldr	r3, [r3, #16]
 8006a0a:	2b04      	cmp	r3, #4
 8006a0c:	d00a      	beq.n	8006a24 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6818      	ldr	r0, [r3, #0]
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	6919      	ldr	r1, [r3, #16]
 8006a16:	683b      	ldr	r3, [r7, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006a1e:	f7ff fcd3 	bl	80063c8 <LL_ADC_SetOffset>
 8006a22:	e17b      	b.n	8006d1c <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2100      	movs	r1, #0
 8006a2a:	4618      	mov	r0, r3
 8006a2c:	f7ff fcf0 	bl	8006410 <LL_ADC_GetOffsetChannel>
 8006a30:	4603      	mov	r3, r0
 8006a32:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d10a      	bne.n	8006a50 <HAL_ADC_ConfigChannel+0x148>
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	2100      	movs	r1, #0
 8006a40:	4618      	mov	r0, r3
 8006a42:	f7ff fce5 	bl	8006410 <LL_ADC_GetOffsetChannel>
 8006a46:	4603      	mov	r3, r0
 8006a48:	0e9b      	lsrs	r3, r3, #26
 8006a4a:	f003 021f 	and.w	r2, r3, #31
 8006a4e:	e01e      	b.n	8006a8e <HAL_ADC_ConfigChannel+0x186>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	2100      	movs	r1, #0
 8006a56:	4618      	mov	r0, r3
 8006a58:	f7ff fcda 	bl	8006410 <LL_ADC_GetOffsetChannel>
 8006a5c:	4603      	mov	r3, r0
 8006a5e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006a62:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8006a66:	fa93 f3a3 	rbit	r3, r3
 8006a6a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8006a6e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8006a72:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8006a76:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d101      	bne.n	8006a82 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8006a7e:	2320      	movs	r3, #32
 8006a80:	e004      	b.n	8006a8c <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8006a82:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8006a86:	fab3 f383 	clz	r3, r3
 8006a8a:	b2db      	uxtb	r3, r3
 8006a8c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d105      	bne.n	8006aa6 <HAL_ADC_ConfigChannel+0x19e>
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	0e9b      	lsrs	r3, r3, #26
 8006aa0:	f003 031f 	and.w	r3, r3, #31
 8006aa4:	e018      	b.n	8006ad8 <HAL_ADC_ConfigChannel+0x1d0>
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006aae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8006ab2:	fa93 f3a3 	rbit	r3, r3
 8006ab6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8006aba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8006abe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8006ac2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d101      	bne.n	8006ace <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8006aca:	2320      	movs	r3, #32
 8006acc:	e004      	b.n	8006ad8 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8006ace:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8006ad2:	fab3 f383 	clz	r3, r3
 8006ad6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8006ad8:	429a      	cmp	r2, r3
 8006ada:	d106      	bne.n	8006aea <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	2200      	movs	r2, #0
 8006ae2:	2100      	movs	r1, #0
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	f7ff fca9 	bl	800643c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	2101      	movs	r1, #1
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7ff fc8d 	bl	8006410 <LL_ADC_GetOffsetChannel>
 8006af6:	4603      	mov	r3, r0
 8006af8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10a      	bne.n	8006b16 <HAL_ADC_ConfigChannel+0x20e>
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2101      	movs	r1, #1
 8006b06:	4618      	mov	r0, r3
 8006b08:	f7ff fc82 	bl	8006410 <LL_ADC_GetOffsetChannel>
 8006b0c:	4603      	mov	r3, r0
 8006b0e:	0e9b      	lsrs	r3, r3, #26
 8006b10:	f003 021f 	and.w	r2, r3, #31
 8006b14:	e01e      	b.n	8006b54 <HAL_ADC_ConfigChannel+0x24c>
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2101      	movs	r1, #1
 8006b1c:	4618      	mov	r0, r3
 8006b1e:	f7ff fc77 	bl	8006410 <LL_ADC_GetOffsetChannel>
 8006b22:	4603      	mov	r3, r0
 8006b24:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b28:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8006b2c:	fa93 f3a3 	rbit	r3, r3
 8006b30:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8006b34:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006b38:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8006b3c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d101      	bne.n	8006b48 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8006b44:	2320      	movs	r3, #32
 8006b46:	e004      	b.n	8006b52 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8006b48:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8006b4c:	fab3 f383 	clz	r3, r3
 8006b50:	b2db      	uxtb	r3, r3
 8006b52:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006b54:	683b      	ldr	r3, [r7, #0]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d105      	bne.n	8006b6c <HAL_ADC_ConfigChannel+0x264>
 8006b60:	683b      	ldr	r3, [r7, #0]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	0e9b      	lsrs	r3, r3, #26
 8006b66:	f003 031f 	and.w	r3, r3, #31
 8006b6a:	e018      	b.n	8006b9e <HAL_ADC_ConfigChannel+0x296>
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006b74:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006b78:	fa93 f3a3 	rbit	r3, r3
 8006b7c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8006b80:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8006b84:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8006b88:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	d101      	bne.n	8006b94 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8006b90:	2320      	movs	r3, #32
 8006b92:	e004      	b.n	8006b9e <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8006b94:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006b98:	fab3 f383 	clz	r3, r3
 8006b9c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d106      	bne.n	8006bb0 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	2200      	movs	r2, #0
 8006ba8:	2101      	movs	r1, #1
 8006baa:	4618      	mov	r0, r3
 8006bac:	f7ff fc46 	bl	800643c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	681b      	ldr	r3, [r3, #0]
 8006bb4:	2102      	movs	r1, #2
 8006bb6:	4618      	mov	r0, r3
 8006bb8:	f7ff fc2a 	bl	8006410 <LL_ADC_GetOffsetChannel>
 8006bbc:	4603      	mov	r3, r0
 8006bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d10a      	bne.n	8006bdc <HAL_ADC_ConfigChannel+0x2d4>
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2102      	movs	r1, #2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f7ff fc1f 	bl	8006410 <LL_ADC_GetOffsetChannel>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	0e9b      	lsrs	r3, r3, #26
 8006bd6:	f003 021f 	and.w	r2, r3, #31
 8006bda:	e01e      	b.n	8006c1a <HAL_ADC_ConfigChannel+0x312>
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	2102      	movs	r1, #2
 8006be2:	4618      	mov	r0, r3
 8006be4:	f7ff fc14 	bl	8006410 <LL_ADC_GetOffsetChannel>
 8006be8:	4603      	mov	r3, r0
 8006bea:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006bee:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006bf2:	fa93 f3a3 	rbit	r3, r3
 8006bf6:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8006bfa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006bfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8006c02:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d101      	bne.n	8006c0e <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8006c0a:	2320      	movs	r3, #32
 8006c0c:	e004      	b.n	8006c18 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8006c0e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8006c12:	fab3 f383 	clz	r3, r3
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006c1a:	683b      	ldr	r3, [r7, #0]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d105      	bne.n	8006c32 <HAL_ADC_ConfigChannel+0x32a>
 8006c26:	683b      	ldr	r3, [r7, #0]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	0e9b      	lsrs	r3, r3, #26
 8006c2c:	f003 031f 	and.w	r3, r3, #31
 8006c30:	e016      	b.n	8006c60 <HAL_ADC_ConfigChannel+0x358>
 8006c32:	683b      	ldr	r3, [r7, #0]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006c3a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006c3e:	fa93 f3a3 	rbit	r3, r3
 8006c42:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8006c44:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8006c46:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8006c4a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d101      	bne.n	8006c56 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8006c52:	2320      	movs	r3, #32
 8006c54:	e004      	b.n	8006c60 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8006c56:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006c5a:	fab3 f383 	clz	r3, r3
 8006c5e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d106      	bne.n	8006c72 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f7ff fbe5 	bl	800643c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	2103      	movs	r1, #3
 8006c78:	4618      	mov	r0, r3
 8006c7a:	f7ff fbc9 	bl	8006410 <LL_ADC_GetOffsetChannel>
 8006c7e:	4603      	mov	r3, r0
 8006c80:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d10a      	bne.n	8006c9e <HAL_ADC_ConfigChannel+0x396>
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	2103      	movs	r1, #3
 8006c8e:	4618      	mov	r0, r3
 8006c90:	f7ff fbbe 	bl	8006410 <LL_ADC_GetOffsetChannel>
 8006c94:	4603      	mov	r3, r0
 8006c96:	0e9b      	lsrs	r3, r3, #26
 8006c98:	f003 021f 	and.w	r2, r3, #31
 8006c9c:	e017      	b.n	8006cce <HAL_ADC_ConfigChannel+0x3c6>
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	2103      	movs	r1, #3
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	f7ff fbb3 	bl	8006410 <LL_ADC_GetOffsetChannel>
 8006caa:	4603      	mov	r3, r0
 8006cac:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cae:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006cb0:	fa93 f3a3 	rbit	r3, r3
 8006cb4:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8006cb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cb8:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8006cba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d101      	bne.n	8006cc4 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8006cc0:	2320      	movs	r3, #32
 8006cc2:	e003      	b.n	8006ccc <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8006cc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cc6:	fab3 f383 	clz	r3, r3
 8006cca:	b2db      	uxtb	r3, r3
 8006ccc:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d105      	bne.n	8006ce6 <HAL_ADC_ConfigChannel+0x3de>
 8006cda:	683b      	ldr	r3, [r7, #0]
 8006cdc:	681b      	ldr	r3, [r3, #0]
 8006cde:	0e9b      	lsrs	r3, r3, #26
 8006ce0:	f003 031f 	and.w	r3, r3, #31
 8006ce4:	e011      	b.n	8006d0a <HAL_ADC_ConfigChannel+0x402>
 8006ce6:	683b      	ldr	r3, [r7, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006cec:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006cee:	fa93 f3a3 	rbit	r3, r3
 8006cf2:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8006cf4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006cf6:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8006cf8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d101      	bne.n	8006d02 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8006cfe:	2320      	movs	r3, #32
 8006d00:	e003      	b.n	8006d0a <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8006d02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d04:	fab3 f383 	clz	r3, r3
 8006d08:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8006d0a:	429a      	cmp	r2, r3
 8006d0c:	d106      	bne.n	8006d1c <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	2200      	movs	r2, #0
 8006d14:	2103      	movs	r1, #3
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7ff fb90 	bl	800643c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	4618      	mov	r0, r3
 8006d22:	f7ff fc6f 	bl	8006604 <LL_ADC_IsEnabled>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	f040 813f 	bne.w	8006fac <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	683b      	ldr	r3, [r7, #0]
 8006d34:	6819      	ldr	r1, [r3, #0]
 8006d36:	683b      	ldr	r3, [r7, #0]
 8006d38:	68db      	ldr	r3, [r3, #12]
 8006d3a:	461a      	mov	r2, r3
 8006d3c:	f7ff fbf0 	bl	8006520 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8006d40:	683b      	ldr	r3, [r7, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	4a8e      	ldr	r2, [pc, #568]	; (8006f80 <HAL_ADC_ConfigChannel+0x678>)
 8006d46:	4293      	cmp	r3, r2
 8006d48:	f040 8130 	bne.w	8006fac <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006d50:	683b      	ldr	r3, [r7, #0]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006d58:	2b00      	cmp	r3, #0
 8006d5a:	d10b      	bne.n	8006d74 <HAL_ADC_ConfigChannel+0x46c>
 8006d5c:	683b      	ldr	r3, [r7, #0]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	0e9b      	lsrs	r3, r3, #26
 8006d62:	3301      	adds	r3, #1
 8006d64:	f003 031f 	and.w	r3, r3, #31
 8006d68:	2b09      	cmp	r3, #9
 8006d6a:	bf94      	ite	ls
 8006d6c:	2301      	movls	r3, #1
 8006d6e:	2300      	movhi	r3, #0
 8006d70:	b2db      	uxtb	r3, r3
 8006d72:	e019      	b.n	8006da8 <HAL_ADC_ConfigChannel+0x4a0>
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006d7a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006d7c:	fa93 f3a3 	rbit	r3, r3
 8006d80:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8006d82:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006d84:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8006d86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d101      	bne.n	8006d90 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8006d8c:	2320      	movs	r3, #32
 8006d8e:	e003      	b.n	8006d98 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8006d90:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006d92:	fab3 f383 	clz	r3, r3
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	3301      	adds	r3, #1
 8006d9a:	f003 031f 	and.w	r3, r3, #31
 8006d9e:	2b09      	cmp	r3, #9
 8006da0:	bf94      	ite	ls
 8006da2:	2301      	movls	r3, #1
 8006da4:	2300      	movhi	r3, #0
 8006da6:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d079      	beq.n	8006ea0 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d107      	bne.n	8006dc8 <HAL_ADC_ConfigChannel+0x4c0>
 8006db8:	683b      	ldr	r3, [r7, #0]
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	0e9b      	lsrs	r3, r3, #26
 8006dbe:	3301      	adds	r3, #1
 8006dc0:	069b      	lsls	r3, r3, #26
 8006dc2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006dc6:	e015      	b.n	8006df4 <HAL_ADC_ConfigChannel+0x4ec>
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006dce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006dd0:	fa93 f3a3 	rbit	r3, r3
 8006dd4:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8006dd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dd8:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8006dda:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d101      	bne.n	8006de4 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8006de0:	2320      	movs	r3, #32
 8006de2:	e003      	b.n	8006dec <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8006de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006de6:	fab3 f383 	clz	r3, r3
 8006dea:	b2db      	uxtb	r3, r3
 8006dec:	3301      	adds	r3, #1
 8006dee:	069b      	lsls	r3, r3, #26
 8006df0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006df4:	683b      	ldr	r3, [r7, #0]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006dfc:	2b00      	cmp	r3, #0
 8006dfe:	d109      	bne.n	8006e14 <HAL_ADC_ConfigChannel+0x50c>
 8006e00:	683b      	ldr	r3, [r7, #0]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	0e9b      	lsrs	r3, r3, #26
 8006e06:	3301      	adds	r3, #1
 8006e08:	f003 031f 	and.w	r3, r3, #31
 8006e0c:	2101      	movs	r1, #1
 8006e0e:	fa01 f303 	lsl.w	r3, r1, r3
 8006e12:	e017      	b.n	8006e44 <HAL_ADC_ConfigChannel+0x53c>
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e1a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006e1c:	fa93 f3a3 	rbit	r3, r3
 8006e20:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8006e22:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006e24:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006e26:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d101      	bne.n	8006e30 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8006e2c:	2320      	movs	r3, #32
 8006e2e:	e003      	b.n	8006e38 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8006e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e32:	fab3 f383 	clz	r3, r3
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	3301      	adds	r3, #1
 8006e3a:	f003 031f 	and.w	r3, r3, #31
 8006e3e:	2101      	movs	r1, #1
 8006e40:	fa01 f303 	lsl.w	r3, r1, r3
 8006e44:	ea42 0103 	orr.w	r1, r2, r3
 8006e48:	683b      	ldr	r3, [r7, #0]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d10a      	bne.n	8006e6a <HAL_ADC_ConfigChannel+0x562>
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	0e9b      	lsrs	r3, r3, #26
 8006e5a:	3301      	adds	r3, #1
 8006e5c:	f003 021f 	and.w	r2, r3, #31
 8006e60:	4613      	mov	r3, r2
 8006e62:	005b      	lsls	r3, r3, #1
 8006e64:	4413      	add	r3, r2
 8006e66:	051b      	lsls	r3, r3, #20
 8006e68:	e018      	b.n	8006e9c <HAL_ADC_ConfigChannel+0x594>
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006e70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e72:	fa93 f3a3 	rbit	r3, r3
 8006e76:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006e78:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d101      	bne.n	8006e86 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8006e82:	2320      	movs	r3, #32
 8006e84:	e003      	b.n	8006e8e <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8006e86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006e88:	fab3 f383 	clz	r3, r3
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	3301      	adds	r3, #1
 8006e90:	f003 021f 	and.w	r2, r3, #31
 8006e94:	4613      	mov	r3, r2
 8006e96:	005b      	lsls	r3, r3, #1
 8006e98:	4413      	add	r3, r2
 8006e9a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006e9c:	430b      	orrs	r3, r1
 8006e9e:	e080      	b.n	8006fa2 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d107      	bne.n	8006ebc <HAL_ADC_ConfigChannel+0x5b4>
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	0e9b      	lsrs	r3, r3, #26
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	069b      	lsls	r3, r3, #26
 8006eb6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006eba:	e015      	b.n	8006ee8 <HAL_ADC_ConfigChannel+0x5e0>
 8006ebc:	683b      	ldr	r3, [r7, #0]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ec4:	fa93 f3a3 	rbit	r3, r3
 8006ec8:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8006ece:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d101      	bne.n	8006ed8 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8006ed4:	2320      	movs	r3, #32
 8006ed6:	e003      	b.n	8006ee0 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8006ed8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eda:	fab3 f383 	clz	r3, r3
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	069b      	lsls	r3, r3, #26
 8006ee4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d109      	bne.n	8006f08 <HAL_ADC_ConfigChannel+0x600>
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	0e9b      	lsrs	r3, r3, #26
 8006efa:	3301      	adds	r3, #1
 8006efc:	f003 031f 	and.w	r3, r3, #31
 8006f00:	2101      	movs	r1, #1
 8006f02:	fa01 f303 	lsl.w	r3, r1, r3
 8006f06:	e017      	b.n	8006f38 <HAL_ADC_ConfigChannel+0x630>
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f0e:	6a3b      	ldr	r3, [r7, #32]
 8006f10:	fa93 f3a3 	rbit	r3, r3
 8006f14:	61fb      	str	r3, [r7, #28]
  return result;
 8006f16:	69fb      	ldr	r3, [r7, #28]
 8006f18:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006f1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f1c:	2b00      	cmp	r3, #0
 8006f1e:	d101      	bne.n	8006f24 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8006f20:	2320      	movs	r3, #32
 8006f22:	e003      	b.n	8006f2c <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8006f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f26:	fab3 f383 	clz	r3, r3
 8006f2a:	b2db      	uxtb	r3, r3
 8006f2c:	3301      	adds	r3, #1
 8006f2e:	f003 031f 	and.w	r3, r3, #31
 8006f32:	2101      	movs	r1, #1
 8006f34:	fa01 f303 	lsl.w	r3, r1, r3
 8006f38:	ea42 0103 	orr.w	r1, r2, r3
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	681b      	ldr	r3, [r3, #0]
 8006f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d10d      	bne.n	8006f64 <HAL_ADC_ConfigChannel+0x65c>
 8006f48:	683b      	ldr	r3, [r7, #0]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	0e9b      	lsrs	r3, r3, #26
 8006f4e:	3301      	adds	r3, #1
 8006f50:	f003 021f 	and.w	r2, r3, #31
 8006f54:	4613      	mov	r3, r2
 8006f56:	005b      	lsls	r3, r3, #1
 8006f58:	4413      	add	r3, r2
 8006f5a:	3b1e      	subs	r3, #30
 8006f5c:	051b      	lsls	r3, r3, #20
 8006f5e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006f62:	e01d      	b.n	8006fa0 <HAL_ADC_ConfigChannel+0x698>
 8006f64:	683b      	ldr	r3, [r7, #0]
 8006f66:	681b      	ldr	r3, [r3, #0]
 8006f68:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006f6a:	697b      	ldr	r3, [r7, #20]
 8006f6c:	fa93 f3a3 	rbit	r3, r3
 8006f70:	613b      	str	r3, [r7, #16]
  return result;
 8006f72:	693b      	ldr	r3, [r7, #16]
 8006f74:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006f76:	69bb      	ldr	r3, [r7, #24]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d103      	bne.n	8006f84 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8006f7c:	2320      	movs	r3, #32
 8006f7e:	e005      	b.n	8006f8c <HAL_ADC_ConfigChannel+0x684>
 8006f80:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006f84:	69bb      	ldr	r3, [r7, #24]
 8006f86:	fab3 f383 	clz	r3, r3
 8006f8a:	b2db      	uxtb	r3, r3
 8006f8c:	3301      	adds	r3, #1
 8006f8e:	f003 021f 	and.w	r2, r3, #31
 8006f92:	4613      	mov	r3, r2
 8006f94:	005b      	lsls	r3, r3, #1
 8006f96:	4413      	add	r3, r2
 8006f98:	3b1e      	subs	r3, #30
 8006f9a:	051b      	lsls	r3, r3, #20
 8006f9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006fa0:	430b      	orrs	r3, r1
 8006fa2:	683a      	ldr	r2, [r7, #0]
 8006fa4:	6892      	ldr	r2, [r2, #8]
 8006fa6:	4619      	mov	r1, r3
 8006fa8:	f7ff fa8f 	bl	80064ca <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	681a      	ldr	r2, [r3, #0]
 8006fb0:	4b3d      	ldr	r3, [pc, #244]	; (80070a8 <HAL_ADC_ConfigChannel+0x7a0>)
 8006fb2:	4013      	ands	r3, r2
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d06c      	beq.n	8007092 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8006fb8:	483c      	ldr	r0, [pc, #240]	; (80070ac <HAL_ADC_ConfigChannel+0x7a4>)
 8006fba:	f7ff f9f7 	bl	80063ac <LL_ADC_GetCommonPathInternalCh>
 8006fbe:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4a3a      	ldr	r2, [pc, #232]	; (80070b0 <HAL_ADC_ConfigChannel+0x7a8>)
 8006fc8:	4293      	cmp	r3, r2
 8006fca:	d127      	bne.n	800701c <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8006fcc:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fd0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006fd4:	2b00      	cmp	r3, #0
 8006fd6:	d121      	bne.n	800701c <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4a35      	ldr	r2, [pc, #212]	; (80070b4 <HAL_ADC_ConfigChannel+0x7ac>)
 8006fde:	4293      	cmp	r3, r2
 8006fe0:	d157      	bne.n	8007092 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006fe2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006fe6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006fea:	4619      	mov	r1, r3
 8006fec:	482f      	ldr	r0, [pc, #188]	; (80070ac <HAL_ADC_ConfigChannel+0x7a4>)
 8006fee:	f7ff f9ca 	bl	8006386 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8006ff2:	4b31      	ldr	r3, [pc, #196]	; (80070b8 <HAL_ADC_ConfigChannel+0x7b0>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	099b      	lsrs	r3, r3, #6
 8006ff8:	4a30      	ldr	r2, [pc, #192]	; (80070bc <HAL_ADC_ConfigChannel+0x7b4>)
 8006ffa:	fba2 2303 	umull	r2, r3, r2, r3
 8006ffe:	099b      	lsrs	r3, r3, #6
 8007000:	1c5a      	adds	r2, r3, #1
 8007002:	4613      	mov	r3, r2
 8007004:	005b      	lsls	r3, r3, #1
 8007006:	4413      	add	r3, r2
 8007008:	009b      	lsls	r3, r3, #2
 800700a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800700c:	e002      	b.n	8007014 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	3b01      	subs	r3, #1
 8007012:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	2b00      	cmp	r3, #0
 8007018:	d1f9      	bne.n	800700e <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800701a:	e03a      	b.n	8007092 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800701c:	683b      	ldr	r3, [r7, #0]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	4a27      	ldr	r2, [pc, #156]	; (80070c0 <HAL_ADC_ConfigChannel+0x7b8>)
 8007022:	4293      	cmp	r3, r2
 8007024:	d113      	bne.n	800704e <HAL_ADC_ConfigChannel+0x746>
 8007026:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800702a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800702e:	2b00      	cmp	r3, #0
 8007030:	d10d      	bne.n	800704e <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	4a1f      	ldr	r2, [pc, #124]	; (80070b4 <HAL_ADC_ConfigChannel+0x7ac>)
 8007038:	4293      	cmp	r3, r2
 800703a:	d12a      	bne.n	8007092 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800703c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007040:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007044:	4619      	mov	r1, r3
 8007046:	4819      	ldr	r0, [pc, #100]	; (80070ac <HAL_ADC_ConfigChannel+0x7a4>)
 8007048:	f7ff f99d 	bl	8006386 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800704c:	e021      	b.n	8007092 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a1c      	ldr	r2, [pc, #112]	; (80070c4 <HAL_ADC_ConfigChannel+0x7bc>)
 8007054:	4293      	cmp	r3, r2
 8007056:	d11c      	bne.n	8007092 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8007058:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800705c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007060:	2b00      	cmp	r3, #0
 8007062:	d116      	bne.n	8007092 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a12      	ldr	r2, [pc, #72]	; (80070b4 <HAL_ADC_ConfigChannel+0x7ac>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d111      	bne.n	8007092 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800706e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8007072:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8007076:	4619      	mov	r1, r3
 8007078:	480c      	ldr	r0, [pc, #48]	; (80070ac <HAL_ADC_ConfigChannel+0x7a4>)
 800707a:	f7ff f984 	bl	8006386 <LL_ADC_SetCommonPathInternalCh>
 800707e:	e008      	b.n	8007092 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007084:	f043 0220 	orr.w	r2, r3, #32
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 800709a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800709e:	4618      	mov	r0, r3
 80070a0:	37d8      	adds	r7, #216	; 0xd8
 80070a2:	46bd      	mov	sp, r7
 80070a4:	bd80      	pop	{r7, pc}
 80070a6:	bf00      	nop
 80070a8:	80080000 	.word	0x80080000
 80070ac:	50040300 	.word	0x50040300
 80070b0:	c7520000 	.word	0xc7520000
 80070b4:	50040000 	.word	0x50040000
 80070b8:	20000048 	.word	0x20000048
 80070bc:	053e2d63 	.word	0x053e2d63
 80070c0:	cb840000 	.word	0xcb840000
 80070c4:	80000001 	.word	0x80000001

080070c8 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80070c8:	b580      	push	{r7, lr}
 80070ca:	b084      	sub	sp, #16
 80070cc:	af00      	add	r7, sp, #0
 80070ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d101      	bne.n	80070da <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80070d6:	2301      	movs	r3, #1
 80070d8:	e0ed      	b.n	80072b6 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80070e0:	b2db      	uxtb	r3, r3
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d102      	bne.n	80070ec <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80070e6:	6878      	ldr	r0, [r7, #4]
 80070e8:	f7fd fd62 	bl	8004bb0 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	681a      	ldr	r2, [r3, #0]
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f042 0201 	orr.w	r2, r2, #1
 80070fa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80070fc:	f7ff f8f4 	bl	80062e8 <HAL_GetTick>
 8007100:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8007102:	e012      	b.n	800712a <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007104:	f7ff f8f0 	bl	80062e8 <HAL_GetTick>
 8007108:	4602      	mov	r2, r0
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	1ad3      	subs	r3, r2, r3
 800710e:	2b0a      	cmp	r3, #10
 8007110:	d90b      	bls.n	800712a <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007116:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	2205      	movs	r2, #5
 8007122:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e0c5      	b.n	80072b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	681b      	ldr	r3, [r3, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	f003 0301 	and.w	r3, r3, #1
 8007134:	2b00      	cmp	r3, #0
 8007136:	d0e5      	beq.n	8007104 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	681a      	ldr	r2, [r3, #0]
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f022 0202 	bic.w	r2, r2, #2
 8007146:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8007148:	f7ff f8ce 	bl	80062e8 <HAL_GetTick>
 800714c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800714e:	e012      	b.n	8007176 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007150:	f7ff f8ca 	bl	80062e8 <HAL_GetTick>
 8007154:	4602      	mov	r2, r0
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	1ad3      	subs	r3, r2, r3
 800715a:	2b0a      	cmp	r3, #10
 800715c:	d90b      	bls.n	8007176 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007162:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2205      	movs	r2, #5
 800716e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8007172:	2301      	movs	r3, #1
 8007174:	e09f      	b.n	80072b6 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	685b      	ldr	r3, [r3, #4]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d1e5      	bne.n	8007150 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	7e1b      	ldrb	r3, [r3, #24]
 8007188:	2b01      	cmp	r3, #1
 800718a:	d108      	bne.n	800719e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	681b      	ldr	r3, [r3, #0]
 8007190:	681a      	ldr	r2, [r3, #0]
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800719a:	601a      	str	r2, [r3, #0]
 800719c:	e007      	b.n	80071ae <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	681b      	ldr	r3, [r3, #0]
 80071a2:	681a      	ldr	r2, [r3, #0]
 80071a4:	687b      	ldr	r3, [r7, #4]
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80071ac:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	7e5b      	ldrb	r3, [r3, #25]
 80071b2:	2b01      	cmp	r3, #1
 80071b4:	d108      	bne.n	80071c8 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	681a      	ldr	r2, [r3, #0]
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	681b      	ldr	r3, [r3, #0]
 80071c0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80071c4:	601a      	str	r2, [r3, #0]
 80071c6:	e007      	b.n	80071d8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	681a      	ldr	r2, [r3, #0]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80071d6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	7e9b      	ldrb	r3, [r3, #26]
 80071dc:	2b01      	cmp	r3, #1
 80071de:	d108      	bne.n	80071f2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	681b      	ldr	r3, [r3, #0]
 80071e4:	681a      	ldr	r2, [r3, #0]
 80071e6:	687b      	ldr	r3, [r7, #4]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	f042 0220 	orr.w	r2, r2, #32
 80071ee:	601a      	str	r2, [r3, #0]
 80071f0:	e007      	b.n	8007202 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	681a      	ldr	r2, [r3, #0]
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	f022 0220 	bic.w	r2, r2, #32
 8007200:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	7edb      	ldrb	r3, [r3, #27]
 8007206:	2b01      	cmp	r3, #1
 8007208:	d108      	bne.n	800721c <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	681a      	ldr	r2, [r3, #0]
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	681b      	ldr	r3, [r3, #0]
 8007214:	f022 0210 	bic.w	r2, r2, #16
 8007218:	601a      	str	r2, [r3, #0]
 800721a:	e007      	b.n	800722c <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	681a      	ldr	r2, [r3, #0]
 8007222:	687b      	ldr	r3, [r7, #4]
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	f042 0210 	orr.w	r2, r2, #16
 800722a:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	7f1b      	ldrb	r3, [r3, #28]
 8007230:	2b01      	cmp	r3, #1
 8007232:	d108      	bne.n	8007246 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	681a      	ldr	r2, [r3, #0]
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	f042 0208 	orr.w	r2, r2, #8
 8007242:	601a      	str	r2, [r3, #0]
 8007244:	e007      	b.n	8007256 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f022 0208 	bic.w	r2, r2, #8
 8007254:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	7f5b      	ldrb	r3, [r3, #29]
 800725a:	2b01      	cmp	r3, #1
 800725c:	d108      	bne.n	8007270 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	681a      	ldr	r2, [r3, #0]
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f042 0204 	orr.w	r2, r2, #4
 800726c:	601a      	str	r2, [r3, #0]
 800726e:	e007      	b.n	8007280 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	681a      	ldr	r2, [r3, #0]
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	681b      	ldr	r3, [r3, #0]
 800727a:	f022 0204 	bic.w	r2, r2, #4
 800727e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	689a      	ldr	r2, [r3, #8]
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	68db      	ldr	r3, [r3, #12]
 8007288:	431a      	orrs	r2, r3
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	431a      	orrs	r2, r3
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	695b      	ldr	r3, [r3, #20]
 8007294:	ea42 0103 	orr.w	r1, r2, r3
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	685b      	ldr	r3, [r3, #4]
 800729c:	1e5a      	subs	r2, r3, #1
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	430a      	orrs	r2, r1
 80072a4:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	2200      	movs	r2, #0
 80072aa:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80072b4:	2300      	movs	r3, #0
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3710      	adds	r7, #16
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80072be:	b480      	push	{r7}
 80072c0:	b087      	sub	sp, #28
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80072d4:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80072d6:	7cfb      	ldrb	r3, [r7, #19]
 80072d8:	2b01      	cmp	r3, #1
 80072da:	d003      	beq.n	80072e4 <HAL_CAN_ConfigFilter+0x26>
 80072dc:	7cfb      	ldrb	r3, [r7, #19]
 80072de:	2b02      	cmp	r3, #2
 80072e0:	f040 80aa 	bne.w	8007438 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80072e4:	697b      	ldr	r3, [r7, #20]
 80072e6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80072ea:	f043 0201 	orr.w	r2, r3, #1
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	695b      	ldr	r3, [r3, #20]
 80072f8:	f003 031f 	and.w	r3, r3, #31
 80072fc:	2201      	movs	r2, #1
 80072fe:	fa02 f303 	lsl.w	r3, r2, r3
 8007302:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	43db      	mvns	r3, r3
 800730e:	401a      	ands	r2, r3
 8007310:	697b      	ldr	r3, [r7, #20]
 8007312:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8007316:	683b      	ldr	r3, [r7, #0]
 8007318:	69db      	ldr	r3, [r3, #28]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d123      	bne.n	8007366 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	43db      	mvns	r3, r3
 8007328:	401a      	ands	r2, r3
 800732a:	697b      	ldr	r3, [r7, #20]
 800732c:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	68db      	ldr	r3, [r3, #12]
 8007334:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	685b      	ldr	r3, [r3, #4]
 800733a:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800733c:	683a      	ldr	r2, [r7, #0]
 800733e:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8007340:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007342:	697b      	ldr	r3, [r7, #20]
 8007344:	3248      	adds	r2, #72	; 0x48
 8007346:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	689b      	ldr	r3, [r3, #8]
 800734e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8007350:	683b      	ldr	r3, [r7, #0]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8007356:	683b      	ldr	r3, [r7, #0]
 8007358:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 800735a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800735c:	6979      	ldr	r1, [r7, #20]
 800735e:	3348      	adds	r3, #72	; 0x48
 8007360:	00db      	lsls	r3, r3, #3
 8007362:	440b      	add	r3, r1
 8007364:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8007366:	683b      	ldr	r3, [r7, #0]
 8007368:	69db      	ldr	r3, [r3, #28]
 800736a:	2b01      	cmp	r3, #1
 800736c:	d122      	bne.n	80073b4 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800736e:	697b      	ldr	r3, [r7, #20]
 8007370:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	431a      	orrs	r2, r3
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8007384:	683b      	ldr	r3, [r7, #0]
 8007386:	685b      	ldr	r3, [r3, #4]
 8007388:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800738e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8007390:	697b      	ldr	r3, [r7, #20]
 8007392:	3248      	adds	r2, #72	; 0x48
 8007394:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	689b      	ldr	r3, [r3, #8]
 800739c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80073a8:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80073aa:	6979      	ldr	r1, [r7, #20]
 80073ac:	3348      	adds	r3, #72	; 0x48
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	440b      	add	r3, r1
 80073b2:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80073b4:	683b      	ldr	r3, [r7, #0]
 80073b6:	699b      	ldr	r3, [r3, #24]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d109      	bne.n	80073d0 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	43db      	mvns	r3, r3
 80073c6:	401a      	ands	r2, r3
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80073ce:	e007      	b.n	80073e0 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	431a      	orrs	r2, r3
 80073da:	697b      	ldr	r3, [r7, #20]
 80073dc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80073e0:	683b      	ldr	r3, [r7, #0]
 80073e2:	691b      	ldr	r3, [r3, #16]
 80073e4:	2b00      	cmp	r3, #0
 80073e6:	d109      	bne.n	80073fc <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80073e8:	697b      	ldr	r3, [r7, #20]
 80073ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	43db      	mvns	r3, r3
 80073f2:	401a      	ands	r2, r3
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80073fa:	e007      	b.n	800740c <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8007402:	68fb      	ldr	r3, [r7, #12]
 8007404:	431a      	orrs	r2, r3
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 800740c:	683b      	ldr	r3, [r7, #0]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	2b01      	cmp	r3, #1
 8007412:	d107      	bne.n	8007424 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8007414:	697b      	ldr	r3, [r7, #20]
 8007416:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	431a      	orrs	r2, r3
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8007424:	697b      	ldr	r3, [r7, #20]
 8007426:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800742a:	f023 0201 	bic.w	r2, r3, #1
 800742e:	697b      	ldr	r3, [r7, #20]
 8007430:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8007434:	2300      	movs	r3, #0
 8007436:	e006      	b.n	8007446 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800743c:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007444:	2301      	movs	r3, #1
  }
}
 8007446:	4618      	mov	r0, r3
 8007448:	371c      	adds	r7, #28
 800744a:	46bd      	mov	sp, r7
 800744c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007450:	4770      	bx	lr

08007452 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8007452:	b580      	push	{r7, lr}
 8007454:	b084      	sub	sp, #16
 8007456:	af00      	add	r7, sp, #0
 8007458:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007460:	b2db      	uxtb	r3, r3
 8007462:	2b01      	cmp	r3, #1
 8007464:	d12e      	bne.n	80074c4 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2202      	movs	r2, #2
 800746a:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	681b      	ldr	r3, [r3, #0]
 8007472:	681a      	ldr	r2, [r3, #0]
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	f022 0201 	bic.w	r2, r2, #1
 800747c:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800747e:	f7fe ff33 	bl	80062e8 <HAL_GetTick>
 8007482:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8007484:	e012      	b.n	80074ac <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8007486:	f7fe ff2f 	bl	80062e8 <HAL_GetTick>
 800748a:	4602      	mov	r2, r0
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	1ad3      	subs	r3, r2, r3
 8007490:	2b0a      	cmp	r3, #10
 8007492:	d90b      	bls.n	80074ac <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007498:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	2205      	movs	r2, #5
 80074a4:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80074a8:	2301      	movs	r3, #1
 80074aa:	e012      	b.n	80074d2 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	685b      	ldr	r3, [r3, #4]
 80074b2:	f003 0301 	and.w	r3, r3, #1
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d1e5      	bne.n	8007486 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	2200      	movs	r2, #0
 80074be:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80074c0:	2300      	movs	r3, #0
 80074c2:	e006      	b.n	80074d2 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074c8:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80074d0:	2301      	movs	r3, #1
  }
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3710      	adds	r7, #16
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}

080074da <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80074da:	b480      	push	{r7}
 80074dc:	b089      	sub	sp, #36	; 0x24
 80074de:	af00      	add	r7, sp, #0
 80074e0:	60f8      	str	r0, [r7, #12]
 80074e2:	60b9      	str	r1, [r7, #8]
 80074e4:	607a      	str	r2, [r7, #4]
 80074e6:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80074ee:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	689b      	ldr	r3, [r3, #8]
 80074f6:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80074f8:	7ffb      	ldrb	r3, [r7, #31]
 80074fa:	2b01      	cmp	r3, #1
 80074fc:	d003      	beq.n	8007506 <HAL_CAN_AddTxMessage+0x2c>
 80074fe:	7ffb      	ldrb	r3, [r7, #31]
 8007500:	2b02      	cmp	r3, #2
 8007502:	f040 80ad 	bne.w	8007660 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007506:	69bb      	ldr	r3, [r7, #24]
 8007508:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800750c:	2b00      	cmp	r3, #0
 800750e:	d10a      	bne.n	8007526 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007510:	69bb      	ldr	r3, [r7, #24]
 8007512:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8007516:	2b00      	cmp	r3, #0
 8007518:	d105      	bne.n	8007526 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 800751a:	69bb      	ldr	r3, [r7, #24]
 800751c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8007520:	2b00      	cmp	r3, #0
 8007522:	f000 8095 	beq.w	8007650 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	0e1b      	lsrs	r3, r3, #24
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8007530:	2201      	movs	r2, #1
 8007532:	697b      	ldr	r3, [r7, #20]
 8007534:	409a      	lsls	r2, r3
 8007536:	683b      	ldr	r3, [r7, #0]
 8007538:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	689b      	ldr	r3, [r3, #8]
 800753e:	2b00      	cmp	r3, #0
 8007540:	d10d      	bne.n	800755e <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8007542:	68bb      	ldr	r3, [r7, #8]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8007548:	68bb      	ldr	r3, [r7, #8]
 800754a:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800754c:	68f9      	ldr	r1, [r7, #12]
 800754e:	6809      	ldr	r1, [r1, #0]
 8007550:	431a      	orrs	r2, r3
 8007552:	697b      	ldr	r3, [r7, #20]
 8007554:	3318      	adds	r3, #24
 8007556:	011b      	lsls	r3, r3, #4
 8007558:	440b      	add	r3, r1
 800755a:	601a      	str	r2, [r3, #0]
 800755c:	e00f      	b.n	800757e <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800755e:	68bb      	ldr	r3, [r7, #8]
 8007560:	685b      	ldr	r3, [r3, #4]
 8007562:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007568:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 800756a:	68bb      	ldr	r3, [r7, #8]
 800756c:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800756e:	68f9      	ldr	r1, [r7, #12]
 8007570:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8007572:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	3318      	adds	r3, #24
 8007578:	011b      	lsls	r3, r3, #4
 800757a:	440b      	add	r3, r1
 800757c:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	6819      	ldr	r1, [r3, #0]
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	691a      	ldr	r2, [r3, #16]
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	3318      	adds	r3, #24
 800758a:	011b      	lsls	r3, r3, #4
 800758c:	440b      	add	r3, r1
 800758e:	3304      	adds	r3, #4
 8007590:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	7d1b      	ldrb	r3, [r3, #20]
 8007596:	2b01      	cmp	r3, #1
 8007598:	d111      	bne.n	80075be <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681a      	ldr	r2, [r3, #0]
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	3318      	adds	r3, #24
 80075a2:	011b      	lsls	r3, r3, #4
 80075a4:	4413      	add	r3, r2
 80075a6:	3304      	adds	r3, #4
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	68fa      	ldr	r2, [r7, #12]
 80075ac:	6811      	ldr	r1, [r2, #0]
 80075ae:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80075b2:	697b      	ldr	r3, [r7, #20]
 80075b4:	3318      	adds	r3, #24
 80075b6:	011b      	lsls	r3, r3, #4
 80075b8:	440b      	add	r3, r1
 80075ba:	3304      	adds	r3, #4
 80075bc:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	3307      	adds	r3, #7
 80075c2:	781b      	ldrb	r3, [r3, #0]
 80075c4:	061a      	lsls	r2, r3, #24
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	3306      	adds	r3, #6
 80075ca:	781b      	ldrb	r3, [r3, #0]
 80075cc:	041b      	lsls	r3, r3, #16
 80075ce:	431a      	orrs	r2, r3
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	3305      	adds	r3, #5
 80075d4:	781b      	ldrb	r3, [r3, #0]
 80075d6:	021b      	lsls	r3, r3, #8
 80075d8:	4313      	orrs	r3, r2
 80075da:	687a      	ldr	r2, [r7, #4]
 80075dc:	3204      	adds	r2, #4
 80075de:	7812      	ldrb	r2, [r2, #0]
 80075e0:	4610      	mov	r0, r2
 80075e2:	68fa      	ldr	r2, [r7, #12]
 80075e4:	6811      	ldr	r1, [r2, #0]
 80075e6:	ea43 0200 	orr.w	r2, r3, r0
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	011b      	lsls	r3, r3, #4
 80075ee:	440b      	add	r3, r1
 80075f0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80075f4:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	3303      	adds	r3, #3
 80075fa:	781b      	ldrb	r3, [r3, #0]
 80075fc:	061a      	lsls	r2, r3, #24
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	3302      	adds	r3, #2
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	041b      	lsls	r3, r3, #16
 8007606:	431a      	orrs	r2, r3
 8007608:	687b      	ldr	r3, [r7, #4]
 800760a:	3301      	adds	r3, #1
 800760c:	781b      	ldrb	r3, [r3, #0]
 800760e:	021b      	lsls	r3, r3, #8
 8007610:	4313      	orrs	r3, r2
 8007612:	687a      	ldr	r2, [r7, #4]
 8007614:	7812      	ldrb	r2, [r2, #0]
 8007616:	4610      	mov	r0, r2
 8007618:	68fa      	ldr	r2, [r7, #12]
 800761a:	6811      	ldr	r1, [r2, #0]
 800761c:	ea43 0200 	orr.w	r2, r3, r0
 8007620:	697b      	ldr	r3, [r7, #20]
 8007622:	011b      	lsls	r3, r3, #4
 8007624:	440b      	add	r3, r1
 8007626:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 800762a:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 800762c:	68fb      	ldr	r3, [r7, #12]
 800762e:	681a      	ldr	r2, [r3, #0]
 8007630:	697b      	ldr	r3, [r7, #20]
 8007632:	3318      	adds	r3, #24
 8007634:	011b      	lsls	r3, r3, #4
 8007636:	4413      	add	r3, r2
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	68fa      	ldr	r2, [r7, #12]
 800763c:	6811      	ldr	r1, [r2, #0]
 800763e:	f043 0201 	orr.w	r2, r3, #1
 8007642:	697b      	ldr	r3, [r7, #20]
 8007644:	3318      	adds	r3, #24
 8007646:	011b      	lsls	r3, r3, #4
 8007648:	440b      	add	r3, r1
 800764a:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 800764c:	2300      	movs	r3, #0
 800764e:	e00e      	b.n	800766e <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007654:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 800765c:	2301      	movs	r3, #1
 800765e:	e006      	b.n	800766e <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007664:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800766c:	2301      	movs	r3, #1
  }
}
 800766e:	4618      	mov	r0, r3
 8007670:	3724      	adds	r7, #36	; 0x24
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr

0800767a <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 800767a:	b480      	push	{r7}
 800767c:	b085      	sub	sp, #20
 800767e:	af00      	add	r7, sp, #0
 8007680:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8007682:	2300      	movs	r3, #0
 8007684:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	f893 3020 	ldrb.w	r3, [r3, #32]
 800768c:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800768e:	7afb      	ldrb	r3, [r7, #11]
 8007690:	2b01      	cmp	r3, #1
 8007692:	d002      	beq.n	800769a <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8007694:	7afb      	ldrb	r3, [r7, #11]
 8007696:	2b02      	cmp	r3, #2
 8007698:	d11d      	bne.n	80076d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	689b      	ldr	r3, [r3, #8]
 80076a0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d002      	beq.n	80076ae <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	3301      	adds	r3, #1
 80076ac:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	689b      	ldr	r3, [r3, #8]
 80076b4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80076b8:	2b00      	cmp	r3, #0
 80076ba:	d002      	beq.n	80076c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80076bc:	68fb      	ldr	r3, [r7, #12]
 80076be:	3301      	adds	r3, #1
 80076c0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	689b      	ldr	r3, [r3, #8]
 80076c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d002      	beq.n	80076d6 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80076d0:	68fb      	ldr	r3, [r7, #12]
 80076d2:	3301      	adds	r3, #1
 80076d4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80076d6:	68fb      	ldr	r3, [r7, #12]
}
 80076d8:	4618      	mov	r0, r3
 80076da:	3714      	adds	r7, #20
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80076e4:	b480      	push	{r7}
 80076e6:	b087      	sub	sp, #28
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	60f8      	str	r0, [r7, #12]
 80076ec:	60b9      	str	r1, [r7, #8]
 80076ee:	607a      	str	r2, [r7, #4]
 80076f0:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80076f8:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	2b01      	cmp	r3, #1
 80076fe:	d003      	beq.n	8007708 <HAL_CAN_GetRxMessage+0x24>
 8007700:	7dfb      	ldrb	r3, [r7, #23]
 8007702:	2b02      	cmp	r3, #2
 8007704:	f040 80f3 	bne.w	80078ee <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	2b00      	cmp	r3, #0
 800770c:	d10e      	bne.n	800772c <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	68db      	ldr	r3, [r3, #12]
 8007714:	f003 0303 	and.w	r3, r3, #3
 8007718:	2b00      	cmp	r3, #0
 800771a:	d116      	bne.n	800774a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007720:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007724:	68fb      	ldr	r3, [r7, #12]
 8007726:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007728:	2301      	movs	r3, #1
 800772a:	e0e7      	b.n	80078fc <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	691b      	ldr	r3, [r3, #16]
 8007732:	f003 0303 	and.w	r3, r3, #3
 8007736:	2b00      	cmp	r3, #0
 8007738:	d107      	bne.n	800774a <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800773a:	68fb      	ldr	r3, [r7, #12]
 800773c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800773e:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8007742:	68fb      	ldr	r3, [r7, #12]
 8007744:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e0d8      	b.n	80078fc <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	681a      	ldr	r2, [r3, #0]
 800774e:	68bb      	ldr	r3, [r7, #8]
 8007750:	331b      	adds	r3, #27
 8007752:	011b      	lsls	r3, r3, #4
 8007754:	4413      	add	r3, r2
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f003 0204 	and.w	r2, r3, #4
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	689b      	ldr	r3, [r3, #8]
 8007764:	2b00      	cmp	r3, #0
 8007766:	d10c      	bne.n	8007782 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	681a      	ldr	r2, [r3, #0]
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	331b      	adds	r3, #27
 8007770:	011b      	lsls	r3, r3, #4
 8007772:	4413      	add	r3, r2
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	0d5b      	lsrs	r3, r3, #21
 8007778:	f3c3 020a 	ubfx	r2, r3, #0, #11
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	601a      	str	r2, [r3, #0]
 8007780:	e00b      	b.n	800779a <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	681a      	ldr	r2, [r3, #0]
 8007786:	68bb      	ldr	r3, [r7, #8]
 8007788:	331b      	adds	r3, #27
 800778a:	011b      	lsls	r3, r3, #4
 800778c:	4413      	add	r3, r2
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	08db      	lsrs	r3, r3, #3
 8007792:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	681a      	ldr	r2, [r3, #0]
 800779e:	68bb      	ldr	r3, [r7, #8]
 80077a0:	331b      	adds	r3, #27
 80077a2:	011b      	lsls	r3, r3, #4
 80077a4:	4413      	add	r3, r2
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	f003 0202 	and.w	r2, r3, #2
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80077b0:	68fb      	ldr	r3, [r7, #12]
 80077b2:	681a      	ldr	r2, [r3, #0]
 80077b4:	68bb      	ldr	r3, [r7, #8]
 80077b6:	331b      	adds	r3, #27
 80077b8:	011b      	lsls	r3, r3, #4
 80077ba:	4413      	add	r3, r2
 80077bc:	3304      	adds	r3, #4
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f003 020f 	and.w	r2, r3, #15
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80077c8:	68fb      	ldr	r3, [r7, #12]
 80077ca:	681a      	ldr	r2, [r3, #0]
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	331b      	adds	r3, #27
 80077d0:	011b      	lsls	r3, r3, #4
 80077d2:	4413      	add	r3, r2
 80077d4:	3304      	adds	r3, #4
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	0a1b      	lsrs	r3, r3, #8
 80077da:	b2da      	uxtb	r2, r3
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	681a      	ldr	r2, [r3, #0]
 80077e4:	68bb      	ldr	r3, [r7, #8]
 80077e6:	331b      	adds	r3, #27
 80077e8:	011b      	lsls	r3, r3, #4
 80077ea:	4413      	add	r3, r2
 80077ec:	3304      	adds	r3, #4
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	0c1b      	lsrs	r3, r3, #16
 80077f2:	b29a      	uxth	r2, r3
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	681a      	ldr	r2, [r3, #0]
 80077fc:	68bb      	ldr	r3, [r7, #8]
 80077fe:	011b      	lsls	r3, r3, #4
 8007800:	4413      	add	r3, r2
 8007802:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	b2da      	uxtb	r2, r3
 800780a:	683b      	ldr	r3, [r7, #0]
 800780c:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	681a      	ldr	r2, [r3, #0]
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	011b      	lsls	r3, r3, #4
 8007816:	4413      	add	r3, r2
 8007818:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	0a1a      	lsrs	r2, r3, #8
 8007820:	683b      	ldr	r3, [r7, #0]
 8007822:	3301      	adds	r3, #1
 8007824:	b2d2      	uxtb	r2, r2
 8007826:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	681a      	ldr	r2, [r3, #0]
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	011b      	lsls	r3, r3, #4
 8007830:	4413      	add	r3, r2
 8007832:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	0c1a      	lsrs	r2, r3, #16
 800783a:	683b      	ldr	r3, [r7, #0]
 800783c:	3302      	adds	r3, #2
 800783e:	b2d2      	uxtb	r2, r2
 8007840:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	681a      	ldr	r2, [r3, #0]
 8007846:	68bb      	ldr	r3, [r7, #8]
 8007848:	011b      	lsls	r3, r3, #4
 800784a:	4413      	add	r3, r2
 800784c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	0e1a      	lsrs	r2, r3, #24
 8007854:	683b      	ldr	r3, [r7, #0]
 8007856:	3303      	adds	r3, #3
 8007858:	b2d2      	uxtb	r2, r2
 800785a:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 800785c:	68fb      	ldr	r3, [r7, #12]
 800785e:	681a      	ldr	r2, [r3, #0]
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	011b      	lsls	r3, r3, #4
 8007864:	4413      	add	r3, r2
 8007866:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	683b      	ldr	r3, [r7, #0]
 800786e:	3304      	adds	r3, #4
 8007870:	b2d2      	uxtb	r2, r2
 8007872:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8007874:	68fb      	ldr	r3, [r7, #12]
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	68bb      	ldr	r3, [r7, #8]
 800787a:	011b      	lsls	r3, r3, #4
 800787c:	4413      	add	r3, r2
 800787e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	0a1a      	lsrs	r2, r3, #8
 8007886:	683b      	ldr	r3, [r7, #0]
 8007888:	3305      	adds	r3, #5
 800788a:	b2d2      	uxtb	r2, r2
 800788c:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681a      	ldr	r2, [r3, #0]
 8007892:	68bb      	ldr	r3, [r7, #8]
 8007894:	011b      	lsls	r3, r3, #4
 8007896:	4413      	add	r3, r2
 8007898:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	0c1a      	lsrs	r2, r3, #16
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	3306      	adds	r3, #6
 80078a4:	b2d2      	uxtb	r2, r2
 80078a6:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681a      	ldr	r2, [r3, #0]
 80078ac:	68bb      	ldr	r3, [r7, #8]
 80078ae:	011b      	lsls	r3, r3, #4
 80078b0:	4413      	add	r3, r2
 80078b2:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	0e1a      	lsrs	r2, r3, #24
 80078ba:	683b      	ldr	r3, [r7, #0]
 80078bc:	3307      	adds	r3, #7
 80078be:	b2d2      	uxtb	r2, r2
 80078c0:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80078c2:	68bb      	ldr	r3, [r7, #8]
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d108      	bne.n	80078da <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	68da      	ldr	r2, [r3, #12]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f042 0220 	orr.w	r2, r2, #32
 80078d6:	60da      	str	r2, [r3, #12]
 80078d8:	e007      	b.n	80078ea <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	691a      	ldr	r2, [r3, #16]
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f042 0220 	orr.w	r2, r2, #32
 80078e8:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 80078ea:	2300      	movs	r3, #0
 80078ec:	e006      	b.n	80078fc <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80078ee:	68fb      	ldr	r3, [r7, #12]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f2:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80078fa:	2301      	movs	r3, #1
  }
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	371c      	adds	r7, #28
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr

08007908 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8007908:	b480      	push	{r7}
 800790a:	b085      	sub	sp, #20
 800790c:	af00      	add	r7, sp, #0
 800790e:	6078      	str	r0, [r7, #4]
 8007910:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8007912:	2300      	movs	r3, #0
 8007914:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	f893 3020 	ldrb.w	r3, [r3, #32]
 800791c:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800791e:	7afb      	ldrb	r3, [r7, #11]
 8007920:	2b01      	cmp	r3, #1
 8007922:	d002      	beq.n	800792a <HAL_CAN_GetRxFifoFillLevel+0x22>
 8007924:	7afb      	ldrb	r3, [r7, #11]
 8007926:	2b02      	cmp	r3, #2
 8007928:	d10f      	bne.n	800794a <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	2b00      	cmp	r3, #0
 800792e:	d106      	bne.n	800793e <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	68db      	ldr	r3, [r3, #12]
 8007936:	f003 0303 	and.w	r3, r3, #3
 800793a:	60fb      	str	r3, [r7, #12]
 800793c:	e005      	b.n	800794a <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	691b      	ldr	r3, [r3, #16]
 8007944:	f003 0303 	and.w	r3, r3, #3
 8007948:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 800794a:	68fb      	ldr	r3, [r7, #12]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8007958:	b480      	push	{r7}
 800795a:	b085      	sub	sp, #20
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8007962:	687b      	ldr	r3, [r7, #4]
 8007964:	f893 3020 	ldrb.w	r3, [r3, #32]
 8007968:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800796a:	7bfb      	ldrb	r3, [r7, #15]
 800796c:	2b01      	cmp	r3, #1
 800796e:	d002      	beq.n	8007976 <HAL_CAN_ActivateNotification+0x1e>
 8007970:	7bfb      	ldrb	r3, [r7, #15]
 8007972:	2b02      	cmp	r3, #2
 8007974:	d109      	bne.n	800798a <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	6959      	ldr	r1, [r3, #20]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	683a      	ldr	r2, [r7, #0]
 8007982:	430a      	orrs	r2, r1
 8007984:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	e006      	b.n	8007998 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800798e:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8007996:	2301      	movs	r3, #1
  }
}
 8007998:	4618      	mov	r0, r3
 800799a:	3714      	adds	r7, #20
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b08a      	sub	sp, #40	; 0x28
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80079ac:	2300      	movs	r3, #0
 80079ae:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	695b      	ldr	r3, [r3, #20]
 80079b6:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	685b      	ldr	r3, [r3, #4]
 80079be:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	689b      	ldr	r3, [r3, #8]
 80079c6:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	68db      	ldr	r3, [r3, #12]
 80079ce:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	691b      	ldr	r3, [r3, #16]
 80079d6:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699b      	ldr	r3, [r3, #24]
 80079de:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80079e0:	6a3b      	ldr	r3, [r7, #32]
 80079e2:	f003 0301 	and.w	r3, r3, #1
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d07c      	beq.n	8007ae4 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	f003 0301 	and.w	r3, r3, #1
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d023      	beq.n	8007a3c <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2201      	movs	r2, #1
 80079fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80079fc:	69bb      	ldr	r3, [r7, #24]
 80079fe:	f003 0302 	and.w	r3, r3, #2
 8007a02:	2b00      	cmp	r3, #0
 8007a04:	d003      	beq.n	8007a0e <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f7fb fdd6 	bl	80035b8 <HAL_CAN_TxMailbox0CompleteCallback>
 8007a0c:	e016      	b.n	8007a3c <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8007a0e:	69bb      	ldr	r3, [r7, #24]
 8007a10:	f003 0304 	and.w	r3, r3, #4
 8007a14:	2b00      	cmp	r3, #0
 8007a16:	d004      	beq.n	8007a22 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8007a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a1a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007a1e:	627b      	str	r3, [r7, #36]	; 0x24
 8007a20:	e00c      	b.n	8007a3c <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	f003 0308 	and.w	r3, r3, #8
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d004      	beq.n	8007a36 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007a32:	627b      	str	r3, [r7, #36]	; 0x24
 8007a34:	e002      	b.n	8007a3c <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f000 f96b 	bl	8007d12 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8007a3c:	69bb      	ldr	r3, [r7, #24]
 8007a3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d024      	beq.n	8007a90 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007a4e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8007a50:	69bb      	ldr	r3, [r7, #24]
 8007a52:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d003      	beq.n	8007a62 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8007a5a:	6878      	ldr	r0, [r7, #4]
 8007a5c:	f7fb fdbc 	bl	80035d8 <HAL_CAN_TxMailbox1CompleteCallback>
 8007a60:	e016      	b.n	8007a90 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8007a62:	69bb      	ldr	r3, [r7, #24]
 8007a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d004      	beq.n	8007a76 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8007a6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a6e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8007a72:	627b      	str	r3, [r7, #36]	; 0x24
 8007a74:	e00c      	b.n	8007a90 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8007a76:	69bb      	ldr	r3, [r7, #24]
 8007a78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d004      	beq.n	8007a8a <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8007a80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007a86:	627b      	str	r3, [r7, #36]	; 0x24
 8007a88:	e002      	b.n	8007a90 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8007a8a:	6878      	ldr	r0, [r7, #4]
 8007a8c:	f000 f94b 	bl	8007d26 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8007a90:	69bb      	ldr	r3, [r7, #24]
 8007a92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d024      	beq.n	8007ae4 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8007aa2:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8007aa4:	69bb      	ldr	r3, [r7, #24]
 8007aa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	d003      	beq.n	8007ab6 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8007aae:	6878      	ldr	r0, [r7, #4]
 8007ab0:	f7fb fda2 	bl	80035f8 <HAL_CAN_TxMailbox2CompleteCallback>
 8007ab4:	e016      	b.n	8007ae4 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8007ab6:	69bb      	ldr	r3, [r7, #24]
 8007ab8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d004      	beq.n	8007aca <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8007ac0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ac2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007ac6:	627b      	str	r3, [r7, #36]	; 0x24
 8007ac8:	e00c      	b.n	8007ae4 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8007aca:	69bb      	ldr	r3, [r7, #24]
 8007acc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d004      	beq.n	8007ade <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8007ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ada:	627b      	str	r3, [r7, #36]	; 0x24
 8007adc:	e002      	b.n	8007ae4 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f000 f92b 	bl	8007d3a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	f003 0308 	and.w	r3, r3, #8
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d00c      	beq.n	8007b08 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8007aee:	697b      	ldr	r3, [r7, #20]
 8007af0:	f003 0310 	and.w	r3, r3, #16
 8007af4:	2b00      	cmp	r3, #0
 8007af6:	d007      	beq.n	8007b08 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8007af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007afa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007afe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	2210      	movs	r2, #16
 8007b06:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8007b08:	6a3b      	ldr	r3, [r7, #32]
 8007b0a:	f003 0304 	and.w	r3, r3, #4
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d00b      	beq.n	8007b2a <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8007b12:	697b      	ldr	r3, [r7, #20]
 8007b14:	f003 0308 	and.w	r3, r3, #8
 8007b18:	2b00      	cmp	r3, #0
 8007b1a:	d006      	beq.n	8007b2a <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	2208      	movs	r2, #8
 8007b22:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8007b24:	6878      	ldr	r0, [r7, #4]
 8007b26:	f000 f912 	bl	8007d4e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8007b2a:	6a3b      	ldr	r3, [r7, #32]
 8007b2c:	f003 0302 	and.w	r3, r3, #2
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d009      	beq.n	8007b48 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68db      	ldr	r3, [r3, #12]
 8007b3a:	f003 0303 	and.w	r3, r3, #3
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d002      	beq.n	8007b48 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8007b42:	6878      	ldr	r0, [r7, #4]
 8007b44:	f7fb fd1c 	bl	8003580 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8007b48:	6a3b      	ldr	r3, [r7, #32]
 8007b4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00c      	beq.n	8007b6c <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8007b52:	693b      	ldr	r3, [r7, #16]
 8007b54:	f003 0310 	and.w	r3, r3, #16
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	d007      	beq.n	8007b6c <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8007b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b5e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007b62:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2210      	movs	r2, #16
 8007b6a:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8007b6c:	6a3b      	ldr	r3, [r7, #32]
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00b      	beq.n	8007b8e <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8007b76:	693b      	ldr	r3, [r7, #16]
 8007b78:	f003 0308 	and.w	r3, r3, #8
 8007b7c:	2b00      	cmp	r3, #0
 8007b7e:	d006      	beq.n	8007b8e <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	681b      	ldr	r3, [r3, #0]
 8007b84:	2208      	movs	r2, #8
 8007b86:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8007b88:	6878      	ldr	r0, [r7, #4]
 8007b8a:	f000 f8f4 	bl	8007d76 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8007b8e:	6a3b      	ldr	r3, [r7, #32]
 8007b90:	f003 0310 	and.w	r3, r3, #16
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d009      	beq.n	8007bac <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	691b      	ldr	r3, [r3, #16]
 8007b9e:	f003 0303 	and.w	r3, r3, #3
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d002      	beq.n	8007bac <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8007ba6:	6878      	ldr	r0, [r7, #4]
 8007ba8:	f000 f8db 	bl	8007d62 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8007bac:	6a3b      	ldr	r3, [r7, #32]
 8007bae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d00b      	beq.n	8007bce <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8007bb6:	69fb      	ldr	r3, [r7, #28]
 8007bb8:	f003 0310 	and.w	r3, r3, #16
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d006      	beq.n	8007bce <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	2210      	movs	r2, #16
 8007bc6:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8007bc8:	6878      	ldr	r0, [r7, #4]
 8007bca:	f000 f8de 	bl	8007d8a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8007bce:	6a3b      	ldr	r3, [r7, #32]
 8007bd0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d00b      	beq.n	8007bf0 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8007bd8:	69fb      	ldr	r3, [r7, #28]
 8007bda:	f003 0308 	and.w	r3, r3, #8
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d006      	beq.n	8007bf0 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	2208      	movs	r2, #8
 8007be8:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8007bea:	6878      	ldr	r0, [r7, #4]
 8007bec:	f000 f8d7 	bl	8007d9e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8007bf0:	6a3b      	ldr	r3, [r7, #32]
 8007bf2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d07b      	beq.n	8007cf2 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8007bfa:	69fb      	ldr	r3, [r7, #28]
 8007bfc:	f003 0304 	and.w	r3, r3, #4
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d072      	beq.n	8007cea <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007c04:	6a3b      	ldr	r3, [r7, #32]
 8007c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d008      	beq.n	8007c20 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8007c0e:	68fb      	ldr	r3, [r7, #12]
 8007c10:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8007c14:	2b00      	cmp	r3, #0
 8007c16:	d003      	beq.n	8007c20 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8007c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1a:	f043 0301 	orr.w	r3, r3, #1
 8007c1e:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007c20:	6a3b      	ldr	r3, [r7, #32]
 8007c22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d008      	beq.n	8007c3c <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8007c2a:	68fb      	ldr	r3, [r7, #12]
 8007c2c:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8007c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c36:	f043 0302 	orr.w	r3, r3, #2
 8007c3a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007c3c:	6a3b      	ldr	r3, [r7, #32]
 8007c3e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d008      	beq.n	8007c58 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8007c46:	68fb      	ldr	r3, [r7, #12]
 8007c48:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d003      	beq.n	8007c58 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8007c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c52:	f043 0304 	orr.w	r3, r3, #4
 8007c56:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007c58:	6a3b      	ldr	r3, [r7, #32]
 8007c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	d043      	beq.n	8007cea <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d03e      	beq.n	8007cea <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8007c72:	2b60      	cmp	r3, #96	; 0x60
 8007c74:	d02b      	beq.n	8007cce <HAL_CAN_IRQHandler+0x32a>
 8007c76:	2b60      	cmp	r3, #96	; 0x60
 8007c78:	d82e      	bhi.n	8007cd8 <HAL_CAN_IRQHandler+0x334>
 8007c7a:	2b50      	cmp	r3, #80	; 0x50
 8007c7c:	d022      	beq.n	8007cc4 <HAL_CAN_IRQHandler+0x320>
 8007c7e:	2b50      	cmp	r3, #80	; 0x50
 8007c80:	d82a      	bhi.n	8007cd8 <HAL_CAN_IRQHandler+0x334>
 8007c82:	2b40      	cmp	r3, #64	; 0x40
 8007c84:	d019      	beq.n	8007cba <HAL_CAN_IRQHandler+0x316>
 8007c86:	2b40      	cmp	r3, #64	; 0x40
 8007c88:	d826      	bhi.n	8007cd8 <HAL_CAN_IRQHandler+0x334>
 8007c8a:	2b30      	cmp	r3, #48	; 0x30
 8007c8c:	d010      	beq.n	8007cb0 <HAL_CAN_IRQHandler+0x30c>
 8007c8e:	2b30      	cmp	r3, #48	; 0x30
 8007c90:	d822      	bhi.n	8007cd8 <HAL_CAN_IRQHandler+0x334>
 8007c92:	2b10      	cmp	r3, #16
 8007c94:	d002      	beq.n	8007c9c <HAL_CAN_IRQHandler+0x2f8>
 8007c96:	2b20      	cmp	r3, #32
 8007c98:	d005      	beq.n	8007ca6 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8007c9a:	e01d      	b.n	8007cd8 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8007c9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c9e:	f043 0308 	orr.w	r3, r3, #8
 8007ca2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ca4:	e019      	b.n	8007cda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8007ca6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ca8:	f043 0310 	orr.w	r3, r3, #16
 8007cac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007cae:	e014      	b.n	8007cda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cb2:	f043 0320 	orr.w	r3, r3, #32
 8007cb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007cb8:	e00f      	b.n	8007cda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8007cba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cbc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007cc0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007cc2:	e00a      	b.n	8007cda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8007cc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cc6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007cca:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007ccc:	e005      	b.n	8007cda <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8007cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cd0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007cd4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8007cd6:	e000      	b.n	8007cda <HAL_CAN_IRQHandler+0x336>
            break;
 8007cd8:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	699a      	ldr	r2, [r3, #24]
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	681b      	ldr	r3, [r3, #0]
 8007ce4:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8007ce8:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8007cea:	687b      	ldr	r3, [r7, #4]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	2204      	movs	r2, #4
 8007cf0:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8007cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d008      	beq.n	8007d0a <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007cfe:	431a      	orrs	r2, r3
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8007d04:	6878      	ldr	r0, [r7, #4]
 8007d06:	f000 f854 	bl	8007db2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8007d0a:	bf00      	nop
 8007d0c:	3728      	adds	r7, #40	; 0x28
 8007d0e:	46bd      	mov	sp, r7
 8007d10:	bd80      	pop	{r7, pc}

08007d12 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d12:	b480      	push	{r7}
 8007d14:	b083      	sub	sp, #12
 8007d16:	af00      	add	r7, sp, #0
 8007d18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8007d1a:	bf00      	nop
 8007d1c:	370c      	adds	r7, #12
 8007d1e:	46bd      	mov	sp, r7
 8007d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d24:	4770      	bx	lr

08007d26 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d26:	b480      	push	{r7}
 8007d28:	b083      	sub	sp, #12
 8007d2a:	af00      	add	r7, sp, #0
 8007d2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8007d2e:	bf00      	nop
 8007d30:	370c      	adds	r7, #12
 8007d32:	46bd      	mov	sp, r7
 8007d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d38:	4770      	bx	lr

08007d3a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8007d3a:	b480      	push	{r7}
 8007d3c:	b083      	sub	sp, #12
 8007d3e:	af00      	add	r7, sp, #0
 8007d40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8007d42:	bf00      	nop
 8007d44:	370c      	adds	r7, #12
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr

08007d4e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8007d4e:	b480      	push	{r7}
 8007d50:	b083      	sub	sp, #12
 8007d52:	af00      	add	r7, sp, #0
 8007d54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8007d56:	bf00      	nop
 8007d58:	370c      	adds	r7, #12
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d60:	4770      	bx	lr

08007d62 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8007d62:	b480      	push	{r7}
 8007d64:	b083      	sub	sp, #12
 8007d66:	af00      	add	r7, sp, #0
 8007d68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8007d6a:	bf00      	nop
 8007d6c:	370c      	adds	r7, #12
 8007d6e:	46bd      	mov	sp, r7
 8007d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d74:	4770      	bx	lr

08007d76 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8007d76:	b480      	push	{r7}
 8007d78:	b083      	sub	sp, #12
 8007d7a:	af00      	add	r7, sp, #0
 8007d7c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8007d7e:	bf00      	nop
 8007d80:	370c      	adds	r7, #12
 8007d82:	46bd      	mov	sp, r7
 8007d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d88:	4770      	bx	lr

08007d8a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8007d8a:	b480      	push	{r7}
 8007d8c:	b083      	sub	sp, #12
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8007d92:	bf00      	nop
 8007d94:	370c      	adds	r7, #12
 8007d96:	46bd      	mov	sp, r7
 8007d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9c:	4770      	bx	lr

08007d9e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8007d9e:	b480      	push	{r7}
 8007da0:	b083      	sub	sp, #12
 8007da2:	af00      	add	r7, sp, #0
 8007da4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8007da6:	bf00      	nop
 8007da8:	370c      	adds	r7, #12
 8007daa:	46bd      	mov	sp, r7
 8007dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007db0:	4770      	bx	lr

08007db2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8007db2:	b480      	push	{r7}
 8007db4:	b083      	sub	sp, #12
 8007db6:	af00      	add	r7, sp, #0
 8007db8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8007dba:	bf00      	nop
 8007dbc:	370c      	adds	r7, #12
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc4:	4770      	bx	lr
	...

08007dc8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b085      	sub	sp, #20
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	f003 0307 	and.w	r3, r3, #7
 8007dd6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007dd8:	4b0c      	ldr	r3, [pc, #48]	; (8007e0c <__NVIC_SetPriorityGrouping+0x44>)
 8007dda:	68db      	ldr	r3, [r3, #12]
 8007ddc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007dde:	68ba      	ldr	r2, [r7, #8]
 8007de0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007de4:	4013      	ands	r3, r2
 8007de6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007de8:	68fb      	ldr	r3, [r7, #12]
 8007dea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007dec:	68bb      	ldr	r3, [r7, #8]
 8007dee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007df0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007df4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007df8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007dfa:	4a04      	ldr	r2, [pc, #16]	; (8007e0c <__NVIC_SetPriorityGrouping+0x44>)
 8007dfc:	68bb      	ldr	r3, [r7, #8]
 8007dfe:	60d3      	str	r3, [r2, #12]
}
 8007e00:	bf00      	nop
 8007e02:	3714      	adds	r7, #20
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	e000ed00 	.word	0xe000ed00

08007e10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007e10:	b480      	push	{r7}
 8007e12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007e14:	4b04      	ldr	r3, [pc, #16]	; (8007e28 <__NVIC_GetPriorityGrouping+0x18>)
 8007e16:	68db      	ldr	r3, [r3, #12]
 8007e18:	0a1b      	lsrs	r3, r3, #8
 8007e1a:	f003 0307 	and.w	r3, r3, #7
}
 8007e1e:	4618      	mov	r0, r3
 8007e20:	46bd      	mov	sp, r7
 8007e22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e26:	4770      	bx	lr
 8007e28:	e000ed00 	.word	0xe000ed00

08007e2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007e2c:	b480      	push	{r7}
 8007e2e:	b083      	sub	sp, #12
 8007e30:	af00      	add	r7, sp, #0
 8007e32:	4603      	mov	r3, r0
 8007e34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	db0b      	blt.n	8007e56 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8007e3e:	79fb      	ldrb	r3, [r7, #7]
 8007e40:	f003 021f 	and.w	r2, r3, #31
 8007e44:	4907      	ldr	r1, [pc, #28]	; (8007e64 <__NVIC_EnableIRQ+0x38>)
 8007e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e4a:	095b      	lsrs	r3, r3, #5
 8007e4c:	2001      	movs	r0, #1
 8007e4e:	fa00 f202 	lsl.w	r2, r0, r2
 8007e52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007e56:	bf00      	nop
 8007e58:	370c      	adds	r7, #12
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e60:	4770      	bx	lr
 8007e62:	bf00      	nop
 8007e64:	e000e100 	.word	0xe000e100

08007e68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007e68:	b480      	push	{r7}
 8007e6a:	b083      	sub	sp, #12
 8007e6c:	af00      	add	r7, sp, #0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	6039      	str	r1, [r7, #0]
 8007e72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007e74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	db0a      	blt.n	8007e92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e7c:	683b      	ldr	r3, [r7, #0]
 8007e7e:	b2da      	uxtb	r2, r3
 8007e80:	490c      	ldr	r1, [pc, #48]	; (8007eb4 <__NVIC_SetPriority+0x4c>)
 8007e82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007e86:	0112      	lsls	r2, r2, #4
 8007e88:	b2d2      	uxtb	r2, r2
 8007e8a:	440b      	add	r3, r1
 8007e8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007e90:	e00a      	b.n	8007ea8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007e92:	683b      	ldr	r3, [r7, #0]
 8007e94:	b2da      	uxtb	r2, r3
 8007e96:	4908      	ldr	r1, [pc, #32]	; (8007eb8 <__NVIC_SetPriority+0x50>)
 8007e98:	79fb      	ldrb	r3, [r7, #7]
 8007e9a:	f003 030f 	and.w	r3, r3, #15
 8007e9e:	3b04      	subs	r3, #4
 8007ea0:	0112      	lsls	r2, r2, #4
 8007ea2:	b2d2      	uxtb	r2, r2
 8007ea4:	440b      	add	r3, r1
 8007ea6:	761a      	strb	r2, [r3, #24]
}
 8007ea8:	bf00      	nop
 8007eaa:	370c      	adds	r7, #12
 8007eac:	46bd      	mov	sp, r7
 8007eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eb2:	4770      	bx	lr
 8007eb4:	e000e100 	.word	0xe000e100
 8007eb8:	e000ed00 	.word	0xe000ed00

08007ebc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ebc:	b480      	push	{r7}
 8007ebe:	b089      	sub	sp, #36	; 0x24
 8007ec0:	af00      	add	r7, sp, #0
 8007ec2:	60f8      	str	r0, [r7, #12]
 8007ec4:	60b9      	str	r1, [r7, #8]
 8007ec6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f003 0307 	and.w	r3, r3, #7
 8007ece:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007ed0:	69fb      	ldr	r3, [r7, #28]
 8007ed2:	f1c3 0307 	rsb	r3, r3, #7
 8007ed6:	2b04      	cmp	r3, #4
 8007ed8:	bf28      	it	cs
 8007eda:	2304      	movcs	r3, #4
 8007edc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007ede:	69fb      	ldr	r3, [r7, #28]
 8007ee0:	3304      	adds	r3, #4
 8007ee2:	2b06      	cmp	r3, #6
 8007ee4:	d902      	bls.n	8007eec <NVIC_EncodePriority+0x30>
 8007ee6:	69fb      	ldr	r3, [r7, #28]
 8007ee8:	3b03      	subs	r3, #3
 8007eea:	e000      	b.n	8007eee <NVIC_EncodePriority+0x32>
 8007eec:	2300      	movs	r3, #0
 8007eee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007ef0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007ef4:	69bb      	ldr	r3, [r7, #24]
 8007ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8007efa:	43da      	mvns	r2, r3
 8007efc:	68bb      	ldr	r3, [r7, #8]
 8007efe:	401a      	ands	r2, r3
 8007f00:	697b      	ldr	r3, [r7, #20]
 8007f02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007f04:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	fa01 f303 	lsl.w	r3, r1, r3
 8007f0e:	43d9      	mvns	r1, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007f14:	4313      	orrs	r3, r2
         );
}
 8007f16:	4618      	mov	r0, r3
 8007f18:	3724      	adds	r7, #36	; 0x24
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f20:	4770      	bx	lr

08007f22 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007f22:	b580      	push	{r7, lr}
 8007f24:	b082      	sub	sp, #8
 8007f26:	af00      	add	r7, sp, #0
 8007f28:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007f2a:	6878      	ldr	r0, [r7, #4]
 8007f2c:	f7ff ff4c 	bl	8007dc8 <__NVIC_SetPriorityGrouping>
}
 8007f30:	bf00      	nop
 8007f32:	3708      	adds	r7, #8
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd80      	pop	{r7, pc}

08007f38 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007f38:	b580      	push	{r7, lr}
 8007f3a:	b086      	sub	sp, #24
 8007f3c:	af00      	add	r7, sp, #0
 8007f3e:	4603      	mov	r3, r0
 8007f40:	60b9      	str	r1, [r7, #8]
 8007f42:	607a      	str	r2, [r7, #4]
 8007f44:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007f46:	2300      	movs	r3, #0
 8007f48:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007f4a:	f7ff ff61 	bl	8007e10 <__NVIC_GetPriorityGrouping>
 8007f4e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	68b9      	ldr	r1, [r7, #8]
 8007f54:	6978      	ldr	r0, [r7, #20]
 8007f56:	f7ff ffb1 	bl	8007ebc <NVIC_EncodePriority>
 8007f5a:	4602      	mov	r2, r0
 8007f5c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007f60:	4611      	mov	r1, r2
 8007f62:	4618      	mov	r0, r3
 8007f64:	f7ff ff80 	bl	8007e68 <__NVIC_SetPriority>
}
 8007f68:	bf00      	nop
 8007f6a:	3718      	adds	r7, #24
 8007f6c:	46bd      	mov	sp, r7
 8007f6e:	bd80      	pop	{r7, pc}

08007f70 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	4603      	mov	r3, r0
 8007f78:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007f7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff ff54 	bl	8007e2c <__NVIC_EnableIRQ>
}
 8007f84:	bf00      	nop
 8007f86:	3708      	adds	r7, #8
 8007f88:	46bd      	mov	sp, r7
 8007f8a:	bd80      	pop	{r7, pc}

08007f8c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007f8c:	b580      	push	{r7, lr}
 8007f8e:	b082      	sub	sp, #8
 8007f90:	af00      	add	r7, sp, #0
 8007f92:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d101      	bne.n	8007f9e <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8007f9a:	2301      	movs	r3, #1
 8007f9c:	e014      	b.n	8007fc8 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	791b      	ldrb	r3, [r3, #4]
 8007fa2:	b2db      	uxtb	r3, r3
 8007fa4:	2b00      	cmp	r3, #0
 8007fa6:	d105      	bne.n	8007fb4 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f7fc fe64 	bl	8004c7c <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2202      	movs	r2, #2
 8007fb8:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	2200      	movs	r2, #0
 8007fbe:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2201      	movs	r2, #1
 8007fc4:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8007fc6:	2300      	movs	r3, #0
}
 8007fc8:	4618      	mov	r0, r3
 8007fca:	3708      	adds	r7, #8
 8007fcc:	46bd      	mov	sp, r7
 8007fce:	bd80      	pop	{r7, pc}

08007fd0 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b086      	sub	sp, #24
 8007fd4:	af00      	add	r7, sp, #0
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	60b9      	str	r1, [r7, #8]
 8007fda:	607a      	str	r2, [r7, #4]
 8007fdc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 8007fde:	2300      	movs	r3, #0
 8007fe0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007fe2:	68fb      	ldr	r3, [r7, #12]
 8007fe4:	795b      	ldrb	r3, [r3, #5]
 8007fe6:	2b01      	cmp	r3, #1
 8007fe8:	d101      	bne.n	8007fee <HAL_DAC_Start_DMA+0x1e>
 8007fea:	2302      	movs	r3, #2
 8007fec:	e0ab      	b.n	8008146 <HAL_DAC_Start_DMA+0x176>
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	2201      	movs	r2, #1
 8007ff2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007ff4:	68fb      	ldr	r3, [r7, #12]
 8007ff6:	2202      	movs	r2, #2
 8007ff8:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8007ffa:	68bb      	ldr	r3, [r7, #8]
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d12f      	bne.n	8008060 <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	689b      	ldr	r3, [r3, #8]
 8008004:	4a52      	ldr	r2, [pc, #328]	; (8008150 <HAL_DAC_Start_DMA+0x180>)
 8008006:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	689b      	ldr	r3, [r3, #8]
 800800c:	4a51      	ldr	r2, [pc, #324]	; (8008154 <HAL_DAC_Start_DMA+0x184>)
 800800e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8008010:	68fb      	ldr	r3, [r7, #12]
 8008012:	689b      	ldr	r3, [r3, #8]
 8008014:	4a50      	ldr	r2, [pc, #320]	; (8008158 <HAL_DAC_Start_DMA+0x188>)
 8008016:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8008018:	68fb      	ldr	r3, [r7, #12]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	681a      	ldr	r2, [r3, #0]
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8008026:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8008028:	6a3b      	ldr	r3, [r7, #32]
 800802a:	2b08      	cmp	r3, #8
 800802c:	d013      	beq.n	8008056 <HAL_DAC_Start_DMA+0x86>
 800802e:	6a3b      	ldr	r3, [r7, #32]
 8008030:	2b08      	cmp	r3, #8
 8008032:	d845      	bhi.n	80080c0 <HAL_DAC_Start_DMA+0xf0>
 8008034:	6a3b      	ldr	r3, [r7, #32]
 8008036:	2b00      	cmp	r3, #0
 8008038:	d003      	beq.n	8008042 <HAL_DAC_Start_DMA+0x72>
 800803a:	6a3b      	ldr	r3, [r7, #32]
 800803c:	2b04      	cmp	r3, #4
 800803e:	d005      	beq.n	800804c <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8008040:	e03e      	b.n	80080c0 <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8008042:	68fb      	ldr	r3, [r7, #12]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	3308      	adds	r3, #8
 8008048:	613b      	str	r3, [r7, #16]
        break;
 800804a:	e03c      	b.n	80080c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	330c      	adds	r3, #12
 8008052:	613b      	str	r3, [r7, #16]
        break;
 8008054:	e037      	b.n	80080c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8008056:	68fb      	ldr	r3, [r7, #12]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	3310      	adds	r3, #16
 800805c:	613b      	str	r3, [r7, #16]
        break;
 800805e:	e032      	b.n	80080c6 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	68db      	ldr	r3, [r3, #12]
 8008064:	4a3d      	ldr	r2, [pc, #244]	; (800815c <HAL_DAC_Start_DMA+0x18c>)
 8008066:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8008068:	68fb      	ldr	r3, [r7, #12]
 800806a:	68db      	ldr	r3, [r3, #12]
 800806c:	4a3c      	ldr	r2, [pc, #240]	; (8008160 <HAL_DAC_Start_DMA+0x190>)
 800806e:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	68db      	ldr	r3, [r3, #12]
 8008074:	4a3b      	ldr	r2, [pc, #236]	; (8008164 <HAL_DAC_Start_DMA+0x194>)
 8008076:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8008086:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8008088:	6a3b      	ldr	r3, [r7, #32]
 800808a:	2b08      	cmp	r3, #8
 800808c:	d013      	beq.n	80080b6 <HAL_DAC_Start_DMA+0xe6>
 800808e:	6a3b      	ldr	r3, [r7, #32]
 8008090:	2b08      	cmp	r3, #8
 8008092:	d817      	bhi.n	80080c4 <HAL_DAC_Start_DMA+0xf4>
 8008094:	6a3b      	ldr	r3, [r7, #32]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d003      	beq.n	80080a2 <HAL_DAC_Start_DMA+0xd2>
 800809a:	6a3b      	ldr	r3, [r7, #32]
 800809c:	2b04      	cmp	r3, #4
 800809e:	d005      	beq.n	80080ac <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 80080a0:	e010      	b.n	80080c4 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	3314      	adds	r3, #20
 80080a8:	613b      	str	r3, [r7, #16]
        break;
 80080aa:	e00c      	b.n	80080c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	3318      	adds	r3, #24
 80080b2:	613b      	str	r3, [r7, #16]
        break;
 80080b4:	e007      	b.n	80080c6 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	331c      	adds	r3, #28
 80080bc:	613b      	str	r3, [r7, #16]
        break;
 80080be:	e002      	b.n	80080c6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80080c0:	bf00      	nop
 80080c2:	e000      	b.n	80080c6 <HAL_DAC_Start_DMA+0xf6>
        break;
 80080c4:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80080c6:	68bb      	ldr	r3, [r7, #8]
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d111      	bne.n	80080f0 <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80080da:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	6898      	ldr	r0, [r3, #8]
 80080e0:	6879      	ldr	r1, [r7, #4]
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	693a      	ldr	r2, [r7, #16]
 80080e6:	f000 fb13 	bl	8008710 <HAL_DMA_Start_IT>
 80080ea:	4603      	mov	r3, r0
 80080ec:	75fb      	strb	r3, [r7, #23]
 80080ee:	e010      	b.n	8008112 <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80080f0:	68fb      	ldr	r3, [r7, #12]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	681a      	ldr	r2, [r3, #0]
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	681b      	ldr	r3, [r3, #0]
 80080fa:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80080fe:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	68d8      	ldr	r0, [r3, #12]
 8008104:	6879      	ldr	r1, [r7, #4]
 8008106:	683b      	ldr	r3, [r7, #0]
 8008108:	693a      	ldr	r2, [r7, #16]
 800810a:	f000 fb01 	bl	8008710 <HAL_DMA_Start_IT>
 800810e:	4603      	mov	r3, r0
 8008110:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2200      	movs	r2, #0
 8008116:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8008118:	7dfb      	ldrb	r3, [r7, #23]
 800811a:	2b00      	cmp	r3, #0
 800811c:	d10c      	bne.n	8008138 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800811e:	68fb      	ldr	r3, [r7, #12]
 8008120:	681b      	ldr	r3, [r3, #0]
 8008122:	6819      	ldr	r1, [r3, #0]
 8008124:	68bb      	ldr	r3, [r7, #8]
 8008126:	f003 0310 	and.w	r3, r3, #16
 800812a:	2201      	movs	r2, #1
 800812c:	409a      	lsls	r2, r3
 800812e:	68fb      	ldr	r3, [r7, #12]
 8008130:	681b      	ldr	r3, [r3, #0]
 8008132:	430a      	orrs	r2, r1
 8008134:	601a      	str	r2, [r3, #0]
 8008136:	e005      	b.n	8008144 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	f043 0204 	orr.w	r2, r3, #4
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8008144:	7dfb      	ldrb	r3, [r7, #23]
}
 8008146:	4618      	mov	r0, r3
 8008148:	3718      	adds	r7, #24
 800814a:	46bd      	mov	sp, r7
 800814c:	bd80      	pop	{r7, pc}
 800814e:	bf00      	nop
 8008150:	08008479 	.word	0x08008479
 8008154:	0800849b 	.word	0x0800849b
 8008158:	080084b7 	.word	0x080084b7
 800815c:	08008535 	.word	0x08008535
 8008160:	08008557 	.word	0x08008557
 8008164:	08008573 	.word	0x08008573

08008168 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8008168:	b580      	push	{r7, lr}
 800816a:	b082      	sub	sp, #8
 800816c:	af00      	add	r7, sp, #0
 800816e:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800817a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800817e:	d120      	bne.n	80081c2 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008186:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800818a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800818e:	d118      	bne.n	80081c2 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2204      	movs	r2, #4
 8008194:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	691b      	ldr	r3, [r3, #16]
 800819a:	f043 0201 	orr.w	r2, r3, #1
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80081aa:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	681a      	ldr	r2, [r3, #0]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80081ba:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80081bc:	6878      	ldr	r0, [r7, #4]
 80081be:	f000 f837 	bl	8008230 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081cc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081d0:	d120      	bne.n	8008214 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80081d8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80081dc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80081e0:	d118      	bne.n	8008214 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2204      	movs	r2, #4
 80081e6:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f043 0202 	orr.w	r2, r3, #2
 80081f0:	687b      	ldr	r3, [r7, #4]
 80081f2:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80081fc:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80081fe:	687b      	ldr	r3, [r7, #4]
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	681a      	ldr	r2, [r3, #0]
 8008204:	687b      	ldr	r3, [r7, #4]
 8008206:	681b      	ldr	r3, [r3, #0]
 8008208:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800820c:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f986 	bl	8008520 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8008214:	bf00      	nop
 8008216:	3708      	adds	r7, #8
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8008238:	bf00      	nop
 800823a:	370c      	adds	r7, #12
 800823c:	46bd      	mov	sp, r7
 800823e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008242:	4770      	bx	lr

08008244 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8008244:	b580      	push	{r7, lr}
 8008246:	b088      	sub	sp, #32
 8008248:	af00      	add	r7, sp, #0
 800824a:	60f8      	str	r0, [r7, #12]
 800824c:	60b9      	str	r1, [r7, #8]
 800824e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8008250:	2300      	movs	r3, #0
 8008252:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8008254:	68fb      	ldr	r3, [r7, #12]
 8008256:	795b      	ldrb	r3, [r3, #5]
 8008258:	2b01      	cmp	r3, #1
 800825a:	d101      	bne.n	8008260 <HAL_DAC_ConfigChannel+0x1c>
 800825c:	2302      	movs	r3, #2
 800825e:	e107      	b.n	8008470 <HAL_DAC_ConfigChannel+0x22c>
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	2201      	movs	r2, #1
 8008264:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	2202      	movs	r2, #2
 800826a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	2b04      	cmp	r3, #4
 8008272:	d174      	bne.n	800835e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8008274:	f7fe f838 	bl	80062e8 <HAL_GetTick>
 8008278:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d134      	bne.n	80082ea <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8008280:	e011      	b.n	80082a6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8008282:	f7fe f831 	bl	80062e8 <HAL_GetTick>
 8008286:	4602      	mov	r2, r0
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	1ad3      	subs	r3, r2, r3
 800828c:	2b01      	cmp	r3, #1
 800828e:	d90a      	bls.n	80082a6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	691b      	ldr	r3, [r3, #16]
 8008294:	f043 0208 	orr.w	r2, r3, #8
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	2203      	movs	r2, #3
 80082a0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80082a2:	2303      	movs	r3, #3
 80082a4:	e0e4      	b.n	8008470 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	681b      	ldr	r3, [r3, #0]
 80082aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082ac:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082b0:	2b00      	cmp	r3, #0
 80082b2:	d1e6      	bne.n	8008282 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80082b4:	2001      	movs	r0, #1
 80082b6:	f7fe f823 	bl	8006300 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	681b      	ldr	r3, [r3, #0]
 80082be:	68ba      	ldr	r2, [r7, #8]
 80082c0:	6992      	ldr	r2, [r2, #24]
 80082c2:	641a      	str	r2, [r3, #64]	; 0x40
 80082c4:	e01e      	b.n	8008304 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80082c6:	f7fe f80f 	bl	80062e8 <HAL_GetTick>
 80082ca:	4602      	mov	r2, r0
 80082cc:	69fb      	ldr	r3, [r7, #28]
 80082ce:	1ad3      	subs	r3, r2, r3
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d90a      	bls.n	80082ea <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	691b      	ldr	r3, [r3, #16]
 80082d8:	f043 0208 	orr.w	r2, r3, #8
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	2203      	movs	r2, #3
 80082e4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80082e6:	2303      	movs	r3, #3
 80082e8:	e0c2      	b.n	8008470 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	681b      	ldr	r3, [r3, #0]
 80082ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	dbe8      	blt.n	80082c6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80082f4:	2001      	movs	r0, #1
 80082f6:	f7fe f803 	bl	8006300 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	68ba      	ldr	r2, [r7, #8]
 8008300:	6992      	ldr	r2, [r2, #24]
 8008302:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	681b      	ldr	r3, [r3, #0]
 8008308:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	f003 0310 	and.w	r3, r3, #16
 8008310:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8008314:	fa01 f303 	lsl.w	r3, r1, r3
 8008318:	43db      	mvns	r3, r3
 800831a:	ea02 0103 	and.w	r1, r2, r3
 800831e:	68bb      	ldr	r3, [r7, #8]
 8008320:	69da      	ldr	r2, [r3, #28]
 8008322:	687b      	ldr	r3, [r7, #4]
 8008324:	f003 0310 	and.w	r3, r3, #16
 8008328:	409a      	lsls	r2, r3
 800832a:	68fb      	ldr	r3, [r7, #12]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	430a      	orrs	r2, r1
 8008330:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	f003 0310 	and.w	r3, r3, #16
 800833e:	21ff      	movs	r1, #255	; 0xff
 8008340:	fa01 f303 	lsl.w	r3, r1, r3
 8008344:	43db      	mvns	r3, r3
 8008346:	ea02 0103 	and.w	r1, r2, r3
 800834a:	68bb      	ldr	r3, [r7, #8]
 800834c:	6a1a      	ldr	r2, [r3, #32]
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f003 0310 	and.w	r3, r3, #16
 8008354:	409a      	lsls	r2, r3
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	430a      	orrs	r2, r1
 800835c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800835e:	68bb      	ldr	r3, [r7, #8]
 8008360:	691b      	ldr	r3, [r3, #16]
 8008362:	2b01      	cmp	r3, #1
 8008364:	d11d      	bne.n	80083a2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	f003 0310 	and.w	r3, r3, #16
 8008374:	221f      	movs	r2, #31
 8008376:	fa02 f303 	lsl.w	r3, r2, r3
 800837a:	43db      	mvns	r3, r3
 800837c:	69ba      	ldr	r2, [r7, #24]
 800837e:	4013      	ands	r3, r2
 8008380:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8008382:	68bb      	ldr	r3, [r7, #8]
 8008384:	695b      	ldr	r3, [r3, #20]
 8008386:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	f003 0310 	and.w	r3, r3, #16
 800838e:	697a      	ldr	r2, [r7, #20]
 8008390:	fa02 f303 	lsl.w	r3, r2, r3
 8008394:	69ba      	ldr	r2, [r7, #24]
 8008396:	4313      	orrs	r3, r2
 8008398:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800839a:	68fb      	ldr	r3, [r7, #12]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	69ba      	ldr	r2, [r7, #24]
 80083a0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80083a2:	68fb      	ldr	r3, [r7, #12]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80083a8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80083aa:	687b      	ldr	r3, [r7, #4]
 80083ac:	f003 0310 	and.w	r3, r3, #16
 80083b0:	2207      	movs	r2, #7
 80083b2:	fa02 f303 	lsl.w	r3, r2, r3
 80083b6:	43db      	mvns	r3, r3
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	4013      	ands	r3, r2
 80083bc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	681a      	ldr	r2, [r3, #0]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	689b      	ldr	r3, [r3, #8]
 80083c6:	431a      	orrs	r2, r3
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	68db      	ldr	r3, [r3, #12]
 80083cc:	4313      	orrs	r3, r2
 80083ce:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	f003 0310 	and.w	r3, r3, #16
 80083d6:	697a      	ldr	r2, [r7, #20]
 80083d8:	fa02 f303 	lsl.w	r3, r2, r3
 80083dc:	69ba      	ldr	r2, [r7, #24]
 80083de:	4313      	orrs	r3, r2
 80083e0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	69ba      	ldr	r2, [r7, #24]
 80083e8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	681b      	ldr	r3, [r3, #0]
 80083ee:	6819      	ldr	r1, [r3, #0]
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f003 0310 	and.w	r3, r3, #16
 80083f6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80083fa:	fa02 f303 	lsl.w	r3, r2, r3
 80083fe:	43da      	mvns	r2, r3
 8008400:	68fb      	ldr	r3, [r7, #12]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	400a      	ands	r2, r1
 8008406:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8008408:	68fb      	ldr	r3, [r7, #12]
 800840a:	681b      	ldr	r3, [r3, #0]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	f003 0310 	and.w	r3, r3, #16
 8008416:	f640 72fc 	movw	r2, #4092	; 0xffc
 800841a:	fa02 f303 	lsl.w	r3, r2, r3
 800841e:	43db      	mvns	r3, r3
 8008420:	69ba      	ldr	r2, [r7, #24]
 8008422:	4013      	ands	r3, r2
 8008424:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8008426:	68bb      	ldr	r3, [r7, #8]
 8008428:	685b      	ldr	r3, [r3, #4]
 800842a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800842c:	687b      	ldr	r3, [r7, #4]
 800842e:	f003 0310 	and.w	r3, r3, #16
 8008432:	697a      	ldr	r2, [r7, #20]
 8008434:	fa02 f303 	lsl.w	r3, r2, r3
 8008438:	69ba      	ldr	r2, [r7, #24]
 800843a:	4313      	orrs	r3, r2
 800843c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	69ba      	ldr	r2, [r7, #24]
 8008444:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8008446:	68fb      	ldr	r3, [r7, #12]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	6819      	ldr	r1, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	f003 0310 	and.w	r3, r3, #16
 8008452:	22c0      	movs	r2, #192	; 0xc0
 8008454:	fa02 f303 	lsl.w	r3, r2, r3
 8008458:	43da      	mvns	r2, r3
 800845a:	68fb      	ldr	r3, [r7, #12]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	400a      	ands	r2, r1
 8008460:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8008462:	68fb      	ldr	r3, [r7, #12]
 8008464:	2201      	movs	r2, #1
 8008466:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8008468:	68fb      	ldr	r3, [r7, #12]
 800846a:	2200      	movs	r2, #0
 800846c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800846e:	2300      	movs	r3, #0
}
 8008470:	4618      	mov	r0, r3
 8008472:	3720      	adds	r7, #32
 8008474:	46bd      	mov	sp, r7
 8008476:	bd80      	pop	{r7, pc}

08008478 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8008478:	b580      	push	{r7, lr}
 800847a:	b084      	sub	sp, #16
 800847c:	af00      	add	r7, sp, #0
 800847e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008484:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8008486:	68f8      	ldr	r0, [r7, #12]
 8008488:	f7fb fe5e 	bl	8004148 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800848c:	68fb      	ldr	r3, [r7, #12]
 800848e:	2201      	movs	r2, #1
 8008490:	711a      	strb	r2, [r3, #4]
}
 8008492:	bf00      	nop
 8008494:	3710      	adds	r7, #16
 8008496:	46bd      	mov	sp, r7
 8008498:	bd80      	pop	{r7, pc}

0800849a <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 800849a:	b580      	push	{r7, lr}
 800849c:	b084      	sub	sp, #16
 800849e:	af00      	add	r7, sp, #0
 80084a0:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084a6:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 80084a8:	68f8      	ldr	r0, [r7, #12]
 80084aa:	f7fb fe3d 	bl	8004128 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 80084ae:	bf00      	nop
 80084b0:	3710      	adds	r7, #16
 80084b2:	46bd      	mov	sp, r7
 80084b4:	bd80      	pop	{r7, pc}

080084b6 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80084b6:	b580      	push	{r7, lr}
 80084b8:	b084      	sub	sp, #16
 80084ba:	af00      	add	r7, sp, #0
 80084bc:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084c2:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	691b      	ldr	r3, [r3, #16]
 80084c8:	f043 0204 	orr.w	r2, r3, #4
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80084d0:	68f8      	ldr	r0, [r7, #12]
 80084d2:	f7ff fea3 	bl	800821c <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	2201      	movs	r2, #1
 80084da:	711a      	strb	r2, [r3, #4]
}
 80084dc:	bf00      	nop
 80084de:	3710      	adds	r7, #16
 80084e0:	46bd      	mov	sp, r7
 80084e2:	bd80      	pop	{r7, pc}

080084e4 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80084e4:	b480      	push	{r7}
 80084e6:	b083      	sub	sp, #12
 80084e8:	af00      	add	r7, sp, #0
 80084ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80084ec:	bf00      	nop
 80084ee:	370c      	adds	r7, #12
 80084f0:	46bd      	mov	sp, r7
 80084f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f6:	4770      	bx	lr

080084f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80084f8:	b480      	push	{r7}
 80084fa:	b083      	sub	sp, #12
 80084fc:	af00      	add	r7, sp, #0
 80084fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8008514:	bf00      	nop
 8008516:	370c      	adds	r7, #12
 8008518:	46bd      	mov	sp, r7
 800851a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800851e:	4770      	bx	lr

08008520 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8008528:	bf00      	nop
 800852a:	370c      	adds	r7, #12
 800852c:	46bd      	mov	sp, r7
 800852e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008532:	4770      	bx	lr

08008534 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008540:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8008542:	68f8      	ldr	r0, [r7, #12]
 8008544:	f7ff ffce 	bl	80084e4 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	2201      	movs	r2, #1
 800854c:	711a      	strb	r2, [r3, #4]
}
 800854e:	bf00      	nop
 8008550:	3710      	adds	r7, #16
 8008552:	46bd      	mov	sp, r7
 8008554:	bd80      	pop	{r7, pc}

08008556 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8008556:	b580      	push	{r7, lr}
 8008558:	b084      	sub	sp, #16
 800855a:	af00      	add	r7, sp, #0
 800855c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008562:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8008564:	68f8      	ldr	r0, [r7, #12]
 8008566:	f7ff ffc7 	bl	80084f8 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800856a:	bf00      	nop
 800856c:	3710      	adds	r7, #16
 800856e:	46bd      	mov	sp, r7
 8008570:	bd80      	pop	{r7, pc}

08008572 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8008572:	b580      	push	{r7, lr}
 8008574:	b084      	sub	sp, #16
 8008576:	af00      	add	r7, sp, #0
 8008578:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800857e:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	691b      	ldr	r3, [r3, #16]
 8008584:	f043 0204 	orr.w	r2, r3, #4
 8008588:	68fb      	ldr	r3, [r7, #12]
 800858a:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 800858c:	68f8      	ldr	r0, [r7, #12]
 800858e:	f7ff ffbd 	bl	800850c <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8008592:	68fb      	ldr	r3, [r7, #12]
 8008594:	2201      	movs	r2, #1
 8008596:	711a      	strb	r2, [r3, #4]
}
 8008598:	bf00      	nop
 800859a:	3710      	adds	r7, #16
 800859c:	46bd      	mov	sp, r7
 800859e:	bd80      	pop	{r7, pc}

080085a0 <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80085a0:	b480      	push	{r7}
 80085a2:	b085      	sub	sp, #20
 80085a4:	af00      	add	r7, sp, #0
 80085a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d101      	bne.n	80085b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80085ae:	2301      	movs	r3, #1
 80085b0:	e098      	b.n	80086e4 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	461a      	mov	r2, r3
 80085b8:	4b4d      	ldr	r3, [pc, #308]	; (80086f0 <HAL_DMA_Init+0x150>)
 80085ba:	429a      	cmp	r2, r3
 80085bc:	d80f      	bhi.n	80085de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	461a      	mov	r2, r3
 80085c4:	4b4b      	ldr	r3, [pc, #300]	; (80086f4 <HAL_DMA_Init+0x154>)
 80085c6:	4413      	add	r3, r2
 80085c8:	4a4b      	ldr	r2, [pc, #300]	; (80086f8 <HAL_DMA_Init+0x158>)
 80085ca:	fba2 2303 	umull	r2, r3, r2, r3
 80085ce:	091b      	lsrs	r3, r3, #4
 80085d0:	009a      	lsls	r2, r3, #2
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	4a48      	ldr	r2, [pc, #288]	; (80086fc <HAL_DMA_Init+0x15c>)
 80085da:	641a      	str	r2, [r3, #64]	; 0x40
 80085dc:	e00e      	b.n	80085fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	461a      	mov	r2, r3
 80085e4:	4b46      	ldr	r3, [pc, #280]	; (8008700 <HAL_DMA_Init+0x160>)
 80085e6:	4413      	add	r3, r2
 80085e8:	4a43      	ldr	r2, [pc, #268]	; (80086f8 <HAL_DMA_Init+0x158>)
 80085ea:	fba2 2303 	umull	r2, r3, r2, r3
 80085ee:	091b      	lsrs	r3, r3, #4
 80085f0:	009a      	lsls	r2, r3, #2
 80085f2:	687b      	ldr	r3, [r7, #4]
 80085f4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	4a42      	ldr	r2, [pc, #264]	; (8008704 <HAL_DMA_Init+0x164>)
 80085fa:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2202      	movs	r2, #2
 8008600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800860c:	68fb      	ldr	r3, [r7, #12]
 800860e:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8008612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008616:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8008620:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	691b      	ldr	r3, [r3, #16]
 8008626:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800862c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800862e:	687b      	ldr	r3, [r7, #4]
 8008630:	699b      	ldr	r3, [r3, #24]
 8008632:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8008638:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6a1b      	ldr	r3, [r3, #32]
 800863e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8008640:	68fa      	ldr	r2, [r7, #12]
 8008642:	4313      	orrs	r3, r2
 8008644:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	68fa      	ldr	r2, [r7, #12]
 800864c:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	689b      	ldr	r3, [r3, #8]
 8008652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8008656:	d039      	beq.n	80086cc <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800865c:	4a27      	ldr	r2, [pc, #156]	; (80086fc <HAL_DMA_Init+0x15c>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d11a      	bne.n	8008698 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008662:	4b29      	ldr	r3, [pc, #164]	; (8008708 <HAL_DMA_Init+0x168>)
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800866a:	f003 031c 	and.w	r3, r3, #28
 800866e:	210f      	movs	r1, #15
 8008670:	fa01 f303 	lsl.w	r3, r1, r3
 8008674:	43db      	mvns	r3, r3
 8008676:	4924      	ldr	r1, [pc, #144]	; (8008708 <HAL_DMA_Init+0x168>)
 8008678:	4013      	ands	r3, r2
 800867a:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800867c:	4b22      	ldr	r3, [pc, #136]	; (8008708 <HAL_DMA_Init+0x168>)
 800867e:	681a      	ldr	r2, [r3, #0]
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	6859      	ldr	r1, [r3, #4]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008688:	f003 031c 	and.w	r3, r3, #28
 800868c:	fa01 f303 	lsl.w	r3, r1, r3
 8008690:	491d      	ldr	r1, [pc, #116]	; (8008708 <HAL_DMA_Init+0x168>)
 8008692:	4313      	orrs	r3, r2
 8008694:	600b      	str	r3, [r1, #0]
 8008696:	e019      	b.n	80086cc <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8008698:	4b1c      	ldr	r3, [pc, #112]	; (800870c <HAL_DMA_Init+0x16c>)
 800869a:	681a      	ldr	r2, [r3, #0]
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086a0:	f003 031c 	and.w	r3, r3, #28
 80086a4:	210f      	movs	r1, #15
 80086a6:	fa01 f303 	lsl.w	r3, r1, r3
 80086aa:	43db      	mvns	r3, r3
 80086ac:	4917      	ldr	r1, [pc, #92]	; (800870c <HAL_DMA_Init+0x16c>)
 80086ae:	4013      	ands	r3, r2
 80086b0:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 80086b2:	4b16      	ldr	r3, [pc, #88]	; (800870c <HAL_DMA_Init+0x16c>)
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6859      	ldr	r1, [r3, #4]
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086be:	f003 031c 	and.w	r3, r3, #28
 80086c2:	fa01 f303 	lsl.w	r3, r1, r3
 80086c6:	4911      	ldr	r1, [pc, #68]	; (800870c <HAL_DMA_Init+0x16c>)
 80086c8:	4313      	orrs	r3, r2
 80086ca:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	2200      	movs	r2, #0
 80086d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	2201      	movs	r2, #1
 80086d6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80086da:	687b      	ldr	r3, [r7, #4]
 80086dc:	2200      	movs	r2, #0
 80086de:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80086e2:	2300      	movs	r3, #0
}
 80086e4:	4618      	mov	r0, r3
 80086e6:	3714      	adds	r7, #20
 80086e8:	46bd      	mov	sp, r7
 80086ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086ee:	4770      	bx	lr
 80086f0:	40020407 	.word	0x40020407
 80086f4:	bffdfff8 	.word	0xbffdfff8
 80086f8:	cccccccd 	.word	0xcccccccd
 80086fc:	40020000 	.word	0x40020000
 8008700:	bffdfbf8 	.word	0xbffdfbf8
 8008704:	40020400 	.word	0x40020400
 8008708:	400200a8 	.word	0x400200a8
 800870c:	400204a8 	.word	0x400204a8

08008710 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008710:	b580      	push	{r7, lr}
 8008712:	b086      	sub	sp, #24
 8008714:	af00      	add	r7, sp, #0
 8008716:	60f8      	str	r0, [r7, #12]
 8008718:	60b9      	str	r1, [r7, #8]
 800871a:	607a      	str	r2, [r7, #4]
 800871c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800871e:	2300      	movs	r3, #0
 8008720:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8008722:	68fb      	ldr	r3, [r7, #12]
 8008724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8008728:	2b01      	cmp	r3, #1
 800872a:	d101      	bne.n	8008730 <HAL_DMA_Start_IT+0x20>
 800872c:	2302      	movs	r3, #2
 800872e:	e04b      	b.n	80087c8 <HAL_DMA_Start_IT+0xb8>
 8008730:	68fb      	ldr	r3, [r7, #12]
 8008732:	2201      	movs	r2, #1
 8008734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800873e:	b2db      	uxtb	r3, r3
 8008740:	2b01      	cmp	r3, #1
 8008742:	d13a      	bne.n	80087ba <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	2202      	movs	r2, #2
 8008748:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800874c:	68fb      	ldr	r3, [r7, #12]
 800874e:	2200      	movs	r2, #0
 8008750:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008752:	68fb      	ldr	r3, [r7, #12]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	681a      	ldr	r2, [r3, #0]
 8008758:	68fb      	ldr	r3, [r7, #12]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 0201 	bic.w	r2, r2, #1
 8008760:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008762:	683b      	ldr	r3, [r7, #0]
 8008764:	687a      	ldr	r2, [r7, #4]
 8008766:	68b9      	ldr	r1, [r7, #8]
 8008768:	68f8      	ldr	r0, [r7, #12]
 800876a:	f000 f8e0 	bl	800892e <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800876e:	68fb      	ldr	r3, [r7, #12]
 8008770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008772:	2b00      	cmp	r3, #0
 8008774:	d008      	beq.n	8008788 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	681b      	ldr	r3, [r3, #0]
 800877a:	681a      	ldr	r2, [r3, #0]
 800877c:	68fb      	ldr	r3, [r7, #12]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	f042 020e 	orr.w	r2, r2, #14
 8008784:	601a      	str	r2, [r3, #0]
 8008786:	e00f      	b.n	80087a8 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	681a      	ldr	r2, [r3, #0]
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f022 0204 	bic.w	r2, r2, #4
 8008796:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	681a      	ldr	r2, [r3, #0]
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	f042 020a 	orr.w	r2, r2, #10
 80087a6:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80087a8:	68fb      	ldr	r3, [r7, #12]
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	681a      	ldr	r2, [r3, #0]
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f042 0201 	orr.w	r2, r2, #1
 80087b6:	601a      	str	r2, [r3, #0]
 80087b8:	e005      	b.n	80087c6 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2200      	movs	r2, #0
 80087be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80087c2:	2302      	movs	r3, #2
 80087c4:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80087c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80087c8:	4618      	mov	r0, r3
 80087ca:	3718      	adds	r7, #24
 80087cc:	46bd      	mov	sp, r7
 80087ce:	bd80      	pop	{r7, pc}

080087d0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80087d0:	b580      	push	{r7, lr}
 80087d2:	b084      	sub	sp, #16
 80087d4:	af00      	add	r7, sp, #0
 80087d6:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80087ec:	f003 031c 	and.w	r3, r3, #28
 80087f0:	2204      	movs	r2, #4
 80087f2:	409a      	lsls	r2, r3
 80087f4:	68fb      	ldr	r3, [r7, #12]
 80087f6:	4013      	ands	r3, r2
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d026      	beq.n	800884a <HAL_DMA_IRQHandler+0x7a>
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	f003 0304 	and.w	r3, r3, #4
 8008802:	2b00      	cmp	r3, #0
 8008804:	d021      	beq.n	800884a <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f003 0320 	and.w	r3, r3, #32
 8008810:	2b00      	cmp	r3, #0
 8008812:	d107      	bne.n	8008824 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	681a      	ldr	r2, [r3, #0]
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	f022 0204 	bic.w	r2, r2, #4
 8008822:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008828:	f003 021c 	and.w	r2, r3, #28
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008830:	2104      	movs	r1, #4
 8008832:	fa01 f202 	lsl.w	r2, r1, r2
 8008836:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800883c:	2b00      	cmp	r3, #0
 800883e:	d071      	beq.n	8008924 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008844:	6878      	ldr	r0, [r7, #4]
 8008846:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8008848:	e06c      	b.n	8008924 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800884e:	f003 031c 	and.w	r3, r3, #28
 8008852:	2202      	movs	r2, #2
 8008854:	409a      	lsls	r2, r3
 8008856:	68fb      	ldr	r3, [r7, #12]
 8008858:	4013      	ands	r3, r2
 800885a:	2b00      	cmp	r3, #0
 800885c:	d02e      	beq.n	80088bc <HAL_DMA_IRQHandler+0xec>
 800885e:	68bb      	ldr	r3, [r7, #8]
 8008860:	f003 0302 	and.w	r3, r3, #2
 8008864:	2b00      	cmp	r3, #0
 8008866:	d029      	beq.n	80088bc <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	f003 0320 	and.w	r3, r3, #32
 8008872:	2b00      	cmp	r3, #0
 8008874:	d10b      	bne.n	800888e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	681a      	ldr	r2, [r3, #0]
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	f022 020a 	bic.w	r2, r2, #10
 8008884:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	2201      	movs	r2, #1
 800888a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 800888e:	687b      	ldr	r3, [r7, #4]
 8008890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008892:	f003 021c 	and.w	r2, r3, #28
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800889a:	2102      	movs	r1, #2
 800889c:	fa01 f202 	lsl.w	r2, r1, r2
 80088a0:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	2200      	movs	r2, #0
 80088a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088ae:	2b00      	cmp	r3, #0
 80088b0:	d038      	beq.n	8008924 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80088ba:	e033      	b.n	8008924 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088c0:	f003 031c 	and.w	r3, r3, #28
 80088c4:	2208      	movs	r2, #8
 80088c6:	409a      	lsls	r2, r3
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	4013      	ands	r3, r2
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d02a      	beq.n	8008926 <HAL_DMA_IRQHandler+0x156>
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	f003 0308 	and.w	r3, r3, #8
 80088d6:	2b00      	cmp	r3, #0
 80088d8:	d025      	beq.n	8008926 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681a      	ldr	r2, [r3, #0]
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	f022 020e 	bic.w	r2, r2, #14
 80088e8:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80088ee:	f003 021c 	and.w	r2, r3, #28
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088f6:	2101      	movs	r1, #1
 80088f8:	fa01 f202 	lsl.w	r2, r1, r2
 80088fc:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2201      	movs	r2, #1
 8008902:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	2201      	movs	r2, #1
 8008908:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800890c:	687b      	ldr	r3, [r7, #4]
 800890e:	2200      	movs	r2, #0
 8008910:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008918:	2b00      	cmp	r3, #0
 800891a:	d004      	beq.n	8008926 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8008924:	bf00      	nop
 8008926:	bf00      	nop
}
 8008928:	3710      	adds	r7, #16
 800892a:	46bd      	mov	sp, r7
 800892c:	bd80      	pop	{r7, pc}

0800892e <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800892e:	b480      	push	{r7}
 8008930:	b085      	sub	sp, #20
 8008932:	af00      	add	r7, sp, #0
 8008934:	60f8      	str	r0, [r7, #12]
 8008936:	60b9      	str	r1, [r7, #8]
 8008938:	607a      	str	r2, [r7, #4]
 800893a:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008940:	f003 021c 	and.w	r2, r3, #28
 8008944:	68fb      	ldr	r3, [r7, #12]
 8008946:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008948:	2101      	movs	r1, #1
 800894a:	fa01 f202 	lsl.w	r2, r1, r2
 800894e:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	683a      	ldr	r2, [r7, #0]
 8008956:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	689b      	ldr	r3, [r3, #8]
 800895c:	2b10      	cmp	r3, #16
 800895e:	d108      	bne.n	8008972 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	687a      	ldr	r2, [r7, #4]
 8008966:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	68ba      	ldr	r2, [r7, #8]
 800896e:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8008970:	e007      	b.n	8008982 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	68ba      	ldr	r2, [r7, #8]
 8008978:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	687a      	ldr	r2, [r7, #4]
 8008980:	60da      	str	r2, [r3, #12]
}
 8008982:	bf00      	nop
 8008984:	3714      	adds	r7, #20
 8008986:	46bd      	mov	sp, r7
 8008988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898c:	4770      	bx	lr
	...

08008990 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008990:	b480      	push	{r7}
 8008992:	b087      	sub	sp, #28
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
 8008998:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800899a:	2300      	movs	r3, #0
 800899c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800899e:	e148      	b.n	8008c32 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	681a      	ldr	r2, [r3, #0]
 80089a4:	2101      	movs	r1, #1
 80089a6:	697b      	ldr	r3, [r7, #20]
 80089a8:	fa01 f303 	lsl.w	r3, r1, r3
 80089ac:	4013      	ands	r3, r2
 80089ae:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	2b00      	cmp	r3, #0
 80089b4:	f000 813a 	beq.w	8008c2c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80089b8:	683b      	ldr	r3, [r7, #0]
 80089ba:	685b      	ldr	r3, [r3, #4]
 80089bc:	f003 0303 	and.w	r3, r3, #3
 80089c0:	2b01      	cmp	r3, #1
 80089c2:	d005      	beq.n	80089d0 <HAL_GPIO_Init+0x40>
 80089c4:	683b      	ldr	r3, [r7, #0]
 80089c6:	685b      	ldr	r3, [r3, #4]
 80089c8:	f003 0303 	and.w	r3, r3, #3
 80089cc:	2b02      	cmp	r3, #2
 80089ce:	d130      	bne.n	8008a32 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	689b      	ldr	r3, [r3, #8]
 80089d4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80089d6:	697b      	ldr	r3, [r7, #20]
 80089d8:	005b      	lsls	r3, r3, #1
 80089da:	2203      	movs	r2, #3
 80089dc:	fa02 f303 	lsl.w	r3, r2, r3
 80089e0:	43db      	mvns	r3, r3
 80089e2:	693a      	ldr	r2, [r7, #16]
 80089e4:	4013      	ands	r3, r2
 80089e6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80089e8:	683b      	ldr	r3, [r7, #0]
 80089ea:	68da      	ldr	r2, [r3, #12]
 80089ec:	697b      	ldr	r3, [r7, #20]
 80089ee:	005b      	lsls	r3, r3, #1
 80089f0:	fa02 f303 	lsl.w	r3, r2, r3
 80089f4:	693a      	ldr	r2, [r7, #16]
 80089f6:	4313      	orrs	r3, r2
 80089f8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	693a      	ldr	r2, [r7, #16]
 80089fe:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	685b      	ldr	r3, [r3, #4]
 8008a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8008a06:	2201      	movs	r2, #1
 8008a08:	697b      	ldr	r3, [r7, #20]
 8008a0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a0e:	43db      	mvns	r3, r3
 8008a10:	693a      	ldr	r2, [r7, #16]
 8008a12:	4013      	ands	r3, r2
 8008a14:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008a16:	683b      	ldr	r3, [r7, #0]
 8008a18:	685b      	ldr	r3, [r3, #4]
 8008a1a:	091b      	lsrs	r3, r3, #4
 8008a1c:	f003 0201 	and.w	r2, r3, #1
 8008a20:	697b      	ldr	r3, [r7, #20]
 8008a22:	fa02 f303 	lsl.w	r3, r2, r3
 8008a26:	693a      	ldr	r2, [r7, #16]
 8008a28:	4313      	orrs	r3, r2
 8008a2a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	693a      	ldr	r2, [r7, #16]
 8008a30:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008a32:	683b      	ldr	r3, [r7, #0]
 8008a34:	685b      	ldr	r3, [r3, #4]
 8008a36:	f003 0303 	and.w	r3, r3, #3
 8008a3a:	2b03      	cmp	r3, #3
 8008a3c:	d017      	beq.n	8008a6e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	68db      	ldr	r3, [r3, #12]
 8008a42:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	005b      	lsls	r3, r3, #1
 8008a48:	2203      	movs	r2, #3
 8008a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4e:	43db      	mvns	r3, r3
 8008a50:	693a      	ldr	r2, [r7, #16]
 8008a52:	4013      	ands	r3, r2
 8008a54:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008a56:	683b      	ldr	r3, [r7, #0]
 8008a58:	689a      	ldr	r2, [r3, #8]
 8008a5a:	697b      	ldr	r3, [r7, #20]
 8008a5c:	005b      	lsls	r3, r3, #1
 8008a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8008a62:	693a      	ldr	r2, [r7, #16]
 8008a64:	4313      	orrs	r3, r2
 8008a66:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	693a      	ldr	r2, [r7, #16]
 8008a6c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008a6e:	683b      	ldr	r3, [r7, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f003 0303 	and.w	r3, r3, #3
 8008a76:	2b02      	cmp	r3, #2
 8008a78:	d123      	bne.n	8008ac2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	08da      	lsrs	r2, r3, #3
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	3208      	adds	r2, #8
 8008a82:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a86:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008a88:	697b      	ldr	r3, [r7, #20]
 8008a8a:	f003 0307 	and.w	r3, r3, #7
 8008a8e:	009b      	lsls	r3, r3, #2
 8008a90:	220f      	movs	r2, #15
 8008a92:	fa02 f303 	lsl.w	r3, r2, r3
 8008a96:	43db      	mvns	r3, r3
 8008a98:	693a      	ldr	r2, [r7, #16]
 8008a9a:	4013      	ands	r3, r2
 8008a9c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008a9e:	683b      	ldr	r3, [r7, #0]
 8008aa0:	691a      	ldr	r2, [r3, #16]
 8008aa2:	697b      	ldr	r3, [r7, #20]
 8008aa4:	f003 0307 	and.w	r3, r3, #7
 8008aa8:	009b      	lsls	r3, r3, #2
 8008aaa:	fa02 f303 	lsl.w	r3, r2, r3
 8008aae:	693a      	ldr	r2, [r7, #16]
 8008ab0:	4313      	orrs	r3, r2
 8008ab2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8008ab4:	697b      	ldr	r3, [r7, #20]
 8008ab6:	08da      	lsrs	r2, r3, #3
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	3208      	adds	r2, #8
 8008abc:	6939      	ldr	r1, [r7, #16]
 8008abe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008ac8:	697b      	ldr	r3, [r7, #20]
 8008aca:	005b      	lsls	r3, r3, #1
 8008acc:	2203      	movs	r2, #3
 8008ace:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad2:	43db      	mvns	r3, r3
 8008ad4:	693a      	ldr	r2, [r7, #16]
 8008ad6:	4013      	ands	r3, r2
 8008ad8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008ada:	683b      	ldr	r3, [r7, #0]
 8008adc:	685b      	ldr	r3, [r3, #4]
 8008ade:	f003 0203 	and.w	r2, r3, #3
 8008ae2:	697b      	ldr	r3, [r7, #20]
 8008ae4:	005b      	lsls	r3, r3, #1
 8008ae6:	fa02 f303 	lsl.w	r3, r2, r3
 8008aea:	693a      	ldr	r2, [r7, #16]
 8008aec:	4313      	orrs	r3, r2
 8008aee:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8008af6:	683b      	ldr	r3, [r7, #0]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8008afe:	2b00      	cmp	r3, #0
 8008b00:	f000 8094 	beq.w	8008c2c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008b04:	4b52      	ldr	r3, [pc, #328]	; (8008c50 <HAL_GPIO_Init+0x2c0>)
 8008b06:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b08:	4a51      	ldr	r2, [pc, #324]	; (8008c50 <HAL_GPIO_Init+0x2c0>)
 8008b0a:	f043 0301 	orr.w	r3, r3, #1
 8008b0e:	6613      	str	r3, [r2, #96]	; 0x60
 8008b10:	4b4f      	ldr	r3, [pc, #316]	; (8008c50 <HAL_GPIO_Init+0x2c0>)
 8008b12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8008b14:	f003 0301 	and.w	r3, r3, #1
 8008b18:	60bb      	str	r3, [r7, #8]
 8008b1a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8008b1c:	4a4d      	ldr	r2, [pc, #308]	; (8008c54 <HAL_GPIO_Init+0x2c4>)
 8008b1e:	697b      	ldr	r3, [r7, #20]
 8008b20:	089b      	lsrs	r3, r3, #2
 8008b22:	3302      	adds	r3, #2
 8008b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008b28:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f003 0303 	and.w	r3, r3, #3
 8008b30:	009b      	lsls	r3, r3, #2
 8008b32:	220f      	movs	r2, #15
 8008b34:	fa02 f303 	lsl.w	r3, r2, r3
 8008b38:	43db      	mvns	r3, r3
 8008b3a:	693a      	ldr	r2, [r7, #16]
 8008b3c:	4013      	ands	r3, r2
 8008b3e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8008b46:	d00d      	beq.n	8008b64 <HAL_GPIO_Init+0x1d4>
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	4a43      	ldr	r2, [pc, #268]	; (8008c58 <HAL_GPIO_Init+0x2c8>)
 8008b4c:	4293      	cmp	r3, r2
 8008b4e:	d007      	beq.n	8008b60 <HAL_GPIO_Init+0x1d0>
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	4a42      	ldr	r2, [pc, #264]	; (8008c5c <HAL_GPIO_Init+0x2cc>)
 8008b54:	4293      	cmp	r3, r2
 8008b56:	d101      	bne.n	8008b5c <HAL_GPIO_Init+0x1cc>
 8008b58:	2302      	movs	r3, #2
 8008b5a:	e004      	b.n	8008b66 <HAL_GPIO_Init+0x1d6>
 8008b5c:	2307      	movs	r3, #7
 8008b5e:	e002      	b.n	8008b66 <HAL_GPIO_Init+0x1d6>
 8008b60:	2301      	movs	r3, #1
 8008b62:	e000      	b.n	8008b66 <HAL_GPIO_Init+0x1d6>
 8008b64:	2300      	movs	r3, #0
 8008b66:	697a      	ldr	r2, [r7, #20]
 8008b68:	f002 0203 	and.w	r2, r2, #3
 8008b6c:	0092      	lsls	r2, r2, #2
 8008b6e:	4093      	lsls	r3, r2
 8008b70:	693a      	ldr	r2, [r7, #16]
 8008b72:	4313      	orrs	r3, r2
 8008b74:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008b76:	4937      	ldr	r1, [pc, #220]	; (8008c54 <HAL_GPIO_Init+0x2c4>)
 8008b78:	697b      	ldr	r3, [r7, #20]
 8008b7a:	089b      	lsrs	r3, r3, #2
 8008b7c:	3302      	adds	r3, #2
 8008b7e:	693a      	ldr	r2, [r7, #16]
 8008b80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008b84:	4b36      	ldr	r3, [pc, #216]	; (8008c60 <HAL_GPIO_Init+0x2d0>)
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008b8a:	68fb      	ldr	r3, [r7, #12]
 8008b8c:	43db      	mvns	r3, r3
 8008b8e:	693a      	ldr	r2, [r7, #16]
 8008b90:	4013      	ands	r3, r2
 8008b92:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d003      	beq.n	8008ba8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8008ba0:	693a      	ldr	r2, [r7, #16]
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	4313      	orrs	r3, r2
 8008ba6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8008ba8:	4a2d      	ldr	r2, [pc, #180]	; (8008c60 <HAL_GPIO_Init+0x2d0>)
 8008baa:	693b      	ldr	r3, [r7, #16]
 8008bac:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8008bae:	4b2c      	ldr	r3, [pc, #176]	; (8008c60 <HAL_GPIO_Init+0x2d0>)
 8008bb0:	68db      	ldr	r3, [r3, #12]
 8008bb2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008bb4:	68fb      	ldr	r3, [r7, #12]
 8008bb6:	43db      	mvns	r3, r3
 8008bb8:	693a      	ldr	r2, [r7, #16]
 8008bba:	4013      	ands	r3, r2
 8008bbc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8008bbe:	683b      	ldr	r3, [r7, #0]
 8008bc0:	685b      	ldr	r3, [r3, #4]
 8008bc2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d003      	beq.n	8008bd2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8008bca:	693a      	ldr	r2, [r7, #16]
 8008bcc:	68fb      	ldr	r3, [r7, #12]
 8008bce:	4313      	orrs	r3, r2
 8008bd0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008bd2:	4a23      	ldr	r2, [pc, #140]	; (8008c60 <HAL_GPIO_Init+0x2d0>)
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8008bd8:	4b21      	ldr	r3, [pc, #132]	; (8008c60 <HAL_GPIO_Init+0x2d0>)
 8008bda:	685b      	ldr	r3, [r3, #4]
 8008bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008bde:	68fb      	ldr	r3, [r7, #12]
 8008be0:	43db      	mvns	r3, r3
 8008be2:	693a      	ldr	r2, [r7, #16]
 8008be4:	4013      	ands	r3, r2
 8008be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8008be8:	683b      	ldr	r3, [r7, #0]
 8008bea:	685b      	ldr	r3, [r3, #4]
 8008bec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008bf0:	2b00      	cmp	r3, #0
 8008bf2:	d003      	beq.n	8008bfc <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8008bf4:	693a      	ldr	r2, [r7, #16]
 8008bf6:	68fb      	ldr	r3, [r7, #12]
 8008bf8:	4313      	orrs	r3, r2
 8008bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8008bfc:	4a18      	ldr	r2, [pc, #96]	; (8008c60 <HAL_GPIO_Init+0x2d0>)
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8008c02:	4b17      	ldr	r3, [pc, #92]	; (8008c60 <HAL_GPIO_Init+0x2d0>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008c08:	68fb      	ldr	r3, [r7, #12]
 8008c0a:	43db      	mvns	r3, r3
 8008c0c:	693a      	ldr	r2, [r7, #16]
 8008c0e:	4013      	ands	r3, r2
 8008c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8008c12:	683b      	ldr	r3, [r7, #0]
 8008c14:	685b      	ldr	r3, [r3, #4]
 8008c16:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d003      	beq.n	8008c26 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8008c1e:	693a      	ldr	r2, [r7, #16]
 8008c20:	68fb      	ldr	r3, [r7, #12]
 8008c22:	4313      	orrs	r3, r2
 8008c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008c26:	4a0e      	ldr	r2, [pc, #56]	; (8008c60 <HAL_GPIO_Init+0x2d0>)
 8008c28:	693b      	ldr	r3, [r7, #16]
 8008c2a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8008c2c:	697b      	ldr	r3, [r7, #20]
 8008c2e:	3301      	adds	r3, #1
 8008c30:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8008c32:	683b      	ldr	r3, [r7, #0]
 8008c34:	681a      	ldr	r2, [r3, #0]
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	fa22 f303 	lsr.w	r3, r2, r3
 8008c3c:	2b00      	cmp	r3, #0
 8008c3e:	f47f aeaf 	bne.w	80089a0 <HAL_GPIO_Init+0x10>
  }
}
 8008c42:	bf00      	nop
 8008c44:	bf00      	nop
 8008c46:	371c      	adds	r7, #28
 8008c48:	46bd      	mov	sp, r7
 8008c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c4e:	4770      	bx	lr
 8008c50:	40021000 	.word	0x40021000
 8008c54:	40010000 	.word	0x40010000
 8008c58:	48000400 	.word	0x48000400
 8008c5c:	48000800 	.word	0x48000800
 8008c60:	40010400 	.word	0x40010400

08008c64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008c64:	b480      	push	{r7}
 8008c66:	b085      	sub	sp, #20
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
 8008c6c:	460b      	mov	r3, r1
 8008c6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8008c70:	687b      	ldr	r3, [r7, #4]
 8008c72:	691a      	ldr	r2, [r3, #16]
 8008c74:	887b      	ldrh	r3, [r7, #2]
 8008c76:	4013      	ands	r3, r2
 8008c78:	2b00      	cmp	r3, #0
 8008c7a:	d002      	beq.n	8008c82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008c7c:	2301      	movs	r3, #1
 8008c7e:	73fb      	strb	r3, [r7, #15]
 8008c80:	e001      	b.n	8008c86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8008c82:	2300      	movs	r3, #0
 8008c84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8008c86:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c88:	4618      	mov	r0, r3
 8008c8a:	3714      	adds	r7, #20
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c92:	4770      	bx	lr

08008c94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8008c94:	b480      	push	{r7}
 8008c96:	b083      	sub	sp, #12
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	807b      	strh	r3, [r7, #2]
 8008ca0:	4613      	mov	r3, r2
 8008ca2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8008ca4:	787b      	ldrb	r3, [r7, #1]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d003      	beq.n	8008cb2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8008caa:	887a      	ldrh	r2, [r7, #2]
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8008cb0:	e002      	b.n	8008cb8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8008cb2:	887a      	ldrh	r2, [r7, #2]
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8008cb8:	bf00      	nop
 8008cba:	370c      	adds	r7, #12
 8008cbc:	46bd      	mov	sp, r7
 8008cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc2:	4770      	bx	lr

08008cc4 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008cc4:	b480      	push	{r7}
 8008cc6:	b085      	sub	sp, #20
 8008cc8:	af00      	add	r7, sp, #0
 8008cca:	6078      	str	r0, [r7, #4]
 8008ccc:	460b      	mov	r3, r1
 8008cce:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	695b      	ldr	r3, [r3, #20]
 8008cd4:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008cd6:	887a      	ldrh	r2, [r7, #2]
 8008cd8:	68fb      	ldr	r3, [r7, #12]
 8008cda:	4013      	ands	r3, r2
 8008cdc:	041a      	lsls	r2, r3, #16
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	43d9      	mvns	r1, r3
 8008ce2:	887b      	ldrh	r3, [r7, #2]
 8008ce4:	400b      	ands	r3, r1
 8008ce6:	431a      	orrs	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	619a      	str	r2, [r3, #24]
}
 8008cec:	bf00      	nop
 8008cee:	3714      	adds	r7, #20
 8008cf0:	46bd      	mov	sp, r7
 8008cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cf6:	4770      	bx	lr

08008cf8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8008cf8:	b580      	push	{r7, lr}
 8008cfa:	b082      	sub	sp, #8
 8008cfc:	af00      	add	r7, sp, #0
 8008cfe:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8008d00:	687b      	ldr	r3, [r7, #4]
 8008d02:	2b00      	cmp	r3, #0
 8008d04:	d101      	bne.n	8008d0a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8008d06:	2301      	movs	r3, #1
 8008d08:	e081      	b.n	8008e0e <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008d10:	b2db      	uxtb	r3, r3
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d106      	bne.n	8008d24 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8008d1e:	6878      	ldr	r0, [r7, #4]
 8008d20:	f7fc f854 	bl	8004dcc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2224      	movs	r2, #36	; 0x24
 8008d28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	681a      	ldr	r2, [r3, #0]
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	f022 0201 	bic.w	r2, r2, #1
 8008d3a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	685a      	ldr	r2, [r3, #4]
 8008d40:	687b      	ldr	r3, [r7, #4]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8008d48:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	689a      	ldr	r2, [r3, #8]
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008d58:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68db      	ldr	r3, [r3, #12]
 8008d5e:	2b01      	cmp	r3, #1
 8008d60:	d107      	bne.n	8008d72 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	689a      	ldr	r2, [r3, #8]
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008d6e:	609a      	str	r2, [r3, #8]
 8008d70:	e006      	b.n	8008d80 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	689a      	ldr	r2, [r3, #8]
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8008d7e:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	68db      	ldr	r3, [r3, #12]
 8008d84:	2b02      	cmp	r3, #2
 8008d86:	d104      	bne.n	8008d92 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	685b      	ldr	r3, [r3, #4]
 8008d98:	687a      	ldr	r2, [r7, #4]
 8008d9a:	6812      	ldr	r2, [r2, #0]
 8008d9c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8008da0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8008da4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	68da      	ldr	r2, [r3, #12]
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8008db4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	691a      	ldr	r2, [r3, #16]
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	695b      	ldr	r3, [r3, #20]
 8008dbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008dc2:	687b      	ldr	r3, [r7, #4]
 8008dc4:	699b      	ldr	r3, [r3, #24]
 8008dc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	430a      	orrs	r2, r1
 8008dce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	69d9      	ldr	r1, [r3, #28]
 8008dd4:	687b      	ldr	r3, [r7, #4]
 8008dd6:	6a1a      	ldr	r2, [r3, #32]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	430a      	orrs	r2, r1
 8008dde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8008de0:	687b      	ldr	r3, [r7, #4]
 8008de2:	681b      	ldr	r3, [r3, #0]
 8008de4:	681a      	ldr	r2, [r3, #0]
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f042 0201 	orr.w	r2, r2, #1
 8008dee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	2200      	movs	r2, #0
 8008df4:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008df6:	687b      	ldr	r3, [r7, #4]
 8008df8:	2220      	movs	r2, #32
 8008dfa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2200      	movs	r2, #0
 8008e02:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e04:	687b      	ldr	r3, [r7, #4]
 8008e06:	2200      	movs	r2, #0
 8008e08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8008e0c:	2300      	movs	r3, #0
}
 8008e0e:	4618      	mov	r0, r3
 8008e10:	3708      	adds	r7, #8
 8008e12:	46bd      	mov	sp, r7
 8008e14:	bd80      	pop	{r7, pc}
	...

08008e18 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8008e18:	b580      	push	{r7, lr}
 8008e1a:	b088      	sub	sp, #32
 8008e1c:	af02      	add	r7, sp, #8
 8008e1e:	60f8      	str	r0, [r7, #12]
 8008e20:	607a      	str	r2, [r7, #4]
 8008e22:	461a      	mov	r2, r3
 8008e24:	460b      	mov	r3, r1
 8008e26:	817b      	strh	r3, [r7, #10]
 8008e28:	4613      	mov	r3, r2
 8008e2a:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008e2c:	68fb      	ldr	r3, [r7, #12]
 8008e2e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008e32:	b2db      	uxtb	r3, r3
 8008e34:	2b20      	cmp	r3, #32
 8008e36:	f040 80da 	bne.w	8008fee <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008e40:	2b01      	cmp	r3, #1
 8008e42:	d101      	bne.n	8008e48 <HAL_I2C_Master_Transmit+0x30>
 8008e44:	2302      	movs	r3, #2
 8008e46:	e0d3      	b.n	8008ff0 <HAL_I2C_Master_Transmit+0x1d8>
 8008e48:	68fb      	ldr	r3, [r7, #12]
 8008e4a:	2201      	movs	r2, #1
 8008e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008e50:	f7fd fa4a 	bl	80062e8 <HAL_GetTick>
 8008e54:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008e56:	697b      	ldr	r3, [r7, #20]
 8008e58:	9300      	str	r3, [sp, #0]
 8008e5a:	2319      	movs	r3, #25
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8008e62:	68f8      	ldr	r0, [r7, #12]
 8008e64:	f000 f8f0 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008e68:	4603      	mov	r3, r0
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d001      	beq.n	8008e72 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008e6e:	2301      	movs	r3, #1
 8008e70:	e0be      	b.n	8008ff0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008e72:	68fb      	ldr	r3, [r7, #12]
 8008e74:	2221      	movs	r2, #33	; 0x21
 8008e76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	2210      	movs	r2, #16
 8008e7e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	2200      	movs	r2, #0
 8008e86:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	687a      	ldr	r2, [r7, #4]
 8008e8c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008e8e:	68fb      	ldr	r3, [r7, #12]
 8008e90:	893a      	ldrh	r2, [r7, #8]
 8008e92:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8008e94:	68fb      	ldr	r3, [r7, #12]
 8008e96:	2200      	movs	r2, #0
 8008e98:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008e9a:	68fb      	ldr	r3, [r7, #12]
 8008e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008e9e:	b29b      	uxth	r3, r3
 8008ea0:	2bff      	cmp	r3, #255	; 0xff
 8008ea2:	d90e      	bls.n	8008ec2 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	22ff      	movs	r2, #255	; 0xff
 8008ea8:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008eae:	b2da      	uxtb	r2, r3
 8008eb0:	8979      	ldrh	r1, [r7, #10]
 8008eb2:	4b51      	ldr	r3, [pc, #324]	; (8008ff8 <HAL_I2C_Master_Transmit+0x1e0>)
 8008eb4:	9300      	str	r3, [sp, #0]
 8008eb6:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008eba:	68f8      	ldr	r0, [r7, #12]
 8008ebc:	f000 fa6c 	bl	8009398 <I2C_TransferConfig>
 8008ec0:	e06c      	b.n	8008f9c <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8008ec2:	68fb      	ldr	r3, [r7, #12]
 8008ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008ec6:	b29a      	uxth	r2, r3
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008ed0:	b2da      	uxtb	r2, r3
 8008ed2:	8979      	ldrh	r1, [r7, #10]
 8008ed4:	4b48      	ldr	r3, [pc, #288]	; (8008ff8 <HAL_I2C_Master_Transmit+0x1e0>)
 8008ed6:	9300      	str	r3, [sp, #0]
 8008ed8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008edc:	68f8      	ldr	r0, [r7, #12]
 8008ede:	f000 fa5b 	bl	8009398 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 8008ee2:	e05b      	b.n	8008f9c <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008ee4:	697a      	ldr	r2, [r7, #20]
 8008ee6:	6a39      	ldr	r1, [r7, #32]
 8008ee8:	68f8      	ldr	r0, [r7, #12]
 8008eea:	f000 f8ed 	bl	80090c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8008eee:	4603      	mov	r3, r0
 8008ef0:	2b00      	cmp	r3, #0
 8008ef2:	d001      	beq.n	8008ef8 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8008ef4:	2301      	movs	r3, #1
 8008ef6:	e07b      	b.n	8008ff0 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008efc:	781a      	ldrb	r2, [r3, #0]
 8008efe:	68fb      	ldr	r3, [r7, #12]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008f08:	1c5a      	adds	r2, r3, #1
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	3b01      	subs	r3, #1
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f20:	3b01      	subs	r3, #1
 8008f22:	b29a      	uxth	r2, r3
 8008f24:	68fb      	ldr	r3, [r7, #12]
 8008f26:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f2c:	b29b      	uxth	r3, r3
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d034      	beq.n	8008f9c <HAL_I2C_Master_Transmit+0x184>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d130      	bne.n	8008f9c <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8008f3a:	697b      	ldr	r3, [r7, #20]
 8008f3c:	9300      	str	r3, [sp, #0]
 8008f3e:	6a3b      	ldr	r3, [r7, #32]
 8008f40:	2200      	movs	r2, #0
 8008f42:	2180      	movs	r1, #128	; 0x80
 8008f44:	68f8      	ldr	r0, [r7, #12]
 8008f46:	f000 f87f 	bl	8009048 <I2C_WaitOnFlagUntilTimeout>
 8008f4a:	4603      	mov	r3, r0
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	d001      	beq.n	8008f54 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008f50:	2301      	movs	r3, #1
 8008f52:	e04d      	b.n	8008ff0 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008f54:	68fb      	ldr	r3, [r7, #12]
 8008f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f58:	b29b      	uxth	r3, r3
 8008f5a:	2bff      	cmp	r3, #255	; 0xff
 8008f5c:	d90e      	bls.n	8008f7c <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	22ff      	movs	r2, #255	; 0xff
 8008f62:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	8979      	ldrh	r1, [r7, #10]
 8008f6c:	2300      	movs	r3, #0
 8008f6e:	9300      	str	r3, [sp, #0]
 8008f70:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008f74:	68f8      	ldr	r0, [r7, #12]
 8008f76:	f000 fa0f 	bl	8009398 <I2C_TransferConfig>
 8008f7a:	e00f      	b.n	8008f9c <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008f80:	b29a      	uxth	r2, r3
 8008f82:	68fb      	ldr	r3, [r7, #12]
 8008f84:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008f8a:	b2da      	uxtb	r2, r3
 8008f8c:	8979      	ldrh	r1, [r7, #10]
 8008f8e:	2300      	movs	r3, #0
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008f96:	68f8      	ldr	r0, [r7, #12]
 8008f98:	f000 f9fe 	bl	8009398 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008fa0:	b29b      	uxth	r3, r3
 8008fa2:	2b00      	cmp	r3, #0
 8008fa4:	d19e      	bne.n	8008ee4 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fa6:	697a      	ldr	r2, [r7, #20]
 8008fa8:	6a39      	ldr	r1, [r7, #32]
 8008faa:	68f8      	ldr	r0, [r7, #12]
 8008fac:	f000 f8cc 	bl	8009148 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008fb0:	4603      	mov	r3, r0
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	d001      	beq.n	8008fba <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8008fb6:	2301      	movs	r3, #1
 8008fb8:	e01a      	b.n	8008ff0 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008fba:	68fb      	ldr	r3, [r7, #12]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2220      	movs	r2, #32
 8008fc0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	6859      	ldr	r1, [r3, #4]
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	4b0b      	ldr	r3, [pc, #44]	; (8008ffc <HAL_I2C_Master_Transmit+0x1e4>)
 8008fce:	400b      	ands	r3, r1
 8008fd0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8008fd2:	68fb      	ldr	r3, [r7, #12]
 8008fd4:	2220      	movs	r2, #32
 8008fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	2200      	movs	r2, #0
 8008fde:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	2200      	movs	r2, #0
 8008fe6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008fea:	2300      	movs	r3, #0
 8008fec:	e000      	b.n	8008ff0 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8008fee:	2302      	movs	r3, #2
  }
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3718      	adds	r7, #24
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}
 8008ff8:	80002000 	.word	0x80002000
 8008ffc:	fe00e800 	.word	0xfe00e800

08009000 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8009000:	b480      	push	{r7}
 8009002:	b083      	sub	sp, #12
 8009004:	af00      	add	r7, sp, #0
 8009006:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8009008:	687b      	ldr	r3, [r7, #4]
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	699b      	ldr	r3, [r3, #24]
 800900e:	f003 0302 	and.w	r3, r3, #2
 8009012:	2b02      	cmp	r3, #2
 8009014:	d103      	bne.n	800901e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	2200      	movs	r2, #0
 800901c:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800901e:	687b      	ldr	r3, [r7, #4]
 8009020:	681b      	ldr	r3, [r3, #0]
 8009022:	699b      	ldr	r3, [r3, #24]
 8009024:	f003 0301 	and.w	r3, r3, #1
 8009028:	2b01      	cmp	r3, #1
 800902a:	d007      	beq.n	800903c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	681b      	ldr	r3, [r3, #0]
 8009030:	699a      	ldr	r2, [r3, #24]
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	f042 0201 	orr.w	r2, r2, #1
 800903a:	619a      	str	r2, [r3, #24]
  }
}
 800903c:	bf00      	nop
 800903e:	370c      	adds	r7, #12
 8009040:	46bd      	mov	sp, r7
 8009042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009046:	4770      	bx	lr

08009048 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8009048:	b580      	push	{r7, lr}
 800904a:	b084      	sub	sp, #16
 800904c:	af00      	add	r7, sp, #0
 800904e:	60f8      	str	r0, [r7, #12]
 8009050:	60b9      	str	r1, [r7, #8]
 8009052:	603b      	str	r3, [r7, #0]
 8009054:	4613      	mov	r3, r2
 8009056:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8009058:	e022      	b.n	80090a0 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800905a:	683b      	ldr	r3, [r7, #0]
 800905c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009060:	d01e      	beq.n	80090a0 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009062:	f7fd f941 	bl	80062e8 <HAL_GetTick>
 8009066:	4602      	mov	r2, r0
 8009068:	69bb      	ldr	r3, [r7, #24]
 800906a:	1ad3      	subs	r3, r2, r3
 800906c:	683a      	ldr	r2, [r7, #0]
 800906e:	429a      	cmp	r2, r3
 8009070:	d302      	bcc.n	8009078 <I2C_WaitOnFlagUntilTimeout+0x30>
 8009072:	683b      	ldr	r3, [r7, #0]
 8009074:	2b00      	cmp	r3, #0
 8009076:	d113      	bne.n	80090a0 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009078:	68fb      	ldr	r3, [r7, #12]
 800907a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800907c:	f043 0220 	orr.w	r2, r3, #32
 8009080:	68fb      	ldr	r3, [r7, #12]
 8009082:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009084:	68fb      	ldr	r3, [r7, #12]
 8009086:	2220      	movs	r2, #32
 8009088:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800908c:	68fb      	ldr	r3, [r7, #12]
 800908e:	2200      	movs	r2, #0
 8009090:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	2200      	movs	r2, #0
 8009098:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800909c:	2301      	movs	r3, #1
 800909e:	e00f      	b.n	80090c0 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80090a0:	68fb      	ldr	r3, [r7, #12]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	699a      	ldr	r2, [r3, #24]
 80090a6:	68bb      	ldr	r3, [r7, #8]
 80090a8:	4013      	ands	r3, r2
 80090aa:	68ba      	ldr	r2, [r7, #8]
 80090ac:	429a      	cmp	r2, r3
 80090ae:	bf0c      	ite	eq
 80090b0:	2301      	moveq	r3, #1
 80090b2:	2300      	movne	r3, #0
 80090b4:	b2db      	uxtb	r3, r3
 80090b6:	461a      	mov	r2, r3
 80090b8:	79fb      	ldrb	r3, [r7, #7]
 80090ba:	429a      	cmp	r2, r3
 80090bc:	d0cd      	beq.n	800905a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80090be:	2300      	movs	r3, #0
}
 80090c0:	4618      	mov	r0, r3
 80090c2:	3710      	adds	r7, #16
 80090c4:	46bd      	mov	sp, r7
 80090c6:	bd80      	pop	{r7, pc}

080090c8 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	60f8      	str	r0, [r7, #12]
 80090d0:	60b9      	str	r1, [r7, #8]
 80090d2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80090d4:	e02c      	b.n	8009130 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80090d6:	687a      	ldr	r2, [r7, #4]
 80090d8:	68b9      	ldr	r1, [r7, #8]
 80090da:	68f8      	ldr	r0, [r7, #12]
 80090dc:	f000 f870 	bl	80091c0 <I2C_IsErrorOccurred>
 80090e0:	4603      	mov	r3, r0
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d001      	beq.n	80090ea <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80090e6:	2301      	movs	r3, #1
 80090e8:	e02a      	b.n	8009140 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80090ea:	68bb      	ldr	r3, [r7, #8]
 80090ec:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80090f0:	d01e      	beq.n	8009130 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80090f2:	f7fd f8f9 	bl	80062e8 <HAL_GetTick>
 80090f6:	4602      	mov	r2, r0
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	1ad3      	subs	r3, r2, r3
 80090fc:	68ba      	ldr	r2, [r7, #8]
 80090fe:	429a      	cmp	r2, r3
 8009100:	d302      	bcc.n	8009108 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8009102:	68bb      	ldr	r3, [r7, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d113      	bne.n	8009130 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009108:	68fb      	ldr	r3, [r7, #12]
 800910a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800910c:	f043 0220 	orr.w	r2, r3, #32
 8009110:	68fb      	ldr	r3, [r7, #12]
 8009112:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	2220      	movs	r2, #32
 8009118:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800911c:	68fb      	ldr	r3, [r7, #12]
 800911e:	2200      	movs	r2, #0
 8009120:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8009124:	68fb      	ldr	r3, [r7, #12]
 8009126:	2200      	movs	r2, #0
 8009128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 800912c:	2301      	movs	r3, #1
 800912e:	e007      	b.n	8009140 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8009130:	68fb      	ldr	r3, [r7, #12]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	699b      	ldr	r3, [r3, #24]
 8009136:	f003 0302 	and.w	r3, r3, #2
 800913a:	2b02      	cmp	r3, #2
 800913c:	d1cb      	bne.n	80090d6 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800913e:	2300      	movs	r3, #0
}
 8009140:	4618      	mov	r0, r3
 8009142:	3710      	adds	r7, #16
 8009144:	46bd      	mov	sp, r7
 8009146:	bd80      	pop	{r7, pc}

08009148 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8009148:	b580      	push	{r7, lr}
 800914a:	b084      	sub	sp, #16
 800914c:	af00      	add	r7, sp, #0
 800914e:	60f8      	str	r0, [r7, #12]
 8009150:	60b9      	str	r1, [r7, #8]
 8009152:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009154:	e028      	b.n	80091a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8009156:	687a      	ldr	r2, [r7, #4]
 8009158:	68b9      	ldr	r1, [r7, #8]
 800915a:	68f8      	ldr	r0, [r7, #12]
 800915c:	f000 f830 	bl	80091c0 <I2C_IsErrorOccurred>
 8009160:	4603      	mov	r3, r0
 8009162:	2b00      	cmp	r3, #0
 8009164:	d001      	beq.n	800916a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8009166:	2301      	movs	r3, #1
 8009168:	e026      	b.n	80091b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800916a:	f7fd f8bd 	bl	80062e8 <HAL_GetTick>
 800916e:	4602      	mov	r2, r0
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	1ad3      	subs	r3, r2, r3
 8009174:	68ba      	ldr	r2, [r7, #8]
 8009176:	429a      	cmp	r2, r3
 8009178:	d302      	bcc.n	8009180 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800917a:	68bb      	ldr	r3, [r7, #8]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d113      	bne.n	80091a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009184:	f043 0220 	orr.w	r2, r3, #32
 8009188:	68fb      	ldr	r3, [r7, #12]
 800918a:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 800918c:	68fb      	ldr	r3, [r7, #12]
 800918e:	2220      	movs	r2, #32
 8009190:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8009194:	68fb      	ldr	r3, [r7, #12]
 8009196:	2200      	movs	r2, #0
 8009198:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800919c:	68fb      	ldr	r3, [r7, #12]
 800919e:	2200      	movs	r2, #0
 80091a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80091a4:	2301      	movs	r3, #1
 80091a6:	e007      	b.n	80091b8 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80091a8:	68fb      	ldr	r3, [r7, #12]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	699b      	ldr	r3, [r3, #24]
 80091ae:	f003 0320 	and.w	r3, r3, #32
 80091b2:	2b20      	cmp	r3, #32
 80091b4:	d1cf      	bne.n	8009156 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80091b6:	2300      	movs	r3, #0
}
 80091b8:	4618      	mov	r0, r3
 80091ba:	3710      	adds	r7, #16
 80091bc:	46bd      	mov	sp, r7
 80091be:	bd80      	pop	{r7, pc}

080091c0 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80091c0:	b580      	push	{r7, lr}
 80091c2:	b08a      	sub	sp, #40	; 0x28
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	60f8      	str	r0, [r7, #12]
 80091c8:	60b9      	str	r1, [r7, #8]
 80091ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80091cc:	2300      	movs	r3, #0
 80091ce:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80091d2:	68fb      	ldr	r3, [r7, #12]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	699b      	ldr	r3, [r3, #24]
 80091d8:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80091da:	2300      	movs	r3, #0
 80091dc:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80091de:	687b      	ldr	r3, [r7, #4]
 80091e0:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80091e2:	69bb      	ldr	r3, [r7, #24]
 80091e4:	f003 0310 	and.w	r3, r3, #16
 80091e8:	2b00      	cmp	r3, #0
 80091ea:	d075      	beq.n	80092d8 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80091ec:	68fb      	ldr	r3, [r7, #12]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	2210      	movs	r2, #16
 80091f2:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80091f4:	e056      	b.n	80092a4 <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80091f6:	68bb      	ldr	r3, [r7, #8]
 80091f8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80091fc:	d052      	beq.n	80092a4 <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80091fe:	f7fd f873 	bl	80062e8 <HAL_GetTick>
 8009202:	4602      	mov	r2, r0
 8009204:	69fb      	ldr	r3, [r7, #28]
 8009206:	1ad3      	subs	r3, r2, r3
 8009208:	68ba      	ldr	r2, [r7, #8]
 800920a:	429a      	cmp	r2, r3
 800920c:	d302      	bcc.n	8009214 <I2C_IsErrorOccurred+0x54>
 800920e:	68bb      	ldr	r3, [r7, #8]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d147      	bne.n	80092a4 <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	681b      	ldr	r3, [r3, #0]
 8009218:	685b      	ldr	r3, [r3, #4]
 800921a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800921e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8009226:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8009228:	68fb      	ldr	r3, [r7, #12]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	699b      	ldr	r3, [r3, #24]
 800922e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009232:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009236:	d12e      	bne.n	8009296 <I2C_IsErrorOccurred+0xd6>
 8009238:	697b      	ldr	r3, [r7, #20]
 800923a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800923e:	d02a      	beq.n	8009296 <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8009240:	7cfb      	ldrb	r3, [r7, #19]
 8009242:	2b20      	cmp	r3, #32
 8009244:	d027      	beq.n	8009296 <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	685a      	ldr	r2, [r3, #4]
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009254:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8009256:	f7fd f847 	bl	80062e8 <HAL_GetTick>
 800925a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800925c:	e01b      	b.n	8009296 <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800925e:	f7fd f843 	bl	80062e8 <HAL_GetTick>
 8009262:	4602      	mov	r2, r0
 8009264:	69fb      	ldr	r3, [r7, #28]
 8009266:	1ad3      	subs	r3, r2, r3
 8009268:	2b19      	cmp	r3, #25
 800926a:	d914      	bls.n	8009296 <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800926c:	68fb      	ldr	r3, [r7, #12]
 800926e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009270:	f043 0220 	orr.w	r2, r3, #32
 8009274:	68fb      	ldr	r3, [r7, #12]
 8009276:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	2220      	movs	r2, #32
 800927c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8009280:	68fb      	ldr	r3, [r7, #12]
 8009282:	2200      	movs	r2, #0
 8009284:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	2200      	movs	r2, #0
 800928c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8009290:	2301      	movs	r3, #1
 8009292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8009296:	68fb      	ldr	r3, [r7, #12]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	699b      	ldr	r3, [r3, #24]
 800929c:	f003 0320 	and.w	r3, r3, #32
 80092a0:	2b20      	cmp	r3, #32
 80092a2:	d1dc      	bne.n	800925e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	699b      	ldr	r3, [r3, #24]
 80092aa:	f003 0320 	and.w	r3, r3, #32
 80092ae:	2b20      	cmp	r3, #32
 80092b0:	d003      	beq.n	80092ba <I2C_IsErrorOccurred+0xfa>
 80092b2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092b6:	2b00      	cmp	r3, #0
 80092b8:	d09d      	beq.n	80091f6 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80092ba:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80092be:	2b00      	cmp	r3, #0
 80092c0:	d103      	bne.n	80092ca <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	2220      	movs	r2, #32
 80092c8:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80092ca:	6a3b      	ldr	r3, [r7, #32]
 80092cc:	f043 0304 	orr.w	r3, r3, #4
 80092d0:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80092d2:	2301      	movs	r3, #1
 80092d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80092d8:	68fb      	ldr	r3, [r7, #12]
 80092da:	681b      	ldr	r3, [r3, #0]
 80092dc:	699b      	ldr	r3, [r3, #24]
 80092de:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80092e0:	69bb      	ldr	r3, [r7, #24]
 80092e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d00b      	beq.n	8009302 <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80092ea:	6a3b      	ldr	r3, [r7, #32]
 80092ec:	f043 0301 	orr.w	r3, r3, #1
 80092f0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80092f2:	68fb      	ldr	r3, [r7, #12]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80092fa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80092fc:	2301      	movs	r3, #1
 80092fe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8009302:	69bb      	ldr	r3, [r7, #24]
 8009304:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009308:	2b00      	cmp	r3, #0
 800930a:	d00b      	beq.n	8009324 <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800930c:	6a3b      	ldr	r3, [r7, #32]
 800930e:	f043 0308 	orr.w	r3, r3, #8
 8009312:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800931c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800931e:	2301      	movs	r3, #1
 8009320:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800932a:	2b00      	cmp	r3, #0
 800932c:	d00b      	beq.n	8009346 <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800932e:	6a3b      	ldr	r3, [r7, #32]
 8009330:	f043 0302 	orr.w	r3, r3, #2
 8009334:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800933e:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8009340:	2301      	movs	r3, #1
 8009342:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 8009346:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800934a:	2b00      	cmp	r3, #0
 800934c:	d01c      	beq.n	8009388 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800934e:	68f8      	ldr	r0, [r7, #12]
 8009350:	f7ff fe56 	bl	8009000 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	6859      	ldr	r1, [r3, #4]
 800935a:	68fb      	ldr	r3, [r7, #12]
 800935c:	681a      	ldr	r2, [r3, #0]
 800935e:	4b0d      	ldr	r3, [pc, #52]	; (8009394 <I2C_IsErrorOccurred+0x1d4>)
 8009360:	400b      	ands	r3, r1
 8009362:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009368:	6a3b      	ldr	r3, [r7, #32]
 800936a:	431a      	orrs	r2, r3
 800936c:	68fb      	ldr	r3, [r7, #12]
 800936e:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	2220      	movs	r2, #32
 8009374:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	2200      	movs	r2, #0
 800937c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	2200      	movs	r2, #0
 8009384:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8009388:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 800938c:	4618      	mov	r0, r3
 800938e:	3728      	adds	r7, #40	; 0x28
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	fe00e800 	.word	0xfe00e800

08009398 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8009398:	b480      	push	{r7}
 800939a:	b087      	sub	sp, #28
 800939c:	af00      	add	r7, sp, #0
 800939e:	60f8      	str	r0, [r7, #12]
 80093a0:	607b      	str	r3, [r7, #4]
 80093a2:	460b      	mov	r3, r1
 80093a4:	817b      	strh	r3, [r7, #10]
 80093a6:	4613      	mov	r3, r2
 80093a8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093aa:	897b      	ldrh	r3, [r7, #10]
 80093ac:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80093b0:	7a7b      	ldrb	r3, [r7, #9]
 80093b2:	041b      	lsls	r3, r3, #16
 80093b4:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093b8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80093be:	6a3b      	ldr	r3, [r7, #32]
 80093c0:	4313      	orrs	r3, r2
 80093c2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80093c6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80093c8:	68fb      	ldr	r3, [r7, #12]
 80093ca:	681b      	ldr	r3, [r3, #0]
 80093cc:	685a      	ldr	r2, [r3, #4]
 80093ce:	6a3b      	ldr	r3, [r7, #32]
 80093d0:	0d5b      	lsrs	r3, r3, #21
 80093d2:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80093d6:	4b08      	ldr	r3, [pc, #32]	; (80093f8 <I2C_TransferConfig+0x60>)
 80093d8:	430b      	orrs	r3, r1
 80093da:	43db      	mvns	r3, r3
 80093dc:	ea02 0103 	and.w	r1, r2, r3
 80093e0:	68fb      	ldr	r3, [r7, #12]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	697a      	ldr	r2, [r7, #20]
 80093e6:	430a      	orrs	r2, r1
 80093e8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80093ea:	bf00      	nop
 80093ec:	371c      	adds	r7, #28
 80093ee:	46bd      	mov	sp, r7
 80093f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093f4:	4770      	bx	lr
 80093f6:	bf00      	nop
 80093f8:	03ff63ff 	.word	0x03ff63ff

080093fc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80093fc:	b480      	push	{r7}
 80093fe:	b083      	sub	sp, #12
 8009400:	af00      	add	r7, sp, #0
 8009402:	6078      	str	r0, [r7, #4]
 8009404:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800940c:	b2db      	uxtb	r3, r3
 800940e:	2b20      	cmp	r3, #32
 8009410:	d138      	bne.n	8009484 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009412:	687b      	ldr	r3, [r7, #4]
 8009414:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8009418:	2b01      	cmp	r3, #1
 800941a:	d101      	bne.n	8009420 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800941c:	2302      	movs	r3, #2
 800941e:	e032      	b.n	8009486 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	2201      	movs	r2, #1
 8009424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009428:	687b      	ldr	r3, [r7, #4]
 800942a:	2224      	movs	r2, #36	; 0x24
 800942c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	681a      	ldr	r2, [r3, #0]
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	f022 0201 	bic.w	r2, r2, #1
 800943e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	681a      	ldr	r2, [r3, #0]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800944e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	681b      	ldr	r3, [r3, #0]
 8009454:	6819      	ldr	r1, [r3, #0]
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	683a      	ldr	r2, [r7, #0]
 800945c:	430a      	orrs	r2, r1
 800945e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	681a      	ldr	r2, [r3, #0]
 8009466:	687b      	ldr	r3, [r7, #4]
 8009468:	681b      	ldr	r3, [r3, #0]
 800946a:	f042 0201 	orr.w	r2, r2, #1
 800946e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009470:	687b      	ldr	r3, [r7, #4]
 8009472:	2220      	movs	r2, #32
 8009474:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2200      	movs	r2, #0
 800947c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009480:	2300      	movs	r3, #0
 8009482:	e000      	b.n	8009486 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8009484:	2302      	movs	r3, #2
  }
}
 8009486:	4618      	mov	r0, r3
 8009488:	370c      	adds	r7, #12
 800948a:	46bd      	mov	sp, r7
 800948c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009490:	4770      	bx	lr

08009492 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8009492:	b480      	push	{r7}
 8009494:	b085      	sub	sp, #20
 8009496:	af00      	add	r7, sp, #0
 8009498:	6078      	str	r0, [r7, #4]
 800949a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b20      	cmp	r3, #32
 80094a6:	d139      	bne.n	800951c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80094ae:	2b01      	cmp	r3, #1
 80094b0:	d101      	bne.n	80094b6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80094b2:	2302      	movs	r3, #2
 80094b4:	e033      	b.n	800951e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2201      	movs	r2, #1
 80094ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2224      	movs	r2, #36	; 0x24
 80094c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	681b      	ldr	r3, [r3, #0]
 80094ca:	681a      	ldr	r2, [r3, #0]
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	f022 0201 	bic.w	r2, r2, #1
 80094d4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	681b      	ldr	r3, [r3, #0]
 80094da:	681b      	ldr	r3, [r3, #0]
 80094dc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80094de:	68fb      	ldr	r3, [r7, #12]
 80094e0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80094e4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	021b      	lsls	r3, r3, #8
 80094ea:	68fa      	ldr	r2, [r7, #12]
 80094ec:	4313      	orrs	r3, r2
 80094ee:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	68fa      	ldr	r2, [r7, #12]
 80094f6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80094f8:	687b      	ldr	r3, [r7, #4]
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	f042 0201 	orr.w	r2, r2, #1
 8009506:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2220      	movs	r2, #32
 800950c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	2200      	movs	r2, #0
 8009514:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8009518:	2300      	movs	r3, #0
 800951a:	e000      	b.n	800951e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800951c:	2302      	movs	r3, #2
  }
}
 800951e:	4618      	mov	r0, r3
 8009520:	3714      	adds	r7, #20
 8009522:	46bd      	mov	sp, r7
 8009524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009528:	4770      	bx	lr
	...

0800952c <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 800952c:	b480      	push	{r7}
 800952e:	b085      	sub	sp, #20
 8009530:	af00      	add	r7, sp, #0
 8009532:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8009534:	4b0b      	ldr	r3, [pc, #44]	; (8009564 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009536:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009538:	4a0a      	ldr	r2, [pc, #40]	; (8009564 <HAL_I2CEx_EnableFastModePlus+0x38>)
 800953a:	f043 0301 	orr.w	r3, r3, #1
 800953e:	6613      	str	r3, [r2, #96]	; 0x60
 8009540:	4b08      	ldr	r3, [pc, #32]	; (8009564 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8009542:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009544:	f003 0301 	and.w	r3, r3, #1
 8009548:	60fb      	str	r3, [r7, #12]
 800954a:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 800954c:	4b06      	ldr	r3, [pc, #24]	; (8009568 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800954e:	685a      	ldr	r2, [r3, #4]
 8009550:	4905      	ldr	r1, [pc, #20]	; (8009568 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	4313      	orrs	r3, r2
 8009556:	604b      	str	r3, [r1, #4]
}
 8009558:	bf00      	nop
 800955a:	3714      	adds	r7, #20
 800955c:	46bd      	mov	sp, r7
 800955e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009562:	4770      	bx	lr
 8009564:	40021000 	.word	0x40021000
 8009568:	40010000 	.word	0x40010000

0800956c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800956c:	b480      	push	{r7}
 800956e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009570:	4b05      	ldr	r3, [pc, #20]	; (8009588 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	4a04      	ldr	r2, [pc, #16]	; (8009588 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8009576:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800957a:	6013      	str	r3, [r2, #0]
}
 800957c:	bf00      	nop
 800957e:	46bd      	mov	sp, r7
 8009580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009584:	4770      	bx	lr
 8009586:	bf00      	nop
 8009588:	40007000 	.word	0x40007000

0800958c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800958c:	b480      	push	{r7}
 800958e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8009590:	4b04      	ldr	r3, [pc, #16]	; (80095a4 <HAL_PWREx_GetVoltageRange+0x18>)
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8009598:	4618      	mov	r0, r3
 800959a:	46bd      	mov	sp, r7
 800959c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a0:	4770      	bx	lr
 80095a2:	bf00      	nop
 80095a4:	40007000 	.word	0x40007000

080095a8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095b6:	d130      	bne.n	800961a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80095b8:	4b23      	ldr	r3, [pc, #140]	; (8009648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80095c0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80095c4:	d038      	beq.n	8009638 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80095c6:	4b20      	ldr	r3, [pc, #128]	; (8009648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80095ce:	4a1e      	ldr	r2, [pc, #120]	; (8009648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095d0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80095d4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80095d6:	4b1d      	ldr	r3, [pc, #116]	; (800964c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80095d8:	681b      	ldr	r3, [r3, #0]
 80095da:	2232      	movs	r2, #50	; 0x32
 80095dc:	fb02 f303 	mul.w	r3, r2, r3
 80095e0:	4a1b      	ldr	r2, [pc, #108]	; (8009650 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80095e2:	fba2 2303 	umull	r2, r3, r2, r3
 80095e6:	0c9b      	lsrs	r3, r3, #18
 80095e8:	3301      	adds	r3, #1
 80095ea:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80095ec:	e002      	b.n	80095f4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80095ee:	68fb      	ldr	r3, [r7, #12]
 80095f0:	3b01      	subs	r3, #1
 80095f2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80095f4:	4b14      	ldr	r3, [pc, #80]	; (8009648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80095f6:	695b      	ldr	r3, [r3, #20]
 80095f8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80095fc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009600:	d102      	bne.n	8009608 <HAL_PWREx_ControlVoltageScaling+0x60>
 8009602:	68fb      	ldr	r3, [r7, #12]
 8009604:	2b00      	cmp	r3, #0
 8009606:	d1f2      	bne.n	80095ee <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8009608:	4b0f      	ldr	r3, [pc, #60]	; (8009648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800960a:	695b      	ldr	r3, [r3, #20]
 800960c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009610:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009614:	d110      	bne.n	8009638 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8009616:	2303      	movs	r3, #3
 8009618:	e00f      	b.n	800963a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800961a:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8009622:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009626:	d007      	beq.n	8009638 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8009628:	4b07      	ldr	r3, [pc, #28]	; (8009648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800962a:	681b      	ldr	r3, [r3, #0]
 800962c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8009630:	4a05      	ldr	r2, [pc, #20]	; (8009648 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8009632:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8009636:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8009638:	2300      	movs	r3, #0
}
 800963a:	4618      	mov	r0, r3
 800963c:	3714      	adds	r7, #20
 800963e:	46bd      	mov	sp, r7
 8009640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009644:	4770      	bx	lr
 8009646:	bf00      	nop
 8009648:	40007000 	.word	0x40007000
 800964c:	20000048 	.word	0x20000048
 8009650:	431bde83 	.word	0x431bde83

08009654 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009654:	b580      	push	{r7, lr}
 8009656:	b088      	sub	sp, #32
 8009658:	af00      	add	r7, sp, #0
 800965a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d102      	bne.n	8009668 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8009662:	2301      	movs	r3, #1
 8009664:	f000 bc02 	b.w	8009e6c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009668:	4b96      	ldr	r3, [pc, #600]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 800966a:	689b      	ldr	r3, [r3, #8]
 800966c:	f003 030c 	and.w	r3, r3, #12
 8009670:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8009672:	4b94      	ldr	r3, [pc, #592]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009674:	68db      	ldr	r3, [r3, #12]
 8009676:	f003 0303 	and.w	r3, r3, #3
 800967a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	681b      	ldr	r3, [r3, #0]
 8009680:	f003 0310 	and.w	r3, r3, #16
 8009684:	2b00      	cmp	r3, #0
 8009686:	f000 80e4 	beq.w	8009852 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800968a:	69bb      	ldr	r3, [r7, #24]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d007      	beq.n	80096a0 <HAL_RCC_OscConfig+0x4c>
 8009690:	69bb      	ldr	r3, [r7, #24]
 8009692:	2b0c      	cmp	r3, #12
 8009694:	f040 808b 	bne.w	80097ae <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8009698:	697b      	ldr	r3, [r7, #20]
 800969a:	2b01      	cmp	r3, #1
 800969c:	f040 8087 	bne.w	80097ae <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80096a0:	4b88      	ldr	r3, [pc, #544]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	f003 0302 	and.w	r3, r3, #2
 80096a8:	2b00      	cmp	r3, #0
 80096aa:	d005      	beq.n	80096b8 <HAL_RCC_OscConfig+0x64>
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	699b      	ldr	r3, [r3, #24]
 80096b0:	2b00      	cmp	r3, #0
 80096b2:	d101      	bne.n	80096b8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80096b4:	2301      	movs	r3, #1
 80096b6:	e3d9      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	6a1a      	ldr	r2, [r3, #32]
 80096bc:	4b81      	ldr	r3, [pc, #516]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80096be:	681b      	ldr	r3, [r3, #0]
 80096c0:	f003 0308 	and.w	r3, r3, #8
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d004      	beq.n	80096d2 <HAL_RCC_OscConfig+0x7e>
 80096c8:	4b7e      	ldr	r3, [pc, #504]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096d0:	e005      	b.n	80096de <HAL_RCC_OscConfig+0x8a>
 80096d2:	4b7c      	ldr	r3, [pc, #496]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80096d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80096d8:	091b      	lsrs	r3, r3, #4
 80096da:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80096de:	4293      	cmp	r3, r2
 80096e0:	d223      	bcs.n	800972a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a1b      	ldr	r3, [r3, #32]
 80096e6:	4618      	mov	r0, r3
 80096e8:	f000 fdbe 	bl	800a268 <RCC_SetFlashLatencyFromMSIRange>
 80096ec:	4603      	mov	r3, r0
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d001      	beq.n	80096f6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e3ba      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80096f6:	4b73      	ldr	r3, [pc, #460]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a72      	ldr	r2, [pc, #456]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80096fc:	f043 0308 	orr.w	r3, r3, #8
 8009700:	6013      	str	r3, [r2, #0]
 8009702:	4b70      	ldr	r3, [pc, #448]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009704:	681b      	ldr	r3, [r3, #0]
 8009706:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	6a1b      	ldr	r3, [r3, #32]
 800970e:	496d      	ldr	r1, [pc, #436]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009710:	4313      	orrs	r3, r2
 8009712:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009714:	4b6b      	ldr	r3, [pc, #428]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009716:	685b      	ldr	r3, [r3, #4]
 8009718:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	69db      	ldr	r3, [r3, #28]
 8009720:	021b      	lsls	r3, r3, #8
 8009722:	4968      	ldr	r1, [pc, #416]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009724:	4313      	orrs	r3, r2
 8009726:	604b      	str	r3, [r1, #4]
 8009728:	e025      	b.n	8009776 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800972a:	4b66      	ldr	r3, [pc, #408]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 800972c:	681b      	ldr	r3, [r3, #0]
 800972e:	4a65      	ldr	r2, [pc, #404]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009730:	f043 0308 	orr.w	r3, r3, #8
 8009734:	6013      	str	r3, [r2, #0]
 8009736:	4b63      	ldr	r3, [pc, #396]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009738:	681b      	ldr	r3, [r3, #0]
 800973a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	6a1b      	ldr	r3, [r3, #32]
 8009742:	4960      	ldr	r1, [pc, #384]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009744:	4313      	orrs	r3, r2
 8009746:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009748:	4b5e      	ldr	r3, [pc, #376]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 800974a:	685b      	ldr	r3, [r3, #4]
 800974c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	69db      	ldr	r3, [r3, #28]
 8009754:	021b      	lsls	r3, r3, #8
 8009756:	495b      	ldr	r1, [pc, #364]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009758:	4313      	orrs	r3, r2
 800975a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800975c:	69bb      	ldr	r3, [r7, #24]
 800975e:	2b00      	cmp	r3, #0
 8009760:	d109      	bne.n	8009776 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6a1b      	ldr	r3, [r3, #32]
 8009766:	4618      	mov	r0, r3
 8009768:	f000 fd7e 	bl	800a268 <RCC_SetFlashLatencyFromMSIRange>
 800976c:	4603      	mov	r3, r0
 800976e:	2b00      	cmp	r3, #0
 8009770:	d001      	beq.n	8009776 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8009772:	2301      	movs	r3, #1
 8009774:	e37a      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8009776:	f000 fc81 	bl	800a07c <HAL_RCC_GetSysClockFreq>
 800977a:	4602      	mov	r2, r0
 800977c:	4b51      	ldr	r3, [pc, #324]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	091b      	lsrs	r3, r3, #4
 8009782:	f003 030f 	and.w	r3, r3, #15
 8009786:	4950      	ldr	r1, [pc, #320]	; (80098c8 <HAL_RCC_OscConfig+0x274>)
 8009788:	5ccb      	ldrb	r3, [r1, r3]
 800978a:	f003 031f 	and.w	r3, r3, #31
 800978e:	fa22 f303 	lsr.w	r3, r2, r3
 8009792:	4a4e      	ldr	r2, [pc, #312]	; (80098cc <HAL_RCC_OscConfig+0x278>)
 8009794:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8009796:	4b4e      	ldr	r3, [pc, #312]	; (80098d0 <HAL_RCC_OscConfig+0x27c>)
 8009798:	681b      	ldr	r3, [r3, #0]
 800979a:	4618      	mov	r0, r3
 800979c:	f7fb fc26 	bl	8004fec <HAL_InitTick>
 80097a0:	4603      	mov	r3, r0
 80097a2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80097a4:	7bfb      	ldrb	r3, [r7, #15]
 80097a6:	2b00      	cmp	r3, #0
 80097a8:	d052      	beq.n	8009850 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80097aa:	7bfb      	ldrb	r3, [r7, #15]
 80097ac:	e35e      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	699b      	ldr	r3, [r3, #24]
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d032      	beq.n	800981c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80097b6:	4b43      	ldr	r3, [pc, #268]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80097b8:	681b      	ldr	r3, [r3, #0]
 80097ba:	4a42      	ldr	r2, [pc, #264]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80097bc:	f043 0301 	orr.w	r3, r3, #1
 80097c0:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80097c2:	f7fc fd91 	bl	80062e8 <HAL_GetTick>
 80097c6:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80097c8:	e008      	b.n	80097dc <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80097ca:	f7fc fd8d 	bl	80062e8 <HAL_GetTick>
 80097ce:	4602      	mov	r2, r0
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	1ad3      	subs	r3, r2, r3
 80097d4:	2b02      	cmp	r3, #2
 80097d6:	d901      	bls.n	80097dc <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80097d8:	2303      	movs	r3, #3
 80097da:	e347      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80097dc:	4b39      	ldr	r3, [pc, #228]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80097de:	681b      	ldr	r3, [r3, #0]
 80097e0:	f003 0302 	and.w	r3, r3, #2
 80097e4:	2b00      	cmp	r3, #0
 80097e6:	d0f0      	beq.n	80097ca <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80097e8:	4b36      	ldr	r3, [pc, #216]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	4a35      	ldr	r2, [pc, #212]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80097ee:	f043 0308 	orr.w	r3, r3, #8
 80097f2:	6013      	str	r3, [r2, #0]
 80097f4:	4b33      	ldr	r3, [pc, #204]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	6a1b      	ldr	r3, [r3, #32]
 8009800:	4930      	ldr	r1, [pc, #192]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009802:	4313      	orrs	r3, r2
 8009804:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8009806:	4b2f      	ldr	r3, [pc, #188]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009808:	685b      	ldr	r3, [r3, #4]
 800980a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	69db      	ldr	r3, [r3, #28]
 8009812:	021b      	lsls	r3, r3, #8
 8009814:	492b      	ldr	r1, [pc, #172]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009816:	4313      	orrs	r3, r2
 8009818:	604b      	str	r3, [r1, #4]
 800981a:	e01a      	b.n	8009852 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800981c:	4b29      	ldr	r3, [pc, #164]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a28      	ldr	r2, [pc, #160]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009822:	f023 0301 	bic.w	r3, r3, #1
 8009826:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8009828:	f7fc fd5e 	bl	80062e8 <HAL_GetTick>
 800982c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800982e:	e008      	b.n	8009842 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8009830:	f7fc fd5a 	bl	80062e8 <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	693b      	ldr	r3, [r7, #16]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	2b02      	cmp	r3, #2
 800983c:	d901      	bls.n	8009842 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e314      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8009842:	4b20      	ldr	r3, [pc, #128]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f003 0302 	and.w	r3, r3, #2
 800984a:	2b00      	cmp	r3, #0
 800984c:	d1f0      	bne.n	8009830 <HAL_RCC_OscConfig+0x1dc>
 800984e:	e000      	b.n	8009852 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8009850:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 0301 	and.w	r3, r3, #1
 800985a:	2b00      	cmp	r3, #0
 800985c:	d073      	beq.n	8009946 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800985e:	69bb      	ldr	r3, [r7, #24]
 8009860:	2b08      	cmp	r3, #8
 8009862:	d005      	beq.n	8009870 <HAL_RCC_OscConfig+0x21c>
 8009864:	69bb      	ldr	r3, [r7, #24]
 8009866:	2b0c      	cmp	r3, #12
 8009868:	d10e      	bne.n	8009888 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800986a:	697b      	ldr	r3, [r7, #20]
 800986c:	2b03      	cmp	r3, #3
 800986e:	d10b      	bne.n	8009888 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009870:	4b14      	ldr	r3, [pc, #80]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009878:	2b00      	cmp	r3, #0
 800987a:	d063      	beq.n	8009944 <HAL_RCC_OscConfig+0x2f0>
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	685b      	ldr	r3, [r3, #4]
 8009880:	2b00      	cmp	r3, #0
 8009882:	d15f      	bne.n	8009944 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8009884:	2301      	movs	r3, #1
 8009886:	e2f1      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	685b      	ldr	r3, [r3, #4]
 800988c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009890:	d106      	bne.n	80098a0 <HAL_RCC_OscConfig+0x24c>
 8009892:	4b0c      	ldr	r3, [pc, #48]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009894:	681b      	ldr	r3, [r3, #0]
 8009896:	4a0b      	ldr	r2, [pc, #44]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 8009898:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800989c:	6013      	str	r3, [r2, #0]
 800989e:	e025      	b.n	80098ec <HAL_RCC_OscConfig+0x298>
 80098a0:	687b      	ldr	r3, [r7, #4]
 80098a2:	685b      	ldr	r3, [r3, #4]
 80098a4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80098a8:	d114      	bne.n	80098d4 <HAL_RCC_OscConfig+0x280>
 80098aa:	4b06      	ldr	r3, [pc, #24]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80098ac:	681b      	ldr	r3, [r3, #0]
 80098ae:	4a05      	ldr	r2, [pc, #20]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80098b0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80098b4:	6013      	str	r3, [r2, #0]
 80098b6:	4b03      	ldr	r3, [pc, #12]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	4a02      	ldr	r2, [pc, #8]	; (80098c4 <HAL_RCC_OscConfig+0x270>)
 80098bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80098c0:	6013      	str	r3, [r2, #0]
 80098c2:	e013      	b.n	80098ec <HAL_RCC_OscConfig+0x298>
 80098c4:	40021000 	.word	0x40021000
 80098c8:	0801f870 	.word	0x0801f870
 80098cc:	20000048 	.word	0x20000048
 80098d0:	20000050 	.word	0x20000050
 80098d4:	4ba0      	ldr	r3, [pc, #640]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	4a9f      	ldr	r2, [pc, #636]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 80098da:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80098de:	6013      	str	r3, [r2, #0]
 80098e0:	4b9d      	ldr	r3, [pc, #628]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	4a9c      	ldr	r2, [pc, #624]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 80098e6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80098ea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	685b      	ldr	r3, [r3, #4]
 80098f0:	2b00      	cmp	r3, #0
 80098f2:	d013      	beq.n	800991c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098f4:	f7fc fcf8 	bl	80062e8 <HAL_GetTick>
 80098f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80098fa:	e008      	b.n	800990e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80098fc:	f7fc fcf4 	bl	80062e8 <HAL_GetTick>
 8009900:	4602      	mov	r2, r0
 8009902:	693b      	ldr	r3, [r7, #16]
 8009904:	1ad3      	subs	r3, r2, r3
 8009906:	2b64      	cmp	r3, #100	; 0x64
 8009908:	d901      	bls.n	800990e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800990a:	2303      	movs	r3, #3
 800990c:	e2ae      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800990e:	4b92      	ldr	r3, [pc, #584]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009916:	2b00      	cmp	r3, #0
 8009918:	d0f0      	beq.n	80098fc <HAL_RCC_OscConfig+0x2a8>
 800991a:	e014      	b.n	8009946 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800991c:	f7fc fce4 	bl	80062e8 <HAL_GetTick>
 8009920:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009922:	e008      	b.n	8009936 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009924:	f7fc fce0 	bl	80062e8 <HAL_GetTick>
 8009928:	4602      	mov	r2, r0
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	1ad3      	subs	r3, r2, r3
 800992e:	2b64      	cmp	r3, #100	; 0x64
 8009930:	d901      	bls.n	8009936 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8009932:	2303      	movs	r3, #3
 8009934:	e29a      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8009936:	4b88      	ldr	r3, [pc, #544]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009938:	681b      	ldr	r3, [r3, #0]
 800993a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800993e:	2b00      	cmp	r3, #0
 8009940:	d1f0      	bne.n	8009924 <HAL_RCC_OscConfig+0x2d0>
 8009942:	e000      	b.n	8009946 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009944:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009946:	687b      	ldr	r3, [r7, #4]
 8009948:	681b      	ldr	r3, [r3, #0]
 800994a:	f003 0302 	and.w	r3, r3, #2
 800994e:	2b00      	cmp	r3, #0
 8009950:	d060      	beq.n	8009a14 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8009952:	69bb      	ldr	r3, [r7, #24]
 8009954:	2b04      	cmp	r3, #4
 8009956:	d005      	beq.n	8009964 <HAL_RCC_OscConfig+0x310>
 8009958:	69bb      	ldr	r3, [r7, #24]
 800995a:	2b0c      	cmp	r3, #12
 800995c:	d119      	bne.n	8009992 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800995e:	697b      	ldr	r3, [r7, #20]
 8009960:	2b02      	cmp	r3, #2
 8009962:	d116      	bne.n	8009992 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009964:	4b7c      	ldr	r3, [pc, #496]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009966:	681b      	ldr	r3, [r3, #0]
 8009968:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800996c:	2b00      	cmp	r3, #0
 800996e:	d005      	beq.n	800997c <HAL_RCC_OscConfig+0x328>
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	68db      	ldr	r3, [r3, #12]
 8009974:	2b00      	cmp	r3, #0
 8009976:	d101      	bne.n	800997c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8009978:	2301      	movs	r3, #1
 800997a:	e277      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800997c:	4b76      	ldr	r3, [pc, #472]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 800997e:	685b      	ldr	r3, [r3, #4]
 8009980:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	691b      	ldr	r3, [r3, #16]
 8009988:	061b      	lsls	r3, r3, #24
 800998a:	4973      	ldr	r1, [pc, #460]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 800998c:	4313      	orrs	r3, r2
 800998e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009990:	e040      	b.n	8009a14 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	68db      	ldr	r3, [r3, #12]
 8009996:	2b00      	cmp	r3, #0
 8009998:	d023      	beq.n	80099e2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800999a:	4b6f      	ldr	r3, [pc, #444]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 800999c:	681b      	ldr	r3, [r3, #0]
 800999e:	4a6e      	ldr	r2, [pc, #440]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 80099a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80099a4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099a6:	f7fc fc9f 	bl	80062e8 <HAL_GetTick>
 80099aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099ac:	e008      	b.n	80099c0 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099ae:	f7fc fc9b 	bl	80062e8 <HAL_GetTick>
 80099b2:	4602      	mov	r2, r0
 80099b4:	693b      	ldr	r3, [r7, #16]
 80099b6:	1ad3      	subs	r3, r2, r3
 80099b8:	2b02      	cmp	r3, #2
 80099ba:	d901      	bls.n	80099c0 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80099bc:	2303      	movs	r3, #3
 80099be:	e255      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80099c0:	4b65      	ldr	r3, [pc, #404]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80099c8:	2b00      	cmp	r3, #0
 80099ca:	d0f0      	beq.n	80099ae <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80099cc:	4b62      	ldr	r3, [pc, #392]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 80099ce:	685b      	ldr	r3, [r3, #4]
 80099d0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80099d4:	687b      	ldr	r3, [r7, #4]
 80099d6:	691b      	ldr	r3, [r3, #16]
 80099d8:	061b      	lsls	r3, r3, #24
 80099da:	495f      	ldr	r1, [pc, #380]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 80099dc:	4313      	orrs	r3, r2
 80099de:	604b      	str	r3, [r1, #4]
 80099e0:	e018      	b.n	8009a14 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80099e2:	4b5d      	ldr	r3, [pc, #372]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	4a5c      	ldr	r2, [pc, #368]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 80099e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80099ee:	f7fc fc7b 	bl	80062e8 <HAL_GetTick>
 80099f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80099f4:	e008      	b.n	8009a08 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80099f6:	f7fc fc77 	bl	80062e8 <HAL_GetTick>
 80099fa:	4602      	mov	r2, r0
 80099fc:	693b      	ldr	r3, [r7, #16]
 80099fe:	1ad3      	subs	r3, r2, r3
 8009a00:	2b02      	cmp	r3, #2
 8009a02:	d901      	bls.n	8009a08 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8009a04:	2303      	movs	r3, #3
 8009a06:	e231      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8009a08:	4b53      	ldr	r3, [pc, #332]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009a0a:	681b      	ldr	r3, [r3, #0]
 8009a0c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d1f0      	bne.n	80099f6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f003 0308 	and.w	r3, r3, #8
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d03c      	beq.n	8009a9a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	695b      	ldr	r3, [r3, #20]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	d01c      	beq.n	8009a62 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8009a28:	4b4b      	ldr	r3, [pc, #300]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009a2a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a2e:	4a4a      	ldr	r2, [pc, #296]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009a30:	f043 0301 	orr.w	r3, r3, #1
 8009a34:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a38:	f7fc fc56 	bl	80062e8 <HAL_GetTick>
 8009a3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a3e:	e008      	b.n	8009a52 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a40:	f7fc fc52 	bl	80062e8 <HAL_GetTick>
 8009a44:	4602      	mov	r2, r0
 8009a46:	693b      	ldr	r3, [r7, #16]
 8009a48:	1ad3      	subs	r3, r2, r3
 8009a4a:	2b02      	cmp	r3, #2
 8009a4c:	d901      	bls.n	8009a52 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8009a4e:	2303      	movs	r3, #3
 8009a50:	e20c      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8009a52:	4b41      	ldr	r3, [pc, #260]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009a54:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a58:	f003 0302 	and.w	r3, r3, #2
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d0ef      	beq.n	8009a40 <HAL_RCC_OscConfig+0x3ec>
 8009a60:	e01b      	b.n	8009a9a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8009a62:	4b3d      	ldr	r3, [pc, #244]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a68:	4a3b      	ldr	r2, [pc, #236]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009a6a:	f023 0301 	bic.w	r3, r3, #1
 8009a6e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a72:	f7fc fc39 	bl	80062e8 <HAL_GetTick>
 8009a76:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a78:	e008      	b.n	8009a8c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009a7a:	f7fc fc35 	bl	80062e8 <HAL_GetTick>
 8009a7e:	4602      	mov	r2, r0
 8009a80:	693b      	ldr	r3, [r7, #16]
 8009a82:	1ad3      	subs	r3, r2, r3
 8009a84:	2b02      	cmp	r3, #2
 8009a86:	d901      	bls.n	8009a8c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8009a88:	2303      	movs	r3, #3
 8009a8a:	e1ef      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8009a8c:	4b32      	ldr	r3, [pc, #200]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8009a92:	f003 0302 	and.w	r3, r3, #2
 8009a96:	2b00      	cmp	r3, #0
 8009a98:	d1ef      	bne.n	8009a7a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	f003 0304 	and.w	r3, r3, #4
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	f000 80a6 	beq.w	8009bf4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009aa8:	2300      	movs	r3, #0
 8009aaa:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8009aac:	4b2a      	ldr	r3, [pc, #168]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009aae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ab0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009ab4:	2b00      	cmp	r3, #0
 8009ab6:	d10d      	bne.n	8009ad4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009ab8:	4b27      	ldr	r3, [pc, #156]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009abc:	4a26      	ldr	r2, [pc, #152]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8009ac4:	4b24      	ldr	r3, [pc, #144]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009acc:	60bb      	str	r3, [r7, #8]
 8009ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009ad0:	2301      	movs	r3, #1
 8009ad2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009ad4:	4b21      	ldr	r3, [pc, #132]	; (8009b5c <HAL_RCC_OscConfig+0x508>)
 8009ad6:	681b      	ldr	r3, [r3, #0]
 8009ad8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	d118      	bne.n	8009b12 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009ae0:	4b1e      	ldr	r3, [pc, #120]	; (8009b5c <HAL_RCC_OscConfig+0x508>)
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a1d      	ldr	r2, [pc, #116]	; (8009b5c <HAL_RCC_OscConfig+0x508>)
 8009ae6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009aea:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009aec:	f7fc fbfc 	bl	80062e8 <HAL_GetTick>
 8009af0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009af2:	e008      	b.n	8009b06 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009af4:	f7fc fbf8 	bl	80062e8 <HAL_GetTick>
 8009af8:	4602      	mov	r2, r0
 8009afa:	693b      	ldr	r3, [r7, #16]
 8009afc:	1ad3      	subs	r3, r2, r3
 8009afe:	2b02      	cmp	r3, #2
 8009b00:	d901      	bls.n	8009b06 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8009b02:	2303      	movs	r3, #3
 8009b04:	e1b2      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009b06:	4b15      	ldr	r3, [pc, #84]	; (8009b5c <HAL_RCC_OscConfig+0x508>)
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d0f0      	beq.n	8009af4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009b12:	687b      	ldr	r3, [r7, #4]
 8009b14:	689b      	ldr	r3, [r3, #8]
 8009b16:	2b01      	cmp	r3, #1
 8009b18:	d108      	bne.n	8009b2c <HAL_RCC_OscConfig+0x4d8>
 8009b1a:	4b0f      	ldr	r3, [pc, #60]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009b1c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b20:	4a0d      	ldr	r2, [pc, #52]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009b22:	f043 0301 	orr.w	r3, r3, #1
 8009b26:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b2a:	e029      	b.n	8009b80 <HAL_RCC_OscConfig+0x52c>
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	689b      	ldr	r3, [r3, #8]
 8009b30:	2b05      	cmp	r3, #5
 8009b32:	d115      	bne.n	8009b60 <HAL_RCC_OscConfig+0x50c>
 8009b34:	4b08      	ldr	r3, [pc, #32]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009b36:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b3a:	4a07      	ldr	r2, [pc, #28]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009b3c:	f043 0304 	orr.w	r3, r3, #4
 8009b40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b44:	4b04      	ldr	r3, [pc, #16]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009b46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b4a:	4a03      	ldr	r2, [pc, #12]	; (8009b58 <HAL_RCC_OscConfig+0x504>)
 8009b4c:	f043 0301 	orr.w	r3, r3, #1
 8009b50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b54:	e014      	b.n	8009b80 <HAL_RCC_OscConfig+0x52c>
 8009b56:	bf00      	nop
 8009b58:	40021000 	.word	0x40021000
 8009b5c:	40007000 	.word	0x40007000
 8009b60:	4b9a      	ldr	r3, [pc, #616]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009b62:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b66:	4a99      	ldr	r2, [pc, #612]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009b68:	f023 0301 	bic.w	r3, r3, #1
 8009b6c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8009b70:	4b96      	ldr	r3, [pc, #600]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b76:	4a95      	ldr	r2, [pc, #596]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009b78:	f023 0304 	bic.w	r3, r3, #4
 8009b7c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	689b      	ldr	r3, [r3, #8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	d016      	beq.n	8009bb6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009b88:	f7fc fbae 	bl	80062e8 <HAL_GetTick>
 8009b8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009b8e:	e00a      	b.n	8009ba6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009b90:	f7fc fbaa 	bl	80062e8 <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	693b      	ldr	r3, [r7, #16]
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8009b9e:	4293      	cmp	r3, r2
 8009ba0:	d901      	bls.n	8009ba6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8009ba2:	2303      	movs	r3, #3
 8009ba4:	e162      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009ba6:	4b89      	ldr	r3, [pc, #548]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009ba8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bac:	f003 0302 	and.w	r3, r3, #2
 8009bb0:	2b00      	cmp	r3, #0
 8009bb2:	d0ed      	beq.n	8009b90 <HAL_RCC_OscConfig+0x53c>
 8009bb4:	e015      	b.n	8009be2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009bb6:	f7fc fb97 	bl	80062e8 <HAL_GetTick>
 8009bba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009bbc:	e00a      	b.n	8009bd4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009bbe:	f7fc fb93 	bl	80062e8 <HAL_GetTick>
 8009bc2:	4602      	mov	r2, r0
 8009bc4:	693b      	ldr	r3, [r7, #16]
 8009bc6:	1ad3      	subs	r3, r2, r3
 8009bc8:	f241 3288 	movw	r2, #5000	; 0x1388
 8009bcc:	4293      	cmp	r3, r2
 8009bce:	d901      	bls.n	8009bd4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8009bd0:	2303      	movs	r3, #3
 8009bd2:	e14b      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8009bd4:	4b7d      	ldr	r3, [pc, #500]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009bd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009bda:	f003 0302 	and.w	r3, r3, #2
 8009bde:	2b00      	cmp	r3, #0
 8009be0:	d1ed      	bne.n	8009bbe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009be2:	7ffb      	ldrb	r3, [r7, #31]
 8009be4:	2b01      	cmp	r3, #1
 8009be6:	d105      	bne.n	8009bf4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009be8:	4b78      	ldr	r3, [pc, #480]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009bea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009bec:	4a77      	ldr	r2, [pc, #476]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009bee:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009bf2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	f003 0320 	and.w	r3, r3, #32
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d03c      	beq.n	8009c7a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d01c      	beq.n	8009c42 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8009c08:	4b70      	ldr	r3, [pc, #448]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009c0a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c0e:	4a6f      	ldr	r2, [pc, #444]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009c10:	f043 0301 	orr.w	r3, r3, #1
 8009c14:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c18:	f7fc fb66 	bl	80062e8 <HAL_GetTick>
 8009c1c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009c1e:	e008      	b.n	8009c32 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c20:	f7fc fb62 	bl	80062e8 <HAL_GetTick>
 8009c24:	4602      	mov	r2, r0
 8009c26:	693b      	ldr	r3, [r7, #16]
 8009c28:	1ad3      	subs	r3, r2, r3
 8009c2a:	2b02      	cmp	r3, #2
 8009c2c:	d901      	bls.n	8009c32 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8009c2e:	2303      	movs	r3, #3
 8009c30:	e11c      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8009c32:	4b66      	ldr	r3, [pc, #408]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009c34:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c38:	f003 0302 	and.w	r3, r3, #2
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d0ef      	beq.n	8009c20 <HAL_RCC_OscConfig+0x5cc>
 8009c40:	e01b      	b.n	8009c7a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8009c42:	4b62      	ldr	r3, [pc, #392]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009c44:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c48:	4a60      	ldr	r2, [pc, #384]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009c4a:	f023 0301 	bic.w	r3, r3, #1
 8009c4e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009c52:	f7fc fb49 	bl	80062e8 <HAL_GetTick>
 8009c56:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009c58:	e008      	b.n	8009c6c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009c5a:	f7fc fb45 	bl	80062e8 <HAL_GetTick>
 8009c5e:	4602      	mov	r2, r0
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	1ad3      	subs	r3, r2, r3
 8009c64:	2b02      	cmp	r3, #2
 8009c66:	d901      	bls.n	8009c6c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8009c68:	2303      	movs	r3, #3
 8009c6a:	e0ff      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8009c6c:	4b57      	ldr	r3, [pc, #348]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009c6e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8009c72:	f003 0302 	and.w	r3, r3, #2
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d1ef      	bne.n	8009c5a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	f000 80f3 	beq.w	8009e6a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c88:	2b02      	cmp	r3, #2
 8009c8a:	f040 80c9 	bne.w	8009e20 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8009c8e:	4b4f      	ldr	r3, [pc, #316]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009c90:	68db      	ldr	r3, [r3, #12]
 8009c92:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009c94:	697b      	ldr	r3, [r7, #20]
 8009c96:	f003 0203 	and.w	r2, r3, #3
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	d12c      	bne.n	8009cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009ca2:	697b      	ldr	r3, [r7, #20]
 8009ca4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009cac:	3b01      	subs	r3, #1
 8009cae:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	d123      	bne.n	8009cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009cb4:	697b      	ldr	r3, [r7, #20]
 8009cb6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009cbe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8009cc0:	429a      	cmp	r2, r3
 8009cc2:	d11b      	bne.n	8009cfc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009cc4:	697b      	ldr	r3, [r7, #20]
 8009cc6:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009cce:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009cd0:	429a      	cmp	r2, r3
 8009cd2:	d113      	bne.n	8009cfc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009cd4:	697b      	ldr	r3, [r7, #20]
 8009cd6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009cde:	085b      	lsrs	r3, r3, #1
 8009ce0:	3b01      	subs	r3, #1
 8009ce2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8009ce4:	429a      	cmp	r2, r3
 8009ce6:	d109      	bne.n	8009cfc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8009ce8:	697b      	ldr	r3, [r7, #20]
 8009cea:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009cf2:	085b      	lsrs	r3, r3, #1
 8009cf4:	3b01      	subs	r3, #1
 8009cf6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8009cf8:	429a      	cmp	r2, r3
 8009cfa:	d06b      	beq.n	8009dd4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009cfc:	69bb      	ldr	r3, [r7, #24]
 8009cfe:	2b0c      	cmp	r3, #12
 8009d00:	d062      	beq.n	8009dc8 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8009d02:	4b32      	ldr	r3, [pc, #200]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8009d0a:	2b00      	cmp	r3, #0
 8009d0c:	d001      	beq.n	8009d12 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e0ac      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8009d12:	4b2e      	ldr	r3, [pc, #184]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009d14:	681b      	ldr	r3, [r3, #0]
 8009d16:	4a2d      	ldr	r2, [pc, #180]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009d18:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009d1c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009d1e:	f7fc fae3 	bl	80062e8 <HAL_GetTick>
 8009d22:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d24:	e008      	b.n	8009d38 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009d26:	f7fc fadf 	bl	80062e8 <HAL_GetTick>
 8009d2a:	4602      	mov	r2, r0
 8009d2c:	693b      	ldr	r3, [r7, #16]
 8009d2e:	1ad3      	subs	r3, r2, r3
 8009d30:	2b02      	cmp	r3, #2
 8009d32:	d901      	bls.n	8009d38 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8009d34:	2303      	movs	r3, #3
 8009d36:	e099      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009d38:	4b24      	ldr	r3, [pc, #144]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009d40:	2b00      	cmp	r3, #0
 8009d42:	d1f0      	bne.n	8009d26 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009d44:	4b21      	ldr	r3, [pc, #132]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009d46:	68da      	ldr	r2, [r3, #12]
 8009d48:	4b21      	ldr	r3, [pc, #132]	; (8009dd0 <HAL_RCC_OscConfig+0x77c>)
 8009d4a:	4013      	ands	r3, r2
 8009d4c:	687a      	ldr	r2, [r7, #4]
 8009d4e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8009d50:	687a      	ldr	r2, [r7, #4]
 8009d52:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8009d54:	3a01      	subs	r2, #1
 8009d56:	0112      	lsls	r2, r2, #4
 8009d58:	4311      	orrs	r1, r2
 8009d5a:	687a      	ldr	r2, [r7, #4]
 8009d5c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8009d5e:	0212      	lsls	r2, r2, #8
 8009d60:	4311      	orrs	r1, r2
 8009d62:	687a      	ldr	r2, [r7, #4]
 8009d64:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8009d66:	0852      	lsrs	r2, r2, #1
 8009d68:	3a01      	subs	r2, #1
 8009d6a:	0552      	lsls	r2, r2, #21
 8009d6c:	4311      	orrs	r1, r2
 8009d6e:	687a      	ldr	r2, [r7, #4]
 8009d70:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8009d72:	0852      	lsrs	r2, r2, #1
 8009d74:	3a01      	subs	r2, #1
 8009d76:	0652      	lsls	r2, r2, #25
 8009d78:	4311      	orrs	r1, r2
 8009d7a:	687a      	ldr	r2, [r7, #4]
 8009d7c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009d7e:	06d2      	lsls	r2, r2, #27
 8009d80:	430a      	orrs	r2, r1
 8009d82:	4912      	ldr	r1, [pc, #72]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009d84:	4313      	orrs	r3, r2
 8009d86:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8009d88:	4b10      	ldr	r3, [pc, #64]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009d8a:	681b      	ldr	r3, [r3, #0]
 8009d8c:	4a0f      	ldr	r2, [pc, #60]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009d8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d92:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009d94:	4b0d      	ldr	r3, [pc, #52]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009d96:	68db      	ldr	r3, [r3, #12]
 8009d98:	4a0c      	ldr	r2, [pc, #48]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009d9a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009d9e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8009da0:	f7fc faa2 	bl	80062e8 <HAL_GetTick>
 8009da4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009da6:	e008      	b.n	8009dba <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009da8:	f7fc fa9e 	bl	80062e8 <HAL_GetTick>
 8009dac:	4602      	mov	r2, r0
 8009dae:	693b      	ldr	r3, [r7, #16]
 8009db0:	1ad3      	subs	r3, r2, r3
 8009db2:	2b02      	cmp	r3, #2
 8009db4:	d901      	bls.n	8009dba <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e058      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009dba:	4b04      	ldr	r3, [pc, #16]	; (8009dcc <HAL_RCC_OscConfig+0x778>)
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d0f0      	beq.n	8009da8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009dc6:	e050      	b.n	8009e6a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8009dc8:	2301      	movs	r3, #1
 8009dca:	e04f      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
 8009dcc:	40021000 	.word	0x40021000
 8009dd0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009dd4:	4b27      	ldr	r3, [pc, #156]	; (8009e74 <HAL_RCC_OscConfig+0x820>)
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009ddc:	2b00      	cmp	r3, #0
 8009dde:	d144      	bne.n	8009e6a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8009de0:	4b24      	ldr	r3, [pc, #144]	; (8009e74 <HAL_RCC_OscConfig+0x820>)
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	4a23      	ldr	r2, [pc, #140]	; (8009e74 <HAL_RCC_OscConfig+0x820>)
 8009de6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009dea:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8009dec:	4b21      	ldr	r3, [pc, #132]	; (8009e74 <HAL_RCC_OscConfig+0x820>)
 8009dee:	68db      	ldr	r3, [r3, #12]
 8009df0:	4a20      	ldr	r2, [pc, #128]	; (8009e74 <HAL_RCC_OscConfig+0x820>)
 8009df2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009df6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8009df8:	f7fc fa76 	bl	80062e8 <HAL_GetTick>
 8009dfc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009dfe:	e008      	b.n	8009e12 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e00:	f7fc fa72 	bl	80062e8 <HAL_GetTick>
 8009e04:	4602      	mov	r2, r0
 8009e06:	693b      	ldr	r3, [r7, #16]
 8009e08:	1ad3      	subs	r3, r2, r3
 8009e0a:	2b02      	cmp	r3, #2
 8009e0c:	d901      	bls.n	8009e12 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e02c      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009e12:	4b18      	ldr	r3, [pc, #96]	; (8009e74 <HAL_RCC_OscConfig+0x820>)
 8009e14:	681b      	ldr	r3, [r3, #0]
 8009e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d0f0      	beq.n	8009e00 <HAL_RCC_OscConfig+0x7ac>
 8009e1e:	e024      	b.n	8009e6a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8009e20:	69bb      	ldr	r3, [r7, #24]
 8009e22:	2b0c      	cmp	r3, #12
 8009e24:	d01f      	beq.n	8009e66 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009e26:	4b13      	ldr	r3, [pc, #76]	; (8009e74 <HAL_RCC_OscConfig+0x820>)
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	4a12      	ldr	r2, [pc, #72]	; (8009e74 <HAL_RCC_OscConfig+0x820>)
 8009e2c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009e30:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009e32:	f7fc fa59 	bl	80062e8 <HAL_GetTick>
 8009e36:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e38:	e008      	b.n	8009e4c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009e3a:	f7fc fa55 	bl	80062e8 <HAL_GetTick>
 8009e3e:	4602      	mov	r2, r0
 8009e40:	693b      	ldr	r3, [r7, #16]
 8009e42:	1ad3      	subs	r3, r2, r3
 8009e44:	2b02      	cmp	r3, #2
 8009e46:	d901      	bls.n	8009e4c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8009e48:	2303      	movs	r3, #3
 8009e4a:	e00f      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009e4c:	4b09      	ldr	r3, [pc, #36]	; (8009e74 <HAL_RCC_OscConfig+0x820>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009e54:	2b00      	cmp	r3, #0
 8009e56:	d1f0      	bne.n	8009e3a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8009e58:	4b06      	ldr	r3, [pc, #24]	; (8009e74 <HAL_RCC_OscConfig+0x820>)
 8009e5a:	68da      	ldr	r2, [r3, #12]
 8009e5c:	4905      	ldr	r1, [pc, #20]	; (8009e74 <HAL_RCC_OscConfig+0x820>)
 8009e5e:	4b06      	ldr	r3, [pc, #24]	; (8009e78 <HAL_RCC_OscConfig+0x824>)
 8009e60:	4013      	ands	r3, r2
 8009e62:	60cb      	str	r3, [r1, #12]
 8009e64:	e001      	b.n	8009e6a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8009e66:	2301      	movs	r3, #1
 8009e68:	e000      	b.n	8009e6c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8009e6a:	2300      	movs	r3, #0
}
 8009e6c:	4618      	mov	r0, r3
 8009e6e:	3720      	adds	r7, #32
 8009e70:	46bd      	mov	sp, r7
 8009e72:	bd80      	pop	{r7, pc}
 8009e74:	40021000 	.word	0x40021000
 8009e78:	feeefffc 	.word	0xfeeefffc

08009e7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009e7c:	b580      	push	{r7, lr}
 8009e7e:	b084      	sub	sp, #16
 8009e80:	af00      	add	r7, sp, #0
 8009e82:	6078      	str	r0, [r7, #4]
 8009e84:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	2b00      	cmp	r3, #0
 8009e8a:	d101      	bne.n	8009e90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009e8c:	2301      	movs	r3, #1
 8009e8e:	e0e7      	b.n	800a060 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009e90:	4b75      	ldr	r3, [pc, #468]	; (800a068 <HAL_RCC_ClockConfig+0x1ec>)
 8009e92:	681b      	ldr	r3, [r3, #0]
 8009e94:	f003 0307 	and.w	r3, r3, #7
 8009e98:	683a      	ldr	r2, [r7, #0]
 8009e9a:	429a      	cmp	r2, r3
 8009e9c:	d910      	bls.n	8009ec0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009e9e:	4b72      	ldr	r3, [pc, #456]	; (800a068 <HAL_RCC_ClockConfig+0x1ec>)
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	f023 0207 	bic.w	r2, r3, #7
 8009ea6:	4970      	ldr	r1, [pc, #448]	; (800a068 <HAL_RCC_ClockConfig+0x1ec>)
 8009ea8:	683b      	ldr	r3, [r7, #0]
 8009eaa:	4313      	orrs	r3, r2
 8009eac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009eae:	4b6e      	ldr	r3, [pc, #440]	; (800a068 <HAL_RCC_ClockConfig+0x1ec>)
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f003 0307 	and.w	r3, r3, #7
 8009eb6:	683a      	ldr	r2, [r7, #0]
 8009eb8:	429a      	cmp	r2, r3
 8009eba:	d001      	beq.n	8009ec0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e0cf      	b.n	800a060 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	681b      	ldr	r3, [r3, #0]
 8009ec4:	f003 0302 	and.w	r3, r3, #2
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	d010      	beq.n	8009eee <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	689a      	ldr	r2, [r3, #8]
 8009ed0:	4b66      	ldr	r3, [pc, #408]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 8009ed2:	689b      	ldr	r3, [r3, #8]
 8009ed4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009ed8:	429a      	cmp	r2, r3
 8009eda:	d908      	bls.n	8009eee <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009edc:	4b63      	ldr	r3, [pc, #396]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 8009ede:	689b      	ldr	r3, [r3, #8]
 8009ee0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009ee4:	687b      	ldr	r3, [r7, #4]
 8009ee6:	689b      	ldr	r3, [r3, #8]
 8009ee8:	4960      	ldr	r1, [pc, #384]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 8009eea:	4313      	orrs	r3, r2
 8009eec:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	f003 0301 	and.w	r3, r3, #1
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d04c      	beq.n	8009f94 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	2b03      	cmp	r3, #3
 8009f00:	d107      	bne.n	8009f12 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8009f02:	4b5a      	ldr	r3, [pc, #360]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 8009f04:	681b      	ldr	r3, [r3, #0]
 8009f06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d121      	bne.n	8009f52 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e0a6      	b.n	800a060 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	685b      	ldr	r3, [r3, #4]
 8009f16:	2b02      	cmp	r3, #2
 8009f18:	d107      	bne.n	8009f2a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8009f1a:	4b54      	ldr	r3, [pc, #336]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 8009f1c:	681b      	ldr	r3, [r3, #0]
 8009f1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d115      	bne.n	8009f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009f26:	2301      	movs	r3, #1
 8009f28:	e09a      	b.n	800a060 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	685b      	ldr	r3, [r3, #4]
 8009f2e:	2b00      	cmp	r3, #0
 8009f30:	d107      	bne.n	8009f42 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8009f32:	4b4e      	ldr	r3, [pc, #312]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 8009f34:	681b      	ldr	r3, [r3, #0]
 8009f36:	f003 0302 	and.w	r3, r3, #2
 8009f3a:	2b00      	cmp	r3, #0
 8009f3c:	d109      	bne.n	8009f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009f3e:	2301      	movs	r3, #1
 8009f40:	e08e      	b.n	800a060 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8009f42:	4b4a      	ldr	r3, [pc, #296]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d101      	bne.n	8009f52 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009f4e:	2301      	movs	r3, #1
 8009f50:	e086      	b.n	800a060 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8009f52:	4b46      	ldr	r3, [pc, #280]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 8009f54:	689b      	ldr	r3, [r3, #8]
 8009f56:	f023 0203 	bic.w	r2, r3, #3
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	685b      	ldr	r3, [r3, #4]
 8009f5e:	4943      	ldr	r1, [pc, #268]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 8009f60:	4313      	orrs	r3, r2
 8009f62:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009f64:	f7fc f9c0 	bl	80062e8 <HAL_GetTick>
 8009f68:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f6a:	e00a      	b.n	8009f82 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009f6c:	f7fc f9bc 	bl	80062e8 <HAL_GetTick>
 8009f70:	4602      	mov	r2, r0
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	1ad3      	subs	r3, r2, r3
 8009f76:	f241 3288 	movw	r2, #5000	; 0x1388
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d901      	bls.n	8009f82 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009f7e:	2303      	movs	r3, #3
 8009f80:	e06e      	b.n	800a060 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009f82:	4b3a      	ldr	r3, [pc, #232]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 8009f84:	689b      	ldr	r3, [r3, #8]
 8009f86:	f003 020c 	and.w	r2, r3, #12
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	685b      	ldr	r3, [r3, #4]
 8009f8e:	009b      	lsls	r3, r3, #2
 8009f90:	429a      	cmp	r2, r3
 8009f92:	d1eb      	bne.n	8009f6c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	681b      	ldr	r3, [r3, #0]
 8009f98:	f003 0302 	and.w	r3, r3, #2
 8009f9c:	2b00      	cmp	r3, #0
 8009f9e:	d010      	beq.n	8009fc2 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	689a      	ldr	r2, [r3, #8]
 8009fa4:	4b31      	ldr	r3, [pc, #196]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 8009fa6:	689b      	ldr	r3, [r3, #8]
 8009fa8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009fac:	429a      	cmp	r2, r3
 8009fae:	d208      	bcs.n	8009fc2 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009fb0:	4b2e      	ldr	r3, [pc, #184]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 8009fb2:	689b      	ldr	r3, [r3, #8]
 8009fb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009fb8:	687b      	ldr	r3, [r7, #4]
 8009fba:	689b      	ldr	r3, [r3, #8]
 8009fbc:	492b      	ldr	r1, [pc, #172]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 8009fbe:	4313      	orrs	r3, r2
 8009fc0:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8009fc2:	4b29      	ldr	r3, [pc, #164]	; (800a068 <HAL_RCC_ClockConfig+0x1ec>)
 8009fc4:	681b      	ldr	r3, [r3, #0]
 8009fc6:	f003 0307 	and.w	r3, r3, #7
 8009fca:	683a      	ldr	r2, [r7, #0]
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d210      	bcs.n	8009ff2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009fd0:	4b25      	ldr	r3, [pc, #148]	; (800a068 <HAL_RCC_ClockConfig+0x1ec>)
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	f023 0207 	bic.w	r2, r3, #7
 8009fd8:	4923      	ldr	r1, [pc, #140]	; (800a068 <HAL_RCC_ClockConfig+0x1ec>)
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	4313      	orrs	r3, r2
 8009fde:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009fe0:	4b21      	ldr	r3, [pc, #132]	; (800a068 <HAL_RCC_ClockConfig+0x1ec>)
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	f003 0307 	and.w	r3, r3, #7
 8009fe8:	683a      	ldr	r2, [r7, #0]
 8009fea:	429a      	cmp	r2, r3
 8009fec:	d001      	beq.n	8009ff2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8009fee:	2301      	movs	r3, #1
 8009ff0:	e036      	b.n	800a060 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009ff2:	687b      	ldr	r3, [r7, #4]
 8009ff4:	681b      	ldr	r3, [r3, #0]
 8009ff6:	f003 0304 	and.w	r3, r3, #4
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d008      	beq.n	800a010 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009ffe:	4b1b      	ldr	r3, [pc, #108]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 800a000:	689b      	ldr	r3, [r3, #8]
 800a002:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68db      	ldr	r3, [r3, #12]
 800a00a:	4918      	ldr	r1, [pc, #96]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 800a00c:	4313      	orrs	r3, r2
 800a00e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	681b      	ldr	r3, [r3, #0]
 800a014:	f003 0308 	and.w	r3, r3, #8
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d009      	beq.n	800a030 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800a01c:	4b13      	ldr	r3, [pc, #76]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 800a01e:	689b      	ldr	r3, [r3, #8]
 800a020:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	691b      	ldr	r3, [r3, #16]
 800a028:	00db      	lsls	r3, r3, #3
 800a02a:	4910      	ldr	r1, [pc, #64]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 800a02c:	4313      	orrs	r3, r2
 800a02e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800a030:	f000 f824 	bl	800a07c <HAL_RCC_GetSysClockFreq>
 800a034:	4602      	mov	r2, r0
 800a036:	4b0d      	ldr	r3, [pc, #52]	; (800a06c <HAL_RCC_ClockConfig+0x1f0>)
 800a038:	689b      	ldr	r3, [r3, #8]
 800a03a:	091b      	lsrs	r3, r3, #4
 800a03c:	f003 030f 	and.w	r3, r3, #15
 800a040:	490b      	ldr	r1, [pc, #44]	; (800a070 <HAL_RCC_ClockConfig+0x1f4>)
 800a042:	5ccb      	ldrb	r3, [r1, r3]
 800a044:	f003 031f 	and.w	r3, r3, #31
 800a048:	fa22 f303 	lsr.w	r3, r2, r3
 800a04c:	4a09      	ldr	r2, [pc, #36]	; (800a074 <HAL_RCC_ClockConfig+0x1f8>)
 800a04e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800a050:	4b09      	ldr	r3, [pc, #36]	; (800a078 <HAL_RCC_ClockConfig+0x1fc>)
 800a052:	681b      	ldr	r3, [r3, #0]
 800a054:	4618      	mov	r0, r3
 800a056:	f7fa ffc9 	bl	8004fec <HAL_InitTick>
 800a05a:	4603      	mov	r3, r0
 800a05c:	72fb      	strb	r3, [r7, #11]

  return status;
 800a05e:	7afb      	ldrb	r3, [r7, #11]
}
 800a060:	4618      	mov	r0, r3
 800a062:	3710      	adds	r7, #16
 800a064:	46bd      	mov	sp, r7
 800a066:	bd80      	pop	{r7, pc}
 800a068:	40022000 	.word	0x40022000
 800a06c:	40021000 	.word	0x40021000
 800a070:	0801f870 	.word	0x0801f870
 800a074:	20000048 	.word	0x20000048
 800a078:	20000050 	.word	0x20000050

0800a07c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800a07c:	b480      	push	{r7}
 800a07e:	b089      	sub	sp, #36	; 0x24
 800a080:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800a082:	2300      	movs	r3, #0
 800a084:	61fb      	str	r3, [r7, #28]
 800a086:	2300      	movs	r3, #0
 800a088:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800a08a:	4b3e      	ldr	r3, [pc, #248]	; (800a184 <HAL_RCC_GetSysClockFreq+0x108>)
 800a08c:	689b      	ldr	r3, [r3, #8]
 800a08e:	f003 030c 	and.w	r3, r3, #12
 800a092:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800a094:	4b3b      	ldr	r3, [pc, #236]	; (800a184 <HAL_RCC_GetSysClockFreq+0x108>)
 800a096:	68db      	ldr	r3, [r3, #12]
 800a098:	f003 0303 	and.w	r3, r3, #3
 800a09c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800a09e:	693b      	ldr	r3, [r7, #16]
 800a0a0:	2b00      	cmp	r3, #0
 800a0a2:	d005      	beq.n	800a0b0 <HAL_RCC_GetSysClockFreq+0x34>
 800a0a4:	693b      	ldr	r3, [r7, #16]
 800a0a6:	2b0c      	cmp	r3, #12
 800a0a8:	d121      	bne.n	800a0ee <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800a0aa:	68fb      	ldr	r3, [r7, #12]
 800a0ac:	2b01      	cmp	r3, #1
 800a0ae:	d11e      	bne.n	800a0ee <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800a0b0:	4b34      	ldr	r3, [pc, #208]	; (800a184 <HAL_RCC_GetSysClockFreq+0x108>)
 800a0b2:	681b      	ldr	r3, [r3, #0]
 800a0b4:	f003 0308 	and.w	r3, r3, #8
 800a0b8:	2b00      	cmp	r3, #0
 800a0ba:	d107      	bne.n	800a0cc <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800a0bc:	4b31      	ldr	r3, [pc, #196]	; (800a184 <HAL_RCC_GetSysClockFreq+0x108>)
 800a0be:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800a0c2:	0a1b      	lsrs	r3, r3, #8
 800a0c4:	f003 030f 	and.w	r3, r3, #15
 800a0c8:	61fb      	str	r3, [r7, #28]
 800a0ca:	e005      	b.n	800a0d8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800a0cc:	4b2d      	ldr	r3, [pc, #180]	; (800a184 <HAL_RCC_GetSysClockFreq+0x108>)
 800a0ce:	681b      	ldr	r3, [r3, #0]
 800a0d0:	091b      	lsrs	r3, r3, #4
 800a0d2:	f003 030f 	and.w	r3, r3, #15
 800a0d6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800a0d8:	4a2b      	ldr	r2, [pc, #172]	; (800a188 <HAL_RCC_GetSysClockFreq+0x10c>)
 800a0da:	69fb      	ldr	r3, [r7, #28]
 800a0dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a0e0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a0e2:	693b      	ldr	r3, [r7, #16]
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d10d      	bne.n	800a104 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800a0e8:	69fb      	ldr	r3, [r7, #28]
 800a0ea:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800a0ec:	e00a      	b.n	800a104 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800a0ee:	693b      	ldr	r3, [r7, #16]
 800a0f0:	2b04      	cmp	r3, #4
 800a0f2:	d102      	bne.n	800a0fa <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800a0f4:	4b25      	ldr	r3, [pc, #148]	; (800a18c <HAL_RCC_GetSysClockFreq+0x110>)
 800a0f6:	61bb      	str	r3, [r7, #24]
 800a0f8:	e004      	b.n	800a104 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800a0fa:	693b      	ldr	r3, [r7, #16]
 800a0fc:	2b08      	cmp	r3, #8
 800a0fe:	d101      	bne.n	800a104 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800a100:	4b23      	ldr	r3, [pc, #140]	; (800a190 <HAL_RCC_GetSysClockFreq+0x114>)
 800a102:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800a104:	693b      	ldr	r3, [r7, #16]
 800a106:	2b0c      	cmp	r3, #12
 800a108:	d134      	bne.n	800a174 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800a10a:	4b1e      	ldr	r3, [pc, #120]	; (800a184 <HAL_RCC_GetSysClockFreq+0x108>)
 800a10c:	68db      	ldr	r3, [r3, #12]
 800a10e:	f003 0303 	and.w	r3, r3, #3
 800a112:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800a114:	68bb      	ldr	r3, [r7, #8]
 800a116:	2b02      	cmp	r3, #2
 800a118:	d003      	beq.n	800a122 <HAL_RCC_GetSysClockFreq+0xa6>
 800a11a:	68bb      	ldr	r3, [r7, #8]
 800a11c:	2b03      	cmp	r3, #3
 800a11e:	d003      	beq.n	800a128 <HAL_RCC_GetSysClockFreq+0xac>
 800a120:	e005      	b.n	800a12e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800a122:	4b1a      	ldr	r3, [pc, #104]	; (800a18c <HAL_RCC_GetSysClockFreq+0x110>)
 800a124:	617b      	str	r3, [r7, #20]
      break;
 800a126:	e005      	b.n	800a134 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800a128:	4b19      	ldr	r3, [pc, #100]	; (800a190 <HAL_RCC_GetSysClockFreq+0x114>)
 800a12a:	617b      	str	r3, [r7, #20]
      break;
 800a12c:	e002      	b.n	800a134 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800a12e:	69fb      	ldr	r3, [r7, #28]
 800a130:	617b      	str	r3, [r7, #20]
      break;
 800a132:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800a134:	4b13      	ldr	r3, [pc, #76]	; (800a184 <HAL_RCC_GetSysClockFreq+0x108>)
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	091b      	lsrs	r3, r3, #4
 800a13a:	f003 0307 	and.w	r3, r3, #7
 800a13e:	3301      	adds	r3, #1
 800a140:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800a142:	4b10      	ldr	r3, [pc, #64]	; (800a184 <HAL_RCC_GetSysClockFreq+0x108>)
 800a144:	68db      	ldr	r3, [r3, #12]
 800a146:	0a1b      	lsrs	r3, r3, #8
 800a148:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a14c:	697a      	ldr	r2, [r7, #20]
 800a14e:	fb03 f202 	mul.w	r2, r3, r2
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	fbb2 f3f3 	udiv	r3, r2, r3
 800a158:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800a15a:	4b0a      	ldr	r3, [pc, #40]	; (800a184 <HAL_RCC_GetSysClockFreq+0x108>)
 800a15c:	68db      	ldr	r3, [r3, #12]
 800a15e:	0e5b      	lsrs	r3, r3, #25
 800a160:	f003 0303 	and.w	r3, r3, #3
 800a164:	3301      	adds	r3, #1
 800a166:	005b      	lsls	r3, r3, #1
 800a168:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800a16a:	697a      	ldr	r2, [r7, #20]
 800a16c:	683b      	ldr	r3, [r7, #0]
 800a16e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a172:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800a174:	69bb      	ldr	r3, [r7, #24]
}
 800a176:	4618      	mov	r0, r3
 800a178:	3724      	adds	r7, #36	; 0x24
 800a17a:	46bd      	mov	sp, r7
 800a17c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a180:	4770      	bx	lr
 800a182:	bf00      	nop
 800a184:	40021000 	.word	0x40021000
 800a188:	0801f888 	.word	0x0801f888
 800a18c:	00f42400 	.word	0x00f42400
 800a190:	007a1200 	.word	0x007a1200

0800a194 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a194:	b480      	push	{r7}
 800a196:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800a198:	4b03      	ldr	r3, [pc, #12]	; (800a1a8 <HAL_RCC_GetHCLKFreq+0x14>)
 800a19a:	681b      	ldr	r3, [r3, #0]
}
 800a19c:	4618      	mov	r0, r3
 800a19e:	46bd      	mov	sp, r7
 800a1a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a4:	4770      	bx	lr
 800a1a6:	bf00      	nop
 800a1a8:	20000048 	.word	0x20000048

0800a1ac <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800a1b0:	f7ff fff0 	bl	800a194 <HAL_RCC_GetHCLKFreq>
 800a1b4:	4602      	mov	r2, r0
 800a1b6:	4b06      	ldr	r3, [pc, #24]	; (800a1d0 <HAL_RCC_GetPCLK1Freq+0x24>)
 800a1b8:	689b      	ldr	r3, [r3, #8]
 800a1ba:	0a1b      	lsrs	r3, r3, #8
 800a1bc:	f003 0307 	and.w	r3, r3, #7
 800a1c0:	4904      	ldr	r1, [pc, #16]	; (800a1d4 <HAL_RCC_GetPCLK1Freq+0x28>)
 800a1c2:	5ccb      	ldrb	r3, [r1, r3]
 800a1c4:	f003 031f 	and.w	r3, r3, #31
 800a1c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1cc:	4618      	mov	r0, r3
 800a1ce:	bd80      	pop	{r7, pc}
 800a1d0:	40021000 	.word	0x40021000
 800a1d4:	0801f880 	.word	0x0801f880

0800a1d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a1d8:	b580      	push	{r7, lr}
 800a1da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800a1dc:	f7ff ffda 	bl	800a194 <HAL_RCC_GetHCLKFreq>
 800a1e0:	4602      	mov	r2, r0
 800a1e2:	4b06      	ldr	r3, [pc, #24]	; (800a1fc <HAL_RCC_GetPCLK2Freq+0x24>)
 800a1e4:	689b      	ldr	r3, [r3, #8]
 800a1e6:	0adb      	lsrs	r3, r3, #11
 800a1e8:	f003 0307 	and.w	r3, r3, #7
 800a1ec:	4904      	ldr	r1, [pc, #16]	; (800a200 <HAL_RCC_GetPCLK2Freq+0x28>)
 800a1ee:	5ccb      	ldrb	r3, [r1, r3]
 800a1f0:	f003 031f 	and.w	r3, r3, #31
 800a1f4:	fa22 f303 	lsr.w	r3, r2, r3
}
 800a1f8:	4618      	mov	r0, r3
 800a1fa:	bd80      	pop	{r7, pc}
 800a1fc:	40021000 	.word	0x40021000
 800a200:	0801f880 	.word	0x0801f880

0800a204 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800a204:	b480      	push	{r7}
 800a206:	b083      	sub	sp, #12
 800a208:	af00      	add	r7, sp, #0
 800a20a:	6078      	str	r0, [r7, #4]
 800a20c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800a20e:	687b      	ldr	r3, [r7, #4]
 800a210:	220f      	movs	r2, #15
 800a212:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800a214:	4b12      	ldr	r3, [pc, #72]	; (800a260 <HAL_RCC_GetClockConfig+0x5c>)
 800a216:	689b      	ldr	r3, [r3, #8]
 800a218:	f003 0203 	and.w	r2, r3, #3
 800a21c:	687b      	ldr	r3, [r7, #4]
 800a21e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800a220:	4b0f      	ldr	r3, [pc, #60]	; (800a260 <HAL_RCC_GetClockConfig+0x5c>)
 800a222:	689b      	ldr	r3, [r3, #8]
 800a224:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800a228:	687b      	ldr	r3, [r7, #4]
 800a22a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 800a22c:	4b0c      	ldr	r3, [pc, #48]	; (800a260 <HAL_RCC_GetClockConfig+0x5c>)
 800a22e:	689b      	ldr	r3, [r3, #8]
 800a230:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800a238:	4b09      	ldr	r3, [pc, #36]	; (800a260 <HAL_RCC_GetClockConfig+0x5c>)
 800a23a:	689b      	ldr	r3, [r3, #8]
 800a23c:	08db      	lsrs	r3, r3, #3
 800a23e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800a246:	4b07      	ldr	r3, [pc, #28]	; (800a264 <HAL_RCC_GetClockConfig+0x60>)
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	f003 0207 	and.w	r2, r3, #7
 800a24e:	683b      	ldr	r3, [r7, #0]
 800a250:	601a      	str	r2, [r3, #0]
}
 800a252:	bf00      	nop
 800a254:	370c      	adds	r7, #12
 800a256:	46bd      	mov	sp, r7
 800a258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a25c:	4770      	bx	lr
 800a25e:	bf00      	nop
 800a260:	40021000 	.word	0x40021000
 800a264:	40022000 	.word	0x40022000

0800a268 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800a268:	b580      	push	{r7, lr}
 800a26a:	b086      	sub	sp, #24
 800a26c:	af00      	add	r7, sp, #0
 800a26e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800a270:	2300      	movs	r3, #0
 800a272:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800a274:	4b2a      	ldr	r3, [pc, #168]	; (800a320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a278:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d003      	beq.n	800a288 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800a280:	f7ff f984 	bl	800958c <HAL_PWREx_GetVoltageRange>
 800a284:	6178      	str	r0, [r7, #20]
 800a286:	e014      	b.n	800a2b2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800a288:	4b25      	ldr	r3, [pc, #148]	; (800a320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a28a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a28c:	4a24      	ldr	r2, [pc, #144]	; (800a320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a28e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a292:	6593      	str	r3, [r2, #88]	; 0x58
 800a294:	4b22      	ldr	r3, [pc, #136]	; (800a320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a296:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a298:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a29c:	60fb      	str	r3, [r7, #12]
 800a29e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800a2a0:	f7ff f974 	bl	800958c <HAL_PWREx_GetVoltageRange>
 800a2a4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800a2a6:	4b1e      	ldr	r3, [pc, #120]	; (800a320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a2a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a2aa:	4a1d      	ldr	r2, [pc, #116]	; (800a320 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800a2ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a2b0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a2b8:	d10b      	bne.n	800a2d2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800a2ba:	687b      	ldr	r3, [r7, #4]
 800a2bc:	2b80      	cmp	r3, #128	; 0x80
 800a2be:	d919      	bls.n	800a2f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800a2c0:	687b      	ldr	r3, [r7, #4]
 800a2c2:	2ba0      	cmp	r3, #160	; 0xa0
 800a2c4:	d902      	bls.n	800a2cc <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a2c6:	2302      	movs	r3, #2
 800a2c8:	613b      	str	r3, [r7, #16]
 800a2ca:	e013      	b.n	800a2f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a2cc:	2301      	movs	r3, #1
 800a2ce:	613b      	str	r3, [r7, #16]
 800a2d0:	e010      	b.n	800a2f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800a2d2:	687b      	ldr	r3, [r7, #4]
 800a2d4:	2b80      	cmp	r3, #128	; 0x80
 800a2d6:	d902      	bls.n	800a2de <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800a2d8:	2303      	movs	r3, #3
 800a2da:	613b      	str	r3, [r7, #16]
 800a2dc:	e00a      	b.n	800a2f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2b80      	cmp	r3, #128	; 0x80
 800a2e2:	d102      	bne.n	800a2ea <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800a2e4:	2302      	movs	r3, #2
 800a2e6:	613b      	str	r3, [r7, #16]
 800a2e8:	e004      	b.n	800a2f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800a2ea:	687b      	ldr	r3, [r7, #4]
 800a2ec:	2b70      	cmp	r3, #112	; 0x70
 800a2ee:	d101      	bne.n	800a2f4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800a2f4:	4b0b      	ldr	r3, [pc, #44]	; (800a324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	f023 0207 	bic.w	r2, r3, #7
 800a2fc:	4909      	ldr	r1, [pc, #36]	; (800a324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a2fe:	693b      	ldr	r3, [r7, #16]
 800a300:	4313      	orrs	r3, r2
 800a302:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800a304:	4b07      	ldr	r3, [pc, #28]	; (800a324 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	f003 0307 	and.w	r3, r3, #7
 800a30c:	693a      	ldr	r2, [r7, #16]
 800a30e:	429a      	cmp	r2, r3
 800a310:	d001      	beq.n	800a316 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800a312:	2301      	movs	r3, #1
 800a314:	e000      	b.n	800a318 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800a316:	2300      	movs	r3, #0
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3718      	adds	r7, #24
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	40021000 	.word	0x40021000
 800a324:	40022000 	.word	0x40022000

0800a328 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800a328:	b580      	push	{r7, lr}
 800a32a:	b086      	sub	sp, #24
 800a32c:	af00      	add	r7, sp, #0
 800a32e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a330:	2300      	movs	r3, #0
 800a332:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800a334:	2300      	movs	r3, #0
 800a336:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800a338:	687b      	ldr	r3, [r7, #4]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a340:	2b00      	cmp	r3, #0
 800a342:	d031      	beq.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800a344:	687b      	ldr	r3, [r7, #4]
 800a346:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a348:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a34c:	d01a      	beq.n	800a384 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800a34e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800a352:	d814      	bhi.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x56>
 800a354:	2b00      	cmp	r3, #0
 800a356:	d009      	beq.n	800a36c <HAL_RCCEx_PeriphCLKConfig+0x44>
 800a358:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a35c:	d10f      	bne.n	800a37e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800a35e:	4b5d      	ldr	r3, [pc, #372]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a360:	68db      	ldr	r3, [r3, #12]
 800a362:	4a5c      	ldr	r2, [pc, #368]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a364:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a368:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a36a:	e00c      	b.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	3304      	adds	r3, #4
 800a370:	2100      	movs	r1, #0
 800a372:	4618      	mov	r0, r3
 800a374:	f000 f9de 	bl	800a734 <RCCEx_PLLSAI1_Config>
 800a378:	4603      	mov	r3, r0
 800a37a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800a37c:	e003      	b.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800a37e:	2301      	movs	r3, #1
 800a380:	74fb      	strb	r3, [r7, #19]
      break;
 800a382:	e000      	b.n	800a386 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800a384:	bf00      	nop
    }

    if(ret == HAL_OK)
 800a386:	7cfb      	ldrb	r3, [r7, #19]
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d10b      	bne.n	800a3a4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a38c:	4b51      	ldr	r3, [pc, #324]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a38e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a392:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800a396:	687b      	ldr	r3, [r7, #4]
 800a398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a39a:	494e      	ldr	r1, [pc, #312]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a39c:	4313      	orrs	r3, r2
 800a39e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800a3a2:	e001      	b.n	800a3a8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a3a4:	7cfb      	ldrb	r3, [r7, #19]
 800a3a6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	f000 809e 	beq.w	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800a3ba:	4b46      	ldr	r3, [pc, #280]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a3bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3c2:	2b00      	cmp	r3, #0
 800a3c4:	d101      	bne.n	800a3ca <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	e000      	b.n	800a3cc <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800a3ca:	2300      	movs	r3, #0
 800a3cc:	2b00      	cmp	r3, #0
 800a3ce:	d00d      	beq.n	800a3ec <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a3d0:	4b40      	ldr	r3, [pc, #256]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a3d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3d4:	4a3f      	ldr	r2, [pc, #252]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a3d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a3da:	6593      	str	r3, [r2, #88]	; 0x58
 800a3dc:	4b3d      	ldr	r3, [pc, #244]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a3de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a3e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a3e4:	60bb      	str	r3, [r7, #8]
 800a3e6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a3e8:	2301      	movs	r3, #1
 800a3ea:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800a3ec:	4b3a      	ldr	r3, [pc, #232]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a3ee:	681b      	ldr	r3, [r3, #0]
 800a3f0:	4a39      	ldr	r2, [pc, #228]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a3f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a3f6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800a3f8:	f7fb ff76 	bl	80062e8 <HAL_GetTick>
 800a3fc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a3fe:	e009      	b.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a400:	f7fb ff72 	bl	80062e8 <HAL_GetTick>
 800a404:	4602      	mov	r2, r0
 800a406:	68fb      	ldr	r3, [r7, #12]
 800a408:	1ad3      	subs	r3, r2, r3
 800a40a:	2b02      	cmp	r3, #2
 800a40c:	d902      	bls.n	800a414 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800a40e:	2303      	movs	r3, #3
 800a410:	74fb      	strb	r3, [r7, #19]
        break;
 800a412:	e005      	b.n	800a420 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800a414:	4b30      	ldr	r3, [pc, #192]	; (800a4d8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a41c:	2b00      	cmp	r3, #0
 800a41e:	d0ef      	beq.n	800a400 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800a420:	7cfb      	ldrb	r3, [r7, #19]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d15a      	bne.n	800a4dc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800a426:	4b2b      	ldr	r3, [pc, #172]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a428:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a42c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a430:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800a432:	697b      	ldr	r3, [r7, #20]
 800a434:	2b00      	cmp	r3, #0
 800a436:	d01e      	beq.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a43c:	697a      	ldr	r2, [r7, #20]
 800a43e:	429a      	cmp	r2, r3
 800a440:	d019      	beq.n	800a476 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800a442:	4b24      	ldr	r3, [pc, #144]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a444:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a44c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800a44e:	4b21      	ldr	r3, [pc, #132]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a450:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a454:	4a1f      	ldr	r2, [pc, #124]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a456:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a45a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800a45e:	4b1d      	ldr	r3, [pc, #116]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a460:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a464:	4a1b      	ldr	r2, [pc, #108]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a466:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a46a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800a46e:	4a19      	ldr	r2, [pc, #100]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a470:	697b      	ldr	r3, [r7, #20]
 800a472:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800a476:	697b      	ldr	r3, [r7, #20]
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d016      	beq.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a480:	f7fb ff32 	bl	80062e8 <HAL_GetTick>
 800a484:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a486:	e00b      	b.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a488:	f7fb ff2e 	bl	80062e8 <HAL_GetTick>
 800a48c:	4602      	mov	r2, r0
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	1ad3      	subs	r3, r2, r3
 800a492:	f241 3288 	movw	r2, #5000	; 0x1388
 800a496:	4293      	cmp	r3, r2
 800a498:	d902      	bls.n	800a4a0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800a49a:	2303      	movs	r3, #3
 800a49c:	74fb      	strb	r3, [r7, #19]
            break;
 800a49e:	e006      	b.n	800a4ae <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800a4a0:	4b0c      	ldr	r3, [pc, #48]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a4a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4a6:	f003 0302 	and.w	r3, r3, #2
 800a4aa:	2b00      	cmp	r3, #0
 800a4ac:	d0ec      	beq.n	800a488 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800a4ae:	7cfb      	ldrb	r3, [r7, #19]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d10b      	bne.n	800a4cc <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800a4b4:	4b07      	ldr	r3, [pc, #28]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a4b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a4ba:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4c2:	4904      	ldr	r1, [pc, #16]	; (800a4d4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800a4c4:	4313      	orrs	r3, r2
 800a4c6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800a4ca:	e009      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800a4cc:	7cfb      	ldrb	r3, [r7, #19]
 800a4ce:	74bb      	strb	r3, [r7, #18]
 800a4d0:	e006      	b.n	800a4e0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800a4d2:	bf00      	nop
 800a4d4:	40021000 	.word	0x40021000
 800a4d8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800a4dc:	7cfb      	ldrb	r3, [r7, #19]
 800a4de:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a4e0:	7c7b      	ldrb	r3, [r7, #17]
 800a4e2:	2b01      	cmp	r3, #1
 800a4e4:	d105      	bne.n	800a4f2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a4e6:	4b8a      	ldr	r3, [pc, #552]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a4e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a4ea:	4a89      	ldr	r2, [pc, #548]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a4ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a4f0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800a4f2:	687b      	ldr	r3, [r7, #4]
 800a4f4:	681b      	ldr	r3, [r3, #0]
 800a4f6:	f003 0301 	and.w	r3, r3, #1
 800a4fa:	2b00      	cmp	r3, #0
 800a4fc:	d00a      	beq.n	800a514 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800a4fe:	4b84      	ldr	r3, [pc, #528]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a500:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a504:	f023 0203 	bic.w	r2, r3, #3
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	6a1b      	ldr	r3, [r3, #32]
 800a50c:	4980      	ldr	r1, [pc, #512]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a50e:	4313      	orrs	r3, r2
 800a510:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	f003 0302 	and.w	r3, r3, #2
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d00a      	beq.n	800a536 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800a520:	4b7b      	ldr	r3, [pc, #492]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a522:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a526:	f023 020c 	bic.w	r2, r3, #12
 800a52a:	687b      	ldr	r3, [r7, #4]
 800a52c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a52e:	4978      	ldr	r1, [pc, #480]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a530:	4313      	orrs	r3, r2
 800a532:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f003 0320 	and.w	r3, r3, #32
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00a      	beq.n	800a558 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800a542:	4b73      	ldr	r3, [pc, #460]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a544:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a548:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800a54c:	687b      	ldr	r3, [r7, #4]
 800a54e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a550:	496f      	ldr	r1, [pc, #444]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a552:	4313      	orrs	r3, r2
 800a554:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800a560:	2b00      	cmp	r3, #0
 800a562:	d00a      	beq.n	800a57a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800a564:	4b6a      	ldr	r3, [pc, #424]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a56a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800a56e:	687b      	ldr	r3, [r7, #4]
 800a570:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a572:	4967      	ldr	r1, [pc, #412]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a574:	4313      	orrs	r3, r2
 800a576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a582:	2b00      	cmp	r3, #0
 800a584:	d00a      	beq.n	800a59c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800a586:	4b62      	ldr	r3, [pc, #392]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a588:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a58c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a594:	495e      	ldr	r1, [pc, #376]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a596:	4313      	orrs	r3, r2
 800a598:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00a      	beq.n	800a5be <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800a5a8:	4b59      	ldr	r3, [pc, #356]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a5aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5ae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a5b6:	4956      	ldr	r1, [pc, #344]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a5b8:	4313      	orrs	r3, r2
 800a5ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d00a      	beq.n	800a5e0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800a5ca:	4b51      	ldr	r3, [pc, #324]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a5cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a5d8:	494d      	ldr	r1, [pc, #308]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d028      	beq.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800a5ec:	4b48      	ldr	r3, [pc, #288]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a5ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a5f2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a5f6:	687b      	ldr	r3, [r7, #4]
 800a5f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a5fa:	4945      	ldr	r1, [pc, #276]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a606:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a60a:	d106      	bne.n	800a61a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a60c:	4b40      	ldr	r3, [pc, #256]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a60e:	68db      	ldr	r3, [r3, #12]
 800a610:	4a3f      	ldr	r2, [pc, #252]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a612:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a616:	60d3      	str	r3, [r2, #12]
 800a618:	e011      	b.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a61e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a622:	d10c      	bne.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	3304      	adds	r3, #4
 800a628:	2101      	movs	r1, #1
 800a62a:	4618      	mov	r0, r3
 800a62c:	f000 f882 	bl	800a734 <RCCEx_PLLSAI1_Config>
 800a630:	4603      	mov	r3, r0
 800a632:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800a634:	7cfb      	ldrb	r3, [r7, #19]
 800a636:	2b00      	cmp	r3, #0
 800a638:	d001      	beq.n	800a63e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800a63a:	7cfb      	ldrb	r3, [r7, #19]
 800a63c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a646:	2b00      	cmp	r3, #0
 800a648:	d028      	beq.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800a64a:	4b31      	ldr	r3, [pc, #196]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a64c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a650:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a658:	492d      	ldr	r1, [pc, #180]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a65a:	4313      	orrs	r3, r2
 800a65c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a664:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800a668:	d106      	bne.n	800a678 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800a66a:	4b29      	ldr	r3, [pc, #164]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a66c:	68db      	ldr	r3, [r3, #12]
 800a66e:	4a28      	ldr	r2, [pc, #160]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a670:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800a674:	60d3      	str	r3, [r2, #12]
 800a676:	e011      	b.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800a678:	687b      	ldr	r3, [r7, #4]
 800a67a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a67c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800a680:	d10c      	bne.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800a682:	687b      	ldr	r3, [r7, #4]
 800a684:	3304      	adds	r3, #4
 800a686:	2101      	movs	r1, #1
 800a688:	4618      	mov	r0, r3
 800a68a:	f000 f853 	bl	800a734 <RCCEx_PLLSAI1_Config>
 800a68e:	4603      	mov	r3, r0
 800a690:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a692:	7cfb      	ldrb	r3, [r7, #19]
 800a694:	2b00      	cmp	r3, #0
 800a696:	d001      	beq.n	800a69c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800a698:	7cfb      	ldrb	r3, [r7, #19]
 800a69a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800a69c:	687b      	ldr	r3, [r7, #4]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d01c      	beq.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800a6a8:	4b19      	ldr	r3, [pc, #100]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a6aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6ae:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6b6:	4916      	ldr	r1, [pc, #88]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800a6be:	687b      	ldr	r3, [r7, #4]
 800a6c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800a6c2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800a6c6:	d10c      	bne.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	3304      	adds	r3, #4
 800a6cc:	2102      	movs	r1, #2
 800a6ce:	4618      	mov	r0, r3
 800a6d0:	f000 f830 	bl	800a734 <RCCEx_PLLSAI1_Config>
 800a6d4:	4603      	mov	r3, r0
 800a6d6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800a6d8:	7cfb      	ldrb	r3, [r7, #19]
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d001      	beq.n	800a6e2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800a6de:	7cfb      	ldrb	r3, [r7, #19]
 800a6e0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800a6e2:	687b      	ldr	r3, [r7, #4]
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800a6ea:	2b00      	cmp	r3, #0
 800a6ec:	d00a      	beq.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800a6ee:	4b08      	ldr	r3, [pc, #32]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a6f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a6f4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800a6f8:	687b      	ldr	r3, [r7, #4]
 800a6fa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a6fc:	4904      	ldr	r1, [pc, #16]	; (800a710 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800a6fe:	4313      	orrs	r3, r2
 800a700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800a704:	7cbb      	ldrb	r3, [r7, #18]
}
 800a706:	4618      	mov	r0, r3
 800a708:	3718      	adds	r7, #24
 800a70a:	46bd      	mov	sp, r7
 800a70c:	bd80      	pop	{r7, pc}
 800a70e:	bf00      	nop
 800a710:	40021000 	.word	0x40021000

0800a714 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800a714:	b480      	push	{r7}
 800a716:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800a718:	4b05      	ldr	r3, [pc, #20]	; (800a730 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a71a:	681b      	ldr	r3, [r3, #0]
 800a71c:	4a04      	ldr	r2, [pc, #16]	; (800a730 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800a71e:	f043 0304 	orr.w	r3, r3, #4
 800a722:	6013      	str	r3, [r2, #0]
}
 800a724:	bf00      	nop
 800a726:	46bd      	mov	sp, r7
 800a728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72c:	4770      	bx	lr
 800a72e:	bf00      	nop
 800a730:	40021000 	.word	0x40021000

0800a734 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800a734:	b580      	push	{r7, lr}
 800a736:	b084      	sub	sp, #16
 800a738:	af00      	add	r7, sp, #0
 800a73a:	6078      	str	r0, [r7, #4]
 800a73c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800a73e:	2300      	movs	r3, #0
 800a740:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800a742:	4b74      	ldr	r3, [pc, #464]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a744:	68db      	ldr	r3, [r3, #12]
 800a746:	f003 0303 	and.w	r3, r3, #3
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d018      	beq.n	800a780 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800a74e:	4b71      	ldr	r3, [pc, #452]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a750:	68db      	ldr	r3, [r3, #12]
 800a752:	f003 0203 	and.w	r2, r3, #3
 800a756:	687b      	ldr	r3, [r7, #4]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	429a      	cmp	r2, r3
 800a75c:	d10d      	bne.n	800a77a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	681b      	ldr	r3, [r3, #0]
       ||
 800a762:	2b00      	cmp	r3, #0
 800a764:	d009      	beq.n	800a77a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800a766:	4b6b      	ldr	r3, [pc, #428]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a768:	68db      	ldr	r3, [r3, #12]
 800a76a:	091b      	lsrs	r3, r3, #4
 800a76c:	f003 0307 	and.w	r3, r3, #7
 800a770:	1c5a      	adds	r2, r3, #1
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	685b      	ldr	r3, [r3, #4]
       ||
 800a776:	429a      	cmp	r2, r3
 800a778:	d047      	beq.n	800a80a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800a77a:	2301      	movs	r3, #1
 800a77c:	73fb      	strb	r3, [r7, #15]
 800a77e:	e044      	b.n	800a80a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	2b03      	cmp	r3, #3
 800a786:	d018      	beq.n	800a7ba <RCCEx_PLLSAI1_Config+0x86>
 800a788:	2b03      	cmp	r3, #3
 800a78a:	d825      	bhi.n	800a7d8 <RCCEx_PLLSAI1_Config+0xa4>
 800a78c:	2b01      	cmp	r3, #1
 800a78e:	d002      	beq.n	800a796 <RCCEx_PLLSAI1_Config+0x62>
 800a790:	2b02      	cmp	r3, #2
 800a792:	d009      	beq.n	800a7a8 <RCCEx_PLLSAI1_Config+0x74>
 800a794:	e020      	b.n	800a7d8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800a796:	4b5f      	ldr	r3, [pc, #380]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a798:	681b      	ldr	r3, [r3, #0]
 800a79a:	f003 0302 	and.w	r3, r3, #2
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d11d      	bne.n	800a7de <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800a7a2:	2301      	movs	r3, #1
 800a7a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a7a6:	e01a      	b.n	800a7de <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800a7a8:	4b5a      	ldr	r3, [pc, #360]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d116      	bne.n	800a7e2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800a7b4:	2301      	movs	r3, #1
 800a7b6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800a7b8:	e013      	b.n	800a7e2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800a7ba:	4b56      	ldr	r3, [pc, #344]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a7c2:	2b00      	cmp	r3, #0
 800a7c4:	d10f      	bne.n	800a7e6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800a7c6:	4b53      	ldr	r3, [pc, #332]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a7c8:	681b      	ldr	r3, [r3, #0]
 800a7ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800a7ce:	2b00      	cmp	r3, #0
 800a7d0:	d109      	bne.n	800a7e6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800a7d2:	2301      	movs	r3, #1
 800a7d4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800a7d6:	e006      	b.n	800a7e6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800a7d8:	2301      	movs	r3, #1
 800a7da:	73fb      	strb	r3, [r7, #15]
      break;
 800a7dc:	e004      	b.n	800a7e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a7de:	bf00      	nop
 800a7e0:	e002      	b.n	800a7e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a7e2:	bf00      	nop
 800a7e4:	e000      	b.n	800a7e8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800a7e6:	bf00      	nop
    }

    if(status == HAL_OK)
 800a7e8:	7bfb      	ldrb	r3, [r7, #15]
 800a7ea:	2b00      	cmp	r3, #0
 800a7ec:	d10d      	bne.n	800a80a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800a7ee:	4b49      	ldr	r3, [pc, #292]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a7f0:	68db      	ldr	r3, [r3, #12]
 800a7f2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	6819      	ldr	r1, [r3, #0]
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	685b      	ldr	r3, [r3, #4]
 800a7fe:	3b01      	subs	r3, #1
 800a800:	011b      	lsls	r3, r3, #4
 800a802:	430b      	orrs	r3, r1
 800a804:	4943      	ldr	r1, [pc, #268]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a806:	4313      	orrs	r3, r2
 800a808:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800a80a:	7bfb      	ldrb	r3, [r7, #15]
 800a80c:	2b00      	cmp	r3, #0
 800a80e:	d17c      	bne.n	800a90a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800a810:	4b40      	ldr	r3, [pc, #256]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	4a3f      	ldr	r2, [pc, #252]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a816:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800a81a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a81c:	f7fb fd64 	bl	80062e8 <HAL_GetTick>
 800a820:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a822:	e009      	b.n	800a838 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a824:	f7fb fd60 	bl	80062e8 <HAL_GetTick>
 800a828:	4602      	mov	r2, r0
 800a82a:	68bb      	ldr	r3, [r7, #8]
 800a82c:	1ad3      	subs	r3, r2, r3
 800a82e:	2b02      	cmp	r3, #2
 800a830:	d902      	bls.n	800a838 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800a832:	2303      	movs	r3, #3
 800a834:	73fb      	strb	r3, [r7, #15]
        break;
 800a836:	e005      	b.n	800a844 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800a838:	4b36      	ldr	r3, [pc, #216]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1ef      	bne.n	800a824 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800a844:	7bfb      	ldrb	r3, [r7, #15]
 800a846:	2b00      	cmp	r3, #0
 800a848:	d15f      	bne.n	800a90a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800a84a:	683b      	ldr	r3, [r7, #0]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d110      	bne.n	800a872 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a850:	4b30      	ldr	r3, [pc, #192]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a852:	691b      	ldr	r3, [r3, #16]
 800a854:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800a858:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	6892      	ldr	r2, [r2, #8]
 800a860:	0211      	lsls	r1, r2, #8
 800a862:	687a      	ldr	r2, [r7, #4]
 800a864:	68d2      	ldr	r2, [r2, #12]
 800a866:	06d2      	lsls	r2, r2, #27
 800a868:	430a      	orrs	r2, r1
 800a86a:	492a      	ldr	r1, [pc, #168]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a86c:	4313      	orrs	r3, r2
 800a86e:	610b      	str	r3, [r1, #16]
 800a870:	e027      	b.n	800a8c2 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800a872:	683b      	ldr	r3, [r7, #0]
 800a874:	2b01      	cmp	r3, #1
 800a876:	d112      	bne.n	800a89e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a878:	4b26      	ldr	r3, [pc, #152]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a87a:	691b      	ldr	r3, [r3, #16]
 800a87c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800a880:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a884:	687a      	ldr	r2, [r7, #4]
 800a886:	6892      	ldr	r2, [r2, #8]
 800a888:	0211      	lsls	r1, r2, #8
 800a88a:	687a      	ldr	r2, [r7, #4]
 800a88c:	6912      	ldr	r2, [r2, #16]
 800a88e:	0852      	lsrs	r2, r2, #1
 800a890:	3a01      	subs	r2, #1
 800a892:	0552      	lsls	r2, r2, #21
 800a894:	430a      	orrs	r2, r1
 800a896:	491f      	ldr	r1, [pc, #124]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a898:	4313      	orrs	r3, r2
 800a89a:	610b      	str	r3, [r1, #16]
 800a89c:	e011      	b.n	800a8c2 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800a89e:	4b1d      	ldr	r3, [pc, #116]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a8a0:	691b      	ldr	r3, [r3, #16]
 800a8a2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800a8a6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800a8aa:	687a      	ldr	r2, [r7, #4]
 800a8ac:	6892      	ldr	r2, [r2, #8]
 800a8ae:	0211      	lsls	r1, r2, #8
 800a8b0:	687a      	ldr	r2, [r7, #4]
 800a8b2:	6952      	ldr	r2, [r2, #20]
 800a8b4:	0852      	lsrs	r2, r2, #1
 800a8b6:	3a01      	subs	r2, #1
 800a8b8:	0652      	lsls	r2, r2, #25
 800a8ba:	430a      	orrs	r2, r1
 800a8bc:	4915      	ldr	r1, [pc, #84]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a8be:	4313      	orrs	r3, r2
 800a8c0:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800a8c2:	4b14      	ldr	r3, [pc, #80]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a8c4:	681b      	ldr	r3, [r3, #0]
 800a8c6:	4a13      	ldr	r2, [pc, #76]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a8c8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800a8cc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a8ce:	f7fb fd0b 	bl	80062e8 <HAL_GetTick>
 800a8d2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a8d4:	e009      	b.n	800a8ea <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800a8d6:	f7fb fd07 	bl	80062e8 <HAL_GetTick>
 800a8da:	4602      	mov	r2, r0
 800a8dc:	68bb      	ldr	r3, [r7, #8]
 800a8de:	1ad3      	subs	r3, r2, r3
 800a8e0:	2b02      	cmp	r3, #2
 800a8e2:	d902      	bls.n	800a8ea <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800a8e4:	2303      	movs	r3, #3
 800a8e6:	73fb      	strb	r3, [r7, #15]
          break;
 800a8e8:	e005      	b.n	800a8f6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800a8ea:	4b0a      	ldr	r3, [pc, #40]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d0ef      	beq.n	800a8d6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800a8f6:	7bfb      	ldrb	r3, [r7, #15]
 800a8f8:	2b00      	cmp	r3, #0
 800a8fa:	d106      	bne.n	800a90a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800a8fc:	4b05      	ldr	r3, [pc, #20]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a8fe:	691a      	ldr	r2, [r3, #16]
 800a900:	687b      	ldr	r3, [r7, #4]
 800a902:	699b      	ldr	r3, [r3, #24]
 800a904:	4903      	ldr	r1, [pc, #12]	; (800a914 <RCCEx_PLLSAI1_Config+0x1e0>)
 800a906:	4313      	orrs	r3, r2
 800a908:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800a90a:	7bfb      	ldrb	r3, [r7, #15]
}
 800a90c:	4618      	mov	r0, r3
 800a90e:	3710      	adds	r7, #16
 800a910:	46bd      	mov	sp, r7
 800a912:	bd80      	pop	{r7, pc}
 800a914:	40021000 	.word	0x40021000

0800a918 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800a918:	b580      	push	{r7, lr}
 800a91a:	b082      	sub	sp, #8
 800a91c:	af00      	add	r7, sp, #0
 800a91e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800a920:	687b      	ldr	r3, [r7, #4]
 800a922:	2b00      	cmp	r3, #0
 800a924:	d101      	bne.n	800a92a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800a926:	2301      	movs	r3, #1
 800a928:	e049      	b.n	800a9be <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a930:	b2db      	uxtb	r3, r3
 800a932:	2b00      	cmp	r3, #0
 800a934:	d106      	bne.n	800a944 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800a936:	687b      	ldr	r3, [r7, #4]
 800a938:	2200      	movs	r2, #0
 800a93a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800a93e:	6878      	ldr	r0, [r7, #4]
 800a940:	f7fa fa9c 	bl	8004e7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	2202      	movs	r2, #2
 800a948:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	681a      	ldr	r2, [r3, #0]
 800a950:	687b      	ldr	r3, [r7, #4]
 800a952:	3304      	adds	r3, #4
 800a954:	4619      	mov	r1, r3
 800a956:	4610      	mov	r0, r2
 800a958:	f000 fae6 	bl	800af28 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800a95c:	687b      	ldr	r3, [r7, #4]
 800a95e:	2201      	movs	r2, #1
 800a960:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a964:	687b      	ldr	r3, [r7, #4]
 800a966:	2201      	movs	r2, #1
 800a968:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	2201      	movs	r2, #1
 800a970:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	2201      	movs	r2, #1
 800a978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	2201      	movs	r2, #1
 800a980:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	2201      	movs	r2, #1
 800a988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800a98c:	687b      	ldr	r3, [r7, #4]
 800a98e:	2201      	movs	r2, #1
 800a990:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2201      	movs	r2, #1
 800a998:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a99c:	687b      	ldr	r3, [r7, #4]
 800a99e:	2201      	movs	r2, #1
 800a9a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9a4:	687b      	ldr	r3, [r7, #4]
 800a9a6:	2201      	movs	r2, #1
 800a9a8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	2201      	movs	r2, #1
 800a9b0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800a9b4:	687b      	ldr	r3, [r7, #4]
 800a9b6:	2201      	movs	r2, #1
 800a9b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800a9bc:	2300      	movs	r3, #0
}
 800a9be:	4618      	mov	r0, r3
 800a9c0:	3708      	adds	r7, #8
 800a9c2:	46bd      	mov	sp, r7
 800a9c4:	bd80      	pop	{r7, pc}
	...

0800a9c8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b085      	sub	sp, #20
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a9d6:	b2db      	uxtb	r3, r3
 800a9d8:	2b01      	cmp	r3, #1
 800a9da:	d001      	beq.n	800a9e0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800a9dc:	2301      	movs	r3, #1
 800a9de:	e033      	b.n	800aa48 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	2202      	movs	r2, #2
 800a9e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a9e8:	687b      	ldr	r3, [r7, #4]
 800a9ea:	681b      	ldr	r3, [r3, #0]
 800a9ec:	4a19      	ldr	r2, [pc, #100]	; (800aa54 <HAL_TIM_Base_Start+0x8c>)
 800a9ee:	4293      	cmp	r3, r2
 800a9f0:	d009      	beq.n	800aa06 <HAL_TIM_Base_Start+0x3e>
 800a9f2:	687b      	ldr	r3, [r7, #4]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a9fa:	d004      	beq.n	800aa06 <HAL_TIM_Base_Start+0x3e>
 800a9fc:	687b      	ldr	r3, [r7, #4]
 800a9fe:	681b      	ldr	r3, [r3, #0]
 800aa00:	4a15      	ldr	r2, [pc, #84]	; (800aa58 <HAL_TIM_Base_Start+0x90>)
 800aa02:	4293      	cmp	r3, r2
 800aa04:	d115      	bne.n	800aa32 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aa06:	687b      	ldr	r3, [r7, #4]
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	689a      	ldr	r2, [r3, #8]
 800aa0c:	4b13      	ldr	r3, [pc, #76]	; (800aa5c <HAL_TIM_Base_Start+0x94>)
 800aa0e:	4013      	ands	r3, r2
 800aa10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	2b06      	cmp	r3, #6
 800aa16:	d015      	beq.n	800aa44 <HAL_TIM_Base_Start+0x7c>
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aa1e:	d011      	beq.n	800aa44 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	681a      	ldr	r2, [r3, #0]
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	681b      	ldr	r3, [r3, #0]
 800aa2a:	f042 0201 	orr.w	r2, r2, #1
 800aa2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa30:	e008      	b.n	800aa44 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	681b      	ldr	r3, [r3, #0]
 800aa36:	681a      	ldr	r2, [r3, #0]
 800aa38:	687b      	ldr	r3, [r7, #4]
 800aa3a:	681b      	ldr	r3, [r3, #0]
 800aa3c:	f042 0201 	orr.w	r2, r2, #1
 800aa40:	601a      	str	r2, [r3, #0]
 800aa42:	e000      	b.n	800aa46 <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aa44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aa46:	2300      	movs	r3, #0
}
 800aa48:	4618      	mov	r0, r3
 800aa4a:	3714      	adds	r7, #20
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa52:	4770      	bx	lr
 800aa54:	40012c00 	.word	0x40012c00
 800aa58:	40014000 	.word	0x40014000
 800aa5c:	00010007 	.word	0x00010007

0800aa60 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800aa60:	b480      	push	{r7}
 800aa62:	b085      	sub	sp, #20
 800aa64:	af00      	add	r7, sp, #0
 800aa66:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800aa68:	687b      	ldr	r3, [r7, #4]
 800aa6a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800aa6e:	b2db      	uxtb	r3, r3
 800aa70:	2b01      	cmp	r3, #1
 800aa72:	d001      	beq.n	800aa78 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800aa74:	2301      	movs	r3, #1
 800aa76:	e03b      	b.n	800aaf0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	2202      	movs	r2, #2
 800aa7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	68da      	ldr	r2, [r3, #12]
 800aa86:	687b      	ldr	r3, [r7, #4]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	f042 0201 	orr.w	r2, r2, #1
 800aa8e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	681b      	ldr	r3, [r3, #0]
 800aa94:	4a19      	ldr	r2, [pc, #100]	; (800aafc <HAL_TIM_Base_Start_IT+0x9c>)
 800aa96:	4293      	cmp	r3, r2
 800aa98:	d009      	beq.n	800aaae <HAL_TIM_Base_Start_IT+0x4e>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	681b      	ldr	r3, [r3, #0]
 800aa9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aaa2:	d004      	beq.n	800aaae <HAL_TIM_Base_Start_IT+0x4e>
 800aaa4:	687b      	ldr	r3, [r7, #4]
 800aaa6:	681b      	ldr	r3, [r3, #0]
 800aaa8:	4a15      	ldr	r2, [pc, #84]	; (800ab00 <HAL_TIM_Base_Start_IT+0xa0>)
 800aaaa:	4293      	cmp	r3, r2
 800aaac:	d115      	bne.n	800aada <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800aaae:	687b      	ldr	r3, [r7, #4]
 800aab0:	681b      	ldr	r3, [r3, #0]
 800aab2:	689a      	ldr	r2, [r3, #8]
 800aab4:	4b13      	ldr	r3, [pc, #76]	; (800ab04 <HAL_TIM_Base_Start_IT+0xa4>)
 800aab6:	4013      	ands	r3, r2
 800aab8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	2b06      	cmp	r3, #6
 800aabe:	d015      	beq.n	800aaec <HAL_TIM_Base_Start_IT+0x8c>
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800aac6:	d011      	beq.n	800aaec <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	681b      	ldr	r3, [r3, #0]
 800aacc:	681a      	ldr	r2, [r3, #0]
 800aace:	687b      	ldr	r3, [r7, #4]
 800aad0:	681b      	ldr	r3, [r3, #0]
 800aad2:	f042 0201 	orr.w	r2, r2, #1
 800aad6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aad8:	e008      	b.n	800aaec <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800aada:	687b      	ldr	r3, [r7, #4]
 800aadc:	681b      	ldr	r3, [r3, #0]
 800aade:	681a      	ldr	r2, [r3, #0]
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f042 0201 	orr.w	r2, r2, #1
 800aae8:	601a      	str	r2, [r3, #0]
 800aaea:	e000      	b.n	800aaee <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800aaec:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800aaee:	2300      	movs	r3, #0
}
 800aaf0:	4618      	mov	r0, r3
 800aaf2:	3714      	adds	r7, #20
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr
 800aafc:	40012c00 	.word	0x40012c00
 800ab00:	40014000 	.word	0x40014000
 800ab04:	00010007 	.word	0x00010007

0800ab08 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800ab08:	b580      	push	{r7, lr}
 800ab0a:	b082      	sub	sp, #8
 800ab0c:	af00      	add	r7, sp, #0
 800ab0e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	691b      	ldr	r3, [r3, #16]
 800ab16:	f003 0302 	and.w	r3, r3, #2
 800ab1a:	2b02      	cmp	r3, #2
 800ab1c:	d122      	bne.n	800ab64 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800ab1e:	687b      	ldr	r3, [r7, #4]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	68db      	ldr	r3, [r3, #12]
 800ab24:	f003 0302 	and.w	r3, r3, #2
 800ab28:	2b02      	cmp	r3, #2
 800ab2a:	d11b      	bne.n	800ab64 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	681b      	ldr	r3, [r3, #0]
 800ab30:	f06f 0202 	mvn.w	r2, #2
 800ab34:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800ab36:	687b      	ldr	r3, [r7, #4]
 800ab38:	2201      	movs	r2, #1
 800ab3a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800ab3c:	687b      	ldr	r3, [r7, #4]
 800ab3e:	681b      	ldr	r3, [r3, #0]
 800ab40:	699b      	ldr	r3, [r3, #24]
 800ab42:	f003 0303 	and.w	r3, r3, #3
 800ab46:	2b00      	cmp	r3, #0
 800ab48:	d003      	beq.n	800ab52 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800ab4a:	6878      	ldr	r0, [r7, #4]
 800ab4c:	f000 f9ce 	bl	800aeec <HAL_TIM_IC_CaptureCallback>
 800ab50:	e005      	b.n	800ab5e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ab52:	6878      	ldr	r0, [r7, #4]
 800ab54:	f000 f9c0 	bl	800aed8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ab58:	6878      	ldr	r0, [r7, #4]
 800ab5a:	f000 f9d1 	bl	800af00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	2200      	movs	r2, #0
 800ab62:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	681b      	ldr	r3, [r3, #0]
 800ab68:	691b      	ldr	r3, [r3, #16]
 800ab6a:	f003 0304 	and.w	r3, r3, #4
 800ab6e:	2b04      	cmp	r3, #4
 800ab70:	d122      	bne.n	800abb8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	681b      	ldr	r3, [r3, #0]
 800ab76:	68db      	ldr	r3, [r3, #12]
 800ab78:	f003 0304 	and.w	r3, r3, #4
 800ab7c:	2b04      	cmp	r3, #4
 800ab7e:	d11b      	bne.n	800abb8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f06f 0204 	mvn.w	r2, #4
 800ab88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800ab8a:	687b      	ldr	r3, [r7, #4]
 800ab8c:	2202      	movs	r2, #2
 800ab8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	681b      	ldr	r3, [r3, #0]
 800ab94:	699b      	ldr	r3, [r3, #24]
 800ab96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ab9a:	2b00      	cmp	r3, #0
 800ab9c:	d003      	beq.n	800aba6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ab9e:	6878      	ldr	r0, [r7, #4]
 800aba0:	f000 f9a4 	bl	800aeec <HAL_TIM_IC_CaptureCallback>
 800aba4:	e005      	b.n	800abb2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800aba6:	6878      	ldr	r0, [r7, #4]
 800aba8:	f000 f996 	bl	800aed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800abac:	6878      	ldr	r0, [r7, #4]
 800abae:	f000 f9a7 	bl	800af00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2200      	movs	r2, #0
 800abb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	691b      	ldr	r3, [r3, #16]
 800abbe:	f003 0308 	and.w	r3, r3, #8
 800abc2:	2b08      	cmp	r3, #8
 800abc4:	d122      	bne.n	800ac0c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	68db      	ldr	r3, [r3, #12]
 800abcc:	f003 0308 	and.w	r3, r3, #8
 800abd0:	2b08      	cmp	r3, #8
 800abd2:	d11b      	bne.n	800ac0c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	f06f 0208 	mvn.w	r2, #8
 800abdc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800abde:	687b      	ldr	r3, [r7, #4]
 800abe0:	2204      	movs	r2, #4
 800abe2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	681b      	ldr	r3, [r3, #0]
 800abe8:	69db      	ldr	r3, [r3, #28]
 800abea:	f003 0303 	and.w	r3, r3, #3
 800abee:	2b00      	cmp	r3, #0
 800abf0:	d003      	beq.n	800abfa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800abf2:	6878      	ldr	r0, [r7, #4]
 800abf4:	f000 f97a 	bl	800aeec <HAL_TIM_IC_CaptureCallback>
 800abf8:	e005      	b.n	800ac06 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800abfa:	6878      	ldr	r0, [r7, #4]
 800abfc:	f000 f96c 	bl	800aed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac00:	6878      	ldr	r0, [r7, #4]
 800ac02:	f000 f97d 	bl	800af00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	2200      	movs	r2, #0
 800ac0a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	691b      	ldr	r3, [r3, #16]
 800ac12:	f003 0310 	and.w	r3, r3, #16
 800ac16:	2b10      	cmp	r3, #16
 800ac18:	d122      	bne.n	800ac60 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	681b      	ldr	r3, [r3, #0]
 800ac1e:	68db      	ldr	r3, [r3, #12]
 800ac20:	f003 0310 	and.w	r3, r3, #16
 800ac24:	2b10      	cmp	r3, #16
 800ac26:	d11b      	bne.n	800ac60 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800ac28:	687b      	ldr	r3, [r7, #4]
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f06f 0210 	mvn.w	r2, #16
 800ac30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800ac32:	687b      	ldr	r3, [r7, #4]
 800ac34:	2208      	movs	r2, #8
 800ac36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800ac38:	687b      	ldr	r3, [r7, #4]
 800ac3a:	681b      	ldr	r3, [r3, #0]
 800ac3c:	69db      	ldr	r3, [r3, #28]
 800ac3e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800ac42:	2b00      	cmp	r3, #0
 800ac44:	d003      	beq.n	800ac4e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800ac46:	6878      	ldr	r0, [r7, #4]
 800ac48:	f000 f950 	bl	800aeec <HAL_TIM_IC_CaptureCallback>
 800ac4c:	e005      	b.n	800ac5a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ac4e:	6878      	ldr	r0, [r7, #4]
 800ac50:	f000 f942 	bl	800aed8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ac54:	6878      	ldr	r0, [r7, #4]
 800ac56:	f000 f953 	bl	800af00 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800ac5a:	687b      	ldr	r3, [r7, #4]
 800ac5c:	2200      	movs	r2, #0
 800ac5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	691b      	ldr	r3, [r3, #16]
 800ac66:	f003 0301 	and.w	r3, r3, #1
 800ac6a:	2b01      	cmp	r3, #1
 800ac6c:	d10e      	bne.n	800ac8c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800ac6e:	687b      	ldr	r3, [r7, #4]
 800ac70:	681b      	ldr	r3, [r3, #0]
 800ac72:	68db      	ldr	r3, [r3, #12]
 800ac74:	f003 0301 	and.w	r3, r3, #1
 800ac78:	2b01      	cmp	r3, #1
 800ac7a:	d107      	bne.n	800ac8c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800ac7c:	687b      	ldr	r3, [r7, #4]
 800ac7e:	681b      	ldr	r3, [r3, #0]
 800ac80:	f06f 0201 	mvn.w	r2, #1
 800ac84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800ac86:	6878      	ldr	r0, [r7, #4]
 800ac88:	f7f9 feee 	bl	8004a68 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800ac8c:	687b      	ldr	r3, [r7, #4]
 800ac8e:	681b      	ldr	r3, [r3, #0]
 800ac90:	691b      	ldr	r3, [r3, #16]
 800ac92:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ac96:	2b80      	cmp	r3, #128	; 0x80
 800ac98:	d10e      	bne.n	800acb8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800ac9a:	687b      	ldr	r3, [r7, #4]
 800ac9c:	681b      	ldr	r3, [r3, #0]
 800ac9e:	68db      	ldr	r3, [r3, #12]
 800aca0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800aca4:	2b80      	cmp	r3, #128	; 0x80
 800aca6:	d107      	bne.n	800acb8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800acb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800acb2:	6878      	ldr	r0, [r7, #4]
 800acb4:	f000 faa6 	bl	800b204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	691b      	ldr	r3, [r3, #16]
 800acbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800acc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800acc6:	d10e      	bne.n	800ace6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	68db      	ldr	r3, [r3, #12]
 800acce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800acd2:	2b80      	cmp	r3, #128	; 0x80
 800acd4:	d107      	bne.n	800ace6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	681b      	ldr	r3, [r3, #0]
 800acda:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800acde:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f000 fa99 	bl	800b218 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800ace6:	687b      	ldr	r3, [r7, #4]
 800ace8:	681b      	ldr	r3, [r3, #0]
 800acea:	691b      	ldr	r3, [r3, #16]
 800acec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acf0:	2b40      	cmp	r3, #64	; 0x40
 800acf2:	d10e      	bne.n	800ad12 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800acfe:	2b40      	cmp	r3, #64	; 0x40
 800ad00:	d107      	bne.n	800ad12 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800ad0a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ad0c:	6878      	ldr	r0, [r7, #4]
 800ad0e:	f000 f901 	bl	800af14 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800ad12:	687b      	ldr	r3, [r7, #4]
 800ad14:	681b      	ldr	r3, [r3, #0]
 800ad16:	691b      	ldr	r3, [r3, #16]
 800ad18:	f003 0320 	and.w	r3, r3, #32
 800ad1c:	2b20      	cmp	r3, #32
 800ad1e:	d10e      	bne.n	800ad3e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68db      	ldr	r3, [r3, #12]
 800ad26:	f003 0320 	and.w	r3, r3, #32
 800ad2a:	2b20      	cmp	r3, #32
 800ad2c:	d107      	bne.n	800ad3e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	681b      	ldr	r3, [r3, #0]
 800ad32:	f06f 0220 	mvn.w	r2, #32
 800ad36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ad38:	6878      	ldr	r0, [r7, #4]
 800ad3a:	f000 fa59 	bl	800b1f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ad3e:	bf00      	nop
 800ad40:	3708      	adds	r7, #8
 800ad42:	46bd      	mov	sp, r7
 800ad44:	bd80      	pop	{r7, pc}

0800ad46 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800ad46:	b580      	push	{r7, lr}
 800ad48:	b084      	sub	sp, #16
 800ad4a:	af00      	add	r7, sp, #0
 800ad4c:	6078      	str	r0, [r7, #4]
 800ad4e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800ad50:	2300      	movs	r3, #0
 800ad52:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ad5a:	2b01      	cmp	r3, #1
 800ad5c:	d101      	bne.n	800ad62 <HAL_TIM_ConfigClockSource+0x1c>
 800ad5e:	2302      	movs	r3, #2
 800ad60:	e0b6      	b.n	800aed0 <HAL_TIM_ConfigClockSource+0x18a>
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	2201      	movs	r2, #1
 800ad66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800ad6a:	687b      	ldr	r3, [r7, #4]
 800ad6c:	2202      	movs	r2, #2
 800ad6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800ad72:	687b      	ldr	r3, [r7, #4]
 800ad74:	681b      	ldr	r3, [r3, #0]
 800ad76:	689b      	ldr	r3, [r3, #8]
 800ad78:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800ad80:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800ad84:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800ad86:	68bb      	ldr	r3, [r7, #8]
 800ad88:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800ad8c:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800ad8e:	687b      	ldr	r3, [r7, #4]
 800ad90:	681b      	ldr	r3, [r3, #0]
 800ad92:	68ba      	ldr	r2, [r7, #8]
 800ad94:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800ad96:	683b      	ldr	r3, [r7, #0]
 800ad98:	681b      	ldr	r3, [r3, #0]
 800ad9a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ad9e:	d03e      	beq.n	800ae1e <HAL_TIM_ConfigClockSource+0xd8>
 800ada0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ada4:	f200 8087 	bhi.w	800aeb6 <HAL_TIM_ConfigClockSource+0x170>
 800ada8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adac:	f000 8086 	beq.w	800aebc <HAL_TIM_ConfigClockSource+0x176>
 800adb0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800adb4:	d87f      	bhi.n	800aeb6 <HAL_TIM_ConfigClockSource+0x170>
 800adb6:	2b70      	cmp	r3, #112	; 0x70
 800adb8:	d01a      	beq.n	800adf0 <HAL_TIM_ConfigClockSource+0xaa>
 800adba:	2b70      	cmp	r3, #112	; 0x70
 800adbc:	d87b      	bhi.n	800aeb6 <HAL_TIM_ConfigClockSource+0x170>
 800adbe:	2b60      	cmp	r3, #96	; 0x60
 800adc0:	d050      	beq.n	800ae64 <HAL_TIM_ConfigClockSource+0x11e>
 800adc2:	2b60      	cmp	r3, #96	; 0x60
 800adc4:	d877      	bhi.n	800aeb6 <HAL_TIM_ConfigClockSource+0x170>
 800adc6:	2b50      	cmp	r3, #80	; 0x50
 800adc8:	d03c      	beq.n	800ae44 <HAL_TIM_ConfigClockSource+0xfe>
 800adca:	2b50      	cmp	r3, #80	; 0x50
 800adcc:	d873      	bhi.n	800aeb6 <HAL_TIM_ConfigClockSource+0x170>
 800adce:	2b40      	cmp	r3, #64	; 0x40
 800add0:	d058      	beq.n	800ae84 <HAL_TIM_ConfigClockSource+0x13e>
 800add2:	2b40      	cmp	r3, #64	; 0x40
 800add4:	d86f      	bhi.n	800aeb6 <HAL_TIM_ConfigClockSource+0x170>
 800add6:	2b30      	cmp	r3, #48	; 0x30
 800add8:	d064      	beq.n	800aea4 <HAL_TIM_ConfigClockSource+0x15e>
 800adda:	2b30      	cmp	r3, #48	; 0x30
 800addc:	d86b      	bhi.n	800aeb6 <HAL_TIM_ConfigClockSource+0x170>
 800adde:	2b20      	cmp	r3, #32
 800ade0:	d060      	beq.n	800aea4 <HAL_TIM_ConfigClockSource+0x15e>
 800ade2:	2b20      	cmp	r3, #32
 800ade4:	d867      	bhi.n	800aeb6 <HAL_TIM_ConfigClockSource+0x170>
 800ade6:	2b00      	cmp	r3, #0
 800ade8:	d05c      	beq.n	800aea4 <HAL_TIM_ConfigClockSource+0x15e>
 800adea:	2b10      	cmp	r3, #16
 800adec:	d05a      	beq.n	800aea4 <HAL_TIM_ConfigClockSource+0x15e>
 800adee:	e062      	b.n	800aeb6 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800adf0:	687b      	ldr	r3, [r7, #4]
 800adf2:	6818      	ldr	r0, [r3, #0]
 800adf4:	683b      	ldr	r3, [r7, #0]
 800adf6:	6899      	ldr	r1, [r3, #8]
 800adf8:	683b      	ldr	r3, [r7, #0]
 800adfa:	685a      	ldr	r2, [r3, #4]
 800adfc:	683b      	ldr	r3, [r7, #0]
 800adfe:	68db      	ldr	r3, [r3, #12]
 800ae00:	f000 f970 	bl	800b0e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800ae04:	687b      	ldr	r3, [r7, #4]
 800ae06:	681b      	ldr	r3, [r3, #0]
 800ae08:	689b      	ldr	r3, [r3, #8]
 800ae0a:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800ae0c:	68bb      	ldr	r3, [r7, #8]
 800ae0e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800ae12:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	68ba      	ldr	r2, [r7, #8]
 800ae1a:	609a      	str	r2, [r3, #8]
      break;
 800ae1c:	e04f      	b.n	800aebe <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800ae1e:	687b      	ldr	r3, [r7, #4]
 800ae20:	6818      	ldr	r0, [r3, #0]
 800ae22:	683b      	ldr	r3, [r7, #0]
 800ae24:	6899      	ldr	r1, [r3, #8]
 800ae26:	683b      	ldr	r3, [r7, #0]
 800ae28:	685a      	ldr	r2, [r3, #4]
 800ae2a:	683b      	ldr	r3, [r7, #0]
 800ae2c:	68db      	ldr	r3, [r3, #12]
 800ae2e:	f000 f959 	bl	800b0e4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	689a      	ldr	r2, [r3, #8]
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	681b      	ldr	r3, [r3, #0]
 800ae3c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800ae40:	609a      	str	r2, [r3, #8]
      break;
 800ae42:	e03c      	b.n	800aebe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	6818      	ldr	r0, [r3, #0]
 800ae48:	683b      	ldr	r3, [r7, #0]
 800ae4a:	6859      	ldr	r1, [r3, #4]
 800ae4c:	683b      	ldr	r3, [r7, #0]
 800ae4e:	68db      	ldr	r3, [r3, #12]
 800ae50:	461a      	mov	r2, r3
 800ae52:	f000 f8cd 	bl	800aff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800ae56:	687b      	ldr	r3, [r7, #4]
 800ae58:	681b      	ldr	r3, [r3, #0]
 800ae5a:	2150      	movs	r1, #80	; 0x50
 800ae5c:	4618      	mov	r0, r3
 800ae5e:	f000 f926 	bl	800b0ae <TIM_ITRx_SetConfig>
      break;
 800ae62:	e02c      	b.n	800aebe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800ae64:	687b      	ldr	r3, [r7, #4]
 800ae66:	6818      	ldr	r0, [r3, #0]
 800ae68:	683b      	ldr	r3, [r7, #0]
 800ae6a:	6859      	ldr	r1, [r3, #4]
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	68db      	ldr	r3, [r3, #12]
 800ae70:	461a      	mov	r2, r3
 800ae72:	f000 f8ec 	bl	800b04e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800ae76:	687b      	ldr	r3, [r7, #4]
 800ae78:	681b      	ldr	r3, [r3, #0]
 800ae7a:	2160      	movs	r1, #96	; 0x60
 800ae7c:	4618      	mov	r0, r3
 800ae7e:	f000 f916 	bl	800b0ae <TIM_ITRx_SetConfig>
      break;
 800ae82:	e01c      	b.n	800aebe <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	6818      	ldr	r0, [r3, #0]
 800ae88:	683b      	ldr	r3, [r7, #0]
 800ae8a:	6859      	ldr	r1, [r3, #4]
 800ae8c:	683b      	ldr	r3, [r7, #0]
 800ae8e:	68db      	ldr	r3, [r3, #12]
 800ae90:	461a      	mov	r2, r3
 800ae92:	f000 f8ad 	bl	800aff0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	2140      	movs	r1, #64	; 0x40
 800ae9c:	4618      	mov	r0, r3
 800ae9e:	f000 f906 	bl	800b0ae <TIM_ITRx_SetConfig>
      break;
 800aea2:	e00c      	b.n	800aebe <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800aea4:	687b      	ldr	r3, [r7, #4]
 800aea6:	681a      	ldr	r2, [r3, #0]
 800aea8:	683b      	ldr	r3, [r7, #0]
 800aeaa:	681b      	ldr	r3, [r3, #0]
 800aeac:	4619      	mov	r1, r3
 800aeae:	4610      	mov	r0, r2
 800aeb0:	f000 f8fd 	bl	800b0ae <TIM_ITRx_SetConfig>
      break;
 800aeb4:	e003      	b.n	800aebe <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800aeb6:	2301      	movs	r3, #1
 800aeb8:	73fb      	strb	r3, [r7, #15]
      break;
 800aeba:	e000      	b.n	800aebe <HAL_TIM_ConfigClockSource+0x178>
      break;
 800aebc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	2201      	movs	r2, #1
 800aec2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800aec6:	687b      	ldr	r3, [r7, #4]
 800aec8:	2200      	movs	r2, #0
 800aeca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800aece:	7bfb      	ldrb	r3, [r7, #15]
}
 800aed0:	4618      	mov	r0, r3
 800aed2:	3710      	adds	r7, #16
 800aed4:	46bd      	mov	sp, r7
 800aed6:	bd80      	pop	{r7, pc}

0800aed8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800aed8:	b480      	push	{r7}
 800aeda:	b083      	sub	sp, #12
 800aedc:	af00      	add	r7, sp, #0
 800aede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800aee0:	bf00      	nop
 800aee2:	370c      	adds	r7, #12
 800aee4:	46bd      	mov	sp, r7
 800aee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeea:	4770      	bx	lr

0800aeec <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800aeec:	b480      	push	{r7}
 800aeee:	b083      	sub	sp, #12
 800aef0:	af00      	add	r7, sp, #0
 800aef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800aef4:	bf00      	nop
 800aef6:	370c      	adds	r7, #12
 800aef8:	46bd      	mov	sp, r7
 800aefa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aefe:	4770      	bx	lr

0800af00 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800af00:	b480      	push	{r7}
 800af02:	b083      	sub	sp, #12
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800af08:	bf00      	nop
 800af0a:	370c      	adds	r7, #12
 800af0c:	46bd      	mov	sp, r7
 800af0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af12:	4770      	bx	lr

0800af14 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800af14:	b480      	push	{r7}
 800af16:	b083      	sub	sp, #12
 800af18:	af00      	add	r7, sp, #0
 800af1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800af1c:	bf00      	nop
 800af1e:	370c      	adds	r7, #12
 800af20:	46bd      	mov	sp, r7
 800af22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af26:	4770      	bx	lr

0800af28 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800af28:	b480      	push	{r7}
 800af2a:	b085      	sub	sp, #20
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800af38:	687b      	ldr	r3, [r7, #4]
 800af3a:	4a2a      	ldr	r2, [pc, #168]	; (800afe4 <TIM_Base_SetConfig+0xbc>)
 800af3c:	4293      	cmp	r3, r2
 800af3e:	d003      	beq.n	800af48 <TIM_Base_SetConfig+0x20>
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af46:	d108      	bne.n	800af5a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800af4e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800af50:	683b      	ldr	r3, [r7, #0]
 800af52:	685b      	ldr	r3, [r3, #4]
 800af54:	68fa      	ldr	r2, [r7, #12]
 800af56:	4313      	orrs	r3, r2
 800af58:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	4a21      	ldr	r2, [pc, #132]	; (800afe4 <TIM_Base_SetConfig+0xbc>)
 800af5e:	4293      	cmp	r3, r2
 800af60:	d00b      	beq.n	800af7a <TIM_Base_SetConfig+0x52>
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af68:	d007      	beq.n	800af7a <TIM_Base_SetConfig+0x52>
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	4a1e      	ldr	r2, [pc, #120]	; (800afe8 <TIM_Base_SetConfig+0xc0>)
 800af6e:	4293      	cmp	r3, r2
 800af70:	d003      	beq.n	800af7a <TIM_Base_SetConfig+0x52>
 800af72:	687b      	ldr	r3, [r7, #4]
 800af74:	4a1d      	ldr	r2, [pc, #116]	; (800afec <TIM_Base_SetConfig+0xc4>)
 800af76:	4293      	cmp	r3, r2
 800af78:	d108      	bne.n	800af8c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800af80:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800af82:	683b      	ldr	r3, [r7, #0]
 800af84:	68db      	ldr	r3, [r3, #12]
 800af86:	68fa      	ldr	r2, [r7, #12]
 800af88:	4313      	orrs	r3, r2
 800af8a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800af8c:	68fb      	ldr	r3, [r7, #12]
 800af8e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800af92:	683b      	ldr	r3, [r7, #0]
 800af94:	695b      	ldr	r3, [r3, #20]
 800af96:	4313      	orrs	r3, r2
 800af98:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800af9a:	687b      	ldr	r3, [r7, #4]
 800af9c:	68fa      	ldr	r2, [r7, #12]
 800af9e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	689a      	ldr	r2, [r3, #8]
 800afa4:	687b      	ldr	r3, [r7, #4]
 800afa6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	681a      	ldr	r2, [r3, #0]
 800afac:	687b      	ldr	r3, [r7, #4]
 800afae:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800afb0:	687b      	ldr	r3, [r7, #4]
 800afb2:	4a0c      	ldr	r2, [pc, #48]	; (800afe4 <TIM_Base_SetConfig+0xbc>)
 800afb4:	4293      	cmp	r3, r2
 800afb6:	d007      	beq.n	800afc8 <TIM_Base_SetConfig+0xa0>
 800afb8:	687b      	ldr	r3, [r7, #4]
 800afba:	4a0b      	ldr	r2, [pc, #44]	; (800afe8 <TIM_Base_SetConfig+0xc0>)
 800afbc:	4293      	cmp	r3, r2
 800afbe:	d003      	beq.n	800afc8 <TIM_Base_SetConfig+0xa0>
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	4a0a      	ldr	r2, [pc, #40]	; (800afec <TIM_Base_SetConfig+0xc4>)
 800afc4:	4293      	cmp	r3, r2
 800afc6:	d103      	bne.n	800afd0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800afc8:	683b      	ldr	r3, [r7, #0]
 800afca:	691a      	ldr	r2, [r3, #16]
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800afd0:	687b      	ldr	r3, [r7, #4]
 800afd2:	2201      	movs	r2, #1
 800afd4:	615a      	str	r2, [r3, #20]
}
 800afd6:	bf00      	nop
 800afd8:	3714      	adds	r7, #20
 800afda:	46bd      	mov	sp, r7
 800afdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afe0:	4770      	bx	lr
 800afe2:	bf00      	nop
 800afe4:	40012c00 	.word	0x40012c00
 800afe8:	40014000 	.word	0x40014000
 800afec:	40014400 	.word	0x40014400

0800aff0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aff0:	b480      	push	{r7}
 800aff2:	b087      	sub	sp, #28
 800aff4:	af00      	add	r7, sp, #0
 800aff6:	60f8      	str	r0, [r7, #12]
 800aff8:	60b9      	str	r1, [r7, #8]
 800affa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800affc:	68fb      	ldr	r3, [r7, #12]
 800affe:	6a1b      	ldr	r3, [r3, #32]
 800b000:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800b002:	68fb      	ldr	r3, [r7, #12]
 800b004:	6a1b      	ldr	r3, [r3, #32]
 800b006:	f023 0201 	bic.w	r2, r3, #1
 800b00a:	68fb      	ldr	r3, [r7, #12]
 800b00c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b00e:	68fb      	ldr	r3, [r7, #12]
 800b010:	699b      	ldr	r3, [r3, #24]
 800b012:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800b014:	693b      	ldr	r3, [r7, #16]
 800b016:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b01a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800b01c:	687b      	ldr	r3, [r7, #4]
 800b01e:	011b      	lsls	r3, r3, #4
 800b020:	693a      	ldr	r2, [r7, #16]
 800b022:	4313      	orrs	r3, r2
 800b024:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800b026:	697b      	ldr	r3, [r7, #20]
 800b028:	f023 030a 	bic.w	r3, r3, #10
 800b02c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800b02e:	697a      	ldr	r2, [r7, #20]
 800b030:	68bb      	ldr	r3, [r7, #8]
 800b032:	4313      	orrs	r3, r2
 800b034:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800b036:	68fb      	ldr	r3, [r7, #12]
 800b038:	693a      	ldr	r2, [r7, #16]
 800b03a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b03c:	68fb      	ldr	r3, [r7, #12]
 800b03e:	697a      	ldr	r2, [r7, #20]
 800b040:	621a      	str	r2, [r3, #32]
}
 800b042:	bf00      	nop
 800b044:	371c      	adds	r7, #28
 800b046:	46bd      	mov	sp, r7
 800b048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b04c:	4770      	bx	lr

0800b04e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800b04e:	b480      	push	{r7}
 800b050:	b087      	sub	sp, #28
 800b052:	af00      	add	r7, sp, #0
 800b054:	60f8      	str	r0, [r7, #12]
 800b056:	60b9      	str	r1, [r7, #8]
 800b058:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800b05a:	68fb      	ldr	r3, [r7, #12]
 800b05c:	6a1b      	ldr	r3, [r3, #32]
 800b05e:	f023 0210 	bic.w	r2, r3, #16
 800b062:	68fb      	ldr	r3, [r7, #12]
 800b064:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800b066:	68fb      	ldr	r3, [r7, #12]
 800b068:	699b      	ldr	r3, [r3, #24]
 800b06a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6a1b      	ldr	r3, [r3, #32]
 800b070:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800b072:	697b      	ldr	r3, [r7, #20]
 800b074:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b078:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800b07a:	687b      	ldr	r3, [r7, #4]
 800b07c:	031b      	lsls	r3, r3, #12
 800b07e:	697a      	ldr	r2, [r7, #20]
 800b080:	4313      	orrs	r3, r2
 800b082:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800b084:	693b      	ldr	r3, [r7, #16]
 800b086:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800b08a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800b08c:	68bb      	ldr	r3, [r7, #8]
 800b08e:	011b      	lsls	r3, r3, #4
 800b090:	693a      	ldr	r2, [r7, #16]
 800b092:	4313      	orrs	r3, r2
 800b094:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	697a      	ldr	r2, [r7, #20]
 800b09a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	693a      	ldr	r2, [r7, #16]
 800b0a0:	621a      	str	r2, [r3, #32]
}
 800b0a2:	bf00      	nop
 800b0a4:	371c      	adds	r7, #28
 800b0a6:	46bd      	mov	sp, r7
 800b0a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0ac:	4770      	bx	lr

0800b0ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800b0ae:	b480      	push	{r7}
 800b0b0:	b085      	sub	sp, #20
 800b0b2:	af00      	add	r7, sp, #0
 800b0b4:	6078      	str	r0, [r7, #4]
 800b0b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	689b      	ldr	r3, [r3, #8]
 800b0bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b0c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800b0c6:	683a      	ldr	r2, [r7, #0]
 800b0c8:	68fb      	ldr	r3, [r7, #12]
 800b0ca:	4313      	orrs	r3, r2
 800b0cc:	f043 0307 	orr.w	r3, r3, #7
 800b0d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b0d2:	687b      	ldr	r3, [r7, #4]
 800b0d4:	68fa      	ldr	r2, [r7, #12]
 800b0d6:	609a      	str	r2, [r3, #8]
}
 800b0d8:	bf00      	nop
 800b0da:	3714      	adds	r7, #20
 800b0dc:	46bd      	mov	sp, r7
 800b0de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0e2:	4770      	bx	lr

0800b0e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800b0e4:	b480      	push	{r7}
 800b0e6:	b087      	sub	sp, #28
 800b0e8:	af00      	add	r7, sp, #0
 800b0ea:	60f8      	str	r0, [r7, #12]
 800b0ec:	60b9      	str	r1, [r7, #8]
 800b0ee:	607a      	str	r2, [r7, #4]
 800b0f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	689b      	ldr	r3, [r3, #8]
 800b0f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800b0f8:	697b      	ldr	r3, [r7, #20]
 800b0fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800b0fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800b100:	683b      	ldr	r3, [r7, #0]
 800b102:	021a      	lsls	r2, r3, #8
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	431a      	orrs	r2, r3
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	4313      	orrs	r3, r2
 800b10c:	697a      	ldr	r2, [r7, #20]
 800b10e:	4313      	orrs	r3, r2
 800b110:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	697a      	ldr	r2, [r7, #20]
 800b116:	609a      	str	r2, [r3, #8]
}
 800b118:	bf00      	nop
 800b11a:	371c      	adds	r7, #28
 800b11c:	46bd      	mov	sp, r7
 800b11e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b122:	4770      	bx	lr

0800b124 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800b124:	b480      	push	{r7}
 800b126:	b085      	sub	sp, #20
 800b128:	af00      	add	r7, sp, #0
 800b12a:	6078      	str	r0, [r7, #4]
 800b12c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800b12e:	687b      	ldr	r3, [r7, #4]
 800b130:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800b134:	2b01      	cmp	r3, #1
 800b136:	d101      	bne.n	800b13c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800b138:	2302      	movs	r3, #2
 800b13a:	e04f      	b.n	800b1dc <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b144:	687b      	ldr	r3, [r7, #4]
 800b146:	2202      	movs	r2, #2
 800b148:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	685b      	ldr	r3, [r3, #4]
 800b152:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b154:	687b      	ldr	r3, [r7, #4]
 800b156:	681b      	ldr	r3, [r3, #0]
 800b158:	689b      	ldr	r3, [r3, #8]
 800b15a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	681b      	ldr	r3, [r3, #0]
 800b160:	4a21      	ldr	r2, [pc, #132]	; (800b1e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b162:	4293      	cmp	r3, r2
 800b164:	d108      	bne.n	800b178 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800b16c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800b16e:	683b      	ldr	r3, [r7, #0]
 800b170:	685b      	ldr	r3, [r3, #4]
 800b172:	68fa      	ldr	r2, [r7, #12]
 800b174:	4313      	orrs	r3, r2
 800b176:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800b178:	68fb      	ldr	r3, [r7, #12]
 800b17a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800b17e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800b180:	683b      	ldr	r3, [r7, #0]
 800b182:	681b      	ldr	r3, [r3, #0]
 800b184:	68fa      	ldr	r2, [r7, #12]
 800b186:	4313      	orrs	r3, r2
 800b188:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800b18a:	687b      	ldr	r3, [r7, #4]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	68fa      	ldr	r2, [r7, #12]
 800b190:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a14      	ldr	r2, [pc, #80]	; (800b1e8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d009      	beq.n	800b1b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b1a4:	d004      	beq.n	800b1b0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a10      	ldr	r2, [pc, #64]	; (800b1ec <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d10c      	bne.n	800b1ca <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800b1b0:	68bb      	ldr	r3, [r7, #8]
 800b1b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800b1b6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800b1b8:	683b      	ldr	r3, [r7, #0]
 800b1ba:	689b      	ldr	r3, [r3, #8]
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	4313      	orrs	r3, r2
 800b1c0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	68ba      	ldr	r2, [r7, #8]
 800b1c8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	2201      	movs	r2, #1
 800b1ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800b1d2:	687b      	ldr	r3, [r7, #4]
 800b1d4:	2200      	movs	r2, #0
 800b1d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800b1da:	2300      	movs	r3, #0
}
 800b1dc:	4618      	mov	r0, r3
 800b1de:	3714      	adds	r7, #20
 800b1e0:	46bd      	mov	sp, r7
 800b1e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b1e6:	4770      	bx	lr
 800b1e8:	40012c00 	.word	0x40012c00
 800b1ec:	40014000 	.word	0x40014000

0800b1f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800b1f0:	b480      	push	{r7}
 800b1f2:	b083      	sub	sp, #12
 800b1f4:	af00      	add	r7, sp, #0
 800b1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800b1f8:	bf00      	nop
 800b1fa:	370c      	adds	r7, #12
 800b1fc:	46bd      	mov	sp, r7
 800b1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b202:	4770      	bx	lr

0800b204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800b204:	b480      	push	{r7}
 800b206:	b083      	sub	sp, #12
 800b208:	af00      	add	r7, sp, #0
 800b20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800b20c:	bf00      	nop
 800b20e:	370c      	adds	r7, #12
 800b210:	46bd      	mov	sp, r7
 800b212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b216:	4770      	bx	lr

0800b218 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800b218:	b480      	push	{r7}
 800b21a:	b083      	sub	sp, #12
 800b21c:	af00      	add	r7, sp, #0
 800b21e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800b220:	bf00      	nop
 800b222:	370c      	adds	r7, #12
 800b224:	46bd      	mov	sp, r7
 800b226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b22a:	4770      	bx	lr

0800b22c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800b22c:	b580      	push	{r7, lr}
 800b22e:	b082      	sub	sp, #8
 800b230:	af00      	add	r7, sp, #0
 800b232:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	2b00      	cmp	r3, #0
 800b238:	d101      	bne.n	800b23e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800b23a:	2301      	movs	r3, #1
 800b23c:	e040      	b.n	800b2c0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b242:	2b00      	cmp	r3, #0
 800b244:	d106      	bne.n	800b254 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	2200      	movs	r2, #0
 800b24a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800b24e:	6878      	ldr	r0, [r7, #4]
 800b250:	f7f9 fe62 	bl	8004f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800b254:	687b      	ldr	r3, [r7, #4]
 800b256:	2224      	movs	r2, #36	; 0x24
 800b258:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	681a      	ldr	r2, [r3, #0]
 800b260:	687b      	ldr	r3, [r7, #4]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	f022 0201 	bic.w	r2, r2, #1
 800b268:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800b26a:	6878      	ldr	r0, [r7, #4]
 800b26c:	f000 f8c0 	bl	800b3f0 <UART_SetConfig>
 800b270:	4603      	mov	r3, r0
 800b272:	2b01      	cmp	r3, #1
 800b274:	d101      	bne.n	800b27a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800b276:	2301      	movs	r3, #1
 800b278:	e022      	b.n	800b2c0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800b27a:	687b      	ldr	r3, [r7, #4]
 800b27c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b27e:	2b00      	cmp	r3, #0
 800b280:	d002      	beq.n	800b288 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800b282:	6878      	ldr	r0, [r7, #4]
 800b284:	f000 fae0 	bl	800b848 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	681b      	ldr	r3, [r3, #0]
 800b28c:	685a      	ldr	r2, [r3, #4]
 800b28e:	687b      	ldr	r3, [r7, #4]
 800b290:	681b      	ldr	r3, [r3, #0]
 800b292:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800b296:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800b298:	687b      	ldr	r3, [r7, #4]
 800b29a:	681b      	ldr	r3, [r3, #0]
 800b29c:	689a      	ldr	r2, [r3, #8]
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	681b      	ldr	r3, [r3, #0]
 800b2a2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800b2a6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	681b      	ldr	r3, [r3, #0]
 800b2ac:	681a      	ldr	r2, [r3, #0]
 800b2ae:	687b      	ldr	r3, [r7, #4]
 800b2b0:	681b      	ldr	r3, [r3, #0]
 800b2b2:	f042 0201 	orr.w	r2, r2, #1
 800b2b6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800b2b8:	6878      	ldr	r0, [r7, #4]
 800b2ba:	f000 fb67 	bl	800b98c <UART_CheckIdleState>
 800b2be:	4603      	mov	r3, r0
}
 800b2c0:	4618      	mov	r0, r3
 800b2c2:	3708      	adds	r7, #8
 800b2c4:	46bd      	mov	sp, r7
 800b2c6:	bd80      	pop	{r7, pc}

0800b2c8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b2c8:	b580      	push	{r7, lr}
 800b2ca:	b08a      	sub	sp, #40	; 0x28
 800b2cc:	af02      	add	r7, sp, #8
 800b2ce:	60f8      	str	r0, [r7, #12]
 800b2d0:	60b9      	str	r1, [r7, #8]
 800b2d2:	603b      	str	r3, [r7, #0]
 800b2d4:	4613      	mov	r3, r2
 800b2d6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800b2dc:	2b20      	cmp	r3, #32
 800b2de:	f040 8082 	bne.w	800b3e6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800b2e2:	68bb      	ldr	r3, [r7, #8]
 800b2e4:	2b00      	cmp	r3, #0
 800b2e6:	d002      	beq.n	800b2ee <HAL_UART_Transmit+0x26>
 800b2e8:	88fb      	ldrh	r3, [r7, #6]
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d101      	bne.n	800b2f2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800b2ee:	2301      	movs	r3, #1
 800b2f0:	e07a      	b.n	800b3e8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800b2f2:	68fb      	ldr	r3, [r7, #12]
 800b2f4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800b2f8:	2b01      	cmp	r3, #1
 800b2fa:	d101      	bne.n	800b300 <HAL_UART_Transmit+0x38>
 800b2fc:	2302      	movs	r3, #2
 800b2fe:	e073      	b.n	800b3e8 <HAL_UART_Transmit+0x120>
 800b300:	68fb      	ldr	r3, [r7, #12]
 800b302:	2201      	movs	r2, #1
 800b304:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	2200      	movs	r2, #0
 800b30c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800b310:	68fb      	ldr	r3, [r7, #12]
 800b312:	2221      	movs	r2, #33	; 0x21
 800b314:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800b316:	f7fa ffe7 	bl	80062e8 <HAL_GetTick>
 800b31a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800b31c:	68fb      	ldr	r3, [r7, #12]
 800b31e:	88fa      	ldrh	r2, [r7, #6]
 800b320:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800b324:	68fb      	ldr	r3, [r7, #12]
 800b326:	88fa      	ldrh	r2, [r7, #6]
 800b328:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800b32c:	68fb      	ldr	r3, [r7, #12]
 800b32e:	689b      	ldr	r3, [r3, #8]
 800b330:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800b334:	d108      	bne.n	800b348 <HAL_UART_Transmit+0x80>
 800b336:	68fb      	ldr	r3, [r7, #12]
 800b338:	691b      	ldr	r3, [r3, #16]
 800b33a:	2b00      	cmp	r3, #0
 800b33c:	d104      	bne.n	800b348 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800b33e:	2300      	movs	r3, #0
 800b340:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800b342:	68bb      	ldr	r3, [r7, #8]
 800b344:	61bb      	str	r3, [r7, #24]
 800b346:	e003      	b.n	800b350 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800b348:	68bb      	ldr	r3, [r7, #8]
 800b34a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800b34c:	2300      	movs	r3, #0
 800b34e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800b350:	68fb      	ldr	r3, [r7, #12]
 800b352:	2200      	movs	r2, #0
 800b354:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800b358:	e02d      	b.n	800b3b6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800b35a:	683b      	ldr	r3, [r7, #0]
 800b35c:	9300      	str	r3, [sp, #0]
 800b35e:	697b      	ldr	r3, [r7, #20]
 800b360:	2200      	movs	r2, #0
 800b362:	2180      	movs	r1, #128	; 0x80
 800b364:	68f8      	ldr	r0, [r7, #12]
 800b366:	f000 fb5a 	bl	800ba1e <UART_WaitOnFlagUntilTimeout>
 800b36a:	4603      	mov	r3, r0
 800b36c:	2b00      	cmp	r3, #0
 800b36e:	d001      	beq.n	800b374 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800b370:	2303      	movs	r3, #3
 800b372:	e039      	b.n	800b3e8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800b374:	69fb      	ldr	r3, [r7, #28]
 800b376:	2b00      	cmp	r3, #0
 800b378:	d10b      	bne.n	800b392 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800b37a:	69bb      	ldr	r3, [r7, #24]
 800b37c:	881a      	ldrh	r2, [r3, #0]
 800b37e:	68fb      	ldr	r3, [r7, #12]
 800b380:	681b      	ldr	r3, [r3, #0]
 800b382:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b386:	b292      	uxth	r2, r2
 800b388:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800b38a:	69bb      	ldr	r3, [r7, #24]
 800b38c:	3302      	adds	r3, #2
 800b38e:	61bb      	str	r3, [r7, #24]
 800b390:	e008      	b.n	800b3a4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800b392:	69fb      	ldr	r3, [r7, #28]
 800b394:	781a      	ldrb	r2, [r3, #0]
 800b396:	68fb      	ldr	r3, [r7, #12]
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	b292      	uxth	r2, r2
 800b39c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800b39e:	69fb      	ldr	r3, [r7, #28]
 800b3a0:	3301      	adds	r3, #1
 800b3a2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b3aa:	b29b      	uxth	r3, r3
 800b3ac:	3b01      	subs	r3, #1
 800b3ae:	b29a      	uxth	r2, r3
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800b3b6:	68fb      	ldr	r3, [r7, #12]
 800b3b8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800b3bc:	b29b      	uxth	r3, r3
 800b3be:	2b00      	cmp	r3, #0
 800b3c0:	d1cb      	bne.n	800b35a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800b3c2:	683b      	ldr	r3, [r7, #0]
 800b3c4:	9300      	str	r3, [sp, #0]
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	2200      	movs	r2, #0
 800b3ca:	2140      	movs	r1, #64	; 0x40
 800b3cc:	68f8      	ldr	r0, [r7, #12]
 800b3ce:	f000 fb26 	bl	800ba1e <UART_WaitOnFlagUntilTimeout>
 800b3d2:	4603      	mov	r3, r0
 800b3d4:	2b00      	cmp	r3, #0
 800b3d6:	d001      	beq.n	800b3dc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800b3d8:	2303      	movs	r3, #3
 800b3da:	e005      	b.n	800b3e8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800b3dc:	68fb      	ldr	r3, [r7, #12]
 800b3de:	2220      	movs	r2, #32
 800b3e0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800b3e2:	2300      	movs	r3, #0
 800b3e4:	e000      	b.n	800b3e8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800b3e6:	2302      	movs	r3, #2
  }
}
 800b3e8:	4618      	mov	r0, r3
 800b3ea:	3720      	adds	r7, #32
 800b3ec:	46bd      	mov	sp, r7
 800b3ee:	bd80      	pop	{r7, pc}

0800b3f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b3f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800b3f4:	b08a      	sub	sp, #40	; 0x28
 800b3f6:	af00      	add	r7, sp, #0
 800b3f8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	689a      	ldr	r2, [r3, #8]
 800b404:	68fb      	ldr	r3, [r7, #12]
 800b406:	691b      	ldr	r3, [r3, #16]
 800b408:	431a      	orrs	r2, r3
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	695b      	ldr	r3, [r3, #20]
 800b40e:	431a      	orrs	r2, r3
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	69db      	ldr	r3, [r3, #28]
 800b414:	4313      	orrs	r3, r2
 800b416:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	681a      	ldr	r2, [r3, #0]
 800b41e:	4bb4      	ldr	r3, [pc, #720]	; (800b6f0 <UART_SetConfig+0x300>)
 800b420:	4013      	ands	r3, r2
 800b422:	68fa      	ldr	r2, [r7, #12]
 800b424:	6812      	ldr	r2, [r2, #0]
 800b426:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800b428:	430b      	orrs	r3, r1
 800b42a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b42c:	68fb      	ldr	r3, [r7, #12]
 800b42e:	681b      	ldr	r3, [r3, #0]
 800b430:	685b      	ldr	r3, [r3, #4]
 800b432:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b436:	68fb      	ldr	r3, [r7, #12]
 800b438:	68da      	ldr	r2, [r3, #12]
 800b43a:	68fb      	ldr	r3, [r7, #12]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	430a      	orrs	r2, r1
 800b440:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800b442:	68fb      	ldr	r3, [r7, #12]
 800b444:	699b      	ldr	r3, [r3, #24]
 800b446:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	681b      	ldr	r3, [r3, #0]
 800b44c:	4aa9      	ldr	r2, [pc, #676]	; (800b6f4 <UART_SetConfig+0x304>)
 800b44e:	4293      	cmp	r3, r2
 800b450:	d004      	beq.n	800b45c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	6a1b      	ldr	r3, [r3, #32]
 800b456:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b458:	4313      	orrs	r3, r2
 800b45a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800b45c:	68fb      	ldr	r3, [r7, #12]
 800b45e:	681b      	ldr	r3, [r3, #0]
 800b460:	689b      	ldr	r3, [r3, #8]
 800b462:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b46c:	430a      	orrs	r2, r1
 800b46e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	681b      	ldr	r3, [r3, #0]
 800b474:	4aa0      	ldr	r2, [pc, #640]	; (800b6f8 <UART_SetConfig+0x308>)
 800b476:	4293      	cmp	r3, r2
 800b478:	d126      	bne.n	800b4c8 <UART_SetConfig+0xd8>
 800b47a:	4ba0      	ldr	r3, [pc, #640]	; (800b6fc <UART_SetConfig+0x30c>)
 800b47c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b480:	f003 0303 	and.w	r3, r3, #3
 800b484:	2b03      	cmp	r3, #3
 800b486:	d81b      	bhi.n	800b4c0 <UART_SetConfig+0xd0>
 800b488:	a201      	add	r2, pc, #4	; (adr r2, 800b490 <UART_SetConfig+0xa0>)
 800b48a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b48e:	bf00      	nop
 800b490:	0800b4a1 	.word	0x0800b4a1
 800b494:	0800b4b1 	.word	0x0800b4b1
 800b498:	0800b4a9 	.word	0x0800b4a9
 800b49c:	0800b4b9 	.word	0x0800b4b9
 800b4a0:	2301      	movs	r3, #1
 800b4a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4a6:	e080      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b4a8:	2302      	movs	r3, #2
 800b4aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4ae:	e07c      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b4b0:	2304      	movs	r3, #4
 800b4b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4b6:	e078      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b4b8:	2308      	movs	r3, #8
 800b4ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4be:	e074      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b4c0:	2310      	movs	r3, #16
 800b4c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b4c6:	e070      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b4c8:	68fb      	ldr	r3, [r7, #12]
 800b4ca:	681b      	ldr	r3, [r3, #0]
 800b4cc:	4a8c      	ldr	r2, [pc, #560]	; (800b700 <UART_SetConfig+0x310>)
 800b4ce:	4293      	cmp	r3, r2
 800b4d0:	d138      	bne.n	800b544 <UART_SetConfig+0x154>
 800b4d2:	4b8a      	ldr	r3, [pc, #552]	; (800b6fc <UART_SetConfig+0x30c>)
 800b4d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b4d8:	f003 030c 	and.w	r3, r3, #12
 800b4dc:	2b0c      	cmp	r3, #12
 800b4de:	d82d      	bhi.n	800b53c <UART_SetConfig+0x14c>
 800b4e0:	a201      	add	r2, pc, #4	; (adr r2, 800b4e8 <UART_SetConfig+0xf8>)
 800b4e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b4e6:	bf00      	nop
 800b4e8:	0800b51d 	.word	0x0800b51d
 800b4ec:	0800b53d 	.word	0x0800b53d
 800b4f0:	0800b53d 	.word	0x0800b53d
 800b4f4:	0800b53d 	.word	0x0800b53d
 800b4f8:	0800b52d 	.word	0x0800b52d
 800b4fc:	0800b53d 	.word	0x0800b53d
 800b500:	0800b53d 	.word	0x0800b53d
 800b504:	0800b53d 	.word	0x0800b53d
 800b508:	0800b525 	.word	0x0800b525
 800b50c:	0800b53d 	.word	0x0800b53d
 800b510:	0800b53d 	.word	0x0800b53d
 800b514:	0800b53d 	.word	0x0800b53d
 800b518:	0800b535 	.word	0x0800b535
 800b51c:	2300      	movs	r3, #0
 800b51e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b522:	e042      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b524:	2302      	movs	r3, #2
 800b526:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b52a:	e03e      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b52c:	2304      	movs	r3, #4
 800b52e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b532:	e03a      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b534:	2308      	movs	r3, #8
 800b536:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b53a:	e036      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b53c:	2310      	movs	r3, #16
 800b53e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b542:	e032      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	681b      	ldr	r3, [r3, #0]
 800b548:	4a6a      	ldr	r2, [pc, #424]	; (800b6f4 <UART_SetConfig+0x304>)
 800b54a:	4293      	cmp	r3, r2
 800b54c:	d12a      	bne.n	800b5a4 <UART_SetConfig+0x1b4>
 800b54e:	4b6b      	ldr	r3, [pc, #428]	; (800b6fc <UART_SetConfig+0x30c>)
 800b550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800b554:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800b558:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b55c:	d01a      	beq.n	800b594 <UART_SetConfig+0x1a4>
 800b55e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800b562:	d81b      	bhi.n	800b59c <UART_SetConfig+0x1ac>
 800b564:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b568:	d00c      	beq.n	800b584 <UART_SetConfig+0x194>
 800b56a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b56e:	d815      	bhi.n	800b59c <UART_SetConfig+0x1ac>
 800b570:	2b00      	cmp	r3, #0
 800b572:	d003      	beq.n	800b57c <UART_SetConfig+0x18c>
 800b574:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b578:	d008      	beq.n	800b58c <UART_SetConfig+0x19c>
 800b57a:	e00f      	b.n	800b59c <UART_SetConfig+0x1ac>
 800b57c:	2300      	movs	r3, #0
 800b57e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b582:	e012      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b584:	2302      	movs	r3, #2
 800b586:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b58a:	e00e      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b58c:	2304      	movs	r3, #4
 800b58e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b592:	e00a      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b594:	2308      	movs	r3, #8
 800b596:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b59a:	e006      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b59c:	2310      	movs	r3, #16
 800b59e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800b5a2:	e002      	b.n	800b5aa <UART_SetConfig+0x1ba>
 800b5a4:	2310      	movs	r3, #16
 800b5a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	681b      	ldr	r3, [r3, #0]
 800b5ae:	4a51      	ldr	r2, [pc, #324]	; (800b6f4 <UART_SetConfig+0x304>)
 800b5b0:	4293      	cmp	r3, r2
 800b5b2:	d17a      	bne.n	800b6aa <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800b5b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b5b8:	2b08      	cmp	r3, #8
 800b5ba:	d824      	bhi.n	800b606 <UART_SetConfig+0x216>
 800b5bc:	a201      	add	r2, pc, #4	; (adr r2, 800b5c4 <UART_SetConfig+0x1d4>)
 800b5be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b5c2:	bf00      	nop
 800b5c4:	0800b5e9 	.word	0x0800b5e9
 800b5c8:	0800b607 	.word	0x0800b607
 800b5cc:	0800b5f1 	.word	0x0800b5f1
 800b5d0:	0800b607 	.word	0x0800b607
 800b5d4:	0800b5f7 	.word	0x0800b5f7
 800b5d8:	0800b607 	.word	0x0800b607
 800b5dc:	0800b607 	.word	0x0800b607
 800b5e0:	0800b607 	.word	0x0800b607
 800b5e4:	0800b5ff 	.word	0x0800b5ff
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b5e8:	f7fe fde0 	bl	800a1ac <HAL_RCC_GetPCLK1Freq>
 800b5ec:	61f8      	str	r0, [r7, #28]
        break;
 800b5ee:	e010      	b.n	800b612 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b5f0:	4b44      	ldr	r3, [pc, #272]	; (800b704 <UART_SetConfig+0x314>)
 800b5f2:	61fb      	str	r3, [r7, #28]
        break;
 800b5f4:	e00d      	b.n	800b612 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b5f6:	f7fe fd41 	bl	800a07c <HAL_RCC_GetSysClockFreq>
 800b5fa:	61f8      	str	r0, [r7, #28]
        break;
 800b5fc:	e009      	b.n	800b612 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b5fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b602:	61fb      	str	r3, [r7, #28]
        break;
 800b604:	e005      	b.n	800b612 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800b606:	2300      	movs	r3, #0
 800b608:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b60a:	2301      	movs	r3, #1
 800b60c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b610:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800b612:	69fb      	ldr	r3, [r7, #28]
 800b614:	2b00      	cmp	r3, #0
 800b616:	f000 8107 	beq.w	800b828 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	685a      	ldr	r2, [r3, #4]
 800b61e:	4613      	mov	r3, r2
 800b620:	005b      	lsls	r3, r3, #1
 800b622:	4413      	add	r3, r2
 800b624:	69fa      	ldr	r2, [r7, #28]
 800b626:	429a      	cmp	r2, r3
 800b628:	d305      	bcc.n	800b636 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800b62a:	68fb      	ldr	r3, [r7, #12]
 800b62c:	685b      	ldr	r3, [r3, #4]
 800b62e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800b630:	69fa      	ldr	r2, [r7, #28]
 800b632:	429a      	cmp	r2, r3
 800b634:	d903      	bls.n	800b63e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b63c:	e0f4      	b.n	800b828 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800b63e:	69fb      	ldr	r3, [r7, #28]
 800b640:	2200      	movs	r2, #0
 800b642:	461c      	mov	r4, r3
 800b644:	4615      	mov	r5, r2
 800b646:	f04f 0200 	mov.w	r2, #0
 800b64a:	f04f 0300 	mov.w	r3, #0
 800b64e:	022b      	lsls	r3, r5, #8
 800b650:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800b654:	0222      	lsls	r2, r4, #8
 800b656:	68f9      	ldr	r1, [r7, #12]
 800b658:	6849      	ldr	r1, [r1, #4]
 800b65a:	0849      	lsrs	r1, r1, #1
 800b65c:	2000      	movs	r0, #0
 800b65e:	4688      	mov	r8, r1
 800b660:	4681      	mov	r9, r0
 800b662:	eb12 0a08 	adds.w	sl, r2, r8
 800b666:	eb43 0b09 	adc.w	fp, r3, r9
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	2200      	movs	r2, #0
 800b670:	603b      	str	r3, [r7, #0]
 800b672:	607a      	str	r2, [r7, #4]
 800b674:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b678:	4650      	mov	r0, sl
 800b67a:	4659      	mov	r1, fp
 800b67c:	f7f5 fb04 	bl	8000c88 <__aeabi_uldivmod>
 800b680:	4602      	mov	r2, r0
 800b682:	460b      	mov	r3, r1
 800b684:	4613      	mov	r3, r2
 800b686:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800b688:	69bb      	ldr	r3, [r7, #24]
 800b68a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800b68e:	d308      	bcc.n	800b6a2 <UART_SetConfig+0x2b2>
 800b690:	69bb      	ldr	r3, [r7, #24]
 800b692:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b696:	d204      	bcs.n	800b6a2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	681b      	ldr	r3, [r3, #0]
 800b69c:	69ba      	ldr	r2, [r7, #24]
 800b69e:	60da      	str	r2, [r3, #12]
 800b6a0:	e0c2      	b.n	800b828 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800b6a2:	2301      	movs	r3, #1
 800b6a4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b6a8:	e0be      	b.n	800b828 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b6aa:	68fb      	ldr	r3, [r7, #12]
 800b6ac:	69db      	ldr	r3, [r3, #28]
 800b6ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b6b2:	d16a      	bne.n	800b78a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800b6b4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b6b8:	2b08      	cmp	r3, #8
 800b6ba:	d834      	bhi.n	800b726 <UART_SetConfig+0x336>
 800b6bc:	a201      	add	r2, pc, #4	; (adr r2, 800b6c4 <UART_SetConfig+0x2d4>)
 800b6be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b6c2:	bf00      	nop
 800b6c4:	0800b6e9 	.word	0x0800b6e9
 800b6c8:	0800b709 	.word	0x0800b709
 800b6cc:	0800b711 	.word	0x0800b711
 800b6d0:	0800b727 	.word	0x0800b727
 800b6d4:	0800b717 	.word	0x0800b717
 800b6d8:	0800b727 	.word	0x0800b727
 800b6dc:	0800b727 	.word	0x0800b727
 800b6e0:	0800b727 	.word	0x0800b727
 800b6e4:	0800b71f 	.word	0x0800b71f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b6e8:	f7fe fd60 	bl	800a1ac <HAL_RCC_GetPCLK1Freq>
 800b6ec:	61f8      	str	r0, [r7, #28]
        break;
 800b6ee:	e020      	b.n	800b732 <UART_SetConfig+0x342>
 800b6f0:	efff69f3 	.word	0xefff69f3
 800b6f4:	40008000 	.word	0x40008000
 800b6f8:	40013800 	.word	0x40013800
 800b6fc:	40021000 	.word	0x40021000
 800b700:	40004400 	.word	0x40004400
 800b704:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b708:	f7fe fd66 	bl	800a1d8 <HAL_RCC_GetPCLK2Freq>
 800b70c:	61f8      	str	r0, [r7, #28]
        break;
 800b70e:	e010      	b.n	800b732 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b710:	4b4c      	ldr	r3, [pc, #304]	; (800b844 <UART_SetConfig+0x454>)
 800b712:	61fb      	str	r3, [r7, #28]
        break;
 800b714:	e00d      	b.n	800b732 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b716:	f7fe fcb1 	bl	800a07c <HAL_RCC_GetSysClockFreq>
 800b71a:	61f8      	str	r0, [r7, #28]
        break;
 800b71c:	e009      	b.n	800b732 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b71e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b722:	61fb      	str	r3, [r7, #28]
        break;
 800b724:	e005      	b.n	800b732 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800b726:	2300      	movs	r3, #0
 800b728:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b72a:	2301      	movs	r3, #1
 800b72c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b730:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800b732:	69fb      	ldr	r3, [r7, #28]
 800b734:	2b00      	cmp	r3, #0
 800b736:	d077      	beq.n	800b828 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800b738:	69fb      	ldr	r3, [r7, #28]
 800b73a:	005a      	lsls	r2, r3, #1
 800b73c:	68fb      	ldr	r3, [r7, #12]
 800b73e:	685b      	ldr	r3, [r3, #4]
 800b740:	085b      	lsrs	r3, r3, #1
 800b742:	441a      	add	r2, r3
 800b744:	68fb      	ldr	r3, [r7, #12]
 800b746:	685b      	ldr	r3, [r3, #4]
 800b748:	fbb2 f3f3 	udiv	r3, r2, r3
 800b74c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b74e:	69bb      	ldr	r3, [r7, #24]
 800b750:	2b0f      	cmp	r3, #15
 800b752:	d916      	bls.n	800b782 <UART_SetConfig+0x392>
 800b754:	69bb      	ldr	r3, [r7, #24]
 800b756:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b75a:	d212      	bcs.n	800b782 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800b75c:	69bb      	ldr	r3, [r7, #24]
 800b75e:	b29b      	uxth	r3, r3
 800b760:	f023 030f 	bic.w	r3, r3, #15
 800b764:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800b766:	69bb      	ldr	r3, [r7, #24]
 800b768:	085b      	lsrs	r3, r3, #1
 800b76a:	b29b      	uxth	r3, r3
 800b76c:	f003 0307 	and.w	r3, r3, #7
 800b770:	b29a      	uxth	r2, r3
 800b772:	8afb      	ldrh	r3, [r7, #22]
 800b774:	4313      	orrs	r3, r2
 800b776:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	8afa      	ldrh	r2, [r7, #22]
 800b77e:	60da      	str	r2, [r3, #12]
 800b780:	e052      	b.n	800b828 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b782:	2301      	movs	r3, #1
 800b784:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800b788:	e04e      	b.n	800b828 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800b78a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b78e:	2b08      	cmp	r3, #8
 800b790:	d827      	bhi.n	800b7e2 <UART_SetConfig+0x3f2>
 800b792:	a201      	add	r2, pc, #4	; (adr r2, 800b798 <UART_SetConfig+0x3a8>)
 800b794:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b798:	0800b7bd 	.word	0x0800b7bd
 800b79c:	0800b7c5 	.word	0x0800b7c5
 800b7a0:	0800b7cd 	.word	0x0800b7cd
 800b7a4:	0800b7e3 	.word	0x0800b7e3
 800b7a8:	0800b7d3 	.word	0x0800b7d3
 800b7ac:	0800b7e3 	.word	0x0800b7e3
 800b7b0:	0800b7e3 	.word	0x0800b7e3
 800b7b4:	0800b7e3 	.word	0x0800b7e3
 800b7b8:	0800b7db 	.word	0x0800b7db
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800b7bc:	f7fe fcf6 	bl	800a1ac <HAL_RCC_GetPCLK1Freq>
 800b7c0:	61f8      	str	r0, [r7, #28]
        break;
 800b7c2:	e014      	b.n	800b7ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800b7c4:	f7fe fd08 	bl	800a1d8 <HAL_RCC_GetPCLK2Freq>
 800b7c8:	61f8      	str	r0, [r7, #28]
        break;
 800b7ca:	e010      	b.n	800b7ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800b7cc:	4b1d      	ldr	r3, [pc, #116]	; (800b844 <UART_SetConfig+0x454>)
 800b7ce:	61fb      	str	r3, [r7, #28]
        break;
 800b7d0:	e00d      	b.n	800b7ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800b7d2:	f7fe fc53 	bl	800a07c <HAL_RCC_GetSysClockFreq>
 800b7d6:	61f8      	str	r0, [r7, #28]
        break;
 800b7d8:	e009      	b.n	800b7ee <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800b7da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800b7de:	61fb      	str	r3, [r7, #28]
        break;
 800b7e0:	e005      	b.n	800b7ee <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800b7e2:	2300      	movs	r3, #0
 800b7e4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800b7e6:	2301      	movs	r3, #1
 800b7e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800b7ec:	bf00      	nop
    }

    if (pclk != 0U)
 800b7ee:	69fb      	ldr	r3, [r7, #28]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d019      	beq.n	800b828 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800b7f4:	68fb      	ldr	r3, [r7, #12]
 800b7f6:	685b      	ldr	r3, [r3, #4]
 800b7f8:	085a      	lsrs	r2, r3, #1
 800b7fa:	69fb      	ldr	r3, [r7, #28]
 800b7fc:	441a      	add	r2, r3
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	685b      	ldr	r3, [r3, #4]
 800b802:	fbb2 f3f3 	udiv	r3, r2, r3
 800b806:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800b808:	69bb      	ldr	r3, [r7, #24]
 800b80a:	2b0f      	cmp	r3, #15
 800b80c:	d909      	bls.n	800b822 <UART_SetConfig+0x432>
 800b80e:	69bb      	ldr	r3, [r7, #24]
 800b810:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b814:	d205      	bcs.n	800b822 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800b816:	69bb      	ldr	r3, [r7, #24]
 800b818:	b29a      	uxth	r2, r3
 800b81a:	68fb      	ldr	r3, [r7, #12]
 800b81c:	681b      	ldr	r3, [r3, #0]
 800b81e:	60da      	str	r2, [r3, #12]
 800b820:	e002      	b.n	800b828 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800b822:	2301      	movs	r3, #1
 800b824:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800b828:	68fb      	ldr	r3, [r7, #12]
 800b82a:	2200      	movs	r2, #0
 800b82c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800b82e:	68fb      	ldr	r3, [r7, #12]
 800b830:	2200      	movs	r2, #0
 800b832:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800b834:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800b838:	4618      	mov	r0, r3
 800b83a:	3728      	adds	r7, #40	; 0x28
 800b83c:	46bd      	mov	sp, r7
 800b83e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800b842:	bf00      	nop
 800b844:	00f42400 	.word	0x00f42400

0800b848 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800b848:	b480      	push	{r7}
 800b84a:	b083      	sub	sp, #12
 800b84c:	af00      	add	r7, sp, #0
 800b84e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b854:	f003 0301 	and.w	r3, r3, #1
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d00a      	beq.n	800b872 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800b85c:	687b      	ldr	r3, [r7, #4]
 800b85e:	681b      	ldr	r3, [r3, #0]
 800b860:	685b      	ldr	r3, [r3, #4]
 800b862:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	681b      	ldr	r3, [r3, #0]
 800b86e:	430a      	orrs	r2, r1
 800b870:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800b872:	687b      	ldr	r3, [r7, #4]
 800b874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b876:	f003 0302 	and.w	r3, r3, #2
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	d00a      	beq.n	800b894 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	681b      	ldr	r3, [r3, #0]
 800b882:	685b      	ldr	r3, [r3, #4]
 800b884:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800b888:	687b      	ldr	r3, [r7, #4]
 800b88a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b88c:	687b      	ldr	r3, [r7, #4]
 800b88e:	681b      	ldr	r3, [r3, #0]
 800b890:	430a      	orrs	r2, r1
 800b892:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800b894:	687b      	ldr	r3, [r7, #4]
 800b896:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b898:	f003 0304 	and.w	r3, r3, #4
 800b89c:	2b00      	cmp	r3, #0
 800b89e:	d00a      	beq.n	800b8b6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	681b      	ldr	r3, [r3, #0]
 800b8a4:	685b      	ldr	r3, [r3, #4]
 800b8a6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b8ae:	687b      	ldr	r3, [r7, #4]
 800b8b0:	681b      	ldr	r3, [r3, #0]
 800b8b2:	430a      	orrs	r2, r1
 800b8b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8ba:	f003 0308 	and.w	r3, r3, #8
 800b8be:	2b00      	cmp	r3, #0
 800b8c0:	d00a      	beq.n	800b8d8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800b8c2:	687b      	ldr	r3, [r7, #4]
 800b8c4:	681b      	ldr	r3, [r3, #0]
 800b8c6:	685b      	ldr	r3, [r3, #4]
 800b8c8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800b8cc:	687b      	ldr	r3, [r7, #4]
 800b8ce:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800b8d0:	687b      	ldr	r3, [r7, #4]
 800b8d2:	681b      	ldr	r3, [r3, #0]
 800b8d4:	430a      	orrs	r2, r1
 800b8d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800b8d8:	687b      	ldr	r3, [r7, #4]
 800b8da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8dc:	f003 0310 	and.w	r3, r3, #16
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d00a      	beq.n	800b8fa <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800b8e4:	687b      	ldr	r3, [r7, #4]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	689b      	ldr	r3, [r3, #8]
 800b8ea:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800b8ee:	687b      	ldr	r3, [r7, #4]
 800b8f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	430a      	orrs	r2, r1
 800b8f8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800b8fa:	687b      	ldr	r3, [r7, #4]
 800b8fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b8fe:	f003 0320 	and.w	r3, r3, #32
 800b902:	2b00      	cmp	r3, #0
 800b904:	d00a      	beq.n	800b91c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	689b      	ldr	r3, [r3, #8]
 800b90c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	430a      	orrs	r2, r1
 800b91a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800b91c:	687b      	ldr	r3, [r7, #4]
 800b91e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b920:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b924:	2b00      	cmp	r3, #0
 800b926:	d01a      	beq.n	800b95e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800b928:	687b      	ldr	r3, [r7, #4]
 800b92a:	681b      	ldr	r3, [r3, #0]
 800b92c:	685b      	ldr	r3, [r3, #4]
 800b92e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800b932:	687b      	ldr	r3, [r7, #4]
 800b934:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800b936:	687b      	ldr	r3, [r7, #4]
 800b938:	681b      	ldr	r3, [r3, #0]
 800b93a:	430a      	orrs	r2, r1
 800b93c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b942:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b946:	d10a      	bne.n	800b95e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800b948:	687b      	ldr	r3, [r7, #4]
 800b94a:	681b      	ldr	r3, [r3, #0]
 800b94c:	685b      	ldr	r3, [r3, #4]
 800b94e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	430a      	orrs	r2, r1
 800b95c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800b95e:	687b      	ldr	r3, [r7, #4]
 800b960:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b962:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b966:	2b00      	cmp	r3, #0
 800b968:	d00a      	beq.n	800b980 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800b96a:	687b      	ldr	r3, [r7, #4]
 800b96c:	681b      	ldr	r3, [r3, #0]
 800b96e:	685b      	ldr	r3, [r3, #4]
 800b970:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800b974:	687b      	ldr	r3, [r7, #4]
 800b976:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	430a      	orrs	r2, r1
 800b97e:	605a      	str	r2, [r3, #4]
  }
}
 800b980:	bf00      	nop
 800b982:	370c      	adds	r7, #12
 800b984:	46bd      	mov	sp, r7
 800b986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b98a:	4770      	bx	lr

0800b98c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800b98c:	b580      	push	{r7, lr}
 800b98e:	b086      	sub	sp, #24
 800b990:	af02      	add	r7, sp, #8
 800b992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	2200      	movs	r2, #0
 800b998:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b99c:	f7fa fca4 	bl	80062e8 <HAL_GetTick>
 800b9a0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	681b      	ldr	r3, [r3, #0]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	f003 0308 	and.w	r3, r3, #8
 800b9ac:	2b08      	cmp	r3, #8
 800b9ae:	d10e      	bne.n	800b9ce <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9b0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9b4:	9300      	str	r3, [sp, #0]
 800b9b6:	68fb      	ldr	r3, [r7, #12]
 800b9b8:	2200      	movs	r2, #0
 800b9ba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800b9be:	6878      	ldr	r0, [r7, #4]
 800b9c0:	f000 f82d 	bl	800ba1e <UART_WaitOnFlagUntilTimeout>
 800b9c4:	4603      	mov	r3, r0
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d001      	beq.n	800b9ce <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9ca:	2303      	movs	r3, #3
 800b9cc:	e023      	b.n	800ba16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800b9ce:	687b      	ldr	r3, [r7, #4]
 800b9d0:	681b      	ldr	r3, [r3, #0]
 800b9d2:	681b      	ldr	r3, [r3, #0]
 800b9d4:	f003 0304 	and.w	r3, r3, #4
 800b9d8:	2b04      	cmp	r3, #4
 800b9da:	d10e      	bne.n	800b9fa <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800b9dc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800b9e0:	9300      	str	r3, [sp, #0]
 800b9e2:	68fb      	ldr	r3, [r7, #12]
 800b9e4:	2200      	movs	r2, #0
 800b9e6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800b9ea:	6878      	ldr	r0, [r7, #4]
 800b9ec:	f000 f817 	bl	800ba1e <UART_WaitOnFlagUntilTimeout>
 800b9f0:	4603      	mov	r3, r0
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d001      	beq.n	800b9fa <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800b9f6:	2303      	movs	r3, #3
 800b9f8:	e00d      	b.n	800ba16 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	2220      	movs	r2, #32
 800b9fe:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	2220      	movs	r2, #32
 800ba04:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba06:	687b      	ldr	r3, [r7, #4]
 800ba08:	2200      	movs	r2, #0
 800ba0a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800ba0c:	687b      	ldr	r3, [r7, #4]
 800ba0e:	2200      	movs	r2, #0
 800ba10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800ba14:	2300      	movs	r3, #0
}
 800ba16:	4618      	mov	r0, r3
 800ba18:	3710      	adds	r7, #16
 800ba1a:	46bd      	mov	sp, r7
 800ba1c:	bd80      	pop	{r7, pc}

0800ba1e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ba1e:	b580      	push	{r7, lr}
 800ba20:	b09c      	sub	sp, #112	; 0x70
 800ba22:	af00      	add	r7, sp, #0
 800ba24:	60f8      	str	r0, [r7, #12]
 800ba26:	60b9      	str	r1, [r7, #8]
 800ba28:	603b      	str	r3, [r7, #0]
 800ba2a:	4613      	mov	r3, r2
 800ba2c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ba2e:	e0a5      	b.n	800bb7c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ba30:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba32:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ba36:	f000 80a1 	beq.w	800bb7c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ba3a:	f7fa fc55 	bl	80062e8 <HAL_GetTick>
 800ba3e:	4602      	mov	r2, r0
 800ba40:	683b      	ldr	r3, [r7, #0]
 800ba42:	1ad3      	subs	r3, r2, r3
 800ba44:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800ba46:	429a      	cmp	r2, r3
 800ba48:	d302      	bcc.n	800ba50 <UART_WaitOnFlagUntilTimeout+0x32>
 800ba4a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ba4c:	2b00      	cmp	r3, #0
 800ba4e:	d13e      	bne.n	800bace <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ba50:	68fb      	ldr	r3, [r7, #12]
 800ba52:	681b      	ldr	r3, [r3, #0]
 800ba54:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba56:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ba58:	e853 3f00 	ldrex	r3, [r3]
 800ba5c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ba5e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ba60:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ba64:	667b      	str	r3, [r7, #100]	; 0x64
 800ba66:	68fb      	ldr	r3, [r7, #12]
 800ba68:	681b      	ldr	r3, [r3, #0]
 800ba6a:	461a      	mov	r2, r3
 800ba6c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ba6e:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ba70:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba72:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ba74:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ba76:	e841 2300 	strex	r3, r2, [r1]
 800ba7a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ba7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ba7e:	2b00      	cmp	r3, #0
 800ba80:	d1e6      	bne.n	800ba50 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba82:	68fb      	ldr	r3, [r7, #12]
 800ba84:	681b      	ldr	r3, [r3, #0]
 800ba86:	3308      	adds	r3, #8
 800ba88:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba8a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ba8c:	e853 3f00 	ldrex	r3, [r3]
 800ba90:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ba92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ba94:	f023 0301 	bic.w	r3, r3, #1
 800ba98:	663b      	str	r3, [r7, #96]	; 0x60
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	3308      	adds	r3, #8
 800baa0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800baa2:	64ba      	str	r2, [r7, #72]	; 0x48
 800baa4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800baa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800baaa:	e841 2300 	strex	r3, r2, [r1]
 800baae:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800bab0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d1e5      	bne.n	800ba82 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800bab6:	68fb      	ldr	r3, [r7, #12]
 800bab8:	2220      	movs	r2, #32
 800baba:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800babc:	68fb      	ldr	r3, [r7, #12]
 800babe:	2220      	movs	r2, #32
 800bac0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	2200      	movs	r2, #0
 800bac6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800baca:	2303      	movs	r3, #3
 800bacc:	e067      	b.n	800bb9e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800bace:	68fb      	ldr	r3, [r7, #12]
 800bad0:	681b      	ldr	r3, [r3, #0]
 800bad2:	681b      	ldr	r3, [r3, #0]
 800bad4:	f003 0304 	and.w	r3, r3, #4
 800bad8:	2b00      	cmp	r3, #0
 800bada:	d04f      	beq.n	800bb7c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800badc:	68fb      	ldr	r3, [r7, #12]
 800bade:	681b      	ldr	r3, [r3, #0]
 800bae0:	69db      	ldr	r3, [r3, #28]
 800bae2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800bae6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800baea:	d147      	bne.n	800bb7c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800baec:	68fb      	ldr	r3, [r7, #12]
 800baee:	681b      	ldr	r3, [r3, #0]
 800baf0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800baf4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800baf6:	68fb      	ldr	r3, [r7, #12]
 800baf8:	681b      	ldr	r3, [r3, #0]
 800bafa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bafc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bafe:	e853 3f00 	ldrex	r3, [r3]
 800bb02:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800bb04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bb06:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800bb0a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bb0c:	68fb      	ldr	r3, [r7, #12]
 800bb0e:	681b      	ldr	r3, [r3, #0]
 800bb10:	461a      	mov	r2, r3
 800bb12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800bb14:	637b      	str	r3, [r7, #52]	; 0x34
 800bb16:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb18:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800bb1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800bb1c:	e841 2300 	strex	r3, r2, [r1]
 800bb20:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800bb22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bb24:	2b00      	cmp	r3, #0
 800bb26:	d1e6      	bne.n	800baf6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bb28:	68fb      	ldr	r3, [r7, #12]
 800bb2a:	681b      	ldr	r3, [r3, #0]
 800bb2c:	3308      	adds	r3, #8
 800bb2e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb30:	697b      	ldr	r3, [r7, #20]
 800bb32:	e853 3f00 	ldrex	r3, [r3]
 800bb36:	613b      	str	r3, [r7, #16]
   return(result);
 800bb38:	693b      	ldr	r3, [r7, #16]
 800bb3a:	f023 0301 	bic.w	r3, r3, #1
 800bb3e:	66bb      	str	r3, [r7, #104]	; 0x68
 800bb40:	68fb      	ldr	r3, [r7, #12]
 800bb42:	681b      	ldr	r3, [r3, #0]
 800bb44:	3308      	adds	r3, #8
 800bb46:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800bb48:	623a      	str	r2, [r7, #32]
 800bb4a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb4c:	69f9      	ldr	r1, [r7, #28]
 800bb4e:	6a3a      	ldr	r2, [r7, #32]
 800bb50:	e841 2300 	strex	r3, r2, [r1]
 800bb54:	61bb      	str	r3, [r7, #24]
   return(result);
 800bb56:	69bb      	ldr	r3, [r7, #24]
 800bb58:	2b00      	cmp	r3, #0
 800bb5a:	d1e5      	bne.n	800bb28 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800bb5c:	68fb      	ldr	r3, [r7, #12]
 800bb5e:	2220      	movs	r2, #32
 800bb60:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800bb62:	68fb      	ldr	r3, [r7, #12]
 800bb64:	2220      	movs	r2, #32
 800bb66:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bb68:	68fb      	ldr	r3, [r7, #12]
 800bb6a:	2220      	movs	r2, #32
 800bb6c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800bb70:	68fb      	ldr	r3, [r7, #12]
 800bb72:	2200      	movs	r2, #0
 800bb74:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800bb78:	2303      	movs	r3, #3
 800bb7a:	e010      	b.n	800bb9e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bb7c:	68fb      	ldr	r3, [r7, #12]
 800bb7e:	681b      	ldr	r3, [r3, #0]
 800bb80:	69da      	ldr	r2, [r3, #28]
 800bb82:	68bb      	ldr	r3, [r7, #8]
 800bb84:	4013      	ands	r3, r2
 800bb86:	68ba      	ldr	r2, [r7, #8]
 800bb88:	429a      	cmp	r2, r3
 800bb8a:	bf0c      	ite	eq
 800bb8c:	2301      	moveq	r3, #1
 800bb8e:	2300      	movne	r3, #0
 800bb90:	b2db      	uxtb	r3, r3
 800bb92:	461a      	mov	r2, r3
 800bb94:	79fb      	ldrb	r3, [r7, #7]
 800bb96:	429a      	cmp	r2, r3
 800bb98:	f43f af4a 	beq.w	800ba30 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800bb9c:	2300      	movs	r3, #0
}
 800bb9e:	4618      	mov	r0, r3
 800bba0:	3770      	adds	r7, #112	; 0x70
 800bba2:	46bd      	mov	sp, r7
 800bba4:	bd80      	pop	{r7, pc}
	...

0800bba8 <__NVIC_SetPriority>:
{
 800bba8:	b480      	push	{r7}
 800bbaa:	b083      	sub	sp, #12
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	4603      	mov	r3, r0
 800bbb0:	6039      	str	r1, [r7, #0]
 800bbb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800bbb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	db0a      	blt.n	800bbd2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbbc:	683b      	ldr	r3, [r7, #0]
 800bbbe:	b2da      	uxtb	r2, r3
 800bbc0:	490c      	ldr	r1, [pc, #48]	; (800bbf4 <__NVIC_SetPriority+0x4c>)
 800bbc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800bbc6:	0112      	lsls	r2, r2, #4
 800bbc8:	b2d2      	uxtb	r2, r2
 800bbca:	440b      	add	r3, r1
 800bbcc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800bbd0:	e00a      	b.n	800bbe8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800bbd2:	683b      	ldr	r3, [r7, #0]
 800bbd4:	b2da      	uxtb	r2, r3
 800bbd6:	4908      	ldr	r1, [pc, #32]	; (800bbf8 <__NVIC_SetPriority+0x50>)
 800bbd8:	79fb      	ldrb	r3, [r7, #7]
 800bbda:	f003 030f 	and.w	r3, r3, #15
 800bbde:	3b04      	subs	r3, #4
 800bbe0:	0112      	lsls	r2, r2, #4
 800bbe2:	b2d2      	uxtb	r2, r2
 800bbe4:	440b      	add	r3, r1
 800bbe6:	761a      	strb	r2, [r3, #24]
}
 800bbe8:	bf00      	nop
 800bbea:	370c      	adds	r7, #12
 800bbec:	46bd      	mov	sp, r7
 800bbee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbf2:	4770      	bx	lr
 800bbf4:	e000e100 	.word	0xe000e100
 800bbf8:	e000ed00 	.word	0xe000ed00

0800bbfc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800bbfc:	b580      	push	{r7, lr}
 800bbfe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800bc00:	4b05      	ldr	r3, [pc, #20]	; (800bc18 <SysTick_Handler+0x1c>)
 800bc02:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800bc04:	f003 f862 	bl	800eccc <xTaskGetSchedulerState>
 800bc08:	4603      	mov	r3, r0
 800bc0a:	2b01      	cmp	r3, #1
 800bc0c:	d001      	beq.n	800bc12 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800bc0e:	f003 ff83 	bl	800fb18 <xPortSysTickHandler>
  }
}
 800bc12:	bf00      	nop
 800bc14:	bd80      	pop	{r7, pc}
 800bc16:	bf00      	nop
 800bc18:	e000e010 	.word	0xe000e010

0800bc1c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800bc1c:	b580      	push	{r7, lr}
 800bc1e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800bc20:	2100      	movs	r1, #0
 800bc22:	f06f 0004 	mvn.w	r0, #4
 800bc26:	f7ff ffbf 	bl	800bba8 <__NVIC_SetPriority>
#endif
}
 800bc2a:	bf00      	nop
 800bc2c:	bd80      	pop	{r7, pc}
	...

0800bc30 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800bc30:	b480      	push	{r7}
 800bc32:	b083      	sub	sp, #12
 800bc34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc36:	f3ef 8305 	mrs	r3, IPSR
 800bc3a:	603b      	str	r3, [r7, #0]
  return(result);
 800bc3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d003      	beq.n	800bc4a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800bc42:	f06f 0305 	mvn.w	r3, #5
 800bc46:	607b      	str	r3, [r7, #4]
 800bc48:	e00c      	b.n	800bc64 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800bc4a:	4b0a      	ldr	r3, [pc, #40]	; (800bc74 <osKernelInitialize+0x44>)
 800bc4c:	681b      	ldr	r3, [r3, #0]
 800bc4e:	2b00      	cmp	r3, #0
 800bc50:	d105      	bne.n	800bc5e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800bc52:	4b08      	ldr	r3, [pc, #32]	; (800bc74 <osKernelInitialize+0x44>)
 800bc54:	2201      	movs	r2, #1
 800bc56:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800bc58:	2300      	movs	r3, #0
 800bc5a:	607b      	str	r3, [r7, #4]
 800bc5c:	e002      	b.n	800bc64 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800bc5e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bc62:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bc64:	687b      	ldr	r3, [r7, #4]
}
 800bc66:	4618      	mov	r0, r3
 800bc68:	370c      	adds	r7, #12
 800bc6a:	46bd      	mov	sp, r7
 800bc6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc70:	4770      	bx	lr
 800bc72:	bf00      	nop
 800bc74:	20006808 	.word	0x20006808

0800bc78 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800bc78:	b580      	push	{r7, lr}
 800bc7a:	b082      	sub	sp, #8
 800bc7c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bc7e:	f3ef 8305 	mrs	r3, IPSR
 800bc82:	603b      	str	r3, [r7, #0]
  return(result);
 800bc84:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bc86:	2b00      	cmp	r3, #0
 800bc88:	d003      	beq.n	800bc92 <osKernelStart+0x1a>
    stat = osErrorISR;
 800bc8a:	f06f 0305 	mvn.w	r3, #5
 800bc8e:	607b      	str	r3, [r7, #4]
 800bc90:	e010      	b.n	800bcb4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800bc92:	4b0b      	ldr	r3, [pc, #44]	; (800bcc0 <osKernelStart+0x48>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	2b01      	cmp	r3, #1
 800bc98:	d109      	bne.n	800bcae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800bc9a:	f7ff ffbf 	bl	800bc1c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800bc9e:	4b08      	ldr	r3, [pc, #32]	; (800bcc0 <osKernelStart+0x48>)
 800bca0:	2202      	movs	r2, #2
 800bca2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800bca4:	f002 fb08 	bl	800e2b8 <vTaskStartScheduler>
      stat = osOK;
 800bca8:	2300      	movs	r3, #0
 800bcaa:	607b      	str	r3, [r7, #4]
 800bcac:	e002      	b.n	800bcb4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800bcae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcb2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800bcb4:	687b      	ldr	r3, [r7, #4]
}
 800bcb6:	4618      	mov	r0, r3
 800bcb8:	3708      	adds	r7, #8
 800bcba:	46bd      	mov	sp, r7
 800bcbc:	bd80      	pop	{r7, pc}
 800bcbe:	bf00      	nop
 800bcc0:	20006808 	.word	0x20006808

0800bcc4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b08e      	sub	sp, #56	; 0x38
 800bcc8:	af04      	add	r7, sp, #16
 800bcca:	60f8      	str	r0, [r7, #12]
 800bccc:	60b9      	str	r1, [r7, #8]
 800bcce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bcd4:	f3ef 8305 	mrs	r3, IPSR
 800bcd8:	617b      	str	r3, [r7, #20]
  return(result);
 800bcda:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800bcdc:	2b00      	cmp	r3, #0
 800bcde:	d17e      	bne.n	800bdde <osThreadNew+0x11a>
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	2b00      	cmp	r3, #0
 800bce4:	d07b      	beq.n	800bdde <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800bce6:	2340      	movs	r3, #64	; 0x40
 800bce8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800bcea:	2318      	movs	r3, #24
 800bcec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800bcee:	2300      	movs	r3, #0
 800bcf0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800bcf2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800bcf6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800bcf8:	687b      	ldr	r3, [r7, #4]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	d045      	beq.n	800bd8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800bcfe:	687b      	ldr	r3, [r7, #4]
 800bd00:	681b      	ldr	r3, [r3, #0]
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d002      	beq.n	800bd0c <osThreadNew+0x48>
        name = attr->name;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800bd0c:	687b      	ldr	r3, [r7, #4]
 800bd0e:	699b      	ldr	r3, [r3, #24]
 800bd10:	2b00      	cmp	r3, #0
 800bd12:	d002      	beq.n	800bd1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	699b      	ldr	r3, [r3, #24]
 800bd18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800bd1a:	69fb      	ldr	r3, [r7, #28]
 800bd1c:	2b00      	cmp	r3, #0
 800bd1e:	d008      	beq.n	800bd32 <osThreadNew+0x6e>
 800bd20:	69fb      	ldr	r3, [r7, #28]
 800bd22:	2b38      	cmp	r3, #56	; 0x38
 800bd24:	d805      	bhi.n	800bd32 <osThreadNew+0x6e>
 800bd26:	687b      	ldr	r3, [r7, #4]
 800bd28:	685b      	ldr	r3, [r3, #4]
 800bd2a:	f003 0301 	and.w	r3, r3, #1
 800bd2e:	2b00      	cmp	r3, #0
 800bd30:	d001      	beq.n	800bd36 <osThreadNew+0x72>
        return (NULL);
 800bd32:	2300      	movs	r3, #0
 800bd34:	e054      	b.n	800bde0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800bd36:	687b      	ldr	r3, [r7, #4]
 800bd38:	695b      	ldr	r3, [r3, #20]
 800bd3a:	2b00      	cmp	r3, #0
 800bd3c:	d003      	beq.n	800bd46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800bd3e:	687b      	ldr	r3, [r7, #4]
 800bd40:	695b      	ldr	r3, [r3, #20]
 800bd42:	089b      	lsrs	r3, r3, #2
 800bd44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd46:	687b      	ldr	r3, [r7, #4]
 800bd48:	689b      	ldr	r3, [r3, #8]
 800bd4a:	2b00      	cmp	r3, #0
 800bd4c:	d00e      	beq.n	800bd6c <osThreadNew+0xa8>
 800bd4e:	687b      	ldr	r3, [r7, #4]
 800bd50:	68db      	ldr	r3, [r3, #12]
 800bd52:	2bbb      	cmp	r3, #187	; 0xbb
 800bd54:	d90a      	bls.n	800bd6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd56:	687b      	ldr	r3, [r7, #4]
 800bd58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d006      	beq.n	800bd6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	695b      	ldr	r3, [r3, #20]
 800bd62:	2b00      	cmp	r3, #0
 800bd64:	d002      	beq.n	800bd6c <osThreadNew+0xa8>
        mem = 1;
 800bd66:	2301      	movs	r3, #1
 800bd68:	61bb      	str	r3, [r7, #24]
 800bd6a:	e010      	b.n	800bd8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800bd6c:	687b      	ldr	r3, [r7, #4]
 800bd6e:	689b      	ldr	r3, [r3, #8]
 800bd70:	2b00      	cmp	r3, #0
 800bd72:	d10c      	bne.n	800bd8e <osThreadNew+0xca>
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	68db      	ldr	r3, [r3, #12]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	d108      	bne.n	800bd8e <osThreadNew+0xca>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	691b      	ldr	r3, [r3, #16]
 800bd80:	2b00      	cmp	r3, #0
 800bd82:	d104      	bne.n	800bd8e <osThreadNew+0xca>
          mem = 0;
 800bd84:	2300      	movs	r3, #0
 800bd86:	61bb      	str	r3, [r7, #24]
 800bd88:	e001      	b.n	800bd8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800bd8a:	2300      	movs	r3, #0
 800bd8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800bd8e:	69bb      	ldr	r3, [r7, #24]
 800bd90:	2b01      	cmp	r3, #1
 800bd92:	d110      	bne.n	800bdb6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800bd98:	687a      	ldr	r2, [r7, #4]
 800bd9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800bd9c:	9202      	str	r2, [sp, #8]
 800bd9e:	9301      	str	r3, [sp, #4]
 800bda0:	69fb      	ldr	r3, [r7, #28]
 800bda2:	9300      	str	r3, [sp, #0]
 800bda4:	68bb      	ldr	r3, [r7, #8]
 800bda6:	6a3a      	ldr	r2, [r7, #32]
 800bda8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdaa:	68f8      	ldr	r0, [r7, #12]
 800bdac:	f002 f81a 	bl	800dde4 <xTaskCreateStatic>
 800bdb0:	4603      	mov	r3, r0
 800bdb2:	613b      	str	r3, [r7, #16]
 800bdb4:	e013      	b.n	800bdde <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800bdb6:	69bb      	ldr	r3, [r7, #24]
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d110      	bne.n	800bdde <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800bdbc:	6a3b      	ldr	r3, [r7, #32]
 800bdbe:	b29a      	uxth	r2, r3
 800bdc0:	f107 0310 	add.w	r3, r7, #16
 800bdc4:	9301      	str	r3, [sp, #4]
 800bdc6:	69fb      	ldr	r3, [r7, #28]
 800bdc8:	9300      	str	r3, [sp, #0]
 800bdca:	68bb      	ldr	r3, [r7, #8]
 800bdcc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800bdce:	68f8      	ldr	r0, [r7, #12]
 800bdd0:	f002 f865 	bl	800de9e <xTaskCreate>
 800bdd4:	4603      	mov	r3, r0
 800bdd6:	2b01      	cmp	r3, #1
 800bdd8:	d001      	beq.n	800bdde <osThreadNew+0x11a>
            hTask = NULL;
 800bdda:	2300      	movs	r3, #0
 800bddc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800bdde:	693b      	ldr	r3, [r7, #16]
}
 800bde0:	4618      	mov	r0, r3
 800bde2:	3728      	adds	r7, #40	; 0x28
 800bde4:	46bd      	mov	sp, r7
 800bde6:	bd80      	pop	{r7, pc}

0800bde8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800bde8:	b580      	push	{r7, lr}
 800bdea:	b084      	sub	sp, #16
 800bdec:	af00      	add	r7, sp, #0
 800bdee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bdf0:	f3ef 8305 	mrs	r3, IPSR
 800bdf4:	60bb      	str	r3, [r7, #8]
  return(result);
 800bdf6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800bdf8:	2b00      	cmp	r3, #0
 800bdfa:	d003      	beq.n	800be04 <osDelay+0x1c>
    stat = osErrorISR;
 800bdfc:	f06f 0305 	mvn.w	r3, #5
 800be00:	60fb      	str	r3, [r7, #12]
 800be02:	e007      	b.n	800be14 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800be04:	2300      	movs	r3, #0
 800be06:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800be08:	687b      	ldr	r3, [r7, #4]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d002      	beq.n	800be14 <osDelay+0x2c>
      vTaskDelay(ticks);
 800be0e:	6878      	ldr	r0, [r7, #4]
 800be10:	f002 fa1e 	bl	800e250 <vTaskDelay>
    }
  }

  return (stat);
 800be14:	68fb      	ldr	r3, [r7, #12]
}
 800be16:	4618      	mov	r0, r3
 800be18:	3710      	adds	r7, #16
 800be1a:	46bd      	mov	sp, r7
 800be1c:	bd80      	pop	{r7, pc}

0800be1e <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 800be1e:	b580      	push	{r7, lr}
 800be20:	b086      	sub	sp, #24
 800be22:	af00      	add	r7, sp, #0
 800be24:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 800be26:	2300      	movs	r3, #0
 800be28:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800be2a:	f3ef 8305 	mrs	r3, IPSR
 800be2e:	60fb      	str	r3, [r7, #12]
  return(result);
 800be30:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 800be32:	2b00      	cmp	r3, #0
 800be34:	d12d      	bne.n	800be92 <osEventFlagsNew+0x74>
    mem = -1;
 800be36:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800be3a:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	2b00      	cmp	r3, #0
 800be40:	d015      	beq.n	800be6e <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	689b      	ldr	r3, [r3, #8]
 800be46:	2b00      	cmp	r3, #0
 800be48:	d006      	beq.n	800be58 <osEventFlagsNew+0x3a>
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	68db      	ldr	r3, [r3, #12]
 800be4e:	2b1f      	cmp	r3, #31
 800be50:	d902      	bls.n	800be58 <osEventFlagsNew+0x3a>
        mem = 1;
 800be52:	2301      	movs	r3, #1
 800be54:	613b      	str	r3, [r7, #16]
 800be56:	e00c      	b.n	800be72 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800be58:	687b      	ldr	r3, [r7, #4]
 800be5a:	689b      	ldr	r3, [r3, #8]
 800be5c:	2b00      	cmp	r3, #0
 800be5e:	d108      	bne.n	800be72 <osEventFlagsNew+0x54>
 800be60:	687b      	ldr	r3, [r7, #4]
 800be62:	68db      	ldr	r3, [r3, #12]
 800be64:	2b00      	cmp	r3, #0
 800be66:	d104      	bne.n	800be72 <osEventFlagsNew+0x54>
          mem = 0;
 800be68:	2300      	movs	r3, #0
 800be6a:	613b      	str	r3, [r7, #16]
 800be6c:	e001      	b.n	800be72 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 800be6e:	2300      	movs	r3, #0
 800be70:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 800be72:	693b      	ldr	r3, [r7, #16]
 800be74:	2b01      	cmp	r3, #1
 800be76:	d106      	bne.n	800be86 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	689b      	ldr	r3, [r3, #8]
 800be7c:	4618      	mov	r0, r3
 800be7e:	f000 fc4b 	bl	800c718 <xEventGroupCreateStatic>
 800be82:	6178      	str	r0, [r7, #20]
 800be84:	e005      	b.n	800be92 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800be86:	693b      	ldr	r3, [r7, #16]
 800be88:	2b00      	cmp	r3, #0
 800be8a:	d102      	bne.n	800be92 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 800be8c:	f000 fc7b 	bl	800c786 <xEventGroupCreate>
 800be90:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 800be92:	697b      	ldr	r3, [r7, #20]
}
 800be94:	4618      	mov	r0, r3
 800be96:	3718      	adds	r7, #24
 800be98:	46bd      	mov	sp, r7
 800be9a:	bd80      	pop	{r7, pc}

0800be9c <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 800be9c:	b580      	push	{r7, lr}
 800be9e:	b086      	sub	sp, #24
 800bea0:	af00      	add	r7, sp, #0
 800bea2:	6078      	str	r0, [r7, #4]
 800bea4:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800bea6:	687b      	ldr	r3, [r7, #4]
 800bea8:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800beaa:	693b      	ldr	r3, [r7, #16]
 800beac:	2b00      	cmp	r3, #0
 800beae:	d004      	beq.n	800beba <osEventFlagsSet+0x1e>
 800beb0:	683b      	ldr	r3, [r7, #0]
 800beb2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d003      	beq.n	800bec2 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800beba:	f06f 0303 	mvn.w	r3, #3
 800bebe:	617b      	str	r3, [r7, #20]
 800bec0:	e028      	b.n	800bf14 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bec2:	f3ef 8305 	mrs	r3, IPSR
 800bec6:	60fb      	str	r3, [r7, #12]
  return(result);
 800bec8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800beca:	2b00      	cmp	r3, #0
 800becc:	d01d      	beq.n	800bf0a <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 800bece:	2300      	movs	r3, #0
 800bed0:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 800bed2:	f107 0308 	add.w	r3, r7, #8
 800bed6:	461a      	mov	r2, r3
 800bed8:	6839      	ldr	r1, [r7, #0]
 800beda:	6938      	ldr	r0, [r7, #16]
 800bedc:	f000 fdf6 	bl	800cacc <xEventGroupSetBitsFromISR>
 800bee0:	4603      	mov	r3, r0
 800bee2:	2b00      	cmp	r3, #0
 800bee4:	d103      	bne.n	800beee <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800bee6:	f06f 0302 	mvn.w	r3, #2
 800beea:	617b      	str	r3, [r7, #20]
 800beec:	e012      	b.n	800bf14 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d00d      	beq.n	800bf14 <osEventFlagsSet+0x78>
 800bef8:	4b09      	ldr	r3, [pc, #36]	; (800bf20 <osEventFlagsSet+0x84>)
 800befa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800befe:	601a      	str	r2, [r3, #0]
 800bf00:	f3bf 8f4f 	dsb	sy
 800bf04:	f3bf 8f6f 	isb	sy
 800bf08:	e004      	b.n	800bf14 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800bf0a:	6839      	ldr	r1, [r7, #0]
 800bf0c:	6938      	ldr	r0, [r7, #16]
 800bf0e:	f000 fd23 	bl	800c958 <xEventGroupSetBits>
 800bf12:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 800bf14:	697b      	ldr	r3, [r7, #20]
}
 800bf16:	4618      	mov	r0, r3
 800bf18:	3718      	adds	r7, #24
 800bf1a:	46bd      	mov	sp, r7
 800bf1c:	bd80      	pop	{r7, pc}
 800bf1e:	bf00      	nop
 800bf20:	e000ed04 	.word	0xe000ed04

0800bf24 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 800bf24:	b580      	push	{r7, lr}
 800bf26:	b08c      	sub	sp, #48	; 0x30
 800bf28:	af02      	add	r7, sp, #8
 800bf2a:	60f8      	str	r0, [r7, #12]
 800bf2c:	60b9      	str	r1, [r7, #8]
 800bf2e:	607a      	str	r2, [r7, #4]
 800bf30:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800bf36:	69bb      	ldr	r3, [r7, #24]
 800bf38:	2b00      	cmp	r3, #0
 800bf3a:	d004      	beq.n	800bf46 <osEventFlagsWait+0x22>
 800bf3c:	68bb      	ldr	r3, [r7, #8]
 800bf3e:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800bf42:	2b00      	cmp	r3, #0
 800bf44:	d003      	beq.n	800bf4e <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 800bf46:	f06f 0303 	mvn.w	r3, #3
 800bf4a:	61fb      	str	r3, [r7, #28]
 800bf4c:	e04b      	b.n	800bfe6 <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bf4e:	f3ef 8305 	mrs	r3, IPSR
 800bf52:	617b      	str	r3, [r7, #20]
  return(result);
 800bf54:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 800bf56:	2b00      	cmp	r3, #0
 800bf58:	d003      	beq.n	800bf62 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 800bf5a:	f06f 0305 	mvn.w	r3, #5
 800bf5e:	61fb      	str	r3, [r7, #28]
 800bf60:	e041      	b.n	800bfe6 <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 800bf62:	687b      	ldr	r3, [r7, #4]
 800bf64:	f003 0301 	and.w	r3, r3, #1
 800bf68:	2b00      	cmp	r3, #0
 800bf6a:	d002      	beq.n	800bf72 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 800bf6c:	2301      	movs	r3, #1
 800bf6e:	627b      	str	r3, [r7, #36]	; 0x24
 800bf70:	e001      	b.n	800bf76 <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 800bf72:	2300      	movs	r3, #0
 800bf74:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	f003 0302 	and.w	r3, r3, #2
 800bf7c:	2b00      	cmp	r3, #0
 800bf7e:	d002      	beq.n	800bf86 <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 800bf80:	2300      	movs	r3, #0
 800bf82:	623b      	str	r3, [r7, #32]
 800bf84:	e001      	b.n	800bf8a <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800bf86:	2301      	movs	r3, #1
 800bf88:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800bf8a:	683b      	ldr	r3, [r7, #0]
 800bf8c:	9300      	str	r3, [sp, #0]
 800bf8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf90:	6a3a      	ldr	r2, [r7, #32]
 800bf92:	68b9      	ldr	r1, [r7, #8]
 800bf94:	69b8      	ldr	r0, [r7, #24]
 800bf96:	f000 fc11 	bl	800c7bc <xEventGroupWaitBits>
 800bf9a:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 800bf9c:	687b      	ldr	r3, [r7, #4]
 800bf9e:	f003 0301 	and.w	r3, r3, #1
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d010      	beq.n	800bfc8 <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800bfa6:	68ba      	ldr	r2, [r7, #8]
 800bfa8:	69fb      	ldr	r3, [r7, #28]
 800bfaa:	4013      	ands	r3, r2
 800bfac:	68ba      	ldr	r2, [r7, #8]
 800bfae:	429a      	cmp	r2, r3
 800bfb0:	d019      	beq.n	800bfe6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800bfb2:	683b      	ldr	r3, [r7, #0]
 800bfb4:	2b00      	cmp	r3, #0
 800bfb6:	d003      	beq.n	800bfc0 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800bfb8:	f06f 0301 	mvn.w	r3, #1
 800bfbc:	61fb      	str	r3, [r7, #28]
 800bfbe:	e012      	b.n	800bfe6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800bfc0:	f06f 0302 	mvn.w	r3, #2
 800bfc4:	61fb      	str	r3, [r7, #28]
 800bfc6:	e00e      	b.n	800bfe6 <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800bfc8:	68ba      	ldr	r2, [r7, #8]
 800bfca:	69fb      	ldr	r3, [r7, #28]
 800bfcc:	4013      	ands	r3, r2
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	d109      	bne.n	800bfe6 <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	2b00      	cmp	r3, #0
 800bfd6:	d003      	beq.n	800bfe0 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800bfd8:	f06f 0301 	mvn.w	r3, #1
 800bfdc:	61fb      	str	r3, [r7, #28]
 800bfde:	e002      	b.n	800bfe6 <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 800bfe0:	f06f 0302 	mvn.w	r3, #2
 800bfe4:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800bfe6:	69fb      	ldr	r3, [r7, #28]
}
 800bfe8:	4618      	mov	r0, r3
 800bfea:	3728      	adds	r7, #40	; 0x28
 800bfec:	46bd      	mov	sp, r7
 800bfee:	bd80      	pop	{r7, pc}

0800bff0 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800bff0:	b580      	push	{r7, lr}
 800bff2:	b088      	sub	sp, #32
 800bff4:	af00      	add	r7, sp, #0
 800bff6:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800bff8:	2300      	movs	r3, #0
 800bffa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800bffc:	f3ef 8305 	mrs	r3, IPSR
 800c000:	60bb      	str	r3, [r7, #8]
  return(result);
 800c002:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800c004:	2b00      	cmp	r3, #0
 800c006:	d174      	bne.n	800c0f2 <osMutexNew+0x102>
    if (attr != NULL) {
 800c008:	687b      	ldr	r3, [r7, #4]
 800c00a:	2b00      	cmp	r3, #0
 800c00c:	d003      	beq.n	800c016 <osMutexNew+0x26>
      type = attr->attr_bits;
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	685b      	ldr	r3, [r3, #4]
 800c012:	61bb      	str	r3, [r7, #24]
 800c014:	e001      	b.n	800c01a <osMutexNew+0x2a>
    } else {
      type = 0U;
 800c016:	2300      	movs	r3, #0
 800c018:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c01a:	69bb      	ldr	r3, [r7, #24]
 800c01c:	f003 0301 	and.w	r3, r3, #1
 800c020:	2b00      	cmp	r3, #0
 800c022:	d002      	beq.n	800c02a <osMutexNew+0x3a>
      rmtx = 1U;
 800c024:	2301      	movs	r3, #1
 800c026:	617b      	str	r3, [r7, #20]
 800c028:	e001      	b.n	800c02e <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800c02a:	2300      	movs	r3, #0
 800c02c:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800c02e:	69bb      	ldr	r3, [r7, #24]
 800c030:	f003 0308 	and.w	r3, r3, #8
 800c034:	2b00      	cmp	r3, #0
 800c036:	d15c      	bne.n	800c0f2 <osMutexNew+0x102>
      mem = -1;
 800c038:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c03c:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800c03e:	687b      	ldr	r3, [r7, #4]
 800c040:	2b00      	cmp	r3, #0
 800c042:	d015      	beq.n	800c070 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c044:	687b      	ldr	r3, [r7, #4]
 800c046:	689b      	ldr	r3, [r3, #8]
 800c048:	2b00      	cmp	r3, #0
 800c04a:	d006      	beq.n	800c05a <osMutexNew+0x6a>
 800c04c:	687b      	ldr	r3, [r7, #4]
 800c04e:	68db      	ldr	r3, [r3, #12]
 800c050:	2b4f      	cmp	r3, #79	; 0x4f
 800c052:	d902      	bls.n	800c05a <osMutexNew+0x6a>
          mem = 1;
 800c054:	2301      	movs	r3, #1
 800c056:	613b      	str	r3, [r7, #16]
 800c058:	e00c      	b.n	800c074 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	689b      	ldr	r3, [r3, #8]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d108      	bne.n	800c074 <osMutexNew+0x84>
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	68db      	ldr	r3, [r3, #12]
 800c066:	2b00      	cmp	r3, #0
 800c068:	d104      	bne.n	800c074 <osMutexNew+0x84>
            mem = 0;
 800c06a:	2300      	movs	r3, #0
 800c06c:	613b      	str	r3, [r7, #16]
 800c06e:	e001      	b.n	800c074 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800c070:	2300      	movs	r3, #0
 800c072:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800c074:	693b      	ldr	r3, [r7, #16]
 800c076:	2b01      	cmp	r3, #1
 800c078:	d112      	bne.n	800c0a0 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800c07a:	697b      	ldr	r3, [r7, #20]
 800c07c:	2b00      	cmp	r3, #0
 800c07e:	d007      	beq.n	800c090 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c080:	687b      	ldr	r3, [r7, #4]
 800c082:	689b      	ldr	r3, [r3, #8]
 800c084:	4619      	mov	r1, r3
 800c086:	2004      	movs	r0, #4
 800c088:	f000 ff57 	bl	800cf3a <xQueueCreateMutexStatic>
 800c08c:	61f8      	str	r0, [r7, #28]
 800c08e:	e016      	b.n	800c0be <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	689b      	ldr	r3, [r3, #8]
 800c094:	4619      	mov	r1, r3
 800c096:	2001      	movs	r0, #1
 800c098:	f000 ff4f 	bl	800cf3a <xQueueCreateMutexStatic>
 800c09c:	61f8      	str	r0, [r7, #28]
 800c09e:	e00e      	b.n	800c0be <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800c0a0:	693b      	ldr	r3, [r7, #16]
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	d10b      	bne.n	800c0be <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800c0a6:	697b      	ldr	r3, [r7, #20]
 800c0a8:	2b00      	cmp	r3, #0
 800c0aa:	d004      	beq.n	800c0b6 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c0ac:	2004      	movs	r0, #4
 800c0ae:	f000 ff2c 	bl	800cf0a <xQueueCreateMutex>
 800c0b2:	61f8      	str	r0, [r7, #28]
 800c0b4:	e003      	b.n	800c0be <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800c0b6:	2001      	movs	r0, #1
 800c0b8:	f000 ff27 	bl	800cf0a <xQueueCreateMutex>
 800c0bc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800c0be:	69fb      	ldr	r3, [r7, #28]
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00c      	beq.n	800c0de <osMutexNew+0xee>
        if (attr != NULL) {
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d003      	beq.n	800c0d2 <osMutexNew+0xe2>
          name = attr->name;
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	60fb      	str	r3, [r7, #12]
 800c0d0:	e001      	b.n	800c0d6 <osMutexNew+0xe6>
        } else {
          name = NULL;
 800c0d2:	2300      	movs	r3, #0
 800c0d4:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800c0d6:	68f9      	ldr	r1, [r7, #12]
 800c0d8:	69f8      	ldr	r0, [r7, #28]
 800c0da:	f001 fdfb 	bl	800dcd4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c0de:	69fb      	ldr	r3, [r7, #28]
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	d006      	beq.n	800c0f2 <osMutexNew+0x102>
 800c0e4:	697b      	ldr	r3, [r7, #20]
 800c0e6:	2b00      	cmp	r3, #0
 800c0e8:	d003      	beq.n	800c0f2 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c0ea:	69fb      	ldr	r3, [r7, #28]
 800c0ec:	f043 0301 	orr.w	r3, r3, #1
 800c0f0:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800c0f2:	69fb      	ldr	r3, [r7, #28]
}
 800c0f4:	4618      	mov	r0, r3
 800c0f6:	3720      	adds	r7, #32
 800c0f8:	46bd      	mov	sp, r7
 800c0fa:	bd80      	pop	{r7, pc}

0800c0fc <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
 800c102:	6078      	str	r0, [r7, #4]
 800c104:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	f023 0301 	bic.w	r3, r3, #1
 800c10c:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	f003 0301 	and.w	r3, r3, #1
 800c114:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c116:	2300      	movs	r3, #0
 800c118:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c11a:	f3ef 8305 	mrs	r3, IPSR
 800c11e:	60bb      	str	r3, [r7, #8]
  return(result);
 800c120:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c122:	2b00      	cmp	r3, #0
 800c124:	d003      	beq.n	800c12e <osMutexAcquire+0x32>
    stat = osErrorISR;
 800c126:	f06f 0305 	mvn.w	r3, #5
 800c12a:	617b      	str	r3, [r7, #20]
 800c12c:	e02c      	b.n	800c188 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800c12e:	693b      	ldr	r3, [r7, #16]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d103      	bne.n	800c13c <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800c134:	f06f 0303 	mvn.w	r3, #3
 800c138:	617b      	str	r3, [r7, #20]
 800c13a:	e025      	b.n	800c188 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800c13c:	68fb      	ldr	r3, [r7, #12]
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d011      	beq.n	800c166 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c142:	6839      	ldr	r1, [r7, #0]
 800c144:	6938      	ldr	r0, [r7, #16]
 800c146:	f000 ff47 	bl	800cfd8 <xQueueTakeMutexRecursive>
 800c14a:	4603      	mov	r3, r0
 800c14c:	2b01      	cmp	r3, #1
 800c14e:	d01b      	beq.n	800c188 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c150:	683b      	ldr	r3, [r7, #0]
 800c152:	2b00      	cmp	r3, #0
 800c154:	d003      	beq.n	800c15e <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800c156:	f06f 0301 	mvn.w	r3, #1
 800c15a:	617b      	str	r3, [r7, #20]
 800c15c:	e014      	b.n	800c188 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c15e:	f06f 0302 	mvn.w	r3, #2
 800c162:	617b      	str	r3, [r7, #20]
 800c164:	e010      	b.n	800c188 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c166:	6839      	ldr	r1, [r7, #0]
 800c168:	6938      	ldr	r0, [r7, #16]
 800c16a:	f001 fadb 	bl	800d724 <xQueueSemaphoreTake>
 800c16e:	4603      	mov	r3, r0
 800c170:	2b01      	cmp	r3, #1
 800c172:	d009      	beq.n	800c188 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800c174:	683b      	ldr	r3, [r7, #0]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d003      	beq.n	800c182 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800c17a:	f06f 0301 	mvn.w	r3, #1
 800c17e:	617b      	str	r3, [r7, #20]
 800c180:	e002      	b.n	800c188 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800c182:	f06f 0302 	mvn.w	r3, #2
 800c186:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800c188:	697b      	ldr	r3, [r7, #20]
}
 800c18a:	4618      	mov	r0, r3
 800c18c:	3718      	adds	r7, #24
 800c18e:	46bd      	mov	sp, r7
 800c190:	bd80      	pop	{r7, pc}

0800c192 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c192:	b580      	push	{r7, lr}
 800c194:	b086      	sub	sp, #24
 800c196:	af00      	add	r7, sp, #0
 800c198:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	f023 0301 	bic.w	r3, r3, #1
 800c1a0:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800c1a2:	687b      	ldr	r3, [r7, #4]
 800c1a4:	f003 0301 	and.w	r3, r3, #1
 800c1a8:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800c1aa:	2300      	movs	r3, #0
 800c1ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c1ae:	f3ef 8305 	mrs	r3, IPSR
 800c1b2:	60bb      	str	r3, [r7, #8]
  return(result);
 800c1b4:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800c1b6:	2b00      	cmp	r3, #0
 800c1b8:	d003      	beq.n	800c1c2 <osMutexRelease+0x30>
    stat = osErrorISR;
 800c1ba:	f06f 0305 	mvn.w	r3, #5
 800c1be:	617b      	str	r3, [r7, #20]
 800c1c0:	e01f      	b.n	800c202 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800c1c2:	693b      	ldr	r3, [r7, #16]
 800c1c4:	2b00      	cmp	r3, #0
 800c1c6:	d103      	bne.n	800c1d0 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800c1c8:	f06f 0303 	mvn.w	r3, #3
 800c1cc:	617b      	str	r3, [r7, #20]
 800c1ce:	e018      	b.n	800c202 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800c1d0:	68fb      	ldr	r3, [r7, #12]
 800c1d2:	2b00      	cmp	r3, #0
 800c1d4:	d009      	beq.n	800c1ea <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c1d6:	6938      	ldr	r0, [r7, #16]
 800c1d8:	f000 feca 	bl	800cf70 <xQueueGiveMutexRecursive>
 800c1dc:	4603      	mov	r3, r0
 800c1de:	2b01      	cmp	r3, #1
 800c1e0:	d00f      	beq.n	800c202 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c1e2:	f06f 0302 	mvn.w	r3, #2
 800c1e6:	617b      	str	r3, [r7, #20]
 800c1e8:	e00b      	b.n	800c202 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c1ea:	2300      	movs	r3, #0
 800c1ec:	2200      	movs	r2, #0
 800c1ee:	2100      	movs	r1, #0
 800c1f0:	6938      	ldr	r0, [r7, #16]
 800c1f2:	f000 ff91 	bl	800d118 <xQueueGenericSend>
 800c1f6:	4603      	mov	r3, r0
 800c1f8:	2b01      	cmp	r3, #1
 800c1fa:	d002      	beq.n	800c202 <osMutexRelease+0x70>
        stat = osErrorResource;
 800c1fc:	f06f 0302 	mvn.w	r3, #2
 800c200:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c202:	697b      	ldr	r3, [r7, #20]
}
 800c204:	4618      	mov	r0, r3
 800c206:	3718      	adds	r7, #24
 800c208:	46bd      	mov	sp, r7
 800c20a:	bd80      	pop	{r7, pc}

0800c20c <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c20c:	b580      	push	{r7, lr}
 800c20e:	b08a      	sub	sp, #40	; 0x28
 800c210:	af02      	add	r7, sp, #8
 800c212:	60f8      	str	r0, [r7, #12]
 800c214:	60b9      	str	r1, [r7, #8]
 800c216:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800c218:	2300      	movs	r3, #0
 800c21a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c21c:	f3ef 8305 	mrs	r3, IPSR
 800c220:	613b      	str	r3, [r7, #16]
  return(result);
 800c222:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c224:	2b00      	cmp	r3, #0
 800c226:	d175      	bne.n	800c314 <osSemaphoreNew+0x108>
 800c228:	68fb      	ldr	r3, [r7, #12]
 800c22a:	2b00      	cmp	r3, #0
 800c22c:	d072      	beq.n	800c314 <osSemaphoreNew+0x108>
 800c22e:	68ba      	ldr	r2, [r7, #8]
 800c230:	68fb      	ldr	r3, [r7, #12]
 800c232:	429a      	cmp	r2, r3
 800c234:	d86e      	bhi.n	800c314 <osSemaphoreNew+0x108>
    mem = -1;
 800c236:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c23a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c23c:	687b      	ldr	r3, [r7, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d015      	beq.n	800c26e <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c242:	687b      	ldr	r3, [r7, #4]
 800c244:	689b      	ldr	r3, [r3, #8]
 800c246:	2b00      	cmp	r3, #0
 800c248:	d006      	beq.n	800c258 <osSemaphoreNew+0x4c>
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	68db      	ldr	r3, [r3, #12]
 800c24e:	2b4f      	cmp	r3, #79	; 0x4f
 800c250:	d902      	bls.n	800c258 <osSemaphoreNew+0x4c>
        mem = 1;
 800c252:	2301      	movs	r3, #1
 800c254:	61bb      	str	r3, [r7, #24]
 800c256:	e00c      	b.n	800c272 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c258:	687b      	ldr	r3, [r7, #4]
 800c25a:	689b      	ldr	r3, [r3, #8]
 800c25c:	2b00      	cmp	r3, #0
 800c25e:	d108      	bne.n	800c272 <osSemaphoreNew+0x66>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	2b00      	cmp	r3, #0
 800c266:	d104      	bne.n	800c272 <osSemaphoreNew+0x66>
          mem = 0;
 800c268:	2300      	movs	r3, #0
 800c26a:	61bb      	str	r3, [r7, #24]
 800c26c:	e001      	b.n	800c272 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800c26e:	2300      	movs	r3, #0
 800c270:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800c272:	69bb      	ldr	r3, [r7, #24]
 800c274:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c278:	d04c      	beq.n	800c314 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	2b01      	cmp	r3, #1
 800c27e:	d128      	bne.n	800c2d2 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800c280:	69bb      	ldr	r3, [r7, #24]
 800c282:	2b01      	cmp	r3, #1
 800c284:	d10a      	bne.n	800c29c <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c286:	687b      	ldr	r3, [r7, #4]
 800c288:	689b      	ldr	r3, [r3, #8]
 800c28a:	2203      	movs	r2, #3
 800c28c:	9200      	str	r2, [sp, #0]
 800c28e:	2200      	movs	r2, #0
 800c290:	2100      	movs	r1, #0
 800c292:	2001      	movs	r0, #1
 800c294:	f000 fd4a 	bl	800cd2c <xQueueGenericCreateStatic>
 800c298:	61f8      	str	r0, [r7, #28]
 800c29a:	e005      	b.n	800c2a8 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800c29c:	2203      	movs	r2, #3
 800c29e:	2100      	movs	r1, #0
 800c2a0:	2001      	movs	r0, #1
 800c2a2:	f000 fdbb 	bl	800ce1c <xQueueGenericCreate>
 800c2a6:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c2a8:	69fb      	ldr	r3, [r7, #28]
 800c2aa:	2b00      	cmp	r3, #0
 800c2ac:	d022      	beq.n	800c2f4 <osSemaphoreNew+0xe8>
 800c2ae:	68bb      	ldr	r3, [r7, #8]
 800c2b0:	2b00      	cmp	r3, #0
 800c2b2:	d01f      	beq.n	800c2f4 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	2200      	movs	r2, #0
 800c2b8:	2100      	movs	r1, #0
 800c2ba:	69f8      	ldr	r0, [r7, #28]
 800c2bc:	f000 ff2c 	bl	800d118 <xQueueGenericSend>
 800c2c0:	4603      	mov	r3, r0
 800c2c2:	2b01      	cmp	r3, #1
 800c2c4:	d016      	beq.n	800c2f4 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800c2c6:	69f8      	ldr	r0, [r7, #28]
 800c2c8:	f001 fbb8 	bl	800da3c <vQueueDelete>
            hSemaphore = NULL;
 800c2cc:	2300      	movs	r3, #0
 800c2ce:	61fb      	str	r3, [r7, #28]
 800c2d0:	e010      	b.n	800c2f4 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800c2d2:	69bb      	ldr	r3, [r7, #24]
 800c2d4:	2b01      	cmp	r3, #1
 800c2d6:	d108      	bne.n	800c2ea <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	689b      	ldr	r3, [r3, #8]
 800c2dc:	461a      	mov	r2, r3
 800c2de:	68b9      	ldr	r1, [r7, #8]
 800c2e0:	68f8      	ldr	r0, [r7, #12]
 800c2e2:	f000 feaf 	bl	800d044 <xQueueCreateCountingSemaphoreStatic>
 800c2e6:	61f8      	str	r0, [r7, #28]
 800c2e8:	e004      	b.n	800c2f4 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c2ea:	68b9      	ldr	r1, [r7, #8]
 800c2ec:	68f8      	ldr	r0, [r7, #12]
 800c2ee:	f000 fee0 	bl	800d0b2 <xQueueCreateCountingSemaphore>
 800c2f2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800c2f4:	69fb      	ldr	r3, [r7, #28]
 800c2f6:	2b00      	cmp	r3, #0
 800c2f8:	d00c      	beq.n	800c314 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	2b00      	cmp	r3, #0
 800c2fe:	d003      	beq.n	800c308 <osSemaphoreNew+0xfc>
          name = attr->name;
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	681b      	ldr	r3, [r3, #0]
 800c304:	617b      	str	r3, [r7, #20]
 800c306:	e001      	b.n	800c30c <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800c308:	2300      	movs	r3, #0
 800c30a:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800c30c:	6979      	ldr	r1, [r7, #20]
 800c30e:	69f8      	ldr	r0, [r7, #28]
 800c310:	f001 fce0 	bl	800dcd4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800c314:	69fb      	ldr	r3, [r7, #28]
}
 800c316:	4618      	mov	r0, r3
 800c318:	3720      	adds	r7, #32
 800c31a:	46bd      	mov	sp, r7
 800c31c:	bd80      	pop	{r7, pc}
	...

0800c320 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c320:	b580      	push	{r7, lr}
 800c322:	b086      	sub	sp, #24
 800c324:	af00      	add	r7, sp, #0
 800c326:	6078      	str	r0, [r7, #4]
 800c328:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c32e:	2300      	movs	r3, #0
 800c330:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c332:	693b      	ldr	r3, [r7, #16]
 800c334:	2b00      	cmp	r3, #0
 800c336:	d103      	bne.n	800c340 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800c338:	f06f 0303 	mvn.w	r3, #3
 800c33c:	617b      	str	r3, [r7, #20]
 800c33e:	e039      	b.n	800c3b4 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c340:	f3ef 8305 	mrs	r3, IPSR
 800c344:	60fb      	str	r3, [r7, #12]
  return(result);
 800c346:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d022      	beq.n	800c392 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800c34c:	683b      	ldr	r3, [r7, #0]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d003      	beq.n	800c35a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800c352:	f06f 0303 	mvn.w	r3, #3
 800c356:	617b      	str	r3, [r7, #20]
 800c358:	e02c      	b.n	800c3b4 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800c35a:	2300      	movs	r3, #0
 800c35c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c35e:	f107 0308 	add.w	r3, r7, #8
 800c362:	461a      	mov	r2, r3
 800c364:	2100      	movs	r1, #0
 800c366:	6938      	ldr	r0, [r7, #16]
 800c368:	f001 fae8 	bl	800d93c <xQueueReceiveFromISR>
 800c36c:	4603      	mov	r3, r0
 800c36e:	2b01      	cmp	r3, #1
 800c370:	d003      	beq.n	800c37a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800c372:	f06f 0302 	mvn.w	r3, #2
 800c376:	617b      	str	r3, [r7, #20]
 800c378:	e01c      	b.n	800c3b4 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	2b00      	cmp	r3, #0
 800c37e:	d019      	beq.n	800c3b4 <osSemaphoreAcquire+0x94>
 800c380:	4b0f      	ldr	r3, [pc, #60]	; (800c3c0 <osSemaphoreAcquire+0xa0>)
 800c382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c386:	601a      	str	r2, [r3, #0]
 800c388:	f3bf 8f4f 	dsb	sy
 800c38c:	f3bf 8f6f 	isb	sy
 800c390:	e010      	b.n	800c3b4 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c392:	6839      	ldr	r1, [r7, #0]
 800c394:	6938      	ldr	r0, [r7, #16]
 800c396:	f001 f9c5 	bl	800d724 <xQueueSemaphoreTake>
 800c39a:	4603      	mov	r3, r0
 800c39c:	2b01      	cmp	r3, #1
 800c39e:	d009      	beq.n	800c3b4 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800c3a0:	683b      	ldr	r3, [r7, #0]
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d003      	beq.n	800c3ae <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800c3a6:	f06f 0301 	mvn.w	r3, #1
 800c3aa:	617b      	str	r3, [r7, #20]
 800c3ac:	e002      	b.n	800c3b4 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800c3ae:	f06f 0302 	mvn.w	r3, #2
 800c3b2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800c3b4:	697b      	ldr	r3, [r7, #20]
}
 800c3b6:	4618      	mov	r0, r3
 800c3b8:	3718      	adds	r7, #24
 800c3ba:	46bd      	mov	sp, r7
 800c3bc:	bd80      	pop	{r7, pc}
 800c3be:	bf00      	nop
 800c3c0:	e000ed04 	.word	0xe000ed04

0800c3c4 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c3c4:	b580      	push	{r7, lr}
 800c3c6:	b086      	sub	sp, #24
 800c3c8:	af00      	add	r7, sp, #0
 800c3ca:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800c3cc:	687b      	ldr	r3, [r7, #4]
 800c3ce:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800c3d0:	2300      	movs	r3, #0
 800c3d2:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800c3d4:	693b      	ldr	r3, [r7, #16]
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d103      	bne.n	800c3e2 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800c3da:	f06f 0303 	mvn.w	r3, #3
 800c3de:	617b      	str	r3, [r7, #20]
 800c3e0:	e02c      	b.n	800c43c <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3e2:	f3ef 8305 	mrs	r3, IPSR
 800c3e6:	60fb      	str	r3, [r7, #12]
  return(result);
 800c3e8:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d01a      	beq.n	800c424 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800c3ee:	2300      	movs	r3, #0
 800c3f0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c3f2:	f107 0308 	add.w	r3, r7, #8
 800c3f6:	4619      	mov	r1, r3
 800c3f8:	6938      	ldr	r0, [r7, #16]
 800c3fa:	f001 f826 	bl	800d44a <xQueueGiveFromISR>
 800c3fe:	4603      	mov	r3, r0
 800c400:	2b01      	cmp	r3, #1
 800c402:	d003      	beq.n	800c40c <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800c404:	f06f 0302 	mvn.w	r3, #2
 800c408:	617b      	str	r3, [r7, #20]
 800c40a:	e017      	b.n	800c43c <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800c40c:	68bb      	ldr	r3, [r7, #8]
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d014      	beq.n	800c43c <osSemaphoreRelease+0x78>
 800c412:	4b0d      	ldr	r3, [pc, #52]	; (800c448 <osSemaphoreRelease+0x84>)
 800c414:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c418:	601a      	str	r2, [r3, #0]
 800c41a:	f3bf 8f4f 	dsb	sy
 800c41e:	f3bf 8f6f 	isb	sy
 800c422:	e00b      	b.n	800c43c <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c424:	2300      	movs	r3, #0
 800c426:	2200      	movs	r2, #0
 800c428:	2100      	movs	r1, #0
 800c42a:	6938      	ldr	r0, [r7, #16]
 800c42c:	f000 fe74 	bl	800d118 <xQueueGenericSend>
 800c430:	4603      	mov	r3, r0
 800c432:	2b01      	cmp	r3, #1
 800c434:	d002      	beq.n	800c43c <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800c436:	f06f 0302 	mvn.w	r3, #2
 800c43a:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800c43c:	697b      	ldr	r3, [r7, #20]
}
 800c43e:	4618      	mov	r0, r3
 800c440:	3718      	adds	r7, #24
 800c442:	46bd      	mov	sp, r7
 800c444:	bd80      	pop	{r7, pc}
 800c446:	bf00      	nop
 800c448:	e000ed04 	.word	0xe000ed04

0800c44c <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c44c:	b580      	push	{r7, lr}
 800c44e:	b08a      	sub	sp, #40	; 0x28
 800c450:	af02      	add	r7, sp, #8
 800c452:	60f8      	str	r0, [r7, #12]
 800c454:	60b9      	str	r1, [r7, #8]
 800c456:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800c458:	2300      	movs	r3, #0
 800c45a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c45c:	f3ef 8305 	mrs	r3, IPSR
 800c460:	613b      	str	r3, [r7, #16]
  return(result);
 800c462:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c464:	2b00      	cmp	r3, #0
 800c466:	d15f      	bne.n	800c528 <osMessageQueueNew+0xdc>
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d05c      	beq.n	800c528 <osMessageQueueNew+0xdc>
 800c46e:	68bb      	ldr	r3, [r7, #8]
 800c470:	2b00      	cmp	r3, #0
 800c472:	d059      	beq.n	800c528 <osMessageQueueNew+0xdc>
    mem = -1;
 800c474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c478:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	2b00      	cmp	r3, #0
 800c47e:	d029      	beq.n	800c4d4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	689b      	ldr	r3, [r3, #8]
 800c484:	2b00      	cmp	r3, #0
 800c486:	d012      	beq.n	800c4ae <osMessageQueueNew+0x62>
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	68db      	ldr	r3, [r3, #12]
 800c48c:	2b4f      	cmp	r3, #79	; 0x4f
 800c48e:	d90e      	bls.n	800c4ae <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c494:	2b00      	cmp	r3, #0
 800c496:	d00a      	beq.n	800c4ae <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	695a      	ldr	r2, [r3, #20]
 800c49c:	68fb      	ldr	r3, [r7, #12]
 800c49e:	68b9      	ldr	r1, [r7, #8]
 800c4a0:	fb01 f303 	mul.w	r3, r1, r3
 800c4a4:	429a      	cmp	r2, r3
 800c4a6:	d302      	bcc.n	800c4ae <osMessageQueueNew+0x62>
        mem = 1;
 800c4a8:	2301      	movs	r3, #1
 800c4aa:	61bb      	str	r3, [r7, #24]
 800c4ac:	e014      	b.n	800c4d8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	689b      	ldr	r3, [r3, #8]
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	d110      	bne.n	800c4d8 <osMessageQueueNew+0x8c>
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	68db      	ldr	r3, [r3, #12]
 800c4ba:	2b00      	cmp	r3, #0
 800c4bc:	d10c      	bne.n	800c4d8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c4c2:	2b00      	cmp	r3, #0
 800c4c4:	d108      	bne.n	800c4d8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c4c6:	687b      	ldr	r3, [r7, #4]
 800c4c8:	695b      	ldr	r3, [r3, #20]
 800c4ca:	2b00      	cmp	r3, #0
 800c4cc:	d104      	bne.n	800c4d8 <osMessageQueueNew+0x8c>
          mem = 0;
 800c4ce:	2300      	movs	r3, #0
 800c4d0:	61bb      	str	r3, [r7, #24]
 800c4d2:	e001      	b.n	800c4d8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800c4d4:	2300      	movs	r3, #0
 800c4d6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800c4d8:	69bb      	ldr	r3, [r7, #24]
 800c4da:	2b01      	cmp	r3, #1
 800c4dc:	d10b      	bne.n	800c4f6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c4de:	687b      	ldr	r3, [r7, #4]
 800c4e0:	691a      	ldr	r2, [r3, #16]
 800c4e2:	687b      	ldr	r3, [r7, #4]
 800c4e4:	689b      	ldr	r3, [r3, #8]
 800c4e6:	2100      	movs	r1, #0
 800c4e8:	9100      	str	r1, [sp, #0]
 800c4ea:	68b9      	ldr	r1, [r7, #8]
 800c4ec:	68f8      	ldr	r0, [r7, #12]
 800c4ee:	f000 fc1d 	bl	800cd2c <xQueueGenericCreateStatic>
 800c4f2:	61f8      	str	r0, [r7, #28]
 800c4f4:	e008      	b.n	800c508 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800c4f6:	69bb      	ldr	r3, [r7, #24]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d105      	bne.n	800c508 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800c4fc:	2200      	movs	r2, #0
 800c4fe:	68b9      	ldr	r1, [r7, #8]
 800c500:	68f8      	ldr	r0, [r7, #12]
 800c502:	f000 fc8b 	bl	800ce1c <xQueueGenericCreate>
 800c506:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800c508:	69fb      	ldr	r3, [r7, #28]
 800c50a:	2b00      	cmp	r3, #0
 800c50c:	d00c      	beq.n	800c528 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b00      	cmp	r3, #0
 800c512:	d003      	beq.n	800c51c <osMessageQueueNew+0xd0>
        name = attr->name;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	681b      	ldr	r3, [r3, #0]
 800c518:	617b      	str	r3, [r7, #20]
 800c51a:	e001      	b.n	800c520 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800c51c:	2300      	movs	r3, #0
 800c51e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800c520:	6979      	ldr	r1, [r7, #20]
 800c522:	69f8      	ldr	r0, [r7, #28]
 800c524:	f001 fbd6 	bl	800dcd4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800c528:	69fb      	ldr	r3, [r7, #28]
}
 800c52a:	4618      	mov	r0, r3
 800c52c:	3720      	adds	r7, #32
 800c52e:	46bd      	mov	sp, r7
 800c530:	bd80      	pop	{r7, pc}
	...

0800c534 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c534:	b580      	push	{r7, lr}
 800c536:	b088      	sub	sp, #32
 800c538:	af00      	add	r7, sp, #0
 800c53a:	60f8      	str	r0, [r7, #12]
 800c53c:	60b9      	str	r1, [r7, #8]
 800c53e:	603b      	str	r3, [r7, #0]
 800c540:	4613      	mov	r3, r2
 800c542:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c548:	2300      	movs	r3, #0
 800c54a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c54c:	f3ef 8305 	mrs	r3, IPSR
 800c550:	617b      	str	r3, [r7, #20]
  return(result);
 800c552:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c554:	2b00      	cmp	r3, #0
 800c556:	d028      	beq.n	800c5aa <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c558:	69bb      	ldr	r3, [r7, #24]
 800c55a:	2b00      	cmp	r3, #0
 800c55c:	d005      	beq.n	800c56a <osMessageQueuePut+0x36>
 800c55e:	68bb      	ldr	r3, [r7, #8]
 800c560:	2b00      	cmp	r3, #0
 800c562:	d002      	beq.n	800c56a <osMessageQueuePut+0x36>
 800c564:	683b      	ldr	r3, [r7, #0]
 800c566:	2b00      	cmp	r3, #0
 800c568:	d003      	beq.n	800c572 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800c56a:	f06f 0303 	mvn.w	r3, #3
 800c56e:	61fb      	str	r3, [r7, #28]
 800c570:	e038      	b.n	800c5e4 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800c572:	2300      	movs	r3, #0
 800c574:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c576:	f107 0210 	add.w	r2, r7, #16
 800c57a:	2300      	movs	r3, #0
 800c57c:	68b9      	ldr	r1, [r7, #8]
 800c57e:	69b8      	ldr	r0, [r7, #24]
 800c580:	f000 fec8 	bl	800d314 <xQueueGenericSendFromISR>
 800c584:	4603      	mov	r3, r0
 800c586:	2b01      	cmp	r3, #1
 800c588:	d003      	beq.n	800c592 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800c58a:	f06f 0302 	mvn.w	r3, #2
 800c58e:	61fb      	str	r3, [r7, #28]
 800c590:	e028      	b.n	800c5e4 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800c592:	693b      	ldr	r3, [r7, #16]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d025      	beq.n	800c5e4 <osMessageQueuePut+0xb0>
 800c598:	4b15      	ldr	r3, [pc, #84]	; (800c5f0 <osMessageQueuePut+0xbc>)
 800c59a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c59e:	601a      	str	r2, [r3, #0]
 800c5a0:	f3bf 8f4f 	dsb	sy
 800c5a4:	f3bf 8f6f 	isb	sy
 800c5a8:	e01c      	b.n	800c5e4 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c5aa:	69bb      	ldr	r3, [r7, #24]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d002      	beq.n	800c5b6 <osMessageQueuePut+0x82>
 800c5b0:	68bb      	ldr	r3, [r7, #8]
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d103      	bne.n	800c5be <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800c5b6:	f06f 0303 	mvn.w	r3, #3
 800c5ba:	61fb      	str	r3, [r7, #28]
 800c5bc:	e012      	b.n	800c5e4 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c5be:	2300      	movs	r3, #0
 800c5c0:	683a      	ldr	r2, [r7, #0]
 800c5c2:	68b9      	ldr	r1, [r7, #8]
 800c5c4:	69b8      	ldr	r0, [r7, #24]
 800c5c6:	f000 fda7 	bl	800d118 <xQueueGenericSend>
 800c5ca:	4603      	mov	r3, r0
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d009      	beq.n	800c5e4 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800c5d0:	683b      	ldr	r3, [r7, #0]
 800c5d2:	2b00      	cmp	r3, #0
 800c5d4:	d003      	beq.n	800c5de <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800c5d6:	f06f 0301 	mvn.w	r3, #1
 800c5da:	61fb      	str	r3, [r7, #28]
 800c5dc:	e002      	b.n	800c5e4 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800c5de:	f06f 0302 	mvn.w	r3, #2
 800c5e2:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c5e4:	69fb      	ldr	r3, [r7, #28]
}
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	3720      	adds	r7, #32
 800c5ea:	46bd      	mov	sp, r7
 800c5ec:	bd80      	pop	{r7, pc}
 800c5ee:	bf00      	nop
 800c5f0:	e000ed04 	.word	0xe000ed04

0800c5f4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c5f4:	b580      	push	{r7, lr}
 800c5f6:	b088      	sub	sp, #32
 800c5f8:	af00      	add	r7, sp, #0
 800c5fa:	60f8      	str	r0, [r7, #12]
 800c5fc:	60b9      	str	r1, [r7, #8]
 800c5fe:	607a      	str	r2, [r7, #4]
 800c600:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800c602:	68fb      	ldr	r3, [r7, #12]
 800c604:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800c606:	2300      	movs	r3, #0
 800c608:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c60a:	f3ef 8305 	mrs	r3, IPSR
 800c60e:	617b      	str	r3, [r7, #20]
  return(result);
 800c610:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800c612:	2b00      	cmp	r3, #0
 800c614:	d028      	beq.n	800c668 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c616:	69bb      	ldr	r3, [r7, #24]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	d005      	beq.n	800c628 <osMessageQueueGet+0x34>
 800c61c:	68bb      	ldr	r3, [r7, #8]
 800c61e:	2b00      	cmp	r3, #0
 800c620:	d002      	beq.n	800c628 <osMessageQueueGet+0x34>
 800c622:	683b      	ldr	r3, [r7, #0]
 800c624:	2b00      	cmp	r3, #0
 800c626:	d003      	beq.n	800c630 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800c628:	f06f 0303 	mvn.w	r3, #3
 800c62c:	61fb      	str	r3, [r7, #28]
 800c62e:	e037      	b.n	800c6a0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800c630:	2300      	movs	r3, #0
 800c632:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c634:	f107 0310 	add.w	r3, r7, #16
 800c638:	461a      	mov	r2, r3
 800c63a:	68b9      	ldr	r1, [r7, #8]
 800c63c:	69b8      	ldr	r0, [r7, #24]
 800c63e:	f001 f97d 	bl	800d93c <xQueueReceiveFromISR>
 800c642:	4603      	mov	r3, r0
 800c644:	2b01      	cmp	r3, #1
 800c646:	d003      	beq.n	800c650 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800c648:	f06f 0302 	mvn.w	r3, #2
 800c64c:	61fb      	str	r3, [r7, #28]
 800c64e:	e027      	b.n	800c6a0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800c650:	693b      	ldr	r3, [r7, #16]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d024      	beq.n	800c6a0 <osMessageQueueGet+0xac>
 800c656:	4b15      	ldr	r3, [pc, #84]	; (800c6ac <osMessageQueueGet+0xb8>)
 800c658:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c65c:	601a      	str	r2, [r3, #0]
 800c65e:	f3bf 8f4f 	dsb	sy
 800c662:	f3bf 8f6f 	isb	sy
 800c666:	e01b      	b.n	800c6a0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	2b00      	cmp	r3, #0
 800c66c:	d002      	beq.n	800c674 <osMessageQueueGet+0x80>
 800c66e:	68bb      	ldr	r3, [r7, #8]
 800c670:	2b00      	cmp	r3, #0
 800c672:	d103      	bne.n	800c67c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800c674:	f06f 0303 	mvn.w	r3, #3
 800c678:	61fb      	str	r3, [r7, #28]
 800c67a:	e011      	b.n	800c6a0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c67c:	683a      	ldr	r2, [r7, #0]
 800c67e:	68b9      	ldr	r1, [r7, #8]
 800c680:	69b8      	ldr	r0, [r7, #24]
 800c682:	f000 ff6f 	bl	800d564 <xQueueReceive>
 800c686:	4603      	mov	r3, r0
 800c688:	2b01      	cmp	r3, #1
 800c68a:	d009      	beq.n	800c6a0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800c68c:	683b      	ldr	r3, [r7, #0]
 800c68e:	2b00      	cmp	r3, #0
 800c690:	d003      	beq.n	800c69a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800c692:	f06f 0301 	mvn.w	r3, #1
 800c696:	61fb      	str	r3, [r7, #28]
 800c698:	e002      	b.n	800c6a0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800c69a:	f06f 0302 	mvn.w	r3, #2
 800c69e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800c6a0:	69fb      	ldr	r3, [r7, #28]
}
 800c6a2:	4618      	mov	r0, r3
 800c6a4:	3720      	adds	r7, #32
 800c6a6:	46bd      	mov	sp, r7
 800c6a8:	bd80      	pop	{r7, pc}
 800c6aa:	bf00      	nop
 800c6ac:	e000ed04 	.word	0xe000ed04

0800c6b0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800c6b0:	b480      	push	{r7}
 800c6b2:	b085      	sub	sp, #20
 800c6b4:	af00      	add	r7, sp, #0
 800c6b6:	60f8      	str	r0, [r7, #12]
 800c6b8:	60b9      	str	r1, [r7, #8]
 800c6ba:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800c6bc:	68fb      	ldr	r3, [r7, #12]
 800c6be:	4a07      	ldr	r2, [pc, #28]	; (800c6dc <vApplicationGetIdleTaskMemory+0x2c>)
 800c6c0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800c6c2:	68bb      	ldr	r3, [r7, #8]
 800c6c4:	4a06      	ldr	r2, [pc, #24]	; (800c6e0 <vApplicationGetIdleTaskMemory+0x30>)
 800c6c6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800c6c8:	687b      	ldr	r3, [r7, #4]
 800c6ca:	2240      	movs	r2, #64	; 0x40
 800c6cc:	601a      	str	r2, [r3, #0]
}
 800c6ce:	bf00      	nop
 800c6d0:	3714      	adds	r7, #20
 800c6d2:	46bd      	mov	sp, r7
 800c6d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6d8:	4770      	bx	lr
 800c6da:	bf00      	nop
 800c6dc:	2000680c 	.word	0x2000680c
 800c6e0:	200068c8 	.word	0x200068c8

0800c6e4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800c6e4:	b480      	push	{r7}
 800c6e6:	b085      	sub	sp, #20
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	60f8      	str	r0, [r7, #12]
 800c6ec:	60b9      	str	r1, [r7, #8]
 800c6ee:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800c6f0:	68fb      	ldr	r3, [r7, #12]
 800c6f2:	4a07      	ldr	r2, [pc, #28]	; (800c710 <vApplicationGetTimerTaskMemory+0x2c>)
 800c6f4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800c6f6:	68bb      	ldr	r3, [r7, #8]
 800c6f8:	4a06      	ldr	r2, [pc, #24]	; (800c714 <vApplicationGetTimerTaskMemory+0x30>)
 800c6fa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	2280      	movs	r2, #128	; 0x80
 800c700:	601a      	str	r2, [r3, #0]
}
 800c702:	bf00      	nop
 800c704:	3714      	adds	r7, #20
 800c706:	46bd      	mov	sp, r7
 800c708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c70c:	4770      	bx	lr
 800c70e:	bf00      	nop
 800c710:	200069c8 	.word	0x200069c8
 800c714:	20006a84 	.word	0x20006a84

0800c718 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b086      	sub	sp, #24
 800c71c:	af00      	add	r7, sp, #0
 800c71e:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 800c720:	687b      	ldr	r3, [r7, #4]
 800c722:	2b00      	cmp	r3, #0
 800c724:	d10a      	bne.n	800c73c <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c72a:	f383 8811 	msr	BASEPRI, r3
 800c72e:	f3bf 8f6f 	isb	sy
 800c732:	f3bf 8f4f 	dsb	sy
 800c736:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800c738:	bf00      	nop
 800c73a:	e7fe      	b.n	800c73a <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 800c73c:	2320      	movs	r3, #32
 800c73e:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 800c740:	68bb      	ldr	r3, [r7, #8]
 800c742:	2b20      	cmp	r3, #32
 800c744:	d00a      	beq.n	800c75c <xEventGroupCreateStatic+0x44>
	__asm volatile
 800c746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c74a:	f383 8811 	msr	BASEPRI, r3
 800c74e:	f3bf 8f6f 	isb	sy
 800c752:	f3bf 8f4f 	dsb	sy
 800c756:	60fb      	str	r3, [r7, #12]
}
 800c758:	bf00      	nop
 800c75a:	e7fe      	b.n	800c75a <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 800c760:	697b      	ldr	r3, [r7, #20]
 800c762:	2b00      	cmp	r3, #0
 800c764:	d00a      	beq.n	800c77c <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800c766:	697b      	ldr	r3, [r7, #20]
 800c768:	2200      	movs	r2, #0
 800c76a:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c76c:	697b      	ldr	r3, [r7, #20]
 800c76e:	3304      	adds	r3, #4
 800c770:	4618      	mov	r0, r3
 800c772:	f000 f9bf 	bl	800caf4 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800c776:	697b      	ldr	r3, [r7, #20]
 800c778:	2201      	movs	r2, #1
 800c77a:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 800c77c:	697b      	ldr	r3, [r7, #20]
	}
 800c77e:	4618      	mov	r0, r3
 800c780:	3718      	adds	r7, #24
 800c782:	46bd      	mov	sp, r7
 800c784:	bd80      	pop	{r7, pc}

0800c786 <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800c786:	b580      	push	{r7, lr}
 800c788:	b082      	sub	sp, #8
 800c78a:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 800c78c:	2020      	movs	r0, #32
 800c78e:	f003 fa53 	bl	800fc38 <pvPortMalloc>
 800c792:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800c794:	687b      	ldr	r3, [r7, #4]
 800c796:	2b00      	cmp	r3, #0
 800c798:	d00a      	beq.n	800c7b0 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	2200      	movs	r2, #0
 800c79e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	3304      	adds	r3, #4
 800c7a4:	4618      	mov	r0, r3
 800c7a6:	f000 f9a5 	bl	800caf4 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	2200      	movs	r2, #0
 800c7ae:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 800c7b0:	687b      	ldr	r3, [r7, #4]
	}
 800c7b2:	4618      	mov	r0, r3
 800c7b4:	3708      	adds	r7, #8
 800c7b6:	46bd      	mov	sp, r7
 800c7b8:	bd80      	pop	{r7, pc}
	...

0800c7bc <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b090      	sub	sp, #64	; 0x40
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	60f8      	str	r0, [r7, #12]
 800c7c4:	60b9      	str	r1, [r7, #8]
 800c7c6:	607a      	str	r2, [r7, #4]
 800c7c8:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800c7ca:	68fb      	ldr	r3, [r7, #12]
 800c7cc:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 800c7ce:	2300      	movs	r3, #0
 800c7d0:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800c7d2:	2300      	movs	r3, #0
 800c7d4:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800c7d6:	68fb      	ldr	r3, [r7, #12]
 800c7d8:	2b00      	cmp	r3, #0
 800c7da:	d10a      	bne.n	800c7f2 <xEventGroupWaitBits+0x36>
	__asm volatile
 800c7dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7e0:	f383 8811 	msr	BASEPRI, r3
 800c7e4:	f3bf 8f6f 	isb	sy
 800c7e8:	f3bf 8f4f 	dsb	sy
 800c7ec:	623b      	str	r3, [r7, #32]
}
 800c7ee:	bf00      	nop
 800c7f0:	e7fe      	b.n	800c7f0 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c7f2:	68bb      	ldr	r3, [r7, #8]
 800c7f4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c7f8:	2b00      	cmp	r3, #0
 800c7fa:	d00a      	beq.n	800c812 <xEventGroupWaitBits+0x56>
	__asm volatile
 800c7fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c800:	f383 8811 	msr	BASEPRI, r3
 800c804:	f3bf 8f6f 	isb	sy
 800c808:	f3bf 8f4f 	dsb	sy
 800c80c:	61fb      	str	r3, [r7, #28]
}
 800c80e:	bf00      	nop
 800c810:	e7fe      	b.n	800c810 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 800c812:	68bb      	ldr	r3, [r7, #8]
 800c814:	2b00      	cmp	r3, #0
 800c816:	d10a      	bne.n	800c82e <xEventGroupWaitBits+0x72>
	__asm volatile
 800c818:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c81c:	f383 8811 	msr	BASEPRI, r3
 800c820:	f3bf 8f6f 	isb	sy
 800c824:	f3bf 8f4f 	dsb	sy
 800c828:	61bb      	str	r3, [r7, #24]
}
 800c82a:	bf00      	nop
 800c82c:	e7fe      	b.n	800c82c <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c82e:	f002 fa4d 	bl	800eccc <xTaskGetSchedulerState>
 800c832:	4603      	mov	r3, r0
 800c834:	2b00      	cmp	r3, #0
 800c836:	d102      	bne.n	800c83e <xEventGroupWaitBits+0x82>
 800c838:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d101      	bne.n	800c842 <xEventGroupWaitBits+0x86>
 800c83e:	2301      	movs	r3, #1
 800c840:	e000      	b.n	800c844 <xEventGroupWaitBits+0x88>
 800c842:	2300      	movs	r3, #0
 800c844:	2b00      	cmp	r3, #0
 800c846:	d10a      	bne.n	800c85e <xEventGroupWaitBits+0xa2>
	__asm volatile
 800c848:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c84c:	f383 8811 	msr	BASEPRI, r3
 800c850:	f3bf 8f6f 	isb	sy
 800c854:	f3bf 8f4f 	dsb	sy
 800c858:	617b      	str	r3, [r7, #20]
}
 800c85a:	bf00      	nop
 800c85c:	e7fe      	b.n	800c85c <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 800c85e:	f001 fd9b 	bl	800e398 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 800c862:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c864:	681b      	ldr	r3, [r3, #0]
 800c866:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800c868:	683a      	ldr	r2, [r7, #0]
 800c86a:	68b9      	ldr	r1, [r7, #8]
 800c86c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c86e:	f000 f90b 	bl	800ca88 <prvTestWaitCondition>
 800c872:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800c874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c876:	2b00      	cmp	r3, #0
 800c878:	d00e      	beq.n	800c898 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800c87a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c87c:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 800c87e:	2300      	movs	r3, #0
 800c880:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800c882:	687b      	ldr	r3, [r7, #4]
 800c884:	2b00      	cmp	r3, #0
 800c886:	d028      	beq.n	800c8da <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c88a:	681a      	ldr	r2, [r3, #0]
 800c88c:	68bb      	ldr	r3, [r7, #8]
 800c88e:	43db      	mvns	r3, r3
 800c890:	401a      	ands	r2, r3
 800c892:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c894:	601a      	str	r2, [r3, #0]
 800c896:	e020      	b.n	800c8da <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800c898:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d104      	bne.n	800c8a8 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 800c89e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8a0:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800c8a2:	2301      	movs	r3, #1
 800c8a4:	633b      	str	r3, [r7, #48]	; 0x30
 800c8a6:	e018      	b.n	800c8da <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800c8a8:	687b      	ldr	r3, [r7, #4]
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 800c8ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8b0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800c8b4:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800c8b6:	683b      	ldr	r3, [r7, #0]
 800c8b8:	2b00      	cmp	r3, #0
 800c8ba:	d003      	beq.n	800c8c4 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 800c8bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8be:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c8c2:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800c8c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c8c6:	1d18      	adds	r0, r3, #4
 800c8c8:	68ba      	ldr	r2, [r7, #8]
 800c8ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c8cc:	4313      	orrs	r3, r2
 800c8ce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800c8d0:	4619      	mov	r1, r3
 800c8d2:	f001 ff5f 	bl	800e794 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800c8d6:	2300      	movs	r3, #0
 800c8d8:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800c8da:	f001 fd6b 	bl	800e3b4 <xTaskResumeAll>
 800c8de:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 800c8e0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d031      	beq.n	800c94a <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800c8e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8e8:	2b00      	cmp	r3, #0
 800c8ea:	d107      	bne.n	800c8fc <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 800c8ec:	4b19      	ldr	r3, [pc, #100]	; (800c954 <xEventGroupWaitBits+0x198>)
 800c8ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c8f2:	601a      	str	r2, [r3, #0]
 800c8f4:	f3bf 8f4f 	dsb	sy
 800c8f8:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 800c8fc:	f002 fb5c 	bl	800efb8 <uxTaskResetEventItemValue>
 800c900:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800c902:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c904:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800c908:	2b00      	cmp	r3, #0
 800c90a:	d11a      	bne.n	800c942 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 800c90c:	f003 f872 	bl	800f9f4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 800c910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 800c916:	683a      	ldr	r2, [r7, #0]
 800c918:	68b9      	ldr	r1, [r7, #8]
 800c91a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800c91c:	f000 f8b4 	bl	800ca88 <prvTestWaitCondition>
 800c920:	4603      	mov	r3, r0
 800c922:	2b00      	cmp	r3, #0
 800c924:	d009      	beq.n	800c93a <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	2b00      	cmp	r3, #0
 800c92a:	d006      	beq.n	800c93a <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800c92c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c92e:	681a      	ldr	r2, [r3, #0]
 800c930:	68bb      	ldr	r3, [r7, #8]
 800c932:	43db      	mvns	r3, r3
 800c934:	401a      	ands	r2, r3
 800c936:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c938:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 800c93a:	2301      	movs	r3, #1
 800c93c:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 800c93e:	f003 f889 	bl	800fa54 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c942:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c944:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c948:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800c94a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c94c:	4618      	mov	r0, r3
 800c94e:	3740      	adds	r7, #64	; 0x40
 800c950:	46bd      	mov	sp, r7
 800c952:	bd80      	pop	{r7, pc}
 800c954:	e000ed04 	.word	0xe000ed04

0800c958 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800c958:	b580      	push	{r7, lr}
 800c95a:	b08e      	sub	sp, #56	; 0x38
 800c95c:	af00      	add	r7, sp, #0
 800c95e:	6078      	str	r0, [r7, #4]
 800c960:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 800c962:	2300      	movs	r3, #0
 800c964:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800c966:	687b      	ldr	r3, [r7, #4]
 800c968:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800c96a:	2300      	movs	r3, #0
 800c96c:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 800c96e:	687b      	ldr	r3, [r7, #4]
 800c970:	2b00      	cmp	r3, #0
 800c972:	d10a      	bne.n	800c98a <xEventGroupSetBits+0x32>
	__asm volatile
 800c974:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c978:	f383 8811 	msr	BASEPRI, r3
 800c97c:	f3bf 8f6f 	isb	sy
 800c980:	f3bf 8f4f 	dsb	sy
 800c984:	613b      	str	r3, [r7, #16]
}
 800c986:	bf00      	nop
 800c988:	e7fe      	b.n	800c988 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800c98a:	683b      	ldr	r3, [r7, #0]
 800c98c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c990:	2b00      	cmp	r3, #0
 800c992:	d00a      	beq.n	800c9aa <xEventGroupSetBits+0x52>
	__asm volatile
 800c994:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c998:	f383 8811 	msr	BASEPRI, r3
 800c99c:	f3bf 8f6f 	isb	sy
 800c9a0:	f3bf 8f4f 	dsb	sy
 800c9a4:	60fb      	str	r3, [r7, #12]
}
 800c9a6:	bf00      	nop
 800c9a8:	e7fe      	b.n	800c9a8 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800c9aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ac:	3304      	adds	r3, #4
 800c9ae:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c9b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9b2:	3308      	adds	r3, #8
 800c9b4:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800c9b6:	f001 fcef 	bl	800e398 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800c9ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c9bc:	68db      	ldr	r3, [r3, #12]
 800c9be:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 800c9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9c2:	681a      	ldr	r2, [r3, #0]
 800c9c4:	683b      	ldr	r3, [r7, #0]
 800c9c6:	431a      	orrs	r2, r3
 800c9c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9ca:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 800c9cc:	e03c      	b.n	800ca48 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 800c9ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d0:	685b      	ldr	r3, [r3, #4]
 800c9d2:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800c9d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9d6:	681b      	ldr	r3, [r3, #0]
 800c9d8:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800c9da:	2300      	movs	r3, #0
 800c9dc:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 800c9de:	69bb      	ldr	r3, [r7, #24]
 800c9e0:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800c9e4:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800c9e6:	69bb      	ldr	r3, [r7, #24]
 800c9e8:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800c9ec:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 800c9ee:	697b      	ldr	r3, [r7, #20]
 800c9f0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c9f4:	2b00      	cmp	r3, #0
 800c9f6:	d108      	bne.n	800ca0a <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 800c9f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c9fa:	681a      	ldr	r2, [r3, #0]
 800c9fc:	69bb      	ldr	r3, [r7, #24]
 800c9fe:	4013      	ands	r3, r2
 800ca00:	2b00      	cmp	r3, #0
 800ca02:	d00b      	beq.n	800ca1c <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800ca04:	2301      	movs	r3, #1
 800ca06:	62fb      	str	r3, [r7, #44]	; 0x2c
 800ca08:	e008      	b.n	800ca1c <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 800ca0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca0c:	681a      	ldr	r2, [r3, #0]
 800ca0e:	69bb      	ldr	r3, [r7, #24]
 800ca10:	4013      	ands	r3, r2
 800ca12:	69ba      	ldr	r2, [r7, #24]
 800ca14:	429a      	cmp	r2, r3
 800ca16:	d101      	bne.n	800ca1c <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 800ca18:	2301      	movs	r3, #1
 800ca1a:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 800ca1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d010      	beq.n	800ca44 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 800ca22:	697b      	ldr	r3, [r7, #20]
 800ca24:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800ca28:	2b00      	cmp	r3, #0
 800ca2a:	d003      	beq.n	800ca34 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 800ca2c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ca2e:	69bb      	ldr	r3, [r7, #24]
 800ca30:	4313      	orrs	r3, r2
 800ca32:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 800ca34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca36:	681b      	ldr	r3, [r3, #0]
 800ca38:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ca3c:	4619      	mov	r1, r3
 800ca3e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800ca40:	f001 ff74 	bl	800e92c <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 800ca44:	69fb      	ldr	r3, [r7, #28]
 800ca46:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800ca48:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca4a:	6a3b      	ldr	r3, [r7, #32]
 800ca4c:	429a      	cmp	r2, r3
 800ca4e:	d1be      	bne.n	800c9ce <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 800ca50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca52:	681a      	ldr	r2, [r3, #0]
 800ca54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca56:	43db      	mvns	r3, r3
 800ca58:	401a      	ands	r2, r3
 800ca5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca5c:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 800ca5e:	f001 fca9 	bl	800e3b4 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 800ca62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ca64:	681b      	ldr	r3, [r3, #0]
}
 800ca66:	4618      	mov	r0, r3
 800ca68:	3738      	adds	r7, #56	; 0x38
 800ca6a:	46bd      	mov	sp, r7
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b082      	sub	sp, #8
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
 800ca76:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800ca78:	6839      	ldr	r1, [r7, #0]
 800ca7a:	6878      	ldr	r0, [r7, #4]
 800ca7c:	f7ff ff6c 	bl	800c958 <xEventGroupSetBits>
}
 800ca80:	bf00      	nop
 800ca82:	3708      	adds	r7, #8
 800ca84:	46bd      	mov	sp, r7
 800ca86:	bd80      	pop	{r7, pc}

0800ca88 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800ca88:	b480      	push	{r7}
 800ca8a:	b087      	sub	sp, #28
 800ca8c:	af00      	add	r7, sp, #0
 800ca8e:	60f8      	str	r0, [r7, #12]
 800ca90:	60b9      	str	r1, [r7, #8]
 800ca92:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800ca94:	2300      	movs	r3, #0
 800ca96:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800ca98:	687b      	ldr	r3, [r7, #4]
 800ca9a:	2b00      	cmp	r3, #0
 800ca9c:	d107      	bne.n	800caae <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 800ca9e:	68fa      	ldr	r2, [r7, #12]
 800caa0:	68bb      	ldr	r3, [r7, #8]
 800caa2:	4013      	ands	r3, r2
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d00a      	beq.n	800cabe <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800caa8:	2301      	movs	r3, #1
 800caaa:	617b      	str	r3, [r7, #20]
 800caac:	e007      	b.n	800cabe <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 800caae:	68fa      	ldr	r2, [r7, #12]
 800cab0:	68bb      	ldr	r3, [r7, #8]
 800cab2:	4013      	ands	r3, r2
 800cab4:	68ba      	ldr	r2, [r7, #8]
 800cab6:	429a      	cmp	r2, r3
 800cab8:	d101      	bne.n	800cabe <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800caba:	2301      	movs	r3, #1
 800cabc:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 800cabe:	697b      	ldr	r3, [r7, #20]
}
 800cac0:	4618      	mov	r0, r3
 800cac2:	371c      	adds	r7, #28
 800cac4:	46bd      	mov	sp, r7
 800cac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caca:	4770      	bx	lr

0800cacc <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800cacc:	b580      	push	{r7, lr}
 800cace:	b086      	sub	sp, #24
 800cad0:	af00      	add	r7, sp, #0
 800cad2:	60f8      	str	r0, [r7, #12]
 800cad4:	60b9      	str	r1, [r7, #8]
 800cad6:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800cad8:	687b      	ldr	r3, [r7, #4]
 800cada:	68ba      	ldr	r2, [r7, #8]
 800cadc:	68f9      	ldr	r1, [r7, #12]
 800cade:	4804      	ldr	r0, [pc, #16]	; (800caf0 <xEventGroupSetBitsFromISR+0x24>)
 800cae0:	f002 fe38 	bl	800f754 <xTimerPendFunctionCallFromISR>
 800cae4:	6178      	str	r0, [r7, #20]

		return xReturn;
 800cae6:	697b      	ldr	r3, [r7, #20]
	}
 800cae8:	4618      	mov	r0, r3
 800caea:	3718      	adds	r7, #24
 800caec:	46bd      	mov	sp, r7
 800caee:	bd80      	pop	{r7, pc}
 800caf0:	0800ca6f 	.word	0x0800ca6f

0800caf4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800caf4:	b480      	push	{r7}
 800caf6:	b083      	sub	sp, #12
 800caf8:	af00      	add	r7, sp, #0
 800cafa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cafc:	687b      	ldr	r3, [r7, #4]
 800cafe:	f103 0208 	add.w	r2, r3, #8
 800cb02:	687b      	ldr	r3, [r7, #4]
 800cb04:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800cb06:	687b      	ldr	r3, [r7, #4]
 800cb08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800cb0c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb0e:	687b      	ldr	r3, [r7, #4]
 800cb10:	f103 0208 	add.w	r2, r3, #8
 800cb14:	687b      	ldr	r3, [r7, #4]
 800cb16:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800cb18:	687b      	ldr	r3, [r7, #4]
 800cb1a:	f103 0208 	add.w	r2, r3, #8
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800cb22:	687b      	ldr	r3, [r7, #4]
 800cb24:	2200      	movs	r2, #0
 800cb26:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800cb28:	bf00      	nop
 800cb2a:	370c      	adds	r7, #12
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb32:	4770      	bx	lr

0800cb34 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800cb34:	b480      	push	{r7}
 800cb36:	b083      	sub	sp, #12
 800cb38:	af00      	add	r7, sp, #0
 800cb3a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2200      	movs	r2, #0
 800cb40:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800cb42:	bf00      	nop
 800cb44:	370c      	adds	r7, #12
 800cb46:	46bd      	mov	sp, r7
 800cb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4c:	4770      	bx	lr

0800cb4e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb4e:	b480      	push	{r7}
 800cb50:	b085      	sub	sp, #20
 800cb52:	af00      	add	r7, sp, #0
 800cb54:	6078      	str	r0, [r7, #4]
 800cb56:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	685b      	ldr	r3, [r3, #4]
 800cb5c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800cb5e:	683b      	ldr	r3, [r7, #0]
 800cb60:	68fa      	ldr	r2, [r7, #12]
 800cb62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800cb64:	68fb      	ldr	r3, [r7, #12]
 800cb66:	689a      	ldr	r2, [r3, #8]
 800cb68:	683b      	ldr	r3, [r7, #0]
 800cb6a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	689b      	ldr	r3, [r3, #8]
 800cb70:	683a      	ldr	r2, [r7, #0]
 800cb72:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	683a      	ldr	r2, [r7, #0]
 800cb78:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800cb7a:	683b      	ldr	r3, [r7, #0]
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cb80:	687b      	ldr	r3, [r7, #4]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	1c5a      	adds	r2, r3, #1
 800cb86:	687b      	ldr	r3, [r7, #4]
 800cb88:	601a      	str	r2, [r3, #0]
}
 800cb8a:	bf00      	nop
 800cb8c:	3714      	adds	r7, #20
 800cb8e:	46bd      	mov	sp, r7
 800cb90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb94:	4770      	bx	lr

0800cb96 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800cb96:	b480      	push	{r7}
 800cb98:	b085      	sub	sp, #20
 800cb9a:	af00      	add	r7, sp, #0
 800cb9c:	6078      	str	r0, [r7, #4]
 800cb9e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800cba0:	683b      	ldr	r3, [r7, #0]
 800cba2:	681b      	ldr	r3, [r3, #0]
 800cba4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800cba6:	68bb      	ldr	r3, [r7, #8]
 800cba8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800cbac:	d103      	bne.n	800cbb6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	691b      	ldr	r3, [r3, #16]
 800cbb2:	60fb      	str	r3, [r7, #12]
 800cbb4:	e00c      	b.n	800cbd0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	3308      	adds	r3, #8
 800cbba:	60fb      	str	r3, [r7, #12]
 800cbbc:	e002      	b.n	800cbc4 <vListInsert+0x2e>
 800cbbe:	68fb      	ldr	r3, [r7, #12]
 800cbc0:	685b      	ldr	r3, [r3, #4]
 800cbc2:	60fb      	str	r3, [r7, #12]
 800cbc4:	68fb      	ldr	r3, [r7, #12]
 800cbc6:	685b      	ldr	r3, [r3, #4]
 800cbc8:	681b      	ldr	r3, [r3, #0]
 800cbca:	68ba      	ldr	r2, [r7, #8]
 800cbcc:	429a      	cmp	r2, r3
 800cbce:	d2f6      	bcs.n	800cbbe <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	685a      	ldr	r2, [r3, #4]
 800cbd4:	683b      	ldr	r3, [r7, #0]
 800cbd6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800cbd8:	683b      	ldr	r3, [r7, #0]
 800cbda:	685b      	ldr	r3, [r3, #4]
 800cbdc:	683a      	ldr	r2, [r7, #0]
 800cbde:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800cbe0:	683b      	ldr	r3, [r7, #0]
 800cbe2:	68fa      	ldr	r2, [r7, #12]
 800cbe4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800cbe6:	68fb      	ldr	r3, [r7, #12]
 800cbe8:	683a      	ldr	r2, [r7, #0]
 800cbea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800cbec:	683b      	ldr	r3, [r7, #0]
 800cbee:	687a      	ldr	r2, [r7, #4]
 800cbf0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800cbf2:	687b      	ldr	r3, [r7, #4]
 800cbf4:	681b      	ldr	r3, [r3, #0]
 800cbf6:	1c5a      	adds	r2, r3, #1
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	601a      	str	r2, [r3, #0]
}
 800cbfc:	bf00      	nop
 800cbfe:	3714      	adds	r7, #20
 800cc00:	46bd      	mov	sp, r7
 800cc02:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc06:	4770      	bx	lr

0800cc08 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800cc08:	b480      	push	{r7}
 800cc0a:	b085      	sub	sp, #20
 800cc0c:	af00      	add	r7, sp, #0
 800cc0e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800cc10:	687b      	ldr	r3, [r7, #4]
 800cc12:	691b      	ldr	r3, [r3, #16]
 800cc14:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800cc16:	687b      	ldr	r3, [r7, #4]
 800cc18:	685b      	ldr	r3, [r3, #4]
 800cc1a:	687a      	ldr	r2, [r7, #4]
 800cc1c:	6892      	ldr	r2, [r2, #8]
 800cc1e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800cc20:	687b      	ldr	r3, [r7, #4]
 800cc22:	689b      	ldr	r3, [r3, #8]
 800cc24:	687a      	ldr	r2, [r7, #4]
 800cc26:	6852      	ldr	r2, [r2, #4]
 800cc28:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800cc2a:	68fb      	ldr	r3, [r7, #12]
 800cc2c:	685b      	ldr	r3, [r3, #4]
 800cc2e:	687a      	ldr	r2, [r7, #4]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d103      	bne.n	800cc3c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cc34:	687b      	ldr	r3, [r7, #4]
 800cc36:	689a      	ldr	r2, [r3, #8]
 800cc38:	68fb      	ldr	r3, [r7, #12]
 800cc3a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cc3c:	687b      	ldr	r3, [r7, #4]
 800cc3e:	2200      	movs	r2, #0
 800cc40:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800cc42:	68fb      	ldr	r3, [r7, #12]
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	1e5a      	subs	r2, r3, #1
 800cc48:	68fb      	ldr	r3, [r7, #12]
 800cc4a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800cc4c:	68fb      	ldr	r3, [r7, #12]
 800cc4e:	681b      	ldr	r3, [r3, #0]
}
 800cc50:	4618      	mov	r0, r3
 800cc52:	3714      	adds	r7, #20
 800cc54:	46bd      	mov	sp, r7
 800cc56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc5a:	4770      	bx	lr

0800cc5c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800cc5c:	b580      	push	{r7, lr}
 800cc5e:	b084      	sub	sp, #16
 800cc60:	af00      	add	r7, sp, #0
 800cc62:	6078      	str	r0, [r7, #4]
 800cc64:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2b00      	cmp	r3, #0
 800cc6e:	d10a      	bne.n	800cc86 <xQueueGenericReset+0x2a>
	__asm volatile
 800cc70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc74:	f383 8811 	msr	BASEPRI, r3
 800cc78:	f3bf 8f6f 	isb	sy
 800cc7c:	f3bf 8f4f 	dsb	sy
 800cc80:	60bb      	str	r3, [r7, #8]
}
 800cc82:	bf00      	nop
 800cc84:	e7fe      	b.n	800cc84 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800cc86:	f002 feb5 	bl	800f9f4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	681a      	ldr	r2, [r3, #0]
 800cc8e:	68fb      	ldr	r3, [r7, #12]
 800cc90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800cc92:	68f9      	ldr	r1, [r7, #12]
 800cc94:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800cc96:	fb01 f303 	mul.w	r3, r1, r3
 800cc9a:	441a      	add	r2, r3
 800cc9c:	68fb      	ldr	r3, [r7, #12]
 800cc9e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cca0:	68fb      	ldr	r3, [r7, #12]
 800cca2:	2200      	movs	r2, #0
 800cca4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cca6:	68fb      	ldr	r3, [r7, #12]
 800cca8:	681a      	ldr	r2, [r3, #0]
 800ccaa:	68fb      	ldr	r3, [r7, #12]
 800ccac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ccae:	68fb      	ldr	r3, [r7, #12]
 800ccb0:	681a      	ldr	r2, [r3, #0]
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ccb6:	3b01      	subs	r3, #1
 800ccb8:	68f9      	ldr	r1, [r7, #12]
 800ccba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800ccbc:	fb01 f303 	mul.w	r3, r1, r3
 800ccc0:	441a      	add	r2, r3
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	22ff      	movs	r2, #255	; 0xff
 800ccca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800ccce:	68fb      	ldr	r3, [r7, #12]
 800ccd0:	22ff      	movs	r2, #255	; 0xff
 800ccd2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800ccd6:	683b      	ldr	r3, [r7, #0]
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d114      	bne.n	800cd06 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ccdc:	68fb      	ldr	r3, [r7, #12]
 800ccde:	691b      	ldr	r3, [r3, #16]
 800cce0:	2b00      	cmp	r3, #0
 800cce2:	d01a      	beq.n	800cd1a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cce4:	68fb      	ldr	r3, [r7, #12]
 800cce6:	3310      	adds	r3, #16
 800cce8:	4618      	mov	r0, r3
 800ccea:	f001 fdbb 	bl	800e864 <xTaskRemoveFromEventList>
 800ccee:	4603      	mov	r3, r0
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d012      	beq.n	800cd1a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800ccf4:	4b0c      	ldr	r3, [pc, #48]	; (800cd28 <xQueueGenericReset+0xcc>)
 800ccf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ccfa:	601a      	str	r2, [r3, #0]
 800ccfc:	f3bf 8f4f 	dsb	sy
 800cd00:	f3bf 8f6f 	isb	sy
 800cd04:	e009      	b.n	800cd1a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800cd06:	68fb      	ldr	r3, [r7, #12]
 800cd08:	3310      	adds	r3, #16
 800cd0a:	4618      	mov	r0, r3
 800cd0c:	f7ff fef2 	bl	800caf4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800cd10:	68fb      	ldr	r3, [r7, #12]
 800cd12:	3324      	adds	r3, #36	; 0x24
 800cd14:	4618      	mov	r0, r3
 800cd16:	f7ff feed 	bl	800caf4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800cd1a:	f002 fe9b 	bl	800fa54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800cd1e:	2301      	movs	r3, #1
}
 800cd20:	4618      	mov	r0, r3
 800cd22:	3710      	adds	r7, #16
 800cd24:	46bd      	mov	sp, r7
 800cd26:	bd80      	pop	{r7, pc}
 800cd28:	e000ed04 	.word	0xe000ed04

0800cd2c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b08e      	sub	sp, #56	; 0x38
 800cd30:	af02      	add	r7, sp, #8
 800cd32:	60f8      	str	r0, [r7, #12]
 800cd34:	60b9      	str	r1, [r7, #8]
 800cd36:	607a      	str	r2, [r7, #4]
 800cd38:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd3a:	68fb      	ldr	r3, [r7, #12]
 800cd3c:	2b00      	cmp	r3, #0
 800cd3e:	d10a      	bne.n	800cd56 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800cd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd44:	f383 8811 	msr	BASEPRI, r3
 800cd48:	f3bf 8f6f 	isb	sy
 800cd4c:	f3bf 8f4f 	dsb	sy
 800cd50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800cd52:	bf00      	nop
 800cd54:	e7fe      	b.n	800cd54 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800cd56:	683b      	ldr	r3, [r7, #0]
 800cd58:	2b00      	cmp	r3, #0
 800cd5a:	d10a      	bne.n	800cd72 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800cd5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd60:	f383 8811 	msr	BASEPRI, r3
 800cd64:	f3bf 8f6f 	isb	sy
 800cd68:	f3bf 8f4f 	dsb	sy
 800cd6c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800cd6e:	bf00      	nop
 800cd70:	e7fe      	b.n	800cd70 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d002      	beq.n	800cd7e <xQueueGenericCreateStatic+0x52>
 800cd78:	68bb      	ldr	r3, [r7, #8]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	d001      	beq.n	800cd82 <xQueueGenericCreateStatic+0x56>
 800cd7e:	2301      	movs	r3, #1
 800cd80:	e000      	b.n	800cd84 <xQueueGenericCreateStatic+0x58>
 800cd82:	2300      	movs	r3, #0
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	d10a      	bne.n	800cd9e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800cd88:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd8c:	f383 8811 	msr	BASEPRI, r3
 800cd90:	f3bf 8f6f 	isb	sy
 800cd94:	f3bf 8f4f 	dsb	sy
 800cd98:	623b      	str	r3, [r7, #32]
}
 800cd9a:	bf00      	nop
 800cd9c:	e7fe      	b.n	800cd9c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd9e:	687b      	ldr	r3, [r7, #4]
 800cda0:	2b00      	cmp	r3, #0
 800cda2:	d102      	bne.n	800cdaa <xQueueGenericCreateStatic+0x7e>
 800cda4:	68bb      	ldr	r3, [r7, #8]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d101      	bne.n	800cdae <xQueueGenericCreateStatic+0x82>
 800cdaa:	2301      	movs	r3, #1
 800cdac:	e000      	b.n	800cdb0 <xQueueGenericCreateStatic+0x84>
 800cdae:	2300      	movs	r3, #0
 800cdb0:	2b00      	cmp	r3, #0
 800cdb2:	d10a      	bne.n	800cdca <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800cdb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdb8:	f383 8811 	msr	BASEPRI, r3
 800cdbc:	f3bf 8f6f 	isb	sy
 800cdc0:	f3bf 8f4f 	dsb	sy
 800cdc4:	61fb      	str	r3, [r7, #28]
}
 800cdc6:	bf00      	nop
 800cdc8:	e7fe      	b.n	800cdc8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cdca:	2350      	movs	r3, #80	; 0x50
 800cdcc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cdce:	697b      	ldr	r3, [r7, #20]
 800cdd0:	2b50      	cmp	r3, #80	; 0x50
 800cdd2:	d00a      	beq.n	800cdea <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800cdd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdd8:	f383 8811 	msr	BASEPRI, r3
 800cddc:	f3bf 8f6f 	isb	sy
 800cde0:	f3bf 8f4f 	dsb	sy
 800cde4:	61bb      	str	r3, [r7, #24]
}
 800cde6:	bf00      	nop
 800cde8:	e7fe      	b.n	800cde8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cdea:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800cdec:	683b      	ldr	r3, [r7, #0]
 800cdee:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800cdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	d00d      	beq.n	800ce12 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cdf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cdf8:	2201      	movs	r2, #1
 800cdfa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800cdfe:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ce02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ce04:	9300      	str	r3, [sp, #0]
 800ce06:	4613      	mov	r3, r2
 800ce08:	687a      	ldr	r2, [r7, #4]
 800ce0a:	68b9      	ldr	r1, [r7, #8]
 800ce0c:	68f8      	ldr	r0, [r7, #12]
 800ce0e:	f000 f83f 	bl	800ce90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ce14:	4618      	mov	r0, r3
 800ce16:	3730      	adds	r7, #48	; 0x30
 800ce18:	46bd      	mov	sp, r7
 800ce1a:	bd80      	pop	{r7, pc}

0800ce1c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ce1c:	b580      	push	{r7, lr}
 800ce1e:	b08a      	sub	sp, #40	; 0x28
 800ce20:	af02      	add	r7, sp, #8
 800ce22:	60f8      	str	r0, [r7, #12]
 800ce24:	60b9      	str	r1, [r7, #8]
 800ce26:	4613      	mov	r3, r2
 800ce28:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ce2a:	68fb      	ldr	r3, [r7, #12]
 800ce2c:	2b00      	cmp	r3, #0
 800ce2e:	d10a      	bne.n	800ce46 <xQueueGenericCreate+0x2a>
	__asm volatile
 800ce30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce34:	f383 8811 	msr	BASEPRI, r3
 800ce38:	f3bf 8f6f 	isb	sy
 800ce3c:	f3bf 8f4f 	dsb	sy
 800ce40:	613b      	str	r3, [r7, #16]
}
 800ce42:	bf00      	nop
 800ce44:	e7fe      	b.n	800ce44 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ce46:	68fb      	ldr	r3, [r7, #12]
 800ce48:	68ba      	ldr	r2, [r7, #8]
 800ce4a:	fb02 f303 	mul.w	r3, r2, r3
 800ce4e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ce50:	69fb      	ldr	r3, [r7, #28]
 800ce52:	3350      	adds	r3, #80	; 0x50
 800ce54:	4618      	mov	r0, r3
 800ce56:	f002 feef 	bl	800fc38 <pvPortMalloc>
 800ce5a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ce5c:	69bb      	ldr	r3, [r7, #24]
 800ce5e:	2b00      	cmp	r3, #0
 800ce60:	d011      	beq.n	800ce86 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ce62:	69bb      	ldr	r3, [r7, #24]
 800ce64:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ce66:	697b      	ldr	r3, [r7, #20]
 800ce68:	3350      	adds	r3, #80	; 0x50
 800ce6a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ce6c:	69bb      	ldr	r3, [r7, #24]
 800ce6e:	2200      	movs	r2, #0
 800ce70:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ce74:	79fa      	ldrb	r2, [r7, #7]
 800ce76:	69bb      	ldr	r3, [r7, #24]
 800ce78:	9300      	str	r3, [sp, #0]
 800ce7a:	4613      	mov	r3, r2
 800ce7c:	697a      	ldr	r2, [r7, #20]
 800ce7e:	68b9      	ldr	r1, [r7, #8]
 800ce80:	68f8      	ldr	r0, [r7, #12]
 800ce82:	f000 f805 	bl	800ce90 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ce86:	69bb      	ldr	r3, [r7, #24]
	}
 800ce88:	4618      	mov	r0, r3
 800ce8a:	3720      	adds	r7, #32
 800ce8c:	46bd      	mov	sp, r7
 800ce8e:	bd80      	pop	{r7, pc}

0800ce90 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
 800ce96:	60f8      	str	r0, [r7, #12]
 800ce98:	60b9      	str	r1, [r7, #8]
 800ce9a:	607a      	str	r2, [r7, #4]
 800ce9c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800ce9e:	68bb      	ldr	r3, [r7, #8]
 800cea0:	2b00      	cmp	r3, #0
 800cea2:	d103      	bne.n	800ceac <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cea4:	69bb      	ldr	r3, [r7, #24]
 800cea6:	69ba      	ldr	r2, [r7, #24]
 800cea8:	601a      	str	r2, [r3, #0]
 800ceaa:	e002      	b.n	800ceb2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800ceac:	69bb      	ldr	r3, [r7, #24]
 800ceae:	687a      	ldr	r2, [r7, #4]
 800ceb0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800ceb2:	69bb      	ldr	r3, [r7, #24]
 800ceb4:	68fa      	ldr	r2, [r7, #12]
 800ceb6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800ceb8:	69bb      	ldr	r3, [r7, #24]
 800ceba:	68ba      	ldr	r2, [r7, #8]
 800cebc:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cebe:	2101      	movs	r1, #1
 800cec0:	69b8      	ldr	r0, [r7, #24]
 800cec2:	f7ff fecb 	bl	800cc5c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800cec6:	69bb      	ldr	r3, [r7, #24]
 800cec8:	78fa      	ldrb	r2, [r7, #3]
 800ceca:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800cece:	bf00      	nop
 800ced0:	3710      	adds	r7, #16
 800ced2:	46bd      	mov	sp, r7
 800ced4:	bd80      	pop	{r7, pc}

0800ced6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800ced6:	b580      	push	{r7, lr}
 800ced8:	b082      	sub	sp, #8
 800ceda:	af00      	add	r7, sp, #0
 800cedc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	2b00      	cmp	r3, #0
 800cee2:	d00e      	beq.n	800cf02 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cee4:	687b      	ldr	r3, [r7, #4]
 800cee6:	2200      	movs	r2, #0
 800cee8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800ceea:	687b      	ldr	r3, [r7, #4]
 800ceec:	2200      	movs	r2, #0
 800ceee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2200      	movs	r2, #0
 800cef4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cef6:	2300      	movs	r3, #0
 800cef8:	2200      	movs	r2, #0
 800cefa:	2100      	movs	r1, #0
 800cefc:	6878      	ldr	r0, [r7, #4]
 800cefe:	f000 f90b 	bl	800d118 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800cf02:	bf00      	nop
 800cf04:	3708      	adds	r7, #8
 800cf06:	46bd      	mov	sp, r7
 800cf08:	bd80      	pop	{r7, pc}

0800cf0a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800cf0a:	b580      	push	{r7, lr}
 800cf0c:	b086      	sub	sp, #24
 800cf0e:	af00      	add	r7, sp, #0
 800cf10:	4603      	mov	r3, r0
 800cf12:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf14:	2301      	movs	r3, #1
 800cf16:	617b      	str	r3, [r7, #20]
 800cf18:	2300      	movs	r3, #0
 800cf1a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800cf1c:	79fb      	ldrb	r3, [r7, #7]
 800cf1e:	461a      	mov	r2, r3
 800cf20:	6939      	ldr	r1, [r7, #16]
 800cf22:	6978      	ldr	r0, [r7, #20]
 800cf24:	f7ff ff7a 	bl	800ce1c <xQueueGenericCreate>
 800cf28:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf2a:	68f8      	ldr	r0, [r7, #12]
 800cf2c:	f7ff ffd3 	bl	800ced6 <prvInitialiseMutex>

		return xNewQueue;
 800cf30:	68fb      	ldr	r3, [r7, #12]
	}
 800cf32:	4618      	mov	r0, r3
 800cf34:	3718      	adds	r7, #24
 800cf36:	46bd      	mov	sp, r7
 800cf38:	bd80      	pop	{r7, pc}

0800cf3a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800cf3a:	b580      	push	{r7, lr}
 800cf3c:	b088      	sub	sp, #32
 800cf3e:	af02      	add	r7, sp, #8
 800cf40:	4603      	mov	r3, r0
 800cf42:	6039      	str	r1, [r7, #0]
 800cf44:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800cf46:	2301      	movs	r3, #1
 800cf48:	617b      	str	r3, [r7, #20]
 800cf4a:	2300      	movs	r3, #0
 800cf4c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cf4e:	79fb      	ldrb	r3, [r7, #7]
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	683b      	ldr	r3, [r7, #0]
 800cf54:	2200      	movs	r2, #0
 800cf56:	6939      	ldr	r1, [r7, #16]
 800cf58:	6978      	ldr	r0, [r7, #20]
 800cf5a:	f7ff fee7 	bl	800cd2c <xQueueGenericCreateStatic>
 800cf5e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800cf60:	68f8      	ldr	r0, [r7, #12]
 800cf62:	f7ff ffb8 	bl	800ced6 <prvInitialiseMutex>

		return xNewQueue;
 800cf66:	68fb      	ldr	r3, [r7, #12]
	}
 800cf68:	4618      	mov	r0, r3
 800cf6a:	3718      	adds	r7, #24
 800cf6c:	46bd      	mov	sp, r7
 800cf6e:	bd80      	pop	{r7, pc}

0800cf70 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800cf70:	b590      	push	{r4, r7, lr}
 800cf72:	b087      	sub	sp, #28
 800cf74:	af00      	add	r7, sp, #0
 800cf76:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cf7c:	693b      	ldr	r3, [r7, #16]
 800cf7e:	2b00      	cmp	r3, #0
 800cf80:	d10a      	bne.n	800cf98 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800cf82:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf86:	f383 8811 	msr	BASEPRI, r3
 800cf8a:	f3bf 8f6f 	isb	sy
 800cf8e:	f3bf 8f4f 	dsb	sy
 800cf92:	60fb      	str	r3, [r7, #12]
}
 800cf94:	bf00      	nop
 800cf96:	e7fe      	b.n	800cf96 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cf98:	693b      	ldr	r3, [r7, #16]
 800cf9a:	689c      	ldr	r4, [r3, #8]
 800cf9c:	f001 fe86 	bl	800ecac <xTaskGetCurrentTaskHandle>
 800cfa0:	4603      	mov	r3, r0
 800cfa2:	429c      	cmp	r4, r3
 800cfa4:	d111      	bne.n	800cfca <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cfa6:	693b      	ldr	r3, [r7, #16]
 800cfa8:	68db      	ldr	r3, [r3, #12]
 800cfaa:	1e5a      	subs	r2, r3, #1
 800cfac:	693b      	ldr	r3, [r7, #16]
 800cfae:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800cfb0:	693b      	ldr	r3, [r7, #16]
 800cfb2:	68db      	ldr	r3, [r3, #12]
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d105      	bne.n	800cfc4 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800cfb8:	2300      	movs	r3, #0
 800cfba:	2200      	movs	r2, #0
 800cfbc:	2100      	movs	r1, #0
 800cfbe:	6938      	ldr	r0, [r7, #16]
 800cfc0:	f000 f8aa 	bl	800d118 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800cfc4:	2301      	movs	r3, #1
 800cfc6:	617b      	str	r3, [r7, #20]
 800cfc8:	e001      	b.n	800cfce <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800cfca:	2300      	movs	r3, #0
 800cfcc:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800cfce:	697b      	ldr	r3, [r7, #20]
	}
 800cfd0:	4618      	mov	r0, r3
 800cfd2:	371c      	adds	r7, #28
 800cfd4:	46bd      	mov	sp, r7
 800cfd6:	bd90      	pop	{r4, r7, pc}

0800cfd8 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800cfd8:	b590      	push	{r4, r7, lr}
 800cfda:	b087      	sub	sp, #28
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
 800cfe0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800cfe2:	687b      	ldr	r3, [r7, #4]
 800cfe4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800cfe6:	693b      	ldr	r3, [r7, #16]
 800cfe8:	2b00      	cmp	r3, #0
 800cfea:	d10a      	bne.n	800d002 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800cfec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cff0:	f383 8811 	msr	BASEPRI, r3
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	f3bf 8f4f 	dsb	sy
 800cffc:	60fb      	str	r3, [r7, #12]
}
 800cffe:	bf00      	nop
 800d000:	e7fe      	b.n	800d000 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d002:	693b      	ldr	r3, [r7, #16]
 800d004:	689c      	ldr	r4, [r3, #8]
 800d006:	f001 fe51 	bl	800ecac <xTaskGetCurrentTaskHandle>
 800d00a:	4603      	mov	r3, r0
 800d00c:	429c      	cmp	r4, r3
 800d00e:	d107      	bne.n	800d020 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d010:	693b      	ldr	r3, [r7, #16]
 800d012:	68db      	ldr	r3, [r3, #12]
 800d014:	1c5a      	adds	r2, r3, #1
 800d016:	693b      	ldr	r3, [r7, #16]
 800d018:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800d01a:	2301      	movs	r3, #1
 800d01c:	617b      	str	r3, [r7, #20]
 800d01e:	e00c      	b.n	800d03a <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d020:	6839      	ldr	r1, [r7, #0]
 800d022:	6938      	ldr	r0, [r7, #16]
 800d024:	f000 fb7e 	bl	800d724 <xQueueSemaphoreTake>
 800d028:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	2b00      	cmp	r3, #0
 800d02e:	d004      	beq.n	800d03a <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d030:	693b      	ldr	r3, [r7, #16]
 800d032:	68db      	ldr	r3, [r3, #12]
 800d034:	1c5a      	adds	r2, r3, #1
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800d03a:	697b      	ldr	r3, [r7, #20]
	}
 800d03c:	4618      	mov	r0, r3
 800d03e:	371c      	adds	r7, #28
 800d040:	46bd      	mov	sp, r7
 800d042:	bd90      	pop	{r4, r7, pc}

0800d044 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800d044:	b580      	push	{r7, lr}
 800d046:	b08a      	sub	sp, #40	; 0x28
 800d048:	af02      	add	r7, sp, #8
 800d04a:	60f8      	str	r0, [r7, #12]
 800d04c:	60b9      	str	r1, [r7, #8]
 800d04e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d050:	68fb      	ldr	r3, [r7, #12]
 800d052:	2b00      	cmp	r3, #0
 800d054:	d10a      	bne.n	800d06c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
 800d066:	61bb      	str	r3, [r7, #24]
}
 800d068:	bf00      	nop
 800d06a:	e7fe      	b.n	800d06a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d06c:	68ba      	ldr	r2, [r7, #8]
 800d06e:	68fb      	ldr	r3, [r7, #12]
 800d070:	429a      	cmp	r2, r3
 800d072:	d90a      	bls.n	800d08a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800d074:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d078:	f383 8811 	msr	BASEPRI, r3
 800d07c:	f3bf 8f6f 	isb	sy
 800d080:	f3bf 8f4f 	dsb	sy
 800d084:	617b      	str	r3, [r7, #20]
}
 800d086:	bf00      	nop
 800d088:	e7fe      	b.n	800d088 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d08a:	2302      	movs	r3, #2
 800d08c:	9300      	str	r3, [sp, #0]
 800d08e:	687b      	ldr	r3, [r7, #4]
 800d090:	2200      	movs	r2, #0
 800d092:	2100      	movs	r1, #0
 800d094:	68f8      	ldr	r0, [r7, #12]
 800d096:	f7ff fe49 	bl	800cd2c <xQueueGenericCreateStatic>
 800d09a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800d09c:	69fb      	ldr	r3, [r7, #28]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d002      	beq.n	800d0a8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d0a2:	69fb      	ldr	r3, [r7, #28]
 800d0a4:	68ba      	ldr	r2, [r7, #8]
 800d0a6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d0a8:	69fb      	ldr	r3, [r7, #28]
	}
 800d0aa:	4618      	mov	r0, r3
 800d0ac:	3720      	adds	r7, #32
 800d0ae:	46bd      	mov	sp, r7
 800d0b0:	bd80      	pop	{r7, pc}

0800d0b2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800d0b2:	b580      	push	{r7, lr}
 800d0b4:	b086      	sub	sp, #24
 800d0b6:	af00      	add	r7, sp, #0
 800d0b8:	6078      	str	r0, [r7, #4]
 800d0ba:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2b00      	cmp	r3, #0
 800d0c0:	d10a      	bne.n	800d0d8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800d0c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0c6:	f383 8811 	msr	BASEPRI, r3
 800d0ca:	f3bf 8f6f 	isb	sy
 800d0ce:	f3bf 8f4f 	dsb	sy
 800d0d2:	613b      	str	r3, [r7, #16]
}
 800d0d4:	bf00      	nop
 800d0d6:	e7fe      	b.n	800d0d6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d0d8:	683a      	ldr	r2, [r7, #0]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	429a      	cmp	r2, r3
 800d0de:	d90a      	bls.n	800d0f6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800d0e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d0e4:	f383 8811 	msr	BASEPRI, r3
 800d0e8:	f3bf 8f6f 	isb	sy
 800d0ec:	f3bf 8f4f 	dsb	sy
 800d0f0:	60fb      	str	r3, [r7, #12]
}
 800d0f2:	bf00      	nop
 800d0f4:	e7fe      	b.n	800d0f4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d0f6:	2202      	movs	r2, #2
 800d0f8:	2100      	movs	r1, #0
 800d0fa:	6878      	ldr	r0, [r7, #4]
 800d0fc:	f7ff fe8e 	bl	800ce1c <xQueueGenericCreate>
 800d100:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800d102:	697b      	ldr	r3, [r7, #20]
 800d104:	2b00      	cmp	r3, #0
 800d106:	d002      	beq.n	800d10e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	683a      	ldr	r2, [r7, #0]
 800d10c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800d10e:	697b      	ldr	r3, [r7, #20]
	}
 800d110:	4618      	mov	r0, r3
 800d112:	3718      	adds	r7, #24
 800d114:	46bd      	mov	sp, r7
 800d116:	bd80      	pop	{r7, pc}

0800d118 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b08e      	sub	sp, #56	; 0x38
 800d11c:	af00      	add	r7, sp, #0
 800d11e:	60f8      	str	r0, [r7, #12]
 800d120:	60b9      	str	r1, [r7, #8]
 800d122:	607a      	str	r2, [r7, #4]
 800d124:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d126:	2300      	movs	r3, #0
 800d128:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d12e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d130:	2b00      	cmp	r3, #0
 800d132:	d10a      	bne.n	800d14a <xQueueGenericSend+0x32>
	__asm volatile
 800d134:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d138:	f383 8811 	msr	BASEPRI, r3
 800d13c:	f3bf 8f6f 	isb	sy
 800d140:	f3bf 8f4f 	dsb	sy
 800d144:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d146:	bf00      	nop
 800d148:	e7fe      	b.n	800d148 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d14a:	68bb      	ldr	r3, [r7, #8]
 800d14c:	2b00      	cmp	r3, #0
 800d14e:	d103      	bne.n	800d158 <xQueueGenericSend+0x40>
 800d150:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d152:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d154:	2b00      	cmp	r3, #0
 800d156:	d101      	bne.n	800d15c <xQueueGenericSend+0x44>
 800d158:	2301      	movs	r3, #1
 800d15a:	e000      	b.n	800d15e <xQueueGenericSend+0x46>
 800d15c:	2300      	movs	r3, #0
 800d15e:	2b00      	cmp	r3, #0
 800d160:	d10a      	bne.n	800d178 <xQueueGenericSend+0x60>
	__asm volatile
 800d162:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d166:	f383 8811 	msr	BASEPRI, r3
 800d16a:	f3bf 8f6f 	isb	sy
 800d16e:	f3bf 8f4f 	dsb	sy
 800d172:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d174:	bf00      	nop
 800d176:	e7fe      	b.n	800d176 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d178:	683b      	ldr	r3, [r7, #0]
 800d17a:	2b02      	cmp	r3, #2
 800d17c:	d103      	bne.n	800d186 <xQueueGenericSend+0x6e>
 800d17e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d180:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d182:	2b01      	cmp	r3, #1
 800d184:	d101      	bne.n	800d18a <xQueueGenericSend+0x72>
 800d186:	2301      	movs	r3, #1
 800d188:	e000      	b.n	800d18c <xQueueGenericSend+0x74>
 800d18a:	2300      	movs	r3, #0
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	d10a      	bne.n	800d1a6 <xQueueGenericSend+0x8e>
	__asm volatile
 800d190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d194:	f383 8811 	msr	BASEPRI, r3
 800d198:	f3bf 8f6f 	isb	sy
 800d19c:	f3bf 8f4f 	dsb	sy
 800d1a0:	623b      	str	r3, [r7, #32]
}
 800d1a2:	bf00      	nop
 800d1a4:	e7fe      	b.n	800d1a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1a6:	f001 fd91 	bl	800eccc <xTaskGetSchedulerState>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	2b00      	cmp	r3, #0
 800d1ae:	d102      	bne.n	800d1b6 <xQueueGenericSend+0x9e>
 800d1b0:	687b      	ldr	r3, [r7, #4]
 800d1b2:	2b00      	cmp	r3, #0
 800d1b4:	d101      	bne.n	800d1ba <xQueueGenericSend+0xa2>
 800d1b6:	2301      	movs	r3, #1
 800d1b8:	e000      	b.n	800d1bc <xQueueGenericSend+0xa4>
 800d1ba:	2300      	movs	r3, #0
 800d1bc:	2b00      	cmp	r3, #0
 800d1be:	d10a      	bne.n	800d1d6 <xQueueGenericSend+0xbe>
	__asm volatile
 800d1c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d1c4:	f383 8811 	msr	BASEPRI, r3
 800d1c8:	f3bf 8f6f 	isb	sy
 800d1cc:	f3bf 8f4f 	dsb	sy
 800d1d0:	61fb      	str	r3, [r7, #28]
}
 800d1d2:	bf00      	nop
 800d1d4:	e7fe      	b.n	800d1d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d1d6:	f002 fc0d 	bl	800f9f4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d1da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d1de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d1e2:	429a      	cmp	r2, r3
 800d1e4:	d302      	bcc.n	800d1ec <xQueueGenericSend+0xd4>
 800d1e6:	683b      	ldr	r3, [r7, #0]
 800d1e8:	2b02      	cmp	r3, #2
 800d1ea:	d129      	bne.n	800d240 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d1ec:	683a      	ldr	r2, [r7, #0]
 800d1ee:	68b9      	ldr	r1, [r7, #8]
 800d1f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d1f2:	f000 fc5e 	bl	800dab2 <prvCopyDataToQueue>
 800d1f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d1f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d1fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d1fc:	2b00      	cmp	r3, #0
 800d1fe:	d010      	beq.n	800d222 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d200:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d202:	3324      	adds	r3, #36	; 0x24
 800d204:	4618      	mov	r0, r3
 800d206:	f001 fb2d 	bl	800e864 <xTaskRemoveFromEventList>
 800d20a:	4603      	mov	r3, r0
 800d20c:	2b00      	cmp	r3, #0
 800d20e:	d013      	beq.n	800d238 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d210:	4b3f      	ldr	r3, [pc, #252]	; (800d310 <xQueueGenericSend+0x1f8>)
 800d212:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d216:	601a      	str	r2, [r3, #0]
 800d218:	f3bf 8f4f 	dsb	sy
 800d21c:	f3bf 8f6f 	isb	sy
 800d220:	e00a      	b.n	800d238 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d222:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d224:	2b00      	cmp	r3, #0
 800d226:	d007      	beq.n	800d238 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d228:	4b39      	ldr	r3, [pc, #228]	; (800d310 <xQueueGenericSend+0x1f8>)
 800d22a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d22e:	601a      	str	r2, [r3, #0]
 800d230:	f3bf 8f4f 	dsb	sy
 800d234:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d238:	f002 fc0c 	bl	800fa54 <vPortExitCritical>
				return pdPASS;
 800d23c:	2301      	movs	r3, #1
 800d23e:	e063      	b.n	800d308 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d240:	687b      	ldr	r3, [r7, #4]
 800d242:	2b00      	cmp	r3, #0
 800d244:	d103      	bne.n	800d24e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d246:	f002 fc05 	bl	800fa54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d24a:	2300      	movs	r3, #0
 800d24c:	e05c      	b.n	800d308 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d24e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d250:	2b00      	cmp	r3, #0
 800d252:	d106      	bne.n	800d262 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d254:	f107 0314 	add.w	r3, r7, #20
 800d258:	4618      	mov	r0, r3
 800d25a:	f001 fbc9 	bl	800e9f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d25e:	2301      	movs	r3, #1
 800d260:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d262:	f002 fbf7 	bl	800fa54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d266:	f001 f897 	bl	800e398 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d26a:	f002 fbc3 	bl	800f9f4 <vPortEnterCritical>
 800d26e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d270:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d274:	b25b      	sxtb	r3, r3
 800d276:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d27a:	d103      	bne.n	800d284 <xQueueGenericSend+0x16c>
 800d27c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d27e:	2200      	movs	r2, #0
 800d280:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d284:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d286:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d28a:	b25b      	sxtb	r3, r3
 800d28c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d290:	d103      	bne.n	800d29a <xQueueGenericSend+0x182>
 800d292:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d294:	2200      	movs	r2, #0
 800d296:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d29a:	f002 fbdb 	bl	800fa54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d29e:	1d3a      	adds	r2, r7, #4
 800d2a0:	f107 0314 	add.w	r3, r7, #20
 800d2a4:	4611      	mov	r1, r2
 800d2a6:	4618      	mov	r0, r3
 800d2a8:	f001 fbb8 	bl	800ea1c <xTaskCheckForTimeOut>
 800d2ac:	4603      	mov	r3, r0
 800d2ae:	2b00      	cmp	r3, #0
 800d2b0:	d124      	bne.n	800d2fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d2b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2b4:	f000 fcf5 	bl	800dca2 <prvIsQueueFull>
 800d2b8:	4603      	mov	r3, r0
 800d2ba:	2b00      	cmp	r3, #0
 800d2bc:	d018      	beq.n	800d2f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d2be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d2c0:	3310      	adds	r3, #16
 800d2c2:	687a      	ldr	r2, [r7, #4]
 800d2c4:	4611      	mov	r1, r2
 800d2c6:	4618      	mov	r0, r3
 800d2c8:	f001 fa40 	bl	800e74c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d2cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2ce:	f000 fc80 	bl	800dbd2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d2d2:	f001 f86f 	bl	800e3b4 <xTaskResumeAll>
 800d2d6:	4603      	mov	r3, r0
 800d2d8:	2b00      	cmp	r3, #0
 800d2da:	f47f af7c 	bne.w	800d1d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800d2de:	4b0c      	ldr	r3, [pc, #48]	; (800d310 <xQueueGenericSend+0x1f8>)
 800d2e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d2e4:	601a      	str	r2, [r3, #0]
 800d2e6:	f3bf 8f4f 	dsb	sy
 800d2ea:	f3bf 8f6f 	isb	sy
 800d2ee:	e772      	b.n	800d1d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d2f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2f2:	f000 fc6e 	bl	800dbd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2f6:	f001 f85d 	bl	800e3b4 <xTaskResumeAll>
 800d2fa:	e76c      	b.n	800d1d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d2fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d2fe:	f000 fc68 	bl	800dbd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d302:	f001 f857 	bl	800e3b4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d306:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d308:	4618      	mov	r0, r3
 800d30a:	3738      	adds	r7, #56	; 0x38
 800d30c:	46bd      	mov	sp, r7
 800d30e:	bd80      	pop	{r7, pc}
 800d310:	e000ed04 	.word	0xe000ed04

0800d314 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d314:	b580      	push	{r7, lr}
 800d316:	b090      	sub	sp, #64	; 0x40
 800d318:	af00      	add	r7, sp, #0
 800d31a:	60f8      	str	r0, [r7, #12]
 800d31c:	60b9      	str	r1, [r7, #8]
 800d31e:	607a      	str	r2, [r7, #4]
 800d320:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800d326:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d328:	2b00      	cmp	r3, #0
 800d32a:	d10a      	bne.n	800d342 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800d32c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d330:	f383 8811 	msr	BASEPRI, r3
 800d334:	f3bf 8f6f 	isb	sy
 800d338:	f3bf 8f4f 	dsb	sy
 800d33c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800d33e:	bf00      	nop
 800d340:	e7fe      	b.n	800d340 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d342:	68bb      	ldr	r3, [r7, #8]
 800d344:	2b00      	cmp	r3, #0
 800d346:	d103      	bne.n	800d350 <xQueueGenericSendFromISR+0x3c>
 800d348:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d34a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d34c:	2b00      	cmp	r3, #0
 800d34e:	d101      	bne.n	800d354 <xQueueGenericSendFromISR+0x40>
 800d350:	2301      	movs	r3, #1
 800d352:	e000      	b.n	800d356 <xQueueGenericSendFromISR+0x42>
 800d354:	2300      	movs	r3, #0
 800d356:	2b00      	cmp	r3, #0
 800d358:	d10a      	bne.n	800d370 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800d35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35e:	f383 8811 	msr	BASEPRI, r3
 800d362:	f3bf 8f6f 	isb	sy
 800d366:	f3bf 8f4f 	dsb	sy
 800d36a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800d36c:	bf00      	nop
 800d36e:	e7fe      	b.n	800d36e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d370:	683b      	ldr	r3, [r7, #0]
 800d372:	2b02      	cmp	r3, #2
 800d374:	d103      	bne.n	800d37e <xQueueGenericSendFromISR+0x6a>
 800d376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d378:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d37a:	2b01      	cmp	r3, #1
 800d37c:	d101      	bne.n	800d382 <xQueueGenericSendFromISR+0x6e>
 800d37e:	2301      	movs	r3, #1
 800d380:	e000      	b.n	800d384 <xQueueGenericSendFromISR+0x70>
 800d382:	2300      	movs	r3, #0
 800d384:	2b00      	cmp	r3, #0
 800d386:	d10a      	bne.n	800d39e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800d388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d38c:	f383 8811 	msr	BASEPRI, r3
 800d390:	f3bf 8f6f 	isb	sy
 800d394:	f3bf 8f4f 	dsb	sy
 800d398:	623b      	str	r3, [r7, #32]
}
 800d39a:	bf00      	nop
 800d39c:	e7fe      	b.n	800d39c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d39e:	f002 fc0b 	bl	800fbb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d3a2:	f3ef 8211 	mrs	r2, BASEPRI
 800d3a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3aa:	f383 8811 	msr	BASEPRI, r3
 800d3ae:	f3bf 8f6f 	isb	sy
 800d3b2:	f3bf 8f4f 	dsb	sy
 800d3b6:	61fa      	str	r2, [r7, #28]
 800d3b8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d3ba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d3bc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d3be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d3c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d3c6:	429a      	cmp	r2, r3
 800d3c8:	d302      	bcc.n	800d3d0 <xQueueGenericSendFromISR+0xbc>
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	2b02      	cmp	r3, #2
 800d3ce:	d12f      	bne.n	800d430 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d3d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d3d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d3da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3de:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d3e0:	683a      	ldr	r2, [r7, #0]
 800d3e2:	68b9      	ldr	r1, [r7, #8]
 800d3e4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800d3e6:	f000 fb64 	bl	800dab2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d3ea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800d3ee:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3f2:	d112      	bne.n	800d41a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d3f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d3f8:	2b00      	cmp	r3, #0
 800d3fa:	d016      	beq.n	800d42a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d3fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d3fe:	3324      	adds	r3, #36	; 0x24
 800d400:	4618      	mov	r0, r3
 800d402:	f001 fa2f 	bl	800e864 <xTaskRemoveFromEventList>
 800d406:	4603      	mov	r3, r0
 800d408:	2b00      	cmp	r3, #0
 800d40a:	d00e      	beq.n	800d42a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	2b00      	cmp	r3, #0
 800d410:	d00b      	beq.n	800d42a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d412:	687b      	ldr	r3, [r7, #4]
 800d414:	2201      	movs	r2, #1
 800d416:	601a      	str	r2, [r3, #0]
 800d418:	e007      	b.n	800d42a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d41a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800d41e:	3301      	adds	r3, #1
 800d420:	b2db      	uxtb	r3, r3
 800d422:	b25a      	sxtb	r2, r3
 800d424:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d426:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d42a:	2301      	movs	r3, #1
 800d42c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800d42e:	e001      	b.n	800d434 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d430:	2300      	movs	r3, #0
 800d432:	63fb      	str	r3, [r7, #60]	; 0x3c
 800d434:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d436:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d438:	697b      	ldr	r3, [r7, #20]
 800d43a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800d43e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d440:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800d442:	4618      	mov	r0, r3
 800d444:	3740      	adds	r7, #64	; 0x40
 800d446:	46bd      	mov	sp, r7
 800d448:	bd80      	pop	{r7, pc}

0800d44a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d44a:	b580      	push	{r7, lr}
 800d44c:	b08e      	sub	sp, #56	; 0x38
 800d44e:	af00      	add	r7, sp, #0
 800d450:	6078      	str	r0, [r7, #4]
 800d452:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800d458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d45a:	2b00      	cmp	r3, #0
 800d45c:	d10a      	bne.n	800d474 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800d45e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d462:	f383 8811 	msr	BASEPRI, r3
 800d466:	f3bf 8f6f 	isb	sy
 800d46a:	f3bf 8f4f 	dsb	sy
 800d46e:	623b      	str	r3, [r7, #32]
}
 800d470:	bf00      	nop
 800d472:	e7fe      	b.n	800d472 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d476:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d478:	2b00      	cmp	r3, #0
 800d47a:	d00a      	beq.n	800d492 <xQueueGiveFromISR+0x48>
	__asm volatile
 800d47c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d480:	f383 8811 	msr	BASEPRI, r3
 800d484:	f3bf 8f6f 	isb	sy
 800d488:	f3bf 8f4f 	dsb	sy
 800d48c:	61fb      	str	r3, [r7, #28]
}
 800d48e:	bf00      	nop
 800d490:	e7fe      	b.n	800d490 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d494:	681b      	ldr	r3, [r3, #0]
 800d496:	2b00      	cmp	r3, #0
 800d498:	d103      	bne.n	800d4a2 <xQueueGiveFromISR+0x58>
 800d49a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d49c:	689b      	ldr	r3, [r3, #8]
 800d49e:	2b00      	cmp	r3, #0
 800d4a0:	d101      	bne.n	800d4a6 <xQueueGiveFromISR+0x5c>
 800d4a2:	2301      	movs	r3, #1
 800d4a4:	e000      	b.n	800d4a8 <xQueueGiveFromISR+0x5e>
 800d4a6:	2300      	movs	r3, #0
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	d10a      	bne.n	800d4c2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800d4ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4b0:	f383 8811 	msr	BASEPRI, r3
 800d4b4:	f3bf 8f6f 	isb	sy
 800d4b8:	f3bf 8f4f 	dsb	sy
 800d4bc:	61bb      	str	r3, [r7, #24]
}
 800d4be:	bf00      	nop
 800d4c0:	e7fe      	b.n	800d4c0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4c2:	f002 fb79 	bl	800fbb8 <vPortValidateInterruptPriority>
	__asm volatile
 800d4c6:	f3ef 8211 	mrs	r2, BASEPRI
 800d4ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4ce:	f383 8811 	msr	BASEPRI, r3
 800d4d2:	f3bf 8f6f 	isb	sy
 800d4d6:	f3bf 8f4f 	dsb	sy
 800d4da:	617a      	str	r2, [r7, #20]
 800d4dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800d4de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d4e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d4e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d4e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d4ee:	429a      	cmp	r2, r3
 800d4f0:	d22b      	bcs.n	800d54a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d4f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d4f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d4fe:	1c5a      	adds	r2, r3, #1
 800d500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d502:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d504:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d508:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d50c:	d112      	bne.n	800d534 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d50e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d512:	2b00      	cmp	r3, #0
 800d514:	d016      	beq.n	800d544 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d516:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d518:	3324      	adds	r3, #36	; 0x24
 800d51a:	4618      	mov	r0, r3
 800d51c:	f001 f9a2 	bl	800e864 <xTaskRemoveFromEventList>
 800d520:	4603      	mov	r3, r0
 800d522:	2b00      	cmp	r3, #0
 800d524:	d00e      	beq.n	800d544 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d526:	683b      	ldr	r3, [r7, #0]
 800d528:	2b00      	cmp	r3, #0
 800d52a:	d00b      	beq.n	800d544 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d52c:	683b      	ldr	r3, [r7, #0]
 800d52e:	2201      	movs	r2, #1
 800d530:	601a      	str	r2, [r3, #0]
 800d532:	e007      	b.n	800d544 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d534:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800d538:	3301      	adds	r3, #1
 800d53a:	b2db      	uxtb	r3, r3
 800d53c:	b25a      	sxtb	r2, r3
 800d53e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d540:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d544:	2301      	movs	r3, #1
 800d546:	637b      	str	r3, [r7, #52]	; 0x34
 800d548:	e001      	b.n	800d54e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d54a:	2300      	movs	r3, #0
 800d54c:	637b      	str	r3, [r7, #52]	; 0x34
 800d54e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d550:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800d552:	68fb      	ldr	r3, [r7, #12]
 800d554:	f383 8811 	msr	BASEPRI, r3
}
 800d558:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d55a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d55c:	4618      	mov	r0, r3
 800d55e:	3738      	adds	r7, #56	; 0x38
 800d560:	46bd      	mov	sp, r7
 800d562:	bd80      	pop	{r7, pc}

0800d564 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d564:	b580      	push	{r7, lr}
 800d566:	b08c      	sub	sp, #48	; 0x30
 800d568:	af00      	add	r7, sp, #0
 800d56a:	60f8      	str	r0, [r7, #12]
 800d56c:	60b9      	str	r1, [r7, #8]
 800d56e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d570:	2300      	movs	r3, #0
 800d572:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d574:	68fb      	ldr	r3, [r7, #12]
 800d576:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d578:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d57a:	2b00      	cmp	r3, #0
 800d57c:	d10a      	bne.n	800d594 <xQueueReceive+0x30>
	__asm volatile
 800d57e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d582:	f383 8811 	msr	BASEPRI, r3
 800d586:	f3bf 8f6f 	isb	sy
 800d58a:	f3bf 8f4f 	dsb	sy
 800d58e:	623b      	str	r3, [r7, #32]
}
 800d590:	bf00      	nop
 800d592:	e7fe      	b.n	800d592 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d594:	68bb      	ldr	r3, [r7, #8]
 800d596:	2b00      	cmp	r3, #0
 800d598:	d103      	bne.n	800d5a2 <xQueueReceive+0x3e>
 800d59a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d59c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d59e:	2b00      	cmp	r3, #0
 800d5a0:	d101      	bne.n	800d5a6 <xQueueReceive+0x42>
 800d5a2:	2301      	movs	r3, #1
 800d5a4:	e000      	b.n	800d5a8 <xQueueReceive+0x44>
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	2b00      	cmp	r3, #0
 800d5aa:	d10a      	bne.n	800d5c2 <xQueueReceive+0x5e>
	__asm volatile
 800d5ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5b0:	f383 8811 	msr	BASEPRI, r3
 800d5b4:	f3bf 8f6f 	isb	sy
 800d5b8:	f3bf 8f4f 	dsb	sy
 800d5bc:	61fb      	str	r3, [r7, #28]
}
 800d5be:	bf00      	nop
 800d5c0:	e7fe      	b.n	800d5c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5c2:	f001 fb83 	bl	800eccc <xTaskGetSchedulerState>
 800d5c6:	4603      	mov	r3, r0
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d102      	bne.n	800d5d2 <xQueueReceive+0x6e>
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	2b00      	cmp	r3, #0
 800d5d0:	d101      	bne.n	800d5d6 <xQueueReceive+0x72>
 800d5d2:	2301      	movs	r3, #1
 800d5d4:	e000      	b.n	800d5d8 <xQueueReceive+0x74>
 800d5d6:	2300      	movs	r3, #0
 800d5d8:	2b00      	cmp	r3, #0
 800d5da:	d10a      	bne.n	800d5f2 <xQueueReceive+0x8e>
	__asm volatile
 800d5dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5e0:	f383 8811 	msr	BASEPRI, r3
 800d5e4:	f3bf 8f6f 	isb	sy
 800d5e8:	f3bf 8f4f 	dsb	sy
 800d5ec:	61bb      	str	r3, [r7, #24]
}
 800d5ee:	bf00      	nop
 800d5f0:	e7fe      	b.n	800d5f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d5f2:	f002 f9ff 	bl	800f9f4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d5f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d5f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d5fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d01f      	beq.n	800d642 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d602:	68b9      	ldr	r1, [r7, #8]
 800d604:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d606:	f000 fabe 	bl	800db86 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d60a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d60c:	1e5a      	subs	r2, r3, #1
 800d60e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d610:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d612:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d614:	691b      	ldr	r3, [r3, #16]
 800d616:	2b00      	cmp	r3, #0
 800d618:	d00f      	beq.n	800d63a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d61a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d61c:	3310      	adds	r3, #16
 800d61e:	4618      	mov	r0, r3
 800d620:	f001 f920 	bl	800e864 <xTaskRemoveFromEventList>
 800d624:	4603      	mov	r3, r0
 800d626:	2b00      	cmp	r3, #0
 800d628:	d007      	beq.n	800d63a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d62a:	4b3d      	ldr	r3, [pc, #244]	; (800d720 <xQueueReceive+0x1bc>)
 800d62c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d630:	601a      	str	r2, [r3, #0]
 800d632:	f3bf 8f4f 	dsb	sy
 800d636:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d63a:	f002 fa0b 	bl	800fa54 <vPortExitCritical>
				return pdPASS;
 800d63e:	2301      	movs	r3, #1
 800d640:	e069      	b.n	800d716 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d642:	687b      	ldr	r3, [r7, #4]
 800d644:	2b00      	cmp	r3, #0
 800d646:	d103      	bne.n	800d650 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d648:	f002 fa04 	bl	800fa54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d64c:	2300      	movs	r3, #0
 800d64e:	e062      	b.n	800d716 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d650:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d652:	2b00      	cmp	r3, #0
 800d654:	d106      	bne.n	800d664 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d656:	f107 0310 	add.w	r3, r7, #16
 800d65a:	4618      	mov	r0, r3
 800d65c:	f001 f9c8 	bl	800e9f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d660:	2301      	movs	r3, #1
 800d662:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d664:	f002 f9f6 	bl	800fa54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d668:	f000 fe96 	bl	800e398 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d66c:	f002 f9c2 	bl	800f9f4 <vPortEnterCritical>
 800d670:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d672:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d676:	b25b      	sxtb	r3, r3
 800d678:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d67c:	d103      	bne.n	800d686 <xQueueReceive+0x122>
 800d67e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d680:	2200      	movs	r2, #0
 800d682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d686:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d688:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d68c:	b25b      	sxtb	r3, r3
 800d68e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d692:	d103      	bne.n	800d69c <xQueueReceive+0x138>
 800d694:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d696:	2200      	movs	r2, #0
 800d698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d69c:	f002 f9da 	bl	800fa54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d6a0:	1d3a      	adds	r2, r7, #4
 800d6a2:	f107 0310 	add.w	r3, r7, #16
 800d6a6:	4611      	mov	r1, r2
 800d6a8:	4618      	mov	r0, r3
 800d6aa:	f001 f9b7 	bl	800ea1c <xTaskCheckForTimeOut>
 800d6ae:	4603      	mov	r3, r0
 800d6b0:	2b00      	cmp	r3, #0
 800d6b2:	d123      	bne.n	800d6fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d6b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6b6:	f000 fade 	bl	800dc76 <prvIsQueueEmpty>
 800d6ba:	4603      	mov	r3, r0
 800d6bc:	2b00      	cmp	r3, #0
 800d6be:	d017      	beq.n	800d6f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d6c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d6c2:	3324      	adds	r3, #36	; 0x24
 800d6c4:	687a      	ldr	r2, [r7, #4]
 800d6c6:	4611      	mov	r1, r2
 800d6c8:	4618      	mov	r0, r3
 800d6ca:	f001 f83f 	bl	800e74c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d6ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6d0:	f000 fa7f 	bl	800dbd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d6d4:	f000 fe6e 	bl	800e3b4 <xTaskResumeAll>
 800d6d8:	4603      	mov	r3, r0
 800d6da:	2b00      	cmp	r3, #0
 800d6dc:	d189      	bne.n	800d5f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800d6de:	4b10      	ldr	r3, [pc, #64]	; (800d720 <xQueueReceive+0x1bc>)
 800d6e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d6e4:	601a      	str	r2, [r3, #0]
 800d6e6:	f3bf 8f4f 	dsb	sy
 800d6ea:	f3bf 8f6f 	isb	sy
 800d6ee:	e780      	b.n	800d5f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d6f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6f2:	f000 fa6e 	bl	800dbd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d6f6:	f000 fe5d 	bl	800e3b4 <xTaskResumeAll>
 800d6fa:	e77a      	b.n	800d5f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d6fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d6fe:	f000 fa68 	bl	800dbd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d702:	f000 fe57 	bl	800e3b4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d706:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d708:	f000 fab5 	bl	800dc76 <prvIsQueueEmpty>
 800d70c:	4603      	mov	r3, r0
 800d70e:	2b00      	cmp	r3, #0
 800d710:	f43f af6f 	beq.w	800d5f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d714:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d716:	4618      	mov	r0, r3
 800d718:	3730      	adds	r7, #48	; 0x30
 800d71a:	46bd      	mov	sp, r7
 800d71c:	bd80      	pop	{r7, pc}
 800d71e:	bf00      	nop
 800d720:	e000ed04 	.word	0xe000ed04

0800d724 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800d724:	b580      	push	{r7, lr}
 800d726:	b08e      	sub	sp, #56	; 0x38
 800d728:	af00      	add	r7, sp, #0
 800d72a:	6078      	str	r0, [r7, #4]
 800d72c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800d72e:	2300      	movs	r3, #0
 800d730:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d732:	687b      	ldr	r3, [r7, #4]
 800d734:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800d736:	2300      	movs	r3, #0
 800d738:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d73a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d10a      	bne.n	800d756 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800d740:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d744:	f383 8811 	msr	BASEPRI, r3
 800d748:	f3bf 8f6f 	isb	sy
 800d74c:	f3bf 8f4f 	dsb	sy
 800d750:	623b      	str	r3, [r7, #32]
}
 800d752:	bf00      	nop
 800d754:	e7fe      	b.n	800d754 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800d756:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d75a:	2b00      	cmp	r3, #0
 800d75c:	d00a      	beq.n	800d774 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800d75e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d762:	f383 8811 	msr	BASEPRI, r3
 800d766:	f3bf 8f6f 	isb	sy
 800d76a:	f3bf 8f4f 	dsb	sy
 800d76e:	61fb      	str	r3, [r7, #28]
}
 800d770:	bf00      	nop
 800d772:	e7fe      	b.n	800d772 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d774:	f001 faaa 	bl	800eccc <xTaskGetSchedulerState>
 800d778:	4603      	mov	r3, r0
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d102      	bne.n	800d784 <xQueueSemaphoreTake+0x60>
 800d77e:	683b      	ldr	r3, [r7, #0]
 800d780:	2b00      	cmp	r3, #0
 800d782:	d101      	bne.n	800d788 <xQueueSemaphoreTake+0x64>
 800d784:	2301      	movs	r3, #1
 800d786:	e000      	b.n	800d78a <xQueueSemaphoreTake+0x66>
 800d788:	2300      	movs	r3, #0
 800d78a:	2b00      	cmp	r3, #0
 800d78c:	d10a      	bne.n	800d7a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800d78e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d792:	f383 8811 	msr	BASEPRI, r3
 800d796:	f3bf 8f6f 	isb	sy
 800d79a:	f3bf 8f4f 	dsb	sy
 800d79e:	61bb      	str	r3, [r7, #24]
}
 800d7a0:	bf00      	nop
 800d7a2:	e7fe      	b.n	800d7a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d7a4:	f002 f926 	bl	800f9f4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d7a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d7ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d7ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d024      	beq.n	800d7fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7b6:	1e5a      	subs	r2, r3, #1
 800d7b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d7bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7be:	681b      	ldr	r3, [r3, #0]
 800d7c0:	2b00      	cmp	r3, #0
 800d7c2:	d104      	bne.n	800d7ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d7c4:	f001 fc10 	bl	800efe8 <pvTaskIncrementMutexHeldCount>
 800d7c8:	4602      	mov	r2, r0
 800d7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d7ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d0:	691b      	ldr	r3, [r3, #16]
 800d7d2:	2b00      	cmp	r3, #0
 800d7d4:	d00f      	beq.n	800d7f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d7d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7d8:	3310      	adds	r3, #16
 800d7da:	4618      	mov	r0, r3
 800d7dc:	f001 f842 	bl	800e864 <xTaskRemoveFromEventList>
 800d7e0:	4603      	mov	r3, r0
 800d7e2:	2b00      	cmp	r3, #0
 800d7e4:	d007      	beq.n	800d7f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d7e6:	4b54      	ldr	r3, [pc, #336]	; (800d938 <xQueueSemaphoreTake+0x214>)
 800d7e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d7ec:	601a      	str	r2, [r3, #0]
 800d7ee:	f3bf 8f4f 	dsb	sy
 800d7f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d7f6:	f002 f92d 	bl	800fa54 <vPortExitCritical>
				return pdPASS;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	e097      	b.n	800d92e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d7fe:	683b      	ldr	r3, [r7, #0]
 800d800:	2b00      	cmp	r3, #0
 800d802:	d111      	bne.n	800d828 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d804:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d806:	2b00      	cmp	r3, #0
 800d808:	d00a      	beq.n	800d820 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800d80a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d80e:	f383 8811 	msr	BASEPRI, r3
 800d812:	f3bf 8f6f 	isb	sy
 800d816:	f3bf 8f4f 	dsb	sy
 800d81a:	617b      	str	r3, [r7, #20]
}
 800d81c:	bf00      	nop
 800d81e:	e7fe      	b.n	800d81e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800d820:	f002 f918 	bl	800fa54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d824:	2300      	movs	r3, #0
 800d826:	e082      	b.n	800d92e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d828:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d82a:	2b00      	cmp	r3, #0
 800d82c:	d106      	bne.n	800d83c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d82e:	f107 030c 	add.w	r3, r7, #12
 800d832:	4618      	mov	r0, r3
 800d834:	f001 f8dc 	bl	800e9f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d838:	2301      	movs	r3, #1
 800d83a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d83c:	f002 f90a 	bl	800fa54 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d840:	f000 fdaa 	bl	800e398 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d844:	f002 f8d6 	bl	800f9f4 <vPortEnterCritical>
 800d848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d84a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d84e:	b25b      	sxtb	r3, r3
 800d850:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d854:	d103      	bne.n	800d85e <xQueueSemaphoreTake+0x13a>
 800d856:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d858:	2200      	movs	r2, #0
 800d85a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d85e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d860:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d864:	b25b      	sxtb	r3, r3
 800d866:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d86a:	d103      	bne.n	800d874 <xQueueSemaphoreTake+0x150>
 800d86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d86e:	2200      	movs	r2, #0
 800d870:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d874:	f002 f8ee 	bl	800fa54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d878:	463a      	mov	r2, r7
 800d87a:	f107 030c 	add.w	r3, r7, #12
 800d87e:	4611      	mov	r1, r2
 800d880:	4618      	mov	r0, r3
 800d882:	f001 f8cb 	bl	800ea1c <xTaskCheckForTimeOut>
 800d886:	4603      	mov	r3, r0
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d132      	bne.n	800d8f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d88c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d88e:	f000 f9f2 	bl	800dc76 <prvIsQueueEmpty>
 800d892:	4603      	mov	r3, r0
 800d894:	2b00      	cmp	r3, #0
 800d896:	d026      	beq.n	800d8e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d109      	bne.n	800d8b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800d8a0:	f002 f8a8 	bl	800f9f4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d8a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8a6:	689b      	ldr	r3, [r3, #8]
 800d8a8:	4618      	mov	r0, r3
 800d8aa:	f001 fa2d 	bl	800ed08 <xTaskPriorityInherit>
 800d8ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800d8b0:	f002 f8d0 	bl	800fa54 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8b6:	3324      	adds	r3, #36	; 0x24
 800d8b8:	683a      	ldr	r2, [r7, #0]
 800d8ba:	4611      	mov	r1, r2
 800d8bc:	4618      	mov	r0, r3
 800d8be:	f000 ff45 	bl	800e74c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d8c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8c4:	f000 f985 	bl	800dbd2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8c8:	f000 fd74 	bl	800e3b4 <xTaskResumeAll>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	2b00      	cmp	r3, #0
 800d8d0:	f47f af68 	bne.w	800d7a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800d8d4:	4b18      	ldr	r3, [pc, #96]	; (800d938 <xQueueSemaphoreTake+0x214>)
 800d8d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d8da:	601a      	str	r2, [r3, #0]
 800d8dc:	f3bf 8f4f 	dsb	sy
 800d8e0:	f3bf 8f6f 	isb	sy
 800d8e4:	e75e      	b.n	800d7a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800d8e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8e8:	f000 f973 	bl	800dbd2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d8ec:	f000 fd62 	bl	800e3b4 <xTaskResumeAll>
 800d8f0:	e758      	b.n	800d7a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800d8f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8f4:	f000 f96d 	bl	800dbd2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d8f8:	f000 fd5c 	bl	800e3b4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d8fe:	f000 f9ba 	bl	800dc76 <prvIsQueueEmpty>
 800d902:	4603      	mov	r3, r0
 800d904:	2b00      	cmp	r3, #0
 800d906:	f43f af4d 	beq.w	800d7a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800d90a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d90c:	2b00      	cmp	r3, #0
 800d90e:	d00d      	beq.n	800d92c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800d910:	f002 f870 	bl	800f9f4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800d914:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800d916:	f000 f8b4 	bl	800da82 <prvGetDisinheritPriorityAfterTimeout>
 800d91a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d91c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d91e:	689b      	ldr	r3, [r3, #8]
 800d920:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800d922:	4618      	mov	r0, r3
 800d924:	f001 fac6 	bl	800eeb4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800d928:	f002 f894 	bl	800fa54 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d92c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d92e:	4618      	mov	r0, r3
 800d930:	3738      	adds	r7, #56	; 0x38
 800d932:	46bd      	mov	sp, r7
 800d934:	bd80      	pop	{r7, pc}
 800d936:	bf00      	nop
 800d938:	e000ed04 	.word	0xe000ed04

0800d93c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800d93c:	b580      	push	{r7, lr}
 800d93e:	b08e      	sub	sp, #56	; 0x38
 800d940:	af00      	add	r7, sp, #0
 800d942:	60f8      	str	r0, [r7, #12]
 800d944:	60b9      	str	r1, [r7, #8]
 800d946:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d948:	68fb      	ldr	r3, [r7, #12]
 800d94a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d94c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d10a      	bne.n	800d968 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800d952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d956:	f383 8811 	msr	BASEPRI, r3
 800d95a:	f3bf 8f6f 	isb	sy
 800d95e:	f3bf 8f4f 	dsb	sy
 800d962:	623b      	str	r3, [r7, #32]
}
 800d964:	bf00      	nop
 800d966:	e7fe      	b.n	800d966 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d968:	68bb      	ldr	r3, [r7, #8]
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d103      	bne.n	800d976 <xQueueReceiveFromISR+0x3a>
 800d96e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d972:	2b00      	cmp	r3, #0
 800d974:	d101      	bne.n	800d97a <xQueueReceiveFromISR+0x3e>
 800d976:	2301      	movs	r3, #1
 800d978:	e000      	b.n	800d97c <xQueueReceiveFromISR+0x40>
 800d97a:	2300      	movs	r3, #0
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d10a      	bne.n	800d996 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800d980:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d984:	f383 8811 	msr	BASEPRI, r3
 800d988:	f3bf 8f6f 	isb	sy
 800d98c:	f3bf 8f4f 	dsb	sy
 800d990:	61fb      	str	r3, [r7, #28]
}
 800d992:	bf00      	nop
 800d994:	e7fe      	b.n	800d994 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d996:	f002 f90f 	bl	800fbb8 <vPortValidateInterruptPriority>
	__asm volatile
 800d99a:	f3ef 8211 	mrs	r2, BASEPRI
 800d99e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a2:	f383 8811 	msr	BASEPRI, r3
 800d9a6:	f3bf 8f6f 	isb	sy
 800d9aa:	f3bf 8f4f 	dsb	sy
 800d9ae:	61ba      	str	r2, [r7, #24]
 800d9b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800d9b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d9b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d9ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d02f      	beq.n	800da22 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800d9c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d9c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d9cc:	68b9      	ldr	r1, [r7, #8]
 800d9ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d9d0:	f000 f8d9 	bl	800db86 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d9d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9d6:	1e5a      	subs	r2, r3, #1
 800d9d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800d9dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800d9e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d9e4:	d112      	bne.n	800da0c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9e8:	691b      	ldr	r3, [r3, #16]
 800d9ea:	2b00      	cmp	r3, #0
 800d9ec:	d016      	beq.n	800da1c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d9f0:	3310      	adds	r3, #16
 800d9f2:	4618      	mov	r0, r3
 800d9f4:	f000 ff36 	bl	800e864 <xTaskRemoveFromEventList>
 800d9f8:	4603      	mov	r3, r0
 800d9fa:	2b00      	cmp	r3, #0
 800d9fc:	d00e      	beq.n	800da1c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800d9fe:	687b      	ldr	r3, [r7, #4]
 800da00:	2b00      	cmp	r3, #0
 800da02:	d00b      	beq.n	800da1c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800da04:	687b      	ldr	r3, [r7, #4]
 800da06:	2201      	movs	r2, #1
 800da08:	601a      	str	r2, [r3, #0]
 800da0a:	e007      	b.n	800da1c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800da0c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800da10:	3301      	adds	r3, #1
 800da12:	b2db      	uxtb	r3, r3
 800da14:	b25a      	sxtb	r2, r3
 800da16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800da1c:	2301      	movs	r3, #1
 800da1e:	637b      	str	r3, [r7, #52]	; 0x34
 800da20:	e001      	b.n	800da26 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800da22:	2300      	movs	r3, #0
 800da24:	637b      	str	r3, [r7, #52]	; 0x34
 800da26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800da28:	613b      	str	r3, [r7, #16]
	__asm volatile
 800da2a:	693b      	ldr	r3, [r7, #16]
 800da2c:	f383 8811 	msr	BASEPRI, r3
}
 800da30:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800da32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800da34:	4618      	mov	r0, r3
 800da36:	3738      	adds	r7, #56	; 0x38
 800da38:	46bd      	mov	sp, r7
 800da3a:	bd80      	pop	{r7, pc}

0800da3c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800da3c:	b580      	push	{r7, lr}
 800da3e:	b084      	sub	sp, #16
 800da40:	af00      	add	r7, sp, #0
 800da42:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800da48:	68fb      	ldr	r3, [r7, #12]
 800da4a:	2b00      	cmp	r3, #0
 800da4c:	d10a      	bne.n	800da64 <vQueueDelete+0x28>
	__asm volatile
 800da4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da52:	f383 8811 	msr	BASEPRI, r3
 800da56:	f3bf 8f6f 	isb	sy
 800da5a:	f3bf 8f4f 	dsb	sy
 800da5e:	60bb      	str	r3, [r7, #8]
}
 800da60:	bf00      	nop
 800da62:	e7fe      	b.n	800da62 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800da64:	68f8      	ldr	r0, [r7, #12]
 800da66:	f000 f95f 	bl	800dd28 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800da6a:	68fb      	ldr	r3, [r7, #12]
 800da6c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800da70:	2b00      	cmp	r3, #0
 800da72:	d102      	bne.n	800da7a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800da74:	68f8      	ldr	r0, [r7, #12]
 800da76:	f002 f9ab 	bl	800fdd0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800da7a:	bf00      	nop
 800da7c:	3710      	adds	r7, #16
 800da7e:	46bd      	mov	sp, r7
 800da80:	bd80      	pop	{r7, pc}

0800da82 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800da82:	b480      	push	{r7}
 800da84:	b085      	sub	sp, #20
 800da86:	af00      	add	r7, sp, #0
 800da88:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d006      	beq.n	800daa0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800da9c:	60fb      	str	r3, [r7, #12]
 800da9e:	e001      	b.n	800daa4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800daa0:	2300      	movs	r3, #0
 800daa2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800daa4:	68fb      	ldr	r3, [r7, #12]
	}
 800daa6:	4618      	mov	r0, r3
 800daa8:	3714      	adds	r7, #20
 800daaa:	46bd      	mov	sp, r7
 800daac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dab0:	4770      	bx	lr

0800dab2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800dab2:	b580      	push	{r7, lr}
 800dab4:	b086      	sub	sp, #24
 800dab6:	af00      	add	r7, sp, #0
 800dab8:	60f8      	str	r0, [r7, #12]
 800daba:	60b9      	str	r1, [r7, #8]
 800dabc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800dabe:	2300      	movs	r3, #0
 800dac0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dac6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800dac8:	68fb      	ldr	r3, [r7, #12]
 800daca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dacc:	2b00      	cmp	r3, #0
 800dace:	d10d      	bne.n	800daec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	681b      	ldr	r3, [r3, #0]
 800dad4:	2b00      	cmp	r3, #0
 800dad6:	d14d      	bne.n	800db74 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	689b      	ldr	r3, [r3, #8]
 800dadc:	4618      	mov	r0, r3
 800dade:	f001 f97b 	bl	800edd8 <xTaskPriorityDisinherit>
 800dae2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	2200      	movs	r2, #0
 800dae8:	609a      	str	r2, [r3, #8]
 800daea:	e043      	b.n	800db74 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800daec:	687b      	ldr	r3, [r7, #4]
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d119      	bne.n	800db26 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800daf2:	68fb      	ldr	r3, [r7, #12]
 800daf4:	6858      	ldr	r0, [r3, #4]
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dafa:	461a      	mov	r2, r3
 800dafc:	68b9      	ldr	r1, [r7, #8]
 800dafe:	f002 fab1 	bl	8010064 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	685a      	ldr	r2, [r3, #4]
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db0a:	441a      	add	r2, r3
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db10:	68fb      	ldr	r3, [r7, #12]
 800db12:	685a      	ldr	r2, [r3, #4]
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	689b      	ldr	r3, [r3, #8]
 800db18:	429a      	cmp	r2, r3
 800db1a:	d32b      	bcc.n	800db74 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	681a      	ldr	r2, [r3, #0]
 800db20:	68fb      	ldr	r3, [r7, #12]
 800db22:	605a      	str	r2, [r3, #4]
 800db24:	e026      	b.n	800db74 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	68d8      	ldr	r0, [r3, #12]
 800db2a:	68fb      	ldr	r3, [r7, #12]
 800db2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db2e:	461a      	mov	r2, r3
 800db30:	68b9      	ldr	r1, [r7, #8]
 800db32:	f002 fa97 	bl	8010064 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800db36:	68fb      	ldr	r3, [r7, #12]
 800db38:	68da      	ldr	r2, [r3, #12]
 800db3a:	68fb      	ldr	r3, [r7, #12]
 800db3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db3e:	425b      	negs	r3, r3
 800db40:	441a      	add	r2, r3
 800db42:	68fb      	ldr	r3, [r7, #12]
 800db44:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800db46:	68fb      	ldr	r3, [r7, #12]
 800db48:	68da      	ldr	r2, [r3, #12]
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	681b      	ldr	r3, [r3, #0]
 800db4e:	429a      	cmp	r2, r3
 800db50:	d207      	bcs.n	800db62 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800db52:	68fb      	ldr	r3, [r7, #12]
 800db54:	689a      	ldr	r2, [r3, #8]
 800db56:	68fb      	ldr	r3, [r7, #12]
 800db58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db5a:	425b      	negs	r3, r3
 800db5c:	441a      	add	r2, r3
 800db5e:	68fb      	ldr	r3, [r7, #12]
 800db60:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800db62:	687b      	ldr	r3, [r7, #4]
 800db64:	2b02      	cmp	r3, #2
 800db66:	d105      	bne.n	800db74 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800db68:	693b      	ldr	r3, [r7, #16]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d002      	beq.n	800db74 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	3b01      	subs	r3, #1
 800db72:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800db74:	693b      	ldr	r3, [r7, #16]
 800db76:	1c5a      	adds	r2, r3, #1
 800db78:	68fb      	ldr	r3, [r7, #12]
 800db7a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800db7c:	697b      	ldr	r3, [r7, #20]
}
 800db7e:	4618      	mov	r0, r3
 800db80:	3718      	adds	r7, #24
 800db82:	46bd      	mov	sp, r7
 800db84:	bd80      	pop	{r7, pc}

0800db86 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800db86:	b580      	push	{r7, lr}
 800db88:	b082      	sub	sp, #8
 800db8a:	af00      	add	r7, sp, #0
 800db8c:	6078      	str	r0, [r7, #4]
 800db8e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800db90:	687b      	ldr	r3, [r7, #4]
 800db92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800db94:	2b00      	cmp	r3, #0
 800db96:	d018      	beq.n	800dbca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	68da      	ldr	r2, [r3, #12]
 800db9c:	687b      	ldr	r3, [r7, #4]
 800db9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dba0:	441a      	add	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800dba6:	687b      	ldr	r3, [r7, #4]
 800dba8:	68da      	ldr	r2, [r3, #12]
 800dbaa:	687b      	ldr	r3, [r7, #4]
 800dbac:	689b      	ldr	r3, [r3, #8]
 800dbae:	429a      	cmp	r2, r3
 800dbb0:	d303      	bcc.n	800dbba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800dbb2:	687b      	ldr	r3, [r7, #4]
 800dbb4:	681a      	ldr	r2, [r3, #0]
 800dbb6:	687b      	ldr	r3, [r7, #4]
 800dbb8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800dbba:	687b      	ldr	r3, [r7, #4]
 800dbbc:	68d9      	ldr	r1, [r3, #12]
 800dbbe:	687b      	ldr	r3, [r7, #4]
 800dbc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800dbc2:	461a      	mov	r2, r3
 800dbc4:	6838      	ldr	r0, [r7, #0]
 800dbc6:	f002 fa4d 	bl	8010064 <memcpy>
	}
}
 800dbca:	bf00      	nop
 800dbcc:	3708      	adds	r7, #8
 800dbce:	46bd      	mov	sp, r7
 800dbd0:	bd80      	pop	{r7, pc}

0800dbd2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800dbd2:	b580      	push	{r7, lr}
 800dbd4:	b084      	sub	sp, #16
 800dbd6:	af00      	add	r7, sp, #0
 800dbd8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800dbda:	f001 ff0b 	bl	800f9f4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800dbde:	687b      	ldr	r3, [r7, #4]
 800dbe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbe4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dbe6:	e011      	b.n	800dc0c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800dbe8:	687b      	ldr	r3, [r7, #4]
 800dbea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dbec:	2b00      	cmp	r3, #0
 800dbee:	d012      	beq.n	800dc16 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	3324      	adds	r3, #36	; 0x24
 800dbf4:	4618      	mov	r0, r3
 800dbf6:	f000 fe35 	bl	800e864 <xTaskRemoveFromEventList>
 800dbfa:	4603      	mov	r3, r0
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d001      	beq.n	800dc04 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800dc00:	f000 ff6e 	bl	800eae0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800dc04:	7bfb      	ldrb	r3, [r7, #15]
 800dc06:	3b01      	subs	r3, #1
 800dc08:	b2db      	uxtb	r3, r3
 800dc0a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800dc0c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800dc10:	2b00      	cmp	r3, #0
 800dc12:	dce9      	bgt.n	800dbe8 <prvUnlockQueue+0x16>
 800dc14:	e000      	b.n	800dc18 <prvUnlockQueue+0x46>
					break;
 800dc16:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800dc18:	687b      	ldr	r3, [r7, #4]
 800dc1a:	22ff      	movs	r2, #255	; 0xff
 800dc1c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dc20:	f001 ff18 	bl	800fa54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dc24:	f001 fee6 	bl	800f9f4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800dc28:	687b      	ldr	r3, [r7, #4]
 800dc2a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dc2e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc30:	e011      	b.n	800dc56 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dc32:	687b      	ldr	r3, [r7, #4]
 800dc34:	691b      	ldr	r3, [r3, #16]
 800dc36:	2b00      	cmp	r3, #0
 800dc38:	d012      	beq.n	800dc60 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dc3a:	687b      	ldr	r3, [r7, #4]
 800dc3c:	3310      	adds	r3, #16
 800dc3e:	4618      	mov	r0, r3
 800dc40:	f000 fe10 	bl	800e864 <xTaskRemoveFromEventList>
 800dc44:	4603      	mov	r3, r0
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d001      	beq.n	800dc4e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dc4a:	f000 ff49 	bl	800eae0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dc4e:	7bbb      	ldrb	r3, [r7, #14]
 800dc50:	3b01      	subs	r3, #1
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dc56:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800dc5a:	2b00      	cmp	r3, #0
 800dc5c:	dce9      	bgt.n	800dc32 <prvUnlockQueue+0x60>
 800dc5e:	e000      	b.n	800dc62 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800dc60:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800dc62:	687b      	ldr	r3, [r7, #4]
 800dc64:	22ff      	movs	r2, #255	; 0xff
 800dc66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dc6a:	f001 fef3 	bl	800fa54 <vPortExitCritical>
}
 800dc6e:	bf00      	nop
 800dc70:	3710      	adds	r7, #16
 800dc72:	46bd      	mov	sp, r7
 800dc74:	bd80      	pop	{r7, pc}

0800dc76 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800dc76:	b580      	push	{r7, lr}
 800dc78:	b084      	sub	sp, #16
 800dc7a:	af00      	add	r7, sp, #0
 800dc7c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dc7e:	f001 feb9 	bl	800f9f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800dc82:	687b      	ldr	r3, [r7, #4]
 800dc84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d102      	bne.n	800dc90 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800dc8a:	2301      	movs	r3, #1
 800dc8c:	60fb      	str	r3, [r7, #12]
 800dc8e:	e001      	b.n	800dc94 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800dc90:	2300      	movs	r3, #0
 800dc92:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dc94:	f001 fede 	bl	800fa54 <vPortExitCritical>

	return xReturn;
 800dc98:	68fb      	ldr	r3, [r7, #12]
}
 800dc9a:	4618      	mov	r0, r3
 800dc9c:	3710      	adds	r7, #16
 800dc9e:	46bd      	mov	sp, r7
 800dca0:	bd80      	pop	{r7, pc}

0800dca2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800dca2:	b580      	push	{r7, lr}
 800dca4:	b084      	sub	sp, #16
 800dca6:	af00      	add	r7, sp, #0
 800dca8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800dcaa:	f001 fea3 	bl	800f9f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800dcae:	687b      	ldr	r3, [r7, #4]
 800dcb0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800dcb2:	687b      	ldr	r3, [r7, #4]
 800dcb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800dcb6:	429a      	cmp	r2, r3
 800dcb8:	d102      	bne.n	800dcc0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800dcba:	2301      	movs	r3, #1
 800dcbc:	60fb      	str	r3, [r7, #12]
 800dcbe:	e001      	b.n	800dcc4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800dcc0:	2300      	movs	r3, #0
 800dcc2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800dcc4:	f001 fec6 	bl	800fa54 <vPortExitCritical>

	return xReturn;
 800dcc8:	68fb      	ldr	r3, [r7, #12]
}
 800dcca:	4618      	mov	r0, r3
 800dccc:	3710      	adds	r7, #16
 800dcce:	46bd      	mov	sp, r7
 800dcd0:	bd80      	pop	{r7, pc}
	...

0800dcd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800dcd4:	b480      	push	{r7}
 800dcd6:	b085      	sub	sp, #20
 800dcd8:	af00      	add	r7, sp, #0
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dcde:	2300      	movs	r3, #0
 800dce0:	60fb      	str	r3, [r7, #12]
 800dce2:	e014      	b.n	800dd0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dce4:	4a0f      	ldr	r2, [pc, #60]	; (800dd24 <vQueueAddToRegistry+0x50>)
 800dce6:	68fb      	ldr	r3, [r7, #12]
 800dce8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800dcec:	2b00      	cmp	r3, #0
 800dcee:	d10b      	bne.n	800dd08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dcf0:	490c      	ldr	r1, [pc, #48]	; (800dd24 <vQueueAddToRegistry+0x50>)
 800dcf2:	68fb      	ldr	r3, [r7, #12]
 800dcf4:	683a      	ldr	r2, [r7, #0]
 800dcf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dcfa:	4a0a      	ldr	r2, [pc, #40]	; (800dd24 <vQueueAddToRegistry+0x50>)
 800dcfc:	68fb      	ldr	r3, [r7, #12]
 800dcfe:	00db      	lsls	r3, r3, #3
 800dd00:	4413      	add	r3, r2
 800dd02:	687a      	ldr	r2, [r7, #4]
 800dd04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800dd06:	e006      	b.n	800dd16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	3301      	adds	r3, #1
 800dd0c:	60fb      	str	r3, [r7, #12]
 800dd0e:	68fb      	ldr	r3, [r7, #12]
 800dd10:	2b07      	cmp	r3, #7
 800dd12:	d9e7      	bls.n	800dce4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dd14:	bf00      	nop
 800dd16:	bf00      	nop
 800dd18:	3714      	adds	r7, #20
 800dd1a:	46bd      	mov	sp, r7
 800dd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd20:	4770      	bx	lr
 800dd22:	bf00      	nop
 800dd24:	20006c84 	.word	0x20006c84

0800dd28 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800dd28:	b480      	push	{r7}
 800dd2a:	b085      	sub	sp, #20
 800dd2c:	af00      	add	r7, sp, #0
 800dd2e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd30:	2300      	movs	r3, #0
 800dd32:	60fb      	str	r3, [r7, #12]
 800dd34:	e016      	b.n	800dd64 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dd36:	4a10      	ldr	r2, [pc, #64]	; (800dd78 <vQueueUnregisterQueue+0x50>)
 800dd38:	68fb      	ldr	r3, [r7, #12]
 800dd3a:	00db      	lsls	r3, r3, #3
 800dd3c:	4413      	add	r3, r2
 800dd3e:	685b      	ldr	r3, [r3, #4]
 800dd40:	687a      	ldr	r2, [r7, #4]
 800dd42:	429a      	cmp	r2, r3
 800dd44:	d10b      	bne.n	800dd5e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dd46:	4a0c      	ldr	r2, [pc, #48]	; (800dd78 <vQueueUnregisterQueue+0x50>)
 800dd48:	68fb      	ldr	r3, [r7, #12]
 800dd4a:	2100      	movs	r1, #0
 800dd4c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dd50:	4a09      	ldr	r2, [pc, #36]	; (800dd78 <vQueueUnregisterQueue+0x50>)
 800dd52:	68fb      	ldr	r3, [r7, #12]
 800dd54:	00db      	lsls	r3, r3, #3
 800dd56:	4413      	add	r3, r2
 800dd58:	2200      	movs	r2, #0
 800dd5a:	605a      	str	r2, [r3, #4]
				break;
 800dd5c:	e006      	b.n	800dd6c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dd5e:	68fb      	ldr	r3, [r7, #12]
 800dd60:	3301      	adds	r3, #1
 800dd62:	60fb      	str	r3, [r7, #12]
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	2b07      	cmp	r3, #7
 800dd68:	d9e5      	bls.n	800dd36 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dd6a:	bf00      	nop
 800dd6c:	bf00      	nop
 800dd6e:	3714      	adds	r7, #20
 800dd70:	46bd      	mov	sp, r7
 800dd72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd76:	4770      	bx	lr
 800dd78:	20006c84 	.word	0x20006c84

0800dd7c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dd7c:	b580      	push	{r7, lr}
 800dd7e:	b086      	sub	sp, #24
 800dd80:	af00      	add	r7, sp, #0
 800dd82:	60f8      	str	r0, [r7, #12]
 800dd84:	60b9      	str	r1, [r7, #8]
 800dd86:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dd88:	68fb      	ldr	r3, [r7, #12]
 800dd8a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dd8c:	f001 fe32 	bl	800f9f4 <vPortEnterCritical>
 800dd90:	697b      	ldr	r3, [r7, #20]
 800dd92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dd96:	b25b      	sxtb	r3, r3
 800dd98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dd9c:	d103      	bne.n	800dda6 <vQueueWaitForMessageRestricted+0x2a>
 800dd9e:	697b      	ldr	r3, [r7, #20]
 800dda0:	2200      	movs	r2, #0
 800dda2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dda6:	697b      	ldr	r3, [r7, #20]
 800dda8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ddac:	b25b      	sxtb	r3, r3
 800ddae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ddb2:	d103      	bne.n	800ddbc <vQueueWaitForMessageRestricted+0x40>
 800ddb4:	697b      	ldr	r3, [r7, #20]
 800ddb6:	2200      	movs	r2, #0
 800ddb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800ddbc:	f001 fe4a 	bl	800fa54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d106      	bne.n	800ddd6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	3324      	adds	r3, #36	; 0x24
 800ddcc:	687a      	ldr	r2, [r7, #4]
 800ddce:	68b9      	ldr	r1, [r7, #8]
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f000 fd1b 	bl	800e80c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ddd6:	6978      	ldr	r0, [r7, #20]
 800ddd8:	f7ff fefb 	bl	800dbd2 <prvUnlockQueue>
	}
 800dddc:	bf00      	nop
 800ddde:	3718      	adds	r7, #24
 800dde0:	46bd      	mov	sp, r7
 800dde2:	bd80      	pop	{r7, pc}

0800dde4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dde4:	b580      	push	{r7, lr}
 800dde6:	b08e      	sub	sp, #56	; 0x38
 800dde8:	af04      	add	r7, sp, #16
 800ddea:	60f8      	str	r0, [r7, #12]
 800ddec:	60b9      	str	r1, [r7, #8]
 800ddee:	607a      	str	r2, [r7, #4]
 800ddf0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ddf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ddf4:	2b00      	cmp	r3, #0
 800ddf6:	d10a      	bne.n	800de0e <xTaskCreateStatic+0x2a>
	__asm volatile
 800ddf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ddfc:	f383 8811 	msr	BASEPRI, r3
 800de00:	f3bf 8f6f 	isb	sy
 800de04:	f3bf 8f4f 	dsb	sy
 800de08:	623b      	str	r3, [r7, #32]
}
 800de0a:	bf00      	nop
 800de0c:	e7fe      	b.n	800de0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800de0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de10:	2b00      	cmp	r3, #0
 800de12:	d10a      	bne.n	800de2a <xTaskCreateStatic+0x46>
	__asm volatile
 800de14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de18:	f383 8811 	msr	BASEPRI, r3
 800de1c:	f3bf 8f6f 	isb	sy
 800de20:	f3bf 8f4f 	dsb	sy
 800de24:	61fb      	str	r3, [r7, #28]
}
 800de26:	bf00      	nop
 800de28:	e7fe      	b.n	800de28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800de2a:	23bc      	movs	r3, #188	; 0xbc
 800de2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800de2e:	693b      	ldr	r3, [r7, #16]
 800de30:	2bbc      	cmp	r3, #188	; 0xbc
 800de32:	d00a      	beq.n	800de4a <xTaskCreateStatic+0x66>
	__asm volatile
 800de34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de38:	f383 8811 	msr	BASEPRI, r3
 800de3c:	f3bf 8f6f 	isb	sy
 800de40:	f3bf 8f4f 	dsb	sy
 800de44:	61bb      	str	r3, [r7, #24]
}
 800de46:	bf00      	nop
 800de48:	e7fe      	b.n	800de48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800de4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800de4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de4e:	2b00      	cmp	r3, #0
 800de50:	d01e      	beq.n	800de90 <xTaskCreateStatic+0xac>
 800de52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800de54:	2b00      	cmp	r3, #0
 800de56:	d01b      	beq.n	800de90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800de58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800de5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800de5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800de60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800de62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de64:	2202      	movs	r2, #2
 800de66:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800de6a:	2300      	movs	r3, #0
 800de6c:	9303      	str	r3, [sp, #12]
 800de6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800de70:	9302      	str	r3, [sp, #8]
 800de72:	f107 0314 	add.w	r3, r7, #20
 800de76:	9301      	str	r3, [sp, #4]
 800de78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de7a:	9300      	str	r3, [sp, #0]
 800de7c:	683b      	ldr	r3, [r7, #0]
 800de7e:	687a      	ldr	r2, [r7, #4]
 800de80:	68b9      	ldr	r1, [r7, #8]
 800de82:	68f8      	ldr	r0, [r7, #12]
 800de84:	f000 f850 	bl	800df28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800de88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800de8a:	f000 f8f3 	bl	800e074 <prvAddNewTaskToReadyList>
 800de8e:	e001      	b.n	800de94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800de90:	2300      	movs	r3, #0
 800de92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800de94:	697b      	ldr	r3, [r7, #20]
	}
 800de96:	4618      	mov	r0, r3
 800de98:	3728      	adds	r7, #40	; 0x28
 800de9a:	46bd      	mov	sp, r7
 800de9c:	bd80      	pop	{r7, pc}

0800de9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800de9e:	b580      	push	{r7, lr}
 800dea0:	b08c      	sub	sp, #48	; 0x30
 800dea2:	af04      	add	r7, sp, #16
 800dea4:	60f8      	str	r0, [r7, #12]
 800dea6:	60b9      	str	r1, [r7, #8]
 800dea8:	603b      	str	r3, [r7, #0]
 800deaa:	4613      	mov	r3, r2
 800deac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800deae:	88fb      	ldrh	r3, [r7, #6]
 800deb0:	009b      	lsls	r3, r3, #2
 800deb2:	4618      	mov	r0, r3
 800deb4:	f001 fec0 	bl	800fc38 <pvPortMalloc>
 800deb8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800deba:	697b      	ldr	r3, [r7, #20]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d00e      	beq.n	800dede <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dec0:	20bc      	movs	r0, #188	; 0xbc
 800dec2:	f001 feb9 	bl	800fc38 <pvPortMalloc>
 800dec6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dec8:	69fb      	ldr	r3, [r7, #28]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d003      	beq.n	800ded6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dece:	69fb      	ldr	r3, [r7, #28]
 800ded0:	697a      	ldr	r2, [r7, #20]
 800ded2:	631a      	str	r2, [r3, #48]	; 0x30
 800ded4:	e005      	b.n	800dee2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ded6:	6978      	ldr	r0, [r7, #20]
 800ded8:	f001 ff7a 	bl	800fdd0 <vPortFree>
 800dedc:	e001      	b.n	800dee2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dede:	2300      	movs	r3, #0
 800dee0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dee2:	69fb      	ldr	r3, [r7, #28]
 800dee4:	2b00      	cmp	r3, #0
 800dee6:	d017      	beq.n	800df18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dee8:	69fb      	ldr	r3, [r7, #28]
 800deea:	2200      	movs	r2, #0
 800deec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800def0:	88fa      	ldrh	r2, [r7, #6]
 800def2:	2300      	movs	r3, #0
 800def4:	9303      	str	r3, [sp, #12]
 800def6:	69fb      	ldr	r3, [r7, #28]
 800def8:	9302      	str	r3, [sp, #8]
 800defa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defc:	9301      	str	r3, [sp, #4]
 800defe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df00:	9300      	str	r3, [sp, #0]
 800df02:	683b      	ldr	r3, [r7, #0]
 800df04:	68b9      	ldr	r1, [r7, #8]
 800df06:	68f8      	ldr	r0, [r7, #12]
 800df08:	f000 f80e 	bl	800df28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800df0c:	69f8      	ldr	r0, [r7, #28]
 800df0e:	f000 f8b1 	bl	800e074 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800df12:	2301      	movs	r3, #1
 800df14:	61bb      	str	r3, [r7, #24]
 800df16:	e002      	b.n	800df1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800df18:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800df1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800df1e:	69bb      	ldr	r3, [r7, #24]
	}
 800df20:	4618      	mov	r0, r3
 800df22:	3720      	adds	r7, #32
 800df24:	46bd      	mov	sp, r7
 800df26:	bd80      	pop	{r7, pc}

0800df28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800df28:	b580      	push	{r7, lr}
 800df2a:	b088      	sub	sp, #32
 800df2c:	af00      	add	r7, sp, #0
 800df2e:	60f8      	str	r0, [r7, #12]
 800df30:	60b9      	str	r1, [r7, #8]
 800df32:	607a      	str	r2, [r7, #4]
 800df34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800df36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800df3a:	687b      	ldr	r3, [r7, #4]
 800df3c:	009b      	lsls	r3, r3, #2
 800df3e:	461a      	mov	r2, r3
 800df40:	21a5      	movs	r1, #165	; 0xa5
 800df42:	f002 f89d 	bl	8010080 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800df4a:	687b      	ldr	r3, [r7, #4]
 800df4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800df50:	3b01      	subs	r3, #1
 800df52:	009b      	lsls	r3, r3, #2
 800df54:	4413      	add	r3, r2
 800df56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df58:	69bb      	ldr	r3, [r7, #24]
 800df5a:	f023 0307 	bic.w	r3, r3, #7
 800df5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800df60:	69bb      	ldr	r3, [r7, #24]
 800df62:	f003 0307 	and.w	r3, r3, #7
 800df66:	2b00      	cmp	r3, #0
 800df68:	d00a      	beq.n	800df80 <prvInitialiseNewTask+0x58>
	__asm volatile
 800df6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df6e:	f383 8811 	msr	BASEPRI, r3
 800df72:	f3bf 8f6f 	isb	sy
 800df76:	f3bf 8f4f 	dsb	sy
 800df7a:	617b      	str	r3, [r7, #20]
}
 800df7c:	bf00      	nop
 800df7e:	e7fe      	b.n	800df7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800df80:	68bb      	ldr	r3, [r7, #8]
 800df82:	2b00      	cmp	r3, #0
 800df84:	d01f      	beq.n	800dfc6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df86:	2300      	movs	r3, #0
 800df88:	61fb      	str	r3, [r7, #28]
 800df8a:	e012      	b.n	800dfb2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df8c:	68ba      	ldr	r2, [r7, #8]
 800df8e:	69fb      	ldr	r3, [r7, #28]
 800df90:	4413      	add	r3, r2
 800df92:	7819      	ldrb	r1, [r3, #0]
 800df94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800df96:	69fb      	ldr	r3, [r7, #28]
 800df98:	4413      	add	r3, r2
 800df9a:	3334      	adds	r3, #52	; 0x34
 800df9c:	460a      	mov	r2, r1
 800df9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800dfa0:	68ba      	ldr	r2, [r7, #8]
 800dfa2:	69fb      	ldr	r3, [r7, #28]
 800dfa4:	4413      	add	r3, r2
 800dfa6:	781b      	ldrb	r3, [r3, #0]
 800dfa8:	2b00      	cmp	r3, #0
 800dfaa:	d006      	beq.n	800dfba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dfac:	69fb      	ldr	r3, [r7, #28]
 800dfae:	3301      	adds	r3, #1
 800dfb0:	61fb      	str	r3, [r7, #28]
 800dfb2:	69fb      	ldr	r3, [r7, #28]
 800dfb4:	2b0f      	cmp	r3, #15
 800dfb6:	d9e9      	bls.n	800df8c <prvInitialiseNewTask+0x64>
 800dfb8:	e000      	b.n	800dfbc <prvInitialiseNewTask+0x94>
			{
				break;
 800dfba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800dfbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800dfc4:	e003      	b.n	800dfce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800dfc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800dfce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfd0:	2b37      	cmp	r3, #55	; 0x37
 800dfd2:	d901      	bls.n	800dfd8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800dfd4:	2337      	movs	r3, #55	; 0x37
 800dfd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800dfd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfdc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800dfde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800dfe2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800dfe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800dfea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dfec:	3304      	adds	r3, #4
 800dfee:	4618      	mov	r0, r3
 800dff0:	f7fe fda0 	bl	800cb34 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800dff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dff6:	3318      	adds	r3, #24
 800dff8:	4618      	mov	r0, r3
 800dffa:	f7fe fd9b 	bl	800cb34 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800dffe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e000:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e002:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e006:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e00a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e00c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800e00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e010:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e012:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800e014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e016:	2200      	movs	r2, #0
 800e018:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800e01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e01e:	2200      	movs	r2, #0
 800e020:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800e024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e026:	3354      	adds	r3, #84	; 0x54
 800e028:	2260      	movs	r2, #96	; 0x60
 800e02a:	2100      	movs	r1, #0
 800e02c:	4618      	mov	r0, r3
 800e02e:	f002 f827 	bl	8010080 <memset>
 800e032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e034:	4a0c      	ldr	r2, [pc, #48]	; (800e068 <prvInitialiseNewTask+0x140>)
 800e036:	659a      	str	r2, [r3, #88]	; 0x58
 800e038:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e03a:	4a0c      	ldr	r2, [pc, #48]	; (800e06c <prvInitialiseNewTask+0x144>)
 800e03c:	65da      	str	r2, [r3, #92]	; 0x5c
 800e03e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e040:	4a0b      	ldr	r2, [pc, #44]	; (800e070 <prvInitialiseNewTask+0x148>)
 800e042:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800e044:	683a      	ldr	r2, [r7, #0]
 800e046:	68f9      	ldr	r1, [r7, #12]
 800e048:	69b8      	ldr	r0, [r7, #24]
 800e04a:	f001 fba3 	bl	800f794 <pxPortInitialiseStack>
 800e04e:	4602      	mov	r2, r0
 800e050:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e052:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800e054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e056:	2b00      	cmp	r3, #0
 800e058:	d002      	beq.n	800e060 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800e05a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e05c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e05e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e060:	bf00      	nop
 800e062:	3720      	adds	r7, #32
 800e064:	46bd      	mov	sp, r7
 800e066:	bd80      	pop	{r7, pc}
 800e068:	0801f8d8 	.word	0x0801f8d8
 800e06c:	0801f8f8 	.word	0x0801f8f8
 800e070:	0801f8b8 	.word	0x0801f8b8

0800e074 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800e074:	b580      	push	{r7, lr}
 800e076:	b082      	sub	sp, #8
 800e078:	af00      	add	r7, sp, #0
 800e07a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800e07c:	f001 fcba 	bl	800f9f4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800e080:	4b2d      	ldr	r3, [pc, #180]	; (800e138 <prvAddNewTaskToReadyList+0xc4>)
 800e082:	681b      	ldr	r3, [r3, #0]
 800e084:	3301      	adds	r3, #1
 800e086:	4a2c      	ldr	r2, [pc, #176]	; (800e138 <prvAddNewTaskToReadyList+0xc4>)
 800e088:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800e08a:	4b2c      	ldr	r3, [pc, #176]	; (800e13c <prvAddNewTaskToReadyList+0xc8>)
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	2b00      	cmp	r3, #0
 800e090:	d109      	bne.n	800e0a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800e092:	4a2a      	ldr	r2, [pc, #168]	; (800e13c <prvAddNewTaskToReadyList+0xc8>)
 800e094:	687b      	ldr	r3, [r7, #4]
 800e096:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800e098:	4b27      	ldr	r3, [pc, #156]	; (800e138 <prvAddNewTaskToReadyList+0xc4>)
 800e09a:	681b      	ldr	r3, [r3, #0]
 800e09c:	2b01      	cmp	r3, #1
 800e09e:	d110      	bne.n	800e0c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800e0a0:	f000 fd42 	bl	800eb28 <prvInitialiseTaskLists>
 800e0a4:	e00d      	b.n	800e0c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800e0a6:	4b26      	ldr	r3, [pc, #152]	; (800e140 <prvAddNewTaskToReadyList+0xcc>)
 800e0a8:	681b      	ldr	r3, [r3, #0]
 800e0aa:	2b00      	cmp	r3, #0
 800e0ac:	d109      	bne.n	800e0c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800e0ae:	4b23      	ldr	r3, [pc, #140]	; (800e13c <prvAddNewTaskToReadyList+0xc8>)
 800e0b0:	681b      	ldr	r3, [r3, #0]
 800e0b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0b4:	687b      	ldr	r3, [r7, #4]
 800e0b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0b8:	429a      	cmp	r2, r3
 800e0ba:	d802      	bhi.n	800e0c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800e0bc:	4a1f      	ldr	r2, [pc, #124]	; (800e13c <prvAddNewTaskToReadyList+0xc8>)
 800e0be:	687b      	ldr	r3, [r7, #4]
 800e0c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800e0c2:	4b20      	ldr	r3, [pc, #128]	; (800e144 <prvAddNewTaskToReadyList+0xd0>)
 800e0c4:	681b      	ldr	r3, [r3, #0]
 800e0c6:	3301      	adds	r3, #1
 800e0c8:	4a1e      	ldr	r2, [pc, #120]	; (800e144 <prvAddNewTaskToReadyList+0xd0>)
 800e0ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800e0cc:	4b1d      	ldr	r3, [pc, #116]	; (800e144 <prvAddNewTaskToReadyList+0xd0>)
 800e0ce:	681a      	ldr	r2, [r3, #0]
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800e0d4:	687b      	ldr	r3, [r7, #4]
 800e0d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0d8:	4b1b      	ldr	r3, [pc, #108]	; (800e148 <prvAddNewTaskToReadyList+0xd4>)
 800e0da:	681b      	ldr	r3, [r3, #0]
 800e0dc:	429a      	cmp	r2, r3
 800e0de:	d903      	bls.n	800e0e8 <prvAddNewTaskToReadyList+0x74>
 800e0e0:	687b      	ldr	r3, [r7, #4]
 800e0e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e0e4:	4a18      	ldr	r2, [pc, #96]	; (800e148 <prvAddNewTaskToReadyList+0xd4>)
 800e0e6:	6013      	str	r3, [r2, #0]
 800e0e8:	687b      	ldr	r3, [r7, #4]
 800e0ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e0ec:	4613      	mov	r3, r2
 800e0ee:	009b      	lsls	r3, r3, #2
 800e0f0:	4413      	add	r3, r2
 800e0f2:	009b      	lsls	r3, r3, #2
 800e0f4:	4a15      	ldr	r2, [pc, #84]	; (800e14c <prvAddNewTaskToReadyList+0xd8>)
 800e0f6:	441a      	add	r2, r3
 800e0f8:	687b      	ldr	r3, [r7, #4]
 800e0fa:	3304      	adds	r3, #4
 800e0fc:	4619      	mov	r1, r3
 800e0fe:	4610      	mov	r0, r2
 800e100:	f7fe fd25 	bl	800cb4e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800e104:	f001 fca6 	bl	800fa54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800e108:	4b0d      	ldr	r3, [pc, #52]	; (800e140 <prvAddNewTaskToReadyList+0xcc>)
 800e10a:	681b      	ldr	r3, [r3, #0]
 800e10c:	2b00      	cmp	r3, #0
 800e10e:	d00e      	beq.n	800e12e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800e110:	4b0a      	ldr	r3, [pc, #40]	; (800e13c <prvAddNewTaskToReadyList+0xc8>)
 800e112:	681b      	ldr	r3, [r3, #0]
 800e114:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e116:	687b      	ldr	r3, [r7, #4]
 800e118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e11a:	429a      	cmp	r2, r3
 800e11c:	d207      	bcs.n	800e12e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800e11e:	4b0c      	ldr	r3, [pc, #48]	; (800e150 <prvAddNewTaskToReadyList+0xdc>)
 800e120:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e124:	601a      	str	r2, [r3, #0]
 800e126:	f3bf 8f4f 	dsb	sy
 800e12a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e12e:	bf00      	nop
 800e130:	3708      	adds	r7, #8
 800e132:	46bd      	mov	sp, r7
 800e134:	bd80      	pop	{r7, pc}
 800e136:	bf00      	nop
 800e138:	20007198 	.word	0x20007198
 800e13c:	20006cc4 	.word	0x20006cc4
 800e140:	200071a4 	.word	0x200071a4
 800e144:	200071b4 	.word	0x200071b4
 800e148:	200071a0 	.word	0x200071a0
 800e14c:	20006cc8 	.word	0x20006cc8
 800e150:	e000ed04 	.word	0xe000ed04

0800e154 <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800e154:	b580      	push	{r7, lr}
 800e156:	b08a      	sub	sp, #40	; 0x28
 800e158:	af00      	add	r7, sp, #0
 800e15a:	6078      	str	r0, [r7, #4]
 800e15c:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800e15e:	2300      	movs	r3, #0
 800e160:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2b00      	cmp	r3, #0
 800e166:	d10a      	bne.n	800e17e <vTaskDelayUntil+0x2a>
	__asm volatile
 800e168:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e16c:	f383 8811 	msr	BASEPRI, r3
 800e170:	f3bf 8f6f 	isb	sy
 800e174:	f3bf 8f4f 	dsb	sy
 800e178:	617b      	str	r3, [r7, #20]
}
 800e17a:	bf00      	nop
 800e17c:	e7fe      	b.n	800e17c <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800e17e:	683b      	ldr	r3, [r7, #0]
 800e180:	2b00      	cmp	r3, #0
 800e182:	d10a      	bne.n	800e19a <vTaskDelayUntil+0x46>
	__asm volatile
 800e184:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e188:	f383 8811 	msr	BASEPRI, r3
 800e18c:	f3bf 8f6f 	isb	sy
 800e190:	f3bf 8f4f 	dsb	sy
 800e194:	613b      	str	r3, [r7, #16]
}
 800e196:	bf00      	nop
 800e198:	e7fe      	b.n	800e198 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800e19a:	4b2a      	ldr	r3, [pc, #168]	; (800e244 <vTaskDelayUntil+0xf0>)
 800e19c:	681b      	ldr	r3, [r3, #0]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	d00a      	beq.n	800e1b8 <vTaskDelayUntil+0x64>
	__asm volatile
 800e1a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e1a6:	f383 8811 	msr	BASEPRI, r3
 800e1aa:	f3bf 8f6f 	isb	sy
 800e1ae:	f3bf 8f4f 	dsb	sy
 800e1b2:	60fb      	str	r3, [r7, #12]
}
 800e1b4:	bf00      	nop
 800e1b6:	e7fe      	b.n	800e1b6 <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800e1b8:	f000 f8ee 	bl	800e398 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800e1bc:	4b22      	ldr	r3, [pc, #136]	; (800e248 <vTaskDelayUntil+0xf4>)
 800e1be:	681b      	ldr	r3, [r3, #0]
 800e1c0:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800e1c2:	687b      	ldr	r3, [r7, #4]
 800e1c4:	681b      	ldr	r3, [r3, #0]
 800e1c6:	683a      	ldr	r2, [r7, #0]
 800e1c8:	4413      	add	r3, r2
 800e1ca:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800e1cc:	687b      	ldr	r3, [r7, #4]
 800e1ce:	681b      	ldr	r3, [r3, #0]
 800e1d0:	6a3a      	ldr	r2, [r7, #32]
 800e1d2:	429a      	cmp	r2, r3
 800e1d4:	d20b      	bcs.n	800e1ee <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800e1d6:	687b      	ldr	r3, [r7, #4]
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	69fa      	ldr	r2, [r7, #28]
 800e1dc:	429a      	cmp	r2, r3
 800e1de:	d211      	bcs.n	800e204 <vTaskDelayUntil+0xb0>
 800e1e0:	69fa      	ldr	r2, [r7, #28]
 800e1e2:	6a3b      	ldr	r3, [r7, #32]
 800e1e4:	429a      	cmp	r2, r3
 800e1e6:	d90d      	bls.n	800e204 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e1e8:	2301      	movs	r3, #1
 800e1ea:	627b      	str	r3, [r7, #36]	; 0x24
 800e1ec:	e00a      	b.n	800e204 <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800e1ee:	687b      	ldr	r3, [r7, #4]
 800e1f0:	681b      	ldr	r3, [r3, #0]
 800e1f2:	69fa      	ldr	r2, [r7, #28]
 800e1f4:	429a      	cmp	r2, r3
 800e1f6:	d303      	bcc.n	800e200 <vTaskDelayUntil+0xac>
 800e1f8:	69fa      	ldr	r2, [r7, #28]
 800e1fa:	6a3b      	ldr	r3, [r7, #32]
 800e1fc:	429a      	cmp	r2, r3
 800e1fe:	d901      	bls.n	800e204 <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800e200:	2301      	movs	r3, #1
 800e202:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800e204:	687b      	ldr	r3, [r7, #4]
 800e206:	69fa      	ldr	r2, [r7, #28]
 800e208:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800e20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e20c:	2b00      	cmp	r3, #0
 800e20e:	d006      	beq.n	800e21e <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800e210:	69fa      	ldr	r2, [r7, #28]
 800e212:	6a3b      	ldr	r3, [r7, #32]
 800e214:	1ad3      	subs	r3, r2, r3
 800e216:	2100      	movs	r1, #0
 800e218:	4618      	mov	r0, r3
 800e21a:	f000 fef9 	bl	800f010 <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800e21e:	f000 f8c9 	bl	800e3b4 <xTaskResumeAll>
 800e222:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e224:	69bb      	ldr	r3, [r7, #24]
 800e226:	2b00      	cmp	r3, #0
 800e228:	d107      	bne.n	800e23a <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800e22a:	4b08      	ldr	r3, [pc, #32]	; (800e24c <vTaskDelayUntil+0xf8>)
 800e22c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e230:	601a      	str	r2, [r3, #0]
 800e232:	f3bf 8f4f 	dsb	sy
 800e236:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e23a:	bf00      	nop
 800e23c:	3728      	adds	r7, #40	; 0x28
 800e23e:	46bd      	mov	sp, r7
 800e240:	bd80      	pop	{r7, pc}
 800e242:	bf00      	nop
 800e244:	200071c0 	.word	0x200071c0
 800e248:	2000719c 	.word	0x2000719c
 800e24c:	e000ed04 	.word	0xe000ed04

0800e250 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800e250:	b580      	push	{r7, lr}
 800e252:	b084      	sub	sp, #16
 800e254:	af00      	add	r7, sp, #0
 800e256:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800e258:	2300      	movs	r3, #0
 800e25a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800e25c:	687b      	ldr	r3, [r7, #4]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d017      	beq.n	800e292 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800e262:	4b13      	ldr	r3, [pc, #76]	; (800e2b0 <vTaskDelay+0x60>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	2b00      	cmp	r3, #0
 800e268:	d00a      	beq.n	800e280 <vTaskDelay+0x30>
	__asm volatile
 800e26a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e26e:	f383 8811 	msr	BASEPRI, r3
 800e272:	f3bf 8f6f 	isb	sy
 800e276:	f3bf 8f4f 	dsb	sy
 800e27a:	60bb      	str	r3, [r7, #8]
}
 800e27c:	bf00      	nop
 800e27e:	e7fe      	b.n	800e27e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800e280:	f000 f88a 	bl	800e398 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800e284:	2100      	movs	r1, #0
 800e286:	6878      	ldr	r0, [r7, #4]
 800e288:	f000 fec2 	bl	800f010 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800e28c:	f000 f892 	bl	800e3b4 <xTaskResumeAll>
 800e290:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2b00      	cmp	r3, #0
 800e296:	d107      	bne.n	800e2a8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800e298:	4b06      	ldr	r3, [pc, #24]	; (800e2b4 <vTaskDelay+0x64>)
 800e29a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e29e:	601a      	str	r2, [r3, #0]
 800e2a0:	f3bf 8f4f 	dsb	sy
 800e2a4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800e2a8:	bf00      	nop
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	200071c0 	.word	0x200071c0
 800e2b4:	e000ed04 	.word	0xe000ed04

0800e2b8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800e2b8:	b580      	push	{r7, lr}
 800e2ba:	b08a      	sub	sp, #40	; 0x28
 800e2bc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e2c2:	2300      	movs	r3, #0
 800e2c4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e2c6:	463a      	mov	r2, r7
 800e2c8:	1d39      	adds	r1, r7, #4
 800e2ca:	f107 0308 	add.w	r3, r7, #8
 800e2ce:	4618      	mov	r0, r3
 800e2d0:	f7fe f9ee 	bl	800c6b0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e2d4:	6839      	ldr	r1, [r7, #0]
 800e2d6:	687b      	ldr	r3, [r7, #4]
 800e2d8:	68ba      	ldr	r2, [r7, #8]
 800e2da:	9202      	str	r2, [sp, #8]
 800e2dc:	9301      	str	r3, [sp, #4]
 800e2de:	2300      	movs	r3, #0
 800e2e0:	9300      	str	r3, [sp, #0]
 800e2e2:	2300      	movs	r3, #0
 800e2e4:	460a      	mov	r2, r1
 800e2e6:	4924      	ldr	r1, [pc, #144]	; (800e378 <vTaskStartScheduler+0xc0>)
 800e2e8:	4824      	ldr	r0, [pc, #144]	; (800e37c <vTaskStartScheduler+0xc4>)
 800e2ea:	f7ff fd7b 	bl	800dde4 <xTaskCreateStatic>
 800e2ee:	4603      	mov	r3, r0
 800e2f0:	4a23      	ldr	r2, [pc, #140]	; (800e380 <vTaskStartScheduler+0xc8>)
 800e2f2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800e2f4:	4b22      	ldr	r3, [pc, #136]	; (800e380 <vTaskStartScheduler+0xc8>)
 800e2f6:	681b      	ldr	r3, [r3, #0]
 800e2f8:	2b00      	cmp	r3, #0
 800e2fa:	d002      	beq.n	800e302 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	617b      	str	r3, [r7, #20]
 800e300:	e001      	b.n	800e306 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e302:	2300      	movs	r3, #0
 800e304:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e306:	697b      	ldr	r3, [r7, #20]
 800e308:	2b01      	cmp	r3, #1
 800e30a:	d102      	bne.n	800e312 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e30c:	f000 fed4 	bl	800f0b8 <xTimerCreateTimerTask>
 800e310:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e312:	697b      	ldr	r3, [r7, #20]
 800e314:	2b01      	cmp	r3, #1
 800e316:	d11b      	bne.n	800e350 <vTaskStartScheduler+0x98>
	__asm volatile
 800e318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e31c:	f383 8811 	msr	BASEPRI, r3
 800e320:	f3bf 8f6f 	isb	sy
 800e324:	f3bf 8f4f 	dsb	sy
 800e328:	613b      	str	r3, [r7, #16]
}
 800e32a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e32c:	4b15      	ldr	r3, [pc, #84]	; (800e384 <vTaskStartScheduler+0xcc>)
 800e32e:	681b      	ldr	r3, [r3, #0]
 800e330:	3354      	adds	r3, #84	; 0x54
 800e332:	4a15      	ldr	r2, [pc, #84]	; (800e388 <vTaskStartScheduler+0xd0>)
 800e334:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e336:	4b15      	ldr	r3, [pc, #84]	; (800e38c <vTaskStartScheduler+0xd4>)
 800e338:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e33c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e33e:	4b14      	ldr	r3, [pc, #80]	; (800e390 <vTaskStartScheduler+0xd8>)
 800e340:	2201      	movs	r2, #1
 800e342:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e344:	4b13      	ldr	r3, [pc, #76]	; (800e394 <vTaskStartScheduler+0xdc>)
 800e346:	2200      	movs	r2, #0
 800e348:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e34a:	f001 fab1 	bl	800f8b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e34e:	e00e      	b.n	800e36e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e350:	697b      	ldr	r3, [r7, #20]
 800e352:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e356:	d10a      	bne.n	800e36e <vTaskStartScheduler+0xb6>
	__asm volatile
 800e358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e35c:	f383 8811 	msr	BASEPRI, r3
 800e360:	f3bf 8f6f 	isb	sy
 800e364:	f3bf 8f4f 	dsb	sy
 800e368:	60fb      	str	r3, [r7, #12]
}
 800e36a:	bf00      	nop
 800e36c:	e7fe      	b.n	800e36c <vTaskStartScheduler+0xb4>
}
 800e36e:	bf00      	nop
 800e370:	3718      	adds	r7, #24
 800e372:	46bd      	mov	sp, r7
 800e374:	bd80      	pop	{r7, pc}
 800e376:	bf00      	nop
 800e378:	08012978 	.word	0x08012978
 800e37c:	0800eaf9 	.word	0x0800eaf9
 800e380:	200071bc 	.word	0x200071bc
 800e384:	20006cc4 	.word	0x20006cc4
 800e388:	2000005c 	.word	0x2000005c
 800e38c:	200071b8 	.word	0x200071b8
 800e390:	200071a4 	.word	0x200071a4
 800e394:	2000719c 	.word	0x2000719c

0800e398 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e398:	b480      	push	{r7}
 800e39a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800e39c:	4b04      	ldr	r3, [pc, #16]	; (800e3b0 <vTaskSuspendAll+0x18>)
 800e39e:	681b      	ldr	r3, [r3, #0]
 800e3a0:	3301      	adds	r3, #1
 800e3a2:	4a03      	ldr	r2, [pc, #12]	; (800e3b0 <vTaskSuspendAll+0x18>)
 800e3a4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800e3a6:	bf00      	nop
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e3ae:	4770      	bx	lr
 800e3b0:	200071c0 	.word	0x200071c0

0800e3b4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e3b4:	b580      	push	{r7, lr}
 800e3b6:	b084      	sub	sp, #16
 800e3b8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e3ba:	2300      	movs	r3, #0
 800e3bc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e3be:	2300      	movs	r3, #0
 800e3c0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e3c2:	4b42      	ldr	r3, [pc, #264]	; (800e4cc <xTaskResumeAll+0x118>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d10a      	bne.n	800e3e0 <xTaskResumeAll+0x2c>
	__asm volatile
 800e3ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3ce:	f383 8811 	msr	BASEPRI, r3
 800e3d2:	f3bf 8f6f 	isb	sy
 800e3d6:	f3bf 8f4f 	dsb	sy
 800e3da:	603b      	str	r3, [r7, #0]
}
 800e3dc:	bf00      	nop
 800e3de:	e7fe      	b.n	800e3de <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e3e0:	f001 fb08 	bl	800f9f4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e3e4:	4b39      	ldr	r3, [pc, #228]	; (800e4cc <xTaskResumeAll+0x118>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	3b01      	subs	r3, #1
 800e3ea:	4a38      	ldr	r2, [pc, #224]	; (800e4cc <xTaskResumeAll+0x118>)
 800e3ec:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e3ee:	4b37      	ldr	r3, [pc, #220]	; (800e4cc <xTaskResumeAll+0x118>)
 800e3f0:	681b      	ldr	r3, [r3, #0]
 800e3f2:	2b00      	cmp	r3, #0
 800e3f4:	d162      	bne.n	800e4bc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e3f6:	4b36      	ldr	r3, [pc, #216]	; (800e4d0 <xTaskResumeAll+0x11c>)
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	2b00      	cmp	r3, #0
 800e3fc:	d05e      	beq.n	800e4bc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e3fe:	e02f      	b.n	800e460 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e400:	4b34      	ldr	r3, [pc, #208]	; (800e4d4 <xTaskResumeAll+0x120>)
 800e402:	68db      	ldr	r3, [r3, #12]
 800e404:	68db      	ldr	r3, [r3, #12]
 800e406:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e408:	68fb      	ldr	r3, [r7, #12]
 800e40a:	3318      	adds	r3, #24
 800e40c:	4618      	mov	r0, r3
 800e40e:	f7fe fbfb 	bl	800cc08 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e412:	68fb      	ldr	r3, [r7, #12]
 800e414:	3304      	adds	r3, #4
 800e416:	4618      	mov	r0, r3
 800e418:	f7fe fbf6 	bl	800cc08 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e41c:	68fb      	ldr	r3, [r7, #12]
 800e41e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e420:	4b2d      	ldr	r3, [pc, #180]	; (800e4d8 <xTaskResumeAll+0x124>)
 800e422:	681b      	ldr	r3, [r3, #0]
 800e424:	429a      	cmp	r2, r3
 800e426:	d903      	bls.n	800e430 <xTaskResumeAll+0x7c>
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e42c:	4a2a      	ldr	r2, [pc, #168]	; (800e4d8 <xTaskResumeAll+0x124>)
 800e42e:	6013      	str	r3, [r2, #0]
 800e430:	68fb      	ldr	r3, [r7, #12]
 800e432:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e434:	4613      	mov	r3, r2
 800e436:	009b      	lsls	r3, r3, #2
 800e438:	4413      	add	r3, r2
 800e43a:	009b      	lsls	r3, r3, #2
 800e43c:	4a27      	ldr	r2, [pc, #156]	; (800e4dc <xTaskResumeAll+0x128>)
 800e43e:	441a      	add	r2, r3
 800e440:	68fb      	ldr	r3, [r7, #12]
 800e442:	3304      	adds	r3, #4
 800e444:	4619      	mov	r1, r3
 800e446:	4610      	mov	r0, r2
 800e448:	f7fe fb81 	bl	800cb4e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e44c:	68fb      	ldr	r3, [r7, #12]
 800e44e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e450:	4b23      	ldr	r3, [pc, #140]	; (800e4e0 <xTaskResumeAll+0x12c>)
 800e452:	681b      	ldr	r3, [r3, #0]
 800e454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e456:	429a      	cmp	r2, r3
 800e458:	d302      	bcc.n	800e460 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800e45a:	4b22      	ldr	r3, [pc, #136]	; (800e4e4 <xTaskResumeAll+0x130>)
 800e45c:	2201      	movs	r2, #1
 800e45e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e460:	4b1c      	ldr	r3, [pc, #112]	; (800e4d4 <xTaskResumeAll+0x120>)
 800e462:	681b      	ldr	r3, [r3, #0]
 800e464:	2b00      	cmp	r3, #0
 800e466:	d1cb      	bne.n	800e400 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e468:	68fb      	ldr	r3, [r7, #12]
 800e46a:	2b00      	cmp	r3, #0
 800e46c:	d001      	beq.n	800e472 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e46e:	f000 fbfd 	bl	800ec6c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e472:	4b1d      	ldr	r3, [pc, #116]	; (800e4e8 <xTaskResumeAll+0x134>)
 800e474:	681b      	ldr	r3, [r3, #0]
 800e476:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800e478:	687b      	ldr	r3, [r7, #4]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d010      	beq.n	800e4a0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e47e:	f000 f847 	bl	800e510 <xTaskIncrementTick>
 800e482:	4603      	mov	r3, r0
 800e484:	2b00      	cmp	r3, #0
 800e486:	d002      	beq.n	800e48e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800e488:	4b16      	ldr	r3, [pc, #88]	; (800e4e4 <xTaskResumeAll+0x130>)
 800e48a:	2201      	movs	r2, #1
 800e48c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800e48e:	687b      	ldr	r3, [r7, #4]
 800e490:	3b01      	subs	r3, #1
 800e492:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e494:	687b      	ldr	r3, [r7, #4]
 800e496:	2b00      	cmp	r3, #0
 800e498:	d1f1      	bne.n	800e47e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800e49a:	4b13      	ldr	r3, [pc, #76]	; (800e4e8 <xTaskResumeAll+0x134>)
 800e49c:	2200      	movs	r2, #0
 800e49e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e4a0:	4b10      	ldr	r3, [pc, #64]	; (800e4e4 <xTaskResumeAll+0x130>)
 800e4a2:	681b      	ldr	r3, [r3, #0]
 800e4a4:	2b00      	cmp	r3, #0
 800e4a6:	d009      	beq.n	800e4bc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e4a8:	2301      	movs	r3, #1
 800e4aa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e4ac:	4b0f      	ldr	r3, [pc, #60]	; (800e4ec <xTaskResumeAll+0x138>)
 800e4ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e4b2:	601a      	str	r2, [r3, #0]
 800e4b4:	f3bf 8f4f 	dsb	sy
 800e4b8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e4bc:	f001 faca 	bl	800fa54 <vPortExitCritical>

	return xAlreadyYielded;
 800e4c0:	68bb      	ldr	r3, [r7, #8]
}
 800e4c2:	4618      	mov	r0, r3
 800e4c4:	3710      	adds	r7, #16
 800e4c6:	46bd      	mov	sp, r7
 800e4c8:	bd80      	pop	{r7, pc}
 800e4ca:	bf00      	nop
 800e4cc:	200071c0 	.word	0x200071c0
 800e4d0:	20007198 	.word	0x20007198
 800e4d4:	20007158 	.word	0x20007158
 800e4d8:	200071a0 	.word	0x200071a0
 800e4dc:	20006cc8 	.word	0x20006cc8
 800e4e0:	20006cc4 	.word	0x20006cc4
 800e4e4:	200071ac 	.word	0x200071ac
 800e4e8:	200071a8 	.word	0x200071a8
 800e4ec:	e000ed04 	.word	0xe000ed04

0800e4f0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e4f0:	b480      	push	{r7}
 800e4f2:	b083      	sub	sp, #12
 800e4f4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e4f6:	4b05      	ldr	r3, [pc, #20]	; (800e50c <xTaskGetTickCount+0x1c>)
 800e4f8:	681b      	ldr	r3, [r3, #0]
 800e4fa:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e4fc:	687b      	ldr	r3, [r7, #4]
}
 800e4fe:	4618      	mov	r0, r3
 800e500:	370c      	adds	r7, #12
 800e502:	46bd      	mov	sp, r7
 800e504:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e508:	4770      	bx	lr
 800e50a:	bf00      	nop
 800e50c:	2000719c 	.word	0x2000719c

0800e510 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e510:	b580      	push	{r7, lr}
 800e512:	b086      	sub	sp, #24
 800e514:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e516:	2300      	movs	r3, #0
 800e518:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e51a:	4b4f      	ldr	r3, [pc, #316]	; (800e658 <xTaskIncrementTick+0x148>)
 800e51c:	681b      	ldr	r3, [r3, #0]
 800e51e:	2b00      	cmp	r3, #0
 800e520:	f040 808f 	bne.w	800e642 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e524:	4b4d      	ldr	r3, [pc, #308]	; (800e65c <xTaskIncrementTick+0x14c>)
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	3301      	adds	r3, #1
 800e52a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e52c:	4a4b      	ldr	r2, [pc, #300]	; (800e65c <xTaskIncrementTick+0x14c>)
 800e52e:	693b      	ldr	r3, [r7, #16]
 800e530:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e532:	693b      	ldr	r3, [r7, #16]
 800e534:	2b00      	cmp	r3, #0
 800e536:	d120      	bne.n	800e57a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800e538:	4b49      	ldr	r3, [pc, #292]	; (800e660 <xTaskIncrementTick+0x150>)
 800e53a:	681b      	ldr	r3, [r3, #0]
 800e53c:	681b      	ldr	r3, [r3, #0]
 800e53e:	2b00      	cmp	r3, #0
 800e540:	d00a      	beq.n	800e558 <xTaskIncrementTick+0x48>
	__asm volatile
 800e542:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e546:	f383 8811 	msr	BASEPRI, r3
 800e54a:	f3bf 8f6f 	isb	sy
 800e54e:	f3bf 8f4f 	dsb	sy
 800e552:	603b      	str	r3, [r7, #0]
}
 800e554:	bf00      	nop
 800e556:	e7fe      	b.n	800e556 <xTaskIncrementTick+0x46>
 800e558:	4b41      	ldr	r3, [pc, #260]	; (800e660 <xTaskIncrementTick+0x150>)
 800e55a:	681b      	ldr	r3, [r3, #0]
 800e55c:	60fb      	str	r3, [r7, #12]
 800e55e:	4b41      	ldr	r3, [pc, #260]	; (800e664 <xTaskIncrementTick+0x154>)
 800e560:	681b      	ldr	r3, [r3, #0]
 800e562:	4a3f      	ldr	r2, [pc, #252]	; (800e660 <xTaskIncrementTick+0x150>)
 800e564:	6013      	str	r3, [r2, #0]
 800e566:	4a3f      	ldr	r2, [pc, #252]	; (800e664 <xTaskIncrementTick+0x154>)
 800e568:	68fb      	ldr	r3, [r7, #12]
 800e56a:	6013      	str	r3, [r2, #0]
 800e56c:	4b3e      	ldr	r3, [pc, #248]	; (800e668 <xTaskIncrementTick+0x158>)
 800e56e:	681b      	ldr	r3, [r3, #0]
 800e570:	3301      	adds	r3, #1
 800e572:	4a3d      	ldr	r2, [pc, #244]	; (800e668 <xTaskIncrementTick+0x158>)
 800e574:	6013      	str	r3, [r2, #0]
 800e576:	f000 fb79 	bl	800ec6c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e57a:	4b3c      	ldr	r3, [pc, #240]	; (800e66c <xTaskIncrementTick+0x15c>)
 800e57c:	681b      	ldr	r3, [r3, #0]
 800e57e:	693a      	ldr	r2, [r7, #16]
 800e580:	429a      	cmp	r2, r3
 800e582:	d349      	bcc.n	800e618 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e584:	4b36      	ldr	r3, [pc, #216]	; (800e660 <xTaskIncrementTick+0x150>)
 800e586:	681b      	ldr	r3, [r3, #0]
 800e588:	681b      	ldr	r3, [r3, #0]
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d104      	bne.n	800e598 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e58e:	4b37      	ldr	r3, [pc, #220]	; (800e66c <xTaskIncrementTick+0x15c>)
 800e590:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e594:	601a      	str	r2, [r3, #0]
					break;
 800e596:	e03f      	b.n	800e618 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e598:	4b31      	ldr	r3, [pc, #196]	; (800e660 <xTaskIncrementTick+0x150>)
 800e59a:	681b      	ldr	r3, [r3, #0]
 800e59c:	68db      	ldr	r3, [r3, #12]
 800e59e:	68db      	ldr	r3, [r3, #12]
 800e5a0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e5a2:	68bb      	ldr	r3, [r7, #8]
 800e5a4:	685b      	ldr	r3, [r3, #4]
 800e5a6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e5a8:	693a      	ldr	r2, [r7, #16]
 800e5aa:	687b      	ldr	r3, [r7, #4]
 800e5ac:	429a      	cmp	r2, r3
 800e5ae:	d203      	bcs.n	800e5b8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e5b0:	4a2e      	ldr	r2, [pc, #184]	; (800e66c <xTaskIncrementTick+0x15c>)
 800e5b2:	687b      	ldr	r3, [r7, #4]
 800e5b4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e5b6:	e02f      	b.n	800e618 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e5b8:	68bb      	ldr	r3, [r7, #8]
 800e5ba:	3304      	adds	r3, #4
 800e5bc:	4618      	mov	r0, r3
 800e5be:	f7fe fb23 	bl	800cc08 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e5c2:	68bb      	ldr	r3, [r7, #8]
 800e5c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d004      	beq.n	800e5d4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e5ca:	68bb      	ldr	r3, [r7, #8]
 800e5cc:	3318      	adds	r3, #24
 800e5ce:	4618      	mov	r0, r3
 800e5d0:	f7fe fb1a 	bl	800cc08 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e5d4:	68bb      	ldr	r3, [r7, #8]
 800e5d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5d8:	4b25      	ldr	r3, [pc, #148]	; (800e670 <xTaskIncrementTick+0x160>)
 800e5da:	681b      	ldr	r3, [r3, #0]
 800e5dc:	429a      	cmp	r2, r3
 800e5de:	d903      	bls.n	800e5e8 <xTaskIncrementTick+0xd8>
 800e5e0:	68bb      	ldr	r3, [r7, #8]
 800e5e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e5e4:	4a22      	ldr	r2, [pc, #136]	; (800e670 <xTaskIncrementTick+0x160>)
 800e5e6:	6013      	str	r3, [r2, #0]
 800e5e8:	68bb      	ldr	r3, [r7, #8]
 800e5ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e5ec:	4613      	mov	r3, r2
 800e5ee:	009b      	lsls	r3, r3, #2
 800e5f0:	4413      	add	r3, r2
 800e5f2:	009b      	lsls	r3, r3, #2
 800e5f4:	4a1f      	ldr	r2, [pc, #124]	; (800e674 <xTaskIncrementTick+0x164>)
 800e5f6:	441a      	add	r2, r3
 800e5f8:	68bb      	ldr	r3, [r7, #8]
 800e5fa:	3304      	adds	r3, #4
 800e5fc:	4619      	mov	r1, r3
 800e5fe:	4610      	mov	r0, r2
 800e600:	f7fe faa5 	bl	800cb4e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e604:	68bb      	ldr	r3, [r7, #8]
 800e606:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e608:	4b1b      	ldr	r3, [pc, #108]	; (800e678 <xTaskIncrementTick+0x168>)
 800e60a:	681b      	ldr	r3, [r3, #0]
 800e60c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e60e:	429a      	cmp	r2, r3
 800e610:	d3b8      	bcc.n	800e584 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800e612:	2301      	movs	r3, #1
 800e614:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e616:	e7b5      	b.n	800e584 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e618:	4b17      	ldr	r3, [pc, #92]	; (800e678 <xTaskIncrementTick+0x168>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e61e:	4915      	ldr	r1, [pc, #84]	; (800e674 <xTaskIncrementTick+0x164>)
 800e620:	4613      	mov	r3, r2
 800e622:	009b      	lsls	r3, r3, #2
 800e624:	4413      	add	r3, r2
 800e626:	009b      	lsls	r3, r3, #2
 800e628:	440b      	add	r3, r1
 800e62a:	681b      	ldr	r3, [r3, #0]
 800e62c:	2b01      	cmp	r3, #1
 800e62e:	d901      	bls.n	800e634 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800e630:	2301      	movs	r3, #1
 800e632:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800e634:	4b11      	ldr	r3, [pc, #68]	; (800e67c <xTaskIncrementTick+0x16c>)
 800e636:	681b      	ldr	r3, [r3, #0]
 800e638:	2b00      	cmp	r3, #0
 800e63a:	d007      	beq.n	800e64c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800e63c:	2301      	movs	r3, #1
 800e63e:	617b      	str	r3, [r7, #20]
 800e640:	e004      	b.n	800e64c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800e642:	4b0f      	ldr	r3, [pc, #60]	; (800e680 <xTaskIncrementTick+0x170>)
 800e644:	681b      	ldr	r3, [r3, #0]
 800e646:	3301      	adds	r3, #1
 800e648:	4a0d      	ldr	r2, [pc, #52]	; (800e680 <xTaskIncrementTick+0x170>)
 800e64a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800e64c:	697b      	ldr	r3, [r7, #20]
}
 800e64e:	4618      	mov	r0, r3
 800e650:	3718      	adds	r7, #24
 800e652:	46bd      	mov	sp, r7
 800e654:	bd80      	pop	{r7, pc}
 800e656:	bf00      	nop
 800e658:	200071c0 	.word	0x200071c0
 800e65c:	2000719c 	.word	0x2000719c
 800e660:	20007150 	.word	0x20007150
 800e664:	20007154 	.word	0x20007154
 800e668:	200071b0 	.word	0x200071b0
 800e66c:	200071b8 	.word	0x200071b8
 800e670:	200071a0 	.word	0x200071a0
 800e674:	20006cc8 	.word	0x20006cc8
 800e678:	20006cc4 	.word	0x20006cc4
 800e67c:	200071ac 	.word	0x200071ac
 800e680:	200071a8 	.word	0x200071a8

0800e684 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e684:	b480      	push	{r7}
 800e686:	b085      	sub	sp, #20
 800e688:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e68a:	4b2a      	ldr	r3, [pc, #168]	; (800e734 <vTaskSwitchContext+0xb0>)
 800e68c:	681b      	ldr	r3, [r3, #0]
 800e68e:	2b00      	cmp	r3, #0
 800e690:	d003      	beq.n	800e69a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e692:	4b29      	ldr	r3, [pc, #164]	; (800e738 <vTaskSwitchContext+0xb4>)
 800e694:	2201      	movs	r2, #1
 800e696:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e698:	e046      	b.n	800e728 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800e69a:	4b27      	ldr	r3, [pc, #156]	; (800e738 <vTaskSwitchContext+0xb4>)
 800e69c:	2200      	movs	r2, #0
 800e69e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e6a0:	4b26      	ldr	r3, [pc, #152]	; (800e73c <vTaskSwitchContext+0xb8>)
 800e6a2:	681b      	ldr	r3, [r3, #0]
 800e6a4:	60fb      	str	r3, [r7, #12]
 800e6a6:	e010      	b.n	800e6ca <vTaskSwitchContext+0x46>
 800e6a8:	68fb      	ldr	r3, [r7, #12]
 800e6aa:	2b00      	cmp	r3, #0
 800e6ac:	d10a      	bne.n	800e6c4 <vTaskSwitchContext+0x40>
	__asm volatile
 800e6ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6b2:	f383 8811 	msr	BASEPRI, r3
 800e6b6:	f3bf 8f6f 	isb	sy
 800e6ba:	f3bf 8f4f 	dsb	sy
 800e6be:	607b      	str	r3, [r7, #4]
}
 800e6c0:	bf00      	nop
 800e6c2:	e7fe      	b.n	800e6c2 <vTaskSwitchContext+0x3e>
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	3b01      	subs	r3, #1
 800e6c8:	60fb      	str	r3, [r7, #12]
 800e6ca:	491d      	ldr	r1, [pc, #116]	; (800e740 <vTaskSwitchContext+0xbc>)
 800e6cc:	68fa      	ldr	r2, [r7, #12]
 800e6ce:	4613      	mov	r3, r2
 800e6d0:	009b      	lsls	r3, r3, #2
 800e6d2:	4413      	add	r3, r2
 800e6d4:	009b      	lsls	r3, r3, #2
 800e6d6:	440b      	add	r3, r1
 800e6d8:	681b      	ldr	r3, [r3, #0]
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d0e4      	beq.n	800e6a8 <vTaskSwitchContext+0x24>
 800e6de:	68fa      	ldr	r2, [r7, #12]
 800e6e0:	4613      	mov	r3, r2
 800e6e2:	009b      	lsls	r3, r3, #2
 800e6e4:	4413      	add	r3, r2
 800e6e6:	009b      	lsls	r3, r3, #2
 800e6e8:	4a15      	ldr	r2, [pc, #84]	; (800e740 <vTaskSwitchContext+0xbc>)
 800e6ea:	4413      	add	r3, r2
 800e6ec:	60bb      	str	r3, [r7, #8]
 800e6ee:	68bb      	ldr	r3, [r7, #8]
 800e6f0:	685b      	ldr	r3, [r3, #4]
 800e6f2:	685a      	ldr	r2, [r3, #4]
 800e6f4:	68bb      	ldr	r3, [r7, #8]
 800e6f6:	605a      	str	r2, [r3, #4]
 800e6f8:	68bb      	ldr	r3, [r7, #8]
 800e6fa:	685a      	ldr	r2, [r3, #4]
 800e6fc:	68bb      	ldr	r3, [r7, #8]
 800e6fe:	3308      	adds	r3, #8
 800e700:	429a      	cmp	r2, r3
 800e702:	d104      	bne.n	800e70e <vTaskSwitchContext+0x8a>
 800e704:	68bb      	ldr	r3, [r7, #8]
 800e706:	685b      	ldr	r3, [r3, #4]
 800e708:	685a      	ldr	r2, [r3, #4]
 800e70a:	68bb      	ldr	r3, [r7, #8]
 800e70c:	605a      	str	r2, [r3, #4]
 800e70e:	68bb      	ldr	r3, [r7, #8]
 800e710:	685b      	ldr	r3, [r3, #4]
 800e712:	68db      	ldr	r3, [r3, #12]
 800e714:	4a0b      	ldr	r2, [pc, #44]	; (800e744 <vTaskSwitchContext+0xc0>)
 800e716:	6013      	str	r3, [r2, #0]
 800e718:	4a08      	ldr	r2, [pc, #32]	; (800e73c <vTaskSwitchContext+0xb8>)
 800e71a:	68fb      	ldr	r3, [r7, #12]
 800e71c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e71e:	4b09      	ldr	r3, [pc, #36]	; (800e744 <vTaskSwitchContext+0xc0>)
 800e720:	681b      	ldr	r3, [r3, #0]
 800e722:	3354      	adds	r3, #84	; 0x54
 800e724:	4a08      	ldr	r2, [pc, #32]	; (800e748 <vTaskSwitchContext+0xc4>)
 800e726:	6013      	str	r3, [r2, #0]
}
 800e728:	bf00      	nop
 800e72a:	3714      	adds	r7, #20
 800e72c:	46bd      	mov	sp, r7
 800e72e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e732:	4770      	bx	lr
 800e734:	200071c0 	.word	0x200071c0
 800e738:	200071ac 	.word	0x200071ac
 800e73c:	200071a0 	.word	0x200071a0
 800e740:	20006cc8 	.word	0x20006cc8
 800e744:	20006cc4 	.word	0x20006cc4
 800e748:	2000005c 	.word	0x2000005c

0800e74c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e74c:	b580      	push	{r7, lr}
 800e74e:	b084      	sub	sp, #16
 800e750:	af00      	add	r7, sp, #0
 800e752:	6078      	str	r0, [r7, #4]
 800e754:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2b00      	cmp	r3, #0
 800e75a:	d10a      	bne.n	800e772 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800e75c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e760:	f383 8811 	msr	BASEPRI, r3
 800e764:	f3bf 8f6f 	isb	sy
 800e768:	f3bf 8f4f 	dsb	sy
 800e76c:	60fb      	str	r3, [r7, #12]
}
 800e76e:	bf00      	nop
 800e770:	e7fe      	b.n	800e770 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e772:	4b07      	ldr	r3, [pc, #28]	; (800e790 <vTaskPlaceOnEventList+0x44>)
 800e774:	681b      	ldr	r3, [r3, #0]
 800e776:	3318      	adds	r3, #24
 800e778:	4619      	mov	r1, r3
 800e77a:	6878      	ldr	r0, [r7, #4]
 800e77c:	f7fe fa0b 	bl	800cb96 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e780:	2101      	movs	r1, #1
 800e782:	6838      	ldr	r0, [r7, #0]
 800e784:	f000 fc44 	bl	800f010 <prvAddCurrentTaskToDelayedList>
}
 800e788:	bf00      	nop
 800e78a:	3710      	adds	r7, #16
 800e78c:	46bd      	mov	sp, r7
 800e78e:	bd80      	pop	{r7, pc}
 800e790:	20006cc4 	.word	0x20006cc4

0800e794 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 800e794:	b580      	push	{r7, lr}
 800e796:	b086      	sub	sp, #24
 800e798:	af00      	add	r7, sp, #0
 800e79a:	60f8      	str	r0, [r7, #12]
 800e79c:	60b9      	str	r1, [r7, #8]
 800e79e:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 800e7a0:	68fb      	ldr	r3, [r7, #12]
 800e7a2:	2b00      	cmp	r3, #0
 800e7a4:	d10a      	bne.n	800e7bc <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 800e7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7aa:	f383 8811 	msr	BASEPRI, r3
 800e7ae:	f3bf 8f6f 	isb	sy
 800e7b2:	f3bf 8f4f 	dsb	sy
 800e7b6:	617b      	str	r3, [r7, #20]
}
 800e7b8:	bf00      	nop
 800e7ba:	e7fe      	b.n	800e7ba <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 800e7bc:	4b11      	ldr	r3, [pc, #68]	; (800e804 <vTaskPlaceOnUnorderedEventList+0x70>)
 800e7be:	681b      	ldr	r3, [r3, #0]
 800e7c0:	2b00      	cmp	r3, #0
 800e7c2:	d10a      	bne.n	800e7da <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 800e7c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7c8:	f383 8811 	msr	BASEPRI, r3
 800e7cc:	f3bf 8f6f 	isb	sy
 800e7d0:	f3bf 8f4f 	dsb	sy
 800e7d4:	613b      	str	r3, [r7, #16]
}
 800e7d6:	bf00      	nop
 800e7d8:	e7fe      	b.n	800e7d8 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e7da:	4b0b      	ldr	r3, [pc, #44]	; (800e808 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e7dc:	681b      	ldr	r3, [r3, #0]
 800e7de:	68ba      	ldr	r2, [r7, #8]
 800e7e0:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 800e7e4:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e7e6:	4b08      	ldr	r3, [pc, #32]	; (800e808 <vTaskPlaceOnUnorderedEventList+0x74>)
 800e7e8:	681b      	ldr	r3, [r3, #0]
 800e7ea:	3318      	adds	r3, #24
 800e7ec:	4619      	mov	r1, r3
 800e7ee:	68f8      	ldr	r0, [r7, #12]
 800e7f0:	f7fe f9ad 	bl	800cb4e <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e7f4:	2101      	movs	r1, #1
 800e7f6:	6878      	ldr	r0, [r7, #4]
 800e7f8:	f000 fc0a 	bl	800f010 <prvAddCurrentTaskToDelayedList>
}
 800e7fc:	bf00      	nop
 800e7fe:	3718      	adds	r7, #24
 800e800:	46bd      	mov	sp, r7
 800e802:	bd80      	pop	{r7, pc}
 800e804:	200071c0 	.word	0x200071c0
 800e808:	20006cc4 	.word	0x20006cc4

0800e80c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b086      	sub	sp, #24
 800e810:	af00      	add	r7, sp, #0
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e818:	68fb      	ldr	r3, [r7, #12]
 800e81a:	2b00      	cmp	r3, #0
 800e81c:	d10a      	bne.n	800e834 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800e81e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e822:	f383 8811 	msr	BASEPRI, r3
 800e826:	f3bf 8f6f 	isb	sy
 800e82a:	f3bf 8f4f 	dsb	sy
 800e82e:	617b      	str	r3, [r7, #20]
}
 800e830:	bf00      	nop
 800e832:	e7fe      	b.n	800e832 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e834:	4b0a      	ldr	r3, [pc, #40]	; (800e860 <vTaskPlaceOnEventListRestricted+0x54>)
 800e836:	681b      	ldr	r3, [r3, #0]
 800e838:	3318      	adds	r3, #24
 800e83a:	4619      	mov	r1, r3
 800e83c:	68f8      	ldr	r0, [r7, #12]
 800e83e:	f7fe f986 	bl	800cb4e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e842:	687b      	ldr	r3, [r7, #4]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d002      	beq.n	800e84e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800e848:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e84c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e84e:	6879      	ldr	r1, [r7, #4]
 800e850:	68b8      	ldr	r0, [r7, #8]
 800e852:	f000 fbdd 	bl	800f010 <prvAddCurrentTaskToDelayedList>
	}
 800e856:	bf00      	nop
 800e858:	3718      	adds	r7, #24
 800e85a:	46bd      	mov	sp, r7
 800e85c:	bd80      	pop	{r7, pc}
 800e85e:	bf00      	nop
 800e860:	20006cc4 	.word	0x20006cc4

0800e864 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e864:	b580      	push	{r7, lr}
 800e866:	b086      	sub	sp, #24
 800e868:	af00      	add	r7, sp, #0
 800e86a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	68db      	ldr	r3, [r3, #12]
 800e870:	68db      	ldr	r3, [r3, #12]
 800e872:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e874:	693b      	ldr	r3, [r7, #16]
 800e876:	2b00      	cmp	r3, #0
 800e878:	d10a      	bne.n	800e890 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800e87a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e87e:	f383 8811 	msr	BASEPRI, r3
 800e882:	f3bf 8f6f 	isb	sy
 800e886:	f3bf 8f4f 	dsb	sy
 800e88a:	60fb      	str	r3, [r7, #12]
}
 800e88c:	bf00      	nop
 800e88e:	e7fe      	b.n	800e88e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	3318      	adds	r3, #24
 800e894:	4618      	mov	r0, r3
 800e896:	f7fe f9b7 	bl	800cc08 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e89a:	4b1e      	ldr	r3, [pc, #120]	; (800e914 <xTaskRemoveFromEventList+0xb0>)
 800e89c:	681b      	ldr	r3, [r3, #0]
 800e89e:	2b00      	cmp	r3, #0
 800e8a0:	d11d      	bne.n	800e8de <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e8a2:	693b      	ldr	r3, [r7, #16]
 800e8a4:	3304      	adds	r3, #4
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f7fe f9ae 	bl	800cc08 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8b0:	4b19      	ldr	r3, [pc, #100]	; (800e918 <xTaskRemoveFromEventList+0xb4>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	429a      	cmp	r2, r3
 800e8b6:	d903      	bls.n	800e8c0 <xTaskRemoveFromEventList+0x5c>
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8bc:	4a16      	ldr	r2, [pc, #88]	; (800e918 <xTaskRemoveFromEventList+0xb4>)
 800e8be:	6013      	str	r3, [r2, #0]
 800e8c0:	693b      	ldr	r3, [r7, #16]
 800e8c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8c4:	4613      	mov	r3, r2
 800e8c6:	009b      	lsls	r3, r3, #2
 800e8c8:	4413      	add	r3, r2
 800e8ca:	009b      	lsls	r3, r3, #2
 800e8cc:	4a13      	ldr	r2, [pc, #76]	; (800e91c <xTaskRemoveFromEventList+0xb8>)
 800e8ce:	441a      	add	r2, r3
 800e8d0:	693b      	ldr	r3, [r7, #16]
 800e8d2:	3304      	adds	r3, #4
 800e8d4:	4619      	mov	r1, r3
 800e8d6:	4610      	mov	r0, r2
 800e8d8:	f7fe f939 	bl	800cb4e <vListInsertEnd>
 800e8dc:	e005      	b.n	800e8ea <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e8de:	693b      	ldr	r3, [r7, #16]
 800e8e0:	3318      	adds	r3, #24
 800e8e2:	4619      	mov	r1, r3
 800e8e4:	480e      	ldr	r0, [pc, #56]	; (800e920 <xTaskRemoveFromEventList+0xbc>)
 800e8e6:	f7fe f932 	bl	800cb4e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e8ea:	693b      	ldr	r3, [r7, #16]
 800e8ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8ee:	4b0d      	ldr	r3, [pc, #52]	; (800e924 <xTaskRemoveFromEventList+0xc0>)
 800e8f0:	681b      	ldr	r3, [r3, #0]
 800e8f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8f4:	429a      	cmp	r2, r3
 800e8f6:	d905      	bls.n	800e904 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e8f8:	2301      	movs	r3, #1
 800e8fa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e8fc:	4b0a      	ldr	r3, [pc, #40]	; (800e928 <xTaskRemoveFromEventList+0xc4>)
 800e8fe:	2201      	movs	r2, #1
 800e900:	601a      	str	r2, [r3, #0]
 800e902:	e001      	b.n	800e908 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800e904:	2300      	movs	r3, #0
 800e906:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e908:	697b      	ldr	r3, [r7, #20]
}
 800e90a:	4618      	mov	r0, r3
 800e90c:	3718      	adds	r7, #24
 800e90e:	46bd      	mov	sp, r7
 800e910:	bd80      	pop	{r7, pc}
 800e912:	bf00      	nop
 800e914:	200071c0 	.word	0x200071c0
 800e918:	200071a0 	.word	0x200071a0
 800e91c:	20006cc8 	.word	0x20006cc8
 800e920:	20007158 	.word	0x20007158
 800e924:	20006cc4 	.word	0x20006cc4
 800e928:	200071ac 	.word	0x200071ac

0800e92c <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 800e92c:	b580      	push	{r7, lr}
 800e92e:	b086      	sub	sp, #24
 800e930:	af00      	add	r7, sp, #0
 800e932:	6078      	str	r0, [r7, #4]
 800e934:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 800e936:	4b29      	ldr	r3, [pc, #164]	; (800e9dc <vTaskRemoveFromUnorderedEventList+0xb0>)
 800e938:	681b      	ldr	r3, [r3, #0]
 800e93a:	2b00      	cmp	r3, #0
 800e93c:	d10a      	bne.n	800e954 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 800e93e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e942:	f383 8811 	msr	BASEPRI, r3
 800e946:	f3bf 8f6f 	isb	sy
 800e94a:	f3bf 8f4f 	dsb	sy
 800e94e:	613b      	str	r3, [r7, #16]
}
 800e950:	bf00      	nop
 800e952:	e7fe      	b.n	800e952 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 800e954:	683b      	ldr	r3, [r7, #0]
 800e956:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800e95a:	687b      	ldr	r3, [r7, #4]
 800e95c:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	68db      	ldr	r3, [r3, #12]
 800e962:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 800e964:	697b      	ldr	r3, [r7, #20]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d10a      	bne.n	800e980 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 800e96a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e96e:	f383 8811 	msr	BASEPRI, r3
 800e972:	f3bf 8f6f 	isb	sy
 800e976:	f3bf 8f4f 	dsb	sy
 800e97a:	60fb      	str	r3, [r7, #12]
}
 800e97c:	bf00      	nop
 800e97e:	e7fe      	b.n	800e97e <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 800e980:	6878      	ldr	r0, [r7, #4]
 800e982:	f7fe f941 	bl	800cc08 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e986:	697b      	ldr	r3, [r7, #20]
 800e988:	3304      	adds	r3, #4
 800e98a:	4618      	mov	r0, r3
 800e98c:	f7fe f93c 	bl	800cc08 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 800e990:	697b      	ldr	r3, [r7, #20]
 800e992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e994:	4b12      	ldr	r3, [pc, #72]	; (800e9e0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e996:	681b      	ldr	r3, [r3, #0]
 800e998:	429a      	cmp	r2, r3
 800e99a:	d903      	bls.n	800e9a4 <vTaskRemoveFromUnorderedEventList+0x78>
 800e99c:	697b      	ldr	r3, [r7, #20]
 800e99e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9a0:	4a0f      	ldr	r2, [pc, #60]	; (800e9e0 <vTaskRemoveFromUnorderedEventList+0xb4>)
 800e9a2:	6013      	str	r3, [r2, #0]
 800e9a4:	697b      	ldr	r3, [r7, #20]
 800e9a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9a8:	4613      	mov	r3, r2
 800e9aa:	009b      	lsls	r3, r3, #2
 800e9ac:	4413      	add	r3, r2
 800e9ae:	009b      	lsls	r3, r3, #2
 800e9b0:	4a0c      	ldr	r2, [pc, #48]	; (800e9e4 <vTaskRemoveFromUnorderedEventList+0xb8>)
 800e9b2:	441a      	add	r2, r3
 800e9b4:	697b      	ldr	r3, [r7, #20]
 800e9b6:	3304      	adds	r3, #4
 800e9b8:	4619      	mov	r1, r3
 800e9ba:	4610      	mov	r0, r2
 800e9bc:	f7fe f8c7 	bl	800cb4e <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e9c0:	697b      	ldr	r3, [r7, #20]
 800e9c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e9c4:	4b08      	ldr	r3, [pc, #32]	; (800e9e8 <vTaskRemoveFromUnorderedEventList+0xbc>)
 800e9c6:	681b      	ldr	r3, [r3, #0]
 800e9c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e9ca:	429a      	cmp	r2, r3
 800e9cc:	d902      	bls.n	800e9d4 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 800e9ce:	4b07      	ldr	r3, [pc, #28]	; (800e9ec <vTaskRemoveFromUnorderedEventList+0xc0>)
 800e9d0:	2201      	movs	r2, #1
 800e9d2:	601a      	str	r2, [r3, #0]
	}
}
 800e9d4:	bf00      	nop
 800e9d6:	3718      	adds	r7, #24
 800e9d8:	46bd      	mov	sp, r7
 800e9da:	bd80      	pop	{r7, pc}
 800e9dc:	200071c0 	.word	0x200071c0
 800e9e0:	200071a0 	.word	0x200071a0
 800e9e4:	20006cc8 	.word	0x20006cc8
 800e9e8:	20006cc4 	.word	0x20006cc4
 800e9ec:	200071ac 	.word	0x200071ac

0800e9f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e9f0:	b480      	push	{r7}
 800e9f2:	b083      	sub	sp, #12
 800e9f4:	af00      	add	r7, sp, #0
 800e9f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e9f8:	4b06      	ldr	r3, [pc, #24]	; (800ea14 <vTaskInternalSetTimeOutState+0x24>)
 800e9fa:	681a      	ldr	r2, [r3, #0]
 800e9fc:	687b      	ldr	r3, [r7, #4]
 800e9fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800ea00:	4b05      	ldr	r3, [pc, #20]	; (800ea18 <vTaskInternalSetTimeOutState+0x28>)
 800ea02:	681a      	ldr	r2, [r3, #0]
 800ea04:	687b      	ldr	r3, [r7, #4]
 800ea06:	605a      	str	r2, [r3, #4]
}
 800ea08:	bf00      	nop
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr
 800ea14:	200071b0 	.word	0x200071b0
 800ea18:	2000719c 	.word	0x2000719c

0800ea1c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ea1c:	b580      	push	{r7, lr}
 800ea1e:	b088      	sub	sp, #32
 800ea20:	af00      	add	r7, sp, #0
 800ea22:	6078      	str	r0, [r7, #4]
 800ea24:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ea26:	687b      	ldr	r3, [r7, #4]
 800ea28:	2b00      	cmp	r3, #0
 800ea2a:	d10a      	bne.n	800ea42 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ea2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea30:	f383 8811 	msr	BASEPRI, r3
 800ea34:	f3bf 8f6f 	isb	sy
 800ea38:	f3bf 8f4f 	dsb	sy
 800ea3c:	613b      	str	r3, [r7, #16]
}
 800ea3e:	bf00      	nop
 800ea40:	e7fe      	b.n	800ea40 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ea42:	683b      	ldr	r3, [r7, #0]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d10a      	bne.n	800ea5e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ea48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4c:	f383 8811 	msr	BASEPRI, r3
 800ea50:	f3bf 8f6f 	isb	sy
 800ea54:	f3bf 8f4f 	dsb	sy
 800ea58:	60fb      	str	r3, [r7, #12]
}
 800ea5a:	bf00      	nop
 800ea5c:	e7fe      	b.n	800ea5c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ea5e:	f000 ffc9 	bl	800f9f4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ea62:	4b1d      	ldr	r3, [pc, #116]	; (800ead8 <xTaskCheckForTimeOut+0xbc>)
 800ea64:	681b      	ldr	r3, [r3, #0]
 800ea66:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ea68:	687b      	ldr	r3, [r7, #4]
 800ea6a:	685b      	ldr	r3, [r3, #4]
 800ea6c:	69ba      	ldr	r2, [r7, #24]
 800ea6e:	1ad3      	subs	r3, r2, r3
 800ea70:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ea72:	683b      	ldr	r3, [r7, #0]
 800ea74:	681b      	ldr	r3, [r3, #0]
 800ea76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800ea7a:	d102      	bne.n	800ea82 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	61fb      	str	r3, [r7, #28]
 800ea80:	e023      	b.n	800eaca <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ea82:	687b      	ldr	r3, [r7, #4]
 800ea84:	681a      	ldr	r2, [r3, #0]
 800ea86:	4b15      	ldr	r3, [pc, #84]	; (800eadc <xTaskCheckForTimeOut+0xc0>)
 800ea88:	681b      	ldr	r3, [r3, #0]
 800ea8a:	429a      	cmp	r2, r3
 800ea8c:	d007      	beq.n	800ea9e <xTaskCheckForTimeOut+0x82>
 800ea8e:	687b      	ldr	r3, [r7, #4]
 800ea90:	685b      	ldr	r3, [r3, #4]
 800ea92:	69ba      	ldr	r2, [r7, #24]
 800ea94:	429a      	cmp	r2, r3
 800ea96:	d302      	bcc.n	800ea9e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ea98:	2301      	movs	r3, #1
 800ea9a:	61fb      	str	r3, [r7, #28]
 800ea9c:	e015      	b.n	800eaca <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ea9e:	683b      	ldr	r3, [r7, #0]
 800eaa0:	681b      	ldr	r3, [r3, #0]
 800eaa2:	697a      	ldr	r2, [r7, #20]
 800eaa4:	429a      	cmp	r2, r3
 800eaa6:	d20b      	bcs.n	800eac0 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800eaa8:	683b      	ldr	r3, [r7, #0]
 800eaaa:	681a      	ldr	r2, [r3, #0]
 800eaac:	697b      	ldr	r3, [r7, #20]
 800eaae:	1ad2      	subs	r2, r2, r3
 800eab0:	683b      	ldr	r3, [r7, #0]
 800eab2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800eab4:	6878      	ldr	r0, [r7, #4]
 800eab6:	f7ff ff9b 	bl	800e9f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800eaba:	2300      	movs	r3, #0
 800eabc:	61fb      	str	r3, [r7, #28]
 800eabe:	e004      	b.n	800eaca <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800eac0:	683b      	ldr	r3, [r7, #0]
 800eac2:	2200      	movs	r2, #0
 800eac4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800eac6:	2301      	movs	r3, #1
 800eac8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800eaca:	f000 ffc3 	bl	800fa54 <vPortExitCritical>

	return xReturn;
 800eace:	69fb      	ldr	r3, [r7, #28]
}
 800ead0:	4618      	mov	r0, r3
 800ead2:	3720      	adds	r7, #32
 800ead4:	46bd      	mov	sp, r7
 800ead6:	bd80      	pop	{r7, pc}
 800ead8:	2000719c 	.word	0x2000719c
 800eadc:	200071b0 	.word	0x200071b0

0800eae0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800eae0:	b480      	push	{r7}
 800eae2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800eae4:	4b03      	ldr	r3, [pc, #12]	; (800eaf4 <vTaskMissedYield+0x14>)
 800eae6:	2201      	movs	r2, #1
 800eae8:	601a      	str	r2, [r3, #0]
}
 800eaea:	bf00      	nop
 800eaec:	46bd      	mov	sp, r7
 800eaee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eaf2:	4770      	bx	lr
 800eaf4:	200071ac 	.word	0x200071ac

0800eaf8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800eaf8:	b580      	push	{r7, lr}
 800eafa:	b082      	sub	sp, #8
 800eafc:	af00      	add	r7, sp, #0
 800eafe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800eb00:	f000 f852 	bl	800eba8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eb04:	4b06      	ldr	r3, [pc, #24]	; (800eb20 <prvIdleTask+0x28>)
 800eb06:	681b      	ldr	r3, [r3, #0]
 800eb08:	2b01      	cmp	r3, #1
 800eb0a:	d9f9      	bls.n	800eb00 <prvIdleTask+0x8>
			{
				taskYIELD();
 800eb0c:	4b05      	ldr	r3, [pc, #20]	; (800eb24 <prvIdleTask+0x2c>)
 800eb0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb12:	601a      	str	r2, [r3, #0]
 800eb14:	f3bf 8f4f 	dsb	sy
 800eb18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800eb1c:	e7f0      	b.n	800eb00 <prvIdleTask+0x8>
 800eb1e:	bf00      	nop
 800eb20:	20006cc8 	.word	0x20006cc8
 800eb24:	e000ed04 	.word	0xe000ed04

0800eb28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800eb28:	b580      	push	{r7, lr}
 800eb2a:	b082      	sub	sp, #8
 800eb2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb2e:	2300      	movs	r3, #0
 800eb30:	607b      	str	r3, [r7, #4]
 800eb32:	e00c      	b.n	800eb4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800eb34:	687a      	ldr	r2, [r7, #4]
 800eb36:	4613      	mov	r3, r2
 800eb38:	009b      	lsls	r3, r3, #2
 800eb3a:	4413      	add	r3, r2
 800eb3c:	009b      	lsls	r3, r3, #2
 800eb3e:	4a12      	ldr	r2, [pc, #72]	; (800eb88 <prvInitialiseTaskLists+0x60>)
 800eb40:	4413      	add	r3, r2
 800eb42:	4618      	mov	r0, r3
 800eb44:	f7fd ffd6 	bl	800caf4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	3301      	adds	r3, #1
 800eb4c:	607b      	str	r3, [r7, #4]
 800eb4e:	687b      	ldr	r3, [r7, #4]
 800eb50:	2b37      	cmp	r3, #55	; 0x37
 800eb52:	d9ef      	bls.n	800eb34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800eb54:	480d      	ldr	r0, [pc, #52]	; (800eb8c <prvInitialiseTaskLists+0x64>)
 800eb56:	f7fd ffcd 	bl	800caf4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800eb5a:	480d      	ldr	r0, [pc, #52]	; (800eb90 <prvInitialiseTaskLists+0x68>)
 800eb5c:	f7fd ffca 	bl	800caf4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800eb60:	480c      	ldr	r0, [pc, #48]	; (800eb94 <prvInitialiseTaskLists+0x6c>)
 800eb62:	f7fd ffc7 	bl	800caf4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800eb66:	480c      	ldr	r0, [pc, #48]	; (800eb98 <prvInitialiseTaskLists+0x70>)
 800eb68:	f7fd ffc4 	bl	800caf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800eb6c:	480b      	ldr	r0, [pc, #44]	; (800eb9c <prvInitialiseTaskLists+0x74>)
 800eb6e:	f7fd ffc1 	bl	800caf4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800eb72:	4b0b      	ldr	r3, [pc, #44]	; (800eba0 <prvInitialiseTaskLists+0x78>)
 800eb74:	4a05      	ldr	r2, [pc, #20]	; (800eb8c <prvInitialiseTaskLists+0x64>)
 800eb76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800eb78:	4b0a      	ldr	r3, [pc, #40]	; (800eba4 <prvInitialiseTaskLists+0x7c>)
 800eb7a:	4a05      	ldr	r2, [pc, #20]	; (800eb90 <prvInitialiseTaskLists+0x68>)
 800eb7c:	601a      	str	r2, [r3, #0]
}
 800eb7e:	bf00      	nop
 800eb80:	3708      	adds	r7, #8
 800eb82:	46bd      	mov	sp, r7
 800eb84:	bd80      	pop	{r7, pc}
 800eb86:	bf00      	nop
 800eb88:	20006cc8 	.word	0x20006cc8
 800eb8c:	20007128 	.word	0x20007128
 800eb90:	2000713c 	.word	0x2000713c
 800eb94:	20007158 	.word	0x20007158
 800eb98:	2000716c 	.word	0x2000716c
 800eb9c:	20007184 	.word	0x20007184
 800eba0:	20007150 	.word	0x20007150
 800eba4:	20007154 	.word	0x20007154

0800eba8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b082      	sub	sp, #8
 800ebac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebae:	e019      	b.n	800ebe4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800ebb0:	f000 ff20 	bl	800f9f4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ebb4:	4b10      	ldr	r3, [pc, #64]	; (800ebf8 <prvCheckTasksWaitingTermination+0x50>)
 800ebb6:	68db      	ldr	r3, [r3, #12]
 800ebb8:	68db      	ldr	r3, [r3, #12]
 800ebba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	3304      	adds	r3, #4
 800ebc0:	4618      	mov	r0, r3
 800ebc2:	f7fe f821 	bl	800cc08 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ebc6:	4b0d      	ldr	r3, [pc, #52]	; (800ebfc <prvCheckTasksWaitingTermination+0x54>)
 800ebc8:	681b      	ldr	r3, [r3, #0]
 800ebca:	3b01      	subs	r3, #1
 800ebcc:	4a0b      	ldr	r2, [pc, #44]	; (800ebfc <prvCheckTasksWaitingTermination+0x54>)
 800ebce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ebd0:	4b0b      	ldr	r3, [pc, #44]	; (800ec00 <prvCheckTasksWaitingTermination+0x58>)
 800ebd2:	681b      	ldr	r3, [r3, #0]
 800ebd4:	3b01      	subs	r3, #1
 800ebd6:	4a0a      	ldr	r2, [pc, #40]	; (800ec00 <prvCheckTasksWaitingTermination+0x58>)
 800ebd8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800ebda:	f000 ff3b 	bl	800fa54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800ebde:	6878      	ldr	r0, [r7, #4]
 800ebe0:	f000 f810 	bl	800ec04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800ebe4:	4b06      	ldr	r3, [pc, #24]	; (800ec00 <prvCheckTasksWaitingTermination+0x58>)
 800ebe6:	681b      	ldr	r3, [r3, #0]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d1e1      	bne.n	800ebb0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800ebec:	bf00      	nop
 800ebee:	bf00      	nop
 800ebf0:	3708      	adds	r7, #8
 800ebf2:	46bd      	mov	sp, r7
 800ebf4:	bd80      	pop	{r7, pc}
 800ebf6:	bf00      	nop
 800ebf8:	2000716c 	.word	0x2000716c
 800ebfc:	20007198 	.word	0x20007198
 800ec00:	20007180 	.word	0x20007180

0800ec04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800ec04:	b580      	push	{r7, lr}
 800ec06:	b084      	sub	sp, #16
 800ec08:	af00      	add	r7, sp, #0
 800ec0a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	3354      	adds	r3, #84	; 0x54
 800ec10:	4618      	mov	r0, r3
 800ec12:	f001 fadf 	bl	80101d4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800ec16:	687b      	ldr	r3, [r7, #4]
 800ec18:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d108      	bne.n	800ec32 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ec24:	4618      	mov	r0, r3
 800ec26:	f001 f8d3 	bl	800fdd0 <vPortFree>
				vPortFree( pxTCB );
 800ec2a:	6878      	ldr	r0, [r7, #4]
 800ec2c:	f001 f8d0 	bl	800fdd0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800ec30:	e018      	b.n	800ec64 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800ec32:	687b      	ldr	r3, [r7, #4]
 800ec34:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ec38:	2b01      	cmp	r3, #1
 800ec3a:	d103      	bne.n	800ec44 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800ec3c:	6878      	ldr	r0, [r7, #4]
 800ec3e:	f001 f8c7 	bl	800fdd0 <vPortFree>
	}
 800ec42:	e00f      	b.n	800ec64 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800ec4a:	2b02      	cmp	r3, #2
 800ec4c:	d00a      	beq.n	800ec64 <prvDeleteTCB+0x60>
	__asm volatile
 800ec4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ec52:	f383 8811 	msr	BASEPRI, r3
 800ec56:	f3bf 8f6f 	isb	sy
 800ec5a:	f3bf 8f4f 	dsb	sy
 800ec5e:	60fb      	str	r3, [r7, #12]
}
 800ec60:	bf00      	nop
 800ec62:	e7fe      	b.n	800ec62 <prvDeleteTCB+0x5e>
	}
 800ec64:	bf00      	nop
 800ec66:	3710      	adds	r7, #16
 800ec68:	46bd      	mov	sp, r7
 800ec6a:	bd80      	pop	{r7, pc}

0800ec6c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ec6c:	b480      	push	{r7}
 800ec6e:	b083      	sub	sp, #12
 800ec70:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ec72:	4b0c      	ldr	r3, [pc, #48]	; (800eca4 <prvResetNextTaskUnblockTime+0x38>)
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	681b      	ldr	r3, [r3, #0]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d104      	bne.n	800ec86 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ec7c:	4b0a      	ldr	r3, [pc, #40]	; (800eca8 <prvResetNextTaskUnblockTime+0x3c>)
 800ec7e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ec82:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ec84:	e008      	b.n	800ec98 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ec86:	4b07      	ldr	r3, [pc, #28]	; (800eca4 <prvResetNextTaskUnblockTime+0x38>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68db      	ldr	r3, [r3, #12]
 800ec8c:	68db      	ldr	r3, [r3, #12]
 800ec8e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	685b      	ldr	r3, [r3, #4]
 800ec94:	4a04      	ldr	r2, [pc, #16]	; (800eca8 <prvResetNextTaskUnblockTime+0x3c>)
 800ec96:	6013      	str	r3, [r2, #0]
}
 800ec98:	bf00      	nop
 800ec9a:	370c      	adds	r7, #12
 800ec9c:	46bd      	mov	sp, r7
 800ec9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca2:	4770      	bx	lr
 800eca4:	20007150 	.word	0x20007150
 800eca8:	200071b8 	.word	0x200071b8

0800ecac <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800ecac:	b480      	push	{r7}
 800ecae:	b083      	sub	sp, #12
 800ecb0:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800ecb2:	4b05      	ldr	r3, [pc, #20]	; (800ecc8 <xTaskGetCurrentTaskHandle+0x1c>)
 800ecb4:	681b      	ldr	r3, [r3, #0]
 800ecb6:	607b      	str	r3, [r7, #4]

		return xReturn;
 800ecb8:	687b      	ldr	r3, [r7, #4]
	}
 800ecba:	4618      	mov	r0, r3
 800ecbc:	370c      	adds	r7, #12
 800ecbe:	46bd      	mov	sp, r7
 800ecc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecc4:	4770      	bx	lr
 800ecc6:	bf00      	nop
 800ecc8:	20006cc4 	.word	0x20006cc4

0800eccc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800eccc:	b480      	push	{r7}
 800ecce:	b083      	sub	sp, #12
 800ecd0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ecd2:	4b0b      	ldr	r3, [pc, #44]	; (800ed00 <xTaskGetSchedulerState+0x34>)
 800ecd4:	681b      	ldr	r3, [r3, #0]
 800ecd6:	2b00      	cmp	r3, #0
 800ecd8:	d102      	bne.n	800ece0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ecda:	2301      	movs	r3, #1
 800ecdc:	607b      	str	r3, [r7, #4]
 800ecde:	e008      	b.n	800ecf2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ece0:	4b08      	ldr	r3, [pc, #32]	; (800ed04 <xTaskGetSchedulerState+0x38>)
 800ece2:	681b      	ldr	r3, [r3, #0]
 800ece4:	2b00      	cmp	r3, #0
 800ece6:	d102      	bne.n	800ecee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ece8:	2302      	movs	r3, #2
 800ecea:	607b      	str	r3, [r7, #4]
 800ecec:	e001      	b.n	800ecf2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ecee:	2300      	movs	r3, #0
 800ecf0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ecf2:	687b      	ldr	r3, [r7, #4]
	}
 800ecf4:	4618      	mov	r0, r3
 800ecf6:	370c      	adds	r7, #12
 800ecf8:	46bd      	mov	sp, r7
 800ecfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ecfe:	4770      	bx	lr
 800ed00:	200071a4 	.word	0x200071a4
 800ed04:	200071c0 	.word	0x200071c0

0800ed08 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b084      	sub	sp, #16
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800ed14:	2300      	movs	r3, #0
 800ed16:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800ed18:	687b      	ldr	r3, [r7, #4]
 800ed1a:	2b00      	cmp	r3, #0
 800ed1c:	d051      	beq.n	800edc2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800ed1e:	68bb      	ldr	r3, [r7, #8]
 800ed20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed22:	4b2a      	ldr	r3, [pc, #168]	; (800edcc <xTaskPriorityInherit+0xc4>)
 800ed24:	681b      	ldr	r3, [r3, #0]
 800ed26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed28:	429a      	cmp	r2, r3
 800ed2a:	d241      	bcs.n	800edb0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ed2c:	68bb      	ldr	r3, [r7, #8]
 800ed2e:	699b      	ldr	r3, [r3, #24]
 800ed30:	2b00      	cmp	r3, #0
 800ed32:	db06      	blt.n	800ed42 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed34:	4b25      	ldr	r3, [pc, #148]	; (800edcc <xTaskPriorityInherit+0xc4>)
 800ed36:	681b      	ldr	r3, [r3, #0]
 800ed38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed3a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ed3e:	68bb      	ldr	r3, [r7, #8]
 800ed40:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800ed42:	68bb      	ldr	r3, [r7, #8]
 800ed44:	6959      	ldr	r1, [r3, #20]
 800ed46:	68bb      	ldr	r3, [r7, #8]
 800ed48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed4a:	4613      	mov	r3, r2
 800ed4c:	009b      	lsls	r3, r3, #2
 800ed4e:	4413      	add	r3, r2
 800ed50:	009b      	lsls	r3, r3, #2
 800ed52:	4a1f      	ldr	r2, [pc, #124]	; (800edd0 <xTaskPriorityInherit+0xc8>)
 800ed54:	4413      	add	r3, r2
 800ed56:	4299      	cmp	r1, r3
 800ed58:	d122      	bne.n	800eda0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ed5a:	68bb      	ldr	r3, [r7, #8]
 800ed5c:	3304      	adds	r3, #4
 800ed5e:	4618      	mov	r0, r3
 800ed60:	f7fd ff52 	bl	800cc08 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800ed64:	4b19      	ldr	r3, [pc, #100]	; (800edcc <xTaskPriorityInherit+0xc4>)
 800ed66:	681b      	ldr	r3, [r3, #0]
 800ed68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed6a:	68bb      	ldr	r3, [r7, #8]
 800ed6c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed72:	4b18      	ldr	r3, [pc, #96]	; (800edd4 <xTaskPriorityInherit+0xcc>)
 800ed74:	681b      	ldr	r3, [r3, #0]
 800ed76:	429a      	cmp	r2, r3
 800ed78:	d903      	bls.n	800ed82 <xTaskPriorityInherit+0x7a>
 800ed7a:	68bb      	ldr	r3, [r7, #8]
 800ed7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ed7e:	4a15      	ldr	r2, [pc, #84]	; (800edd4 <xTaskPriorityInherit+0xcc>)
 800ed80:	6013      	str	r3, [r2, #0]
 800ed82:	68bb      	ldr	r3, [r7, #8]
 800ed84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ed86:	4613      	mov	r3, r2
 800ed88:	009b      	lsls	r3, r3, #2
 800ed8a:	4413      	add	r3, r2
 800ed8c:	009b      	lsls	r3, r3, #2
 800ed8e:	4a10      	ldr	r2, [pc, #64]	; (800edd0 <xTaskPriorityInherit+0xc8>)
 800ed90:	441a      	add	r2, r3
 800ed92:	68bb      	ldr	r3, [r7, #8]
 800ed94:	3304      	adds	r3, #4
 800ed96:	4619      	mov	r1, r3
 800ed98:	4610      	mov	r0, r2
 800ed9a:	f7fd fed8 	bl	800cb4e <vListInsertEnd>
 800ed9e:	e004      	b.n	800edaa <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800eda0:	4b0a      	ldr	r3, [pc, #40]	; (800edcc <xTaskPriorityInherit+0xc4>)
 800eda2:	681b      	ldr	r3, [r3, #0]
 800eda4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800eda6:	68bb      	ldr	r3, [r7, #8]
 800eda8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800edaa:	2301      	movs	r3, #1
 800edac:	60fb      	str	r3, [r7, #12]
 800edae:	e008      	b.n	800edc2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800edb0:	68bb      	ldr	r3, [r7, #8]
 800edb2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800edb4:	4b05      	ldr	r3, [pc, #20]	; (800edcc <xTaskPriorityInherit+0xc4>)
 800edb6:	681b      	ldr	r3, [r3, #0]
 800edb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800edba:	429a      	cmp	r2, r3
 800edbc:	d201      	bcs.n	800edc2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800edbe:	2301      	movs	r3, #1
 800edc0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800edc2:	68fb      	ldr	r3, [r7, #12]
	}
 800edc4:	4618      	mov	r0, r3
 800edc6:	3710      	adds	r7, #16
 800edc8:	46bd      	mov	sp, r7
 800edca:	bd80      	pop	{r7, pc}
 800edcc:	20006cc4 	.word	0x20006cc4
 800edd0:	20006cc8 	.word	0x20006cc8
 800edd4:	200071a0 	.word	0x200071a0

0800edd8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800edd8:	b580      	push	{r7, lr}
 800edda:	b086      	sub	sp, #24
 800eddc:	af00      	add	r7, sp, #0
 800edde:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ede0:	687b      	ldr	r3, [r7, #4]
 800ede2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ede4:	2300      	movs	r3, #0
 800ede6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ede8:	687b      	ldr	r3, [r7, #4]
 800edea:	2b00      	cmp	r3, #0
 800edec:	d056      	beq.n	800ee9c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800edee:	4b2e      	ldr	r3, [pc, #184]	; (800eea8 <xTaskPriorityDisinherit+0xd0>)
 800edf0:	681b      	ldr	r3, [r3, #0]
 800edf2:	693a      	ldr	r2, [r7, #16]
 800edf4:	429a      	cmp	r2, r3
 800edf6:	d00a      	beq.n	800ee0e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800edf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800edfc:	f383 8811 	msr	BASEPRI, r3
 800ee00:	f3bf 8f6f 	isb	sy
 800ee04:	f3bf 8f4f 	dsb	sy
 800ee08:	60fb      	str	r3, [r7, #12]
}
 800ee0a:	bf00      	nop
 800ee0c:	e7fe      	b.n	800ee0c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee12:	2b00      	cmp	r3, #0
 800ee14:	d10a      	bne.n	800ee2c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800ee16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee1a:	f383 8811 	msr	BASEPRI, r3
 800ee1e:	f3bf 8f6f 	isb	sy
 800ee22:	f3bf 8f4f 	dsb	sy
 800ee26:	60bb      	str	r3, [r7, #8]
}
 800ee28:	bf00      	nop
 800ee2a:	e7fe      	b.n	800ee2a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800ee2c:	693b      	ldr	r3, [r7, #16]
 800ee2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee30:	1e5a      	subs	r2, r3, #1
 800ee32:	693b      	ldr	r3, [r7, #16]
 800ee34:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ee36:	693b      	ldr	r3, [r7, #16]
 800ee38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee3a:	693b      	ldr	r3, [r7, #16]
 800ee3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ee3e:	429a      	cmp	r2, r3
 800ee40:	d02c      	beq.n	800ee9c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ee42:	693b      	ldr	r3, [r7, #16]
 800ee44:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ee46:	2b00      	cmp	r3, #0
 800ee48:	d128      	bne.n	800ee9c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee4a:	693b      	ldr	r3, [r7, #16]
 800ee4c:	3304      	adds	r3, #4
 800ee4e:	4618      	mov	r0, r3
 800ee50:	f7fd feda 	bl	800cc08 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800ee54:	693b      	ldr	r3, [r7, #16]
 800ee56:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800ee58:	693b      	ldr	r3, [r7, #16]
 800ee5a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ee5c:	693b      	ldr	r3, [r7, #16]
 800ee5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee60:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ee64:	693b      	ldr	r3, [r7, #16]
 800ee66:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800ee68:	693b      	ldr	r3, [r7, #16]
 800ee6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee6c:	4b0f      	ldr	r3, [pc, #60]	; (800eeac <xTaskPriorityDisinherit+0xd4>)
 800ee6e:	681b      	ldr	r3, [r3, #0]
 800ee70:	429a      	cmp	r2, r3
 800ee72:	d903      	bls.n	800ee7c <xTaskPriorityDisinherit+0xa4>
 800ee74:	693b      	ldr	r3, [r7, #16]
 800ee76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ee78:	4a0c      	ldr	r2, [pc, #48]	; (800eeac <xTaskPriorityDisinherit+0xd4>)
 800ee7a:	6013      	str	r3, [r2, #0]
 800ee7c:	693b      	ldr	r3, [r7, #16]
 800ee7e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ee80:	4613      	mov	r3, r2
 800ee82:	009b      	lsls	r3, r3, #2
 800ee84:	4413      	add	r3, r2
 800ee86:	009b      	lsls	r3, r3, #2
 800ee88:	4a09      	ldr	r2, [pc, #36]	; (800eeb0 <xTaskPriorityDisinherit+0xd8>)
 800ee8a:	441a      	add	r2, r3
 800ee8c:	693b      	ldr	r3, [r7, #16]
 800ee8e:	3304      	adds	r3, #4
 800ee90:	4619      	mov	r1, r3
 800ee92:	4610      	mov	r0, r2
 800ee94:	f7fd fe5b 	bl	800cb4e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800ee98:	2301      	movs	r3, #1
 800ee9a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ee9c:	697b      	ldr	r3, [r7, #20]
	}
 800ee9e:	4618      	mov	r0, r3
 800eea0:	3718      	adds	r7, #24
 800eea2:	46bd      	mov	sp, r7
 800eea4:	bd80      	pop	{r7, pc}
 800eea6:	bf00      	nop
 800eea8:	20006cc4 	.word	0x20006cc4
 800eeac:	200071a0 	.word	0x200071a0
 800eeb0:	20006cc8 	.word	0x20006cc8

0800eeb4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800eeb4:	b580      	push	{r7, lr}
 800eeb6:	b088      	sub	sp, #32
 800eeb8:	af00      	add	r7, sp, #0
 800eeba:	6078      	str	r0, [r7, #4]
 800eebc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800eebe:	687b      	ldr	r3, [r7, #4]
 800eec0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800eec2:	2301      	movs	r3, #1
 800eec4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800eec6:	687b      	ldr	r3, [r7, #4]
 800eec8:	2b00      	cmp	r3, #0
 800eeca:	d06a      	beq.n	800efa2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800eecc:	69bb      	ldr	r3, [r7, #24]
 800eece:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800eed0:	2b00      	cmp	r3, #0
 800eed2:	d10a      	bne.n	800eeea <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800eed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eed8:	f383 8811 	msr	BASEPRI, r3
 800eedc:	f3bf 8f6f 	isb	sy
 800eee0:	f3bf 8f4f 	dsb	sy
 800eee4:	60fb      	str	r3, [r7, #12]
}
 800eee6:	bf00      	nop
 800eee8:	e7fe      	b.n	800eee8 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800eeea:	69bb      	ldr	r3, [r7, #24]
 800eeec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eeee:	683a      	ldr	r2, [r7, #0]
 800eef0:	429a      	cmp	r2, r3
 800eef2:	d902      	bls.n	800eefa <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800eef4:	683b      	ldr	r3, [r7, #0]
 800eef6:	61fb      	str	r3, [r7, #28]
 800eef8:	e002      	b.n	800ef00 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800eefa:	69bb      	ldr	r3, [r7, #24]
 800eefc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800eefe:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800ef00:	69bb      	ldr	r3, [r7, #24]
 800ef02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef04:	69fa      	ldr	r2, [r7, #28]
 800ef06:	429a      	cmp	r2, r3
 800ef08:	d04b      	beq.n	800efa2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800ef0a:	69bb      	ldr	r3, [r7, #24]
 800ef0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ef0e:	697a      	ldr	r2, [r7, #20]
 800ef10:	429a      	cmp	r2, r3
 800ef12:	d146      	bne.n	800efa2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800ef14:	4b25      	ldr	r3, [pc, #148]	; (800efac <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800ef16:	681b      	ldr	r3, [r3, #0]
 800ef18:	69ba      	ldr	r2, [r7, #24]
 800ef1a:	429a      	cmp	r2, r3
 800ef1c:	d10a      	bne.n	800ef34 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800ef1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ef22:	f383 8811 	msr	BASEPRI, r3
 800ef26:	f3bf 8f6f 	isb	sy
 800ef2a:	f3bf 8f4f 	dsb	sy
 800ef2e:	60bb      	str	r3, [r7, #8]
}
 800ef30:	bf00      	nop
 800ef32:	e7fe      	b.n	800ef32 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800ef34:	69bb      	ldr	r3, [r7, #24]
 800ef36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef38:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800ef3a:	69bb      	ldr	r3, [r7, #24]
 800ef3c:	69fa      	ldr	r2, [r7, #28]
 800ef3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800ef40:	69bb      	ldr	r3, [r7, #24]
 800ef42:	699b      	ldr	r3, [r3, #24]
 800ef44:	2b00      	cmp	r3, #0
 800ef46:	db04      	blt.n	800ef52 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef48:	69fb      	ldr	r3, [r7, #28]
 800ef4a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ef4e:	69bb      	ldr	r3, [r7, #24]
 800ef50:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800ef52:	69bb      	ldr	r3, [r7, #24]
 800ef54:	6959      	ldr	r1, [r3, #20]
 800ef56:	693a      	ldr	r2, [r7, #16]
 800ef58:	4613      	mov	r3, r2
 800ef5a:	009b      	lsls	r3, r3, #2
 800ef5c:	4413      	add	r3, r2
 800ef5e:	009b      	lsls	r3, r3, #2
 800ef60:	4a13      	ldr	r2, [pc, #76]	; (800efb0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ef62:	4413      	add	r3, r2
 800ef64:	4299      	cmp	r1, r3
 800ef66:	d11c      	bne.n	800efa2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ef68:	69bb      	ldr	r3, [r7, #24]
 800ef6a:	3304      	adds	r3, #4
 800ef6c:	4618      	mov	r0, r3
 800ef6e:	f7fd fe4b 	bl	800cc08 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800ef72:	69bb      	ldr	r3, [r7, #24]
 800ef74:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef76:	4b0f      	ldr	r3, [pc, #60]	; (800efb4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	429a      	cmp	r2, r3
 800ef7c:	d903      	bls.n	800ef86 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800ef7e:	69bb      	ldr	r3, [r7, #24]
 800ef80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ef82:	4a0c      	ldr	r2, [pc, #48]	; (800efb4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800ef84:	6013      	str	r3, [r2, #0]
 800ef86:	69bb      	ldr	r3, [r7, #24]
 800ef88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ef8a:	4613      	mov	r3, r2
 800ef8c:	009b      	lsls	r3, r3, #2
 800ef8e:	4413      	add	r3, r2
 800ef90:	009b      	lsls	r3, r3, #2
 800ef92:	4a07      	ldr	r2, [pc, #28]	; (800efb0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800ef94:	441a      	add	r2, r3
 800ef96:	69bb      	ldr	r3, [r7, #24]
 800ef98:	3304      	adds	r3, #4
 800ef9a:	4619      	mov	r1, r3
 800ef9c:	4610      	mov	r0, r2
 800ef9e:	f7fd fdd6 	bl	800cb4e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800efa2:	bf00      	nop
 800efa4:	3720      	adds	r7, #32
 800efa6:	46bd      	mov	sp, r7
 800efa8:	bd80      	pop	{r7, pc}
 800efaa:	bf00      	nop
 800efac:	20006cc4 	.word	0x20006cc4
 800efb0:	20006cc8 	.word	0x20006cc8
 800efb4:	200071a0 	.word	0x200071a0

0800efb8 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 800efb8:	b480      	push	{r7}
 800efba:	b083      	sub	sp, #12
 800efbc:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800efbe:	4b09      	ldr	r3, [pc, #36]	; (800efe4 <uxTaskResetEventItemValue+0x2c>)
 800efc0:	681b      	ldr	r3, [r3, #0]
 800efc2:	699b      	ldr	r3, [r3, #24]
 800efc4:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efc6:	4b07      	ldr	r3, [pc, #28]	; (800efe4 <uxTaskResetEventItemValue+0x2c>)
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800efcc:	4b05      	ldr	r3, [pc, #20]	; (800efe4 <uxTaskResetEventItemValue+0x2c>)
 800efce:	681b      	ldr	r3, [r3, #0]
 800efd0:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 800efd4:	619a      	str	r2, [r3, #24]

	return uxReturn;
 800efd6:	687b      	ldr	r3, [r7, #4]
}
 800efd8:	4618      	mov	r0, r3
 800efda:	370c      	adds	r7, #12
 800efdc:	46bd      	mov	sp, r7
 800efde:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe2:	4770      	bx	lr
 800efe4:	20006cc4 	.word	0x20006cc4

0800efe8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800efe8:	b480      	push	{r7}
 800efea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800efec:	4b07      	ldr	r3, [pc, #28]	; (800f00c <pvTaskIncrementMutexHeldCount+0x24>)
 800efee:	681b      	ldr	r3, [r3, #0]
 800eff0:	2b00      	cmp	r3, #0
 800eff2:	d004      	beq.n	800effe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800eff4:	4b05      	ldr	r3, [pc, #20]	; (800f00c <pvTaskIncrementMutexHeldCount+0x24>)
 800eff6:	681b      	ldr	r3, [r3, #0]
 800eff8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800effa:	3201      	adds	r2, #1
 800effc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800effe:	4b03      	ldr	r3, [pc, #12]	; (800f00c <pvTaskIncrementMutexHeldCount+0x24>)
 800f000:	681b      	ldr	r3, [r3, #0]
	}
 800f002:	4618      	mov	r0, r3
 800f004:	46bd      	mov	sp, r7
 800f006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f00a:	4770      	bx	lr
 800f00c:	20006cc4 	.word	0x20006cc4

0800f010 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800f010:	b580      	push	{r7, lr}
 800f012:	b084      	sub	sp, #16
 800f014:	af00      	add	r7, sp, #0
 800f016:	6078      	str	r0, [r7, #4]
 800f018:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800f01a:	4b21      	ldr	r3, [pc, #132]	; (800f0a0 <prvAddCurrentTaskToDelayedList+0x90>)
 800f01c:	681b      	ldr	r3, [r3, #0]
 800f01e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f020:	4b20      	ldr	r3, [pc, #128]	; (800f0a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f022:	681b      	ldr	r3, [r3, #0]
 800f024:	3304      	adds	r3, #4
 800f026:	4618      	mov	r0, r3
 800f028:	f7fd fdee 	bl	800cc08 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f032:	d10a      	bne.n	800f04a <prvAddCurrentTaskToDelayedList+0x3a>
 800f034:	683b      	ldr	r3, [r7, #0]
 800f036:	2b00      	cmp	r3, #0
 800f038:	d007      	beq.n	800f04a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f03a:	4b1a      	ldr	r3, [pc, #104]	; (800f0a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f03c:	681b      	ldr	r3, [r3, #0]
 800f03e:	3304      	adds	r3, #4
 800f040:	4619      	mov	r1, r3
 800f042:	4819      	ldr	r0, [pc, #100]	; (800f0a8 <prvAddCurrentTaskToDelayedList+0x98>)
 800f044:	f7fd fd83 	bl	800cb4e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800f048:	e026      	b.n	800f098 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800f04a:	68fa      	ldr	r2, [r7, #12]
 800f04c:	687b      	ldr	r3, [r7, #4]
 800f04e:	4413      	add	r3, r2
 800f050:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800f052:	4b14      	ldr	r3, [pc, #80]	; (800f0a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f054:	681b      	ldr	r3, [r3, #0]
 800f056:	68ba      	ldr	r2, [r7, #8]
 800f058:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800f05a:	68ba      	ldr	r2, [r7, #8]
 800f05c:	68fb      	ldr	r3, [r7, #12]
 800f05e:	429a      	cmp	r2, r3
 800f060:	d209      	bcs.n	800f076 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f062:	4b12      	ldr	r3, [pc, #72]	; (800f0ac <prvAddCurrentTaskToDelayedList+0x9c>)
 800f064:	681a      	ldr	r2, [r3, #0]
 800f066:	4b0f      	ldr	r3, [pc, #60]	; (800f0a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	3304      	adds	r3, #4
 800f06c:	4619      	mov	r1, r3
 800f06e:	4610      	mov	r0, r2
 800f070:	f7fd fd91 	bl	800cb96 <vListInsert>
}
 800f074:	e010      	b.n	800f098 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800f076:	4b0e      	ldr	r3, [pc, #56]	; (800f0b0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800f078:	681a      	ldr	r2, [r3, #0]
 800f07a:	4b0a      	ldr	r3, [pc, #40]	; (800f0a4 <prvAddCurrentTaskToDelayedList+0x94>)
 800f07c:	681b      	ldr	r3, [r3, #0]
 800f07e:	3304      	adds	r3, #4
 800f080:	4619      	mov	r1, r3
 800f082:	4610      	mov	r0, r2
 800f084:	f7fd fd87 	bl	800cb96 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800f088:	4b0a      	ldr	r3, [pc, #40]	; (800f0b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f08a:	681b      	ldr	r3, [r3, #0]
 800f08c:	68ba      	ldr	r2, [r7, #8]
 800f08e:	429a      	cmp	r2, r3
 800f090:	d202      	bcs.n	800f098 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800f092:	4a08      	ldr	r2, [pc, #32]	; (800f0b4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	6013      	str	r3, [r2, #0]
}
 800f098:	bf00      	nop
 800f09a:	3710      	adds	r7, #16
 800f09c:	46bd      	mov	sp, r7
 800f09e:	bd80      	pop	{r7, pc}
 800f0a0:	2000719c 	.word	0x2000719c
 800f0a4:	20006cc4 	.word	0x20006cc4
 800f0a8:	20007184 	.word	0x20007184
 800f0ac:	20007154 	.word	0x20007154
 800f0b0:	20007150 	.word	0x20007150
 800f0b4:	200071b8 	.word	0x200071b8

0800f0b8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b08a      	sub	sp, #40	; 0x28
 800f0bc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800f0be:	2300      	movs	r3, #0
 800f0c0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800f0c2:	f000 fb07 	bl	800f6d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800f0c6:	4b1c      	ldr	r3, [pc, #112]	; (800f138 <xTimerCreateTimerTask+0x80>)
 800f0c8:	681b      	ldr	r3, [r3, #0]
 800f0ca:	2b00      	cmp	r3, #0
 800f0cc:	d021      	beq.n	800f112 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f0ce:	2300      	movs	r3, #0
 800f0d0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f0d2:	2300      	movs	r3, #0
 800f0d4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f0d6:	1d3a      	adds	r2, r7, #4
 800f0d8:	f107 0108 	add.w	r1, r7, #8
 800f0dc:	f107 030c 	add.w	r3, r7, #12
 800f0e0:	4618      	mov	r0, r3
 800f0e2:	f7fd faff 	bl	800c6e4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f0e6:	6879      	ldr	r1, [r7, #4]
 800f0e8:	68bb      	ldr	r3, [r7, #8]
 800f0ea:	68fa      	ldr	r2, [r7, #12]
 800f0ec:	9202      	str	r2, [sp, #8]
 800f0ee:	9301      	str	r3, [sp, #4]
 800f0f0:	2302      	movs	r3, #2
 800f0f2:	9300      	str	r3, [sp, #0]
 800f0f4:	2300      	movs	r3, #0
 800f0f6:	460a      	mov	r2, r1
 800f0f8:	4910      	ldr	r1, [pc, #64]	; (800f13c <xTimerCreateTimerTask+0x84>)
 800f0fa:	4811      	ldr	r0, [pc, #68]	; (800f140 <xTimerCreateTimerTask+0x88>)
 800f0fc:	f7fe fe72 	bl	800dde4 <xTaskCreateStatic>
 800f100:	4603      	mov	r3, r0
 800f102:	4a10      	ldr	r2, [pc, #64]	; (800f144 <xTimerCreateTimerTask+0x8c>)
 800f104:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800f106:	4b0f      	ldr	r3, [pc, #60]	; (800f144 <xTimerCreateTimerTask+0x8c>)
 800f108:	681b      	ldr	r3, [r3, #0]
 800f10a:	2b00      	cmp	r3, #0
 800f10c:	d001      	beq.n	800f112 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800f10e:	2301      	movs	r3, #1
 800f110:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800f112:	697b      	ldr	r3, [r7, #20]
 800f114:	2b00      	cmp	r3, #0
 800f116:	d10a      	bne.n	800f12e <xTimerCreateTimerTask+0x76>
	__asm volatile
 800f118:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f11c:	f383 8811 	msr	BASEPRI, r3
 800f120:	f3bf 8f6f 	isb	sy
 800f124:	f3bf 8f4f 	dsb	sy
 800f128:	613b      	str	r3, [r7, #16]
}
 800f12a:	bf00      	nop
 800f12c:	e7fe      	b.n	800f12c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800f12e:	697b      	ldr	r3, [r7, #20]
}
 800f130:	4618      	mov	r0, r3
 800f132:	3718      	adds	r7, #24
 800f134:	46bd      	mov	sp, r7
 800f136:	bd80      	pop	{r7, pc}
 800f138:	200071f4 	.word	0x200071f4
 800f13c:	08012980 	.word	0x08012980
 800f140:	0800f27d 	.word	0x0800f27d
 800f144:	200071f8 	.word	0x200071f8

0800f148 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800f148:	b580      	push	{r7, lr}
 800f14a:	b08a      	sub	sp, #40	; 0x28
 800f14c:	af00      	add	r7, sp, #0
 800f14e:	60f8      	str	r0, [r7, #12]
 800f150:	60b9      	str	r1, [r7, #8]
 800f152:	607a      	str	r2, [r7, #4]
 800f154:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800f156:	2300      	movs	r3, #0
 800f158:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800f15a:	68fb      	ldr	r3, [r7, #12]
 800f15c:	2b00      	cmp	r3, #0
 800f15e:	d10a      	bne.n	800f176 <xTimerGenericCommand+0x2e>
	__asm volatile
 800f160:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f164:	f383 8811 	msr	BASEPRI, r3
 800f168:	f3bf 8f6f 	isb	sy
 800f16c:	f3bf 8f4f 	dsb	sy
 800f170:	623b      	str	r3, [r7, #32]
}
 800f172:	bf00      	nop
 800f174:	e7fe      	b.n	800f174 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800f176:	4b1a      	ldr	r3, [pc, #104]	; (800f1e0 <xTimerGenericCommand+0x98>)
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2b00      	cmp	r3, #0
 800f17c:	d02a      	beq.n	800f1d4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800f17e:	68bb      	ldr	r3, [r7, #8]
 800f180:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f182:	687b      	ldr	r3, [r7, #4]
 800f184:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f186:	68fb      	ldr	r3, [r7, #12]
 800f188:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f18a:	68bb      	ldr	r3, [r7, #8]
 800f18c:	2b05      	cmp	r3, #5
 800f18e:	dc18      	bgt.n	800f1c2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f190:	f7ff fd9c 	bl	800eccc <xTaskGetSchedulerState>
 800f194:	4603      	mov	r3, r0
 800f196:	2b02      	cmp	r3, #2
 800f198:	d109      	bne.n	800f1ae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f19a:	4b11      	ldr	r3, [pc, #68]	; (800f1e0 <xTimerGenericCommand+0x98>)
 800f19c:	6818      	ldr	r0, [r3, #0]
 800f19e:	f107 0110 	add.w	r1, r7, #16
 800f1a2:	2300      	movs	r3, #0
 800f1a4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800f1a6:	f7fd ffb7 	bl	800d118 <xQueueGenericSend>
 800f1aa:	6278      	str	r0, [r7, #36]	; 0x24
 800f1ac:	e012      	b.n	800f1d4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f1ae:	4b0c      	ldr	r3, [pc, #48]	; (800f1e0 <xTimerGenericCommand+0x98>)
 800f1b0:	6818      	ldr	r0, [r3, #0]
 800f1b2:	f107 0110 	add.w	r1, r7, #16
 800f1b6:	2300      	movs	r3, #0
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f7fd ffad 	bl	800d118 <xQueueGenericSend>
 800f1be:	6278      	str	r0, [r7, #36]	; 0x24
 800f1c0:	e008      	b.n	800f1d4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f1c2:	4b07      	ldr	r3, [pc, #28]	; (800f1e0 <xTimerGenericCommand+0x98>)
 800f1c4:	6818      	ldr	r0, [r3, #0]
 800f1c6:	f107 0110 	add.w	r1, r7, #16
 800f1ca:	2300      	movs	r3, #0
 800f1cc:	683a      	ldr	r2, [r7, #0]
 800f1ce:	f7fe f8a1 	bl	800d314 <xQueueGenericSendFromISR>
 800f1d2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800f1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800f1d6:	4618      	mov	r0, r3
 800f1d8:	3728      	adds	r7, #40	; 0x28
 800f1da:	46bd      	mov	sp, r7
 800f1dc:	bd80      	pop	{r7, pc}
 800f1de:	bf00      	nop
 800f1e0:	200071f4 	.word	0x200071f4

0800f1e4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b088      	sub	sp, #32
 800f1e8:	af02      	add	r7, sp, #8
 800f1ea:	6078      	str	r0, [r7, #4]
 800f1ec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f1ee:	4b22      	ldr	r3, [pc, #136]	; (800f278 <prvProcessExpiredTimer+0x94>)
 800f1f0:	681b      	ldr	r3, [r3, #0]
 800f1f2:	68db      	ldr	r3, [r3, #12]
 800f1f4:	68db      	ldr	r3, [r3, #12]
 800f1f6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f1f8:	697b      	ldr	r3, [r7, #20]
 800f1fa:	3304      	adds	r3, #4
 800f1fc:	4618      	mov	r0, r3
 800f1fe:	f7fd fd03 	bl	800cc08 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f202:	697b      	ldr	r3, [r7, #20]
 800f204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f208:	f003 0304 	and.w	r3, r3, #4
 800f20c:	2b00      	cmp	r3, #0
 800f20e:	d022      	beq.n	800f256 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800f210:	697b      	ldr	r3, [r7, #20]
 800f212:	699a      	ldr	r2, [r3, #24]
 800f214:	687b      	ldr	r3, [r7, #4]
 800f216:	18d1      	adds	r1, r2, r3
 800f218:	687b      	ldr	r3, [r7, #4]
 800f21a:	683a      	ldr	r2, [r7, #0]
 800f21c:	6978      	ldr	r0, [r7, #20]
 800f21e:	f000 f8d1 	bl	800f3c4 <prvInsertTimerInActiveList>
 800f222:	4603      	mov	r3, r0
 800f224:	2b00      	cmp	r3, #0
 800f226:	d01f      	beq.n	800f268 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f228:	2300      	movs	r3, #0
 800f22a:	9300      	str	r3, [sp, #0]
 800f22c:	2300      	movs	r3, #0
 800f22e:	687a      	ldr	r2, [r7, #4]
 800f230:	2100      	movs	r1, #0
 800f232:	6978      	ldr	r0, [r7, #20]
 800f234:	f7ff ff88 	bl	800f148 <xTimerGenericCommand>
 800f238:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800f23a:	693b      	ldr	r3, [r7, #16]
 800f23c:	2b00      	cmp	r3, #0
 800f23e:	d113      	bne.n	800f268 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800f240:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f244:	f383 8811 	msr	BASEPRI, r3
 800f248:	f3bf 8f6f 	isb	sy
 800f24c:	f3bf 8f4f 	dsb	sy
 800f250:	60fb      	str	r3, [r7, #12]
}
 800f252:	bf00      	nop
 800f254:	e7fe      	b.n	800f254 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f256:	697b      	ldr	r3, [r7, #20]
 800f258:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f25c:	f023 0301 	bic.w	r3, r3, #1
 800f260:	b2da      	uxtb	r2, r3
 800f262:	697b      	ldr	r3, [r7, #20]
 800f264:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	6a1b      	ldr	r3, [r3, #32]
 800f26c:	6978      	ldr	r0, [r7, #20]
 800f26e:	4798      	blx	r3
}
 800f270:	bf00      	nop
 800f272:	3718      	adds	r7, #24
 800f274:	46bd      	mov	sp, r7
 800f276:	bd80      	pop	{r7, pc}
 800f278:	200071ec 	.word	0x200071ec

0800f27c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800f27c:	b580      	push	{r7, lr}
 800f27e:	b084      	sub	sp, #16
 800f280:	af00      	add	r7, sp, #0
 800f282:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f284:	f107 0308 	add.w	r3, r7, #8
 800f288:	4618      	mov	r0, r3
 800f28a:	f000 f857 	bl	800f33c <prvGetNextExpireTime>
 800f28e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800f290:	68bb      	ldr	r3, [r7, #8]
 800f292:	4619      	mov	r1, r3
 800f294:	68f8      	ldr	r0, [r7, #12]
 800f296:	f000 f803 	bl	800f2a0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800f29a:	f000 f8d5 	bl	800f448 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800f29e:	e7f1      	b.n	800f284 <prvTimerTask+0x8>

0800f2a0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800f2a0:	b580      	push	{r7, lr}
 800f2a2:	b084      	sub	sp, #16
 800f2a4:	af00      	add	r7, sp, #0
 800f2a6:	6078      	str	r0, [r7, #4]
 800f2a8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800f2aa:	f7ff f875 	bl	800e398 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f2ae:	f107 0308 	add.w	r3, r7, #8
 800f2b2:	4618      	mov	r0, r3
 800f2b4:	f000 f866 	bl	800f384 <prvSampleTimeNow>
 800f2b8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800f2ba:	68bb      	ldr	r3, [r7, #8]
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d130      	bne.n	800f322 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	2b00      	cmp	r3, #0
 800f2c4:	d10a      	bne.n	800f2dc <prvProcessTimerOrBlockTask+0x3c>
 800f2c6:	687a      	ldr	r2, [r7, #4]
 800f2c8:	68fb      	ldr	r3, [r7, #12]
 800f2ca:	429a      	cmp	r2, r3
 800f2cc:	d806      	bhi.n	800f2dc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800f2ce:	f7ff f871 	bl	800e3b4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800f2d2:	68f9      	ldr	r1, [r7, #12]
 800f2d4:	6878      	ldr	r0, [r7, #4]
 800f2d6:	f7ff ff85 	bl	800f1e4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800f2da:	e024      	b.n	800f326 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	2b00      	cmp	r3, #0
 800f2e0:	d008      	beq.n	800f2f4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800f2e2:	4b13      	ldr	r3, [pc, #76]	; (800f330 <prvProcessTimerOrBlockTask+0x90>)
 800f2e4:	681b      	ldr	r3, [r3, #0]
 800f2e6:	681b      	ldr	r3, [r3, #0]
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d101      	bne.n	800f2f0 <prvProcessTimerOrBlockTask+0x50>
 800f2ec:	2301      	movs	r3, #1
 800f2ee:	e000      	b.n	800f2f2 <prvProcessTimerOrBlockTask+0x52>
 800f2f0:	2300      	movs	r3, #0
 800f2f2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f2f4:	4b0f      	ldr	r3, [pc, #60]	; (800f334 <prvProcessTimerOrBlockTask+0x94>)
 800f2f6:	6818      	ldr	r0, [r3, #0]
 800f2f8:	687a      	ldr	r2, [r7, #4]
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	1ad3      	subs	r3, r2, r3
 800f2fe:	683a      	ldr	r2, [r7, #0]
 800f300:	4619      	mov	r1, r3
 800f302:	f7fe fd3b 	bl	800dd7c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800f306:	f7ff f855 	bl	800e3b4 <xTaskResumeAll>
 800f30a:	4603      	mov	r3, r0
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d10a      	bne.n	800f326 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800f310:	4b09      	ldr	r3, [pc, #36]	; (800f338 <prvProcessTimerOrBlockTask+0x98>)
 800f312:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f316:	601a      	str	r2, [r3, #0]
 800f318:	f3bf 8f4f 	dsb	sy
 800f31c:	f3bf 8f6f 	isb	sy
}
 800f320:	e001      	b.n	800f326 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800f322:	f7ff f847 	bl	800e3b4 <xTaskResumeAll>
}
 800f326:	bf00      	nop
 800f328:	3710      	adds	r7, #16
 800f32a:	46bd      	mov	sp, r7
 800f32c:	bd80      	pop	{r7, pc}
 800f32e:	bf00      	nop
 800f330:	200071f0 	.word	0x200071f0
 800f334:	200071f4 	.word	0x200071f4
 800f338:	e000ed04 	.word	0xe000ed04

0800f33c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800f33c:	b480      	push	{r7}
 800f33e:	b085      	sub	sp, #20
 800f340:	af00      	add	r7, sp, #0
 800f342:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f344:	4b0e      	ldr	r3, [pc, #56]	; (800f380 <prvGetNextExpireTime+0x44>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	2b00      	cmp	r3, #0
 800f34c:	d101      	bne.n	800f352 <prvGetNextExpireTime+0x16>
 800f34e:	2201      	movs	r2, #1
 800f350:	e000      	b.n	800f354 <prvGetNextExpireTime+0x18>
 800f352:	2200      	movs	r2, #0
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	681b      	ldr	r3, [r3, #0]
 800f35c:	2b00      	cmp	r3, #0
 800f35e:	d105      	bne.n	800f36c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f360:	4b07      	ldr	r3, [pc, #28]	; (800f380 <prvGetNextExpireTime+0x44>)
 800f362:	681b      	ldr	r3, [r3, #0]
 800f364:	68db      	ldr	r3, [r3, #12]
 800f366:	681b      	ldr	r3, [r3, #0]
 800f368:	60fb      	str	r3, [r7, #12]
 800f36a:	e001      	b.n	800f370 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800f36c:	2300      	movs	r3, #0
 800f36e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800f370:	68fb      	ldr	r3, [r7, #12]
}
 800f372:	4618      	mov	r0, r3
 800f374:	3714      	adds	r7, #20
 800f376:	46bd      	mov	sp, r7
 800f378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37c:	4770      	bx	lr
 800f37e:	bf00      	nop
 800f380:	200071ec 	.word	0x200071ec

0800f384 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800f384:	b580      	push	{r7, lr}
 800f386:	b084      	sub	sp, #16
 800f388:	af00      	add	r7, sp, #0
 800f38a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800f38c:	f7ff f8b0 	bl	800e4f0 <xTaskGetTickCount>
 800f390:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800f392:	4b0b      	ldr	r3, [pc, #44]	; (800f3c0 <prvSampleTimeNow+0x3c>)
 800f394:	681b      	ldr	r3, [r3, #0]
 800f396:	68fa      	ldr	r2, [r7, #12]
 800f398:	429a      	cmp	r2, r3
 800f39a:	d205      	bcs.n	800f3a8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800f39c:	f000 f936 	bl	800f60c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800f3a0:	687b      	ldr	r3, [r7, #4]
 800f3a2:	2201      	movs	r2, #1
 800f3a4:	601a      	str	r2, [r3, #0]
 800f3a6:	e002      	b.n	800f3ae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800f3ae:	4a04      	ldr	r2, [pc, #16]	; (800f3c0 <prvSampleTimeNow+0x3c>)
 800f3b0:	68fb      	ldr	r3, [r7, #12]
 800f3b2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800f3b4:	68fb      	ldr	r3, [r7, #12]
}
 800f3b6:	4618      	mov	r0, r3
 800f3b8:	3710      	adds	r7, #16
 800f3ba:	46bd      	mov	sp, r7
 800f3bc:	bd80      	pop	{r7, pc}
 800f3be:	bf00      	nop
 800f3c0:	200071fc 	.word	0x200071fc

0800f3c4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800f3c4:	b580      	push	{r7, lr}
 800f3c6:	b086      	sub	sp, #24
 800f3c8:	af00      	add	r7, sp, #0
 800f3ca:	60f8      	str	r0, [r7, #12]
 800f3cc:	60b9      	str	r1, [r7, #8]
 800f3ce:	607a      	str	r2, [r7, #4]
 800f3d0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800f3d2:	2300      	movs	r3, #0
 800f3d4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f3d6:	68fb      	ldr	r3, [r7, #12]
 800f3d8:	68ba      	ldr	r2, [r7, #8]
 800f3da:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f3dc:	68fb      	ldr	r3, [r7, #12]
 800f3de:	68fa      	ldr	r2, [r7, #12]
 800f3e0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800f3e2:	68ba      	ldr	r2, [r7, #8]
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	429a      	cmp	r2, r3
 800f3e8:	d812      	bhi.n	800f410 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f3ea:	687a      	ldr	r2, [r7, #4]
 800f3ec:	683b      	ldr	r3, [r7, #0]
 800f3ee:	1ad2      	subs	r2, r2, r3
 800f3f0:	68fb      	ldr	r3, [r7, #12]
 800f3f2:	699b      	ldr	r3, [r3, #24]
 800f3f4:	429a      	cmp	r2, r3
 800f3f6:	d302      	bcc.n	800f3fe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800f3f8:	2301      	movs	r3, #1
 800f3fa:	617b      	str	r3, [r7, #20]
 800f3fc:	e01b      	b.n	800f436 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f3fe:	4b10      	ldr	r3, [pc, #64]	; (800f440 <prvInsertTimerInActiveList+0x7c>)
 800f400:	681a      	ldr	r2, [r3, #0]
 800f402:	68fb      	ldr	r3, [r7, #12]
 800f404:	3304      	adds	r3, #4
 800f406:	4619      	mov	r1, r3
 800f408:	4610      	mov	r0, r2
 800f40a:	f7fd fbc4 	bl	800cb96 <vListInsert>
 800f40e:	e012      	b.n	800f436 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f410:	687a      	ldr	r2, [r7, #4]
 800f412:	683b      	ldr	r3, [r7, #0]
 800f414:	429a      	cmp	r2, r3
 800f416:	d206      	bcs.n	800f426 <prvInsertTimerInActiveList+0x62>
 800f418:	68ba      	ldr	r2, [r7, #8]
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	429a      	cmp	r2, r3
 800f41e:	d302      	bcc.n	800f426 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800f420:	2301      	movs	r3, #1
 800f422:	617b      	str	r3, [r7, #20]
 800f424:	e007      	b.n	800f436 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f426:	4b07      	ldr	r3, [pc, #28]	; (800f444 <prvInsertTimerInActiveList+0x80>)
 800f428:	681a      	ldr	r2, [r3, #0]
 800f42a:	68fb      	ldr	r3, [r7, #12]
 800f42c:	3304      	adds	r3, #4
 800f42e:	4619      	mov	r1, r3
 800f430:	4610      	mov	r0, r2
 800f432:	f7fd fbb0 	bl	800cb96 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800f436:	697b      	ldr	r3, [r7, #20]
}
 800f438:	4618      	mov	r0, r3
 800f43a:	3718      	adds	r7, #24
 800f43c:	46bd      	mov	sp, r7
 800f43e:	bd80      	pop	{r7, pc}
 800f440:	200071f0 	.word	0x200071f0
 800f444:	200071ec 	.word	0x200071ec

0800f448 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800f448:	b580      	push	{r7, lr}
 800f44a:	b08e      	sub	sp, #56	; 0x38
 800f44c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f44e:	e0ca      	b.n	800f5e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2b00      	cmp	r3, #0
 800f454:	da18      	bge.n	800f488 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800f456:	1d3b      	adds	r3, r7, #4
 800f458:	3304      	adds	r3, #4
 800f45a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800f45c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d10a      	bne.n	800f478 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800f462:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f466:	f383 8811 	msr	BASEPRI, r3
 800f46a:	f3bf 8f6f 	isb	sy
 800f46e:	f3bf 8f4f 	dsb	sy
 800f472:	61fb      	str	r3, [r7, #28]
}
 800f474:	bf00      	nop
 800f476:	e7fe      	b.n	800f476 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800f478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f47a:	681b      	ldr	r3, [r3, #0]
 800f47c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f47e:	6850      	ldr	r0, [r2, #4]
 800f480:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800f482:	6892      	ldr	r2, [r2, #8]
 800f484:	4611      	mov	r1, r2
 800f486:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800f488:	687b      	ldr	r3, [r7, #4]
 800f48a:	2b00      	cmp	r3, #0
 800f48c:	f2c0 80aa 	blt.w	800f5e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800f490:	68fb      	ldr	r3, [r7, #12]
 800f492:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800f494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f496:	695b      	ldr	r3, [r3, #20]
 800f498:	2b00      	cmp	r3, #0
 800f49a:	d004      	beq.n	800f4a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f49c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f49e:	3304      	adds	r3, #4
 800f4a0:	4618      	mov	r0, r3
 800f4a2:	f7fd fbb1 	bl	800cc08 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f4a6:	463b      	mov	r3, r7
 800f4a8:	4618      	mov	r0, r3
 800f4aa:	f7ff ff6b 	bl	800f384 <prvSampleTimeNow>
 800f4ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800f4b0:	687b      	ldr	r3, [r7, #4]
 800f4b2:	2b09      	cmp	r3, #9
 800f4b4:	f200 8097 	bhi.w	800f5e6 <prvProcessReceivedCommands+0x19e>
 800f4b8:	a201      	add	r2, pc, #4	; (adr r2, 800f4c0 <prvProcessReceivedCommands+0x78>)
 800f4ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f4be:	bf00      	nop
 800f4c0:	0800f4e9 	.word	0x0800f4e9
 800f4c4:	0800f4e9 	.word	0x0800f4e9
 800f4c8:	0800f4e9 	.word	0x0800f4e9
 800f4cc:	0800f55d 	.word	0x0800f55d
 800f4d0:	0800f571 	.word	0x0800f571
 800f4d4:	0800f5bb 	.word	0x0800f5bb
 800f4d8:	0800f4e9 	.word	0x0800f4e9
 800f4dc:	0800f4e9 	.word	0x0800f4e9
 800f4e0:	0800f55d 	.word	0x0800f55d
 800f4e4:	0800f571 	.word	0x0800f571
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f4e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f4ee:	f043 0301 	orr.w	r3, r3, #1
 800f4f2:	b2da      	uxtb	r2, r3
 800f4f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800f4fa:	68ba      	ldr	r2, [r7, #8]
 800f4fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f4fe:	699b      	ldr	r3, [r3, #24]
 800f500:	18d1      	adds	r1, r2, r3
 800f502:	68bb      	ldr	r3, [r7, #8]
 800f504:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f506:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f508:	f7ff ff5c 	bl	800f3c4 <prvInsertTimerInActiveList>
 800f50c:	4603      	mov	r3, r0
 800f50e:	2b00      	cmp	r3, #0
 800f510:	d069      	beq.n	800f5e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f514:	6a1b      	ldr	r3, [r3, #32]
 800f516:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f518:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f51a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f51c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f520:	f003 0304 	and.w	r3, r3, #4
 800f524:	2b00      	cmp	r3, #0
 800f526:	d05e      	beq.n	800f5e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800f528:	68ba      	ldr	r2, [r7, #8]
 800f52a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f52c:	699b      	ldr	r3, [r3, #24]
 800f52e:	441a      	add	r2, r3
 800f530:	2300      	movs	r3, #0
 800f532:	9300      	str	r3, [sp, #0]
 800f534:	2300      	movs	r3, #0
 800f536:	2100      	movs	r1, #0
 800f538:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f53a:	f7ff fe05 	bl	800f148 <xTimerGenericCommand>
 800f53e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800f540:	6a3b      	ldr	r3, [r7, #32]
 800f542:	2b00      	cmp	r3, #0
 800f544:	d14f      	bne.n	800f5e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800f546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54a:	f383 8811 	msr	BASEPRI, r3
 800f54e:	f3bf 8f6f 	isb	sy
 800f552:	f3bf 8f4f 	dsb	sy
 800f556:	61bb      	str	r3, [r7, #24]
}
 800f558:	bf00      	nop
 800f55a:	e7fe      	b.n	800f55a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f55c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f55e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f562:	f023 0301 	bic.w	r3, r3, #1
 800f566:	b2da      	uxtb	r2, r3
 800f568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f56a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800f56e:	e03a      	b.n	800f5e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800f570:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f572:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f576:	f043 0301 	orr.w	r3, r3, #1
 800f57a:	b2da      	uxtb	r2, r3
 800f57c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f57e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800f582:	68ba      	ldr	r2, [r7, #8]
 800f584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f586:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800f588:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f58a:	699b      	ldr	r3, [r3, #24]
 800f58c:	2b00      	cmp	r3, #0
 800f58e:	d10a      	bne.n	800f5a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800f590:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f594:	f383 8811 	msr	BASEPRI, r3
 800f598:	f3bf 8f6f 	isb	sy
 800f59c:	f3bf 8f4f 	dsb	sy
 800f5a0:	617b      	str	r3, [r7, #20]
}
 800f5a2:	bf00      	nop
 800f5a4:	e7fe      	b.n	800f5a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800f5a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5a8:	699a      	ldr	r2, [r3, #24]
 800f5aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5ac:	18d1      	adds	r1, r2, r3
 800f5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5b4:	f7ff ff06 	bl	800f3c4 <prvInsertTimerInActiveList>
					break;
 800f5b8:	e015      	b.n	800f5e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800f5ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5c0:	f003 0302 	and.w	r3, r3, #2
 800f5c4:	2b00      	cmp	r3, #0
 800f5c6:	d103      	bne.n	800f5d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800f5c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f5ca:	f000 fc01 	bl	800fdd0 <vPortFree>
 800f5ce:	e00a      	b.n	800f5e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800f5d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f5d6:	f023 0301 	bic.w	r3, r3, #1
 800f5da:	b2da      	uxtb	r2, r3
 800f5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f5de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800f5e2:	e000      	b.n	800f5e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800f5e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800f5e6:	4b08      	ldr	r3, [pc, #32]	; (800f608 <prvProcessReceivedCommands+0x1c0>)
 800f5e8:	681b      	ldr	r3, [r3, #0]
 800f5ea:	1d39      	adds	r1, r7, #4
 800f5ec:	2200      	movs	r2, #0
 800f5ee:	4618      	mov	r0, r3
 800f5f0:	f7fd ffb8 	bl	800d564 <xQueueReceive>
 800f5f4:	4603      	mov	r3, r0
 800f5f6:	2b00      	cmp	r3, #0
 800f5f8:	f47f af2a 	bne.w	800f450 <prvProcessReceivedCommands+0x8>
	}
}
 800f5fc:	bf00      	nop
 800f5fe:	bf00      	nop
 800f600:	3730      	adds	r7, #48	; 0x30
 800f602:	46bd      	mov	sp, r7
 800f604:	bd80      	pop	{r7, pc}
 800f606:	bf00      	nop
 800f608:	200071f4 	.word	0x200071f4

0800f60c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800f60c:	b580      	push	{r7, lr}
 800f60e:	b088      	sub	sp, #32
 800f610:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f612:	e048      	b.n	800f6a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f614:	4b2d      	ldr	r3, [pc, #180]	; (800f6cc <prvSwitchTimerLists+0xc0>)
 800f616:	681b      	ldr	r3, [r3, #0]
 800f618:	68db      	ldr	r3, [r3, #12]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f61e:	4b2b      	ldr	r3, [pc, #172]	; (800f6cc <prvSwitchTimerLists+0xc0>)
 800f620:	681b      	ldr	r3, [r3, #0]
 800f622:	68db      	ldr	r3, [r3, #12]
 800f624:	68db      	ldr	r3, [r3, #12]
 800f626:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f628:	68fb      	ldr	r3, [r7, #12]
 800f62a:	3304      	adds	r3, #4
 800f62c:	4618      	mov	r0, r3
 800f62e:	f7fd faeb 	bl	800cc08 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f632:	68fb      	ldr	r3, [r7, #12]
 800f634:	6a1b      	ldr	r3, [r3, #32]
 800f636:	68f8      	ldr	r0, [r7, #12]
 800f638:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f63a:	68fb      	ldr	r3, [r7, #12]
 800f63c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800f640:	f003 0304 	and.w	r3, r3, #4
 800f644:	2b00      	cmp	r3, #0
 800f646:	d02e      	beq.n	800f6a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f648:	68fb      	ldr	r3, [r7, #12]
 800f64a:	699b      	ldr	r3, [r3, #24]
 800f64c:	693a      	ldr	r2, [r7, #16]
 800f64e:	4413      	add	r3, r2
 800f650:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800f652:	68ba      	ldr	r2, [r7, #8]
 800f654:	693b      	ldr	r3, [r7, #16]
 800f656:	429a      	cmp	r2, r3
 800f658:	d90e      	bls.n	800f678 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f65a:	68fb      	ldr	r3, [r7, #12]
 800f65c:	68ba      	ldr	r2, [r7, #8]
 800f65e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	68fa      	ldr	r2, [r7, #12]
 800f664:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f666:	4b19      	ldr	r3, [pc, #100]	; (800f6cc <prvSwitchTimerLists+0xc0>)
 800f668:	681a      	ldr	r2, [r3, #0]
 800f66a:	68fb      	ldr	r3, [r7, #12]
 800f66c:	3304      	adds	r3, #4
 800f66e:	4619      	mov	r1, r3
 800f670:	4610      	mov	r0, r2
 800f672:	f7fd fa90 	bl	800cb96 <vListInsert>
 800f676:	e016      	b.n	800f6a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f678:	2300      	movs	r3, #0
 800f67a:	9300      	str	r3, [sp, #0]
 800f67c:	2300      	movs	r3, #0
 800f67e:	693a      	ldr	r2, [r7, #16]
 800f680:	2100      	movs	r1, #0
 800f682:	68f8      	ldr	r0, [r7, #12]
 800f684:	f7ff fd60 	bl	800f148 <xTimerGenericCommand>
 800f688:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800f68a:	687b      	ldr	r3, [r7, #4]
 800f68c:	2b00      	cmp	r3, #0
 800f68e:	d10a      	bne.n	800f6a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800f690:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f694:	f383 8811 	msr	BASEPRI, r3
 800f698:	f3bf 8f6f 	isb	sy
 800f69c:	f3bf 8f4f 	dsb	sy
 800f6a0:	603b      	str	r3, [r7, #0]
}
 800f6a2:	bf00      	nop
 800f6a4:	e7fe      	b.n	800f6a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f6a6:	4b09      	ldr	r3, [pc, #36]	; (800f6cc <prvSwitchTimerLists+0xc0>)
 800f6a8:	681b      	ldr	r3, [r3, #0]
 800f6aa:	681b      	ldr	r3, [r3, #0]
 800f6ac:	2b00      	cmp	r3, #0
 800f6ae:	d1b1      	bne.n	800f614 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800f6b0:	4b06      	ldr	r3, [pc, #24]	; (800f6cc <prvSwitchTimerLists+0xc0>)
 800f6b2:	681b      	ldr	r3, [r3, #0]
 800f6b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800f6b6:	4b06      	ldr	r3, [pc, #24]	; (800f6d0 <prvSwitchTimerLists+0xc4>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	4a04      	ldr	r2, [pc, #16]	; (800f6cc <prvSwitchTimerLists+0xc0>)
 800f6bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f6be:	4a04      	ldr	r2, [pc, #16]	; (800f6d0 <prvSwitchTimerLists+0xc4>)
 800f6c0:	697b      	ldr	r3, [r7, #20]
 800f6c2:	6013      	str	r3, [r2, #0]
}
 800f6c4:	bf00      	nop
 800f6c6:	3718      	adds	r7, #24
 800f6c8:	46bd      	mov	sp, r7
 800f6ca:	bd80      	pop	{r7, pc}
 800f6cc:	200071ec 	.word	0x200071ec
 800f6d0:	200071f0 	.word	0x200071f0

0800f6d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b082      	sub	sp, #8
 800f6d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800f6da:	f000 f98b 	bl	800f9f4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800f6de:	4b15      	ldr	r3, [pc, #84]	; (800f734 <prvCheckForValidListAndQueue+0x60>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d120      	bne.n	800f728 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f6e6:	4814      	ldr	r0, [pc, #80]	; (800f738 <prvCheckForValidListAndQueue+0x64>)
 800f6e8:	f7fd fa04 	bl	800caf4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f6ec:	4813      	ldr	r0, [pc, #76]	; (800f73c <prvCheckForValidListAndQueue+0x68>)
 800f6ee:	f7fd fa01 	bl	800caf4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f6f2:	4b13      	ldr	r3, [pc, #76]	; (800f740 <prvCheckForValidListAndQueue+0x6c>)
 800f6f4:	4a10      	ldr	r2, [pc, #64]	; (800f738 <prvCheckForValidListAndQueue+0x64>)
 800f6f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f6f8:	4b12      	ldr	r3, [pc, #72]	; (800f744 <prvCheckForValidListAndQueue+0x70>)
 800f6fa:	4a10      	ldr	r2, [pc, #64]	; (800f73c <prvCheckForValidListAndQueue+0x68>)
 800f6fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f6fe:	2300      	movs	r3, #0
 800f700:	9300      	str	r3, [sp, #0]
 800f702:	4b11      	ldr	r3, [pc, #68]	; (800f748 <prvCheckForValidListAndQueue+0x74>)
 800f704:	4a11      	ldr	r2, [pc, #68]	; (800f74c <prvCheckForValidListAndQueue+0x78>)
 800f706:	2110      	movs	r1, #16
 800f708:	200a      	movs	r0, #10
 800f70a:	f7fd fb0f 	bl	800cd2c <xQueueGenericCreateStatic>
 800f70e:	4603      	mov	r3, r0
 800f710:	4a08      	ldr	r2, [pc, #32]	; (800f734 <prvCheckForValidListAndQueue+0x60>)
 800f712:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f714:	4b07      	ldr	r3, [pc, #28]	; (800f734 <prvCheckForValidListAndQueue+0x60>)
 800f716:	681b      	ldr	r3, [r3, #0]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d005      	beq.n	800f728 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f71c:	4b05      	ldr	r3, [pc, #20]	; (800f734 <prvCheckForValidListAndQueue+0x60>)
 800f71e:	681b      	ldr	r3, [r3, #0]
 800f720:	490b      	ldr	r1, [pc, #44]	; (800f750 <prvCheckForValidListAndQueue+0x7c>)
 800f722:	4618      	mov	r0, r3
 800f724:	f7fe fad6 	bl	800dcd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f728:	f000 f994 	bl	800fa54 <vPortExitCritical>
}
 800f72c:	bf00      	nop
 800f72e:	46bd      	mov	sp, r7
 800f730:	bd80      	pop	{r7, pc}
 800f732:	bf00      	nop
 800f734:	200071f4 	.word	0x200071f4
 800f738:	200071c4 	.word	0x200071c4
 800f73c:	200071d8 	.word	0x200071d8
 800f740:	200071ec 	.word	0x200071ec
 800f744:	200071f0 	.word	0x200071f0
 800f748:	200072a0 	.word	0x200072a0
 800f74c:	20007200 	.word	0x20007200
 800f750:	08012988 	.word	0x08012988

0800f754 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 800f754:	b580      	push	{r7, lr}
 800f756:	b08a      	sub	sp, #40	; 0x28
 800f758:	af00      	add	r7, sp, #0
 800f75a:	60f8      	str	r0, [r7, #12]
 800f75c:	60b9      	str	r1, [r7, #8]
 800f75e:	607a      	str	r2, [r7, #4]
 800f760:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800f762:	f06f 0301 	mvn.w	r3, #1
 800f766:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800f76c:	68bb      	ldr	r3, [r7, #8]
 800f76e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800f770:	687b      	ldr	r3, [r7, #4]
 800f772:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f774:	4b06      	ldr	r3, [pc, #24]	; (800f790 <xTimerPendFunctionCallFromISR+0x3c>)
 800f776:	6818      	ldr	r0, [r3, #0]
 800f778:	f107 0114 	add.w	r1, r7, #20
 800f77c:	2300      	movs	r3, #0
 800f77e:	683a      	ldr	r2, [r7, #0]
 800f780:	f7fd fdc8 	bl	800d314 <xQueueGenericSendFromISR>
 800f784:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 800f786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800f788:	4618      	mov	r0, r3
 800f78a:	3728      	adds	r7, #40	; 0x28
 800f78c:	46bd      	mov	sp, r7
 800f78e:	bd80      	pop	{r7, pc}
 800f790:	200071f4 	.word	0x200071f4

0800f794 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f794:	b480      	push	{r7}
 800f796:	b085      	sub	sp, #20
 800f798:	af00      	add	r7, sp, #0
 800f79a:	60f8      	str	r0, [r7, #12]
 800f79c:	60b9      	str	r1, [r7, #8]
 800f79e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f7a0:	68fb      	ldr	r3, [r7, #12]
 800f7a2:	3b04      	subs	r3, #4
 800f7a4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f7a6:	68fb      	ldr	r3, [r7, #12]
 800f7a8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f7ac:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f7ae:	68fb      	ldr	r3, [r7, #12]
 800f7b0:	3b04      	subs	r3, #4
 800f7b2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f7b4:	68bb      	ldr	r3, [r7, #8]
 800f7b6:	f023 0201 	bic.w	r2, r3, #1
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f7be:	68fb      	ldr	r3, [r7, #12]
 800f7c0:	3b04      	subs	r3, #4
 800f7c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f7c4:	4a0c      	ldr	r2, [pc, #48]	; (800f7f8 <pxPortInitialiseStack+0x64>)
 800f7c6:	68fb      	ldr	r3, [r7, #12]
 800f7c8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f7ca:	68fb      	ldr	r3, [r7, #12]
 800f7cc:	3b14      	subs	r3, #20
 800f7ce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f7d0:	687a      	ldr	r2, [r7, #4]
 800f7d2:	68fb      	ldr	r3, [r7, #12]
 800f7d4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f7d6:	68fb      	ldr	r3, [r7, #12]
 800f7d8:	3b04      	subs	r3, #4
 800f7da:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f7dc:	68fb      	ldr	r3, [r7, #12]
 800f7de:	f06f 0202 	mvn.w	r2, #2
 800f7e2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f7e4:	68fb      	ldr	r3, [r7, #12]
 800f7e6:	3b20      	subs	r3, #32
 800f7e8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f7ea:	68fb      	ldr	r3, [r7, #12]
}
 800f7ec:	4618      	mov	r0, r3
 800f7ee:	3714      	adds	r7, #20
 800f7f0:	46bd      	mov	sp, r7
 800f7f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7f6:	4770      	bx	lr
 800f7f8:	0800f7fd 	.word	0x0800f7fd

0800f7fc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f7fc:	b480      	push	{r7}
 800f7fe:	b085      	sub	sp, #20
 800f800:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f802:	2300      	movs	r3, #0
 800f804:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f806:	4b12      	ldr	r3, [pc, #72]	; (800f850 <prvTaskExitError+0x54>)
 800f808:	681b      	ldr	r3, [r3, #0]
 800f80a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f80e:	d00a      	beq.n	800f826 <prvTaskExitError+0x2a>
	__asm volatile
 800f810:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f814:	f383 8811 	msr	BASEPRI, r3
 800f818:	f3bf 8f6f 	isb	sy
 800f81c:	f3bf 8f4f 	dsb	sy
 800f820:	60fb      	str	r3, [r7, #12]
}
 800f822:	bf00      	nop
 800f824:	e7fe      	b.n	800f824 <prvTaskExitError+0x28>
	__asm volatile
 800f826:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f82a:	f383 8811 	msr	BASEPRI, r3
 800f82e:	f3bf 8f6f 	isb	sy
 800f832:	f3bf 8f4f 	dsb	sy
 800f836:	60bb      	str	r3, [r7, #8]
}
 800f838:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f83a:	bf00      	nop
 800f83c:	687b      	ldr	r3, [r7, #4]
 800f83e:	2b00      	cmp	r3, #0
 800f840:	d0fc      	beq.n	800f83c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f842:	bf00      	nop
 800f844:	bf00      	nop
 800f846:	3714      	adds	r7, #20
 800f848:	46bd      	mov	sp, r7
 800f84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f84e:	4770      	bx	lr
 800f850:	20000058 	.word	0x20000058
	...

0800f860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f860:	4b07      	ldr	r3, [pc, #28]	; (800f880 <pxCurrentTCBConst2>)
 800f862:	6819      	ldr	r1, [r3, #0]
 800f864:	6808      	ldr	r0, [r1, #0]
 800f866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f86a:	f380 8809 	msr	PSP, r0
 800f86e:	f3bf 8f6f 	isb	sy
 800f872:	f04f 0000 	mov.w	r0, #0
 800f876:	f380 8811 	msr	BASEPRI, r0
 800f87a:	4770      	bx	lr
 800f87c:	f3af 8000 	nop.w

0800f880 <pxCurrentTCBConst2>:
 800f880:	20006cc4 	.word	0x20006cc4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f884:	bf00      	nop
 800f886:	bf00      	nop

0800f888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f888:	4808      	ldr	r0, [pc, #32]	; (800f8ac <prvPortStartFirstTask+0x24>)
 800f88a:	6800      	ldr	r0, [r0, #0]
 800f88c:	6800      	ldr	r0, [r0, #0]
 800f88e:	f380 8808 	msr	MSP, r0
 800f892:	f04f 0000 	mov.w	r0, #0
 800f896:	f380 8814 	msr	CONTROL, r0
 800f89a:	b662      	cpsie	i
 800f89c:	b661      	cpsie	f
 800f89e:	f3bf 8f4f 	dsb	sy
 800f8a2:	f3bf 8f6f 	isb	sy
 800f8a6:	df00      	svc	0
 800f8a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f8aa:	bf00      	nop
 800f8ac:	e000ed08 	.word	0xe000ed08

0800f8b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b086      	sub	sp, #24
 800f8b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f8b6:	4b46      	ldr	r3, [pc, #280]	; (800f9d0 <xPortStartScheduler+0x120>)
 800f8b8:	681b      	ldr	r3, [r3, #0]
 800f8ba:	4a46      	ldr	r2, [pc, #280]	; (800f9d4 <xPortStartScheduler+0x124>)
 800f8bc:	4293      	cmp	r3, r2
 800f8be:	d10a      	bne.n	800f8d6 <xPortStartScheduler+0x26>
	__asm volatile
 800f8c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8c4:	f383 8811 	msr	BASEPRI, r3
 800f8c8:	f3bf 8f6f 	isb	sy
 800f8cc:	f3bf 8f4f 	dsb	sy
 800f8d0:	613b      	str	r3, [r7, #16]
}
 800f8d2:	bf00      	nop
 800f8d4:	e7fe      	b.n	800f8d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f8d6:	4b3e      	ldr	r3, [pc, #248]	; (800f9d0 <xPortStartScheduler+0x120>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	4a3f      	ldr	r2, [pc, #252]	; (800f9d8 <xPortStartScheduler+0x128>)
 800f8dc:	4293      	cmp	r3, r2
 800f8de:	d10a      	bne.n	800f8f6 <xPortStartScheduler+0x46>
	__asm volatile
 800f8e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f8e4:	f383 8811 	msr	BASEPRI, r3
 800f8e8:	f3bf 8f6f 	isb	sy
 800f8ec:	f3bf 8f4f 	dsb	sy
 800f8f0:	60fb      	str	r3, [r7, #12]
}
 800f8f2:	bf00      	nop
 800f8f4:	e7fe      	b.n	800f8f4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f8f6:	4b39      	ldr	r3, [pc, #228]	; (800f9dc <xPortStartScheduler+0x12c>)
 800f8f8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f8fa:	697b      	ldr	r3, [r7, #20]
 800f8fc:	781b      	ldrb	r3, [r3, #0]
 800f8fe:	b2db      	uxtb	r3, r3
 800f900:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f902:	697b      	ldr	r3, [r7, #20]
 800f904:	22ff      	movs	r2, #255	; 0xff
 800f906:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f908:	697b      	ldr	r3, [r7, #20]
 800f90a:	781b      	ldrb	r3, [r3, #0]
 800f90c:	b2db      	uxtb	r3, r3
 800f90e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f910:	78fb      	ldrb	r3, [r7, #3]
 800f912:	b2db      	uxtb	r3, r3
 800f914:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f918:	b2da      	uxtb	r2, r3
 800f91a:	4b31      	ldr	r3, [pc, #196]	; (800f9e0 <xPortStartScheduler+0x130>)
 800f91c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f91e:	4b31      	ldr	r3, [pc, #196]	; (800f9e4 <xPortStartScheduler+0x134>)
 800f920:	2207      	movs	r2, #7
 800f922:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f924:	e009      	b.n	800f93a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800f926:	4b2f      	ldr	r3, [pc, #188]	; (800f9e4 <xPortStartScheduler+0x134>)
 800f928:	681b      	ldr	r3, [r3, #0]
 800f92a:	3b01      	subs	r3, #1
 800f92c:	4a2d      	ldr	r2, [pc, #180]	; (800f9e4 <xPortStartScheduler+0x134>)
 800f92e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f930:	78fb      	ldrb	r3, [r7, #3]
 800f932:	b2db      	uxtb	r3, r3
 800f934:	005b      	lsls	r3, r3, #1
 800f936:	b2db      	uxtb	r3, r3
 800f938:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f93a:	78fb      	ldrb	r3, [r7, #3]
 800f93c:	b2db      	uxtb	r3, r3
 800f93e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f942:	2b80      	cmp	r3, #128	; 0x80
 800f944:	d0ef      	beq.n	800f926 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f946:	4b27      	ldr	r3, [pc, #156]	; (800f9e4 <xPortStartScheduler+0x134>)
 800f948:	681b      	ldr	r3, [r3, #0]
 800f94a:	f1c3 0307 	rsb	r3, r3, #7
 800f94e:	2b04      	cmp	r3, #4
 800f950:	d00a      	beq.n	800f968 <xPortStartScheduler+0xb8>
	__asm volatile
 800f952:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f956:	f383 8811 	msr	BASEPRI, r3
 800f95a:	f3bf 8f6f 	isb	sy
 800f95e:	f3bf 8f4f 	dsb	sy
 800f962:	60bb      	str	r3, [r7, #8]
}
 800f964:	bf00      	nop
 800f966:	e7fe      	b.n	800f966 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f968:	4b1e      	ldr	r3, [pc, #120]	; (800f9e4 <xPortStartScheduler+0x134>)
 800f96a:	681b      	ldr	r3, [r3, #0]
 800f96c:	021b      	lsls	r3, r3, #8
 800f96e:	4a1d      	ldr	r2, [pc, #116]	; (800f9e4 <xPortStartScheduler+0x134>)
 800f970:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f972:	4b1c      	ldr	r3, [pc, #112]	; (800f9e4 <xPortStartScheduler+0x134>)
 800f974:	681b      	ldr	r3, [r3, #0]
 800f976:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f97a:	4a1a      	ldr	r2, [pc, #104]	; (800f9e4 <xPortStartScheduler+0x134>)
 800f97c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f97e:	687b      	ldr	r3, [r7, #4]
 800f980:	b2da      	uxtb	r2, r3
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f986:	4b18      	ldr	r3, [pc, #96]	; (800f9e8 <xPortStartScheduler+0x138>)
 800f988:	681b      	ldr	r3, [r3, #0]
 800f98a:	4a17      	ldr	r2, [pc, #92]	; (800f9e8 <xPortStartScheduler+0x138>)
 800f98c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f990:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f992:	4b15      	ldr	r3, [pc, #84]	; (800f9e8 <xPortStartScheduler+0x138>)
 800f994:	681b      	ldr	r3, [r3, #0]
 800f996:	4a14      	ldr	r2, [pc, #80]	; (800f9e8 <xPortStartScheduler+0x138>)
 800f998:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f99c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f99e:	f000 f8dd 	bl	800fb5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f9a2:	4b12      	ldr	r3, [pc, #72]	; (800f9ec <xPortStartScheduler+0x13c>)
 800f9a4:	2200      	movs	r2, #0
 800f9a6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f9a8:	f000 f8fc 	bl	800fba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f9ac:	4b10      	ldr	r3, [pc, #64]	; (800f9f0 <xPortStartScheduler+0x140>)
 800f9ae:	681b      	ldr	r3, [r3, #0]
 800f9b0:	4a0f      	ldr	r2, [pc, #60]	; (800f9f0 <xPortStartScheduler+0x140>)
 800f9b2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f9b6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f9b8:	f7ff ff66 	bl	800f888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f9bc:	f7fe fe62 	bl	800e684 <vTaskSwitchContext>
	prvTaskExitError();
 800f9c0:	f7ff ff1c 	bl	800f7fc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f9c4:	2300      	movs	r3, #0
}
 800f9c6:	4618      	mov	r0, r3
 800f9c8:	3718      	adds	r7, #24
 800f9ca:	46bd      	mov	sp, r7
 800f9cc:	bd80      	pop	{r7, pc}
 800f9ce:	bf00      	nop
 800f9d0:	e000ed00 	.word	0xe000ed00
 800f9d4:	410fc271 	.word	0x410fc271
 800f9d8:	410fc270 	.word	0x410fc270
 800f9dc:	e000e400 	.word	0xe000e400
 800f9e0:	200072f0 	.word	0x200072f0
 800f9e4:	200072f4 	.word	0x200072f4
 800f9e8:	e000ed20 	.word	0xe000ed20
 800f9ec:	20000058 	.word	0x20000058
 800f9f0:	e000ef34 	.word	0xe000ef34

0800f9f4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f9f4:	b480      	push	{r7}
 800f9f6:	b083      	sub	sp, #12
 800f9f8:	af00      	add	r7, sp, #0
	__asm volatile
 800f9fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9fe:	f383 8811 	msr	BASEPRI, r3
 800fa02:	f3bf 8f6f 	isb	sy
 800fa06:	f3bf 8f4f 	dsb	sy
 800fa0a:	607b      	str	r3, [r7, #4]
}
 800fa0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800fa0e:	4b0f      	ldr	r3, [pc, #60]	; (800fa4c <vPortEnterCritical+0x58>)
 800fa10:	681b      	ldr	r3, [r3, #0]
 800fa12:	3301      	adds	r3, #1
 800fa14:	4a0d      	ldr	r2, [pc, #52]	; (800fa4c <vPortEnterCritical+0x58>)
 800fa16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800fa18:	4b0c      	ldr	r3, [pc, #48]	; (800fa4c <vPortEnterCritical+0x58>)
 800fa1a:	681b      	ldr	r3, [r3, #0]
 800fa1c:	2b01      	cmp	r3, #1
 800fa1e:	d10f      	bne.n	800fa40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800fa20:	4b0b      	ldr	r3, [pc, #44]	; (800fa50 <vPortEnterCritical+0x5c>)
 800fa22:	681b      	ldr	r3, [r3, #0]
 800fa24:	b2db      	uxtb	r3, r3
 800fa26:	2b00      	cmp	r3, #0
 800fa28:	d00a      	beq.n	800fa40 <vPortEnterCritical+0x4c>
	__asm volatile
 800fa2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa2e:	f383 8811 	msr	BASEPRI, r3
 800fa32:	f3bf 8f6f 	isb	sy
 800fa36:	f3bf 8f4f 	dsb	sy
 800fa3a:	603b      	str	r3, [r7, #0]
}
 800fa3c:	bf00      	nop
 800fa3e:	e7fe      	b.n	800fa3e <vPortEnterCritical+0x4a>
	}
}
 800fa40:	bf00      	nop
 800fa42:	370c      	adds	r7, #12
 800fa44:	46bd      	mov	sp, r7
 800fa46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa4a:	4770      	bx	lr
 800fa4c:	20000058 	.word	0x20000058
 800fa50:	e000ed04 	.word	0xe000ed04

0800fa54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800fa54:	b480      	push	{r7}
 800fa56:	b083      	sub	sp, #12
 800fa58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800fa5a:	4b12      	ldr	r3, [pc, #72]	; (800faa4 <vPortExitCritical+0x50>)
 800fa5c:	681b      	ldr	r3, [r3, #0]
 800fa5e:	2b00      	cmp	r3, #0
 800fa60:	d10a      	bne.n	800fa78 <vPortExitCritical+0x24>
	__asm volatile
 800fa62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa66:	f383 8811 	msr	BASEPRI, r3
 800fa6a:	f3bf 8f6f 	isb	sy
 800fa6e:	f3bf 8f4f 	dsb	sy
 800fa72:	607b      	str	r3, [r7, #4]
}
 800fa74:	bf00      	nop
 800fa76:	e7fe      	b.n	800fa76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800fa78:	4b0a      	ldr	r3, [pc, #40]	; (800faa4 <vPortExitCritical+0x50>)
 800fa7a:	681b      	ldr	r3, [r3, #0]
 800fa7c:	3b01      	subs	r3, #1
 800fa7e:	4a09      	ldr	r2, [pc, #36]	; (800faa4 <vPortExitCritical+0x50>)
 800fa80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800fa82:	4b08      	ldr	r3, [pc, #32]	; (800faa4 <vPortExitCritical+0x50>)
 800fa84:	681b      	ldr	r3, [r3, #0]
 800fa86:	2b00      	cmp	r3, #0
 800fa88:	d105      	bne.n	800fa96 <vPortExitCritical+0x42>
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fa8e:	683b      	ldr	r3, [r7, #0]
 800fa90:	f383 8811 	msr	BASEPRI, r3
}
 800fa94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800fa96:	bf00      	nop
 800fa98:	370c      	adds	r7, #12
 800fa9a:	46bd      	mov	sp, r7
 800fa9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800faa0:	4770      	bx	lr
 800faa2:	bf00      	nop
 800faa4:	20000058 	.word	0x20000058
	...

0800fab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800fab0:	f3ef 8009 	mrs	r0, PSP
 800fab4:	f3bf 8f6f 	isb	sy
 800fab8:	4b15      	ldr	r3, [pc, #84]	; (800fb10 <pxCurrentTCBConst>)
 800faba:	681a      	ldr	r2, [r3, #0]
 800fabc:	f01e 0f10 	tst.w	lr, #16
 800fac0:	bf08      	it	eq
 800fac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800fac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faca:	6010      	str	r0, [r2, #0]
 800facc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800fad0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800fad4:	f380 8811 	msr	BASEPRI, r0
 800fad8:	f3bf 8f4f 	dsb	sy
 800fadc:	f3bf 8f6f 	isb	sy
 800fae0:	f7fe fdd0 	bl	800e684 <vTaskSwitchContext>
 800fae4:	f04f 0000 	mov.w	r0, #0
 800fae8:	f380 8811 	msr	BASEPRI, r0
 800faec:	bc09      	pop	{r0, r3}
 800faee:	6819      	ldr	r1, [r3, #0]
 800faf0:	6808      	ldr	r0, [r1, #0]
 800faf2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800faf6:	f01e 0f10 	tst.w	lr, #16
 800fafa:	bf08      	it	eq
 800fafc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800fb00:	f380 8809 	msr	PSP, r0
 800fb04:	f3bf 8f6f 	isb	sy
 800fb08:	4770      	bx	lr
 800fb0a:	bf00      	nop
 800fb0c:	f3af 8000 	nop.w

0800fb10 <pxCurrentTCBConst>:
 800fb10:	20006cc4 	.word	0x20006cc4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800fb14:	bf00      	nop
 800fb16:	bf00      	nop

0800fb18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800fb18:	b580      	push	{r7, lr}
 800fb1a:	b082      	sub	sp, #8
 800fb1c:	af00      	add	r7, sp, #0
	__asm volatile
 800fb1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fb22:	f383 8811 	msr	BASEPRI, r3
 800fb26:	f3bf 8f6f 	isb	sy
 800fb2a:	f3bf 8f4f 	dsb	sy
 800fb2e:	607b      	str	r3, [r7, #4]
}
 800fb30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800fb32:	f7fe fced 	bl	800e510 <xTaskIncrementTick>
 800fb36:	4603      	mov	r3, r0
 800fb38:	2b00      	cmp	r3, #0
 800fb3a:	d003      	beq.n	800fb44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800fb3c:	4b06      	ldr	r3, [pc, #24]	; (800fb58 <xPortSysTickHandler+0x40>)
 800fb3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb42:	601a      	str	r2, [r3, #0]
 800fb44:	2300      	movs	r3, #0
 800fb46:	603b      	str	r3, [r7, #0]
	__asm volatile
 800fb48:	683b      	ldr	r3, [r7, #0]
 800fb4a:	f383 8811 	msr	BASEPRI, r3
}
 800fb4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800fb50:	bf00      	nop
 800fb52:	3708      	adds	r7, #8
 800fb54:	46bd      	mov	sp, r7
 800fb56:	bd80      	pop	{r7, pc}
 800fb58:	e000ed04 	.word	0xe000ed04

0800fb5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800fb5c:	b480      	push	{r7}
 800fb5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800fb60:	4b0b      	ldr	r3, [pc, #44]	; (800fb90 <vPortSetupTimerInterrupt+0x34>)
 800fb62:	2200      	movs	r2, #0
 800fb64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800fb66:	4b0b      	ldr	r3, [pc, #44]	; (800fb94 <vPortSetupTimerInterrupt+0x38>)
 800fb68:	2200      	movs	r2, #0
 800fb6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800fb6c:	4b0a      	ldr	r3, [pc, #40]	; (800fb98 <vPortSetupTimerInterrupt+0x3c>)
 800fb6e:	681b      	ldr	r3, [r3, #0]
 800fb70:	4a0a      	ldr	r2, [pc, #40]	; (800fb9c <vPortSetupTimerInterrupt+0x40>)
 800fb72:	fba2 2303 	umull	r2, r3, r2, r3
 800fb76:	099b      	lsrs	r3, r3, #6
 800fb78:	4a09      	ldr	r2, [pc, #36]	; (800fba0 <vPortSetupTimerInterrupt+0x44>)
 800fb7a:	3b01      	subs	r3, #1
 800fb7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800fb7e:	4b04      	ldr	r3, [pc, #16]	; (800fb90 <vPortSetupTimerInterrupt+0x34>)
 800fb80:	2207      	movs	r2, #7
 800fb82:	601a      	str	r2, [r3, #0]
}
 800fb84:	bf00      	nop
 800fb86:	46bd      	mov	sp, r7
 800fb88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fb8c:	4770      	bx	lr
 800fb8e:	bf00      	nop
 800fb90:	e000e010 	.word	0xe000e010
 800fb94:	e000e018 	.word	0xe000e018
 800fb98:	20000048 	.word	0x20000048
 800fb9c:	10624dd3 	.word	0x10624dd3
 800fba0:	e000e014 	.word	0xe000e014

0800fba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800fba4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800fbb4 <vPortEnableVFP+0x10>
 800fba8:	6801      	ldr	r1, [r0, #0]
 800fbaa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800fbae:	6001      	str	r1, [r0, #0]
 800fbb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800fbb2:	bf00      	nop
 800fbb4:	e000ed88 	.word	0xe000ed88

0800fbb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800fbb8:	b480      	push	{r7}
 800fbba:	b085      	sub	sp, #20
 800fbbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800fbbe:	f3ef 8305 	mrs	r3, IPSR
 800fbc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800fbc4:	68fb      	ldr	r3, [r7, #12]
 800fbc6:	2b0f      	cmp	r3, #15
 800fbc8:	d914      	bls.n	800fbf4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800fbca:	4a17      	ldr	r2, [pc, #92]	; (800fc28 <vPortValidateInterruptPriority+0x70>)
 800fbcc:	68fb      	ldr	r3, [r7, #12]
 800fbce:	4413      	add	r3, r2
 800fbd0:	781b      	ldrb	r3, [r3, #0]
 800fbd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800fbd4:	4b15      	ldr	r3, [pc, #84]	; (800fc2c <vPortValidateInterruptPriority+0x74>)
 800fbd6:	781b      	ldrb	r3, [r3, #0]
 800fbd8:	7afa      	ldrb	r2, [r7, #11]
 800fbda:	429a      	cmp	r2, r3
 800fbdc:	d20a      	bcs.n	800fbf4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800fbde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbe2:	f383 8811 	msr	BASEPRI, r3
 800fbe6:	f3bf 8f6f 	isb	sy
 800fbea:	f3bf 8f4f 	dsb	sy
 800fbee:	607b      	str	r3, [r7, #4]
}
 800fbf0:	bf00      	nop
 800fbf2:	e7fe      	b.n	800fbf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800fbf4:	4b0e      	ldr	r3, [pc, #56]	; (800fc30 <vPortValidateInterruptPriority+0x78>)
 800fbf6:	681b      	ldr	r3, [r3, #0]
 800fbf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800fbfc:	4b0d      	ldr	r3, [pc, #52]	; (800fc34 <vPortValidateInterruptPriority+0x7c>)
 800fbfe:	681b      	ldr	r3, [r3, #0]
 800fc00:	429a      	cmp	r2, r3
 800fc02:	d90a      	bls.n	800fc1a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800fc04:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc08:	f383 8811 	msr	BASEPRI, r3
 800fc0c:	f3bf 8f6f 	isb	sy
 800fc10:	f3bf 8f4f 	dsb	sy
 800fc14:	603b      	str	r3, [r7, #0]
}
 800fc16:	bf00      	nop
 800fc18:	e7fe      	b.n	800fc18 <vPortValidateInterruptPriority+0x60>
	}
 800fc1a:	bf00      	nop
 800fc1c:	3714      	adds	r7, #20
 800fc1e:	46bd      	mov	sp, r7
 800fc20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc24:	4770      	bx	lr
 800fc26:	bf00      	nop
 800fc28:	e000e3f0 	.word	0xe000e3f0
 800fc2c:	200072f0 	.word	0x200072f0
 800fc30:	e000ed0c 	.word	0xe000ed0c
 800fc34:	200072f4 	.word	0x200072f4

0800fc38 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800fc38:	b580      	push	{r7, lr}
 800fc3a:	b08a      	sub	sp, #40	; 0x28
 800fc3c:	af00      	add	r7, sp, #0
 800fc3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800fc40:	2300      	movs	r3, #0
 800fc42:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800fc44:	f7fe fba8 	bl	800e398 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800fc48:	4b5b      	ldr	r3, [pc, #364]	; (800fdb8 <pvPortMalloc+0x180>)
 800fc4a:	681b      	ldr	r3, [r3, #0]
 800fc4c:	2b00      	cmp	r3, #0
 800fc4e:	d101      	bne.n	800fc54 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800fc50:	f000 f920 	bl	800fe94 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800fc54:	4b59      	ldr	r3, [pc, #356]	; (800fdbc <pvPortMalloc+0x184>)
 800fc56:	681a      	ldr	r2, [r3, #0]
 800fc58:	687b      	ldr	r3, [r7, #4]
 800fc5a:	4013      	ands	r3, r2
 800fc5c:	2b00      	cmp	r3, #0
 800fc5e:	f040 8093 	bne.w	800fd88 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800fc62:	687b      	ldr	r3, [r7, #4]
 800fc64:	2b00      	cmp	r3, #0
 800fc66:	d01d      	beq.n	800fca4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800fc68:	2208      	movs	r2, #8
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	4413      	add	r3, r2
 800fc6e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800fc70:	687b      	ldr	r3, [r7, #4]
 800fc72:	f003 0307 	and.w	r3, r3, #7
 800fc76:	2b00      	cmp	r3, #0
 800fc78:	d014      	beq.n	800fca4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800fc7a:	687b      	ldr	r3, [r7, #4]
 800fc7c:	f023 0307 	bic.w	r3, r3, #7
 800fc80:	3308      	adds	r3, #8
 800fc82:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fc84:	687b      	ldr	r3, [r7, #4]
 800fc86:	f003 0307 	and.w	r3, r3, #7
 800fc8a:	2b00      	cmp	r3, #0
 800fc8c:	d00a      	beq.n	800fca4 <pvPortMalloc+0x6c>
	__asm volatile
 800fc8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc92:	f383 8811 	msr	BASEPRI, r3
 800fc96:	f3bf 8f6f 	isb	sy
 800fc9a:	f3bf 8f4f 	dsb	sy
 800fc9e:	617b      	str	r3, [r7, #20]
}
 800fca0:	bf00      	nop
 800fca2:	e7fe      	b.n	800fca2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800fca4:	687b      	ldr	r3, [r7, #4]
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d06e      	beq.n	800fd88 <pvPortMalloc+0x150>
 800fcaa:	4b45      	ldr	r3, [pc, #276]	; (800fdc0 <pvPortMalloc+0x188>)
 800fcac:	681b      	ldr	r3, [r3, #0]
 800fcae:	687a      	ldr	r2, [r7, #4]
 800fcb0:	429a      	cmp	r2, r3
 800fcb2:	d869      	bhi.n	800fd88 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800fcb4:	4b43      	ldr	r3, [pc, #268]	; (800fdc4 <pvPortMalloc+0x18c>)
 800fcb6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800fcb8:	4b42      	ldr	r3, [pc, #264]	; (800fdc4 <pvPortMalloc+0x18c>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fcbe:	e004      	b.n	800fcca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800fcc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800fcc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcc6:	681b      	ldr	r3, [r3, #0]
 800fcc8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800fcca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fccc:	685b      	ldr	r3, [r3, #4]
 800fcce:	687a      	ldr	r2, [r7, #4]
 800fcd0:	429a      	cmp	r2, r3
 800fcd2:	d903      	bls.n	800fcdc <pvPortMalloc+0xa4>
 800fcd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcd6:	681b      	ldr	r3, [r3, #0]
 800fcd8:	2b00      	cmp	r3, #0
 800fcda:	d1f1      	bne.n	800fcc0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800fcdc:	4b36      	ldr	r3, [pc, #216]	; (800fdb8 <pvPortMalloc+0x180>)
 800fcde:	681b      	ldr	r3, [r3, #0]
 800fce0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fce2:	429a      	cmp	r2, r3
 800fce4:	d050      	beq.n	800fd88 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800fce6:	6a3b      	ldr	r3, [r7, #32]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2208      	movs	r2, #8
 800fcec:	4413      	add	r3, r2
 800fcee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800fcf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcf2:	681a      	ldr	r2, [r3, #0]
 800fcf4:	6a3b      	ldr	r3, [r7, #32]
 800fcf6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800fcf8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fcfa:	685a      	ldr	r2, [r3, #4]
 800fcfc:	687b      	ldr	r3, [r7, #4]
 800fcfe:	1ad2      	subs	r2, r2, r3
 800fd00:	2308      	movs	r3, #8
 800fd02:	005b      	lsls	r3, r3, #1
 800fd04:	429a      	cmp	r2, r3
 800fd06:	d91f      	bls.n	800fd48 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800fd08:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	4413      	add	r3, r2
 800fd0e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd10:	69bb      	ldr	r3, [r7, #24]
 800fd12:	f003 0307 	and.w	r3, r3, #7
 800fd16:	2b00      	cmp	r3, #0
 800fd18:	d00a      	beq.n	800fd30 <pvPortMalloc+0xf8>
	__asm volatile
 800fd1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd1e:	f383 8811 	msr	BASEPRI, r3
 800fd22:	f3bf 8f6f 	isb	sy
 800fd26:	f3bf 8f4f 	dsb	sy
 800fd2a:	613b      	str	r3, [r7, #16]
}
 800fd2c:	bf00      	nop
 800fd2e:	e7fe      	b.n	800fd2e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800fd30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd32:	685a      	ldr	r2, [r3, #4]
 800fd34:	687b      	ldr	r3, [r7, #4]
 800fd36:	1ad2      	subs	r2, r2, r3
 800fd38:	69bb      	ldr	r3, [r7, #24]
 800fd3a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800fd3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd3e:	687a      	ldr	r2, [r7, #4]
 800fd40:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800fd42:	69b8      	ldr	r0, [r7, #24]
 800fd44:	f000 f908 	bl	800ff58 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800fd48:	4b1d      	ldr	r3, [pc, #116]	; (800fdc0 <pvPortMalloc+0x188>)
 800fd4a:	681a      	ldr	r2, [r3, #0]
 800fd4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd4e:	685b      	ldr	r3, [r3, #4]
 800fd50:	1ad3      	subs	r3, r2, r3
 800fd52:	4a1b      	ldr	r2, [pc, #108]	; (800fdc0 <pvPortMalloc+0x188>)
 800fd54:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800fd56:	4b1a      	ldr	r3, [pc, #104]	; (800fdc0 <pvPortMalloc+0x188>)
 800fd58:	681a      	ldr	r2, [r3, #0]
 800fd5a:	4b1b      	ldr	r3, [pc, #108]	; (800fdc8 <pvPortMalloc+0x190>)
 800fd5c:	681b      	ldr	r3, [r3, #0]
 800fd5e:	429a      	cmp	r2, r3
 800fd60:	d203      	bcs.n	800fd6a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800fd62:	4b17      	ldr	r3, [pc, #92]	; (800fdc0 <pvPortMalloc+0x188>)
 800fd64:	681b      	ldr	r3, [r3, #0]
 800fd66:	4a18      	ldr	r2, [pc, #96]	; (800fdc8 <pvPortMalloc+0x190>)
 800fd68:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800fd6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd6c:	685a      	ldr	r2, [r3, #4]
 800fd6e:	4b13      	ldr	r3, [pc, #76]	; (800fdbc <pvPortMalloc+0x184>)
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	431a      	orrs	r2, r3
 800fd74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd76:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800fd78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800fd7a:	2200      	movs	r2, #0
 800fd7c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800fd7e:	4b13      	ldr	r3, [pc, #76]	; (800fdcc <pvPortMalloc+0x194>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	3301      	adds	r3, #1
 800fd84:	4a11      	ldr	r2, [pc, #68]	; (800fdcc <pvPortMalloc+0x194>)
 800fd86:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800fd88:	f7fe fb14 	bl	800e3b4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800fd8c:	69fb      	ldr	r3, [r7, #28]
 800fd8e:	f003 0307 	and.w	r3, r3, #7
 800fd92:	2b00      	cmp	r3, #0
 800fd94:	d00a      	beq.n	800fdac <pvPortMalloc+0x174>
	__asm volatile
 800fd96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fd9a:	f383 8811 	msr	BASEPRI, r3
 800fd9e:	f3bf 8f6f 	isb	sy
 800fda2:	f3bf 8f4f 	dsb	sy
 800fda6:	60fb      	str	r3, [r7, #12]
}
 800fda8:	bf00      	nop
 800fdaa:	e7fe      	b.n	800fdaa <pvPortMalloc+0x172>
	return pvReturn;
 800fdac:	69fb      	ldr	r3, [r7, #28]
}
 800fdae:	4618      	mov	r0, r3
 800fdb0:	3728      	adds	r7, #40	; 0x28
 800fdb2:	46bd      	mov	sp, r7
 800fdb4:	bd80      	pop	{r7, pc}
 800fdb6:	bf00      	nop
 800fdb8:	20009300 	.word	0x20009300
 800fdbc:	20009314 	.word	0x20009314
 800fdc0:	20009304 	.word	0x20009304
 800fdc4:	200092f8 	.word	0x200092f8
 800fdc8:	20009308 	.word	0x20009308
 800fdcc:	2000930c 	.word	0x2000930c

0800fdd0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800fdd0:	b580      	push	{r7, lr}
 800fdd2:	b086      	sub	sp, #24
 800fdd4:	af00      	add	r7, sp, #0
 800fdd6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800fdd8:	687b      	ldr	r3, [r7, #4]
 800fdda:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d04d      	beq.n	800fe7e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800fde2:	2308      	movs	r3, #8
 800fde4:	425b      	negs	r3, r3
 800fde6:	697a      	ldr	r2, [r7, #20]
 800fde8:	4413      	add	r3, r2
 800fdea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800fdec:	697b      	ldr	r3, [r7, #20]
 800fdee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800fdf0:	693b      	ldr	r3, [r7, #16]
 800fdf2:	685a      	ldr	r2, [r3, #4]
 800fdf4:	4b24      	ldr	r3, [pc, #144]	; (800fe88 <vPortFree+0xb8>)
 800fdf6:	681b      	ldr	r3, [r3, #0]
 800fdf8:	4013      	ands	r3, r2
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d10a      	bne.n	800fe14 <vPortFree+0x44>
	__asm volatile
 800fdfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe02:	f383 8811 	msr	BASEPRI, r3
 800fe06:	f3bf 8f6f 	isb	sy
 800fe0a:	f3bf 8f4f 	dsb	sy
 800fe0e:	60fb      	str	r3, [r7, #12]
}
 800fe10:	bf00      	nop
 800fe12:	e7fe      	b.n	800fe12 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800fe14:	693b      	ldr	r3, [r7, #16]
 800fe16:	681b      	ldr	r3, [r3, #0]
 800fe18:	2b00      	cmp	r3, #0
 800fe1a:	d00a      	beq.n	800fe32 <vPortFree+0x62>
	__asm volatile
 800fe1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe20:	f383 8811 	msr	BASEPRI, r3
 800fe24:	f3bf 8f6f 	isb	sy
 800fe28:	f3bf 8f4f 	dsb	sy
 800fe2c:	60bb      	str	r3, [r7, #8]
}
 800fe2e:	bf00      	nop
 800fe30:	e7fe      	b.n	800fe30 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800fe32:	693b      	ldr	r3, [r7, #16]
 800fe34:	685a      	ldr	r2, [r3, #4]
 800fe36:	4b14      	ldr	r3, [pc, #80]	; (800fe88 <vPortFree+0xb8>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	4013      	ands	r3, r2
 800fe3c:	2b00      	cmp	r3, #0
 800fe3e:	d01e      	beq.n	800fe7e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800fe40:	693b      	ldr	r3, [r7, #16]
 800fe42:	681b      	ldr	r3, [r3, #0]
 800fe44:	2b00      	cmp	r3, #0
 800fe46:	d11a      	bne.n	800fe7e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800fe48:	693b      	ldr	r3, [r7, #16]
 800fe4a:	685a      	ldr	r2, [r3, #4]
 800fe4c:	4b0e      	ldr	r3, [pc, #56]	; (800fe88 <vPortFree+0xb8>)
 800fe4e:	681b      	ldr	r3, [r3, #0]
 800fe50:	43db      	mvns	r3, r3
 800fe52:	401a      	ands	r2, r3
 800fe54:	693b      	ldr	r3, [r7, #16]
 800fe56:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800fe58:	f7fe fa9e 	bl	800e398 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800fe5c:	693b      	ldr	r3, [r7, #16]
 800fe5e:	685a      	ldr	r2, [r3, #4]
 800fe60:	4b0a      	ldr	r3, [pc, #40]	; (800fe8c <vPortFree+0xbc>)
 800fe62:	681b      	ldr	r3, [r3, #0]
 800fe64:	4413      	add	r3, r2
 800fe66:	4a09      	ldr	r2, [pc, #36]	; (800fe8c <vPortFree+0xbc>)
 800fe68:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800fe6a:	6938      	ldr	r0, [r7, #16]
 800fe6c:	f000 f874 	bl	800ff58 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800fe70:	4b07      	ldr	r3, [pc, #28]	; (800fe90 <vPortFree+0xc0>)
 800fe72:	681b      	ldr	r3, [r3, #0]
 800fe74:	3301      	adds	r3, #1
 800fe76:	4a06      	ldr	r2, [pc, #24]	; (800fe90 <vPortFree+0xc0>)
 800fe78:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800fe7a:	f7fe fa9b 	bl	800e3b4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800fe7e:	bf00      	nop
 800fe80:	3718      	adds	r7, #24
 800fe82:	46bd      	mov	sp, r7
 800fe84:	bd80      	pop	{r7, pc}
 800fe86:	bf00      	nop
 800fe88:	20009314 	.word	0x20009314
 800fe8c:	20009304 	.word	0x20009304
 800fe90:	20009310 	.word	0x20009310

0800fe94 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800fe94:	b480      	push	{r7}
 800fe96:	b085      	sub	sp, #20
 800fe98:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800fe9a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800fe9e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800fea0:	4b27      	ldr	r3, [pc, #156]	; (800ff40 <prvHeapInit+0xac>)
 800fea2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800fea4:	68fb      	ldr	r3, [r7, #12]
 800fea6:	f003 0307 	and.w	r3, r3, #7
 800feaa:	2b00      	cmp	r3, #0
 800feac:	d00c      	beq.n	800fec8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800feae:	68fb      	ldr	r3, [r7, #12]
 800feb0:	3307      	adds	r3, #7
 800feb2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800feb4:	68fb      	ldr	r3, [r7, #12]
 800feb6:	f023 0307 	bic.w	r3, r3, #7
 800feba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800febc:	68ba      	ldr	r2, [r7, #8]
 800febe:	68fb      	ldr	r3, [r7, #12]
 800fec0:	1ad3      	subs	r3, r2, r3
 800fec2:	4a1f      	ldr	r2, [pc, #124]	; (800ff40 <prvHeapInit+0xac>)
 800fec4:	4413      	add	r3, r2
 800fec6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800fec8:	68fb      	ldr	r3, [r7, #12]
 800feca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800fecc:	4a1d      	ldr	r2, [pc, #116]	; (800ff44 <prvHeapInit+0xb0>)
 800fece:	687b      	ldr	r3, [r7, #4]
 800fed0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800fed2:	4b1c      	ldr	r3, [pc, #112]	; (800ff44 <prvHeapInit+0xb0>)
 800fed4:	2200      	movs	r2, #0
 800fed6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	68ba      	ldr	r2, [r7, #8]
 800fedc:	4413      	add	r3, r2
 800fede:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800fee0:	2208      	movs	r2, #8
 800fee2:	68fb      	ldr	r3, [r7, #12]
 800fee4:	1a9b      	subs	r3, r3, r2
 800fee6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800fee8:	68fb      	ldr	r3, [r7, #12]
 800feea:	f023 0307 	bic.w	r3, r3, #7
 800feee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800fef0:	68fb      	ldr	r3, [r7, #12]
 800fef2:	4a15      	ldr	r2, [pc, #84]	; (800ff48 <prvHeapInit+0xb4>)
 800fef4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800fef6:	4b14      	ldr	r3, [pc, #80]	; (800ff48 <prvHeapInit+0xb4>)
 800fef8:	681b      	ldr	r3, [r3, #0]
 800fefa:	2200      	movs	r2, #0
 800fefc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800fefe:	4b12      	ldr	r3, [pc, #72]	; (800ff48 <prvHeapInit+0xb4>)
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	2200      	movs	r2, #0
 800ff04:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ff0a:	683b      	ldr	r3, [r7, #0]
 800ff0c:	68fa      	ldr	r2, [r7, #12]
 800ff0e:	1ad2      	subs	r2, r2, r3
 800ff10:	683b      	ldr	r3, [r7, #0]
 800ff12:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ff14:	4b0c      	ldr	r3, [pc, #48]	; (800ff48 <prvHeapInit+0xb4>)
 800ff16:	681a      	ldr	r2, [r3, #0]
 800ff18:	683b      	ldr	r3, [r7, #0]
 800ff1a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff1c:	683b      	ldr	r3, [r7, #0]
 800ff1e:	685b      	ldr	r3, [r3, #4]
 800ff20:	4a0a      	ldr	r2, [pc, #40]	; (800ff4c <prvHeapInit+0xb8>)
 800ff22:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ff24:	683b      	ldr	r3, [r7, #0]
 800ff26:	685b      	ldr	r3, [r3, #4]
 800ff28:	4a09      	ldr	r2, [pc, #36]	; (800ff50 <prvHeapInit+0xbc>)
 800ff2a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ff2c:	4b09      	ldr	r3, [pc, #36]	; (800ff54 <prvHeapInit+0xc0>)
 800ff2e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800ff32:	601a      	str	r2, [r3, #0]
}
 800ff34:	bf00      	nop
 800ff36:	3714      	adds	r7, #20
 800ff38:	46bd      	mov	sp, r7
 800ff3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ff3e:	4770      	bx	lr
 800ff40:	200072f8 	.word	0x200072f8
 800ff44:	200092f8 	.word	0x200092f8
 800ff48:	20009300 	.word	0x20009300
 800ff4c:	20009308 	.word	0x20009308
 800ff50:	20009304 	.word	0x20009304
 800ff54:	20009314 	.word	0x20009314

0800ff58 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800ff58:	b480      	push	{r7}
 800ff5a:	b085      	sub	sp, #20
 800ff5c:	af00      	add	r7, sp, #0
 800ff5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ff60:	4b28      	ldr	r3, [pc, #160]	; (8010004 <prvInsertBlockIntoFreeList+0xac>)
 800ff62:	60fb      	str	r3, [r7, #12]
 800ff64:	e002      	b.n	800ff6c <prvInsertBlockIntoFreeList+0x14>
 800ff66:	68fb      	ldr	r3, [r7, #12]
 800ff68:	681b      	ldr	r3, [r3, #0]
 800ff6a:	60fb      	str	r3, [r7, #12]
 800ff6c:	68fb      	ldr	r3, [r7, #12]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	687a      	ldr	r2, [r7, #4]
 800ff72:	429a      	cmp	r2, r3
 800ff74:	d8f7      	bhi.n	800ff66 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ff76:	68fb      	ldr	r3, [r7, #12]
 800ff78:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ff7a:	68fb      	ldr	r3, [r7, #12]
 800ff7c:	685b      	ldr	r3, [r3, #4]
 800ff7e:	68ba      	ldr	r2, [r7, #8]
 800ff80:	4413      	add	r3, r2
 800ff82:	687a      	ldr	r2, [r7, #4]
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d108      	bne.n	800ff9a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ff88:	68fb      	ldr	r3, [r7, #12]
 800ff8a:	685a      	ldr	r2, [r3, #4]
 800ff8c:	687b      	ldr	r3, [r7, #4]
 800ff8e:	685b      	ldr	r3, [r3, #4]
 800ff90:	441a      	add	r2, r3
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ff96:	68fb      	ldr	r3, [r7, #12]
 800ff98:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ff9e:	687b      	ldr	r3, [r7, #4]
 800ffa0:	685b      	ldr	r3, [r3, #4]
 800ffa2:	68ba      	ldr	r2, [r7, #8]
 800ffa4:	441a      	add	r2, r3
 800ffa6:	68fb      	ldr	r3, [r7, #12]
 800ffa8:	681b      	ldr	r3, [r3, #0]
 800ffaa:	429a      	cmp	r2, r3
 800ffac:	d118      	bne.n	800ffe0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ffae:	68fb      	ldr	r3, [r7, #12]
 800ffb0:	681a      	ldr	r2, [r3, #0]
 800ffb2:	4b15      	ldr	r3, [pc, #84]	; (8010008 <prvInsertBlockIntoFreeList+0xb0>)
 800ffb4:	681b      	ldr	r3, [r3, #0]
 800ffb6:	429a      	cmp	r2, r3
 800ffb8:	d00d      	beq.n	800ffd6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ffba:	687b      	ldr	r3, [r7, #4]
 800ffbc:	685a      	ldr	r2, [r3, #4]
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	681b      	ldr	r3, [r3, #0]
 800ffc2:	685b      	ldr	r3, [r3, #4]
 800ffc4:	441a      	add	r2, r3
 800ffc6:	687b      	ldr	r3, [r7, #4]
 800ffc8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ffca:	68fb      	ldr	r3, [r7, #12]
 800ffcc:	681b      	ldr	r3, [r3, #0]
 800ffce:	681a      	ldr	r2, [r3, #0]
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	601a      	str	r2, [r3, #0]
 800ffd4:	e008      	b.n	800ffe8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ffd6:	4b0c      	ldr	r3, [pc, #48]	; (8010008 <prvInsertBlockIntoFreeList+0xb0>)
 800ffd8:	681a      	ldr	r2, [r3, #0]
 800ffda:	687b      	ldr	r3, [r7, #4]
 800ffdc:	601a      	str	r2, [r3, #0]
 800ffde:	e003      	b.n	800ffe8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ffe0:	68fb      	ldr	r3, [r7, #12]
 800ffe2:	681a      	ldr	r2, [r3, #0]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ffe8:	68fa      	ldr	r2, [r7, #12]
 800ffea:	687b      	ldr	r3, [r7, #4]
 800ffec:	429a      	cmp	r2, r3
 800ffee:	d002      	beq.n	800fff6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	687a      	ldr	r2, [r7, #4]
 800fff4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800fff6:	bf00      	nop
 800fff8:	3714      	adds	r7, #20
 800fffa:	46bd      	mov	sp, r7
 800fffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010000:	4770      	bx	lr
 8010002:	bf00      	nop
 8010004:	200092f8 	.word	0x200092f8
 8010008:	20009300 	.word	0x20009300

0801000c <__errno>:
 801000c:	4b01      	ldr	r3, [pc, #4]	; (8010014 <__errno+0x8>)
 801000e:	6818      	ldr	r0, [r3, #0]
 8010010:	4770      	bx	lr
 8010012:	bf00      	nop
 8010014:	2000005c 	.word	0x2000005c

08010018 <__libc_init_array>:
 8010018:	b570      	push	{r4, r5, r6, lr}
 801001a:	4d0d      	ldr	r5, [pc, #52]	; (8010050 <__libc_init_array+0x38>)
 801001c:	4c0d      	ldr	r4, [pc, #52]	; (8010054 <__libc_init_array+0x3c>)
 801001e:	1b64      	subs	r4, r4, r5
 8010020:	10a4      	asrs	r4, r4, #2
 8010022:	2600      	movs	r6, #0
 8010024:	42a6      	cmp	r6, r4
 8010026:	d109      	bne.n	801003c <__libc_init_array+0x24>
 8010028:	4d0b      	ldr	r5, [pc, #44]	; (8010058 <__libc_init_array+0x40>)
 801002a:	4c0c      	ldr	r4, [pc, #48]	; (801005c <__libc_init_array+0x44>)
 801002c:	f002 fbd2 	bl	80127d4 <_init>
 8010030:	1b64      	subs	r4, r4, r5
 8010032:	10a4      	asrs	r4, r4, #2
 8010034:	2600      	movs	r6, #0
 8010036:	42a6      	cmp	r6, r4
 8010038:	d105      	bne.n	8010046 <__libc_init_array+0x2e>
 801003a:	bd70      	pop	{r4, r5, r6, pc}
 801003c:	f855 3b04 	ldr.w	r3, [r5], #4
 8010040:	4798      	blx	r3
 8010042:	3601      	adds	r6, #1
 8010044:	e7ee      	b.n	8010024 <__libc_init_array+0xc>
 8010046:	f855 3b04 	ldr.w	r3, [r5], #4
 801004a:	4798      	blx	r3
 801004c:	3601      	adds	r6, #1
 801004e:	e7f2      	b.n	8010036 <__libc_init_array+0x1e>
 8010050:	0801fb60 	.word	0x0801fb60
 8010054:	0801fb60 	.word	0x0801fb60
 8010058:	0801fb60 	.word	0x0801fb60
 801005c:	0801fb64 	.word	0x0801fb64

08010060 <__retarget_lock_acquire_recursive>:
 8010060:	4770      	bx	lr

08010062 <__retarget_lock_release_recursive>:
 8010062:	4770      	bx	lr

08010064 <memcpy>:
 8010064:	440a      	add	r2, r1
 8010066:	4291      	cmp	r1, r2
 8010068:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 801006c:	d100      	bne.n	8010070 <memcpy+0xc>
 801006e:	4770      	bx	lr
 8010070:	b510      	push	{r4, lr}
 8010072:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010076:	f803 4f01 	strb.w	r4, [r3, #1]!
 801007a:	4291      	cmp	r1, r2
 801007c:	d1f9      	bne.n	8010072 <memcpy+0xe>
 801007e:	bd10      	pop	{r4, pc}

08010080 <memset>:
 8010080:	4402      	add	r2, r0
 8010082:	4603      	mov	r3, r0
 8010084:	4293      	cmp	r3, r2
 8010086:	d100      	bne.n	801008a <memset+0xa>
 8010088:	4770      	bx	lr
 801008a:	f803 1b01 	strb.w	r1, [r3], #1
 801008e:	e7f9      	b.n	8010084 <memset+0x4>

08010090 <sbrk_aligned>:
 8010090:	b570      	push	{r4, r5, r6, lr}
 8010092:	4e0e      	ldr	r6, [pc, #56]	; (80100cc <sbrk_aligned+0x3c>)
 8010094:	460c      	mov	r4, r1
 8010096:	6831      	ldr	r1, [r6, #0]
 8010098:	4605      	mov	r5, r0
 801009a:	b911      	cbnz	r1, 80100a2 <sbrk_aligned+0x12>
 801009c:	f000 f8f6 	bl	801028c <_sbrk_r>
 80100a0:	6030      	str	r0, [r6, #0]
 80100a2:	4621      	mov	r1, r4
 80100a4:	4628      	mov	r0, r5
 80100a6:	f000 f8f1 	bl	801028c <_sbrk_r>
 80100aa:	1c43      	adds	r3, r0, #1
 80100ac:	d00a      	beq.n	80100c4 <sbrk_aligned+0x34>
 80100ae:	1cc4      	adds	r4, r0, #3
 80100b0:	f024 0403 	bic.w	r4, r4, #3
 80100b4:	42a0      	cmp	r0, r4
 80100b6:	d007      	beq.n	80100c8 <sbrk_aligned+0x38>
 80100b8:	1a21      	subs	r1, r4, r0
 80100ba:	4628      	mov	r0, r5
 80100bc:	f000 f8e6 	bl	801028c <_sbrk_r>
 80100c0:	3001      	adds	r0, #1
 80100c2:	d101      	bne.n	80100c8 <sbrk_aligned+0x38>
 80100c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80100c8:	4620      	mov	r0, r4
 80100ca:	bd70      	pop	{r4, r5, r6, pc}
 80100cc:	20009320 	.word	0x20009320

080100d0 <_malloc_r>:
 80100d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80100d4:	1ccd      	adds	r5, r1, #3
 80100d6:	f025 0503 	bic.w	r5, r5, #3
 80100da:	3508      	adds	r5, #8
 80100dc:	2d0c      	cmp	r5, #12
 80100de:	bf38      	it	cc
 80100e0:	250c      	movcc	r5, #12
 80100e2:	2d00      	cmp	r5, #0
 80100e4:	4607      	mov	r7, r0
 80100e6:	db01      	blt.n	80100ec <_malloc_r+0x1c>
 80100e8:	42a9      	cmp	r1, r5
 80100ea:	d905      	bls.n	80100f8 <_malloc_r+0x28>
 80100ec:	230c      	movs	r3, #12
 80100ee:	603b      	str	r3, [r7, #0]
 80100f0:	2600      	movs	r6, #0
 80100f2:	4630      	mov	r0, r6
 80100f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80100f8:	4e2e      	ldr	r6, [pc, #184]	; (80101b4 <_malloc_r+0xe4>)
 80100fa:	f000 f8f7 	bl	80102ec <__malloc_lock>
 80100fe:	6833      	ldr	r3, [r6, #0]
 8010100:	461c      	mov	r4, r3
 8010102:	bb34      	cbnz	r4, 8010152 <_malloc_r+0x82>
 8010104:	4629      	mov	r1, r5
 8010106:	4638      	mov	r0, r7
 8010108:	f7ff ffc2 	bl	8010090 <sbrk_aligned>
 801010c:	1c43      	adds	r3, r0, #1
 801010e:	4604      	mov	r4, r0
 8010110:	d14d      	bne.n	80101ae <_malloc_r+0xde>
 8010112:	6834      	ldr	r4, [r6, #0]
 8010114:	4626      	mov	r6, r4
 8010116:	2e00      	cmp	r6, #0
 8010118:	d140      	bne.n	801019c <_malloc_r+0xcc>
 801011a:	6823      	ldr	r3, [r4, #0]
 801011c:	4631      	mov	r1, r6
 801011e:	4638      	mov	r0, r7
 8010120:	eb04 0803 	add.w	r8, r4, r3
 8010124:	f000 f8b2 	bl	801028c <_sbrk_r>
 8010128:	4580      	cmp	r8, r0
 801012a:	d13a      	bne.n	80101a2 <_malloc_r+0xd2>
 801012c:	6821      	ldr	r1, [r4, #0]
 801012e:	3503      	adds	r5, #3
 8010130:	1a6d      	subs	r5, r5, r1
 8010132:	f025 0503 	bic.w	r5, r5, #3
 8010136:	3508      	adds	r5, #8
 8010138:	2d0c      	cmp	r5, #12
 801013a:	bf38      	it	cc
 801013c:	250c      	movcc	r5, #12
 801013e:	4629      	mov	r1, r5
 8010140:	4638      	mov	r0, r7
 8010142:	f7ff ffa5 	bl	8010090 <sbrk_aligned>
 8010146:	3001      	adds	r0, #1
 8010148:	d02b      	beq.n	80101a2 <_malloc_r+0xd2>
 801014a:	6823      	ldr	r3, [r4, #0]
 801014c:	442b      	add	r3, r5
 801014e:	6023      	str	r3, [r4, #0]
 8010150:	e00e      	b.n	8010170 <_malloc_r+0xa0>
 8010152:	6822      	ldr	r2, [r4, #0]
 8010154:	1b52      	subs	r2, r2, r5
 8010156:	d41e      	bmi.n	8010196 <_malloc_r+0xc6>
 8010158:	2a0b      	cmp	r2, #11
 801015a:	d916      	bls.n	801018a <_malloc_r+0xba>
 801015c:	1961      	adds	r1, r4, r5
 801015e:	42a3      	cmp	r3, r4
 8010160:	6025      	str	r5, [r4, #0]
 8010162:	bf18      	it	ne
 8010164:	6059      	strne	r1, [r3, #4]
 8010166:	6863      	ldr	r3, [r4, #4]
 8010168:	bf08      	it	eq
 801016a:	6031      	streq	r1, [r6, #0]
 801016c:	5162      	str	r2, [r4, r5]
 801016e:	604b      	str	r3, [r1, #4]
 8010170:	4638      	mov	r0, r7
 8010172:	f104 060b 	add.w	r6, r4, #11
 8010176:	f000 f8bf 	bl	80102f8 <__malloc_unlock>
 801017a:	f026 0607 	bic.w	r6, r6, #7
 801017e:	1d23      	adds	r3, r4, #4
 8010180:	1af2      	subs	r2, r6, r3
 8010182:	d0b6      	beq.n	80100f2 <_malloc_r+0x22>
 8010184:	1b9b      	subs	r3, r3, r6
 8010186:	50a3      	str	r3, [r4, r2]
 8010188:	e7b3      	b.n	80100f2 <_malloc_r+0x22>
 801018a:	6862      	ldr	r2, [r4, #4]
 801018c:	42a3      	cmp	r3, r4
 801018e:	bf0c      	ite	eq
 8010190:	6032      	streq	r2, [r6, #0]
 8010192:	605a      	strne	r2, [r3, #4]
 8010194:	e7ec      	b.n	8010170 <_malloc_r+0xa0>
 8010196:	4623      	mov	r3, r4
 8010198:	6864      	ldr	r4, [r4, #4]
 801019a:	e7b2      	b.n	8010102 <_malloc_r+0x32>
 801019c:	4634      	mov	r4, r6
 801019e:	6876      	ldr	r6, [r6, #4]
 80101a0:	e7b9      	b.n	8010116 <_malloc_r+0x46>
 80101a2:	230c      	movs	r3, #12
 80101a4:	603b      	str	r3, [r7, #0]
 80101a6:	4638      	mov	r0, r7
 80101a8:	f000 f8a6 	bl	80102f8 <__malloc_unlock>
 80101ac:	e7a1      	b.n	80100f2 <_malloc_r+0x22>
 80101ae:	6025      	str	r5, [r4, #0]
 80101b0:	e7de      	b.n	8010170 <_malloc_r+0xa0>
 80101b2:	bf00      	nop
 80101b4:	2000931c 	.word	0x2000931c

080101b8 <cleanup_glue>:
 80101b8:	b538      	push	{r3, r4, r5, lr}
 80101ba:	460c      	mov	r4, r1
 80101bc:	6809      	ldr	r1, [r1, #0]
 80101be:	4605      	mov	r5, r0
 80101c0:	b109      	cbz	r1, 80101c6 <cleanup_glue+0xe>
 80101c2:	f7ff fff9 	bl	80101b8 <cleanup_glue>
 80101c6:	4621      	mov	r1, r4
 80101c8:	4628      	mov	r0, r5
 80101ca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80101ce:	f000 b899 	b.w	8010304 <_free_r>
	...

080101d4 <_reclaim_reent>:
 80101d4:	4b2c      	ldr	r3, [pc, #176]	; (8010288 <_reclaim_reent+0xb4>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	4283      	cmp	r3, r0
 80101da:	b570      	push	{r4, r5, r6, lr}
 80101dc:	4604      	mov	r4, r0
 80101de:	d051      	beq.n	8010284 <_reclaim_reent+0xb0>
 80101e0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80101e2:	b143      	cbz	r3, 80101f6 <_reclaim_reent+0x22>
 80101e4:	68db      	ldr	r3, [r3, #12]
 80101e6:	2b00      	cmp	r3, #0
 80101e8:	d14a      	bne.n	8010280 <_reclaim_reent+0xac>
 80101ea:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80101ec:	6819      	ldr	r1, [r3, #0]
 80101ee:	b111      	cbz	r1, 80101f6 <_reclaim_reent+0x22>
 80101f0:	4620      	mov	r0, r4
 80101f2:	f000 f887 	bl	8010304 <_free_r>
 80101f6:	6961      	ldr	r1, [r4, #20]
 80101f8:	b111      	cbz	r1, 8010200 <_reclaim_reent+0x2c>
 80101fa:	4620      	mov	r0, r4
 80101fc:	f000 f882 	bl	8010304 <_free_r>
 8010200:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8010202:	b111      	cbz	r1, 801020a <_reclaim_reent+0x36>
 8010204:	4620      	mov	r0, r4
 8010206:	f000 f87d 	bl	8010304 <_free_r>
 801020a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801020c:	b111      	cbz	r1, 8010214 <_reclaim_reent+0x40>
 801020e:	4620      	mov	r0, r4
 8010210:	f000 f878 	bl	8010304 <_free_r>
 8010214:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8010216:	b111      	cbz	r1, 801021e <_reclaim_reent+0x4a>
 8010218:	4620      	mov	r0, r4
 801021a:	f000 f873 	bl	8010304 <_free_r>
 801021e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8010220:	b111      	cbz	r1, 8010228 <_reclaim_reent+0x54>
 8010222:	4620      	mov	r0, r4
 8010224:	f000 f86e 	bl	8010304 <_free_r>
 8010228:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 801022a:	b111      	cbz	r1, 8010232 <_reclaim_reent+0x5e>
 801022c:	4620      	mov	r0, r4
 801022e:	f000 f869 	bl	8010304 <_free_r>
 8010232:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8010234:	b111      	cbz	r1, 801023c <_reclaim_reent+0x68>
 8010236:	4620      	mov	r0, r4
 8010238:	f000 f864 	bl	8010304 <_free_r>
 801023c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801023e:	b111      	cbz	r1, 8010246 <_reclaim_reent+0x72>
 8010240:	4620      	mov	r0, r4
 8010242:	f000 f85f 	bl	8010304 <_free_r>
 8010246:	69a3      	ldr	r3, [r4, #24]
 8010248:	b1e3      	cbz	r3, 8010284 <_reclaim_reent+0xb0>
 801024a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 801024c:	4620      	mov	r0, r4
 801024e:	4798      	blx	r3
 8010250:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8010252:	b1b9      	cbz	r1, 8010284 <_reclaim_reent+0xb0>
 8010254:	4620      	mov	r0, r4
 8010256:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801025a:	f7ff bfad 	b.w	80101b8 <cleanup_glue>
 801025e:	5949      	ldr	r1, [r1, r5]
 8010260:	b941      	cbnz	r1, 8010274 <_reclaim_reent+0xa0>
 8010262:	3504      	adds	r5, #4
 8010264:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010266:	2d80      	cmp	r5, #128	; 0x80
 8010268:	68d9      	ldr	r1, [r3, #12]
 801026a:	d1f8      	bne.n	801025e <_reclaim_reent+0x8a>
 801026c:	4620      	mov	r0, r4
 801026e:	f000 f849 	bl	8010304 <_free_r>
 8010272:	e7ba      	b.n	80101ea <_reclaim_reent+0x16>
 8010274:	680e      	ldr	r6, [r1, #0]
 8010276:	4620      	mov	r0, r4
 8010278:	f000 f844 	bl	8010304 <_free_r>
 801027c:	4631      	mov	r1, r6
 801027e:	e7ef      	b.n	8010260 <_reclaim_reent+0x8c>
 8010280:	2500      	movs	r5, #0
 8010282:	e7ef      	b.n	8010264 <_reclaim_reent+0x90>
 8010284:	bd70      	pop	{r4, r5, r6, pc}
 8010286:	bf00      	nop
 8010288:	2000005c 	.word	0x2000005c

0801028c <_sbrk_r>:
 801028c:	b538      	push	{r3, r4, r5, lr}
 801028e:	4d06      	ldr	r5, [pc, #24]	; (80102a8 <_sbrk_r+0x1c>)
 8010290:	2300      	movs	r3, #0
 8010292:	4604      	mov	r4, r0
 8010294:	4608      	mov	r0, r1
 8010296:	602b      	str	r3, [r5, #0]
 8010298:	f7f4 ff76 	bl	8005188 <_sbrk>
 801029c:	1c43      	adds	r3, r0, #1
 801029e:	d102      	bne.n	80102a6 <_sbrk_r+0x1a>
 80102a0:	682b      	ldr	r3, [r5, #0]
 80102a2:	b103      	cbz	r3, 80102a6 <_sbrk_r+0x1a>
 80102a4:	6023      	str	r3, [r4, #0]
 80102a6:	bd38      	pop	{r3, r4, r5, pc}
 80102a8:	20009324 	.word	0x20009324

080102ac <siprintf>:
 80102ac:	b40e      	push	{r1, r2, r3}
 80102ae:	b500      	push	{lr}
 80102b0:	b09c      	sub	sp, #112	; 0x70
 80102b2:	ab1d      	add	r3, sp, #116	; 0x74
 80102b4:	9002      	str	r0, [sp, #8]
 80102b6:	9006      	str	r0, [sp, #24]
 80102b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80102bc:	4809      	ldr	r0, [pc, #36]	; (80102e4 <siprintf+0x38>)
 80102be:	9107      	str	r1, [sp, #28]
 80102c0:	9104      	str	r1, [sp, #16]
 80102c2:	4909      	ldr	r1, [pc, #36]	; (80102e8 <siprintf+0x3c>)
 80102c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80102c8:	9105      	str	r1, [sp, #20]
 80102ca:	6800      	ldr	r0, [r0, #0]
 80102cc:	9301      	str	r3, [sp, #4]
 80102ce:	a902      	add	r1, sp, #8
 80102d0:	f000 f8c0 	bl	8010454 <_svfiprintf_r>
 80102d4:	9b02      	ldr	r3, [sp, #8]
 80102d6:	2200      	movs	r2, #0
 80102d8:	701a      	strb	r2, [r3, #0]
 80102da:	b01c      	add	sp, #112	; 0x70
 80102dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80102e0:	b003      	add	sp, #12
 80102e2:	4770      	bx	lr
 80102e4:	2000005c 	.word	0x2000005c
 80102e8:	ffff0208 	.word	0xffff0208

080102ec <__malloc_lock>:
 80102ec:	4801      	ldr	r0, [pc, #4]	; (80102f4 <__malloc_lock+0x8>)
 80102ee:	f7ff beb7 	b.w	8010060 <__retarget_lock_acquire_recursive>
 80102f2:	bf00      	nop
 80102f4:	20009318 	.word	0x20009318

080102f8 <__malloc_unlock>:
 80102f8:	4801      	ldr	r0, [pc, #4]	; (8010300 <__malloc_unlock+0x8>)
 80102fa:	f7ff beb2 	b.w	8010062 <__retarget_lock_release_recursive>
 80102fe:	bf00      	nop
 8010300:	20009318 	.word	0x20009318

08010304 <_free_r>:
 8010304:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8010306:	2900      	cmp	r1, #0
 8010308:	d044      	beq.n	8010394 <_free_r+0x90>
 801030a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801030e:	9001      	str	r0, [sp, #4]
 8010310:	2b00      	cmp	r3, #0
 8010312:	f1a1 0404 	sub.w	r4, r1, #4
 8010316:	bfb8      	it	lt
 8010318:	18e4      	addlt	r4, r4, r3
 801031a:	f7ff ffe7 	bl	80102ec <__malloc_lock>
 801031e:	4a1e      	ldr	r2, [pc, #120]	; (8010398 <_free_r+0x94>)
 8010320:	9801      	ldr	r0, [sp, #4]
 8010322:	6813      	ldr	r3, [r2, #0]
 8010324:	b933      	cbnz	r3, 8010334 <_free_r+0x30>
 8010326:	6063      	str	r3, [r4, #4]
 8010328:	6014      	str	r4, [r2, #0]
 801032a:	b003      	add	sp, #12
 801032c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8010330:	f7ff bfe2 	b.w	80102f8 <__malloc_unlock>
 8010334:	42a3      	cmp	r3, r4
 8010336:	d908      	bls.n	801034a <_free_r+0x46>
 8010338:	6825      	ldr	r5, [r4, #0]
 801033a:	1961      	adds	r1, r4, r5
 801033c:	428b      	cmp	r3, r1
 801033e:	bf01      	itttt	eq
 8010340:	6819      	ldreq	r1, [r3, #0]
 8010342:	685b      	ldreq	r3, [r3, #4]
 8010344:	1949      	addeq	r1, r1, r5
 8010346:	6021      	streq	r1, [r4, #0]
 8010348:	e7ed      	b.n	8010326 <_free_r+0x22>
 801034a:	461a      	mov	r2, r3
 801034c:	685b      	ldr	r3, [r3, #4]
 801034e:	b10b      	cbz	r3, 8010354 <_free_r+0x50>
 8010350:	42a3      	cmp	r3, r4
 8010352:	d9fa      	bls.n	801034a <_free_r+0x46>
 8010354:	6811      	ldr	r1, [r2, #0]
 8010356:	1855      	adds	r5, r2, r1
 8010358:	42a5      	cmp	r5, r4
 801035a:	d10b      	bne.n	8010374 <_free_r+0x70>
 801035c:	6824      	ldr	r4, [r4, #0]
 801035e:	4421      	add	r1, r4
 8010360:	1854      	adds	r4, r2, r1
 8010362:	42a3      	cmp	r3, r4
 8010364:	6011      	str	r1, [r2, #0]
 8010366:	d1e0      	bne.n	801032a <_free_r+0x26>
 8010368:	681c      	ldr	r4, [r3, #0]
 801036a:	685b      	ldr	r3, [r3, #4]
 801036c:	6053      	str	r3, [r2, #4]
 801036e:	4421      	add	r1, r4
 8010370:	6011      	str	r1, [r2, #0]
 8010372:	e7da      	b.n	801032a <_free_r+0x26>
 8010374:	d902      	bls.n	801037c <_free_r+0x78>
 8010376:	230c      	movs	r3, #12
 8010378:	6003      	str	r3, [r0, #0]
 801037a:	e7d6      	b.n	801032a <_free_r+0x26>
 801037c:	6825      	ldr	r5, [r4, #0]
 801037e:	1961      	adds	r1, r4, r5
 8010380:	428b      	cmp	r3, r1
 8010382:	bf04      	itt	eq
 8010384:	6819      	ldreq	r1, [r3, #0]
 8010386:	685b      	ldreq	r3, [r3, #4]
 8010388:	6063      	str	r3, [r4, #4]
 801038a:	bf04      	itt	eq
 801038c:	1949      	addeq	r1, r1, r5
 801038e:	6021      	streq	r1, [r4, #0]
 8010390:	6054      	str	r4, [r2, #4]
 8010392:	e7ca      	b.n	801032a <_free_r+0x26>
 8010394:	b003      	add	sp, #12
 8010396:	bd30      	pop	{r4, r5, pc}
 8010398:	2000931c 	.word	0x2000931c

0801039c <__ssputs_r>:
 801039c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80103a0:	688e      	ldr	r6, [r1, #8]
 80103a2:	429e      	cmp	r6, r3
 80103a4:	4682      	mov	sl, r0
 80103a6:	460c      	mov	r4, r1
 80103a8:	4690      	mov	r8, r2
 80103aa:	461f      	mov	r7, r3
 80103ac:	d838      	bhi.n	8010420 <__ssputs_r+0x84>
 80103ae:	898a      	ldrh	r2, [r1, #12]
 80103b0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80103b4:	d032      	beq.n	801041c <__ssputs_r+0x80>
 80103b6:	6825      	ldr	r5, [r4, #0]
 80103b8:	6909      	ldr	r1, [r1, #16]
 80103ba:	eba5 0901 	sub.w	r9, r5, r1
 80103be:	6965      	ldr	r5, [r4, #20]
 80103c0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80103c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80103c8:	3301      	adds	r3, #1
 80103ca:	444b      	add	r3, r9
 80103cc:	106d      	asrs	r5, r5, #1
 80103ce:	429d      	cmp	r5, r3
 80103d0:	bf38      	it	cc
 80103d2:	461d      	movcc	r5, r3
 80103d4:	0553      	lsls	r3, r2, #21
 80103d6:	d531      	bpl.n	801043c <__ssputs_r+0xa0>
 80103d8:	4629      	mov	r1, r5
 80103da:	f7ff fe79 	bl	80100d0 <_malloc_r>
 80103de:	4606      	mov	r6, r0
 80103e0:	b950      	cbnz	r0, 80103f8 <__ssputs_r+0x5c>
 80103e2:	230c      	movs	r3, #12
 80103e4:	f8ca 3000 	str.w	r3, [sl]
 80103e8:	89a3      	ldrh	r3, [r4, #12]
 80103ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80103ee:	81a3      	strh	r3, [r4, #12]
 80103f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80103f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80103f8:	6921      	ldr	r1, [r4, #16]
 80103fa:	464a      	mov	r2, r9
 80103fc:	f7ff fe32 	bl	8010064 <memcpy>
 8010400:	89a3      	ldrh	r3, [r4, #12]
 8010402:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8010406:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801040a:	81a3      	strh	r3, [r4, #12]
 801040c:	6126      	str	r6, [r4, #16]
 801040e:	6165      	str	r5, [r4, #20]
 8010410:	444e      	add	r6, r9
 8010412:	eba5 0509 	sub.w	r5, r5, r9
 8010416:	6026      	str	r6, [r4, #0]
 8010418:	60a5      	str	r5, [r4, #8]
 801041a:	463e      	mov	r6, r7
 801041c:	42be      	cmp	r6, r7
 801041e:	d900      	bls.n	8010422 <__ssputs_r+0x86>
 8010420:	463e      	mov	r6, r7
 8010422:	6820      	ldr	r0, [r4, #0]
 8010424:	4632      	mov	r2, r6
 8010426:	4641      	mov	r1, r8
 8010428:	f000 faa8 	bl	801097c <memmove>
 801042c:	68a3      	ldr	r3, [r4, #8]
 801042e:	1b9b      	subs	r3, r3, r6
 8010430:	60a3      	str	r3, [r4, #8]
 8010432:	6823      	ldr	r3, [r4, #0]
 8010434:	4433      	add	r3, r6
 8010436:	6023      	str	r3, [r4, #0]
 8010438:	2000      	movs	r0, #0
 801043a:	e7db      	b.n	80103f4 <__ssputs_r+0x58>
 801043c:	462a      	mov	r2, r5
 801043e:	f000 fab7 	bl	80109b0 <_realloc_r>
 8010442:	4606      	mov	r6, r0
 8010444:	2800      	cmp	r0, #0
 8010446:	d1e1      	bne.n	801040c <__ssputs_r+0x70>
 8010448:	6921      	ldr	r1, [r4, #16]
 801044a:	4650      	mov	r0, sl
 801044c:	f7ff ff5a 	bl	8010304 <_free_r>
 8010450:	e7c7      	b.n	80103e2 <__ssputs_r+0x46>
	...

08010454 <_svfiprintf_r>:
 8010454:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010458:	4698      	mov	r8, r3
 801045a:	898b      	ldrh	r3, [r1, #12]
 801045c:	061b      	lsls	r3, r3, #24
 801045e:	b09d      	sub	sp, #116	; 0x74
 8010460:	4607      	mov	r7, r0
 8010462:	460d      	mov	r5, r1
 8010464:	4614      	mov	r4, r2
 8010466:	d50e      	bpl.n	8010486 <_svfiprintf_r+0x32>
 8010468:	690b      	ldr	r3, [r1, #16]
 801046a:	b963      	cbnz	r3, 8010486 <_svfiprintf_r+0x32>
 801046c:	2140      	movs	r1, #64	; 0x40
 801046e:	f7ff fe2f 	bl	80100d0 <_malloc_r>
 8010472:	6028      	str	r0, [r5, #0]
 8010474:	6128      	str	r0, [r5, #16]
 8010476:	b920      	cbnz	r0, 8010482 <_svfiprintf_r+0x2e>
 8010478:	230c      	movs	r3, #12
 801047a:	603b      	str	r3, [r7, #0]
 801047c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010480:	e0d1      	b.n	8010626 <_svfiprintf_r+0x1d2>
 8010482:	2340      	movs	r3, #64	; 0x40
 8010484:	616b      	str	r3, [r5, #20]
 8010486:	2300      	movs	r3, #0
 8010488:	9309      	str	r3, [sp, #36]	; 0x24
 801048a:	2320      	movs	r3, #32
 801048c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8010490:	f8cd 800c 	str.w	r8, [sp, #12]
 8010494:	2330      	movs	r3, #48	; 0x30
 8010496:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8010640 <_svfiprintf_r+0x1ec>
 801049a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801049e:	f04f 0901 	mov.w	r9, #1
 80104a2:	4623      	mov	r3, r4
 80104a4:	469a      	mov	sl, r3
 80104a6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80104aa:	b10a      	cbz	r2, 80104b0 <_svfiprintf_r+0x5c>
 80104ac:	2a25      	cmp	r2, #37	; 0x25
 80104ae:	d1f9      	bne.n	80104a4 <_svfiprintf_r+0x50>
 80104b0:	ebba 0b04 	subs.w	fp, sl, r4
 80104b4:	d00b      	beq.n	80104ce <_svfiprintf_r+0x7a>
 80104b6:	465b      	mov	r3, fp
 80104b8:	4622      	mov	r2, r4
 80104ba:	4629      	mov	r1, r5
 80104bc:	4638      	mov	r0, r7
 80104be:	f7ff ff6d 	bl	801039c <__ssputs_r>
 80104c2:	3001      	adds	r0, #1
 80104c4:	f000 80aa 	beq.w	801061c <_svfiprintf_r+0x1c8>
 80104c8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80104ca:	445a      	add	r2, fp
 80104cc:	9209      	str	r2, [sp, #36]	; 0x24
 80104ce:	f89a 3000 	ldrb.w	r3, [sl]
 80104d2:	2b00      	cmp	r3, #0
 80104d4:	f000 80a2 	beq.w	801061c <_svfiprintf_r+0x1c8>
 80104d8:	2300      	movs	r3, #0
 80104da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80104de:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80104e2:	f10a 0a01 	add.w	sl, sl, #1
 80104e6:	9304      	str	r3, [sp, #16]
 80104e8:	9307      	str	r3, [sp, #28]
 80104ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80104ee:	931a      	str	r3, [sp, #104]	; 0x68
 80104f0:	4654      	mov	r4, sl
 80104f2:	2205      	movs	r2, #5
 80104f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80104f8:	4851      	ldr	r0, [pc, #324]	; (8010640 <_svfiprintf_r+0x1ec>)
 80104fa:	f7ef fe71 	bl	80001e0 <memchr>
 80104fe:	9a04      	ldr	r2, [sp, #16]
 8010500:	b9d8      	cbnz	r0, 801053a <_svfiprintf_r+0xe6>
 8010502:	06d0      	lsls	r0, r2, #27
 8010504:	bf44      	itt	mi
 8010506:	2320      	movmi	r3, #32
 8010508:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801050c:	0711      	lsls	r1, r2, #28
 801050e:	bf44      	itt	mi
 8010510:	232b      	movmi	r3, #43	; 0x2b
 8010512:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8010516:	f89a 3000 	ldrb.w	r3, [sl]
 801051a:	2b2a      	cmp	r3, #42	; 0x2a
 801051c:	d015      	beq.n	801054a <_svfiprintf_r+0xf6>
 801051e:	9a07      	ldr	r2, [sp, #28]
 8010520:	4654      	mov	r4, sl
 8010522:	2000      	movs	r0, #0
 8010524:	f04f 0c0a 	mov.w	ip, #10
 8010528:	4621      	mov	r1, r4
 801052a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801052e:	3b30      	subs	r3, #48	; 0x30
 8010530:	2b09      	cmp	r3, #9
 8010532:	d94e      	bls.n	80105d2 <_svfiprintf_r+0x17e>
 8010534:	b1b0      	cbz	r0, 8010564 <_svfiprintf_r+0x110>
 8010536:	9207      	str	r2, [sp, #28]
 8010538:	e014      	b.n	8010564 <_svfiprintf_r+0x110>
 801053a:	eba0 0308 	sub.w	r3, r0, r8
 801053e:	fa09 f303 	lsl.w	r3, r9, r3
 8010542:	4313      	orrs	r3, r2
 8010544:	9304      	str	r3, [sp, #16]
 8010546:	46a2      	mov	sl, r4
 8010548:	e7d2      	b.n	80104f0 <_svfiprintf_r+0x9c>
 801054a:	9b03      	ldr	r3, [sp, #12]
 801054c:	1d19      	adds	r1, r3, #4
 801054e:	681b      	ldr	r3, [r3, #0]
 8010550:	9103      	str	r1, [sp, #12]
 8010552:	2b00      	cmp	r3, #0
 8010554:	bfbb      	ittet	lt
 8010556:	425b      	neglt	r3, r3
 8010558:	f042 0202 	orrlt.w	r2, r2, #2
 801055c:	9307      	strge	r3, [sp, #28]
 801055e:	9307      	strlt	r3, [sp, #28]
 8010560:	bfb8      	it	lt
 8010562:	9204      	strlt	r2, [sp, #16]
 8010564:	7823      	ldrb	r3, [r4, #0]
 8010566:	2b2e      	cmp	r3, #46	; 0x2e
 8010568:	d10c      	bne.n	8010584 <_svfiprintf_r+0x130>
 801056a:	7863      	ldrb	r3, [r4, #1]
 801056c:	2b2a      	cmp	r3, #42	; 0x2a
 801056e:	d135      	bne.n	80105dc <_svfiprintf_r+0x188>
 8010570:	9b03      	ldr	r3, [sp, #12]
 8010572:	1d1a      	adds	r2, r3, #4
 8010574:	681b      	ldr	r3, [r3, #0]
 8010576:	9203      	str	r2, [sp, #12]
 8010578:	2b00      	cmp	r3, #0
 801057a:	bfb8      	it	lt
 801057c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8010580:	3402      	adds	r4, #2
 8010582:	9305      	str	r3, [sp, #20]
 8010584:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8010650 <_svfiprintf_r+0x1fc>
 8010588:	7821      	ldrb	r1, [r4, #0]
 801058a:	2203      	movs	r2, #3
 801058c:	4650      	mov	r0, sl
 801058e:	f7ef fe27 	bl	80001e0 <memchr>
 8010592:	b140      	cbz	r0, 80105a6 <_svfiprintf_r+0x152>
 8010594:	2340      	movs	r3, #64	; 0x40
 8010596:	eba0 000a 	sub.w	r0, r0, sl
 801059a:	fa03 f000 	lsl.w	r0, r3, r0
 801059e:	9b04      	ldr	r3, [sp, #16]
 80105a0:	4303      	orrs	r3, r0
 80105a2:	3401      	adds	r4, #1
 80105a4:	9304      	str	r3, [sp, #16]
 80105a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80105aa:	4826      	ldr	r0, [pc, #152]	; (8010644 <_svfiprintf_r+0x1f0>)
 80105ac:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80105b0:	2206      	movs	r2, #6
 80105b2:	f7ef fe15 	bl	80001e0 <memchr>
 80105b6:	2800      	cmp	r0, #0
 80105b8:	d038      	beq.n	801062c <_svfiprintf_r+0x1d8>
 80105ba:	4b23      	ldr	r3, [pc, #140]	; (8010648 <_svfiprintf_r+0x1f4>)
 80105bc:	bb1b      	cbnz	r3, 8010606 <_svfiprintf_r+0x1b2>
 80105be:	9b03      	ldr	r3, [sp, #12]
 80105c0:	3307      	adds	r3, #7
 80105c2:	f023 0307 	bic.w	r3, r3, #7
 80105c6:	3308      	adds	r3, #8
 80105c8:	9303      	str	r3, [sp, #12]
 80105ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80105cc:	4433      	add	r3, r6
 80105ce:	9309      	str	r3, [sp, #36]	; 0x24
 80105d0:	e767      	b.n	80104a2 <_svfiprintf_r+0x4e>
 80105d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80105d6:	460c      	mov	r4, r1
 80105d8:	2001      	movs	r0, #1
 80105da:	e7a5      	b.n	8010528 <_svfiprintf_r+0xd4>
 80105dc:	2300      	movs	r3, #0
 80105de:	3401      	adds	r4, #1
 80105e0:	9305      	str	r3, [sp, #20]
 80105e2:	4619      	mov	r1, r3
 80105e4:	f04f 0c0a 	mov.w	ip, #10
 80105e8:	4620      	mov	r0, r4
 80105ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80105ee:	3a30      	subs	r2, #48	; 0x30
 80105f0:	2a09      	cmp	r2, #9
 80105f2:	d903      	bls.n	80105fc <_svfiprintf_r+0x1a8>
 80105f4:	2b00      	cmp	r3, #0
 80105f6:	d0c5      	beq.n	8010584 <_svfiprintf_r+0x130>
 80105f8:	9105      	str	r1, [sp, #20]
 80105fa:	e7c3      	b.n	8010584 <_svfiprintf_r+0x130>
 80105fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8010600:	4604      	mov	r4, r0
 8010602:	2301      	movs	r3, #1
 8010604:	e7f0      	b.n	80105e8 <_svfiprintf_r+0x194>
 8010606:	ab03      	add	r3, sp, #12
 8010608:	9300      	str	r3, [sp, #0]
 801060a:	462a      	mov	r2, r5
 801060c:	4b0f      	ldr	r3, [pc, #60]	; (801064c <_svfiprintf_r+0x1f8>)
 801060e:	a904      	add	r1, sp, #16
 8010610:	4638      	mov	r0, r7
 8010612:	f3af 8000 	nop.w
 8010616:	1c42      	adds	r2, r0, #1
 8010618:	4606      	mov	r6, r0
 801061a:	d1d6      	bne.n	80105ca <_svfiprintf_r+0x176>
 801061c:	89ab      	ldrh	r3, [r5, #12]
 801061e:	065b      	lsls	r3, r3, #25
 8010620:	f53f af2c 	bmi.w	801047c <_svfiprintf_r+0x28>
 8010624:	9809      	ldr	r0, [sp, #36]	; 0x24
 8010626:	b01d      	add	sp, #116	; 0x74
 8010628:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801062c:	ab03      	add	r3, sp, #12
 801062e:	9300      	str	r3, [sp, #0]
 8010630:	462a      	mov	r2, r5
 8010632:	4b06      	ldr	r3, [pc, #24]	; (801064c <_svfiprintf_r+0x1f8>)
 8010634:	a904      	add	r1, sp, #16
 8010636:	4638      	mov	r0, r7
 8010638:	f000 f87a 	bl	8010730 <_printf_i>
 801063c:	e7eb      	b.n	8010616 <_svfiprintf_r+0x1c2>
 801063e:	bf00      	nop
 8010640:	0801f918 	.word	0x0801f918
 8010644:	0801f922 	.word	0x0801f922
 8010648:	00000000 	.word	0x00000000
 801064c:	0801039d 	.word	0x0801039d
 8010650:	0801f91e 	.word	0x0801f91e

08010654 <_printf_common>:
 8010654:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010658:	4616      	mov	r6, r2
 801065a:	4699      	mov	r9, r3
 801065c:	688a      	ldr	r2, [r1, #8]
 801065e:	690b      	ldr	r3, [r1, #16]
 8010660:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8010664:	4293      	cmp	r3, r2
 8010666:	bfb8      	it	lt
 8010668:	4613      	movlt	r3, r2
 801066a:	6033      	str	r3, [r6, #0]
 801066c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8010670:	4607      	mov	r7, r0
 8010672:	460c      	mov	r4, r1
 8010674:	b10a      	cbz	r2, 801067a <_printf_common+0x26>
 8010676:	3301      	adds	r3, #1
 8010678:	6033      	str	r3, [r6, #0]
 801067a:	6823      	ldr	r3, [r4, #0]
 801067c:	0699      	lsls	r1, r3, #26
 801067e:	bf42      	ittt	mi
 8010680:	6833      	ldrmi	r3, [r6, #0]
 8010682:	3302      	addmi	r3, #2
 8010684:	6033      	strmi	r3, [r6, #0]
 8010686:	6825      	ldr	r5, [r4, #0]
 8010688:	f015 0506 	ands.w	r5, r5, #6
 801068c:	d106      	bne.n	801069c <_printf_common+0x48>
 801068e:	f104 0a19 	add.w	sl, r4, #25
 8010692:	68e3      	ldr	r3, [r4, #12]
 8010694:	6832      	ldr	r2, [r6, #0]
 8010696:	1a9b      	subs	r3, r3, r2
 8010698:	42ab      	cmp	r3, r5
 801069a:	dc26      	bgt.n	80106ea <_printf_common+0x96>
 801069c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80106a0:	1e13      	subs	r3, r2, #0
 80106a2:	6822      	ldr	r2, [r4, #0]
 80106a4:	bf18      	it	ne
 80106a6:	2301      	movne	r3, #1
 80106a8:	0692      	lsls	r2, r2, #26
 80106aa:	d42b      	bmi.n	8010704 <_printf_common+0xb0>
 80106ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80106b0:	4649      	mov	r1, r9
 80106b2:	4638      	mov	r0, r7
 80106b4:	47c0      	blx	r8
 80106b6:	3001      	adds	r0, #1
 80106b8:	d01e      	beq.n	80106f8 <_printf_common+0xa4>
 80106ba:	6823      	ldr	r3, [r4, #0]
 80106bc:	68e5      	ldr	r5, [r4, #12]
 80106be:	6832      	ldr	r2, [r6, #0]
 80106c0:	f003 0306 	and.w	r3, r3, #6
 80106c4:	2b04      	cmp	r3, #4
 80106c6:	bf08      	it	eq
 80106c8:	1aad      	subeq	r5, r5, r2
 80106ca:	68a3      	ldr	r3, [r4, #8]
 80106cc:	6922      	ldr	r2, [r4, #16]
 80106ce:	bf0c      	ite	eq
 80106d0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80106d4:	2500      	movne	r5, #0
 80106d6:	4293      	cmp	r3, r2
 80106d8:	bfc4      	itt	gt
 80106da:	1a9b      	subgt	r3, r3, r2
 80106dc:	18ed      	addgt	r5, r5, r3
 80106de:	2600      	movs	r6, #0
 80106e0:	341a      	adds	r4, #26
 80106e2:	42b5      	cmp	r5, r6
 80106e4:	d11a      	bne.n	801071c <_printf_common+0xc8>
 80106e6:	2000      	movs	r0, #0
 80106e8:	e008      	b.n	80106fc <_printf_common+0xa8>
 80106ea:	2301      	movs	r3, #1
 80106ec:	4652      	mov	r2, sl
 80106ee:	4649      	mov	r1, r9
 80106f0:	4638      	mov	r0, r7
 80106f2:	47c0      	blx	r8
 80106f4:	3001      	adds	r0, #1
 80106f6:	d103      	bne.n	8010700 <_printf_common+0xac>
 80106f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80106fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010700:	3501      	adds	r5, #1
 8010702:	e7c6      	b.n	8010692 <_printf_common+0x3e>
 8010704:	18e1      	adds	r1, r4, r3
 8010706:	1c5a      	adds	r2, r3, #1
 8010708:	2030      	movs	r0, #48	; 0x30
 801070a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801070e:	4422      	add	r2, r4
 8010710:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8010714:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8010718:	3302      	adds	r3, #2
 801071a:	e7c7      	b.n	80106ac <_printf_common+0x58>
 801071c:	2301      	movs	r3, #1
 801071e:	4622      	mov	r2, r4
 8010720:	4649      	mov	r1, r9
 8010722:	4638      	mov	r0, r7
 8010724:	47c0      	blx	r8
 8010726:	3001      	adds	r0, #1
 8010728:	d0e6      	beq.n	80106f8 <_printf_common+0xa4>
 801072a:	3601      	adds	r6, #1
 801072c:	e7d9      	b.n	80106e2 <_printf_common+0x8e>
	...

08010730 <_printf_i>:
 8010730:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010734:	7e0f      	ldrb	r7, [r1, #24]
 8010736:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8010738:	2f78      	cmp	r7, #120	; 0x78
 801073a:	4691      	mov	r9, r2
 801073c:	4680      	mov	r8, r0
 801073e:	460c      	mov	r4, r1
 8010740:	469a      	mov	sl, r3
 8010742:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8010746:	d807      	bhi.n	8010758 <_printf_i+0x28>
 8010748:	2f62      	cmp	r7, #98	; 0x62
 801074a:	d80a      	bhi.n	8010762 <_printf_i+0x32>
 801074c:	2f00      	cmp	r7, #0
 801074e:	f000 80d8 	beq.w	8010902 <_printf_i+0x1d2>
 8010752:	2f58      	cmp	r7, #88	; 0x58
 8010754:	f000 80a3 	beq.w	801089e <_printf_i+0x16e>
 8010758:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801075c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8010760:	e03a      	b.n	80107d8 <_printf_i+0xa8>
 8010762:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8010766:	2b15      	cmp	r3, #21
 8010768:	d8f6      	bhi.n	8010758 <_printf_i+0x28>
 801076a:	a101      	add	r1, pc, #4	; (adr r1, 8010770 <_printf_i+0x40>)
 801076c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8010770:	080107c9 	.word	0x080107c9
 8010774:	080107dd 	.word	0x080107dd
 8010778:	08010759 	.word	0x08010759
 801077c:	08010759 	.word	0x08010759
 8010780:	08010759 	.word	0x08010759
 8010784:	08010759 	.word	0x08010759
 8010788:	080107dd 	.word	0x080107dd
 801078c:	08010759 	.word	0x08010759
 8010790:	08010759 	.word	0x08010759
 8010794:	08010759 	.word	0x08010759
 8010798:	08010759 	.word	0x08010759
 801079c:	080108e9 	.word	0x080108e9
 80107a0:	0801080d 	.word	0x0801080d
 80107a4:	080108cb 	.word	0x080108cb
 80107a8:	08010759 	.word	0x08010759
 80107ac:	08010759 	.word	0x08010759
 80107b0:	0801090b 	.word	0x0801090b
 80107b4:	08010759 	.word	0x08010759
 80107b8:	0801080d 	.word	0x0801080d
 80107bc:	08010759 	.word	0x08010759
 80107c0:	08010759 	.word	0x08010759
 80107c4:	080108d3 	.word	0x080108d3
 80107c8:	682b      	ldr	r3, [r5, #0]
 80107ca:	1d1a      	adds	r2, r3, #4
 80107cc:	681b      	ldr	r3, [r3, #0]
 80107ce:	602a      	str	r2, [r5, #0]
 80107d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80107d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80107d8:	2301      	movs	r3, #1
 80107da:	e0a3      	b.n	8010924 <_printf_i+0x1f4>
 80107dc:	6820      	ldr	r0, [r4, #0]
 80107de:	6829      	ldr	r1, [r5, #0]
 80107e0:	0606      	lsls	r6, r0, #24
 80107e2:	f101 0304 	add.w	r3, r1, #4
 80107e6:	d50a      	bpl.n	80107fe <_printf_i+0xce>
 80107e8:	680e      	ldr	r6, [r1, #0]
 80107ea:	602b      	str	r3, [r5, #0]
 80107ec:	2e00      	cmp	r6, #0
 80107ee:	da03      	bge.n	80107f8 <_printf_i+0xc8>
 80107f0:	232d      	movs	r3, #45	; 0x2d
 80107f2:	4276      	negs	r6, r6
 80107f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80107f8:	485e      	ldr	r0, [pc, #376]	; (8010974 <_printf_i+0x244>)
 80107fa:	230a      	movs	r3, #10
 80107fc:	e019      	b.n	8010832 <_printf_i+0x102>
 80107fe:	680e      	ldr	r6, [r1, #0]
 8010800:	602b      	str	r3, [r5, #0]
 8010802:	f010 0f40 	tst.w	r0, #64	; 0x40
 8010806:	bf18      	it	ne
 8010808:	b236      	sxthne	r6, r6
 801080a:	e7ef      	b.n	80107ec <_printf_i+0xbc>
 801080c:	682b      	ldr	r3, [r5, #0]
 801080e:	6820      	ldr	r0, [r4, #0]
 8010810:	1d19      	adds	r1, r3, #4
 8010812:	6029      	str	r1, [r5, #0]
 8010814:	0601      	lsls	r1, r0, #24
 8010816:	d501      	bpl.n	801081c <_printf_i+0xec>
 8010818:	681e      	ldr	r6, [r3, #0]
 801081a:	e002      	b.n	8010822 <_printf_i+0xf2>
 801081c:	0646      	lsls	r6, r0, #25
 801081e:	d5fb      	bpl.n	8010818 <_printf_i+0xe8>
 8010820:	881e      	ldrh	r6, [r3, #0]
 8010822:	4854      	ldr	r0, [pc, #336]	; (8010974 <_printf_i+0x244>)
 8010824:	2f6f      	cmp	r7, #111	; 0x6f
 8010826:	bf0c      	ite	eq
 8010828:	2308      	moveq	r3, #8
 801082a:	230a      	movne	r3, #10
 801082c:	2100      	movs	r1, #0
 801082e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8010832:	6865      	ldr	r5, [r4, #4]
 8010834:	60a5      	str	r5, [r4, #8]
 8010836:	2d00      	cmp	r5, #0
 8010838:	bfa2      	ittt	ge
 801083a:	6821      	ldrge	r1, [r4, #0]
 801083c:	f021 0104 	bicge.w	r1, r1, #4
 8010840:	6021      	strge	r1, [r4, #0]
 8010842:	b90e      	cbnz	r6, 8010848 <_printf_i+0x118>
 8010844:	2d00      	cmp	r5, #0
 8010846:	d04d      	beq.n	80108e4 <_printf_i+0x1b4>
 8010848:	4615      	mov	r5, r2
 801084a:	fbb6 f1f3 	udiv	r1, r6, r3
 801084e:	fb03 6711 	mls	r7, r3, r1, r6
 8010852:	5dc7      	ldrb	r7, [r0, r7]
 8010854:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8010858:	4637      	mov	r7, r6
 801085a:	42bb      	cmp	r3, r7
 801085c:	460e      	mov	r6, r1
 801085e:	d9f4      	bls.n	801084a <_printf_i+0x11a>
 8010860:	2b08      	cmp	r3, #8
 8010862:	d10b      	bne.n	801087c <_printf_i+0x14c>
 8010864:	6823      	ldr	r3, [r4, #0]
 8010866:	07de      	lsls	r6, r3, #31
 8010868:	d508      	bpl.n	801087c <_printf_i+0x14c>
 801086a:	6923      	ldr	r3, [r4, #16]
 801086c:	6861      	ldr	r1, [r4, #4]
 801086e:	4299      	cmp	r1, r3
 8010870:	bfde      	ittt	le
 8010872:	2330      	movle	r3, #48	; 0x30
 8010874:	f805 3c01 	strble.w	r3, [r5, #-1]
 8010878:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 801087c:	1b52      	subs	r2, r2, r5
 801087e:	6122      	str	r2, [r4, #16]
 8010880:	f8cd a000 	str.w	sl, [sp]
 8010884:	464b      	mov	r3, r9
 8010886:	aa03      	add	r2, sp, #12
 8010888:	4621      	mov	r1, r4
 801088a:	4640      	mov	r0, r8
 801088c:	f7ff fee2 	bl	8010654 <_printf_common>
 8010890:	3001      	adds	r0, #1
 8010892:	d14c      	bne.n	801092e <_printf_i+0x1fe>
 8010894:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8010898:	b004      	add	sp, #16
 801089a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801089e:	4835      	ldr	r0, [pc, #212]	; (8010974 <_printf_i+0x244>)
 80108a0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80108a4:	6829      	ldr	r1, [r5, #0]
 80108a6:	6823      	ldr	r3, [r4, #0]
 80108a8:	f851 6b04 	ldr.w	r6, [r1], #4
 80108ac:	6029      	str	r1, [r5, #0]
 80108ae:	061d      	lsls	r5, r3, #24
 80108b0:	d514      	bpl.n	80108dc <_printf_i+0x1ac>
 80108b2:	07df      	lsls	r7, r3, #31
 80108b4:	bf44      	itt	mi
 80108b6:	f043 0320 	orrmi.w	r3, r3, #32
 80108ba:	6023      	strmi	r3, [r4, #0]
 80108bc:	b91e      	cbnz	r6, 80108c6 <_printf_i+0x196>
 80108be:	6823      	ldr	r3, [r4, #0]
 80108c0:	f023 0320 	bic.w	r3, r3, #32
 80108c4:	6023      	str	r3, [r4, #0]
 80108c6:	2310      	movs	r3, #16
 80108c8:	e7b0      	b.n	801082c <_printf_i+0xfc>
 80108ca:	6823      	ldr	r3, [r4, #0]
 80108cc:	f043 0320 	orr.w	r3, r3, #32
 80108d0:	6023      	str	r3, [r4, #0]
 80108d2:	2378      	movs	r3, #120	; 0x78
 80108d4:	4828      	ldr	r0, [pc, #160]	; (8010978 <_printf_i+0x248>)
 80108d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80108da:	e7e3      	b.n	80108a4 <_printf_i+0x174>
 80108dc:	0659      	lsls	r1, r3, #25
 80108de:	bf48      	it	mi
 80108e0:	b2b6      	uxthmi	r6, r6
 80108e2:	e7e6      	b.n	80108b2 <_printf_i+0x182>
 80108e4:	4615      	mov	r5, r2
 80108e6:	e7bb      	b.n	8010860 <_printf_i+0x130>
 80108e8:	682b      	ldr	r3, [r5, #0]
 80108ea:	6826      	ldr	r6, [r4, #0]
 80108ec:	6961      	ldr	r1, [r4, #20]
 80108ee:	1d18      	adds	r0, r3, #4
 80108f0:	6028      	str	r0, [r5, #0]
 80108f2:	0635      	lsls	r5, r6, #24
 80108f4:	681b      	ldr	r3, [r3, #0]
 80108f6:	d501      	bpl.n	80108fc <_printf_i+0x1cc>
 80108f8:	6019      	str	r1, [r3, #0]
 80108fa:	e002      	b.n	8010902 <_printf_i+0x1d2>
 80108fc:	0670      	lsls	r0, r6, #25
 80108fe:	d5fb      	bpl.n	80108f8 <_printf_i+0x1c8>
 8010900:	8019      	strh	r1, [r3, #0]
 8010902:	2300      	movs	r3, #0
 8010904:	6123      	str	r3, [r4, #16]
 8010906:	4615      	mov	r5, r2
 8010908:	e7ba      	b.n	8010880 <_printf_i+0x150>
 801090a:	682b      	ldr	r3, [r5, #0]
 801090c:	1d1a      	adds	r2, r3, #4
 801090e:	602a      	str	r2, [r5, #0]
 8010910:	681d      	ldr	r5, [r3, #0]
 8010912:	6862      	ldr	r2, [r4, #4]
 8010914:	2100      	movs	r1, #0
 8010916:	4628      	mov	r0, r5
 8010918:	f7ef fc62 	bl	80001e0 <memchr>
 801091c:	b108      	cbz	r0, 8010922 <_printf_i+0x1f2>
 801091e:	1b40      	subs	r0, r0, r5
 8010920:	6060      	str	r0, [r4, #4]
 8010922:	6863      	ldr	r3, [r4, #4]
 8010924:	6123      	str	r3, [r4, #16]
 8010926:	2300      	movs	r3, #0
 8010928:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801092c:	e7a8      	b.n	8010880 <_printf_i+0x150>
 801092e:	6923      	ldr	r3, [r4, #16]
 8010930:	462a      	mov	r2, r5
 8010932:	4649      	mov	r1, r9
 8010934:	4640      	mov	r0, r8
 8010936:	47d0      	blx	sl
 8010938:	3001      	adds	r0, #1
 801093a:	d0ab      	beq.n	8010894 <_printf_i+0x164>
 801093c:	6823      	ldr	r3, [r4, #0]
 801093e:	079b      	lsls	r3, r3, #30
 8010940:	d413      	bmi.n	801096a <_printf_i+0x23a>
 8010942:	68e0      	ldr	r0, [r4, #12]
 8010944:	9b03      	ldr	r3, [sp, #12]
 8010946:	4298      	cmp	r0, r3
 8010948:	bfb8      	it	lt
 801094a:	4618      	movlt	r0, r3
 801094c:	e7a4      	b.n	8010898 <_printf_i+0x168>
 801094e:	2301      	movs	r3, #1
 8010950:	4632      	mov	r2, r6
 8010952:	4649      	mov	r1, r9
 8010954:	4640      	mov	r0, r8
 8010956:	47d0      	blx	sl
 8010958:	3001      	adds	r0, #1
 801095a:	d09b      	beq.n	8010894 <_printf_i+0x164>
 801095c:	3501      	adds	r5, #1
 801095e:	68e3      	ldr	r3, [r4, #12]
 8010960:	9903      	ldr	r1, [sp, #12]
 8010962:	1a5b      	subs	r3, r3, r1
 8010964:	42ab      	cmp	r3, r5
 8010966:	dcf2      	bgt.n	801094e <_printf_i+0x21e>
 8010968:	e7eb      	b.n	8010942 <_printf_i+0x212>
 801096a:	2500      	movs	r5, #0
 801096c:	f104 0619 	add.w	r6, r4, #25
 8010970:	e7f5      	b.n	801095e <_printf_i+0x22e>
 8010972:	bf00      	nop
 8010974:	0801f929 	.word	0x0801f929
 8010978:	0801f93a 	.word	0x0801f93a

0801097c <memmove>:
 801097c:	4288      	cmp	r0, r1
 801097e:	b510      	push	{r4, lr}
 8010980:	eb01 0402 	add.w	r4, r1, r2
 8010984:	d902      	bls.n	801098c <memmove+0x10>
 8010986:	4284      	cmp	r4, r0
 8010988:	4623      	mov	r3, r4
 801098a:	d807      	bhi.n	801099c <memmove+0x20>
 801098c:	1e43      	subs	r3, r0, #1
 801098e:	42a1      	cmp	r1, r4
 8010990:	d008      	beq.n	80109a4 <memmove+0x28>
 8010992:	f811 2b01 	ldrb.w	r2, [r1], #1
 8010996:	f803 2f01 	strb.w	r2, [r3, #1]!
 801099a:	e7f8      	b.n	801098e <memmove+0x12>
 801099c:	4402      	add	r2, r0
 801099e:	4601      	mov	r1, r0
 80109a0:	428a      	cmp	r2, r1
 80109a2:	d100      	bne.n	80109a6 <memmove+0x2a>
 80109a4:	bd10      	pop	{r4, pc}
 80109a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80109aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80109ae:	e7f7      	b.n	80109a0 <memmove+0x24>

080109b0 <_realloc_r>:
 80109b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80109b4:	4680      	mov	r8, r0
 80109b6:	4614      	mov	r4, r2
 80109b8:	460e      	mov	r6, r1
 80109ba:	b921      	cbnz	r1, 80109c6 <_realloc_r+0x16>
 80109bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80109c0:	4611      	mov	r1, r2
 80109c2:	f7ff bb85 	b.w	80100d0 <_malloc_r>
 80109c6:	b92a      	cbnz	r2, 80109d4 <_realloc_r+0x24>
 80109c8:	f7ff fc9c 	bl	8010304 <_free_r>
 80109cc:	4625      	mov	r5, r4
 80109ce:	4628      	mov	r0, r5
 80109d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80109d4:	f000 f81b 	bl	8010a0e <_malloc_usable_size_r>
 80109d8:	4284      	cmp	r4, r0
 80109da:	4607      	mov	r7, r0
 80109dc:	d802      	bhi.n	80109e4 <_realloc_r+0x34>
 80109de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80109e2:	d812      	bhi.n	8010a0a <_realloc_r+0x5a>
 80109e4:	4621      	mov	r1, r4
 80109e6:	4640      	mov	r0, r8
 80109e8:	f7ff fb72 	bl	80100d0 <_malloc_r>
 80109ec:	4605      	mov	r5, r0
 80109ee:	2800      	cmp	r0, #0
 80109f0:	d0ed      	beq.n	80109ce <_realloc_r+0x1e>
 80109f2:	42bc      	cmp	r4, r7
 80109f4:	4622      	mov	r2, r4
 80109f6:	4631      	mov	r1, r6
 80109f8:	bf28      	it	cs
 80109fa:	463a      	movcs	r2, r7
 80109fc:	f7ff fb32 	bl	8010064 <memcpy>
 8010a00:	4631      	mov	r1, r6
 8010a02:	4640      	mov	r0, r8
 8010a04:	f7ff fc7e 	bl	8010304 <_free_r>
 8010a08:	e7e1      	b.n	80109ce <_realloc_r+0x1e>
 8010a0a:	4635      	mov	r5, r6
 8010a0c:	e7df      	b.n	80109ce <_realloc_r+0x1e>

08010a0e <_malloc_usable_size_r>:
 8010a0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8010a12:	1f18      	subs	r0, r3, #4
 8010a14:	2b00      	cmp	r3, #0
 8010a16:	bfbc      	itt	lt
 8010a18:	580b      	ldrlt	r3, [r1, r0]
 8010a1a:	18c0      	addlt	r0, r0, r3
 8010a1c:	4770      	bx	lr
	...

08010a20 <sin>:
 8010a20:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010a22:	ec53 2b10 	vmov	r2, r3, d0
 8010a26:	4828      	ldr	r0, [pc, #160]	; (8010ac8 <sin+0xa8>)
 8010a28:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8010a2c:	4281      	cmp	r1, r0
 8010a2e:	dc07      	bgt.n	8010a40 <sin+0x20>
 8010a30:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8010ac0 <sin+0xa0>
 8010a34:	2000      	movs	r0, #0
 8010a36:	b005      	add	sp, #20
 8010a38:	f85d eb04 	ldr.w	lr, [sp], #4
 8010a3c:	f001 bcc0 	b.w	80123c0 <__kernel_sin>
 8010a40:	4822      	ldr	r0, [pc, #136]	; (8010acc <sin+0xac>)
 8010a42:	4281      	cmp	r1, r0
 8010a44:	dd09      	ble.n	8010a5a <sin+0x3a>
 8010a46:	ee10 0a10 	vmov	r0, s0
 8010a4a:	4619      	mov	r1, r3
 8010a4c:	f7ef fc1c 	bl	8000288 <__aeabi_dsub>
 8010a50:	ec41 0b10 	vmov	d0, r0, r1
 8010a54:	b005      	add	sp, #20
 8010a56:	f85d fb04 	ldr.w	pc, [sp], #4
 8010a5a:	4668      	mov	r0, sp
 8010a5c:	f000 fdd8 	bl	8011610 <__ieee754_rem_pio2>
 8010a60:	f000 0003 	and.w	r0, r0, #3
 8010a64:	2801      	cmp	r0, #1
 8010a66:	d00c      	beq.n	8010a82 <sin+0x62>
 8010a68:	2802      	cmp	r0, #2
 8010a6a:	d011      	beq.n	8010a90 <sin+0x70>
 8010a6c:	b9f0      	cbnz	r0, 8010aac <sin+0x8c>
 8010a6e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a72:	ed9d 0b00 	vldr	d0, [sp]
 8010a76:	2001      	movs	r0, #1
 8010a78:	f001 fca2 	bl	80123c0 <__kernel_sin>
 8010a7c:	ec51 0b10 	vmov	r0, r1, d0
 8010a80:	e7e6      	b.n	8010a50 <sin+0x30>
 8010a82:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a86:	ed9d 0b00 	vldr	d0, [sp]
 8010a8a:	f001 f881 	bl	8011b90 <__kernel_cos>
 8010a8e:	e7f5      	b.n	8010a7c <sin+0x5c>
 8010a90:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010a94:	ed9d 0b00 	vldr	d0, [sp]
 8010a98:	2001      	movs	r0, #1
 8010a9a:	f001 fc91 	bl	80123c0 <__kernel_sin>
 8010a9e:	ec53 2b10 	vmov	r2, r3, d0
 8010aa2:	ee10 0a10 	vmov	r0, s0
 8010aa6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010aaa:	e7d1      	b.n	8010a50 <sin+0x30>
 8010aac:	ed9d 1b02 	vldr	d1, [sp, #8]
 8010ab0:	ed9d 0b00 	vldr	d0, [sp]
 8010ab4:	f001 f86c 	bl	8011b90 <__kernel_cos>
 8010ab8:	e7f1      	b.n	8010a9e <sin+0x7e>
 8010aba:	bf00      	nop
 8010abc:	f3af 8000 	nop.w
	...
 8010ac8:	3fe921fb 	.word	0x3fe921fb
 8010acc:	7fefffff 	.word	0x7fefffff

08010ad0 <pow>:
 8010ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010ad2:	ed2d 8b02 	vpush	{d8}
 8010ad6:	eeb0 8a40 	vmov.f32	s16, s0
 8010ada:	eef0 8a60 	vmov.f32	s17, s1
 8010ade:	ec55 4b11 	vmov	r4, r5, d1
 8010ae2:	f000 f865 	bl	8010bb0 <__ieee754_pow>
 8010ae6:	4622      	mov	r2, r4
 8010ae8:	462b      	mov	r3, r5
 8010aea:	4620      	mov	r0, r4
 8010aec:	4629      	mov	r1, r5
 8010aee:	ec57 6b10 	vmov	r6, r7, d0
 8010af2:	f7f0 f81b 	bl	8000b2c <__aeabi_dcmpun>
 8010af6:	2800      	cmp	r0, #0
 8010af8:	d13b      	bne.n	8010b72 <pow+0xa2>
 8010afa:	ec51 0b18 	vmov	r0, r1, d8
 8010afe:	2200      	movs	r2, #0
 8010b00:	2300      	movs	r3, #0
 8010b02:	f7ef ffe1 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b06:	b1b8      	cbz	r0, 8010b38 <pow+0x68>
 8010b08:	2200      	movs	r2, #0
 8010b0a:	2300      	movs	r3, #0
 8010b0c:	4620      	mov	r0, r4
 8010b0e:	4629      	mov	r1, r5
 8010b10:	f7ef ffda 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b14:	2800      	cmp	r0, #0
 8010b16:	d146      	bne.n	8010ba6 <pow+0xd6>
 8010b18:	ec45 4b10 	vmov	d0, r4, r5
 8010b1c:	f001 fd47 	bl	80125ae <finite>
 8010b20:	b338      	cbz	r0, 8010b72 <pow+0xa2>
 8010b22:	2200      	movs	r2, #0
 8010b24:	2300      	movs	r3, #0
 8010b26:	4620      	mov	r0, r4
 8010b28:	4629      	mov	r1, r5
 8010b2a:	f7ef ffd7 	bl	8000adc <__aeabi_dcmplt>
 8010b2e:	b300      	cbz	r0, 8010b72 <pow+0xa2>
 8010b30:	f7ff fa6c 	bl	801000c <__errno>
 8010b34:	2322      	movs	r3, #34	; 0x22
 8010b36:	e01b      	b.n	8010b70 <pow+0xa0>
 8010b38:	ec47 6b10 	vmov	d0, r6, r7
 8010b3c:	f001 fd37 	bl	80125ae <finite>
 8010b40:	b9e0      	cbnz	r0, 8010b7c <pow+0xac>
 8010b42:	eeb0 0a48 	vmov.f32	s0, s16
 8010b46:	eef0 0a68 	vmov.f32	s1, s17
 8010b4a:	f001 fd30 	bl	80125ae <finite>
 8010b4e:	b1a8      	cbz	r0, 8010b7c <pow+0xac>
 8010b50:	ec45 4b10 	vmov	d0, r4, r5
 8010b54:	f001 fd2b 	bl	80125ae <finite>
 8010b58:	b180      	cbz	r0, 8010b7c <pow+0xac>
 8010b5a:	4632      	mov	r2, r6
 8010b5c:	463b      	mov	r3, r7
 8010b5e:	4630      	mov	r0, r6
 8010b60:	4639      	mov	r1, r7
 8010b62:	f7ef ffe3 	bl	8000b2c <__aeabi_dcmpun>
 8010b66:	2800      	cmp	r0, #0
 8010b68:	d0e2      	beq.n	8010b30 <pow+0x60>
 8010b6a:	f7ff fa4f 	bl	801000c <__errno>
 8010b6e:	2321      	movs	r3, #33	; 0x21
 8010b70:	6003      	str	r3, [r0, #0]
 8010b72:	ecbd 8b02 	vpop	{d8}
 8010b76:	ec47 6b10 	vmov	d0, r6, r7
 8010b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8010b7c:	2200      	movs	r2, #0
 8010b7e:	2300      	movs	r3, #0
 8010b80:	4630      	mov	r0, r6
 8010b82:	4639      	mov	r1, r7
 8010b84:	f7ef ffa0 	bl	8000ac8 <__aeabi_dcmpeq>
 8010b88:	2800      	cmp	r0, #0
 8010b8a:	d0f2      	beq.n	8010b72 <pow+0xa2>
 8010b8c:	eeb0 0a48 	vmov.f32	s0, s16
 8010b90:	eef0 0a68 	vmov.f32	s1, s17
 8010b94:	f001 fd0b 	bl	80125ae <finite>
 8010b98:	2800      	cmp	r0, #0
 8010b9a:	d0ea      	beq.n	8010b72 <pow+0xa2>
 8010b9c:	ec45 4b10 	vmov	d0, r4, r5
 8010ba0:	f001 fd05 	bl	80125ae <finite>
 8010ba4:	e7c3      	b.n	8010b2e <pow+0x5e>
 8010ba6:	4f01      	ldr	r7, [pc, #4]	; (8010bac <pow+0xdc>)
 8010ba8:	2600      	movs	r6, #0
 8010baa:	e7e2      	b.n	8010b72 <pow+0xa2>
 8010bac:	3ff00000 	.word	0x3ff00000

08010bb0 <__ieee754_pow>:
 8010bb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010bb4:	ed2d 8b06 	vpush	{d8-d10}
 8010bb8:	b089      	sub	sp, #36	; 0x24
 8010bba:	ed8d 1b00 	vstr	d1, [sp]
 8010bbe:	e9dd 2900 	ldrd	r2, r9, [sp]
 8010bc2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8010bc6:	ea58 0102 	orrs.w	r1, r8, r2
 8010bca:	ec57 6b10 	vmov	r6, r7, d0
 8010bce:	d115      	bne.n	8010bfc <__ieee754_pow+0x4c>
 8010bd0:	19b3      	adds	r3, r6, r6
 8010bd2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 8010bd6:	4152      	adcs	r2, r2
 8010bd8:	4299      	cmp	r1, r3
 8010bda:	4b89      	ldr	r3, [pc, #548]	; (8010e00 <__ieee754_pow+0x250>)
 8010bdc:	4193      	sbcs	r3, r2
 8010bde:	f080 84d2 	bcs.w	8011586 <__ieee754_pow+0x9d6>
 8010be2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010be6:	4630      	mov	r0, r6
 8010be8:	4639      	mov	r1, r7
 8010bea:	f7ef fb4f 	bl	800028c <__adddf3>
 8010bee:	ec41 0b10 	vmov	d0, r0, r1
 8010bf2:	b009      	add	sp, #36	; 0x24
 8010bf4:	ecbd 8b06 	vpop	{d8-d10}
 8010bf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010bfc:	4b81      	ldr	r3, [pc, #516]	; (8010e04 <__ieee754_pow+0x254>)
 8010bfe:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8010c02:	429c      	cmp	r4, r3
 8010c04:	ee10 aa10 	vmov	sl, s0
 8010c08:	463d      	mov	r5, r7
 8010c0a:	dc06      	bgt.n	8010c1a <__ieee754_pow+0x6a>
 8010c0c:	d101      	bne.n	8010c12 <__ieee754_pow+0x62>
 8010c0e:	2e00      	cmp	r6, #0
 8010c10:	d1e7      	bne.n	8010be2 <__ieee754_pow+0x32>
 8010c12:	4598      	cmp	r8, r3
 8010c14:	dc01      	bgt.n	8010c1a <__ieee754_pow+0x6a>
 8010c16:	d10f      	bne.n	8010c38 <__ieee754_pow+0x88>
 8010c18:	b172      	cbz	r2, 8010c38 <__ieee754_pow+0x88>
 8010c1a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 8010c1e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 8010c22:	ea55 050a 	orrs.w	r5, r5, sl
 8010c26:	d1dc      	bne.n	8010be2 <__ieee754_pow+0x32>
 8010c28:	e9dd 3200 	ldrd	r3, r2, [sp]
 8010c2c:	18db      	adds	r3, r3, r3
 8010c2e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 8010c32:	4152      	adcs	r2, r2
 8010c34:	429d      	cmp	r5, r3
 8010c36:	e7d0      	b.n	8010bda <__ieee754_pow+0x2a>
 8010c38:	2d00      	cmp	r5, #0
 8010c3a:	da3b      	bge.n	8010cb4 <__ieee754_pow+0x104>
 8010c3c:	4b72      	ldr	r3, [pc, #456]	; (8010e08 <__ieee754_pow+0x258>)
 8010c3e:	4598      	cmp	r8, r3
 8010c40:	dc51      	bgt.n	8010ce6 <__ieee754_pow+0x136>
 8010c42:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8010c46:	4598      	cmp	r8, r3
 8010c48:	f340 84ac 	ble.w	80115a4 <__ieee754_pow+0x9f4>
 8010c4c:	ea4f 5328 	mov.w	r3, r8, asr #20
 8010c50:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010c54:	2b14      	cmp	r3, #20
 8010c56:	dd0f      	ble.n	8010c78 <__ieee754_pow+0xc8>
 8010c58:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8010c5c:	fa22 f103 	lsr.w	r1, r2, r3
 8010c60:	fa01 f303 	lsl.w	r3, r1, r3
 8010c64:	4293      	cmp	r3, r2
 8010c66:	f040 849d 	bne.w	80115a4 <__ieee754_pow+0x9f4>
 8010c6a:	f001 0101 	and.w	r1, r1, #1
 8010c6e:	f1c1 0302 	rsb	r3, r1, #2
 8010c72:	9304      	str	r3, [sp, #16]
 8010c74:	b182      	cbz	r2, 8010c98 <__ieee754_pow+0xe8>
 8010c76:	e05f      	b.n	8010d38 <__ieee754_pow+0x188>
 8010c78:	2a00      	cmp	r2, #0
 8010c7a:	d15b      	bne.n	8010d34 <__ieee754_pow+0x184>
 8010c7c:	f1c3 0314 	rsb	r3, r3, #20
 8010c80:	fa48 f103 	asr.w	r1, r8, r3
 8010c84:	fa01 f303 	lsl.w	r3, r1, r3
 8010c88:	4543      	cmp	r3, r8
 8010c8a:	f040 8488 	bne.w	801159e <__ieee754_pow+0x9ee>
 8010c8e:	f001 0101 	and.w	r1, r1, #1
 8010c92:	f1c1 0302 	rsb	r3, r1, #2
 8010c96:	9304      	str	r3, [sp, #16]
 8010c98:	4b5c      	ldr	r3, [pc, #368]	; (8010e0c <__ieee754_pow+0x25c>)
 8010c9a:	4598      	cmp	r8, r3
 8010c9c:	d132      	bne.n	8010d04 <__ieee754_pow+0x154>
 8010c9e:	f1b9 0f00 	cmp.w	r9, #0
 8010ca2:	f280 8478 	bge.w	8011596 <__ieee754_pow+0x9e6>
 8010ca6:	4959      	ldr	r1, [pc, #356]	; (8010e0c <__ieee754_pow+0x25c>)
 8010ca8:	4632      	mov	r2, r6
 8010caa:	463b      	mov	r3, r7
 8010cac:	2000      	movs	r0, #0
 8010cae:	f7ef fdcd 	bl	800084c <__aeabi_ddiv>
 8010cb2:	e79c      	b.n	8010bee <__ieee754_pow+0x3e>
 8010cb4:	2300      	movs	r3, #0
 8010cb6:	9304      	str	r3, [sp, #16]
 8010cb8:	2a00      	cmp	r2, #0
 8010cba:	d13d      	bne.n	8010d38 <__ieee754_pow+0x188>
 8010cbc:	4b51      	ldr	r3, [pc, #324]	; (8010e04 <__ieee754_pow+0x254>)
 8010cbe:	4598      	cmp	r8, r3
 8010cc0:	d1ea      	bne.n	8010c98 <__ieee754_pow+0xe8>
 8010cc2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8010cc6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8010cca:	ea53 030a 	orrs.w	r3, r3, sl
 8010cce:	f000 845a 	beq.w	8011586 <__ieee754_pow+0x9d6>
 8010cd2:	4b4f      	ldr	r3, [pc, #316]	; (8010e10 <__ieee754_pow+0x260>)
 8010cd4:	429c      	cmp	r4, r3
 8010cd6:	dd08      	ble.n	8010cea <__ieee754_pow+0x13a>
 8010cd8:	f1b9 0f00 	cmp.w	r9, #0
 8010cdc:	f2c0 8457 	blt.w	801158e <__ieee754_pow+0x9de>
 8010ce0:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010ce4:	e783      	b.n	8010bee <__ieee754_pow+0x3e>
 8010ce6:	2302      	movs	r3, #2
 8010ce8:	e7e5      	b.n	8010cb6 <__ieee754_pow+0x106>
 8010cea:	f1b9 0f00 	cmp.w	r9, #0
 8010cee:	f04f 0000 	mov.w	r0, #0
 8010cf2:	f04f 0100 	mov.w	r1, #0
 8010cf6:	f6bf af7a 	bge.w	8010bee <__ieee754_pow+0x3e>
 8010cfa:	e9dd 0300 	ldrd	r0, r3, [sp]
 8010cfe:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8010d02:	e774      	b.n	8010bee <__ieee754_pow+0x3e>
 8010d04:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8010d08:	d106      	bne.n	8010d18 <__ieee754_pow+0x168>
 8010d0a:	4632      	mov	r2, r6
 8010d0c:	463b      	mov	r3, r7
 8010d0e:	4630      	mov	r0, r6
 8010d10:	4639      	mov	r1, r7
 8010d12:	f7ef fc71 	bl	80005f8 <__aeabi_dmul>
 8010d16:	e76a      	b.n	8010bee <__ieee754_pow+0x3e>
 8010d18:	4b3e      	ldr	r3, [pc, #248]	; (8010e14 <__ieee754_pow+0x264>)
 8010d1a:	4599      	cmp	r9, r3
 8010d1c:	d10c      	bne.n	8010d38 <__ieee754_pow+0x188>
 8010d1e:	2d00      	cmp	r5, #0
 8010d20:	db0a      	blt.n	8010d38 <__ieee754_pow+0x188>
 8010d22:	ec47 6b10 	vmov	d0, r6, r7
 8010d26:	b009      	add	sp, #36	; 0x24
 8010d28:	ecbd 8b06 	vpop	{d8-d10}
 8010d2c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d30:	f000 be7a 	b.w	8011a28 <__ieee754_sqrt>
 8010d34:	2300      	movs	r3, #0
 8010d36:	9304      	str	r3, [sp, #16]
 8010d38:	ec47 6b10 	vmov	d0, r6, r7
 8010d3c:	f001 fc2e 	bl	801259c <fabs>
 8010d40:	ec51 0b10 	vmov	r0, r1, d0
 8010d44:	f1ba 0f00 	cmp.w	sl, #0
 8010d48:	d129      	bne.n	8010d9e <__ieee754_pow+0x1ee>
 8010d4a:	b124      	cbz	r4, 8010d56 <__ieee754_pow+0x1a6>
 8010d4c:	4b2f      	ldr	r3, [pc, #188]	; (8010e0c <__ieee754_pow+0x25c>)
 8010d4e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8010d52:	429a      	cmp	r2, r3
 8010d54:	d123      	bne.n	8010d9e <__ieee754_pow+0x1ee>
 8010d56:	f1b9 0f00 	cmp.w	r9, #0
 8010d5a:	da05      	bge.n	8010d68 <__ieee754_pow+0x1b8>
 8010d5c:	4602      	mov	r2, r0
 8010d5e:	460b      	mov	r3, r1
 8010d60:	2000      	movs	r0, #0
 8010d62:	492a      	ldr	r1, [pc, #168]	; (8010e0c <__ieee754_pow+0x25c>)
 8010d64:	f7ef fd72 	bl	800084c <__aeabi_ddiv>
 8010d68:	2d00      	cmp	r5, #0
 8010d6a:	f6bf af40 	bge.w	8010bee <__ieee754_pow+0x3e>
 8010d6e:	9b04      	ldr	r3, [sp, #16]
 8010d70:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8010d74:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8010d78:	4323      	orrs	r3, r4
 8010d7a:	d108      	bne.n	8010d8e <__ieee754_pow+0x1de>
 8010d7c:	4602      	mov	r2, r0
 8010d7e:	460b      	mov	r3, r1
 8010d80:	4610      	mov	r0, r2
 8010d82:	4619      	mov	r1, r3
 8010d84:	f7ef fa80 	bl	8000288 <__aeabi_dsub>
 8010d88:	4602      	mov	r2, r0
 8010d8a:	460b      	mov	r3, r1
 8010d8c:	e78f      	b.n	8010cae <__ieee754_pow+0xfe>
 8010d8e:	9b04      	ldr	r3, [sp, #16]
 8010d90:	2b01      	cmp	r3, #1
 8010d92:	f47f af2c 	bne.w	8010bee <__ieee754_pow+0x3e>
 8010d96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010d9a:	4619      	mov	r1, r3
 8010d9c:	e727      	b.n	8010bee <__ieee754_pow+0x3e>
 8010d9e:	0feb      	lsrs	r3, r5, #31
 8010da0:	3b01      	subs	r3, #1
 8010da2:	9306      	str	r3, [sp, #24]
 8010da4:	9a06      	ldr	r2, [sp, #24]
 8010da6:	9b04      	ldr	r3, [sp, #16]
 8010da8:	4313      	orrs	r3, r2
 8010daa:	d102      	bne.n	8010db2 <__ieee754_pow+0x202>
 8010dac:	4632      	mov	r2, r6
 8010dae:	463b      	mov	r3, r7
 8010db0:	e7e6      	b.n	8010d80 <__ieee754_pow+0x1d0>
 8010db2:	4b19      	ldr	r3, [pc, #100]	; (8010e18 <__ieee754_pow+0x268>)
 8010db4:	4598      	cmp	r8, r3
 8010db6:	f340 80fb 	ble.w	8010fb0 <__ieee754_pow+0x400>
 8010dba:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8010dbe:	4598      	cmp	r8, r3
 8010dc0:	4b13      	ldr	r3, [pc, #76]	; (8010e10 <__ieee754_pow+0x260>)
 8010dc2:	dd0c      	ble.n	8010dde <__ieee754_pow+0x22e>
 8010dc4:	429c      	cmp	r4, r3
 8010dc6:	dc0f      	bgt.n	8010de8 <__ieee754_pow+0x238>
 8010dc8:	f1b9 0f00 	cmp.w	r9, #0
 8010dcc:	da0f      	bge.n	8010dee <__ieee754_pow+0x23e>
 8010dce:	2000      	movs	r0, #0
 8010dd0:	b009      	add	sp, #36	; 0x24
 8010dd2:	ecbd 8b06 	vpop	{d8-d10}
 8010dd6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dda:	f001 bbd6 	b.w	801258a <__math_oflow>
 8010dde:	429c      	cmp	r4, r3
 8010de0:	dbf2      	blt.n	8010dc8 <__ieee754_pow+0x218>
 8010de2:	4b0a      	ldr	r3, [pc, #40]	; (8010e0c <__ieee754_pow+0x25c>)
 8010de4:	429c      	cmp	r4, r3
 8010de6:	dd19      	ble.n	8010e1c <__ieee754_pow+0x26c>
 8010de8:	f1b9 0f00 	cmp.w	r9, #0
 8010dec:	dcef      	bgt.n	8010dce <__ieee754_pow+0x21e>
 8010dee:	2000      	movs	r0, #0
 8010df0:	b009      	add	sp, #36	; 0x24
 8010df2:	ecbd 8b06 	vpop	{d8-d10}
 8010df6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010dfa:	f001 bbbd 	b.w	8012578 <__math_uflow>
 8010dfe:	bf00      	nop
 8010e00:	fff00000 	.word	0xfff00000
 8010e04:	7ff00000 	.word	0x7ff00000
 8010e08:	433fffff 	.word	0x433fffff
 8010e0c:	3ff00000 	.word	0x3ff00000
 8010e10:	3fefffff 	.word	0x3fefffff
 8010e14:	3fe00000 	.word	0x3fe00000
 8010e18:	41e00000 	.word	0x41e00000
 8010e1c:	4b60      	ldr	r3, [pc, #384]	; (8010fa0 <__ieee754_pow+0x3f0>)
 8010e1e:	2200      	movs	r2, #0
 8010e20:	f7ef fa32 	bl	8000288 <__aeabi_dsub>
 8010e24:	a354      	add	r3, pc, #336	; (adr r3, 8010f78 <__ieee754_pow+0x3c8>)
 8010e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e2a:	4604      	mov	r4, r0
 8010e2c:	460d      	mov	r5, r1
 8010e2e:	f7ef fbe3 	bl	80005f8 <__aeabi_dmul>
 8010e32:	a353      	add	r3, pc, #332	; (adr r3, 8010f80 <__ieee754_pow+0x3d0>)
 8010e34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e38:	4606      	mov	r6, r0
 8010e3a:	460f      	mov	r7, r1
 8010e3c:	4620      	mov	r0, r4
 8010e3e:	4629      	mov	r1, r5
 8010e40:	f7ef fbda 	bl	80005f8 <__aeabi_dmul>
 8010e44:	4b57      	ldr	r3, [pc, #348]	; (8010fa4 <__ieee754_pow+0x3f4>)
 8010e46:	4682      	mov	sl, r0
 8010e48:	468b      	mov	fp, r1
 8010e4a:	2200      	movs	r2, #0
 8010e4c:	4620      	mov	r0, r4
 8010e4e:	4629      	mov	r1, r5
 8010e50:	f7ef fbd2 	bl	80005f8 <__aeabi_dmul>
 8010e54:	4602      	mov	r2, r0
 8010e56:	460b      	mov	r3, r1
 8010e58:	a14b      	add	r1, pc, #300	; (adr r1, 8010f88 <__ieee754_pow+0x3d8>)
 8010e5a:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010e5e:	f7ef fa13 	bl	8000288 <__aeabi_dsub>
 8010e62:	4622      	mov	r2, r4
 8010e64:	462b      	mov	r3, r5
 8010e66:	f7ef fbc7 	bl	80005f8 <__aeabi_dmul>
 8010e6a:	4602      	mov	r2, r0
 8010e6c:	460b      	mov	r3, r1
 8010e6e:	2000      	movs	r0, #0
 8010e70:	494d      	ldr	r1, [pc, #308]	; (8010fa8 <__ieee754_pow+0x3f8>)
 8010e72:	f7ef fa09 	bl	8000288 <__aeabi_dsub>
 8010e76:	4622      	mov	r2, r4
 8010e78:	4680      	mov	r8, r0
 8010e7a:	4689      	mov	r9, r1
 8010e7c:	462b      	mov	r3, r5
 8010e7e:	4620      	mov	r0, r4
 8010e80:	4629      	mov	r1, r5
 8010e82:	f7ef fbb9 	bl	80005f8 <__aeabi_dmul>
 8010e86:	4602      	mov	r2, r0
 8010e88:	460b      	mov	r3, r1
 8010e8a:	4640      	mov	r0, r8
 8010e8c:	4649      	mov	r1, r9
 8010e8e:	f7ef fbb3 	bl	80005f8 <__aeabi_dmul>
 8010e92:	a33f      	add	r3, pc, #252	; (adr r3, 8010f90 <__ieee754_pow+0x3e0>)
 8010e94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e98:	f7ef fbae 	bl	80005f8 <__aeabi_dmul>
 8010e9c:	4602      	mov	r2, r0
 8010e9e:	460b      	mov	r3, r1
 8010ea0:	4650      	mov	r0, sl
 8010ea2:	4659      	mov	r1, fp
 8010ea4:	f7ef f9f0 	bl	8000288 <__aeabi_dsub>
 8010ea8:	4602      	mov	r2, r0
 8010eaa:	460b      	mov	r3, r1
 8010eac:	4680      	mov	r8, r0
 8010eae:	4689      	mov	r9, r1
 8010eb0:	4630      	mov	r0, r6
 8010eb2:	4639      	mov	r1, r7
 8010eb4:	f7ef f9ea 	bl	800028c <__adddf3>
 8010eb8:	2000      	movs	r0, #0
 8010eba:	4632      	mov	r2, r6
 8010ebc:	463b      	mov	r3, r7
 8010ebe:	4604      	mov	r4, r0
 8010ec0:	460d      	mov	r5, r1
 8010ec2:	f7ef f9e1 	bl	8000288 <__aeabi_dsub>
 8010ec6:	4602      	mov	r2, r0
 8010ec8:	460b      	mov	r3, r1
 8010eca:	4640      	mov	r0, r8
 8010ecc:	4649      	mov	r1, r9
 8010ece:	f7ef f9db 	bl	8000288 <__aeabi_dsub>
 8010ed2:	9b04      	ldr	r3, [sp, #16]
 8010ed4:	9a06      	ldr	r2, [sp, #24]
 8010ed6:	3b01      	subs	r3, #1
 8010ed8:	4313      	orrs	r3, r2
 8010eda:	4682      	mov	sl, r0
 8010edc:	468b      	mov	fp, r1
 8010ede:	f040 81e7 	bne.w	80112b0 <__ieee754_pow+0x700>
 8010ee2:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 8010f98 <__ieee754_pow+0x3e8>
 8010ee6:	eeb0 8a47 	vmov.f32	s16, s14
 8010eea:	eef0 8a67 	vmov.f32	s17, s15
 8010eee:	e9dd 6700 	ldrd	r6, r7, [sp]
 8010ef2:	2600      	movs	r6, #0
 8010ef4:	4632      	mov	r2, r6
 8010ef6:	463b      	mov	r3, r7
 8010ef8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8010efc:	f7ef f9c4 	bl	8000288 <__aeabi_dsub>
 8010f00:	4622      	mov	r2, r4
 8010f02:	462b      	mov	r3, r5
 8010f04:	f7ef fb78 	bl	80005f8 <__aeabi_dmul>
 8010f08:	e9dd 2300 	ldrd	r2, r3, [sp]
 8010f0c:	4680      	mov	r8, r0
 8010f0e:	4689      	mov	r9, r1
 8010f10:	4650      	mov	r0, sl
 8010f12:	4659      	mov	r1, fp
 8010f14:	f7ef fb70 	bl	80005f8 <__aeabi_dmul>
 8010f18:	4602      	mov	r2, r0
 8010f1a:	460b      	mov	r3, r1
 8010f1c:	4640      	mov	r0, r8
 8010f1e:	4649      	mov	r1, r9
 8010f20:	f7ef f9b4 	bl	800028c <__adddf3>
 8010f24:	4632      	mov	r2, r6
 8010f26:	463b      	mov	r3, r7
 8010f28:	4680      	mov	r8, r0
 8010f2a:	4689      	mov	r9, r1
 8010f2c:	4620      	mov	r0, r4
 8010f2e:	4629      	mov	r1, r5
 8010f30:	f7ef fb62 	bl	80005f8 <__aeabi_dmul>
 8010f34:	460b      	mov	r3, r1
 8010f36:	4604      	mov	r4, r0
 8010f38:	460d      	mov	r5, r1
 8010f3a:	4602      	mov	r2, r0
 8010f3c:	4649      	mov	r1, r9
 8010f3e:	4640      	mov	r0, r8
 8010f40:	f7ef f9a4 	bl	800028c <__adddf3>
 8010f44:	4b19      	ldr	r3, [pc, #100]	; (8010fac <__ieee754_pow+0x3fc>)
 8010f46:	4299      	cmp	r1, r3
 8010f48:	ec45 4b19 	vmov	d9, r4, r5
 8010f4c:	4606      	mov	r6, r0
 8010f4e:	460f      	mov	r7, r1
 8010f50:	468b      	mov	fp, r1
 8010f52:	f340 82f1 	ble.w	8011538 <__ieee754_pow+0x988>
 8010f56:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8010f5a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8010f5e:	4303      	orrs	r3, r0
 8010f60:	f000 81e4 	beq.w	801132c <__ieee754_pow+0x77c>
 8010f64:	ec51 0b18 	vmov	r0, r1, d8
 8010f68:	2200      	movs	r2, #0
 8010f6a:	2300      	movs	r3, #0
 8010f6c:	f7ef fdb6 	bl	8000adc <__aeabi_dcmplt>
 8010f70:	3800      	subs	r0, #0
 8010f72:	bf18      	it	ne
 8010f74:	2001      	movne	r0, #1
 8010f76:	e72b      	b.n	8010dd0 <__ieee754_pow+0x220>
 8010f78:	60000000 	.word	0x60000000
 8010f7c:	3ff71547 	.word	0x3ff71547
 8010f80:	f85ddf44 	.word	0xf85ddf44
 8010f84:	3e54ae0b 	.word	0x3e54ae0b
 8010f88:	55555555 	.word	0x55555555
 8010f8c:	3fd55555 	.word	0x3fd55555
 8010f90:	652b82fe 	.word	0x652b82fe
 8010f94:	3ff71547 	.word	0x3ff71547
 8010f98:	00000000 	.word	0x00000000
 8010f9c:	bff00000 	.word	0xbff00000
 8010fa0:	3ff00000 	.word	0x3ff00000
 8010fa4:	3fd00000 	.word	0x3fd00000
 8010fa8:	3fe00000 	.word	0x3fe00000
 8010fac:	408fffff 	.word	0x408fffff
 8010fb0:	4bd5      	ldr	r3, [pc, #852]	; (8011308 <__ieee754_pow+0x758>)
 8010fb2:	402b      	ands	r3, r5
 8010fb4:	2200      	movs	r2, #0
 8010fb6:	b92b      	cbnz	r3, 8010fc4 <__ieee754_pow+0x414>
 8010fb8:	4bd4      	ldr	r3, [pc, #848]	; (801130c <__ieee754_pow+0x75c>)
 8010fba:	f7ef fb1d 	bl	80005f8 <__aeabi_dmul>
 8010fbe:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8010fc2:	460c      	mov	r4, r1
 8010fc4:	1523      	asrs	r3, r4, #20
 8010fc6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8010fca:	4413      	add	r3, r2
 8010fcc:	9305      	str	r3, [sp, #20]
 8010fce:	4bd0      	ldr	r3, [pc, #832]	; (8011310 <__ieee754_pow+0x760>)
 8010fd0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8010fd4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8010fd8:	429c      	cmp	r4, r3
 8010fda:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8010fde:	dd08      	ble.n	8010ff2 <__ieee754_pow+0x442>
 8010fe0:	4bcc      	ldr	r3, [pc, #816]	; (8011314 <__ieee754_pow+0x764>)
 8010fe2:	429c      	cmp	r4, r3
 8010fe4:	f340 8162 	ble.w	80112ac <__ieee754_pow+0x6fc>
 8010fe8:	9b05      	ldr	r3, [sp, #20]
 8010fea:	3301      	adds	r3, #1
 8010fec:	9305      	str	r3, [sp, #20]
 8010fee:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8010ff2:	2400      	movs	r4, #0
 8010ff4:	00e3      	lsls	r3, r4, #3
 8010ff6:	9307      	str	r3, [sp, #28]
 8010ff8:	4bc7      	ldr	r3, [pc, #796]	; (8011318 <__ieee754_pow+0x768>)
 8010ffa:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8010ffe:	ed93 7b00 	vldr	d7, [r3]
 8011002:	4629      	mov	r1, r5
 8011004:	ec53 2b17 	vmov	r2, r3, d7
 8011008:	eeb0 9a47 	vmov.f32	s18, s14
 801100c:	eef0 9a67 	vmov.f32	s19, s15
 8011010:	4682      	mov	sl, r0
 8011012:	f7ef f939 	bl	8000288 <__aeabi_dsub>
 8011016:	4652      	mov	r2, sl
 8011018:	4606      	mov	r6, r0
 801101a:	460f      	mov	r7, r1
 801101c:	462b      	mov	r3, r5
 801101e:	ec51 0b19 	vmov	r0, r1, d9
 8011022:	f7ef f933 	bl	800028c <__adddf3>
 8011026:	4602      	mov	r2, r0
 8011028:	460b      	mov	r3, r1
 801102a:	2000      	movs	r0, #0
 801102c:	49bb      	ldr	r1, [pc, #748]	; (801131c <__ieee754_pow+0x76c>)
 801102e:	f7ef fc0d 	bl	800084c <__aeabi_ddiv>
 8011032:	ec41 0b1a 	vmov	d10, r0, r1
 8011036:	4602      	mov	r2, r0
 8011038:	460b      	mov	r3, r1
 801103a:	4630      	mov	r0, r6
 801103c:	4639      	mov	r1, r7
 801103e:	f7ef fadb 	bl	80005f8 <__aeabi_dmul>
 8011042:	2300      	movs	r3, #0
 8011044:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8011048:	9302      	str	r3, [sp, #8]
 801104a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 801104e:	46ab      	mov	fp, r5
 8011050:	106d      	asrs	r5, r5, #1
 8011052:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8011056:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 801105a:	ec41 0b18 	vmov	d8, r0, r1
 801105e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8011062:	2200      	movs	r2, #0
 8011064:	4640      	mov	r0, r8
 8011066:	4649      	mov	r1, r9
 8011068:	4614      	mov	r4, r2
 801106a:	461d      	mov	r5, r3
 801106c:	f7ef fac4 	bl	80005f8 <__aeabi_dmul>
 8011070:	4602      	mov	r2, r0
 8011072:	460b      	mov	r3, r1
 8011074:	4630      	mov	r0, r6
 8011076:	4639      	mov	r1, r7
 8011078:	f7ef f906 	bl	8000288 <__aeabi_dsub>
 801107c:	ec53 2b19 	vmov	r2, r3, d9
 8011080:	4606      	mov	r6, r0
 8011082:	460f      	mov	r7, r1
 8011084:	4620      	mov	r0, r4
 8011086:	4629      	mov	r1, r5
 8011088:	f7ef f8fe 	bl	8000288 <__aeabi_dsub>
 801108c:	4602      	mov	r2, r0
 801108e:	460b      	mov	r3, r1
 8011090:	4650      	mov	r0, sl
 8011092:	4659      	mov	r1, fp
 8011094:	f7ef f8f8 	bl	8000288 <__aeabi_dsub>
 8011098:	4642      	mov	r2, r8
 801109a:	464b      	mov	r3, r9
 801109c:	f7ef faac 	bl	80005f8 <__aeabi_dmul>
 80110a0:	4602      	mov	r2, r0
 80110a2:	460b      	mov	r3, r1
 80110a4:	4630      	mov	r0, r6
 80110a6:	4639      	mov	r1, r7
 80110a8:	f7ef f8ee 	bl	8000288 <__aeabi_dsub>
 80110ac:	ec53 2b1a 	vmov	r2, r3, d10
 80110b0:	f7ef faa2 	bl	80005f8 <__aeabi_dmul>
 80110b4:	ec53 2b18 	vmov	r2, r3, d8
 80110b8:	ec41 0b19 	vmov	d9, r0, r1
 80110bc:	ec51 0b18 	vmov	r0, r1, d8
 80110c0:	f7ef fa9a 	bl	80005f8 <__aeabi_dmul>
 80110c4:	a37c      	add	r3, pc, #496	; (adr r3, 80112b8 <__ieee754_pow+0x708>)
 80110c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ca:	4604      	mov	r4, r0
 80110cc:	460d      	mov	r5, r1
 80110ce:	f7ef fa93 	bl	80005f8 <__aeabi_dmul>
 80110d2:	a37b      	add	r3, pc, #492	; (adr r3, 80112c0 <__ieee754_pow+0x710>)
 80110d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110d8:	f7ef f8d8 	bl	800028c <__adddf3>
 80110dc:	4622      	mov	r2, r4
 80110de:	462b      	mov	r3, r5
 80110e0:	f7ef fa8a 	bl	80005f8 <__aeabi_dmul>
 80110e4:	a378      	add	r3, pc, #480	; (adr r3, 80112c8 <__ieee754_pow+0x718>)
 80110e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ea:	f7ef f8cf 	bl	800028c <__adddf3>
 80110ee:	4622      	mov	r2, r4
 80110f0:	462b      	mov	r3, r5
 80110f2:	f7ef fa81 	bl	80005f8 <__aeabi_dmul>
 80110f6:	a376      	add	r3, pc, #472	; (adr r3, 80112d0 <__ieee754_pow+0x720>)
 80110f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110fc:	f7ef f8c6 	bl	800028c <__adddf3>
 8011100:	4622      	mov	r2, r4
 8011102:	462b      	mov	r3, r5
 8011104:	f7ef fa78 	bl	80005f8 <__aeabi_dmul>
 8011108:	a373      	add	r3, pc, #460	; (adr r3, 80112d8 <__ieee754_pow+0x728>)
 801110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801110e:	f7ef f8bd 	bl	800028c <__adddf3>
 8011112:	4622      	mov	r2, r4
 8011114:	462b      	mov	r3, r5
 8011116:	f7ef fa6f 	bl	80005f8 <__aeabi_dmul>
 801111a:	a371      	add	r3, pc, #452	; (adr r3, 80112e0 <__ieee754_pow+0x730>)
 801111c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011120:	f7ef f8b4 	bl	800028c <__adddf3>
 8011124:	4622      	mov	r2, r4
 8011126:	4606      	mov	r6, r0
 8011128:	460f      	mov	r7, r1
 801112a:	462b      	mov	r3, r5
 801112c:	4620      	mov	r0, r4
 801112e:	4629      	mov	r1, r5
 8011130:	f7ef fa62 	bl	80005f8 <__aeabi_dmul>
 8011134:	4602      	mov	r2, r0
 8011136:	460b      	mov	r3, r1
 8011138:	4630      	mov	r0, r6
 801113a:	4639      	mov	r1, r7
 801113c:	f7ef fa5c 	bl	80005f8 <__aeabi_dmul>
 8011140:	4642      	mov	r2, r8
 8011142:	4604      	mov	r4, r0
 8011144:	460d      	mov	r5, r1
 8011146:	464b      	mov	r3, r9
 8011148:	ec51 0b18 	vmov	r0, r1, d8
 801114c:	f7ef f89e 	bl	800028c <__adddf3>
 8011150:	ec53 2b19 	vmov	r2, r3, d9
 8011154:	f7ef fa50 	bl	80005f8 <__aeabi_dmul>
 8011158:	4622      	mov	r2, r4
 801115a:	462b      	mov	r3, r5
 801115c:	f7ef f896 	bl	800028c <__adddf3>
 8011160:	4642      	mov	r2, r8
 8011162:	4682      	mov	sl, r0
 8011164:	468b      	mov	fp, r1
 8011166:	464b      	mov	r3, r9
 8011168:	4640      	mov	r0, r8
 801116a:	4649      	mov	r1, r9
 801116c:	f7ef fa44 	bl	80005f8 <__aeabi_dmul>
 8011170:	4b6b      	ldr	r3, [pc, #428]	; (8011320 <__ieee754_pow+0x770>)
 8011172:	2200      	movs	r2, #0
 8011174:	4606      	mov	r6, r0
 8011176:	460f      	mov	r7, r1
 8011178:	f7ef f888 	bl	800028c <__adddf3>
 801117c:	4652      	mov	r2, sl
 801117e:	465b      	mov	r3, fp
 8011180:	f7ef f884 	bl	800028c <__adddf3>
 8011184:	2000      	movs	r0, #0
 8011186:	4604      	mov	r4, r0
 8011188:	460d      	mov	r5, r1
 801118a:	4602      	mov	r2, r0
 801118c:	460b      	mov	r3, r1
 801118e:	4640      	mov	r0, r8
 8011190:	4649      	mov	r1, r9
 8011192:	f7ef fa31 	bl	80005f8 <__aeabi_dmul>
 8011196:	4b62      	ldr	r3, [pc, #392]	; (8011320 <__ieee754_pow+0x770>)
 8011198:	4680      	mov	r8, r0
 801119a:	4689      	mov	r9, r1
 801119c:	2200      	movs	r2, #0
 801119e:	4620      	mov	r0, r4
 80111a0:	4629      	mov	r1, r5
 80111a2:	f7ef f871 	bl	8000288 <__aeabi_dsub>
 80111a6:	4632      	mov	r2, r6
 80111a8:	463b      	mov	r3, r7
 80111aa:	f7ef f86d 	bl	8000288 <__aeabi_dsub>
 80111ae:	4602      	mov	r2, r0
 80111b0:	460b      	mov	r3, r1
 80111b2:	4650      	mov	r0, sl
 80111b4:	4659      	mov	r1, fp
 80111b6:	f7ef f867 	bl	8000288 <__aeabi_dsub>
 80111ba:	ec53 2b18 	vmov	r2, r3, d8
 80111be:	f7ef fa1b 	bl	80005f8 <__aeabi_dmul>
 80111c2:	4622      	mov	r2, r4
 80111c4:	4606      	mov	r6, r0
 80111c6:	460f      	mov	r7, r1
 80111c8:	462b      	mov	r3, r5
 80111ca:	ec51 0b19 	vmov	r0, r1, d9
 80111ce:	f7ef fa13 	bl	80005f8 <__aeabi_dmul>
 80111d2:	4602      	mov	r2, r0
 80111d4:	460b      	mov	r3, r1
 80111d6:	4630      	mov	r0, r6
 80111d8:	4639      	mov	r1, r7
 80111da:	f7ef f857 	bl	800028c <__adddf3>
 80111de:	4606      	mov	r6, r0
 80111e0:	460f      	mov	r7, r1
 80111e2:	4602      	mov	r2, r0
 80111e4:	460b      	mov	r3, r1
 80111e6:	4640      	mov	r0, r8
 80111e8:	4649      	mov	r1, r9
 80111ea:	f7ef f84f 	bl	800028c <__adddf3>
 80111ee:	a33e      	add	r3, pc, #248	; (adr r3, 80112e8 <__ieee754_pow+0x738>)
 80111f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80111f4:	2000      	movs	r0, #0
 80111f6:	4604      	mov	r4, r0
 80111f8:	460d      	mov	r5, r1
 80111fa:	f7ef f9fd 	bl	80005f8 <__aeabi_dmul>
 80111fe:	4642      	mov	r2, r8
 8011200:	ec41 0b18 	vmov	d8, r0, r1
 8011204:	464b      	mov	r3, r9
 8011206:	4620      	mov	r0, r4
 8011208:	4629      	mov	r1, r5
 801120a:	f7ef f83d 	bl	8000288 <__aeabi_dsub>
 801120e:	4602      	mov	r2, r0
 8011210:	460b      	mov	r3, r1
 8011212:	4630      	mov	r0, r6
 8011214:	4639      	mov	r1, r7
 8011216:	f7ef f837 	bl	8000288 <__aeabi_dsub>
 801121a:	a335      	add	r3, pc, #212	; (adr r3, 80112f0 <__ieee754_pow+0x740>)
 801121c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011220:	f7ef f9ea 	bl	80005f8 <__aeabi_dmul>
 8011224:	a334      	add	r3, pc, #208	; (adr r3, 80112f8 <__ieee754_pow+0x748>)
 8011226:	e9d3 2300 	ldrd	r2, r3, [r3]
 801122a:	4606      	mov	r6, r0
 801122c:	460f      	mov	r7, r1
 801122e:	4620      	mov	r0, r4
 8011230:	4629      	mov	r1, r5
 8011232:	f7ef f9e1 	bl	80005f8 <__aeabi_dmul>
 8011236:	4602      	mov	r2, r0
 8011238:	460b      	mov	r3, r1
 801123a:	4630      	mov	r0, r6
 801123c:	4639      	mov	r1, r7
 801123e:	f7ef f825 	bl	800028c <__adddf3>
 8011242:	9a07      	ldr	r2, [sp, #28]
 8011244:	4b37      	ldr	r3, [pc, #220]	; (8011324 <__ieee754_pow+0x774>)
 8011246:	4413      	add	r3, r2
 8011248:	e9d3 2300 	ldrd	r2, r3, [r3]
 801124c:	f7ef f81e 	bl	800028c <__adddf3>
 8011250:	4682      	mov	sl, r0
 8011252:	9805      	ldr	r0, [sp, #20]
 8011254:	468b      	mov	fp, r1
 8011256:	f7ef f965 	bl	8000524 <__aeabi_i2d>
 801125a:	9a07      	ldr	r2, [sp, #28]
 801125c:	4b32      	ldr	r3, [pc, #200]	; (8011328 <__ieee754_pow+0x778>)
 801125e:	4413      	add	r3, r2
 8011260:	e9d3 8900 	ldrd	r8, r9, [r3]
 8011264:	4606      	mov	r6, r0
 8011266:	460f      	mov	r7, r1
 8011268:	4652      	mov	r2, sl
 801126a:	465b      	mov	r3, fp
 801126c:	ec51 0b18 	vmov	r0, r1, d8
 8011270:	f7ef f80c 	bl	800028c <__adddf3>
 8011274:	4642      	mov	r2, r8
 8011276:	464b      	mov	r3, r9
 8011278:	f7ef f808 	bl	800028c <__adddf3>
 801127c:	4632      	mov	r2, r6
 801127e:	463b      	mov	r3, r7
 8011280:	f7ef f804 	bl	800028c <__adddf3>
 8011284:	2000      	movs	r0, #0
 8011286:	4632      	mov	r2, r6
 8011288:	463b      	mov	r3, r7
 801128a:	4604      	mov	r4, r0
 801128c:	460d      	mov	r5, r1
 801128e:	f7ee fffb 	bl	8000288 <__aeabi_dsub>
 8011292:	4642      	mov	r2, r8
 8011294:	464b      	mov	r3, r9
 8011296:	f7ee fff7 	bl	8000288 <__aeabi_dsub>
 801129a:	ec53 2b18 	vmov	r2, r3, d8
 801129e:	f7ee fff3 	bl	8000288 <__aeabi_dsub>
 80112a2:	4602      	mov	r2, r0
 80112a4:	460b      	mov	r3, r1
 80112a6:	4650      	mov	r0, sl
 80112a8:	4659      	mov	r1, fp
 80112aa:	e610      	b.n	8010ece <__ieee754_pow+0x31e>
 80112ac:	2401      	movs	r4, #1
 80112ae:	e6a1      	b.n	8010ff4 <__ieee754_pow+0x444>
 80112b0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 8011300 <__ieee754_pow+0x750>
 80112b4:	e617      	b.n	8010ee6 <__ieee754_pow+0x336>
 80112b6:	bf00      	nop
 80112b8:	4a454eef 	.word	0x4a454eef
 80112bc:	3fca7e28 	.word	0x3fca7e28
 80112c0:	93c9db65 	.word	0x93c9db65
 80112c4:	3fcd864a 	.word	0x3fcd864a
 80112c8:	a91d4101 	.word	0xa91d4101
 80112cc:	3fd17460 	.word	0x3fd17460
 80112d0:	518f264d 	.word	0x518f264d
 80112d4:	3fd55555 	.word	0x3fd55555
 80112d8:	db6fabff 	.word	0xdb6fabff
 80112dc:	3fdb6db6 	.word	0x3fdb6db6
 80112e0:	33333303 	.word	0x33333303
 80112e4:	3fe33333 	.word	0x3fe33333
 80112e8:	e0000000 	.word	0xe0000000
 80112ec:	3feec709 	.word	0x3feec709
 80112f0:	dc3a03fd 	.word	0xdc3a03fd
 80112f4:	3feec709 	.word	0x3feec709
 80112f8:	145b01f5 	.word	0x145b01f5
 80112fc:	be3e2fe0 	.word	0xbe3e2fe0
 8011300:	00000000 	.word	0x00000000
 8011304:	3ff00000 	.word	0x3ff00000
 8011308:	7ff00000 	.word	0x7ff00000
 801130c:	43400000 	.word	0x43400000
 8011310:	0003988e 	.word	0x0003988e
 8011314:	000bb679 	.word	0x000bb679
 8011318:	0801f950 	.word	0x0801f950
 801131c:	3ff00000 	.word	0x3ff00000
 8011320:	40080000 	.word	0x40080000
 8011324:	0801f970 	.word	0x0801f970
 8011328:	0801f960 	.word	0x0801f960
 801132c:	a3b5      	add	r3, pc, #724	; (adr r3, 8011604 <__ieee754_pow+0xa54>)
 801132e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011332:	4640      	mov	r0, r8
 8011334:	4649      	mov	r1, r9
 8011336:	f7ee ffa9 	bl	800028c <__adddf3>
 801133a:	4622      	mov	r2, r4
 801133c:	ec41 0b1a 	vmov	d10, r0, r1
 8011340:	462b      	mov	r3, r5
 8011342:	4630      	mov	r0, r6
 8011344:	4639      	mov	r1, r7
 8011346:	f7ee ff9f 	bl	8000288 <__aeabi_dsub>
 801134a:	4602      	mov	r2, r0
 801134c:	460b      	mov	r3, r1
 801134e:	ec51 0b1a 	vmov	r0, r1, d10
 8011352:	f7ef fbe1 	bl	8000b18 <__aeabi_dcmpgt>
 8011356:	2800      	cmp	r0, #0
 8011358:	f47f ae04 	bne.w	8010f64 <__ieee754_pow+0x3b4>
 801135c:	4aa4      	ldr	r2, [pc, #656]	; (80115f0 <__ieee754_pow+0xa40>)
 801135e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8011362:	4293      	cmp	r3, r2
 8011364:	f340 8108 	ble.w	8011578 <__ieee754_pow+0x9c8>
 8011368:	151b      	asrs	r3, r3, #20
 801136a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 801136e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8011372:	fa4a f303 	asr.w	r3, sl, r3
 8011376:	445b      	add	r3, fp
 8011378:	f3c3 520a 	ubfx	r2, r3, #20, #11
 801137c:	4e9d      	ldr	r6, [pc, #628]	; (80115f4 <__ieee754_pow+0xa44>)
 801137e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8011382:	4116      	asrs	r6, r2
 8011384:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8011388:	2000      	movs	r0, #0
 801138a:	ea23 0106 	bic.w	r1, r3, r6
 801138e:	f1c2 0214 	rsb	r2, r2, #20
 8011392:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8011396:	fa4a fa02 	asr.w	sl, sl, r2
 801139a:	f1bb 0f00 	cmp.w	fp, #0
 801139e:	4602      	mov	r2, r0
 80113a0:	460b      	mov	r3, r1
 80113a2:	4620      	mov	r0, r4
 80113a4:	4629      	mov	r1, r5
 80113a6:	bfb8      	it	lt
 80113a8:	f1ca 0a00 	rsblt	sl, sl, #0
 80113ac:	f7ee ff6c 	bl	8000288 <__aeabi_dsub>
 80113b0:	ec41 0b19 	vmov	d9, r0, r1
 80113b4:	4642      	mov	r2, r8
 80113b6:	464b      	mov	r3, r9
 80113b8:	ec51 0b19 	vmov	r0, r1, d9
 80113bc:	f7ee ff66 	bl	800028c <__adddf3>
 80113c0:	a37b      	add	r3, pc, #492	; (adr r3, 80115b0 <__ieee754_pow+0xa00>)
 80113c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113c6:	2000      	movs	r0, #0
 80113c8:	4604      	mov	r4, r0
 80113ca:	460d      	mov	r5, r1
 80113cc:	f7ef f914 	bl	80005f8 <__aeabi_dmul>
 80113d0:	ec53 2b19 	vmov	r2, r3, d9
 80113d4:	4606      	mov	r6, r0
 80113d6:	460f      	mov	r7, r1
 80113d8:	4620      	mov	r0, r4
 80113da:	4629      	mov	r1, r5
 80113dc:	f7ee ff54 	bl	8000288 <__aeabi_dsub>
 80113e0:	4602      	mov	r2, r0
 80113e2:	460b      	mov	r3, r1
 80113e4:	4640      	mov	r0, r8
 80113e6:	4649      	mov	r1, r9
 80113e8:	f7ee ff4e 	bl	8000288 <__aeabi_dsub>
 80113ec:	a372      	add	r3, pc, #456	; (adr r3, 80115b8 <__ieee754_pow+0xa08>)
 80113ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113f2:	f7ef f901 	bl	80005f8 <__aeabi_dmul>
 80113f6:	a372      	add	r3, pc, #456	; (adr r3, 80115c0 <__ieee754_pow+0xa10>)
 80113f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113fc:	4680      	mov	r8, r0
 80113fe:	4689      	mov	r9, r1
 8011400:	4620      	mov	r0, r4
 8011402:	4629      	mov	r1, r5
 8011404:	f7ef f8f8 	bl	80005f8 <__aeabi_dmul>
 8011408:	4602      	mov	r2, r0
 801140a:	460b      	mov	r3, r1
 801140c:	4640      	mov	r0, r8
 801140e:	4649      	mov	r1, r9
 8011410:	f7ee ff3c 	bl	800028c <__adddf3>
 8011414:	4604      	mov	r4, r0
 8011416:	460d      	mov	r5, r1
 8011418:	4602      	mov	r2, r0
 801141a:	460b      	mov	r3, r1
 801141c:	4630      	mov	r0, r6
 801141e:	4639      	mov	r1, r7
 8011420:	f7ee ff34 	bl	800028c <__adddf3>
 8011424:	4632      	mov	r2, r6
 8011426:	463b      	mov	r3, r7
 8011428:	4680      	mov	r8, r0
 801142a:	4689      	mov	r9, r1
 801142c:	f7ee ff2c 	bl	8000288 <__aeabi_dsub>
 8011430:	4602      	mov	r2, r0
 8011432:	460b      	mov	r3, r1
 8011434:	4620      	mov	r0, r4
 8011436:	4629      	mov	r1, r5
 8011438:	f7ee ff26 	bl	8000288 <__aeabi_dsub>
 801143c:	4642      	mov	r2, r8
 801143e:	4606      	mov	r6, r0
 8011440:	460f      	mov	r7, r1
 8011442:	464b      	mov	r3, r9
 8011444:	4640      	mov	r0, r8
 8011446:	4649      	mov	r1, r9
 8011448:	f7ef f8d6 	bl	80005f8 <__aeabi_dmul>
 801144c:	a35e      	add	r3, pc, #376	; (adr r3, 80115c8 <__ieee754_pow+0xa18>)
 801144e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011452:	4604      	mov	r4, r0
 8011454:	460d      	mov	r5, r1
 8011456:	f7ef f8cf 	bl	80005f8 <__aeabi_dmul>
 801145a:	a35d      	add	r3, pc, #372	; (adr r3, 80115d0 <__ieee754_pow+0xa20>)
 801145c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011460:	f7ee ff12 	bl	8000288 <__aeabi_dsub>
 8011464:	4622      	mov	r2, r4
 8011466:	462b      	mov	r3, r5
 8011468:	f7ef f8c6 	bl	80005f8 <__aeabi_dmul>
 801146c:	a35a      	add	r3, pc, #360	; (adr r3, 80115d8 <__ieee754_pow+0xa28>)
 801146e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011472:	f7ee ff0b 	bl	800028c <__adddf3>
 8011476:	4622      	mov	r2, r4
 8011478:	462b      	mov	r3, r5
 801147a:	f7ef f8bd 	bl	80005f8 <__aeabi_dmul>
 801147e:	a358      	add	r3, pc, #352	; (adr r3, 80115e0 <__ieee754_pow+0xa30>)
 8011480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011484:	f7ee ff00 	bl	8000288 <__aeabi_dsub>
 8011488:	4622      	mov	r2, r4
 801148a:	462b      	mov	r3, r5
 801148c:	f7ef f8b4 	bl	80005f8 <__aeabi_dmul>
 8011490:	a355      	add	r3, pc, #340	; (adr r3, 80115e8 <__ieee754_pow+0xa38>)
 8011492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011496:	f7ee fef9 	bl	800028c <__adddf3>
 801149a:	4622      	mov	r2, r4
 801149c:	462b      	mov	r3, r5
 801149e:	f7ef f8ab 	bl	80005f8 <__aeabi_dmul>
 80114a2:	4602      	mov	r2, r0
 80114a4:	460b      	mov	r3, r1
 80114a6:	4640      	mov	r0, r8
 80114a8:	4649      	mov	r1, r9
 80114aa:	f7ee feed 	bl	8000288 <__aeabi_dsub>
 80114ae:	4604      	mov	r4, r0
 80114b0:	460d      	mov	r5, r1
 80114b2:	4602      	mov	r2, r0
 80114b4:	460b      	mov	r3, r1
 80114b6:	4640      	mov	r0, r8
 80114b8:	4649      	mov	r1, r9
 80114ba:	f7ef f89d 	bl	80005f8 <__aeabi_dmul>
 80114be:	2200      	movs	r2, #0
 80114c0:	ec41 0b19 	vmov	d9, r0, r1
 80114c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80114c8:	4620      	mov	r0, r4
 80114ca:	4629      	mov	r1, r5
 80114cc:	f7ee fedc 	bl	8000288 <__aeabi_dsub>
 80114d0:	4602      	mov	r2, r0
 80114d2:	460b      	mov	r3, r1
 80114d4:	ec51 0b19 	vmov	r0, r1, d9
 80114d8:	f7ef f9b8 	bl	800084c <__aeabi_ddiv>
 80114dc:	4632      	mov	r2, r6
 80114de:	4604      	mov	r4, r0
 80114e0:	460d      	mov	r5, r1
 80114e2:	463b      	mov	r3, r7
 80114e4:	4640      	mov	r0, r8
 80114e6:	4649      	mov	r1, r9
 80114e8:	f7ef f886 	bl	80005f8 <__aeabi_dmul>
 80114ec:	4632      	mov	r2, r6
 80114ee:	463b      	mov	r3, r7
 80114f0:	f7ee fecc 	bl	800028c <__adddf3>
 80114f4:	4602      	mov	r2, r0
 80114f6:	460b      	mov	r3, r1
 80114f8:	4620      	mov	r0, r4
 80114fa:	4629      	mov	r1, r5
 80114fc:	f7ee fec4 	bl	8000288 <__aeabi_dsub>
 8011500:	4642      	mov	r2, r8
 8011502:	464b      	mov	r3, r9
 8011504:	f7ee fec0 	bl	8000288 <__aeabi_dsub>
 8011508:	460b      	mov	r3, r1
 801150a:	4602      	mov	r2, r0
 801150c:	493a      	ldr	r1, [pc, #232]	; (80115f8 <__ieee754_pow+0xa48>)
 801150e:	2000      	movs	r0, #0
 8011510:	f7ee feba 	bl	8000288 <__aeabi_dsub>
 8011514:	ec41 0b10 	vmov	d0, r0, r1
 8011518:	ee10 3a90 	vmov	r3, s1
 801151c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8011520:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8011524:	da2b      	bge.n	801157e <__ieee754_pow+0x9ce>
 8011526:	4650      	mov	r0, sl
 8011528:	f001 f8ce 	bl	80126c8 <scalbn>
 801152c:	ec51 0b10 	vmov	r0, r1, d0
 8011530:	ec53 2b18 	vmov	r2, r3, d8
 8011534:	f7ff bbed 	b.w	8010d12 <__ieee754_pow+0x162>
 8011538:	4b30      	ldr	r3, [pc, #192]	; (80115fc <__ieee754_pow+0xa4c>)
 801153a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 801153e:	429e      	cmp	r6, r3
 8011540:	f77f af0c 	ble.w	801135c <__ieee754_pow+0x7ac>
 8011544:	4b2e      	ldr	r3, [pc, #184]	; (8011600 <__ieee754_pow+0xa50>)
 8011546:	440b      	add	r3, r1
 8011548:	4303      	orrs	r3, r0
 801154a:	d009      	beq.n	8011560 <__ieee754_pow+0x9b0>
 801154c:	ec51 0b18 	vmov	r0, r1, d8
 8011550:	2200      	movs	r2, #0
 8011552:	2300      	movs	r3, #0
 8011554:	f7ef fac2 	bl	8000adc <__aeabi_dcmplt>
 8011558:	3800      	subs	r0, #0
 801155a:	bf18      	it	ne
 801155c:	2001      	movne	r0, #1
 801155e:	e447      	b.n	8010df0 <__ieee754_pow+0x240>
 8011560:	4622      	mov	r2, r4
 8011562:	462b      	mov	r3, r5
 8011564:	f7ee fe90 	bl	8000288 <__aeabi_dsub>
 8011568:	4642      	mov	r2, r8
 801156a:	464b      	mov	r3, r9
 801156c:	f7ef faca 	bl	8000b04 <__aeabi_dcmpge>
 8011570:	2800      	cmp	r0, #0
 8011572:	f43f aef3 	beq.w	801135c <__ieee754_pow+0x7ac>
 8011576:	e7e9      	b.n	801154c <__ieee754_pow+0x99c>
 8011578:	f04f 0a00 	mov.w	sl, #0
 801157c:	e71a      	b.n	80113b4 <__ieee754_pow+0x804>
 801157e:	ec51 0b10 	vmov	r0, r1, d0
 8011582:	4619      	mov	r1, r3
 8011584:	e7d4      	b.n	8011530 <__ieee754_pow+0x980>
 8011586:	491c      	ldr	r1, [pc, #112]	; (80115f8 <__ieee754_pow+0xa48>)
 8011588:	2000      	movs	r0, #0
 801158a:	f7ff bb30 	b.w	8010bee <__ieee754_pow+0x3e>
 801158e:	2000      	movs	r0, #0
 8011590:	2100      	movs	r1, #0
 8011592:	f7ff bb2c 	b.w	8010bee <__ieee754_pow+0x3e>
 8011596:	4630      	mov	r0, r6
 8011598:	4639      	mov	r1, r7
 801159a:	f7ff bb28 	b.w	8010bee <__ieee754_pow+0x3e>
 801159e:	9204      	str	r2, [sp, #16]
 80115a0:	f7ff bb7a 	b.w	8010c98 <__ieee754_pow+0xe8>
 80115a4:	2300      	movs	r3, #0
 80115a6:	f7ff bb64 	b.w	8010c72 <__ieee754_pow+0xc2>
 80115aa:	bf00      	nop
 80115ac:	f3af 8000 	nop.w
 80115b0:	00000000 	.word	0x00000000
 80115b4:	3fe62e43 	.word	0x3fe62e43
 80115b8:	fefa39ef 	.word	0xfefa39ef
 80115bc:	3fe62e42 	.word	0x3fe62e42
 80115c0:	0ca86c39 	.word	0x0ca86c39
 80115c4:	be205c61 	.word	0xbe205c61
 80115c8:	72bea4d0 	.word	0x72bea4d0
 80115cc:	3e663769 	.word	0x3e663769
 80115d0:	c5d26bf1 	.word	0xc5d26bf1
 80115d4:	3ebbbd41 	.word	0x3ebbbd41
 80115d8:	af25de2c 	.word	0xaf25de2c
 80115dc:	3f11566a 	.word	0x3f11566a
 80115e0:	16bebd93 	.word	0x16bebd93
 80115e4:	3f66c16c 	.word	0x3f66c16c
 80115e8:	5555553e 	.word	0x5555553e
 80115ec:	3fc55555 	.word	0x3fc55555
 80115f0:	3fe00000 	.word	0x3fe00000
 80115f4:	000fffff 	.word	0x000fffff
 80115f8:	3ff00000 	.word	0x3ff00000
 80115fc:	4090cbff 	.word	0x4090cbff
 8011600:	3f6f3400 	.word	0x3f6f3400
 8011604:	652b82fe 	.word	0x652b82fe
 8011608:	3c971547 	.word	0x3c971547
 801160c:	00000000 	.word	0x00000000

08011610 <__ieee754_rem_pio2>:
 8011610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011614:	ed2d 8b02 	vpush	{d8}
 8011618:	ec55 4b10 	vmov	r4, r5, d0
 801161c:	4bca      	ldr	r3, [pc, #808]	; (8011948 <__ieee754_rem_pio2+0x338>)
 801161e:	b08b      	sub	sp, #44	; 0x2c
 8011620:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8011624:	4598      	cmp	r8, r3
 8011626:	4682      	mov	sl, r0
 8011628:	9502      	str	r5, [sp, #8]
 801162a:	dc08      	bgt.n	801163e <__ieee754_rem_pio2+0x2e>
 801162c:	2200      	movs	r2, #0
 801162e:	2300      	movs	r3, #0
 8011630:	ed80 0b00 	vstr	d0, [r0]
 8011634:	e9c0 2302 	strd	r2, r3, [r0, #8]
 8011638:	f04f 0b00 	mov.w	fp, #0
 801163c:	e028      	b.n	8011690 <__ieee754_rem_pio2+0x80>
 801163e:	4bc3      	ldr	r3, [pc, #780]	; (801194c <__ieee754_rem_pio2+0x33c>)
 8011640:	4598      	cmp	r8, r3
 8011642:	dc78      	bgt.n	8011736 <__ieee754_rem_pio2+0x126>
 8011644:	9b02      	ldr	r3, [sp, #8]
 8011646:	4ec2      	ldr	r6, [pc, #776]	; (8011950 <__ieee754_rem_pio2+0x340>)
 8011648:	2b00      	cmp	r3, #0
 801164a:	ee10 0a10 	vmov	r0, s0
 801164e:	a3b0      	add	r3, pc, #704	; (adr r3, 8011910 <__ieee754_rem_pio2+0x300>)
 8011650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011654:	4629      	mov	r1, r5
 8011656:	dd39      	ble.n	80116cc <__ieee754_rem_pio2+0xbc>
 8011658:	f7ee fe16 	bl	8000288 <__aeabi_dsub>
 801165c:	45b0      	cmp	r8, r6
 801165e:	4604      	mov	r4, r0
 8011660:	460d      	mov	r5, r1
 8011662:	d01b      	beq.n	801169c <__ieee754_rem_pio2+0x8c>
 8011664:	a3ac      	add	r3, pc, #688	; (adr r3, 8011918 <__ieee754_rem_pio2+0x308>)
 8011666:	e9d3 2300 	ldrd	r2, r3, [r3]
 801166a:	f7ee fe0d 	bl	8000288 <__aeabi_dsub>
 801166e:	4602      	mov	r2, r0
 8011670:	460b      	mov	r3, r1
 8011672:	e9ca 2300 	strd	r2, r3, [sl]
 8011676:	4620      	mov	r0, r4
 8011678:	4629      	mov	r1, r5
 801167a:	f7ee fe05 	bl	8000288 <__aeabi_dsub>
 801167e:	a3a6      	add	r3, pc, #664	; (adr r3, 8011918 <__ieee754_rem_pio2+0x308>)
 8011680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011684:	f7ee fe00 	bl	8000288 <__aeabi_dsub>
 8011688:	e9ca 0102 	strd	r0, r1, [sl, #8]
 801168c:	f04f 0b01 	mov.w	fp, #1
 8011690:	4658      	mov	r0, fp
 8011692:	b00b      	add	sp, #44	; 0x2c
 8011694:	ecbd 8b02 	vpop	{d8}
 8011698:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801169c:	a3a0      	add	r3, pc, #640	; (adr r3, 8011920 <__ieee754_rem_pio2+0x310>)
 801169e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116a2:	f7ee fdf1 	bl	8000288 <__aeabi_dsub>
 80116a6:	a3a0      	add	r3, pc, #640	; (adr r3, 8011928 <__ieee754_rem_pio2+0x318>)
 80116a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ac:	4604      	mov	r4, r0
 80116ae:	460d      	mov	r5, r1
 80116b0:	f7ee fdea 	bl	8000288 <__aeabi_dsub>
 80116b4:	4602      	mov	r2, r0
 80116b6:	460b      	mov	r3, r1
 80116b8:	e9ca 2300 	strd	r2, r3, [sl]
 80116bc:	4620      	mov	r0, r4
 80116be:	4629      	mov	r1, r5
 80116c0:	f7ee fde2 	bl	8000288 <__aeabi_dsub>
 80116c4:	a398      	add	r3, pc, #608	; (adr r3, 8011928 <__ieee754_rem_pio2+0x318>)
 80116c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116ca:	e7db      	b.n	8011684 <__ieee754_rem_pio2+0x74>
 80116cc:	f7ee fdde 	bl	800028c <__adddf3>
 80116d0:	45b0      	cmp	r8, r6
 80116d2:	4604      	mov	r4, r0
 80116d4:	460d      	mov	r5, r1
 80116d6:	d016      	beq.n	8011706 <__ieee754_rem_pio2+0xf6>
 80116d8:	a38f      	add	r3, pc, #572	; (adr r3, 8011918 <__ieee754_rem_pio2+0x308>)
 80116da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116de:	f7ee fdd5 	bl	800028c <__adddf3>
 80116e2:	4602      	mov	r2, r0
 80116e4:	460b      	mov	r3, r1
 80116e6:	e9ca 2300 	strd	r2, r3, [sl]
 80116ea:	4620      	mov	r0, r4
 80116ec:	4629      	mov	r1, r5
 80116ee:	f7ee fdcb 	bl	8000288 <__aeabi_dsub>
 80116f2:	a389      	add	r3, pc, #548	; (adr r3, 8011918 <__ieee754_rem_pio2+0x308>)
 80116f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80116f8:	f7ee fdc8 	bl	800028c <__adddf3>
 80116fc:	f04f 3bff 	mov.w	fp, #4294967295	; 0xffffffff
 8011700:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011704:	e7c4      	b.n	8011690 <__ieee754_rem_pio2+0x80>
 8011706:	a386      	add	r3, pc, #536	; (adr r3, 8011920 <__ieee754_rem_pio2+0x310>)
 8011708:	e9d3 2300 	ldrd	r2, r3, [r3]
 801170c:	f7ee fdbe 	bl	800028c <__adddf3>
 8011710:	a385      	add	r3, pc, #532	; (adr r3, 8011928 <__ieee754_rem_pio2+0x318>)
 8011712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011716:	4604      	mov	r4, r0
 8011718:	460d      	mov	r5, r1
 801171a:	f7ee fdb7 	bl	800028c <__adddf3>
 801171e:	4602      	mov	r2, r0
 8011720:	460b      	mov	r3, r1
 8011722:	e9ca 2300 	strd	r2, r3, [sl]
 8011726:	4620      	mov	r0, r4
 8011728:	4629      	mov	r1, r5
 801172a:	f7ee fdad 	bl	8000288 <__aeabi_dsub>
 801172e:	a37e      	add	r3, pc, #504	; (adr r3, 8011928 <__ieee754_rem_pio2+0x318>)
 8011730:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011734:	e7e0      	b.n	80116f8 <__ieee754_rem_pio2+0xe8>
 8011736:	4b87      	ldr	r3, [pc, #540]	; (8011954 <__ieee754_rem_pio2+0x344>)
 8011738:	4598      	cmp	r8, r3
 801173a:	f300 80d9 	bgt.w	80118f0 <__ieee754_rem_pio2+0x2e0>
 801173e:	f000 ff2d 	bl	801259c <fabs>
 8011742:	ec55 4b10 	vmov	r4, r5, d0
 8011746:	ee10 0a10 	vmov	r0, s0
 801174a:	a379      	add	r3, pc, #484	; (adr r3, 8011930 <__ieee754_rem_pio2+0x320>)
 801174c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011750:	4629      	mov	r1, r5
 8011752:	f7ee ff51 	bl	80005f8 <__aeabi_dmul>
 8011756:	4b80      	ldr	r3, [pc, #512]	; (8011958 <__ieee754_rem_pio2+0x348>)
 8011758:	2200      	movs	r2, #0
 801175a:	f7ee fd97 	bl	800028c <__adddf3>
 801175e:	f7ef f9fb 	bl	8000b58 <__aeabi_d2iz>
 8011762:	4683      	mov	fp, r0
 8011764:	f7ee fede 	bl	8000524 <__aeabi_i2d>
 8011768:	4602      	mov	r2, r0
 801176a:	460b      	mov	r3, r1
 801176c:	ec43 2b18 	vmov	d8, r2, r3
 8011770:	a367      	add	r3, pc, #412	; (adr r3, 8011910 <__ieee754_rem_pio2+0x300>)
 8011772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011776:	f7ee ff3f 	bl	80005f8 <__aeabi_dmul>
 801177a:	4602      	mov	r2, r0
 801177c:	460b      	mov	r3, r1
 801177e:	4620      	mov	r0, r4
 8011780:	4629      	mov	r1, r5
 8011782:	f7ee fd81 	bl	8000288 <__aeabi_dsub>
 8011786:	a364      	add	r3, pc, #400	; (adr r3, 8011918 <__ieee754_rem_pio2+0x308>)
 8011788:	e9d3 2300 	ldrd	r2, r3, [r3]
 801178c:	4606      	mov	r6, r0
 801178e:	460f      	mov	r7, r1
 8011790:	ec51 0b18 	vmov	r0, r1, d8
 8011794:	f7ee ff30 	bl	80005f8 <__aeabi_dmul>
 8011798:	f1bb 0f1f 	cmp.w	fp, #31
 801179c:	4604      	mov	r4, r0
 801179e:	460d      	mov	r5, r1
 80117a0:	dc0d      	bgt.n	80117be <__ieee754_rem_pio2+0x1ae>
 80117a2:	4b6e      	ldr	r3, [pc, #440]	; (801195c <__ieee754_rem_pio2+0x34c>)
 80117a4:	f10b 32ff 	add.w	r2, fp, #4294967295	; 0xffffffff
 80117a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80117ac:	4543      	cmp	r3, r8
 80117ae:	d006      	beq.n	80117be <__ieee754_rem_pio2+0x1ae>
 80117b0:	4622      	mov	r2, r4
 80117b2:	462b      	mov	r3, r5
 80117b4:	4630      	mov	r0, r6
 80117b6:	4639      	mov	r1, r7
 80117b8:	f7ee fd66 	bl	8000288 <__aeabi_dsub>
 80117bc:	e00f      	b.n	80117de <__ieee754_rem_pio2+0x1ce>
 80117be:	462b      	mov	r3, r5
 80117c0:	4622      	mov	r2, r4
 80117c2:	4630      	mov	r0, r6
 80117c4:	4639      	mov	r1, r7
 80117c6:	f7ee fd5f 	bl	8000288 <__aeabi_dsub>
 80117ca:	ea4f 5328 	mov.w	r3, r8, asr #20
 80117ce:	9303      	str	r3, [sp, #12]
 80117d0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80117d4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 80117d8:	f1b8 0f10 	cmp.w	r8, #16
 80117dc:	dc02      	bgt.n	80117e4 <__ieee754_rem_pio2+0x1d4>
 80117de:	e9ca 0100 	strd	r0, r1, [sl]
 80117e2:	e039      	b.n	8011858 <__ieee754_rem_pio2+0x248>
 80117e4:	a34e      	add	r3, pc, #312	; (adr r3, 8011920 <__ieee754_rem_pio2+0x310>)
 80117e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117ea:	ec51 0b18 	vmov	r0, r1, d8
 80117ee:	f7ee ff03 	bl	80005f8 <__aeabi_dmul>
 80117f2:	4604      	mov	r4, r0
 80117f4:	460d      	mov	r5, r1
 80117f6:	4602      	mov	r2, r0
 80117f8:	460b      	mov	r3, r1
 80117fa:	4630      	mov	r0, r6
 80117fc:	4639      	mov	r1, r7
 80117fe:	f7ee fd43 	bl	8000288 <__aeabi_dsub>
 8011802:	4602      	mov	r2, r0
 8011804:	460b      	mov	r3, r1
 8011806:	4680      	mov	r8, r0
 8011808:	4689      	mov	r9, r1
 801180a:	4630      	mov	r0, r6
 801180c:	4639      	mov	r1, r7
 801180e:	f7ee fd3b 	bl	8000288 <__aeabi_dsub>
 8011812:	4622      	mov	r2, r4
 8011814:	462b      	mov	r3, r5
 8011816:	f7ee fd37 	bl	8000288 <__aeabi_dsub>
 801181a:	a343      	add	r3, pc, #268	; (adr r3, 8011928 <__ieee754_rem_pio2+0x318>)
 801181c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011820:	4604      	mov	r4, r0
 8011822:	460d      	mov	r5, r1
 8011824:	ec51 0b18 	vmov	r0, r1, d8
 8011828:	f7ee fee6 	bl	80005f8 <__aeabi_dmul>
 801182c:	4622      	mov	r2, r4
 801182e:	462b      	mov	r3, r5
 8011830:	f7ee fd2a 	bl	8000288 <__aeabi_dsub>
 8011834:	4602      	mov	r2, r0
 8011836:	460b      	mov	r3, r1
 8011838:	4604      	mov	r4, r0
 801183a:	460d      	mov	r5, r1
 801183c:	4640      	mov	r0, r8
 801183e:	4649      	mov	r1, r9
 8011840:	f7ee fd22 	bl	8000288 <__aeabi_dsub>
 8011844:	9a03      	ldr	r2, [sp, #12]
 8011846:	f3c1 530a 	ubfx	r3, r1, #20, #11
 801184a:	1ad3      	subs	r3, r2, r3
 801184c:	2b31      	cmp	r3, #49	; 0x31
 801184e:	dc24      	bgt.n	801189a <__ieee754_rem_pio2+0x28a>
 8011850:	e9ca 0100 	strd	r0, r1, [sl]
 8011854:	4646      	mov	r6, r8
 8011856:	464f      	mov	r7, r9
 8011858:	e9da 8900 	ldrd	r8, r9, [sl]
 801185c:	4630      	mov	r0, r6
 801185e:	4642      	mov	r2, r8
 8011860:	464b      	mov	r3, r9
 8011862:	4639      	mov	r1, r7
 8011864:	f7ee fd10 	bl	8000288 <__aeabi_dsub>
 8011868:	462b      	mov	r3, r5
 801186a:	4622      	mov	r2, r4
 801186c:	f7ee fd0c 	bl	8000288 <__aeabi_dsub>
 8011870:	9b02      	ldr	r3, [sp, #8]
 8011872:	2b00      	cmp	r3, #0
 8011874:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011878:	f6bf af0a 	bge.w	8011690 <__ieee754_rem_pio2+0x80>
 801187c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8011880:	f8ca 3004 	str.w	r3, [sl, #4]
 8011884:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011888:	f8ca 8000 	str.w	r8, [sl]
 801188c:	f8ca 0008 	str.w	r0, [sl, #8]
 8011890:	f8ca 300c 	str.w	r3, [sl, #12]
 8011894:	f1cb 0b00 	rsb	fp, fp, #0
 8011898:	e6fa      	b.n	8011690 <__ieee754_rem_pio2+0x80>
 801189a:	a327      	add	r3, pc, #156	; (adr r3, 8011938 <__ieee754_rem_pio2+0x328>)
 801189c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a0:	ec51 0b18 	vmov	r0, r1, d8
 80118a4:	f7ee fea8 	bl	80005f8 <__aeabi_dmul>
 80118a8:	4604      	mov	r4, r0
 80118aa:	460d      	mov	r5, r1
 80118ac:	4602      	mov	r2, r0
 80118ae:	460b      	mov	r3, r1
 80118b0:	4640      	mov	r0, r8
 80118b2:	4649      	mov	r1, r9
 80118b4:	f7ee fce8 	bl	8000288 <__aeabi_dsub>
 80118b8:	4602      	mov	r2, r0
 80118ba:	460b      	mov	r3, r1
 80118bc:	4606      	mov	r6, r0
 80118be:	460f      	mov	r7, r1
 80118c0:	4640      	mov	r0, r8
 80118c2:	4649      	mov	r1, r9
 80118c4:	f7ee fce0 	bl	8000288 <__aeabi_dsub>
 80118c8:	4622      	mov	r2, r4
 80118ca:	462b      	mov	r3, r5
 80118cc:	f7ee fcdc 	bl	8000288 <__aeabi_dsub>
 80118d0:	a31b      	add	r3, pc, #108	; (adr r3, 8011940 <__ieee754_rem_pio2+0x330>)
 80118d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d6:	4604      	mov	r4, r0
 80118d8:	460d      	mov	r5, r1
 80118da:	ec51 0b18 	vmov	r0, r1, d8
 80118de:	f7ee fe8b 	bl	80005f8 <__aeabi_dmul>
 80118e2:	4622      	mov	r2, r4
 80118e4:	462b      	mov	r3, r5
 80118e6:	f7ee fccf 	bl	8000288 <__aeabi_dsub>
 80118ea:	4604      	mov	r4, r0
 80118ec:	460d      	mov	r5, r1
 80118ee:	e75f      	b.n	80117b0 <__ieee754_rem_pio2+0x1a0>
 80118f0:	4b1b      	ldr	r3, [pc, #108]	; (8011960 <__ieee754_rem_pio2+0x350>)
 80118f2:	4598      	cmp	r8, r3
 80118f4:	dd36      	ble.n	8011964 <__ieee754_rem_pio2+0x354>
 80118f6:	ee10 2a10 	vmov	r2, s0
 80118fa:	462b      	mov	r3, r5
 80118fc:	4620      	mov	r0, r4
 80118fe:	4629      	mov	r1, r5
 8011900:	f7ee fcc2 	bl	8000288 <__aeabi_dsub>
 8011904:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8011908:	e9ca 0100 	strd	r0, r1, [sl]
 801190c:	e694      	b.n	8011638 <__ieee754_rem_pio2+0x28>
 801190e:	bf00      	nop
 8011910:	54400000 	.word	0x54400000
 8011914:	3ff921fb 	.word	0x3ff921fb
 8011918:	1a626331 	.word	0x1a626331
 801191c:	3dd0b461 	.word	0x3dd0b461
 8011920:	1a600000 	.word	0x1a600000
 8011924:	3dd0b461 	.word	0x3dd0b461
 8011928:	2e037073 	.word	0x2e037073
 801192c:	3ba3198a 	.word	0x3ba3198a
 8011930:	6dc9c883 	.word	0x6dc9c883
 8011934:	3fe45f30 	.word	0x3fe45f30
 8011938:	2e000000 	.word	0x2e000000
 801193c:	3ba3198a 	.word	0x3ba3198a
 8011940:	252049c1 	.word	0x252049c1
 8011944:	397b839a 	.word	0x397b839a
 8011948:	3fe921fb 	.word	0x3fe921fb
 801194c:	4002d97b 	.word	0x4002d97b
 8011950:	3ff921fb 	.word	0x3ff921fb
 8011954:	413921fb 	.word	0x413921fb
 8011958:	3fe00000 	.word	0x3fe00000
 801195c:	0801f980 	.word	0x0801f980
 8011960:	7fefffff 	.word	0x7fefffff
 8011964:	ea4f 5428 	mov.w	r4, r8, asr #20
 8011968:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 801196c:	ee10 0a10 	vmov	r0, s0
 8011970:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8011974:	ee10 6a10 	vmov	r6, s0
 8011978:	460f      	mov	r7, r1
 801197a:	f7ef f8ed 	bl	8000b58 <__aeabi_d2iz>
 801197e:	f7ee fdd1 	bl	8000524 <__aeabi_i2d>
 8011982:	4602      	mov	r2, r0
 8011984:	460b      	mov	r3, r1
 8011986:	4630      	mov	r0, r6
 8011988:	4639      	mov	r1, r7
 801198a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 801198e:	f7ee fc7b 	bl	8000288 <__aeabi_dsub>
 8011992:	4b23      	ldr	r3, [pc, #140]	; (8011a20 <__ieee754_rem_pio2+0x410>)
 8011994:	2200      	movs	r2, #0
 8011996:	f7ee fe2f 	bl	80005f8 <__aeabi_dmul>
 801199a:	460f      	mov	r7, r1
 801199c:	4606      	mov	r6, r0
 801199e:	f7ef f8db 	bl	8000b58 <__aeabi_d2iz>
 80119a2:	f7ee fdbf 	bl	8000524 <__aeabi_i2d>
 80119a6:	4602      	mov	r2, r0
 80119a8:	460b      	mov	r3, r1
 80119aa:	4630      	mov	r0, r6
 80119ac:	4639      	mov	r1, r7
 80119ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80119b2:	f7ee fc69 	bl	8000288 <__aeabi_dsub>
 80119b6:	4b1a      	ldr	r3, [pc, #104]	; (8011a20 <__ieee754_rem_pio2+0x410>)
 80119b8:	2200      	movs	r2, #0
 80119ba:	f7ee fe1d 	bl	80005f8 <__aeabi_dmul>
 80119be:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80119c2:	ad04      	add	r5, sp, #16
 80119c4:	f04f 0803 	mov.w	r8, #3
 80119c8:	46a9      	mov	r9, r5
 80119ca:	2600      	movs	r6, #0
 80119cc:	2700      	movs	r7, #0
 80119ce:	4632      	mov	r2, r6
 80119d0:	463b      	mov	r3, r7
 80119d2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 80119d6:	46c3      	mov	fp, r8
 80119d8:	3d08      	subs	r5, #8
 80119da:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 80119de:	f7ef f873 	bl	8000ac8 <__aeabi_dcmpeq>
 80119e2:	2800      	cmp	r0, #0
 80119e4:	d1f3      	bne.n	80119ce <__ieee754_rem_pio2+0x3be>
 80119e6:	4b0f      	ldr	r3, [pc, #60]	; (8011a24 <__ieee754_rem_pio2+0x414>)
 80119e8:	9301      	str	r3, [sp, #4]
 80119ea:	2302      	movs	r3, #2
 80119ec:	9300      	str	r3, [sp, #0]
 80119ee:	4622      	mov	r2, r4
 80119f0:	465b      	mov	r3, fp
 80119f2:	4651      	mov	r1, sl
 80119f4:	4648      	mov	r0, r9
 80119f6:	f000 f993 	bl	8011d20 <__kernel_rem_pio2>
 80119fa:	9b02      	ldr	r3, [sp, #8]
 80119fc:	2b00      	cmp	r3, #0
 80119fe:	4683      	mov	fp, r0
 8011a00:	f6bf ae46 	bge.w	8011690 <__ieee754_rem_pio2+0x80>
 8011a04:	e9da 2100 	ldrd	r2, r1, [sl]
 8011a08:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a0c:	e9ca 2300 	strd	r2, r3, [sl]
 8011a10:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 8011a14:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8011a18:	e9ca 2302 	strd	r2, r3, [sl, #8]
 8011a1c:	e73a      	b.n	8011894 <__ieee754_rem_pio2+0x284>
 8011a1e:	bf00      	nop
 8011a20:	41700000 	.word	0x41700000
 8011a24:	0801fa00 	.word	0x0801fa00

08011a28 <__ieee754_sqrt>:
 8011a28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8011a2c:	ec55 4b10 	vmov	r4, r5, d0
 8011a30:	4e55      	ldr	r6, [pc, #340]	; (8011b88 <__ieee754_sqrt+0x160>)
 8011a32:	43ae      	bics	r6, r5
 8011a34:	ee10 0a10 	vmov	r0, s0
 8011a38:	ee10 3a10 	vmov	r3, s0
 8011a3c:	462a      	mov	r2, r5
 8011a3e:	4629      	mov	r1, r5
 8011a40:	d110      	bne.n	8011a64 <__ieee754_sqrt+0x3c>
 8011a42:	ee10 2a10 	vmov	r2, s0
 8011a46:	462b      	mov	r3, r5
 8011a48:	f7ee fdd6 	bl	80005f8 <__aeabi_dmul>
 8011a4c:	4602      	mov	r2, r0
 8011a4e:	460b      	mov	r3, r1
 8011a50:	4620      	mov	r0, r4
 8011a52:	4629      	mov	r1, r5
 8011a54:	f7ee fc1a 	bl	800028c <__adddf3>
 8011a58:	4604      	mov	r4, r0
 8011a5a:	460d      	mov	r5, r1
 8011a5c:	ec45 4b10 	vmov	d0, r4, r5
 8011a60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8011a64:	2d00      	cmp	r5, #0
 8011a66:	dc10      	bgt.n	8011a8a <__ieee754_sqrt+0x62>
 8011a68:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8011a6c:	4330      	orrs	r0, r6
 8011a6e:	d0f5      	beq.n	8011a5c <__ieee754_sqrt+0x34>
 8011a70:	b15d      	cbz	r5, 8011a8a <__ieee754_sqrt+0x62>
 8011a72:	ee10 2a10 	vmov	r2, s0
 8011a76:	462b      	mov	r3, r5
 8011a78:	ee10 0a10 	vmov	r0, s0
 8011a7c:	f7ee fc04 	bl	8000288 <__aeabi_dsub>
 8011a80:	4602      	mov	r2, r0
 8011a82:	460b      	mov	r3, r1
 8011a84:	f7ee fee2 	bl	800084c <__aeabi_ddiv>
 8011a88:	e7e6      	b.n	8011a58 <__ieee754_sqrt+0x30>
 8011a8a:	1512      	asrs	r2, r2, #20
 8011a8c:	d074      	beq.n	8011b78 <__ieee754_sqrt+0x150>
 8011a8e:	07d4      	lsls	r4, r2, #31
 8011a90:	f3c1 0113 	ubfx	r1, r1, #0, #20
 8011a94:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 8011a98:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8011a9c:	bf5e      	ittt	pl
 8011a9e:	0fda      	lsrpl	r2, r3, #31
 8011aa0:	005b      	lslpl	r3, r3, #1
 8011aa2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 8011aa6:	2400      	movs	r4, #0
 8011aa8:	0fda      	lsrs	r2, r3, #31
 8011aaa:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 8011aae:	107f      	asrs	r7, r7, #1
 8011ab0:	005b      	lsls	r3, r3, #1
 8011ab2:	2516      	movs	r5, #22
 8011ab4:	4620      	mov	r0, r4
 8011ab6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8011aba:	1886      	adds	r6, r0, r2
 8011abc:	428e      	cmp	r6, r1
 8011abe:	bfde      	ittt	le
 8011ac0:	1b89      	suble	r1, r1, r6
 8011ac2:	18b0      	addle	r0, r6, r2
 8011ac4:	18a4      	addle	r4, r4, r2
 8011ac6:	0049      	lsls	r1, r1, #1
 8011ac8:	3d01      	subs	r5, #1
 8011aca:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 8011ace:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8011ad2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011ad6:	d1f0      	bne.n	8011aba <__ieee754_sqrt+0x92>
 8011ad8:	462a      	mov	r2, r5
 8011ada:	f04f 0e20 	mov.w	lr, #32
 8011ade:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8011ae2:	4281      	cmp	r1, r0
 8011ae4:	eb06 0c05 	add.w	ip, r6, r5
 8011ae8:	dc02      	bgt.n	8011af0 <__ieee754_sqrt+0xc8>
 8011aea:	d113      	bne.n	8011b14 <__ieee754_sqrt+0xec>
 8011aec:	459c      	cmp	ip, r3
 8011aee:	d811      	bhi.n	8011b14 <__ieee754_sqrt+0xec>
 8011af0:	f1bc 0f00 	cmp.w	ip, #0
 8011af4:	eb0c 0506 	add.w	r5, ip, r6
 8011af8:	da43      	bge.n	8011b82 <__ieee754_sqrt+0x15a>
 8011afa:	2d00      	cmp	r5, #0
 8011afc:	db41      	blt.n	8011b82 <__ieee754_sqrt+0x15a>
 8011afe:	f100 0801 	add.w	r8, r0, #1
 8011b02:	1a09      	subs	r1, r1, r0
 8011b04:	459c      	cmp	ip, r3
 8011b06:	bf88      	it	hi
 8011b08:	f101 31ff 	addhi.w	r1, r1, #4294967295	; 0xffffffff
 8011b0c:	eba3 030c 	sub.w	r3, r3, ip
 8011b10:	4432      	add	r2, r6
 8011b12:	4640      	mov	r0, r8
 8011b14:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8011b18:	f1be 0e01 	subs.w	lr, lr, #1
 8011b1c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 8011b20:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8011b24:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8011b28:	d1db      	bne.n	8011ae2 <__ieee754_sqrt+0xba>
 8011b2a:	430b      	orrs	r3, r1
 8011b2c:	d006      	beq.n	8011b3c <__ieee754_sqrt+0x114>
 8011b2e:	1c50      	adds	r0, r2, #1
 8011b30:	bf13      	iteet	ne
 8011b32:	3201      	addne	r2, #1
 8011b34:	3401      	addeq	r4, #1
 8011b36:	4672      	moveq	r2, lr
 8011b38:	f022 0201 	bicne.w	r2, r2, #1
 8011b3c:	1063      	asrs	r3, r4, #1
 8011b3e:	0852      	lsrs	r2, r2, #1
 8011b40:	07e1      	lsls	r1, r4, #31
 8011b42:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8011b46:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8011b4a:	bf48      	it	mi
 8011b4c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 8011b50:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8011b54:	4614      	mov	r4, r2
 8011b56:	e781      	b.n	8011a5c <__ieee754_sqrt+0x34>
 8011b58:	0ad9      	lsrs	r1, r3, #11
 8011b5a:	3815      	subs	r0, #21
 8011b5c:	055b      	lsls	r3, r3, #21
 8011b5e:	2900      	cmp	r1, #0
 8011b60:	d0fa      	beq.n	8011b58 <__ieee754_sqrt+0x130>
 8011b62:	02cd      	lsls	r5, r1, #11
 8011b64:	d50a      	bpl.n	8011b7c <__ieee754_sqrt+0x154>
 8011b66:	f1c2 0420 	rsb	r4, r2, #32
 8011b6a:	fa23 f404 	lsr.w	r4, r3, r4
 8011b6e:	1e55      	subs	r5, r2, #1
 8011b70:	4093      	lsls	r3, r2
 8011b72:	4321      	orrs	r1, r4
 8011b74:	1b42      	subs	r2, r0, r5
 8011b76:	e78a      	b.n	8011a8e <__ieee754_sqrt+0x66>
 8011b78:	4610      	mov	r0, r2
 8011b7a:	e7f0      	b.n	8011b5e <__ieee754_sqrt+0x136>
 8011b7c:	0049      	lsls	r1, r1, #1
 8011b7e:	3201      	adds	r2, #1
 8011b80:	e7ef      	b.n	8011b62 <__ieee754_sqrt+0x13a>
 8011b82:	4680      	mov	r8, r0
 8011b84:	e7bd      	b.n	8011b02 <__ieee754_sqrt+0xda>
 8011b86:	bf00      	nop
 8011b88:	7ff00000 	.word	0x7ff00000
 8011b8c:	00000000 	.word	0x00000000

08011b90 <__kernel_cos>:
 8011b90:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011b94:	ec57 6b10 	vmov	r6, r7, d0
 8011b98:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8011b9c:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 8011ba0:	ed8d 1b00 	vstr	d1, [sp]
 8011ba4:	da07      	bge.n	8011bb6 <__kernel_cos+0x26>
 8011ba6:	ee10 0a10 	vmov	r0, s0
 8011baa:	4639      	mov	r1, r7
 8011bac:	f7ee ffd4 	bl	8000b58 <__aeabi_d2iz>
 8011bb0:	2800      	cmp	r0, #0
 8011bb2:	f000 8088 	beq.w	8011cc6 <__kernel_cos+0x136>
 8011bb6:	4632      	mov	r2, r6
 8011bb8:	463b      	mov	r3, r7
 8011bba:	4630      	mov	r0, r6
 8011bbc:	4639      	mov	r1, r7
 8011bbe:	f7ee fd1b 	bl	80005f8 <__aeabi_dmul>
 8011bc2:	4b51      	ldr	r3, [pc, #324]	; (8011d08 <__kernel_cos+0x178>)
 8011bc4:	2200      	movs	r2, #0
 8011bc6:	4604      	mov	r4, r0
 8011bc8:	460d      	mov	r5, r1
 8011bca:	f7ee fd15 	bl	80005f8 <__aeabi_dmul>
 8011bce:	a340      	add	r3, pc, #256	; (adr r3, 8011cd0 <__kernel_cos+0x140>)
 8011bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bd4:	4682      	mov	sl, r0
 8011bd6:	468b      	mov	fp, r1
 8011bd8:	4620      	mov	r0, r4
 8011bda:	4629      	mov	r1, r5
 8011bdc:	f7ee fd0c 	bl	80005f8 <__aeabi_dmul>
 8011be0:	a33d      	add	r3, pc, #244	; (adr r3, 8011cd8 <__kernel_cos+0x148>)
 8011be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011be6:	f7ee fb51 	bl	800028c <__adddf3>
 8011bea:	4622      	mov	r2, r4
 8011bec:	462b      	mov	r3, r5
 8011bee:	f7ee fd03 	bl	80005f8 <__aeabi_dmul>
 8011bf2:	a33b      	add	r3, pc, #236	; (adr r3, 8011ce0 <__kernel_cos+0x150>)
 8011bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011bf8:	f7ee fb46 	bl	8000288 <__aeabi_dsub>
 8011bfc:	4622      	mov	r2, r4
 8011bfe:	462b      	mov	r3, r5
 8011c00:	f7ee fcfa 	bl	80005f8 <__aeabi_dmul>
 8011c04:	a338      	add	r3, pc, #224	; (adr r3, 8011ce8 <__kernel_cos+0x158>)
 8011c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c0a:	f7ee fb3f 	bl	800028c <__adddf3>
 8011c0e:	4622      	mov	r2, r4
 8011c10:	462b      	mov	r3, r5
 8011c12:	f7ee fcf1 	bl	80005f8 <__aeabi_dmul>
 8011c16:	a336      	add	r3, pc, #216	; (adr r3, 8011cf0 <__kernel_cos+0x160>)
 8011c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c1c:	f7ee fb34 	bl	8000288 <__aeabi_dsub>
 8011c20:	4622      	mov	r2, r4
 8011c22:	462b      	mov	r3, r5
 8011c24:	f7ee fce8 	bl	80005f8 <__aeabi_dmul>
 8011c28:	a333      	add	r3, pc, #204	; (adr r3, 8011cf8 <__kernel_cos+0x168>)
 8011c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011c2e:	f7ee fb2d 	bl	800028c <__adddf3>
 8011c32:	4622      	mov	r2, r4
 8011c34:	462b      	mov	r3, r5
 8011c36:	f7ee fcdf 	bl	80005f8 <__aeabi_dmul>
 8011c3a:	4622      	mov	r2, r4
 8011c3c:	462b      	mov	r3, r5
 8011c3e:	f7ee fcdb 	bl	80005f8 <__aeabi_dmul>
 8011c42:	e9dd 2300 	ldrd	r2, r3, [sp]
 8011c46:	4604      	mov	r4, r0
 8011c48:	460d      	mov	r5, r1
 8011c4a:	4630      	mov	r0, r6
 8011c4c:	4639      	mov	r1, r7
 8011c4e:	f7ee fcd3 	bl	80005f8 <__aeabi_dmul>
 8011c52:	460b      	mov	r3, r1
 8011c54:	4602      	mov	r2, r0
 8011c56:	4629      	mov	r1, r5
 8011c58:	4620      	mov	r0, r4
 8011c5a:	f7ee fb15 	bl	8000288 <__aeabi_dsub>
 8011c5e:	4b2b      	ldr	r3, [pc, #172]	; (8011d0c <__kernel_cos+0x17c>)
 8011c60:	4598      	cmp	r8, r3
 8011c62:	4606      	mov	r6, r0
 8011c64:	460f      	mov	r7, r1
 8011c66:	dc10      	bgt.n	8011c8a <__kernel_cos+0xfa>
 8011c68:	4602      	mov	r2, r0
 8011c6a:	460b      	mov	r3, r1
 8011c6c:	4650      	mov	r0, sl
 8011c6e:	4659      	mov	r1, fp
 8011c70:	f7ee fb0a 	bl	8000288 <__aeabi_dsub>
 8011c74:	460b      	mov	r3, r1
 8011c76:	4926      	ldr	r1, [pc, #152]	; (8011d10 <__kernel_cos+0x180>)
 8011c78:	4602      	mov	r2, r0
 8011c7a:	2000      	movs	r0, #0
 8011c7c:	f7ee fb04 	bl	8000288 <__aeabi_dsub>
 8011c80:	ec41 0b10 	vmov	d0, r0, r1
 8011c84:	b003      	add	sp, #12
 8011c86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c8a:	4b22      	ldr	r3, [pc, #136]	; (8011d14 <__kernel_cos+0x184>)
 8011c8c:	4920      	ldr	r1, [pc, #128]	; (8011d10 <__kernel_cos+0x180>)
 8011c8e:	4598      	cmp	r8, r3
 8011c90:	bfcc      	ite	gt
 8011c92:	4d21      	ldrgt	r5, [pc, #132]	; (8011d18 <__kernel_cos+0x188>)
 8011c94:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 8011c98:	2400      	movs	r4, #0
 8011c9a:	4622      	mov	r2, r4
 8011c9c:	462b      	mov	r3, r5
 8011c9e:	2000      	movs	r0, #0
 8011ca0:	f7ee faf2 	bl	8000288 <__aeabi_dsub>
 8011ca4:	4622      	mov	r2, r4
 8011ca6:	4680      	mov	r8, r0
 8011ca8:	4689      	mov	r9, r1
 8011caa:	462b      	mov	r3, r5
 8011cac:	4650      	mov	r0, sl
 8011cae:	4659      	mov	r1, fp
 8011cb0:	f7ee faea 	bl	8000288 <__aeabi_dsub>
 8011cb4:	4632      	mov	r2, r6
 8011cb6:	463b      	mov	r3, r7
 8011cb8:	f7ee fae6 	bl	8000288 <__aeabi_dsub>
 8011cbc:	4602      	mov	r2, r0
 8011cbe:	460b      	mov	r3, r1
 8011cc0:	4640      	mov	r0, r8
 8011cc2:	4649      	mov	r1, r9
 8011cc4:	e7da      	b.n	8011c7c <__kernel_cos+0xec>
 8011cc6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8011d00 <__kernel_cos+0x170>
 8011cca:	e7db      	b.n	8011c84 <__kernel_cos+0xf4>
 8011ccc:	f3af 8000 	nop.w
 8011cd0:	be8838d4 	.word	0xbe8838d4
 8011cd4:	bda8fae9 	.word	0xbda8fae9
 8011cd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8011cdc:	3e21ee9e 	.word	0x3e21ee9e
 8011ce0:	809c52ad 	.word	0x809c52ad
 8011ce4:	3e927e4f 	.word	0x3e927e4f
 8011ce8:	19cb1590 	.word	0x19cb1590
 8011cec:	3efa01a0 	.word	0x3efa01a0
 8011cf0:	16c15177 	.word	0x16c15177
 8011cf4:	3f56c16c 	.word	0x3f56c16c
 8011cf8:	5555554c 	.word	0x5555554c
 8011cfc:	3fa55555 	.word	0x3fa55555
 8011d00:	00000000 	.word	0x00000000
 8011d04:	3ff00000 	.word	0x3ff00000
 8011d08:	3fe00000 	.word	0x3fe00000
 8011d0c:	3fd33332 	.word	0x3fd33332
 8011d10:	3ff00000 	.word	0x3ff00000
 8011d14:	3fe90000 	.word	0x3fe90000
 8011d18:	3fd20000 	.word	0x3fd20000
 8011d1c:	00000000 	.word	0x00000000

08011d20 <__kernel_rem_pio2>:
 8011d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011d24:	ed2d 8b02 	vpush	{d8}
 8011d28:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8011d2c:	f112 0f14 	cmn.w	r2, #20
 8011d30:	9308      	str	r3, [sp, #32]
 8011d32:	9101      	str	r1, [sp, #4]
 8011d34:	4bc4      	ldr	r3, [pc, #784]	; (8012048 <__kernel_rem_pio2+0x328>)
 8011d36:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8011d38:	900b      	str	r0, [sp, #44]	; 0x2c
 8011d3a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8011d3e:	9302      	str	r3, [sp, #8]
 8011d40:	9b08      	ldr	r3, [sp, #32]
 8011d42:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
 8011d46:	bfa8      	it	ge
 8011d48:	1ed4      	subge	r4, r2, #3
 8011d4a:	9306      	str	r3, [sp, #24]
 8011d4c:	bfb2      	itee	lt
 8011d4e:	2400      	movlt	r4, #0
 8011d50:	2318      	movge	r3, #24
 8011d52:	fb94 f4f3 	sdivge	r4, r4, r3
 8011d56:	f06f 0317 	mvn.w	r3, #23
 8011d5a:	fb04 3303 	mla	r3, r4, r3, r3
 8011d5e:	eb03 0a02 	add.w	sl, r3, r2
 8011d62:	9b02      	ldr	r3, [sp, #8]
 8011d64:	9a06      	ldr	r2, [sp, #24]
 8011d66:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8012038 <__kernel_rem_pio2+0x318>
 8011d6a:	eb03 0802 	add.w	r8, r3, r2
 8011d6e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011d70:	1aa7      	subs	r7, r4, r2
 8011d72:	ae22      	add	r6, sp, #136	; 0x88
 8011d74:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8011d78:	2500      	movs	r5, #0
 8011d7a:	4545      	cmp	r5, r8
 8011d7c:	dd13      	ble.n	8011da6 <__kernel_rem_pio2+0x86>
 8011d7e:	9b08      	ldr	r3, [sp, #32]
 8011d80:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8012038 <__kernel_rem_pio2+0x318>
 8011d84:	aa22      	add	r2, sp, #136	; 0x88
 8011d86:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8011d8a:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 8011d8e:	f04f 0800 	mov.w	r8, #0
 8011d92:	9b02      	ldr	r3, [sp, #8]
 8011d94:	4598      	cmp	r8, r3
 8011d96:	dc2f      	bgt.n	8011df8 <__kernel_rem_pio2+0xd8>
 8011d98:	ed8d 8b04 	vstr	d8, [sp, #16]
 8011d9c:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 8011da0:	462f      	mov	r7, r5
 8011da2:	2600      	movs	r6, #0
 8011da4:	e01b      	b.n	8011dde <__kernel_rem_pio2+0xbe>
 8011da6:	42ef      	cmn	r7, r5
 8011da8:	d407      	bmi.n	8011dba <__kernel_rem_pio2+0x9a>
 8011daa:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8011dae:	f7ee fbb9 	bl	8000524 <__aeabi_i2d>
 8011db2:	e8e6 0102 	strd	r0, r1, [r6], #8
 8011db6:	3501      	adds	r5, #1
 8011db8:	e7df      	b.n	8011d7a <__kernel_rem_pio2+0x5a>
 8011dba:	ec51 0b18 	vmov	r0, r1, d8
 8011dbe:	e7f8      	b.n	8011db2 <__kernel_rem_pio2+0x92>
 8011dc0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011dc4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8011dc8:	f7ee fc16 	bl	80005f8 <__aeabi_dmul>
 8011dcc:	4602      	mov	r2, r0
 8011dce:	460b      	mov	r3, r1
 8011dd0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8011dd4:	f7ee fa5a 	bl	800028c <__adddf3>
 8011dd8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8011ddc:	3601      	adds	r6, #1
 8011dde:	9b06      	ldr	r3, [sp, #24]
 8011de0:	429e      	cmp	r6, r3
 8011de2:	f1a7 0708 	sub.w	r7, r7, #8
 8011de6:	ddeb      	ble.n	8011dc0 <__kernel_rem_pio2+0xa0>
 8011de8:	ed9d 7b04 	vldr	d7, [sp, #16]
 8011dec:	f108 0801 	add.w	r8, r8, #1
 8011df0:	ecab 7b02 	vstmia	fp!, {d7}
 8011df4:	3508      	adds	r5, #8
 8011df6:	e7cc      	b.n	8011d92 <__kernel_rem_pio2+0x72>
 8011df8:	9b02      	ldr	r3, [sp, #8]
 8011dfa:	aa0e      	add	r2, sp, #56	; 0x38
 8011dfc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8011e00:	930d      	str	r3, [sp, #52]	; 0x34
 8011e02:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8011e04:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8011e08:	9c02      	ldr	r4, [sp, #8]
 8011e0a:	930c      	str	r3, [sp, #48]	; 0x30
 8011e0c:	00e3      	lsls	r3, r4, #3
 8011e0e:	930a      	str	r3, [sp, #40]	; 0x28
 8011e10:	ab9a      	add	r3, sp, #616	; 0x268
 8011e12:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8011e16:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8011e1a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8011e1e:	ab72      	add	r3, sp, #456	; 0x1c8
 8011e20:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 8011e24:	46c3      	mov	fp, r8
 8011e26:	46a1      	mov	r9, r4
 8011e28:	f1b9 0f00 	cmp.w	r9, #0
 8011e2c:	f1a5 0508 	sub.w	r5, r5, #8
 8011e30:	dc77      	bgt.n	8011f22 <__kernel_rem_pio2+0x202>
 8011e32:	ec47 6b10 	vmov	d0, r6, r7
 8011e36:	4650      	mov	r0, sl
 8011e38:	f000 fc46 	bl	80126c8 <scalbn>
 8011e3c:	ec57 6b10 	vmov	r6, r7, d0
 8011e40:	2200      	movs	r2, #0
 8011e42:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8011e46:	ee10 0a10 	vmov	r0, s0
 8011e4a:	4639      	mov	r1, r7
 8011e4c:	f7ee fbd4 	bl	80005f8 <__aeabi_dmul>
 8011e50:	ec41 0b10 	vmov	d0, r0, r1
 8011e54:	f000 fbb8 	bl	80125c8 <floor>
 8011e58:	4b7c      	ldr	r3, [pc, #496]	; (801204c <__kernel_rem_pio2+0x32c>)
 8011e5a:	ec51 0b10 	vmov	r0, r1, d0
 8011e5e:	2200      	movs	r2, #0
 8011e60:	f7ee fbca 	bl	80005f8 <__aeabi_dmul>
 8011e64:	4602      	mov	r2, r0
 8011e66:	460b      	mov	r3, r1
 8011e68:	4630      	mov	r0, r6
 8011e6a:	4639      	mov	r1, r7
 8011e6c:	f7ee fa0c 	bl	8000288 <__aeabi_dsub>
 8011e70:	460f      	mov	r7, r1
 8011e72:	4606      	mov	r6, r0
 8011e74:	f7ee fe70 	bl	8000b58 <__aeabi_d2iz>
 8011e78:	9004      	str	r0, [sp, #16]
 8011e7a:	f7ee fb53 	bl	8000524 <__aeabi_i2d>
 8011e7e:	4602      	mov	r2, r0
 8011e80:	460b      	mov	r3, r1
 8011e82:	4630      	mov	r0, r6
 8011e84:	4639      	mov	r1, r7
 8011e86:	f7ee f9ff 	bl	8000288 <__aeabi_dsub>
 8011e8a:	f1ba 0f00 	cmp.w	sl, #0
 8011e8e:	4606      	mov	r6, r0
 8011e90:	460f      	mov	r7, r1
 8011e92:	dd6d      	ble.n	8011f70 <__kernel_rem_pio2+0x250>
 8011e94:	1e62      	subs	r2, r4, #1
 8011e96:	ab0e      	add	r3, sp, #56	; 0x38
 8011e98:	9d04      	ldr	r5, [sp, #16]
 8011e9a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8011e9e:	f1ca 0118 	rsb	r1, sl, #24
 8011ea2:	fa40 f301 	asr.w	r3, r0, r1
 8011ea6:	441d      	add	r5, r3
 8011ea8:	408b      	lsls	r3, r1
 8011eaa:	1ac0      	subs	r0, r0, r3
 8011eac:	ab0e      	add	r3, sp, #56	; 0x38
 8011eae:	9504      	str	r5, [sp, #16]
 8011eb0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8011eb4:	f1ca 0317 	rsb	r3, sl, #23
 8011eb8:	fa40 fb03 	asr.w	fp, r0, r3
 8011ebc:	f1bb 0f00 	cmp.w	fp, #0
 8011ec0:	dd65      	ble.n	8011f8e <__kernel_rem_pio2+0x26e>
 8011ec2:	9b04      	ldr	r3, [sp, #16]
 8011ec4:	2200      	movs	r2, #0
 8011ec6:	3301      	adds	r3, #1
 8011ec8:	9304      	str	r3, [sp, #16]
 8011eca:	4615      	mov	r5, r2
 8011ecc:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8011ed0:	4294      	cmp	r4, r2
 8011ed2:	f300 809c 	bgt.w	801200e <__kernel_rem_pio2+0x2ee>
 8011ed6:	f1ba 0f00 	cmp.w	sl, #0
 8011eda:	dd07      	ble.n	8011eec <__kernel_rem_pio2+0x1cc>
 8011edc:	f1ba 0f01 	cmp.w	sl, #1
 8011ee0:	f000 80c0 	beq.w	8012064 <__kernel_rem_pio2+0x344>
 8011ee4:	f1ba 0f02 	cmp.w	sl, #2
 8011ee8:	f000 80c6 	beq.w	8012078 <__kernel_rem_pio2+0x358>
 8011eec:	f1bb 0f02 	cmp.w	fp, #2
 8011ef0:	d14d      	bne.n	8011f8e <__kernel_rem_pio2+0x26e>
 8011ef2:	4632      	mov	r2, r6
 8011ef4:	463b      	mov	r3, r7
 8011ef6:	4956      	ldr	r1, [pc, #344]	; (8012050 <__kernel_rem_pio2+0x330>)
 8011ef8:	2000      	movs	r0, #0
 8011efa:	f7ee f9c5 	bl	8000288 <__aeabi_dsub>
 8011efe:	4606      	mov	r6, r0
 8011f00:	460f      	mov	r7, r1
 8011f02:	2d00      	cmp	r5, #0
 8011f04:	d043      	beq.n	8011f8e <__kernel_rem_pio2+0x26e>
 8011f06:	4650      	mov	r0, sl
 8011f08:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8012040 <__kernel_rem_pio2+0x320>
 8011f0c:	f000 fbdc 	bl	80126c8 <scalbn>
 8011f10:	4630      	mov	r0, r6
 8011f12:	4639      	mov	r1, r7
 8011f14:	ec53 2b10 	vmov	r2, r3, d0
 8011f18:	f7ee f9b6 	bl	8000288 <__aeabi_dsub>
 8011f1c:	4606      	mov	r6, r0
 8011f1e:	460f      	mov	r7, r1
 8011f20:	e035      	b.n	8011f8e <__kernel_rem_pio2+0x26e>
 8011f22:	4b4c      	ldr	r3, [pc, #304]	; (8012054 <__kernel_rem_pio2+0x334>)
 8011f24:	2200      	movs	r2, #0
 8011f26:	4630      	mov	r0, r6
 8011f28:	4639      	mov	r1, r7
 8011f2a:	f7ee fb65 	bl	80005f8 <__aeabi_dmul>
 8011f2e:	f7ee fe13 	bl	8000b58 <__aeabi_d2iz>
 8011f32:	f7ee faf7 	bl	8000524 <__aeabi_i2d>
 8011f36:	4602      	mov	r2, r0
 8011f38:	460b      	mov	r3, r1
 8011f3a:	ec43 2b18 	vmov	d8, r2, r3
 8011f3e:	4b46      	ldr	r3, [pc, #280]	; (8012058 <__kernel_rem_pio2+0x338>)
 8011f40:	2200      	movs	r2, #0
 8011f42:	f7ee fb59 	bl	80005f8 <__aeabi_dmul>
 8011f46:	4602      	mov	r2, r0
 8011f48:	460b      	mov	r3, r1
 8011f4a:	4630      	mov	r0, r6
 8011f4c:	4639      	mov	r1, r7
 8011f4e:	f7ee f99b 	bl	8000288 <__aeabi_dsub>
 8011f52:	f7ee fe01 	bl	8000b58 <__aeabi_d2iz>
 8011f56:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011f5a:	f84b 0b04 	str.w	r0, [fp], #4
 8011f5e:	ec51 0b18 	vmov	r0, r1, d8
 8011f62:	f7ee f993 	bl	800028c <__adddf3>
 8011f66:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8011f6a:	4606      	mov	r6, r0
 8011f6c:	460f      	mov	r7, r1
 8011f6e:	e75b      	b.n	8011e28 <__kernel_rem_pio2+0x108>
 8011f70:	d106      	bne.n	8011f80 <__kernel_rem_pio2+0x260>
 8011f72:	1e63      	subs	r3, r4, #1
 8011f74:	aa0e      	add	r2, sp, #56	; 0x38
 8011f76:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8011f7a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 8011f7e:	e79d      	b.n	8011ebc <__kernel_rem_pio2+0x19c>
 8011f80:	4b36      	ldr	r3, [pc, #216]	; (801205c <__kernel_rem_pio2+0x33c>)
 8011f82:	2200      	movs	r2, #0
 8011f84:	f7ee fdbe 	bl	8000b04 <__aeabi_dcmpge>
 8011f88:	2800      	cmp	r0, #0
 8011f8a:	d13d      	bne.n	8012008 <__kernel_rem_pio2+0x2e8>
 8011f8c:	4683      	mov	fp, r0
 8011f8e:	2200      	movs	r2, #0
 8011f90:	2300      	movs	r3, #0
 8011f92:	4630      	mov	r0, r6
 8011f94:	4639      	mov	r1, r7
 8011f96:	f7ee fd97 	bl	8000ac8 <__aeabi_dcmpeq>
 8011f9a:	2800      	cmp	r0, #0
 8011f9c:	f000 80c0 	beq.w	8012120 <__kernel_rem_pio2+0x400>
 8011fa0:	1e65      	subs	r5, r4, #1
 8011fa2:	462b      	mov	r3, r5
 8011fa4:	2200      	movs	r2, #0
 8011fa6:	9902      	ldr	r1, [sp, #8]
 8011fa8:	428b      	cmp	r3, r1
 8011faa:	da6c      	bge.n	8012086 <__kernel_rem_pio2+0x366>
 8011fac:	2a00      	cmp	r2, #0
 8011fae:	f000 8089 	beq.w	80120c4 <__kernel_rem_pio2+0x3a4>
 8011fb2:	ab0e      	add	r3, sp, #56	; 0x38
 8011fb4:	f1aa 0a18 	sub.w	sl, sl, #24
 8011fb8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	f000 80ad 	beq.w	801211c <__kernel_rem_pio2+0x3fc>
 8011fc2:	4650      	mov	r0, sl
 8011fc4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8012040 <__kernel_rem_pio2+0x320>
 8011fc8:	f000 fb7e 	bl	80126c8 <scalbn>
 8011fcc:	ab9a      	add	r3, sp, #616	; 0x268
 8011fce:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8011fd2:	ec57 6b10 	vmov	r6, r7, d0
 8011fd6:	00ec      	lsls	r4, r5, #3
 8011fd8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8011fdc:	46aa      	mov	sl, r5
 8011fde:	f1ba 0f00 	cmp.w	sl, #0
 8011fe2:	f280 80d6 	bge.w	8012192 <__kernel_rem_pio2+0x472>
 8011fe6:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8012038 <__kernel_rem_pio2+0x318>
 8011fea:	462e      	mov	r6, r5
 8011fec:	2e00      	cmp	r6, #0
 8011fee:	f2c0 8104 	blt.w	80121fa <__kernel_rem_pio2+0x4da>
 8011ff2:	ab72      	add	r3, sp, #456	; 0x1c8
 8011ff4:	ed8d 8b06 	vstr	d8, [sp, #24]
 8011ff8:	f8df a064 	ldr.w	sl, [pc, #100]	; 8012060 <__kernel_rem_pio2+0x340>
 8011ffc:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8012000:	f04f 0800 	mov.w	r8, #0
 8012004:	1baf      	subs	r7, r5, r6
 8012006:	e0ea      	b.n	80121de <__kernel_rem_pio2+0x4be>
 8012008:	f04f 0b02 	mov.w	fp, #2
 801200c:	e759      	b.n	8011ec2 <__kernel_rem_pio2+0x1a2>
 801200e:	f8d8 3000 	ldr.w	r3, [r8]
 8012012:	b955      	cbnz	r5, 801202a <__kernel_rem_pio2+0x30a>
 8012014:	b123      	cbz	r3, 8012020 <__kernel_rem_pio2+0x300>
 8012016:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 801201a:	f8c8 3000 	str.w	r3, [r8]
 801201e:	2301      	movs	r3, #1
 8012020:	3201      	adds	r2, #1
 8012022:	f108 0804 	add.w	r8, r8, #4
 8012026:	461d      	mov	r5, r3
 8012028:	e752      	b.n	8011ed0 <__kernel_rem_pio2+0x1b0>
 801202a:	1acb      	subs	r3, r1, r3
 801202c:	f8c8 3000 	str.w	r3, [r8]
 8012030:	462b      	mov	r3, r5
 8012032:	e7f5      	b.n	8012020 <__kernel_rem_pio2+0x300>
 8012034:	f3af 8000 	nop.w
	...
 8012044:	3ff00000 	.word	0x3ff00000
 8012048:	0801fb48 	.word	0x0801fb48
 801204c:	40200000 	.word	0x40200000
 8012050:	3ff00000 	.word	0x3ff00000
 8012054:	3e700000 	.word	0x3e700000
 8012058:	41700000 	.word	0x41700000
 801205c:	3fe00000 	.word	0x3fe00000
 8012060:	0801fb08 	.word	0x0801fb08
 8012064:	1e62      	subs	r2, r4, #1
 8012066:	ab0e      	add	r3, sp, #56	; 0x38
 8012068:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801206c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8012070:	a90e      	add	r1, sp, #56	; 0x38
 8012072:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8012076:	e739      	b.n	8011eec <__kernel_rem_pio2+0x1cc>
 8012078:	1e62      	subs	r2, r4, #1
 801207a:	ab0e      	add	r3, sp, #56	; 0x38
 801207c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8012080:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8012084:	e7f4      	b.n	8012070 <__kernel_rem_pio2+0x350>
 8012086:	a90e      	add	r1, sp, #56	; 0x38
 8012088:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 801208c:	3b01      	subs	r3, #1
 801208e:	430a      	orrs	r2, r1
 8012090:	e789      	b.n	8011fa6 <__kernel_rem_pio2+0x286>
 8012092:	3301      	adds	r3, #1
 8012094:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8012098:	2900      	cmp	r1, #0
 801209a:	d0fa      	beq.n	8012092 <__kernel_rem_pio2+0x372>
 801209c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 801209e:	f502 721a 	add.w	r2, r2, #616	; 0x268
 80120a2:	446a      	add	r2, sp
 80120a4:	3a98      	subs	r2, #152	; 0x98
 80120a6:	920a      	str	r2, [sp, #40]	; 0x28
 80120a8:	9a08      	ldr	r2, [sp, #32]
 80120aa:	18e3      	adds	r3, r4, r3
 80120ac:	18a5      	adds	r5, r4, r2
 80120ae:	aa22      	add	r2, sp, #136	; 0x88
 80120b0:	f104 0801 	add.w	r8, r4, #1
 80120b4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 80120b8:	9304      	str	r3, [sp, #16]
 80120ba:	9b04      	ldr	r3, [sp, #16]
 80120bc:	4543      	cmp	r3, r8
 80120be:	da04      	bge.n	80120ca <__kernel_rem_pio2+0x3aa>
 80120c0:	461c      	mov	r4, r3
 80120c2:	e6a3      	b.n	8011e0c <__kernel_rem_pio2+0xec>
 80120c4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80120c6:	2301      	movs	r3, #1
 80120c8:	e7e4      	b.n	8012094 <__kernel_rem_pio2+0x374>
 80120ca:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80120cc:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80120d0:	f7ee fa28 	bl	8000524 <__aeabi_i2d>
 80120d4:	e8e5 0102 	strd	r0, r1, [r5], #8
 80120d8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80120da:	46ab      	mov	fp, r5
 80120dc:	461c      	mov	r4, r3
 80120de:	f04f 0900 	mov.w	r9, #0
 80120e2:	2600      	movs	r6, #0
 80120e4:	2700      	movs	r7, #0
 80120e6:	9b06      	ldr	r3, [sp, #24]
 80120e8:	4599      	cmp	r9, r3
 80120ea:	dd06      	ble.n	80120fa <__kernel_rem_pio2+0x3da>
 80120ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80120ee:	e8e3 6702 	strd	r6, r7, [r3], #8
 80120f2:	f108 0801 	add.w	r8, r8, #1
 80120f6:	930a      	str	r3, [sp, #40]	; 0x28
 80120f8:	e7df      	b.n	80120ba <__kernel_rem_pio2+0x39a>
 80120fa:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 80120fe:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8012102:	f7ee fa79 	bl	80005f8 <__aeabi_dmul>
 8012106:	4602      	mov	r2, r0
 8012108:	460b      	mov	r3, r1
 801210a:	4630      	mov	r0, r6
 801210c:	4639      	mov	r1, r7
 801210e:	f7ee f8bd 	bl	800028c <__adddf3>
 8012112:	f109 0901 	add.w	r9, r9, #1
 8012116:	4606      	mov	r6, r0
 8012118:	460f      	mov	r7, r1
 801211a:	e7e4      	b.n	80120e6 <__kernel_rem_pio2+0x3c6>
 801211c:	3d01      	subs	r5, #1
 801211e:	e748      	b.n	8011fb2 <__kernel_rem_pio2+0x292>
 8012120:	ec47 6b10 	vmov	d0, r6, r7
 8012124:	f1ca 0000 	rsb	r0, sl, #0
 8012128:	f000 face 	bl	80126c8 <scalbn>
 801212c:	ec57 6b10 	vmov	r6, r7, d0
 8012130:	4ba0      	ldr	r3, [pc, #640]	; (80123b4 <__kernel_rem_pio2+0x694>)
 8012132:	ee10 0a10 	vmov	r0, s0
 8012136:	2200      	movs	r2, #0
 8012138:	4639      	mov	r1, r7
 801213a:	f7ee fce3 	bl	8000b04 <__aeabi_dcmpge>
 801213e:	b1f8      	cbz	r0, 8012180 <__kernel_rem_pio2+0x460>
 8012140:	4b9d      	ldr	r3, [pc, #628]	; (80123b8 <__kernel_rem_pio2+0x698>)
 8012142:	2200      	movs	r2, #0
 8012144:	4630      	mov	r0, r6
 8012146:	4639      	mov	r1, r7
 8012148:	f7ee fa56 	bl	80005f8 <__aeabi_dmul>
 801214c:	f7ee fd04 	bl	8000b58 <__aeabi_d2iz>
 8012150:	4680      	mov	r8, r0
 8012152:	f7ee f9e7 	bl	8000524 <__aeabi_i2d>
 8012156:	4b97      	ldr	r3, [pc, #604]	; (80123b4 <__kernel_rem_pio2+0x694>)
 8012158:	2200      	movs	r2, #0
 801215a:	f7ee fa4d 	bl	80005f8 <__aeabi_dmul>
 801215e:	460b      	mov	r3, r1
 8012160:	4602      	mov	r2, r0
 8012162:	4639      	mov	r1, r7
 8012164:	4630      	mov	r0, r6
 8012166:	f7ee f88f 	bl	8000288 <__aeabi_dsub>
 801216a:	f7ee fcf5 	bl	8000b58 <__aeabi_d2iz>
 801216e:	1c65      	adds	r5, r4, #1
 8012170:	ab0e      	add	r3, sp, #56	; 0x38
 8012172:	f10a 0a18 	add.w	sl, sl, #24
 8012176:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 801217a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 801217e:	e720      	b.n	8011fc2 <__kernel_rem_pio2+0x2a2>
 8012180:	4630      	mov	r0, r6
 8012182:	4639      	mov	r1, r7
 8012184:	f7ee fce8 	bl	8000b58 <__aeabi_d2iz>
 8012188:	ab0e      	add	r3, sp, #56	; 0x38
 801218a:	4625      	mov	r5, r4
 801218c:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8012190:	e717      	b.n	8011fc2 <__kernel_rem_pio2+0x2a2>
 8012192:	ab0e      	add	r3, sp, #56	; 0x38
 8012194:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8012198:	f7ee f9c4 	bl	8000524 <__aeabi_i2d>
 801219c:	4632      	mov	r2, r6
 801219e:	463b      	mov	r3, r7
 80121a0:	f7ee fa2a 	bl	80005f8 <__aeabi_dmul>
 80121a4:	4b84      	ldr	r3, [pc, #528]	; (80123b8 <__kernel_rem_pio2+0x698>)
 80121a6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 80121aa:	2200      	movs	r2, #0
 80121ac:	4630      	mov	r0, r6
 80121ae:	4639      	mov	r1, r7
 80121b0:	f7ee fa22 	bl	80005f8 <__aeabi_dmul>
 80121b4:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 80121b8:	4606      	mov	r6, r0
 80121ba:	460f      	mov	r7, r1
 80121bc:	e70f      	b.n	8011fde <__kernel_rem_pio2+0x2be>
 80121be:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 80121c2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 80121c6:	f7ee fa17 	bl	80005f8 <__aeabi_dmul>
 80121ca:	4602      	mov	r2, r0
 80121cc:	460b      	mov	r3, r1
 80121ce:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80121d2:	f7ee f85b 	bl	800028c <__adddf3>
 80121d6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80121da:	f108 0801 	add.w	r8, r8, #1
 80121de:	9b02      	ldr	r3, [sp, #8]
 80121e0:	4598      	cmp	r8, r3
 80121e2:	dc01      	bgt.n	80121e8 <__kernel_rem_pio2+0x4c8>
 80121e4:	45b8      	cmp	r8, r7
 80121e6:	ddea      	ble.n	80121be <__kernel_rem_pio2+0x49e>
 80121e8:	ed9d 7b06 	vldr	d7, [sp, #24]
 80121ec:	ab4a      	add	r3, sp, #296	; 0x128
 80121ee:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80121f2:	ed87 7b00 	vstr	d7, [r7]
 80121f6:	3e01      	subs	r6, #1
 80121f8:	e6f8      	b.n	8011fec <__kernel_rem_pio2+0x2cc>
 80121fa:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 80121fc:	2b02      	cmp	r3, #2
 80121fe:	dc0b      	bgt.n	8012218 <__kernel_rem_pio2+0x4f8>
 8012200:	2b00      	cmp	r3, #0
 8012202:	dc35      	bgt.n	8012270 <__kernel_rem_pio2+0x550>
 8012204:	d059      	beq.n	80122ba <__kernel_rem_pio2+0x59a>
 8012206:	9b04      	ldr	r3, [sp, #16]
 8012208:	f003 0007 	and.w	r0, r3, #7
 801220c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8012210:	ecbd 8b02 	vpop	{d8}
 8012214:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012218:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 801221a:	2b03      	cmp	r3, #3
 801221c:	d1f3      	bne.n	8012206 <__kernel_rem_pio2+0x4e6>
 801221e:	ab4a      	add	r3, sp, #296	; 0x128
 8012220:	4423      	add	r3, r4
 8012222:	9306      	str	r3, [sp, #24]
 8012224:	461c      	mov	r4, r3
 8012226:	469a      	mov	sl, r3
 8012228:	9502      	str	r5, [sp, #8]
 801222a:	9b02      	ldr	r3, [sp, #8]
 801222c:	2b00      	cmp	r3, #0
 801222e:	f1aa 0a08 	sub.w	sl, sl, #8
 8012232:	dc6b      	bgt.n	801230c <__kernel_rem_pio2+0x5ec>
 8012234:	46aa      	mov	sl, r5
 8012236:	f1ba 0f01 	cmp.w	sl, #1
 801223a:	f1a4 0408 	sub.w	r4, r4, #8
 801223e:	f300 8085 	bgt.w	801234c <__kernel_rem_pio2+0x62c>
 8012242:	9c06      	ldr	r4, [sp, #24]
 8012244:	2000      	movs	r0, #0
 8012246:	3408      	adds	r4, #8
 8012248:	2100      	movs	r1, #0
 801224a:	2d01      	cmp	r5, #1
 801224c:	f300 809d 	bgt.w	801238a <__kernel_rem_pio2+0x66a>
 8012250:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8012254:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8012258:	f1bb 0f00 	cmp.w	fp, #0
 801225c:	f040 809b 	bne.w	8012396 <__kernel_rem_pio2+0x676>
 8012260:	9b01      	ldr	r3, [sp, #4]
 8012262:	e9c3 5600 	strd	r5, r6, [r3]
 8012266:	e9c3 7802 	strd	r7, r8, [r3, #8]
 801226a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 801226e:	e7ca      	b.n	8012206 <__kernel_rem_pio2+0x4e6>
 8012270:	3408      	adds	r4, #8
 8012272:	ab4a      	add	r3, sp, #296	; 0x128
 8012274:	441c      	add	r4, r3
 8012276:	462e      	mov	r6, r5
 8012278:	2000      	movs	r0, #0
 801227a:	2100      	movs	r1, #0
 801227c:	2e00      	cmp	r6, #0
 801227e:	da36      	bge.n	80122ee <__kernel_rem_pio2+0x5ce>
 8012280:	f1bb 0f00 	cmp.w	fp, #0
 8012284:	d039      	beq.n	80122fa <__kernel_rem_pio2+0x5da>
 8012286:	4602      	mov	r2, r0
 8012288:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 801228c:	9c01      	ldr	r4, [sp, #4]
 801228e:	e9c4 2300 	strd	r2, r3, [r4]
 8012292:	4602      	mov	r2, r0
 8012294:	460b      	mov	r3, r1
 8012296:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 801229a:	f7ed fff5 	bl	8000288 <__aeabi_dsub>
 801229e:	ae4c      	add	r6, sp, #304	; 0x130
 80122a0:	2401      	movs	r4, #1
 80122a2:	42a5      	cmp	r5, r4
 80122a4:	da2c      	bge.n	8012300 <__kernel_rem_pio2+0x5e0>
 80122a6:	f1bb 0f00 	cmp.w	fp, #0
 80122aa:	d002      	beq.n	80122b2 <__kernel_rem_pio2+0x592>
 80122ac:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80122b0:	4619      	mov	r1, r3
 80122b2:	9b01      	ldr	r3, [sp, #4]
 80122b4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80122b8:	e7a5      	b.n	8012206 <__kernel_rem_pio2+0x4e6>
 80122ba:	f504 731a 	add.w	r3, r4, #616	; 0x268
 80122be:	eb0d 0403 	add.w	r4, sp, r3
 80122c2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 80122c6:	2000      	movs	r0, #0
 80122c8:	2100      	movs	r1, #0
 80122ca:	2d00      	cmp	r5, #0
 80122cc:	da09      	bge.n	80122e2 <__kernel_rem_pio2+0x5c2>
 80122ce:	f1bb 0f00 	cmp.w	fp, #0
 80122d2:	d002      	beq.n	80122da <__kernel_rem_pio2+0x5ba>
 80122d4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80122d8:	4619      	mov	r1, r3
 80122da:	9b01      	ldr	r3, [sp, #4]
 80122dc:	e9c3 0100 	strd	r0, r1, [r3]
 80122e0:	e791      	b.n	8012206 <__kernel_rem_pio2+0x4e6>
 80122e2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80122e6:	f7ed ffd1 	bl	800028c <__adddf3>
 80122ea:	3d01      	subs	r5, #1
 80122ec:	e7ed      	b.n	80122ca <__kernel_rem_pio2+0x5aa>
 80122ee:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 80122f2:	f7ed ffcb 	bl	800028c <__adddf3>
 80122f6:	3e01      	subs	r6, #1
 80122f8:	e7c0      	b.n	801227c <__kernel_rem_pio2+0x55c>
 80122fa:	4602      	mov	r2, r0
 80122fc:	460b      	mov	r3, r1
 80122fe:	e7c5      	b.n	801228c <__kernel_rem_pio2+0x56c>
 8012300:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8012304:	f7ed ffc2 	bl	800028c <__adddf3>
 8012308:	3401      	adds	r4, #1
 801230a:	e7ca      	b.n	80122a2 <__kernel_rem_pio2+0x582>
 801230c:	e9da 8900 	ldrd	r8, r9, [sl]
 8012310:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8012314:	9b02      	ldr	r3, [sp, #8]
 8012316:	3b01      	subs	r3, #1
 8012318:	9302      	str	r3, [sp, #8]
 801231a:	4632      	mov	r2, r6
 801231c:	463b      	mov	r3, r7
 801231e:	4640      	mov	r0, r8
 8012320:	4649      	mov	r1, r9
 8012322:	f7ed ffb3 	bl	800028c <__adddf3>
 8012326:	e9cd 0108 	strd	r0, r1, [sp, #32]
 801232a:	4602      	mov	r2, r0
 801232c:	460b      	mov	r3, r1
 801232e:	4640      	mov	r0, r8
 8012330:	4649      	mov	r1, r9
 8012332:	f7ed ffa9 	bl	8000288 <__aeabi_dsub>
 8012336:	4632      	mov	r2, r6
 8012338:	463b      	mov	r3, r7
 801233a:	f7ed ffa7 	bl	800028c <__adddf3>
 801233e:	ed9d 7b08 	vldr	d7, [sp, #32]
 8012342:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8012346:	ed8a 7b00 	vstr	d7, [sl]
 801234a:	e76e      	b.n	801222a <__kernel_rem_pio2+0x50a>
 801234c:	e9d4 8900 	ldrd	r8, r9, [r4]
 8012350:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8012354:	4640      	mov	r0, r8
 8012356:	4632      	mov	r2, r6
 8012358:	463b      	mov	r3, r7
 801235a:	4649      	mov	r1, r9
 801235c:	f7ed ff96 	bl	800028c <__adddf3>
 8012360:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8012364:	4602      	mov	r2, r0
 8012366:	460b      	mov	r3, r1
 8012368:	4640      	mov	r0, r8
 801236a:	4649      	mov	r1, r9
 801236c:	f7ed ff8c 	bl	8000288 <__aeabi_dsub>
 8012370:	4632      	mov	r2, r6
 8012372:	463b      	mov	r3, r7
 8012374:	f7ed ff8a 	bl	800028c <__adddf3>
 8012378:	ed9d 7b02 	vldr	d7, [sp, #8]
 801237c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8012380:	ed84 7b00 	vstr	d7, [r4]
 8012384:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
 8012388:	e755      	b.n	8012236 <__kernel_rem_pio2+0x516>
 801238a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801238e:	f7ed ff7d 	bl	800028c <__adddf3>
 8012392:	3d01      	subs	r5, #1
 8012394:	e759      	b.n	801224a <__kernel_rem_pio2+0x52a>
 8012396:	9b01      	ldr	r3, [sp, #4]
 8012398:	9a01      	ldr	r2, [sp, #4]
 801239a:	601d      	str	r5, [r3, #0]
 801239c:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 80123a0:	605c      	str	r4, [r3, #4]
 80123a2:	609f      	str	r7, [r3, #8]
 80123a4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 80123a8:	60d3      	str	r3, [r2, #12]
 80123aa:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80123ae:	6110      	str	r0, [r2, #16]
 80123b0:	6153      	str	r3, [r2, #20]
 80123b2:	e728      	b.n	8012206 <__kernel_rem_pio2+0x4e6>
 80123b4:	41700000 	.word	0x41700000
 80123b8:	3e700000 	.word	0x3e700000
 80123bc:	00000000 	.word	0x00000000

080123c0 <__kernel_sin>:
 80123c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80123c4:	ed2d 8b04 	vpush	{d8-d9}
 80123c8:	eeb0 8a41 	vmov.f32	s16, s2
 80123cc:	eef0 8a61 	vmov.f32	s17, s3
 80123d0:	ec55 4b10 	vmov	r4, r5, d0
 80123d4:	b083      	sub	sp, #12
 80123d6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80123da:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 80123de:	9001      	str	r0, [sp, #4]
 80123e0:	da06      	bge.n	80123f0 <__kernel_sin+0x30>
 80123e2:	ee10 0a10 	vmov	r0, s0
 80123e6:	4629      	mov	r1, r5
 80123e8:	f7ee fbb6 	bl	8000b58 <__aeabi_d2iz>
 80123ec:	2800      	cmp	r0, #0
 80123ee:	d051      	beq.n	8012494 <__kernel_sin+0xd4>
 80123f0:	4622      	mov	r2, r4
 80123f2:	462b      	mov	r3, r5
 80123f4:	4620      	mov	r0, r4
 80123f6:	4629      	mov	r1, r5
 80123f8:	f7ee f8fe 	bl	80005f8 <__aeabi_dmul>
 80123fc:	4682      	mov	sl, r0
 80123fe:	468b      	mov	fp, r1
 8012400:	4602      	mov	r2, r0
 8012402:	460b      	mov	r3, r1
 8012404:	4620      	mov	r0, r4
 8012406:	4629      	mov	r1, r5
 8012408:	f7ee f8f6 	bl	80005f8 <__aeabi_dmul>
 801240c:	a341      	add	r3, pc, #260	; (adr r3, 8012514 <__kernel_sin+0x154>)
 801240e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012412:	4680      	mov	r8, r0
 8012414:	4689      	mov	r9, r1
 8012416:	4650      	mov	r0, sl
 8012418:	4659      	mov	r1, fp
 801241a:	f7ee f8ed 	bl	80005f8 <__aeabi_dmul>
 801241e:	a33f      	add	r3, pc, #252	; (adr r3, 801251c <__kernel_sin+0x15c>)
 8012420:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012424:	f7ed ff30 	bl	8000288 <__aeabi_dsub>
 8012428:	4652      	mov	r2, sl
 801242a:	465b      	mov	r3, fp
 801242c:	f7ee f8e4 	bl	80005f8 <__aeabi_dmul>
 8012430:	a33c      	add	r3, pc, #240	; (adr r3, 8012524 <__kernel_sin+0x164>)
 8012432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012436:	f7ed ff29 	bl	800028c <__adddf3>
 801243a:	4652      	mov	r2, sl
 801243c:	465b      	mov	r3, fp
 801243e:	f7ee f8db 	bl	80005f8 <__aeabi_dmul>
 8012442:	a33a      	add	r3, pc, #232	; (adr r3, 801252c <__kernel_sin+0x16c>)
 8012444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012448:	f7ed ff1e 	bl	8000288 <__aeabi_dsub>
 801244c:	4652      	mov	r2, sl
 801244e:	465b      	mov	r3, fp
 8012450:	f7ee f8d2 	bl	80005f8 <__aeabi_dmul>
 8012454:	a337      	add	r3, pc, #220	; (adr r3, 8012534 <__kernel_sin+0x174>)
 8012456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801245a:	f7ed ff17 	bl	800028c <__adddf3>
 801245e:	9b01      	ldr	r3, [sp, #4]
 8012460:	4606      	mov	r6, r0
 8012462:	460f      	mov	r7, r1
 8012464:	b9eb      	cbnz	r3, 80124a2 <__kernel_sin+0xe2>
 8012466:	4602      	mov	r2, r0
 8012468:	460b      	mov	r3, r1
 801246a:	4650      	mov	r0, sl
 801246c:	4659      	mov	r1, fp
 801246e:	f7ee f8c3 	bl	80005f8 <__aeabi_dmul>
 8012472:	a325      	add	r3, pc, #148	; (adr r3, 8012508 <__kernel_sin+0x148>)
 8012474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012478:	f7ed ff06 	bl	8000288 <__aeabi_dsub>
 801247c:	4642      	mov	r2, r8
 801247e:	464b      	mov	r3, r9
 8012480:	f7ee f8ba 	bl	80005f8 <__aeabi_dmul>
 8012484:	4602      	mov	r2, r0
 8012486:	460b      	mov	r3, r1
 8012488:	4620      	mov	r0, r4
 801248a:	4629      	mov	r1, r5
 801248c:	f7ed fefe 	bl	800028c <__adddf3>
 8012490:	4604      	mov	r4, r0
 8012492:	460d      	mov	r5, r1
 8012494:	ec45 4b10 	vmov	d0, r4, r5
 8012498:	b003      	add	sp, #12
 801249a:	ecbd 8b04 	vpop	{d8-d9}
 801249e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80124a2:	4b1b      	ldr	r3, [pc, #108]	; (8012510 <__kernel_sin+0x150>)
 80124a4:	ec51 0b18 	vmov	r0, r1, d8
 80124a8:	2200      	movs	r2, #0
 80124aa:	f7ee f8a5 	bl	80005f8 <__aeabi_dmul>
 80124ae:	4632      	mov	r2, r6
 80124b0:	ec41 0b19 	vmov	d9, r0, r1
 80124b4:	463b      	mov	r3, r7
 80124b6:	4640      	mov	r0, r8
 80124b8:	4649      	mov	r1, r9
 80124ba:	f7ee f89d 	bl	80005f8 <__aeabi_dmul>
 80124be:	4602      	mov	r2, r0
 80124c0:	460b      	mov	r3, r1
 80124c2:	ec51 0b19 	vmov	r0, r1, d9
 80124c6:	f7ed fedf 	bl	8000288 <__aeabi_dsub>
 80124ca:	4652      	mov	r2, sl
 80124cc:	465b      	mov	r3, fp
 80124ce:	f7ee f893 	bl	80005f8 <__aeabi_dmul>
 80124d2:	ec53 2b18 	vmov	r2, r3, d8
 80124d6:	f7ed fed7 	bl	8000288 <__aeabi_dsub>
 80124da:	a30b      	add	r3, pc, #44	; (adr r3, 8012508 <__kernel_sin+0x148>)
 80124dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80124e0:	4606      	mov	r6, r0
 80124e2:	460f      	mov	r7, r1
 80124e4:	4640      	mov	r0, r8
 80124e6:	4649      	mov	r1, r9
 80124e8:	f7ee f886 	bl	80005f8 <__aeabi_dmul>
 80124ec:	4602      	mov	r2, r0
 80124ee:	460b      	mov	r3, r1
 80124f0:	4630      	mov	r0, r6
 80124f2:	4639      	mov	r1, r7
 80124f4:	f7ed feca 	bl	800028c <__adddf3>
 80124f8:	4602      	mov	r2, r0
 80124fa:	460b      	mov	r3, r1
 80124fc:	4620      	mov	r0, r4
 80124fe:	4629      	mov	r1, r5
 8012500:	f7ed fec2 	bl	8000288 <__aeabi_dsub>
 8012504:	e7c4      	b.n	8012490 <__kernel_sin+0xd0>
 8012506:	bf00      	nop
 8012508:	55555549 	.word	0x55555549
 801250c:	3fc55555 	.word	0x3fc55555
 8012510:	3fe00000 	.word	0x3fe00000
 8012514:	5acfd57c 	.word	0x5acfd57c
 8012518:	3de5d93a 	.word	0x3de5d93a
 801251c:	8a2b9ceb 	.word	0x8a2b9ceb
 8012520:	3e5ae5e6 	.word	0x3e5ae5e6
 8012524:	57b1fe7d 	.word	0x57b1fe7d
 8012528:	3ec71de3 	.word	0x3ec71de3
 801252c:	19c161d5 	.word	0x19c161d5
 8012530:	3f2a01a0 	.word	0x3f2a01a0
 8012534:	1110f8a6 	.word	0x1110f8a6
 8012538:	3f811111 	.word	0x3f811111

0801253c <with_errno>:
 801253c:	b570      	push	{r4, r5, r6, lr}
 801253e:	4604      	mov	r4, r0
 8012540:	460d      	mov	r5, r1
 8012542:	4616      	mov	r6, r2
 8012544:	f7fd fd62 	bl	801000c <__errno>
 8012548:	4629      	mov	r1, r5
 801254a:	6006      	str	r6, [r0, #0]
 801254c:	4620      	mov	r0, r4
 801254e:	bd70      	pop	{r4, r5, r6, pc}

08012550 <xflow>:
 8012550:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012552:	4614      	mov	r4, r2
 8012554:	461d      	mov	r5, r3
 8012556:	b108      	cbz	r0, 801255c <xflow+0xc>
 8012558:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 801255c:	e9cd 2300 	strd	r2, r3, [sp]
 8012560:	e9dd 2300 	ldrd	r2, r3, [sp]
 8012564:	4620      	mov	r0, r4
 8012566:	4629      	mov	r1, r5
 8012568:	f7ee f846 	bl	80005f8 <__aeabi_dmul>
 801256c:	2222      	movs	r2, #34	; 0x22
 801256e:	b003      	add	sp, #12
 8012570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012574:	f7ff bfe2 	b.w	801253c <with_errno>

08012578 <__math_uflow>:
 8012578:	b508      	push	{r3, lr}
 801257a:	2200      	movs	r2, #0
 801257c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8012580:	f7ff ffe6 	bl	8012550 <xflow>
 8012584:	ec41 0b10 	vmov	d0, r0, r1
 8012588:	bd08      	pop	{r3, pc}

0801258a <__math_oflow>:
 801258a:	b508      	push	{r3, lr}
 801258c:	2200      	movs	r2, #0
 801258e:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 8012592:	f7ff ffdd 	bl	8012550 <xflow>
 8012596:	ec41 0b10 	vmov	d0, r0, r1
 801259a:	bd08      	pop	{r3, pc}

0801259c <fabs>:
 801259c:	ec51 0b10 	vmov	r0, r1, d0
 80125a0:	ee10 2a10 	vmov	r2, s0
 80125a4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80125a8:	ec43 2b10 	vmov	d0, r2, r3
 80125ac:	4770      	bx	lr

080125ae <finite>:
 80125ae:	b082      	sub	sp, #8
 80125b0:	ed8d 0b00 	vstr	d0, [sp]
 80125b4:	9801      	ldr	r0, [sp, #4]
 80125b6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 80125ba:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80125be:	0fc0      	lsrs	r0, r0, #31
 80125c0:	b002      	add	sp, #8
 80125c2:	4770      	bx	lr
 80125c4:	0000      	movs	r0, r0
	...

080125c8 <floor>:
 80125c8:	ec51 0b10 	vmov	r0, r1, d0
 80125cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80125d0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80125d4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 80125d8:	2e13      	cmp	r6, #19
 80125da:	ee10 5a10 	vmov	r5, s0
 80125de:	ee10 8a10 	vmov	r8, s0
 80125e2:	460c      	mov	r4, r1
 80125e4:	dc32      	bgt.n	801264c <floor+0x84>
 80125e6:	2e00      	cmp	r6, #0
 80125e8:	da14      	bge.n	8012614 <floor+0x4c>
 80125ea:	a333      	add	r3, pc, #204	; (adr r3, 80126b8 <floor+0xf0>)
 80125ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80125f0:	f7ed fe4c 	bl	800028c <__adddf3>
 80125f4:	2200      	movs	r2, #0
 80125f6:	2300      	movs	r3, #0
 80125f8:	f7ee fa8e 	bl	8000b18 <__aeabi_dcmpgt>
 80125fc:	b138      	cbz	r0, 801260e <floor+0x46>
 80125fe:	2c00      	cmp	r4, #0
 8012600:	da57      	bge.n	80126b2 <floor+0xea>
 8012602:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8012606:	431d      	orrs	r5, r3
 8012608:	d001      	beq.n	801260e <floor+0x46>
 801260a:	4c2d      	ldr	r4, [pc, #180]	; (80126c0 <floor+0xf8>)
 801260c:	2500      	movs	r5, #0
 801260e:	4621      	mov	r1, r4
 8012610:	4628      	mov	r0, r5
 8012612:	e025      	b.n	8012660 <floor+0x98>
 8012614:	4f2b      	ldr	r7, [pc, #172]	; (80126c4 <floor+0xfc>)
 8012616:	4137      	asrs	r7, r6
 8012618:	ea01 0307 	and.w	r3, r1, r7
 801261c:	4303      	orrs	r3, r0
 801261e:	d01f      	beq.n	8012660 <floor+0x98>
 8012620:	a325      	add	r3, pc, #148	; (adr r3, 80126b8 <floor+0xf0>)
 8012622:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012626:	f7ed fe31 	bl	800028c <__adddf3>
 801262a:	2200      	movs	r2, #0
 801262c:	2300      	movs	r3, #0
 801262e:	f7ee fa73 	bl	8000b18 <__aeabi_dcmpgt>
 8012632:	2800      	cmp	r0, #0
 8012634:	d0eb      	beq.n	801260e <floor+0x46>
 8012636:	2c00      	cmp	r4, #0
 8012638:	bfbe      	ittt	lt
 801263a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801263e:	fa43 f606 	asrlt.w	r6, r3, r6
 8012642:	19a4      	addlt	r4, r4, r6
 8012644:	ea24 0407 	bic.w	r4, r4, r7
 8012648:	2500      	movs	r5, #0
 801264a:	e7e0      	b.n	801260e <floor+0x46>
 801264c:	2e33      	cmp	r6, #51	; 0x33
 801264e:	dd0b      	ble.n	8012668 <floor+0xa0>
 8012650:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8012654:	d104      	bne.n	8012660 <floor+0x98>
 8012656:	ee10 2a10 	vmov	r2, s0
 801265a:	460b      	mov	r3, r1
 801265c:	f7ed fe16 	bl	800028c <__adddf3>
 8012660:	ec41 0b10 	vmov	d0, r0, r1
 8012664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012668:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801266c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8012670:	fa23 f707 	lsr.w	r7, r3, r7
 8012674:	4207      	tst	r7, r0
 8012676:	d0f3      	beq.n	8012660 <floor+0x98>
 8012678:	a30f      	add	r3, pc, #60	; (adr r3, 80126b8 <floor+0xf0>)
 801267a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801267e:	f7ed fe05 	bl	800028c <__adddf3>
 8012682:	2200      	movs	r2, #0
 8012684:	2300      	movs	r3, #0
 8012686:	f7ee fa47 	bl	8000b18 <__aeabi_dcmpgt>
 801268a:	2800      	cmp	r0, #0
 801268c:	d0bf      	beq.n	801260e <floor+0x46>
 801268e:	2c00      	cmp	r4, #0
 8012690:	da02      	bge.n	8012698 <floor+0xd0>
 8012692:	2e14      	cmp	r6, #20
 8012694:	d103      	bne.n	801269e <floor+0xd6>
 8012696:	3401      	adds	r4, #1
 8012698:	ea25 0507 	bic.w	r5, r5, r7
 801269c:	e7b7      	b.n	801260e <floor+0x46>
 801269e:	2301      	movs	r3, #1
 80126a0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80126a4:	fa03 f606 	lsl.w	r6, r3, r6
 80126a8:	4435      	add	r5, r6
 80126aa:	4545      	cmp	r5, r8
 80126ac:	bf38      	it	cc
 80126ae:	18e4      	addcc	r4, r4, r3
 80126b0:	e7f2      	b.n	8012698 <floor+0xd0>
 80126b2:	2500      	movs	r5, #0
 80126b4:	462c      	mov	r4, r5
 80126b6:	e7aa      	b.n	801260e <floor+0x46>
 80126b8:	8800759c 	.word	0x8800759c
 80126bc:	7e37e43c 	.word	0x7e37e43c
 80126c0:	bff00000 	.word	0xbff00000
 80126c4:	000fffff 	.word	0x000fffff

080126c8 <scalbn>:
 80126c8:	b570      	push	{r4, r5, r6, lr}
 80126ca:	ec55 4b10 	vmov	r4, r5, d0
 80126ce:	f3c5 520a 	ubfx	r2, r5, #20, #11
 80126d2:	4606      	mov	r6, r0
 80126d4:	462b      	mov	r3, r5
 80126d6:	b99a      	cbnz	r2, 8012700 <scalbn+0x38>
 80126d8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80126dc:	4323      	orrs	r3, r4
 80126de:	d036      	beq.n	801274e <scalbn+0x86>
 80126e0:	4b39      	ldr	r3, [pc, #228]	; (80127c8 <scalbn+0x100>)
 80126e2:	4629      	mov	r1, r5
 80126e4:	ee10 0a10 	vmov	r0, s0
 80126e8:	2200      	movs	r2, #0
 80126ea:	f7ed ff85 	bl	80005f8 <__aeabi_dmul>
 80126ee:	4b37      	ldr	r3, [pc, #220]	; (80127cc <scalbn+0x104>)
 80126f0:	429e      	cmp	r6, r3
 80126f2:	4604      	mov	r4, r0
 80126f4:	460d      	mov	r5, r1
 80126f6:	da10      	bge.n	801271a <scalbn+0x52>
 80126f8:	a32b      	add	r3, pc, #172	; (adr r3, 80127a8 <scalbn+0xe0>)
 80126fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80126fe:	e03a      	b.n	8012776 <scalbn+0xae>
 8012700:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8012704:	428a      	cmp	r2, r1
 8012706:	d10c      	bne.n	8012722 <scalbn+0x5a>
 8012708:	ee10 2a10 	vmov	r2, s0
 801270c:	4620      	mov	r0, r4
 801270e:	4629      	mov	r1, r5
 8012710:	f7ed fdbc 	bl	800028c <__adddf3>
 8012714:	4604      	mov	r4, r0
 8012716:	460d      	mov	r5, r1
 8012718:	e019      	b.n	801274e <scalbn+0x86>
 801271a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801271e:	460b      	mov	r3, r1
 8012720:	3a36      	subs	r2, #54	; 0x36
 8012722:	4432      	add	r2, r6
 8012724:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8012728:	428a      	cmp	r2, r1
 801272a:	dd08      	ble.n	801273e <scalbn+0x76>
 801272c:	2d00      	cmp	r5, #0
 801272e:	a120      	add	r1, pc, #128	; (adr r1, 80127b0 <scalbn+0xe8>)
 8012730:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012734:	da1c      	bge.n	8012770 <scalbn+0xa8>
 8012736:	a120      	add	r1, pc, #128	; (adr r1, 80127b8 <scalbn+0xf0>)
 8012738:	e9d1 0100 	ldrd	r0, r1, [r1]
 801273c:	e018      	b.n	8012770 <scalbn+0xa8>
 801273e:	2a00      	cmp	r2, #0
 8012740:	dd08      	ble.n	8012754 <scalbn+0x8c>
 8012742:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012746:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801274a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801274e:	ec45 4b10 	vmov	d0, r4, r5
 8012752:	bd70      	pop	{r4, r5, r6, pc}
 8012754:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8012758:	da19      	bge.n	801278e <scalbn+0xc6>
 801275a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801275e:	429e      	cmp	r6, r3
 8012760:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8012764:	dd0a      	ble.n	801277c <scalbn+0xb4>
 8012766:	a112      	add	r1, pc, #72	; (adr r1, 80127b0 <scalbn+0xe8>)
 8012768:	e9d1 0100 	ldrd	r0, r1, [r1]
 801276c:	2b00      	cmp	r3, #0
 801276e:	d1e2      	bne.n	8012736 <scalbn+0x6e>
 8012770:	a30f      	add	r3, pc, #60	; (adr r3, 80127b0 <scalbn+0xe8>)
 8012772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8012776:	f7ed ff3f 	bl	80005f8 <__aeabi_dmul>
 801277a:	e7cb      	b.n	8012714 <scalbn+0x4c>
 801277c:	a10a      	add	r1, pc, #40	; (adr r1, 80127a8 <scalbn+0xe0>)
 801277e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d0b8      	beq.n	80126f8 <scalbn+0x30>
 8012786:	a10e      	add	r1, pc, #56	; (adr r1, 80127c0 <scalbn+0xf8>)
 8012788:	e9d1 0100 	ldrd	r0, r1, [r1]
 801278c:	e7b4      	b.n	80126f8 <scalbn+0x30>
 801278e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8012792:	3236      	adds	r2, #54	; 0x36
 8012794:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8012798:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 801279c:	4620      	mov	r0, r4
 801279e:	4b0c      	ldr	r3, [pc, #48]	; (80127d0 <scalbn+0x108>)
 80127a0:	2200      	movs	r2, #0
 80127a2:	e7e8      	b.n	8012776 <scalbn+0xae>
 80127a4:	f3af 8000 	nop.w
 80127a8:	c2f8f359 	.word	0xc2f8f359
 80127ac:	01a56e1f 	.word	0x01a56e1f
 80127b0:	8800759c 	.word	0x8800759c
 80127b4:	7e37e43c 	.word	0x7e37e43c
 80127b8:	8800759c 	.word	0x8800759c
 80127bc:	fe37e43c 	.word	0xfe37e43c
 80127c0:	c2f8f359 	.word	0xc2f8f359
 80127c4:	81a56e1f 	.word	0x81a56e1f
 80127c8:	43500000 	.word	0x43500000
 80127cc:	ffff3cb0 	.word	0xffff3cb0
 80127d0:	3c900000 	.word	0x3c900000

080127d4 <_init>:
 80127d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127d6:	bf00      	nop
 80127d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127da:	bc08      	pop	{r3}
 80127dc:	469e      	mov	lr, r3
 80127de:	4770      	bx	lr

080127e0 <_fini>:
 80127e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80127e2:	bf00      	nop
 80127e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80127e6:	bc08      	pop	{r3}
 80127e8:	469e      	mov	lr, r3
 80127ea:	4770      	bx	lr
