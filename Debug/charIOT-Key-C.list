
charIOT-Key-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c314  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000890  0800c4a8  0800c4a8  0001c4a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cd38  0800cd38  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800cd38  0800cd38  0001cd38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cd40  0800cd40  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cd40  0800cd40  0001cd40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cd44  0800cd44  0001cd44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800cd48  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aa4  200000a8  0800cdf0  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000b4c  0800cdf0  00020b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000669ec  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b94  00000000  00000000  00086ac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000046c0  00000000  00000000  0008c658  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004438  00000000  00000000  00090d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005b80  00000000  00000000  00095150  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003126c  00000000  00000000  0009acd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104eab  00000000  00000000  000cbf3c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d0de7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014270  00000000  00000000  001d0e38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c48c 	.word	0x0800c48c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800c48c 	.word	0x0800c48c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b084      	sub	sp, #16
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	7c1b      	ldrb	r3, [r3, #16]
 8000f5a:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f62:	461a      	mov	r2, r3
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	fb02 f303 	mul.w	r3, r2, r3
 8000f6a:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000f6c:	68fb      	ldr	r3, [r7, #12]
 8000f6e:	00db      	lsls	r3, r3, #3
 8000f70:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f76:	68fa      	ldr	r2, [r7, #12]
 8000f78:	2100      	movs	r1, #0
 8000f7a:	4618      	mov	r0, r3
 8000f7c:	f008 fef0 	bl	8009d60 <memset>
}
 8000f80:	bf00      	nop
 8000f82:	3710      	adds	r7, #16
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}

08000f88 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b086      	sub	sp, #24
 8000f8c:	af02      	add	r7, sp, #8
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	460b      	mov	r3, r1
 8000f92:	70fb      	strb	r3, [r7, #3]
 8000f94:	4613      	mov	r3, r2
 8000f96:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	7c1b      	ldrb	r3, [r3, #16]
 8000f9e:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000fa0:	78fb      	ldrb	r3, [r7, #3]
 8000fa2:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000fa8:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000faa:	7bfb      	ldrb	r3, [r7, #15]
 8000fac:	b29b      	uxth	r3, r3
 8000fae:	89ba      	ldrh	r2, [r7, #12]
 8000fb0:	fb12 f303 	smulbb	r3, r2, r3
 8000fb4:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000fb6:	89bb      	ldrh	r3, [r7, #12]
 8000fb8:	00db      	lsls	r3, r3, #3
 8000fba:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000fbc:	89bb      	ldrh	r3, [r7, #12]
 8000fbe:	68ba      	ldr	r2, [r7, #8]
 8000fc0:	4413      	add	r3, r2
 8000fc2:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000fc4:	7bf9      	ldrb	r1, [r7, #15]
 8000fc6:	78ba      	ldrb	r2, [r7, #2]
 8000fc8:	68bb      	ldr	r3, [r7, #8]
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	460b      	mov	r3, r1
 8000fce:	2100      	movs	r1, #0
 8000fd0:	6878      	ldr	r0, [r7, #4]
 8000fd2:	f001 fc96 	bl	8002902 <u8x8_DrawTile>
}
 8000fd6:	bf00      	nop
 8000fd8:	3710      	adds	r7, #16
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ff0:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000ff2:	687b      	ldr	r3, [r7, #4]
 8000ff4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ff8:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	7c5b      	ldrb	r3, [r3, #17]
 8001000:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8001002:	7bba      	ldrb	r2, [r7, #14]
 8001004:	7bfb      	ldrb	r3, [r7, #15]
 8001006:	4619      	mov	r1, r3
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f7ff ffbd 	bl	8000f88 <u8g2_send_tile_row>
    src_row++;
 800100e:	7bfb      	ldrb	r3, [r7, #15]
 8001010:	3301      	adds	r3, #1
 8001012:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8001014:	7bbb      	ldrb	r3, [r7, #14]
 8001016:	3301      	adds	r3, #1
 8001018:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 800101a:	7bfa      	ldrb	r2, [r7, #15]
 800101c:	7b7b      	ldrb	r3, [r7, #13]
 800101e:	429a      	cmp	r2, r3
 8001020:	d203      	bcs.n	800102a <u8g2_send_buffer+0x4c>
 8001022:	7bba      	ldrb	r2, [r7, #14]
 8001024:	7b3b      	ldrb	r3, [r7, #12]
 8001026:	429a      	cmp	r2, r3
 8001028:	d3eb      	bcc.n	8001002 <u8g2_send_buffer+0x24>
}
 800102a:	bf00      	nop
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}

08001032 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8001032:	b580      	push	{r7, lr}
 8001034:	b082      	sub	sp, #8
 8001036:	af00      	add	r7, sp, #0
 8001038:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 800103a:	6878      	ldr	r0, [r7, #4]
 800103c:	f7ff ffcf 	bl	8000fde <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8001040:	6878      	ldr	r0, [r7, #4]
 8001042:	f001 fcaf 	bl	80029a4 <u8x8_RefreshDisplay>
}
 8001046:	bf00      	nop
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}

0800104e <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
 8001054:	6078      	str	r0, [r7, #4]
 8001056:	460b      	mov	r3, r1
 8001058:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	78fa      	ldrb	r2, [r7, #3]
 800105e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	4798      	blx	r3
}
 8001076:	bf00      	nop
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}

0800107e <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 800107e:	b580      	push	{r7, lr}
 8001080:	b082      	sub	sp, #8
 8001082:	af00      	add	r7, sp, #0
 8001084:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 800108c:	2b00      	cmp	r3, #0
 800108e:	d002      	beq.n	8001096 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8001090:	6878      	ldr	r0, [r7, #4]
 8001092:	f7ff ff5b 	bl	8000f4c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001096:	2100      	movs	r1, #0
 8001098:	6878      	ldr	r0, [r7, #4]
 800109a:	f7ff ffd8 	bl	800104e <u8g2_SetBufferCurrTileRow>
}
 800109e:	bf00      	nop
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}

080010a6 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80010a6:	b580      	push	{r7, lr}
 80010a8:	b084      	sub	sp, #16
 80010aa:	af00      	add	r7, sp, #0
 80010ac:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80010ae:	6878      	ldr	r0, [r7, #4]
 80010b0:	f7ff ff95 	bl	8000fde <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010ba:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80010c2:	7bfb      	ldrb	r3, [r7, #15]
 80010c4:	4413      	add	r3, r2
 80010c6:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	7c5b      	ldrb	r3, [r3, #17]
 80010ce:	7bfa      	ldrb	r2, [r7, #15]
 80010d0:	429a      	cmp	r2, r3
 80010d2:	d304      	bcc.n	80010de <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80010d4:	6878      	ldr	r0, [r7, #4]
 80010d6:	f001 fc65 	bl	80029a4 <u8x8_RefreshDisplay>
    return 0;
 80010da:	2300      	movs	r3, #0
 80010dc:	e00d      	b.n	80010fa <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d002      	beq.n	80010ee <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff2f 	bl	8000f4c <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	4619      	mov	r1, r3
 80010f2:	6878      	ldr	r0, [r7, #4]
 80010f4:	f7ff ffab 	bl	800104e <u8g2_SetBufferCurrTileRow>
  return 1;
 80010f8:	2301      	movs	r3, #1
}
 80010fa:	4618      	mov	r0, r3
 80010fc:	3710      	adds	r7, #16
 80010fe:	46bd      	mov	sp, r7
 8001100:	bd80      	pop	{r7, pc}

08001102 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001102:	b580      	push	{r7, lr}
 8001104:	b082      	sub	sp, #8
 8001106:	af00      	add	r7, sp, #0
 8001108:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800110a:	6878      	ldr	r0, [r7, #4]
 800110c:	f7ff ffb7 	bl	800107e <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001110:	6878      	ldr	r0, [r7, #4]
 8001112:	f7ff ffc8 	bl	80010a6 <u8g2_NextPage>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d1f9      	bne.n	8001110 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800111c:	2100      	movs	r1, #0
 800111e:	6878      	ldr	r0, [r7, #4]
 8001120:	f7ff ff95 	bl	800104e <u8g2_SetBufferCurrTileRow>
}
 8001124:	bf00      	nop
 8001126:	3708      	adds	r7, #8
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 800112c:	b480      	push	{r7}
 800112e:	b083      	sub	sp, #12
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	2204      	movs	r2, #4
 8001138:	701a      	strb	r2, [r3, #0]
  return buf;
 800113a:	4b03      	ldr	r3, [pc, #12]	; (8001148 <u8g2_m_16_4_f+0x1c>)
  #endif
}
 800113c:	4618      	mov	r0, r3
 800113e:	370c      	adds	r7, #12
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr
 8001148:	200000c4 	.word	0x200000c4

0800114c <u8g2_Setup_ssd1305_i2c_128x32_noname_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1305 f */
void u8g2_Setup_ssd1305_i2c_128x32_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	b088      	sub	sp, #32
 8001150:	af02      	add	r7, sp, #8
 8001152:	60f8      	str	r0, [r7, #12]
 8001154:	60b9      	str	r1, [r7, #8]
 8001156:	607a      	str	r2, [r7, #4]
 8001158:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1305_128x32_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	9300      	str	r3, [sp, #0]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	4a0b      	ldr	r2, [pc, #44]	; (8001190 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x44>)
 8001162:	490c      	ldr	r1, [pc, #48]	; (8001194 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x48>)
 8001164:	68f8      	ldr	r0, [r7, #12]
 8001166:	f001 fc7d 	bl	8002a64 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 800116a:	f107 0313 	add.w	r3, r7, #19
 800116e:	4618      	mov	r0, r3
 8001170:	f7ff ffdc 	bl	800112c <u8g2_m_16_4_f>
 8001174:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8001176:	7cfa      	ldrb	r2, [r7, #19]
 8001178:	68bb      	ldr	r3, [r7, #8]
 800117a:	9300      	str	r3, [sp, #0]
 800117c:	4b06      	ldr	r3, [pc, #24]	; (8001198 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x4c>)
 800117e:	6979      	ldr	r1, [r7, #20]
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f000 ffc4 	bl	800210e <u8g2_SetupBuffer>
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	080025f9 	.word	0x080025f9
 8001194:	080027b9 	.word	0x080027b9
 8001198:	08001f91 	.word	0x08001f91

0800119c <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 800119c:	b480      	push	{r7}
 800119e:	b083      	sub	sp, #12
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
 80011a4:	460b      	mov	r3, r1
 80011a6:	70fb      	strb	r3, [r7, #3]
  font += offset;
 80011a8:	78fb      	ldrb	r3, [r7, #3]
 80011aa:	687a      	ldr	r2, [r7, #4]
 80011ac:	4413      	add	r3, r2
 80011ae:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	781b      	ldrb	r3, [r3, #0]
}
 80011b4:	4618      	mov	r0, r3
 80011b6:	370c      	adds	r7, #12
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 80011c0:	b480      	push	{r7}
 80011c2:	b085      	sub	sp, #20
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	460b      	mov	r3, r1
 80011ca:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 80011cc:	78fb      	ldrb	r3, [r7, #3]
 80011ce:	687a      	ldr	r2, [r7, #4]
 80011d0:	4413      	add	r3, r2
 80011d2:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	81fb      	strh	r3, [r7, #14]
    font++;
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	3301      	adds	r3, #1
 80011de:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 80011e0:	89fb      	ldrh	r3, [r7, #14]
 80011e2:	021b      	lsls	r3, r3, #8
 80011e4:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	781b      	ldrb	r3, [r3, #0]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	89fb      	ldrh	r3, [r7, #14]
 80011ee:	4413      	add	r3, r2
 80011f0:	81fb      	strh	r3, [r7, #14]
    return pos;
 80011f2:	89fb      	ldrh	r3, [r7, #14]
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3714      	adds	r7, #20
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	b082      	sub	sp, #8
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
 8001208:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800120a:	2100      	movs	r1, #0
 800120c:	6838      	ldr	r0, [r7, #0]
 800120e:	f7ff ffc5 	bl	800119c <u8g2_font_get_byte>
 8001212:	4603      	mov	r3, r0
 8001214:	461a      	mov	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800121a:	2101      	movs	r1, #1
 800121c:	6838      	ldr	r0, [r7, #0]
 800121e:	f7ff ffbd 	bl	800119c <u8g2_font_get_byte>
 8001222:	4603      	mov	r3, r0
 8001224:	461a      	mov	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800122a:	2102      	movs	r1, #2
 800122c:	6838      	ldr	r0, [r7, #0]
 800122e:	f7ff ffb5 	bl	800119c <u8g2_font_get_byte>
 8001232:	4603      	mov	r3, r0
 8001234:	461a      	mov	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800123a:	2103      	movs	r1, #3
 800123c:	6838      	ldr	r0, [r7, #0]
 800123e:	f7ff ffad 	bl	800119c <u8g2_font_get_byte>
 8001242:	4603      	mov	r3, r0
 8001244:	461a      	mov	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800124a:	2104      	movs	r1, #4
 800124c:	6838      	ldr	r0, [r7, #0]
 800124e:	f7ff ffa5 	bl	800119c <u8g2_font_get_byte>
 8001252:	4603      	mov	r3, r0
 8001254:	461a      	mov	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800125a:	2105      	movs	r1, #5
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f7ff ff9d 	bl	800119c <u8g2_font_get_byte>
 8001262:	4603      	mov	r3, r0
 8001264:	461a      	mov	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800126a:	2106      	movs	r1, #6
 800126c:	6838      	ldr	r0, [r7, #0]
 800126e:	f7ff ff95 	bl	800119c <u8g2_font_get_byte>
 8001272:	4603      	mov	r3, r0
 8001274:	461a      	mov	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800127a:	2107      	movs	r1, #7
 800127c:	6838      	ldr	r0, [r7, #0]
 800127e:	f7ff ff8d 	bl	800119c <u8g2_font_get_byte>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 800128a:	2108      	movs	r1, #8
 800128c:	6838      	ldr	r0, [r7, #0]
 800128e:	f7ff ff85 	bl	800119c <u8g2_font_get_byte>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 800129a:	2109      	movs	r1, #9
 800129c:	6838      	ldr	r0, [r7, #0]
 800129e:	f7ff ff7d 	bl	800119c <u8g2_font_get_byte>
 80012a2:	4603      	mov	r3, r0
 80012a4:	b25a      	sxtb	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80012aa:	210a      	movs	r1, #10
 80012ac:	6838      	ldr	r0, [r7, #0]
 80012ae:	f7ff ff75 	bl	800119c <u8g2_font_get_byte>
 80012b2:	4603      	mov	r3, r0
 80012b4:	b25a      	sxtb	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80012ba:	210b      	movs	r1, #11
 80012bc:	6838      	ldr	r0, [r7, #0]
 80012be:	f7ff ff6d 	bl	800119c <u8g2_font_get_byte>
 80012c2:	4603      	mov	r3, r0
 80012c4:	b25a      	sxtb	r2, r3
 80012c6:	687b      	ldr	r3, [r7, #4]
 80012c8:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80012ca:	210c      	movs	r1, #12
 80012cc:	6838      	ldr	r0, [r7, #0]
 80012ce:	f7ff ff65 	bl	800119c <u8g2_font_get_byte>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b25a      	sxtb	r2, r3
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80012da:	210d      	movs	r1, #13
 80012dc:	6838      	ldr	r0, [r7, #0]
 80012de:	f7ff ff5d 	bl	800119c <u8g2_font_get_byte>
 80012e2:	4603      	mov	r3, r0
 80012e4:	b25a      	sxtb	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 80012ea:	210e      	movs	r1, #14
 80012ec:	6838      	ldr	r0, [r7, #0]
 80012ee:	f7ff ff55 	bl	800119c <u8g2_font_get_byte>
 80012f2:	4603      	mov	r3, r0
 80012f4:	b25a      	sxtb	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 80012fa:	210f      	movs	r1, #15
 80012fc:	6838      	ldr	r0, [r7, #0]
 80012fe:	f7ff ff4d 	bl	800119c <u8g2_font_get_byte>
 8001302:	4603      	mov	r3, r0
 8001304:	b25a      	sxtb	r2, r3
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800130a:	2110      	movs	r1, #16
 800130c:	6838      	ldr	r0, [r7, #0]
 800130e:	f7ff ff45 	bl	800119c <u8g2_font_get_byte>
 8001312:	4603      	mov	r3, r0
 8001314:	b25a      	sxtb	r2, r3
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800131a:	2111      	movs	r1, #17
 800131c:	6838      	ldr	r0, [r7, #0]
 800131e:	f7ff ff4f 	bl	80011c0 <u8g2_font_get_word>
 8001322:	4603      	mov	r3, r0
 8001324:	461a      	mov	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800132a:	2113      	movs	r1, #19
 800132c:	6838      	ldr	r0, [r7, #0]
 800132e:	f7ff ff47 	bl	80011c0 <u8g2_font_get_word>
 8001332:	4603      	mov	r3, r0
 8001334:	461a      	mov	r2, r3
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800133a:	2115      	movs	r1, #21
 800133c:	6838      	ldr	r0, [r7, #0]
 800133e:	f7ff ff3f 	bl	80011c0 <u8g2_font_get_word>
 8001342:	4603      	mov	r3, r0
 8001344:	461a      	mov	r2, r3
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	82da      	strh	r2, [r3, #22]
#endif
}
 800134a:	bf00      	nop
 800134c:	3708      	adds	r7, #8
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}

08001352 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001352:	b480      	push	{r7}
 8001354:	b085      	sub	sp, #20
 8001356:	af00      	add	r7, sp, #0
 8001358:	6078      	str	r0, [r7, #4]
 800135a:	460b      	mov	r3, r1
 800135c:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	7b1b      	ldrb	r3, [r3, #12]
 8001362:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	781b      	ldrb	r3, [r3, #0]
 800136a:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 800136c:	7bfa      	ldrb	r2, [r7, #15]
 800136e:	7b7b      	ldrb	r3, [r7, #13]
 8001370:	fa42 f303 	asr.w	r3, r2, r3
 8001374:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 8001376:	7b7b      	ldrb	r3, [r7, #13]
 8001378:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800137a:	7bba      	ldrb	r2, [r7, #14]
 800137c:	78fb      	ldrb	r3, [r7, #3]
 800137e:	4413      	add	r3, r2
 8001380:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 8001382:	7bbb      	ldrb	r3, [r7, #14]
 8001384:	2b07      	cmp	r3, #7
 8001386:	d91a      	bls.n	80013be <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001388:	2308      	movs	r3, #8
 800138a:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 800138c:	7b3a      	ldrb	r2, [r7, #12]
 800138e:	7b7b      	ldrb	r3, [r7, #13]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	1c5a      	adds	r2, r3, #1
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	681b      	ldr	r3, [r3, #0]
 80013a2:	781b      	ldrb	r3, [r3, #0]
 80013a4:	461a      	mov	r2, r3
 80013a6:	7b3b      	ldrb	r3, [r7, #12]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	b25a      	sxtb	r2, r3
 80013ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013b2:	4313      	orrs	r3, r2
 80013b4:	b25b      	sxtb	r3, r3
 80013b6:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80013b8:	7bbb      	ldrb	r3, [r7, #14]
 80013ba:	3b08      	subs	r3, #8
 80013bc:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80013be:	78fb      	ldrb	r3, [r7, #3]
 80013c0:	f04f 32ff 	mov.w	r2, #4294967295
 80013c4:	fa02 f303 	lsl.w	r3, r2, r3
 80013c8:	b2db      	uxtb	r3, r3
 80013ca:	43db      	mvns	r3, r3
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
 80013d0:	4013      	ands	r3, r2
 80013d2:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	7bba      	ldrb	r2, [r7, #14]
 80013d8:	731a      	strb	r2, [r3, #12]
  return val;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3714      	adds	r7, #20
 80013e0:	46bd      	mov	sp, r7
 80013e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e6:	4770      	bx	lr

080013e8 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
 80013f0:	460b      	mov	r3, r1
 80013f2:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 80013f4:	78fb      	ldrb	r3, [r7, #3]
 80013f6:	4619      	mov	r1, r3
 80013f8:	6878      	ldr	r0, [r7, #4]
 80013fa:	f7ff ffaa 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 80013fe:	4603      	mov	r3, r0
 8001400:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001402:	2301      	movs	r3, #1
 8001404:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001406:	78fb      	ldrb	r3, [r7, #3]
 8001408:	3b01      	subs	r3, #1
 800140a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800140c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001410:	78fb      	ldrb	r3, [r7, #3]
 8001412:	fa02 f303 	lsl.w	r3, r2, r3
 8001416:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001418:	7bfa      	ldrb	r2, [r7, #15]
 800141a:	7bbb      	ldrb	r3, [r7, #14]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	b2db      	uxtb	r3, r3
 8001420:	73fb      	strb	r3, [r7, #15]
  return v;
 8001422:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001426:	4618      	mov	r0, r3
 8001428:	3710      	adds	r7, #16
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}

0800142e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800142e:	b490      	push	{r4, r7}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	4604      	mov	r4, r0
 8001436:	4608      	mov	r0, r1
 8001438:	4611      	mov	r1, r2
 800143a:	461a      	mov	r2, r3
 800143c:	4623      	mov	r3, r4
 800143e:	80fb      	strh	r3, [r7, #6]
 8001440:	4603      	mov	r3, r0
 8001442:	717b      	strb	r3, [r7, #5]
 8001444:	460b      	mov	r3, r1
 8001446:	713b      	strb	r3, [r7, #4]
 8001448:	4613      	mov	r3, r2
 800144a:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800144c:	78fb      	ldrb	r3, [r7, #3]
 800144e:	2b02      	cmp	r3, #2
 8001450:	d014      	beq.n	800147c <u8g2_add_vector_y+0x4e>
 8001452:	2b02      	cmp	r3, #2
 8001454:	dc19      	bgt.n	800148a <u8g2_add_vector_y+0x5c>
 8001456:	2b00      	cmp	r3, #0
 8001458:	d002      	beq.n	8001460 <u8g2_add_vector_y+0x32>
 800145a:	2b01      	cmp	r3, #1
 800145c:	d007      	beq.n	800146e <u8g2_add_vector_y+0x40>
 800145e:	e014      	b.n	800148a <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001460:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001464:	b29a      	uxth	r2, r3
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	4413      	add	r3, r2
 800146a:	80fb      	strh	r3, [r7, #6]
      break;
 800146c:	e014      	b.n	8001498 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 800146e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001472:	b29a      	uxth	r2, r3
 8001474:	88fb      	ldrh	r3, [r7, #6]
 8001476:	4413      	add	r3, r2
 8001478:	80fb      	strh	r3, [r7, #6]
      break;
 800147a:	e00d      	b.n	8001498 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 800147c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001480:	b29b      	uxth	r3, r3
 8001482:	88fa      	ldrh	r2, [r7, #6]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	80fb      	strh	r3, [r7, #6]
      break;
 8001488:	e006      	b.n	8001498 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 800148a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800148e:	b29b      	uxth	r3, r3
 8001490:	88fa      	ldrh	r2, [r7, #6]
 8001492:	1ad3      	subs	r3, r2, r3
 8001494:	80fb      	strh	r3, [r7, #6]
      break;      
 8001496:	bf00      	nop
  }
  return dy;
 8001498:	88fb      	ldrh	r3, [r7, #6]
}
 800149a:	4618      	mov	r0, r3
 800149c:	3708      	adds	r7, #8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bc90      	pop	{r4, r7}
 80014a2:	4770      	bx	lr

080014a4 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80014a4:	b490      	push	{r4, r7}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4604      	mov	r4, r0
 80014ac:	4608      	mov	r0, r1
 80014ae:	4611      	mov	r1, r2
 80014b0:	461a      	mov	r2, r3
 80014b2:	4623      	mov	r3, r4
 80014b4:	80fb      	strh	r3, [r7, #6]
 80014b6:	4603      	mov	r3, r0
 80014b8:	717b      	strb	r3, [r7, #5]
 80014ba:	460b      	mov	r3, r1
 80014bc:	713b      	strb	r3, [r7, #4]
 80014be:	4613      	mov	r3, r2
 80014c0:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80014c2:	78fb      	ldrb	r3, [r7, #3]
 80014c4:	2b02      	cmp	r3, #2
 80014c6:	d014      	beq.n	80014f2 <u8g2_add_vector_x+0x4e>
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	dc19      	bgt.n	8001500 <u8g2_add_vector_x+0x5c>
 80014cc:	2b00      	cmp	r3, #0
 80014ce:	d002      	beq.n	80014d6 <u8g2_add_vector_x+0x32>
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d007      	beq.n	80014e4 <u8g2_add_vector_x+0x40>
 80014d4:	e014      	b.n	8001500 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80014d6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014da:	b29a      	uxth	r2, r3
 80014dc:	88fb      	ldrh	r3, [r7, #6]
 80014de:	4413      	add	r3, r2
 80014e0:	80fb      	strh	r3, [r7, #6]
      break;
 80014e2:	e014      	b.n	800150e <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 80014e4:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	88fa      	ldrh	r2, [r7, #6]
 80014ec:	1ad3      	subs	r3, r2, r3
 80014ee:	80fb      	strh	r3, [r7, #6]
      break;
 80014f0:	e00d      	b.n	800150e <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 80014f2:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80014f6:	b29b      	uxth	r3, r3
 80014f8:	88fa      	ldrh	r2, [r7, #6]
 80014fa:	1ad3      	subs	r3, r2, r3
 80014fc:	80fb      	strh	r3, [r7, #6]
      break;
 80014fe:	e006      	b.n	800150e <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001500:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001504:	b29a      	uxth	r2, r3
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	4413      	add	r3, r2
 800150a:	80fb      	strh	r3, [r7, #6]
      break;      
 800150c:	bf00      	nop
  }
  return dx;
 800150e:	88fb      	ldrh	r3, [r7, #6]
}
 8001510:	4618      	mov	r0, r3
 8001512:	3708      	adds	r7, #8
 8001514:	46bd      	mov	sp, r7
 8001516:	bc90      	pop	{r4, r7}
 8001518:	4770      	bx	lr

0800151a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b088      	sub	sp, #32
 800151e:	af02      	add	r7, sp, #8
 8001520:	6078      	str	r0, [r7, #4]
 8001522:	460b      	mov	r3, r1
 8001524:	70fb      	strb	r3, [r7, #3]
 8001526:	4613      	mov	r3, r2
 8001528:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	3360      	adds	r3, #96	; 0x60
 800152e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001534:	693b      	ldr	r3, [r7, #16]
 8001536:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800153a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800153c:	693b      	ldr	r3, [r7, #16]
 800153e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001542:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001544:	693b      	ldr	r3, [r7, #16]
 8001546:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800154a:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 800154c:	7bfa      	ldrb	r2, [r7, #15]
 800154e:	7d7b      	ldrb	r3, [r7, #21]
 8001550:	1ad3      	subs	r3, r2, r3
 8001552:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001554:	7bfb      	ldrb	r3, [r7, #15]
 8001556:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 8001558:	7dfa      	ldrb	r2, [r7, #23]
 800155a:	7bfb      	ldrb	r3, [r7, #15]
 800155c:	429a      	cmp	r2, r3
 800155e:	d201      	bcs.n	8001564 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001560:	7dfb      	ldrb	r3, [r7, #23]
 8001562:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	889b      	ldrh	r3, [r3, #4]
 8001568:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	88db      	ldrh	r3, [r3, #6]
 800156e:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001570:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001574:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	7c1b      	ldrb	r3, [r3, #16]
 800157c:	89b8      	ldrh	r0, [r7, #12]
 800157e:	f7ff ff91 	bl	80014a4 <u8g2_add_vector_x>
 8001582:	4603      	mov	r3, r0
 8001584:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 8001586:	f997 1015 	ldrsb.w	r1, [r7, #21]
 800158a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800158e:	693b      	ldr	r3, [r7, #16]
 8001590:	7c1b      	ldrb	r3, [r3, #16]
 8001592:	8978      	ldrh	r0, [r7, #10]
 8001594:	f7ff ff4b 	bl	800142e <u8g2_add_vector_y>
 8001598:	4603      	mov	r3, r0
 800159a:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 800159c:	78bb      	ldrb	r3, [r7, #2]
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d010      	beq.n	80015c4 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80015a2:	693b      	ldr	r3, [r7, #16]
 80015a4:	7b9a      	ldrb	r2, [r3, #14]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80015ac:	7dbb      	ldrb	r3, [r7, #22]
 80015ae:	b298      	uxth	r0, r3
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	7c1b      	ldrb	r3, [r3, #16]
 80015b4:	897a      	ldrh	r2, [r7, #10]
 80015b6:	89b9      	ldrh	r1, [r7, #12]
 80015b8:	9300      	str	r3, [sp, #0]
 80015ba:	4603      	mov	r3, r0
 80015bc:	6878      	ldr	r0, [r7, #4]
 80015be:	f000 fbfe 	bl	8001dbe <u8g2_DrawHVLine>
 80015c2:	e013      	b.n	80015ec <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	7b5b      	ldrb	r3, [r3, #13]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	d10f      	bne.n	80015ec <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	7bda      	ldrb	r2, [r3, #15]
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80015d6:	7dbb      	ldrb	r3, [r7, #22]
 80015d8:	b298      	uxth	r0, r3
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	7c1b      	ldrb	r3, [r3, #16]
 80015de:	897a      	ldrh	r2, [r7, #10]
 80015e0:	89b9      	ldrh	r1, [r7, #12]
 80015e2:	9300      	str	r3, [sp, #0]
 80015e4:	4603      	mov	r3, r0
 80015e6:	6878      	ldr	r0, [r7, #4]
 80015e8:	f000 fbe9 	bl	8001dbe <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 80015ec:	7dfa      	ldrb	r2, [r7, #23]
 80015ee:	7bfb      	ldrb	r3, [r7, #15]
 80015f0:	429a      	cmp	r2, r3
 80015f2:	d309      	bcc.n	8001608 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 80015f4:	7dfa      	ldrb	r2, [r7, #23]
 80015f6:	7bfb      	ldrb	r3, [r7, #15]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 80015fc:	2300      	movs	r3, #0
 80015fe:	757b      	strb	r3, [r7, #21]
    ly++;
 8001600:	7d3b      	ldrb	r3, [r7, #20]
 8001602:	3301      	adds	r3, #1
 8001604:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001606:	e79d      	b.n	8001544 <u8g2_font_decode_len+0x2a>
      break;
 8001608:	bf00      	nop
  }
  lx += cnt;
 800160a:	7d7a      	ldrb	r2, [r7, #21]
 800160c:	7dfb      	ldrb	r3, [r7, #23]
 800160e:	4413      	add	r3, r2
 8001610:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001612:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800161a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	725a      	strb	r2, [r3, #9]
}
 8001622:	bf00      	nop
 8001624:	3718      	adds	r7, #24
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800162a:	b580      	push	{r7, lr}
 800162c:	b084      	sub	sp, #16
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
 8001632:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	3360      	adds	r3, #96	; 0x60
 8001638:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	683a      	ldr	r2, [r7, #0]
 800163e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	2200      	movs	r2, #0
 8001644:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 800164c:	4619      	mov	r1, r3
 800164e:	68f8      	ldr	r0, [r7, #12]
 8001650:	f7ff fe7f 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 8001654:	4603      	mov	r3, r0
 8001656:	b25a      	sxtb	r2, r3
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001662:	4619      	mov	r1, r3
 8001664:	68f8      	ldr	r0, [r7, #12]
 8001666:	f7ff fe74 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 800166a:	4603      	mov	r3, r0
 800166c:	b25a      	sxtb	r2, r3
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	7b9b      	ldrb	r3, [r3, #14]
 8001680:	2b00      	cmp	r3, #0
 8001682:	bf0c      	ite	eq
 8001684:	2301      	moveq	r3, #1
 8001686:	2300      	movne	r3, #0
 8001688:	b2db      	uxtb	r3, r3
 800168a:	461a      	mov	r2, r3
 800168c:	68fb      	ldr	r3, [r7, #12]
 800168e:	73da      	strb	r2, [r3, #15]
}
 8001690:	bf00      	nop
 8001692:	3710      	adds	r7, #16
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}

08001698 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b08a      	sub	sp, #40	; 0x28
 800169c:	af02      	add	r7, sp, #8
 800169e:	6078      	str	r0, [r7, #4]
 80016a0:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	3360      	adds	r3, #96	; 0x60
 80016a6:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80016a8:	6839      	ldr	r1, [r7, #0]
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	f7ff ffbd 	bl	800162a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80016b6:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80016be:	4619      	mov	r1, r3
 80016c0:	6978      	ldr	r0, [r7, #20]
 80016c2:	f7ff fe91 	bl	80013e8 <u8g2_font_decode_get_signed_bits>
 80016c6:	4603      	mov	r3, r0
 80016c8:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80016d0:	4619      	mov	r1, r3
 80016d2:	6978      	ldr	r0, [r7, #20]
 80016d4:	f7ff fe88 	bl	80013e8 <u8g2_font_decode_get_signed_bits>
 80016d8:	4603      	mov	r3, r0
 80016da:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80016e2:	4619      	mov	r1, r3
 80016e4:	6978      	ldr	r0, [r7, #20]
 80016e6:	f7ff fe7f 	bl	80013e8 <u8g2_font_decode_get_signed_bits>
 80016ea:	4603      	mov	r3, r0
 80016ec:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	f340 80d7 	ble.w	80018a8 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	8898      	ldrh	r0, [r3, #4]
 80016fe:	7cfa      	ldrb	r2, [r7, #19]
 8001700:	7c7b      	ldrb	r3, [r7, #17]
 8001702:	4413      	add	r3, r2
 8001704:	b2db      	uxtb	r3, r3
 8001706:	425b      	negs	r3, r3
 8001708:	b2db      	uxtb	r3, r3
 800170a:	b25a      	sxtb	r2, r3
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	7c1b      	ldrb	r3, [r3, #16]
 8001710:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001714:	f7ff fec6 	bl	80014a4 <u8g2_add_vector_x>
 8001718:	4603      	mov	r3, r0
 800171a:	461a      	mov	r2, r3
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	88d8      	ldrh	r0, [r3, #6]
 8001724:	7cfa      	ldrb	r2, [r7, #19]
 8001726:	7c7b      	ldrb	r3, [r7, #17]
 8001728:	4413      	add	r3, r2
 800172a:	b2db      	uxtb	r3, r3
 800172c:	425b      	negs	r3, r3
 800172e:	b2db      	uxtb	r3, r3
 8001730:	b25a      	sxtb	r2, r3
 8001732:	697b      	ldr	r3, [r7, #20]
 8001734:	7c1b      	ldrb	r3, [r3, #16]
 8001736:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800173a:	f7ff fe78 	bl	800142e <u8g2_add_vector_y>
 800173e:	4603      	mov	r3, r0
 8001740:	461a      	mov	r2, r3
 8001742:	697b      	ldr	r3, [r7, #20]
 8001744:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	889b      	ldrh	r3, [r3, #4]
 800174a:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	88db      	ldrh	r3, [r3, #6]
 8001750:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001752:	8bfb      	ldrh	r3, [r7, #30]
 8001754:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001756:	8b7b      	ldrh	r3, [r7, #26]
 8001758:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	7c1b      	ldrb	r3, [r3, #16]
 800175e:	2b03      	cmp	r3, #3
 8001760:	d85a      	bhi.n	8001818 <u8g2_font_decode_glyph+0x180>
 8001762:	a201      	add	r2, pc, #4	; (adr r2, 8001768 <u8g2_font_decode_glyph+0xd0>)
 8001764:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001768:	08001779 	.word	0x08001779
 800176c:	08001795 	.word	0x08001795
 8001770:	080017bd 	.word	0x080017bd
 8001774:	080017f1 	.word	0x080017f1
      {
	case 0:
	    x1 += decode->glyph_width;
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800177e:	b29a      	uxth	r2, r3
 8001780:	8bbb      	ldrh	r3, [r7, #28]
 8001782:	4413      	add	r3, r2
 8001784:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001786:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800178a:	b29a      	uxth	r2, r3
 800178c:	8b3b      	ldrh	r3, [r7, #24]
 800178e:	4413      	add	r3, r2
 8001790:	833b      	strh	r3, [r7, #24]
	    break;
 8001792:	e041      	b.n	8001818 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001794:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001798:	b29b      	uxth	r3, r3
 800179a:	8bfa      	ldrh	r2, [r7, #30]
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80017a0:	8bfb      	ldrh	r3, [r7, #30]
 80017a2:	3301      	adds	r3, #1
 80017a4:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80017a6:	8bbb      	ldrh	r3, [r7, #28]
 80017a8:	3301      	adds	r3, #1
 80017aa:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80017ac:	697b      	ldr	r3, [r7, #20]
 80017ae:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80017b2:	b29a      	uxth	r2, r3
 80017b4:	8b3b      	ldrh	r3, [r7, #24]
 80017b6:	4413      	add	r3, r2
 80017b8:	833b      	strh	r3, [r7, #24]
	    break;
 80017ba:	e02d      	b.n	8001818 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80017c2:	b29b      	uxth	r3, r3
 80017c4:	8bfa      	ldrh	r2, [r7, #30]
 80017c6:	1ad3      	subs	r3, r2, r3
 80017c8:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80017ca:	8bfb      	ldrh	r3, [r7, #30]
 80017cc:	3301      	adds	r3, #1
 80017ce:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80017d0:	8bbb      	ldrh	r3, [r7, #28]
 80017d2:	3301      	adds	r3, #1
 80017d4:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80017d6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80017da:	b29b      	uxth	r3, r3
 80017dc:	8b7a      	ldrh	r2, [r7, #26]
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80017e2:	8b7b      	ldrh	r3, [r7, #26]
 80017e4:	3301      	adds	r3, #1
 80017e6:	837b      	strh	r3, [r7, #26]
	    y1++;
 80017e8:	8b3b      	ldrh	r3, [r7, #24]
 80017ea:	3301      	adds	r3, #1
 80017ec:	833b      	strh	r3, [r7, #24]
	    break;	  
 80017ee:	e013      	b.n	8001818 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 80017f0:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80017f4:	b29a      	uxth	r2, r3
 80017f6:	8bbb      	ldrh	r3, [r7, #28]
 80017f8:	4413      	add	r3, r2
 80017fa:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001802:	b29b      	uxth	r3, r3
 8001804:	8b7a      	ldrh	r2, [r7, #26]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800180a:	8b7b      	ldrh	r3, [r7, #26]
 800180c:	3301      	adds	r3, #1
 800180e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001810:	8b3b      	ldrh	r3, [r7, #24]
 8001812:	3301      	adds	r3, #1
 8001814:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001816:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001818:	8bb8      	ldrh	r0, [r7, #28]
 800181a:	8b7a      	ldrh	r2, [r7, #26]
 800181c:	8bf9      	ldrh	r1, [r7, #30]
 800181e:	8b3b      	ldrh	r3, [r7, #24]
 8001820:	9300      	str	r3, [sp, #0]
 8001822:	4603      	mov	r3, r0
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f000 fb88 	bl	8001f3a <u8g2_IsIntersection>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d102      	bne.n	8001836 <u8g2_font_decode_glyph+0x19e>
	return d;
 8001830:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001834:	e03a      	b.n	80018ac <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001836:	697b      	ldr	r3, [r7, #20]
 8001838:	2200      	movs	r2, #0
 800183a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 800183c:	697b      	ldr	r3, [r7, #20]
 800183e:	2200      	movs	r2, #0
 8001840:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001848:	4619      	mov	r1, r3
 800184a:	6978      	ldr	r0, [r7, #20]
 800184c:	f7ff fd81 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 8001850:	4603      	mov	r3, r0
 8001852:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800185a:	4619      	mov	r1, r3
 800185c:	6978      	ldr	r0, [r7, #20]
 800185e:	f7ff fd78 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 8001862:	4603      	mov	r3, r0
 8001864:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001866:	7bfb      	ldrb	r3, [r7, #15]
 8001868:	2200      	movs	r2, #0
 800186a:	4619      	mov	r1, r3
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f7ff fe54 	bl	800151a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001872:	7bbb      	ldrb	r3, [r7, #14]
 8001874:	2201      	movs	r2, #1
 8001876:	4619      	mov	r1, r3
 8001878:	6878      	ldr	r0, [r7, #4]
 800187a:	f7ff fe4e 	bl	800151a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 800187e:	2101      	movs	r1, #1
 8001880:	6978      	ldr	r0, [r7, #20]
 8001882:	f7ff fd66 	bl	8001352 <u8g2_font_decode_get_unsigned_bits>
 8001886:	4603      	mov	r3, r0
 8001888:	2b00      	cmp	r3, #0
 800188a:	d1ec      	bne.n	8001866 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 800188c:	697b      	ldr	r3, [r7, #20]
 800188e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001892:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001896:	429a      	cmp	r2, r3
 8001898:	dd00      	ble.n	800189c <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 800189a:	e7d2      	b.n	8001842 <u8g2_font_decode_glyph+0x1aa>
	break;
 800189c:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 800189e:	697b      	ldr	r3, [r7, #20]
 80018a0:	7b9a      	ldrb	r2, [r3, #14]
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 80018a8:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80018ac:	4618      	mov	r0, r3
 80018ae:	3720      	adds	r7, #32
 80018b0:	46bd      	mov	sp, r7
 80018b2:	bd80      	pop	{r7, pc}

080018b4 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	b086      	sub	sp, #24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	6078      	str	r0, [r7, #4]
 80018bc:	460b      	mov	r3, r1
 80018be:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018c4:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	3317      	adds	r3, #23
 80018ca:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80018cc:	887b      	ldrh	r3, [r7, #2]
 80018ce:	2bff      	cmp	r3, #255	; 0xff
 80018d0:	d82a      	bhi.n	8001928 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80018d2:	887b      	ldrh	r3, [r7, #2]
 80018d4:	2b60      	cmp	r3, #96	; 0x60
 80018d6:	d907      	bls.n	80018e8 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 80018de:	461a      	mov	r2, r3
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	4413      	add	r3, r2
 80018e4:	617b      	str	r3, [r7, #20]
 80018e6:	e009      	b.n	80018fc <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	2b40      	cmp	r3, #64	; 0x40
 80018ec:	d906      	bls.n	80018fc <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 80018f4:	461a      	mov	r2, r3
 80018f6:	697b      	ldr	r3, [r7, #20]
 80018f8:	4413      	add	r3, r2
 80018fa:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	3301      	adds	r3, #1
 8001900:	781b      	ldrb	r3, [r3, #0]
 8001902:	2b00      	cmp	r3, #0
 8001904:	d04e      	beq.n	80019a4 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001906:	697b      	ldr	r3, [r7, #20]
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	b29b      	uxth	r3, r3
 800190c:	887a      	ldrh	r2, [r7, #2]
 800190e:	429a      	cmp	r2, r3
 8001910:	d102      	bne.n	8001918 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	3302      	adds	r3, #2
 8001916:	e049      	b.n	80019ac <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	3301      	adds	r3, #1
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	461a      	mov	r2, r3
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	4413      	add	r3, r2
 8001924:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001926:	e7e9      	b.n	80018fc <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800192e:	461a      	mov	r2, r3
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	4413      	add	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800193a:	2100      	movs	r1, #0
 800193c:	6938      	ldr	r0, [r7, #16]
 800193e:	f7ff fc3f 	bl	80011c0 <u8g2_font_get_word>
 8001942:	4603      	mov	r3, r0
 8001944:	461a      	mov	r2, r3
 8001946:	697b      	ldr	r3, [r7, #20]
 8001948:	4413      	add	r3, r2
 800194a:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 800194c:	2102      	movs	r1, #2
 800194e:	6938      	ldr	r0, [r7, #16]
 8001950:	f7ff fc36 	bl	80011c0 <u8g2_font_get_word>
 8001954:	4603      	mov	r3, r0
 8001956:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	3304      	adds	r3, #4
 800195c:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 800195e:	89fa      	ldrh	r2, [r7, #14]
 8001960:	887b      	ldrh	r3, [r7, #2]
 8001962:	429a      	cmp	r2, r3
 8001964:	d3e9      	bcc.n	800193a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 800196c:	89fb      	ldrh	r3, [r7, #14]
 800196e:	021b      	lsls	r3, r3, #8
 8001970:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001972:	697b      	ldr	r3, [r7, #20]
 8001974:	3301      	adds	r3, #1
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	b29a      	uxth	r2, r3
 800197a:	89fb      	ldrh	r3, [r7, #14]
 800197c:	4313      	orrs	r3, r2
 800197e:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001980:	89fb      	ldrh	r3, [r7, #14]
 8001982:	2b00      	cmp	r3, #0
 8001984:	d010      	beq.n	80019a8 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001986:	89fa      	ldrh	r2, [r7, #14]
 8001988:	887b      	ldrh	r3, [r7, #2]
 800198a:	429a      	cmp	r2, r3
 800198c:	d102      	bne.n	8001994 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	3303      	adds	r3, #3
 8001992:	e00b      	b.n	80019ac <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	3302      	adds	r3, #2
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	461a      	mov	r2, r3
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	4413      	add	r3, r2
 80019a0:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80019a2:	e7e0      	b.n	8001966 <u8g2_font_get_glyph_data+0xb2>
	break;
 80019a4:	bf00      	nop
 80019a6:	e000      	b.n	80019aa <u8g2_font_get_glyph_data+0xf6>
	break;
 80019a8:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	3718      	adds	r7, #24
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bd80      	pop	{r7, pc}

080019b4 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	4608      	mov	r0, r1
 80019be:	4611      	mov	r1, r2
 80019c0:	461a      	mov	r2, r3
 80019c2:	4603      	mov	r3, r0
 80019c4:	817b      	strh	r3, [r7, #10]
 80019c6:	460b      	mov	r3, r1
 80019c8:	813b      	strh	r3, [r7, #8]
 80019ca:	4613      	mov	r3, r2
 80019cc:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80019ce:	2300      	movs	r3, #0
 80019d0:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	897a      	ldrh	r2, [r7, #10]
 80019d6:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	893a      	ldrh	r2, [r7, #8]
 80019de:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4619      	mov	r1, r3
 80019e6:	68f8      	ldr	r0, [r7, #12]
 80019e8:	f7ff ff64 	bl	80018b4 <u8g2_font_get_glyph_data>
 80019ec:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d005      	beq.n	8001a00 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 80019f4:	6939      	ldr	r1, [r7, #16]
 80019f6:	68f8      	ldr	r0, [r7, #12]
 80019f8:	f7ff fe4e 	bl	8001698 <u8g2_font_decode_glyph>
 80019fc:	4603      	mov	r3, r0
 80019fe:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001a00:	8afb      	ldrh	r3, [r7, #22]
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	3718      	adds	r7, #24
 8001a06:	46bd      	mov	sp, r7
 8001a08:	bd80      	pop	{r7, pc}
	...

08001a0c <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001a0c:	b580      	push	{r7, lr}
 8001a0e:	b084      	sub	sp, #16
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	60f8      	str	r0, [r7, #12]
 8001a14:	4608      	mov	r0, r1
 8001a16:	4611      	mov	r1, r2
 8001a18:	461a      	mov	r2, r3
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	817b      	strh	r3, [r7, #10]
 8001a1e:	460b      	mov	r3, r1
 8001a20:	813b      	strh	r3, [r7, #8]
 8001a22:	4613      	mov	r3, r2
 8001a24:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001a2c:	2b03      	cmp	r3, #3
 8001a2e:	d833      	bhi.n	8001a98 <u8g2_DrawGlyph+0x8c>
 8001a30:	a201      	add	r2, pc, #4	; (adr r2, 8001a38 <u8g2_DrawGlyph+0x2c>)
 8001a32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a36:	bf00      	nop
 8001a38:	08001a49 	.word	0x08001a49
 8001a3c:	08001a5d 	.word	0x08001a5d
 8001a40:	08001a71 	.word	0x08001a71
 8001a44:	08001a85 	.word	0x08001a85
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001a48:	68fb      	ldr	r3, [r7, #12]
 8001a4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a4c:	68f8      	ldr	r0, [r7, #12]
 8001a4e:	4798      	blx	r3
 8001a50:	4603      	mov	r3, r0
 8001a52:	461a      	mov	r2, r3
 8001a54:	893b      	ldrh	r3, [r7, #8]
 8001a56:	4413      	add	r3, r2
 8001a58:	813b      	strh	r3, [r7, #8]
      break;
 8001a5a:	e01d      	b.n	8001a98 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001a5c:	68fb      	ldr	r3, [r7, #12]
 8001a5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a60:	68f8      	ldr	r0, [r7, #12]
 8001a62:	4798      	blx	r3
 8001a64:	4603      	mov	r3, r0
 8001a66:	461a      	mov	r2, r3
 8001a68:	897b      	ldrh	r3, [r7, #10]
 8001a6a:	1a9b      	subs	r3, r3, r2
 8001a6c:	817b      	strh	r3, [r7, #10]
      break;
 8001a6e:	e013      	b.n	8001a98 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001a70:	68fb      	ldr	r3, [r7, #12]
 8001a72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a74:	68f8      	ldr	r0, [r7, #12]
 8001a76:	4798      	blx	r3
 8001a78:	4603      	mov	r3, r0
 8001a7a:	461a      	mov	r2, r3
 8001a7c:	893b      	ldrh	r3, [r7, #8]
 8001a7e:	1a9b      	subs	r3, r3, r2
 8001a80:	813b      	strh	r3, [r7, #8]
      break;
 8001a82:	e009      	b.n	8001a98 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a88:	68f8      	ldr	r0, [r7, #12]
 8001a8a:	4798      	blx	r3
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	461a      	mov	r2, r3
 8001a90:	897b      	ldrh	r3, [r7, #10]
 8001a92:	4413      	add	r3, r2
 8001a94:	817b      	strh	r3, [r7, #10]
      break;
 8001a96:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001a98:	88fb      	ldrh	r3, [r7, #6]
 8001a9a:	893a      	ldrh	r2, [r7, #8]
 8001a9c:	8979      	ldrh	r1, [r7, #10]
 8001a9e:	68f8      	ldr	r0, [r7, #12]
 8001aa0:	f7ff ff88 	bl	80019b4 <u8g2_font_draw_glyph>
 8001aa4:	4603      	mov	r3, r0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
 8001aae:	bf00      	nop

08001ab0 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b086      	sub	sp, #24
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	60f8      	str	r0, [r7, #12]
 8001ab8:	607b      	str	r3, [r7, #4]
 8001aba:	460b      	mov	r3, r1
 8001abc:	817b      	strh	r3, [r7, #10]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001ac2:	68f8      	ldr	r0, [r7, #12]
 8001ac4:	f000 fc6a 	bl	800239c <u8x8_utf8_init>
  sum = 0;
 8001ac8:	2300      	movs	r3, #0
 8001aca:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001acc:	68fb      	ldr	r3, [r7, #12]
 8001ace:	685b      	ldr	r3, [r3, #4]
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	7812      	ldrb	r2, [r2, #0]
 8001ad4:	4611      	mov	r1, r2
 8001ad6:	68f8      	ldr	r0, [r7, #12]
 8001ad8:	4798      	blx	r3
 8001ada:	4603      	mov	r3, r0
 8001adc:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001ade:	8abb      	ldrh	r3, [r7, #20]
 8001ae0:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001ae4:	4293      	cmp	r3, r2
 8001ae6:	d038      	beq.n	8001b5a <u8g2_draw_string+0xaa>
      break;
    str++;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	3301      	adds	r3, #1
 8001aec:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001aee:	8abb      	ldrh	r3, [r7, #20]
 8001af0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001af4:	4293      	cmp	r3, r2
 8001af6:	d0e9      	beq.n	8001acc <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001af8:	8abb      	ldrh	r3, [r7, #20]
 8001afa:	893a      	ldrh	r2, [r7, #8]
 8001afc:	8979      	ldrh	r1, [r7, #10]
 8001afe:	68f8      	ldr	r0, [r7, #12]
 8001b00:	f7ff ff84 	bl	8001a0c <u8g2_DrawGlyph>
 8001b04:	4603      	mov	r3, r0
 8001b06:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001b0e:	2b03      	cmp	r3, #3
 8001b10:	d81e      	bhi.n	8001b50 <u8g2_draw_string+0xa0>
 8001b12:	a201      	add	r2, pc, #4	; (adr r2, 8001b18 <u8g2_draw_string+0x68>)
 8001b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b18:	08001b29 	.word	0x08001b29
 8001b1c:	08001b33 	.word	0x08001b33
 8001b20:	08001b3d 	.word	0x08001b3d
 8001b24:	08001b47 	.word	0x08001b47
      {
	case 0:
	  x += delta;
 8001b28:	897a      	ldrh	r2, [r7, #10]
 8001b2a:	8a7b      	ldrh	r3, [r7, #18]
 8001b2c:	4413      	add	r3, r2
 8001b2e:	817b      	strh	r3, [r7, #10]
	  break;
 8001b30:	e00e      	b.n	8001b50 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001b32:	893a      	ldrh	r2, [r7, #8]
 8001b34:	8a7b      	ldrh	r3, [r7, #18]
 8001b36:	4413      	add	r3, r2
 8001b38:	813b      	strh	r3, [r7, #8]
	  break;
 8001b3a:	e009      	b.n	8001b50 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001b3c:	897a      	ldrh	r2, [r7, #10]
 8001b3e:	8a7b      	ldrh	r3, [r7, #18]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	817b      	strh	r3, [r7, #10]
	  break;
 8001b44:	e004      	b.n	8001b50 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001b46:	893a      	ldrh	r2, [r7, #8]
 8001b48:	8a7b      	ldrh	r3, [r7, #18]
 8001b4a:	1ad3      	subs	r3, r2, r3
 8001b4c:	813b      	strh	r3, [r7, #8]
	  break;
 8001b4e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001b50:	8afa      	ldrh	r2, [r7, #22]
 8001b52:	8a7b      	ldrh	r3, [r7, #18]
 8001b54:	4413      	add	r3, r2
 8001b56:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001b58:	e7b8      	b.n	8001acc <u8g2_draw_string+0x1c>
      break;
 8001b5a:	bf00      	nop
    }
  }
  return sum;
 8001b5c:	8afb      	ldrh	r3, [r7, #22]
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3718      	adds	r7, #24
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}
 8001b66:	bf00      	nop

08001b68 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b084      	sub	sp, #16
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	607b      	str	r3, [r7, #4]
 8001b72:	460b      	mov	r3, r1
 8001b74:	817b      	strh	r3, [r7, #10]
 8001b76:	4613      	mov	r3, r2
 8001b78:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	4a06      	ldr	r2, [pc, #24]	; (8001b98 <u8g2_DrawStr+0x30>)
 8001b7e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001b80:	893a      	ldrh	r2, [r7, #8]
 8001b82:	8979      	ldrh	r1, [r7, #10]
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	68f8      	ldr	r0, [r7, #12]
 8001b88:	f7ff ff92 	bl	8001ab0 <u8g2_draw_string>
 8001b8c:	4603      	mov	r3, r0
}
 8001b8e:	4618      	mov	r0, r3
 8001b90:	3710      	adds	r7, #16
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
 8001b96:	bf00      	nop
 8001b98:	080023b9 	.word	0x080023b9

08001b9c <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d05d      	beq.n	8001c68 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d04d      	beq.n	8001c6a <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d11c      	bne.n	8001c12 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8001be4:	429a      	cmp	r2, r3
 8001be6:	da05      	bge.n	8001bf4 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8001c00:	429a      	cmp	r2, r3
 8001c02:	dd32      	ble.n	8001c6a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001c10:	e02b      	b.n	8001c6a <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8001c18:	461a      	mov	r2, r3
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001c20:	4619      	mov	r1, r3
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001c28:	440b      	add	r3, r1
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	da0d      	bge.n	8001c4a <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001c34:	b2da      	uxtb	r2, r3
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	4413      	add	r3, r2
 8001c40:	b2db      	uxtb	r3, r3
 8001c42:	b25a      	sxtb	r2, r3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001c56:	429a      	cmp	r2, r3
 8001c58:	dd07      	ble.n	8001c6a <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001c66:	e000      	b.n	8001c6a <u8g2_UpdateRefHeight+0xce>
    return;
 8001c68:	bf00      	nop
  }  
}
 8001c6a:	370c      	adds	r7, #12
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr

08001c74 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  return 0;
 8001c7c:	2300      	movs	r3, #0
}
 8001c7e:	4618      	mov	r0, r3
 8001c80:	370c      	adds	r7, #12
 8001c82:	46bd      	mov	sp, r7
 8001c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c88:	4770      	bx	lr
	...

08001c8c <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a04      	ldr	r2, [pc, #16]	; (8001ca8 <u8g2_SetFontPosBaseline+0x1c>)
 8001c98:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
 8001ca6:	bf00      	nop
 8001ca8:	08001c75 	.word	0x08001c75

08001cac <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b082      	sub	sp, #8
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]
 8001cb4:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cba:	683a      	ldr	r2, [r7, #0]
 8001cbc:	429a      	cmp	r2, r3
 8001cbe:	d00b      	beq.n	8001cd8 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	683a      	ldr	r2, [r7, #0]
 8001cc4:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3374      	adds	r3, #116	; 0x74
 8001cca:	6839      	ldr	r1, [r7, #0]
 8001ccc:	4618      	mov	r0, r3
 8001cce:	f7ff fa97 	bl	8001200 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001cd2:	6878      	ldr	r0, [r7, #4]
 8001cd4:	f7ff ff62 	bl	8001b9c <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001cd8:	bf00      	nop
 8001cda:	3708      	adds	r7, #8
 8001cdc:	46bd      	mov	sp, r7
 8001cde:	bd80      	pop	{r7, pc}

08001ce0 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b087      	sub	sp, #28
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	60f8      	str	r0, [r7, #12]
 8001ce8:	60b9      	str	r1, [r7, #8]
 8001cea:	4611      	mov	r1, r2
 8001cec:	461a      	mov	r2, r3
 8001cee:	460b      	mov	r3, r1
 8001cf0:	80fb      	strh	r3, [r7, #6]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001cfc:	8afb      	ldrh	r3, [r7, #22]
 8001cfe:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	881a      	ldrh	r2, [r3, #0]
 8001d04:	8abb      	ldrh	r3, [r7, #20]
 8001d06:	4413      	add	r3, r2
 8001d08:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001d0a:	8afa      	ldrh	r2, [r7, #22]
 8001d0c:	8abb      	ldrh	r3, [r7, #20]
 8001d0e:	429a      	cmp	r2, r3
 8001d10:	d90b      	bls.n	8001d2a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001d12:	8afa      	ldrh	r2, [r7, #22]
 8001d14:	88bb      	ldrh	r3, [r7, #4]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d205      	bcs.n	8001d26 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001d1a:	88bb      	ldrh	r3, [r7, #4]
 8001d1c:	82bb      	strh	r3, [r7, #20]
      b--;
 8001d1e:	8abb      	ldrh	r3, [r7, #20]
 8001d20:	3b01      	subs	r3, #1
 8001d22:	82bb      	strh	r3, [r7, #20]
 8001d24:	e001      	b.n	8001d2a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001d26:	88fb      	ldrh	r3, [r7, #6]
 8001d28:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001d2a:	8afa      	ldrh	r2, [r7, #22]
 8001d2c:	88bb      	ldrh	r3, [r7, #4]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d301      	bcc.n	8001d36 <u8g2_clip_intersection2+0x56>
    return 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	e01c      	b.n	8001d70 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001d36:	8aba      	ldrh	r2, [r7, #20]
 8001d38:	88fb      	ldrh	r3, [r7, #6]
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d801      	bhi.n	8001d42 <u8g2_clip_intersection2+0x62>
    return 0;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	e016      	b.n	8001d70 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001d42:	8afa      	ldrh	r2, [r7, #22]
 8001d44:	88fb      	ldrh	r3, [r7, #6]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d201      	bcs.n	8001d4e <u8g2_clip_intersection2+0x6e>
    a = c;
 8001d4a:	88fb      	ldrh	r3, [r7, #6]
 8001d4c:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8001d4e:	8aba      	ldrh	r2, [r7, #20]
 8001d50:	88bb      	ldrh	r3, [r7, #4]
 8001d52:	429a      	cmp	r2, r3
 8001d54:	d901      	bls.n	8001d5a <u8g2_clip_intersection2+0x7a>
    b = d;
 8001d56:	88bb      	ldrh	r3, [r7, #4]
 8001d58:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	8afa      	ldrh	r2, [r7, #22]
 8001d5e:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001d60:	8aba      	ldrh	r2, [r7, #20]
 8001d62:	8afb      	ldrh	r3, [r7, #22]
 8001d64:	1ad3      	subs	r3, r2, r3
 8001d66:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	8aba      	ldrh	r2, [r7, #20]
 8001d6c:	801a      	strh	r2, [r3, #0]
  return 1;
 8001d6e:	2301      	movs	r3, #1
}
 8001d70:	4618      	mov	r0, r3
 8001d72:	371c      	adds	r7, #28
 8001d74:	46bd      	mov	sp, r7
 8001d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7a:	4770      	bx	lr

08001d7c <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001d7c:	b590      	push	{r4, r7, lr}
 8001d7e:	b087      	sub	sp, #28
 8001d80:	af02      	add	r7, sp, #8
 8001d82:	60f8      	str	r0, [r7, #12]
 8001d84:	4608      	mov	r0, r1
 8001d86:	4611      	mov	r1, r2
 8001d88:	461a      	mov	r2, r3
 8001d8a:	4603      	mov	r3, r0
 8001d8c:	817b      	strh	r3, [r7, #10]
 8001d8e:	460b      	mov	r3, r1
 8001d90:	813b      	strh	r3, [r7, #8]
 8001d92:	4613      	mov	r3, r2
 8001d94:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001d9a:	893a      	ldrh	r2, [r7, #8]
 8001d9c:	1ad3      	subs	r3, r2, r3
 8001d9e:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001da4:	88f8      	ldrh	r0, [r7, #6]
 8001da6:	893a      	ldrh	r2, [r7, #8]
 8001da8:	8979      	ldrh	r1, [r7, #10]
 8001daa:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dae:	9300      	str	r3, [sp, #0]
 8001db0:	4603      	mov	r3, r0
 8001db2:	68f8      	ldr	r0, [r7, #12]
 8001db4:	47a0      	blx	r4
}
 8001db6:	bf00      	nop
 8001db8:	3714      	adds	r7, #20
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd90      	pop	{r4, r7, pc}

08001dbe <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001dbe:	b590      	push	{r4, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	af02      	add	r7, sp, #8
 8001dc4:	60f8      	str	r0, [r7, #12]
 8001dc6:	4608      	mov	r0, r1
 8001dc8:	4611      	mov	r1, r2
 8001dca:	461a      	mov	r2, r3
 8001dcc:	4603      	mov	r3, r0
 8001dce:	817b      	strh	r3, [r7, #10]
 8001dd0:	460b      	mov	r3, r1
 8001dd2:	813b      	strh	r3, [r7, #8]
 8001dd4:	4613      	mov	r3, r2
 8001dd6:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d075      	beq.n	8001ece <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001de2:	88fb      	ldrh	r3, [r7, #6]
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d072      	beq.n	8001ece <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001de8:	88fb      	ldrh	r3, [r7, #6]
 8001dea:	2b01      	cmp	r3, #1
 8001dec:	d91a      	bls.n	8001e24 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8001dee:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001df2:	2b02      	cmp	r3, #2
 8001df4:	d109      	bne.n	8001e0a <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8001df6:	897a      	ldrh	r2, [r7, #10]
 8001df8:	88fb      	ldrh	r3, [r7, #6]
 8001dfa:	1ad3      	subs	r3, r2, r3
 8001dfc:	b29b      	uxth	r3, r3
 8001dfe:	817b      	strh	r3, [r7, #10]
	  x++;
 8001e00:	897b      	ldrh	r3, [r7, #10]
 8001e02:	3301      	adds	r3, #1
 8001e04:	b29b      	uxth	r3, r3
 8001e06:	817b      	strh	r3, [r7, #10]
 8001e08:	e00c      	b.n	8001e24 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8001e0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e0e:	2b03      	cmp	r3, #3
 8001e10:	d108      	bne.n	8001e24 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8001e12:	893a      	ldrh	r2, [r7, #8]
 8001e14:	88fb      	ldrh	r3, [r7, #6]
 8001e16:	1ad3      	subs	r3, r2, r3
 8001e18:	b29b      	uxth	r3, r3
 8001e1a:	813b      	strh	r3, [r7, #8]
	  y++;
 8001e1c:	893b      	ldrh	r3, [r7, #8]
 8001e1e:	3301      	adds	r3, #1
 8001e20:	b29b      	uxth	r3, r3
 8001e22:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8001e24:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e28:	f003 0301 	and.w	r3, r3, #1
 8001e2c:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001e30:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d11a      	bne.n	8001e6e <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001e3e:	893b      	ldrh	r3, [r7, #8]
 8001e40:	429a      	cmp	r2, r3
 8001e42:	d83b      	bhi.n	8001ebc <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8001e4a:	893b      	ldrh	r3, [r7, #8]
 8001e4c:	429a      	cmp	r2, r3
 8001e4e:	d937      	bls.n	8001ec0 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001e5c:	1db9      	adds	r1, r7, #6
 8001e5e:	f107 000a 	add.w	r0, r7, #10
 8001e62:	f7ff ff3d 	bl	8001ce0 <u8g2_clip_intersection2>
 8001e66:	4603      	mov	r3, r0
 8001e68:	2b00      	cmp	r3, #0
 8001e6a:	d11a      	bne.n	8001ea2 <u8g2_DrawHVLine+0xe4>
	  return;
 8001e6c:	e02f      	b.n	8001ece <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001e74:	897b      	ldrh	r3, [r7, #10]
 8001e76:	429a      	cmp	r2, r3
 8001e78:	d824      	bhi.n	8001ec4 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001e80:	897b      	ldrh	r3, [r7, #10]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d920      	bls.n	8001ec8 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001e92:	1db9      	adds	r1, r7, #6
 8001e94:	f107 0008 	add.w	r0, r7, #8
 8001e98:	f7ff ff22 	bl	8001ce0 <u8g2_clip_intersection2>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d014      	beq.n	8001ecc <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea6:	689c      	ldr	r4, [r3, #8]
 8001ea8:	8979      	ldrh	r1, [r7, #10]
 8001eaa:	893a      	ldrh	r2, [r7, #8]
 8001eac:	88f8      	ldrh	r0, [r7, #6]
 8001eae:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001eb2:	9300      	str	r3, [sp, #0]
 8001eb4:	4603      	mov	r3, r0
 8001eb6:	68f8      	ldr	r0, [r7, #12]
 8001eb8:	47a0      	blx	r4
 8001eba:	e008      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ebc:	bf00      	nop
 8001ebe:	e006      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ec0:	bf00      	nop
 8001ec2:	e004      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ec4:	bf00      	nop
 8001ec6:	e002      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ec8:	bf00      	nop
 8001eca:	e000      	b.n	8001ece <u8g2_DrawHVLine+0x110>
	  return;
 8001ecc:	bf00      	nop
    }
}
 8001ece:	3714      	adds	r7, #20
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd90      	pop	{r4, r7, pc}

08001ed4 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001ed4:	b490      	push	{r4, r7}
 8001ed6:	b082      	sub	sp, #8
 8001ed8:	af00      	add	r7, sp, #0
 8001eda:	4604      	mov	r4, r0
 8001edc:	4608      	mov	r0, r1
 8001ede:	4611      	mov	r1, r2
 8001ee0:	461a      	mov	r2, r3
 8001ee2:	4623      	mov	r3, r4
 8001ee4:	80fb      	strh	r3, [r7, #6]
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	80bb      	strh	r3, [r7, #4]
 8001eea:	460b      	mov	r3, r1
 8001eec:	807b      	strh	r3, [r7, #2]
 8001eee:	4613      	mov	r3, r2
 8001ef0:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001ef2:	887a      	ldrh	r2, [r7, #2]
 8001ef4:	88bb      	ldrh	r3, [r7, #4]
 8001ef6:	429a      	cmp	r2, r3
 8001ef8:	d20d      	bcs.n	8001f16 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001efa:	883a      	ldrh	r2, [r7, #0]
 8001efc:	88fb      	ldrh	r3, [r7, #6]
 8001efe:	429a      	cmp	r2, r3
 8001f00:	d901      	bls.n	8001f06 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001f02:	2301      	movs	r3, #1
 8001f04:	e014      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001f06:	887a      	ldrh	r2, [r7, #2]
 8001f08:	883b      	ldrh	r3, [r7, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	d901      	bls.n	8001f12 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001f0e:	2301      	movs	r3, #1
 8001f10:	e00e      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e00c      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001f16:	883a      	ldrh	r2, [r7, #0]
 8001f18:	88fb      	ldrh	r3, [r7, #6]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d907      	bls.n	8001f2e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001f1e:	887a      	ldrh	r2, [r7, #2]
 8001f20:	883b      	ldrh	r3, [r7, #0]
 8001f22:	429a      	cmp	r2, r3
 8001f24:	d901      	bls.n	8001f2a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001f26:	2301      	movs	r3, #1
 8001f28:	e002      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	e000      	b.n	8001f30 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001f2e:	2300      	movs	r3, #0
    }
  }
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3708      	adds	r7, #8
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bc90      	pop	{r4, r7}
 8001f38:	4770      	bx	lr

08001f3a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001f3a:	b580      	push	{r7, lr}
 8001f3c:	b084      	sub	sp, #16
 8001f3e:	af00      	add	r7, sp, #0
 8001f40:	60f8      	str	r0, [r7, #12]
 8001f42:	4608      	mov	r0, r1
 8001f44:	4611      	mov	r1, r2
 8001f46:	461a      	mov	r2, r3
 8001f48:	4603      	mov	r3, r0
 8001f4a:	817b      	strh	r3, [r7, #10]
 8001f4c:	460b      	mov	r3, r1
 8001f4e:	813b      	strh	r3, [r7, #8]
 8001f50:	4613      	mov	r3, r2
 8001f52:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8001f60:	8b3b      	ldrh	r3, [r7, #24]
 8001f62:	893a      	ldrh	r2, [r7, #8]
 8001f64:	f7ff ffb6 	bl	8001ed4 <u8g2_is_intersection_decision_tree>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d101      	bne.n	8001f72 <u8g2_IsIntersection+0x38>
    return 0; 
 8001f6e:	2300      	movs	r3, #0
 8001f70:	e00a      	b.n	8001f88 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8001f7e:	88fb      	ldrh	r3, [r7, #6]
 8001f80:	897a      	ldrh	r2, [r7, #10]
 8001f82:	f7ff ffa7 	bl	8001ed4 <u8g2_is_intersection_decision_tree>
 8001f86:	4603      	mov	r3, r0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3710      	adds	r7, #16
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}

08001f90 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001f90:	b480      	push	{r7}
 8001f92:	b089      	sub	sp, #36	; 0x24
 8001f94:	af00      	add	r7, sp, #0
 8001f96:	60f8      	str	r0, [r7, #12]
 8001f98:	4608      	mov	r0, r1
 8001f9a:	4611      	mov	r1, r2
 8001f9c:	461a      	mov	r2, r3
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	817b      	strh	r3, [r7, #10]
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	813b      	strh	r3, [r7, #8]
 8001fa6:	4613      	mov	r3, r2
 8001fa8:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001faa:	893b      	ldrh	r3, [r7, #8]
 8001fac:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001fae:	7efb      	ldrb	r3, [r7, #27]
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001fb6:	2301      	movs	r3, #1
 8001fb8:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001fba:	7e3a      	ldrb	r2, [r7, #24]
 8001fbc:	7efb      	ldrb	r3, [r7, #27]
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001fcc:	68fb      	ldr	r3, [r7, #12]
 8001fce:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001fd2:	2b01      	cmp	r3, #1
 8001fd4:	d801      	bhi.n	8001fda <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001fd6:	7e3b      	ldrb	r3, [r7, #24]
 8001fd8:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001fe0:	2b01      	cmp	r3, #1
 8001fe2:	d001      	beq.n	8001fe8 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001fe4:	7e3b      	ldrb	r3, [r7, #24]
 8001fe6:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001fe8:	893b      	ldrh	r3, [r7, #8]
 8001fea:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001fec:	8afb      	ldrh	r3, [r7, #22]
 8001fee:	f023 0307 	bic.w	r3, r3, #7
 8001ff2:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	7c1b      	ldrb	r3, [r3, #16]
 8001ffa:	b29b      	uxth	r3, r3
 8001ffc:	8afa      	ldrh	r2, [r7, #22]
 8001ffe:	fb12 f303 	smulbb	r3, r2, r3
 8002002:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002008:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 800200a:	8afb      	ldrh	r3, [r7, #22]
 800200c:	69fa      	ldr	r2, [r7, #28]
 800200e:	4413      	add	r3, r2
 8002010:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002012:	897b      	ldrh	r3, [r7, #10]
 8002014:	69fa      	ldr	r2, [r7, #28]
 8002016:	4413      	add	r3, r2
 8002018:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 800201a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800201e:	2b00      	cmp	r3, #0
 8002020:	d117      	bne.n	8002052 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002022:	69fb      	ldr	r3, [r7, #28]
 8002024:	781a      	ldrb	r2, [r3, #0]
 8002026:	7ebb      	ldrb	r3, [r7, #26]
 8002028:	4313      	orrs	r3, r2
 800202a:	b2da      	uxtb	r2, r3
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8002030:	69fb      	ldr	r3, [r7, #28]
 8002032:	781a      	ldrb	r2, [r3, #0]
 8002034:	7e7b      	ldrb	r3, [r7, #25]
 8002036:	4053      	eors	r3, r2
 8002038:	b2da      	uxtb	r2, r3
 800203a:	69fb      	ldr	r3, [r7, #28]
 800203c:	701a      	strb	r2, [r3, #0]
	ptr++;
 800203e:	69fb      	ldr	r3, [r7, #28]
 8002040:	3301      	adds	r3, #1
 8002042:	61fb      	str	r3, [r7, #28]
	len--;
 8002044:	88fb      	ldrh	r3, [r7, #6]
 8002046:	3b01      	subs	r3, #1
 8002048:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 800204a:	88fb      	ldrh	r3, [r7, #6]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d1e8      	bne.n	8002022 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8002050:	e038      	b.n	80020c4 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002052:	69fb      	ldr	r3, [r7, #28]
 8002054:	781a      	ldrb	r2, [r3, #0]
 8002056:	7ebb      	ldrb	r3, [r7, #26]
 8002058:	4313      	orrs	r3, r2
 800205a:	b2da      	uxtb	r2, r3
 800205c:	69fb      	ldr	r3, [r7, #28]
 800205e:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8002060:	69fb      	ldr	r3, [r7, #28]
 8002062:	781a      	ldrb	r2, [r3, #0]
 8002064:	7e7b      	ldrb	r3, [r7, #25]
 8002066:	4053      	eors	r3, r2
 8002068:	b2da      	uxtb	r2, r3
 800206a:	69fb      	ldr	r3, [r7, #28]
 800206c:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800206e:	7efb      	ldrb	r3, [r7, #27]
 8002070:	3301      	adds	r3, #1
 8002072:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002074:	7efb      	ldrb	r3, [r7, #27]
 8002076:	f003 0307 	and.w	r3, r3, #7
 800207a:	76fb      	strb	r3, [r7, #27]
      len--;
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	3b01      	subs	r3, #1
 8002080:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002082:	7efb      	ldrb	r3, [r7, #27]
 8002084:	2b00      	cmp	r3, #0
 8002086:	d114      	bne.n	80020b2 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800208c:	461a      	mov	r2, r3
 800208e:	69fb      	ldr	r3, [r7, #28]
 8002090:	4413      	add	r3, r2
 8002092:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800209a:	2b01      	cmp	r3, #1
 800209c:	d801      	bhi.n	80020a2 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800209e:	2301      	movs	r3, #1
 80020a0:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80020a2:	68fb      	ldr	r3, [r7, #12]
 80020a4:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d008      	beq.n	80020be <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80020ac:	2301      	movs	r3, #1
 80020ae:	767b      	strb	r3, [r7, #25]
 80020b0:	e005      	b.n	80020be <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80020b2:	7ebb      	ldrb	r3, [r7, #26]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80020b8:	7e7b      	ldrb	r3, [r7, #25]
 80020ba:	005b      	lsls	r3, r3, #1
 80020bc:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80020be:	88fb      	ldrh	r3, [r7, #6]
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d1c6      	bne.n	8002052 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80020c4:	bf00      	nop
 80020c6:	3724      	adds	r7, #36	; 0x24
 80020c8:	46bd      	mov	sp, r7
 80020ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ce:	4770      	bx	lr

080020d0 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80020d0:	b580      	push	{r7, lr}
 80020d2:	b082      	sub	sp, #8
 80020d4:	af00      	add	r7, sp, #0
 80020d6:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2200      	movs	r2, #0
 80020e4:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020ee:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80020f8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002100:	685b      	ldr	r3, [r3, #4]
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	4798      	blx	r3
}
 8002106:	bf00      	nop
 8002108:	3708      	adds	r7, #8
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}

0800210e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800210e:	b580      	push	{r7, lr}
 8002110:	b084      	sub	sp, #16
 8002112:	af00      	add	r7, sp, #0
 8002114:	60f8      	str	r0, [r7, #12]
 8002116:	60b9      	str	r1, [r7, #8]
 8002118:	603b      	str	r3, [r7, #0]
 800211a:	4613      	mov	r3, r2
 800211c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	683a      	ldr	r2, [r7, #0]
 8002128:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800212a:	68fb      	ldr	r3, [r7, #12]
 800212c:	68ba      	ldr	r2, [r7, #8]
 800212e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	79fa      	ldrb	r2, [r7, #7]
 8002134:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002138:	68fb      	ldr	r3, [r7, #12]
 800213a:	2200      	movs	r2, #0
 800213c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2200      	movs	r2, #0
 8002144:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002148:	68fb      	ldr	r3, [r7, #12]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	2200      	movs	r2, #0
 8002154:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8002158:	68fb      	ldr	r3, [r7, #12]
 800215a:	2201      	movs	r2, #1
 800215c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	2201      	movs	r2, #1
 8002164:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002178:	68f8      	ldr	r0, [r7, #12]
 800217a:	f7ff ffa9 	bl	80020d0 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800217e:	68f8      	ldr	r0, [r7, #12]
 8002180:	f7ff fd84 	bl	8001c8c <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	2200      	movs	r2, #0
 8002188:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 800218c:	bf00      	nop
 800218e:	3710      	adds	r7, #16
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}

08002194 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002194:	b480      	push	{r7}
 8002196:	b085      	sub	sp, #20
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021a8:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80021aa:	89fb      	ldrh	r3, [r7, #14]
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	89fa      	ldrh	r2, [r7, #14]
 80021b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80021b6:	68bb      	ldr	r3, [r7, #8]
 80021b8:	7c1b      	ldrb	r3, [r3, #16]
 80021ba:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80021bc:	89fb      	ldrh	r3, [r7, #14]
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	89fa      	ldrh	r2, [r7, #14]
 80021c6:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80021ce:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80021d0:	89fb      	ldrh	r3, [r7, #14]
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	89fa      	ldrh	r2, [r7, #14]
 80021da:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80021e2:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80021e4:	89fb      	ldrh	r3, [r7, #14]
 80021e6:	687a      	ldr	r2, [r7, #4]
 80021e8:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80021ec:	4413      	add	r3, r2
 80021ee:	68ba      	ldr	r2, [r7, #8]
 80021f0:	7c52      	ldrb	r2, [r2, #17]
 80021f2:	4293      	cmp	r3, r2
 80021f4:	dd08      	ble.n	8002208 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80021f6:	68bb      	ldr	r3, [r7, #8]
 80021f8:	7c5b      	ldrb	r3, [r3, #17]
 80021fa:	b29a      	uxth	r2, r3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002202:	b29b      	uxth	r3, r3
 8002204:	1ad3      	subs	r3, r2, r3
 8002206:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002208:	89fb      	ldrh	r3, [r7, #14]
 800220a:	00db      	lsls	r3, r3, #3
 800220c:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800222a:	89fb      	ldrh	r3, [r7, #14]
 800222c:	4413      	add	r3, r2
 800222e:	b29a      	uxth	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002236:	68bb      	ldr	r3, [r7, #8]
 8002238:	8a9a      	ldrh	r2, [r3, #20]
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8002240:	68bb      	ldr	r3, [r7, #8]
 8002242:	8ada      	ldrh	r2, [r3, #22]
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800224a:	bf00      	nop
 800224c:	3714      	adds	r7, #20
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr

08002256 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002256:	b580      	push	{r7, lr}
 8002258:	b084      	sub	sp, #16
 800225a:	af02      	add	r7, sp, #8
 800225c:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002276:	9300      	str	r3, [sp, #0]
 8002278:	4603      	mov	r3, r0
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f7ff fe5d 	bl	8001f3a <u8g2_IsIntersection>
 8002280:	4603      	mov	r3, r0
 8002282:	2b00      	cmp	r3, #0
 8002284:	d104      	bne.n	8002290 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800228e:	e03b      	b.n	8002308 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2201      	movs	r2, #1
 8002294:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80022a4:	429a      	cmp	r2, r3
 80022a6:	d205      	bcs.n	80022b4 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d905      	bls.n	80022d0 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80022dc:	429a      	cmp	r2, r3
 80022de:	d205      	bcs.n	80022ec <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d905      	bls.n	8002308 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002308:	bf00      	nop
 800230a:	3708      	adds	r7, #8
 800230c:	46bd      	mov	sp, r7
 800230e:	bd80      	pop	{r7, pc}

08002310 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b082      	sub	sp, #8
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002318:	6878      	ldr	r0, [r7, #4]
 800231a:	f7ff ff3b 	bl	8002194 <u8g2_update_dimension_common>
}
 800231e:	bf00      	nop
 8002320:	3708      	adds	r7, #8
 8002322:	46bd      	mov	sp, r7
 8002324:	bd80      	pop	{r7, pc}

08002326 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002326:	b580      	push	{r7, lr}
 8002328:	b082      	sub	sp, #8
 800232a:	af00      	add	r7, sp, #0
 800232c:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800235a:	6878      	ldr	r0, [r7, #4]
 800235c:	f7ff ff7b 	bl	8002256 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002360:	bf00      	nop
 8002362:	3708      	adds	r7, #8
 8002364:	46bd      	mov	sp, r7
 8002366:	bd80      	pop	{r7, pc}

08002368 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002368:	b580      	push	{r7, lr}
 800236a:	b086      	sub	sp, #24
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	4608      	mov	r0, r1
 8002372:	4611      	mov	r1, r2
 8002374:	461a      	mov	r2, r3
 8002376:	4603      	mov	r3, r0
 8002378:	817b      	strh	r3, [r7, #10]
 800237a:	460b      	mov	r3, r1
 800237c:	813b      	strh	r3, [r7, #8]
 800237e:	4613      	mov	r3, r2
 8002380:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002382:	88f8      	ldrh	r0, [r7, #6]
 8002384:	893a      	ldrh	r2, [r7, #8]
 8002386:	8979      	ldrh	r1, [r7, #10]
 8002388:	7e3b      	ldrb	r3, [r7, #24]
 800238a:	9300      	str	r3, [sp, #0]
 800238c:	4603      	mov	r3, r0
 800238e:	68f8      	ldr	r0, [r7, #12]
 8002390:	f7ff fcf4 	bl	8001d7c <u8g2_draw_hv_line_2dir>
}
 8002394:	bf00      	nop
 8002396:	3710      	adds	r7, #16
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}

0800239c <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800239c:	b480      	push	{r7}
 800239e:	b083      	sub	sp, #12
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80023ac:	bf00      	nop
 80023ae:	370c      	adds	r7, #12
 80023b0:	46bd      	mov	sp, r7
 80023b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b6:	4770      	bx	lr

080023b8 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80023b8:	b480      	push	{r7}
 80023ba:	b083      	sub	sp, #12
 80023bc:	af00      	add	r7, sp, #0
 80023be:	6078      	str	r0, [r7, #4]
 80023c0:	460b      	mov	r3, r1
 80023c2:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80023c4:	78fb      	ldrb	r3, [r7, #3]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d002      	beq.n	80023d0 <u8x8_ascii_next+0x18>
 80023ca:	78fb      	ldrb	r3, [r7, #3]
 80023cc:	2b0a      	cmp	r3, #10
 80023ce:	d102      	bne.n	80023d6 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80023d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80023d4:	e001      	b.n	80023da <u8x8_ascii_next+0x22>
  return b;
 80023d6:	78fb      	ldrb	r3, [r7, #3]
 80023d8:	b29b      	uxth	r3, r3
}
 80023da:	4618      	mov	r0, r3
 80023dc:	370c      	adds	r7, #12
 80023de:	46bd      	mov	sp, r7
 80023e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e4:	4770      	bx	lr

080023e6 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80023e6:	b590      	push	{r4, r7, lr}
 80023e8:	b085      	sub	sp, #20
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	60f8      	str	r0, [r7, #12]
 80023ee:	460b      	mov	r3, r1
 80023f0:	607a      	str	r2, [r7, #4]
 80023f2:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	691c      	ldr	r4, [r3, #16]
 80023f8:	7afa      	ldrb	r2, [r7, #11]
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	2117      	movs	r1, #23
 80023fe:	68f8      	ldr	r0, [r7, #12]
 8002400:	47a0      	blx	r4
 8002402:	4603      	mov	r3, r0
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bd90      	pop	{r4, r7, pc}

0800240c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800240c:	b580      	push	{r7, lr}
 800240e:	b082      	sub	sp, #8
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	460b      	mov	r3, r1
 8002416:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002418:	1cfb      	adds	r3, r7, #3
 800241a:	461a      	mov	r2, r3
 800241c:	2101      	movs	r1, #1
 800241e:	6878      	ldr	r0, [r7, #4]
 8002420:	f7ff ffe1 	bl	80023e6 <u8x8_byte_SendBytes>
 8002424:	4603      	mov	r3, r0
}
 8002426:	4618      	mov	r0, r3
 8002428:	3708      	adds	r7, #8
 800242a:	46bd      	mov	sp, r7
 800242c:	bd80      	pop	{r7, pc}

0800242e <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800242e:	b590      	push	{r4, r7, lr}
 8002430:	b083      	sub	sp, #12
 8002432:	af00      	add	r7, sp, #0
 8002434:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	691c      	ldr	r4, [r3, #16]
 800243a:	2300      	movs	r3, #0
 800243c:	2200      	movs	r2, #0
 800243e:	2118      	movs	r1, #24
 8002440:	6878      	ldr	r0, [r7, #4]
 8002442:	47a0      	blx	r4
 8002444:	4603      	mov	r3, r0
}
 8002446:	4618      	mov	r0, r3
 8002448:	370c      	adds	r7, #12
 800244a:	46bd      	mov	sp, r7
 800244c:	bd90      	pop	{r4, r7, pc}

0800244e <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 800244e:	b590      	push	{r4, r7, lr}
 8002450:	b083      	sub	sp, #12
 8002452:	af00      	add	r7, sp, #0
 8002454:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	691c      	ldr	r4, [r3, #16]
 800245a:	2300      	movs	r3, #0
 800245c:	2200      	movs	r2, #0
 800245e:	2119      	movs	r1, #25
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	47a0      	blx	r4
 8002464:	4603      	mov	r3, r0
}
 8002466:	4618      	mov	r0, r3
 8002468:	370c      	adds	r7, #12
 800246a:	46bd      	mov	sp, r7
 800246c:	bd90      	pop	{r4, r7, pc}

0800246e <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 800246e:	b590      	push	{r4, r7, lr}
 8002470:	b083      	sub	sp, #12
 8002472:	af00      	add	r7, sp, #0
 8002474:	6078      	str	r0, [r7, #4]
 8002476:	460b      	mov	r3, r1
 8002478:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	68dc      	ldr	r4, [r3, #12]
 800247e:	78fa      	ldrb	r2, [r7, #3]
 8002480:	2300      	movs	r3, #0
 8002482:	2115      	movs	r1, #21
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	47a0      	blx	r4
 8002488:	4603      	mov	r3, r0
}
 800248a:	4618      	mov	r0, r3
 800248c:	370c      	adds	r7, #12
 800248e:	46bd      	mov	sp, r7
 8002490:	bd90      	pop	{r4, r7, pc}

08002492 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002492:	b590      	push	{r4, r7, lr}
 8002494:	b083      	sub	sp, #12
 8002496:	af00      	add	r7, sp, #0
 8002498:	6078      	str	r0, [r7, #4]
 800249a:	460b      	mov	r3, r1
 800249c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	68dc      	ldr	r4, [r3, #12]
 80024a2:	78fa      	ldrb	r2, [r7, #3]
 80024a4:	2300      	movs	r3, #0
 80024a6:	2116      	movs	r1, #22
 80024a8:	6878      	ldr	r0, [r7, #4]
 80024aa:	47a0      	blx	r4
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	370c      	adds	r7, #12
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd90      	pop	{r4, r7, pc}

080024b6 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80024b6:	b590      	push	{r4, r7, lr}
 80024b8:	b085      	sub	sp, #20
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	60f8      	str	r0, [r7, #12]
 80024be:	460b      	mov	r3, r1
 80024c0:	607a      	str	r2, [r7, #4]
 80024c2:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68dc      	ldr	r4, [r3, #12]
 80024c8:	7afa      	ldrb	r2, [r7, #11]
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	2117      	movs	r1, #23
 80024ce:	68f8      	ldr	r0, [r7, #12]
 80024d0:	47a0      	blx	r4
 80024d2:	4603      	mov	r3, r0
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	3714      	adds	r7, #20
 80024d8:	46bd      	mov	sp, r7
 80024da:	bd90      	pop	{r4, r7, pc}

080024dc <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 80024dc:	b590      	push	{r4, r7, lr}
 80024de:	b083      	sub	sp, #12
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	68dc      	ldr	r4, [r3, #12]
 80024e8:	2300      	movs	r3, #0
 80024ea:	2200      	movs	r2, #0
 80024ec:	2118      	movs	r1, #24
 80024ee:	6878      	ldr	r0, [r7, #4]
 80024f0:	47a0      	blx	r4
 80024f2:	4603      	mov	r3, r0
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	370c      	adds	r7, #12
 80024f8:	46bd      	mov	sp, r7
 80024fa:	bd90      	pop	{r4, r7, pc}

080024fc <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 80024fc:	b590      	push	{r4, r7, lr}
 80024fe:	b083      	sub	sp, #12
 8002500:	af00      	add	r7, sp, #0
 8002502:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68dc      	ldr	r4, [r3, #12]
 8002508:	2300      	movs	r3, #0
 800250a:	2200      	movs	r2, #0
 800250c:	2119      	movs	r1, #25
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	47a0      	blx	r4
 8002512:	4603      	mov	r3, r0
}
 8002514:	4618      	mov	r0, r3
 8002516:	370c      	adds	r7, #12
 8002518:	46bd      	mov	sp, r7
 800251a:	bd90      	pop	{r4, r7, pc}

0800251c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800251c:	b590      	push	{r4, r7, lr}
 800251e:	b085      	sub	sp, #20
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	73fb      	strb	r3, [r7, #15]
    data++;
 800252c:	683b      	ldr	r3, [r7, #0]
 800252e:	3301      	adds	r3, #1
 8002530:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002532:	7bfb      	ldrb	r3, [r7, #15]
 8002534:	2bfe      	cmp	r3, #254	; 0xfe
 8002536:	d031      	beq.n	800259c <u8x8_cad_SendSequence+0x80>
 8002538:	2bfe      	cmp	r3, #254	; 0xfe
 800253a:	dc3d      	bgt.n	80025b8 <u8x8_cad_SendSequence+0x9c>
 800253c:	2b19      	cmp	r3, #25
 800253e:	dc3b      	bgt.n	80025b8 <u8x8_cad_SendSequence+0x9c>
 8002540:	2b18      	cmp	r3, #24
 8002542:	da23      	bge.n	800258c <u8x8_cad_SendSequence+0x70>
 8002544:	2b16      	cmp	r3, #22
 8002546:	dc02      	bgt.n	800254e <u8x8_cad_SendSequence+0x32>
 8002548:	2b15      	cmp	r3, #21
 800254a:	da03      	bge.n	8002554 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 800254c:	e034      	b.n	80025b8 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 800254e:	2b17      	cmp	r3, #23
 8002550:	d00e      	beq.n	8002570 <u8x8_cad_SendSequence+0x54>
	return;
 8002552:	e031      	b.n	80025b8 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	781b      	ldrb	r3, [r3, #0]
 8002558:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	68dc      	ldr	r4, [r3, #12]
 800255e:	7bba      	ldrb	r2, [r7, #14]
 8002560:	7bf9      	ldrb	r1, [r7, #15]
 8002562:	2300      	movs	r3, #0
 8002564:	6878      	ldr	r0, [r7, #4]
 8002566:	47a0      	blx	r4
	  data++;
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	3301      	adds	r3, #1
 800256c:	603b      	str	r3, [r7, #0]
	  break;
 800256e:	e022      	b.n	80025b6 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002570:	683b      	ldr	r3, [r7, #0]
 8002572:	781b      	ldrb	r3, [r3, #0]
 8002574:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002576:	f107 030e 	add.w	r3, r7, #14
 800257a:	461a      	mov	r2, r3
 800257c:	2101      	movs	r1, #1
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7ff ff99 	bl	80024b6 <u8x8_cad_SendData>
	  data++;
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	3301      	adds	r3, #1
 8002588:	603b      	str	r3, [r7, #0]
	  break;
 800258a:	e014      	b.n	80025b6 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	68dc      	ldr	r4, [r3, #12]
 8002590:	7bf9      	ldrb	r1, [r7, #15]
 8002592:	2300      	movs	r3, #0
 8002594:	2200      	movs	r2, #0
 8002596:	6878      	ldr	r0, [r7, #4]
 8002598:	47a0      	blx	r4
	  break;
 800259a:	e00c      	b.n	80025b6 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80025a2:	7bbb      	ldrb	r3, [r7, #14]
 80025a4:	461a      	mov	r2, r3
 80025a6:	2129      	movs	r1, #41	; 0x29
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 fa0a 	bl	80029c2 <u8x8_gpio_call>
	  data++;
 80025ae:	683b      	ldr	r3, [r7, #0]
 80025b0:	3301      	adds	r3, #1
 80025b2:	603b      	str	r3, [r7, #0]
	  break;
 80025b4:	bf00      	nop
    cmd = *data;
 80025b6:	e7b6      	b.n	8002526 <u8x8_cad_SendSequence+0xa>
	return;
 80025b8:	bf00      	nop
    }
  }
}
 80025ba:	3714      	adds	r7, #20
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd90      	pop	{r4, r7, pc}

080025c0 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80025c0:	b590      	push	{r4, r7, lr}
 80025c2:	b085      	sub	sp, #20
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	460b      	mov	r3, r1
 80025ca:	607a      	str	r2, [r7, #4]
 80025cc:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80025ce:	68f8      	ldr	r0, [r7, #12]
 80025d0:	f7ff ff2d 	bl	800242e <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80025d4:	2140      	movs	r1, #64	; 0x40
 80025d6:	68f8      	ldr	r0, [r7, #12]
 80025d8:	f7ff ff18 	bl	800240c <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	691c      	ldr	r4, [r3, #16]
 80025e0:	7afa      	ldrb	r2, [r7, #11]
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	2117      	movs	r1, #23
 80025e6:	68f8      	ldr	r0, [r7, #12]
 80025e8:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 80025ea:	68f8      	ldr	r0, [r7, #12]
 80025ec:	f7ff ff2f 	bl	800244e <u8x8_byte_EndTransfer>
}
 80025f0:	bf00      	nop
 80025f2:	3714      	adds	r7, #20
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bd90      	pop	{r4, r7, pc}

080025f8 <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80025f8:	b590      	push	{r4, r7, lr}
 80025fa:	b087      	sub	sp, #28
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	60f8      	str	r0, [r7, #12]
 8002600:	607b      	str	r3, [r7, #4]
 8002602:	460b      	mov	r3, r1
 8002604:	72fb      	strb	r3, [r7, #11]
 8002606:	4613      	mov	r3, r2
 8002608:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 800260a:	7afb      	ldrb	r3, [r7, #11]
 800260c:	3b14      	subs	r3, #20
 800260e:	2b05      	cmp	r3, #5
 8002610:	d848      	bhi.n	80026a4 <u8x8_cad_ssd13xx_i2c+0xac>
 8002612:	a201      	add	r2, pc, #4	; (adr r2, 8002618 <u8x8_cad_ssd13xx_i2c+0x20>)
 8002614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002618:	08002681 	.word	0x08002681
 800261c:	08002631 	.word	0x08002631
 8002620:	08002631 	.word	0x08002631
 8002624:	08002651 	.word	0x08002651
 8002628:	080026a9 	.word	0x080026a9
 800262c:	080026a9 	.word	0x080026a9
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 8002630:	68f8      	ldr	r0, [r7, #12]
 8002632:	f7ff fefc 	bl	800242e <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 8002636:	2100      	movs	r1, #0
 8002638:	68f8      	ldr	r0, [r7, #12]
 800263a:	f7ff fee7 	bl	800240c <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800263e:	7abb      	ldrb	r3, [r7, #10]
 8002640:	4619      	mov	r1, r3
 8002642:	68f8      	ldr	r0, [r7, #12]
 8002644:	f7ff fee2 	bl	800240c <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 8002648:	68f8      	ldr	r0, [r7, #12]
 800264a:	f7ff ff00 	bl	800244e <u8x8_byte_EndTransfer>
      break;
 800264e:	e02c      	b.n	80026aa <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002654:	e00a      	b.n	800266c <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002656:	697a      	ldr	r2, [r7, #20]
 8002658:	2118      	movs	r1, #24
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f7ff ffb0 	bl	80025c0 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002660:	7abb      	ldrb	r3, [r7, #10]
 8002662:	3b18      	subs	r3, #24
 8002664:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3318      	adds	r3, #24
 800266a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 800266c:	7abb      	ldrb	r3, [r7, #10]
 800266e:	2b18      	cmp	r3, #24
 8002670:	d8f1      	bhi.n	8002656 <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002672:	7abb      	ldrb	r3, [r7, #10]
 8002674:	697a      	ldr	r2, [r7, #20]
 8002676:	4619      	mov	r1, r3
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f7ff ffa1 	bl	80025c0 <u8x8_i2c_data_transfer>
      break;
 800267e:	e014      	b.n	80026aa <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002686:	2bff      	cmp	r3, #255	; 0xff
 8002688:	d103      	bne.n	8002692 <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	2278      	movs	r2, #120	; 0x78
 800268e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	691c      	ldr	r4, [r3, #16]
 8002696:	7aba      	ldrb	r2, [r7, #10]
 8002698:	7af9      	ldrb	r1, [r7, #11]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	68f8      	ldr	r0, [r7, #12]
 800269e:	47a0      	blx	r4
 80026a0:	4603      	mov	r3, r0
 80026a2:	e003      	b.n	80026ac <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 80026a4:	2300      	movs	r3, #0
 80026a6:	e001      	b.n	80026ac <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 80026a8:	bf00      	nop
  }
  return 1;
 80026aa:	2301      	movs	r3, #1
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	371c      	adds	r7, #28
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd90      	pop	{r4, r7, pc}

080026b4 <u8x8_d_ssd1305_generic>:
};



static uint8_t u8x8_d_ssd1305_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b086      	sub	sp, #24
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	60f8      	str	r0, [r7, #12]
 80026bc:	607b      	str	r3, [r7, #4]
 80026be:	460b      	mov	r3, r1
 80026c0:	72fb      	strb	r3, [r7, #11]
 80026c2:	4613      	mov	r3, r2
 80026c4:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	2b0f      	cmp	r3, #15
 80026ca:	d006      	beq.n	80026da <u8x8_d_ssd1305_generic+0x26>
 80026cc:	2b0f      	cmp	r3, #15
 80026ce:	dc67      	bgt.n	80027a0 <u8x8_d_ssd1305_generic+0xec>
 80026d0:	2b0b      	cmp	r3, #11
 80026d2:	d048      	beq.n	8002766 <u8x8_d_ssd1305_generic+0xb2>
 80026d4:	2b0e      	cmp	r3, #14
 80026d6:	d053      	beq.n	8002780 <u8x8_d_ssd1305_generic+0xcc>
 80026d8:	e062      	b.n	80027a0 <u8x8_d_ssd1305_generic+0xec>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80026da:	68f8      	ldr	r0, [r7, #12]
 80026dc:	f7ff fefe 	bl	80024dc <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	795b      	ldrb	r3, [r3, #5]
 80026e4:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 80026e6:	7dfb      	ldrb	r3, [r7, #23]
 80026e8:	00db      	lsls	r3, r3, #3
 80026ea:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 80026ec:	68fb      	ldr	r3, [r7, #12]
 80026ee:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 80026f2:	7dfb      	ldrb	r3, [r7, #23]
 80026f4:	4413      	add	r3, r2
 80026f6:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 80026f8:	2140      	movs	r1, #64	; 0x40
 80026fa:	68f8      	ldr	r0, [r7, #12]
 80026fc:	f7ff feb7 	bl	800246e <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002700:	7dfb      	ldrb	r3, [r7, #23]
 8002702:	091b      	lsrs	r3, r3, #4
 8002704:	b2db      	uxtb	r3, r3
 8002706:	f043 0310 	orr.w	r3, r3, #16
 800270a:	b2db      	uxtb	r3, r3
 800270c:	4619      	mov	r1, r3
 800270e:	68f8      	ldr	r0, [r7, #12]
 8002710:	f7ff fead 	bl	800246e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 8002714:	7dfb      	ldrb	r3, [r7, #23]
 8002716:	f003 030f 	and.w	r3, r3, #15
 800271a:	b2db      	uxtb	r3, r3
 800271c:	4619      	mov	r1, r3
 800271e:	68f8      	ldr	r0, [r7, #12]
 8002720:	f7ff feb7 	bl	8002492 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	799b      	ldrb	r3, [r3, #6]
 8002728:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800272c:	b2db      	uxtb	r3, r3
 800272e:	4619      	mov	r1, r3
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff feae 	bl	8002492 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	791b      	ldrb	r3, [r3, #4]
 800273a:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002742:	7dbb      	ldrb	r3, [r7, #22]
 8002744:	00db      	lsls	r3, r3, #3
 8002746:	b2db      	uxtb	r3, r3
 8002748:	693a      	ldr	r2, [r7, #16]
 800274a:	4619      	mov	r1, r3
 800274c:	68f8      	ldr	r0, [r7, #12]
 800274e:	f7ff feb2 	bl	80024b6 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8002752:	7abb      	ldrb	r3, [r7, #10]
 8002754:	3b01      	subs	r3, #1
 8002756:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002758:	7abb      	ldrb	r3, [r7, #10]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d1eb      	bne.n	8002736 <u8x8_d_ssd1305_generic+0x82>
      
      u8x8_cad_EndTransfer(u8x8);
 800275e:	68f8      	ldr	r0, [r7, #12]
 8002760:	f7ff fecc 	bl	80024fc <u8x8_cad_EndTransfer>
      break;
 8002764:	e01e      	b.n	80027a4 <u8x8_d_ssd1305_generic+0xf0>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002766:	7abb      	ldrb	r3, [r7, #10]
 8002768:	2b00      	cmp	r3, #0
 800276a:	d104      	bne.n	8002776 <u8x8_d_ssd1305_generic+0xc2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave0_seq);
 800276c:	4910      	ldr	r1, [pc, #64]	; (80027b0 <u8x8_d_ssd1305_generic+0xfc>)
 800276e:	68f8      	ldr	r0, [r7, #12]
 8002770:	f7ff fed4 	bl	800251c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
      break;
 8002774:	e016      	b.n	80027a4 <u8x8_d_ssd1305_generic+0xf0>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
 8002776:	490f      	ldr	r1, [pc, #60]	; (80027b4 <u8x8_d_ssd1305_generic+0x100>)
 8002778:	68f8      	ldr	r0, [r7, #12]
 800277a:	f7ff fecf 	bl	800251c <u8x8_cad_SendSequence>
      break;
 800277e:	e011      	b.n	80027a4 <u8x8_d_ssd1305_generic+0xf0>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002780:	68f8      	ldr	r0, [r7, #12]
 8002782:	f7ff feab 	bl	80024dc <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002786:	2181      	movs	r1, #129	; 0x81
 8002788:	68f8      	ldr	r0, [r7, #12]
 800278a:	f7ff fe70 	bl	800246e <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1305 has range from 0 to 255 */
 800278e:	7abb      	ldrb	r3, [r7, #10]
 8002790:	4619      	mov	r1, r3
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f7ff fe7d 	bl	8002492 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f7ff feaf 	bl	80024fc <u8x8_cad_EndTransfer>
      break;
 800279e:	e001      	b.n	80027a4 <u8x8_d_ssd1305_generic+0xf0>
#endif
    default:
      return 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e000      	b.n	80027a6 <u8x8_d_ssd1305_generic+0xf2>
  }
  return 1;
 80027a4:	2301      	movs	r3, #1
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	0800c9dc 	.word	0x0800c9dc
 80027b4:	0800c9e4 	.word	0x0800c9e4

080027b8 <u8x8_d_ssd1305_128x32_noname>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1305_128x32_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80027b8:	b580      	push	{r7, lr}
 80027ba:	b084      	sub	sp, #16
 80027bc:	af00      	add	r7, sp, #0
 80027be:	60f8      	str	r0, [r7, #12]
 80027c0:	607b      	str	r3, [r7, #4]
 80027c2:	460b      	mov	r3, r1
 80027c4:	72fb      	strb	r3, [r7, #11]
 80027c6:	4613      	mov	r3, r2
 80027c8:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1305_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80027ca:	7aba      	ldrb	r2, [r7, #10]
 80027cc:	7af9      	ldrb	r1, [r7, #11]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	68f8      	ldr	r0, [r7, #12]
 80027d2:	f7ff ff6f 	bl	80026b4 <u8x8_d_ssd1305_generic>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d001      	beq.n	80027e0 <u8x8_d_ssd1305_128x32_noname+0x28>
    return 1;
 80027dc:	2301      	movs	r3, #1
 80027de:	e032      	b.n	8002846 <u8x8_d_ssd1305_128x32_noname+0x8e>
  
  switch(msg)
 80027e0:	7afb      	ldrb	r3, [r7, #11]
 80027e2:	2b0d      	cmp	r3, #13
 80027e4:	d006      	beq.n	80027f4 <u8x8_d_ssd1305_128x32_noname+0x3c>
 80027e6:	2b0d      	cmp	r3, #13
 80027e8:	dc2a      	bgt.n	8002840 <u8x8_d_ssd1305_128x32_noname+0x88>
 80027ea:	2b09      	cmp	r3, #9
 80027ec:	d023      	beq.n	8002836 <u8x8_d_ssd1305_128x32_noname+0x7e>
 80027ee:	2b0a      	cmp	r3, #10
 80027f0:	d019      	beq.n	8002826 <u8x8_d_ssd1305_128x32_noname+0x6e>
 80027f2:	e025      	b.n	8002840 <u8x8_d_ssd1305_128x32_noname+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 80027f4:	7abb      	ldrb	r3, [r7, #10]
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d10a      	bne.n	8002810 <u8x8_d_ssd1305_128x32_noname+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip0_seq);
 80027fa:	4915      	ldr	r1, [pc, #84]	; (8002850 <u8x8_d_ssd1305_128x32_noname+0x98>)
 80027fc:	68f8      	ldr	r0, [r7, #12]
 80027fe:	f7ff fe8d 	bl	800251c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	7c9a      	ldrb	r2, [r3, #18]
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800280e:	e019      	b.n	8002844 <u8x8_d_ssd1305_128x32_noname+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
 8002810:	4910      	ldr	r1, [pc, #64]	; (8002854 <u8x8_d_ssd1305_128x32_noname+0x9c>)
 8002812:	68f8      	ldr	r0, [r7, #12]
 8002814:	f7ff fe82 	bl	800251c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	7cda      	ldrb	r2, [r3, #19]
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8002824:	e00e      	b.n	8002844 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002826:	68f8      	ldr	r0, [r7, #12]
 8002828:	f000 f82e 	bl	8002888 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_noname_init_seq);    
 800282c:	490a      	ldr	r1, [pc, #40]	; (8002858 <u8x8_d_ssd1305_128x32_noname+0xa0>)
 800282e:	68f8      	ldr	r0, [r7, #12]
 8002830:	f7ff fe74 	bl	800251c <u8x8_cad_SendSequence>
      break;
 8002834:	e006      	b.n	8002844 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1305_128x32_noname_display_info);
 8002836:	4909      	ldr	r1, [pc, #36]	; (800285c <u8x8_d_ssd1305_128x32_noname+0xa4>)
 8002838:	68f8      	ldr	r0, [r7, #12]
 800283a:	f000 f811 	bl	8002860 <u8x8_d_helper_display_setup_memory>
      break;
 800283e:	e001      	b.n	8002844 <u8x8_d_ssd1305_128x32_noname+0x8c>
    default:
      return 0;
 8002840:	2300      	movs	r3, #0
 8002842:	e000      	b.n	8002846 <u8x8_d_ssd1305_128x32_noname+0x8e>
  }
  return 1;
 8002844:	2301      	movs	r3, #1
}
 8002846:	4618      	mov	r0, r3
 8002848:	3710      	adds	r7, #16
 800284a:	46bd      	mov	sp, r7
 800284c:	bd80      	pop	{r7, pc}
 800284e:	bf00      	nop
 8002850:	0800c9ec 	.word	0x0800c9ec
 8002854:	0800c9f8 	.word	0x0800c9f8
 8002858:	0800ca1c 	.word	0x0800ca1c
 800285c:	0800ca04 	.word	0x0800ca04

08002860 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002860:	b480      	push	{r7}
 8002862:	b083      	sub	sp, #12
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	683a      	ldr	r2, [r7, #0]
 800286e:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	7c9a      	ldrb	r2, [r3, #18]
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 800287c:	bf00      	nop
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr

08002888 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002888:	b590      	push	{r4, r7, lr}
 800288a:	b083      	sub	sp, #12
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	695c      	ldr	r4, [r3, #20]
 8002894:	2300      	movs	r3, #0
 8002896:	2200      	movs	r2, #0
 8002898:	2128      	movs	r1, #40	; 0x28
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	68dc      	ldr	r4, [r3, #12]
 80028a2:	2300      	movs	r3, #0
 80028a4:	2200      	movs	r2, #0
 80028a6:	2114      	movs	r1, #20
 80028a8:	6878      	ldr	r0, [r7, #4]
 80028aa:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80028ac:	2201      	movs	r2, #1
 80028ae:	214b      	movs	r1, #75	; 0x4b
 80028b0:	6878      	ldr	r0, [r7, #4]
 80028b2:	f000 f886 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	791b      	ldrb	r3, [r3, #4]
 80028bc:	461a      	mov	r2, r3
 80028be:	2129      	movs	r1, #41	; 0x29
 80028c0:	6878      	ldr	r0, [r7, #4]
 80028c2:	f000 f87e 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80028c6:	2200      	movs	r2, #0
 80028c8:	214b      	movs	r1, #75	; 0x4b
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f879 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	791b      	ldrb	r3, [r3, #4]
 80028d6:	461a      	mov	r2, r3
 80028d8:	2129      	movs	r1, #41	; 0x29
 80028da:	6878      	ldr	r0, [r7, #4]
 80028dc:	f000 f871 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 80028e0:	2201      	movs	r2, #1
 80028e2:	214b      	movs	r1, #75	; 0x4b
 80028e4:	6878      	ldr	r0, [r7, #4]
 80028e6:	f000 f86c 	bl	80029c2 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	795b      	ldrb	r3, [r3, #5]
 80028f0:	461a      	mov	r2, r3
 80028f2:	2129      	movs	r1, #41	; 0x29
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f864 	bl	80029c2 <u8x8_gpio_call>
}    
 80028fa:	bf00      	nop
 80028fc:	370c      	adds	r7, #12
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}

08002902 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002902:	b590      	push	{r4, r7, lr}
 8002904:	b085      	sub	sp, #20
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
 800290a:	4608      	mov	r0, r1
 800290c:	4611      	mov	r1, r2
 800290e:	461a      	mov	r2, r3
 8002910:	4603      	mov	r3, r0
 8002912:	70fb      	strb	r3, [r7, #3]
 8002914:	460b      	mov	r3, r1
 8002916:	70bb      	strb	r3, [r7, #2]
 8002918:	4613      	mov	r3, r2
 800291a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800291c:	78fb      	ldrb	r3, [r7, #3]
 800291e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002920:	78bb      	ldrb	r3, [r7, #2]
 8002922:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002924:	787b      	ldrb	r3, [r7, #1]
 8002926:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002928:	6a3b      	ldr	r3, [r7, #32]
 800292a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	689c      	ldr	r4, [r3, #8]
 8002930:	f107 0308 	add.w	r3, r7, #8
 8002934:	2201      	movs	r2, #1
 8002936:	210f      	movs	r1, #15
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	47a0      	blx	r4
 800293c:	4603      	mov	r3, r0
}
 800293e:	4618      	mov	r0, r3
 8002940:	3714      	adds	r7, #20
 8002942:	46bd      	mov	sp, r7
 8002944:	bd90      	pop	{r4, r7, pc}

08002946 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 8002946:	b590      	push	{r4, r7, lr}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	689c      	ldr	r4, [r3, #8]
 8002952:	2300      	movs	r3, #0
 8002954:	2200      	movs	r2, #0
 8002956:	2109      	movs	r1, #9
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	47a0      	blx	r4
}
 800295c:	bf00      	nop
 800295e:	370c      	adds	r7, #12
 8002960:	46bd      	mov	sp, r7
 8002962:	bd90      	pop	{r4, r7, pc}

08002964 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002964:	b590      	push	{r4, r7, lr}
 8002966:	b083      	sub	sp, #12
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689c      	ldr	r4, [r3, #8]
 8002970:	2300      	movs	r3, #0
 8002972:	2200      	movs	r2, #0
 8002974:	210a      	movs	r1, #10
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800297a:	bf00      	nop
 800297c:	370c      	adds	r7, #12
 800297e:	46bd      	mov	sp, r7
 8002980:	bd90      	pop	{r4, r7, pc}

08002982 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 8002982:	b590      	push	{r4, r7, lr}
 8002984:	b083      	sub	sp, #12
 8002986:	af00      	add	r7, sp, #0
 8002988:	6078      	str	r0, [r7, #4]
 800298a:	460b      	mov	r3, r1
 800298c:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	689c      	ldr	r4, [r3, #8]
 8002992:	78fa      	ldrb	r2, [r7, #3]
 8002994:	2300      	movs	r3, #0
 8002996:	210b      	movs	r1, #11
 8002998:	6878      	ldr	r0, [r7, #4]
 800299a:	47a0      	blx	r4
}
 800299c:	bf00      	nop
 800299e:	370c      	adds	r7, #12
 80029a0:	46bd      	mov	sp, r7
 80029a2:	bd90      	pop	{r4, r7, pc}

080029a4 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80029a4:	b590      	push	{r4, r7, lr}
 80029a6:	b083      	sub	sp, #12
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	689c      	ldr	r4, [r3, #8]
 80029b0:	2300      	movs	r3, #0
 80029b2:	2200      	movs	r2, #0
 80029b4:	2110      	movs	r1, #16
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	47a0      	blx	r4
}
 80029ba:	bf00      	nop
 80029bc:	370c      	adds	r7, #12
 80029be:	46bd      	mov	sp, r7
 80029c0:	bd90      	pop	{r4, r7, pc}

080029c2 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80029c2:	b590      	push	{r4, r7, lr}
 80029c4:	b083      	sub	sp, #12
 80029c6:	af00      	add	r7, sp, #0
 80029c8:	6078      	str	r0, [r7, #4]
 80029ca:	460b      	mov	r3, r1
 80029cc:	70fb      	strb	r3, [r7, #3]
 80029ce:	4613      	mov	r3, r2
 80029d0:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	695c      	ldr	r4, [r3, #20]
 80029d6:	78ba      	ldrb	r2, [r7, #2]
 80029d8:	78f9      	ldrb	r1, [r7, #3]
 80029da:	2300      	movs	r3, #0
 80029dc:	6878      	ldr	r0, [r7, #4]
 80029de:	47a0      	blx	r4
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	bd90      	pop	{r4, r7, pc}

080029e8 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80029e8:	b480      	push	{r7}
 80029ea:	b085      	sub	sp, #20
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	607b      	str	r3, [r7, #4]
 80029f2:	460b      	mov	r3, r1
 80029f4:	72fb      	strb	r3, [r7, #11]
 80029f6:	4613      	mov	r3, r2
 80029f8:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 80029fa:	2300      	movs	r3, #0
}
 80029fc:	4618      	mov	r0, r3
 80029fe:	3714      	adds	r7, #20
 8002a00:	46bd      	mov	sp, r7
 8002a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a06:	4770      	bx	lr

08002a08 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b083      	sub	sp, #12
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	4a11      	ldr	r2, [pc, #68]	; (8002a60 <u8x8_SetupDefaults+0x58>)
 8002a1a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	4a10      	ldr	r2, [pc, #64]	; (8002a60 <u8x8_SetupDefaults+0x58>)
 8002a20:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	4a0e      	ldr	r2, [pc, #56]	; (8002a60 <u8x8_SetupDefaults+0x58>)
 8002a26:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	4a0d      	ldr	r2, [pc, #52]	; (8002a60 <u8x8_SetupDefaults+0x58>)
 8002a2c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	2200      	movs	r2, #0
 8002a32:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2200      	movs	r2, #0
 8002a42:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	22ff      	movs	r2, #255	; 0xff
 8002a48:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	22ff      	movs	r2, #255	; 0xff
 8002a50:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr
 8002a60:	080029e9 	.word	0x080029e9

08002a64 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002a64:	b580      	push	{r7, lr}
 8002a66:	b084      	sub	sp, #16
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	60f8      	str	r0, [r7, #12]
 8002a6c:	60b9      	str	r1, [r7, #8]
 8002a6e:	607a      	str	r2, [r7, #4]
 8002a70:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002a72:	68f8      	ldr	r0, [r7, #12]
 8002a74:	f7ff ffc8 	bl	8002a08 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	683a      	ldr	r2, [r7, #0]
 8002a88:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	69ba      	ldr	r2, [r7, #24]
 8002a8e:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8002a90:	68f8      	ldr	r0, [r7, #12]
 8002a92:	f7ff ff58 	bl	8002946 <u8x8_SetupMemory>
}
 8002a96:	bf00      	nop
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
	...

08002aa0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	rotationSteps(dreal, dimag);
 8002aa6:	495f      	ldr	r1, [pc, #380]	; (8002c24 <main+0x184>)
 8002aa8:	485f      	ldr	r0, [pc, #380]	; (8002c28 <main+0x188>)
 8002aaa:	f000 fd29 	bl	8003500 <rotationSteps>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002aae:	f001 fa14 	bl	8003eda <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002ab2:	f000 f8d1 	bl	8002c58 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002ab6:	f000 faf9 	bl	80030ac <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002aba:	f000 fac7 	bl	800304c <MX_USART2_UART_Init>
	MX_CAN1_Init();
 8002abe:	f000 f9a1 	bl	8002e04 <MX_CAN1_Init>
	MX_I2C1_Init();
 8002ac2:	f000 fa13 	bl	8002eec <MX_I2C1_Init>
	MX_ADC1_Init();
 8002ac6:	f000 f929 	bl	8002d1c <MX_ADC1_Init>
	MX_DAC1_Init();
 8002aca:	f000 f9d3 	bl	8002e74 <MX_DAC1_Init>
	MX_TIM6_Init();
 8002ace:	f000 fa51 	bl	8002f74 <MX_TIM6_Init>
	MX_TIM7_Init();
 8002ad2:	f000 fa85 	bl	8002fe0 <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */

	MY_ADC1_Init();
 8002ad6:	f000 fb57 	bl	8003188 <MY_ADC1_Init>

	HAL_TIM_Base_Start(&htim7);
 8002ada:	4854      	ldr	r0, [pc, #336]	; (8002c2c <main+0x18c>)
 8002adc:	f005 f860 	bl	8007ba0 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 8002ae0:	4853      	ldr	r0, [pc, #332]	; (8002c30 <main+0x190>)
 8002ae2:	f005 f8a9 	bl	8007c38 <HAL_TIM_Base_Start_IT>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002ae6:	2100      	movs	r1, #0
 8002ae8:	4852      	ldr	r0, [pc, #328]	; (8002c34 <main+0x194>)
 8002aea:	f002 fe5d 	bl	80057a8 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8002aee:	2110      	movs	r1, #16
 8002af0:	4850      	ldr	r0, [pc, #320]	; (8002c34 <main+0x194>)
 8002af2:	f002 fe59 	bl	80057a8 <HAL_DAC_Start>

	setOutMuxBit(DRST_BIT, GPIO_PIN_RESET);
 8002af6:	2304      	movs	r3, #4
 8002af8:	b2db      	uxtb	r3, r3
 8002afa:	2100      	movs	r1, #0
 8002afc:	4618      	mov	r0, r3
 8002afe:	f000 fbdd 	bl	80032bc <setOutMuxBit>
	delayMicro(2);
 8002b02:	2002      	movs	r0, #2
 8002b04:	f000 fba0 	bl	8003248 <delayMicro>
	setOutMuxBit(DRST_BIT, GPIO_PIN_SET);
 8002b08:	2304      	movs	r3, #4
 8002b0a:	b2db      	uxtb	r3, r3
 8002b0c:	2101      	movs	r1, #1
 8002b0e:	4618      	mov	r0, r3
 8002b10:	f000 fbd4 	bl	80032bc <setOutMuxBit>
	u8g2_Setup_ssd1305_i2c_128x32_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c,
 8002b14:	4b48      	ldr	r3, [pc, #288]	; (8002c38 <main+0x198>)
 8002b16:	4a49      	ldr	r2, [pc, #292]	; (8002c3c <main+0x19c>)
 8002b18:	4949      	ldr	r1, [pc, #292]	; (8002c40 <main+0x1a0>)
 8002b1a:	484a      	ldr	r0, [pc, #296]	; (8002c44 <main+0x1a4>)
 8002b1c:	f7fe fb16 	bl	800114c <u8g2_Setup_ssd1305_i2c_128x32_noname_f>
			u8x8_gpio_and_delay);
	u8g2_InitDisplay(&u8g2);
 8002b20:	4848      	ldr	r0, [pc, #288]	; (8002c44 <main+0x1a4>)
 8002b22:	f7ff ff1f 	bl	8002964 <u8x8_InitDisplay>
	u8g2_ClearDisplay(&u8g2);
 8002b26:	4847      	ldr	r0, [pc, #284]	; (8002c44 <main+0x1a4>)
 8002b28:	f7fe faeb 	bl	8001102 <u8g2_ClearDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8002b2c:	2100      	movs	r1, #0
 8002b2e:	4845      	ldr	r0, [pc, #276]	; (8002c44 <main+0x1a4>)
 8002b30:	f7ff ff27 	bl	8002982 <u8x8_SetPowerSave>
	setOutMuxBit(DEN_BIT, GPIO_PIN_SET);
 8002b34:	2303      	movs	r3, #3
 8002b36:	b2db      	uxtb	r3, r3
 8002b38:	2101      	movs	r1, #1
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	f000 fbbe 	bl	80032bc <setOutMuxBit>
//	setCANFilter(IDin, 0x7ff, 0);
//	HAL_CAN_Start(&hcan1);
//	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
//	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);

	serialPrintln("charIOT-Key-C");
 8002b40:	4841      	ldr	r0, [pc, #260]	; (8002c48 <main+0x1a8>)
 8002b42:	f000 fb63 	bl	800320c <serialPrintln>
//	}

//	Basic handshaking (working)
	while (1) {

		UID0 = HAL_GetUIDw0();
 8002b46:	f001 fa25 	bl	8003f94 <HAL_GetUIDw0>
 8002b4a:	4603      	mov	r3, r0
 8002b4c:	4a3f      	ldr	r2, [pc, #252]	; (8002c4c <main+0x1ac>)
 8002b4e:	6013      	str	r3, [r2, #0]

		char UID0text[8];
		sprintf(UID0text, "%lX", UID0);
 8002b50:	4b3e      	ldr	r3, [pc, #248]	; (8002c4c <main+0x1ac>)
 8002b52:	681a      	ldr	r2, [r3, #0]
 8002b54:	1d3b      	adds	r3, r7, #4
 8002b56:	493e      	ldr	r1, [pc, #248]	; (8002c50 <main+0x1b0>)
 8002b58:	4618      	mov	r0, r3
 8002b5a:	f007 f9ad 	bl	8009eb8 <siprintf>

		setOutMuxBit(HKOW_BIT, GPIO_PIN_SET);
 8002b5e:	2305      	movs	r3, #5
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2101      	movs	r1, #1
 8002b64:	4618      	mov	r0, r3
 8002b66:	f000 fba9 	bl	80032bc <setOutMuxBit>
		setOutMuxBit(HKOE_BIT, GPIO_PIN_SET);
 8002b6a:	2306      	movs	r3, #6
 8002b6c:	b2db      	uxtb	r3, r3
 8002b6e:	2101      	movs	r1, #1
 8002b70:	4618      	mov	r0, r3
 8002b72:	f000 fba3 	bl	80032bc <setOutMuxBit>

		setRow(5);
 8002b76:	2005      	movs	r0, #5
 8002b78:	f000 fc58 	bl	800342c <setRow>
		delayMicro(5);
 8002b7c:	2005      	movs	r0, #5
 8002b7e:	f000 fb63 	bl	8003248 <delayMicro>
		bool HKIW = readCols() & 0x08;
 8002b82:	f000 fc85 	bl	8003490 <readCols>
 8002b86:	4603      	mov	r3, r0
 8002b88:	f003 0308 	and.w	r3, r3, #8
 8002b8c:	2b00      	cmp	r3, #0
 8002b8e:	bf14      	ite	ne
 8002b90:	2301      	movne	r3, #1
 8002b92:	2300      	moveq	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
		setRow(6);
 8002b96:	2006      	movs	r0, #6
 8002b98:	f000 fc48 	bl	800342c <setRow>
		delayMicro(5);
 8002b9c:	2005      	movs	r0, #5
 8002b9e:	f000 fb53 	bl	8003248 <delayMicro>
		bool HKIE = readCols() & 0x08;
 8002ba2:	f000 fc75 	bl	8003490 <readCols>
 8002ba6:	4603      	mov	r3, r0
 8002ba8:	f003 0308 	and.w	r3, r3, #8
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bf14      	ite	ne
 8002bb0:	2301      	movne	r3, #1
 8002bb2:	2300      	moveq	r3, #0
 8002bb4:	73bb      	strb	r3, [r7, #14]
//		u8g2_DrawStr(&u8g2, 2, 10, UID0text);
//		u8g2_DrawStr(&u8g2, 2, 20, state);
//		u8g2_SendBuffer(&u8g2);

		char state[2];
		switch ((HKIW << 1) | HKIE) {
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	005a      	lsls	r2, r3, #1
 8002bba:	7bbb      	ldrb	r3, [r7, #14]
 8002bbc:	4313      	orrs	r3, r2
 8002bbe:	2b03      	cmp	r3, #3
 8002bc0:	d816      	bhi.n	8002bf0 <main+0x150>
 8002bc2:	a201      	add	r2, pc, #4	; (adr r2, 8002bc8 <main+0x128>)
 8002bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bc8:	08002bd9 	.word	0x08002bd9
 8002bcc:	08002bdf 	.word	0x08002bdf
 8002bd0:	08002be5 	.word	0x08002be5
 8002bd4:	08002beb 	.word	0x08002beb
			case 0b00: {
				state[1] = '0';
 8002bd8:	2330      	movs	r3, #48	; 0x30
 8002bda:	707b      	strb	r3, [r7, #1]
				break;
 8002bdc:	e00b      	b.n	8002bf6 <main+0x156>
			}
			case 0b01: {
				state[1] = 'E';
 8002bde:	2345      	movs	r3, #69	; 0x45
 8002be0:	707b      	strb	r3, [r7, #1]
				break;
 8002be2:	e008      	b.n	8002bf6 <main+0x156>
			}
			case 0b10: {
				state[1] = 'W';
 8002be4:	2357      	movs	r3, #87	; 0x57
 8002be6:	707b      	strb	r3, [r7, #1]
				break;
 8002be8:	e005      	b.n	8002bf6 <main+0x156>
			}
			case 0b11: {
				state[1] = '1';
 8002bea:	2331      	movs	r3, #49	; 0x31
 8002bec:	707b      	strb	r3, [r7, #1]
				break;
 8002bee:	e002      	b.n	8002bf6 <main+0x156>
			}
			default:
				state[1] = '?';
 8002bf0:	233f      	movs	r3, #63	; 0x3f
 8002bf2:	707b      	strb	r3, [r7, #1]
				break;
 8002bf4:	bf00      	nop
		}

		u8g2_ClearBuffer(&u8g2);
 8002bf6:	4813      	ldr	r0, [pc, #76]	; (8002c44 <main+0x1a4>)
 8002bf8:	f7fe f9a8 	bl	8000f4c <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_ncenB08_tr);
 8002bfc:	4915      	ldr	r1, [pc, #84]	; (8002c54 <main+0x1b4>)
 8002bfe:	4811      	ldr	r0, [pc, #68]	; (8002c44 <main+0x1a4>)
 8002c00:	f7ff f854 	bl	8001cac <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 2, 10, UID0text);
 8002c04:	1d3b      	adds	r3, r7, #4
 8002c06:	220a      	movs	r2, #10
 8002c08:	2102      	movs	r1, #2
 8002c0a:	480e      	ldr	r0, [pc, #56]	; (8002c44 <main+0x1a4>)
 8002c0c:	f7fe ffac 	bl	8001b68 <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 2, 20, state);
 8002c10:	463b      	mov	r3, r7
 8002c12:	2214      	movs	r2, #20
 8002c14:	2102      	movs	r1, #2
 8002c16:	480b      	ldr	r0, [pc, #44]	; (8002c44 <main+0x1a4>)
 8002c18:	f7fe ffa6 	bl	8001b68 <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 8002c1c:	4809      	ldr	r0, [pc, #36]	; (8002c44 <main+0x1a4>)
 8002c1e:	f7fe fa08 	bl	8001032 <u8g2_SendBuffer>
	while (1) {
 8002c22:	e790      	b.n	8002b46 <main+0xa6>
 8002c24:	200005a0 	.word	0x200005a0
 8002c28:	20000570 	.word	0x20000570
 8002c2c:	20000404 	.word	0x20000404
 8002c30:	200003b8 	.word	0x200003b8
 8002c34:	20000350 	.word	0x20000350
 8002c38:	08003345 	.word	0x08003345
 8002c3c:	08003365 	.word	0x08003365
 8002c40:	0800c9d0 	.word	0x0800c9d0
 8002c44:	200004dc 	.word	0x200004dc
 8002c48:	0800c51c 	.word	0x0800c51c
 8002c4c:	200005d0 	.word	0x200005d0
 8002c50:	0800c52c 	.word	0x0800c52c
 8002c54:	0800c540 	.word	0x0800c540

08002c58 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b096      	sub	sp, #88	; 0x58
 8002c5c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002c5e:	f107 0314 	add.w	r3, r7, #20
 8002c62:	2244      	movs	r2, #68	; 0x44
 8002c64:	2100      	movs	r1, #0
 8002c66:	4618      	mov	r0, r3
 8002c68:	f007 f87a 	bl	8009d60 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002c6c:	463b      	mov	r3, r7
 8002c6e:	2200      	movs	r2, #0
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	605a      	str	r2, [r3, #4]
 8002c74:	609a      	str	r2, [r3, #8]
 8002c76:	60da      	str	r2, [r3, #12]
 8002c78:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c7a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002c7e:	f003 fd7f 	bl	8006780 <HAL_PWREx_ControlVoltageScaling>
 8002c82:	4603      	mov	r3, r0
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d001      	beq.n	8002c8c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8002c88:	f000 fdcc 	bl	8003824 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8002c8c:	f003 fd5a 	bl	8006744 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002c90:	4b21      	ldr	r3, [pc, #132]	; (8002d18 <SystemClock_Config+0xc0>)
 8002c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002c96:	4a20      	ldr	r2, [pc, #128]	; (8002d18 <SystemClock_Config+0xc0>)
 8002c98:	f023 0318 	bic.w	r3, r3, #24
 8002c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8002ca0:	2314      	movs	r3, #20
 8002ca2:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002ca8:	2301      	movs	r3, #1
 8002caa:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002cac:	2300      	movs	r3, #0
 8002cae:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002cb0:	2360      	movs	r3, #96	; 0x60
 8002cb2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cb4:	2302      	movs	r3, #2
 8002cb6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002cb8:	2301      	movs	r3, #1
 8002cba:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8002cc0:	2328      	movs	r3, #40	; 0x28
 8002cc2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002cc4:	2307      	movs	r3, #7
 8002cc6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002cc8:	2302      	movs	r3, #2
 8002cca:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ccc:	2302      	movs	r3, #2
 8002cce:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002cd0:	f107 0314 	add.w	r3, r7, #20
 8002cd4:	4618      	mov	r0, r3
 8002cd6:	f003 fda9 	bl	800682c <HAL_RCC_OscConfig>
 8002cda:	4603      	mov	r3, r0
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d001      	beq.n	8002ce4 <SystemClock_Config+0x8c>
		Error_Handler();
 8002ce0:	f000 fda0 	bl	8003824 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002ce4:	230f      	movs	r3, #15
 8002ce6:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002ce8:	2303      	movs	r3, #3
 8002cea:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002cec:	2300      	movs	r3, #0
 8002cee:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002cf8:	463b      	mov	r3, r7
 8002cfa:	2104      	movs	r1, #4
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f004 f9a9 	bl	8007054 <HAL_RCC_ClockConfig>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <SystemClock_Config+0xb4>
		Error_Handler();
 8002d08:	f000 fd8c 	bl	8003824 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8002d0c:	f004 fdee 	bl	80078ec <HAL_RCCEx_EnableMSIPLLMode>
}
 8002d10:	bf00      	nop
 8002d12:	3758      	adds	r7, #88	; 0x58
 8002d14:	46bd      	mov	sp, r7
 8002d16:	bd80      	pop	{r7, pc}
 8002d18:	40021000 	.word	0x40021000

08002d1c <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b086      	sub	sp, #24
 8002d20:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002d22:	463b      	mov	r3, r7
 8002d24:	2200      	movs	r2, #0
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	605a      	str	r2, [r3, #4]
 8002d2a:	609a      	str	r2, [r3, #8]
 8002d2c:	60da      	str	r2, [r3, #12]
 8002d2e:	611a      	str	r2, [r3, #16]
 8002d30:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002d32:	4b30      	ldr	r3, [pc, #192]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d34:	4a30      	ldr	r2, [pc, #192]	; (8002df8 <MX_ADC1_Init+0xdc>)
 8002d36:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002d38:	4b2e      	ldr	r3, [pc, #184]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d3a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002d3e:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002d40:	4b2c      	ldr	r3, [pc, #176]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002d46:	4b2b      	ldr	r3, [pc, #172]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d48:	2200      	movs	r2, #0
 8002d4a:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002d4c:	4b29      	ldr	r3, [pc, #164]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002d52:	4b28      	ldr	r3, [pc, #160]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d54:	2204      	movs	r2, #4
 8002d56:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8002d58:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002d5e:	4b25      	ldr	r3, [pc, #148]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 2;
 8002d64:	4b23      	ldr	r3, [pc, #140]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d66:	2202      	movs	r2, #2
 8002d68:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002d6a:	4b22      	ldr	r3, [pc, #136]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002d72:	4b20      	ldr	r3, [pc, #128]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d74:	2200      	movs	r2, #0
 8002d76:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002d78:	4b1e      	ldr	r3, [pc, #120]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d7a:	2200      	movs	r2, #0
 8002d7c:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002d7e:	4b1d      	ldr	r3, [pc, #116]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002d86:	4b1b      	ldr	r3, [pc, #108]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d88:	2200      	movs	r2, #0
 8002d8a:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8002d8c:	4b19      	ldr	r3, [pc, #100]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d8e:	2200      	movs	r2, #0
 8002d90:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002d94:	4817      	ldr	r0, [pc, #92]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002d96:	f001 fa95 	bl	80042c4 <HAL_ADC_Init>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d001      	beq.n	8002da4 <MX_ADC1_Init+0x88>
		Error_Handler();
 8002da0:	f000 fd40 	bl	8003824 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8002da4:	4b15      	ldr	r3, [pc, #84]	; (8002dfc <MX_ADC1_Init+0xe0>)
 8002da6:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002da8:	2306      	movs	r3, #6
 8002daa:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002dac:	2300      	movs	r3, #0
 8002dae:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002db0:	237f      	movs	r3, #127	; 0x7f
 8002db2:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002db4:	2304      	movs	r3, #4
 8002db6:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8002db8:	2300      	movs	r3, #0
 8002dba:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002dbc:	463b      	mov	r3, r7
 8002dbe:	4619      	mov	r1, r3
 8002dc0:	480c      	ldr	r0, [pc, #48]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002dc2:	f001 fbc7 	bl	8004554 <HAL_ADC_ConfigChannel>
 8002dc6:	4603      	mov	r3, r0
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d001      	beq.n	8002dd0 <MX_ADC1_Init+0xb4>
		Error_Handler();
 8002dcc:	f000 fd2a 	bl	8003824 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_6;
 8002dd0:	4b0b      	ldr	r3, [pc, #44]	; (8002e00 <MX_ADC1_Init+0xe4>)
 8002dd2:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002dd4:	230c      	movs	r3, #12
 8002dd6:	607b      	str	r3, [r7, #4]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002dd8:	463b      	mov	r3, r7
 8002dda:	4619      	mov	r1, r3
 8002ddc:	4805      	ldr	r0, [pc, #20]	; (8002df4 <MX_ADC1_Init+0xd8>)
 8002dde:	f001 fbb9 	bl	8004554 <HAL_ADC_ConfigChannel>
 8002de2:	4603      	mov	r3, r0
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d001      	beq.n	8002dec <MX_ADC1_Init+0xd0>
		Error_Handler();
 8002de8:	f000 fd1c 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002dec:	bf00      	nop
 8002dee:	3718      	adds	r7, #24
 8002df0:	46bd      	mov	sp, r7
 8002df2:	bd80      	pop	{r7, pc}
 8002df4:	200002c4 	.word	0x200002c4
 8002df8:	50040000 	.word	0x50040000
 8002dfc:	14f00020 	.word	0x14f00020
 8002e00:	19200040 	.word	0x19200040

08002e04 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8002e04:	b580      	push	{r7, lr}
 8002e06:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8002e08:	4b18      	ldr	r3, [pc, #96]	; (8002e6c <MX_CAN1_Init+0x68>)
 8002e0a:	4a19      	ldr	r2, [pc, #100]	; (8002e70 <MX_CAN1_Init+0x6c>)
 8002e0c:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 40;
 8002e0e:	4b17      	ldr	r3, [pc, #92]	; (8002e6c <MX_CAN1_Init+0x68>)
 8002e10:	2228      	movs	r2, #40	; 0x28
 8002e12:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002e14:	4b15      	ldr	r3, [pc, #84]	; (8002e6c <MX_CAN1_Init+0x68>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8002e1a:	4b14      	ldr	r3, [pc, #80]	; (8002e6c <MX_CAN1_Init+0x68>)
 8002e1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002e20:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002e22:	4b12      	ldr	r3, [pc, #72]	; (8002e6c <MX_CAN1_Init+0x68>)
 8002e24:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002e28:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002e2a:	4b10      	ldr	r3, [pc, #64]	; (8002e6c <MX_CAN1_Init+0x68>)
 8002e2c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002e30:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8002e32:	4b0e      	ldr	r3, [pc, #56]	; (8002e6c <MX_CAN1_Init+0x68>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8002e38:	4b0c      	ldr	r3, [pc, #48]	; (8002e6c <MX_CAN1_Init+0x68>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = ENABLE;
 8002e3e:	4b0b      	ldr	r3, [pc, #44]	; (8002e6c <MX_CAN1_Init+0x68>)
 8002e40:	2201      	movs	r2, #1
 8002e42:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = ENABLE;
 8002e44:	4b09      	ldr	r3, [pc, #36]	; (8002e6c <MX_CAN1_Init+0x68>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002e4a:	4b08      	ldr	r3, [pc, #32]	; (8002e6c <MX_CAN1_Init+0x68>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = ENABLE;
 8002e50:	4b06      	ldr	r3, [pc, #24]	; (8002e6c <MX_CAN1_Init+0x68>)
 8002e52:	2201      	movs	r2, #1
 8002e54:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8002e56:	4805      	ldr	r0, [pc, #20]	; (8002e6c <MX_CAN1_Init+0x68>)
 8002e58:	f001 ff5c 	bl	8004d14 <HAL_CAN_Init>
 8002e5c:	4603      	mov	r3, r0
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d001      	beq.n	8002e66 <MX_CAN1_Init+0x62>
		Error_Handler();
 8002e62:	f000 fcdf 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8002e66:	bf00      	nop
 8002e68:	bd80      	pop	{r7, pc}
 8002e6a:	bf00      	nop
 8002e6c:	20000328 	.word	0x20000328
 8002e70:	40006400 	.word	0x40006400

08002e74 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8002e7a:	1d3b      	adds	r3, r7, #4
 8002e7c:	2224      	movs	r2, #36	; 0x24
 8002e7e:	2100      	movs	r1, #0
 8002e80:	4618      	mov	r0, r3
 8002e82:	f006 ff6d 	bl	8009d60 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8002e86:	4b17      	ldr	r3, [pc, #92]	; (8002ee4 <MX_DAC1_Init+0x70>)
 8002e88:	4a17      	ldr	r2, [pc, #92]	; (8002ee8 <MX_DAC1_Init+0x74>)
 8002e8a:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8002e8c:	4815      	ldr	r0, [pc, #84]	; (8002ee4 <MX_DAC1_Init+0x70>)
 8002e8e:	f002 fc69 	bl	8005764 <HAL_DAC_Init>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_DAC1_Init+0x28>
		Error_Handler();
 8002e98:	f000 fcc4 	bl	8003824 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002ea0:	2304      	movs	r3, #4
 8002ea2:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8002ea8:	2301      	movs	r3, #1
 8002eaa:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002eac:	2300      	movs	r3, #0
 8002eae:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8002eb0:	1d3b      	adds	r3, r7, #4
 8002eb2:	2200      	movs	r2, #0
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	480b      	ldr	r0, [pc, #44]	; (8002ee4 <MX_DAC1_Init+0x70>)
 8002eb8:	f002 fd4c 	bl	8005954 <HAL_DAC_ConfigChannel>
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d001      	beq.n	8002ec6 <MX_DAC1_Init+0x52>
		Error_Handler();
 8002ec2:	f000 fcaf 	bl	8003824 <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 8002ec6:	1d3b      	adds	r3, r7, #4
 8002ec8:	2210      	movs	r2, #16
 8002eca:	4619      	mov	r1, r3
 8002ecc:	4805      	ldr	r0, [pc, #20]	; (8002ee4 <MX_DAC1_Init+0x70>)
 8002ece:	f002 fd41 	bl	8005954 <HAL_DAC_ConfigChannel>
 8002ed2:	4603      	mov	r3, r0
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d001      	beq.n	8002edc <MX_DAC1_Init+0x68>
		Error_Handler();
 8002ed8:	f000 fca4 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8002edc:	bf00      	nop
 8002ede:	3728      	adds	r7, #40	; 0x28
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	bd80      	pop	{r7, pc}
 8002ee4:	20000350 	.word	0x20000350
 8002ee8:	40007400 	.word	0x40007400

08002eec <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002ef0:	4b1d      	ldr	r3, [pc, #116]	; (8002f68 <MX_I2C1_Init+0x7c>)
 8002ef2:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <MX_I2C1_Init+0x80>)
 8002ef4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00300F33;
 8002ef6:	4b1c      	ldr	r3, [pc, #112]	; (8002f68 <MX_I2C1_Init+0x7c>)
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <MX_I2C1_Init+0x84>)
 8002efa:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002efc:	4b1a      	ldr	r3, [pc, #104]	; (8002f68 <MX_I2C1_Init+0x7c>)
 8002efe:	2200      	movs	r2, #0
 8002f00:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f02:	4b19      	ldr	r3, [pc, #100]	; (8002f68 <MX_I2C1_Init+0x7c>)
 8002f04:	2201      	movs	r2, #1
 8002f06:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f08:	4b17      	ldr	r3, [pc, #92]	; (8002f68 <MX_I2C1_Init+0x7c>)
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002f0e:	4b16      	ldr	r3, [pc, #88]	; (8002f68 <MX_I2C1_Init+0x7c>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002f14:	4b14      	ldr	r3, [pc, #80]	; (8002f68 <MX_I2C1_Init+0x7c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f1a:	4b13      	ldr	r3, [pc, #76]	; (8002f68 <MX_I2C1_Init+0x7c>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f20:	4b11      	ldr	r3, [pc, #68]	; (8002f68 <MX_I2C1_Init+0x7c>)
 8002f22:	2200      	movs	r2, #0
 8002f24:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002f26:	4810      	ldr	r0, [pc, #64]	; (8002f68 <MX_I2C1_Init+0x7c>)
 8002f28:	f002 ffd2 	bl	8005ed0 <HAL_I2C_Init>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8002f32:	f000 fc77 	bl	8003824 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002f36:	2100      	movs	r1, #0
 8002f38:	480b      	ldr	r0, [pc, #44]	; (8002f68 <MX_I2C1_Init+0x7c>)
 8002f3a:	f003 fb4b 	bl	80065d4 <HAL_I2CEx_ConfigAnalogFilter>
 8002f3e:	4603      	mov	r3, r0
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d001      	beq.n	8002f48 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002f44:	f000 fc6e 	bl	8003824 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002f48:	2100      	movs	r1, #0
 8002f4a:	4807      	ldr	r0, [pc, #28]	; (8002f68 <MX_I2C1_Init+0x7c>)
 8002f4c:	f003 fb8d 	bl	800666a <HAL_I2CEx_ConfigDigitalFilter>
 8002f50:	4603      	mov	r3, r0
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d001      	beq.n	8002f5a <MX_I2C1_Init+0x6e>
		Error_Handler();
 8002f56:	f000 fc65 	bl	8003824 <Error_Handler>
	}

	/** I2C Fast mode Plus enable
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002f5a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002f5e:	f003 fbd1 	bl	8006704 <HAL_I2CEx_EnableFastModePlus>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000364 	.word	0x20000364
 8002f6c:	40005400 	.word	0x40005400
 8002f70:	00300f33 	.word	0x00300f33

08002f74 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b084      	sub	sp, #16
 8002f78:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002f7a:	1d3b      	adds	r3, r7, #4
 8002f7c:	2200      	movs	r2, #0
 8002f7e:	601a      	str	r2, [r3, #0]
 8002f80:	605a      	str	r2, [r3, #4]
 8002f82:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8002f84:	4b14      	ldr	r3, [pc, #80]	; (8002fd8 <MX_TIM6_Init+0x64>)
 8002f86:	4a15      	ldr	r2, [pc, #84]	; (8002fdc <MX_TIM6_Init+0x68>)
 8002f88:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8002f8a:	4b13      	ldr	r3, [pc, #76]	; (8002fd8 <MX_TIM6_Init+0x64>)
 8002f8c:	2200      	movs	r2, #0
 8002f8e:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002f90:	4b11      	ldr	r3, [pc, #68]	; (8002fd8 <MX_TIM6_Init+0x64>)
 8002f92:	2200      	movs	r2, #0
 8002f94:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 3636 - 1;
 8002f96:	4b10      	ldr	r3, [pc, #64]	; (8002fd8 <MX_TIM6_Init+0x64>)
 8002f98:	f640 6233 	movw	r2, #3635	; 0xe33
 8002f9c:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002f9e:	4b0e      	ldr	r3, [pc, #56]	; (8002fd8 <MX_TIM6_Init+0x64>)
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8002fa4:	480c      	ldr	r0, [pc, #48]	; (8002fd8 <MX_TIM6_Init+0x64>)
 8002fa6:	f004 fda3 	bl	8007af0 <HAL_TIM_Base_Init>
 8002faa:	4603      	mov	r3, r0
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d001      	beq.n	8002fb4 <MX_TIM6_Init+0x40>
		Error_Handler();
 8002fb0:	f000 fc38 	bl	8003824 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002fb4:	2320      	movs	r3, #32
 8002fb6:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002fb8:	2300      	movs	r3, #0
 8002fba:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8002fbc:	1d3b      	adds	r3, r7, #4
 8002fbe:	4619      	mov	r1, r3
 8002fc0:	4805      	ldr	r0, [pc, #20]	; (8002fd8 <MX_TIM6_Init+0x64>)
 8002fc2:	f005 f839 	bl	8008038 <HAL_TIMEx_MasterConfigSynchronization>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d001      	beq.n	8002fd0 <MX_TIM6_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002fcc:	f000 fc2a 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8002fd0:	bf00      	nop
 8002fd2:	3710      	adds	r7, #16
 8002fd4:	46bd      	mov	sp, r7
 8002fd6:	bd80      	pop	{r7, pc}
 8002fd8:	200003b8 	.word	0x200003b8
 8002fdc:	40001000 	.word	0x40001000

08002fe0 <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002fe6:	1d3b      	adds	r3, r7, #4
 8002fe8:	2200      	movs	r2, #0
 8002fea:	601a      	str	r2, [r3, #0]
 8002fec:	605a      	str	r2, [r3, #4]
 8002fee:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8002ff0:	4b14      	ldr	r3, [pc, #80]	; (8003044 <MX_TIM7_Init+0x64>)
 8002ff2:	4a15      	ldr	r2, [pc, #84]	; (8003048 <MX_TIM7_Init+0x68>)
 8002ff4:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 80 - 1;
 8002ff6:	4b13      	ldr	r3, [pc, #76]	; (8003044 <MX_TIM7_Init+0x64>)
 8002ff8:	224f      	movs	r2, #79	; 0x4f
 8002ffa:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ffc:	4b11      	ldr	r3, [pc, #68]	; (8003044 <MX_TIM7_Init+0x64>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 1000 - 1;
 8003002:	4b10      	ldr	r3, [pc, #64]	; (8003044 <MX_TIM7_Init+0x64>)
 8003004:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003008:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800300a:	4b0e      	ldr	r3, [pc, #56]	; (8003044 <MX_TIM7_Init+0x64>)
 800300c:	2200      	movs	r2, #0
 800300e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8003010:	480c      	ldr	r0, [pc, #48]	; (8003044 <MX_TIM7_Init+0x64>)
 8003012:	f004 fd6d 	bl	8007af0 <HAL_TIM_Base_Init>
 8003016:	4603      	mov	r3, r0
 8003018:	2b00      	cmp	r3, #0
 800301a:	d001      	beq.n	8003020 <MX_TIM7_Init+0x40>
		Error_Handler();
 800301c:	f000 fc02 	bl	8003824 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003020:	2300      	movs	r3, #0
 8003022:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003024:	2300      	movs	r3, #0
 8003026:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8003028:	1d3b      	adds	r3, r7, #4
 800302a:	4619      	mov	r1, r3
 800302c:	4805      	ldr	r0, [pc, #20]	; (8003044 <MX_TIM7_Init+0x64>)
 800302e:	f005 f803 	bl	8008038 <HAL_TIMEx_MasterConfigSynchronization>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8003038:	f000 fbf4 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}
 8003044:	20000404 	.word	0x20000404
 8003048:	40001400 	.word	0x40001400

0800304c <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 800304c:	b580      	push	{r7, lr}
 800304e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8003050:	4b14      	ldr	r3, [pc, #80]	; (80030a4 <MX_USART2_UART_Init+0x58>)
 8003052:	4a15      	ldr	r2, [pc, #84]	; (80030a8 <MX_USART2_UART_Init+0x5c>)
 8003054:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8003056:	4b13      	ldr	r3, [pc, #76]	; (80030a4 <MX_USART2_UART_Init+0x58>)
 8003058:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800305c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800305e:	4b11      	ldr	r3, [pc, #68]	; (80030a4 <MX_USART2_UART_Init+0x58>)
 8003060:	2200      	movs	r2, #0
 8003062:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8003064:	4b0f      	ldr	r3, [pc, #60]	; (80030a4 <MX_USART2_UART_Init+0x58>)
 8003066:	2200      	movs	r2, #0
 8003068:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800306a:	4b0e      	ldr	r3, [pc, #56]	; (80030a4 <MX_USART2_UART_Init+0x58>)
 800306c:	2200      	movs	r2, #0
 800306e:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8003070:	4b0c      	ldr	r3, [pc, #48]	; (80030a4 <MX_USART2_UART_Init+0x58>)
 8003072:	220c      	movs	r2, #12
 8003074:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003076:	4b0b      	ldr	r3, [pc, #44]	; (80030a4 <MX_USART2_UART_Init+0x58>)
 8003078:	2200      	movs	r2, #0
 800307a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800307c:	4b09      	ldr	r3, [pc, #36]	; (80030a4 <MX_USART2_UART_Init+0x58>)
 800307e:	2200      	movs	r2, #0
 8003080:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003082:	4b08      	ldr	r3, [pc, #32]	; (80030a4 <MX_USART2_UART_Init+0x58>)
 8003084:	2200      	movs	r2, #0
 8003086:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003088:	4b06      	ldr	r3, [pc, #24]	; (80030a4 <MX_USART2_UART_Init+0x58>)
 800308a:	2200      	movs	r2, #0
 800308c:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 800308e:	4805      	ldr	r0, [pc, #20]	; (80030a4 <MX_USART2_UART_Init+0x58>)
 8003090:	f005 f856 	bl	8008140 <HAL_UART_Init>
 8003094:	4603      	mov	r3, r0
 8003096:	2b00      	cmp	r3, #0
 8003098:	d001      	beq.n	800309e <MX_USART2_UART_Init+0x52>
		Error_Handler();
 800309a:	f000 fbc3 	bl	8003824 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800309e:	bf00      	nop
 80030a0:	bd80      	pop	{r7, pc}
 80030a2:	bf00      	nop
 80030a4:	20000450 	.word	0x20000450
 80030a8:	40004400 	.word	0x40004400

080030ac <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 80030ac:	b580      	push	{r7, lr}
 80030ae:	b088      	sub	sp, #32
 80030b0:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 80030b2:	f107 030c 	add.w	r3, r7, #12
 80030b6:	2200      	movs	r2, #0
 80030b8:	601a      	str	r2, [r3, #0]
 80030ba:	605a      	str	r2, [r3, #4]
 80030bc:	609a      	str	r2, [r3, #8]
 80030be:	60da      	str	r2, [r3, #12]
 80030c0:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80030c2:	4b2f      	ldr	r3, [pc, #188]	; (8003180 <MX_GPIO_Init+0xd4>)
 80030c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c6:	4a2e      	ldr	r2, [pc, #184]	; (8003180 <MX_GPIO_Init+0xd4>)
 80030c8:	f043 0304 	orr.w	r3, r3, #4
 80030cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030ce:	4b2c      	ldr	r3, [pc, #176]	; (8003180 <MX_GPIO_Init+0xd4>)
 80030d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030d2:	f003 0304 	and.w	r3, r3, #4
 80030d6:	60bb      	str	r3, [r7, #8]
 80030d8:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80030da:	4b29      	ldr	r3, [pc, #164]	; (8003180 <MX_GPIO_Init+0xd4>)
 80030dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030de:	4a28      	ldr	r2, [pc, #160]	; (8003180 <MX_GPIO_Init+0xd4>)
 80030e0:	f043 0301 	orr.w	r3, r3, #1
 80030e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030e6:	4b26      	ldr	r3, [pc, #152]	; (8003180 <MX_GPIO_Init+0xd4>)
 80030e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030ea:	f003 0301 	and.w	r3, r3, #1
 80030ee:	607b      	str	r3, [r7, #4]
 80030f0:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80030f2:	4b23      	ldr	r3, [pc, #140]	; (8003180 <MX_GPIO_Init+0xd4>)
 80030f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030f6:	4a22      	ldr	r2, [pc, #136]	; (8003180 <MX_GPIO_Init+0xd4>)
 80030f8:	f043 0302 	orr.w	r3, r3, #2
 80030fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80030fe:	4b20      	ldr	r3, [pc, #128]	; (8003180 <MX_GPIO_Init+0xd4>)
 8003100:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003102:	f003 0302 	and.w	r3, r3, #2
 8003106:	603b      	str	r3, [r7, #0]
 8003108:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 800310a:	2200      	movs	r2, #0
 800310c:	2140      	movs	r1, #64	; 0x40
 800310e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003112:	f002 fec5 	bl	8005ea0 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8003116:	2200      	movs	r2, #0
 8003118:	213b      	movs	r1, #59	; 0x3b
 800311a:	481a      	ldr	r0, [pc, #104]	; (8003184 <MX_GPIO_Init+0xd8>)
 800311c:	f002 fec0 	bl	8005ea0 <HAL_GPIO_WritePin>
	RA0_Pin | RA1_Pin | LED_BUILTIN_Pin | RA2_Pin | OUT_Pin, GPIO_PIN_RESET);

	/*Configure GPIO pins : C0_Pin C2_Pin C1_Pin C3_Pin */
	GPIO_InitStruct.Pin = C0_Pin | C2_Pin | C1_Pin | C3_Pin;
 8003120:	f44f 7362 	mov.w	r3, #904	; 0x388
 8003124:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003126:	2300      	movs	r3, #0
 8003128:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312a:	2300      	movs	r3, #0
 800312c:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800312e:	f107 030c 	add.w	r3, r7, #12
 8003132:	4619      	mov	r1, r3
 8003134:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003138:	f002 fd30 	bl	8005b9c <HAL_GPIO_Init>

	/*Configure GPIO pin : REN_Pin */
	GPIO_InitStruct.Pin = REN_Pin;
 800313c:	2340      	movs	r3, #64	; 0x40
 800313e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003140:	2301      	movs	r3, #1
 8003142:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003148:	2300      	movs	r3, #0
 800314a:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(REN_GPIO_Port, &GPIO_InitStruct);
 800314c:	f107 030c 	add.w	r3, r7, #12
 8003150:	4619      	mov	r1, r3
 8003152:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003156:	f002 fd21 	bl	8005b9c <HAL_GPIO_Init>

	/*Configure GPIO pins : RA0_Pin RA1_Pin LED_BUILTIN_Pin RA2_Pin
	 OUT_Pin */
	GPIO_InitStruct.Pin = RA0_Pin | RA1_Pin | LED_BUILTIN_Pin | RA2_Pin
 800315a:	233b      	movs	r3, #59	; 0x3b
 800315c:	60fb      	str	r3, [r7, #12]
			| OUT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800315e:	2301      	movs	r3, #1
 8003160:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003162:	2300      	movs	r3, #0
 8003164:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003166:	2300      	movs	r3, #0
 8003168:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800316a:	f107 030c 	add.w	r3, r7, #12
 800316e:	4619      	mov	r1, r3
 8003170:	4804      	ldr	r0, [pc, #16]	; (8003184 <MX_GPIO_Init+0xd8>)
 8003172:	f002 fd13 	bl	8005b9c <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003176:	bf00      	nop
 8003178:	3720      	adds	r7, #32
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40021000 	.word	0x40021000
 8003184:	48000400 	.word	0x48000400

08003188 <MY_ADC1_Init>:

/* USER CODE BEGIN 4 */

static void MY_ADC1_Init(void) {
 8003188:	b580      	push	{r7, lr}
 800318a:	af00      	add	r7, sp, #0

	hadc1.Instance = ADC1;
 800318c:	4b1d      	ldr	r3, [pc, #116]	; (8003204 <MY_ADC1_Init+0x7c>)
 800318e:	4a1e      	ldr	r2, [pc, #120]	; (8003208 <MY_ADC1_Init+0x80>)
 8003190:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8003192:	4b1c      	ldr	r3, [pc, #112]	; (8003204 <MY_ADC1_Init+0x7c>)
 8003194:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003198:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <MY_ADC1_Init+0x7c>)
 800319c:	2200      	movs	r2, #0
 800319e:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80031a0:	4b18      	ldr	r3, [pc, #96]	; (8003204 <MY_ADC1_Init+0x7c>)
 80031a2:	2200      	movs	r2, #0
 80031a4:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80031a6:	4b17      	ldr	r3, [pc, #92]	; (8003204 <MY_ADC1_Init+0x7c>)
 80031a8:	2201      	movs	r2, #1
 80031aa:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80031ac:	4b15      	ldr	r3, [pc, #84]	; (8003204 <MY_ADC1_Init+0x7c>)
 80031ae:	2204      	movs	r2, #4
 80031b0:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 80031b2:	4b14      	ldr	r3, [pc, #80]	; (8003204 <MY_ADC1_Init+0x7c>)
 80031b4:	2200      	movs	r2, #0
 80031b6:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80031b8:	4b12      	ldr	r3, [pc, #72]	; (8003204 <MY_ADC1_Init+0x7c>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 80031be:	4b11      	ldr	r3, [pc, #68]	; (8003204 <MY_ADC1_Init+0x7c>)
 80031c0:	2201      	movs	r2, #1
 80031c2:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80031c4:	4b0f      	ldr	r3, [pc, #60]	; (8003204 <MY_ADC1_Init+0x7c>)
 80031c6:	2200      	movs	r2, #0
 80031c8:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80031cc:	4b0d      	ldr	r3, [pc, #52]	; (8003204 <MY_ADC1_Init+0x7c>)
 80031ce:	2200      	movs	r2, #0
 80031d0:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80031d2:	4b0c      	ldr	r3, [pc, #48]	; (8003204 <MY_ADC1_Init+0x7c>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 80031d8:	4b0a      	ldr	r3, [pc, #40]	; (8003204 <MY_ADC1_Init+0x7c>)
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80031e0:	4b08      	ldr	r3, [pc, #32]	; (8003204 <MY_ADC1_Init+0x7c>)
 80031e2:	2200      	movs	r2, #0
 80031e4:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 80031e6:	4b07      	ldr	r3, [pc, #28]	; (8003204 <MY_ADC1_Init+0x7c>)
 80031e8:	2200      	movs	r2, #0
 80031ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 80031ee:	4805      	ldr	r0, [pc, #20]	; (8003204 <MY_ADC1_Init+0x7c>)
 80031f0:	f001 f868 	bl	80042c4 <HAL_ADC_Init>
 80031f4:	4603      	mov	r3, r0
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d001      	beq.n	80031fe <MY_ADC1_Init+0x76>
		Error_Handler();
 80031fa:	f000 fb13 	bl	8003824 <Error_Handler>
	}

}
 80031fe:	bf00      	nop
 8003200:	bd80      	pop	{r7, pc}
 8003202:	bf00      	nop
 8003204:	200002c4 	.word	0x200002c4
 8003208:	50040000 	.word	0x50040000

0800320c <serialPrintln>:

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);

}

void serialPrintln(char val[]) {
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
 8003214:	6878      	ldr	r0, [r7, #4]
 8003216:	f7fc ffdb 	bl	80001d0 <strlen>
 800321a:	4603      	mov	r3, r0
 800321c:	b29a      	uxth	r2, r3
 800321e:	230a      	movs	r3, #10
 8003220:	6879      	ldr	r1, [r7, #4]
 8003222:	4808      	ldr	r0, [pc, #32]	; (8003244 <serialPrintln+0x38>)
 8003224:	f004 ffda 	bl	80081dc <HAL_UART_Transmit>
	char rn[2] = "\r\n";
 8003228:	f640 230d 	movw	r3, #2573	; 0xa0d
 800322c:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) rn, 2, 10);
 800322e:	f107 010c 	add.w	r1, r7, #12
 8003232:	230a      	movs	r3, #10
 8003234:	2202      	movs	r2, #2
 8003236:	4803      	ldr	r0, [pc, #12]	; (8003244 <serialPrintln+0x38>)
 8003238:	f004 ffd0 	bl	80081dc <HAL_UART_Transmit>

}
 800323c:	bf00      	nop
 800323e:	3710      	adds	r7, #16
 8003240:	46bd      	mov	sp, r7
 8003242:	bd80      	pop	{r7, pc}
 8003244:	20000450 	.word	0x20000450

08003248 <delayMicro>:

void delayMicro(uint16_t us) {
 8003248:	b480      	push	{r7}
 800324a:	b083      	sub	sp, #12
 800324c:	af00      	add	r7, sp, #0
 800324e:	4603      	mov	r3, r0
 8003250:	80fb      	strh	r3, [r7, #6]

	htim7.Instance->CNT = 0;
 8003252:	4b09      	ldr	r3, [pc, #36]	; (8003278 <delayMicro+0x30>)
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	2200      	movs	r2, #0
 8003258:	625a      	str	r2, [r3, #36]	; 0x24
	while (htim7.Instance->CNT < us)
 800325a:	bf00      	nop
 800325c:	4b06      	ldr	r3, [pc, #24]	; (8003278 <delayMicro+0x30>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003262:	88fb      	ldrh	r3, [r7, #6]
 8003264:	429a      	cmp	r2, r3
 8003266:	d3f9      	bcc.n	800325c <delayMicro+0x14>
		;

}
 8003268:	bf00      	nop
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	20000404 	.word	0x20000404

0800327c <CAN_RX>:

	return HAL_CAN_GetRxFifoFillLevel(&hcan1, 0);

}

uint32_t CAN_RX(uint32_t *ID, uint8_t data[8]) {
 800327c:	b580      	push	{r7, lr}
 800327e:	b08a      	sub	sp, #40	; 0x28
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef rxHeader;

	while (!HAL_CAN_GetRxFifoFillLevel(&hcan1, 0))
 8003286:	bf00      	nop
 8003288:	2100      	movs	r1, #0
 800328a:	480b      	ldr	r0, [pc, #44]	; (80032b8 <CAN_RX+0x3c>)
 800328c:	f001 ff4f 	bl	800512e <HAL_CAN_GetRxFifoFillLevel>
 8003290:	4603      	mov	r3, r0
 8003292:	2b00      	cmp	r3, #0
 8003294:	d0f8      	beq.n	8003288 <CAN_RX+0xc>
		;

	uint32_t result = (uint32_t) HAL_CAN_GetRxMessage(&hcan1, 0, &rxHeader,
 8003296:	f107 0208 	add.w	r2, r7, #8
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	2100      	movs	r1, #0
 800329e:	4806      	ldr	r0, [pc, #24]	; (80032b8 <CAN_RX+0x3c>)
 80032a0:	f001 fe33 	bl	8004f0a <HAL_CAN_GetRxMessage>
 80032a4:	4603      	mov	r3, r0
 80032a6:	627b      	str	r3, [r7, #36]	; 0x24
			data);

	*ID = rxHeader.StdId;
 80032a8:	68ba      	ldr	r2, [r7, #8]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	601a      	str	r2, [r3, #0]

	return result;
 80032ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 80032b0:	4618      	mov	r0, r3
 80032b2:	3728      	adds	r7, #40	; 0x28
 80032b4:	46bd      	mov	sp, r7
 80032b6:	bd80      	pop	{r7, pc}
 80032b8:	20000328 	.word	0x20000328

080032bc <setOutMuxBit>:

void setOutMuxBit(const uint8_t bitIdx, const bool value) {
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	4603      	mov	r3, r0
 80032c4:	460a      	mov	r2, r1
 80032c6:	71fb      	strb	r3, [r7, #7]
 80032c8:	4613      	mov	r3, r2
 80032ca:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80032cc:	2200      	movs	r2, #0
 80032ce:	2140      	movs	r1, #64	; 0x40
 80032d0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d4:	f002 fde4 	bl	8005ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, bitIdx & 0x01);
 80032d8:	79fb      	ldrb	r3, [r7, #7]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	b2db      	uxtb	r3, r3
 80032e0:	461a      	mov	r2, r3
 80032e2:	2101      	movs	r1, #1
 80032e4:	4816      	ldr	r0, [pc, #88]	; (8003340 <setOutMuxBit+0x84>)
 80032e6:	f002 fddb 	bl	8005ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, bitIdx & 0x02);
 80032ea:	79fb      	ldrb	r3, [r7, #7]
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	b2db      	uxtb	r3, r3
 80032f2:	461a      	mov	r2, r3
 80032f4:	2102      	movs	r1, #2
 80032f6:	4812      	ldr	r0, [pc, #72]	; (8003340 <setOutMuxBit+0x84>)
 80032f8:	f002 fdd2 	bl	8005ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, bitIdx & 0x04);
 80032fc:	79fb      	ldrb	r3, [r7, #7]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	2110      	movs	r1, #16
 8003308:	480d      	ldr	r0, [pc, #52]	; (8003340 <setOutMuxBit+0x84>)
 800330a:	f002 fdc9 	bl	8005ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, value);
 800330e:	79bb      	ldrb	r3, [r7, #6]
 8003310:	461a      	mov	r2, r3
 8003312:	2120      	movs	r1, #32
 8003314:	480a      	ldr	r0, [pc, #40]	; (8003340 <setOutMuxBit+0x84>)
 8003316:	f002 fdc3 	bl	8005ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 800331a:	2201      	movs	r2, #1
 800331c:	2140      	movs	r1, #64	; 0x40
 800331e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003322:	f002 fdbd 	bl	8005ea0 <HAL_GPIO_WritePin>
	delayMicro(2);
 8003326:	2002      	movs	r0, #2
 8003328:	f7ff ff8e 	bl	8003248 <delayMicro>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 800332c:	2200      	movs	r2, #0
 800332e:	2140      	movs	r1, #64	; 0x40
 8003330:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003334:	f002 fdb4 	bl	8005ea0 <HAL_GPIO_WritePin>

}
 8003338:	bf00      	nop
 800333a:	3708      	adds	r7, #8
 800333c:	46bd      	mov	sp, r7
 800333e:	bd80      	pop	{r7, pc}
 8003340:	48000400 	.word	0x48000400

08003344 <u8x8_gpio_and_delay>:

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8003344:	b480      	push	{r7}
 8003346:	b085      	sub	sp, #20
 8003348:	af00      	add	r7, sp, #0
 800334a:	60f8      	str	r0, [r7, #12]
 800334c:	607b      	str	r3, [r7, #4]
 800334e:	460b      	mov	r3, r1
 8003350:	72fb      	strb	r3, [r7, #11]
 8003352:	4613      	mov	r3, r2
 8003354:	72bb      	strb	r3, [r7, #10]

	return 1;
 8003356:	2301      	movs	r3, #1

}
 8003358:	4618      	mov	r0, r3
 800335a:	3714      	adds	r7, #20
 800335c:	46bd      	mov	sp, r7
 800335e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003362:	4770      	bx	lr

08003364 <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003364:	b580      	push	{r7, lr}
 8003366:	b088      	sub	sp, #32
 8003368:	af02      	add	r7, sp, #8
 800336a:	60f8      	str	r0, [r7, #12]
 800336c:	607b      	str	r3, [r7, #4]
 800336e:	460b      	mov	r3, r1
 8003370:	72fb      	strb	r3, [r7, #11]
 8003372:	4613      	mov	r3, r2
 8003374:	72bb      	strb	r3, [r7, #10]

	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch (msg) {
 8003376:	7afb      	ldrb	r3, [r7, #11]
 8003378:	3b14      	subs	r3, #20
 800337a:	2b0c      	cmp	r3, #12
 800337c:	d847      	bhi.n	800340e <u8x8_byte_i2c+0xaa>
 800337e:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <u8x8_byte_i2c+0x20>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	08003413 	.word	0x08003413
 8003388:	0800340f 	.word	0x0800340f
 800338c:	0800340f 	.word	0x0800340f
 8003390:	080033b9 	.word	0x080033b9
 8003394:	080033e9 	.word	0x080033e9
 8003398:	080033f1 	.word	0x080033f1
 800339c:	0800340f 	.word	0x0800340f
 80033a0:	0800340f 	.word	0x0800340f
 80033a4:	0800340f 	.word	0x0800340f
 80033a8:	0800340f 	.word	0x0800340f
 80033ac:	0800340f 	.word	0x0800340f
 80033b0:	0800340f 	.word	0x0800340f
 80033b4:	08003413 	.word	0x08003413
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t*) arg_ptr;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	617b      	str	r3, [r7, #20]
		while (arg_int > 0) {
 80033bc:	e010      	b.n	80033e0 <u8x8_byte_i2c+0x7c>
			buffer[buf_idx++] = *data;
 80033be:	4b18      	ldr	r3, [pc, #96]	; (8003420 <u8x8_byte_i2c+0xbc>)
 80033c0:	781b      	ldrb	r3, [r3, #0]
 80033c2:	1c5a      	adds	r2, r3, #1
 80033c4:	b2d1      	uxtb	r1, r2
 80033c6:	4a16      	ldr	r2, [pc, #88]	; (8003420 <u8x8_byte_i2c+0xbc>)
 80033c8:	7011      	strb	r1, [r2, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	697b      	ldr	r3, [r7, #20]
 80033ce:	7819      	ldrb	r1, [r3, #0]
 80033d0:	4b14      	ldr	r3, [pc, #80]	; (8003424 <u8x8_byte_i2c+0xc0>)
 80033d2:	5499      	strb	r1, [r3, r2]
			data++;
 80033d4:	697b      	ldr	r3, [r7, #20]
 80033d6:	3301      	adds	r3, #1
 80033d8:	617b      	str	r3, [r7, #20]
			arg_int--;
 80033da:	7abb      	ldrb	r3, [r7, #10]
 80033dc:	3b01      	subs	r3, #1
 80033de:	72bb      	strb	r3, [r7, #10]
		while (arg_int > 0) {
 80033e0:	7abb      	ldrb	r3, [r7, #10]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d1eb      	bne.n	80033be <u8x8_byte_i2c+0x5a>
		}
		break;
 80033e6:	e015      	b.n	8003414 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 80033e8:	4b0d      	ldr	r3, [pc, #52]	; (8003420 <u8x8_byte_i2c+0xbc>)
 80033ea:	2200      	movs	r2, #0
 80033ec:	701a      	strb	r2, [r3, #0]
		break;
 80033ee:	e011      	b.n	8003414 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8),
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033f6:	b299      	uxth	r1, r3
 80033f8:	4b09      	ldr	r3, [pc, #36]	; (8003420 <u8x8_byte_i2c+0xbc>)
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	b29b      	uxth	r3, r3
 80033fe:	f04f 32ff 	mov.w	r2, #4294967295
 8003402:	9200      	str	r2, [sp, #0]
 8003404:	4a07      	ldr	r2, [pc, #28]	; (8003424 <u8x8_byte_i2c+0xc0>)
 8003406:	4808      	ldr	r0, [pc, #32]	; (8003428 <u8x8_byte_i2c+0xc4>)
 8003408:	f002 fdf2 	bl	8005ff0 <HAL_I2C_Master_Transmit>
				(uint8_t*) buffer, buf_idx, HAL_MAX_DELAY);
		break;
 800340c:	e002      	b.n	8003414 <u8x8_byte_i2c+0xb0>
	default:
		return 0;
 800340e:	2300      	movs	r3, #0
 8003410:	e001      	b.n	8003416 <u8x8_byte_i2c+0xb2>
		break;
 8003412:	bf00      	nop
	}

	return 1;
 8003414:	2301      	movs	r3, #1

}
 8003416:	4618      	mov	r0, r3
 8003418:	3718      	adds	r7, #24
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	200005d4 	.word	0x200005d4
 8003424:	200005d8 	.word	0x200005d8
 8003428:	20000364 	.word	0x20000364

0800342c <setRow>:

void setRow(uint8_t rowIdx) {
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003436:	2200      	movs	r2, #0
 8003438:	2140      	movs	r1, #64	; 0x40
 800343a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800343e:	f002 fd2f 	bl	8005ea0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, rowIdx & 0x01);
 8003442:	79fb      	ldrb	r3, [r7, #7]
 8003444:	f003 0301 	and.w	r3, r3, #1
 8003448:	b2db      	uxtb	r3, r3
 800344a:	461a      	mov	r2, r3
 800344c:	2101      	movs	r1, #1
 800344e:	480f      	ldr	r0, [pc, #60]	; (800348c <setRow+0x60>)
 8003450:	f002 fd26 	bl	8005ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, rowIdx & 0x02);
 8003454:	79fb      	ldrb	r3, [r7, #7]
 8003456:	f003 0302 	and.w	r3, r3, #2
 800345a:	b2db      	uxtb	r3, r3
 800345c:	461a      	mov	r2, r3
 800345e:	2102      	movs	r1, #2
 8003460:	480a      	ldr	r0, [pc, #40]	; (800348c <setRow+0x60>)
 8003462:	f002 fd1d 	bl	8005ea0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, rowIdx & 0x04);
 8003466:	79fb      	ldrb	r3, [r7, #7]
 8003468:	f003 0304 	and.w	r3, r3, #4
 800346c:	b2db      	uxtb	r3, r3
 800346e:	461a      	mov	r2, r3
 8003470:	2110      	movs	r1, #16
 8003472:	4806      	ldr	r0, [pc, #24]	; (800348c <setRow+0x60>)
 8003474:	f002 fd14 	bl	8005ea0 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 8003478:	2201      	movs	r2, #1
 800347a:	2140      	movs	r1, #64	; 0x40
 800347c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003480:	f002 fd0e 	bl	8005ea0 <HAL_GPIO_WritePin>

}
 8003484:	bf00      	nop
 8003486:	3708      	adds	r7, #8
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	48000400 	.word	0x48000400

08003490 <readCols>:

uint8_t readCols() {
 8003490:	b580      	push	{r7, lr}
 8003492:	b082      	sub	sp, #8
 8003494:	af00      	add	r7, sp, #0

	uint8_t C0_val = HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin);
 8003496:	2108      	movs	r1, #8
 8003498:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800349c:	f002 fce8 	bl	8005e70 <HAL_GPIO_ReadPin>
 80034a0:	4603      	mov	r3, r0
 80034a2:	71fb      	strb	r3, [r7, #7]
	uint8_t C1_val = HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin);
 80034a4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80034a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ac:	f002 fce0 	bl	8005e70 <HAL_GPIO_ReadPin>
 80034b0:	4603      	mov	r3, r0
 80034b2:	71bb      	strb	r3, [r7, #6]
	uint8_t C2_val = HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin);
 80034b4:	2180      	movs	r1, #128	; 0x80
 80034b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ba:	f002 fcd9 	bl	8005e70 <HAL_GPIO_ReadPin>
 80034be:	4603      	mov	r3, r0
 80034c0:	717b      	strb	r3, [r7, #5]
	uint8_t C3_val = HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin);
 80034c2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80034c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80034ca:	f002 fcd1 	bl	8005e70 <HAL_GPIO_ReadPin>
 80034ce:	4603      	mov	r3, r0
 80034d0:	713b      	strb	r3, [r7, #4]

	return (C3_val << 3) | (C2_val << 2) | (C1_val << 1) | C0_val;
 80034d2:	793b      	ldrb	r3, [r7, #4]
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	b25a      	sxtb	r2, r3
 80034d8:	797b      	ldrb	r3, [r7, #5]
 80034da:	009b      	lsls	r3, r3, #2
 80034dc:	b25b      	sxtb	r3, r3
 80034de:	4313      	orrs	r3, r2
 80034e0:	b25a      	sxtb	r2, r3
 80034e2:	79bb      	ldrb	r3, [r7, #6]
 80034e4:	005b      	lsls	r3, r3, #1
 80034e6:	b25b      	sxtb	r3, r3
 80034e8:	4313      	orrs	r3, r2
 80034ea:	b25a      	sxtb	r2, r3
 80034ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80034f0:	4313      	orrs	r3, r2
 80034f2:	b25b      	sxtb	r3, r3
 80034f4:	b2db      	uxtb	r3, r3

}
 80034f6:	4618      	mov	r0, r3
 80034f8:	3708      	adds	r7, #8
 80034fa:	46bd      	mov	sp, r7
 80034fc:	bd80      	pop	{r7, pc}
	...

08003500 <rotationSteps>:

	return keysRead;

}

void rotationSteps(float *dreal, float *dimag) {
 8003500:	b5b0      	push	{r4, r5, r7, lr}
 8003502:	b084      	sub	sp, #16
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
 8003508:	6039      	str	r1, [r7, #0]

	float phi;

	for (int i = 0; i < 12; i++) {
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	e067      	b.n	80035e0 <rotationSteps+0xe0>

		phi = 2 * M_PI * fA * pow(2, (i - 9) / 12.0) / fs;
 8003510:	4b3b      	ldr	r3, [pc, #236]	; (8003600 <rotationSteps+0x100>)
 8003512:	4618      	mov	r0, r3
 8003514:	f7fd f818 	bl	8000548 <__aeabi_f2d>
 8003518:	a335      	add	r3, pc, #212	; (adr r3, 80035f0 <rotationSteps+0xf0>)
 800351a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800351e:	f7fd f86b 	bl	80005f8 <__aeabi_dmul>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4614      	mov	r4, r2
 8003528:	461d      	mov	r5, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	3b09      	subs	r3, #9
 800352e:	4618      	mov	r0, r3
 8003530:	f7fc fff8 	bl	8000524 <__aeabi_i2d>
 8003534:	f04f 0200 	mov.w	r2, #0
 8003538:	4b32      	ldr	r3, [pc, #200]	; (8003604 <rotationSteps+0x104>)
 800353a:	f7fd f987 	bl	800084c <__aeabi_ddiv>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	ec43 2b17 	vmov	d7, r2, r3
 8003546:	eeb0 1a47 	vmov.f32	s2, s14
 800354a:	eef0 1a67 	vmov.f32	s3, s15
 800354e:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 80035f8 <rotationSteps+0xf8>
 8003552:	f007 f919 	bl	800a788 <pow>
 8003556:	ec53 2b10 	vmov	r2, r3, d0
 800355a:	4620      	mov	r0, r4
 800355c:	4629      	mov	r1, r5
 800355e:	f7fd f84b 	bl	80005f8 <__aeabi_dmul>
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4614      	mov	r4, r2
 8003568:	461d      	mov	r5, r3
 800356a:	4b27      	ldr	r3, [pc, #156]	; (8003608 <rotationSteps+0x108>)
 800356c:	4618      	mov	r0, r3
 800356e:	f7fc ffeb 	bl	8000548 <__aeabi_f2d>
 8003572:	4602      	mov	r2, r0
 8003574:	460b      	mov	r3, r1
 8003576:	4620      	mov	r0, r4
 8003578:	4629      	mov	r1, r5
 800357a:	f7fd f967 	bl	800084c <__aeabi_ddiv>
 800357e:	4602      	mov	r2, r0
 8003580:	460b      	mov	r3, r1
 8003582:	4610      	mov	r0, r2
 8003584:	4619      	mov	r1, r3
 8003586:	f7fd fb0f 	bl	8000ba8 <__aeabi_d2f>
 800358a:	4603      	mov	r3, r0
 800358c:	60bb      	str	r3, [r7, #8]
		dreal[i] = cos(phi);
 800358e:	68b8      	ldr	r0, [r7, #8]
 8003590:	f7fc ffda 	bl	8000548 <__aeabi_f2d>
 8003594:	4602      	mov	r2, r0
 8003596:	460b      	mov	r3, r1
 8003598:	ec43 2b10 	vmov	d0, r2, r3
 800359c:	f007 f848 	bl	800a630 <cos>
 80035a0:	ec51 0b10 	vmov	r0, r1, d0
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	009b      	lsls	r3, r3, #2
 80035a8:	687a      	ldr	r2, [r7, #4]
 80035aa:	18d4      	adds	r4, r2, r3
 80035ac:	f7fd fafc 	bl	8000ba8 <__aeabi_d2f>
 80035b0:	4603      	mov	r3, r0
 80035b2:	6023      	str	r3, [r4, #0]
		dimag[i] = sin(phi);
 80035b4:	68b8      	ldr	r0, [r7, #8]
 80035b6:	f7fc ffc7 	bl	8000548 <__aeabi_f2d>
 80035ba:	4602      	mov	r2, r0
 80035bc:	460b      	mov	r3, r1
 80035be:	ec43 2b10 	vmov	d0, r2, r3
 80035c2:	f007 f889 	bl	800a6d8 <sin>
 80035c6:	ec51 0b10 	vmov	r0, r1, d0
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	009b      	lsls	r3, r3, #2
 80035ce:	683a      	ldr	r2, [r7, #0]
 80035d0:	18d4      	adds	r4, r2, r3
 80035d2:	f7fd fae9 	bl	8000ba8 <__aeabi_d2f>
 80035d6:	4603      	mov	r3, r0
 80035d8:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 12; i++) {
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3301      	adds	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b0b      	cmp	r3, #11
 80035e4:	dd94      	ble.n	8003510 <rotationSteps+0x10>

	}

}
 80035e6:	bf00      	nop
 80035e8:	bf00      	nop
 80035ea:	3710      	adds	r7, #16
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bdb0      	pop	{r4, r5, r7, pc}
 80035f0:	54442d18 	.word	0x54442d18
 80035f4:	401921fb 	.word	0x401921fb
 80035f8:	00000000 	.word	0x00000000
 80035fc:	40000000 	.word	0x40000000
 8003600:	43dc0000 	.word	0x43dc0000
 8003604:	40280000 	.word	0x40280000
 8003608:	46abe000 	.word	0x46abe000

0800360c <HAL_CAN_RxFifo0MsgPendingCallback>:

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 800360c:	b580      	push	{r7, lr}
 800360e:	b086      	sub	sp, #24
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]

	CAN_MSG_t RX;
	CAN_RX(&RX.ID, RX.Message);
 8003614:	f107 020c 	add.w	r2, r7, #12
 8003618:	f107 030c 	add.w	r3, r7, #12
 800361c:	3308      	adds	r3, #8
 800361e:	4611      	mov	r1, r2
 8003620:	4618      	mov	r0, r3
 8003622:	f7ff fe2b 	bl	800327c <CAN_RX>
	osMessageQueuePut(msgInQHandle, &RX.Message, 0, 0);
 8003626:	4b06      	ldr	r3, [pc, #24]	; (8003640 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8003628:	6818      	ldr	r0, [r3, #0]
 800362a:	f107 010c 	add.w	r1, r7, #12
 800362e:	2300      	movs	r3, #0
 8003630:	2200      	movs	r2, #0
 8003632:	f005 fa97 	bl	8008b64 <osMessageQueuePut>

}
 8003636:	bf00      	nop
 8003638:	3718      	adds	r7, #24
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	200004d4 	.word	0x200004d4

08003644 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8003644:	b580      	push	{r7, lr}
 8003646:	b082      	sub	sp, #8
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]

	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 800364c:	4b04      	ldr	r3, [pc, #16]	; (8003660 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	4618      	mov	r0, r3
 8003652:	f005 fa43 	bl	8008adc <osSemaphoreRelease>

}
 8003656:	bf00      	nop
 8003658:	3708      	adds	r7, #8
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
 800365e:	bf00      	nop
 8003660:	200004d8 	.word	0x200004d8

08003664 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8003664:	b580      	push	{r7, lr}
 8003666:	b082      	sub	sp, #8
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]

	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 800366c:	4b04      	ldr	r3, [pc, #16]	; (8003680 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	4618      	mov	r0, r3
 8003672:	f005 fa33 	bl	8008adc <osSemaphoreRelease>

}
 8003676:	bf00      	nop
 8003678:	3708      	adds	r7, #8
 800367a:	46bd      	mov	sp, r7
 800367c:	bd80      	pop	{r7, pc}
 800367e:	bf00      	nop
 8003680:	200004d8 	.word	0x200004d8

08003684 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]

	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 800368c:	4b04      	ldr	r3, [pc, #16]	; (80036a0 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	4618      	mov	r0, r3
 8003692:	f005 fa23 	bl	8008adc <osSemaphoreRelease>

}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	200004d8 	.word	0x200004d8

080036a4 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b088      	sub	sp, #32
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	if (htim == &htim6) {
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	4a53      	ldr	r2, [pc, #332]	; (80037fc <HAL_TIM_PeriodElapsedCallback+0x158>)
 80036b0:	4293      	cmp	r3, r2
 80036b2:	f040 8098 	bne.w	80037e6 <HAL_TIM_PeriodElapsedCallback+0x142>
		static float imag[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

		float real2;
		float imag2;

		float Vadd = 0;
 80036b6:	f04f 0300 	mov.w	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]

		uint16_t localKeys;

		localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 80036bc:	4b50      	ldr	r3, [pc, #320]	; (8003800 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80036be:	881b      	ldrh	r3, [r3, #0]
 80036c0:	837b      	strh	r3, [r7, #26]

		for (int i = 0; i < 12; i++) {
 80036c2:	2300      	movs	r3, #0
 80036c4:	617b      	str	r3, [r7, #20]
 80036c6:	e062      	b.n	800378e <HAL_TIM_PeriodElapsedCallback+0xea>

			if (!(localKeys & 1)) {
 80036c8:	8b7b      	ldrh	r3, [r7, #26]
 80036ca:	f003 0301 	and.w	r3, r3, #1
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d157      	bne.n	8003782 <HAL_TIM_PeriodElapsedCallback+0xde>

				real2 = dreal[i] * real[i] - dimag[i] * imag[i];
 80036d2:	4a4c      	ldr	r2, [pc, #304]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	009b      	lsls	r3, r3, #2
 80036d8:	4413      	add	r3, r2
 80036da:	ed93 7a00 	vldr	s14, [r3]
 80036de:	4a4a      	ldr	r2, [pc, #296]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	edd3 7a00 	vldr	s15, [r3]
 80036ea:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036ee:	4a47      	ldr	r2, [pc, #284]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x168>)
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	009b      	lsls	r3, r3, #2
 80036f4:	4413      	add	r3, r2
 80036f6:	edd3 6a00 	vldr	s13, [r3]
 80036fa:	4a45      	ldr	r2, [pc, #276]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	edd3 7a00 	vldr	s15, [r3]
 8003706:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800370a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800370e:	edc7 7a03 	vstr	s15, [r7, #12]
				imag2 = dimag[i] * real[i] + dreal[i] * imag[i];
 8003712:	4a3e      	ldr	r2, [pc, #248]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	009b      	lsls	r3, r3, #2
 8003718:	4413      	add	r3, r2
 800371a:	ed93 7a00 	vldr	s14, [r3]
 800371e:	4a3a      	ldr	r2, [pc, #232]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	edd3 7a00 	vldr	s15, [r3]
 800372a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800372e:	4a35      	ldr	r2, [pc, #212]	; (8003804 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003730:	697b      	ldr	r3, [r7, #20]
 8003732:	009b      	lsls	r3, r3, #2
 8003734:	4413      	add	r3, r2
 8003736:	edd3 6a00 	vldr	s13, [r3]
 800373a:	4a35      	ldr	r2, [pc, #212]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	edd3 7a00 	vldr	s15, [r3]
 8003746:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800374a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800374e:	edc7 7a02 	vstr	s15, [r7, #8]

				real[i] = real2;
 8003752:	4a2d      	ldr	r2, [pc, #180]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003754:	697b      	ldr	r3, [r7, #20]
 8003756:	009b      	lsls	r3, r3, #2
 8003758:	4413      	add	r3, r2
 800375a:	68fa      	ldr	r2, [r7, #12]
 800375c:	601a      	str	r2, [r3, #0]
				imag[i] = imag2;
 800375e:	4a2c      	ldr	r2, [pc, #176]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	68ba      	ldr	r2, [r7, #8]
 8003768:	601a      	str	r2, [r3, #0]

				Vadd += real[i];
 800376a:	4a27      	ldr	r2, [pc, #156]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	edd3 7a00 	vldr	s15, [r3]
 8003776:	ed97 7a07 	vldr	s14, [r7, #28]
 800377a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800377e:	edc7 7a07 	vstr	s15, [r7, #28]

			}

			localKeys >>= 1;
 8003782:	8b7b      	ldrh	r3, [r7, #26]
 8003784:	085b      	lsrs	r3, r3, #1
 8003786:	837b      	strh	r3, [r7, #26]
		for (int i = 0; i < 12; i++) {
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	3301      	adds	r3, #1
 800378c:	617b      	str	r3, [r7, #20]
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b0b      	cmp	r3, #11
 8003792:	dd99      	ble.n	80036c8 <HAL_TIM_PeriodElapsedCallback+0x24>

		}

		int16_t Vout = (int16_t) 1024 * Vadd / 12.0;
 8003794:	edd7 7a07 	vldr	s15, [r7, #28]
 8003798:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003814 <HAL_TIM_PeriodElapsedCallback+0x170>
 800379c:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037a0:	ee17 0a90 	vmov	r0, s15
 80037a4:	f7fc fed0 	bl	8000548 <__aeabi_f2d>
 80037a8:	f04f 0200 	mov.w	r2, #0
 80037ac:	4b1a      	ldr	r3, [pc, #104]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80037ae:	f7fd f84d 	bl	800084c <__aeabi_ddiv>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4610      	mov	r0, r2
 80037b8:	4619      	mov	r1, r3
 80037ba:	f7fd f9cd 	bl	8000b58 <__aeabi_d2iz>
 80037be:	4603      	mov	r3, r0
 80037c0:	827b      	strh	r3, [r7, #18]

		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, Vout + 2048);
 80037c2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80037c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037ca:	2200      	movs	r2, #0
 80037cc:	2100      	movs	r1, #0
 80037ce:	4813      	ldr	r0, [pc, #76]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x178>)
 80037d0:	f002 f891 	bl	80058f6 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, Vout + 2048);
 80037d4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80037d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037dc:	2200      	movs	r2, #0
 80037de:	2110      	movs	r1, #16
 80037e0:	480e      	ldr	r0, [pc, #56]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x178>)
 80037e2:	f002 f888 	bl	80058f6 <HAL_DAC_SetValue>
//				GPIO_PIN_RESET);

	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM16) {
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	4a0d      	ldr	r2, [pc, #52]	; (8003820 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d101      	bne.n	80037f4 <HAL_TIM_PeriodElapsedCallback+0x150>
		HAL_IncTick();
 80037f0:	f000 fb8c 	bl	8003f0c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80037f4:	bf00      	nop
 80037f6:	3720      	adds	r7, #32
 80037f8:	46bd      	mov	sp, r7
 80037fa:	bd80      	pop	{r7, pc}
 80037fc:	200003b8 	.word	0x200003b8
 8003800:	20000000 	.word	0x20000000
 8003804:	20000570 	.word	0x20000570
 8003808:	20000004 	.word	0x20000004
 800380c:	200005a0 	.word	0x200005a0
 8003810:	200005f8 	.word	0x200005f8
 8003814:	44800000 	.word	0x44800000
 8003818:	40280000 	.word	0x40280000
 800381c:	20000350 	.word	0x20000350
 8003820:	40014400 	.word	0x40014400

08003824 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8003824:	b480      	push	{r7}
 8003826:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003828:	b672      	cpsid	i
}
 800382a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 800382c:	e7fe      	b.n	800382c <Error_Handler+0x8>
	...

08003830 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b082      	sub	sp, #8
 8003834:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <HAL_MspInit+0x4c>)
 8003838:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800383a:	4a10      	ldr	r2, [pc, #64]	; (800387c <HAL_MspInit+0x4c>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6613      	str	r3, [r2, #96]	; 0x60
 8003842:	4b0e      	ldr	r3, [pc, #56]	; (800387c <HAL_MspInit+0x4c>)
 8003844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	607b      	str	r3, [r7, #4]
 800384c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800384e:	4b0b      	ldr	r3, [pc, #44]	; (800387c <HAL_MspInit+0x4c>)
 8003850:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003852:	4a0a      	ldr	r2, [pc, #40]	; (800387c <HAL_MspInit+0x4c>)
 8003854:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003858:	6593      	str	r3, [r2, #88]	; 0x58
 800385a:	4b08      	ldr	r3, [pc, #32]	; (800387c <HAL_MspInit+0x4c>)
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003862:	603b      	str	r3, [r7, #0]
 8003864:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003866:	2200      	movs	r2, #0
 8003868:	210f      	movs	r1, #15
 800386a:	f06f 0001 	mvn.w	r0, #1
 800386e:	f001 ff4f 	bl	8005710 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003872:	bf00      	nop
 8003874:	3708      	adds	r7, #8
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
 800387a:	bf00      	nop
 800387c:	40021000 	.word	0x40021000

08003880 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b09e      	sub	sp, #120	; 0x78
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003888:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003898:	f107 0310 	add.w	r3, r7, #16
 800389c:	2254      	movs	r2, #84	; 0x54
 800389e:	2100      	movs	r1, #0
 80038a0:	4618      	mov	r0, r3
 80038a2:	f006 fa5d 	bl	8009d60 <memset>
  if(hadc->Instance==ADC1)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	4a25      	ldr	r2, [pc, #148]	; (8003940 <HAL_ADC_MspInit+0xc0>)
 80038ac:	4293      	cmp	r3, r2
 80038ae:	d143      	bne.n	8003938 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80038b0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038b4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80038b6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038ba:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80038bc:	2301      	movs	r3, #1
 80038be:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80038c0:	2301      	movs	r3, #1
 80038c2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 40;
 80038c4:	2328      	movs	r3, #40	; 0x28
 80038c6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80038c8:	2307      	movs	r3, #7
 80038ca:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80038cc:	2302      	movs	r3, #2
 80038ce:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80038d0:	2302      	movs	r3, #2
 80038d2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80038d4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038d8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038da:	f107 0310 	add.w	r3, r7, #16
 80038de:	4618      	mov	r0, r3
 80038e0:	f003 fe0e 	bl	8007500 <HAL_RCCEx_PeriphCLKConfig>
 80038e4:	4603      	mov	r3, r0
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80038ea:	f7ff ff9b 	bl	8003824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80038ee:	4b15      	ldr	r3, [pc, #84]	; (8003944 <HAL_ADC_MspInit+0xc4>)
 80038f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038f2:	4a14      	ldr	r2, [pc, #80]	; (8003944 <HAL_ADC_MspInit+0xc4>)
 80038f4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80038f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038fa:	4b12      	ldr	r3, [pc, #72]	; (8003944 <HAL_ADC_MspInit+0xc4>)
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003902:	60fb      	str	r3, [r7, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003906:	4b0f      	ldr	r3, [pc, #60]	; (8003944 <HAL_ADC_MspInit+0xc4>)
 8003908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390a:	4a0e      	ldr	r2, [pc, #56]	; (8003944 <HAL_ADC_MspInit+0xc4>)
 800390c:	f043 0301 	orr.w	r3, r3, #1
 8003910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003912:	4b0c      	ldr	r3, [pc, #48]	; (8003944 <HAL_ADC_MspInit+0xc4>)
 8003914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	60bb      	str	r3, [r7, #8]
 800391c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = JOYY_Pin|JOYX_Pin;
 800391e:	2303      	movs	r3, #3
 8003920:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8003922:	230b      	movs	r3, #11
 8003924:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003926:	2300      	movs	r3, #0
 8003928:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800392a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800392e:	4619      	mov	r1, r3
 8003930:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003934:	f002 f932 	bl	8005b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003938:	bf00      	nop
 800393a:	3778      	adds	r7, #120	; 0x78
 800393c:	46bd      	mov	sp, r7
 800393e:	bd80      	pop	{r7, pc}
 8003940:	50040000 	.word	0x50040000
 8003944:	40021000 	.word	0x40021000

08003948 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a29      	ldr	r2, [pc, #164]	; (8003a0c <HAL_CAN_MspInit+0xc4>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d14b      	bne.n	8003a02 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800396a:	4b29      	ldr	r3, [pc, #164]	; (8003a10 <HAL_CAN_MspInit+0xc8>)
 800396c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800396e:	4a28      	ldr	r2, [pc, #160]	; (8003a10 <HAL_CAN_MspInit+0xc8>)
 8003970:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003974:	6593      	str	r3, [r2, #88]	; 0x58
 8003976:	4b26      	ldr	r3, [pc, #152]	; (8003a10 <HAL_CAN_MspInit+0xc8>)
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397e:	613b      	str	r3, [r7, #16]
 8003980:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003982:	4b23      	ldr	r3, [pc, #140]	; (8003a10 <HAL_CAN_MspInit+0xc8>)
 8003984:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003986:	4a22      	ldr	r2, [pc, #136]	; (8003a10 <HAL_CAN_MspInit+0xc8>)
 8003988:	f043 0301 	orr.w	r3, r3, #1
 800398c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800398e:	4b20      	ldr	r3, [pc, #128]	; (8003a10 <HAL_CAN_MspInit+0xc8>)
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	60fb      	str	r3, [r7, #12]
 8003998:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 800399a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800399e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039a0:	2302      	movs	r3, #2
 80039a2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039a4:	2301      	movs	r3, #1
 80039a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80039a8:	2301      	movs	r3, #1
 80039aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80039ac:	2309      	movs	r3, #9
 80039ae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039b0:	f107 0314 	add.w	r3, r7, #20
 80039b4:	4619      	mov	r1, r3
 80039b6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ba:	f002 f8ef 	bl	8005b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80039be:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c4:	2302      	movs	r3, #2
 80039c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c8:	2300      	movs	r3, #0
 80039ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80039cc:	2301      	movs	r3, #1
 80039ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80039d0:	2309      	movs	r3, #9
 80039d2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039d4:	f107 0314 	add.w	r3, r7, #20
 80039d8:	4619      	mov	r1, r3
 80039da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039de:	f002 f8dd 	bl	8005b9c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 80039e2:	2200      	movs	r2, #0
 80039e4:	2106      	movs	r1, #6
 80039e6:	2013      	movs	r0, #19
 80039e8:	f001 fe92 	bl	8005710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80039ec:	2013      	movs	r0, #19
 80039ee:	f001 feab 	bl	8005748 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 80039f2:	2200      	movs	r2, #0
 80039f4:	2106      	movs	r1, #6
 80039f6:	2014      	movs	r0, #20
 80039f8:	f001 fe8a 	bl	8005710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80039fc:	2014      	movs	r0, #20
 80039fe:	f001 fea3 	bl	8005748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003a02:	bf00      	nop
 8003a04:	3728      	adds	r7, #40	; 0x28
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	40006400 	.word	0x40006400
 8003a10:	40021000 	.word	0x40021000

08003a14 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003a14:	b580      	push	{r7, lr}
 8003a16:	b08a      	sub	sp, #40	; 0x28
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a1c:	f107 0314 	add.w	r3, r7, #20
 8003a20:	2200      	movs	r2, #0
 8003a22:	601a      	str	r2, [r3, #0]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	609a      	str	r2, [r3, #8]
 8003a28:	60da      	str	r2, [r3, #12]
 8003a2a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	4a19      	ldr	r2, [pc, #100]	; (8003a98 <HAL_DAC_MspInit+0x84>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d12c      	bne.n	8003a90 <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003a36:	4b19      	ldr	r3, [pc, #100]	; (8003a9c <HAL_DAC_MspInit+0x88>)
 8003a38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a3a:	4a18      	ldr	r2, [pc, #96]	; (8003a9c <HAL_DAC_MspInit+0x88>)
 8003a3c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a40:	6593      	str	r3, [r2, #88]	; 0x58
 8003a42:	4b16      	ldr	r3, [pc, #88]	; (8003a9c <HAL_DAC_MspInit+0x88>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a4a:	613b      	str	r3, [r7, #16]
 8003a4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a4e:	4b13      	ldr	r3, [pc, #76]	; (8003a9c <HAL_DAC_MspInit+0x88>)
 8003a50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a52:	4a12      	ldr	r2, [pc, #72]	; (8003a9c <HAL_DAC_MspInit+0x88>)
 8003a54:	f043 0301 	orr.w	r3, r3, #1
 8003a58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a5a:	4b10      	ldr	r3, [pc, #64]	; (8003a9c <HAL_DAC_MspInit+0x88>)
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	60fb      	str	r3, [r7, #12]
 8003a64:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = OUTR_Pin|OUTL_Pin;
 8003a66:	2330      	movs	r3, #48	; 0x30
 8003a68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a6a:	2303      	movs	r3, #3
 8003a6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a6e:	2300      	movs	r3, #0
 8003a70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a72:	f107 0314 	add.w	r3, r7, #20
 8003a76:	4619      	mov	r1, r3
 8003a78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a7c:	f002 f88e 	bl	8005b9c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003a80:	2200      	movs	r2, #0
 8003a82:	2105      	movs	r1, #5
 8003a84:	2036      	movs	r0, #54	; 0x36
 8003a86:	f001 fe43 	bl	8005710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a8a:	2036      	movs	r0, #54	; 0x36
 8003a8c:	f001 fe5c 	bl	8005748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003a90:	bf00      	nop
 8003a92:	3728      	adds	r7, #40	; 0x28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bd80      	pop	{r7, pc}
 8003a98:	40007400 	.word	0x40007400
 8003a9c:	40021000 	.word	0x40021000

08003aa0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b09e      	sub	sp, #120	; 0x78
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003aa8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003aac:	2200      	movs	r2, #0
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	605a      	str	r2, [r3, #4]
 8003ab2:	609a      	str	r2, [r3, #8]
 8003ab4:	60da      	str	r2, [r3, #12]
 8003ab6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ab8:	f107 0310 	add.w	r3, r7, #16
 8003abc:	2254      	movs	r2, #84	; 0x54
 8003abe:	2100      	movs	r1, #0
 8003ac0:	4618      	mov	r0, r3
 8003ac2:	f006 f94d 	bl	8009d60 <memset>
  if(hi2c->Instance==I2C1)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a1e      	ldr	r2, [pc, #120]	; (8003b44 <HAL_I2C_MspInit+0xa4>)
 8003acc:	4293      	cmp	r3, r2
 8003ace:	d135      	bne.n	8003b3c <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003ad0:	2340      	movs	r3, #64	; 0x40
 8003ad2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ad8:	f107 0310 	add.w	r3, r7, #16
 8003adc:	4618      	mov	r0, r3
 8003ade:	f003 fd0f 	bl	8007500 <HAL_RCCEx_PeriphCLKConfig>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d001      	beq.n	8003aec <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003ae8:	f7ff fe9c 	bl	8003824 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003aec:	4b16      	ldr	r3, [pc, #88]	; (8003b48 <HAL_I2C_MspInit+0xa8>)
 8003aee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003af0:	4a15      	ldr	r2, [pc, #84]	; (8003b48 <HAL_I2C_MspInit+0xa8>)
 8003af2:	f043 0302 	orr.w	r3, r3, #2
 8003af6:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003af8:	4b13      	ldr	r3, [pc, #76]	; (8003b48 <HAL_I2C_MspInit+0xa8>)
 8003afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afc:	f003 0302 	and.w	r3, r3, #2
 8003b00:	60fb      	str	r3, [r7, #12]
 8003b02:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b04:	23c0      	movs	r3, #192	; 0xc0
 8003b06:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b08:	2312      	movs	r3, #18
 8003b0a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b10:	2303      	movs	r3, #3
 8003b12:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b14:	2304      	movs	r3, #4
 8003b16:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b18:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	480b      	ldr	r0, [pc, #44]	; (8003b4c <HAL_I2C_MspInit+0xac>)
 8003b20:	f002 f83c 	bl	8005b9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b24:	4b08      	ldr	r3, [pc, #32]	; (8003b48 <HAL_I2C_MspInit+0xa8>)
 8003b26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b28:	4a07      	ldr	r2, [pc, #28]	; (8003b48 <HAL_I2C_MspInit+0xa8>)
 8003b2a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b2e:	6593      	str	r3, [r2, #88]	; 0x58
 8003b30:	4b05      	ldr	r3, [pc, #20]	; (8003b48 <HAL_I2C_MspInit+0xa8>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b38:	60bb      	str	r3, [r7, #8]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b3c:	bf00      	nop
 8003b3e:	3778      	adds	r7, #120	; 0x78
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}
 8003b44:	40005400 	.word	0x40005400
 8003b48:	40021000 	.word	0x40021000
 8003b4c:	48000400 	.word	0x48000400

08003b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	4a16      	ldr	r2, [pc, #88]	; (8003bb8 <HAL_TIM_Base_MspInit+0x68>)
 8003b5e:	4293      	cmp	r3, r2
 8003b60:	d114      	bne.n	8003b8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b62:	4b16      	ldr	r3, [pc, #88]	; (8003bbc <HAL_TIM_Base_MspInit+0x6c>)
 8003b64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b66:	4a15      	ldr	r2, [pc, #84]	; (8003bbc <HAL_TIM_Base_MspInit+0x6c>)
 8003b68:	f043 0310 	orr.w	r3, r3, #16
 8003b6c:	6593      	str	r3, [r2, #88]	; 0x58
 8003b6e:	4b13      	ldr	r3, [pc, #76]	; (8003bbc <HAL_TIM_Base_MspInit+0x6c>)
 8003b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b72:	f003 0310 	and.w	r3, r3, #16
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	2105      	movs	r1, #5
 8003b7e:	2036      	movs	r0, #54	; 0x36
 8003b80:	f001 fdc6 	bl	8005710 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b84:	2036      	movs	r0, #54	; 0x36
 8003b86:	f001 fddf 	bl	8005748 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003b8a:	e010      	b.n	8003bae <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0b      	ldr	r2, [pc, #44]	; (8003bc0 <HAL_TIM_Base_MspInit+0x70>)
 8003b92:	4293      	cmp	r3, r2
 8003b94:	d10b      	bne.n	8003bae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003b96:	4b09      	ldr	r3, [pc, #36]	; (8003bbc <HAL_TIM_Base_MspInit+0x6c>)
 8003b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b9a:	4a08      	ldr	r2, [pc, #32]	; (8003bbc <HAL_TIM_Base_MspInit+0x6c>)
 8003b9c:	f043 0320 	orr.w	r3, r3, #32
 8003ba0:	6593      	str	r3, [r2, #88]	; 0x58
 8003ba2:	4b06      	ldr	r3, [pc, #24]	; (8003bbc <HAL_TIM_Base_MspInit+0x6c>)
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	f003 0320 	and.w	r3, r3, #32
 8003baa:	60bb      	str	r3, [r7, #8]
 8003bac:	68bb      	ldr	r3, [r7, #8]
}
 8003bae:	bf00      	nop
 8003bb0:	3710      	adds	r7, #16
 8003bb2:	46bd      	mov	sp, r7
 8003bb4:	bd80      	pop	{r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	40001000 	.word	0x40001000
 8003bbc:	40021000 	.word	0x40021000
 8003bc0:	40001400 	.word	0x40001400

08003bc4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bc4:	b580      	push	{r7, lr}
 8003bc6:	b09e      	sub	sp, #120	; 0x78
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bcc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003bd0:	2200      	movs	r2, #0
 8003bd2:	601a      	str	r2, [r3, #0]
 8003bd4:	605a      	str	r2, [r3, #4]
 8003bd6:	609a      	str	r2, [r3, #8]
 8003bd8:	60da      	str	r2, [r3, #12]
 8003bda:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003bdc:	f107 0310 	add.w	r3, r7, #16
 8003be0:	2254      	movs	r2, #84	; 0x54
 8003be2:	2100      	movs	r1, #0
 8003be4:	4618      	mov	r0, r3
 8003be6:	f006 f8bb 	bl	8009d60 <memset>
  if(huart->Instance==USART2)
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a28      	ldr	r2, [pc, #160]	; (8003c90 <HAL_UART_MspInit+0xcc>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d148      	bne.n	8003c86 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003bf4:	2302      	movs	r3, #2
 8003bf6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003bf8:	2300      	movs	r3, #0
 8003bfa:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003bfc:	f107 0310 	add.w	r3, r7, #16
 8003c00:	4618      	mov	r0, r3
 8003c02:	f003 fc7d 	bl	8007500 <HAL_RCCEx_PeriphCLKConfig>
 8003c06:	4603      	mov	r3, r0
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d001      	beq.n	8003c10 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c0c:	f7ff fe0a 	bl	8003824 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c10:	4b20      	ldr	r3, [pc, #128]	; (8003c94 <HAL_UART_MspInit+0xd0>)
 8003c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c14:	4a1f      	ldr	r2, [pc, #124]	; (8003c94 <HAL_UART_MspInit+0xd0>)
 8003c16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c1a:	6593      	str	r3, [r2, #88]	; 0x58
 8003c1c:	4b1d      	ldr	r3, [pc, #116]	; (8003c94 <HAL_UART_MspInit+0xd0>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c28:	4b1a      	ldr	r3, [pc, #104]	; (8003c94 <HAL_UART_MspInit+0xd0>)
 8003c2a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c2c:	4a19      	ldr	r2, [pc, #100]	; (8003c94 <HAL_UART_MspInit+0xd0>)
 8003c2e:	f043 0301 	orr.w	r3, r3, #1
 8003c32:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c34:	4b17      	ldr	r3, [pc, #92]	; (8003c94 <HAL_UART_MspInit+0xd0>)
 8003c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c38:	f003 0301 	and.w	r3, r3, #1
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c40:	2304      	movs	r3, #4
 8003c42:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c44:	2302      	movs	r3, #2
 8003c46:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c50:	2307      	movs	r3, #7
 8003c52:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c58:	4619      	mov	r1, r3
 8003c5a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c5e:	f001 ff9d 	bl	8005b9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c62:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c66:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c68:	2302      	movs	r3, #2
 8003c6a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c70:	2303      	movs	r3, #3
 8003c72:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003c74:	2303      	movs	r3, #3
 8003c76:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c78:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c7c:	4619      	mov	r1, r3
 8003c7e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c82:	f001 ff8b 	bl	8005b9c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c86:	bf00      	nop
 8003c88:	3778      	adds	r7, #120	; 0x78
 8003c8a:	46bd      	mov	sp, r7
 8003c8c:	bd80      	pop	{r7, pc}
 8003c8e:	bf00      	nop
 8003c90:	40004400 	.word	0x40004400
 8003c94:	40021000 	.word	0x40021000

08003c98 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b08c      	sub	sp, #48	; 0x30
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8003ca6:	4b2e      	ldr	r3, [pc, #184]	; (8003d60 <HAL_InitTick+0xc8>)
 8003ca8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003caa:	4a2d      	ldr	r2, [pc, #180]	; (8003d60 <HAL_InitTick+0xc8>)
 8003cac:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cb0:	6613      	str	r3, [r2, #96]	; 0x60
 8003cb2:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <HAL_InitTick+0xc8>)
 8003cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cba:	60bb      	str	r3, [r7, #8]
 8003cbc:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003cbe:	f107 020c 	add.w	r2, r7, #12
 8003cc2:	f107 0310 	add.w	r3, r7, #16
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f003 fb87 	bl	80073dc <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003cce:	f003 fb6f 	bl	80073b0 <HAL_RCC_GetPCLK2Freq>
 8003cd2:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cd6:	4a23      	ldr	r2, [pc, #140]	; (8003d64 <HAL_InitTick+0xcc>)
 8003cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cdc:	0c9b      	lsrs	r3, r3, #18
 8003cde:	3b01      	subs	r3, #1
 8003ce0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8003ce2:	4b21      	ldr	r3, [pc, #132]	; (8003d68 <HAL_InitTick+0xd0>)
 8003ce4:	4a21      	ldr	r2, [pc, #132]	; (8003d6c <HAL_InitTick+0xd4>)
 8003ce6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8003ce8:	4b1f      	ldr	r3, [pc, #124]	; (8003d68 <HAL_InitTick+0xd0>)
 8003cea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cee:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8003cf0:	4a1d      	ldr	r2, [pc, #116]	; (8003d68 <HAL_InitTick+0xd0>)
 8003cf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cf4:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8003cf6:	4b1c      	ldr	r3, [pc, #112]	; (8003d68 <HAL_InitTick+0xd0>)
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003cfc:	4b1a      	ldr	r3, [pc, #104]	; (8003d68 <HAL_InitTick+0xd0>)
 8003cfe:	2200      	movs	r2, #0
 8003d00:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d02:	4b19      	ldr	r3, [pc, #100]	; (8003d68 <HAL_InitTick+0xd0>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8003d08:	4817      	ldr	r0, [pc, #92]	; (8003d68 <HAL_InitTick+0xd0>)
 8003d0a:	f003 fef1 	bl	8007af0 <HAL_TIM_Base_Init>
 8003d0e:	4603      	mov	r3, r0
 8003d10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003d14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d11b      	bne.n	8003d54 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8003d1c:	4812      	ldr	r0, [pc, #72]	; (8003d68 <HAL_InitTick+0xd0>)
 8003d1e:	f003 ff8b 	bl	8007c38 <HAL_TIM_Base_Start_IT>
 8003d22:	4603      	mov	r3, r0
 8003d24:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003d28:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d111      	bne.n	8003d54 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003d30:	2019      	movs	r0, #25
 8003d32:	f001 fd09 	bl	8005748 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	2b0f      	cmp	r3, #15
 8003d3a:	d808      	bhi.n	8003d4e <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	6879      	ldr	r1, [r7, #4]
 8003d40:	2019      	movs	r0, #25
 8003d42:	f001 fce5 	bl	8005710 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d46:	4a0a      	ldr	r2, [pc, #40]	; (8003d70 <HAL_InitTick+0xd8>)
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	6013      	str	r3, [r2, #0]
 8003d4c:	e002      	b.n	8003d54 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8003d4e:	2301      	movs	r3, #1
 8003d50:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003d54:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	3730      	adds	r7, #48	; 0x30
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	bd80      	pop	{r7, pc}
 8003d60:	40021000 	.word	0x40021000
 8003d64:	431bde83 	.word	0x431bde83
 8003d68:	20000628 	.word	0x20000628
 8003d6c:	40014400 	.word	0x40014400
 8003d70:	20000038 	.word	0x20000038

08003d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d74:	b480      	push	{r7}
 8003d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d78:	e7fe      	b.n	8003d78 <NMI_Handler+0x4>

08003d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d7a:	b480      	push	{r7}
 8003d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d7e:	e7fe      	b.n	8003d7e <HardFault_Handler+0x4>

08003d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d84:	e7fe      	b.n	8003d84 <MemManage_Handler+0x4>

08003d86 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d86:	b480      	push	{r7}
 8003d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d8a:	e7fe      	b.n	8003d8a <BusFault_Handler+0x4>

08003d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d90:	e7fe      	b.n	8003d90 <UsageFault_Handler+0x4>

08003d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d96:	bf00      	nop
 8003d98:	46bd      	mov	sp, r7
 8003d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d9e:	4770      	bx	lr

08003da0 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003da4:	4802      	ldr	r0, [pc, #8]	; (8003db0 <CAN1_TX_IRQHandler+0x10>)
 8003da6:	f001 f9ea 	bl	800517e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003daa:	bf00      	nop
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	20000328 	.word	0x20000328

08003db4 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003db8:	4802      	ldr	r0, [pc, #8]	; (8003dc4 <CAN1_RX0_IRQHandler+0x10>)
 8003dba:	f001 f9e0 	bl	800517e <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003dbe:	bf00      	nop
 8003dc0:	bd80      	pop	{r7, pc}
 8003dc2:	bf00      	nop
 8003dc4:	20000328 	.word	0x20000328

08003dc8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003dcc:	4802      	ldr	r0, [pc, #8]	; (8003dd8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003dce:	f003 ff87 	bl	8007ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003dd2:	bf00      	nop
 8003dd4:	bd80      	pop	{r7, pc}
 8003dd6:	bf00      	nop
 8003dd8:	20000628 	.word	0x20000628

08003ddc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003de0:	4803      	ldr	r0, [pc, #12]	; (8003df0 <TIM6_DAC_IRQHandler+0x14>)
 8003de2:	f003 ff7d 	bl	8007ce0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003de6:	4803      	ldr	r0, [pc, #12]	; (8003df4 <TIM6_DAC_IRQHandler+0x18>)
 8003de8:	f001 fd2b 	bl	8005842 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003dec:	bf00      	nop
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	200003b8 	.word	0x200003b8
 8003df4:	20000350 	.word	0x20000350

08003df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b086      	sub	sp, #24
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e00:	4a14      	ldr	r2, [pc, #80]	; (8003e54 <_sbrk+0x5c>)
 8003e02:	4b15      	ldr	r3, [pc, #84]	; (8003e58 <_sbrk+0x60>)
 8003e04:	1ad3      	subs	r3, r2, r3
 8003e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e08:	697b      	ldr	r3, [r7, #20]
 8003e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e0c:	4b13      	ldr	r3, [pc, #76]	; (8003e5c <_sbrk+0x64>)
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e14:	4b11      	ldr	r3, [pc, #68]	; (8003e5c <_sbrk+0x64>)
 8003e16:	4a12      	ldr	r2, [pc, #72]	; (8003e60 <_sbrk+0x68>)
 8003e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e1a:	4b10      	ldr	r3, [pc, #64]	; (8003e5c <_sbrk+0x64>)
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	4413      	add	r3, r2
 8003e22:	693a      	ldr	r2, [r7, #16]
 8003e24:	429a      	cmp	r2, r3
 8003e26:	d207      	bcs.n	8003e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e28:	f005 ff60 	bl	8009cec <__errno>
 8003e2c:	4603      	mov	r3, r0
 8003e2e:	220c      	movs	r2, #12
 8003e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e32:	f04f 33ff 	mov.w	r3, #4294967295
 8003e36:	e009      	b.n	8003e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e38:	4b08      	ldr	r3, [pc, #32]	; (8003e5c <_sbrk+0x64>)
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e3e:	4b07      	ldr	r3, [pc, #28]	; (8003e5c <_sbrk+0x64>)
 8003e40:	681a      	ldr	r2, [r3, #0]
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	4413      	add	r3, r2
 8003e46:	4a05      	ldr	r2, [pc, #20]	; (8003e5c <_sbrk+0x64>)
 8003e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	3718      	adds	r7, #24
 8003e50:	46bd      	mov	sp, r7
 8003e52:	bd80      	pop	{r7, pc}
 8003e54:	20010000 	.word	0x20010000
 8003e58:	00000400 	.word	0x00000400
 8003e5c:	20000674 	.word	0x20000674
 8003e60:	20000b50 	.word	0x20000b50

08003e64 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003e68:	4b06      	ldr	r3, [pc, #24]	; (8003e84 <SystemInit+0x20>)
 8003e6a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e6e:	4a05      	ldr	r2, [pc, #20]	; (8003e84 <SystemInit+0x20>)
 8003e70:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e74:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003e78:	bf00      	nop
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e80:	4770      	bx	lr
 8003e82:	bf00      	nop
 8003e84:	e000ed00 	.word	0xe000ed00

08003e88 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003e88:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ec0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e8c:	f7ff ffea 	bl	8003e64 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e90:	480c      	ldr	r0, [pc, #48]	; (8003ec4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e92:	490d      	ldr	r1, [pc, #52]	; (8003ec8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003e94:	4a0d      	ldr	r2, [pc, #52]	; (8003ecc <LoopForever+0xe>)
  movs r3, #0
 8003e96:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003e98:	e002      	b.n	8003ea0 <LoopCopyDataInit>

08003e9a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003e9a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003e9c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003e9e:	3304      	adds	r3, #4

08003ea0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003ea0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003ea2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003ea4:	d3f9      	bcc.n	8003e9a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003ea6:	4a0a      	ldr	r2, [pc, #40]	; (8003ed0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003ea8:	4c0a      	ldr	r4, [pc, #40]	; (8003ed4 <LoopForever+0x16>)
  movs r3, #0
 8003eaa:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eac:	e001      	b.n	8003eb2 <LoopFillZerobss>

08003eae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003eb0:	3204      	adds	r2, #4

08003eb2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003eb2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003eb4:	d3fb      	bcc.n	8003eae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003eb6:	f005 ff1f 	bl	8009cf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003eba:	f7fe fdf1 	bl	8002aa0 <main>

08003ebe <LoopForever>:

LoopForever:
    b LoopForever
 8003ebe:	e7fe      	b.n	8003ebe <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ec0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003ec4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ec8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8003ecc:	0800cd48 	.word	0x0800cd48
  ldr r2, =_sbss
 8003ed0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003ed4:	20000b4c 	.word	0x20000b4c

08003ed8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ed8:	e7fe      	b.n	8003ed8 <ADC1_IRQHandler>

08003eda <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003eda:	b580      	push	{r7, lr}
 8003edc:	b082      	sub	sp, #8
 8003ede:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ee4:	2003      	movs	r0, #3
 8003ee6:	f001 fc08 	bl	80056fa <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003eea:	200f      	movs	r0, #15
 8003eec:	f7ff fed4 	bl	8003c98 <HAL_InitTick>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d002      	beq.n	8003efc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	71fb      	strb	r3, [r7, #7]
 8003efa:	e001      	b.n	8003f00 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003efc:	f7ff fc98 	bl	8003830 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f00:	79fb      	ldrb	r3, [r7, #7]
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3708      	adds	r7, #8
 8003f06:	46bd      	mov	sp, r7
 8003f08:	bd80      	pop	{r7, pc}
	...

08003f0c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f10:	4b06      	ldr	r3, [pc, #24]	; (8003f2c <HAL_IncTick+0x20>)
 8003f12:	781b      	ldrb	r3, [r3, #0]
 8003f14:	461a      	mov	r2, r3
 8003f16:	4b06      	ldr	r3, [pc, #24]	; (8003f30 <HAL_IncTick+0x24>)
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4413      	add	r3, r2
 8003f1c:	4a04      	ldr	r2, [pc, #16]	; (8003f30 <HAL_IncTick+0x24>)
 8003f1e:	6013      	str	r3, [r2, #0]
}
 8003f20:	bf00      	nop
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	2000003c 	.word	0x2000003c
 8003f30:	20000678 	.word	0x20000678

08003f34 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f34:	b480      	push	{r7}
 8003f36:	af00      	add	r7, sp, #0
  return uwTick;
 8003f38:	4b03      	ldr	r3, [pc, #12]	; (8003f48 <HAL_GetTick+0x14>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	20000678 	.word	0x20000678

08003f4c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f54:	f7ff ffee 	bl	8003f34 <HAL_GetTick>
 8003f58:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f64:	d005      	beq.n	8003f72 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003f66:	4b0a      	ldr	r3, [pc, #40]	; (8003f90 <HAL_Delay+0x44>)
 8003f68:	781b      	ldrb	r3, [r3, #0]
 8003f6a:	461a      	mov	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	4413      	add	r3, r2
 8003f70:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f72:	bf00      	nop
 8003f74:	f7ff ffde 	bl	8003f34 <HAL_GetTick>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	1ad3      	subs	r3, r2, r3
 8003f7e:	68fa      	ldr	r2, [r7, #12]
 8003f80:	429a      	cmp	r2, r3
 8003f82:	d8f7      	bhi.n	8003f74 <HAL_Delay+0x28>
  {
  }
}
 8003f84:	bf00      	nop
 8003f86:	bf00      	nop
 8003f88:	3710      	adds	r7, #16
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}
 8003f8e:	bf00      	nop
 8003f90:	2000003c 	.word	0x2000003c

08003f94 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003f94:	b480      	push	{r7}
 8003f96:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8003f98:	4b03      	ldr	r3, [pc, #12]	; (8003fa8 <HAL_GetUIDw0+0x14>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
}
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa4:	4770      	bx	lr
 8003fa6:	bf00      	nop
 8003fa8:	1fff7590 	.word	0x1fff7590

08003fac <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
 8003fb4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	689b      	ldr	r3, [r3, #8]
 8003fba:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	431a      	orrs	r2, r3
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	609a      	str	r2, [r3, #8]
}
 8003fc6:	bf00      	nop
 8003fc8:	370c      	adds	r7, #12
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd0:	4770      	bx	lr

08003fd2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003fd2:	b480      	push	{r7}
 8003fd4:	b083      	sub	sp, #12
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	6078      	str	r0, [r7, #4]
 8003fda:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	689b      	ldr	r3, [r3, #8]
 8003fe0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	609a      	str	r2, [r3, #8]
}
 8003fec:	bf00      	nop
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr

08003ff8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004008:	4618      	mov	r0, r3
 800400a:	370c      	adds	r7, #12
 800400c:	46bd      	mov	sp, r7
 800400e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004012:	4770      	bx	lr

08004014 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	60f8      	str	r0, [r7, #12]
 800401c:	60b9      	str	r1, [r7, #8]
 800401e:	607a      	str	r2, [r7, #4]
 8004020:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	3360      	adds	r3, #96	; 0x60
 8004026:	461a      	mov	r2, r3
 8004028:	68bb      	ldr	r3, [r7, #8]
 800402a:	009b      	lsls	r3, r3, #2
 800402c:	4413      	add	r3, r2
 800402e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004030:	697b      	ldr	r3, [r7, #20]
 8004032:	681a      	ldr	r2, [r3, #0]
 8004034:	4b08      	ldr	r3, [pc, #32]	; (8004058 <LL_ADC_SetOffset+0x44>)
 8004036:	4013      	ands	r3, r2
 8004038:	687a      	ldr	r2, [r7, #4]
 800403a:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800403e:	683a      	ldr	r2, [r7, #0]
 8004040:	430a      	orrs	r2, r1
 8004042:	4313      	orrs	r3, r2
 8004044:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 800404c:	bf00      	nop
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	03fff000 	.word	0x03fff000

0800405c <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 800405c:	b480      	push	{r7}
 800405e:	b085      	sub	sp, #20
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	3360      	adds	r3, #96	; 0x60
 800406a:	461a      	mov	r2, r3
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	009b      	lsls	r3, r3, #2
 8004070:	4413      	add	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800407c:	4618      	mov	r0, r3
 800407e:	3714      	adds	r7, #20
 8004080:	46bd      	mov	sp, r7
 8004082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004086:	4770      	bx	lr

08004088 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004088:	b480      	push	{r7}
 800408a:	b087      	sub	sp, #28
 800408c:	af00      	add	r7, sp, #0
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	3360      	adds	r3, #96	; 0x60
 8004098:	461a      	mov	r2, r3
 800409a:	68bb      	ldr	r3, [r7, #8]
 800409c:	009b      	lsls	r3, r3, #2
 800409e:	4413      	add	r3, r2
 80040a0:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040a2:	697b      	ldr	r3, [r7, #20]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	431a      	orrs	r2, r3
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80040b2:	bf00      	nop
 80040b4:	371c      	adds	r7, #28
 80040b6:	46bd      	mov	sp, r7
 80040b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040bc:	4770      	bx	lr

080040be <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040be:	b480      	push	{r7}
 80040c0:	b087      	sub	sp, #28
 80040c2:	af00      	add	r7, sp, #0
 80040c4:	60f8      	str	r0, [r7, #12]
 80040c6:	60b9      	str	r1, [r7, #8]
 80040c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	3330      	adds	r3, #48	; 0x30
 80040ce:	461a      	mov	r2, r3
 80040d0:	68bb      	ldr	r3, [r7, #8]
 80040d2:	0a1b      	lsrs	r3, r3, #8
 80040d4:	009b      	lsls	r3, r3, #2
 80040d6:	f003 030c 	and.w	r3, r3, #12
 80040da:	4413      	add	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040de:	697b      	ldr	r3, [r7, #20]
 80040e0:	681a      	ldr	r2, [r3, #0]
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	f003 031f 	and.w	r3, r3, #31
 80040e8:	211f      	movs	r1, #31
 80040ea:	fa01 f303 	lsl.w	r3, r1, r3
 80040ee:	43db      	mvns	r3, r3
 80040f0:	401a      	ands	r2, r3
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	0e9b      	lsrs	r3, r3, #26
 80040f6:	f003 011f 	and.w	r1, r3, #31
 80040fa:	68bb      	ldr	r3, [r7, #8]
 80040fc:	f003 031f 	and.w	r3, r3, #31
 8004100:	fa01 f303 	lsl.w	r3, r1, r3
 8004104:	431a      	orrs	r2, r3
 8004106:	697b      	ldr	r3, [r7, #20]
 8004108:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800410a:	bf00      	nop
 800410c:	371c      	adds	r7, #28
 800410e:	46bd      	mov	sp, r7
 8004110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004114:	4770      	bx	lr

08004116 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004116:	b480      	push	{r7}
 8004118:	b087      	sub	sp, #28
 800411a:	af00      	add	r7, sp, #0
 800411c:	60f8      	str	r0, [r7, #12]
 800411e:	60b9      	str	r1, [r7, #8]
 8004120:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	3314      	adds	r3, #20
 8004126:	461a      	mov	r2, r3
 8004128:	68bb      	ldr	r3, [r7, #8]
 800412a:	0e5b      	lsrs	r3, r3, #25
 800412c:	009b      	lsls	r3, r3, #2
 800412e:	f003 0304 	and.w	r3, r3, #4
 8004132:	4413      	add	r3, r2
 8004134:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004136:	697b      	ldr	r3, [r7, #20]
 8004138:	681a      	ldr	r2, [r3, #0]
 800413a:	68bb      	ldr	r3, [r7, #8]
 800413c:	0d1b      	lsrs	r3, r3, #20
 800413e:	f003 031f 	and.w	r3, r3, #31
 8004142:	2107      	movs	r1, #7
 8004144:	fa01 f303 	lsl.w	r3, r1, r3
 8004148:	43db      	mvns	r3, r3
 800414a:	401a      	ands	r2, r3
 800414c:	68bb      	ldr	r3, [r7, #8]
 800414e:	0d1b      	lsrs	r3, r3, #20
 8004150:	f003 031f 	and.w	r3, r3, #31
 8004154:	6879      	ldr	r1, [r7, #4]
 8004156:	fa01 f303 	lsl.w	r3, r1, r3
 800415a:	431a      	orrs	r2, r3
 800415c:	697b      	ldr	r3, [r7, #20]
 800415e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8004160:	bf00      	nop
 8004162:	371c      	adds	r7, #28
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr

0800416c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800416c:	b480      	push	{r7}
 800416e:	b085      	sub	sp, #20
 8004170:	af00      	add	r7, sp, #0
 8004172:	60f8      	str	r0, [r7, #12]
 8004174:	60b9      	str	r1, [r7, #8]
 8004176:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800417e:	68bb      	ldr	r3, [r7, #8]
 8004180:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004184:	43db      	mvns	r3, r3
 8004186:	401a      	ands	r2, r3
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	f003 0318 	and.w	r3, r3, #24
 800418e:	4908      	ldr	r1, [pc, #32]	; (80041b0 <LL_ADC_SetChannelSingleDiff+0x44>)
 8004190:	40d9      	lsrs	r1, r3
 8004192:	68bb      	ldr	r3, [r7, #8]
 8004194:	400b      	ands	r3, r1
 8004196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800419a:	431a      	orrs	r2, r3
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80041a2:	bf00      	nop
 80041a4:	3714      	adds	r7, #20
 80041a6:	46bd      	mov	sp, r7
 80041a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	0007ffff 	.word	0x0007ffff

080041b4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80041b4:	b480      	push	{r7}
 80041b6:	b083      	sub	sp, #12
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	689b      	ldr	r3, [r3, #8]
 80041c0:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80041c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041c8:	687a      	ldr	r2, [r7, #4]
 80041ca:	6093      	str	r3, [r2, #8]
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	689b      	ldr	r3, [r3, #8]
 80041e4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041e8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041ec:	d101      	bne.n	80041f2 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80041ee:	2301      	movs	r3, #1
 80041f0:	e000      	b.n	80041f4 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80041f2:	2300      	movs	r3, #0
}
 80041f4:	4618      	mov	r0, r3
 80041f6:	370c      	adds	r7, #12
 80041f8:	46bd      	mov	sp, r7
 80041fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fe:	4770      	bx	lr

08004200 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004210:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004214:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 800421c:	bf00      	nop
 800421e:	370c      	adds	r7, #12
 8004220:	46bd      	mov	sp, r7
 8004222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004226:	4770      	bx	lr

08004228 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	689b      	ldr	r3, [r3, #8]
 8004234:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004238:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800423c:	d101      	bne.n	8004242 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800423e:	2301      	movs	r3, #1
 8004240:	e000      	b.n	8004244 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8004242:	2300      	movs	r3, #0
}
 8004244:	4618      	mov	r0, r3
 8004246:	370c      	adds	r7, #12
 8004248:	46bd      	mov	sp, r7
 800424a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424e:	4770      	bx	lr

08004250 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004250:	b480      	push	{r7}
 8004252:	b083      	sub	sp, #12
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	f003 0301 	and.w	r3, r3, #1
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <LL_ADC_IsEnabled+0x18>
 8004264:	2301      	movs	r3, #1
 8004266:	e000      	b.n	800426a <LL_ADC_IsEnabled+0x1a>
 8004268:	2300      	movs	r3, #0
}
 800426a:	4618      	mov	r0, r3
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	689b      	ldr	r3, [r3, #8]
 8004282:	f003 0304 	and.w	r3, r3, #4
 8004286:	2b04      	cmp	r3, #4
 8004288:	d101      	bne.n	800428e <LL_ADC_REG_IsConversionOngoing+0x18>
 800428a:	2301      	movs	r3, #1
 800428c:	e000      	b.n	8004290 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	370c      	adds	r7, #12
 8004294:	46bd      	mov	sp, r7
 8004296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429a:	4770      	bx	lr

0800429c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800429c:	b480      	push	{r7}
 800429e:	b083      	sub	sp, #12
 80042a0:	af00      	add	r7, sp, #0
 80042a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	f003 0308 	and.w	r3, r3, #8
 80042ac:	2b08      	cmp	r3, #8
 80042ae:	d101      	bne.n	80042b4 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042b0:	2301      	movs	r3, #1
 80042b2:	e000      	b.n	80042b6 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042b4:	2300      	movs	r3, #0
}
 80042b6:	4618      	mov	r0, r3
 80042b8:	370c      	adds	r7, #12
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr
	...

080042c4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042c4:	b580      	push	{r7, lr}
 80042c6:	b088      	sub	sp, #32
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042cc:	2300      	movs	r3, #0
 80042ce:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042d0:	2300      	movs	r3, #0
 80042d2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d101      	bne.n	80042de <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042da:	2301      	movs	r3, #1
 80042dc:	e12c      	b.n	8004538 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	691b      	ldr	r3, [r3, #16]
 80042e2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d109      	bne.n	8004300 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff fac7 	bl	8003880 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	2200      	movs	r2, #0
 80042f6:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	4618      	mov	r0, r3
 8004306:	f7ff ff67 	bl	80041d8 <LL_ADC_IsDeepPowerDownEnabled>
 800430a:	4603      	mov	r3, r0
 800430c:	2b00      	cmp	r3, #0
 800430e:	d004      	beq.n	800431a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7ff ff4d 	bl	80041b4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4618      	mov	r0, r3
 8004320:	f7ff ff82 	bl	8004228 <LL_ADC_IsInternalRegulatorEnabled>
 8004324:	4603      	mov	r3, r0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d115      	bne.n	8004356 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7ff ff66 	bl	8004200 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004334:	4b82      	ldr	r3, [pc, #520]	; (8004540 <HAL_ADC_Init+0x27c>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	099b      	lsrs	r3, r3, #6
 800433a:	4a82      	ldr	r2, [pc, #520]	; (8004544 <HAL_ADC_Init+0x280>)
 800433c:	fba2 2303 	umull	r2, r3, r2, r3
 8004340:	099b      	lsrs	r3, r3, #6
 8004342:	3301      	adds	r3, #1
 8004344:	005b      	lsls	r3, r3, #1
 8004346:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004348:	e002      	b.n	8004350 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 800434a:	68bb      	ldr	r3, [r7, #8]
 800434c:	3b01      	subs	r3, #1
 800434e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004350:	68bb      	ldr	r3, [r7, #8]
 8004352:	2b00      	cmp	r3, #0
 8004354:	d1f9      	bne.n	800434a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7ff ff64 	bl	8004228 <LL_ADC_IsInternalRegulatorEnabled>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d10d      	bne.n	8004382 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800436a:	f043 0210 	orr.w	r2, r3, #16
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004376:	f043 0201 	orr.w	r2, r3, #1
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800437e:	2301      	movs	r3, #1
 8004380:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	4618      	mov	r0, r3
 8004388:	f7ff ff75 	bl	8004276 <LL_ADC_REG_IsConversionOngoing>
 800438c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	f003 0310 	and.w	r3, r3, #16
 8004396:	2b00      	cmp	r3, #0
 8004398:	f040 80c5 	bne.w	8004526 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800439c:	697b      	ldr	r3, [r7, #20]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f040 80c1 	bne.w	8004526 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a8:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80043ac:	f043 0202 	orr.w	r2, r3, #2
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4618      	mov	r0, r3
 80043ba:	f7ff ff49 	bl	8004250 <LL_ADC_IsEnabled>
 80043be:	4603      	mov	r3, r0
 80043c0:	2b00      	cmp	r3, #0
 80043c2:	d10b      	bne.n	80043dc <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043c4:	4860      	ldr	r0, [pc, #384]	; (8004548 <HAL_ADC_Init+0x284>)
 80043c6:	f7ff ff43 	bl	8004250 <LL_ADC_IsEnabled>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d105      	bne.n	80043dc <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	4619      	mov	r1, r3
 80043d6:	485d      	ldr	r0, [pc, #372]	; (800454c <HAL_ADC_Init+0x288>)
 80043d8:	f7ff fde8 	bl	8003fac <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	7e5b      	ldrb	r3, [r3, #25]
 80043e0:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043e6:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80043ec:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80043f2:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80043fa:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043fc:	4313      	orrs	r3, r2
 80043fe:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d106      	bne.n	8004418 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800440e:	3b01      	subs	r3, #1
 8004410:	045b      	lsls	r3, r3, #17
 8004412:	69ba      	ldr	r2, [r7, #24]
 8004414:	4313      	orrs	r3, r2
 8004416:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800441c:	2b00      	cmp	r3, #0
 800441e:	d009      	beq.n	8004434 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004424:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800442e:	69ba      	ldr	r2, [r7, #24]
 8004430:	4313      	orrs	r3, r2
 8004432:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	68da      	ldr	r2, [r3, #12]
 800443a:	4b45      	ldr	r3, [pc, #276]	; (8004550 <HAL_ADC_Init+0x28c>)
 800443c:	4013      	ands	r3, r2
 800443e:	687a      	ldr	r2, [r7, #4]
 8004440:	6812      	ldr	r2, [r2, #0]
 8004442:	69b9      	ldr	r1, [r7, #24]
 8004444:	430b      	orrs	r3, r1
 8004446:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	4618      	mov	r0, r3
 800444e:	f7ff ff12 	bl	8004276 <LL_ADC_REG_IsConversionOngoing>
 8004452:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff ff1f 	bl	800429c <LL_ADC_INJ_IsConversionOngoing>
 800445e:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004460:	693b      	ldr	r3, [r7, #16]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d13d      	bne.n	80044e2 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d13a      	bne.n	80044e2 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004470:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004478:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800447a:	4313      	orrs	r3, r2
 800447c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	68db      	ldr	r3, [r3, #12]
 8004484:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004488:	f023 0302 	bic.w	r3, r3, #2
 800448c:	687a      	ldr	r2, [r7, #4]
 800448e:	6812      	ldr	r2, [r2, #0]
 8004490:	69b9      	ldr	r1, [r7, #24]
 8004492:	430b      	orrs	r3, r1
 8004494:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800449c:	2b01      	cmp	r3, #1
 800449e:	d118      	bne.n	80044d2 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044aa:	f023 0304 	bic.w	r3, r3, #4
 80044ae:	687a      	ldr	r2, [r7, #4]
 80044b0:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80044b2:	687a      	ldr	r2, [r7, #4]
 80044b4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044b6:	4311      	orrs	r1, r2
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044bc:	4311      	orrs	r1, r2
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044c2:	430a      	orrs	r2, r1
 80044c4:	431a      	orrs	r2, r3
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f042 0201 	orr.w	r2, r2, #1
 80044ce:	611a      	str	r2, [r3, #16]
 80044d0:	e007      	b.n	80044e2 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	691a      	ldr	r2, [r3, #16]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b01      	cmp	r3, #1
 80044e8:	d10c      	bne.n	8004504 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044f0:	f023 010f 	bic.w	r1, r3, #15
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	69db      	ldr	r3, [r3, #28]
 80044f8:	1e5a      	subs	r2, r3, #1
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	631a      	str	r2, [r3, #48]	; 0x30
 8004502:	e007      	b.n	8004514 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	f022 020f 	bic.w	r2, r2, #15
 8004512:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004518:	f023 0303 	bic.w	r3, r3, #3
 800451c:	f043 0201 	orr.w	r2, r3, #1
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	655a      	str	r2, [r3, #84]	; 0x54
 8004524:	e007      	b.n	8004536 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800452a:	f043 0210 	orr.w	r2, r3, #16
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004532:	2301      	movs	r3, #1
 8004534:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004536:	7ffb      	ldrb	r3, [r7, #31]
}
 8004538:	4618      	mov	r0, r3
 800453a:	3720      	adds	r7, #32
 800453c:	46bd      	mov	sp, r7
 800453e:	bd80      	pop	{r7, pc}
 8004540:	20000034 	.word	0x20000034
 8004544:	053e2d63 	.word	0x053e2d63
 8004548:	50040000 	.word	0x50040000
 800454c:	50040300 	.word	0x50040300
 8004550:	fff0c007 	.word	0xfff0c007

08004554 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004554:	b580      	push	{r7, lr}
 8004556:	b0b6      	sub	sp, #216	; 0xd8
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800455e:	2300      	movs	r3, #0
 8004560:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004564:	2300      	movs	r3, #0
 8004566:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800456e:	2b01      	cmp	r3, #1
 8004570:	d101      	bne.n	8004576 <HAL_ADC_ConfigChannel+0x22>
 8004572:	2302      	movs	r3, #2
 8004574:	e3b9      	b.n	8004cea <HAL_ADC_ConfigChannel+0x796>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	2201      	movs	r2, #1
 800457a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff fe77 	bl	8004276 <LL_ADC_REG_IsConversionOngoing>
 8004588:	4603      	mov	r3, r0
 800458a:	2b00      	cmp	r3, #0
 800458c:	f040 839e 	bne.w	8004ccc <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	2b05      	cmp	r3, #5
 8004596:	d824      	bhi.n	80045e2 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	685b      	ldr	r3, [r3, #4]
 800459c:	3b02      	subs	r3, #2
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d81b      	bhi.n	80045da <HAL_ADC_ConfigChannel+0x86>
 80045a2:	a201      	add	r2, pc, #4	; (adr r2, 80045a8 <HAL_ADC_ConfigChannel+0x54>)
 80045a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045a8:	080045b9 	.word	0x080045b9
 80045ac:	080045c1 	.word	0x080045c1
 80045b0:	080045c9 	.word	0x080045c9
 80045b4:	080045d1 	.word	0x080045d1
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	220c      	movs	r2, #12
 80045bc:	605a      	str	r2, [r3, #4]
          break;
 80045be:	e011      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	2212      	movs	r2, #18
 80045c4:	605a      	str	r2, [r3, #4]
          break;
 80045c6:	e00d      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	2218      	movs	r2, #24
 80045cc:	605a      	str	r2, [r3, #4]
          break;
 80045ce:	e009      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045d6:	605a      	str	r2, [r3, #4]
          break;
 80045d8:	e004      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	2206      	movs	r2, #6
 80045de:	605a      	str	r2, [r3, #4]
          break;
 80045e0:	e000      	b.n	80045e4 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80045e2:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	6818      	ldr	r0, [r3, #0]
 80045e8:	683b      	ldr	r3, [r7, #0]
 80045ea:	6859      	ldr	r1, [r3, #4]
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	461a      	mov	r2, r3
 80045f2:	f7ff fd64 	bl	80040be <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fe3b 	bl	8004276 <LL_ADC_REG_IsConversionOngoing>
 8004600:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4618      	mov	r0, r3
 800460a:	f7ff fe47 	bl	800429c <LL_ADC_INJ_IsConversionOngoing>
 800460e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004612:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004616:	2b00      	cmp	r3, #0
 8004618:	f040 81a6 	bne.w	8004968 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800461c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004620:	2b00      	cmp	r3, #0
 8004622:	f040 81a1 	bne.w	8004968 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	6819      	ldr	r1, [r3, #0]
 800462e:	683b      	ldr	r3, [r7, #0]
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	461a      	mov	r2, r3
 8004634:	f7ff fd6f 	bl	8004116 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	695a      	ldr	r2, [r3, #20]
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68db      	ldr	r3, [r3, #12]
 8004642:	08db      	lsrs	r3, r3, #3
 8004644:	f003 0303 	and.w	r3, r3, #3
 8004648:	005b      	lsls	r3, r3, #1
 800464a:	fa02 f303 	lsl.w	r3, r2, r3
 800464e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	691b      	ldr	r3, [r3, #16]
 8004656:	2b04      	cmp	r3, #4
 8004658:	d00a      	beq.n	8004670 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6818      	ldr	r0, [r3, #0]
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	6919      	ldr	r1, [r3, #16]
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	681a      	ldr	r2, [r3, #0]
 8004666:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800466a:	f7ff fcd3 	bl	8004014 <LL_ADC_SetOffset>
 800466e:	e17b      	b.n	8004968 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	2100      	movs	r1, #0
 8004676:	4618      	mov	r0, r3
 8004678:	f7ff fcf0 	bl	800405c <LL_ADC_GetOffsetChannel>
 800467c:	4603      	mov	r3, r0
 800467e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004682:	2b00      	cmp	r3, #0
 8004684:	d10a      	bne.n	800469c <HAL_ADC_ConfigChannel+0x148>
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	2100      	movs	r1, #0
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fce5 	bl	800405c <LL_ADC_GetOffsetChannel>
 8004692:	4603      	mov	r3, r0
 8004694:	0e9b      	lsrs	r3, r3, #26
 8004696:	f003 021f 	and.w	r2, r3, #31
 800469a:	e01e      	b.n	80046da <HAL_ADC_ConfigChannel+0x186>
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	2100      	movs	r1, #0
 80046a2:	4618      	mov	r0, r3
 80046a4:	f7ff fcda 	bl	800405c <LL_ADC_GetOffsetChannel>
 80046a8:	4603      	mov	r3, r0
 80046aa:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ae:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80046b2:	fa93 f3a3 	rbit	r3, r3
 80046b6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046ba:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046c2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80046ca:	2320      	movs	r3, #32
 80046cc:	e004      	b.n	80046d8 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80046ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046d2:	fab3 f383 	clz	r3, r3
 80046d6:	b2db      	uxtb	r3, r3
 80046d8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046da:	683b      	ldr	r3, [r7, #0]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d105      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x19e>
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	0e9b      	lsrs	r3, r3, #26
 80046ec:	f003 031f 	and.w	r3, r3, #31
 80046f0:	e018      	b.n	8004724 <HAL_ADC_ConfigChannel+0x1d0>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046fa:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80046fe:	fa93 f3a3 	rbit	r3, r3
 8004702:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004706:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800470a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800470e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004712:	2b00      	cmp	r3, #0
 8004714:	d101      	bne.n	800471a <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004716:	2320      	movs	r3, #32
 8004718:	e004      	b.n	8004724 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 800471a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800471e:	fab3 f383 	clz	r3, r3
 8004722:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004724:	429a      	cmp	r2, r3
 8004726:	d106      	bne.n	8004736 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	2200      	movs	r2, #0
 800472e:	2100      	movs	r1, #0
 8004730:	4618      	mov	r0, r3
 8004732:	f7ff fca9 	bl	8004088 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	2101      	movs	r1, #1
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fc8d 	bl	800405c <LL_ADC_GetOffsetChannel>
 8004742:	4603      	mov	r3, r0
 8004744:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004748:	2b00      	cmp	r3, #0
 800474a:	d10a      	bne.n	8004762 <HAL_ADC_ConfigChannel+0x20e>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	2101      	movs	r1, #1
 8004752:	4618      	mov	r0, r3
 8004754:	f7ff fc82 	bl	800405c <LL_ADC_GetOffsetChannel>
 8004758:	4603      	mov	r3, r0
 800475a:	0e9b      	lsrs	r3, r3, #26
 800475c:	f003 021f 	and.w	r2, r3, #31
 8004760:	e01e      	b.n	80047a0 <HAL_ADC_ConfigChannel+0x24c>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2101      	movs	r1, #1
 8004768:	4618      	mov	r0, r3
 800476a:	f7ff fc77 	bl	800405c <LL_ADC_GetOffsetChannel>
 800476e:	4603      	mov	r3, r0
 8004770:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004774:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004778:	fa93 f3a3 	rbit	r3, r3
 800477c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004780:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004784:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004788:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 800478c:	2b00      	cmp	r3, #0
 800478e:	d101      	bne.n	8004794 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004790:	2320      	movs	r3, #32
 8004792:	e004      	b.n	800479e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8004794:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004798:	fab3 f383 	clz	r3, r3
 800479c:	b2db      	uxtb	r3, r3
 800479e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d105      	bne.n	80047b8 <HAL_ADC_ConfigChannel+0x264>
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	0e9b      	lsrs	r3, r3, #26
 80047b2:	f003 031f 	and.w	r3, r3, #31
 80047b6:	e018      	b.n	80047ea <HAL_ADC_ConfigChannel+0x296>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047c4:	fa93 f3a3 	rbit	r3, r3
 80047c8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80047cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80047d0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80047d4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d101      	bne.n	80047e0 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80047dc:	2320      	movs	r3, #32
 80047de:	e004      	b.n	80047ea <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80047e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047e4:	fab3 f383 	clz	r3, r3
 80047e8:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047ea:	429a      	cmp	r2, r3
 80047ec:	d106      	bne.n	80047fc <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	2200      	movs	r2, #0
 80047f4:	2101      	movs	r1, #1
 80047f6:	4618      	mov	r0, r3
 80047f8:	f7ff fc46 	bl	8004088 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	2102      	movs	r1, #2
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fc2a 	bl	800405c <LL_ADC_GetOffsetChannel>
 8004808:	4603      	mov	r3, r0
 800480a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800480e:	2b00      	cmp	r3, #0
 8004810:	d10a      	bne.n	8004828 <HAL_ADC_ConfigChannel+0x2d4>
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2102      	movs	r1, #2
 8004818:	4618      	mov	r0, r3
 800481a:	f7ff fc1f 	bl	800405c <LL_ADC_GetOffsetChannel>
 800481e:	4603      	mov	r3, r0
 8004820:	0e9b      	lsrs	r3, r3, #26
 8004822:	f003 021f 	and.w	r2, r3, #31
 8004826:	e01e      	b.n	8004866 <HAL_ADC_ConfigChannel+0x312>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2102      	movs	r1, #2
 800482e:	4618      	mov	r0, r3
 8004830:	f7ff fc14 	bl	800405c <LL_ADC_GetOffsetChannel>
 8004834:	4603      	mov	r3, r0
 8004836:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800483a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800483e:	fa93 f3a3 	rbit	r3, r3
 8004842:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004846:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800484a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800484e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004852:	2b00      	cmp	r3, #0
 8004854:	d101      	bne.n	800485a <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004856:	2320      	movs	r3, #32
 8004858:	e004      	b.n	8004864 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 800485a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800485e:	fab3 f383 	clz	r3, r3
 8004862:	b2db      	uxtb	r3, r3
 8004864:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800486e:	2b00      	cmp	r3, #0
 8004870:	d105      	bne.n	800487e <HAL_ADC_ConfigChannel+0x32a>
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	0e9b      	lsrs	r3, r3, #26
 8004878:	f003 031f 	and.w	r3, r3, #31
 800487c:	e016      	b.n	80048ac <HAL_ADC_ConfigChannel+0x358>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004886:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800488a:	fa93 f3a3 	rbit	r3, r3
 800488e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004890:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8004892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8004896:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 800489e:	2320      	movs	r3, #32
 80048a0:	e004      	b.n	80048ac <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80048a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048a6:	fab3 f383 	clz	r3, r3
 80048aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048ac:	429a      	cmp	r2, r3
 80048ae:	d106      	bne.n	80048be <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	2200      	movs	r2, #0
 80048b6:	2102      	movs	r1, #2
 80048b8:	4618      	mov	r0, r3
 80048ba:	f7ff fbe5 	bl	8004088 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	2103      	movs	r1, #3
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff fbc9 	bl	800405c <LL_ADC_GetOffsetChannel>
 80048ca:	4603      	mov	r3, r0
 80048cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d10a      	bne.n	80048ea <HAL_ADC_ConfigChannel+0x396>
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	2103      	movs	r1, #3
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff fbbe 	bl	800405c <LL_ADC_GetOffsetChannel>
 80048e0:	4603      	mov	r3, r0
 80048e2:	0e9b      	lsrs	r3, r3, #26
 80048e4:	f003 021f 	and.w	r2, r3, #31
 80048e8:	e017      	b.n	800491a <HAL_ADC_ConfigChannel+0x3c6>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2103      	movs	r1, #3
 80048f0:	4618      	mov	r0, r3
 80048f2:	f7ff fbb3 	bl	800405c <LL_ADC_GetOffsetChannel>
 80048f6:	4603      	mov	r3, r0
 80048f8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80048fc:	fa93 f3a3 	rbit	r3, r3
 8004900:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8004902:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004904:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004906:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004908:	2b00      	cmp	r3, #0
 800490a:	d101      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 800490c:	2320      	movs	r3, #32
 800490e:	e003      	b.n	8004918 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004910:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004912:	fab3 f383 	clz	r3, r3
 8004916:	b2db      	uxtb	r3, r3
 8004918:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800491a:	683b      	ldr	r3, [r7, #0]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004922:	2b00      	cmp	r3, #0
 8004924:	d105      	bne.n	8004932 <HAL_ADC_ConfigChannel+0x3de>
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	0e9b      	lsrs	r3, r3, #26
 800492c:	f003 031f 	and.w	r3, r3, #31
 8004930:	e011      	b.n	8004956 <HAL_ADC_ConfigChannel+0x402>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004938:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800493a:	fa93 f3a3 	rbit	r3, r3
 800493e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004940:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004942:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004946:	2b00      	cmp	r3, #0
 8004948:	d101      	bne.n	800494e <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 800494a:	2320      	movs	r3, #32
 800494c:	e003      	b.n	8004956 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800494e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004950:	fab3 f383 	clz	r3, r3
 8004954:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004956:	429a      	cmp	r2, r3
 8004958:	d106      	bne.n	8004968 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	2200      	movs	r2, #0
 8004960:	2103      	movs	r1, #3
 8004962:	4618      	mov	r0, r3
 8004964:	f7ff fb90 	bl	8004088 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	4618      	mov	r0, r3
 800496e:	f7ff fc6f 	bl	8004250 <LL_ADC_IsEnabled>
 8004972:	4603      	mov	r3, r0
 8004974:	2b00      	cmp	r3, #0
 8004976:	f040 813f 	bne.w	8004bf8 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6818      	ldr	r0, [r3, #0]
 800497e:	683b      	ldr	r3, [r7, #0]
 8004980:	6819      	ldr	r1, [r3, #0]
 8004982:	683b      	ldr	r3, [r7, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	461a      	mov	r2, r3
 8004988:	f7ff fbf0 	bl	800416c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	68db      	ldr	r3, [r3, #12]
 8004990:	4a8e      	ldr	r2, [pc, #568]	; (8004bcc <HAL_ADC_ConfigChannel+0x678>)
 8004992:	4293      	cmp	r3, r2
 8004994:	f040 8130 	bne.w	8004bf8 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d10b      	bne.n	80049c0 <HAL_ADC_ConfigChannel+0x46c>
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	0e9b      	lsrs	r3, r3, #26
 80049ae:	3301      	adds	r3, #1
 80049b0:	f003 031f 	and.w	r3, r3, #31
 80049b4:	2b09      	cmp	r3, #9
 80049b6:	bf94      	ite	ls
 80049b8:	2301      	movls	r3, #1
 80049ba:	2300      	movhi	r3, #0
 80049bc:	b2db      	uxtb	r3, r3
 80049be:	e019      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x4a0>
 80049c0:	683b      	ldr	r3, [r7, #0]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049c6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049c8:	fa93 f3a3 	rbit	r3, r3
 80049cc:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80049ce:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049d0:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80049d2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d101      	bne.n	80049dc <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80049d8:	2320      	movs	r3, #32
 80049da:	e003      	b.n	80049e4 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80049dc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049de:	fab3 f383 	clz	r3, r3
 80049e2:	b2db      	uxtb	r3, r3
 80049e4:	3301      	adds	r3, #1
 80049e6:	f003 031f 	and.w	r3, r3, #31
 80049ea:	2b09      	cmp	r3, #9
 80049ec:	bf94      	ite	ls
 80049ee:	2301      	movls	r3, #1
 80049f0:	2300      	movhi	r3, #0
 80049f2:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d079      	beq.n	8004aec <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049f8:	683b      	ldr	r3, [r7, #0]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d107      	bne.n	8004a14 <HAL_ADC_ConfigChannel+0x4c0>
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	0e9b      	lsrs	r3, r3, #26
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	069b      	lsls	r3, r3, #26
 8004a0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a12:	e015      	b.n	8004a40 <HAL_ADC_ConfigChannel+0x4ec>
 8004a14:	683b      	ldr	r3, [r7, #0]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a1a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a1c:	fa93 f3a3 	rbit	r3, r3
 8004a20:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a22:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a24:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004a26:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d101      	bne.n	8004a30 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004a2c:	2320      	movs	r3, #32
 8004a2e:	e003      	b.n	8004a38 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004a30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a32:	fab3 f383 	clz	r3, r3
 8004a36:	b2db      	uxtb	r3, r3
 8004a38:	3301      	adds	r3, #1
 8004a3a:	069b      	lsls	r3, r3, #26
 8004a3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a40:	683b      	ldr	r3, [r7, #0]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d109      	bne.n	8004a60 <HAL_ADC_ConfigChannel+0x50c>
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	0e9b      	lsrs	r3, r3, #26
 8004a52:	3301      	adds	r3, #1
 8004a54:	f003 031f 	and.w	r3, r3, #31
 8004a58:	2101      	movs	r1, #1
 8004a5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004a5e:	e017      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x53c>
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a66:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a68:	fa93 f3a3 	rbit	r3, r3
 8004a6c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004a6e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a70:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004a72:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d101      	bne.n	8004a7c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004a78:	2320      	movs	r3, #32
 8004a7a:	e003      	b.n	8004a84 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004a7c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a7e:	fab3 f383 	clz	r3, r3
 8004a82:	b2db      	uxtb	r3, r3
 8004a84:	3301      	adds	r3, #1
 8004a86:	f003 031f 	and.w	r3, r3, #31
 8004a8a:	2101      	movs	r1, #1
 8004a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004a90:	ea42 0103 	orr.w	r1, r2, r3
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d10a      	bne.n	8004ab6 <HAL_ADC_ConfigChannel+0x562>
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	0e9b      	lsrs	r3, r3, #26
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	f003 021f 	and.w	r2, r3, #31
 8004aac:	4613      	mov	r3, r2
 8004aae:	005b      	lsls	r3, r3, #1
 8004ab0:	4413      	add	r3, r2
 8004ab2:	051b      	lsls	r3, r3, #20
 8004ab4:	e018      	b.n	8004ae8 <HAL_ADC_ConfigChannel+0x594>
 8004ab6:	683b      	ldr	r3, [r7, #0]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004abe:	fa93 f3a3 	rbit	r3, r3
 8004ac2:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004ac8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d101      	bne.n	8004ad2 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004ace:	2320      	movs	r3, #32
 8004ad0:	e003      	b.n	8004ada <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004ad2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad4:	fab3 f383 	clz	r3, r3
 8004ad8:	b2db      	uxtb	r3, r3
 8004ada:	3301      	adds	r3, #1
 8004adc:	f003 021f 	and.w	r2, r3, #31
 8004ae0:	4613      	mov	r3, r2
 8004ae2:	005b      	lsls	r3, r3, #1
 8004ae4:	4413      	add	r3, r2
 8004ae6:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004ae8:	430b      	orrs	r3, r1
 8004aea:	e080      	b.n	8004bee <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004aec:	683b      	ldr	r3, [r7, #0]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d107      	bne.n	8004b08 <HAL_ADC_ConfigChannel+0x5b4>
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	0e9b      	lsrs	r3, r3, #26
 8004afe:	3301      	adds	r3, #1
 8004b00:	069b      	lsls	r3, r3, #26
 8004b02:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b06:	e015      	b.n	8004b34 <HAL_ADC_ConfigChannel+0x5e0>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b10:	fa93 f3a3 	rbit	r3, r3
 8004b14:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004b16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b18:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004b1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d101      	bne.n	8004b24 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004b20:	2320      	movs	r3, #32
 8004b22:	e003      	b.n	8004b2c <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b26:	fab3 f383 	clz	r3, r3
 8004b2a:	b2db      	uxtb	r3, r3
 8004b2c:	3301      	adds	r3, #1
 8004b2e:	069b      	lsls	r3, r3, #26
 8004b30:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b34:	683b      	ldr	r3, [r7, #0]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d109      	bne.n	8004b54 <HAL_ADC_ConfigChannel+0x600>
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	0e9b      	lsrs	r3, r3, #26
 8004b46:	3301      	adds	r3, #1
 8004b48:	f003 031f 	and.w	r3, r3, #31
 8004b4c:	2101      	movs	r1, #1
 8004b4e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b52:	e017      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x630>
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b5a:	6a3b      	ldr	r3, [r7, #32]
 8004b5c:	fa93 f3a3 	rbit	r3, r3
 8004b60:	61fb      	str	r3, [r7, #28]
  return result;
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004b6c:	2320      	movs	r3, #32
 8004b6e:	e003      	b.n	8004b78 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b72:	fab3 f383 	clz	r3, r3
 8004b76:	b2db      	uxtb	r3, r3
 8004b78:	3301      	adds	r3, #1
 8004b7a:	f003 031f 	and.w	r3, r3, #31
 8004b7e:	2101      	movs	r1, #1
 8004b80:	fa01 f303 	lsl.w	r3, r1, r3
 8004b84:	ea42 0103 	orr.w	r1, r2, r3
 8004b88:	683b      	ldr	r3, [r7, #0]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d10d      	bne.n	8004bb0 <HAL_ADC_ConfigChannel+0x65c>
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	0e9b      	lsrs	r3, r3, #26
 8004b9a:	3301      	adds	r3, #1
 8004b9c:	f003 021f 	and.w	r2, r3, #31
 8004ba0:	4613      	mov	r3, r2
 8004ba2:	005b      	lsls	r3, r3, #1
 8004ba4:	4413      	add	r3, r2
 8004ba6:	3b1e      	subs	r3, #30
 8004ba8:	051b      	lsls	r3, r3, #20
 8004baa:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bae:	e01d      	b.n	8004bec <HAL_ADC_ConfigChannel+0x698>
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bb6:	697b      	ldr	r3, [r7, #20]
 8004bb8:	fa93 f3a3 	rbit	r3, r3
 8004bbc:	613b      	str	r3, [r7, #16]
  return result;
 8004bbe:	693b      	ldr	r3, [r7, #16]
 8004bc0:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004bc2:	69bb      	ldr	r3, [r7, #24]
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d103      	bne.n	8004bd0 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004bc8:	2320      	movs	r3, #32
 8004bca:	e005      	b.n	8004bd8 <HAL_ADC_ConfigChannel+0x684>
 8004bcc:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	fab3 f383 	clz	r3, r3
 8004bd6:	b2db      	uxtb	r3, r3
 8004bd8:	3301      	adds	r3, #1
 8004bda:	f003 021f 	and.w	r2, r3, #31
 8004bde:	4613      	mov	r3, r2
 8004be0:	005b      	lsls	r3, r3, #1
 8004be2:	4413      	add	r3, r2
 8004be4:	3b1e      	subs	r3, #30
 8004be6:	051b      	lsls	r3, r3, #20
 8004be8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bec:	430b      	orrs	r3, r1
 8004bee:	683a      	ldr	r2, [r7, #0]
 8004bf0:	6892      	ldr	r2, [r2, #8]
 8004bf2:	4619      	mov	r1, r3
 8004bf4:	f7ff fa8f 	bl	8004116 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681a      	ldr	r2, [r3, #0]
 8004bfc:	4b3d      	ldr	r3, [pc, #244]	; (8004cf4 <HAL_ADC_ConfigChannel+0x7a0>)
 8004bfe:	4013      	ands	r3, r2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d06c      	beq.n	8004cde <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c04:	483c      	ldr	r0, [pc, #240]	; (8004cf8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c06:	f7ff f9f7 	bl	8003ff8 <LL_ADC_GetCommonPathInternalCh>
 8004c0a:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c0e:	683b      	ldr	r3, [r7, #0]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	4a3a      	ldr	r2, [pc, #232]	; (8004cfc <HAL_ADC_ConfigChannel+0x7a8>)
 8004c14:	4293      	cmp	r3, r2
 8004c16:	d127      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c18:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c1c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c20:	2b00      	cmp	r3, #0
 8004c22:	d121      	bne.n	8004c68 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4a35      	ldr	r2, [pc, #212]	; (8004d00 <HAL_ADC_ConfigChannel+0x7ac>)
 8004c2a:	4293      	cmp	r3, r2
 8004c2c:	d157      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c2e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c32:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c36:	4619      	mov	r1, r3
 8004c38:	482f      	ldr	r0, [pc, #188]	; (8004cf8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c3a:	f7ff f9ca 	bl	8003fd2 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c3e:	4b31      	ldr	r3, [pc, #196]	; (8004d04 <HAL_ADC_ConfigChannel+0x7b0>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	099b      	lsrs	r3, r3, #6
 8004c44:	4a30      	ldr	r2, [pc, #192]	; (8004d08 <HAL_ADC_ConfigChannel+0x7b4>)
 8004c46:	fba2 2303 	umull	r2, r3, r2, r3
 8004c4a:	099b      	lsrs	r3, r3, #6
 8004c4c:	1c5a      	adds	r2, r3, #1
 8004c4e:	4613      	mov	r3, r2
 8004c50:	005b      	lsls	r3, r3, #1
 8004c52:	4413      	add	r3, r2
 8004c54:	009b      	lsls	r3, r3, #2
 8004c56:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c58:	e002      	b.n	8004c60 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	3b01      	subs	r3, #1
 8004c5e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d1f9      	bne.n	8004c5a <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c66:	e03a      	b.n	8004cde <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c68:	683b      	ldr	r3, [r7, #0]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	4a27      	ldr	r2, [pc, #156]	; (8004d0c <HAL_ADC_ConfigChannel+0x7b8>)
 8004c6e:	4293      	cmp	r3, r2
 8004c70:	d113      	bne.n	8004c9a <HAL_ADC_ConfigChannel+0x746>
 8004c72:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d10d      	bne.n	8004c9a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4a1f      	ldr	r2, [pc, #124]	; (8004d00 <HAL_ADC_ConfigChannel+0x7ac>)
 8004c84:	4293      	cmp	r3, r2
 8004c86:	d12a      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c88:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c8c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c90:	4619      	mov	r1, r3
 8004c92:	4819      	ldr	r0, [pc, #100]	; (8004cf8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c94:	f7ff f99d 	bl	8003fd2 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c98:	e021      	b.n	8004cde <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4a1c      	ldr	r2, [pc, #112]	; (8004d10 <HAL_ADC_ConfigChannel+0x7bc>)
 8004ca0:	4293      	cmp	r3, r2
 8004ca2:	d11c      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004ca4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ca8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d116      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a12      	ldr	r2, [pc, #72]	; (8004d00 <HAL_ADC_ConfigChannel+0x7ac>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d111      	bne.n	8004cde <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cbe:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cc2:	4619      	mov	r1, r3
 8004cc4:	480c      	ldr	r0, [pc, #48]	; (8004cf8 <HAL_ADC_ConfigChannel+0x7a4>)
 8004cc6:	f7ff f984 	bl	8003fd2 <LL_ADC_SetCommonPathInternalCh>
 8004cca:	e008      	b.n	8004cde <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cd0:	f043 0220 	orr.w	r2, r3, #32
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004cd8:	2301      	movs	r3, #1
 8004cda:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	2200      	movs	r2, #0
 8004ce2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004ce6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	37d8      	adds	r7, #216	; 0xd8
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}
 8004cf2:	bf00      	nop
 8004cf4:	80080000 	.word	0x80080000
 8004cf8:	50040300 	.word	0x50040300
 8004cfc:	c7520000 	.word	0xc7520000
 8004d00:	50040000 	.word	0x50040000
 8004d04:	20000034 	.word	0x20000034
 8004d08:	053e2d63 	.word	0x053e2d63
 8004d0c:	cb840000 	.word	0xcb840000
 8004d10:	80000001 	.word	0x80000001

08004d14 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b084      	sub	sp, #16
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d101      	bne.n	8004d26 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	e0ed      	b.n	8004f02 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d2c:	b2db      	uxtb	r3, r3
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d102      	bne.n	8004d38 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d32:	6878      	ldr	r0, [r7, #4]
 8004d34:	f7fe fe08 	bl	8003948 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	681a      	ldr	r2, [r3, #0]
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	f042 0201 	orr.w	r2, r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d48:	f7ff f8f4 	bl	8003f34 <HAL_GetTick>
 8004d4c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d4e:	e012      	b.n	8004d76 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d50:	f7ff f8f0 	bl	8003f34 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b0a      	cmp	r3, #10
 8004d5c:	d90b      	bls.n	8004d76 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d62:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d66:	687b      	ldr	r3, [r7, #4]
 8004d68:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2205      	movs	r2, #5
 8004d6e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	e0c5      	b.n	8004f02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	f003 0301 	and.w	r3, r3, #1
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d0e5      	beq.n	8004d50 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	681a      	ldr	r2, [r3, #0]
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	f022 0202 	bic.w	r2, r2, #2
 8004d92:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d94:	f7ff f8ce 	bl	8003f34 <HAL_GetTick>
 8004d98:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004d9a:	e012      	b.n	8004dc2 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d9c:	f7ff f8ca 	bl	8003f34 <HAL_GetTick>
 8004da0:	4602      	mov	r2, r0
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	1ad3      	subs	r3, r2, r3
 8004da6:	2b0a      	cmp	r3, #10
 8004da8:	d90b      	bls.n	8004dc2 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dae:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	2205      	movs	r2, #5
 8004dba:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	e09f      	b.n	8004f02 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	f003 0302 	and.w	r3, r3, #2
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d1e5      	bne.n	8004d9c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	7e1b      	ldrb	r3, [r3, #24]
 8004dd4:	2b01      	cmp	r3, #1
 8004dd6:	d108      	bne.n	8004dea <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e007      	b.n	8004dfa <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	681a      	ldr	r2, [r3, #0]
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004df8:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	7e5b      	ldrb	r3, [r3, #25]
 8004dfe:	2b01      	cmp	r3, #1
 8004e00:	d108      	bne.n	8004e14 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e10:	601a      	str	r2, [r3, #0]
 8004e12:	e007      	b.n	8004e24 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	681a      	ldr	r2, [r3, #0]
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e22:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	7e9b      	ldrb	r3, [r3, #26]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d108      	bne.n	8004e3e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f042 0220 	orr.w	r2, r2, #32
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	e007      	b.n	8004e4e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f022 0220 	bic.w	r2, r2, #32
 8004e4c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	7edb      	ldrb	r3, [r3, #27]
 8004e52:	2b01      	cmp	r3, #1
 8004e54:	d108      	bne.n	8004e68 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	681a      	ldr	r2, [r3, #0]
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f022 0210 	bic.w	r2, r2, #16
 8004e64:	601a      	str	r2, [r3, #0]
 8004e66:	e007      	b.n	8004e78 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	681a      	ldr	r2, [r3, #0]
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f042 0210 	orr.w	r2, r2, #16
 8004e76:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	7f1b      	ldrb	r3, [r3, #28]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d108      	bne.n	8004e92 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	681a      	ldr	r2, [r3, #0]
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	f042 0208 	orr.w	r2, r2, #8
 8004e8e:	601a      	str	r2, [r3, #0]
 8004e90:	e007      	b.n	8004ea2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	681a      	ldr	r2, [r3, #0]
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f022 0208 	bic.w	r2, r2, #8
 8004ea0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	7f5b      	ldrb	r3, [r3, #29]
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d108      	bne.n	8004ebc <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681a      	ldr	r2, [r3, #0]
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f042 0204 	orr.w	r2, r2, #4
 8004eb8:	601a      	str	r2, [r3, #0]
 8004eba:	e007      	b.n	8004ecc <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	681a      	ldr	r2, [r3, #0]
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f022 0204 	bic.w	r2, r2, #4
 8004eca:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	689a      	ldr	r2, [r3, #8]
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	68db      	ldr	r3, [r3, #12]
 8004ed4:	431a      	orrs	r2, r3
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	691b      	ldr	r3, [r3, #16]
 8004eda:	431a      	orrs	r2, r3
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	ea42 0103 	orr.w	r1, r2, r3
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	1e5a      	subs	r2, r3, #1
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	430a      	orrs	r2, r1
 8004ef0:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2201      	movs	r2, #1
 8004efc:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004f00:	2300      	movs	r3, #0
}
 8004f02:	4618      	mov	r0, r3
 8004f04:	3710      	adds	r7, #16
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}

08004f0a <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8004f0a:	b480      	push	{r7}
 8004f0c:	b087      	sub	sp, #28
 8004f0e:	af00      	add	r7, sp, #0
 8004f10:	60f8      	str	r0, [r7, #12]
 8004f12:	60b9      	str	r1, [r7, #8]
 8004f14:	607a      	str	r2, [r7, #4]
 8004f16:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f1e:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8004f20:	7dfb      	ldrb	r3, [r7, #23]
 8004f22:	2b01      	cmp	r3, #1
 8004f24:	d003      	beq.n	8004f2e <HAL_CAN_GetRxMessage+0x24>
 8004f26:	7dfb      	ldrb	r3, [r7, #23]
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	f040 80f3 	bne.w	8005114 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8004f2e:	68bb      	ldr	r3, [r7, #8]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d10e      	bne.n	8004f52 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68db      	ldr	r3, [r3, #12]
 8004f3a:	f003 0303 	and.w	r3, r3, #3
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d116      	bne.n	8004f70 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f46:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f4e:	2301      	movs	r3, #1
 8004f50:	e0e7      	b.n	8005122 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d107      	bne.n	8004f70 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8004f6c:	2301      	movs	r3, #1
 8004f6e:	e0d8      	b.n	8005122 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681a      	ldr	r2, [r3, #0]
 8004f74:	68bb      	ldr	r3, [r7, #8]
 8004f76:	331b      	adds	r3, #27
 8004f78:	011b      	lsls	r3, r3, #4
 8004f7a:	4413      	add	r3, r2
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f003 0204 	and.w	r2, r3, #4
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d10c      	bne.n	8004fa8 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	681a      	ldr	r2, [r3, #0]
 8004f92:	68bb      	ldr	r3, [r7, #8]
 8004f94:	331b      	adds	r3, #27
 8004f96:	011b      	lsls	r3, r3, #4
 8004f98:	4413      	add	r3, r2
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	0d5b      	lsrs	r3, r3, #21
 8004f9e:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	601a      	str	r2, [r3, #0]
 8004fa6:	e00b      	b.n	8004fc0 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681a      	ldr	r2, [r3, #0]
 8004fac:	68bb      	ldr	r3, [r7, #8]
 8004fae:	331b      	adds	r3, #27
 8004fb0:	011b      	lsls	r3, r3, #4
 8004fb2:	4413      	add	r3, r2
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	08db      	lsrs	r3, r3, #3
 8004fb8:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	331b      	adds	r3, #27
 8004fc8:	011b      	lsls	r3, r3, #4
 8004fca:	4413      	add	r3, r2
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0202 	and.w	r2, r3, #2
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	681a      	ldr	r2, [r3, #0]
 8004fda:	68bb      	ldr	r3, [r7, #8]
 8004fdc:	331b      	adds	r3, #27
 8004fde:	011b      	lsls	r3, r3, #4
 8004fe0:	4413      	add	r3, r2
 8004fe2:	3304      	adds	r3, #4
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 020f 	and.w	r2, r3, #15
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8004fee:	68fb      	ldr	r3, [r7, #12]
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	331b      	adds	r3, #27
 8004ff6:	011b      	lsls	r3, r3, #4
 8004ff8:	4413      	add	r3, r2
 8004ffa:	3304      	adds	r3, #4
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	0a1b      	lsrs	r3, r3, #8
 8005000:	b2da      	uxtb	r2, r3
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	331b      	adds	r3, #27
 800500e:	011b      	lsls	r3, r3, #4
 8005010:	4413      	add	r3, r2
 8005012:	3304      	adds	r3, #4
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	0c1b      	lsrs	r3, r3, #16
 8005018:	b29a      	uxth	r2, r3
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681a      	ldr	r2, [r3, #0]
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	011b      	lsls	r3, r3, #4
 8005026:	4413      	add	r3, r2
 8005028:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	b2da      	uxtb	r2, r3
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	011b      	lsls	r3, r3, #4
 800503c:	4413      	add	r3, r2
 800503e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	0a1a      	lsrs	r2, r3, #8
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	3301      	adds	r3, #1
 800504a:	b2d2      	uxtb	r2, r2
 800504c:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	68bb      	ldr	r3, [r7, #8]
 8005054:	011b      	lsls	r3, r3, #4
 8005056:	4413      	add	r3, r2
 8005058:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	0c1a      	lsrs	r2, r3, #16
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	3302      	adds	r3, #2
 8005064:	b2d2      	uxtb	r2, r2
 8005066:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681a      	ldr	r2, [r3, #0]
 800506c:	68bb      	ldr	r3, [r7, #8]
 800506e:	011b      	lsls	r3, r3, #4
 8005070:	4413      	add	r3, r2
 8005072:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	0e1a      	lsrs	r2, r3, #24
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	3303      	adds	r3, #3
 800507e:	b2d2      	uxtb	r2, r2
 8005080:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681a      	ldr	r2, [r3, #0]
 8005086:	68bb      	ldr	r3, [r7, #8]
 8005088:	011b      	lsls	r3, r3, #4
 800508a:	4413      	add	r3, r2
 800508c:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8005090:	681a      	ldr	r2, [r3, #0]
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	3304      	adds	r3, #4
 8005096:	b2d2      	uxtb	r2, r2
 8005098:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	681a      	ldr	r2, [r3, #0]
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	011b      	lsls	r3, r3, #4
 80050a2:	4413      	add	r3, r2
 80050a4:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	0a1a      	lsrs	r2, r3, #8
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	3305      	adds	r3, #5
 80050b0:	b2d2      	uxtb	r2, r2
 80050b2:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681a      	ldr	r2, [r3, #0]
 80050b8:	68bb      	ldr	r3, [r7, #8]
 80050ba:	011b      	lsls	r3, r3, #4
 80050bc:	4413      	add	r3, r2
 80050be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	0c1a      	lsrs	r2, r3, #16
 80050c6:	683b      	ldr	r3, [r7, #0]
 80050c8:	3306      	adds	r3, #6
 80050ca:	b2d2      	uxtb	r2, r2
 80050cc:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	681a      	ldr	r2, [r3, #0]
 80050d2:	68bb      	ldr	r3, [r7, #8]
 80050d4:	011b      	lsls	r3, r3, #4
 80050d6:	4413      	add	r3, r2
 80050d8:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	0e1a      	lsrs	r2, r3, #24
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	3307      	adds	r3, #7
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80050e8:	68bb      	ldr	r3, [r7, #8]
 80050ea:	2b00      	cmp	r3, #0
 80050ec:	d108      	bne.n	8005100 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	68da      	ldr	r2, [r3, #12]
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f042 0220 	orr.w	r2, r2, #32
 80050fc:	60da      	str	r2, [r3, #12]
 80050fe:	e007      	b.n	8005110 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	691a      	ldr	r2, [r3, #16]
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f042 0220 	orr.w	r2, r2, #32
 800510e:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005110:	2300      	movs	r3, #0
 8005112:	e006      	b.n	8005122 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005120:	2301      	movs	r3, #1
  }
}
 8005122:	4618      	mov	r0, r3
 8005124:	371c      	adds	r7, #28
 8005126:	46bd      	mov	sp, r7
 8005128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512c:	4770      	bx	lr

0800512e <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8005138:	2300      	movs	r3, #0
 800513a:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005142:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005144:	7afb      	ldrb	r3, [r7, #11]
 8005146:	2b01      	cmp	r3, #1
 8005148:	d002      	beq.n	8005150 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800514a:	7afb      	ldrb	r3, [r7, #11]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d10f      	bne.n	8005170 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8005150:	683b      	ldr	r3, [r7, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	68db      	ldr	r3, [r3, #12]
 800515c:	f003 0303 	and.w	r3, r3, #3
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e005      	b.n	8005170 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	691b      	ldr	r3, [r3, #16]
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8005170:	68fb      	ldr	r3, [r7, #12]
}
 8005172:	4618      	mov	r0, r3
 8005174:	3714      	adds	r7, #20
 8005176:	46bd      	mov	sp, r7
 8005178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800517c:	4770      	bx	lr

0800517e <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 800517e:	b580      	push	{r7, lr}
 8005180:	b08a      	sub	sp, #40	; 0x28
 8005182:	af00      	add	r7, sp, #0
 8005184:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005186:	2300      	movs	r3, #0
 8005188:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	685b      	ldr	r3, [r3, #4]
 8005198:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	689b      	ldr	r3, [r3, #8]
 80051a0:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	68db      	ldr	r3, [r3, #12]
 80051a8:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	691b      	ldr	r3, [r3, #16]
 80051b0:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	699b      	ldr	r3, [r3, #24]
 80051b8:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80051ba:	6a3b      	ldr	r3, [r7, #32]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d07c      	beq.n	80052be <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80051c4:	69bb      	ldr	r3, [r7, #24]
 80051c6:	f003 0301 	and.w	r3, r3, #1
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d023      	beq.n	8005216 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	2201      	movs	r2, #1
 80051d4:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	f003 0302 	and.w	r3, r3, #2
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d003      	beq.n	80051e8 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80051e0:	6878      	ldr	r0, [r7, #4]
 80051e2:	f7fe fa2f 	bl	8003644 <HAL_CAN_TxMailbox0CompleteCallback>
 80051e6:	e016      	b.n	8005216 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 80051e8:	69bb      	ldr	r3, [r7, #24]
 80051ea:	f003 0304 	and.w	r3, r3, #4
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d004      	beq.n	80051fc <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 80051f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80051f8:	627b      	str	r3, [r7, #36]	; 0x24
 80051fa:	e00c      	b.n	8005216 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 80051fc:	69bb      	ldr	r3, [r7, #24]
 80051fe:	f003 0308 	and.w	r3, r3, #8
 8005202:	2b00      	cmp	r3, #0
 8005204:	d004      	beq.n	8005210 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800520c:	627b      	str	r3, [r7, #36]	; 0x24
 800520e:	e002      	b.n	8005216 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8005210:	6878      	ldr	r0, [r7, #4]
 8005212:	f000 f96b 	bl	80054ec <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005216:	69bb      	ldr	r3, [r7, #24]
 8005218:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800521c:	2b00      	cmp	r3, #0
 800521e:	d024      	beq.n	800526a <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005228:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800522a:	69bb      	ldr	r3, [r7, #24]
 800522c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005230:	2b00      	cmp	r3, #0
 8005232:	d003      	beq.n	800523c <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8005234:	6878      	ldr	r0, [r7, #4]
 8005236:	f7fe fa15 	bl	8003664 <HAL_CAN_TxMailbox1CompleteCallback>
 800523a:	e016      	b.n	800526a <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800523c:	69bb      	ldr	r3, [r7, #24]
 800523e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005242:	2b00      	cmp	r3, #0
 8005244:	d004      	beq.n	8005250 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8005246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005248:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800524c:	627b      	str	r3, [r7, #36]	; 0x24
 800524e:	e00c      	b.n	800526a <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8005250:	69bb      	ldr	r3, [r7, #24]
 8005252:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005256:	2b00      	cmp	r3, #0
 8005258:	d004      	beq.n	8005264 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 800525a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800525c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005260:	627b      	str	r3, [r7, #36]	; 0x24
 8005262:	e002      	b.n	800526a <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 f94b 	bl	8005500 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 800526a:	69bb      	ldr	r3, [r7, #24]
 800526c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d024      	beq.n	80052be <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800527c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 800527e:	69bb      	ldr	r3, [r7, #24]
 8005280:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005284:	2b00      	cmp	r3, #0
 8005286:	d003      	beq.n	8005290 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f7fe f9fb 	bl	8003684 <HAL_CAN_TxMailbox2CompleteCallback>
 800528e:	e016      	b.n	80052be <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8005290:	69bb      	ldr	r3, [r7, #24]
 8005292:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005296:	2b00      	cmp	r3, #0
 8005298:	d004      	beq.n	80052a4 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 800529a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800529c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80052a0:	627b      	str	r3, [r7, #36]	; 0x24
 80052a2:	e00c      	b.n	80052be <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80052a4:	69bb      	ldr	r3, [r7, #24]
 80052a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d004      	beq.n	80052b8 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 80052ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80052b4:	627b      	str	r3, [r7, #36]	; 0x24
 80052b6:	e002      	b.n	80052be <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 80052b8:	6878      	ldr	r0, [r7, #4]
 80052ba:	f000 f92b 	bl	8005514 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 80052be:	6a3b      	ldr	r3, [r7, #32]
 80052c0:	f003 0308 	and.w	r3, r3, #8
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00c      	beq.n	80052e2 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 80052c8:	697b      	ldr	r3, [r7, #20]
 80052ca:	f003 0310 	and.w	r3, r3, #16
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d007      	beq.n	80052e2 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 80052d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80052d8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	2210      	movs	r2, #16
 80052e0:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 80052e2:	6a3b      	ldr	r3, [r7, #32]
 80052e4:	f003 0304 	and.w	r3, r3, #4
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d00b      	beq.n	8005304 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 80052ec:	697b      	ldr	r3, [r7, #20]
 80052ee:	f003 0308 	and.w	r3, r3, #8
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d006      	beq.n	8005304 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2208      	movs	r2, #8
 80052fc:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 f912 	bl	8005528 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005304:	6a3b      	ldr	r3, [r7, #32]
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b00      	cmp	r3, #0
 800530c:	d009      	beq.n	8005322 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68db      	ldr	r3, [r3, #12]
 8005314:	f003 0303 	and.w	r3, r3, #3
 8005318:	2b00      	cmp	r3, #0
 800531a:	d002      	beq.n	8005322 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800531c:	6878      	ldr	r0, [r7, #4]
 800531e:	f7fe f975 	bl	800360c <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8005322:	6a3b      	ldr	r3, [r7, #32]
 8005324:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005328:	2b00      	cmp	r3, #0
 800532a:	d00c      	beq.n	8005346 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800532c:	693b      	ldr	r3, [r7, #16]
 800532e:	f003 0310 	and.w	r3, r3, #16
 8005332:	2b00      	cmp	r3, #0
 8005334:	d007      	beq.n	8005346 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8005336:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005338:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800533c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	681b      	ldr	r3, [r3, #0]
 8005342:	2210      	movs	r2, #16
 8005344:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8005346:	6a3b      	ldr	r3, [r7, #32]
 8005348:	f003 0320 	and.w	r3, r3, #32
 800534c:	2b00      	cmp	r3, #0
 800534e:	d00b      	beq.n	8005368 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	f003 0308 	and.w	r3, r3, #8
 8005356:	2b00      	cmp	r3, #0
 8005358:	d006      	beq.n	8005368 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2208      	movs	r2, #8
 8005360:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f000 f8f4 	bl	8005550 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8005368:	6a3b      	ldr	r3, [r7, #32]
 800536a:	f003 0310 	and.w	r3, r3, #16
 800536e:	2b00      	cmp	r3, #0
 8005370:	d009      	beq.n	8005386 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f003 0303 	and.w	r3, r3, #3
 800537c:	2b00      	cmp	r3, #0
 800537e:	d002      	beq.n	8005386 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8005380:	6878      	ldr	r0, [r7, #4]
 8005382:	f000 f8db 	bl	800553c <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005386:	6a3b      	ldr	r3, [r7, #32]
 8005388:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800538c:	2b00      	cmp	r3, #0
 800538e:	d00b      	beq.n	80053a8 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8005390:	69fb      	ldr	r3, [r7, #28]
 8005392:	f003 0310 	and.w	r3, r3, #16
 8005396:	2b00      	cmp	r3, #0
 8005398:	d006      	beq.n	80053a8 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	2210      	movs	r2, #16
 80053a0:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80053a2:	6878      	ldr	r0, [r7, #4]
 80053a4:	f000 f8de 	bl	8005564 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80053a8:	6a3b      	ldr	r3, [r7, #32]
 80053aa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00b      	beq.n	80053ca <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 80053b2:	69fb      	ldr	r3, [r7, #28]
 80053b4:	f003 0308 	and.w	r3, r3, #8
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d006      	beq.n	80053ca <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	2208      	movs	r2, #8
 80053c2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f000 f8d7 	bl	8005578 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80053ca:	6a3b      	ldr	r3, [r7, #32]
 80053cc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	d07b      	beq.n	80054cc <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80053d4:	69fb      	ldr	r3, [r7, #28]
 80053d6:	f003 0304 	and.w	r3, r3, #4
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d072      	beq.n	80054c4 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80053de:	6a3b      	ldr	r3, [r7, #32]
 80053e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d008      	beq.n	80053fa <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d003      	beq.n	80053fa <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80053f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80053f4:	f043 0301 	orr.w	r3, r3, #1
 80053f8:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80053fa:	6a3b      	ldr	r3, [r7, #32]
 80053fc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005400:	2b00      	cmp	r3, #0
 8005402:	d008      	beq.n	8005416 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005404:	68fb      	ldr	r3, [r7, #12]
 8005406:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800540a:	2b00      	cmp	r3, #0
 800540c:	d003      	beq.n	8005416 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800540e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005410:	f043 0302 	orr.w	r3, r3, #2
 8005414:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005416:	6a3b      	ldr	r3, [r7, #32]
 8005418:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800541c:	2b00      	cmp	r3, #0
 800541e:	d008      	beq.n	8005432 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800542a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542c:	f043 0304 	orr.w	r3, r3, #4
 8005430:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005432:	6a3b      	ldr	r3, [r7, #32]
 8005434:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005438:	2b00      	cmp	r3, #0
 800543a:	d043      	beq.n	80054c4 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8005442:	2b00      	cmp	r3, #0
 8005444:	d03e      	beq.n	80054c4 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800544c:	2b60      	cmp	r3, #96	; 0x60
 800544e:	d02b      	beq.n	80054a8 <HAL_CAN_IRQHandler+0x32a>
 8005450:	2b60      	cmp	r3, #96	; 0x60
 8005452:	d82e      	bhi.n	80054b2 <HAL_CAN_IRQHandler+0x334>
 8005454:	2b50      	cmp	r3, #80	; 0x50
 8005456:	d022      	beq.n	800549e <HAL_CAN_IRQHandler+0x320>
 8005458:	2b50      	cmp	r3, #80	; 0x50
 800545a:	d82a      	bhi.n	80054b2 <HAL_CAN_IRQHandler+0x334>
 800545c:	2b40      	cmp	r3, #64	; 0x40
 800545e:	d019      	beq.n	8005494 <HAL_CAN_IRQHandler+0x316>
 8005460:	2b40      	cmp	r3, #64	; 0x40
 8005462:	d826      	bhi.n	80054b2 <HAL_CAN_IRQHandler+0x334>
 8005464:	2b30      	cmp	r3, #48	; 0x30
 8005466:	d010      	beq.n	800548a <HAL_CAN_IRQHandler+0x30c>
 8005468:	2b30      	cmp	r3, #48	; 0x30
 800546a:	d822      	bhi.n	80054b2 <HAL_CAN_IRQHandler+0x334>
 800546c:	2b10      	cmp	r3, #16
 800546e:	d002      	beq.n	8005476 <HAL_CAN_IRQHandler+0x2f8>
 8005470:	2b20      	cmp	r3, #32
 8005472:	d005      	beq.n	8005480 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8005474:	e01d      	b.n	80054b2 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8005476:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005478:	f043 0308 	orr.w	r3, r3, #8
 800547c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800547e:	e019      	b.n	80054b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8005480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005482:	f043 0310 	orr.w	r3, r3, #16
 8005486:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005488:	e014      	b.n	80054b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 800548a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800548c:	f043 0320 	orr.w	r3, r3, #32
 8005490:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005492:	e00f      	b.n	80054b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005494:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005496:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800549a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800549c:	e00a      	b.n	80054b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800549e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80054a4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054a6:	e005      	b.n	80054b4 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80054a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ae:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80054b0:	e000      	b.n	80054b4 <HAL_CAN_IRQHandler+0x336>
            break;
 80054b2:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	699a      	ldr	r2, [r3, #24]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80054c2:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	2204      	movs	r2, #4
 80054ca:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80054cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d008      	beq.n	80054e4 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80054d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054d8:	431a      	orrs	r2, r3
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80054de:	6878      	ldr	r0, [r7, #4]
 80054e0:	f000 f854 	bl	800558c <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80054e4:	bf00      	nop
 80054e6:	3728      	adds	r7, #40	; 0x28
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}

080054ec <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 80054ec:	b480      	push	{r7}
 80054ee:	b083      	sub	sp, #12
 80054f0:	af00      	add	r7, sp, #0
 80054f2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 80054f4:	bf00      	nop
 80054f6:	370c      	adds	r7, #12
 80054f8:	46bd      	mov	sp, r7
 80054fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fe:	4770      	bx	lr

08005500 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005500:	b480      	push	{r7}
 8005502:	b083      	sub	sp, #12
 8005504:	af00      	add	r7, sp, #0
 8005506:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005508:	bf00      	nop
 800550a:	370c      	adds	r7, #12
 800550c:	46bd      	mov	sp, r7
 800550e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005512:	4770      	bx	lr

08005514 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005514:	b480      	push	{r7}
 8005516:	b083      	sub	sp, #12
 8005518:	af00      	add	r7, sp, #0
 800551a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800551c:	bf00      	nop
 800551e:	370c      	adds	r7, #12
 8005520:	46bd      	mov	sp, r7
 8005522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005526:	4770      	bx	lr

08005528 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8005528:	b480      	push	{r7}
 800552a:	b083      	sub	sp, #12
 800552c:	af00      	add	r7, sp, #0
 800552e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800553a:	4770      	bx	lr

0800553c <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800553c:	b480      	push	{r7}
 800553e:	b083      	sub	sp, #12
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8005544:	bf00      	nop
 8005546:	370c      	adds	r7, #12
 8005548:	46bd      	mov	sp, r7
 800554a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800554e:	4770      	bx	lr

08005550 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8005550:	b480      	push	{r7}
 8005552:	b083      	sub	sp, #12
 8005554:	af00      	add	r7, sp, #0
 8005556:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8005558:	bf00      	nop
 800555a:	370c      	adds	r7, #12
 800555c:	46bd      	mov	sp, r7
 800555e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005562:	4770      	bx	lr

08005564 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8005564:	b480      	push	{r7}
 8005566:	b083      	sub	sp, #12
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 800556c:	bf00      	nop
 800556e:	370c      	adds	r7, #12
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8005580:	bf00      	nop
 8005582:	370c      	adds	r7, #12
 8005584:	46bd      	mov	sp, r7
 8005586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558a:	4770      	bx	lr

0800558c <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 800558c:	b480      	push	{r7}
 800558e:	b083      	sub	sp, #12
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005594:	bf00      	nop
 8005596:	370c      	adds	r7, #12
 8005598:	46bd      	mov	sp, r7
 800559a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559e:	4770      	bx	lr

080055a0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055a0:	b480      	push	{r7}
 80055a2:	b085      	sub	sp, #20
 80055a4:	af00      	add	r7, sp, #0
 80055a6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	f003 0307 	and.w	r3, r3, #7
 80055ae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055b0:	4b0c      	ldr	r3, [pc, #48]	; (80055e4 <__NVIC_SetPriorityGrouping+0x44>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055b6:	68ba      	ldr	r2, [r7, #8]
 80055b8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055bc:	4013      	ands	r3, r2
 80055be:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80055c8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80055cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80055d0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80055d2:	4a04      	ldr	r2, [pc, #16]	; (80055e4 <__NVIC_SetPriorityGrouping+0x44>)
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	60d3      	str	r3, [r2, #12]
}
 80055d8:	bf00      	nop
 80055da:	3714      	adds	r7, #20
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	e000ed00 	.word	0xe000ed00

080055e8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80055e8:	b480      	push	{r7}
 80055ea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80055ec:	4b04      	ldr	r3, [pc, #16]	; (8005600 <__NVIC_GetPriorityGrouping+0x18>)
 80055ee:	68db      	ldr	r3, [r3, #12]
 80055f0:	0a1b      	lsrs	r3, r3, #8
 80055f2:	f003 0307 	and.w	r3, r3, #7
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	46bd      	mov	sp, r7
 80055fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fe:	4770      	bx	lr
 8005600:	e000ed00 	.word	0xe000ed00

08005604 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005604:	b480      	push	{r7}
 8005606:	b083      	sub	sp, #12
 8005608:	af00      	add	r7, sp, #0
 800560a:	4603      	mov	r3, r0
 800560c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800560e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005612:	2b00      	cmp	r3, #0
 8005614:	db0b      	blt.n	800562e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005616:	79fb      	ldrb	r3, [r7, #7]
 8005618:	f003 021f 	and.w	r2, r3, #31
 800561c:	4907      	ldr	r1, [pc, #28]	; (800563c <__NVIC_EnableIRQ+0x38>)
 800561e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005622:	095b      	lsrs	r3, r3, #5
 8005624:	2001      	movs	r0, #1
 8005626:	fa00 f202 	lsl.w	r2, r0, r2
 800562a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800562e:	bf00      	nop
 8005630:	370c      	adds	r7, #12
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr
 800563a:	bf00      	nop
 800563c:	e000e100 	.word	0xe000e100

08005640 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	4603      	mov	r3, r0
 8005648:	6039      	str	r1, [r7, #0]
 800564a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800564c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005650:	2b00      	cmp	r3, #0
 8005652:	db0a      	blt.n	800566a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005654:	683b      	ldr	r3, [r7, #0]
 8005656:	b2da      	uxtb	r2, r3
 8005658:	490c      	ldr	r1, [pc, #48]	; (800568c <__NVIC_SetPriority+0x4c>)
 800565a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565e:	0112      	lsls	r2, r2, #4
 8005660:	b2d2      	uxtb	r2, r2
 8005662:	440b      	add	r3, r1
 8005664:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005668:	e00a      	b.n	8005680 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	b2da      	uxtb	r2, r3
 800566e:	4908      	ldr	r1, [pc, #32]	; (8005690 <__NVIC_SetPriority+0x50>)
 8005670:	79fb      	ldrb	r3, [r7, #7]
 8005672:	f003 030f 	and.w	r3, r3, #15
 8005676:	3b04      	subs	r3, #4
 8005678:	0112      	lsls	r2, r2, #4
 800567a:	b2d2      	uxtb	r2, r2
 800567c:	440b      	add	r3, r1
 800567e:	761a      	strb	r2, [r3, #24]
}
 8005680:	bf00      	nop
 8005682:	370c      	adds	r7, #12
 8005684:	46bd      	mov	sp, r7
 8005686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800568a:	4770      	bx	lr
 800568c:	e000e100 	.word	0xe000e100
 8005690:	e000ed00 	.word	0xe000ed00

08005694 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005694:	b480      	push	{r7}
 8005696:	b089      	sub	sp, #36	; 0x24
 8005698:	af00      	add	r7, sp, #0
 800569a:	60f8      	str	r0, [r7, #12]
 800569c:	60b9      	str	r1, [r7, #8]
 800569e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	f003 0307 	and.w	r3, r3, #7
 80056a6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056a8:	69fb      	ldr	r3, [r7, #28]
 80056aa:	f1c3 0307 	rsb	r3, r3, #7
 80056ae:	2b04      	cmp	r3, #4
 80056b0:	bf28      	it	cs
 80056b2:	2304      	movcs	r3, #4
 80056b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056b6:	69fb      	ldr	r3, [r7, #28]
 80056b8:	3304      	adds	r3, #4
 80056ba:	2b06      	cmp	r3, #6
 80056bc:	d902      	bls.n	80056c4 <NVIC_EncodePriority+0x30>
 80056be:	69fb      	ldr	r3, [r7, #28]
 80056c0:	3b03      	subs	r3, #3
 80056c2:	e000      	b.n	80056c6 <NVIC_EncodePriority+0x32>
 80056c4:	2300      	movs	r3, #0
 80056c6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056c8:	f04f 32ff 	mov.w	r2, #4294967295
 80056cc:	69bb      	ldr	r3, [r7, #24]
 80056ce:	fa02 f303 	lsl.w	r3, r2, r3
 80056d2:	43da      	mvns	r2, r3
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	401a      	ands	r2, r3
 80056d8:	697b      	ldr	r3, [r7, #20]
 80056da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80056dc:	f04f 31ff 	mov.w	r1, #4294967295
 80056e0:	697b      	ldr	r3, [r7, #20]
 80056e2:	fa01 f303 	lsl.w	r3, r1, r3
 80056e6:	43d9      	mvns	r1, r3
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80056ec:	4313      	orrs	r3, r2
         );
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3724      	adds	r7, #36	; 0x24
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr

080056fa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80056fa:	b580      	push	{r7, lr}
 80056fc:	b082      	sub	sp, #8
 80056fe:	af00      	add	r7, sp, #0
 8005700:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005702:	6878      	ldr	r0, [r7, #4]
 8005704:	f7ff ff4c 	bl	80055a0 <__NVIC_SetPriorityGrouping>
}
 8005708:	bf00      	nop
 800570a:	3708      	adds	r7, #8
 800570c:	46bd      	mov	sp, r7
 800570e:	bd80      	pop	{r7, pc}

08005710 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005710:	b580      	push	{r7, lr}
 8005712:	b086      	sub	sp, #24
 8005714:	af00      	add	r7, sp, #0
 8005716:	4603      	mov	r3, r0
 8005718:	60b9      	str	r1, [r7, #8]
 800571a:	607a      	str	r2, [r7, #4]
 800571c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800571e:	2300      	movs	r3, #0
 8005720:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005722:	f7ff ff61 	bl	80055e8 <__NVIC_GetPriorityGrouping>
 8005726:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005728:	687a      	ldr	r2, [r7, #4]
 800572a:	68b9      	ldr	r1, [r7, #8]
 800572c:	6978      	ldr	r0, [r7, #20]
 800572e:	f7ff ffb1 	bl	8005694 <NVIC_EncodePriority>
 8005732:	4602      	mov	r2, r0
 8005734:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005738:	4611      	mov	r1, r2
 800573a:	4618      	mov	r0, r3
 800573c:	f7ff ff80 	bl	8005640 <__NVIC_SetPriority>
}
 8005740:	bf00      	nop
 8005742:	3718      	adds	r7, #24
 8005744:	46bd      	mov	sp, r7
 8005746:	bd80      	pop	{r7, pc}

08005748 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	4603      	mov	r3, r0
 8005750:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005756:	4618      	mov	r0, r3
 8005758:	f7ff ff54 	bl	8005604 <__NVIC_EnableIRQ>
}
 800575c:	bf00      	nop
 800575e:	3708      	adds	r7, #8
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}

08005764 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005764:	b580      	push	{r7, lr}
 8005766:	b082      	sub	sp, #8
 8005768:	af00      	add	r7, sp, #0
 800576a:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d101      	bne.n	8005776 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005772:	2301      	movs	r3, #1
 8005774:	e014      	b.n	80057a0 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	791b      	ldrb	r3, [r3, #4]
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b00      	cmp	r3, #0
 800577e:	d105      	bne.n	800578c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f7fe f944 	bl	8003a14 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2202      	movs	r2, #2
 8005790:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	2201      	movs	r2, #1
 800579c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3708      	adds	r7, #8
 80057a4:	46bd      	mov	sp, r7
 80057a6:	bd80      	pop	{r7, pc}

080057a8 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 80057a8:	b480      	push	{r7}
 80057aa:	b083      	sub	sp, #12
 80057ac:	af00      	add	r7, sp, #0
 80057ae:	6078      	str	r0, [r7, #4]
 80057b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	795b      	ldrb	r3, [r3, #5]
 80057b6:	2b01      	cmp	r3, #1
 80057b8:	d101      	bne.n	80057be <HAL_DAC_Start+0x16>
 80057ba:	2302      	movs	r3, #2
 80057bc:	e03b      	b.n	8005836 <HAL_DAC_Start+0x8e>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2201      	movs	r2, #1
 80057c2:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2202      	movs	r2, #2
 80057c8:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	6819      	ldr	r1, [r3, #0]
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	f003 0310 	and.w	r3, r3, #16
 80057d6:	2201      	movs	r2, #1
 80057d8:	409a      	lsls	r2, r3
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	430a      	orrs	r2, r1
 80057e0:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 80057e2:	683b      	ldr	r3, [r7, #0]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10f      	bne.n	8005808 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d118      	bne.n	8005828 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	685a      	ldr	r2, [r3, #4]
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f042 0201 	orr.w	r2, r2, #1
 8005804:	605a      	str	r2, [r3, #4]
 8005806:	e00f      	b.n	8005828 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005812:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005816:	d107      	bne.n	8005828 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0202 	orr.w	r2, r2, #2
 8005826:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2201      	movs	r2, #1
 800582c:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005834:	2300      	movs	r3, #0
}
 8005836:	4618      	mov	r0, r3
 8005838:	370c      	adds	r7, #12
 800583a:	46bd      	mov	sp, r7
 800583c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005840:	4770      	bx	lr

08005842 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005842:	b580      	push	{r7, lr}
 8005844:	b082      	sub	sp, #8
 8005846:	af00      	add	r7, sp, #0
 8005848:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	681b      	ldr	r3, [r3, #0]
 8005850:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005854:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005858:	d120      	bne.n	800589c <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005860:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005864:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005868:	d118      	bne.n	800589c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2204      	movs	r2, #4
 800586e:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	691b      	ldr	r3, [r3, #16]
 8005874:	f043 0201 	orr.w	r2, r3, #1
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005884:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005894:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005896:	6878      	ldr	r0, [r7, #4]
 8005898:	f000 f852 	bl	8005940 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058a6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058aa:	d120      	bne.n	80058ee <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80058b6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80058ba:	d118      	bne.n	80058ee <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	2204      	movs	r2, #4
 80058c0:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	691b      	ldr	r3, [r3, #16]
 80058c6:	f043 0202 	orr.w	r2, r3, #2
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80058d6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	681a      	ldr	r2, [r3, #0]
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80058e6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f94d 	bl	8005b88 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 80058ee:	bf00      	nop
 80058f0:	3708      	adds	r7, #8
 80058f2:	46bd      	mov	sp, r7
 80058f4:	bd80      	pop	{r7, pc}

080058f6 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80058f6:	b480      	push	{r7}
 80058f8:	b087      	sub	sp, #28
 80058fa:	af00      	add	r7, sp, #0
 80058fc:	60f8      	str	r0, [r7, #12]
 80058fe:	60b9      	str	r1, [r7, #8]
 8005900:	607a      	str	r2, [r7, #4]
 8005902:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8005904:	2300      	movs	r3, #0
 8005906:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d105      	bne.n	8005920 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005914:	697a      	ldr	r2, [r7, #20]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	4413      	add	r3, r2
 800591a:	3308      	adds	r3, #8
 800591c:	617b      	str	r3, [r7, #20]
 800591e:	e004      	b.n	800592a <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005920:	697a      	ldr	r2, [r7, #20]
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	4413      	add	r3, r2
 8005926:	3314      	adds	r3, #20
 8005928:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800592a:	697b      	ldr	r3, [r7, #20]
 800592c:	461a      	mov	r2, r3
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005932:	2300      	movs	r3, #0
}
 8005934:	4618      	mov	r0, r3
 8005936:	371c      	adds	r7, #28
 8005938:	46bd      	mov	sp, r7
 800593a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800593e:	4770      	bx	lr

08005940 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005940:	b480      	push	{r7}
 8005942:	b083      	sub	sp, #12
 8005944:	af00      	add	r7, sp, #0
 8005946:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005948:	bf00      	nop
 800594a:	370c      	adds	r7, #12
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr

08005954 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005954:	b580      	push	{r7, lr}
 8005956:	b088      	sub	sp, #32
 8005958:	af00      	add	r7, sp, #0
 800595a:	60f8      	str	r0, [r7, #12]
 800595c:	60b9      	str	r1, [r7, #8]
 800595e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8005960:	2300      	movs	r3, #0
 8005962:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	795b      	ldrb	r3, [r3, #5]
 8005968:	2b01      	cmp	r3, #1
 800596a:	d101      	bne.n	8005970 <HAL_DAC_ConfigChannel+0x1c>
 800596c:	2302      	movs	r3, #2
 800596e:	e107      	b.n	8005b80 <HAL_DAC_ConfigChannel+0x22c>
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2201      	movs	r2, #1
 8005974:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2202      	movs	r2, #2
 800597a:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	2b04      	cmp	r3, #4
 8005982:	d174      	bne.n	8005a6e <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005984:	f7fe fad6 	bl	8003f34 <HAL_GetTick>
 8005988:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d134      	bne.n	80059fa <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005990:	e011      	b.n	80059b6 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005992:	f7fe facf 	bl	8003f34 <HAL_GetTick>
 8005996:	4602      	mov	r2, r0
 8005998:	69fb      	ldr	r3, [r7, #28]
 800599a:	1ad3      	subs	r3, r2, r3
 800599c:	2b01      	cmp	r3, #1
 800599e:	d90a      	bls.n	80059b6 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	691b      	ldr	r3, [r3, #16]
 80059a4:	f043 0208 	orr.w	r2, r3, #8
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	2203      	movs	r2, #3
 80059b0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80059b2:	2303      	movs	r3, #3
 80059b4:	e0e4      	b.n	8005b80 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e6      	bne.n	8005992 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80059c4:	2001      	movs	r0, #1
 80059c6:	f7fe fac1 	bl	8003f4c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	681b      	ldr	r3, [r3, #0]
 80059ce:	68ba      	ldr	r2, [r7, #8]
 80059d0:	6992      	ldr	r2, [r2, #24]
 80059d2:	641a      	str	r2, [r3, #64]	; 0x40
 80059d4:	e01e      	b.n	8005a14 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80059d6:	f7fe faad 	bl	8003f34 <HAL_GetTick>
 80059da:	4602      	mov	r2, r0
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	1ad3      	subs	r3, r2, r3
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d90a      	bls.n	80059fa <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	691b      	ldr	r3, [r3, #16]
 80059e8:	f043 0208 	orr.w	r2, r3, #8
 80059ec:	68fb      	ldr	r3, [r7, #12]
 80059ee:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	2203      	movs	r2, #3
 80059f4:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80059f6:	2303      	movs	r3, #3
 80059f8:	e0c2      	b.n	8005b80 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	dbe8      	blt.n	80059d6 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8005a04:	2001      	movs	r0, #1
 8005a06:	f7fe faa1 	bl	8003f4c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	68ba      	ldr	r2, [r7, #8]
 8005a10:	6992      	ldr	r2, [r2, #24]
 8005a12:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f003 0310 	and.w	r3, r3, #16
 8005a20:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005a24:	fa01 f303 	lsl.w	r3, r1, r3
 8005a28:	43db      	mvns	r3, r3
 8005a2a:	ea02 0103 	and.w	r1, r2, r3
 8005a2e:	68bb      	ldr	r3, [r7, #8]
 8005a30:	69da      	ldr	r2, [r3, #28]
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	f003 0310 	and.w	r3, r3, #16
 8005a38:	409a      	lsls	r2, r3
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	430a      	orrs	r2, r1
 8005a40:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f003 0310 	and.w	r3, r3, #16
 8005a4e:	21ff      	movs	r1, #255	; 0xff
 8005a50:	fa01 f303 	lsl.w	r3, r1, r3
 8005a54:	43db      	mvns	r3, r3
 8005a56:	ea02 0103 	and.w	r1, r2, r3
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	6a1a      	ldr	r2, [r3, #32]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	f003 0310 	and.w	r3, r3, #16
 8005a64:	409a      	lsls	r2, r3
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	430a      	orrs	r2, r1
 8005a6c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	691b      	ldr	r3, [r3, #16]
 8005a72:	2b01      	cmp	r3, #1
 8005a74:	d11d      	bne.n	8005ab2 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a7c:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f003 0310 	and.w	r3, r3, #16
 8005a84:	221f      	movs	r2, #31
 8005a86:	fa02 f303 	lsl.w	r3, r2, r3
 8005a8a:	43db      	mvns	r3, r3
 8005a8c:	69ba      	ldr	r2, [r7, #24]
 8005a8e:	4013      	ands	r3, r2
 8005a90:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	695b      	ldr	r3, [r3, #20]
 8005a96:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	f003 0310 	and.w	r3, r3, #16
 8005a9e:	697a      	ldr	r2, [r7, #20]
 8005aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8005aa4:	69ba      	ldr	r2, [r7, #24]
 8005aa6:	4313      	orrs	r3, r2
 8005aa8:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	69ba      	ldr	r2, [r7, #24]
 8005ab0:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab8:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	f003 0310 	and.w	r3, r3, #16
 8005ac0:	2207      	movs	r2, #7
 8005ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8005ac6:	43db      	mvns	r3, r3
 8005ac8:	69ba      	ldr	r2, [r7, #24]
 8005aca:	4013      	ands	r3, r2
 8005acc:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8005ace:	68bb      	ldr	r3, [r7, #8]
 8005ad0:	681a      	ldr	r2, [r3, #0]
 8005ad2:	68bb      	ldr	r3, [r7, #8]
 8005ad4:	689b      	ldr	r3, [r3, #8]
 8005ad6:	431a      	orrs	r2, r3
 8005ad8:	68bb      	ldr	r3, [r7, #8]
 8005ada:	68db      	ldr	r3, [r3, #12]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f003 0310 	and.w	r3, r3, #16
 8005ae6:	697a      	ldr	r2, [r7, #20]
 8005ae8:	fa02 f303 	lsl.w	r3, r2, r3
 8005aec:	69ba      	ldr	r2, [r7, #24]
 8005aee:	4313      	orrs	r3, r2
 8005af0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	69ba      	ldr	r2, [r7, #24]
 8005af8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	6819      	ldr	r1, [r3, #0]
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	f003 0310 	and.w	r3, r3, #16
 8005b06:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b0e:	43da      	mvns	r2, r3
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	400a      	ands	r2, r1
 8005b16:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f003 0310 	and.w	r3, r3, #16
 8005b26:	f640 72fc 	movw	r2, #4092	; 0xffc
 8005b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8005b2e:	43db      	mvns	r3, r3
 8005b30:	69ba      	ldr	r2, [r7, #24]
 8005b32:	4013      	ands	r3, r2
 8005b34:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005b36:	68bb      	ldr	r3, [r7, #8]
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	f003 0310 	and.w	r3, r3, #16
 8005b42:	697a      	ldr	r2, [r7, #20]
 8005b44:	fa02 f303 	lsl.w	r3, r2, r3
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	4313      	orrs	r3, r2
 8005b4c:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	69ba      	ldr	r2, [r7, #24]
 8005b54:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	6819      	ldr	r1, [r3, #0]
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f003 0310 	and.w	r3, r3, #16
 8005b62:	22c0      	movs	r2, #192	; 0xc0
 8005b64:	fa02 f303 	lsl.w	r3, r2, r3
 8005b68:	43da      	mvns	r2, r3
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	400a      	ands	r2, r1
 8005b70:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	2201      	movs	r2, #1
 8005b76:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005b7e:	2300      	movs	r3, #0
}
 8005b80:	4618      	mov	r0, r3
 8005b82:	3720      	adds	r7, #32
 8005b84:	46bd      	mov	sp, r7
 8005b86:	bd80      	pop	{r7, pc}

08005b88 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8005b88:	b480      	push	{r7}
 8005b8a:	b083      	sub	sp, #12
 8005b8c:	af00      	add	r7, sp, #0
 8005b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005b90:	bf00      	nop
 8005b92:	370c      	adds	r7, #12
 8005b94:	46bd      	mov	sp, r7
 8005b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b9a:	4770      	bx	lr

08005b9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005b9c:	b480      	push	{r7}
 8005b9e:	b087      	sub	sp, #28
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005baa:	e148      	b.n	8005e3e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8005bac:	683b      	ldr	r3, [r7, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	2101      	movs	r1, #1
 8005bb2:	697b      	ldr	r3, [r7, #20]
 8005bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8005bb8:	4013      	ands	r3, r2
 8005bba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	2b00      	cmp	r3, #0
 8005bc0:	f000 813a 	beq.w	8005e38 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f003 0303 	and.w	r3, r3, #3
 8005bcc:	2b01      	cmp	r3, #1
 8005bce:	d005      	beq.n	8005bdc <HAL_GPIO_Init+0x40>
 8005bd0:	683b      	ldr	r3, [r7, #0]
 8005bd2:	685b      	ldr	r3, [r3, #4]
 8005bd4:	f003 0303 	and.w	r3, r3, #3
 8005bd8:	2b02      	cmp	r3, #2
 8005bda:	d130      	bne.n	8005c3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	689b      	ldr	r3, [r3, #8]
 8005be0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	005b      	lsls	r3, r3, #1
 8005be6:	2203      	movs	r2, #3
 8005be8:	fa02 f303 	lsl.w	r3, r2, r3
 8005bec:	43db      	mvns	r3, r3
 8005bee:	693a      	ldr	r2, [r7, #16]
 8005bf0:	4013      	ands	r3, r2
 8005bf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	68da      	ldr	r2, [r3, #12]
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	005b      	lsls	r3, r3, #1
 8005bfc:	fa02 f303 	lsl.w	r3, r2, r3
 8005c00:	693a      	ldr	r2, [r7, #16]
 8005c02:	4313      	orrs	r3, r2
 8005c04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	693a      	ldr	r2, [r7, #16]
 8005c0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005c12:	2201      	movs	r2, #1
 8005c14:	697b      	ldr	r3, [r7, #20]
 8005c16:	fa02 f303 	lsl.w	r3, r2, r3
 8005c1a:	43db      	mvns	r3, r3
 8005c1c:	693a      	ldr	r2, [r7, #16]
 8005c1e:	4013      	ands	r3, r2
 8005c20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	685b      	ldr	r3, [r3, #4]
 8005c26:	091b      	lsrs	r3, r3, #4
 8005c28:	f003 0201 	and.w	r2, r3, #1
 8005c2c:	697b      	ldr	r3, [r7, #20]
 8005c2e:	fa02 f303 	lsl.w	r3, r2, r3
 8005c32:	693a      	ldr	r2, [r7, #16]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	693a      	ldr	r2, [r7, #16]
 8005c3c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f003 0303 	and.w	r3, r3, #3
 8005c46:	2b03      	cmp	r3, #3
 8005c48:	d017      	beq.n	8005c7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	68db      	ldr	r3, [r3, #12]
 8005c4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	005b      	lsls	r3, r3, #1
 8005c54:	2203      	movs	r2, #3
 8005c56:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5a:	43db      	mvns	r3, r3
 8005c5c:	693a      	ldr	r2, [r7, #16]
 8005c5e:	4013      	ands	r3, r2
 8005c60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	689a      	ldr	r2, [r3, #8]
 8005c66:	697b      	ldr	r3, [r7, #20]
 8005c68:	005b      	lsls	r3, r3, #1
 8005c6a:	fa02 f303 	lsl.w	r3, r2, r3
 8005c6e:	693a      	ldr	r2, [r7, #16]
 8005c70:	4313      	orrs	r3, r2
 8005c72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	693a      	ldr	r2, [r7, #16]
 8005c78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	685b      	ldr	r3, [r3, #4]
 8005c7e:	f003 0303 	and.w	r3, r3, #3
 8005c82:	2b02      	cmp	r3, #2
 8005c84:	d123      	bne.n	8005cce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8005c86:	697b      	ldr	r3, [r7, #20]
 8005c88:	08da      	lsrs	r2, r3, #3
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	3208      	adds	r2, #8
 8005c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005c94:	697b      	ldr	r3, [r7, #20]
 8005c96:	f003 0307 	and.w	r3, r3, #7
 8005c9a:	009b      	lsls	r3, r3, #2
 8005c9c:	220f      	movs	r2, #15
 8005c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8005ca2:	43db      	mvns	r3, r3
 8005ca4:	693a      	ldr	r2, [r7, #16]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	691a      	ldr	r2, [r3, #16]
 8005cae:	697b      	ldr	r3, [r7, #20]
 8005cb0:	f003 0307 	and.w	r3, r3, #7
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	fa02 f303 	lsl.w	r3, r2, r3
 8005cba:	693a      	ldr	r2, [r7, #16]
 8005cbc:	4313      	orrs	r3, r2
 8005cbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	08da      	lsrs	r2, r3, #3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	3208      	adds	r2, #8
 8005cc8:	6939      	ldr	r1, [r7, #16]
 8005cca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8005cd4:	697b      	ldr	r3, [r7, #20]
 8005cd6:	005b      	lsls	r3, r3, #1
 8005cd8:	2203      	movs	r2, #3
 8005cda:	fa02 f303 	lsl.w	r3, r2, r3
 8005cde:	43db      	mvns	r3, r3
 8005ce0:	693a      	ldr	r2, [r7, #16]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8005ce6:	683b      	ldr	r3, [r7, #0]
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f003 0203 	and.w	r2, r3, #3
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	005b      	lsls	r3, r3, #1
 8005cf2:	fa02 f303 	lsl.w	r3, r2, r3
 8005cf6:	693a      	ldr	r2, [r7, #16]
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	693a      	ldr	r2, [r7, #16]
 8005d00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005d02:	683b      	ldr	r3, [r7, #0]
 8005d04:	685b      	ldr	r3, [r3, #4]
 8005d06:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	f000 8094 	beq.w	8005e38 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005d10:	4b52      	ldr	r3, [pc, #328]	; (8005e5c <HAL_GPIO_Init+0x2c0>)
 8005d12:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d14:	4a51      	ldr	r2, [pc, #324]	; (8005e5c <HAL_GPIO_Init+0x2c0>)
 8005d16:	f043 0301 	orr.w	r3, r3, #1
 8005d1a:	6613      	str	r3, [r2, #96]	; 0x60
 8005d1c:	4b4f      	ldr	r3, [pc, #316]	; (8005e5c <HAL_GPIO_Init+0x2c0>)
 8005d1e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005d20:	f003 0301 	and.w	r3, r3, #1
 8005d24:	60bb      	str	r3, [r7, #8]
 8005d26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8005d28:	4a4d      	ldr	r2, [pc, #308]	; (8005e60 <HAL_GPIO_Init+0x2c4>)
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	089b      	lsrs	r3, r3, #2
 8005d2e:	3302      	adds	r3, #2
 8005d30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005d34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8005d36:	697b      	ldr	r3, [r7, #20]
 8005d38:	f003 0303 	and.w	r3, r3, #3
 8005d3c:	009b      	lsls	r3, r3, #2
 8005d3e:	220f      	movs	r2, #15
 8005d40:	fa02 f303 	lsl.w	r3, r2, r3
 8005d44:	43db      	mvns	r3, r3
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	4013      	ands	r3, r2
 8005d4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005d52:	d00d      	beq.n	8005d70 <HAL_GPIO_Init+0x1d4>
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	4a43      	ldr	r2, [pc, #268]	; (8005e64 <HAL_GPIO_Init+0x2c8>)
 8005d58:	4293      	cmp	r3, r2
 8005d5a:	d007      	beq.n	8005d6c <HAL_GPIO_Init+0x1d0>
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	4a42      	ldr	r2, [pc, #264]	; (8005e68 <HAL_GPIO_Init+0x2cc>)
 8005d60:	4293      	cmp	r3, r2
 8005d62:	d101      	bne.n	8005d68 <HAL_GPIO_Init+0x1cc>
 8005d64:	2302      	movs	r3, #2
 8005d66:	e004      	b.n	8005d72 <HAL_GPIO_Init+0x1d6>
 8005d68:	2307      	movs	r3, #7
 8005d6a:	e002      	b.n	8005d72 <HAL_GPIO_Init+0x1d6>
 8005d6c:	2301      	movs	r3, #1
 8005d6e:	e000      	b.n	8005d72 <HAL_GPIO_Init+0x1d6>
 8005d70:	2300      	movs	r3, #0
 8005d72:	697a      	ldr	r2, [r7, #20]
 8005d74:	f002 0203 	and.w	r2, r2, #3
 8005d78:	0092      	lsls	r2, r2, #2
 8005d7a:	4093      	lsls	r3, r2
 8005d7c:	693a      	ldr	r2, [r7, #16]
 8005d7e:	4313      	orrs	r3, r2
 8005d80:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005d82:	4937      	ldr	r1, [pc, #220]	; (8005e60 <HAL_GPIO_Init+0x2c4>)
 8005d84:	697b      	ldr	r3, [r7, #20]
 8005d86:	089b      	lsrs	r3, r3, #2
 8005d88:	3302      	adds	r3, #2
 8005d8a:	693a      	ldr	r2, [r7, #16]
 8005d8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005d90:	4b36      	ldr	r3, [pc, #216]	; (8005e6c <HAL_GPIO_Init+0x2d0>)
 8005d92:	689b      	ldr	r3, [r3, #8]
 8005d94:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	43db      	mvns	r3, r3
 8005d9a:	693a      	ldr	r2, [r7, #16]
 8005d9c:	4013      	ands	r3, r2
 8005d9e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8005da0:	683b      	ldr	r3, [r7, #0]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	d003      	beq.n	8005db4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8005dac:	693a      	ldr	r2, [r7, #16]
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	4313      	orrs	r3, r2
 8005db2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8005db4:	4a2d      	ldr	r2, [pc, #180]	; (8005e6c <HAL_GPIO_Init+0x2d0>)
 8005db6:	693b      	ldr	r3, [r7, #16]
 8005db8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8005dba:	4b2c      	ldr	r3, [pc, #176]	; (8005e6c <HAL_GPIO_Init+0x2d0>)
 8005dbc:	68db      	ldr	r3, [r3, #12]
 8005dbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	43db      	mvns	r3, r3
 8005dc4:	693a      	ldr	r2, [r7, #16]
 8005dc6:	4013      	ands	r3, r2
 8005dc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	685b      	ldr	r3, [r3, #4]
 8005dce:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	68fb      	ldr	r3, [r7, #12]
 8005dda:	4313      	orrs	r3, r2
 8005ddc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8005dde:	4a23      	ldr	r2, [pc, #140]	; (8005e6c <HAL_GPIO_Init+0x2d0>)
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8005de4:	4b21      	ldr	r3, [pc, #132]	; (8005e6c <HAL_GPIO_Init+0x2d0>)
 8005de6:	685b      	ldr	r3, [r3, #4]
 8005de8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005dea:	68fb      	ldr	r3, [r7, #12]
 8005dec:	43db      	mvns	r3, r3
 8005dee:	693a      	ldr	r2, [r7, #16]
 8005df0:	4013      	ands	r3, r2
 8005df2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005df4:	683b      	ldr	r3, [r7, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d003      	beq.n	8005e08 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005e00:	693a      	ldr	r2, [r7, #16]
 8005e02:	68fb      	ldr	r3, [r7, #12]
 8005e04:	4313      	orrs	r3, r2
 8005e06:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8005e08:	4a18      	ldr	r2, [pc, #96]	; (8005e6c <HAL_GPIO_Init+0x2d0>)
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005e0e:	4b17      	ldr	r3, [pc, #92]	; (8005e6c <HAL_GPIO_Init+0x2d0>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	43db      	mvns	r3, r3
 8005e18:	693a      	ldr	r2, [r7, #16]
 8005e1a:	4013      	ands	r3, r2
 8005e1c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	685b      	ldr	r3, [r3, #4]
 8005e22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8005e2a:	693a      	ldr	r2, [r7, #16]
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	4313      	orrs	r3, r2
 8005e30:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005e32:	4a0e      	ldr	r2, [pc, #56]	; (8005e6c <HAL_GPIO_Init+0x2d0>)
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8005e38:	697b      	ldr	r3, [r7, #20]
 8005e3a:	3301      	adds	r3, #1
 8005e3c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005e3e:	683b      	ldr	r3, [r7, #0]
 8005e40:	681a      	ldr	r2, [r3, #0]
 8005e42:	697b      	ldr	r3, [r7, #20]
 8005e44:	fa22 f303 	lsr.w	r3, r2, r3
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	f47f aeaf 	bne.w	8005bac <HAL_GPIO_Init+0x10>
  }
}
 8005e4e:	bf00      	nop
 8005e50:	bf00      	nop
 8005e52:	371c      	adds	r7, #28
 8005e54:	46bd      	mov	sp, r7
 8005e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e5a:	4770      	bx	lr
 8005e5c:	40021000 	.word	0x40021000
 8005e60:	40010000 	.word	0x40010000
 8005e64:	48000400 	.word	0x48000400
 8005e68:	48000800 	.word	0x48000800
 8005e6c:	40010400 	.word	0x40010400

08005e70 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b085      	sub	sp, #20
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	460b      	mov	r3, r1
 8005e7a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	691a      	ldr	r2, [r3, #16]
 8005e80:	887b      	ldrh	r3, [r7, #2]
 8005e82:	4013      	ands	r3, r2
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	73fb      	strb	r3, [r7, #15]
 8005e8c:	e001      	b.n	8005e92 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005e8e:	2300      	movs	r3, #0
 8005e90:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8005e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	3714      	adds	r7, #20
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9e:	4770      	bx	lr

08005ea0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005ea0:	b480      	push	{r7}
 8005ea2:	b083      	sub	sp, #12
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	460b      	mov	r3, r1
 8005eaa:	807b      	strh	r3, [r7, #2]
 8005eac:	4613      	mov	r3, r2
 8005eae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005eb0:	787b      	ldrb	r3, [r7, #1]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d003      	beq.n	8005ebe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8005eb6:	887a      	ldrh	r2, [r7, #2]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8005ebc:	e002      	b.n	8005ec4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8005ebe:	887a      	ldrh	r2, [r7, #2]
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8005ec4:	bf00      	nop
 8005ec6:	370c      	adds	r7, #12
 8005ec8:	46bd      	mov	sp, r7
 8005eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ece:	4770      	bx	lr

08005ed0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	b082      	sub	sp, #8
 8005ed4:	af00      	add	r7, sp, #0
 8005ed6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e081      	b.n	8005fe6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d106      	bne.n	8005efc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	2200      	movs	r2, #0
 8005ef2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f7fd fdd2 	bl	8003aa0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	2224      	movs	r2, #36	; 0x24
 8005f00:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	681b      	ldr	r3, [r3, #0]
 8005f08:	681a      	ldr	r2, [r3, #0]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	f022 0201 	bic.w	r2, r2, #1
 8005f12:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	685a      	ldr	r2, [r3, #4]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005f20:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	689a      	ldr	r2, [r3, #8]
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f30:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	68db      	ldr	r3, [r3, #12]
 8005f36:	2b01      	cmp	r3, #1
 8005f38:	d107      	bne.n	8005f4a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	689a      	ldr	r2, [r3, #8]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f46:	609a      	str	r2, [r3, #8]
 8005f48:	e006      	b.n	8005f58 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	689a      	ldr	r2, [r3, #8]
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	681b      	ldr	r3, [r3, #0]
 8005f52:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8005f56:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	2b02      	cmp	r3, #2
 8005f5e:	d104      	bne.n	8005f6a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005f68:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	685b      	ldr	r3, [r3, #4]
 8005f70:	687a      	ldr	r2, [r7, #4]
 8005f72:	6812      	ldr	r2, [r2, #0]
 8005f74:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8005f78:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f7c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	68da      	ldr	r2, [r3, #12]
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005f8c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	691a      	ldr	r2, [r3, #16]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	695b      	ldr	r3, [r3, #20]
 8005f96:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	699b      	ldr	r3, [r3, #24]
 8005f9e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	430a      	orrs	r2, r1
 8005fa6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	69d9      	ldr	r1, [r3, #28]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	6a1a      	ldr	r2, [r3, #32]
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	430a      	orrs	r2, r1
 8005fb6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	681a      	ldr	r2, [r3, #0]
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f042 0201 	orr.w	r2, r2, #1
 8005fc6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2220      	movs	r2, #32
 8005fd2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2200      	movs	r2, #0
 8005fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8005fe4:	2300      	movs	r3, #0
}
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
	...

08005ff0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b088      	sub	sp, #32
 8005ff4:	af02      	add	r7, sp, #8
 8005ff6:	60f8      	str	r0, [r7, #12]
 8005ff8:	607a      	str	r2, [r7, #4]
 8005ffa:	461a      	mov	r2, r3
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	817b      	strh	r3, [r7, #10]
 8006000:	4613      	mov	r3, r2
 8006002:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800600a:	b2db      	uxtb	r3, r3
 800600c:	2b20      	cmp	r3, #32
 800600e:	f040 80da 	bne.w	80061c6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006012:	68fb      	ldr	r3, [r7, #12]
 8006014:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006018:	2b01      	cmp	r3, #1
 800601a:	d101      	bne.n	8006020 <HAL_I2C_Master_Transmit+0x30>
 800601c:	2302      	movs	r3, #2
 800601e:	e0d3      	b.n	80061c8 <HAL_I2C_Master_Transmit+0x1d8>
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8006028:	f7fd ff84 	bl	8003f34 <HAL_GetTick>
 800602c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	2319      	movs	r3, #25
 8006034:	2201      	movs	r2, #1
 8006036:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800603a:	68f8      	ldr	r0, [r7, #12]
 800603c:	f000 f8f0 	bl	8006220 <I2C_WaitOnFlagUntilTimeout>
 8006040:	4603      	mov	r3, r0
 8006042:	2b00      	cmp	r3, #0
 8006044:	d001      	beq.n	800604a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8006046:	2301      	movs	r3, #1
 8006048:	e0be      	b.n	80061c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800604a:	68fb      	ldr	r3, [r7, #12]
 800604c:	2221      	movs	r2, #33	; 0x21
 800604e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2210      	movs	r2, #16
 8006056:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	2200      	movs	r2, #0
 800605e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8006060:	68fb      	ldr	r3, [r7, #12]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	893a      	ldrh	r2, [r7, #8]
 800606a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800606c:	68fb      	ldr	r3, [r7, #12]
 800606e:	2200      	movs	r2, #0
 8006070:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006076:	b29b      	uxth	r3, r3
 8006078:	2bff      	cmp	r3, #255	; 0xff
 800607a:	d90e      	bls.n	800609a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	22ff      	movs	r2, #255	; 0xff
 8006080:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006086:	b2da      	uxtb	r2, r3
 8006088:	8979      	ldrh	r1, [r7, #10]
 800608a:	4b51      	ldr	r3, [pc, #324]	; (80061d0 <HAL_I2C_Master_Transmit+0x1e0>)
 800608c:	9300      	str	r3, [sp, #0]
 800608e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006092:	68f8      	ldr	r0, [r7, #12]
 8006094:	f000 fa6c 	bl	8006570 <I2C_TransferConfig>
 8006098:	e06c      	b.n	8006174 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800609a:	68fb      	ldr	r3, [r7, #12]
 800609c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800609e:	b29a      	uxth	r2, r3
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060a8:	b2da      	uxtb	r2, r3
 80060aa:	8979      	ldrh	r1, [r7, #10]
 80060ac:	4b48      	ldr	r3, [pc, #288]	; (80061d0 <HAL_I2C_Master_Transmit+0x1e0>)
 80060ae:	9300      	str	r3, [sp, #0]
 80060b0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80060b4:	68f8      	ldr	r0, [r7, #12]
 80060b6:	f000 fa5b 	bl	8006570 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80060ba:	e05b      	b.n	8006174 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80060bc:	697a      	ldr	r2, [r7, #20]
 80060be:	6a39      	ldr	r1, [r7, #32]
 80060c0:	68f8      	ldr	r0, [r7, #12]
 80060c2:	f000 f8ed 	bl	80062a0 <I2C_WaitOnTXISFlagUntilTimeout>
 80060c6:	4603      	mov	r3, r0
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d001      	beq.n	80060d0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80060cc:	2301      	movs	r3, #1
 80060ce:	e07b      	b.n	80061c8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060d4:	781a      	ldrb	r2, [r3, #0]
 80060d6:	68fb      	ldr	r3, [r7, #12]
 80060d8:	681b      	ldr	r3, [r3, #0]
 80060da:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060e0:	1c5a      	adds	r2, r3, #1
 80060e2:	68fb      	ldr	r3, [r7, #12]
 80060e4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060ea:	b29b      	uxth	r3, r3
 80060ec:	3b01      	subs	r3, #1
 80060ee:	b29a      	uxth	r2, r3
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80060f8:	3b01      	subs	r3, #1
 80060fa:	b29a      	uxth	r2, r3
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006104:	b29b      	uxth	r3, r3
 8006106:	2b00      	cmp	r3, #0
 8006108:	d034      	beq.n	8006174 <HAL_I2C_Master_Transmit+0x184>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800610e:	2b00      	cmp	r3, #0
 8006110:	d130      	bne.n	8006174 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006112:	697b      	ldr	r3, [r7, #20]
 8006114:	9300      	str	r3, [sp, #0]
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	2200      	movs	r2, #0
 800611a:	2180      	movs	r1, #128	; 0x80
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f87f 	bl	8006220 <I2C_WaitOnFlagUntilTimeout>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e04d      	b.n	80061c8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800612c:	68fb      	ldr	r3, [r7, #12]
 800612e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006130:	b29b      	uxth	r3, r3
 8006132:	2bff      	cmp	r3, #255	; 0xff
 8006134:	d90e      	bls.n	8006154 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006136:	68fb      	ldr	r3, [r7, #12]
 8006138:	22ff      	movs	r2, #255	; 0xff
 800613a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006140:	b2da      	uxtb	r2, r3
 8006142:	8979      	ldrh	r1, [r7, #10]
 8006144:	2300      	movs	r3, #0
 8006146:	9300      	str	r3, [sp, #0]
 8006148:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800614c:	68f8      	ldr	r0, [r7, #12]
 800614e:	f000 fa0f 	bl	8006570 <I2C_TransferConfig>
 8006152:	e00f      	b.n	8006174 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006158:	b29a      	uxth	r2, r3
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006162:	b2da      	uxtb	r2, r3
 8006164:	8979      	ldrh	r1, [r7, #10]
 8006166:	2300      	movs	r3, #0
 8006168:	9300      	str	r3, [sp, #0]
 800616a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800616e:	68f8      	ldr	r0, [r7, #12]
 8006170:	f000 f9fe 	bl	8006570 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006178:	b29b      	uxth	r3, r3
 800617a:	2b00      	cmp	r3, #0
 800617c:	d19e      	bne.n	80060bc <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800617e:	697a      	ldr	r2, [r7, #20]
 8006180:	6a39      	ldr	r1, [r7, #32]
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f000 f8cc 	bl	8006320 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800618e:	2301      	movs	r3, #1
 8006190:	e01a      	b.n	80061c8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	2220      	movs	r2, #32
 8006198:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800619a:	68fb      	ldr	r3, [r7, #12]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6859      	ldr	r1, [r3, #4]
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	681a      	ldr	r2, [r3, #0]
 80061a4:	4b0b      	ldr	r3, [pc, #44]	; (80061d4 <HAL_I2C_Master_Transmit+0x1e4>)
 80061a6:	400b      	ands	r3, r1
 80061a8:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	2220      	movs	r2, #32
 80061ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2200      	movs	r2, #0
 80061b6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	2200      	movs	r2, #0
 80061be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80061c2:	2300      	movs	r3, #0
 80061c4:	e000      	b.n	80061c8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80061c6:	2302      	movs	r3, #2
  }
}
 80061c8:	4618      	mov	r0, r3
 80061ca:	3718      	adds	r7, #24
 80061cc:	46bd      	mov	sp, r7
 80061ce:	bd80      	pop	{r7, pc}
 80061d0:	80002000 	.word	0x80002000
 80061d4:	fe00e800 	.word	0xfe00e800

080061d8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80061d8:	b480      	push	{r7}
 80061da:	b083      	sub	sp, #12
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	699b      	ldr	r3, [r3, #24]
 80061e6:	f003 0302 	and.w	r3, r3, #2
 80061ea:	2b02      	cmp	r3, #2
 80061ec:	d103      	bne.n	80061f6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	2200      	movs	r2, #0
 80061f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	699b      	ldr	r3, [r3, #24]
 80061fc:	f003 0301 	and.w	r3, r3, #1
 8006200:	2b01      	cmp	r3, #1
 8006202:	d007      	beq.n	8006214 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	699a      	ldr	r2, [r3, #24]
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	f042 0201 	orr.w	r2, r2, #1
 8006212:	619a      	str	r2, [r3, #24]
  }
}
 8006214:	bf00      	nop
 8006216:	370c      	adds	r7, #12
 8006218:	46bd      	mov	sp, r7
 800621a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621e:	4770      	bx	lr

08006220 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8006220:	b580      	push	{r7, lr}
 8006222:	b084      	sub	sp, #16
 8006224:	af00      	add	r7, sp, #0
 8006226:	60f8      	str	r0, [r7, #12]
 8006228:	60b9      	str	r1, [r7, #8]
 800622a:	603b      	str	r3, [r7, #0]
 800622c:	4613      	mov	r3, r2
 800622e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006230:	e022      	b.n	8006278 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006232:	683b      	ldr	r3, [r7, #0]
 8006234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006238:	d01e      	beq.n	8006278 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800623a:	f7fd fe7b 	bl	8003f34 <HAL_GetTick>
 800623e:	4602      	mov	r2, r0
 8006240:	69bb      	ldr	r3, [r7, #24]
 8006242:	1ad3      	subs	r3, r2, r3
 8006244:	683a      	ldr	r2, [r7, #0]
 8006246:	429a      	cmp	r2, r3
 8006248:	d302      	bcc.n	8006250 <I2C_WaitOnFlagUntilTimeout+0x30>
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d113      	bne.n	8006278 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006254:	f043 0220 	orr.w	r2, r3, #32
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	2220      	movs	r2, #32
 8006260:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	2200      	movs	r2, #0
 8006268:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	2200      	movs	r2, #0
 8006270:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006274:	2301      	movs	r3, #1
 8006276:	e00f      	b.n	8006298 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699a      	ldr	r2, [r3, #24]
 800627e:	68bb      	ldr	r3, [r7, #8]
 8006280:	4013      	ands	r3, r2
 8006282:	68ba      	ldr	r2, [r7, #8]
 8006284:	429a      	cmp	r2, r3
 8006286:	bf0c      	ite	eq
 8006288:	2301      	moveq	r3, #1
 800628a:	2300      	movne	r3, #0
 800628c:	b2db      	uxtb	r3, r3
 800628e:	461a      	mov	r2, r3
 8006290:	79fb      	ldrb	r3, [r7, #7]
 8006292:	429a      	cmp	r2, r3
 8006294:	d0cd      	beq.n	8006232 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006296:	2300      	movs	r3, #0
}
 8006298:	4618      	mov	r0, r3
 800629a:	3710      	adds	r7, #16
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}

080062a0 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80062a0:	b580      	push	{r7, lr}
 80062a2:	b084      	sub	sp, #16
 80062a4:	af00      	add	r7, sp, #0
 80062a6:	60f8      	str	r0, [r7, #12]
 80062a8:	60b9      	str	r1, [r7, #8]
 80062aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80062ac:	e02c      	b.n	8006308 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ae:	687a      	ldr	r2, [r7, #4]
 80062b0:	68b9      	ldr	r1, [r7, #8]
 80062b2:	68f8      	ldr	r0, [r7, #12]
 80062b4:	f000 f870 	bl	8006398 <I2C_IsErrorOccurred>
 80062b8:	4603      	mov	r3, r0
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d001      	beq.n	80062c2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80062be:	2301      	movs	r3, #1
 80062c0:	e02a      	b.n	8006318 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062c8:	d01e      	beq.n	8006308 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80062ca:	f7fd fe33 	bl	8003f34 <HAL_GetTick>
 80062ce:	4602      	mov	r2, r0
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	1ad3      	subs	r3, r2, r3
 80062d4:	68ba      	ldr	r2, [r7, #8]
 80062d6:	429a      	cmp	r2, r3
 80062d8:	d302      	bcc.n	80062e0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80062da:	68bb      	ldr	r3, [r7, #8]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d113      	bne.n	8006308 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80062e4:	f043 0220 	orr.w	r2, r3, #32
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2220      	movs	r2, #32
 80062f0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	2200      	movs	r2, #0
 8006300:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006304:	2301      	movs	r3, #1
 8006306:	e007      	b.n	8006318 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	699b      	ldr	r3, [r3, #24]
 800630e:	f003 0302 	and.w	r3, r3, #2
 8006312:	2b02      	cmp	r3, #2
 8006314:	d1cb      	bne.n	80062ae <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006316:	2300      	movs	r3, #0
}
 8006318:	4618      	mov	r0, r3
 800631a:	3710      	adds	r7, #16
 800631c:	46bd      	mov	sp, r7
 800631e:	bd80      	pop	{r7, pc}

08006320 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006320:	b580      	push	{r7, lr}
 8006322:	b084      	sub	sp, #16
 8006324:	af00      	add	r7, sp, #0
 8006326:	60f8      	str	r0, [r7, #12]
 8006328:	60b9      	str	r1, [r7, #8]
 800632a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800632c:	e028      	b.n	8006380 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800632e:	687a      	ldr	r2, [r7, #4]
 8006330:	68b9      	ldr	r1, [r7, #8]
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f000 f830 	bl	8006398 <I2C_IsErrorOccurred>
 8006338:	4603      	mov	r3, r0
 800633a:	2b00      	cmp	r3, #0
 800633c:	d001      	beq.n	8006342 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800633e:	2301      	movs	r3, #1
 8006340:	e026      	b.n	8006390 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006342:	f7fd fdf7 	bl	8003f34 <HAL_GetTick>
 8006346:	4602      	mov	r2, r0
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	1ad3      	subs	r3, r2, r3
 800634c:	68ba      	ldr	r2, [r7, #8]
 800634e:	429a      	cmp	r2, r3
 8006350:	d302      	bcc.n	8006358 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006352:	68bb      	ldr	r3, [r7, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d113      	bne.n	8006380 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800635c:	f043 0220 	orr.w	r2, r3, #32
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	2220      	movs	r2, #32
 8006368:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	2200      	movs	r2, #0
 8006370:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	2200      	movs	r2, #0
 8006378:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	e007      	b.n	8006390 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	699b      	ldr	r3, [r3, #24]
 8006386:	f003 0320 	and.w	r3, r3, #32
 800638a:	2b20      	cmp	r3, #32
 800638c:	d1cf      	bne.n	800632e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b08a      	sub	sp, #40	; 0x28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80063a4:	2300      	movs	r3, #0
 80063a6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	699b      	ldr	r3, [r3, #24]
 80063b0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80063b2:	2300      	movs	r3, #0
 80063b4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80063ba:	69bb      	ldr	r3, [r7, #24]
 80063bc:	f003 0310 	and.w	r3, r3, #16
 80063c0:	2b00      	cmp	r3, #0
 80063c2:	d075      	beq.n	80064b0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	2210      	movs	r2, #16
 80063ca:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80063cc:	e056      	b.n	800647c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80063ce:	68bb      	ldr	r3, [r7, #8]
 80063d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d4:	d052      	beq.n	800647c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80063d6:	f7fd fdad 	bl	8003f34 <HAL_GetTick>
 80063da:	4602      	mov	r2, r0
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	1ad3      	subs	r3, r2, r3
 80063e0:	68ba      	ldr	r2, [r7, #8]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d302      	bcc.n	80063ec <I2C_IsErrorOccurred+0x54>
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d147      	bne.n	800647c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	685b      	ldr	r3, [r3, #4]
 80063f2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80063f6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80063fe:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	699b      	ldr	r3, [r3, #24]
 8006406:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800640a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800640e:	d12e      	bne.n	800646e <I2C_IsErrorOccurred+0xd6>
 8006410:	697b      	ldr	r3, [r7, #20]
 8006412:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006416:	d02a      	beq.n	800646e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006418:	7cfb      	ldrb	r3, [r7, #19]
 800641a:	2b20      	cmp	r3, #32
 800641c:	d027      	beq.n	800646e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800641e:	68fb      	ldr	r3, [r7, #12]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	68fb      	ldr	r3, [r7, #12]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800642c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800642e:	f7fd fd81 	bl	8003f34 <HAL_GetTick>
 8006432:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006434:	e01b      	b.n	800646e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006436:	f7fd fd7d 	bl	8003f34 <HAL_GetTick>
 800643a:	4602      	mov	r2, r0
 800643c:	69fb      	ldr	r3, [r7, #28]
 800643e:	1ad3      	subs	r3, r2, r3
 8006440:	2b19      	cmp	r3, #25
 8006442:	d914      	bls.n	800646e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006448:	f043 0220 	orr.w	r2, r3, #32
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006450:	68fb      	ldr	r3, [r7, #12]
 8006452:	2220      	movs	r2, #32
 8006454:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006458:	68fb      	ldr	r3, [r7, #12]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	2200      	movs	r2, #0
 8006464:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8006468:	2301      	movs	r3, #1
 800646a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	f003 0320 	and.w	r3, r3, #32
 8006478:	2b20      	cmp	r3, #32
 800647a:	d1dc      	bne.n	8006436 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800647c:	68fb      	ldr	r3, [r7, #12]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	699b      	ldr	r3, [r3, #24]
 8006482:	f003 0320 	and.w	r3, r3, #32
 8006486:	2b20      	cmp	r3, #32
 8006488:	d003      	beq.n	8006492 <I2C_IsErrorOccurred+0xfa>
 800648a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800648e:	2b00      	cmp	r3, #0
 8006490:	d09d      	beq.n	80063ce <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006492:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006496:	2b00      	cmp	r3, #0
 8006498:	d103      	bne.n	80064a2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	2220      	movs	r2, #32
 80064a0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80064a2:	6a3b      	ldr	r3, [r7, #32]
 80064a4:	f043 0304 	orr.w	r3, r3, #4
 80064a8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80064aa:	2301      	movs	r3, #1
 80064ac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	699b      	ldr	r3, [r3, #24]
 80064b6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80064b8:	69bb      	ldr	r3, [r7, #24]
 80064ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80064be:	2b00      	cmp	r3, #0
 80064c0:	d00b      	beq.n	80064da <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	f043 0301 	orr.w	r3, r3, #1
 80064c8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80064d2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064d4:	2301      	movs	r3, #1
 80064d6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80064da:	69bb      	ldr	r3, [r7, #24]
 80064dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00b      	beq.n	80064fc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80064e4:	6a3b      	ldr	r3, [r7, #32]
 80064e6:	f043 0308 	orr.w	r3, r3, #8
 80064ea:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	681b      	ldr	r3, [r3, #0]
 80064f0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80064f4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80064f6:	2301      	movs	r3, #1
 80064f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80064fc:	69bb      	ldr	r3, [r7, #24]
 80064fe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006502:	2b00      	cmp	r3, #0
 8006504:	d00b      	beq.n	800651e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006506:	6a3b      	ldr	r3, [r7, #32]
 8006508:	f043 0302 	orr.w	r3, r3, #2
 800650c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	681b      	ldr	r3, [r3, #0]
 8006512:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006516:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800651e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006522:	2b00      	cmp	r3, #0
 8006524:	d01c      	beq.n	8006560 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f7ff fe56 	bl	80061d8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	6859      	ldr	r1, [r3, #4]
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	681a      	ldr	r2, [r3, #0]
 8006536:	4b0d      	ldr	r3, [pc, #52]	; (800656c <I2C_IsErrorOccurred+0x1d4>)
 8006538:	400b      	ands	r3, r1
 800653a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006540:	6a3b      	ldr	r3, [r7, #32]
 8006542:	431a      	orrs	r2, r3
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2220      	movs	r2, #32
 800654c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006558:	68fb      	ldr	r3, [r7, #12]
 800655a:	2200      	movs	r2, #0
 800655c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8006560:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8006564:	4618      	mov	r0, r3
 8006566:	3728      	adds	r7, #40	; 0x28
 8006568:	46bd      	mov	sp, r7
 800656a:	bd80      	pop	{r7, pc}
 800656c:	fe00e800 	.word	0xfe00e800

08006570 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8006570:	b480      	push	{r7}
 8006572:	b087      	sub	sp, #28
 8006574:	af00      	add	r7, sp, #0
 8006576:	60f8      	str	r0, [r7, #12]
 8006578:	607b      	str	r3, [r7, #4]
 800657a:	460b      	mov	r3, r1
 800657c:	817b      	strh	r3, [r7, #10]
 800657e:	4613      	mov	r3, r2
 8006580:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006582:	897b      	ldrh	r3, [r7, #10]
 8006584:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006588:	7a7b      	ldrb	r3, [r7, #9]
 800658a:	041b      	lsls	r3, r3, #16
 800658c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006590:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	4313      	orrs	r3, r2
 800659a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800659e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80065a0:	68fb      	ldr	r3, [r7, #12]
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	685a      	ldr	r2, [r3, #4]
 80065a6:	6a3b      	ldr	r3, [r7, #32]
 80065a8:	0d5b      	lsrs	r3, r3, #21
 80065aa:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80065ae:	4b08      	ldr	r3, [pc, #32]	; (80065d0 <I2C_TransferConfig+0x60>)
 80065b0:	430b      	orrs	r3, r1
 80065b2:	43db      	mvns	r3, r3
 80065b4:	ea02 0103 	and.w	r1, r2, r3
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	697a      	ldr	r2, [r7, #20]
 80065be:	430a      	orrs	r2, r1
 80065c0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80065c2:	bf00      	nop
 80065c4:	371c      	adds	r7, #28
 80065c6:	46bd      	mov	sp, r7
 80065c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065cc:	4770      	bx	lr
 80065ce:	bf00      	nop
 80065d0:	03ff63ff 	.word	0x03ff63ff

080065d4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80065d4:	b480      	push	{r7}
 80065d6:	b083      	sub	sp, #12
 80065d8:	af00      	add	r7, sp, #0
 80065da:	6078      	str	r0, [r7, #4]
 80065dc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b20      	cmp	r3, #32
 80065e8:	d138      	bne.n	800665c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065f0:	2b01      	cmp	r3, #1
 80065f2:	d101      	bne.n	80065f8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80065f4:	2302      	movs	r3, #2
 80065f6:	e032      	b.n	800665e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2201      	movs	r2, #1
 80065fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2224      	movs	r2, #36	; 0x24
 8006604:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006608:	687b      	ldr	r3, [r7, #4]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	681a      	ldr	r2, [r3, #0]
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	f022 0201 	bic.w	r2, r2, #1
 8006616:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006626:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	6819      	ldr	r1, [r3, #0]
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	683a      	ldr	r2, [r7, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	681b      	ldr	r3, [r3, #0]
 8006642:	f042 0201 	orr.w	r2, r2, #1
 8006646:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2220      	movs	r2, #32
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	e000      	b.n	800665e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800665c:	2302      	movs	r3, #2
  }
}
 800665e:	4618      	mov	r0, r3
 8006660:	370c      	adds	r7, #12
 8006662:	46bd      	mov	sp, r7
 8006664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006668:	4770      	bx	lr

0800666a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800666a:	b480      	push	{r7}
 800666c:	b085      	sub	sp, #20
 800666e:	af00      	add	r7, sp, #0
 8006670:	6078      	str	r0, [r7, #4]
 8006672:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800667a:	b2db      	uxtb	r3, r3
 800667c:	2b20      	cmp	r3, #32
 800667e:	d139      	bne.n	80066f4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006686:	2b01      	cmp	r3, #1
 8006688:	d101      	bne.n	800668e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800668a:	2302      	movs	r3, #2
 800668c:	e033      	b.n	80066f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	2201      	movs	r2, #1
 8006692:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2224      	movs	r2, #36	; 0x24
 800669a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	681a      	ldr	r2, [r3, #0]
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f022 0201 	bic.w	r2, r2, #1
 80066ac:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	681b      	ldr	r3, [r3, #0]
 80066b4:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80066bc:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	021b      	lsls	r3, r3, #8
 80066c2:	68fa      	ldr	r2, [r7, #12]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	68fa      	ldr	r2, [r7, #12]
 80066ce:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f042 0201 	orr.w	r2, r2, #1
 80066de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80066f0:	2300      	movs	r3, #0
 80066f2:	e000      	b.n	80066f6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80066f4:	2302      	movs	r3, #2
  }
}
 80066f6:	4618      	mov	r0, r3
 80066f8:	3714      	adds	r7, #20
 80066fa:	46bd      	mov	sp, r7
 80066fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006700:	4770      	bx	lr
	...

08006704 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006704:	b480      	push	{r7}
 8006706:	b085      	sub	sp, #20
 8006708:	af00      	add	r7, sp, #0
 800670a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800670c:	4b0b      	ldr	r3, [pc, #44]	; (800673c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800670e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006710:	4a0a      	ldr	r2, [pc, #40]	; (800673c <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006712:	f043 0301 	orr.w	r3, r3, #1
 8006716:	6613      	str	r3, [r2, #96]	; 0x60
 8006718:	4b08      	ldr	r3, [pc, #32]	; (800673c <HAL_I2CEx_EnableFastModePlus+0x38>)
 800671a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800671c:	f003 0301 	and.w	r3, r3, #1
 8006720:	60fb      	str	r3, [r7, #12]
 8006722:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006724:	4b06      	ldr	r3, [pc, #24]	; (8006740 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	4905      	ldr	r1, [pc, #20]	; (8006740 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	4313      	orrs	r3, r2
 800672e:	604b      	str	r3, [r1, #4]
}
 8006730:	bf00      	nop
 8006732:	3714      	adds	r7, #20
 8006734:	46bd      	mov	sp, r7
 8006736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673a:	4770      	bx	lr
 800673c:	40021000 	.word	0x40021000
 8006740:	40010000 	.word	0x40010000

08006744 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006744:	b480      	push	{r7}
 8006746:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006748:	4b05      	ldr	r3, [pc, #20]	; (8006760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	4a04      	ldr	r2, [pc, #16]	; (8006760 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800674e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006752:	6013      	str	r3, [r2, #0]
}
 8006754:	bf00      	nop
 8006756:	46bd      	mov	sp, r7
 8006758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800675c:	4770      	bx	lr
 800675e:	bf00      	nop
 8006760:	40007000 	.word	0x40007000

08006764 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006764:	b480      	push	{r7}
 8006766:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006768:	4b04      	ldr	r3, [pc, #16]	; (800677c <HAL_PWREx_GetVoltageRange+0x18>)
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006770:	4618      	mov	r0, r3
 8006772:	46bd      	mov	sp, r7
 8006774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006778:	4770      	bx	lr
 800677a:	bf00      	nop
 800677c:	40007000 	.word	0x40007000

08006780 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006780:	b480      	push	{r7}
 8006782:	b085      	sub	sp, #20
 8006784:	af00      	add	r7, sp, #0
 8006786:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800678e:	d130      	bne.n	80067f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006790:	4b23      	ldr	r3, [pc, #140]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006798:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800679c:	d038      	beq.n	8006810 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800679e:	4b20      	ldr	r3, [pc, #128]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80067a6:	4a1e      	ldr	r2, [pc, #120]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80067ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80067ae:	4b1d      	ldr	r3, [pc, #116]	; (8006824 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80067b0:	681b      	ldr	r3, [r3, #0]
 80067b2:	2232      	movs	r2, #50	; 0x32
 80067b4:	fb02 f303 	mul.w	r3, r2, r3
 80067b8:	4a1b      	ldr	r2, [pc, #108]	; (8006828 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80067ba:	fba2 2303 	umull	r2, r3, r2, r3
 80067be:	0c9b      	lsrs	r3, r3, #18
 80067c0:	3301      	adds	r3, #1
 80067c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067c4:	e002      	b.n	80067cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	3b01      	subs	r3, #1
 80067ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80067cc:	4b14      	ldr	r3, [pc, #80]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067ce:	695b      	ldr	r3, [r3, #20]
 80067d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067d8:	d102      	bne.n	80067e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d1f2      	bne.n	80067c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80067e0:	4b0f      	ldr	r3, [pc, #60]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067e2:	695b      	ldr	r3, [r3, #20]
 80067e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80067e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067ec:	d110      	bne.n	8006810 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80067ee:	2303      	movs	r3, #3
 80067f0:	e00f      	b.n	8006812 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80067f2:	4b0b      	ldr	r3, [pc, #44]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80067fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80067fe:	d007      	beq.n	8006810 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006800:	4b07      	ldr	r3, [pc, #28]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006808:	4a05      	ldr	r2, [pc, #20]	; (8006820 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800680a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800680e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006810:	2300      	movs	r3, #0
}
 8006812:	4618      	mov	r0, r3
 8006814:	3714      	adds	r7, #20
 8006816:	46bd      	mov	sp, r7
 8006818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800681c:	4770      	bx	lr
 800681e:	bf00      	nop
 8006820:	40007000 	.word	0x40007000
 8006824:	20000034 	.word	0x20000034
 8006828:	431bde83 	.word	0x431bde83

0800682c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800682c:	b580      	push	{r7, lr}
 800682e:	b088      	sub	sp, #32
 8006830:	af00      	add	r7, sp, #0
 8006832:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d102      	bne.n	8006840 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800683a:	2301      	movs	r3, #1
 800683c:	f000 bc02 	b.w	8007044 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006840:	4b96      	ldr	r3, [pc, #600]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006842:	689b      	ldr	r3, [r3, #8]
 8006844:	f003 030c 	and.w	r3, r3, #12
 8006848:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800684a:	4b94      	ldr	r3, [pc, #592]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 800684c:	68db      	ldr	r3, [r3, #12]
 800684e:	f003 0303 	and.w	r3, r3, #3
 8006852:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f003 0310 	and.w	r3, r3, #16
 800685c:	2b00      	cmp	r3, #0
 800685e:	f000 80e4 	beq.w	8006a2a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d007      	beq.n	8006878 <HAL_RCC_OscConfig+0x4c>
 8006868:	69bb      	ldr	r3, [r7, #24]
 800686a:	2b0c      	cmp	r3, #12
 800686c:	f040 808b 	bne.w	8006986 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006870:	697b      	ldr	r3, [r7, #20]
 8006872:	2b01      	cmp	r3, #1
 8006874:	f040 8087 	bne.w	8006986 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006878:	4b88      	ldr	r3, [pc, #544]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	f003 0302 	and.w	r3, r3, #2
 8006880:	2b00      	cmp	r3, #0
 8006882:	d005      	beq.n	8006890 <HAL_RCC_OscConfig+0x64>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	699b      	ldr	r3, [r3, #24]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d101      	bne.n	8006890 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800688c:	2301      	movs	r3, #1
 800688e:	e3d9      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6a1a      	ldr	r2, [r3, #32]
 8006894:	4b81      	ldr	r3, [pc, #516]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	f003 0308 	and.w	r3, r3, #8
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <HAL_RCC_OscConfig+0x7e>
 80068a0:	4b7e      	ldr	r3, [pc, #504]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068a8:	e005      	b.n	80068b6 <HAL_RCC_OscConfig+0x8a>
 80068aa:	4b7c      	ldr	r3, [pc, #496]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80068ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80068b0:	091b      	lsrs	r3, r3, #4
 80068b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d223      	bcs.n	8006902 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	6a1b      	ldr	r3, [r3, #32]
 80068be:	4618      	mov	r0, r3
 80068c0:	f000 fdbe 	bl	8007440 <RCC_SetFlashLatencyFromMSIRange>
 80068c4:	4603      	mov	r3, r0
 80068c6:	2b00      	cmp	r3, #0
 80068c8:	d001      	beq.n	80068ce <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80068ca:	2301      	movs	r3, #1
 80068cc:	e3ba      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80068ce:	4b73      	ldr	r3, [pc, #460]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	4a72      	ldr	r2, [pc, #456]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80068d4:	f043 0308 	orr.w	r3, r3, #8
 80068d8:	6013      	str	r3, [r2, #0]
 80068da:	4b70      	ldr	r3, [pc, #448]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	6a1b      	ldr	r3, [r3, #32]
 80068e6:	496d      	ldr	r1, [pc, #436]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80068e8:	4313      	orrs	r3, r2
 80068ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80068ec:	4b6b      	ldr	r3, [pc, #428]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	021b      	lsls	r3, r3, #8
 80068fa:	4968      	ldr	r1, [pc, #416]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80068fc:	4313      	orrs	r3, r2
 80068fe:	604b      	str	r3, [r1, #4]
 8006900:	e025      	b.n	800694e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006902:	4b66      	ldr	r3, [pc, #408]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a65      	ldr	r2, [pc, #404]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006908:	f043 0308 	orr.w	r3, r3, #8
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	4b63      	ldr	r3, [pc, #396]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	6a1b      	ldr	r3, [r3, #32]
 800691a:	4960      	ldr	r1, [pc, #384]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 800691c:	4313      	orrs	r3, r2
 800691e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006920:	4b5e      	ldr	r3, [pc, #376]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006922:	685b      	ldr	r3, [r3, #4]
 8006924:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	021b      	lsls	r3, r3, #8
 800692e:	495b      	ldr	r1, [pc, #364]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006930:	4313      	orrs	r3, r2
 8006932:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006934:	69bb      	ldr	r3, [r7, #24]
 8006936:	2b00      	cmp	r3, #0
 8006938:	d109      	bne.n	800694e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	6a1b      	ldr	r3, [r3, #32]
 800693e:	4618      	mov	r0, r3
 8006940:	f000 fd7e 	bl	8007440 <RCC_SetFlashLatencyFromMSIRange>
 8006944:	4603      	mov	r3, r0
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800694a:	2301      	movs	r3, #1
 800694c:	e37a      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800694e:	f000 fc81 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 8006952:	4602      	mov	r2, r0
 8006954:	4b51      	ldr	r3, [pc, #324]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006956:	689b      	ldr	r3, [r3, #8]
 8006958:	091b      	lsrs	r3, r3, #4
 800695a:	f003 030f 	and.w	r3, r3, #15
 800695e:	4950      	ldr	r1, [pc, #320]	; (8006aa0 <HAL_RCC_OscConfig+0x274>)
 8006960:	5ccb      	ldrb	r3, [r1, r3]
 8006962:	f003 031f 	and.w	r3, r3, #31
 8006966:	fa22 f303 	lsr.w	r3, r2, r3
 800696a:	4a4e      	ldr	r2, [pc, #312]	; (8006aa4 <HAL_RCC_OscConfig+0x278>)
 800696c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800696e:	4b4e      	ldr	r3, [pc, #312]	; (8006aa8 <HAL_RCC_OscConfig+0x27c>)
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	4618      	mov	r0, r3
 8006974:	f7fd f990 	bl	8003c98 <HAL_InitTick>
 8006978:	4603      	mov	r3, r0
 800697a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800697c:	7bfb      	ldrb	r3, [r7, #15]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d052      	beq.n	8006a28 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	e35e      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	699b      	ldr	r3, [r3, #24]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d032      	beq.n	80069f4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800698e:	4b43      	ldr	r3, [pc, #268]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	4a42      	ldr	r2, [pc, #264]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006994:	f043 0301 	orr.w	r3, r3, #1
 8006998:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800699a:	f7fd facb 	bl	8003f34 <HAL_GetTick>
 800699e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069a0:	e008      	b.n	80069b4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80069a2:	f7fd fac7 	bl	8003f34 <HAL_GetTick>
 80069a6:	4602      	mov	r2, r0
 80069a8:	693b      	ldr	r3, [r7, #16]
 80069aa:	1ad3      	subs	r3, r2, r3
 80069ac:	2b02      	cmp	r3, #2
 80069ae:	d901      	bls.n	80069b4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80069b0:	2303      	movs	r3, #3
 80069b2:	e347      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80069b4:	4b39      	ldr	r3, [pc, #228]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	f003 0302 	and.w	r3, r3, #2
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d0f0      	beq.n	80069a2 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80069c0:	4b36      	ldr	r3, [pc, #216]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	4a35      	ldr	r2, [pc, #212]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80069c6:	f043 0308 	orr.w	r3, r3, #8
 80069ca:	6013      	str	r3, [r2, #0]
 80069cc:	4b33      	ldr	r3, [pc, #204]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80069d4:	687b      	ldr	r3, [r7, #4]
 80069d6:	6a1b      	ldr	r3, [r3, #32]
 80069d8:	4930      	ldr	r1, [pc, #192]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80069da:	4313      	orrs	r3, r2
 80069dc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80069de:	4b2f      	ldr	r3, [pc, #188]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	021b      	lsls	r3, r3, #8
 80069ec:	492b      	ldr	r1, [pc, #172]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	604b      	str	r3, [r1, #4]
 80069f2:	e01a      	b.n	8006a2a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80069f4:	4b29      	ldr	r3, [pc, #164]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	4a28      	ldr	r2, [pc, #160]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 80069fa:	f023 0301 	bic.w	r3, r3, #1
 80069fe:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006a00:	f7fd fa98 	bl	8003f34 <HAL_GetTick>
 8006a04:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a06:	e008      	b.n	8006a1a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006a08:	f7fd fa94 	bl	8003f34 <HAL_GetTick>
 8006a0c:	4602      	mov	r2, r0
 8006a0e:	693b      	ldr	r3, [r7, #16]
 8006a10:	1ad3      	subs	r3, r2, r3
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	d901      	bls.n	8006a1a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006a16:	2303      	movs	r3, #3
 8006a18:	e314      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006a1a:	4b20      	ldr	r3, [pc, #128]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f003 0302 	and.w	r3, r3, #2
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d1f0      	bne.n	8006a08 <HAL_RCC_OscConfig+0x1dc>
 8006a26:	e000      	b.n	8006a2a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006a28:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	f003 0301 	and.w	r3, r3, #1
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d073      	beq.n	8006b1e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006a36:	69bb      	ldr	r3, [r7, #24]
 8006a38:	2b08      	cmp	r3, #8
 8006a3a:	d005      	beq.n	8006a48 <HAL_RCC_OscConfig+0x21c>
 8006a3c:	69bb      	ldr	r3, [r7, #24]
 8006a3e:	2b0c      	cmp	r3, #12
 8006a40:	d10e      	bne.n	8006a60 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006a42:	697b      	ldr	r3, [r7, #20]
 8006a44:	2b03      	cmp	r3, #3
 8006a46:	d10b      	bne.n	8006a60 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006a48:	4b14      	ldr	r3, [pc, #80]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006a50:	2b00      	cmp	r3, #0
 8006a52:	d063      	beq.n	8006b1c <HAL_RCC_OscConfig+0x2f0>
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d15f      	bne.n	8006b1c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006a5c:	2301      	movs	r3, #1
 8006a5e:	e2f1      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a68:	d106      	bne.n	8006a78 <HAL_RCC_OscConfig+0x24c>
 8006a6a:	4b0c      	ldr	r3, [pc, #48]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	4a0b      	ldr	r2, [pc, #44]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a74:	6013      	str	r3, [r2, #0]
 8006a76:	e025      	b.n	8006ac4 <HAL_RCC_OscConfig+0x298>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	685b      	ldr	r3, [r3, #4]
 8006a7c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006a80:	d114      	bne.n	8006aac <HAL_RCC_OscConfig+0x280>
 8006a82:	4b06      	ldr	r3, [pc, #24]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a05      	ldr	r2, [pc, #20]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006a88:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006a8c:	6013      	str	r3, [r2, #0]
 8006a8e:	4b03      	ldr	r3, [pc, #12]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	4a02      	ldr	r2, [pc, #8]	; (8006a9c <HAL_RCC_OscConfig+0x270>)
 8006a94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	e013      	b.n	8006ac4 <HAL_RCC_OscConfig+0x298>
 8006a9c:	40021000 	.word	0x40021000
 8006aa0:	0800ca50 	.word	0x0800ca50
 8006aa4:	20000034 	.word	0x20000034
 8006aa8:	20000038 	.word	0x20000038
 8006aac:	4ba0      	ldr	r3, [pc, #640]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	4a9f      	ldr	r2, [pc, #636]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006ab2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	4b9d      	ldr	r3, [pc, #628]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	4a9c      	ldr	r2, [pc, #624]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006abe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ac2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	685b      	ldr	r3, [r3, #4]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d013      	beq.n	8006af4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006acc:	f7fd fa32 	bl	8003f34 <HAL_GetTick>
 8006ad0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ad2:	e008      	b.n	8006ae6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006ad4:	f7fd fa2e 	bl	8003f34 <HAL_GetTick>
 8006ad8:	4602      	mov	r2, r0
 8006ada:	693b      	ldr	r3, [r7, #16]
 8006adc:	1ad3      	subs	r3, r2, r3
 8006ade:	2b64      	cmp	r3, #100	; 0x64
 8006ae0:	d901      	bls.n	8006ae6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006ae2:	2303      	movs	r3, #3
 8006ae4:	e2ae      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006ae6:	4b92      	ldr	r3, [pc, #584]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006aee:	2b00      	cmp	r3, #0
 8006af0:	d0f0      	beq.n	8006ad4 <HAL_RCC_OscConfig+0x2a8>
 8006af2:	e014      	b.n	8006b1e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006af4:	f7fd fa1e 	bl	8003f34 <HAL_GetTick>
 8006af8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006afa:	e008      	b.n	8006b0e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006afc:	f7fd fa1a 	bl	8003f34 <HAL_GetTick>
 8006b00:	4602      	mov	r2, r0
 8006b02:	693b      	ldr	r3, [r7, #16]
 8006b04:	1ad3      	subs	r3, r2, r3
 8006b06:	2b64      	cmp	r3, #100	; 0x64
 8006b08:	d901      	bls.n	8006b0e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e29a      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006b0e:	4b88      	ldr	r3, [pc, #544]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d1f0      	bne.n	8006afc <HAL_RCC_OscConfig+0x2d0>
 8006b1a:	e000      	b.n	8006b1e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006b1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	f003 0302 	and.w	r3, r3, #2
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d060      	beq.n	8006bec <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006b2a:	69bb      	ldr	r3, [r7, #24]
 8006b2c:	2b04      	cmp	r3, #4
 8006b2e:	d005      	beq.n	8006b3c <HAL_RCC_OscConfig+0x310>
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	2b0c      	cmp	r3, #12
 8006b34:	d119      	bne.n	8006b6a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006b36:	697b      	ldr	r3, [r7, #20]
 8006b38:	2b02      	cmp	r3, #2
 8006b3a:	d116      	bne.n	8006b6a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b3c:	4b7c      	ldr	r3, [pc, #496]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d005      	beq.n	8006b54 <HAL_RCC_OscConfig+0x328>
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d101      	bne.n	8006b54 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006b50:	2301      	movs	r3, #1
 8006b52:	e277      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006b54:	4b76      	ldr	r3, [pc, #472]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006b56:	685b      	ldr	r3, [r3, #4]
 8006b58:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	691b      	ldr	r3, [r3, #16]
 8006b60:	061b      	lsls	r3, r3, #24
 8006b62:	4973      	ldr	r1, [pc, #460]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006b64:	4313      	orrs	r3, r2
 8006b66:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006b68:	e040      	b.n	8006bec <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	68db      	ldr	r3, [r3, #12]
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d023      	beq.n	8006bba <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006b72:	4b6f      	ldr	r3, [pc, #444]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a6e      	ldr	r2, [pc, #440]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006b78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006b7e:	f7fd f9d9 	bl	8003f34 <HAL_GetTick>
 8006b82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b84:	e008      	b.n	8006b98 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006b86:	f7fd f9d5 	bl	8003f34 <HAL_GetTick>
 8006b8a:	4602      	mov	r2, r0
 8006b8c:	693b      	ldr	r3, [r7, #16]
 8006b8e:	1ad3      	subs	r3, r2, r3
 8006b90:	2b02      	cmp	r3, #2
 8006b92:	d901      	bls.n	8006b98 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006b94:	2303      	movs	r3, #3
 8006b96:	e255      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006b98:	4b65      	ldr	r3, [pc, #404]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	d0f0      	beq.n	8006b86 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ba4:	4b62      	ldr	r3, [pc, #392]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	691b      	ldr	r3, [r3, #16]
 8006bb0:	061b      	lsls	r3, r3, #24
 8006bb2:	495f      	ldr	r1, [pc, #380]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006bb4:	4313      	orrs	r3, r2
 8006bb6:	604b      	str	r3, [r1, #4]
 8006bb8:	e018      	b.n	8006bec <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006bba:	4b5d      	ldr	r3, [pc, #372]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	4a5c      	ldr	r2, [pc, #368]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006bc0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006bc4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006bc6:	f7fd f9b5 	bl	8003f34 <HAL_GetTick>
 8006bca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006bcc:	e008      	b.n	8006be0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006bce:	f7fd f9b1 	bl	8003f34 <HAL_GetTick>
 8006bd2:	4602      	mov	r2, r0
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	1ad3      	subs	r3, r2, r3
 8006bd8:	2b02      	cmp	r3, #2
 8006bda:	d901      	bls.n	8006be0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006bdc:	2303      	movs	r3, #3
 8006bde:	e231      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006be0:	4b53      	ldr	r3, [pc, #332]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d1f0      	bne.n	8006bce <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006bec:	687b      	ldr	r3, [r7, #4]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d03c      	beq.n	8006c72 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	695b      	ldr	r3, [r3, #20]
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d01c      	beq.n	8006c3a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006c00:	4b4b      	ldr	r3, [pc, #300]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006c02:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c06:	4a4a      	ldr	r2, [pc, #296]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006c08:	f043 0301 	orr.w	r3, r3, #1
 8006c0c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c10:	f7fd f990 	bl	8003f34 <HAL_GetTick>
 8006c14:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c16:	e008      	b.n	8006c2a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c18:	f7fd f98c 	bl	8003f34 <HAL_GetTick>
 8006c1c:	4602      	mov	r2, r0
 8006c1e:	693b      	ldr	r3, [r7, #16]
 8006c20:	1ad3      	subs	r3, r2, r3
 8006c22:	2b02      	cmp	r3, #2
 8006c24:	d901      	bls.n	8006c2a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006c26:	2303      	movs	r3, #3
 8006c28:	e20c      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006c2a:	4b41      	ldr	r3, [pc, #260]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006c2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c30:	f003 0302 	and.w	r3, r3, #2
 8006c34:	2b00      	cmp	r3, #0
 8006c36:	d0ef      	beq.n	8006c18 <HAL_RCC_OscConfig+0x3ec>
 8006c38:	e01b      	b.n	8006c72 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006c3a:	4b3d      	ldr	r3, [pc, #244]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006c3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c40:	4a3b      	ldr	r2, [pc, #236]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006c42:	f023 0301 	bic.w	r3, r3, #1
 8006c46:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006c4a:	f7fd f973 	bl	8003f34 <HAL_GetTick>
 8006c4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c50:	e008      	b.n	8006c64 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006c52:	f7fd f96f 	bl	8003f34 <HAL_GetTick>
 8006c56:	4602      	mov	r2, r0
 8006c58:	693b      	ldr	r3, [r7, #16]
 8006c5a:	1ad3      	subs	r3, r2, r3
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d901      	bls.n	8006c64 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006c60:	2303      	movs	r3, #3
 8006c62:	e1ef      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006c64:	4b32      	ldr	r3, [pc, #200]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006c66:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006c6a:	f003 0302 	and.w	r3, r3, #2
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1ef      	bne.n	8006c52 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f003 0304 	and.w	r3, r3, #4
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	f000 80a6 	beq.w	8006dcc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006c80:	2300      	movs	r3, #0
 8006c82:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006c84:	4b2a      	ldr	r3, [pc, #168]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006c86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d10d      	bne.n	8006cac <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006c90:	4b27      	ldr	r3, [pc, #156]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c94:	4a26      	ldr	r2, [pc, #152]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006c96:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006c9a:	6593      	str	r3, [r2, #88]	; 0x58
 8006c9c:	4b24      	ldr	r3, [pc, #144]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006ca0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006ca4:	60bb      	str	r3, [r7, #8]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cac:	4b21      	ldr	r3, [pc, #132]	; (8006d34 <HAL_RCC_OscConfig+0x508>)
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d118      	bne.n	8006cea <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006cb8:	4b1e      	ldr	r3, [pc, #120]	; (8006d34 <HAL_RCC_OscConfig+0x508>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a1d      	ldr	r2, [pc, #116]	; (8006d34 <HAL_RCC_OscConfig+0x508>)
 8006cbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006cc2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006cc4:	f7fd f936 	bl	8003f34 <HAL_GetTick>
 8006cc8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cca:	e008      	b.n	8006cde <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ccc:	f7fd f932 	bl	8003f34 <HAL_GetTick>
 8006cd0:	4602      	mov	r2, r0
 8006cd2:	693b      	ldr	r3, [r7, #16]
 8006cd4:	1ad3      	subs	r3, r2, r3
 8006cd6:	2b02      	cmp	r3, #2
 8006cd8:	d901      	bls.n	8006cde <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006cda:	2303      	movs	r3, #3
 8006cdc:	e1b2      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006cde:	4b15      	ldr	r3, [pc, #84]	; (8006d34 <HAL_RCC_OscConfig+0x508>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d0f0      	beq.n	8006ccc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689b      	ldr	r3, [r3, #8]
 8006cee:	2b01      	cmp	r3, #1
 8006cf0:	d108      	bne.n	8006d04 <HAL_RCC_OscConfig+0x4d8>
 8006cf2:	4b0f      	ldr	r3, [pc, #60]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006cf4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006cf8:	4a0d      	ldr	r2, [pc, #52]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006cfa:	f043 0301 	orr.w	r3, r3, #1
 8006cfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d02:	e029      	b.n	8006d58 <HAL_RCC_OscConfig+0x52c>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	689b      	ldr	r3, [r3, #8]
 8006d08:	2b05      	cmp	r3, #5
 8006d0a:	d115      	bne.n	8006d38 <HAL_RCC_OscConfig+0x50c>
 8006d0c:	4b08      	ldr	r3, [pc, #32]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006d0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d12:	4a07      	ldr	r2, [pc, #28]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006d14:	f043 0304 	orr.w	r3, r3, #4
 8006d18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d1c:	4b04      	ldr	r3, [pc, #16]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006d1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d22:	4a03      	ldr	r2, [pc, #12]	; (8006d30 <HAL_RCC_OscConfig+0x504>)
 8006d24:	f043 0301 	orr.w	r3, r3, #1
 8006d28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d2c:	e014      	b.n	8006d58 <HAL_RCC_OscConfig+0x52c>
 8006d2e:	bf00      	nop
 8006d30:	40021000 	.word	0x40021000
 8006d34:	40007000 	.word	0x40007000
 8006d38:	4b9a      	ldr	r3, [pc, #616]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006d3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d3e:	4a99      	ldr	r2, [pc, #612]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006d40:	f023 0301 	bic.w	r3, r3, #1
 8006d44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006d48:	4b96      	ldr	r3, [pc, #600]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006d4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d4e:	4a95      	ldr	r2, [pc, #596]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006d50:	f023 0304 	bic.w	r3, r3, #4
 8006d54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	689b      	ldr	r3, [r3, #8]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d016      	beq.n	8006d8e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d60:	f7fd f8e8 	bl	8003f34 <HAL_GetTick>
 8006d64:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d66:	e00a      	b.n	8006d7e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d68:	f7fd f8e4 	bl	8003f34 <HAL_GetTick>
 8006d6c:	4602      	mov	r2, r0
 8006d6e:	693b      	ldr	r3, [r7, #16]
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d76:	4293      	cmp	r3, r2
 8006d78:	d901      	bls.n	8006d7e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8006d7a:	2303      	movs	r3, #3
 8006d7c:	e162      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006d7e:	4b89      	ldr	r3, [pc, #548]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006d80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006d84:	f003 0302 	and.w	r3, r3, #2
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d0ed      	beq.n	8006d68 <HAL_RCC_OscConfig+0x53c>
 8006d8c:	e015      	b.n	8006dba <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006d8e:	f7fd f8d1 	bl	8003f34 <HAL_GetTick>
 8006d92:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006d94:	e00a      	b.n	8006dac <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006d96:	f7fd f8cd 	bl	8003f34 <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	693b      	ldr	r3, [r7, #16]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006da4:	4293      	cmp	r3, r2
 8006da6:	d901      	bls.n	8006dac <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8006da8:	2303      	movs	r3, #3
 8006daa:	e14b      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8006dac:	4b7d      	ldr	r3, [pc, #500]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006dae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006db2:	f003 0302 	and.w	r3, r3, #2
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d1ed      	bne.n	8006d96 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006dba:	7ffb      	ldrb	r3, [r7, #31]
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d105      	bne.n	8006dcc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006dc0:	4b78      	ldr	r3, [pc, #480]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006dc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006dc4:	4a77      	ldr	r2, [pc, #476]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006dca:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f003 0320 	and.w	r3, r3, #32
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d03c      	beq.n	8006e52 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d01c      	beq.n	8006e1a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8006de0:	4b70      	ldr	r3, [pc, #448]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006de2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006de6:	4a6f      	ldr	r2, [pc, #444]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006de8:	f043 0301 	orr.w	r3, r3, #1
 8006dec:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006df0:	f7fd f8a0 	bl	8003f34 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006df8:	f7fd f89c 	bl	8003f34 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e11c      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8006e0a:	4b66      	ldr	r3, [pc, #408]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006e0c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e10:	f003 0302 	and.w	r3, r3, #2
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d0ef      	beq.n	8006df8 <HAL_RCC_OscConfig+0x5cc>
 8006e18:	e01b      	b.n	8006e52 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8006e1a:	4b62      	ldr	r3, [pc, #392]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006e1c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e20:	4a60      	ldr	r2, [pc, #384]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006e22:	f023 0301 	bic.w	r3, r3, #1
 8006e26:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006e2a:	f7fd f883 	bl	8003f34 <HAL_GetTick>
 8006e2e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e30:	e008      	b.n	8006e44 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8006e32:	f7fd f87f 	bl	8003f34 <HAL_GetTick>
 8006e36:	4602      	mov	r2, r0
 8006e38:	693b      	ldr	r3, [r7, #16]
 8006e3a:	1ad3      	subs	r3, r2, r3
 8006e3c:	2b02      	cmp	r3, #2
 8006e3e:	d901      	bls.n	8006e44 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8006e40:	2303      	movs	r3, #3
 8006e42:	e0ff      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8006e44:	4b57      	ldr	r3, [pc, #348]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006e46:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8006e4a:	f003 0302 	and.w	r3, r3, #2
 8006e4e:	2b00      	cmp	r3, #0
 8006e50:	d1ef      	bne.n	8006e32 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	f000 80f3 	beq.w	8007042 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006e60:	2b02      	cmp	r3, #2
 8006e62:	f040 80c9 	bne.w	8006ff8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8006e66:	4b4f      	ldr	r3, [pc, #316]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e6c:	697b      	ldr	r3, [r7, #20]
 8006e6e:	f003 0203 	and.w	r2, r3, #3
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e76:	429a      	cmp	r2, r3
 8006e78:	d12c      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e7a:	697b      	ldr	r3, [r7, #20]
 8006e7c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e84:	3b01      	subs	r3, #1
 8006e86:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006e88:	429a      	cmp	r2, r3
 8006e8a:	d123      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006e8c:	697b      	ldr	r3, [r7, #20]
 8006e8e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006e96:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006e98:	429a      	cmp	r2, r3
 8006e9a:	d11b      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ea6:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006ea8:	429a      	cmp	r2, r3
 8006eaa:	d113      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006eac:	697b      	ldr	r3, [r7, #20]
 8006eae:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006eb6:	085b      	lsrs	r3, r3, #1
 8006eb8:	3b01      	subs	r3, #1
 8006eba:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d109      	bne.n	8006ed4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006eca:	085b      	lsrs	r3, r3, #1
 8006ecc:	3b01      	subs	r3, #1
 8006ece:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8006ed0:	429a      	cmp	r2, r3
 8006ed2:	d06b      	beq.n	8006fac <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ed4:	69bb      	ldr	r3, [r7, #24]
 8006ed6:	2b0c      	cmp	r3, #12
 8006ed8:	d062      	beq.n	8006fa0 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006eda:	4b32      	ldr	r3, [pc, #200]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d001      	beq.n	8006eea <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8006ee6:	2301      	movs	r3, #1
 8006ee8:	e0ac      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8006eea:	4b2e      	ldr	r3, [pc, #184]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a2d      	ldr	r2, [pc, #180]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006ef0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006ef4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006ef6:	f7fd f81d 	bl	8003f34 <HAL_GetTick>
 8006efa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006efc:	e008      	b.n	8006f10 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006efe:	f7fd f819 	bl	8003f34 <HAL_GetTick>
 8006f02:	4602      	mov	r2, r0
 8006f04:	693b      	ldr	r3, [r7, #16]
 8006f06:	1ad3      	subs	r3, r2, r3
 8006f08:	2b02      	cmp	r3, #2
 8006f0a:	d901      	bls.n	8006f10 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e099      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006f10:	4b24      	ldr	r3, [pc, #144]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1f0      	bne.n	8006efe <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006f1c:	4b21      	ldr	r3, [pc, #132]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006f1e:	68da      	ldr	r2, [r3, #12]
 8006f20:	4b21      	ldr	r3, [pc, #132]	; (8006fa8 <HAL_RCC_OscConfig+0x77c>)
 8006f22:	4013      	ands	r3, r2
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8006f2c:	3a01      	subs	r2, #1
 8006f2e:	0112      	lsls	r2, r2, #4
 8006f30:	4311      	orrs	r1, r2
 8006f32:	687a      	ldr	r2, [r7, #4]
 8006f34:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006f36:	0212      	lsls	r2, r2, #8
 8006f38:	4311      	orrs	r1, r2
 8006f3a:	687a      	ldr	r2, [r7, #4]
 8006f3c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8006f3e:	0852      	lsrs	r2, r2, #1
 8006f40:	3a01      	subs	r2, #1
 8006f42:	0552      	lsls	r2, r2, #21
 8006f44:	4311      	orrs	r1, r2
 8006f46:	687a      	ldr	r2, [r7, #4]
 8006f48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8006f4a:	0852      	lsrs	r2, r2, #1
 8006f4c:	3a01      	subs	r2, #1
 8006f4e:	0652      	lsls	r2, r2, #25
 8006f50:	4311      	orrs	r1, r2
 8006f52:	687a      	ldr	r2, [r7, #4]
 8006f54:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006f56:	06d2      	lsls	r2, r2, #27
 8006f58:	430a      	orrs	r2, r1
 8006f5a:	4912      	ldr	r1, [pc, #72]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006f5c:	4313      	orrs	r3, r2
 8006f5e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8006f60:	4b10      	ldr	r3, [pc, #64]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a0f      	ldr	r2, [pc, #60]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006f66:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f6a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006f6c:	4b0d      	ldr	r3, [pc, #52]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006f6e:	68db      	ldr	r3, [r3, #12]
 8006f70:	4a0c      	ldr	r2, [pc, #48]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006f76:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8006f78:	f7fc ffdc 	bl	8003f34 <HAL_GetTick>
 8006f7c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f7e:	e008      	b.n	8006f92 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006f80:	f7fc ffd8 	bl	8003f34 <HAL_GetTick>
 8006f84:	4602      	mov	r2, r0
 8006f86:	693b      	ldr	r3, [r7, #16]
 8006f88:	1ad3      	subs	r3, r2, r3
 8006f8a:	2b02      	cmp	r3, #2
 8006f8c:	d901      	bls.n	8006f92 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8006f8e:	2303      	movs	r3, #3
 8006f90:	e058      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006f92:	4b04      	ldr	r3, [pc, #16]	; (8006fa4 <HAL_RCC_OscConfig+0x778>)
 8006f94:	681b      	ldr	r3, [r3, #0]
 8006f96:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d0f0      	beq.n	8006f80 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006f9e:	e050      	b.n	8007042 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8006fa0:	2301      	movs	r3, #1
 8006fa2:	e04f      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
 8006fa4:	40021000 	.word	0x40021000
 8006fa8:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fac:	4b27      	ldr	r3, [pc, #156]	; (800704c <HAL_RCC_OscConfig+0x820>)
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d144      	bne.n	8007042 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8006fb8:	4b24      	ldr	r3, [pc, #144]	; (800704c <HAL_RCC_OscConfig+0x820>)
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	4a23      	ldr	r2, [pc, #140]	; (800704c <HAL_RCC_OscConfig+0x820>)
 8006fbe:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fc2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8006fc4:	4b21      	ldr	r3, [pc, #132]	; (800704c <HAL_RCC_OscConfig+0x820>)
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	4a20      	ldr	r2, [pc, #128]	; (800704c <HAL_RCC_OscConfig+0x820>)
 8006fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006fce:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8006fd0:	f7fc ffb0 	bl	8003f34 <HAL_GetTick>
 8006fd4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fd6:	e008      	b.n	8006fea <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006fd8:	f7fc ffac 	bl	8003f34 <HAL_GetTick>
 8006fdc:	4602      	mov	r2, r0
 8006fde:	693b      	ldr	r3, [r7, #16]
 8006fe0:	1ad3      	subs	r3, r2, r3
 8006fe2:	2b02      	cmp	r3, #2
 8006fe4:	d901      	bls.n	8006fea <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e02c      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006fea:	4b18      	ldr	r3, [pc, #96]	; (800704c <HAL_RCC_OscConfig+0x820>)
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d0f0      	beq.n	8006fd8 <HAL_RCC_OscConfig+0x7ac>
 8006ff6:	e024      	b.n	8007042 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8006ff8:	69bb      	ldr	r3, [r7, #24]
 8006ffa:	2b0c      	cmp	r3, #12
 8006ffc:	d01f      	beq.n	800703e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006ffe:	4b13      	ldr	r3, [pc, #76]	; (800704c <HAL_RCC_OscConfig+0x820>)
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	4a12      	ldr	r2, [pc, #72]	; (800704c <HAL_RCC_OscConfig+0x820>)
 8007004:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007008:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800700a:	f7fc ff93 	bl	8003f34 <HAL_GetTick>
 800700e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007010:	e008      	b.n	8007024 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007012:	f7fc ff8f 	bl	8003f34 <HAL_GetTick>
 8007016:	4602      	mov	r2, r0
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	1ad3      	subs	r3, r2, r3
 800701c:	2b02      	cmp	r3, #2
 800701e:	d901      	bls.n	8007024 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8007020:	2303      	movs	r3, #3
 8007022:	e00f      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007024:	4b09      	ldr	r3, [pc, #36]	; (800704c <HAL_RCC_OscConfig+0x820>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1f0      	bne.n	8007012 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8007030:	4b06      	ldr	r3, [pc, #24]	; (800704c <HAL_RCC_OscConfig+0x820>)
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	4905      	ldr	r1, [pc, #20]	; (800704c <HAL_RCC_OscConfig+0x820>)
 8007036:	4b06      	ldr	r3, [pc, #24]	; (8007050 <HAL_RCC_OscConfig+0x824>)
 8007038:	4013      	ands	r3, r2
 800703a:	60cb      	str	r3, [r1, #12]
 800703c:	e001      	b.n	8007042 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800703e:	2301      	movs	r3, #1
 8007040:	e000      	b.n	8007044 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8007042:	2300      	movs	r3, #0
}
 8007044:	4618      	mov	r0, r3
 8007046:	3720      	adds	r7, #32
 8007048:	46bd      	mov	sp, r7
 800704a:	bd80      	pop	{r7, pc}
 800704c:	40021000 	.word	0x40021000
 8007050:	feeefffc 	.word	0xfeeefffc

08007054 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007054:	b580      	push	{r7, lr}
 8007056:	b084      	sub	sp, #16
 8007058:	af00      	add	r7, sp, #0
 800705a:	6078      	str	r0, [r7, #4]
 800705c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d101      	bne.n	8007068 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007064:	2301      	movs	r3, #1
 8007066:	e0e7      	b.n	8007238 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007068:	4b75      	ldr	r3, [pc, #468]	; (8007240 <HAL_RCC_ClockConfig+0x1ec>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f003 0307 	and.w	r3, r3, #7
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	429a      	cmp	r2, r3
 8007074:	d910      	bls.n	8007098 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007076:	4b72      	ldr	r3, [pc, #456]	; (8007240 <HAL_RCC_ClockConfig+0x1ec>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	f023 0207 	bic.w	r2, r3, #7
 800707e:	4970      	ldr	r1, [pc, #448]	; (8007240 <HAL_RCC_ClockConfig+0x1ec>)
 8007080:	683b      	ldr	r3, [r7, #0]
 8007082:	4313      	orrs	r3, r2
 8007084:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007086:	4b6e      	ldr	r3, [pc, #440]	; (8007240 <HAL_RCC_ClockConfig+0x1ec>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f003 0307 	and.w	r3, r3, #7
 800708e:	683a      	ldr	r2, [r7, #0]
 8007090:	429a      	cmp	r2, r3
 8007092:	d001      	beq.n	8007098 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007094:	2301      	movs	r3, #1
 8007096:	e0cf      	b.n	8007238 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f003 0302 	and.w	r3, r3, #2
 80070a0:	2b00      	cmp	r3, #0
 80070a2:	d010      	beq.n	80070c6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	689a      	ldr	r2, [r3, #8]
 80070a8:	4b66      	ldr	r3, [pc, #408]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 80070aa:	689b      	ldr	r3, [r3, #8]
 80070ac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80070b0:	429a      	cmp	r2, r3
 80070b2:	d908      	bls.n	80070c6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80070b4:	4b63      	ldr	r3, [pc, #396]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80070bc:	687b      	ldr	r3, [r7, #4]
 80070be:	689b      	ldr	r3, [r3, #8]
 80070c0:	4960      	ldr	r1, [pc, #384]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 80070c2:	4313      	orrs	r3, r2
 80070c4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f003 0301 	and.w	r3, r3, #1
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d04c      	beq.n	800716c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80070d2:	687b      	ldr	r3, [r7, #4]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	2b03      	cmp	r3, #3
 80070d8:	d107      	bne.n	80070ea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80070da:	4b5a      	ldr	r3, [pc, #360]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d121      	bne.n	800712a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80070e6:	2301      	movs	r3, #1
 80070e8:	e0a6      	b.n	8007238 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	685b      	ldr	r3, [r3, #4]
 80070ee:	2b02      	cmp	r3, #2
 80070f0:	d107      	bne.n	8007102 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80070f2:	4b54      	ldr	r3, [pc, #336]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d115      	bne.n	800712a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80070fe:	2301      	movs	r3, #1
 8007100:	e09a      	b.n	8007238 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d107      	bne.n	800711a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800710a:	4b4e      	ldr	r3, [pc, #312]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	f003 0302 	and.w	r3, r3, #2
 8007112:	2b00      	cmp	r3, #0
 8007114:	d109      	bne.n	800712a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007116:	2301      	movs	r3, #1
 8007118:	e08e      	b.n	8007238 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800711a:	4b4a      	ldr	r3, [pc, #296]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 800711c:	681b      	ldr	r3, [r3, #0]
 800711e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007122:	2b00      	cmp	r3, #0
 8007124:	d101      	bne.n	800712a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007126:	2301      	movs	r3, #1
 8007128:	e086      	b.n	8007238 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800712a:	4b46      	ldr	r3, [pc, #280]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 800712c:	689b      	ldr	r3, [r3, #8]
 800712e:	f023 0203 	bic.w	r2, r3, #3
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	685b      	ldr	r3, [r3, #4]
 8007136:	4943      	ldr	r1, [pc, #268]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 8007138:	4313      	orrs	r3, r2
 800713a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800713c:	f7fc fefa 	bl	8003f34 <HAL_GetTick>
 8007140:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007142:	e00a      	b.n	800715a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007144:	f7fc fef6 	bl	8003f34 <HAL_GetTick>
 8007148:	4602      	mov	r2, r0
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	1ad3      	subs	r3, r2, r3
 800714e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007152:	4293      	cmp	r3, r2
 8007154:	d901      	bls.n	800715a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007156:	2303      	movs	r3, #3
 8007158:	e06e      	b.n	8007238 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800715a:	4b3a      	ldr	r3, [pc, #232]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 800715c:	689b      	ldr	r3, [r3, #8]
 800715e:	f003 020c 	and.w	r2, r3, #12
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	685b      	ldr	r3, [r3, #4]
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	429a      	cmp	r2, r3
 800716a:	d1eb      	bne.n	8007144 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800716c:	687b      	ldr	r3, [r7, #4]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	f003 0302 	and.w	r3, r3, #2
 8007174:	2b00      	cmp	r3, #0
 8007176:	d010      	beq.n	800719a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	689a      	ldr	r2, [r3, #8]
 800717c:	4b31      	ldr	r3, [pc, #196]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 800717e:	689b      	ldr	r3, [r3, #8]
 8007180:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007184:	429a      	cmp	r2, r3
 8007186:	d208      	bcs.n	800719a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007188:	4b2e      	ldr	r3, [pc, #184]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 800718a:	689b      	ldr	r3, [r3, #8]
 800718c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	689b      	ldr	r3, [r3, #8]
 8007194:	492b      	ldr	r1, [pc, #172]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 8007196:	4313      	orrs	r3, r2
 8007198:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800719a:	4b29      	ldr	r3, [pc, #164]	; (8007240 <HAL_RCC_ClockConfig+0x1ec>)
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f003 0307 	and.w	r3, r3, #7
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d210      	bcs.n	80071ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80071a8:	4b25      	ldr	r3, [pc, #148]	; (8007240 <HAL_RCC_ClockConfig+0x1ec>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	f023 0207 	bic.w	r2, r3, #7
 80071b0:	4923      	ldr	r1, [pc, #140]	; (8007240 <HAL_RCC_ClockConfig+0x1ec>)
 80071b2:	683b      	ldr	r3, [r7, #0]
 80071b4:	4313      	orrs	r3, r2
 80071b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80071b8:	4b21      	ldr	r3, [pc, #132]	; (8007240 <HAL_RCC_ClockConfig+0x1ec>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	f003 0307 	and.w	r3, r3, #7
 80071c0:	683a      	ldr	r2, [r7, #0]
 80071c2:	429a      	cmp	r2, r3
 80071c4:	d001      	beq.n	80071ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	e036      	b.n	8007238 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	f003 0304 	and.w	r3, r3, #4
 80071d2:	2b00      	cmp	r3, #0
 80071d4:	d008      	beq.n	80071e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80071d6:	4b1b      	ldr	r3, [pc, #108]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 80071d8:	689b      	ldr	r3, [r3, #8]
 80071da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	68db      	ldr	r3, [r3, #12]
 80071e2:	4918      	ldr	r1, [pc, #96]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 80071e4:	4313      	orrs	r3, r2
 80071e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	f003 0308 	and.w	r3, r3, #8
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d009      	beq.n	8007208 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80071f4:	4b13      	ldr	r3, [pc, #76]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	691b      	ldr	r3, [r3, #16]
 8007200:	00db      	lsls	r3, r3, #3
 8007202:	4910      	ldr	r1, [pc, #64]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 8007204:	4313      	orrs	r3, r2
 8007206:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007208:	f000 f824 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 800720c:	4602      	mov	r2, r0
 800720e:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <HAL_RCC_ClockConfig+0x1f0>)
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	091b      	lsrs	r3, r3, #4
 8007214:	f003 030f 	and.w	r3, r3, #15
 8007218:	490b      	ldr	r1, [pc, #44]	; (8007248 <HAL_RCC_ClockConfig+0x1f4>)
 800721a:	5ccb      	ldrb	r3, [r1, r3]
 800721c:	f003 031f 	and.w	r3, r3, #31
 8007220:	fa22 f303 	lsr.w	r3, r2, r3
 8007224:	4a09      	ldr	r2, [pc, #36]	; (800724c <HAL_RCC_ClockConfig+0x1f8>)
 8007226:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007228:	4b09      	ldr	r3, [pc, #36]	; (8007250 <HAL_RCC_ClockConfig+0x1fc>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	4618      	mov	r0, r3
 800722e:	f7fc fd33 	bl	8003c98 <HAL_InitTick>
 8007232:	4603      	mov	r3, r0
 8007234:	72fb      	strb	r3, [r7, #11]

  return status;
 8007236:	7afb      	ldrb	r3, [r7, #11]
}
 8007238:	4618      	mov	r0, r3
 800723a:	3710      	adds	r7, #16
 800723c:	46bd      	mov	sp, r7
 800723e:	bd80      	pop	{r7, pc}
 8007240:	40022000 	.word	0x40022000
 8007244:	40021000 	.word	0x40021000
 8007248:	0800ca50 	.word	0x0800ca50
 800724c:	20000034 	.word	0x20000034
 8007250:	20000038 	.word	0x20000038

08007254 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007254:	b480      	push	{r7}
 8007256:	b089      	sub	sp, #36	; 0x24
 8007258:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800725a:	2300      	movs	r3, #0
 800725c:	61fb      	str	r3, [r7, #28]
 800725e:	2300      	movs	r3, #0
 8007260:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8007262:	4b3e      	ldr	r3, [pc, #248]	; (800735c <HAL_RCC_GetSysClockFreq+0x108>)
 8007264:	689b      	ldr	r3, [r3, #8]
 8007266:	f003 030c 	and.w	r3, r3, #12
 800726a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800726c:	4b3b      	ldr	r3, [pc, #236]	; (800735c <HAL_RCC_GetSysClockFreq+0x108>)
 800726e:	68db      	ldr	r3, [r3, #12]
 8007270:	f003 0303 	and.w	r3, r3, #3
 8007274:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d005      	beq.n	8007288 <HAL_RCC_GetSysClockFreq+0x34>
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	2b0c      	cmp	r3, #12
 8007280:	d121      	bne.n	80072c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	2b01      	cmp	r3, #1
 8007286:	d11e      	bne.n	80072c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007288:	4b34      	ldr	r3, [pc, #208]	; (800735c <HAL_RCC_GetSysClockFreq+0x108>)
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	f003 0308 	and.w	r3, r3, #8
 8007290:	2b00      	cmp	r3, #0
 8007292:	d107      	bne.n	80072a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007294:	4b31      	ldr	r3, [pc, #196]	; (800735c <HAL_RCC_GetSysClockFreq+0x108>)
 8007296:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800729a:	0a1b      	lsrs	r3, r3, #8
 800729c:	f003 030f 	and.w	r3, r3, #15
 80072a0:	61fb      	str	r3, [r7, #28]
 80072a2:	e005      	b.n	80072b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80072a4:	4b2d      	ldr	r3, [pc, #180]	; (800735c <HAL_RCC_GetSysClockFreq+0x108>)
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	091b      	lsrs	r3, r3, #4
 80072aa:	f003 030f 	and.w	r3, r3, #15
 80072ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80072b0:	4a2b      	ldr	r2, [pc, #172]	; (8007360 <HAL_RCC_GetSysClockFreq+0x10c>)
 80072b2:	69fb      	ldr	r3, [r7, #28]
 80072b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80072b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80072ba:	693b      	ldr	r3, [r7, #16]
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d10d      	bne.n	80072dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80072c0:	69fb      	ldr	r3, [r7, #28]
 80072c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80072c4:	e00a      	b.n	80072dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80072c6:	693b      	ldr	r3, [r7, #16]
 80072c8:	2b04      	cmp	r3, #4
 80072ca:	d102      	bne.n	80072d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80072cc:	4b25      	ldr	r3, [pc, #148]	; (8007364 <HAL_RCC_GetSysClockFreq+0x110>)
 80072ce:	61bb      	str	r3, [r7, #24]
 80072d0:	e004      	b.n	80072dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80072d2:	693b      	ldr	r3, [r7, #16]
 80072d4:	2b08      	cmp	r3, #8
 80072d6:	d101      	bne.n	80072dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80072d8:	4b23      	ldr	r3, [pc, #140]	; (8007368 <HAL_RCC_GetSysClockFreq+0x114>)
 80072da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	2b0c      	cmp	r3, #12
 80072e0:	d134      	bne.n	800734c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80072e2:	4b1e      	ldr	r3, [pc, #120]	; (800735c <HAL_RCC_GetSysClockFreq+0x108>)
 80072e4:	68db      	ldr	r3, [r3, #12]
 80072e6:	f003 0303 	and.w	r3, r3, #3
 80072ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80072ec:	68bb      	ldr	r3, [r7, #8]
 80072ee:	2b02      	cmp	r3, #2
 80072f0:	d003      	beq.n	80072fa <HAL_RCC_GetSysClockFreq+0xa6>
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b03      	cmp	r3, #3
 80072f6:	d003      	beq.n	8007300 <HAL_RCC_GetSysClockFreq+0xac>
 80072f8:	e005      	b.n	8007306 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80072fa:	4b1a      	ldr	r3, [pc, #104]	; (8007364 <HAL_RCC_GetSysClockFreq+0x110>)
 80072fc:	617b      	str	r3, [r7, #20]
      break;
 80072fe:	e005      	b.n	800730c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007300:	4b19      	ldr	r3, [pc, #100]	; (8007368 <HAL_RCC_GetSysClockFreq+0x114>)
 8007302:	617b      	str	r3, [r7, #20]
      break;
 8007304:	e002      	b.n	800730c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007306:	69fb      	ldr	r3, [r7, #28]
 8007308:	617b      	str	r3, [r7, #20]
      break;
 800730a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800730c:	4b13      	ldr	r3, [pc, #76]	; (800735c <HAL_RCC_GetSysClockFreq+0x108>)
 800730e:	68db      	ldr	r3, [r3, #12]
 8007310:	091b      	lsrs	r3, r3, #4
 8007312:	f003 0307 	and.w	r3, r3, #7
 8007316:	3301      	adds	r3, #1
 8007318:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800731a:	4b10      	ldr	r3, [pc, #64]	; (800735c <HAL_RCC_GetSysClockFreq+0x108>)
 800731c:	68db      	ldr	r3, [r3, #12]
 800731e:	0a1b      	lsrs	r3, r3, #8
 8007320:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007324:	697a      	ldr	r2, [r7, #20]
 8007326:	fb03 f202 	mul.w	r2, r3, r2
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	fbb2 f3f3 	udiv	r3, r2, r3
 8007330:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8007332:	4b0a      	ldr	r3, [pc, #40]	; (800735c <HAL_RCC_GetSysClockFreq+0x108>)
 8007334:	68db      	ldr	r3, [r3, #12]
 8007336:	0e5b      	lsrs	r3, r3, #25
 8007338:	f003 0303 	and.w	r3, r3, #3
 800733c:	3301      	adds	r3, #1
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8007342:	697a      	ldr	r2, [r7, #20]
 8007344:	683b      	ldr	r3, [r7, #0]
 8007346:	fbb2 f3f3 	udiv	r3, r2, r3
 800734a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800734c:	69bb      	ldr	r3, [r7, #24]
}
 800734e:	4618      	mov	r0, r3
 8007350:	3724      	adds	r7, #36	; 0x24
 8007352:	46bd      	mov	sp, r7
 8007354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007358:	4770      	bx	lr
 800735a:	bf00      	nop
 800735c:	40021000 	.word	0x40021000
 8007360:	0800ca68 	.word	0x0800ca68
 8007364:	00f42400 	.word	0x00f42400
 8007368:	007a1200 	.word	0x007a1200

0800736c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800736c:	b480      	push	{r7}
 800736e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007370:	4b03      	ldr	r3, [pc, #12]	; (8007380 <HAL_RCC_GetHCLKFreq+0x14>)
 8007372:	681b      	ldr	r3, [r3, #0]
}
 8007374:	4618      	mov	r0, r3
 8007376:	46bd      	mov	sp, r7
 8007378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800737c:	4770      	bx	lr
 800737e:	bf00      	nop
 8007380:	20000034 	.word	0x20000034

08007384 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007388:	f7ff fff0 	bl	800736c <HAL_RCC_GetHCLKFreq>
 800738c:	4602      	mov	r2, r0
 800738e:	4b06      	ldr	r3, [pc, #24]	; (80073a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007390:	689b      	ldr	r3, [r3, #8]
 8007392:	0a1b      	lsrs	r3, r3, #8
 8007394:	f003 0307 	and.w	r3, r3, #7
 8007398:	4904      	ldr	r1, [pc, #16]	; (80073ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800739a:	5ccb      	ldrb	r3, [r1, r3]
 800739c:	f003 031f 	and.w	r3, r3, #31
 80073a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	bd80      	pop	{r7, pc}
 80073a8:	40021000 	.word	0x40021000
 80073ac:	0800ca60 	.word	0x0800ca60

080073b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80073b0:	b580      	push	{r7, lr}
 80073b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80073b4:	f7ff ffda 	bl	800736c <HAL_RCC_GetHCLKFreq>
 80073b8:	4602      	mov	r2, r0
 80073ba:	4b06      	ldr	r3, [pc, #24]	; (80073d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80073bc:	689b      	ldr	r3, [r3, #8]
 80073be:	0adb      	lsrs	r3, r3, #11
 80073c0:	f003 0307 	and.w	r3, r3, #7
 80073c4:	4904      	ldr	r1, [pc, #16]	; (80073d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80073c6:	5ccb      	ldrb	r3, [r1, r3]
 80073c8:	f003 031f 	and.w	r3, r3, #31
 80073cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80073d0:	4618      	mov	r0, r3
 80073d2:	bd80      	pop	{r7, pc}
 80073d4:	40021000 	.word	0x40021000
 80073d8:	0800ca60 	.word	0x0800ca60

080073dc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80073dc:	b480      	push	{r7}
 80073de:	b083      	sub	sp, #12
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	220f      	movs	r2, #15
 80073ea:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80073ec:	4b12      	ldr	r3, [pc, #72]	; (8007438 <HAL_RCC_GetClockConfig+0x5c>)
 80073ee:	689b      	ldr	r3, [r3, #8]
 80073f0:	f003 0203 	and.w	r2, r3, #3
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80073f8:	4b0f      	ldr	r3, [pc, #60]	; (8007438 <HAL_RCC_GetClockConfig+0x5c>)
 80073fa:	689b      	ldr	r3, [r3, #8]
 80073fc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007404:	4b0c      	ldr	r3, [pc, #48]	; (8007438 <HAL_RCC_GetClockConfig+0x5c>)
 8007406:	689b      	ldr	r3, [r3, #8]
 8007408:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007410:	4b09      	ldr	r3, [pc, #36]	; (8007438 <HAL_RCC_GetClockConfig+0x5c>)
 8007412:	689b      	ldr	r3, [r3, #8]
 8007414:	08db      	lsrs	r3, r3, #3
 8007416:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800741e:	4b07      	ldr	r3, [pc, #28]	; (800743c <HAL_RCC_GetClockConfig+0x60>)
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	f003 0207 	and.w	r2, r3, #7
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	601a      	str	r2, [r3, #0]
}
 800742a:	bf00      	nop
 800742c:	370c      	adds	r7, #12
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	40021000 	.word	0x40021000
 800743c:	40022000 	.word	0x40022000

08007440 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8007440:	b580      	push	{r7, lr}
 8007442:	b086      	sub	sp, #24
 8007444:	af00      	add	r7, sp, #0
 8007446:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007448:	2300      	movs	r3, #0
 800744a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800744c:	4b2a      	ldr	r3, [pc, #168]	; (80074f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800744e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007454:	2b00      	cmp	r3, #0
 8007456:	d003      	beq.n	8007460 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007458:	f7ff f984 	bl	8006764 <HAL_PWREx_GetVoltageRange>
 800745c:	6178      	str	r0, [r7, #20]
 800745e:	e014      	b.n	800748a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8007460:	4b25      	ldr	r3, [pc, #148]	; (80074f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007462:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007464:	4a24      	ldr	r2, [pc, #144]	; (80074f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007466:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800746a:	6593      	str	r3, [r2, #88]	; 0x58
 800746c:	4b22      	ldr	r3, [pc, #136]	; (80074f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800746e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007470:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007474:	60fb      	str	r3, [r7, #12]
 8007476:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007478:	f7ff f974 	bl	8006764 <HAL_PWREx_GetVoltageRange>
 800747c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800747e:	4b1e      	ldr	r3, [pc, #120]	; (80074f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007480:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007482:	4a1d      	ldr	r2, [pc, #116]	; (80074f8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007484:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007488:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800748a:	697b      	ldr	r3, [r7, #20]
 800748c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007490:	d10b      	bne.n	80074aa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	2b80      	cmp	r3, #128	; 0x80
 8007496:	d919      	bls.n	80074cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	2ba0      	cmp	r3, #160	; 0xa0
 800749c:	d902      	bls.n	80074a4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800749e:	2302      	movs	r3, #2
 80074a0:	613b      	str	r3, [r7, #16]
 80074a2:	e013      	b.n	80074cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80074a4:	2301      	movs	r3, #1
 80074a6:	613b      	str	r3, [r7, #16]
 80074a8:	e010      	b.n	80074cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b80      	cmp	r3, #128	; 0x80
 80074ae:	d902      	bls.n	80074b6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80074b0:	2303      	movs	r3, #3
 80074b2:	613b      	str	r3, [r7, #16]
 80074b4:	e00a      	b.n	80074cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	2b80      	cmp	r3, #128	; 0x80
 80074ba:	d102      	bne.n	80074c2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80074bc:	2302      	movs	r3, #2
 80074be:	613b      	str	r3, [r7, #16]
 80074c0:	e004      	b.n	80074cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b70      	cmp	r3, #112	; 0x70
 80074c6:	d101      	bne.n	80074cc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80074c8:	2301      	movs	r3, #1
 80074ca:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80074cc:	4b0b      	ldr	r3, [pc, #44]	; (80074fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	f023 0207 	bic.w	r2, r3, #7
 80074d4:	4909      	ldr	r1, [pc, #36]	; (80074fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074d6:	693b      	ldr	r3, [r7, #16]
 80074d8:	4313      	orrs	r3, r2
 80074da:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80074dc:	4b07      	ldr	r3, [pc, #28]	; (80074fc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	f003 0307 	and.w	r3, r3, #7
 80074e4:	693a      	ldr	r2, [r7, #16]
 80074e6:	429a      	cmp	r2, r3
 80074e8:	d001      	beq.n	80074ee <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80074ea:	2301      	movs	r3, #1
 80074ec:	e000      	b.n	80074f0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80074ee:	2300      	movs	r3, #0
}
 80074f0:	4618      	mov	r0, r3
 80074f2:	3718      	adds	r7, #24
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}
 80074f8:	40021000 	.word	0x40021000
 80074fc:	40022000 	.word	0x40022000

08007500 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b086      	sub	sp, #24
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007508:	2300      	movs	r3, #0
 800750a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800750c:	2300      	movs	r3, #0
 800750e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007510:	687b      	ldr	r3, [r7, #4]
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007518:	2b00      	cmp	r3, #0
 800751a:	d031      	beq.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007520:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007524:	d01a      	beq.n	800755c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007526:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800752a:	d814      	bhi.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800752c:	2b00      	cmp	r3, #0
 800752e:	d009      	beq.n	8007544 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8007530:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007534:	d10f      	bne.n	8007556 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007536:	4b5d      	ldr	r3, [pc, #372]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007538:	68db      	ldr	r3, [r3, #12]
 800753a:	4a5c      	ldr	r2, [pc, #368]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800753c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007540:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007542:	e00c      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	3304      	adds	r3, #4
 8007548:	2100      	movs	r1, #0
 800754a:	4618      	mov	r0, r3
 800754c:	f000 f9de 	bl	800790c <RCCEx_PLLSAI1_Config>
 8007550:	4603      	mov	r3, r0
 8007552:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007554:	e003      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007556:	2301      	movs	r3, #1
 8007558:	74fb      	strb	r3, [r7, #19]
      break;
 800755a:	e000      	b.n	800755e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800755c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800755e:	7cfb      	ldrb	r3, [r7, #19]
 8007560:	2b00      	cmp	r3, #0
 8007562:	d10b      	bne.n	800757c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007564:	4b51      	ldr	r3, [pc, #324]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007566:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800756a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007572:	494e      	ldr	r1, [pc, #312]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007574:	4313      	orrs	r3, r2
 8007576:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800757a:	e001      	b.n	8007580 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800757c:	7cfb      	ldrb	r3, [r7, #19]
 800757e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	681b      	ldr	r3, [r3, #0]
 8007584:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007588:	2b00      	cmp	r3, #0
 800758a:	f000 809e 	beq.w	80076ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800758e:	2300      	movs	r3, #0
 8007590:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007592:	4b46      	ldr	r3, [pc, #280]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007594:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007596:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800759a:	2b00      	cmp	r3, #0
 800759c:	d101      	bne.n	80075a2 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800759e:	2301      	movs	r3, #1
 80075a0:	e000      	b.n	80075a4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80075a2:	2300      	movs	r3, #0
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d00d      	beq.n	80075c4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80075a8:	4b40      	ldr	r3, [pc, #256]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075ac:	4a3f      	ldr	r2, [pc, #252]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80075b2:	6593      	str	r3, [r2, #88]	; 0x58
 80075b4:	4b3d      	ldr	r3, [pc, #244]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80075b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80075b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80075bc:	60bb      	str	r3, [r7, #8]
 80075be:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80075c0:	2301      	movs	r3, #1
 80075c2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80075c4:	4b3a      	ldr	r3, [pc, #232]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80075c6:	681b      	ldr	r3, [r3, #0]
 80075c8:	4a39      	ldr	r2, [pc, #228]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80075ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80075ce:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80075d0:	f7fc fcb0 	bl	8003f34 <HAL_GetTick>
 80075d4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80075d6:	e009      	b.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80075d8:	f7fc fcac 	bl	8003f34 <HAL_GetTick>
 80075dc:	4602      	mov	r2, r0
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	1ad3      	subs	r3, r2, r3
 80075e2:	2b02      	cmp	r3, #2
 80075e4:	d902      	bls.n	80075ec <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80075e6:	2303      	movs	r3, #3
 80075e8:	74fb      	strb	r3, [r7, #19]
        break;
 80075ea:	e005      	b.n	80075f8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80075ec:	4b30      	ldr	r3, [pc, #192]	; (80076b0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0ef      	beq.n	80075d8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80075f8:	7cfb      	ldrb	r3, [r7, #19]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d15a      	bne.n	80076b4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80075fe:	4b2b      	ldr	r3, [pc, #172]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007600:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007604:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007608:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d01e      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007614:	697a      	ldr	r2, [r7, #20]
 8007616:	429a      	cmp	r2, r3
 8007618:	d019      	beq.n	800764e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800761a:	4b24      	ldr	r3, [pc, #144]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800761c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007620:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007624:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007626:	4b21      	ldr	r3, [pc, #132]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800762c:	4a1f      	ldr	r2, [pc, #124]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800762e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007632:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007636:	4b1d      	ldr	r3, [pc, #116]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763c:	4a1b      	ldr	r2, [pc, #108]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800763e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007646:	4a19      	ldr	r2, [pc, #100]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007648:	697b      	ldr	r3, [r7, #20]
 800764a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800764e:	697b      	ldr	r3, [r7, #20]
 8007650:	f003 0301 	and.w	r3, r3, #1
 8007654:	2b00      	cmp	r3, #0
 8007656:	d016      	beq.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007658:	f7fc fc6c 	bl	8003f34 <HAL_GetTick>
 800765c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800765e:	e00b      	b.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007660:	f7fc fc68 	bl	8003f34 <HAL_GetTick>
 8007664:	4602      	mov	r2, r0
 8007666:	68fb      	ldr	r3, [r7, #12]
 8007668:	1ad3      	subs	r3, r2, r3
 800766a:	f241 3288 	movw	r2, #5000	; 0x1388
 800766e:	4293      	cmp	r3, r2
 8007670:	d902      	bls.n	8007678 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007672:	2303      	movs	r3, #3
 8007674:	74fb      	strb	r3, [r7, #19]
            break;
 8007676:	e006      	b.n	8007686 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007678:	4b0c      	ldr	r3, [pc, #48]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800767a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800767e:	f003 0302 	and.w	r3, r3, #2
 8007682:	2b00      	cmp	r3, #0
 8007684:	d0ec      	beq.n	8007660 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007686:	7cfb      	ldrb	r3, [r7, #19]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10b      	bne.n	80076a4 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800768c:	4b07      	ldr	r3, [pc, #28]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800768e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007692:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800769a:	4904      	ldr	r1, [pc, #16]	; (80076ac <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800769c:	4313      	orrs	r3, r2
 800769e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80076a2:	e009      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80076a4:	7cfb      	ldrb	r3, [r7, #19]
 80076a6:	74bb      	strb	r3, [r7, #18]
 80076a8:	e006      	b.n	80076b8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80076aa:	bf00      	nop
 80076ac:	40021000 	.word	0x40021000
 80076b0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80076b4:	7cfb      	ldrb	r3, [r7, #19]
 80076b6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80076b8:	7c7b      	ldrb	r3, [r7, #17]
 80076ba:	2b01      	cmp	r3, #1
 80076bc:	d105      	bne.n	80076ca <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80076be:	4b8a      	ldr	r3, [pc, #552]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80076c2:	4a89      	ldr	r2, [pc, #548]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076c4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80076c8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	f003 0301 	and.w	r3, r3, #1
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d00a      	beq.n	80076ec <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80076d6:	4b84      	ldr	r3, [pc, #528]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076dc:	f023 0203 	bic.w	r2, r3, #3
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	6a1b      	ldr	r3, [r3, #32]
 80076e4:	4980      	ldr	r1, [pc, #512]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076e6:	4313      	orrs	r3, r2
 80076e8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f003 0302 	and.w	r3, r3, #2
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	d00a      	beq.n	800770e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80076f8:	4b7b      	ldr	r3, [pc, #492]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80076fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80076fe:	f023 020c 	bic.w	r2, r3, #12
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007706:	4978      	ldr	r1, [pc, #480]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007708:	4313      	orrs	r3, r2
 800770a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	681b      	ldr	r3, [r3, #0]
 8007712:	f003 0320 	and.w	r3, r3, #32
 8007716:	2b00      	cmp	r3, #0
 8007718:	d00a      	beq.n	8007730 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800771a:	4b73      	ldr	r3, [pc, #460]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800771c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007720:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007728:	496f      	ldr	r1, [pc, #444]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800772a:	4313      	orrs	r3, r2
 800772c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007738:	2b00      	cmp	r3, #0
 800773a:	d00a      	beq.n	8007752 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800773c:	4b6a      	ldr	r3, [pc, #424]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800773e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007742:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007746:	687b      	ldr	r3, [r7, #4]
 8007748:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800774a:	4967      	ldr	r1, [pc, #412]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800774c:	4313      	orrs	r3, r2
 800774e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800775a:	2b00      	cmp	r3, #0
 800775c:	d00a      	beq.n	8007774 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800775e:	4b62      	ldr	r3, [pc, #392]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007764:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800776c:	495e      	ldr	r1, [pc, #376]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800776e:	4313      	orrs	r3, r2
 8007770:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800777c:	2b00      	cmp	r3, #0
 800777e:	d00a      	beq.n	8007796 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007780:	4b59      	ldr	r3, [pc, #356]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007782:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007786:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800778e:	4956      	ldr	r1, [pc, #344]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007790:	4313      	orrs	r3, r2
 8007792:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d00a      	beq.n	80077b8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80077a2:	4b51      	ldr	r3, [pc, #324]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80077a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077a8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80077b0:	494d      	ldr	r1, [pc, #308]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80077b2:	4313      	orrs	r3, r2
 80077b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d028      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80077c4:	4b48      	ldr	r3, [pc, #288]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80077c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077d2:	4945      	ldr	r1, [pc, #276]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80077d4:	4313      	orrs	r3, r2
 80077d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80077e2:	d106      	bne.n	80077f2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80077e4:	4b40      	ldr	r3, [pc, #256]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80077e6:	68db      	ldr	r3, [r3, #12]
 80077e8:	4a3f      	ldr	r2, [pc, #252]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80077ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80077ee:	60d3      	str	r3, [r2, #12]
 80077f0:	e011      	b.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80077f6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80077fa:	d10c      	bne.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	3304      	adds	r3, #4
 8007800:	2101      	movs	r1, #1
 8007802:	4618      	mov	r0, r3
 8007804:	f000 f882 	bl	800790c <RCCEx_PLLSAI1_Config>
 8007808:	4603      	mov	r3, r0
 800780a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800780c:	7cfb      	ldrb	r3, [r7, #19]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d001      	beq.n	8007816 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007812:	7cfb      	ldrb	r3, [r7, #19]
 8007814:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	681b      	ldr	r3, [r3, #0]
 800781a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800781e:	2b00      	cmp	r3, #0
 8007820:	d028      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007822:	4b31      	ldr	r3, [pc, #196]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007824:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007828:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007830:	492d      	ldr	r1, [pc, #180]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007832:	4313      	orrs	r3, r2
 8007834:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800783c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007840:	d106      	bne.n	8007850 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007842:	4b29      	ldr	r3, [pc, #164]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007844:	68db      	ldr	r3, [r3, #12]
 8007846:	4a28      	ldr	r2, [pc, #160]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007848:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800784c:	60d3      	str	r3, [r2, #12]
 800784e:	e011      	b.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007854:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007858:	d10c      	bne.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	3304      	adds	r3, #4
 800785e:	2101      	movs	r1, #1
 8007860:	4618      	mov	r0, r3
 8007862:	f000 f853 	bl	800790c <RCCEx_PLLSAI1_Config>
 8007866:	4603      	mov	r3, r0
 8007868:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800786a:	7cfb      	ldrb	r3, [r7, #19]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d001      	beq.n	8007874 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8007870:	7cfb      	ldrb	r3, [r7, #19]
 8007872:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800787c:	2b00      	cmp	r3, #0
 800787e:	d01c      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007880:	4b19      	ldr	r3, [pc, #100]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007882:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007886:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800788e:	4916      	ldr	r1, [pc, #88]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007890:	4313      	orrs	r3, r2
 8007892:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800789a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800789e:	d10c      	bne.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	3304      	adds	r3, #4
 80078a4:	2102      	movs	r1, #2
 80078a6:	4618      	mov	r0, r3
 80078a8:	f000 f830 	bl	800790c <RCCEx_PLLSAI1_Config>
 80078ac:	4603      	mov	r3, r0
 80078ae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80078b0:	7cfb      	ldrb	r3, [r7, #19]
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d001      	beq.n	80078ba <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80078b6:	7cfb      	ldrb	r3, [r7, #19]
 80078b8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	681b      	ldr	r3, [r3, #0]
 80078be:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00a      	beq.n	80078dc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80078c6:	4b08      	ldr	r3, [pc, #32]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80078c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80078cc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80078d4:	4904      	ldr	r1, [pc, #16]	; (80078e8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80078d6:	4313      	orrs	r3, r2
 80078d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80078dc:	7cbb      	ldrb	r3, [r7, #18]
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3718      	adds	r7, #24
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	40021000 	.word	0x40021000

080078ec <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80078ec:	b480      	push	{r7}
 80078ee:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80078f0:	4b05      	ldr	r3, [pc, #20]	; (8007908 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	4a04      	ldr	r2, [pc, #16]	; (8007908 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80078f6:	f043 0304 	orr.w	r3, r3, #4
 80078fa:	6013      	str	r3, [r2, #0]
}
 80078fc:	bf00      	nop
 80078fe:	46bd      	mov	sp, r7
 8007900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	40021000 	.word	0x40021000

0800790c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b084      	sub	sp, #16
 8007910:	af00      	add	r7, sp, #0
 8007912:	6078      	str	r0, [r7, #4]
 8007914:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007916:	2300      	movs	r3, #0
 8007918:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800791a:	4b74      	ldr	r3, [pc, #464]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 800791c:	68db      	ldr	r3, [r3, #12]
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d018      	beq.n	8007958 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007926:	4b71      	ldr	r3, [pc, #452]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007928:	68db      	ldr	r3, [r3, #12]
 800792a:	f003 0203 	and.w	r2, r3, #3
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	429a      	cmp	r2, r3
 8007934:	d10d      	bne.n	8007952 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	681b      	ldr	r3, [r3, #0]
       ||
 800793a:	2b00      	cmp	r3, #0
 800793c:	d009      	beq.n	8007952 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800793e:	4b6b      	ldr	r3, [pc, #428]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007940:	68db      	ldr	r3, [r3, #12]
 8007942:	091b      	lsrs	r3, r3, #4
 8007944:	f003 0307 	and.w	r3, r3, #7
 8007948:	1c5a      	adds	r2, r3, #1
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	685b      	ldr	r3, [r3, #4]
       ||
 800794e:	429a      	cmp	r2, r3
 8007950:	d047      	beq.n	80079e2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007952:	2301      	movs	r3, #1
 8007954:	73fb      	strb	r3, [r7, #15]
 8007956:	e044      	b.n	80079e2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	2b03      	cmp	r3, #3
 800795e:	d018      	beq.n	8007992 <RCCEx_PLLSAI1_Config+0x86>
 8007960:	2b03      	cmp	r3, #3
 8007962:	d825      	bhi.n	80079b0 <RCCEx_PLLSAI1_Config+0xa4>
 8007964:	2b01      	cmp	r3, #1
 8007966:	d002      	beq.n	800796e <RCCEx_PLLSAI1_Config+0x62>
 8007968:	2b02      	cmp	r3, #2
 800796a:	d009      	beq.n	8007980 <RCCEx_PLLSAI1_Config+0x74>
 800796c:	e020      	b.n	80079b0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800796e:	4b5f      	ldr	r3, [pc, #380]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f003 0302 	and.w	r3, r3, #2
 8007976:	2b00      	cmp	r3, #0
 8007978:	d11d      	bne.n	80079b6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800797e:	e01a      	b.n	80079b6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007980:	4b5a      	ldr	r3, [pc, #360]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007988:	2b00      	cmp	r3, #0
 800798a:	d116      	bne.n	80079ba <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800798c:	2301      	movs	r3, #1
 800798e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007990:	e013      	b.n	80079ba <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007992:	4b56      	ldr	r3, [pc, #344]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800799a:	2b00      	cmp	r3, #0
 800799c:	d10f      	bne.n	80079be <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800799e:	4b53      	ldr	r3, [pc, #332]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d109      	bne.n	80079be <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80079ae:	e006      	b.n	80079be <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	73fb      	strb	r3, [r7, #15]
      break;
 80079b4:	e004      	b.n	80079c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80079b6:	bf00      	nop
 80079b8:	e002      	b.n	80079c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80079ba:	bf00      	nop
 80079bc:	e000      	b.n	80079c0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80079be:	bf00      	nop
    }

    if(status == HAL_OK)
 80079c0:	7bfb      	ldrb	r3, [r7, #15]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d10d      	bne.n	80079e2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80079c6:	4b49      	ldr	r3, [pc, #292]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80079c8:	68db      	ldr	r3, [r3, #12]
 80079ca:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6819      	ldr	r1, [r3, #0]
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	685b      	ldr	r3, [r3, #4]
 80079d6:	3b01      	subs	r3, #1
 80079d8:	011b      	lsls	r3, r3, #4
 80079da:	430b      	orrs	r3, r1
 80079dc:	4943      	ldr	r1, [pc, #268]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80079de:	4313      	orrs	r3, r2
 80079e0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80079e2:	7bfb      	ldrb	r3, [r7, #15]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d17c      	bne.n	8007ae2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80079e8:	4b40      	ldr	r3, [pc, #256]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4a3f      	ldr	r2, [pc, #252]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 80079ee:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80079f2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80079f4:	f7fc fa9e 	bl	8003f34 <HAL_GetTick>
 80079f8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80079fa:	e009      	b.n	8007a10 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80079fc:	f7fc fa9a 	bl	8003f34 <HAL_GetTick>
 8007a00:	4602      	mov	r2, r0
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	1ad3      	subs	r3, r2, r3
 8007a06:	2b02      	cmp	r3, #2
 8007a08:	d902      	bls.n	8007a10 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007a0a:	2303      	movs	r3, #3
 8007a0c:	73fb      	strb	r3, [r7, #15]
        break;
 8007a0e:	e005      	b.n	8007a1c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007a10:	4b36      	ldr	r3, [pc, #216]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1ef      	bne.n	80079fc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007a1c:	7bfb      	ldrb	r3, [r7, #15]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d15f      	bne.n	8007ae2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007a22:	683b      	ldr	r3, [r7, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d110      	bne.n	8007a4a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a28:	4b30      	ldr	r3, [pc, #192]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a2a:	691b      	ldr	r3, [r3, #16]
 8007a2c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007a30:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007a34:	687a      	ldr	r2, [r7, #4]
 8007a36:	6892      	ldr	r2, [r2, #8]
 8007a38:	0211      	lsls	r1, r2, #8
 8007a3a:	687a      	ldr	r2, [r7, #4]
 8007a3c:	68d2      	ldr	r2, [r2, #12]
 8007a3e:	06d2      	lsls	r2, r2, #27
 8007a40:	430a      	orrs	r2, r1
 8007a42:	492a      	ldr	r1, [pc, #168]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a44:	4313      	orrs	r3, r2
 8007a46:	610b      	str	r3, [r1, #16]
 8007a48:	e027      	b.n	8007a9a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007a4a:	683b      	ldr	r3, [r7, #0]
 8007a4c:	2b01      	cmp	r3, #1
 8007a4e:	d112      	bne.n	8007a76 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a50:	4b26      	ldr	r3, [pc, #152]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a52:	691b      	ldr	r3, [r3, #16]
 8007a54:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007a58:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	6892      	ldr	r2, [r2, #8]
 8007a60:	0211      	lsls	r1, r2, #8
 8007a62:	687a      	ldr	r2, [r7, #4]
 8007a64:	6912      	ldr	r2, [r2, #16]
 8007a66:	0852      	lsrs	r2, r2, #1
 8007a68:	3a01      	subs	r2, #1
 8007a6a:	0552      	lsls	r2, r2, #21
 8007a6c:	430a      	orrs	r2, r1
 8007a6e:	491f      	ldr	r1, [pc, #124]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a70:	4313      	orrs	r3, r2
 8007a72:	610b      	str	r3, [r1, #16]
 8007a74:	e011      	b.n	8007a9a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007a76:	4b1d      	ldr	r3, [pc, #116]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a78:	691b      	ldr	r3, [r3, #16]
 8007a7a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007a7e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007a82:	687a      	ldr	r2, [r7, #4]
 8007a84:	6892      	ldr	r2, [r2, #8]
 8007a86:	0211      	lsls	r1, r2, #8
 8007a88:	687a      	ldr	r2, [r7, #4]
 8007a8a:	6952      	ldr	r2, [r2, #20]
 8007a8c:	0852      	lsrs	r2, r2, #1
 8007a8e:	3a01      	subs	r2, #1
 8007a90:	0652      	lsls	r2, r2, #25
 8007a92:	430a      	orrs	r2, r1
 8007a94:	4915      	ldr	r1, [pc, #84]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a96:	4313      	orrs	r3, r2
 8007a98:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007a9a:	4b14      	ldr	r3, [pc, #80]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	4a13      	ldr	r2, [pc, #76]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007aa0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007aa4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007aa6:	f7fc fa45 	bl	8003f34 <HAL_GetTick>
 8007aaa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007aac:	e009      	b.n	8007ac2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007aae:	f7fc fa41 	bl	8003f34 <HAL_GetTick>
 8007ab2:	4602      	mov	r2, r0
 8007ab4:	68bb      	ldr	r3, [r7, #8]
 8007ab6:	1ad3      	subs	r3, r2, r3
 8007ab8:	2b02      	cmp	r3, #2
 8007aba:	d902      	bls.n	8007ac2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007abc:	2303      	movs	r3, #3
 8007abe:	73fb      	strb	r3, [r7, #15]
          break;
 8007ac0:	e005      	b.n	8007ace <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007ac2:	4b0a      	ldr	r3, [pc, #40]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d0ef      	beq.n	8007aae <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007ace:	7bfb      	ldrb	r3, [r7, #15]
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	d106      	bne.n	8007ae2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007ad4:	4b05      	ldr	r3, [pc, #20]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ad6:	691a      	ldr	r2, [r3, #16]
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	699b      	ldr	r3, [r3, #24]
 8007adc:	4903      	ldr	r1, [pc, #12]	; (8007aec <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ade:	4313      	orrs	r3, r2
 8007ae0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007ae2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ae4:	4618      	mov	r0, r3
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}
 8007aec:	40021000 	.word	0x40021000

08007af0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007af0:	b580      	push	{r7, lr}
 8007af2:	b082      	sub	sp, #8
 8007af4:	af00      	add	r7, sp, #0
 8007af6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d101      	bne.n	8007b02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007afe:	2301      	movs	r3, #1
 8007b00:	e049      	b.n	8007b96 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b08:	b2db      	uxtb	r3, r3
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d106      	bne.n	8007b1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	2200      	movs	r2, #0
 8007b12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007b16:	6878      	ldr	r0, [r7, #4]
 8007b18:	f7fc f81a 	bl	8003b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b1c:	687b      	ldr	r3, [r7, #4]
 8007b1e:	2202      	movs	r2, #2
 8007b20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681a      	ldr	r2, [r3, #0]
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4610      	mov	r0, r2
 8007b30:	f000 fa1e 	bl	8007f70 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2201      	movs	r2, #1
 8007b38:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	2201      	movs	r2, #1
 8007b40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	2201      	movs	r2, #1
 8007b48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	2201      	movs	r2, #1
 8007b50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2201      	movs	r2, #1
 8007b58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	2201      	movs	r2, #1
 8007b60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	2201      	movs	r2, #1
 8007b68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	2201      	movs	r2, #1
 8007b70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007b74:	687b      	ldr	r3, [r7, #4]
 8007b76:	2201      	movs	r2, #1
 8007b78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	2201      	movs	r2, #1
 8007b80:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	2201      	movs	r2, #1
 8007b88:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2201      	movs	r2, #1
 8007b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b94:	2300      	movs	r3, #0
}
 8007b96:	4618      	mov	r0, r3
 8007b98:	3708      	adds	r7, #8
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	bd80      	pop	{r7, pc}
	...

08007ba0 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007ba0:	b480      	push	{r7}
 8007ba2:	b085      	sub	sp, #20
 8007ba4:	af00      	add	r7, sp, #0
 8007ba6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007bae:	b2db      	uxtb	r3, r3
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d001      	beq.n	8007bb8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e033      	b.n	8007c20 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	2202      	movs	r2, #2
 8007bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	4a19      	ldr	r2, [pc, #100]	; (8007c2c <HAL_TIM_Base_Start+0x8c>)
 8007bc6:	4293      	cmp	r3, r2
 8007bc8:	d009      	beq.n	8007bde <HAL_TIM_Base_Start+0x3e>
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bd2:	d004      	beq.n	8007bde <HAL_TIM_Base_Start+0x3e>
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	681b      	ldr	r3, [r3, #0]
 8007bd8:	4a15      	ldr	r2, [pc, #84]	; (8007c30 <HAL_TIM_Base_Start+0x90>)
 8007bda:	4293      	cmp	r3, r2
 8007bdc:	d115      	bne.n	8007c0a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	681b      	ldr	r3, [r3, #0]
 8007be2:	689a      	ldr	r2, [r3, #8]
 8007be4:	4b13      	ldr	r3, [pc, #76]	; (8007c34 <HAL_TIM_Base_Start+0x94>)
 8007be6:	4013      	ands	r3, r2
 8007be8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007bea:	68fb      	ldr	r3, [r7, #12]
 8007bec:	2b06      	cmp	r3, #6
 8007bee:	d015      	beq.n	8007c1c <HAL_TIM_Base_Start+0x7c>
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007bf6:	d011      	beq.n	8007c1c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	f042 0201 	orr.w	r2, r2, #1
 8007c06:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c08:	e008      	b.n	8007c1c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f042 0201 	orr.w	r2, r2, #1
 8007c18:	601a      	str	r2, [r3, #0]
 8007c1a:	e000      	b.n	8007c1e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c1c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	40012c00 	.word	0x40012c00
 8007c30:	40014000 	.word	0x40014000
 8007c34:	00010007 	.word	0x00010007

08007c38 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007c46:	b2db      	uxtb	r3, r3
 8007c48:	2b01      	cmp	r3, #1
 8007c4a:	d001      	beq.n	8007c50 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007c4c:	2301      	movs	r3, #1
 8007c4e:	e03b      	b.n	8007cc8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2202      	movs	r2, #2
 8007c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	68da      	ldr	r2, [r3, #12]
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	681b      	ldr	r3, [r3, #0]
 8007c62:	f042 0201 	orr.w	r2, r2, #1
 8007c66:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	681b      	ldr	r3, [r3, #0]
 8007c6c:	4a19      	ldr	r2, [pc, #100]	; (8007cd4 <HAL_TIM_Base_Start_IT+0x9c>)
 8007c6e:	4293      	cmp	r3, r2
 8007c70:	d009      	beq.n	8007c86 <HAL_TIM_Base_Start_IT+0x4e>
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c7a:	d004      	beq.n	8007c86 <HAL_TIM_Base_Start_IT+0x4e>
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	4a15      	ldr	r2, [pc, #84]	; (8007cd8 <HAL_TIM_Base_Start_IT+0xa0>)
 8007c82:	4293      	cmp	r3, r2
 8007c84:	d115      	bne.n	8007cb2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	689a      	ldr	r2, [r3, #8]
 8007c8c:	4b13      	ldr	r3, [pc, #76]	; (8007cdc <HAL_TIM_Base_Start_IT+0xa4>)
 8007c8e:	4013      	ands	r3, r2
 8007c90:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	2b06      	cmp	r3, #6
 8007c96:	d015      	beq.n	8007cc4 <HAL_TIM_Base_Start_IT+0x8c>
 8007c98:	68fb      	ldr	r3, [r7, #12]
 8007c9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007c9e:	d011      	beq.n	8007cc4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	681b      	ldr	r3, [r3, #0]
 8007ca4:	681a      	ldr	r2, [r3, #0]
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	f042 0201 	orr.w	r2, r2, #1
 8007cae:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cb0:	e008      	b.n	8007cc4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	681a      	ldr	r2, [r3, #0]
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	f042 0201 	orr.w	r2, r2, #1
 8007cc0:	601a      	str	r2, [r3, #0]
 8007cc2:	e000      	b.n	8007cc6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007cc4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007cc6:	2300      	movs	r3, #0
}
 8007cc8:	4618      	mov	r0, r3
 8007cca:	3714      	adds	r7, #20
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr
 8007cd4:	40012c00 	.word	0x40012c00
 8007cd8:	40014000 	.word	0x40014000
 8007cdc:	00010007 	.word	0x00010007

08007ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007ce0:	b580      	push	{r7, lr}
 8007ce2:	b082      	sub	sp, #8
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	691b      	ldr	r3, [r3, #16]
 8007cee:	f003 0302 	and.w	r3, r3, #2
 8007cf2:	2b02      	cmp	r3, #2
 8007cf4:	d122      	bne.n	8007d3c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007cf6:	687b      	ldr	r3, [r7, #4]
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	68db      	ldr	r3, [r3, #12]
 8007cfc:	f003 0302 	and.w	r3, r3, #2
 8007d00:	2b02      	cmp	r3, #2
 8007d02:	d11b      	bne.n	8007d3c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	f06f 0202 	mvn.w	r2, #2
 8007d0c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2201      	movs	r2, #1
 8007d12:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	699b      	ldr	r3, [r3, #24]
 8007d1a:	f003 0303 	and.w	r3, r3, #3
 8007d1e:	2b00      	cmp	r3, #0
 8007d20:	d003      	beq.n	8007d2a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 f905 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007d28:	e005      	b.n	8007d36 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 f8f7 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d30:	6878      	ldr	r0, [r7, #4]
 8007d32:	f000 f908 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2200      	movs	r2, #0
 8007d3a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	681b      	ldr	r3, [r3, #0]
 8007d40:	691b      	ldr	r3, [r3, #16]
 8007d42:	f003 0304 	and.w	r3, r3, #4
 8007d46:	2b04      	cmp	r3, #4
 8007d48:	d122      	bne.n	8007d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	68db      	ldr	r3, [r3, #12]
 8007d50:	f003 0304 	and.w	r3, r3, #4
 8007d54:	2b04      	cmp	r3, #4
 8007d56:	d11b      	bne.n	8007d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f06f 0204 	mvn.w	r2, #4
 8007d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	2202      	movs	r2, #2
 8007d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	699b      	ldr	r3, [r3, #24]
 8007d6e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d72:	2b00      	cmp	r3, #0
 8007d74:	d003      	beq.n	8007d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d76:	6878      	ldr	r0, [r7, #4]
 8007d78:	f000 f8db 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007d7c:	e005      	b.n	8007d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d7e:	6878      	ldr	r0, [r7, #4]
 8007d80:	f000 f8cd 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d84:	6878      	ldr	r0, [r7, #4]
 8007d86:	f000 f8de 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	2200      	movs	r2, #0
 8007d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	f003 0308 	and.w	r3, r3, #8
 8007d9a:	2b08      	cmp	r3, #8
 8007d9c:	d122      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	68db      	ldr	r3, [r3, #12]
 8007da4:	f003 0308 	and.w	r3, r3, #8
 8007da8:	2b08      	cmp	r3, #8
 8007daa:	d11b      	bne.n	8007de4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	f06f 0208 	mvn.w	r2, #8
 8007db4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2204      	movs	r2, #4
 8007dba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	69db      	ldr	r3, [r3, #28]
 8007dc2:	f003 0303 	and.w	r3, r3, #3
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d003      	beq.n	8007dd2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007dca:	6878      	ldr	r0, [r7, #4]
 8007dcc:	f000 f8b1 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007dd0:	e005      	b.n	8007dde <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007dd2:	6878      	ldr	r0, [r7, #4]
 8007dd4:	f000 f8a3 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007dd8:	6878      	ldr	r0, [r7, #4]
 8007dda:	f000 f8b4 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	2200      	movs	r2, #0
 8007de2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	691b      	ldr	r3, [r3, #16]
 8007dea:	f003 0310 	and.w	r3, r3, #16
 8007dee:	2b10      	cmp	r3, #16
 8007df0:	d122      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	68db      	ldr	r3, [r3, #12]
 8007df8:	f003 0310 	and.w	r3, r3, #16
 8007dfc:	2b10      	cmp	r3, #16
 8007dfe:	d11b      	bne.n	8007e38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007e00:	687b      	ldr	r3, [r7, #4]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f06f 0210 	mvn.w	r2, #16
 8007e08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2208      	movs	r2, #8
 8007e0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	69db      	ldr	r3, [r3, #28]
 8007e16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d003      	beq.n	8007e26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007e1e:	6878      	ldr	r0, [r7, #4]
 8007e20:	f000 f887 	bl	8007f32 <HAL_TIM_IC_CaptureCallback>
 8007e24:	e005      	b.n	8007e32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007e26:	6878      	ldr	r0, [r7, #4]
 8007e28:	f000 f879 	bl	8007f1e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007e2c:	6878      	ldr	r0, [r7, #4]
 8007e2e:	f000 f88a 	bl	8007f46 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	2200      	movs	r2, #0
 8007e36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	f003 0301 	and.w	r3, r3, #1
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d10e      	bne.n	8007e64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	f003 0301 	and.w	r3, r3, #1
 8007e50:	2b01      	cmp	r3, #1
 8007e52:	d107      	bne.n	8007e64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f06f 0201 	mvn.w	r2, #1
 8007e5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007e5e:	6878      	ldr	r0, [r7, #4]
 8007e60:	f7fb fc20 	bl	80036a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	691b      	ldr	r3, [r3, #16]
 8007e6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e6e:	2b80      	cmp	r3, #128	; 0x80
 8007e70:	d10e      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	68db      	ldr	r3, [r3, #12]
 8007e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007e7c:	2b80      	cmp	r3, #128	; 0x80
 8007e7e:	d107      	bne.n	8007e90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007e88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007e8a:	6878      	ldr	r0, [r7, #4]
 8007e8c:	f000 f944 	bl	8008118 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	691b      	ldr	r3, [r3, #16]
 8007e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e9e:	d10e      	bne.n	8007ebe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007eaa:	2b80      	cmp	r3, #128	; 0x80
 8007eac:	d107      	bne.n	8007ebe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8007eb6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007eb8:	6878      	ldr	r0, [r7, #4]
 8007eba:	f000 f937 	bl	800812c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	691b      	ldr	r3, [r3, #16]
 8007ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec8:	2b40      	cmp	r3, #64	; 0x40
 8007eca:	d10e      	bne.n	8007eea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	68db      	ldr	r3, [r3, #12]
 8007ed2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ed6:	2b40      	cmp	r3, #64	; 0x40
 8007ed8:	d107      	bne.n	8007eea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	f000 f838 	bl	8007f5a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	691b      	ldr	r3, [r3, #16]
 8007ef0:	f003 0320 	and.w	r3, r3, #32
 8007ef4:	2b20      	cmp	r3, #32
 8007ef6:	d10e      	bne.n	8007f16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	68db      	ldr	r3, [r3, #12]
 8007efe:	f003 0320 	and.w	r3, r3, #32
 8007f02:	2b20      	cmp	r3, #32
 8007f04:	d107      	bne.n	8007f16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f06f 0220 	mvn.w	r2, #32
 8007f0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007f10:	6878      	ldr	r0, [r7, #4]
 8007f12:	f000 f8f7 	bl	8008104 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007f16:	bf00      	nop
 8007f18:	3708      	adds	r7, #8
 8007f1a:	46bd      	mov	sp, r7
 8007f1c:	bd80      	pop	{r7, pc}

08007f1e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007f26:	bf00      	nop
 8007f28:	370c      	adds	r7, #12
 8007f2a:	46bd      	mov	sp, r7
 8007f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f30:	4770      	bx	lr

08007f32 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007f32:	b480      	push	{r7}
 8007f34:	b083      	sub	sp, #12
 8007f36:	af00      	add	r7, sp, #0
 8007f38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007f3a:	bf00      	nop
 8007f3c:	370c      	adds	r7, #12
 8007f3e:	46bd      	mov	sp, r7
 8007f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f44:	4770      	bx	lr

08007f46 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007f46:	b480      	push	{r7}
 8007f48:	b083      	sub	sp, #12
 8007f4a:	af00      	add	r7, sp, #0
 8007f4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007f4e:	bf00      	nop
 8007f50:	370c      	adds	r7, #12
 8007f52:	46bd      	mov	sp, r7
 8007f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f58:	4770      	bx	lr

08007f5a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007f5a:	b480      	push	{r7}
 8007f5c:	b083      	sub	sp, #12
 8007f5e:	af00      	add	r7, sp, #0
 8007f60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007f62:	bf00      	nop
 8007f64:	370c      	adds	r7, #12
 8007f66:	46bd      	mov	sp, r7
 8007f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f6c:	4770      	bx	lr
	...

08007f70 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007f70:	b480      	push	{r7}
 8007f72:	b085      	sub	sp, #20
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
 8007f78:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	4a2a      	ldr	r2, [pc, #168]	; (800802c <TIM_Base_SetConfig+0xbc>)
 8007f84:	4293      	cmp	r3, r2
 8007f86:	d003      	beq.n	8007f90 <TIM_Base_SetConfig+0x20>
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f8e:	d108      	bne.n	8007fa2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f96:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007f98:	683b      	ldr	r3, [r7, #0]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	68fa      	ldr	r2, [r7, #12]
 8007f9e:	4313      	orrs	r3, r2
 8007fa0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	4a21      	ldr	r2, [pc, #132]	; (800802c <TIM_Base_SetConfig+0xbc>)
 8007fa6:	4293      	cmp	r3, r2
 8007fa8:	d00b      	beq.n	8007fc2 <TIM_Base_SetConfig+0x52>
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007fb0:	d007      	beq.n	8007fc2 <TIM_Base_SetConfig+0x52>
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	4a1e      	ldr	r2, [pc, #120]	; (8008030 <TIM_Base_SetConfig+0xc0>)
 8007fb6:	4293      	cmp	r3, r2
 8007fb8:	d003      	beq.n	8007fc2 <TIM_Base_SetConfig+0x52>
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	4a1d      	ldr	r2, [pc, #116]	; (8008034 <TIM_Base_SetConfig+0xc4>)
 8007fbe:	4293      	cmp	r3, r2
 8007fc0:	d108      	bne.n	8007fd4 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007fc2:	68fb      	ldr	r3, [r7, #12]
 8007fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007fca:	683b      	ldr	r3, [r7, #0]
 8007fcc:	68db      	ldr	r3, [r3, #12]
 8007fce:	68fa      	ldr	r2, [r7, #12]
 8007fd0:	4313      	orrs	r3, r2
 8007fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	695b      	ldr	r3, [r3, #20]
 8007fde:	4313      	orrs	r3, r2
 8007fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	68fa      	ldr	r2, [r7, #12]
 8007fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007fe8:	683b      	ldr	r3, [r7, #0]
 8007fea:	689a      	ldr	r2, [r3, #8]
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007ff0:	683b      	ldr	r3, [r7, #0]
 8007ff2:	681a      	ldr	r2, [r3, #0]
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007ff8:	687b      	ldr	r3, [r7, #4]
 8007ffa:	4a0c      	ldr	r2, [pc, #48]	; (800802c <TIM_Base_SetConfig+0xbc>)
 8007ffc:	4293      	cmp	r3, r2
 8007ffe:	d007      	beq.n	8008010 <TIM_Base_SetConfig+0xa0>
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	4a0b      	ldr	r2, [pc, #44]	; (8008030 <TIM_Base_SetConfig+0xc0>)
 8008004:	4293      	cmp	r3, r2
 8008006:	d003      	beq.n	8008010 <TIM_Base_SetConfig+0xa0>
 8008008:	687b      	ldr	r3, [r7, #4]
 800800a:	4a0a      	ldr	r2, [pc, #40]	; (8008034 <TIM_Base_SetConfig+0xc4>)
 800800c:	4293      	cmp	r3, r2
 800800e:	d103      	bne.n	8008018 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	691a      	ldr	r2, [r3, #16]
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	2201      	movs	r2, #1
 800801c:	615a      	str	r2, [r3, #20]
}
 800801e:	bf00      	nop
 8008020:	3714      	adds	r7, #20
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	40012c00 	.word	0x40012c00
 8008030:	40014000 	.word	0x40014000
 8008034:	40014400 	.word	0x40014400

08008038 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008038:	b480      	push	{r7}
 800803a:	b085      	sub	sp, #20
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008048:	2b01      	cmp	r3, #1
 800804a:	d101      	bne.n	8008050 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800804c:	2302      	movs	r3, #2
 800804e:	e04f      	b.n	80080f0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	2201      	movs	r2, #1
 8008054:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	2202      	movs	r2, #2
 800805c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	689b      	ldr	r3, [r3, #8]
 800806e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	4a21      	ldr	r2, [pc, #132]	; (80080fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008076:	4293      	cmp	r3, r2
 8008078:	d108      	bne.n	800808c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008080:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008082:	683b      	ldr	r3, [r7, #0]
 8008084:	685b      	ldr	r3, [r3, #4]
 8008086:	68fa      	ldr	r2, [r7, #12]
 8008088:	4313      	orrs	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008092:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008094:	683b      	ldr	r3, [r7, #0]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	4313      	orrs	r3, r2
 800809c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	68fa      	ldr	r2, [r7, #12]
 80080a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	4a14      	ldr	r2, [pc, #80]	; (80080fc <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80080ac:	4293      	cmp	r3, r2
 80080ae:	d009      	beq.n	80080c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b8:	d004      	beq.n	80080c4 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	681b      	ldr	r3, [r3, #0]
 80080be:	4a10      	ldr	r2, [pc, #64]	; (8008100 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80080c0:	4293      	cmp	r3, r2
 80080c2:	d10c      	bne.n	80080de <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80080ca:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80080cc:	683b      	ldr	r3, [r7, #0]
 80080ce:	689b      	ldr	r3, [r3, #8]
 80080d0:	68ba      	ldr	r2, [r7, #8]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	681b      	ldr	r3, [r3, #0]
 80080da:	68ba      	ldr	r2, [r7, #8]
 80080dc:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	2201      	movs	r2, #1
 80080e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	2200      	movs	r2, #0
 80080ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80080ee:	2300      	movs	r3, #0
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	3714      	adds	r7, #20
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr
 80080fc:	40012c00 	.word	0x40012c00
 8008100:	40014000 	.word	0x40014000

08008104 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008104:	b480      	push	{r7}
 8008106:	b083      	sub	sp, #12
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800810c:	bf00      	nop
 800810e:	370c      	adds	r7, #12
 8008110:	46bd      	mov	sp, r7
 8008112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008116:	4770      	bx	lr

08008118 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008118:	b480      	push	{r7}
 800811a:	b083      	sub	sp, #12
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008120:	bf00      	nop
 8008122:	370c      	adds	r7, #12
 8008124:	46bd      	mov	sp, r7
 8008126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800812a:	4770      	bx	lr

0800812c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800812c:	b480      	push	{r7}
 800812e:	b083      	sub	sp, #12
 8008130:	af00      	add	r7, sp, #0
 8008132:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b082      	sub	sp, #8
 8008144:	af00      	add	r7, sp, #0
 8008146:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	2b00      	cmp	r3, #0
 800814c:	d101      	bne.n	8008152 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800814e:	2301      	movs	r3, #1
 8008150:	e040      	b.n	80081d4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008156:	2b00      	cmp	r3, #0
 8008158:	d106      	bne.n	8008168 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2200      	movs	r2, #0
 800815e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008162:	6878      	ldr	r0, [r7, #4]
 8008164:	f7fb fd2e 	bl	8003bc4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2224      	movs	r2, #36	; 0x24
 800816c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	681a      	ldr	r2, [r3, #0]
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	f022 0201 	bic.w	r2, r2, #1
 800817c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800817e:	6878      	ldr	r0, [r7, #4]
 8008180:	f000 f8c0 	bl	8008304 <UART_SetConfig>
 8008184:	4603      	mov	r3, r0
 8008186:	2b01      	cmp	r3, #1
 8008188:	d101      	bne.n	800818e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800818a:	2301      	movs	r3, #1
 800818c:	e022      	b.n	80081d4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008192:	2b00      	cmp	r3, #0
 8008194:	d002      	beq.n	800819c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 fae0 	bl	800875c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	685a      	ldr	r2, [r3, #4]
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	681b      	ldr	r3, [r3, #0]
 80081a6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80081aa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	689a      	ldr	r2, [r3, #8]
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80081ba:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	681a      	ldr	r2, [r3, #0]
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	f042 0201 	orr.w	r2, r2, #1
 80081ca:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80081cc:	6878      	ldr	r0, [r7, #4]
 80081ce:	f000 fb67 	bl	80088a0 <UART_CheckIdleState>
 80081d2:	4603      	mov	r3, r0
}
 80081d4:	4618      	mov	r0, r3
 80081d6:	3708      	adds	r7, #8
 80081d8:	46bd      	mov	sp, r7
 80081da:	bd80      	pop	{r7, pc}

080081dc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80081dc:	b580      	push	{r7, lr}
 80081de:	b08a      	sub	sp, #40	; 0x28
 80081e0:	af02      	add	r7, sp, #8
 80081e2:	60f8      	str	r0, [r7, #12]
 80081e4:	60b9      	str	r1, [r7, #8]
 80081e6:	603b      	str	r3, [r7, #0]
 80081e8:	4613      	mov	r3, r2
 80081ea:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80081ec:	68fb      	ldr	r3, [r7, #12]
 80081ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80081f0:	2b20      	cmp	r3, #32
 80081f2:	f040 8082 	bne.w	80082fa <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80081f6:	68bb      	ldr	r3, [r7, #8]
 80081f8:	2b00      	cmp	r3, #0
 80081fa:	d002      	beq.n	8008202 <HAL_UART_Transmit+0x26>
 80081fc:	88fb      	ldrh	r3, [r7, #6]
 80081fe:	2b00      	cmp	r3, #0
 8008200:	d101      	bne.n	8008206 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008202:	2301      	movs	r3, #1
 8008204:	e07a      	b.n	80082fc <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008206:	68fb      	ldr	r3, [r7, #12]
 8008208:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800820c:	2b01      	cmp	r3, #1
 800820e:	d101      	bne.n	8008214 <HAL_UART_Transmit+0x38>
 8008210:	2302      	movs	r3, #2
 8008212:	e073      	b.n	80082fc <HAL_UART_Transmit+0x120>
 8008214:	68fb      	ldr	r3, [r7, #12]
 8008216:	2201      	movs	r2, #1
 8008218:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800821c:	68fb      	ldr	r3, [r7, #12]
 800821e:	2200      	movs	r2, #0
 8008220:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008224:	68fb      	ldr	r3, [r7, #12]
 8008226:	2221      	movs	r2, #33	; 0x21
 8008228:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800822a:	f7fb fe83 	bl	8003f34 <HAL_GetTick>
 800822e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	88fa      	ldrh	r2, [r7, #6]
 8008234:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	88fa      	ldrh	r2, [r7, #6]
 800823c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008240:	68fb      	ldr	r3, [r7, #12]
 8008242:	689b      	ldr	r3, [r3, #8]
 8008244:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008248:	d108      	bne.n	800825c <HAL_UART_Transmit+0x80>
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	691b      	ldr	r3, [r3, #16]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d104      	bne.n	800825c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8008252:	2300      	movs	r3, #0
 8008254:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008256:	68bb      	ldr	r3, [r7, #8]
 8008258:	61bb      	str	r3, [r7, #24]
 800825a:	e003      	b.n	8008264 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800825c:	68bb      	ldr	r3, [r7, #8]
 800825e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008260:	2300      	movs	r3, #0
 8008262:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800826c:	e02d      	b.n	80082ca <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800826e:	683b      	ldr	r3, [r7, #0]
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	2200      	movs	r2, #0
 8008276:	2180      	movs	r1, #128	; 0x80
 8008278:	68f8      	ldr	r0, [r7, #12]
 800827a:	f000 fb5a 	bl	8008932 <UART_WaitOnFlagUntilTimeout>
 800827e:	4603      	mov	r3, r0
 8008280:	2b00      	cmp	r3, #0
 8008282:	d001      	beq.n	8008288 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008284:	2303      	movs	r3, #3
 8008286:	e039      	b.n	80082fc <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008288:	69fb      	ldr	r3, [r7, #28]
 800828a:	2b00      	cmp	r3, #0
 800828c:	d10b      	bne.n	80082a6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800828e:	69bb      	ldr	r3, [r7, #24]
 8008290:	881a      	ldrh	r2, [r3, #0]
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800829a:	b292      	uxth	r2, r2
 800829c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800829e:	69bb      	ldr	r3, [r7, #24]
 80082a0:	3302      	adds	r3, #2
 80082a2:	61bb      	str	r3, [r7, #24]
 80082a4:	e008      	b.n	80082b8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	781a      	ldrb	r2, [r3, #0]
 80082aa:	68fb      	ldr	r3, [r7, #12]
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	b292      	uxth	r2, r2
 80082b0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80082b2:	69fb      	ldr	r3, [r7, #28]
 80082b4:	3301      	adds	r3, #1
 80082b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082be:	b29b      	uxth	r3, r3
 80082c0:	3b01      	subs	r3, #1
 80082c2:	b29a      	uxth	r2, r3
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80082ca:	68fb      	ldr	r3, [r7, #12]
 80082cc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80082d0:	b29b      	uxth	r3, r3
 80082d2:	2b00      	cmp	r3, #0
 80082d4:	d1cb      	bne.n	800826e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	9300      	str	r3, [sp, #0]
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	2200      	movs	r2, #0
 80082de:	2140      	movs	r1, #64	; 0x40
 80082e0:	68f8      	ldr	r0, [r7, #12]
 80082e2:	f000 fb26 	bl	8008932 <UART_WaitOnFlagUntilTimeout>
 80082e6:	4603      	mov	r3, r0
 80082e8:	2b00      	cmp	r3, #0
 80082ea:	d001      	beq.n	80082f0 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80082ec:	2303      	movs	r3, #3
 80082ee:	e005      	b.n	80082fc <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	2220      	movs	r2, #32
 80082f4:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80082f6:	2300      	movs	r3, #0
 80082f8:	e000      	b.n	80082fc <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80082fa:	2302      	movs	r3, #2
  }
}
 80082fc:	4618      	mov	r0, r3
 80082fe:	3720      	adds	r7, #32
 8008300:	46bd      	mov	sp, r7
 8008302:	bd80      	pop	{r7, pc}

08008304 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008304:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008308:	b08a      	sub	sp, #40	; 0x28
 800830a:	af00      	add	r7, sp, #0
 800830c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800830e:	2300      	movs	r3, #0
 8008310:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	689a      	ldr	r2, [r3, #8]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	431a      	orrs	r2, r3
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	695b      	ldr	r3, [r3, #20]
 8008322:	431a      	orrs	r2, r3
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	69db      	ldr	r3, [r3, #28]
 8008328:	4313      	orrs	r3, r2
 800832a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	681a      	ldr	r2, [r3, #0]
 8008332:	4bb4      	ldr	r3, [pc, #720]	; (8008604 <UART_SetConfig+0x300>)
 8008334:	4013      	ands	r3, r2
 8008336:	68fa      	ldr	r2, [r7, #12]
 8008338:	6812      	ldr	r2, [r2, #0]
 800833a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800833c:	430b      	orrs	r3, r1
 800833e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	681b      	ldr	r3, [r3, #0]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	68da      	ldr	r2, [r3, #12]
 800834e:	68fb      	ldr	r3, [r7, #12]
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	430a      	orrs	r2, r1
 8008354:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	4aa9      	ldr	r2, [pc, #676]	; (8008608 <UART_SetConfig+0x304>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d004      	beq.n	8008370 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008366:	68fb      	ldr	r3, [r7, #12]
 8008368:	6a1b      	ldr	r3, [r3, #32]
 800836a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800836c:	4313      	orrs	r3, r2
 800836e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	689b      	ldr	r3, [r3, #8]
 8008376:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008380:	430a      	orrs	r2, r1
 8008382:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	681b      	ldr	r3, [r3, #0]
 8008388:	4aa0      	ldr	r2, [pc, #640]	; (800860c <UART_SetConfig+0x308>)
 800838a:	4293      	cmp	r3, r2
 800838c:	d126      	bne.n	80083dc <UART_SetConfig+0xd8>
 800838e:	4ba0      	ldr	r3, [pc, #640]	; (8008610 <UART_SetConfig+0x30c>)
 8008390:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008394:	f003 0303 	and.w	r3, r3, #3
 8008398:	2b03      	cmp	r3, #3
 800839a:	d81b      	bhi.n	80083d4 <UART_SetConfig+0xd0>
 800839c:	a201      	add	r2, pc, #4	; (adr r2, 80083a4 <UART_SetConfig+0xa0>)
 800839e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083a2:	bf00      	nop
 80083a4:	080083b5 	.word	0x080083b5
 80083a8:	080083c5 	.word	0x080083c5
 80083ac:	080083bd 	.word	0x080083bd
 80083b0:	080083cd 	.word	0x080083cd
 80083b4:	2301      	movs	r3, #1
 80083b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ba:	e080      	b.n	80084be <UART_SetConfig+0x1ba>
 80083bc:	2302      	movs	r3, #2
 80083be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083c2:	e07c      	b.n	80084be <UART_SetConfig+0x1ba>
 80083c4:	2304      	movs	r3, #4
 80083c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083ca:	e078      	b.n	80084be <UART_SetConfig+0x1ba>
 80083cc:	2308      	movs	r3, #8
 80083ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083d2:	e074      	b.n	80084be <UART_SetConfig+0x1ba>
 80083d4:	2310      	movs	r3, #16
 80083d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80083da:	e070      	b.n	80084be <UART_SetConfig+0x1ba>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	4a8c      	ldr	r2, [pc, #560]	; (8008614 <UART_SetConfig+0x310>)
 80083e2:	4293      	cmp	r3, r2
 80083e4:	d138      	bne.n	8008458 <UART_SetConfig+0x154>
 80083e6:	4b8a      	ldr	r3, [pc, #552]	; (8008610 <UART_SetConfig+0x30c>)
 80083e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80083ec:	f003 030c 	and.w	r3, r3, #12
 80083f0:	2b0c      	cmp	r3, #12
 80083f2:	d82d      	bhi.n	8008450 <UART_SetConfig+0x14c>
 80083f4:	a201      	add	r2, pc, #4	; (adr r2, 80083fc <UART_SetConfig+0xf8>)
 80083f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80083fa:	bf00      	nop
 80083fc:	08008431 	.word	0x08008431
 8008400:	08008451 	.word	0x08008451
 8008404:	08008451 	.word	0x08008451
 8008408:	08008451 	.word	0x08008451
 800840c:	08008441 	.word	0x08008441
 8008410:	08008451 	.word	0x08008451
 8008414:	08008451 	.word	0x08008451
 8008418:	08008451 	.word	0x08008451
 800841c:	08008439 	.word	0x08008439
 8008420:	08008451 	.word	0x08008451
 8008424:	08008451 	.word	0x08008451
 8008428:	08008451 	.word	0x08008451
 800842c:	08008449 	.word	0x08008449
 8008430:	2300      	movs	r3, #0
 8008432:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008436:	e042      	b.n	80084be <UART_SetConfig+0x1ba>
 8008438:	2302      	movs	r3, #2
 800843a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800843e:	e03e      	b.n	80084be <UART_SetConfig+0x1ba>
 8008440:	2304      	movs	r3, #4
 8008442:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008446:	e03a      	b.n	80084be <UART_SetConfig+0x1ba>
 8008448:	2308      	movs	r3, #8
 800844a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800844e:	e036      	b.n	80084be <UART_SetConfig+0x1ba>
 8008450:	2310      	movs	r3, #16
 8008452:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008456:	e032      	b.n	80084be <UART_SetConfig+0x1ba>
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	4a6a      	ldr	r2, [pc, #424]	; (8008608 <UART_SetConfig+0x304>)
 800845e:	4293      	cmp	r3, r2
 8008460:	d12a      	bne.n	80084b8 <UART_SetConfig+0x1b4>
 8008462:	4b6b      	ldr	r3, [pc, #428]	; (8008610 <UART_SetConfig+0x30c>)
 8008464:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008468:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800846c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008470:	d01a      	beq.n	80084a8 <UART_SetConfig+0x1a4>
 8008472:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008476:	d81b      	bhi.n	80084b0 <UART_SetConfig+0x1ac>
 8008478:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800847c:	d00c      	beq.n	8008498 <UART_SetConfig+0x194>
 800847e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008482:	d815      	bhi.n	80084b0 <UART_SetConfig+0x1ac>
 8008484:	2b00      	cmp	r3, #0
 8008486:	d003      	beq.n	8008490 <UART_SetConfig+0x18c>
 8008488:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800848c:	d008      	beq.n	80084a0 <UART_SetConfig+0x19c>
 800848e:	e00f      	b.n	80084b0 <UART_SetConfig+0x1ac>
 8008490:	2300      	movs	r3, #0
 8008492:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008496:	e012      	b.n	80084be <UART_SetConfig+0x1ba>
 8008498:	2302      	movs	r3, #2
 800849a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800849e:	e00e      	b.n	80084be <UART_SetConfig+0x1ba>
 80084a0:	2304      	movs	r3, #4
 80084a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084a6:	e00a      	b.n	80084be <UART_SetConfig+0x1ba>
 80084a8:	2308      	movs	r3, #8
 80084aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084ae:	e006      	b.n	80084be <UART_SetConfig+0x1ba>
 80084b0:	2310      	movs	r3, #16
 80084b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80084b6:	e002      	b.n	80084be <UART_SetConfig+0x1ba>
 80084b8:	2310      	movs	r3, #16
 80084ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	4a51      	ldr	r2, [pc, #324]	; (8008608 <UART_SetConfig+0x304>)
 80084c4:	4293      	cmp	r3, r2
 80084c6:	d17a      	bne.n	80085be <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80084c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80084cc:	2b08      	cmp	r3, #8
 80084ce:	d824      	bhi.n	800851a <UART_SetConfig+0x216>
 80084d0:	a201      	add	r2, pc, #4	; (adr r2, 80084d8 <UART_SetConfig+0x1d4>)
 80084d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80084d6:	bf00      	nop
 80084d8:	080084fd 	.word	0x080084fd
 80084dc:	0800851b 	.word	0x0800851b
 80084e0:	08008505 	.word	0x08008505
 80084e4:	0800851b 	.word	0x0800851b
 80084e8:	0800850b 	.word	0x0800850b
 80084ec:	0800851b 	.word	0x0800851b
 80084f0:	0800851b 	.word	0x0800851b
 80084f4:	0800851b 	.word	0x0800851b
 80084f8:	08008513 	.word	0x08008513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084fc:	f7fe ff42 	bl	8007384 <HAL_RCC_GetPCLK1Freq>
 8008500:	61f8      	str	r0, [r7, #28]
        break;
 8008502:	e010      	b.n	8008526 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008504:	4b44      	ldr	r3, [pc, #272]	; (8008618 <UART_SetConfig+0x314>)
 8008506:	61fb      	str	r3, [r7, #28]
        break;
 8008508:	e00d      	b.n	8008526 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800850a:	f7fe fea3 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 800850e:	61f8      	str	r0, [r7, #28]
        break;
 8008510:	e009      	b.n	8008526 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008512:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008516:	61fb      	str	r3, [r7, #28]
        break;
 8008518:	e005      	b.n	8008526 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800851a:	2300      	movs	r3, #0
 800851c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008524:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008526:	69fb      	ldr	r3, [r7, #28]
 8008528:	2b00      	cmp	r3, #0
 800852a:	f000 8107 	beq.w	800873c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800852e:	68fb      	ldr	r3, [r7, #12]
 8008530:	685a      	ldr	r2, [r3, #4]
 8008532:	4613      	mov	r3, r2
 8008534:	005b      	lsls	r3, r3, #1
 8008536:	4413      	add	r3, r2
 8008538:	69fa      	ldr	r2, [r7, #28]
 800853a:	429a      	cmp	r2, r3
 800853c:	d305      	bcc.n	800854a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	685b      	ldr	r3, [r3, #4]
 8008542:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008544:	69fa      	ldr	r2, [r7, #28]
 8008546:	429a      	cmp	r2, r3
 8008548:	d903      	bls.n	8008552 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800854a:	2301      	movs	r3, #1
 800854c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008550:	e0f4      	b.n	800873c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8008552:	69fb      	ldr	r3, [r7, #28]
 8008554:	2200      	movs	r2, #0
 8008556:	461c      	mov	r4, r3
 8008558:	4615      	mov	r5, r2
 800855a:	f04f 0200 	mov.w	r2, #0
 800855e:	f04f 0300 	mov.w	r3, #0
 8008562:	022b      	lsls	r3, r5, #8
 8008564:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008568:	0222      	lsls	r2, r4, #8
 800856a:	68f9      	ldr	r1, [r7, #12]
 800856c:	6849      	ldr	r1, [r1, #4]
 800856e:	0849      	lsrs	r1, r1, #1
 8008570:	2000      	movs	r0, #0
 8008572:	4688      	mov	r8, r1
 8008574:	4681      	mov	r9, r0
 8008576:	eb12 0a08 	adds.w	sl, r2, r8
 800857a:	eb43 0b09 	adc.w	fp, r3, r9
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	2200      	movs	r2, #0
 8008584:	603b      	str	r3, [r7, #0]
 8008586:	607a      	str	r2, [r7, #4]
 8008588:	e9d7 2300 	ldrd	r2, r3, [r7]
 800858c:	4650      	mov	r0, sl
 800858e:	4659      	mov	r1, fp
 8008590:	f7f8 fb5a 	bl	8000c48 <__aeabi_uldivmod>
 8008594:	4602      	mov	r2, r0
 8008596:	460b      	mov	r3, r1
 8008598:	4613      	mov	r3, r2
 800859a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800859c:	69bb      	ldr	r3, [r7, #24]
 800859e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80085a2:	d308      	bcc.n	80085b6 <UART_SetConfig+0x2b2>
 80085a4:	69bb      	ldr	r3, [r7, #24]
 80085a6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80085aa:	d204      	bcs.n	80085b6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	681b      	ldr	r3, [r3, #0]
 80085b0:	69ba      	ldr	r2, [r7, #24]
 80085b2:	60da      	str	r2, [r3, #12]
 80085b4:	e0c2      	b.n	800873c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80085b6:	2301      	movs	r3, #1
 80085b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80085bc:	e0be      	b.n	800873c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	69db      	ldr	r3, [r3, #28]
 80085c2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80085c6:	d16a      	bne.n	800869e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80085c8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80085cc:	2b08      	cmp	r3, #8
 80085ce:	d834      	bhi.n	800863a <UART_SetConfig+0x336>
 80085d0:	a201      	add	r2, pc, #4	; (adr r2, 80085d8 <UART_SetConfig+0x2d4>)
 80085d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80085d6:	bf00      	nop
 80085d8:	080085fd 	.word	0x080085fd
 80085dc:	0800861d 	.word	0x0800861d
 80085e0:	08008625 	.word	0x08008625
 80085e4:	0800863b 	.word	0x0800863b
 80085e8:	0800862b 	.word	0x0800862b
 80085ec:	0800863b 	.word	0x0800863b
 80085f0:	0800863b 	.word	0x0800863b
 80085f4:	0800863b 	.word	0x0800863b
 80085f8:	08008633 	.word	0x08008633
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80085fc:	f7fe fec2 	bl	8007384 <HAL_RCC_GetPCLK1Freq>
 8008600:	61f8      	str	r0, [r7, #28]
        break;
 8008602:	e020      	b.n	8008646 <UART_SetConfig+0x342>
 8008604:	efff69f3 	.word	0xefff69f3
 8008608:	40008000 	.word	0x40008000
 800860c:	40013800 	.word	0x40013800
 8008610:	40021000 	.word	0x40021000
 8008614:	40004400 	.word	0x40004400
 8008618:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800861c:	f7fe fec8 	bl	80073b0 <HAL_RCC_GetPCLK2Freq>
 8008620:	61f8      	str	r0, [r7, #28]
        break;
 8008622:	e010      	b.n	8008646 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008624:	4b4c      	ldr	r3, [pc, #304]	; (8008758 <UART_SetConfig+0x454>)
 8008626:	61fb      	str	r3, [r7, #28]
        break;
 8008628:	e00d      	b.n	8008646 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800862a:	f7fe fe13 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 800862e:	61f8      	str	r0, [r7, #28]
        break;
 8008630:	e009      	b.n	8008646 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008636:	61fb      	str	r3, [r7, #28]
        break;
 8008638:	e005      	b.n	8008646 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800863a:	2300      	movs	r3, #0
 800863c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800863e:	2301      	movs	r3, #1
 8008640:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008644:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008646:	69fb      	ldr	r3, [r7, #28]
 8008648:	2b00      	cmp	r3, #0
 800864a:	d077      	beq.n	800873c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800864c:	69fb      	ldr	r3, [r7, #28]
 800864e:	005a      	lsls	r2, r3, #1
 8008650:	68fb      	ldr	r3, [r7, #12]
 8008652:	685b      	ldr	r3, [r3, #4]
 8008654:	085b      	lsrs	r3, r3, #1
 8008656:	441a      	add	r2, r3
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	685b      	ldr	r3, [r3, #4]
 800865c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008660:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	2b0f      	cmp	r3, #15
 8008666:	d916      	bls.n	8008696 <UART_SetConfig+0x392>
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800866e:	d212      	bcs.n	8008696 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008670:	69bb      	ldr	r3, [r7, #24]
 8008672:	b29b      	uxth	r3, r3
 8008674:	f023 030f 	bic.w	r3, r3, #15
 8008678:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800867a:	69bb      	ldr	r3, [r7, #24]
 800867c:	085b      	lsrs	r3, r3, #1
 800867e:	b29b      	uxth	r3, r3
 8008680:	f003 0307 	and.w	r3, r3, #7
 8008684:	b29a      	uxth	r2, r3
 8008686:	8afb      	ldrh	r3, [r7, #22]
 8008688:	4313      	orrs	r3, r2
 800868a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800868c:	68fb      	ldr	r3, [r7, #12]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	8afa      	ldrh	r2, [r7, #22]
 8008692:	60da      	str	r2, [r3, #12]
 8008694:	e052      	b.n	800873c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008696:	2301      	movs	r3, #1
 8008698:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800869c:	e04e      	b.n	800873c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800869e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80086a2:	2b08      	cmp	r3, #8
 80086a4:	d827      	bhi.n	80086f6 <UART_SetConfig+0x3f2>
 80086a6:	a201      	add	r2, pc, #4	; (adr r2, 80086ac <UART_SetConfig+0x3a8>)
 80086a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086ac:	080086d1 	.word	0x080086d1
 80086b0:	080086d9 	.word	0x080086d9
 80086b4:	080086e1 	.word	0x080086e1
 80086b8:	080086f7 	.word	0x080086f7
 80086bc:	080086e7 	.word	0x080086e7
 80086c0:	080086f7 	.word	0x080086f7
 80086c4:	080086f7 	.word	0x080086f7
 80086c8:	080086f7 	.word	0x080086f7
 80086cc:	080086ef 	.word	0x080086ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80086d0:	f7fe fe58 	bl	8007384 <HAL_RCC_GetPCLK1Freq>
 80086d4:	61f8      	str	r0, [r7, #28]
        break;
 80086d6:	e014      	b.n	8008702 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80086d8:	f7fe fe6a 	bl	80073b0 <HAL_RCC_GetPCLK2Freq>
 80086dc:	61f8      	str	r0, [r7, #28]
        break;
 80086de:	e010      	b.n	8008702 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80086e0:	4b1d      	ldr	r3, [pc, #116]	; (8008758 <UART_SetConfig+0x454>)
 80086e2:	61fb      	str	r3, [r7, #28]
        break;
 80086e4:	e00d      	b.n	8008702 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80086e6:	f7fe fdb5 	bl	8007254 <HAL_RCC_GetSysClockFreq>
 80086ea:	61f8      	str	r0, [r7, #28]
        break;
 80086ec:	e009      	b.n	8008702 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80086ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80086f2:	61fb      	str	r3, [r7, #28]
        break;
 80086f4:	e005      	b.n	8008702 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80086f6:	2300      	movs	r3, #0
 80086f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80086fa:	2301      	movs	r3, #1
 80086fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008700:	bf00      	nop
    }

    if (pclk != 0U)
 8008702:	69fb      	ldr	r3, [r7, #28]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d019      	beq.n	800873c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	685b      	ldr	r3, [r3, #4]
 800870c:	085a      	lsrs	r2, r3, #1
 800870e:	69fb      	ldr	r3, [r7, #28]
 8008710:	441a      	add	r2, r3
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	fbb2 f3f3 	udiv	r3, r2, r3
 800871a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	2b0f      	cmp	r3, #15
 8008720:	d909      	bls.n	8008736 <UART_SetConfig+0x432>
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008728:	d205      	bcs.n	8008736 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800872a:	69bb      	ldr	r3, [r7, #24]
 800872c:	b29a      	uxth	r2, r3
 800872e:	68fb      	ldr	r3, [r7, #12]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	60da      	str	r2, [r3, #12]
 8008734:	e002      	b.n	800873c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008736:	2301      	movs	r3, #1
 8008738:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800873c:	68fb      	ldr	r3, [r7, #12]
 800873e:	2200      	movs	r2, #0
 8008740:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	2200      	movs	r2, #0
 8008746:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008748:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800874c:	4618      	mov	r0, r3
 800874e:	3728      	adds	r7, #40	; 0x28
 8008750:	46bd      	mov	sp, r7
 8008752:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008756:	bf00      	nop
 8008758:	00f42400 	.word	0x00f42400

0800875c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800875c:	b480      	push	{r7}
 800875e:	b083      	sub	sp, #12
 8008760:	af00      	add	r7, sp, #0
 8008762:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008768:	f003 0301 	and.w	r3, r3, #1
 800876c:	2b00      	cmp	r3, #0
 800876e:	d00a      	beq.n	8008786 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	685b      	ldr	r3, [r3, #4]
 8008776:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	430a      	orrs	r2, r1
 8008784:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008786:	687b      	ldr	r3, [r7, #4]
 8008788:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800878a:	f003 0302 	and.w	r3, r3, #2
 800878e:	2b00      	cmp	r3, #0
 8008790:	d00a      	beq.n	80087a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	685b      	ldr	r3, [r3, #4]
 8008798:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	430a      	orrs	r2, r1
 80087a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ac:	f003 0304 	and.w	r3, r3, #4
 80087b0:	2b00      	cmp	r3, #0
 80087b2:	d00a      	beq.n	80087ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	685b      	ldr	r3, [r3, #4]
 80087ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	430a      	orrs	r2, r1
 80087c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087ce:	f003 0308 	and.w	r3, r3, #8
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d00a      	beq.n	80087ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	685b      	ldr	r3, [r3, #4]
 80087dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	681b      	ldr	r3, [r3, #0]
 80087e8:	430a      	orrs	r2, r1
 80087ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087f0:	f003 0310 	and.w	r3, r3, #16
 80087f4:	2b00      	cmp	r3, #0
 80087f6:	d00a      	beq.n	800880e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	689b      	ldr	r3, [r3, #8]
 80087fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	430a      	orrs	r2, r1
 800880c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008812:	f003 0320 	and.w	r3, r3, #32
 8008816:	2b00      	cmp	r3, #0
 8008818:	d00a      	beq.n	8008830 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	681b      	ldr	r3, [r3, #0]
 800881e:	689b      	ldr	r3, [r3, #8]
 8008820:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	430a      	orrs	r2, r1
 800882e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008834:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008838:	2b00      	cmp	r3, #0
 800883a:	d01a      	beq.n	8008872 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	681b      	ldr	r3, [r3, #0]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008846:	687b      	ldr	r3, [r7, #4]
 8008848:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	430a      	orrs	r2, r1
 8008850:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008856:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800885a:	d10a      	bne.n	8008872 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	430a      	orrs	r2, r1
 8008870:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008876:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800887a:	2b00      	cmp	r3, #0
 800887c:	d00a      	beq.n	8008894 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	681b      	ldr	r3, [r3, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008888:	687b      	ldr	r3, [r7, #4]
 800888a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	430a      	orrs	r2, r1
 8008892:	605a      	str	r2, [r3, #4]
  }
}
 8008894:	bf00      	nop
 8008896:	370c      	adds	r7, #12
 8008898:	46bd      	mov	sp, r7
 800889a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800889e:	4770      	bx	lr

080088a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80088a0:	b580      	push	{r7, lr}
 80088a2:	b086      	sub	sp, #24
 80088a4:	af02      	add	r7, sp, #8
 80088a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	2200      	movs	r2, #0
 80088ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80088b0:	f7fb fb40 	bl	8003f34 <HAL_GetTick>
 80088b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	681b      	ldr	r3, [r3, #0]
 80088bc:	f003 0308 	and.w	r3, r3, #8
 80088c0:	2b08      	cmp	r3, #8
 80088c2:	d10e      	bne.n	80088e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088c8:	9300      	str	r3, [sp, #0]
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80088d2:	6878      	ldr	r0, [r7, #4]
 80088d4:	f000 f82d 	bl	8008932 <UART_WaitOnFlagUntilTimeout>
 80088d8:	4603      	mov	r3, r0
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d001      	beq.n	80088e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80088de:	2303      	movs	r3, #3
 80088e0:	e023      	b.n	800892a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	681b      	ldr	r3, [r3, #0]
 80088e8:	f003 0304 	and.w	r3, r3, #4
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	d10e      	bne.n	800890e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80088f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80088f4:	9300      	str	r3, [sp, #0]
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80088fe:	6878      	ldr	r0, [r7, #4]
 8008900:	f000 f817 	bl	8008932 <UART_WaitOnFlagUntilTimeout>
 8008904:	4603      	mov	r3, r0
 8008906:	2b00      	cmp	r3, #0
 8008908:	d001      	beq.n	800890e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800890a:	2303      	movs	r3, #3
 800890c:	e00d      	b.n	800892a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	2220      	movs	r2, #32
 8008912:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	2220      	movs	r2, #32
 8008918:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	2200      	movs	r2, #0
 800891e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	2200      	movs	r2, #0
 8008924:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008928:	2300      	movs	r3, #0
}
 800892a:	4618      	mov	r0, r3
 800892c:	3710      	adds	r7, #16
 800892e:	46bd      	mov	sp, r7
 8008930:	bd80      	pop	{r7, pc}

08008932 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b09c      	sub	sp, #112	; 0x70
 8008936:	af00      	add	r7, sp, #0
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	603b      	str	r3, [r7, #0]
 800893e:	4613      	mov	r3, r2
 8008940:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008942:	e0a5      	b.n	8008a90 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008944:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008946:	f1b3 3fff 	cmp.w	r3, #4294967295
 800894a:	f000 80a1 	beq.w	8008a90 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800894e:	f7fb faf1 	bl	8003f34 <HAL_GetTick>
 8008952:	4602      	mov	r2, r0
 8008954:	683b      	ldr	r3, [r7, #0]
 8008956:	1ad3      	subs	r3, r2, r3
 8008958:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800895a:	429a      	cmp	r2, r3
 800895c:	d302      	bcc.n	8008964 <UART_WaitOnFlagUntilTimeout+0x32>
 800895e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008960:	2b00      	cmp	r3, #0
 8008962:	d13e      	bne.n	80089e2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800896a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800896c:	e853 3f00 	ldrex	r3, [r3]
 8008970:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008972:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008974:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008978:	667b      	str	r3, [r7, #100]	; 0x64
 800897a:	68fb      	ldr	r3, [r7, #12]
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	461a      	mov	r2, r3
 8008980:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008982:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008984:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008986:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008988:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800898a:	e841 2300 	strex	r3, r2, [r1]
 800898e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008990:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008992:	2b00      	cmp	r3, #0
 8008994:	d1e6      	bne.n	8008964 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008996:	68fb      	ldr	r3, [r7, #12]
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	3308      	adds	r3, #8
 800899c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800899e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80089a0:	e853 3f00 	ldrex	r3, [r3]
 80089a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80089a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80089a8:	f023 0301 	bic.w	r3, r3, #1
 80089ac:	663b      	str	r3, [r7, #96]	; 0x60
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	681b      	ldr	r3, [r3, #0]
 80089b2:	3308      	adds	r3, #8
 80089b4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80089b6:	64ba      	str	r2, [r7, #72]	; 0x48
 80089b8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089ba:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80089bc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80089be:	e841 2300 	strex	r3, r2, [r1]
 80089c2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80089c4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d1e5      	bne.n	8008996 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2220      	movs	r2, #32
 80089ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2220      	movs	r2, #32
 80089d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	2200      	movs	r2, #0
 80089da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80089de:	2303      	movs	r3, #3
 80089e0:	e067      	b.n	8008ab2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	f003 0304 	and.w	r3, r3, #4
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	d04f      	beq.n	8008a90 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	681b      	ldr	r3, [r3, #0]
 80089f4:	69db      	ldr	r3, [r3, #28]
 80089f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80089fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80089fe:	d147      	bne.n	8008a90 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008a08:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008a0a:	68fb      	ldr	r3, [r7, #12]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a12:	e853 3f00 	ldrex	r3, [r3]
 8008a16:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a1a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008a1e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	461a      	mov	r2, r3
 8008a26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a28:	637b      	str	r3, [r7, #52]	; 0x34
 8008a2a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a2c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008a2e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008a30:	e841 2300 	strex	r3, r2, [r1]
 8008a34:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008a36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d1e6      	bne.n	8008a0a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	3308      	adds	r3, #8
 8008a42:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a44:	697b      	ldr	r3, [r7, #20]
 8008a46:	e853 3f00 	ldrex	r3, [r3]
 8008a4a:	613b      	str	r3, [r7, #16]
   return(result);
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	f023 0301 	bic.w	r3, r3, #1
 8008a52:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a54:	68fb      	ldr	r3, [r7, #12]
 8008a56:	681b      	ldr	r3, [r3, #0]
 8008a58:	3308      	adds	r3, #8
 8008a5a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008a5c:	623a      	str	r2, [r7, #32]
 8008a5e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a60:	69f9      	ldr	r1, [r7, #28]
 8008a62:	6a3a      	ldr	r2, [r7, #32]
 8008a64:	e841 2300 	strex	r3, r2, [r1]
 8008a68:	61bb      	str	r3, [r7, #24]
   return(result);
 8008a6a:	69bb      	ldr	r3, [r7, #24]
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d1e5      	bne.n	8008a3c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008a70:	68fb      	ldr	r3, [r7, #12]
 8008a72:	2220      	movs	r2, #32
 8008a74:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	2220      	movs	r2, #32
 8008a7a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	2220      	movs	r2, #32
 8008a80:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	2200      	movs	r2, #0
 8008a88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008a8c:	2303      	movs	r3, #3
 8008a8e:	e010      	b.n	8008ab2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	69da      	ldr	r2, [r3, #28]
 8008a96:	68bb      	ldr	r3, [r7, #8]
 8008a98:	4013      	ands	r3, r2
 8008a9a:	68ba      	ldr	r2, [r7, #8]
 8008a9c:	429a      	cmp	r2, r3
 8008a9e:	bf0c      	ite	eq
 8008aa0:	2301      	moveq	r3, #1
 8008aa2:	2300      	movne	r3, #0
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	461a      	mov	r2, r3
 8008aa8:	79fb      	ldrb	r3, [r7, #7]
 8008aaa:	429a      	cmp	r2, r3
 8008aac:	f43f af4a 	beq.w	8008944 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ab0:	2300      	movs	r3, #0
}
 8008ab2:	4618      	mov	r0, r3
 8008ab4:	3770      	adds	r7, #112	; 0x70
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	bd80      	pop	{r7, pc}
	...

08008abc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008abc:	b580      	push	{r7, lr}
 8008abe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008ac0:	4b05      	ldr	r3, [pc, #20]	; (8008ad8 <SysTick_Handler+0x1c>)
 8008ac2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008ac4:	f000 ff26 	bl	8009914 <xTaskGetSchedulerState>
 8008ac8:	4603      	mov	r3, r0
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d001      	beq.n	8008ad2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008ace:	f001 f8ab 	bl	8009c28 <xPortSysTickHandler>
  }
}
 8008ad2:	bf00      	nop
 8008ad4:	bd80      	pop	{r7, pc}
 8008ad6:	bf00      	nop
 8008ad8:	e000e010 	.word	0xe000e010

08008adc <osSemaphoreRelease>:
  }

  return (stat);
}

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8008adc:	b580      	push	{r7, lr}
 8008ade:	b086      	sub	sp, #24
 8008ae0:	af00      	add	r7, sp, #0
 8008ae2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8008aec:	693b      	ldr	r3, [r7, #16]
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d103      	bne.n	8008afa <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8008af2:	f06f 0303 	mvn.w	r3, #3
 8008af6:	617b      	str	r3, [r7, #20]
 8008af8:	e02c      	b.n	8008b54 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008afa:	f3ef 8305 	mrs	r3, IPSR
 8008afe:	60fb      	str	r3, [r7, #12]
  return(result);
 8008b00:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8008b02:	2b00      	cmp	r3, #0
 8008b04:	d01a      	beq.n	8008b3c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8008b06:	2300      	movs	r3, #0
 8008b08:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8008b0a:	f107 0308 	add.w	r3, r7, #8
 8008b0e:	4619      	mov	r1, r3
 8008b10:	6938      	ldr	r0, [r7, #16]
 8008b12:	f000 faa8 	bl	8009066 <xQueueGiveFromISR>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d003      	beq.n	8008b24 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8008b1c:	f06f 0302 	mvn.w	r3, #2
 8008b20:	617b      	str	r3, [r7, #20]
 8008b22:	e017      	b.n	8008b54 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8008b24:	68bb      	ldr	r3, [r7, #8]
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d014      	beq.n	8008b54 <osSemaphoreRelease+0x78>
 8008b2a:	4b0d      	ldr	r3, [pc, #52]	; (8008b60 <osSemaphoreRelease+0x84>)
 8008b2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008b30:	601a      	str	r2, [r3, #0]
 8008b32:	f3bf 8f4f 	dsb	sy
 8008b36:	f3bf 8f6f 	isb	sy
 8008b3a:	e00b      	b.n	8008b54 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8008b3c:	2300      	movs	r3, #0
 8008b3e:	2200      	movs	r2, #0
 8008b40:	2100      	movs	r1, #0
 8008b42:	6938      	ldr	r0, [r7, #16]
 8008b44:	f000 f8f6 	bl	8008d34 <xQueueGenericSend>
 8008b48:	4603      	mov	r3, r0
 8008b4a:	2b01      	cmp	r3, #1
 8008b4c:	d002      	beq.n	8008b54 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8008b4e:	f06f 0302 	mvn.w	r3, #2
 8008b52:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8008b54:	697b      	ldr	r3, [r7, #20]
}
 8008b56:	4618      	mov	r0, r3
 8008b58:	3718      	adds	r7, #24
 8008b5a:	46bd      	mov	sp, r7
 8008b5c:	bd80      	pop	{r7, pc}
 8008b5e:	bf00      	nop
 8008b60:	e000ed04 	.word	0xe000ed04

08008b64 <osMessageQueuePut>:
  }

  return ((osMessageQueueId_t)hQueue);
}

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8008b64:	b580      	push	{r7, lr}
 8008b66:	b088      	sub	sp, #32
 8008b68:	af00      	add	r7, sp, #0
 8008b6a:	60f8      	str	r0, [r7, #12]
 8008b6c:	60b9      	str	r1, [r7, #8]
 8008b6e:	603b      	str	r3, [r7, #0]
 8008b70:	4613      	mov	r3, r2
 8008b72:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8008b78:	2300      	movs	r3, #0
 8008b7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008b7c:	f3ef 8305 	mrs	r3, IPSR
 8008b80:	617b      	str	r3, [r7, #20]
  return(result);
 8008b82:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d028      	beq.n	8008bda <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8008b88:	69bb      	ldr	r3, [r7, #24]
 8008b8a:	2b00      	cmp	r3, #0
 8008b8c:	d005      	beq.n	8008b9a <osMessageQueuePut+0x36>
 8008b8e:	68bb      	ldr	r3, [r7, #8]
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d002      	beq.n	8008b9a <osMessageQueuePut+0x36>
 8008b94:	683b      	ldr	r3, [r7, #0]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d003      	beq.n	8008ba2 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8008b9a:	f06f 0303 	mvn.w	r3, #3
 8008b9e:	61fb      	str	r3, [r7, #28]
 8008ba0:	e038      	b.n	8008c14 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8008ba2:	2300      	movs	r3, #0
 8008ba4:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8008ba6:	f107 0210 	add.w	r2, r7, #16
 8008baa:	2300      	movs	r3, #0
 8008bac:	68b9      	ldr	r1, [r7, #8]
 8008bae:	69b8      	ldr	r0, [r7, #24]
 8008bb0:	f000 f9be 	bl	8008f30 <xQueueGenericSendFromISR>
 8008bb4:	4603      	mov	r3, r0
 8008bb6:	2b01      	cmp	r3, #1
 8008bb8:	d003      	beq.n	8008bc2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8008bba:	f06f 0302 	mvn.w	r3, #2
 8008bbe:	61fb      	str	r3, [r7, #28]
 8008bc0:	e028      	b.n	8008c14 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8008bc2:	693b      	ldr	r3, [r7, #16]
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d025      	beq.n	8008c14 <osMessageQueuePut+0xb0>
 8008bc8:	4b15      	ldr	r3, [pc, #84]	; (8008c20 <osMessageQueuePut+0xbc>)
 8008bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008bce:	601a      	str	r2, [r3, #0]
 8008bd0:	f3bf 8f4f 	dsb	sy
 8008bd4:	f3bf 8f6f 	isb	sy
 8008bd8:	e01c      	b.n	8008c14 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8008bda:	69bb      	ldr	r3, [r7, #24]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d002      	beq.n	8008be6 <osMessageQueuePut+0x82>
 8008be0:	68bb      	ldr	r3, [r7, #8]
 8008be2:	2b00      	cmp	r3, #0
 8008be4:	d103      	bne.n	8008bee <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8008be6:	f06f 0303 	mvn.w	r3, #3
 8008bea:	61fb      	str	r3, [r7, #28]
 8008bec:	e012      	b.n	8008c14 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8008bee:	2300      	movs	r3, #0
 8008bf0:	683a      	ldr	r2, [r7, #0]
 8008bf2:	68b9      	ldr	r1, [r7, #8]
 8008bf4:	69b8      	ldr	r0, [r7, #24]
 8008bf6:	f000 f89d 	bl	8008d34 <xQueueGenericSend>
 8008bfa:	4603      	mov	r3, r0
 8008bfc:	2b01      	cmp	r3, #1
 8008bfe:	d009      	beq.n	8008c14 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8008c00:	683b      	ldr	r3, [r7, #0]
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d003      	beq.n	8008c0e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8008c06:	f06f 0301 	mvn.w	r3, #1
 8008c0a:	61fb      	str	r3, [r7, #28]
 8008c0c:	e002      	b.n	8008c14 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8008c0e:	f06f 0302 	mvn.w	r3, #2
 8008c12:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8008c14:	69fb      	ldr	r3, [r7, #28]
}
 8008c16:	4618      	mov	r0, r3
 8008c18:	3720      	adds	r7, #32
 8008c1a:	46bd      	mov	sp, r7
 8008c1c:	bd80      	pop	{r7, pc}
 8008c1e:	bf00      	nop
 8008c20:	e000ed04 	.word	0xe000ed04

08008c24 <vListInsertEnd>:
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c24:	b480      	push	{r7}
 8008c26:	b085      	sub	sp, #20
 8008c28:	af00      	add	r7, sp, #0
 8008c2a:	6078      	str	r0, [r7, #4]
 8008c2c:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008c2e:	687b      	ldr	r3, [r7, #4]
 8008c30:	685b      	ldr	r3, [r3, #4]
 8008c32:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008c34:	683b      	ldr	r3, [r7, #0]
 8008c36:	68fa      	ldr	r2, [r7, #12]
 8008c38:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	689a      	ldr	r2, [r3, #8]
 8008c3e:	683b      	ldr	r3, [r7, #0]
 8008c40:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008c42:	68fb      	ldr	r3, [r7, #12]
 8008c44:	689b      	ldr	r3, [r3, #8]
 8008c46:	683a      	ldr	r2, [r7, #0]
 8008c48:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	683a      	ldr	r2, [r7, #0]
 8008c4e:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	687a      	ldr	r2, [r7, #4]
 8008c54:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	1c5a      	adds	r2, r3, #1
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	601a      	str	r2, [r3, #0]
}
 8008c60:	bf00      	nop
 8008c62:	3714      	adds	r7, #20
 8008c64:	46bd      	mov	sp, r7
 8008c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c6a:	4770      	bx	lr

08008c6c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b085      	sub	sp, #20
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
 8008c74:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008c76:	683b      	ldr	r3, [r7, #0]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008c7c:	68bb      	ldr	r3, [r7, #8]
 8008c7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c82:	d103      	bne.n	8008c8c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	691b      	ldr	r3, [r3, #16]
 8008c88:	60fb      	str	r3, [r7, #12]
 8008c8a:	e00c      	b.n	8008ca6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	3308      	adds	r3, #8
 8008c90:	60fb      	str	r3, [r7, #12]
 8008c92:	e002      	b.n	8008c9a <vListInsert+0x2e>
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	685b      	ldr	r3, [r3, #4]
 8008c98:	60fb      	str	r3, [r7, #12]
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	685b      	ldr	r3, [r3, #4]
 8008c9e:	681b      	ldr	r3, [r3, #0]
 8008ca0:	68ba      	ldr	r2, [r7, #8]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d2f6      	bcs.n	8008c94 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	685a      	ldr	r2, [r3, #4]
 8008caa:	683b      	ldr	r3, [r7, #0]
 8008cac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008cae:	683b      	ldr	r3, [r7, #0]
 8008cb0:	685b      	ldr	r3, [r3, #4]
 8008cb2:	683a      	ldr	r2, [r7, #0]
 8008cb4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008cb6:	683b      	ldr	r3, [r7, #0]
 8008cb8:	68fa      	ldr	r2, [r7, #12]
 8008cba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008cbc:	68fb      	ldr	r3, [r7, #12]
 8008cbe:	683a      	ldr	r2, [r7, #0]
 8008cc0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008cc2:	683b      	ldr	r3, [r7, #0]
 8008cc4:	687a      	ldr	r2, [r7, #4]
 8008cc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	1c5a      	adds	r2, r3, #1
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	601a      	str	r2, [r3, #0]
}
 8008cd2:	bf00      	nop
 8008cd4:	3714      	adds	r7, #20
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cdc:	4770      	bx	lr

08008cde <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008cde:	b480      	push	{r7}
 8008ce0:	b085      	sub	sp, #20
 8008ce2:	af00      	add	r7, sp, #0
 8008ce4:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	685b      	ldr	r3, [r3, #4]
 8008cf0:	687a      	ldr	r2, [r7, #4]
 8008cf2:	6892      	ldr	r2, [r2, #8]
 8008cf4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	689b      	ldr	r3, [r3, #8]
 8008cfa:	687a      	ldr	r2, [r7, #4]
 8008cfc:	6852      	ldr	r2, [r2, #4]
 8008cfe:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	687a      	ldr	r2, [r7, #4]
 8008d06:	429a      	cmp	r2, r3
 8008d08:	d103      	bne.n	8008d12 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	689a      	ldr	r2, [r3, #8]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	2200      	movs	r2, #0
 8008d16:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	1e5a      	subs	r2, r3, #1
 8008d1e:	68fb      	ldr	r3, [r7, #12]
 8008d20:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008d22:	68fb      	ldr	r3, [r7, #12]
 8008d24:	681b      	ldr	r3, [r3, #0]
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3714      	adds	r7, #20
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d30:	4770      	bx	lr
	...

08008d34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008d34:	b580      	push	{r7, lr}
 8008d36:	b08e      	sub	sp, #56	; 0x38
 8008d38:	af00      	add	r7, sp, #0
 8008d3a:	60f8      	str	r0, [r7, #12]
 8008d3c:	60b9      	str	r1, [r7, #8]
 8008d3e:	607a      	str	r2, [r7, #4]
 8008d40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008d42:	2300      	movs	r3, #0
 8008d44:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008d4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d10a      	bne.n	8008d66 <xQueueGenericSend+0x32>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008d50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d54:	f383 8811 	msr	BASEPRI, r3
 8008d58:	f3bf 8f6f 	isb	sy
 8008d5c:	f3bf 8f4f 	dsb	sy
 8008d60:	62bb      	str	r3, [r7, #40]	; 0x28
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008d62:	bf00      	nop
 8008d64:	e7fe      	b.n	8008d64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008d66:	68bb      	ldr	r3, [r7, #8]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d103      	bne.n	8008d74 <xQueueGenericSend+0x40>
 8008d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d101      	bne.n	8008d78 <xQueueGenericSend+0x44>
 8008d74:	2301      	movs	r3, #1
 8008d76:	e000      	b.n	8008d7a <xQueueGenericSend+0x46>
 8008d78:	2300      	movs	r3, #0
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d10a      	bne.n	8008d94 <xQueueGenericSend+0x60>
	__asm volatile
 8008d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008d82:	f383 8811 	msr	BASEPRI, r3
 8008d86:	f3bf 8f6f 	isb	sy
 8008d8a:	f3bf 8f4f 	dsb	sy
 8008d8e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008d90:	bf00      	nop
 8008d92:	e7fe      	b.n	8008d92 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008d94:	683b      	ldr	r3, [r7, #0]
 8008d96:	2b02      	cmp	r3, #2
 8008d98:	d103      	bne.n	8008da2 <xQueueGenericSend+0x6e>
 8008d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008d9e:	2b01      	cmp	r3, #1
 8008da0:	d101      	bne.n	8008da6 <xQueueGenericSend+0x72>
 8008da2:	2301      	movs	r3, #1
 8008da4:	e000      	b.n	8008da8 <xQueueGenericSend+0x74>
 8008da6:	2300      	movs	r3, #0
 8008da8:	2b00      	cmp	r3, #0
 8008daa:	d10a      	bne.n	8008dc2 <xQueueGenericSend+0x8e>
	__asm volatile
 8008dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008db0:	f383 8811 	msr	BASEPRI, r3
 8008db4:	f3bf 8f6f 	isb	sy
 8008db8:	f3bf 8f4f 	dsb	sy
 8008dbc:	623b      	str	r3, [r7, #32]
}
 8008dbe:	bf00      	nop
 8008dc0:	e7fe      	b.n	8008dc0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008dc2:	f000 fda7 	bl	8009914 <xTaskGetSchedulerState>
 8008dc6:	4603      	mov	r3, r0
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d102      	bne.n	8008dd2 <xQueueGenericSend+0x9e>
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	2b00      	cmp	r3, #0
 8008dd0:	d101      	bne.n	8008dd6 <xQueueGenericSend+0xa2>
 8008dd2:	2301      	movs	r3, #1
 8008dd4:	e000      	b.n	8008dd8 <xQueueGenericSend+0xa4>
 8008dd6:	2300      	movs	r3, #0
 8008dd8:	2b00      	cmp	r3, #0
 8008dda:	d10a      	bne.n	8008df2 <xQueueGenericSend+0xbe>
	__asm volatile
 8008ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008de0:	f383 8811 	msr	BASEPRI, r3
 8008de4:	f3bf 8f6f 	isb	sy
 8008de8:	f3bf 8f4f 	dsb	sy
 8008dec:	61fb      	str	r3, [r7, #28]
}
 8008dee:	bf00      	nop
 8008df0:	e7fe      	b.n	8008df0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008df2:	f000 fe89 	bl	8009b08 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008df8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008dfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008dfe:	429a      	cmp	r2, r3
 8008e00:	d302      	bcc.n	8008e08 <xQueueGenericSend+0xd4>
 8008e02:	683b      	ldr	r3, [r7, #0]
 8008e04:	2b02      	cmp	r3, #2
 8008e06:	d129      	bne.n	8008e5c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008e08:	683a      	ldr	r2, [r7, #0]
 8008e0a:	68b9      	ldr	r1, [r7, #8]
 8008e0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008e0e:	f000 f9b7 	bl	8009180 <prvCopyDataToQueue>
 8008e12:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008e14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008e18:	2b00      	cmp	r3, #0
 8008e1a:	d010      	beq.n	8008e3e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e1e:	3324      	adds	r3, #36	; 0x24
 8008e20:	4618      	mov	r0, r3
 8008e22:	f000 fc6f 	bl	8009704 <xTaskRemoveFromEventList>
 8008e26:	4603      	mov	r3, r0
 8008e28:	2b00      	cmp	r3, #0
 8008e2a:	d013      	beq.n	8008e54 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008e2c:	4b3f      	ldr	r3, [pc, #252]	; (8008f2c <xQueueGenericSend+0x1f8>)
 8008e2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e32:	601a      	str	r2, [r3, #0]
 8008e34:	f3bf 8f4f 	dsb	sy
 8008e38:	f3bf 8f6f 	isb	sy
 8008e3c:	e00a      	b.n	8008e54 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008e3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	d007      	beq.n	8008e54 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008e44:	4b39      	ldr	r3, [pc, #228]	; (8008f2c <xQueueGenericSend+0x1f8>)
 8008e46:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e4a:	601a      	str	r2, [r3, #0]
 8008e4c:	f3bf 8f4f 	dsb	sy
 8008e50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008e54:	f000 fe88 	bl	8009b68 <vPortExitCritical>
				return pdPASS;
 8008e58:	2301      	movs	r3, #1
 8008e5a:	e063      	b.n	8008f24 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d103      	bne.n	8008e6a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008e62:	f000 fe81 	bl	8009b68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8008e66:	2300      	movs	r3, #0
 8008e68:	e05c      	b.n	8008f24 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008e6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d106      	bne.n	8008e7e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008e70:	f107 0314 	add.w	r3, r7, #20
 8008e74:	4618      	mov	r0, r3
 8008e76:	f000 fca9 	bl	80097cc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008e7a:	2301      	movs	r3, #1
 8008e7c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008e7e:	f000 fe73 	bl	8009b68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008e82:	f000 fa51 	bl	8009328 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008e86:	f000 fe3f 	bl	8009b08 <vPortEnterCritical>
 8008e8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e8c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8008e90:	b25b      	sxtb	r3, r3
 8008e92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e96:	d103      	bne.n	8008ea0 <xQueueGenericSend+0x16c>
 8008e98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008e9a:	2200      	movs	r2, #0
 8008e9c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008ea0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ea2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ea6:	b25b      	sxtb	r3, r3
 8008ea8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008eac:	d103      	bne.n	8008eb6 <xQueueGenericSend+0x182>
 8008eae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008eb0:	2200      	movs	r2, #0
 8008eb2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8008eb6:	f000 fe57 	bl	8009b68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008eba:	1d3a      	adds	r2, r7, #4
 8008ebc:	f107 0314 	add.w	r3, r7, #20
 8008ec0:	4611      	mov	r1, r2
 8008ec2:	4618      	mov	r0, r3
 8008ec4:	f000 fc98 	bl	80097f8 <xTaskCheckForTimeOut>
 8008ec8:	4603      	mov	r3, r0
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d124      	bne.n	8008f18 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008ece:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008ed0:	f000 fa12 	bl	80092f8 <prvIsQueueFull>
 8008ed4:	4603      	mov	r3, r0
 8008ed6:	2b00      	cmp	r3, #0
 8008ed8:	d018      	beq.n	8008f0c <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8008eda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008edc:	3310      	adds	r3, #16
 8008ede:	687a      	ldr	r2, [r7, #4]
 8008ee0:	4611      	mov	r1, r2
 8008ee2:	4618      	mov	r0, r3
 8008ee4:	f000 fbea 	bl	80096bc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8008ee8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008eea:	f000 f9b3 	bl	8009254 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008eee:	f000 fa29 	bl	8009344 <xTaskResumeAll>
 8008ef2:	4603      	mov	r3, r0
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	f47f af7c 	bne.w	8008df2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8008efa:	4b0c      	ldr	r3, [pc, #48]	; (8008f2c <xQueueGenericSend+0x1f8>)
 8008efc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008f00:	601a      	str	r2, [r3, #0]
 8008f02:	f3bf 8f4f 	dsb	sy
 8008f06:	f3bf 8f6f 	isb	sy
 8008f0a:	e772      	b.n	8008df2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008f0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f0e:	f000 f9a1 	bl	8009254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008f12:	f000 fa17 	bl	8009344 <xTaskResumeAll>
 8008f16:	e76c      	b.n	8008df2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8008f18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8008f1a:	f000 f99b 	bl	8009254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008f1e:	f000 fa11 	bl	8009344 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008f22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008f24:	4618      	mov	r0, r3
 8008f26:	3738      	adds	r7, #56	; 0x38
 8008f28:	46bd      	mov	sp, r7
 8008f2a:	bd80      	pop	{r7, pc}
 8008f2c:	e000ed04 	.word	0xe000ed04

08008f30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008f30:	b580      	push	{r7, lr}
 8008f32:	b090      	sub	sp, #64	; 0x40
 8008f34:	af00      	add	r7, sp, #0
 8008f36:	60f8      	str	r0, [r7, #12]
 8008f38:	60b9      	str	r1, [r7, #8]
 8008f3a:	607a      	str	r2, [r7, #4]
 8008f3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008f3e:	68fb      	ldr	r3, [r7, #12]
 8008f40:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8008f42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f44:	2b00      	cmp	r3, #0
 8008f46:	d10a      	bne.n	8008f5e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8008f48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f4c:	f383 8811 	msr	BASEPRI, r3
 8008f50:	f3bf 8f6f 	isb	sy
 8008f54:	f3bf 8f4f 	dsb	sy
 8008f58:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008f5a:	bf00      	nop
 8008f5c:	e7fe      	b.n	8008f5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008f5e:	68bb      	ldr	r3, [r7, #8]
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d103      	bne.n	8008f6c <xQueueGenericSendFromISR+0x3c>
 8008f64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	d101      	bne.n	8008f70 <xQueueGenericSendFromISR+0x40>
 8008f6c:	2301      	movs	r3, #1
 8008f6e:	e000      	b.n	8008f72 <xQueueGenericSendFromISR+0x42>
 8008f70:	2300      	movs	r3, #0
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d10a      	bne.n	8008f8c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8008f76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f7a:	f383 8811 	msr	BASEPRI, r3
 8008f7e:	f3bf 8f6f 	isb	sy
 8008f82:	f3bf 8f4f 	dsb	sy
 8008f86:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008f88:	bf00      	nop
 8008f8a:	e7fe      	b.n	8008f8a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8008f8c:	683b      	ldr	r3, [r7, #0]
 8008f8e:	2b02      	cmp	r3, #2
 8008f90:	d103      	bne.n	8008f9a <xQueueGenericSendFromISR+0x6a>
 8008f92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f96:	2b01      	cmp	r3, #1
 8008f98:	d101      	bne.n	8008f9e <xQueueGenericSendFromISR+0x6e>
 8008f9a:	2301      	movs	r3, #1
 8008f9c:	e000      	b.n	8008fa0 <xQueueGenericSendFromISR+0x70>
 8008f9e:	2300      	movs	r3, #0
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d10a      	bne.n	8008fba <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	623b      	str	r3, [r7, #32]
}
 8008fb6:	bf00      	nop
 8008fb8:	e7fe      	b.n	8008fb8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008fba:	f000 fe57 	bl	8009c6c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008fbe:	f3ef 8211 	mrs	r2, BASEPRI
 8008fc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008fc6:	f383 8811 	msr	BASEPRI, r3
 8008fca:	f3bf 8f6f 	isb	sy
 8008fce:	f3bf 8f4f 	dsb	sy
 8008fd2:	61fa      	str	r2, [r7, #28]
 8008fd4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008fd6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008fd8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fdc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008fde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008fe2:	429a      	cmp	r2, r3
 8008fe4:	d302      	bcc.n	8008fec <xQueueGenericSendFromISR+0xbc>
 8008fe6:	683b      	ldr	r3, [r7, #0]
 8008fe8:	2b02      	cmp	r3, #2
 8008fea:	d12f      	bne.n	800904c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8008ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008ff6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ff8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ffa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008ffc:	683a      	ldr	r2, [r7, #0]
 8008ffe:	68b9      	ldr	r1, [r7, #8]
 8009000:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009002:	f000 f8bd 	bl	8009180 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009006:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800900a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800900e:	d112      	bne.n	8009036 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009010:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009014:	2b00      	cmp	r3, #0
 8009016:	d016      	beq.n	8009046 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009018:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800901a:	3324      	adds	r3, #36	; 0x24
 800901c:	4618      	mov	r0, r3
 800901e:	f000 fb71 	bl	8009704 <xTaskRemoveFromEventList>
 8009022:	4603      	mov	r3, r0
 8009024:	2b00      	cmp	r3, #0
 8009026:	d00e      	beq.n	8009046 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	2b00      	cmp	r3, #0
 800902c:	d00b      	beq.n	8009046 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	2201      	movs	r2, #1
 8009032:	601a      	str	r2, [r3, #0]
 8009034:	e007      	b.n	8009046 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009036:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800903a:	3301      	adds	r3, #1
 800903c:	b2db      	uxtb	r3, r3
 800903e:	b25a      	sxtb	r2, r3
 8009040:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009042:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009046:	2301      	movs	r3, #1
 8009048:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800904a:	e001      	b.n	8009050 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800904c:	2300      	movs	r3, #0
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009050:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009052:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009054:	697b      	ldr	r3, [r7, #20]
 8009056:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800905a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800905c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800905e:	4618      	mov	r0, r3
 8009060:	3740      	adds	r7, #64	; 0x40
 8009062:	46bd      	mov	sp, r7
 8009064:	bd80      	pop	{r7, pc}

08009066 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8009066:	b580      	push	{r7, lr}
 8009068:	b08e      	sub	sp, #56	; 0x38
 800906a:	af00      	add	r7, sp, #0
 800906c:	6078      	str	r0, [r7, #4]
 800906e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8009074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009076:	2b00      	cmp	r3, #0
 8009078:	d10a      	bne.n	8009090 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800907a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800907e:	f383 8811 	msr	BASEPRI, r3
 8009082:	f3bf 8f6f 	isb	sy
 8009086:	f3bf 8f4f 	dsb	sy
 800908a:	623b      	str	r3, [r7, #32]
}
 800908c:	bf00      	nop
 800908e:	e7fe      	b.n	800908e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009094:	2b00      	cmp	r3, #0
 8009096:	d00a      	beq.n	80090ae <xQueueGiveFromISR+0x48>
	__asm volatile
 8009098:	f04f 0350 	mov.w	r3, #80	; 0x50
 800909c:	f383 8811 	msr	BASEPRI, r3
 80090a0:	f3bf 8f6f 	isb	sy
 80090a4:	f3bf 8f4f 	dsb	sy
 80090a8:	61fb      	str	r3, [r7, #28]
}
 80090aa:	bf00      	nop
 80090ac:	e7fe      	b.n	80090ac <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80090ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d103      	bne.n	80090be <xQueueGiveFromISR+0x58>
 80090b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090b8:	689b      	ldr	r3, [r3, #8]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d101      	bne.n	80090c2 <xQueueGiveFromISR+0x5c>
 80090be:	2301      	movs	r3, #1
 80090c0:	e000      	b.n	80090c4 <xQueueGiveFromISR+0x5e>
 80090c2:	2300      	movs	r3, #0
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	d10a      	bne.n	80090de <xQueueGiveFromISR+0x78>
	__asm volatile
 80090c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090cc:	f383 8811 	msr	BASEPRI, r3
 80090d0:	f3bf 8f6f 	isb	sy
 80090d4:	f3bf 8f4f 	dsb	sy
 80090d8:	61bb      	str	r3, [r7, #24]
}
 80090da:	bf00      	nop
 80090dc:	e7fe      	b.n	80090dc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80090de:	f000 fdc5 	bl	8009c6c <vPortValidateInterruptPriority>
	__asm volatile
 80090e2:	f3ef 8211 	mrs	r2, BASEPRI
 80090e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80090ea:	f383 8811 	msr	BASEPRI, r3
 80090ee:	f3bf 8f6f 	isb	sy
 80090f2:	f3bf 8f4f 	dsb	sy
 80090f6:	617a      	str	r2, [r7, #20]
 80090f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80090fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80090fc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80090fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009100:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009102:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8009104:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009106:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009108:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800910a:	429a      	cmp	r2, r3
 800910c:	d22b      	bcs.n	8009166 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800910e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009110:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009114:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009118:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800911a:	1c5a      	adds	r2, r3, #1
 800911c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800911e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009120:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8009124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009128:	d112      	bne.n	8009150 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800912a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800912c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800912e:	2b00      	cmp	r3, #0
 8009130:	d016      	beq.n	8009160 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009134:	3324      	adds	r3, #36	; 0x24
 8009136:	4618      	mov	r0, r3
 8009138:	f000 fae4 	bl	8009704 <xTaskRemoveFromEventList>
 800913c:	4603      	mov	r3, r0
 800913e:	2b00      	cmp	r3, #0
 8009140:	d00e      	beq.n	8009160 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009142:	683b      	ldr	r3, [r7, #0]
 8009144:	2b00      	cmp	r3, #0
 8009146:	d00b      	beq.n	8009160 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	2201      	movs	r2, #1
 800914c:	601a      	str	r2, [r3, #0]
 800914e:	e007      	b.n	8009160 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009150:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8009154:	3301      	adds	r3, #1
 8009156:	b2db      	uxtb	r3, r3
 8009158:	b25a      	sxtb	r2, r3
 800915a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800915c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009160:	2301      	movs	r3, #1
 8009162:	637b      	str	r3, [r7, #52]	; 0x34
 8009164:	e001      	b.n	800916a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009166:	2300      	movs	r3, #0
 8009168:	637b      	str	r3, [r7, #52]	; 0x34
 800916a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800916c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800916e:	68fb      	ldr	r3, [r7, #12]
 8009170:	f383 8811 	msr	BASEPRI, r3
}
 8009174:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009176:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8009178:	4618      	mov	r0, r3
 800917a:	3738      	adds	r7, #56	; 0x38
 800917c:	46bd      	mov	sp, r7
 800917e:	bd80      	pop	{r7, pc}

08009180 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009180:	b580      	push	{r7, lr}
 8009182:	b086      	sub	sp, #24
 8009184:	af00      	add	r7, sp, #0
 8009186:	60f8      	str	r0, [r7, #12]
 8009188:	60b9      	str	r1, [r7, #8]
 800918a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800918c:	2300      	movs	r3, #0
 800918e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009190:	68fb      	ldr	r3, [r7, #12]
 8009192:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009194:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009196:	68fb      	ldr	r3, [r7, #12]
 8009198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919a:	2b00      	cmp	r3, #0
 800919c:	d10d      	bne.n	80091ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800919e:	68fb      	ldr	r3, [r7, #12]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d14d      	bne.n	8009242 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80091a6:	68fb      	ldr	r3, [r7, #12]
 80091a8:	689b      	ldr	r3, [r3, #8]
 80091aa:	4618      	mov	r0, r3
 80091ac:	f000 fbd0 	bl	8009950 <xTaskPriorityDisinherit>
 80091b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80091b2:	68fb      	ldr	r3, [r7, #12]
 80091b4:	2200      	movs	r2, #0
 80091b6:	609a      	str	r2, [r3, #8]
 80091b8:	e043      	b.n	8009242 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d119      	bne.n	80091f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80091c0:	68fb      	ldr	r3, [r7, #12]
 80091c2:	6858      	ldr	r0, [r3, #4]
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091c8:	461a      	mov	r2, r3
 80091ca:	68b9      	ldr	r1, [r7, #8]
 80091cc:	f000 fdba 	bl	8009d44 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80091d0:	68fb      	ldr	r3, [r7, #12]
 80091d2:	685a      	ldr	r2, [r3, #4]
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091d8:	441a      	add	r2, r3
 80091da:	68fb      	ldr	r3, [r7, #12]
 80091dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80091de:	68fb      	ldr	r3, [r7, #12]
 80091e0:	685a      	ldr	r2, [r3, #4]
 80091e2:	68fb      	ldr	r3, [r7, #12]
 80091e4:	689b      	ldr	r3, [r3, #8]
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d32b      	bcc.n	8009242 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681a      	ldr	r2, [r3, #0]
 80091ee:	68fb      	ldr	r3, [r7, #12]
 80091f0:	605a      	str	r2, [r3, #4]
 80091f2:	e026      	b.n	8009242 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80091f4:	68fb      	ldr	r3, [r7, #12]
 80091f6:	68d8      	ldr	r0, [r3, #12]
 80091f8:	68fb      	ldr	r3, [r7, #12]
 80091fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091fc:	461a      	mov	r2, r3
 80091fe:	68b9      	ldr	r1, [r7, #8]
 8009200:	f000 fda0 	bl	8009d44 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	68da      	ldr	r2, [r3, #12]
 8009208:	68fb      	ldr	r3, [r7, #12]
 800920a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800920c:	425b      	negs	r3, r3
 800920e:	441a      	add	r2, r3
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009214:	68fb      	ldr	r3, [r7, #12]
 8009216:	68da      	ldr	r2, [r3, #12]
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	429a      	cmp	r2, r3
 800921e:	d207      	bcs.n	8009230 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009220:	68fb      	ldr	r3, [r7, #12]
 8009222:	689a      	ldr	r2, [r3, #8]
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009228:	425b      	negs	r3, r3
 800922a:	441a      	add	r2, r3
 800922c:	68fb      	ldr	r3, [r7, #12]
 800922e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2b02      	cmp	r3, #2
 8009234:	d105      	bne.n	8009242 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	2b00      	cmp	r3, #0
 800923a:	d002      	beq.n	8009242 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800923c:	693b      	ldr	r3, [r7, #16]
 800923e:	3b01      	subs	r3, #1
 8009240:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009242:	693b      	ldr	r3, [r7, #16]
 8009244:	1c5a      	adds	r2, r3, #1
 8009246:	68fb      	ldr	r3, [r7, #12]
 8009248:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800924a:	697b      	ldr	r3, [r7, #20]
}
 800924c:	4618      	mov	r0, r3
 800924e:	3718      	adds	r7, #24
 8009250:	46bd      	mov	sp, r7
 8009252:	bd80      	pop	{r7, pc}

08009254 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8009254:	b580      	push	{r7, lr}
 8009256:	b084      	sub	sp, #16
 8009258:	af00      	add	r7, sp, #0
 800925a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800925c:	f000 fc54 	bl	8009b08 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009266:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009268:	e011      	b.n	800928e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800926e:	2b00      	cmp	r3, #0
 8009270:	d012      	beq.n	8009298 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009272:	687b      	ldr	r3, [r7, #4]
 8009274:	3324      	adds	r3, #36	; 0x24
 8009276:	4618      	mov	r0, r3
 8009278:	f000 fa44 	bl	8009704 <xTaskRemoveFromEventList>
 800927c:	4603      	mov	r3, r0
 800927e:	2b00      	cmp	r3, #0
 8009280:	d001      	beq.n	8009286 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8009282:	f000 fb1b 	bl	80098bc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009286:	7bfb      	ldrb	r3, [r7, #15]
 8009288:	3b01      	subs	r3, #1
 800928a:	b2db      	uxtb	r3, r3
 800928c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800928e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8009292:	2b00      	cmp	r3, #0
 8009294:	dce9      	bgt.n	800926a <prvUnlockQueue+0x16>
 8009296:	e000      	b.n	800929a <prvUnlockQueue+0x46>
					break;
 8009298:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	22ff      	movs	r2, #255	; 0xff
 800929e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80092a2:	f000 fc61 	bl	8009b68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80092a6:	f000 fc2f 	bl	8009b08 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80092aa:	687b      	ldr	r3, [r7, #4]
 80092ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80092b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092b2:	e011      	b.n	80092d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80092b4:	687b      	ldr	r3, [r7, #4]
 80092b6:	691b      	ldr	r3, [r3, #16]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d012      	beq.n	80092e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	3310      	adds	r3, #16
 80092c0:	4618      	mov	r0, r3
 80092c2:	f000 fa1f 	bl	8009704 <xTaskRemoveFromEventList>
 80092c6:	4603      	mov	r3, r0
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d001      	beq.n	80092d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80092cc:	f000 faf6 	bl	80098bc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80092d0:	7bbb      	ldrb	r3, [r7, #14]
 80092d2:	3b01      	subs	r3, #1
 80092d4:	b2db      	uxtb	r3, r3
 80092d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80092d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	dce9      	bgt.n	80092b4 <prvUnlockQueue+0x60>
 80092e0:	e000      	b.n	80092e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80092e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	22ff      	movs	r2, #255	; 0xff
 80092e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80092ec:	f000 fc3c 	bl	8009b68 <vPortExitCritical>
}
 80092f0:	bf00      	nop
 80092f2:	3710      	adds	r7, #16
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b084      	sub	sp, #16
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8009300:	f000 fc02 	bl	8009b08 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800930c:	429a      	cmp	r2, r3
 800930e:	d102      	bne.n	8009316 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8009310:	2301      	movs	r3, #1
 8009312:	60fb      	str	r3, [r7, #12]
 8009314:	e001      	b.n	800931a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8009316:	2300      	movs	r3, #0
 8009318:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800931a:	f000 fc25 	bl	8009b68 <vPortExitCritical>

	return xReturn;
 800931e:	68fb      	ldr	r3, [r7, #12]
}
 8009320:	4618      	mov	r0, r3
 8009322:	3710      	adds	r7, #16
 8009324:	46bd      	mov	sp, r7
 8009326:	bd80      	pop	{r7, pc}

08009328 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009328:	b480      	push	{r7}
 800932a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800932c:	4b04      	ldr	r3, [pc, #16]	; (8009340 <vTaskSuspendAll+0x18>)
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	3301      	adds	r3, #1
 8009332:	4a03      	ldr	r2, [pc, #12]	; (8009340 <vTaskSuspendAll+0x18>)
 8009334:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009336:	bf00      	nop
 8009338:	46bd      	mov	sp, r7
 800933a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800933e:	4770      	bx	lr
 8009340:	20000b30 	.word	0x20000b30

08009344 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009344:	b580      	push	{r7, lr}
 8009346:	b084      	sub	sp, #16
 8009348:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800934a:	2300      	movs	r3, #0
 800934c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800934e:	2300      	movs	r3, #0
 8009350:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009352:	4b42      	ldr	r3, [pc, #264]	; (800945c <xTaskResumeAll+0x118>)
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	2b00      	cmp	r3, #0
 8009358:	d10a      	bne.n	8009370 <xTaskResumeAll+0x2c>
	__asm volatile
 800935a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935e:	f383 8811 	msr	BASEPRI, r3
 8009362:	f3bf 8f6f 	isb	sy
 8009366:	f3bf 8f4f 	dsb	sy
 800936a:	603b      	str	r3, [r7, #0]
}
 800936c:	bf00      	nop
 800936e:	e7fe      	b.n	800936e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009370:	f000 fbca 	bl	8009b08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009374:	4b39      	ldr	r3, [pc, #228]	; (800945c <xTaskResumeAll+0x118>)
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	3b01      	subs	r3, #1
 800937a:	4a38      	ldr	r2, [pc, #224]	; (800945c <xTaskResumeAll+0x118>)
 800937c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800937e:	4b37      	ldr	r3, [pc, #220]	; (800945c <xTaskResumeAll+0x118>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	2b00      	cmp	r3, #0
 8009384:	d162      	bne.n	800944c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009386:	4b36      	ldr	r3, [pc, #216]	; (8009460 <xTaskResumeAll+0x11c>)
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	2b00      	cmp	r3, #0
 800938c:	d05e      	beq.n	800944c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800938e:	e02f      	b.n	80093f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009390:	4b34      	ldr	r3, [pc, #208]	; (8009464 <xTaskResumeAll+0x120>)
 8009392:	68db      	ldr	r3, [r3, #12]
 8009394:	68db      	ldr	r3, [r3, #12]
 8009396:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009398:	68fb      	ldr	r3, [r7, #12]
 800939a:	3318      	adds	r3, #24
 800939c:	4618      	mov	r0, r3
 800939e:	f7ff fc9e 	bl	8008cde <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80093a2:	68fb      	ldr	r3, [r7, #12]
 80093a4:	3304      	adds	r3, #4
 80093a6:	4618      	mov	r0, r3
 80093a8:	f7ff fc99 	bl	8008cde <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093b0:	4b2d      	ldr	r3, [pc, #180]	; (8009468 <xTaskResumeAll+0x124>)
 80093b2:	681b      	ldr	r3, [r3, #0]
 80093b4:	429a      	cmp	r2, r3
 80093b6:	d903      	bls.n	80093c0 <xTaskResumeAll+0x7c>
 80093b8:	68fb      	ldr	r3, [r7, #12]
 80093ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093bc:	4a2a      	ldr	r2, [pc, #168]	; (8009468 <xTaskResumeAll+0x124>)
 80093be:	6013      	str	r3, [r2, #0]
 80093c0:	68fb      	ldr	r3, [r7, #12]
 80093c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093c4:	4613      	mov	r3, r2
 80093c6:	009b      	lsls	r3, r3, #2
 80093c8:	4413      	add	r3, r2
 80093ca:	009b      	lsls	r3, r3, #2
 80093cc:	4a27      	ldr	r2, [pc, #156]	; (800946c <xTaskResumeAll+0x128>)
 80093ce:	441a      	add	r2, r3
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	3304      	adds	r3, #4
 80093d4:	4619      	mov	r1, r3
 80093d6:	4610      	mov	r0, r2
 80093d8:	f7ff fc24 	bl	8008c24 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80093dc:	68fb      	ldr	r3, [r7, #12]
 80093de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80093e0:	4b23      	ldr	r3, [pc, #140]	; (8009470 <xTaskResumeAll+0x12c>)
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80093e6:	429a      	cmp	r2, r3
 80093e8:	d302      	bcc.n	80093f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80093ea:	4b22      	ldr	r3, [pc, #136]	; (8009474 <xTaskResumeAll+0x130>)
 80093ec:	2201      	movs	r2, #1
 80093ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80093f0:	4b1c      	ldr	r3, [pc, #112]	; (8009464 <xTaskResumeAll+0x120>)
 80093f2:	681b      	ldr	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1cb      	bne.n	8009390 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d001      	beq.n	8009402 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80093fe:	f000 fa69 	bl	80098d4 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009402:	4b1d      	ldr	r3, [pc, #116]	; (8009478 <xTaskResumeAll+0x134>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	2b00      	cmp	r3, #0
 800940c:	d010      	beq.n	8009430 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800940e:	f000 f837 	bl	8009480 <xTaskIncrementTick>
 8009412:	4603      	mov	r3, r0
 8009414:	2b00      	cmp	r3, #0
 8009416:	d002      	beq.n	800941e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009418:	4b16      	ldr	r3, [pc, #88]	; (8009474 <xTaskResumeAll+0x130>)
 800941a:	2201      	movs	r2, #1
 800941c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	3b01      	subs	r3, #1
 8009422:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	2b00      	cmp	r3, #0
 8009428:	d1f1      	bne.n	800940e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800942a:	4b13      	ldr	r3, [pc, #76]	; (8009478 <xTaskResumeAll+0x134>)
 800942c:	2200      	movs	r2, #0
 800942e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009430:	4b10      	ldr	r3, [pc, #64]	; (8009474 <xTaskResumeAll+0x130>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d009      	beq.n	800944c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009438:	2301      	movs	r3, #1
 800943a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800943c:	4b0f      	ldr	r3, [pc, #60]	; (800947c <xTaskResumeAll+0x138>)
 800943e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009442:	601a      	str	r2, [r3, #0]
 8009444:	f3bf 8f4f 	dsb	sy
 8009448:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800944c:	f000 fb8c 	bl	8009b68 <vPortExitCritical>

	return xAlreadyYielded;
 8009450:	68bb      	ldr	r3, [r7, #8]
}
 8009452:	4618      	mov	r0, r3
 8009454:	3710      	adds	r7, #16
 8009456:	46bd      	mov	sp, r7
 8009458:	bd80      	pop	{r7, pc}
 800945a:	bf00      	nop
 800945c:	20000b30 	.word	0x20000b30
 8009460:	20000b10 	.word	0x20000b10
 8009464:	20000ae8 	.word	0x20000ae8
 8009468:	20000b18 	.word	0x20000b18
 800946c:	20000680 	.word	0x20000680
 8009470:	2000067c 	.word	0x2000067c
 8009474:	20000b24 	.word	0x20000b24
 8009478:	20000b20 	.word	0x20000b20
 800947c:	e000ed04 	.word	0xe000ed04

08009480 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009480:	b580      	push	{r7, lr}
 8009482:	b086      	sub	sp, #24
 8009484:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009486:	2300      	movs	r3, #0
 8009488:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800948a:	4b4f      	ldr	r3, [pc, #316]	; (80095c8 <xTaskIncrementTick+0x148>)
 800948c:	681b      	ldr	r3, [r3, #0]
 800948e:	2b00      	cmp	r3, #0
 8009490:	f040 808f 	bne.w	80095b2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009494:	4b4d      	ldr	r3, [pc, #308]	; (80095cc <xTaskIncrementTick+0x14c>)
 8009496:	681b      	ldr	r3, [r3, #0]
 8009498:	3301      	adds	r3, #1
 800949a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800949c:	4a4b      	ldr	r2, [pc, #300]	; (80095cc <xTaskIncrementTick+0x14c>)
 800949e:	693b      	ldr	r3, [r7, #16]
 80094a0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80094a2:	693b      	ldr	r3, [r7, #16]
 80094a4:	2b00      	cmp	r3, #0
 80094a6:	d120      	bne.n	80094ea <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80094a8:	4b49      	ldr	r3, [pc, #292]	; (80095d0 <xTaskIncrementTick+0x150>)
 80094aa:	681b      	ldr	r3, [r3, #0]
 80094ac:	681b      	ldr	r3, [r3, #0]
 80094ae:	2b00      	cmp	r3, #0
 80094b0:	d00a      	beq.n	80094c8 <xTaskIncrementTick+0x48>
	__asm volatile
 80094b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80094b6:	f383 8811 	msr	BASEPRI, r3
 80094ba:	f3bf 8f6f 	isb	sy
 80094be:	f3bf 8f4f 	dsb	sy
 80094c2:	603b      	str	r3, [r7, #0]
}
 80094c4:	bf00      	nop
 80094c6:	e7fe      	b.n	80094c6 <xTaskIncrementTick+0x46>
 80094c8:	4b41      	ldr	r3, [pc, #260]	; (80095d0 <xTaskIncrementTick+0x150>)
 80094ca:	681b      	ldr	r3, [r3, #0]
 80094cc:	60fb      	str	r3, [r7, #12]
 80094ce:	4b41      	ldr	r3, [pc, #260]	; (80095d4 <xTaskIncrementTick+0x154>)
 80094d0:	681b      	ldr	r3, [r3, #0]
 80094d2:	4a3f      	ldr	r2, [pc, #252]	; (80095d0 <xTaskIncrementTick+0x150>)
 80094d4:	6013      	str	r3, [r2, #0]
 80094d6:	4a3f      	ldr	r2, [pc, #252]	; (80095d4 <xTaskIncrementTick+0x154>)
 80094d8:	68fb      	ldr	r3, [r7, #12]
 80094da:	6013      	str	r3, [r2, #0]
 80094dc:	4b3e      	ldr	r3, [pc, #248]	; (80095d8 <xTaskIncrementTick+0x158>)
 80094de:	681b      	ldr	r3, [r3, #0]
 80094e0:	3301      	adds	r3, #1
 80094e2:	4a3d      	ldr	r2, [pc, #244]	; (80095d8 <xTaskIncrementTick+0x158>)
 80094e4:	6013      	str	r3, [r2, #0]
 80094e6:	f000 f9f5 	bl	80098d4 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80094ea:	4b3c      	ldr	r3, [pc, #240]	; (80095dc <xTaskIncrementTick+0x15c>)
 80094ec:	681b      	ldr	r3, [r3, #0]
 80094ee:	693a      	ldr	r2, [r7, #16]
 80094f0:	429a      	cmp	r2, r3
 80094f2:	d349      	bcc.n	8009588 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80094f4:	4b36      	ldr	r3, [pc, #216]	; (80095d0 <xTaskIncrementTick+0x150>)
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d104      	bne.n	8009508 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80094fe:	4b37      	ldr	r3, [pc, #220]	; (80095dc <xTaskIncrementTick+0x15c>)
 8009500:	f04f 32ff 	mov.w	r2, #4294967295
 8009504:	601a      	str	r2, [r3, #0]
					break;
 8009506:	e03f      	b.n	8009588 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009508:	4b31      	ldr	r3, [pc, #196]	; (80095d0 <xTaskIncrementTick+0x150>)
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	68db      	ldr	r3, [r3, #12]
 8009510:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009512:	68bb      	ldr	r3, [r7, #8]
 8009514:	685b      	ldr	r3, [r3, #4]
 8009516:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009518:	693a      	ldr	r2, [r7, #16]
 800951a:	687b      	ldr	r3, [r7, #4]
 800951c:	429a      	cmp	r2, r3
 800951e:	d203      	bcs.n	8009528 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009520:	4a2e      	ldr	r2, [pc, #184]	; (80095dc <xTaskIncrementTick+0x15c>)
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009526:	e02f      	b.n	8009588 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009528:	68bb      	ldr	r3, [r7, #8]
 800952a:	3304      	adds	r3, #4
 800952c:	4618      	mov	r0, r3
 800952e:	f7ff fbd6 	bl	8008cde <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009532:	68bb      	ldr	r3, [r7, #8]
 8009534:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009536:	2b00      	cmp	r3, #0
 8009538:	d004      	beq.n	8009544 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800953a:	68bb      	ldr	r3, [r7, #8]
 800953c:	3318      	adds	r3, #24
 800953e:	4618      	mov	r0, r3
 8009540:	f7ff fbcd 	bl	8008cde <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009544:	68bb      	ldr	r3, [r7, #8]
 8009546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009548:	4b25      	ldr	r3, [pc, #148]	; (80095e0 <xTaskIncrementTick+0x160>)
 800954a:	681b      	ldr	r3, [r3, #0]
 800954c:	429a      	cmp	r2, r3
 800954e:	d903      	bls.n	8009558 <xTaskIncrementTick+0xd8>
 8009550:	68bb      	ldr	r3, [r7, #8]
 8009552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009554:	4a22      	ldr	r2, [pc, #136]	; (80095e0 <xTaskIncrementTick+0x160>)
 8009556:	6013      	str	r3, [r2, #0]
 8009558:	68bb      	ldr	r3, [r7, #8]
 800955a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800955c:	4613      	mov	r3, r2
 800955e:	009b      	lsls	r3, r3, #2
 8009560:	4413      	add	r3, r2
 8009562:	009b      	lsls	r3, r3, #2
 8009564:	4a1f      	ldr	r2, [pc, #124]	; (80095e4 <xTaskIncrementTick+0x164>)
 8009566:	441a      	add	r2, r3
 8009568:	68bb      	ldr	r3, [r7, #8]
 800956a:	3304      	adds	r3, #4
 800956c:	4619      	mov	r1, r3
 800956e:	4610      	mov	r0, r2
 8009570:	f7ff fb58 	bl	8008c24 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009578:	4b1b      	ldr	r3, [pc, #108]	; (80095e8 <xTaskIncrementTick+0x168>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800957e:	429a      	cmp	r2, r3
 8009580:	d3b8      	bcc.n	80094f4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009582:	2301      	movs	r3, #1
 8009584:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009586:	e7b5      	b.n	80094f4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009588:	4b17      	ldr	r3, [pc, #92]	; (80095e8 <xTaskIncrementTick+0x168>)
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800958e:	4915      	ldr	r1, [pc, #84]	; (80095e4 <xTaskIncrementTick+0x164>)
 8009590:	4613      	mov	r3, r2
 8009592:	009b      	lsls	r3, r3, #2
 8009594:	4413      	add	r3, r2
 8009596:	009b      	lsls	r3, r3, #2
 8009598:	440b      	add	r3, r1
 800959a:	681b      	ldr	r3, [r3, #0]
 800959c:	2b01      	cmp	r3, #1
 800959e:	d901      	bls.n	80095a4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80095a0:	2301      	movs	r3, #1
 80095a2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80095a4:	4b11      	ldr	r3, [pc, #68]	; (80095ec <xTaskIncrementTick+0x16c>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d007      	beq.n	80095bc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80095ac:	2301      	movs	r3, #1
 80095ae:	617b      	str	r3, [r7, #20]
 80095b0:	e004      	b.n	80095bc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80095b2:	4b0f      	ldr	r3, [pc, #60]	; (80095f0 <xTaskIncrementTick+0x170>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	3301      	adds	r3, #1
 80095b8:	4a0d      	ldr	r2, [pc, #52]	; (80095f0 <xTaskIncrementTick+0x170>)
 80095ba:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80095bc:	697b      	ldr	r3, [r7, #20]
}
 80095be:	4618      	mov	r0, r3
 80095c0:	3718      	adds	r7, #24
 80095c2:	46bd      	mov	sp, r7
 80095c4:	bd80      	pop	{r7, pc}
 80095c6:	bf00      	nop
 80095c8:	20000b30 	.word	0x20000b30
 80095cc:	20000b14 	.word	0x20000b14
 80095d0:	20000ae0 	.word	0x20000ae0
 80095d4:	20000ae4 	.word	0x20000ae4
 80095d8:	20000b28 	.word	0x20000b28
 80095dc:	20000b2c 	.word	0x20000b2c
 80095e0:	20000b18 	.word	0x20000b18
 80095e4:	20000680 	.word	0x20000680
 80095e8:	2000067c 	.word	0x2000067c
 80095ec:	20000b24 	.word	0x20000b24
 80095f0:	20000b20 	.word	0x20000b20

080095f4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80095f4:	b480      	push	{r7}
 80095f6:	b085      	sub	sp, #20
 80095f8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80095fa:	4b2a      	ldr	r3, [pc, #168]	; (80096a4 <vTaskSwitchContext+0xb0>)
 80095fc:	681b      	ldr	r3, [r3, #0]
 80095fe:	2b00      	cmp	r3, #0
 8009600:	d003      	beq.n	800960a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009602:	4b29      	ldr	r3, [pc, #164]	; (80096a8 <vTaskSwitchContext+0xb4>)
 8009604:	2201      	movs	r2, #1
 8009606:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009608:	e046      	b.n	8009698 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800960a:	4b27      	ldr	r3, [pc, #156]	; (80096a8 <vTaskSwitchContext+0xb4>)
 800960c:	2200      	movs	r2, #0
 800960e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009610:	4b26      	ldr	r3, [pc, #152]	; (80096ac <vTaskSwitchContext+0xb8>)
 8009612:	681b      	ldr	r3, [r3, #0]
 8009614:	60fb      	str	r3, [r7, #12]
 8009616:	e010      	b.n	800963a <vTaskSwitchContext+0x46>
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	d10a      	bne.n	8009634 <vTaskSwitchContext+0x40>
	__asm volatile
 800961e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009622:	f383 8811 	msr	BASEPRI, r3
 8009626:	f3bf 8f6f 	isb	sy
 800962a:	f3bf 8f4f 	dsb	sy
 800962e:	607b      	str	r3, [r7, #4]
}
 8009630:	bf00      	nop
 8009632:	e7fe      	b.n	8009632 <vTaskSwitchContext+0x3e>
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	3b01      	subs	r3, #1
 8009638:	60fb      	str	r3, [r7, #12]
 800963a:	491d      	ldr	r1, [pc, #116]	; (80096b0 <vTaskSwitchContext+0xbc>)
 800963c:	68fa      	ldr	r2, [r7, #12]
 800963e:	4613      	mov	r3, r2
 8009640:	009b      	lsls	r3, r3, #2
 8009642:	4413      	add	r3, r2
 8009644:	009b      	lsls	r3, r3, #2
 8009646:	440b      	add	r3, r1
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	2b00      	cmp	r3, #0
 800964c:	d0e4      	beq.n	8009618 <vTaskSwitchContext+0x24>
 800964e:	68fa      	ldr	r2, [r7, #12]
 8009650:	4613      	mov	r3, r2
 8009652:	009b      	lsls	r3, r3, #2
 8009654:	4413      	add	r3, r2
 8009656:	009b      	lsls	r3, r3, #2
 8009658:	4a15      	ldr	r2, [pc, #84]	; (80096b0 <vTaskSwitchContext+0xbc>)
 800965a:	4413      	add	r3, r2
 800965c:	60bb      	str	r3, [r7, #8]
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	685b      	ldr	r3, [r3, #4]
 8009662:	685a      	ldr	r2, [r3, #4]
 8009664:	68bb      	ldr	r3, [r7, #8]
 8009666:	605a      	str	r2, [r3, #4]
 8009668:	68bb      	ldr	r3, [r7, #8]
 800966a:	685a      	ldr	r2, [r3, #4]
 800966c:	68bb      	ldr	r3, [r7, #8]
 800966e:	3308      	adds	r3, #8
 8009670:	429a      	cmp	r2, r3
 8009672:	d104      	bne.n	800967e <vTaskSwitchContext+0x8a>
 8009674:	68bb      	ldr	r3, [r7, #8]
 8009676:	685b      	ldr	r3, [r3, #4]
 8009678:	685a      	ldr	r2, [r3, #4]
 800967a:	68bb      	ldr	r3, [r7, #8]
 800967c:	605a      	str	r2, [r3, #4]
 800967e:	68bb      	ldr	r3, [r7, #8]
 8009680:	685b      	ldr	r3, [r3, #4]
 8009682:	68db      	ldr	r3, [r3, #12]
 8009684:	4a0b      	ldr	r2, [pc, #44]	; (80096b4 <vTaskSwitchContext+0xc0>)
 8009686:	6013      	str	r3, [r2, #0]
 8009688:	4a08      	ldr	r2, [pc, #32]	; (80096ac <vTaskSwitchContext+0xb8>)
 800968a:	68fb      	ldr	r3, [r7, #12]
 800968c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800968e:	4b09      	ldr	r3, [pc, #36]	; (80096b4 <vTaskSwitchContext+0xc0>)
 8009690:	681b      	ldr	r3, [r3, #0]
 8009692:	3354      	adds	r3, #84	; 0x54
 8009694:	4a08      	ldr	r2, [pc, #32]	; (80096b8 <vTaskSwitchContext+0xc4>)
 8009696:	6013      	str	r3, [r2, #0]
}
 8009698:	bf00      	nop
 800969a:	3714      	adds	r7, #20
 800969c:	46bd      	mov	sp, r7
 800969e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096a2:	4770      	bx	lr
 80096a4:	20000b30 	.word	0x20000b30
 80096a8:	20000b24 	.word	0x20000b24
 80096ac:	20000b18 	.word	0x20000b18
 80096b0:	20000680 	.word	0x20000680
 80096b4:	2000067c 	.word	0x2000067c
 80096b8:	20000044 	.word	0x20000044

080096bc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80096bc:	b580      	push	{r7, lr}
 80096be:	b084      	sub	sp, #16
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d10a      	bne.n	80096e2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80096cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80096d0:	f383 8811 	msr	BASEPRI, r3
 80096d4:	f3bf 8f6f 	isb	sy
 80096d8:	f3bf 8f4f 	dsb	sy
 80096dc:	60fb      	str	r3, [r7, #12]
}
 80096de:	bf00      	nop
 80096e0:	e7fe      	b.n	80096e0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80096e2:	4b07      	ldr	r3, [pc, #28]	; (8009700 <vTaskPlaceOnEventList+0x44>)
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	3318      	adds	r3, #24
 80096e8:	4619      	mov	r1, r3
 80096ea:	6878      	ldr	r0, [r7, #4]
 80096ec:	f7ff fabe 	bl	8008c6c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80096f0:	2101      	movs	r1, #1
 80096f2:	6838      	ldr	r0, [r7, #0]
 80096f4:	f000 f99a 	bl	8009a2c <prvAddCurrentTaskToDelayedList>
}
 80096f8:	bf00      	nop
 80096fa:	3710      	adds	r7, #16
 80096fc:	46bd      	mov	sp, r7
 80096fe:	bd80      	pop	{r7, pc}
 8009700:	2000067c 	.word	0x2000067c

08009704 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009704:	b580      	push	{r7, lr}
 8009706:	b086      	sub	sp, #24
 8009708:	af00      	add	r7, sp, #0
 800970a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	68db      	ldr	r3, [r3, #12]
 8009710:	68db      	ldr	r3, [r3, #12]
 8009712:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009714:	693b      	ldr	r3, [r7, #16]
 8009716:	2b00      	cmp	r3, #0
 8009718:	d10a      	bne.n	8009730 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800971a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800971e:	f383 8811 	msr	BASEPRI, r3
 8009722:	f3bf 8f6f 	isb	sy
 8009726:	f3bf 8f4f 	dsb	sy
 800972a:	60fb      	str	r3, [r7, #12]
}
 800972c:	bf00      	nop
 800972e:	e7fe      	b.n	800972e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009730:	693b      	ldr	r3, [r7, #16]
 8009732:	3318      	adds	r3, #24
 8009734:	4618      	mov	r0, r3
 8009736:	f7ff fad2 	bl	8008cde <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800973a:	4b1e      	ldr	r3, [pc, #120]	; (80097b4 <xTaskRemoveFromEventList+0xb0>)
 800973c:	681b      	ldr	r3, [r3, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d11d      	bne.n	800977e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009742:	693b      	ldr	r3, [r7, #16]
 8009744:	3304      	adds	r3, #4
 8009746:	4618      	mov	r0, r3
 8009748:	f7ff fac9 	bl	8008cde <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800974c:	693b      	ldr	r3, [r7, #16]
 800974e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009750:	4b19      	ldr	r3, [pc, #100]	; (80097b8 <xTaskRemoveFromEventList+0xb4>)
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	429a      	cmp	r2, r3
 8009756:	d903      	bls.n	8009760 <xTaskRemoveFromEventList+0x5c>
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800975c:	4a16      	ldr	r2, [pc, #88]	; (80097b8 <xTaskRemoveFromEventList+0xb4>)
 800975e:	6013      	str	r3, [r2, #0]
 8009760:	693b      	ldr	r3, [r7, #16]
 8009762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009764:	4613      	mov	r3, r2
 8009766:	009b      	lsls	r3, r3, #2
 8009768:	4413      	add	r3, r2
 800976a:	009b      	lsls	r3, r3, #2
 800976c:	4a13      	ldr	r2, [pc, #76]	; (80097bc <xTaskRemoveFromEventList+0xb8>)
 800976e:	441a      	add	r2, r3
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	3304      	adds	r3, #4
 8009774:	4619      	mov	r1, r3
 8009776:	4610      	mov	r0, r2
 8009778:	f7ff fa54 	bl	8008c24 <vListInsertEnd>
 800977c:	e005      	b.n	800978a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800977e:	693b      	ldr	r3, [r7, #16]
 8009780:	3318      	adds	r3, #24
 8009782:	4619      	mov	r1, r3
 8009784:	480e      	ldr	r0, [pc, #56]	; (80097c0 <xTaskRemoveFromEventList+0xbc>)
 8009786:	f7ff fa4d 	bl	8008c24 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800978a:	693b      	ldr	r3, [r7, #16]
 800978c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800978e:	4b0d      	ldr	r3, [pc, #52]	; (80097c4 <xTaskRemoveFromEventList+0xc0>)
 8009790:	681b      	ldr	r3, [r3, #0]
 8009792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009794:	429a      	cmp	r2, r3
 8009796:	d905      	bls.n	80097a4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8009798:	2301      	movs	r3, #1
 800979a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800979c:	4b0a      	ldr	r3, [pc, #40]	; (80097c8 <xTaskRemoveFromEventList+0xc4>)
 800979e:	2201      	movs	r2, #1
 80097a0:	601a      	str	r2, [r3, #0]
 80097a2:	e001      	b.n	80097a8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80097a4:	2300      	movs	r3, #0
 80097a6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80097a8:	697b      	ldr	r3, [r7, #20]
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3718      	adds	r7, #24
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	20000b30 	.word	0x20000b30
 80097b8:	20000b18 	.word	0x20000b18
 80097bc:	20000680 	.word	0x20000680
 80097c0:	20000ae8 	.word	0x20000ae8
 80097c4:	2000067c 	.word	0x2000067c
 80097c8:	20000b24 	.word	0x20000b24

080097cc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80097cc:	b480      	push	{r7}
 80097ce:	b083      	sub	sp, #12
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80097d4:	4b06      	ldr	r3, [pc, #24]	; (80097f0 <vTaskInternalSetTimeOutState+0x24>)
 80097d6:	681a      	ldr	r2, [r3, #0]
 80097d8:	687b      	ldr	r3, [r7, #4]
 80097da:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80097dc:	4b05      	ldr	r3, [pc, #20]	; (80097f4 <vTaskInternalSetTimeOutState+0x28>)
 80097de:	681a      	ldr	r2, [r3, #0]
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	605a      	str	r2, [r3, #4]
}
 80097e4:	bf00      	nop
 80097e6:	370c      	adds	r7, #12
 80097e8:	46bd      	mov	sp, r7
 80097ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097ee:	4770      	bx	lr
 80097f0:	20000b28 	.word	0x20000b28
 80097f4:	20000b14 	.word	0x20000b14

080097f8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80097f8:	b580      	push	{r7, lr}
 80097fa:	b088      	sub	sp, #32
 80097fc:	af00      	add	r7, sp, #0
 80097fe:	6078      	str	r0, [r7, #4]
 8009800:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	2b00      	cmp	r3, #0
 8009806:	d10a      	bne.n	800981e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8009808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800980c:	f383 8811 	msr	BASEPRI, r3
 8009810:	f3bf 8f6f 	isb	sy
 8009814:	f3bf 8f4f 	dsb	sy
 8009818:	613b      	str	r3, [r7, #16]
}
 800981a:	bf00      	nop
 800981c:	e7fe      	b.n	800981c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	2b00      	cmp	r3, #0
 8009822:	d10a      	bne.n	800983a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8009824:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009828:	f383 8811 	msr	BASEPRI, r3
 800982c:	f3bf 8f6f 	isb	sy
 8009830:	f3bf 8f4f 	dsb	sy
 8009834:	60fb      	str	r3, [r7, #12]
}
 8009836:	bf00      	nop
 8009838:	e7fe      	b.n	8009838 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800983a:	f000 f965 	bl	8009b08 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800983e:	4b1d      	ldr	r3, [pc, #116]	; (80098b4 <xTaskCheckForTimeOut+0xbc>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	685b      	ldr	r3, [r3, #4]
 8009848:	69ba      	ldr	r2, [r7, #24]
 800984a:	1ad3      	subs	r3, r2, r3
 800984c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009856:	d102      	bne.n	800985e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8009858:	2300      	movs	r3, #0
 800985a:	61fb      	str	r3, [r7, #28]
 800985c:	e023      	b.n	80098a6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681a      	ldr	r2, [r3, #0]
 8009862:	4b15      	ldr	r3, [pc, #84]	; (80098b8 <xTaskCheckForTimeOut+0xc0>)
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	429a      	cmp	r2, r3
 8009868:	d007      	beq.n	800987a <xTaskCheckForTimeOut+0x82>
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	685b      	ldr	r3, [r3, #4]
 800986e:	69ba      	ldr	r2, [r7, #24]
 8009870:	429a      	cmp	r2, r3
 8009872:	d302      	bcc.n	800987a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009874:	2301      	movs	r3, #1
 8009876:	61fb      	str	r3, [r7, #28]
 8009878:	e015      	b.n	80098a6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800987a:	683b      	ldr	r3, [r7, #0]
 800987c:	681b      	ldr	r3, [r3, #0]
 800987e:	697a      	ldr	r2, [r7, #20]
 8009880:	429a      	cmp	r2, r3
 8009882:	d20b      	bcs.n	800989c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	681a      	ldr	r2, [r3, #0]
 8009888:	697b      	ldr	r3, [r7, #20]
 800988a:	1ad2      	subs	r2, r2, r3
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8009890:	6878      	ldr	r0, [r7, #4]
 8009892:	f7ff ff9b 	bl	80097cc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8009896:	2300      	movs	r3, #0
 8009898:	61fb      	str	r3, [r7, #28]
 800989a:	e004      	b.n	80098a6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800989c:	683b      	ldr	r3, [r7, #0]
 800989e:	2200      	movs	r2, #0
 80098a0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80098a2:	2301      	movs	r3, #1
 80098a4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80098a6:	f000 f95f 	bl	8009b68 <vPortExitCritical>

	return xReturn;
 80098aa:	69fb      	ldr	r3, [r7, #28]
}
 80098ac:	4618      	mov	r0, r3
 80098ae:	3720      	adds	r7, #32
 80098b0:	46bd      	mov	sp, r7
 80098b2:	bd80      	pop	{r7, pc}
 80098b4:	20000b14 	.word	0x20000b14
 80098b8:	20000b28 	.word	0x20000b28

080098bc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80098bc:	b480      	push	{r7}
 80098be:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80098c0:	4b03      	ldr	r3, [pc, #12]	; (80098d0 <vTaskMissedYield+0x14>)
 80098c2:	2201      	movs	r2, #1
 80098c4:	601a      	str	r2, [r3, #0]
}
 80098c6:	bf00      	nop
 80098c8:	46bd      	mov	sp, r7
 80098ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098ce:	4770      	bx	lr
 80098d0:	20000b24 	.word	0x20000b24

080098d4 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80098d4:	b480      	push	{r7}
 80098d6:	b083      	sub	sp, #12
 80098d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80098da:	4b0c      	ldr	r3, [pc, #48]	; (800990c <prvResetNextTaskUnblockTime+0x38>)
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	2b00      	cmp	r3, #0
 80098e2:	d104      	bne.n	80098ee <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80098e4:	4b0a      	ldr	r3, [pc, #40]	; (8009910 <prvResetNextTaskUnblockTime+0x3c>)
 80098e6:	f04f 32ff 	mov.w	r2, #4294967295
 80098ea:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80098ec:	e008      	b.n	8009900 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80098ee:	4b07      	ldr	r3, [pc, #28]	; (800990c <prvResetNextTaskUnblockTime+0x38>)
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	68db      	ldr	r3, [r3, #12]
 80098f4:	68db      	ldr	r3, [r3, #12]
 80098f6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	685b      	ldr	r3, [r3, #4]
 80098fc:	4a04      	ldr	r2, [pc, #16]	; (8009910 <prvResetNextTaskUnblockTime+0x3c>)
 80098fe:	6013      	str	r3, [r2, #0]
}
 8009900:	bf00      	nop
 8009902:	370c      	adds	r7, #12
 8009904:	46bd      	mov	sp, r7
 8009906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990a:	4770      	bx	lr
 800990c:	20000ae0 	.word	0x20000ae0
 8009910:	20000b2c 	.word	0x20000b2c

08009914 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009914:	b480      	push	{r7}
 8009916:	b083      	sub	sp, #12
 8009918:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800991a:	4b0b      	ldr	r3, [pc, #44]	; (8009948 <xTaskGetSchedulerState+0x34>)
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	2b00      	cmp	r3, #0
 8009920:	d102      	bne.n	8009928 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009922:	2301      	movs	r3, #1
 8009924:	607b      	str	r3, [r7, #4]
 8009926:	e008      	b.n	800993a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009928:	4b08      	ldr	r3, [pc, #32]	; (800994c <xTaskGetSchedulerState+0x38>)
 800992a:	681b      	ldr	r3, [r3, #0]
 800992c:	2b00      	cmp	r3, #0
 800992e:	d102      	bne.n	8009936 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009930:	2302      	movs	r3, #2
 8009932:	607b      	str	r3, [r7, #4]
 8009934:	e001      	b.n	800993a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009936:	2300      	movs	r3, #0
 8009938:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800993a:	687b      	ldr	r3, [r7, #4]
	}
 800993c:	4618      	mov	r0, r3
 800993e:	370c      	adds	r7, #12
 8009940:	46bd      	mov	sp, r7
 8009942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009946:	4770      	bx	lr
 8009948:	20000b1c 	.word	0x20000b1c
 800994c:	20000b30 	.word	0x20000b30

08009950 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009950:	b580      	push	{r7, lr}
 8009952:	b086      	sub	sp, #24
 8009954:	af00      	add	r7, sp, #0
 8009956:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800995c:	2300      	movs	r3, #0
 800995e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2b00      	cmp	r3, #0
 8009964:	d056      	beq.n	8009a14 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009966:	4b2e      	ldr	r3, [pc, #184]	; (8009a20 <xTaskPriorityDisinherit+0xd0>)
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	693a      	ldr	r2, [r7, #16]
 800996c:	429a      	cmp	r2, r3
 800996e:	d00a      	beq.n	8009986 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8009970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009974:	f383 8811 	msr	BASEPRI, r3
 8009978:	f3bf 8f6f 	isb	sy
 800997c:	f3bf 8f4f 	dsb	sy
 8009980:	60fb      	str	r3, [r7, #12]
}
 8009982:	bf00      	nop
 8009984:	e7fe      	b.n	8009984 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009986:	693b      	ldr	r3, [r7, #16]
 8009988:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800998a:	2b00      	cmp	r3, #0
 800998c:	d10a      	bne.n	80099a4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800998e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009992:	f383 8811 	msr	BASEPRI, r3
 8009996:	f3bf 8f6f 	isb	sy
 800999a:	f3bf 8f4f 	dsb	sy
 800999e:	60bb      	str	r3, [r7, #8]
}
 80099a0:	bf00      	nop
 80099a2:	e7fe      	b.n	80099a2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099a8:	1e5a      	subs	r2, r3, #1
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80099ae:	693b      	ldr	r3, [r7, #16]
 80099b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80099b6:	429a      	cmp	r2, r3
 80099b8:	d02c      	beq.n	8009a14 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80099ba:	693b      	ldr	r3, [r7, #16]
 80099bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80099be:	2b00      	cmp	r3, #0
 80099c0:	d128      	bne.n	8009a14 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80099c2:	693b      	ldr	r3, [r7, #16]
 80099c4:	3304      	adds	r3, #4
 80099c6:	4618      	mov	r0, r3
 80099c8:	f7ff f989 	bl	8008cde <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80099d0:	693b      	ldr	r3, [r7, #16]
 80099d2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099d4:	693b      	ldr	r3, [r7, #16]
 80099d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099d8:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099dc:	693b      	ldr	r3, [r7, #16]
 80099de:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80099e0:	693b      	ldr	r3, [r7, #16]
 80099e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099e4:	4b0f      	ldr	r3, [pc, #60]	; (8009a24 <xTaskPriorityDisinherit+0xd4>)
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	429a      	cmp	r2, r3
 80099ea:	d903      	bls.n	80099f4 <xTaskPriorityDisinherit+0xa4>
 80099ec:	693b      	ldr	r3, [r7, #16]
 80099ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80099f0:	4a0c      	ldr	r2, [pc, #48]	; (8009a24 <xTaskPriorityDisinherit+0xd4>)
 80099f2:	6013      	str	r3, [r2, #0]
 80099f4:	693b      	ldr	r3, [r7, #16]
 80099f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80099f8:	4613      	mov	r3, r2
 80099fa:	009b      	lsls	r3, r3, #2
 80099fc:	4413      	add	r3, r2
 80099fe:	009b      	lsls	r3, r3, #2
 8009a00:	4a09      	ldr	r2, [pc, #36]	; (8009a28 <xTaskPriorityDisinherit+0xd8>)
 8009a02:	441a      	add	r2, r3
 8009a04:	693b      	ldr	r3, [r7, #16]
 8009a06:	3304      	adds	r3, #4
 8009a08:	4619      	mov	r1, r3
 8009a0a:	4610      	mov	r0, r2
 8009a0c:	f7ff f90a 	bl	8008c24 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009a10:	2301      	movs	r3, #1
 8009a12:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009a14:	697b      	ldr	r3, [r7, #20]
	}
 8009a16:	4618      	mov	r0, r3
 8009a18:	3718      	adds	r7, #24
 8009a1a:	46bd      	mov	sp, r7
 8009a1c:	bd80      	pop	{r7, pc}
 8009a1e:	bf00      	nop
 8009a20:	2000067c 	.word	0x2000067c
 8009a24:	20000b18 	.word	0x20000b18
 8009a28:	20000680 	.word	0x20000680

08009a2c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	6078      	str	r0, [r7, #4]
 8009a34:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009a36:	4b21      	ldr	r3, [pc, #132]	; (8009abc <prvAddCurrentTaskToDelayedList+0x90>)
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009a3c:	4b20      	ldr	r3, [pc, #128]	; (8009ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a3e:	681b      	ldr	r3, [r3, #0]
 8009a40:	3304      	adds	r3, #4
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7ff f94b 	bl	8008cde <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009a4e:	d10a      	bne.n	8009a66 <prvAddCurrentTaskToDelayedList+0x3a>
 8009a50:	683b      	ldr	r3, [r7, #0]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d007      	beq.n	8009a66 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a56:	4b1a      	ldr	r3, [pc, #104]	; (8009ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	3304      	adds	r3, #4
 8009a5c:	4619      	mov	r1, r3
 8009a5e:	4819      	ldr	r0, [pc, #100]	; (8009ac4 <prvAddCurrentTaskToDelayedList+0x98>)
 8009a60:	f7ff f8e0 	bl	8008c24 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009a64:	e026      	b.n	8009ab4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009a66:	68fa      	ldr	r2, [r7, #12]
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	4413      	add	r3, r2
 8009a6c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009a6e:	4b14      	ldr	r3, [pc, #80]	; (8009ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68ba      	ldr	r2, [r7, #8]
 8009a74:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009a76:	68ba      	ldr	r2, [r7, #8]
 8009a78:	68fb      	ldr	r3, [r7, #12]
 8009a7a:	429a      	cmp	r2, r3
 8009a7c:	d209      	bcs.n	8009a92 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a7e:	4b12      	ldr	r3, [pc, #72]	; (8009ac8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	4b0f      	ldr	r3, [pc, #60]	; (8009ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	3304      	adds	r3, #4
 8009a88:	4619      	mov	r1, r3
 8009a8a:	4610      	mov	r0, r2
 8009a8c:	f7ff f8ee 	bl	8008c6c <vListInsert>
}
 8009a90:	e010      	b.n	8009ab4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009a92:	4b0e      	ldr	r3, [pc, #56]	; (8009acc <prvAddCurrentTaskToDelayedList+0xa0>)
 8009a94:	681a      	ldr	r2, [r3, #0]
 8009a96:	4b0a      	ldr	r3, [pc, #40]	; (8009ac0 <prvAddCurrentTaskToDelayedList+0x94>)
 8009a98:	681b      	ldr	r3, [r3, #0]
 8009a9a:	3304      	adds	r3, #4
 8009a9c:	4619      	mov	r1, r3
 8009a9e:	4610      	mov	r0, r2
 8009aa0:	f7ff f8e4 	bl	8008c6c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009aa4:	4b0a      	ldr	r3, [pc, #40]	; (8009ad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	68ba      	ldr	r2, [r7, #8]
 8009aaa:	429a      	cmp	r2, r3
 8009aac:	d202      	bcs.n	8009ab4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009aae:	4a08      	ldr	r2, [pc, #32]	; (8009ad0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009ab0:	68bb      	ldr	r3, [r7, #8]
 8009ab2:	6013      	str	r3, [r2, #0]
}
 8009ab4:	bf00      	nop
 8009ab6:	3710      	adds	r7, #16
 8009ab8:	46bd      	mov	sp, r7
 8009aba:	bd80      	pop	{r7, pc}
 8009abc:	20000b14 	.word	0x20000b14
 8009ac0:	2000067c 	.word	0x2000067c
 8009ac4:	20000afc 	.word	0x20000afc
 8009ac8:	20000ae4 	.word	0x20000ae4
 8009acc:	20000ae0 	.word	0x20000ae0
 8009ad0:	20000b2c 	.word	0x20000b2c
	...

08009ae0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8009ae0:	4b07      	ldr	r3, [pc, #28]	; (8009b00 <pxCurrentTCBConst2>)
 8009ae2:	6819      	ldr	r1, [r3, #0]
 8009ae4:	6808      	ldr	r0, [r1, #0]
 8009ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009aea:	f380 8809 	msr	PSP, r0
 8009aee:	f3bf 8f6f 	isb	sy
 8009af2:	f04f 0000 	mov.w	r0, #0
 8009af6:	f380 8811 	msr	BASEPRI, r0
 8009afa:	4770      	bx	lr
 8009afc:	f3af 8000 	nop.w

08009b00 <pxCurrentTCBConst2>:
 8009b00:	2000067c 	.word	0x2000067c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8009b04:	bf00      	nop
 8009b06:	bf00      	nop

08009b08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8009b08:	b480      	push	{r7}
 8009b0a:	b083      	sub	sp, #12
 8009b0c:	af00      	add	r7, sp, #0
	__asm volatile
 8009b0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b12:	f383 8811 	msr	BASEPRI, r3
 8009b16:	f3bf 8f6f 	isb	sy
 8009b1a:	f3bf 8f4f 	dsb	sy
 8009b1e:	607b      	str	r3, [r7, #4]
}
 8009b20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8009b22:	4b0f      	ldr	r3, [pc, #60]	; (8009b60 <vPortEnterCritical+0x58>)
 8009b24:	681b      	ldr	r3, [r3, #0]
 8009b26:	3301      	adds	r3, #1
 8009b28:	4a0d      	ldr	r2, [pc, #52]	; (8009b60 <vPortEnterCritical+0x58>)
 8009b2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009b2c:	4b0c      	ldr	r3, [pc, #48]	; (8009b60 <vPortEnterCritical+0x58>)
 8009b2e:	681b      	ldr	r3, [r3, #0]
 8009b30:	2b01      	cmp	r3, #1
 8009b32:	d10f      	bne.n	8009b54 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009b34:	4b0b      	ldr	r3, [pc, #44]	; (8009b64 <vPortEnterCritical+0x5c>)
 8009b36:	681b      	ldr	r3, [r3, #0]
 8009b38:	b2db      	uxtb	r3, r3
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d00a      	beq.n	8009b54 <vPortEnterCritical+0x4c>
	__asm volatile
 8009b3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b42:	f383 8811 	msr	BASEPRI, r3
 8009b46:	f3bf 8f6f 	isb	sy
 8009b4a:	f3bf 8f4f 	dsb	sy
 8009b4e:	603b      	str	r3, [r7, #0]
}
 8009b50:	bf00      	nop
 8009b52:	e7fe      	b.n	8009b52 <vPortEnterCritical+0x4a>
	}
}
 8009b54:	bf00      	nop
 8009b56:	370c      	adds	r7, #12
 8009b58:	46bd      	mov	sp, r7
 8009b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b5e:	4770      	bx	lr
 8009b60:	20000040 	.word	0x20000040
 8009b64:	e000ed04 	.word	0xe000ed04

08009b68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8009b6e:	4b12      	ldr	r3, [pc, #72]	; (8009bb8 <vPortExitCritical+0x50>)
 8009b70:	681b      	ldr	r3, [r3, #0]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d10a      	bne.n	8009b8c <vPortExitCritical+0x24>
	__asm volatile
 8009b76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b7a:	f383 8811 	msr	BASEPRI, r3
 8009b7e:	f3bf 8f6f 	isb	sy
 8009b82:	f3bf 8f4f 	dsb	sy
 8009b86:	607b      	str	r3, [r7, #4]
}
 8009b88:	bf00      	nop
 8009b8a:	e7fe      	b.n	8009b8a <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009b8c:	4b0a      	ldr	r3, [pc, #40]	; (8009bb8 <vPortExitCritical+0x50>)
 8009b8e:	681b      	ldr	r3, [r3, #0]
 8009b90:	3b01      	subs	r3, #1
 8009b92:	4a09      	ldr	r2, [pc, #36]	; (8009bb8 <vPortExitCritical+0x50>)
 8009b94:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009b96:	4b08      	ldr	r3, [pc, #32]	; (8009bb8 <vPortExitCritical+0x50>)
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d105      	bne.n	8009baa <vPortExitCritical+0x42>
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	f383 8811 	msr	BASEPRI, r3
}
 8009ba8:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009baa:	bf00      	nop
 8009bac:	370c      	adds	r7, #12
 8009bae:	46bd      	mov	sp, r7
 8009bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bb4:	4770      	bx	lr
 8009bb6:	bf00      	nop
 8009bb8:	20000040 	.word	0x20000040
 8009bbc:	00000000 	.word	0x00000000

08009bc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8009bc0:	f3ef 8009 	mrs	r0, PSP
 8009bc4:	f3bf 8f6f 	isb	sy
 8009bc8:	4b15      	ldr	r3, [pc, #84]	; (8009c20 <pxCurrentTCBConst>)
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	f01e 0f10 	tst.w	lr, #16
 8009bd0:	bf08      	it	eq
 8009bd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8009bd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009bda:	6010      	str	r0, [r2, #0]
 8009bdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8009be0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8009be4:	f380 8811 	msr	BASEPRI, r0
 8009be8:	f3bf 8f4f 	dsb	sy
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f7ff fd00 	bl	80095f4 <vTaskSwitchContext>
 8009bf4:	f04f 0000 	mov.w	r0, #0
 8009bf8:	f380 8811 	msr	BASEPRI, r0
 8009bfc:	bc09      	pop	{r0, r3}
 8009bfe:	6819      	ldr	r1, [r3, #0]
 8009c00:	6808      	ldr	r0, [r1, #0]
 8009c02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c06:	f01e 0f10 	tst.w	lr, #16
 8009c0a:	bf08      	it	eq
 8009c0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009c10:	f380 8809 	msr	PSP, r0
 8009c14:	f3bf 8f6f 	isb	sy
 8009c18:	4770      	bx	lr
 8009c1a:	bf00      	nop
 8009c1c:	f3af 8000 	nop.w

08009c20 <pxCurrentTCBConst>:
 8009c20:	2000067c 	.word	0x2000067c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009c24:	bf00      	nop
 8009c26:	bf00      	nop

08009c28 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
	__asm volatile
 8009c2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c32:	f383 8811 	msr	BASEPRI, r3
 8009c36:	f3bf 8f6f 	isb	sy
 8009c3a:	f3bf 8f4f 	dsb	sy
 8009c3e:	607b      	str	r3, [r7, #4]
}
 8009c40:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009c42:	f7ff fc1d 	bl	8009480 <xTaskIncrementTick>
 8009c46:	4603      	mov	r3, r0
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d003      	beq.n	8009c54 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8009c4c:	4b06      	ldr	r3, [pc, #24]	; (8009c68 <xPortSysTickHandler+0x40>)
 8009c4e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c52:	601a      	str	r2, [r3, #0]
 8009c54:	2300      	movs	r3, #0
 8009c56:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009c58:	683b      	ldr	r3, [r7, #0]
 8009c5a:	f383 8811 	msr	BASEPRI, r3
}
 8009c5e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009c60:	bf00      	nop
 8009c62:	3708      	adds	r7, #8
 8009c64:	46bd      	mov	sp, r7
 8009c66:	bd80      	pop	{r7, pc}
 8009c68:	e000ed04 	.word	0xe000ed04

08009c6c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8009c6c:	b480      	push	{r7}
 8009c6e:	b085      	sub	sp, #20
 8009c70:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8009c72:	f3ef 8305 	mrs	r3, IPSR
 8009c76:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2b0f      	cmp	r3, #15
 8009c7c:	d914      	bls.n	8009ca8 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8009c7e:	4a17      	ldr	r2, [pc, #92]	; (8009cdc <vPortValidateInterruptPriority+0x70>)
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	4413      	add	r3, r2
 8009c84:	781b      	ldrb	r3, [r3, #0]
 8009c86:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8009c88:	4b15      	ldr	r3, [pc, #84]	; (8009ce0 <vPortValidateInterruptPriority+0x74>)
 8009c8a:	781b      	ldrb	r3, [r3, #0]
 8009c8c:	7afa      	ldrb	r2, [r7, #11]
 8009c8e:	429a      	cmp	r2, r3
 8009c90:	d20a      	bcs.n	8009ca8 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8009c92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c96:	f383 8811 	msr	BASEPRI, r3
 8009c9a:	f3bf 8f6f 	isb	sy
 8009c9e:	f3bf 8f4f 	dsb	sy
 8009ca2:	607b      	str	r3, [r7, #4]
}
 8009ca4:	bf00      	nop
 8009ca6:	e7fe      	b.n	8009ca6 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8009ca8:	4b0e      	ldr	r3, [pc, #56]	; (8009ce4 <vPortValidateInterruptPriority+0x78>)
 8009caa:	681b      	ldr	r3, [r3, #0]
 8009cac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8009cb0:	4b0d      	ldr	r3, [pc, #52]	; (8009ce8 <vPortValidateInterruptPriority+0x7c>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	429a      	cmp	r2, r3
 8009cb6:	d90a      	bls.n	8009cce <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cbc:	f383 8811 	msr	BASEPRI, r3
 8009cc0:	f3bf 8f6f 	isb	sy
 8009cc4:	f3bf 8f4f 	dsb	sy
 8009cc8:	603b      	str	r3, [r7, #0]
}
 8009cca:	bf00      	nop
 8009ccc:	e7fe      	b.n	8009ccc <vPortValidateInterruptPriority+0x60>
	}
 8009cce:	bf00      	nop
 8009cd0:	3714      	adds	r7, #20
 8009cd2:	46bd      	mov	sp, r7
 8009cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd8:	4770      	bx	lr
 8009cda:	bf00      	nop
 8009cdc:	e000e3f0 	.word	0xe000e3f0
 8009ce0:	20000b34 	.word	0x20000b34
 8009ce4:	e000ed0c 	.word	0xe000ed0c
 8009ce8:	20000b38 	.word	0x20000b38

08009cec <__errno>:
 8009cec:	4b01      	ldr	r3, [pc, #4]	; (8009cf4 <__errno+0x8>)
 8009cee:	6818      	ldr	r0, [r3, #0]
 8009cf0:	4770      	bx	lr
 8009cf2:	bf00      	nop
 8009cf4:	20000044 	.word	0x20000044

08009cf8 <__libc_init_array>:
 8009cf8:	b570      	push	{r4, r5, r6, lr}
 8009cfa:	4d0d      	ldr	r5, [pc, #52]	; (8009d30 <__libc_init_array+0x38>)
 8009cfc:	4c0d      	ldr	r4, [pc, #52]	; (8009d34 <__libc_init_array+0x3c>)
 8009cfe:	1b64      	subs	r4, r4, r5
 8009d00:	10a4      	asrs	r4, r4, #2
 8009d02:	2600      	movs	r6, #0
 8009d04:	42a6      	cmp	r6, r4
 8009d06:	d109      	bne.n	8009d1c <__libc_init_array+0x24>
 8009d08:	4d0b      	ldr	r5, [pc, #44]	; (8009d38 <__libc_init_array+0x40>)
 8009d0a:	4c0c      	ldr	r4, [pc, #48]	; (8009d3c <__libc_init_array+0x44>)
 8009d0c:	f002 fbbe 	bl	800c48c <_init>
 8009d10:	1b64      	subs	r4, r4, r5
 8009d12:	10a4      	asrs	r4, r4, #2
 8009d14:	2600      	movs	r6, #0
 8009d16:	42a6      	cmp	r6, r4
 8009d18:	d105      	bne.n	8009d26 <__libc_init_array+0x2e>
 8009d1a:	bd70      	pop	{r4, r5, r6, pc}
 8009d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d20:	4798      	blx	r3
 8009d22:	3601      	adds	r6, #1
 8009d24:	e7ee      	b.n	8009d04 <__libc_init_array+0xc>
 8009d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8009d2a:	4798      	blx	r3
 8009d2c:	3601      	adds	r6, #1
 8009d2e:	e7f2      	b.n	8009d16 <__libc_init_array+0x1e>
 8009d30:	0800cd40 	.word	0x0800cd40
 8009d34:	0800cd40 	.word	0x0800cd40
 8009d38:	0800cd40 	.word	0x0800cd40
 8009d3c:	0800cd44 	.word	0x0800cd44

08009d40 <__retarget_lock_acquire_recursive>:
 8009d40:	4770      	bx	lr

08009d42 <__retarget_lock_release_recursive>:
 8009d42:	4770      	bx	lr

08009d44 <memcpy>:
 8009d44:	440a      	add	r2, r1
 8009d46:	4291      	cmp	r1, r2
 8009d48:	f100 33ff 	add.w	r3, r0, #4294967295
 8009d4c:	d100      	bne.n	8009d50 <memcpy+0xc>
 8009d4e:	4770      	bx	lr
 8009d50:	b510      	push	{r4, lr}
 8009d52:	f811 4b01 	ldrb.w	r4, [r1], #1
 8009d56:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009d5a:	4291      	cmp	r1, r2
 8009d5c:	d1f9      	bne.n	8009d52 <memcpy+0xe>
 8009d5e:	bd10      	pop	{r4, pc}

08009d60 <memset>:
 8009d60:	4402      	add	r2, r0
 8009d62:	4603      	mov	r3, r0
 8009d64:	4293      	cmp	r3, r2
 8009d66:	d100      	bne.n	8009d6a <memset+0xa>
 8009d68:	4770      	bx	lr
 8009d6a:	f803 1b01 	strb.w	r1, [r3], #1
 8009d6e:	e7f9      	b.n	8009d64 <memset+0x4>

08009d70 <sbrk_aligned>:
 8009d70:	b570      	push	{r4, r5, r6, lr}
 8009d72:	4e0e      	ldr	r6, [pc, #56]	; (8009dac <sbrk_aligned+0x3c>)
 8009d74:	460c      	mov	r4, r1
 8009d76:	6831      	ldr	r1, [r6, #0]
 8009d78:	4605      	mov	r5, r0
 8009d7a:	b911      	cbnz	r1, 8009d82 <sbrk_aligned+0x12>
 8009d7c:	f000 f88c 	bl	8009e98 <_sbrk_r>
 8009d80:	6030      	str	r0, [r6, #0]
 8009d82:	4621      	mov	r1, r4
 8009d84:	4628      	mov	r0, r5
 8009d86:	f000 f887 	bl	8009e98 <_sbrk_r>
 8009d8a:	1c43      	adds	r3, r0, #1
 8009d8c:	d00a      	beq.n	8009da4 <sbrk_aligned+0x34>
 8009d8e:	1cc4      	adds	r4, r0, #3
 8009d90:	f024 0403 	bic.w	r4, r4, #3
 8009d94:	42a0      	cmp	r0, r4
 8009d96:	d007      	beq.n	8009da8 <sbrk_aligned+0x38>
 8009d98:	1a21      	subs	r1, r4, r0
 8009d9a:	4628      	mov	r0, r5
 8009d9c:	f000 f87c 	bl	8009e98 <_sbrk_r>
 8009da0:	3001      	adds	r0, #1
 8009da2:	d101      	bne.n	8009da8 <sbrk_aligned+0x38>
 8009da4:	f04f 34ff 	mov.w	r4, #4294967295
 8009da8:	4620      	mov	r0, r4
 8009daa:	bd70      	pop	{r4, r5, r6, pc}
 8009dac:	20000b44 	.word	0x20000b44

08009db0 <_malloc_r>:
 8009db0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009db4:	1ccd      	adds	r5, r1, #3
 8009db6:	f025 0503 	bic.w	r5, r5, #3
 8009dba:	3508      	adds	r5, #8
 8009dbc:	2d0c      	cmp	r5, #12
 8009dbe:	bf38      	it	cc
 8009dc0:	250c      	movcc	r5, #12
 8009dc2:	2d00      	cmp	r5, #0
 8009dc4:	4607      	mov	r7, r0
 8009dc6:	db01      	blt.n	8009dcc <_malloc_r+0x1c>
 8009dc8:	42a9      	cmp	r1, r5
 8009dca:	d905      	bls.n	8009dd8 <_malloc_r+0x28>
 8009dcc:	230c      	movs	r3, #12
 8009dce:	603b      	str	r3, [r7, #0]
 8009dd0:	2600      	movs	r6, #0
 8009dd2:	4630      	mov	r0, r6
 8009dd4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009dd8:	4e2e      	ldr	r6, [pc, #184]	; (8009e94 <_malloc_r+0xe4>)
 8009dda:	f000 f88d 	bl	8009ef8 <__malloc_lock>
 8009dde:	6833      	ldr	r3, [r6, #0]
 8009de0:	461c      	mov	r4, r3
 8009de2:	bb34      	cbnz	r4, 8009e32 <_malloc_r+0x82>
 8009de4:	4629      	mov	r1, r5
 8009de6:	4638      	mov	r0, r7
 8009de8:	f7ff ffc2 	bl	8009d70 <sbrk_aligned>
 8009dec:	1c43      	adds	r3, r0, #1
 8009dee:	4604      	mov	r4, r0
 8009df0:	d14d      	bne.n	8009e8e <_malloc_r+0xde>
 8009df2:	6834      	ldr	r4, [r6, #0]
 8009df4:	4626      	mov	r6, r4
 8009df6:	2e00      	cmp	r6, #0
 8009df8:	d140      	bne.n	8009e7c <_malloc_r+0xcc>
 8009dfa:	6823      	ldr	r3, [r4, #0]
 8009dfc:	4631      	mov	r1, r6
 8009dfe:	4638      	mov	r0, r7
 8009e00:	eb04 0803 	add.w	r8, r4, r3
 8009e04:	f000 f848 	bl	8009e98 <_sbrk_r>
 8009e08:	4580      	cmp	r8, r0
 8009e0a:	d13a      	bne.n	8009e82 <_malloc_r+0xd2>
 8009e0c:	6821      	ldr	r1, [r4, #0]
 8009e0e:	3503      	adds	r5, #3
 8009e10:	1a6d      	subs	r5, r5, r1
 8009e12:	f025 0503 	bic.w	r5, r5, #3
 8009e16:	3508      	adds	r5, #8
 8009e18:	2d0c      	cmp	r5, #12
 8009e1a:	bf38      	it	cc
 8009e1c:	250c      	movcc	r5, #12
 8009e1e:	4629      	mov	r1, r5
 8009e20:	4638      	mov	r0, r7
 8009e22:	f7ff ffa5 	bl	8009d70 <sbrk_aligned>
 8009e26:	3001      	adds	r0, #1
 8009e28:	d02b      	beq.n	8009e82 <_malloc_r+0xd2>
 8009e2a:	6823      	ldr	r3, [r4, #0]
 8009e2c:	442b      	add	r3, r5
 8009e2e:	6023      	str	r3, [r4, #0]
 8009e30:	e00e      	b.n	8009e50 <_malloc_r+0xa0>
 8009e32:	6822      	ldr	r2, [r4, #0]
 8009e34:	1b52      	subs	r2, r2, r5
 8009e36:	d41e      	bmi.n	8009e76 <_malloc_r+0xc6>
 8009e38:	2a0b      	cmp	r2, #11
 8009e3a:	d916      	bls.n	8009e6a <_malloc_r+0xba>
 8009e3c:	1961      	adds	r1, r4, r5
 8009e3e:	42a3      	cmp	r3, r4
 8009e40:	6025      	str	r5, [r4, #0]
 8009e42:	bf18      	it	ne
 8009e44:	6059      	strne	r1, [r3, #4]
 8009e46:	6863      	ldr	r3, [r4, #4]
 8009e48:	bf08      	it	eq
 8009e4a:	6031      	streq	r1, [r6, #0]
 8009e4c:	5162      	str	r2, [r4, r5]
 8009e4e:	604b      	str	r3, [r1, #4]
 8009e50:	4638      	mov	r0, r7
 8009e52:	f104 060b 	add.w	r6, r4, #11
 8009e56:	f000 f855 	bl	8009f04 <__malloc_unlock>
 8009e5a:	f026 0607 	bic.w	r6, r6, #7
 8009e5e:	1d23      	adds	r3, r4, #4
 8009e60:	1af2      	subs	r2, r6, r3
 8009e62:	d0b6      	beq.n	8009dd2 <_malloc_r+0x22>
 8009e64:	1b9b      	subs	r3, r3, r6
 8009e66:	50a3      	str	r3, [r4, r2]
 8009e68:	e7b3      	b.n	8009dd2 <_malloc_r+0x22>
 8009e6a:	6862      	ldr	r2, [r4, #4]
 8009e6c:	42a3      	cmp	r3, r4
 8009e6e:	bf0c      	ite	eq
 8009e70:	6032      	streq	r2, [r6, #0]
 8009e72:	605a      	strne	r2, [r3, #4]
 8009e74:	e7ec      	b.n	8009e50 <_malloc_r+0xa0>
 8009e76:	4623      	mov	r3, r4
 8009e78:	6864      	ldr	r4, [r4, #4]
 8009e7a:	e7b2      	b.n	8009de2 <_malloc_r+0x32>
 8009e7c:	4634      	mov	r4, r6
 8009e7e:	6876      	ldr	r6, [r6, #4]
 8009e80:	e7b9      	b.n	8009df6 <_malloc_r+0x46>
 8009e82:	230c      	movs	r3, #12
 8009e84:	603b      	str	r3, [r7, #0]
 8009e86:	4638      	mov	r0, r7
 8009e88:	f000 f83c 	bl	8009f04 <__malloc_unlock>
 8009e8c:	e7a1      	b.n	8009dd2 <_malloc_r+0x22>
 8009e8e:	6025      	str	r5, [r4, #0]
 8009e90:	e7de      	b.n	8009e50 <_malloc_r+0xa0>
 8009e92:	bf00      	nop
 8009e94:	20000b40 	.word	0x20000b40

08009e98 <_sbrk_r>:
 8009e98:	b538      	push	{r3, r4, r5, lr}
 8009e9a:	4d06      	ldr	r5, [pc, #24]	; (8009eb4 <_sbrk_r+0x1c>)
 8009e9c:	2300      	movs	r3, #0
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	4608      	mov	r0, r1
 8009ea2:	602b      	str	r3, [r5, #0]
 8009ea4:	f7f9 ffa8 	bl	8003df8 <_sbrk>
 8009ea8:	1c43      	adds	r3, r0, #1
 8009eaa:	d102      	bne.n	8009eb2 <_sbrk_r+0x1a>
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	b103      	cbz	r3, 8009eb2 <_sbrk_r+0x1a>
 8009eb0:	6023      	str	r3, [r4, #0]
 8009eb2:	bd38      	pop	{r3, r4, r5, pc}
 8009eb4:	20000b48 	.word	0x20000b48

08009eb8 <siprintf>:
 8009eb8:	b40e      	push	{r1, r2, r3}
 8009eba:	b500      	push	{lr}
 8009ebc:	b09c      	sub	sp, #112	; 0x70
 8009ebe:	ab1d      	add	r3, sp, #116	; 0x74
 8009ec0:	9002      	str	r0, [sp, #8]
 8009ec2:	9006      	str	r0, [sp, #24]
 8009ec4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8009ec8:	4809      	ldr	r0, [pc, #36]	; (8009ef0 <siprintf+0x38>)
 8009eca:	9107      	str	r1, [sp, #28]
 8009ecc:	9104      	str	r1, [sp, #16]
 8009ece:	4909      	ldr	r1, [pc, #36]	; (8009ef4 <siprintf+0x3c>)
 8009ed0:	f853 2b04 	ldr.w	r2, [r3], #4
 8009ed4:	9105      	str	r1, [sp, #20]
 8009ed6:	6800      	ldr	r0, [r0, #0]
 8009ed8:	9301      	str	r3, [sp, #4]
 8009eda:	a902      	add	r1, sp, #8
 8009edc:	f000 f8c0 	bl	800a060 <_svfiprintf_r>
 8009ee0:	9b02      	ldr	r3, [sp, #8]
 8009ee2:	2200      	movs	r2, #0
 8009ee4:	701a      	strb	r2, [r3, #0]
 8009ee6:	b01c      	add	sp, #112	; 0x70
 8009ee8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009eec:	b003      	add	sp, #12
 8009eee:	4770      	bx	lr
 8009ef0:	20000044 	.word	0x20000044
 8009ef4:	ffff0208 	.word	0xffff0208

08009ef8 <__malloc_lock>:
 8009ef8:	4801      	ldr	r0, [pc, #4]	; (8009f00 <__malloc_lock+0x8>)
 8009efa:	f7ff bf21 	b.w	8009d40 <__retarget_lock_acquire_recursive>
 8009efe:	bf00      	nop
 8009f00:	20000b3c 	.word	0x20000b3c

08009f04 <__malloc_unlock>:
 8009f04:	4801      	ldr	r0, [pc, #4]	; (8009f0c <__malloc_unlock+0x8>)
 8009f06:	f7ff bf1c 	b.w	8009d42 <__retarget_lock_release_recursive>
 8009f0a:	bf00      	nop
 8009f0c:	20000b3c 	.word	0x20000b3c

08009f10 <_free_r>:
 8009f10:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009f12:	2900      	cmp	r1, #0
 8009f14:	d044      	beq.n	8009fa0 <_free_r+0x90>
 8009f16:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009f1a:	9001      	str	r0, [sp, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	f1a1 0404 	sub.w	r4, r1, #4
 8009f22:	bfb8      	it	lt
 8009f24:	18e4      	addlt	r4, r4, r3
 8009f26:	f7ff ffe7 	bl	8009ef8 <__malloc_lock>
 8009f2a:	4a1e      	ldr	r2, [pc, #120]	; (8009fa4 <_free_r+0x94>)
 8009f2c:	9801      	ldr	r0, [sp, #4]
 8009f2e:	6813      	ldr	r3, [r2, #0]
 8009f30:	b933      	cbnz	r3, 8009f40 <_free_r+0x30>
 8009f32:	6063      	str	r3, [r4, #4]
 8009f34:	6014      	str	r4, [r2, #0]
 8009f36:	b003      	add	sp, #12
 8009f38:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009f3c:	f7ff bfe2 	b.w	8009f04 <__malloc_unlock>
 8009f40:	42a3      	cmp	r3, r4
 8009f42:	d908      	bls.n	8009f56 <_free_r+0x46>
 8009f44:	6825      	ldr	r5, [r4, #0]
 8009f46:	1961      	adds	r1, r4, r5
 8009f48:	428b      	cmp	r3, r1
 8009f4a:	bf01      	itttt	eq
 8009f4c:	6819      	ldreq	r1, [r3, #0]
 8009f4e:	685b      	ldreq	r3, [r3, #4]
 8009f50:	1949      	addeq	r1, r1, r5
 8009f52:	6021      	streq	r1, [r4, #0]
 8009f54:	e7ed      	b.n	8009f32 <_free_r+0x22>
 8009f56:	461a      	mov	r2, r3
 8009f58:	685b      	ldr	r3, [r3, #4]
 8009f5a:	b10b      	cbz	r3, 8009f60 <_free_r+0x50>
 8009f5c:	42a3      	cmp	r3, r4
 8009f5e:	d9fa      	bls.n	8009f56 <_free_r+0x46>
 8009f60:	6811      	ldr	r1, [r2, #0]
 8009f62:	1855      	adds	r5, r2, r1
 8009f64:	42a5      	cmp	r5, r4
 8009f66:	d10b      	bne.n	8009f80 <_free_r+0x70>
 8009f68:	6824      	ldr	r4, [r4, #0]
 8009f6a:	4421      	add	r1, r4
 8009f6c:	1854      	adds	r4, r2, r1
 8009f6e:	42a3      	cmp	r3, r4
 8009f70:	6011      	str	r1, [r2, #0]
 8009f72:	d1e0      	bne.n	8009f36 <_free_r+0x26>
 8009f74:	681c      	ldr	r4, [r3, #0]
 8009f76:	685b      	ldr	r3, [r3, #4]
 8009f78:	6053      	str	r3, [r2, #4]
 8009f7a:	4421      	add	r1, r4
 8009f7c:	6011      	str	r1, [r2, #0]
 8009f7e:	e7da      	b.n	8009f36 <_free_r+0x26>
 8009f80:	d902      	bls.n	8009f88 <_free_r+0x78>
 8009f82:	230c      	movs	r3, #12
 8009f84:	6003      	str	r3, [r0, #0]
 8009f86:	e7d6      	b.n	8009f36 <_free_r+0x26>
 8009f88:	6825      	ldr	r5, [r4, #0]
 8009f8a:	1961      	adds	r1, r4, r5
 8009f8c:	428b      	cmp	r3, r1
 8009f8e:	bf04      	itt	eq
 8009f90:	6819      	ldreq	r1, [r3, #0]
 8009f92:	685b      	ldreq	r3, [r3, #4]
 8009f94:	6063      	str	r3, [r4, #4]
 8009f96:	bf04      	itt	eq
 8009f98:	1949      	addeq	r1, r1, r5
 8009f9a:	6021      	streq	r1, [r4, #0]
 8009f9c:	6054      	str	r4, [r2, #4]
 8009f9e:	e7ca      	b.n	8009f36 <_free_r+0x26>
 8009fa0:	b003      	add	sp, #12
 8009fa2:	bd30      	pop	{r4, r5, pc}
 8009fa4:	20000b40 	.word	0x20000b40

08009fa8 <__ssputs_r>:
 8009fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009fac:	688e      	ldr	r6, [r1, #8]
 8009fae:	429e      	cmp	r6, r3
 8009fb0:	4682      	mov	sl, r0
 8009fb2:	460c      	mov	r4, r1
 8009fb4:	4690      	mov	r8, r2
 8009fb6:	461f      	mov	r7, r3
 8009fb8:	d838      	bhi.n	800a02c <__ssputs_r+0x84>
 8009fba:	898a      	ldrh	r2, [r1, #12]
 8009fbc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8009fc0:	d032      	beq.n	800a028 <__ssputs_r+0x80>
 8009fc2:	6825      	ldr	r5, [r4, #0]
 8009fc4:	6909      	ldr	r1, [r1, #16]
 8009fc6:	eba5 0901 	sub.w	r9, r5, r1
 8009fca:	6965      	ldr	r5, [r4, #20]
 8009fcc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009fd0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009fd4:	3301      	adds	r3, #1
 8009fd6:	444b      	add	r3, r9
 8009fd8:	106d      	asrs	r5, r5, #1
 8009fda:	429d      	cmp	r5, r3
 8009fdc:	bf38      	it	cc
 8009fde:	461d      	movcc	r5, r3
 8009fe0:	0553      	lsls	r3, r2, #21
 8009fe2:	d531      	bpl.n	800a048 <__ssputs_r+0xa0>
 8009fe4:	4629      	mov	r1, r5
 8009fe6:	f7ff fee3 	bl	8009db0 <_malloc_r>
 8009fea:	4606      	mov	r6, r0
 8009fec:	b950      	cbnz	r0, 800a004 <__ssputs_r+0x5c>
 8009fee:	230c      	movs	r3, #12
 8009ff0:	f8ca 3000 	str.w	r3, [sl]
 8009ff4:	89a3      	ldrh	r3, [r4, #12]
 8009ff6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009ffa:	81a3      	strh	r3, [r4, #12]
 8009ffc:	f04f 30ff 	mov.w	r0, #4294967295
 800a000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a004:	6921      	ldr	r1, [r4, #16]
 800a006:	464a      	mov	r2, r9
 800a008:	f7ff fe9c 	bl	8009d44 <memcpy>
 800a00c:	89a3      	ldrh	r3, [r4, #12]
 800a00e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800a012:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800a016:	81a3      	strh	r3, [r4, #12]
 800a018:	6126      	str	r6, [r4, #16]
 800a01a:	6165      	str	r5, [r4, #20]
 800a01c:	444e      	add	r6, r9
 800a01e:	eba5 0509 	sub.w	r5, r5, r9
 800a022:	6026      	str	r6, [r4, #0]
 800a024:	60a5      	str	r5, [r4, #8]
 800a026:	463e      	mov	r6, r7
 800a028:	42be      	cmp	r6, r7
 800a02a:	d900      	bls.n	800a02e <__ssputs_r+0x86>
 800a02c:	463e      	mov	r6, r7
 800a02e:	6820      	ldr	r0, [r4, #0]
 800a030:	4632      	mov	r2, r6
 800a032:	4641      	mov	r1, r8
 800a034:	f000 faa8 	bl	800a588 <memmove>
 800a038:	68a3      	ldr	r3, [r4, #8]
 800a03a:	1b9b      	subs	r3, r3, r6
 800a03c:	60a3      	str	r3, [r4, #8]
 800a03e:	6823      	ldr	r3, [r4, #0]
 800a040:	4433      	add	r3, r6
 800a042:	6023      	str	r3, [r4, #0]
 800a044:	2000      	movs	r0, #0
 800a046:	e7db      	b.n	800a000 <__ssputs_r+0x58>
 800a048:	462a      	mov	r2, r5
 800a04a:	f000 fab7 	bl	800a5bc <_realloc_r>
 800a04e:	4606      	mov	r6, r0
 800a050:	2800      	cmp	r0, #0
 800a052:	d1e1      	bne.n	800a018 <__ssputs_r+0x70>
 800a054:	6921      	ldr	r1, [r4, #16]
 800a056:	4650      	mov	r0, sl
 800a058:	f7ff ff5a 	bl	8009f10 <_free_r>
 800a05c:	e7c7      	b.n	8009fee <__ssputs_r+0x46>
	...

0800a060 <_svfiprintf_r>:
 800a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a064:	4698      	mov	r8, r3
 800a066:	898b      	ldrh	r3, [r1, #12]
 800a068:	061b      	lsls	r3, r3, #24
 800a06a:	b09d      	sub	sp, #116	; 0x74
 800a06c:	4607      	mov	r7, r0
 800a06e:	460d      	mov	r5, r1
 800a070:	4614      	mov	r4, r2
 800a072:	d50e      	bpl.n	800a092 <_svfiprintf_r+0x32>
 800a074:	690b      	ldr	r3, [r1, #16]
 800a076:	b963      	cbnz	r3, 800a092 <_svfiprintf_r+0x32>
 800a078:	2140      	movs	r1, #64	; 0x40
 800a07a:	f7ff fe99 	bl	8009db0 <_malloc_r>
 800a07e:	6028      	str	r0, [r5, #0]
 800a080:	6128      	str	r0, [r5, #16]
 800a082:	b920      	cbnz	r0, 800a08e <_svfiprintf_r+0x2e>
 800a084:	230c      	movs	r3, #12
 800a086:	603b      	str	r3, [r7, #0]
 800a088:	f04f 30ff 	mov.w	r0, #4294967295
 800a08c:	e0d1      	b.n	800a232 <_svfiprintf_r+0x1d2>
 800a08e:	2340      	movs	r3, #64	; 0x40
 800a090:	616b      	str	r3, [r5, #20]
 800a092:	2300      	movs	r3, #0
 800a094:	9309      	str	r3, [sp, #36]	; 0x24
 800a096:	2320      	movs	r3, #32
 800a098:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800a09c:	f8cd 800c 	str.w	r8, [sp, #12]
 800a0a0:	2330      	movs	r3, #48	; 0x30
 800a0a2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800a24c <_svfiprintf_r+0x1ec>
 800a0a6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800a0aa:	f04f 0901 	mov.w	r9, #1
 800a0ae:	4623      	mov	r3, r4
 800a0b0:	469a      	mov	sl, r3
 800a0b2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a0b6:	b10a      	cbz	r2, 800a0bc <_svfiprintf_r+0x5c>
 800a0b8:	2a25      	cmp	r2, #37	; 0x25
 800a0ba:	d1f9      	bne.n	800a0b0 <_svfiprintf_r+0x50>
 800a0bc:	ebba 0b04 	subs.w	fp, sl, r4
 800a0c0:	d00b      	beq.n	800a0da <_svfiprintf_r+0x7a>
 800a0c2:	465b      	mov	r3, fp
 800a0c4:	4622      	mov	r2, r4
 800a0c6:	4629      	mov	r1, r5
 800a0c8:	4638      	mov	r0, r7
 800a0ca:	f7ff ff6d 	bl	8009fa8 <__ssputs_r>
 800a0ce:	3001      	adds	r0, #1
 800a0d0:	f000 80aa 	beq.w	800a228 <_svfiprintf_r+0x1c8>
 800a0d4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800a0d6:	445a      	add	r2, fp
 800a0d8:	9209      	str	r2, [sp, #36]	; 0x24
 800a0da:	f89a 3000 	ldrb.w	r3, [sl]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	f000 80a2 	beq.w	800a228 <_svfiprintf_r+0x1c8>
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	f04f 32ff 	mov.w	r2, #4294967295
 800a0ea:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a0ee:	f10a 0a01 	add.w	sl, sl, #1
 800a0f2:	9304      	str	r3, [sp, #16]
 800a0f4:	9307      	str	r3, [sp, #28]
 800a0f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800a0fa:	931a      	str	r3, [sp, #104]	; 0x68
 800a0fc:	4654      	mov	r4, sl
 800a0fe:	2205      	movs	r2, #5
 800a100:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a104:	4851      	ldr	r0, [pc, #324]	; (800a24c <_svfiprintf_r+0x1ec>)
 800a106:	f7f6 f86b 	bl	80001e0 <memchr>
 800a10a:	9a04      	ldr	r2, [sp, #16]
 800a10c:	b9d8      	cbnz	r0, 800a146 <_svfiprintf_r+0xe6>
 800a10e:	06d0      	lsls	r0, r2, #27
 800a110:	bf44      	itt	mi
 800a112:	2320      	movmi	r3, #32
 800a114:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a118:	0711      	lsls	r1, r2, #28
 800a11a:	bf44      	itt	mi
 800a11c:	232b      	movmi	r3, #43	; 0x2b
 800a11e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800a122:	f89a 3000 	ldrb.w	r3, [sl]
 800a126:	2b2a      	cmp	r3, #42	; 0x2a
 800a128:	d015      	beq.n	800a156 <_svfiprintf_r+0xf6>
 800a12a:	9a07      	ldr	r2, [sp, #28]
 800a12c:	4654      	mov	r4, sl
 800a12e:	2000      	movs	r0, #0
 800a130:	f04f 0c0a 	mov.w	ip, #10
 800a134:	4621      	mov	r1, r4
 800a136:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a13a:	3b30      	subs	r3, #48	; 0x30
 800a13c:	2b09      	cmp	r3, #9
 800a13e:	d94e      	bls.n	800a1de <_svfiprintf_r+0x17e>
 800a140:	b1b0      	cbz	r0, 800a170 <_svfiprintf_r+0x110>
 800a142:	9207      	str	r2, [sp, #28]
 800a144:	e014      	b.n	800a170 <_svfiprintf_r+0x110>
 800a146:	eba0 0308 	sub.w	r3, r0, r8
 800a14a:	fa09 f303 	lsl.w	r3, r9, r3
 800a14e:	4313      	orrs	r3, r2
 800a150:	9304      	str	r3, [sp, #16]
 800a152:	46a2      	mov	sl, r4
 800a154:	e7d2      	b.n	800a0fc <_svfiprintf_r+0x9c>
 800a156:	9b03      	ldr	r3, [sp, #12]
 800a158:	1d19      	adds	r1, r3, #4
 800a15a:	681b      	ldr	r3, [r3, #0]
 800a15c:	9103      	str	r1, [sp, #12]
 800a15e:	2b00      	cmp	r3, #0
 800a160:	bfbb      	ittet	lt
 800a162:	425b      	neglt	r3, r3
 800a164:	f042 0202 	orrlt.w	r2, r2, #2
 800a168:	9307      	strge	r3, [sp, #28]
 800a16a:	9307      	strlt	r3, [sp, #28]
 800a16c:	bfb8      	it	lt
 800a16e:	9204      	strlt	r2, [sp, #16]
 800a170:	7823      	ldrb	r3, [r4, #0]
 800a172:	2b2e      	cmp	r3, #46	; 0x2e
 800a174:	d10c      	bne.n	800a190 <_svfiprintf_r+0x130>
 800a176:	7863      	ldrb	r3, [r4, #1]
 800a178:	2b2a      	cmp	r3, #42	; 0x2a
 800a17a:	d135      	bne.n	800a1e8 <_svfiprintf_r+0x188>
 800a17c:	9b03      	ldr	r3, [sp, #12]
 800a17e:	1d1a      	adds	r2, r3, #4
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	9203      	str	r2, [sp, #12]
 800a184:	2b00      	cmp	r3, #0
 800a186:	bfb8      	it	lt
 800a188:	f04f 33ff 	movlt.w	r3, #4294967295
 800a18c:	3402      	adds	r4, #2
 800a18e:	9305      	str	r3, [sp, #20]
 800a190:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800a25c <_svfiprintf_r+0x1fc>
 800a194:	7821      	ldrb	r1, [r4, #0]
 800a196:	2203      	movs	r2, #3
 800a198:	4650      	mov	r0, sl
 800a19a:	f7f6 f821 	bl	80001e0 <memchr>
 800a19e:	b140      	cbz	r0, 800a1b2 <_svfiprintf_r+0x152>
 800a1a0:	2340      	movs	r3, #64	; 0x40
 800a1a2:	eba0 000a 	sub.w	r0, r0, sl
 800a1a6:	fa03 f000 	lsl.w	r0, r3, r0
 800a1aa:	9b04      	ldr	r3, [sp, #16]
 800a1ac:	4303      	orrs	r3, r0
 800a1ae:	3401      	adds	r4, #1
 800a1b0:	9304      	str	r3, [sp, #16]
 800a1b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a1b6:	4826      	ldr	r0, [pc, #152]	; (800a250 <_svfiprintf_r+0x1f0>)
 800a1b8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800a1bc:	2206      	movs	r2, #6
 800a1be:	f7f6 f80f 	bl	80001e0 <memchr>
 800a1c2:	2800      	cmp	r0, #0
 800a1c4:	d038      	beq.n	800a238 <_svfiprintf_r+0x1d8>
 800a1c6:	4b23      	ldr	r3, [pc, #140]	; (800a254 <_svfiprintf_r+0x1f4>)
 800a1c8:	bb1b      	cbnz	r3, 800a212 <_svfiprintf_r+0x1b2>
 800a1ca:	9b03      	ldr	r3, [sp, #12]
 800a1cc:	3307      	adds	r3, #7
 800a1ce:	f023 0307 	bic.w	r3, r3, #7
 800a1d2:	3308      	adds	r3, #8
 800a1d4:	9303      	str	r3, [sp, #12]
 800a1d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a1d8:	4433      	add	r3, r6
 800a1da:	9309      	str	r3, [sp, #36]	; 0x24
 800a1dc:	e767      	b.n	800a0ae <_svfiprintf_r+0x4e>
 800a1de:	fb0c 3202 	mla	r2, ip, r2, r3
 800a1e2:	460c      	mov	r4, r1
 800a1e4:	2001      	movs	r0, #1
 800a1e6:	e7a5      	b.n	800a134 <_svfiprintf_r+0xd4>
 800a1e8:	2300      	movs	r3, #0
 800a1ea:	3401      	adds	r4, #1
 800a1ec:	9305      	str	r3, [sp, #20]
 800a1ee:	4619      	mov	r1, r3
 800a1f0:	f04f 0c0a 	mov.w	ip, #10
 800a1f4:	4620      	mov	r0, r4
 800a1f6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a1fa:	3a30      	subs	r2, #48	; 0x30
 800a1fc:	2a09      	cmp	r2, #9
 800a1fe:	d903      	bls.n	800a208 <_svfiprintf_r+0x1a8>
 800a200:	2b00      	cmp	r3, #0
 800a202:	d0c5      	beq.n	800a190 <_svfiprintf_r+0x130>
 800a204:	9105      	str	r1, [sp, #20]
 800a206:	e7c3      	b.n	800a190 <_svfiprintf_r+0x130>
 800a208:	fb0c 2101 	mla	r1, ip, r1, r2
 800a20c:	4604      	mov	r4, r0
 800a20e:	2301      	movs	r3, #1
 800a210:	e7f0      	b.n	800a1f4 <_svfiprintf_r+0x194>
 800a212:	ab03      	add	r3, sp, #12
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	462a      	mov	r2, r5
 800a218:	4b0f      	ldr	r3, [pc, #60]	; (800a258 <_svfiprintf_r+0x1f8>)
 800a21a:	a904      	add	r1, sp, #16
 800a21c:	4638      	mov	r0, r7
 800a21e:	f3af 8000 	nop.w
 800a222:	1c42      	adds	r2, r0, #1
 800a224:	4606      	mov	r6, r0
 800a226:	d1d6      	bne.n	800a1d6 <_svfiprintf_r+0x176>
 800a228:	89ab      	ldrh	r3, [r5, #12]
 800a22a:	065b      	lsls	r3, r3, #25
 800a22c:	f53f af2c 	bmi.w	800a088 <_svfiprintf_r+0x28>
 800a230:	9809      	ldr	r0, [sp, #36]	; 0x24
 800a232:	b01d      	add	sp, #116	; 0x74
 800a234:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a238:	ab03      	add	r3, sp, #12
 800a23a:	9300      	str	r3, [sp, #0]
 800a23c:	462a      	mov	r2, r5
 800a23e:	4b06      	ldr	r3, [pc, #24]	; (800a258 <_svfiprintf_r+0x1f8>)
 800a240:	a904      	add	r1, sp, #16
 800a242:	4638      	mov	r0, r7
 800a244:	f000 f87a 	bl	800a33c <_printf_i>
 800a248:	e7eb      	b.n	800a222 <_svfiprintf_r+0x1c2>
 800a24a:	bf00      	nop
 800a24c:	0800caf8 	.word	0x0800caf8
 800a250:	0800cb02 	.word	0x0800cb02
 800a254:	00000000 	.word	0x00000000
 800a258:	08009fa9 	.word	0x08009fa9
 800a25c:	0800cafe 	.word	0x0800cafe

0800a260 <_printf_common>:
 800a260:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a264:	4616      	mov	r6, r2
 800a266:	4699      	mov	r9, r3
 800a268:	688a      	ldr	r2, [r1, #8]
 800a26a:	690b      	ldr	r3, [r1, #16]
 800a26c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a270:	4293      	cmp	r3, r2
 800a272:	bfb8      	it	lt
 800a274:	4613      	movlt	r3, r2
 800a276:	6033      	str	r3, [r6, #0]
 800a278:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a27c:	4607      	mov	r7, r0
 800a27e:	460c      	mov	r4, r1
 800a280:	b10a      	cbz	r2, 800a286 <_printf_common+0x26>
 800a282:	3301      	adds	r3, #1
 800a284:	6033      	str	r3, [r6, #0]
 800a286:	6823      	ldr	r3, [r4, #0]
 800a288:	0699      	lsls	r1, r3, #26
 800a28a:	bf42      	ittt	mi
 800a28c:	6833      	ldrmi	r3, [r6, #0]
 800a28e:	3302      	addmi	r3, #2
 800a290:	6033      	strmi	r3, [r6, #0]
 800a292:	6825      	ldr	r5, [r4, #0]
 800a294:	f015 0506 	ands.w	r5, r5, #6
 800a298:	d106      	bne.n	800a2a8 <_printf_common+0x48>
 800a29a:	f104 0a19 	add.w	sl, r4, #25
 800a29e:	68e3      	ldr	r3, [r4, #12]
 800a2a0:	6832      	ldr	r2, [r6, #0]
 800a2a2:	1a9b      	subs	r3, r3, r2
 800a2a4:	42ab      	cmp	r3, r5
 800a2a6:	dc26      	bgt.n	800a2f6 <_printf_common+0x96>
 800a2a8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a2ac:	1e13      	subs	r3, r2, #0
 800a2ae:	6822      	ldr	r2, [r4, #0]
 800a2b0:	bf18      	it	ne
 800a2b2:	2301      	movne	r3, #1
 800a2b4:	0692      	lsls	r2, r2, #26
 800a2b6:	d42b      	bmi.n	800a310 <_printf_common+0xb0>
 800a2b8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a2bc:	4649      	mov	r1, r9
 800a2be:	4638      	mov	r0, r7
 800a2c0:	47c0      	blx	r8
 800a2c2:	3001      	adds	r0, #1
 800a2c4:	d01e      	beq.n	800a304 <_printf_common+0xa4>
 800a2c6:	6823      	ldr	r3, [r4, #0]
 800a2c8:	68e5      	ldr	r5, [r4, #12]
 800a2ca:	6832      	ldr	r2, [r6, #0]
 800a2cc:	f003 0306 	and.w	r3, r3, #6
 800a2d0:	2b04      	cmp	r3, #4
 800a2d2:	bf08      	it	eq
 800a2d4:	1aad      	subeq	r5, r5, r2
 800a2d6:	68a3      	ldr	r3, [r4, #8]
 800a2d8:	6922      	ldr	r2, [r4, #16]
 800a2da:	bf0c      	ite	eq
 800a2dc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a2e0:	2500      	movne	r5, #0
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	bfc4      	itt	gt
 800a2e6:	1a9b      	subgt	r3, r3, r2
 800a2e8:	18ed      	addgt	r5, r5, r3
 800a2ea:	2600      	movs	r6, #0
 800a2ec:	341a      	adds	r4, #26
 800a2ee:	42b5      	cmp	r5, r6
 800a2f0:	d11a      	bne.n	800a328 <_printf_common+0xc8>
 800a2f2:	2000      	movs	r0, #0
 800a2f4:	e008      	b.n	800a308 <_printf_common+0xa8>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	4652      	mov	r2, sl
 800a2fa:	4649      	mov	r1, r9
 800a2fc:	4638      	mov	r0, r7
 800a2fe:	47c0      	blx	r8
 800a300:	3001      	adds	r0, #1
 800a302:	d103      	bne.n	800a30c <_printf_common+0xac>
 800a304:	f04f 30ff 	mov.w	r0, #4294967295
 800a308:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a30c:	3501      	adds	r5, #1
 800a30e:	e7c6      	b.n	800a29e <_printf_common+0x3e>
 800a310:	18e1      	adds	r1, r4, r3
 800a312:	1c5a      	adds	r2, r3, #1
 800a314:	2030      	movs	r0, #48	; 0x30
 800a316:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a31a:	4422      	add	r2, r4
 800a31c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a320:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a324:	3302      	adds	r3, #2
 800a326:	e7c7      	b.n	800a2b8 <_printf_common+0x58>
 800a328:	2301      	movs	r3, #1
 800a32a:	4622      	mov	r2, r4
 800a32c:	4649      	mov	r1, r9
 800a32e:	4638      	mov	r0, r7
 800a330:	47c0      	blx	r8
 800a332:	3001      	adds	r0, #1
 800a334:	d0e6      	beq.n	800a304 <_printf_common+0xa4>
 800a336:	3601      	adds	r6, #1
 800a338:	e7d9      	b.n	800a2ee <_printf_common+0x8e>
	...

0800a33c <_printf_i>:
 800a33c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a340:	7e0f      	ldrb	r7, [r1, #24]
 800a342:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a344:	2f78      	cmp	r7, #120	; 0x78
 800a346:	4691      	mov	r9, r2
 800a348:	4680      	mov	r8, r0
 800a34a:	460c      	mov	r4, r1
 800a34c:	469a      	mov	sl, r3
 800a34e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a352:	d807      	bhi.n	800a364 <_printf_i+0x28>
 800a354:	2f62      	cmp	r7, #98	; 0x62
 800a356:	d80a      	bhi.n	800a36e <_printf_i+0x32>
 800a358:	2f00      	cmp	r7, #0
 800a35a:	f000 80d8 	beq.w	800a50e <_printf_i+0x1d2>
 800a35e:	2f58      	cmp	r7, #88	; 0x58
 800a360:	f000 80a3 	beq.w	800a4aa <_printf_i+0x16e>
 800a364:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a368:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a36c:	e03a      	b.n	800a3e4 <_printf_i+0xa8>
 800a36e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a372:	2b15      	cmp	r3, #21
 800a374:	d8f6      	bhi.n	800a364 <_printf_i+0x28>
 800a376:	a101      	add	r1, pc, #4	; (adr r1, 800a37c <_printf_i+0x40>)
 800a378:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a37c:	0800a3d5 	.word	0x0800a3d5
 800a380:	0800a3e9 	.word	0x0800a3e9
 800a384:	0800a365 	.word	0x0800a365
 800a388:	0800a365 	.word	0x0800a365
 800a38c:	0800a365 	.word	0x0800a365
 800a390:	0800a365 	.word	0x0800a365
 800a394:	0800a3e9 	.word	0x0800a3e9
 800a398:	0800a365 	.word	0x0800a365
 800a39c:	0800a365 	.word	0x0800a365
 800a3a0:	0800a365 	.word	0x0800a365
 800a3a4:	0800a365 	.word	0x0800a365
 800a3a8:	0800a4f5 	.word	0x0800a4f5
 800a3ac:	0800a419 	.word	0x0800a419
 800a3b0:	0800a4d7 	.word	0x0800a4d7
 800a3b4:	0800a365 	.word	0x0800a365
 800a3b8:	0800a365 	.word	0x0800a365
 800a3bc:	0800a517 	.word	0x0800a517
 800a3c0:	0800a365 	.word	0x0800a365
 800a3c4:	0800a419 	.word	0x0800a419
 800a3c8:	0800a365 	.word	0x0800a365
 800a3cc:	0800a365 	.word	0x0800a365
 800a3d0:	0800a4df 	.word	0x0800a4df
 800a3d4:	682b      	ldr	r3, [r5, #0]
 800a3d6:	1d1a      	adds	r2, r3, #4
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	602a      	str	r2, [r5, #0]
 800a3dc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a3e0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a3e4:	2301      	movs	r3, #1
 800a3e6:	e0a3      	b.n	800a530 <_printf_i+0x1f4>
 800a3e8:	6820      	ldr	r0, [r4, #0]
 800a3ea:	6829      	ldr	r1, [r5, #0]
 800a3ec:	0606      	lsls	r6, r0, #24
 800a3ee:	f101 0304 	add.w	r3, r1, #4
 800a3f2:	d50a      	bpl.n	800a40a <_printf_i+0xce>
 800a3f4:	680e      	ldr	r6, [r1, #0]
 800a3f6:	602b      	str	r3, [r5, #0]
 800a3f8:	2e00      	cmp	r6, #0
 800a3fa:	da03      	bge.n	800a404 <_printf_i+0xc8>
 800a3fc:	232d      	movs	r3, #45	; 0x2d
 800a3fe:	4276      	negs	r6, r6
 800a400:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a404:	485e      	ldr	r0, [pc, #376]	; (800a580 <_printf_i+0x244>)
 800a406:	230a      	movs	r3, #10
 800a408:	e019      	b.n	800a43e <_printf_i+0x102>
 800a40a:	680e      	ldr	r6, [r1, #0]
 800a40c:	602b      	str	r3, [r5, #0]
 800a40e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a412:	bf18      	it	ne
 800a414:	b236      	sxthne	r6, r6
 800a416:	e7ef      	b.n	800a3f8 <_printf_i+0xbc>
 800a418:	682b      	ldr	r3, [r5, #0]
 800a41a:	6820      	ldr	r0, [r4, #0]
 800a41c:	1d19      	adds	r1, r3, #4
 800a41e:	6029      	str	r1, [r5, #0]
 800a420:	0601      	lsls	r1, r0, #24
 800a422:	d501      	bpl.n	800a428 <_printf_i+0xec>
 800a424:	681e      	ldr	r6, [r3, #0]
 800a426:	e002      	b.n	800a42e <_printf_i+0xf2>
 800a428:	0646      	lsls	r6, r0, #25
 800a42a:	d5fb      	bpl.n	800a424 <_printf_i+0xe8>
 800a42c:	881e      	ldrh	r6, [r3, #0]
 800a42e:	4854      	ldr	r0, [pc, #336]	; (800a580 <_printf_i+0x244>)
 800a430:	2f6f      	cmp	r7, #111	; 0x6f
 800a432:	bf0c      	ite	eq
 800a434:	2308      	moveq	r3, #8
 800a436:	230a      	movne	r3, #10
 800a438:	2100      	movs	r1, #0
 800a43a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a43e:	6865      	ldr	r5, [r4, #4]
 800a440:	60a5      	str	r5, [r4, #8]
 800a442:	2d00      	cmp	r5, #0
 800a444:	bfa2      	ittt	ge
 800a446:	6821      	ldrge	r1, [r4, #0]
 800a448:	f021 0104 	bicge.w	r1, r1, #4
 800a44c:	6021      	strge	r1, [r4, #0]
 800a44e:	b90e      	cbnz	r6, 800a454 <_printf_i+0x118>
 800a450:	2d00      	cmp	r5, #0
 800a452:	d04d      	beq.n	800a4f0 <_printf_i+0x1b4>
 800a454:	4615      	mov	r5, r2
 800a456:	fbb6 f1f3 	udiv	r1, r6, r3
 800a45a:	fb03 6711 	mls	r7, r3, r1, r6
 800a45e:	5dc7      	ldrb	r7, [r0, r7]
 800a460:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a464:	4637      	mov	r7, r6
 800a466:	42bb      	cmp	r3, r7
 800a468:	460e      	mov	r6, r1
 800a46a:	d9f4      	bls.n	800a456 <_printf_i+0x11a>
 800a46c:	2b08      	cmp	r3, #8
 800a46e:	d10b      	bne.n	800a488 <_printf_i+0x14c>
 800a470:	6823      	ldr	r3, [r4, #0]
 800a472:	07de      	lsls	r6, r3, #31
 800a474:	d508      	bpl.n	800a488 <_printf_i+0x14c>
 800a476:	6923      	ldr	r3, [r4, #16]
 800a478:	6861      	ldr	r1, [r4, #4]
 800a47a:	4299      	cmp	r1, r3
 800a47c:	bfde      	ittt	le
 800a47e:	2330      	movle	r3, #48	; 0x30
 800a480:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a484:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a488:	1b52      	subs	r2, r2, r5
 800a48a:	6122      	str	r2, [r4, #16]
 800a48c:	f8cd a000 	str.w	sl, [sp]
 800a490:	464b      	mov	r3, r9
 800a492:	aa03      	add	r2, sp, #12
 800a494:	4621      	mov	r1, r4
 800a496:	4640      	mov	r0, r8
 800a498:	f7ff fee2 	bl	800a260 <_printf_common>
 800a49c:	3001      	adds	r0, #1
 800a49e:	d14c      	bne.n	800a53a <_printf_i+0x1fe>
 800a4a0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4a4:	b004      	add	sp, #16
 800a4a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4aa:	4835      	ldr	r0, [pc, #212]	; (800a580 <_printf_i+0x244>)
 800a4ac:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a4b0:	6829      	ldr	r1, [r5, #0]
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	f851 6b04 	ldr.w	r6, [r1], #4
 800a4b8:	6029      	str	r1, [r5, #0]
 800a4ba:	061d      	lsls	r5, r3, #24
 800a4bc:	d514      	bpl.n	800a4e8 <_printf_i+0x1ac>
 800a4be:	07df      	lsls	r7, r3, #31
 800a4c0:	bf44      	itt	mi
 800a4c2:	f043 0320 	orrmi.w	r3, r3, #32
 800a4c6:	6023      	strmi	r3, [r4, #0]
 800a4c8:	b91e      	cbnz	r6, 800a4d2 <_printf_i+0x196>
 800a4ca:	6823      	ldr	r3, [r4, #0]
 800a4cc:	f023 0320 	bic.w	r3, r3, #32
 800a4d0:	6023      	str	r3, [r4, #0]
 800a4d2:	2310      	movs	r3, #16
 800a4d4:	e7b0      	b.n	800a438 <_printf_i+0xfc>
 800a4d6:	6823      	ldr	r3, [r4, #0]
 800a4d8:	f043 0320 	orr.w	r3, r3, #32
 800a4dc:	6023      	str	r3, [r4, #0]
 800a4de:	2378      	movs	r3, #120	; 0x78
 800a4e0:	4828      	ldr	r0, [pc, #160]	; (800a584 <_printf_i+0x248>)
 800a4e2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a4e6:	e7e3      	b.n	800a4b0 <_printf_i+0x174>
 800a4e8:	0659      	lsls	r1, r3, #25
 800a4ea:	bf48      	it	mi
 800a4ec:	b2b6      	uxthmi	r6, r6
 800a4ee:	e7e6      	b.n	800a4be <_printf_i+0x182>
 800a4f0:	4615      	mov	r5, r2
 800a4f2:	e7bb      	b.n	800a46c <_printf_i+0x130>
 800a4f4:	682b      	ldr	r3, [r5, #0]
 800a4f6:	6826      	ldr	r6, [r4, #0]
 800a4f8:	6961      	ldr	r1, [r4, #20]
 800a4fa:	1d18      	adds	r0, r3, #4
 800a4fc:	6028      	str	r0, [r5, #0]
 800a4fe:	0635      	lsls	r5, r6, #24
 800a500:	681b      	ldr	r3, [r3, #0]
 800a502:	d501      	bpl.n	800a508 <_printf_i+0x1cc>
 800a504:	6019      	str	r1, [r3, #0]
 800a506:	e002      	b.n	800a50e <_printf_i+0x1d2>
 800a508:	0670      	lsls	r0, r6, #25
 800a50a:	d5fb      	bpl.n	800a504 <_printf_i+0x1c8>
 800a50c:	8019      	strh	r1, [r3, #0]
 800a50e:	2300      	movs	r3, #0
 800a510:	6123      	str	r3, [r4, #16]
 800a512:	4615      	mov	r5, r2
 800a514:	e7ba      	b.n	800a48c <_printf_i+0x150>
 800a516:	682b      	ldr	r3, [r5, #0]
 800a518:	1d1a      	adds	r2, r3, #4
 800a51a:	602a      	str	r2, [r5, #0]
 800a51c:	681d      	ldr	r5, [r3, #0]
 800a51e:	6862      	ldr	r2, [r4, #4]
 800a520:	2100      	movs	r1, #0
 800a522:	4628      	mov	r0, r5
 800a524:	f7f5 fe5c 	bl	80001e0 <memchr>
 800a528:	b108      	cbz	r0, 800a52e <_printf_i+0x1f2>
 800a52a:	1b40      	subs	r0, r0, r5
 800a52c:	6060      	str	r0, [r4, #4]
 800a52e:	6863      	ldr	r3, [r4, #4]
 800a530:	6123      	str	r3, [r4, #16]
 800a532:	2300      	movs	r3, #0
 800a534:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a538:	e7a8      	b.n	800a48c <_printf_i+0x150>
 800a53a:	6923      	ldr	r3, [r4, #16]
 800a53c:	462a      	mov	r2, r5
 800a53e:	4649      	mov	r1, r9
 800a540:	4640      	mov	r0, r8
 800a542:	47d0      	blx	sl
 800a544:	3001      	adds	r0, #1
 800a546:	d0ab      	beq.n	800a4a0 <_printf_i+0x164>
 800a548:	6823      	ldr	r3, [r4, #0]
 800a54a:	079b      	lsls	r3, r3, #30
 800a54c:	d413      	bmi.n	800a576 <_printf_i+0x23a>
 800a54e:	68e0      	ldr	r0, [r4, #12]
 800a550:	9b03      	ldr	r3, [sp, #12]
 800a552:	4298      	cmp	r0, r3
 800a554:	bfb8      	it	lt
 800a556:	4618      	movlt	r0, r3
 800a558:	e7a4      	b.n	800a4a4 <_printf_i+0x168>
 800a55a:	2301      	movs	r3, #1
 800a55c:	4632      	mov	r2, r6
 800a55e:	4649      	mov	r1, r9
 800a560:	4640      	mov	r0, r8
 800a562:	47d0      	blx	sl
 800a564:	3001      	adds	r0, #1
 800a566:	d09b      	beq.n	800a4a0 <_printf_i+0x164>
 800a568:	3501      	adds	r5, #1
 800a56a:	68e3      	ldr	r3, [r4, #12]
 800a56c:	9903      	ldr	r1, [sp, #12]
 800a56e:	1a5b      	subs	r3, r3, r1
 800a570:	42ab      	cmp	r3, r5
 800a572:	dcf2      	bgt.n	800a55a <_printf_i+0x21e>
 800a574:	e7eb      	b.n	800a54e <_printf_i+0x212>
 800a576:	2500      	movs	r5, #0
 800a578:	f104 0619 	add.w	r6, r4, #25
 800a57c:	e7f5      	b.n	800a56a <_printf_i+0x22e>
 800a57e:	bf00      	nop
 800a580:	0800cb09 	.word	0x0800cb09
 800a584:	0800cb1a 	.word	0x0800cb1a

0800a588 <memmove>:
 800a588:	4288      	cmp	r0, r1
 800a58a:	b510      	push	{r4, lr}
 800a58c:	eb01 0402 	add.w	r4, r1, r2
 800a590:	d902      	bls.n	800a598 <memmove+0x10>
 800a592:	4284      	cmp	r4, r0
 800a594:	4623      	mov	r3, r4
 800a596:	d807      	bhi.n	800a5a8 <memmove+0x20>
 800a598:	1e43      	subs	r3, r0, #1
 800a59a:	42a1      	cmp	r1, r4
 800a59c:	d008      	beq.n	800a5b0 <memmove+0x28>
 800a59e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a5a2:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a5a6:	e7f8      	b.n	800a59a <memmove+0x12>
 800a5a8:	4402      	add	r2, r0
 800a5aa:	4601      	mov	r1, r0
 800a5ac:	428a      	cmp	r2, r1
 800a5ae:	d100      	bne.n	800a5b2 <memmove+0x2a>
 800a5b0:	bd10      	pop	{r4, pc}
 800a5b2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a5b6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a5ba:	e7f7      	b.n	800a5ac <memmove+0x24>

0800a5bc <_realloc_r>:
 800a5bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c0:	4680      	mov	r8, r0
 800a5c2:	4614      	mov	r4, r2
 800a5c4:	460e      	mov	r6, r1
 800a5c6:	b921      	cbnz	r1, 800a5d2 <_realloc_r+0x16>
 800a5c8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5cc:	4611      	mov	r1, r2
 800a5ce:	f7ff bbef 	b.w	8009db0 <_malloc_r>
 800a5d2:	b92a      	cbnz	r2, 800a5e0 <_realloc_r+0x24>
 800a5d4:	f7ff fc9c 	bl	8009f10 <_free_r>
 800a5d8:	4625      	mov	r5, r4
 800a5da:	4628      	mov	r0, r5
 800a5dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e0:	f000 f81b 	bl	800a61a <_malloc_usable_size_r>
 800a5e4:	4284      	cmp	r4, r0
 800a5e6:	4607      	mov	r7, r0
 800a5e8:	d802      	bhi.n	800a5f0 <_realloc_r+0x34>
 800a5ea:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a5ee:	d812      	bhi.n	800a616 <_realloc_r+0x5a>
 800a5f0:	4621      	mov	r1, r4
 800a5f2:	4640      	mov	r0, r8
 800a5f4:	f7ff fbdc 	bl	8009db0 <_malloc_r>
 800a5f8:	4605      	mov	r5, r0
 800a5fa:	2800      	cmp	r0, #0
 800a5fc:	d0ed      	beq.n	800a5da <_realloc_r+0x1e>
 800a5fe:	42bc      	cmp	r4, r7
 800a600:	4622      	mov	r2, r4
 800a602:	4631      	mov	r1, r6
 800a604:	bf28      	it	cs
 800a606:	463a      	movcs	r2, r7
 800a608:	f7ff fb9c 	bl	8009d44 <memcpy>
 800a60c:	4631      	mov	r1, r6
 800a60e:	4640      	mov	r0, r8
 800a610:	f7ff fc7e 	bl	8009f10 <_free_r>
 800a614:	e7e1      	b.n	800a5da <_realloc_r+0x1e>
 800a616:	4635      	mov	r5, r6
 800a618:	e7df      	b.n	800a5da <_realloc_r+0x1e>

0800a61a <_malloc_usable_size_r>:
 800a61a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a61e:	1f18      	subs	r0, r3, #4
 800a620:	2b00      	cmp	r3, #0
 800a622:	bfbc      	itt	lt
 800a624:	580b      	ldrlt	r3, [r1, r0]
 800a626:	18c0      	addlt	r0, r0, r3
 800a628:	4770      	bx	lr
 800a62a:	0000      	movs	r0, r0
 800a62c:	0000      	movs	r0, r0
	...

0800a630 <cos>:
 800a630:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a632:	ec53 2b10 	vmov	r2, r3, d0
 800a636:	4826      	ldr	r0, [pc, #152]	; (800a6d0 <cos+0xa0>)
 800a638:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a63c:	4281      	cmp	r1, r0
 800a63e:	dc06      	bgt.n	800a64e <cos+0x1e>
 800a640:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800a6c8 <cos+0x98>
 800a644:	b005      	add	sp, #20
 800a646:	f85d eb04 	ldr.w	lr, [sp], #4
 800a64a:	f001 b8fd 	b.w	800b848 <__kernel_cos>
 800a64e:	4821      	ldr	r0, [pc, #132]	; (800a6d4 <cos+0xa4>)
 800a650:	4281      	cmp	r1, r0
 800a652:	dd09      	ble.n	800a668 <cos+0x38>
 800a654:	ee10 0a10 	vmov	r0, s0
 800a658:	4619      	mov	r1, r3
 800a65a:	f7f5 fe15 	bl	8000288 <__aeabi_dsub>
 800a65e:	ec41 0b10 	vmov	d0, r0, r1
 800a662:	b005      	add	sp, #20
 800a664:	f85d fb04 	ldr.w	pc, [sp], #4
 800a668:	4668      	mov	r0, sp
 800a66a:	f000 fe2d 	bl	800b2c8 <__ieee754_rem_pio2>
 800a66e:	f000 0003 	and.w	r0, r0, #3
 800a672:	2801      	cmp	r0, #1
 800a674:	d00b      	beq.n	800a68e <cos+0x5e>
 800a676:	2802      	cmp	r0, #2
 800a678:	d016      	beq.n	800a6a8 <cos+0x78>
 800a67a:	b9e0      	cbnz	r0, 800a6b6 <cos+0x86>
 800a67c:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a680:	ed9d 0b00 	vldr	d0, [sp]
 800a684:	f001 f8e0 	bl	800b848 <__kernel_cos>
 800a688:	ec51 0b10 	vmov	r0, r1, d0
 800a68c:	e7e7      	b.n	800a65e <cos+0x2e>
 800a68e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a692:	ed9d 0b00 	vldr	d0, [sp]
 800a696:	f001 fcef 	bl	800c078 <__kernel_sin>
 800a69a:	ec53 2b10 	vmov	r2, r3, d0
 800a69e:	ee10 0a10 	vmov	r0, s0
 800a6a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a6a6:	e7da      	b.n	800a65e <cos+0x2e>
 800a6a8:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6ac:	ed9d 0b00 	vldr	d0, [sp]
 800a6b0:	f001 f8ca 	bl	800b848 <__kernel_cos>
 800a6b4:	e7f1      	b.n	800a69a <cos+0x6a>
 800a6b6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a6ba:	ed9d 0b00 	vldr	d0, [sp]
 800a6be:	2001      	movs	r0, #1
 800a6c0:	f001 fcda 	bl	800c078 <__kernel_sin>
 800a6c4:	e7e0      	b.n	800a688 <cos+0x58>
 800a6c6:	bf00      	nop
	...
 800a6d0:	3fe921fb 	.word	0x3fe921fb
 800a6d4:	7fefffff 	.word	0x7fefffff

0800a6d8 <sin>:
 800a6d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a6da:	ec53 2b10 	vmov	r2, r3, d0
 800a6de:	4828      	ldr	r0, [pc, #160]	; (800a780 <sin+0xa8>)
 800a6e0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800a6e4:	4281      	cmp	r1, r0
 800a6e6:	dc07      	bgt.n	800a6f8 <sin+0x20>
 800a6e8:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800a778 <sin+0xa0>
 800a6ec:	2000      	movs	r0, #0
 800a6ee:	b005      	add	sp, #20
 800a6f0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a6f4:	f001 bcc0 	b.w	800c078 <__kernel_sin>
 800a6f8:	4822      	ldr	r0, [pc, #136]	; (800a784 <sin+0xac>)
 800a6fa:	4281      	cmp	r1, r0
 800a6fc:	dd09      	ble.n	800a712 <sin+0x3a>
 800a6fe:	ee10 0a10 	vmov	r0, s0
 800a702:	4619      	mov	r1, r3
 800a704:	f7f5 fdc0 	bl	8000288 <__aeabi_dsub>
 800a708:	ec41 0b10 	vmov	d0, r0, r1
 800a70c:	b005      	add	sp, #20
 800a70e:	f85d fb04 	ldr.w	pc, [sp], #4
 800a712:	4668      	mov	r0, sp
 800a714:	f000 fdd8 	bl	800b2c8 <__ieee754_rem_pio2>
 800a718:	f000 0003 	and.w	r0, r0, #3
 800a71c:	2801      	cmp	r0, #1
 800a71e:	d00c      	beq.n	800a73a <sin+0x62>
 800a720:	2802      	cmp	r0, #2
 800a722:	d011      	beq.n	800a748 <sin+0x70>
 800a724:	b9f0      	cbnz	r0, 800a764 <sin+0x8c>
 800a726:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a72a:	ed9d 0b00 	vldr	d0, [sp]
 800a72e:	2001      	movs	r0, #1
 800a730:	f001 fca2 	bl	800c078 <__kernel_sin>
 800a734:	ec51 0b10 	vmov	r0, r1, d0
 800a738:	e7e6      	b.n	800a708 <sin+0x30>
 800a73a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a73e:	ed9d 0b00 	vldr	d0, [sp]
 800a742:	f001 f881 	bl	800b848 <__kernel_cos>
 800a746:	e7f5      	b.n	800a734 <sin+0x5c>
 800a748:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a74c:	ed9d 0b00 	vldr	d0, [sp]
 800a750:	2001      	movs	r0, #1
 800a752:	f001 fc91 	bl	800c078 <__kernel_sin>
 800a756:	ec53 2b10 	vmov	r2, r3, d0
 800a75a:	ee10 0a10 	vmov	r0, s0
 800a75e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a762:	e7d1      	b.n	800a708 <sin+0x30>
 800a764:	ed9d 1b02 	vldr	d1, [sp, #8]
 800a768:	ed9d 0b00 	vldr	d0, [sp]
 800a76c:	f001 f86c 	bl	800b848 <__kernel_cos>
 800a770:	e7f1      	b.n	800a756 <sin+0x7e>
 800a772:	bf00      	nop
 800a774:	f3af 8000 	nop.w
	...
 800a780:	3fe921fb 	.word	0x3fe921fb
 800a784:	7fefffff 	.word	0x7fefffff

0800a788 <pow>:
 800a788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a78a:	ed2d 8b02 	vpush	{d8}
 800a78e:	eeb0 8a40 	vmov.f32	s16, s0
 800a792:	eef0 8a60 	vmov.f32	s17, s1
 800a796:	ec55 4b11 	vmov	r4, r5, d1
 800a79a:	f000 f865 	bl	800a868 <__ieee754_pow>
 800a79e:	4622      	mov	r2, r4
 800a7a0:	462b      	mov	r3, r5
 800a7a2:	4620      	mov	r0, r4
 800a7a4:	4629      	mov	r1, r5
 800a7a6:	ec57 6b10 	vmov	r6, r7, d0
 800a7aa:	f7f6 f9bf 	bl	8000b2c <__aeabi_dcmpun>
 800a7ae:	2800      	cmp	r0, #0
 800a7b0:	d13b      	bne.n	800a82a <pow+0xa2>
 800a7b2:	ec51 0b18 	vmov	r0, r1, d8
 800a7b6:	2200      	movs	r2, #0
 800a7b8:	2300      	movs	r3, #0
 800a7ba:	f7f6 f985 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7be:	b1b8      	cbz	r0, 800a7f0 <pow+0x68>
 800a7c0:	2200      	movs	r2, #0
 800a7c2:	2300      	movs	r3, #0
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	4629      	mov	r1, r5
 800a7c8:	f7f6 f97e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7cc:	2800      	cmp	r0, #0
 800a7ce:	d146      	bne.n	800a85e <pow+0xd6>
 800a7d0:	ec45 4b10 	vmov	d0, r4, r5
 800a7d4:	f001 fd47 	bl	800c266 <finite>
 800a7d8:	b338      	cbz	r0, 800a82a <pow+0xa2>
 800a7da:	2200      	movs	r2, #0
 800a7dc:	2300      	movs	r3, #0
 800a7de:	4620      	mov	r0, r4
 800a7e0:	4629      	mov	r1, r5
 800a7e2:	f7f6 f97b 	bl	8000adc <__aeabi_dcmplt>
 800a7e6:	b300      	cbz	r0, 800a82a <pow+0xa2>
 800a7e8:	f7ff fa80 	bl	8009cec <__errno>
 800a7ec:	2322      	movs	r3, #34	; 0x22
 800a7ee:	e01b      	b.n	800a828 <pow+0xa0>
 800a7f0:	ec47 6b10 	vmov	d0, r6, r7
 800a7f4:	f001 fd37 	bl	800c266 <finite>
 800a7f8:	b9e0      	cbnz	r0, 800a834 <pow+0xac>
 800a7fa:	eeb0 0a48 	vmov.f32	s0, s16
 800a7fe:	eef0 0a68 	vmov.f32	s1, s17
 800a802:	f001 fd30 	bl	800c266 <finite>
 800a806:	b1a8      	cbz	r0, 800a834 <pow+0xac>
 800a808:	ec45 4b10 	vmov	d0, r4, r5
 800a80c:	f001 fd2b 	bl	800c266 <finite>
 800a810:	b180      	cbz	r0, 800a834 <pow+0xac>
 800a812:	4632      	mov	r2, r6
 800a814:	463b      	mov	r3, r7
 800a816:	4630      	mov	r0, r6
 800a818:	4639      	mov	r1, r7
 800a81a:	f7f6 f987 	bl	8000b2c <__aeabi_dcmpun>
 800a81e:	2800      	cmp	r0, #0
 800a820:	d0e2      	beq.n	800a7e8 <pow+0x60>
 800a822:	f7ff fa63 	bl	8009cec <__errno>
 800a826:	2321      	movs	r3, #33	; 0x21
 800a828:	6003      	str	r3, [r0, #0]
 800a82a:	ecbd 8b02 	vpop	{d8}
 800a82e:	ec47 6b10 	vmov	d0, r6, r7
 800a832:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a834:	2200      	movs	r2, #0
 800a836:	2300      	movs	r3, #0
 800a838:	4630      	mov	r0, r6
 800a83a:	4639      	mov	r1, r7
 800a83c:	f7f6 f944 	bl	8000ac8 <__aeabi_dcmpeq>
 800a840:	2800      	cmp	r0, #0
 800a842:	d0f2      	beq.n	800a82a <pow+0xa2>
 800a844:	eeb0 0a48 	vmov.f32	s0, s16
 800a848:	eef0 0a68 	vmov.f32	s1, s17
 800a84c:	f001 fd0b 	bl	800c266 <finite>
 800a850:	2800      	cmp	r0, #0
 800a852:	d0ea      	beq.n	800a82a <pow+0xa2>
 800a854:	ec45 4b10 	vmov	d0, r4, r5
 800a858:	f001 fd05 	bl	800c266 <finite>
 800a85c:	e7c3      	b.n	800a7e6 <pow+0x5e>
 800a85e:	4f01      	ldr	r7, [pc, #4]	; (800a864 <pow+0xdc>)
 800a860:	2600      	movs	r6, #0
 800a862:	e7e2      	b.n	800a82a <pow+0xa2>
 800a864:	3ff00000 	.word	0x3ff00000

0800a868 <__ieee754_pow>:
 800a868:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a86c:	ed2d 8b06 	vpush	{d8-d10}
 800a870:	b089      	sub	sp, #36	; 0x24
 800a872:	ed8d 1b00 	vstr	d1, [sp]
 800a876:	e9dd 2900 	ldrd	r2, r9, [sp]
 800a87a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800a87e:	ea58 0102 	orrs.w	r1, r8, r2
 800a882:	ec57 6b10 	vmov	r6, r7, d0
 800a886:	d115      	bne.n	800a8b4 <__ieee754_pow+0x4c>
 800a888:	19b3      	adds	r3, r6, r6
 800a88a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800a88e:	4152      	adcs	r2, r2
 800a890:	4299      	cmp	r1, r3
 800a892:	4b89      	ldr	r3, [pc, #548]	; (800aab8 <__ieee754_pow+0x250>)
 800a894:	4193      	sbcs	r3, r2
 800a896:	f080 84d2 	bcs.w	800b23e <__ieee754_pow+0x9d6>
 800a89a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800a89e:	4630      	mov	r0, r6
 800a8a0:	4639      	mov	r1, r7
 800a8a2:	f7f5 fcf3 	bl	800028c <__adddf3>
 800a8a6:	ec41 0b10 	vmov	d0, r0, r1
 800a8aa:	b009      	add	sp, #36	; 0x24
 800a8ac:	ecbd 8b06 	vpop	{d8-d10}
 800a8b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8b4:	4b81      	ldr	r3, [pc, #516]	; (800aabc <__ieee754_pow+0x254>)
 800a8b6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800a8ba:	429c      	cmp	r4, r3
 800a8bc:	ee10 aa10 	vmov	sl, s0
 800a8c0:	463d      	mov	r5, r7
 800a8c2:	dc06      	bgt.n	800a8d2 <__ieee754_pow+0x6a>
 800a8c4:	d101      	bne.n	800a8ca <__ieee754_pow+0x62>
 800a8c6:	2e00      	cmp	r6, #0
 800a8c8:	d1e7      	bne.n	800a89a <__ieee754_pow+0x32>
 800a8ca:	4598      	cmp	r8, r3
 800a8cc:	dc01      	bgt.n	800a8d2 <__ieee754_pow+0x6a>
 800a8ce:	d10f      	bne.n	800a8f0 <__ieee754_pow+0x88>
 800a8d0:	b172      	cbz	r2, 800a8f0 <__ieee754_pow+0x88>
 800a8d2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800a8d6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800a8da:	ea55 050a 	orrs.w	r5, r5, sl
 800a8de:	d1dc      	bne.n	800a89a <__ieee754_pow+0x32>
 800a8e0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800a8e4:	18db      	adds	r3, r3, r3
 800a8e6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800a8ea:	4152      	adcs	r2, r2
 800a8ec:	429d      	cmp	r5, r3
 800a8ee:	e7d0      	b.n	800a892 <__ieee754_pow+0x2a>
 800a8f0:	2d00      	cmp	r5, #0
 800a8f2:	da3b      	bge.n	800a96c <__ieee754_pow+0x104>
 800a8f4:	4b72      	ldr	r3, [pc, #456]	; (800aac0 <__ieee754_pow+0x258>)
 800a8f6:	4598      	cmp	r8, r3
 800a8f8:	dc51      	bgt.n	800a99e <__ieee754_pow+0x136>
 800a8fa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800a8fe:	4598      	cmp	r8, r3
 800a900:	f340 84ac 	ble.w	800b25c <__ieee754_pow+0x9f4>
 800a904:	ea4f 5328 	mov.w	r3, r8, asr #20
 800a908:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800a90c:	2b14      	cmp	r3, #20
 800a90e:	dd0f      	ble.n	800a930 <__ieee754_pow+0xc8>
 800a910:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800a914:	fa22 f103 	lsr.w	r1, r2, r3
 800a918:	fa01 f303 	lsl.w	r3, r1, r3
 800a91c:	4293      	cmp	r3, r2
 800a91e:	f040 849d 	bne.w	800b25c <__ieee754_pow+0x9f4>
 800a922:	f001 0101 	and.w	r1, r1, #1
 800a926:	f1c1 0302 	rsb	r3, r1, #2
 800a92a:	9304      	str	r3, [sp, #16]
 800a92c:	b182      	cbz	r2, 800a950 <__ieee754_pow+0xe8>
 800a92e:	e05f      	b.n	800a9f0 <__ieee754_pow+0x188>
 800a930:	2a00      	cmp	r2, #0
 800a932:	d15b      	bne.n	800a9ec <__ieee754_pow+0x184>
 800a934:	f1c3 0314 	rsb	r3, r3, #20
 800a938:	fa48 f103 	asr.w	r1, r8, r3
 800a93c:	fa01 f303 	lsl.w	r3, r1, r3
 800a940:	4543      	cmp	r3, r8
 800a942:	f040 8488 	bne.w	800b256 <__ieee754_pow+0x9ee>
 800a946:	f001 0101 	and.w	r1, r1, #1
 800a94a:	f1c1 0302 	rsb	r3, r1, #2
 800a94e:	9304      	str	r3, [sp, #16]
 800a950:	4b5c      	ldr	r3, [pc, #368]	; (800aac4 <__ieee754_pow+0x25c>)
 800a952:	4598      	cmp	r8, r3
 800a954:	d132      	bne.n	800a9bc <__ieee754_pow+0x154>
 800a956:	f1b9 0f00 	cmp.w	r9, #0
 800a95a:	f280 8478 	bge.w	800b24e <__ieee754_pow+0x9e6>
 800a95e:	4959      	ldr	r1, [pc, #356]	; (800aac4 <__ieee754_pow+0x25c>)
 800a960:	4632      	mov	r2, r6
 800a962:	463b      	mov	r3, r7
 800a964:	2000      	movs	r0, #0
 800a966:	f7f5 ff71 	bl	800084c <__aeabi_ddiv>
 800a96a:	e79c      	b.n	800a8a6 <__ieee754_pow+0x3e>
 800a96c:	2300      	movs	r3, #0
 800a96e:	9304      	str	r3, [sp, #16]
 800a970:	2a00      	cmp	r2, #0
 800a972:	d13d      	bne.n	800a9f0 <__ieee754_pow+0x188>
 800a974:	4b51      	ldr	r3, [pc, #324]	; (800aabc <__ieee754_pow+0x254>)
 800a976:	4598      	cmp	r8, r3
 800a978:	d1ea      	bne.n	800a950 <__ieee754_pow+0xe8>
 800a97a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800a97e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800a982:	ea53 030a 	orrs.w	r3, r3, sl
 800a986:	f000 845a 	beq.w	800b23e <__ieee754_pow+0x9d6>
 800a98a:	4b4f      	ldr	r3, [pc, #316]	; (800aac8 <__ieee754_pow+0x260>)
 800a98c:	429c      	cmp	r4, r3
 800a98e:	dd08      	ble.n	800a9a2 <__ieee754_pow+0x13a>
 800a990:	f1b9 0f00 	cmp.w	r9, #0
 800a994:	f2c0 8457 	blt.w	800b246 <__ieee754_pow+0x9de>
 800a998:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a99c:	e783      	b.n	800a8a6 <__ieee754_pow+0x3e>
 800a99e:	2302      	movs	r3, #2
 800a9a0:	e7e5      	b.n	800a96e <__ieee754_pow+0x106>
 800a9a2:	f1b9 0f00 	cmp.w	r9, #0
 800a9a6:	f04f 0000 	mov.w	r0, #0
 800a9aa:	f04f 0100 	mov.w	r1, #0
 800a9ae:	f6bf af7a 	bge.w	800a8a6 <__ieee754_pow+0x3e>
 800a9b2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800a9b6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800a9ba:	e774      	b.n	800a8a6 <__ieee754_pow+0x3e>
 800a9bc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800a9c0:	d106      	bne.n	800a9d0 <__ieee754_pow+0x168>
 800a9c2:	4632      	mov	r2, r6
 800a9c4:	463b      	mov	r3, r7
 800a9c6:	4630      	mov	r0, r6
 800a9c8:	4639      	mov	r1, r7
 800a9ca:	f7f5 fe15 	bl	80005f8 <__aeabi_dmul>
 800a9ce:	e76a      	b.n	800a8a6 <__ieee754_pow+0x3e>
 800a9d0:	4b3e      	ldr	r3, [pc, #248]	; (800aacc <__ieee754_pow+0x264>)
 800a9d2:	4599      	cmp	r9, r3
 800a9d4:	d10c      	bne.n	800a9f0 <__ieee754_pow+0x188>
 800a9d6:	2d00      	cmp	r5, #0
 800a9d8:	db0a      	blt.n	800a9f0 <__ieee754_pow+0x188>
 800a9da:	ec47 6b10 	vmov	d0, r6, r7
 800a9de:	b009      	add	sp, #36	; 0x24
 800a9e0:	ecbd 8b06 	vpop	{d8-d10}
 800a9e4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a9e8:	f000 be7a 	b.w	800b6e0 <__ieee754_sqrt>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9304      	str	r3, [sp, #16]
 800a9f0:	ec47 6b10 	vmov	d0, r6, r7
 800a9f4:	f001 fc2e 	bl	800c254 <fabs>
 800a9f8:	ec51 0b10 	vmov	r0, r1, d0
 800a9fc:	f1ba 0f00 	cmp.w	sl, #0
 800aa00:	d129      	bne.n	800aa56 <__ieee754_pow+0x1ee>
 800aa02:	b124      	cbz	r4, 800aa0e <__ieee754_pow+0x1a6>
 800aa04:	4b2f      	ldr	r3, [pc, #188]	; (800aac4 <__ieee754_pow+0x25c>)
 800aa06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800aa0a:	429a      	cmp	r2, r3
 800aa0c:	d123      	bne.n	800aa56 <__ieee754_pow+0x1ee>
 800aa0e:	f1b9 0f00 	cmp.w	r9, #0
 800aa12:	da05      	bge.n	800aa20 <__ieee754_pow+0x1b8>
 800aa14:	4602      	mov	r2, r0
 800aa16:	460b      	mov	r3, r1
 800aa18:	2000      	movs	r0, #0
 800aa1a:	492a      	ldr	r1, [pc, #168]	; (800aac4 <__ieee754_pow+0x25c>)
 800aa1c:	f7f5 ff16 	bl	800084c <__aeabi_ddiv>
 800aa20:	2d00      	cmp	r5, #0
 800aa22:	f6bf af40 	bge.w	800a8a6 <__ieee754_pow+0x3e>
 800aa26:	9b04      	ldr	r3, [sp, #16]
 800aa28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800aa2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800aa30:	4323      	orrs	r3, r4
 800aa32:	d108      	bne.n	800aa46 <__ieee754_pow+0x1de>
 800aa34:	4602      	mov	r2, r0
 800aa36:	460b      	mov	r3, r1
 800aa38:	4610      	mov	r0, r2
 800aa3a:	4619      	mov	r1, r3
 800aa3c:	f7f5 fc24 	bl	8000288 <__aeabi_dsub>
 800aa40:	4602      	mov	r2, r0
 800aa42:	460b      	mov	r3, r1
 800aa44:	e78f      	b.n	800a966 <__ieee754_pow+0xfe>
 800aa46:	9b04      	ldr	r3, [sp, #16]
 800aa48:	2b01      	cmp	r3, #1
 800aa4a:	f47f af2c 	bne.w	800a8a6 <__ieee754_pow+0x3e>
 800aa4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800aa52:	4619      	mov	r1, r3
 800aa54:	e727      	b.n	800a8a6 <__ieee754_pow+0x3e>
 800aa56:	0feb      	lsrs	r3, r5, #31
 800aa58:	3b01      	subs	r3, #1
 800aa5a:	9306      	str	r3, [sp, #24]
 800aa5c:	9a06      	ldr	r2, [sp, #24]
 800aa5e:	9b04      	ldr	r3, [sp, #16]
 800aa60:	4313      	orrs	r3, r2
 800aa62:	d102      	bne.n	800aa6a <__ieee754_pow+0x202>
 800aa64:	4632      	mov	r2, r6
 800aa66:	463b      	mov	r3, r7
 800aa68:	e7e6      	b.n	800aa38 <__ieee754_pow+0x1d0>
 800aa6a:	4b19      	ldr	r3, [pc, #100]	; (800aad0 <__ieee754_pow+0x268>)
 800aa6c:	4598      	cmp	r8, r3
 800aa6e:	f340 80fb 	ble.w	800ac68 <__ieee754_pow+0x400>
 800aa72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800aa76:	4598      	cmp	r8, r3
 800aa78:	4b13      	ldr	r3, [pc, #76]	; (800aac8 <__ieee754_pow+0x260>)
 800aa7a:	dd0c      	ble.n	800aa96 <__ieee754_pow+0x22e>
 800aa7c:	429c      	cmp	r4, r3
 800aa7e:	dc0f      	bgt.n	800aaa0 <__ieee754_pow+0x238>
 800aa80:	f1b9 0f00 	cmp.w	r9, #0
 800aa84:	da0f      	bge.n	800aaa6 <__ieee754_pow+0x23e>
 800aa86:	2000      	movs	r0, #0
 800aa88:	b009      	add	sp, #36	; 0x24
 800aa8a:	ecbd 8b06 	vpop	{d8-d10}
 800aa8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa92:	f001 bbd6 	b.w	800c242 <__math_oflow>
 800aa96:	429c      	cmp	r4, r3
 800aa98:	dbf2      	blt.n	800aa80 <__ieee754_pow+0x218>
 800aa9a:	4b0a      	ldr	r3, [pc, #40]	; (800aac4 <__ieee754_pow+0x25c>)
 800aa9c:	429c      	cmp	r4, r3
 800aa9e:	dd19      	ble.n	800aad4 <__ieee754_pow+0x26c>
 800aaa0:	f1b9 0f00 	cmp.w	r9, #0
 800aaa4:	dcef      	bgt.n	800aa86 <__ieee754_pow+0x21e>
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	b009      	add	sp, #36	; 0x24
 800aaaa:	ecbd 8b06 	vpop	{d8-d10}
 800aaae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aab2:	f001 bbbd 	b.w	800c230 <__math_uflow>
 800aab6:	bf00      	nop
 800aab8:	fff00000 	.word	0xfff00000
 800aabc:	7ff00000 	.word	0x7ff00000
 800aac0:	433fffff 	.word	0x433fffff
 800aac4:	3ff00000 	.word	0x3ff00000
 800aac8:	3fefffff 	.word	0x3fefffff
 800aacc:	3fe00000 	.word	0x3fe00000
 800aad0:	41e00000 	.word	0x41e00000
 800aad4:	4b60      	ldr	r3, [pc, #384]	; (800ac58 <__ieee754_pow+0x3f0>)
 800aad6:	2200      	movs	r2, #0
 800aad8:	f7f5 fbd6 	bl	8000288 <__aeabi_dsub>
 800aadc:	a354      	add	r3, pc, #336	; (adr r3, 800ac30 <__ieee754_pow+0x3c8>)
 800aade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aae2:	4604      	mov	r4, r0
 800aae4:	460d      	mov	r5, r1
 800aae6:	f7f5 fd87 	bl	80005f8 <__aeabi_dmul>
 800aaea:	a353      	add	r3, pc, #332	; (adr r3, 800ac38 <__ieee754_pow+0x3d0>)
 800aaec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aaf0:	4606      	mov	r6, r0
 800aaf2:	460f      	mov	r7, r1
 800aaf4:	4620      	mov	r0, r4
 800aaf6:	4629      	mov	r1, r5
 800aaf8:	f7f5 fd7e 	bl	80005f8 <__aeabi_dmul>
 800aafc:	4b57      	ldr	r3, [pc, #348]	; (800ac5c <__ieee754_pow+0x3f4>)
 800aafe:	4682      	mov	sl, r0
 800ab00:	468b      	mov	fp, r1
 800ab02:	2200      	movs	r2, #0
 800ab04:	4620      	mov	r0, r4
 800ab06:	4629      	mov	r1, r5
 800ab08:	f7f5 fd76 	bl	80005f8 <__aeabi_dmul>
 800ab0c:	4602      	mov	r2, r0
 800ab0e:	460b      	mov	r3, r1
 800ab10:	a14b      	add	r1, pc, #300	; (adr r1, 800ac40 <__ieee754_pow+0x3d8>)
 800ab12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ab16:	f7f5 fbb7 	bl	8000288 <__aeabi_dsub>
 800ab1a:	4622      	mov	r2, r4
 800ab1c:	462b      	mov	r3, r5
 800ab1e:	f7f5 fd6b 	bl	80005f8 <__aeabi_dmul>
 800ab22:	4602      	mov	r2, r0
 800ab24:	460b      	mov	r3, r1
 800ab26:	2000      	movs	r0, #0
 800ab28:	494d      	ldr	r1, [pc, #308]	; (800ac60 <__ieee754_pow+0x3f8>)
 800ab2a:	f7f5 fbad 	bl	8000288 <__aeabi_dsub>
 800ab2e:	4622      	mov	r2, r4
 800ab30:	4680      	mov	r8, r0
 800ab32:	4689      	mov	r9, r1
 800ab34:	462b      	mov	r3, r5
 800ab36:	4620      	mov	r0, r4
 800ab38:	4629      	mov	r1, r5
 800ab3a:	f7f5 fd5d 	bl	80005f8 <__aeabi_dmul>
 800ab3e:	4602      	mov	r2, r0
 800ab40:	460b      	mov	r3, r1
 800ab42:	4640      	mov	r0, r8
 800ab44:	4649      	mov	r1, r9
 800ab46:	f7f5 fd57 	bl	80005f8 <__aeabi_dmul>
 800ab4a:	a33f      	add	r3, pc, #252	; (adr r3, 800ac48 <__ieee754_pow+0x3e0>)
 800ab4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab50:	f7f5 fd52 	bl	80005f8 <__aeabi_dmul>
 800ab54:	4602      	mov	r2, r0
 800ab56:	460b      	mov	r3, r1
 800ab58:	4650      	mov	r0, sl
 800ab5a:	4659      	mov	r1, fp
 800ab5c:	f7f5 fb94 	bl	8000288 <__aeabi_dsub>
 800ab60:	4602      	mov	r2, r0
 800ab62:	460b      	mov	r3, r1
 800ab64:	4680      	mov	r8, r0
 800ab66:	4689      	mov	r9, r1
 800ab68:	4630      	mov	r0, r6
 800ab6a:	4639      	mov	r1, r7
 800ab6c:	f7f5 fb8e 	bl	800028c <__adddf3>
 800ab70:	2000      	movs	r0, #0
 800ab72:	4632      	mov	r2, r6
 800ab74:	463b      	mov	r3, r7
 800ab76:	4604      	mov	r4, r0
 800ab78:	460d      	mov	r5, r1
 800ab7a:	f7f5 fb85 	bl	8000288 <__aeabi_dsub>
 800ab7e:	4602      	mov	r2, r0
 800ab80:	460b      	mov	r3, r1
 800ab82:	4640      	mov	r0, r8
 800ab84:	4649      	mov	r1, r9
 800ab86:	f7f5 fb7f 	bl	8000288 <__aeabi_dsub>
 800ab8a:	9b04      	ldr	r3, [sp, #16]
 800ab8c:	9a06      	ldr	r2, [sp, #24]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	4313      	orrs	r3, r2
 800ab92:	4682      	mov	sl, r0
 800ab94:	468b      	mov	fp, r1
 800ab96:	f040 81e7 	bne.w	800af68 <__ieee754_pow+0x700>
 800ab9a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ac50 <__ieee754_pow+0x3e8>
 800ab9e:	eeb0 8a47 	vmov.f32	s16, s14
 800aba2:	eef0 8a67 	vmov.f32	s17, s15
 800aba6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800abaa:	2600      	movs	r6, #0
 800abac:	4632      	mov	r2, r6
 800abae:	463b      	mov	r3, r7
 800abb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800abb4:	f7f5 fb68 	bl	8000288 <__aeabi_dsub>
 800abb8:	4622      	mov	r2, r4
 800abba:	462b      	mov	r3, r5
 800abbc:	f7f5 fd1c 	bl	80005f8 <__aeabi_dmul>
 800abc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800abc4:	4680      	mov	r8, r0
 800abc6:	4689      	mov	r9, r1
 800abc8:	4650      	mov	r0, sl
 800abca:	4659      	mov	r1, fp
 800abcc:	f7f5 fd14 	bl	80005f8 <__aeabi_dmul>
 800abd0:	4602      	mov	r2, r0
 800abd2:	460b      	mov	r3, r1
 800abd4:	4640      	mov	r0, r8
 800abd6:	4649      	mov	r1, r9
 800abd8:	f7f5 fb58 	bl	800028c <__adddf3>
 800abdc:	4632      	mov	r2, r6
 800abde:	463b      	mov	r3, r7
 800abe0:	4680      	mov	r8, r0
 800abe2:	4689      	mov	r9, r1
 800abe4:	4620      	mov	r0, r4
 800abe6:	4629      	mov	r1, r5
 800abe8:	f7f5 fd06 	bl	80005f8 <__aeabi_dmul>
 800abec:	460b      	mov	r3, r1
 800abee:	4604      	mov	r4, r0
 800abf0:	460d      	mov	r5, r1
 800abf2:	4602      	mov	r2, r0
 800abf4:	4649      	mov	r1, r9
 800abf6:	4640      	mov	r0, r8
 800abf8:	f7f5 fb48 	bl	800028c <__adddf3>
 800abfc:	4b19      	ldr	r3, [pc, #100]	; (800ac64 <__ieee754_pow+0x3fc>)
 800abfe:	4299      	cmp	r1, r3
 800ac00:	ec45 4b19 	vmov	d9, r4, r5
 800ac04:	4606      	mov	r6, r0
 800ac06:	460f      	mov	r7, r1
 800ac08:	468b      	mov	fp, r1
 800ac0a:	f340 82f1 	ble.w	800b1f0 <__ieee754_pow+0x988>
 800ac0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ac12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ac16:	4303      	orrs	r3, r0
 800ac18:	f000 81e4 	beq.w	800afe4 <__ieee754_pow+0x77c>
 800ac1c:	ec51 0b18 	vmov	r0, r1, d8
 800ac20:	2200      	movs	r2, #0
 800ac22:	2300      	movs	r3, #0
 800ac24:	f7f5 ff5a 	bl	8000adc <__aeabi_dcmplt>
 800ac28:	3800      	subs	r0, #0
 800ac2a:	bf18      	it	ne
 800ac2c:	2001      	movne	r0, #1
 800ac2e:	e72b      	b.n	800aa88 <__ieee754_pow+0x220>
 800ac30:	60000000 	.word	0x60000000
 800ac34:	3ff71547 	.word	0x3ff71547
 800ac38:	f85ddf44 	.word	0xf85ddf44
 800ac3c:	3e54ae0b 	.word	0x3e54ae0b
 800ac40:	55555555 	.word	0x55555555
 800ac44:	3fd55555 	.word	0x3fd55555
 800ac48:	652b82fe 	.word	0x652b82fe
 800ac4c:	3ff71547 	.word	0x3ff71547
 800ac50:	00000000 	.word	0x00000000
 800ac54:	bff00000 	.word	0xbff00000
 800ac58:	3ff00000 	.word	0x3ff00000
 800ac5c:	3fd00000 	.word	0x3fd00000
 800ac60:	3fe00000 	.word	0x3fe00000
 800ac64:	408fffff 	.word	0x408fffff
 800ac68:	4bd5      	ldr	r3, [pc, #852]	; (800afc0 <__ieee754_pow+0x758>)
 800ac6a:	402b      	ands	r3, r5
 800ac6c:	2200      	movs	r2, #0
 800ac6e:	b92b      	cbnz	r3, 800ac7c <__ieee754_pow+0x414>
 800ac70:	4bd4      	ldr	r3, [pc, #848]	; (800afc4 <__ieee754_pow+0x75c>)
 800ac72:	f7f5 fcc1 	bl	80005f8 <__aeabi_dmul>
 800ac76:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ac7a:	460c      	mov	r4, r1
 800ac7c:	1523      	asrs	r3, r4, #20
 800ac7e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ac82:	4413      	add	r3, r2
 800ac84:	9305      	str	r3, [sp, #20]
 800ac86:	4bd0      	ldr	r3, [pc, #832]	; (800afc8 <__ieee754_pow+0x760>)
 800ac88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ac8c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ac90:	429c      	cmp	r4, r3
 800ac92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ac96:	dd08      	ble.n	800acaa <__ieee754_pow+0x442>
 800ac98:	4bcc      	ldr	r3, [pc, #816]	; (800afcc <__ieee754_pow+0x764>)
 800ac9a:	429c      	cmp	r4, r3
 800ac9c:	f340 8162 	ble.w	800af64 <__ieee754_pow+0x6fc>
 800aca0:	9b05      	ldr	r3, [sp, #20]
 800aca2:	3301      	adds	r3, #1
 800aca4:	9305      	str	r3, [sp, #20]
 800aca6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800acaa:	2400      	movs	r4, #0
 800acac:	00e3      	lsls	r3, r4, #3
 800acae:	9307      	str	r3, [sp, #28]
 800acb0:	4bc7      	ldr	r3, [pc, #796]	; (800afd0 <__ieee754_pow+0x768>)
 800acb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800acb6:	ed93 7b00 	vldr	d7, [r3]
 800acba:	4629      	mov	r1, r5
 800acbc:	ec53 2b17 	vmov	r2, r3, d7
 800acc0:	eeb0 9a47 	vmov.f32	s18, s14
 800acc4:	eef0 9a67 	vmov.f32	s19, s15
 800acc8:	4682      	mov	sl, r0
 800acca:	f7f5 fadd 	bl	8000288 <__aeabi_dsub>
 800acce:	4652      	mov	r2, sl
 800acd0:	4606      	mov	r6, r0
 800acd2:	460f      	mov	r7, r1
 800acd4:	462b      	mov	r3, r5
 800acd6:	ec51 0b19 	vmov	r0, r1, d9
 800acda:	f7f5 fad7 	bl	800028c <__adddf3>
 800acde:	4602      	mov	r2, r0
 800ace0:	460b      	mov	r3, r1
 800ace2:	2000      	movs	r0, #0
 800ace4:	49bb      	ldr	r1, [pc, #748]	; (800afd4 <__ieee754_pow+0x76c>)
 800ace6:	f7f5 fdb1 	bl	800084c <__aeabi_ddiv>
 800acea:	ec41 0b1a 	vmov	d10, r0, r1
 800acee:	4602      	mov	r2, r0
 800acf0:	460b      	mov	r3, r1
 800acf2:	4630      	mov	r0, r6
 800acf4:	4639      	mov	r1, r7
 800acf6:	f7f5 fc7f 	bl	80005f8 <__aeabi_dmul>
 800acfa:	2300      	movs	r3, #0
 800acfc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad00:	9302      	str	r3, [sp, #8]
 800ad02:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ad06:	46ab      	mov	fp, r5
 800ad08:	106d      	asrs	r5, r5, #1
 800ad0a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ad0e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ad12:	ec41 0b18 	vmov	d8, r0, r1
 800ad16:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ad1a:	2200      	movs	r2, #0
 800ad1c:	4640      	mov	r0, r8
 800ad1e:	4649      	mov	r1, r9
 800ad20:	4614      	mov	r4, r2
 800ad22:	461d      	mov	r5, r3
 800ad24:	f7f5 fc68 	bl	80005f8 <__aeabi_dmul>
 800ad28:	4602      	mov	r2, r0
 800ad2a:	460b      	mov	r3, r1
 800ad2c:	4630      	mov	r0, r6
 800ad2e:	4639      	mov	r1, r7
 800ad30:	f7f5 faaa 	bl	8000288 <__aeabi_dsub>
 800ad34:	ec53 2b19 	vmov	r2, r3, d9
 800ad38:	4606      	mov	r6, r0
 800ad3a:	460f      	mov	r7, r1
 800ad3c:	4620      	mov	r0, r4
 800ad3e:	4629      	mov	r1, r5
 800ad40:	f7f5 faa2 	bl	8000288 <__aeabi_dsub>
 800ad44:	4602      	mov	r2, r0
 800ad46:	460b      	mov	r3, r1
 800ad48:	4650      	mov	r0, sl
 800ad4a:	4659      	mov	r1, fp
 800ad4c:	f7f5 fa9c 	bl	8000288 <__aeabi_dsub>
 800ad50:	4642      	mov	r2, r8
 800ad52:	464b      	mov	r3, r9
 800ad54:	f7f5 fc50 	bl	80005f8 <__aeabi_dmul>
 800ad58:	4602      	mov	r2, r0
 800ad5a:	460b      	mov	r3, r1
 800ad5c:	4630      	mov	r0, r6
 800ad5e:	4639      	mov	r1, r7
 800ad60:	f7f5 fa92 	bl	8000288 <__aeabi_dsub>
 800ad64:	ec53 2b1a 	vmov	r2, r3, d10
 800ad68:	f7f5 fc46 	bl	80005f8 <__aeabi_dmul>
 800ad6c:	ec53 2b18 	vmov	r2, r3, d8
 800ad70:	ec41 0b19 	vmov	d9, r0, r1
 800ad74:	ec51 0b18 	vmov	r0, r1, d8
 800ad78:	f7f5 fc3e 	bl	80005f8 <__aeabi_dmul>
 800ad7c:	a37c      	add	r3, pc, #496	; (adr r3, 800af70 <__ieee754_pow+0x708>)
 800ad7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad82:	4604      	mov	r4, r0
 800ad84:	460d      	mov	r5, r1
 800ad86:	f7f5 fc37 	bl	80005f8 <__aeabi_dmul>
 800ad8a:	a37b      	add	r3, pc, #492	; (adr r3, 800af78 <__ieee754_pow+0x710>)
 800ad8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad90:	f7f5 fa7c 	bl	800028c <__adddf3>
 800ad94:	4622      	mov	r2, r4
 800ad96:	462b      	mov	r3, r5
 800ad98:	f7f5 fc2e 	bl	80005f8 <__aeabi_dmul>
 800ad9c:	a378      	add	r3, pc, #480	; (adr r3, 800af80 <__ieee754_pow+0x718>)
 800ad9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ada2:	f7f5 fa73 	bl	800028c <__adddf3>
 800ada6:	4622      	mov	r2, r4
 800ada8:	462b      	mov	r3, r5
 800adaa:	f7f5 fc25 	bl	80005f8 <__aeabi_dmul>
 800adae:	a376      	add	r3, pc, #472	; (adr r3, 800af88 <__ieee754_pow+0x720>)
 800adb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adb4:	f7f5 fa6a 	bl	800028c <__adddf3>
 800adb8:	4622      	mov	r2, r4
 800adba:	462b      	mov	r3, r5
 800adbc:	f7f5 fc1c 	bl	80005f8 <__aeabi_dmul>
 800adc0:	a373      	add	r3, pc, #460	; (adr r3, 800af90 <__ieee754_pow+0x728>)
 800adc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adc6:	f7f5 fa61 	bl	800028c <__adddf3>
 800adca:	4622      	mov	r2, r4
 800adcc:	462b      	mov	r3, r5
 800adce:	f7f5 fc13 	bl	80005f8 <__aeabi_dmul>
 800add2:	a371      	add	r3, pc, #452	; (adr r3, 800af98 <__ieee754_pow+0x730>)
 800add4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800add8:	f7f5 fa58 	bl	800028c <__adddf3>
 800addc:	4622      	mov	r2, r4
 800adde:	4606      	mov	r6, r0
 800ade0:	460f      	mov	r7, r1
 800ade2:	462b      	mov	r3, r5
 800ade4:	4620      	mov	r0, r4
 800ade6:	4629      	mov	r1, r5
 800ade8:	f7f5 fc06 	bl	80005f8 <__aeabi_dmul>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4630      	mov	r0, r6
 800adf2:	4639      	mov	r1, r7
 800adf4:	f7f5 fc00 	bl	80005f8 <__aeabi_dmul>
 800adf8:	4642      	mov	r2, r8
 800adfa:	4604      	mov	r4, r0
 800adfc:	460d      	mov	r5, r1
 800adfe:	464b      	mov	r3, r9
 800ae00:	ec51 0b18 	vmov	r0, r1, d8
 800ae04:	f7f5 fa42 	bl	800028c <__adddf3>
 800ae08:	ec53 2b19 	vmov	r2, r3, d9
 800ae0c:	f7f5 fbf4 	bl	80005f8 <__aeabi_dmul>
 800ae10:	4622      	mov	r2, r4
 800ae12:	462b      	mov	r3, r5
 800ae14:	f7f5 fa3a 	bl	800028c <__adddf3>
 800ae18:	4642      	mov	r2, r8
 800ae1a:	4682      	mov	sl, r0
 800ae1c:	468b      	mov	fp, r1
 800ae1e:	464b      	mov	r3, r9
 800ae20:	4640      	mov	r0, r8
 800ae22:	4649      	mov	r1, r9
 800ae24:	f7f5 fbe8 	bl	80005f8 <__aeabi_dmul>
 800ae28:	4b6b      	ldr	r3, [pc, #428]	; (800afd8 <__ieee754_pow+0x770>)
 800ae2a:	2200      	movs	r2, #0
 800ae2c:	4606      	mov	r6, r0
 800ae2e:	460f      	mov	r7, r1
 800ae30:	f7f5 fa2c 	bl	800028c <__adddf3>
 800ae34:	4652      	mov	r2, sl
 800ae36:	465b      	mov	r3, fp
 800ae38:	f7f5 fa28 	bl	800028c <__adddf3>
 800ae3c:	2000      	movs	r0, #0
 800ae3e:	4604      	mov	r4, r0
 800ae40:	460d      	mov	r5, r1
 800ae42:	4602      	mov	r2, r0
 800ae44:	460b      	mov	r3, r1
 800ae46:	4640      	mov	r0, r8
 800ae48:	4649      	mov	r1, r9
 800ae4a:	f7f5 fbd5 	bl	80005f8 <__aeabi_dmul>
 800ae4e:	4b62      	ldr	r3, [pc, #392]	; (800afd8 <__ieee754_pow+0x770>)
 800ae50:	4680      	mov	r8, r0
 800ae52:	4689      	mov	r9, r1
 800ae54:	2200      	movs	r2, #0
 800ae56:	4620      	mov	r0, r4
 800ae58:	4629      	mov	r1, r5
 800ae5a:	f7f5 fa15 	bl	8000288 <__aeabi_dsub>
 800ae5e:	4632      	mov	r2, r6
 800ae60:	463b      	mov	r3, r7
 800ae62:	f7f5 fa11 	bl	8000288 <__aeabi_dsub>
 800ae66:	4602      	mov	r2, r0
 800ae68:	460b      	mov	r3, r1
 800ae6a:	4650      	mov	r0, sl
 800ae6c:	4659      	mov	r1, fp
 800ae6e:	f7f5 fa0b 	bl	8000288 <__aeabi_dsub>
 800ae72:	ec53 2b18 	vmov	r2, r3, d8
 800ae76:	f7f5 fbbf 	bl	80005f8 <__aeabi_dmul>
 800ae7a:	4622      	mov	r2, r4
 800ae7c:	4606      	mov	r6, r0
 800ae7e:	460f      	mov	r7, r1
 800ae80:	462b      	mov	r3, r5
 800ae82:	ec51 0b19 	vmov	r0, r1, d9
 800ae86:	f7f5 fbb7 	bl	80005f8 <__aeabi_dmul>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	460b      	mov	r3, r1
 800ae8e:	4630      	mov	r0, r6
 800ae90:	4639      	mov	r1, r7
 800ae92:	f7f5 f9fb 	bl	800028c <__adddf3>
 800ae96:	4606      	mov	r6, r0
 800ae98:	460f      	mov	r7, r1
 800ae9a:	4602      	mov	r2, r0
 800ae9c:	460b      	mov	r3, r1
 800ae9e:	4640      	mov	r0, r8
 800aea0:	4649      	mov	r1, r9
 800aea2:	f7f5 f9f3 	bl	800028c <__adddf3>
 800aea6:	a33e      	add	r3, pc, #248	; (adr r3, 800afa0 <__ieee754_pow+0x738>)
 800aea8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aeac:	2000      	movs	r0, #0
 800aeae:	4604      	mov	r4, r0
 800aeb0:	460d      	mov	r5, r1
 800aeb2:	f7f5 fba1 	bl	80005f8 <__aeabi_dmul>
 800aeb6:	4642      	mov	r2, r8
 800aeb8:	ec41 0b18 	vmov	d8, r0, r1
 800aebc:	464b      	mov	r3, r9
 800aebe:	4620      	mov	r0, r4
 800aec0:	4629      	mov	r1, r5
 800aec2:	f7f5 f9e1 	bl	8000288 <__aeabi_dsub>
 800aec6:	4602      	mov	r2, r0
 800aec8:	460b      	mov	r3, r1
 800aeca:	4630      	mov	r0, r6
 800aecc:	4639      	mov	r1, r7
 800aece:	f7f5 f9db 	bl	8000288 <__aeabi_dsub>
 800aed2:	a335      	add	r3, pc, #212	; (adr r3, 800afa8 <__ieee754_pow+0x740>)
 800aed4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed8:	f7f5 fb8e 	bl	80005f8 <__aeabi_dmul>
 800aedc:	a334      	add	r3, pc, #208	; (adr r3, 800afb0 <__ieee754_pow+0x748>)
 800aede:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee2:	4606      	mov	r6, r0
 800aee4:	460f      	mov	r7, r1
 800aee6:	4620      	mov	r0, r4
 800aee8:	4629      	mov	r1, r5
 800aeea:	f7f5 fb85 	bl	80005f8 <__aeabi_dmul>
 800aeee:	4602      	mov	r2, r0
 800aef0:	460b      	mov	r3, r1
 800aef2:	4630      	mov	r0, r6
 800aef4:	4639      	mov	r1, r7
 800aef6:	f7f5 f9c9 	bl	800028c <__adddf3>
 800aefa:	9a07      	ldr	r2, [sp, #28]
 800aefc:	4b37      	ldr	r3, [pc, #220]	; (800afdc <__ieee754_pow+0x774>)
 800aefe:	4413      	add	r3, r2
 800af00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af04:	f7f5 f9c2 	bl	800028c <__adddf3>
 800af08:	4682      	mov	sl, r0
 800af0a:	9805      	ldr	r0, [sp, #20]
 800af0c:	468b      	mov	fp, r1
 800af0e:	f7f5 fb09 	bl	8000524 <__aeabi_i2d>
 800af12:	9a07      	ldr	r2, [sp, #28]
 800af14:	4b32      	ldr	r3, [pc, #200]	; (800afe0 <__ieee754_pow+0x778>)
 800af16:	4413      	add	r3, r2
 800af18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800af1c:	4606      	mov	r6, r0
 800af1e:	460f      	mov	r7, r1
 800af20:	4652      	mov	r2, sl
 800af22:	465b      	mov	r3, fp
 800af24:	ec51 0b18 	vmov	r0, r1, d8
 800af28:	f7f5 f9b0 	bl	800028c <__adddf3>
 800af2c:	4642      	mov	r2, r8
 800af2e:	464b      	mov	r3, r9
 800af30:	f7f5 f9ac 	bl	800028c <__adddf3>
 800af34:	4632      	mov	r2, r6
 800af36:	463b      	mov	r3, r7
 800af38:	f7f5 f9a8 	bl	800028c <__adddf3>
 800af3c:	2000      	movs	r0, #0
 800af3e:	4632      	mov	r2, r6
 800af40:	463b      	mov	r3, r7
 800af42:	4604      	mov	r4, r0
 800af44:	460d      	mov	r5, r1
 800af46:	f7f5 f99f 	bl	8000288 <__aeabi_dsub>
 800af4a:	4642      	mov	r2, r8
 800af4c:	464b      	mov	r3, r9
 800af4e:	f7f5 f99b 	bl	8000288 <__aeabi_dsub>
 800af52:	ec53 2b18 	vmov	r2, r3, d8
 800af56:	f7f5 f997 	bl	8000288 <__aeabi_dsub>
 800af5a:	4602      	mov	r2, r0
 800af5c:	460b      	mov	r3, r1
 800af5e:	4650      	mov	r0, sl
 800af60:	4659      	mov	r1, fp
 800af62:	e610      	b.n	800ab86 <__ieee754_pow+0x31e>
 800af64:	2401      	movs	r4, #1
 800af66:	e6a1      	b.n	800acac <__ieee754_pow+0x444>
 800af68:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800afb8 <__ieee754_pow+0x750>
 800af6c:	e617      	b.n	800ab9e <__ieee754_pow+0x336>
 800af6e:	bf00      	nop
 800af70:	4a454eef 	.word	0x4a454eef
 800af74:	3fca7e28 	.word	0x3fca7e28
 800af78:	93c9db65 	.word	0x93c9db65
 800af7c:	3fcd864a 	.word	0x3fcd864a
 800af80:	a91d4101 	.word	0xa91d4101
 800af84:	3fd17460 	.word	0x3fd17460
 800af88:	518f264d 	.word	0x518f264d
 800af8c:	3fd55555 	.word	0x3fd55555
 800af90:	db6fabff 	.word	0xdb6fabff
 800af94:	3fdb6db6 	.word	0x3fdb6db6
 800af98:	33333303 	.word	0x33333303
 800af9c:	3fe33333 	.word	0x3fe33333
 800afa0:	e0000000 	.word	0xe0000000
 800afa4:	3feec709 	.word	0x3feec709
 800afa8:	dc3a03fd 	.word	0xdc3a03fd
 800afac:	3feec709 	.word	0x3feec709
 800afb0:	145b01f5 	.word	0x145b01f5
 800afb4:	be3e2fe0 	.word	0xbe3e2fe0
 800afb8:	00000000 	.word	0x00000000
 800afbc:	3ff00000 	.word	0x3ff00000
 800afc0:	7ff00000 	.word	0x7ff00000
 800afc4:	43400000 	.word	0x43400000
 800afc8:	0003988e 	.word	0x0003988e
 800afcc:	000bb679 	.word	0x000bb679
 800afd0:	0800cb30 	.word	0x0800cb30
 800afd4:	3ff00000 	.word	0x3ff00000
 800afd8:	40080000 	.word	0x40080000
 800afdc:	0800cb50 	.word	0x0800cb50
 800afe0:	0800cb40 	.word	0x0800cb40
 800afe4:	a3b5      	add	r3, pc, #724	; (adr r3, 800b2bc <__ieee754_pow+0xa54>)
 800afe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afea:	4640      	mov	r0, r8
 800afec:	4649      	mov	r1, r9
 800afee:	f7f5 f94d 	bl	800028c <__adddf3>
 800aff2:	4622      	mov	r2, r4
 800aff4:	ec41 0b1a 	vmov	d10, r0, r1
 800aff8:	462b      	mov	r3, r5
 800affa:	4630      	mov	r0, r6
 800affc:	4639      	mov	r1, r7
 800affe:	f7f5 f943 	bl	8000288 <__aeabi_dsub>
 800b002:	4602      	mov	r2, r0
 800b004:	460b      	mov	r3, r1
 800b006:	ec51 0b1a 	vmov	r0, r1, d10
 800b00a:	f7f5 fd85 	bl	8000b18 <__aeabi_dcmpgt>
 800b00e:	2800      	cmp	r0, #0
 800b010:	f47f ae04 	bne.w	800ac1c <__ieee754_pow+0x3b4>
 800b014:	4aa4      	ldr	r2, [pc, #656]	; (800b2a8 <__ieee754_pow+0xa40>)
 800b016:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b01a:	4293      	cmp	r3, r2
 800b01c:	f340 8108 	ble.w	800b230 <__ieee754_pow+0x9c8>
 800b020:	151b      	asrs	r3, r3, #20
 800b022:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800b026:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800b02a:	fa4a f303 	asr.w	r3, sl, r3
 800b02e:	445b      	add	r3, fp
 800b030:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800b034:	4e9d      	ldr	r6, [pc, #628]	; (800b2ac <__ieee754_pow+0xa44>)
 800b036:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800b03a:	4116      	asrs	r6, r2
 800b03c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800b040:	2000      	movs	r0, #0
 800b042:	ea23 0106 	bic.w	r1, r3, r6
 800b046:	f1c2 0214 	rsb	r2, r2, #20
 800b04a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800b04e:	fa4a fa02 	asr.w	sl, sl, r2
 800b052:	f1bb 0f00 	cmp.w	fp, #0
 800b056:	4602      	mov	r2, r0
 800b058:	460b      	mov	r3, r1
 800b05a:	4620      	mov	r0, r4
 800b05c:	4629      	mov	r1, r5
 800b05e:	bfb8      	it	lt
 800b060:	f1ca 0a00 	rsblt	sl, sl, #0
 800b064:	f7f5 f910 	bl	8000288 <__aeabi_dsub>
 800b068:	ec41 0b19 	vmov	d9, r0, r1
 800b06c:	4642      	mov	r2, r8
 800b06e:	464b      	mov	r3, r9
 800b070:	ec51 0b19 	vmov	r0, r1, d9
 800b074:	f7f5 f90a 	bl	800028c <__adddf3>
 800b078:	a37b      	add	r3, pc, #492	; (adr r3, 800b268 <__ieee754_pow+0xa00>)
 800b07a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b07e:	2000      	movs	r0, #0
 800b080:	4604      	mov	r4, r0
 800b082:	460d      	mov	r5, r1
 800b084:	f7f5 fab8 	bl	80005f8 <__aeabi_dmul>
 800b088:	ec53 2b19 	vmov	r2, r3, d9
 800b08c:	4606      	mov	r6, r0
 800b08e:	460f      	mov	r7, r1
 800b090:	4620      	mov	r0, r4
 800b092:	4629      	mov	r1, r5
 800b094:	f7f5 f8f8 	bl	8000288 <__aeabi_dsub>
 800b098:	4602      	mov	r2, r0
 800b09a:	460b      	mov	r3, r1
 800b09c:	4640      	mov	r0, r8
 800b09e:	4649      	mov	r1, r9
 800b0a0:	f7f5 f8f2 	bl	8000288 <__aeabi_dsub>
 800b0a4:	a372      	add	r3, pc, #456	; (adr r3, 800b270 <__ieee754_pow+0xa08>)
 800b0a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0aa:	f7f5 faa5 	bl	80005f8 <__aeabi_dmul>
 800b0ae:	a372      	add	r3, pc, #456	; (adr r3, 800b278 <__ieee754_pow+0xa10>)
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	4680      	mov	r8, r0
 800b0b6:	4689      	mov	r9, r1
 800b0b8:	4620      	mov	r0, r4
 800b0ba:	4629      	mov	r1, r5
 800b0bc:	f7f5 fa9c 	bl	80005f8 <__aeabi_dmul>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	4640      	mov	r0, r8
 800b0c6:	4649      	mov	r1, r9
 800b0c8:	f7f5 f8e0 	bl	800028c <__adddf3>
 800b0cc:	4604      	mov	r4, r0
 800b0ce:	460d      	mov	r5, r1
 800b0d0:	4602      	mov	r2, r0
 800b0d2:	460b      	mov	r3, r1
 800b0d4:	4630      	mov	r0, r6
 800b0d6:	4639      	mov	r1, r7
 800b0d8:	f7f5 f8d8 	bl	800028c <__adddf3>
 800b0dc:	4632      	mov	r2, r6
 800b0de:	463b      	mov	r3, r7
 800b0e0:	4680      	mov	r8, r0
 800b0e2:	4689      	mov	r9, r1
 800b0e4:	f7f5 f8d0 	bl	8000288 <__aeabi_dsub>
 800b0e8:	4602      	mov	r2, r0
 800b0ea:	460b      	mov	r3, r1
 800b0ec:	4620      	mov	r0, r4
 800b0ee:	4629      	mov	r1, r5
 800b0f0:	f7f5 f8ca 	bl	8000288 <__aeabi_dsub>
 800b0f4:	4642      	mov	r2, r8
 800b0f6:	4606      	mov	r6, r0
 800b0f8:	460f      	mov	r7, r1
 800b0fa:	464b      	mov	r3, r9
 800b0fc:	4640      	mov	r0, r8
 800b0fe:	4649      	mov	r1, r9
 800b100:	f7f5 fa7a 	bl	80005f8 <__aeabi_dmul>
 800b104:	a35e      	add	r3, pc, #376	; (adr r3, 800b280 <__ieee754_pow+0xa18>)
 800b106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10a:	4604      	mov	r4, r0
 800b10c:	460d      	mov	r5, r1
 800b10e:	f7f5 fa73 	bl	80005f8 <__aeabi_dmul>
 800b112:	a35d      	add	r3, pc, #372	; (adr r3, 800b288 <__ieee754_pow+0xa20>)
 800b114:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b118:	f7f5 f8b6 	bl	8000288 <__aeabi_dsub>
 800b11c:	4622      	mov	r2, r4
 800b11e:	462b      	mov	r3, r5
 800b120:	f7f5 fa6a 	bl	80005f8 <__aeabi_dmul>
 800b124:	a35a      	add	r3, pc, #360	; (adr r3, 800b290 <__ieee754_pow+0xa28>)
 800b126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12a:	f7f5 f8af 	bl	800028c <__adddf3>
 800b12e:	4622      	mov	r2, r4
 800b130:	462b      	mov	r3, r5
 800b132:	f7f5 fa61 	bl	80005f8 <__aeabi_dmul>
 800b136:	a358      	add	r3, pc, #352	; (adr r3, 800b298 <__ieee754_pow+0xa30>)
 800b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13c:	f7f5 f8a4 	bl	8000288 <__aeabi_dsub>
 800b140:	4622      	mov	r2, r4
 800b142:	462b      	mov	r3, r5
 800b144:	f7f5 fa58 	bl	80005f8 <__aeabi_dmul>
 800b148:	a355      	add	r3, pc, #340	; (adr r3, 800b2a0 <__ieee754_pow+0xa38>)
 800b14a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b14e:	f7f5 f89d 	bl	800028c <__adddf3>
 800b152:	4622      	mov	r2, r4
 800b154:	462b      	mov	r3, r5
 800b156:	f7f5 fa4f 	bl	80005f8 <__aeabi_dmul>
 800b15a:	4602      	mov	r2, r0
 800b15c:	460b      	mov	r3, r1
 800b15e:	4640      	mov	r0, r8
 800b160:	4649      	mov	r1, r9
 800b162:	f7f5 f891 	bl	8000288 <__aeabi_dsub>
 800b166:	4604      	mov	r4, r0
 800b168:	460d      	mov	r5, r1
 800b16a:	4602      	mov	r2, r0
 800b16c:	460b      	mov	r3, r1
 800b16e:	4640      	mov	r0, r8
 800b170:	4649      	mov	r1, r9
 800b172:	f7f5 fa41 	bl	80005f8 <__aeabi_dmul>
 800b176:	2200      	movs	r2, #0
 800b178:	ec41 0b19 	vmov	d9, r0, r1
 800b17c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b180:	4620      	mov	r0, r4
 800b182:	4629      	mov	r1, r5
 800b184:	f7f5 f880 	bl	8000288 <__aeabi_dsub>
 800b188:	4602      	mov	r2, r0
 800b18a:	460b      	mov	r3, r1
 800b18c:	ec51 0b19 	vmov	r0, r1, d9
 800b190:	f7f5 fb5c 	bl	800084c <__aeabi_ddiv>
 800b194:	4632      	mov	r2, r6
 800b196:	4604      	mov	r4, r0
 800b198:	460d      	mov	r5, r1
 800b19a:	463b      	mov	r3, r7
 800b19c:	4640      	mov	r0, r8
 800b19e:	4649      	mov	r1, r9
 800b1a0:	f7f5 fa2a 	bl	80005f8 <__aeabi_dmul>
 800b1a4:	4632      	mov	r2, r6
 800b1a6:	463b      	mov	r3, r7
 800b1a8:	f7f5 f870 	bl	800028c <__adddf3>
 800b1ac:	4602      	mov	r2, r0
 800b1ae:	460b      	mov	r3, r1
 800b1b0:	4620      	mov	r0, r4
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	f7f5 f868 	bl	8000288 <__aeabi_dsub>
 800b1b8:	4642      	mov	r2, r8
 800b1ba:	464b      	mov	r3, r9
 800b1bc:	f7f5 f864 	bl	8000288 <__aeabi_dsub>
 800b1c0:	460b      	mov	r3, r1
 800b1c2:	4602      	mov	r2, r0
 800b1c4:	493a      	ldr	r1, [pc, #232]	; (800b2b0 <__ieee754_pow+0xa48>)
 800b1c6:	2000      	movs	r0, #0
 800b1c8:	f7f5 f85e 	bl	8000288 <__aeabi_dsub>
 800b1cc:	ec41 0b10 	vmov	d0, r0, r1
 800b1d0:	ee10 3a90 	vmov	r3, s1
 800b1d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800b1d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800b1dc:	da2b      	bge.n	800b236 <__ieee754_pow+0x9ce>
 800b1de:	4650      	mov	r0, sl
 800b1e0:	f001 f8ce 	bl	800c380 <scalbn>
 800b1e4:	ec51 0b10 	vmov	r0, r1, d0
 800b1e8:	ec53 2b18 	vmov	r2, r3, d8
 800b1ec:	f7ff bbed 	b.w	800a9ca <__ieee754_pow+0x162>
 800b1f0:	4b30      	ldr	r3, [pc, #192]	; (800b2b4 <__ieee754_pow+0xa4c>)
 800b1f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800b1f6:	429e      	cmp	r6, r3
 800b1f8:	f77f af0c 	ble.w	800b014 <__ieee754_pow+0x7ac>
 800b1fc:	4b2e      	ldr	r3, [pc, #184]	; (800b2b8 <__ieee754_pow+0xa50>)
 800b1fe:	440b      	add	r3, r1
 800b200:	4303      	orrs	r3, r0
 800b202:	d009      	beq.n	800b218 <__ieee754_pow+0x9b0>
 800b204:	ec51 0b18 	vmov	r0, r1, d8
 800b208:	2200      	movs	r2, #0
 800b20a:	2300      	movs	r3, #0
 800b20c:	f7f5 fc66 	bl	8000adc <__aeabi_dcmplt>
 800b210:	3800      	subs	r0, #0
 800b212:	bf18      	it	ne
 800b214:	2001      	movne	r0, #1
 800b216:	e447      	b.n	800aaa8 <__ieee754_pow+0x240>
 800b218:	4622      	mov	r2, r4
 800b21a:	462b      	mov	r3, r5
 800b21c:	f7f5 f834 	bl	8000288 <__aeabi_dsub>
 800b220:	4642      	mov	r2, r8
 800b222:	464b      	mov	r3, r9
 800b224:	f7f5 fc6e 	bl	8000b04 <__aeabi_dcmpge>
 800b228:	2800      	cmp	r0, #0
 800b22a:	f43f aef3 	beq.w	800b014 <__ieee754_pow+0x7ac>
 800b22e:	e7e9      	b.n	800b204 <__ieee754_pow+0x99c>
 800b230:	f04f 0a00 	mov.w	sl, #0
 800b234:	e71a      	b.n	800b06c <__ieee754_pow+0x804>
 800b236:	ec51 0b10 	vmov	r0, r1, d0
 800b23a:	4619      	mov	r1, r3
 800b23c:	e7d4      	b.n	800b1e8 <__ieee754_pow+0x980>
 800b23e:	491c      	ldr	r1, [pc, #112]	; (800b2b0 <__ieee754_pow+0xa48>)
 800b240:	2000      	movs	r0, #0
 800b242:	f7ff bb30 	b.w	800a8a6 <__ieee754_pow+0x3e>
 800b246:	2000      	movs	r0, #0
 800b248:	2100      	movs	r1, #0
 800b24a:	f7ff bb2c 	b.w	800a8a6 <__ieee754_pow+0x3e>
 800b24e:	4630      	mov	r0, r6
 800b250:	4639      	mov	r1, r7
 800b252:	f7ff bb28 	b.w	800a8a6 <__ieee754_pow+0x3e>
 800b256:	9204      	str	r2, [sp, #16]
 800b258:	f7ff bb7a 	b.w	800a950 <__ieee754_pow+0xe8>
 800b25c:	2300      	movs	r3, #0
 800b25e:	f7ff bb64 	b.w	800a92a <__ieee754_pow+0xc2>
 800b262:	bf00      	nop
 800b264:	f3af 8000 	nop.w
 800b268:	00000000 	.word	0x00000000
 800b26c:	3fe62e43 	.word	0x3fe62e43
 800b270:	fefa39ef 	.word	0xfefa39ef
 800b274:	3fe62e42 	.word	0x3fe62e42
 800b278:	0ca86c39 	.word	0x0ca86c39
 800b27c:	be205c61 	.word	0xbe205c61
 800b280:	72bea4d0 	.word	0x72bea4d0
 800b284:	3e663769 	.word	0x3e663769
 800b288:	c5d26bf1 	.word	0xc5d26bf1
 800b28c:	3ebbbd41 	.word	0x3ebbbd41
 800b290:	af25de2c 	.word	0xaf25de2c
 800b294:	3f11566a 	.word	0x3f11566a
 800b298:	16bebd93 	.word	0x16bebd93
 800b29c:	3f66c16c 	.word	0x3f66c16c
 800b2a0:	5555553e 	.word	0x5555553e
 800b2a4:	3fc55555 	.word	0x3fc55555
 800b2a8:	3fe00000 	.word	0x3fe00000
 800b2ac:	000fffff 	.word	0x000fffff
 800b2b0:	3ff00000 	.word	0x3ff00000
 800b2b4:	4090cbff 	.word	0x4090cbff
 800b2b8:	3f6f3400 	.word	0x3f6f3400
 800b2bc:	652b82fe 	.word	0x652b82fe
 800b2c0:	3c971547 	.word	0x3c971547
 800b2c4:	00000000 	.word	0x00000000

0800b2c8 <__ieee754_rem_pio2>:
 800b2c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b2cc:	ed2d 8b02 	vpush	{d8}
 800b2d0:	ec55 4b10 	vmov	r4, r5, d0
 800b2d4:	4bca      	ldr	r3, [pc, #808]	; (800b600 <__ieee754_rem_pio2+0x338>)
 800b2d6:	b08b      	sub	sp, #44	; 0x2c
 800b2d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800b2dc:	4598      	cmp	r8, r3
 800b2de:	4682      	mov	sl, r0
 800b2e0:	9502      	str	r5, [sp, #8]
 800b2e2:	dc08      	bgt.n	800b2f6 <__ieee754_rem_pio2+0x2e>
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	2300      	movs	r3, #0
 800b2e8:	ed80 0b00 	vstr	d0, [r0]
 800b2ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800b2f0:	f04f 0b00 	mov.w	fp, #0
 800b2f4:	e028      	b.n	800b348 <__ieee754_rem_pio2+0x80>
 800b2f6:	4bc3      	ldr	r3, [pc, #780]	; (800b604 <__ieee754_rem_pio2+0x33c>)
 800b2f8:	4598      	cmp	r8, r3
 800b2fa:	dc78      	bgt.n	800b3ee <__ieee754_rem_pio2+0x126>
 800b2fc:	9b02      	ldr	r3, [sp, #8]
 800b2fe:	4ec2      	ldr	r6, [pc, #776]	; (800b608 <__ieee754_rem_pio2+0x340>)
 800b300:	2b00      	cmp	r3, #0
 800b302:	ee10 0a10 	vmov	r0, s0
 800b306:	a3b0      	add	r3, pc, #704	; (adr r3, 800b5c8 <__ieee754_rem_pio2+0x300>)
 800b308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b30c:	4629      	mov	r1, r5
 800b30e:	dd39      	ble.n	800b384 <__ieee754_rem_pio2+0xbc>
 800b310:	f7f4 ffba 	bl	8000288 <__aeabi_dsub>
 800b314:	45b0      	cmp	r8, r6
 800b316:	4604      	mov	r4, r0
 800b318:	460d      	mov	r5, r1
 800b31a:	d01b      	beq.n	800b354 <__ieee754_rem_pio2+0x8c>
 800b31c:	a3ac      	add	r3, pc, #688	; (adr r3, 800b5d0 <__ieee754_rem_pio2+0x308>)
 800b31e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b322:	f7f4 ffb1 	bl	8000288 <__aeabi_dsub>
 800b326:	4602      	mov	r2, r0
 800b328:	460b      	mov	r3, r1
 800b32a:	e9ca 2300 	strd	r2, r3, [sl]
 800b32e:	4620      	mov	r0, r4
 800b330:	4629      	mov	r1, r5
 800b332:	f7f4 ffa9 	bl	8000288 <__aeabi_dsub>
 800b336:	a3a6      	add	r3, pc, #664	; (adr r3, 800b5d0 <__ieee754_rem_pio2+0x308>)
 800b338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b33c:	f7f4 ffa4 	bl	8000288 <__aeabi_dsub>
 800b340:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b344:	f04f 0b01 	mov.w	fp, #1
 800b348:	4658      	mov	r0, fp
 800b34a:	b00b      	add	sp, #44	; 0x2c
 800b34c:	ecbd 8b02 	vpop	{d8}
 800b350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b354:	a3a0      	add	r3, pc, #640	; (adr r3, 800b5d8 <__ieee754_rem_pio2+0x310>)
 800b356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b35a:	f7f4 ff95 	bl	8000288 <__aeabi_dsub>
 800b35e:	a3a0      	add	r3, pc, #640	; (adr r3, 800b5e0 <__ieee754_rem_pio2+0x318>)
 800b360:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b364:	4604      	mov	r4, r0
 800b366:	460d      	mov	r5, r1
 800b368:	f7f4 ff8e 	bl	8000288 <__aeabi_dsub>
 800b36c:	4602      	mov	r2, r0
 800b36e:	460b      	mov	r3, r1
 800b370:	e9ca 2300 	strd	r2, r3, [sl]
 800b374:	4620      	mov	r0, r4
 800b376:	4629      	mov	r1, r5
 800b378:	f7f4 ff86 	bl	8000288 <__aeabi_dsub>
 800b37c:	a398      	add	r3, pc, #608	; (adr r3, 800b5e0 <__ieee754_rem_pio2+0x318>)
 800b37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b382:	e7db      	b.n	800b33c <__ieee754_rem_pio2+0x74>
 800b384:	f7f4 ff82 	bl	800028c <__adddf3>
 800b388:	45b0      	cmp	r8, r6
 800b38a:	4604      	mov	r4, r0
 800b38c:	460d      	mov	r5, r1
 800b38e:	d016      	beq.n	800b3be <__ieee754_rem_pio2+0xf6>
 800b390:	a38f      	add	r3, pc, #572	; (adr r3, 800b5d0 <__ieee754_rem_pio2+0x308>)
 800b392:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b396:	f7f4 ff79 	bl	800028c <__adddf3>
 800b39a:	4602      	mov	r2, r0
 800b39c:	460b      	mov	r3, r1
 800b39e:	e9ca 2300 	strd	r2, r3, [sl]
 800b3a2:	4620      	mov	r0, r4
 800b3a4:	4629      	mov	r1, r5
 800b3a6:	f7f4 ff6f 	bl	8000288 <__aeabi_dsub>
 800b3aa:	a389      	add	r3, pc, #548	; (adr r3, 800b5d0 <__ieee754_rem_pio2+0x308>)
 800b3ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3b0:	f7f4 ff6c 	bl	800028c <__adddf3>
 800b3b4:	f04f 3bff 	mov.w	fp, #4294967295
 800b3b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b3bc:	e7c4      	b.n	800b348 <__ieee754_rem_pio2+0x80>
 800b3be:	a386      	add	r3, pc, #536	; (adr r3, 800b5d8 <__ieee754_rem_pio2+0x310>)
 800b3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3c4:	f7f4 ff62 	bl	800028c <__adddf3>
 800b3c8:	a385      	add	r3, pc, #532	; (adr r3, 800b5e0 <__ieee754_rem_pio2+0x318>)
 800b3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ce:	4604      	mov	r4, r0
 800b3d0:	460d      	mov	r5, r1
 800b3d2:	f7f4 ff5b 	bl	800028c <__adddf3>
 800b3d6:	4602      	mov	r2, r0
 800b3d8:	460b      	mov	r3, r1
 800b3da:	e9ca 2300 	strd	r2, r3, [sl]
 800b3de:	4620      	mov	r0, r4
 800b3e0:	4629      	mov	r1, r5
 800b3e2:	f7f4 ff51 	bl	8000288 <__aeabi_dsub>
 800b3e6:	a37e      	add	r3, pc, #504	; (adr r3, 800b5e0 <__ieee754_rem_pio2+0x318>)
 800b3e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b3ec:	e7e0      	b.n	800b3b0 <__ieee754_rem_pio2+0xe8>
 800b3ee:	4b87      	ldr	r3, [pc, #540]	; (800b60c <__ieee754_rem_pio2+0x344>)
 800b3f0:	4598      	cmp	r8, r3
 800b3f2:	f300 80d9 	bgt.w	800b5a8 <__ieee754_rem_pio2+0x2e0>
 800b3f6:	f000 ff2d 	bl	800c254 <fabs>
 800b3fa:	ec55 4b10 	vmov	r4, r5, d0
 800b3fe:	ee10 0a10 	vmov	r0, s0
 800b402:	a379      	add	r3, pc, #484	; (adr r3, 800b5e8 <__ieee754_rem_pio2+0x320>)
 800b404:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b408:	4629      	mov	r1, r5
 800b40a:	f7f5 f8f5 	bl	80005f8 <__aeabi_dmul>
 800b40e:	4b80      	ldr	r3, [pc, #512]	; (800b610 <__ieee754_rem_pio2+0x348>)
 800b410:	2200      	movs	r2, #0
 800b412:	f7f4 ff3b 	bl	800028c <__adddf3>
 800b416:	f7f5 fb9f 	bl	8000b58 <__aeabi_d2iz>
 800b41a:	4683      	mov	fp, r0
 800b41c:	f7f5 f882 	bl	8000524 <__aeabi_i2d>
 800b420:	4602      	mov	r2, r0
 800b422:	460b      	mov	r3, r1
 800b424:	ec43 2b18 	vmov	d8, r2, r3
 800b428:	a367      	add	r3, pc, #412	; (adr r3, 800b5c8 <__ieee754_rem_pio2+0x300>)
 800b42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b42e:	f7f5 f8e3 	bl	80005f8 <__aeabi_dmul>
 800b432:	4602      	mov	r2, r0
 800b434:	460b      	mov	r3, r1
 800b436:	4620      	mov	r0, r4
 800b438:	4629      	mov	r1, r5
 800b43a:	f7f4 ff25 	bl	8000288 <__aeabi_dsub>
 800b43e:	a364      	add	r3, pc, #400	; (adr r3, 800b5d0 <__ieee754_rem_pio2+0x308>)
 800b440:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b444:	4606      	mov	r6, r0
 800b446:	460f      	mov	r7, r1
 800b448:	ec51 0b18 	vmov	r0, r1, d8
 800b44c:	f7f5 f8d4 	bl	80005f8 <__aeabi_dmul>
 800b450:	f1bb 0f1f 	cmp.w	fp, #31
 800b454:	4604      	mov	r4, r0
 800b456:	460d      	mov	r5, r1
 800b458:	dc0d      	bgt.n	800b476 <__ieee754_rem_pio2+0x1ae>
 800b45a:	4b6e      	ldr	r3, [pc, #440]	; (800b614 <__ieee754_rem_pio2+0x34c>)
 800b45c:	f10b 32ff 	add.w	r2, fp, #4294967295
 800b460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800b464:	4543      	cmp	r3, r8
 800b466:	d006      	beq.n	800b476 <__ieee754_rem_pio2+0x1ae>
 800b468:	4622      	mov	r2, r4
 800b46a:	462b      	mov	r3, r5
 800b46c:	4630      	mov	r0, r6
 800b46e:	4639      	mov	r1, r7
 800b470:	f7f4 ff0a 	bl	8000288 <__aeabi_dsub>
 800b474:	e00f      	b.n	800b496 <__ieee754_rem_pio2+0x1ce>
 800b476:	462b      	mov	r3, r5
 800b478:	4622      	mov	r2, r4
 800b47a:	4630      	mov	r0, r6
 800b47c:	4639      	mov	r1, r7
 800b47e:	f7f4 ff03 	bl	8000288 <__aeabi_dsub>
 800b482:	ea4f 5328 	mov.w	r3, r8, asr #20
 800b486:	9303      	str	r3, [sp, #12]
 800b488:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b48c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800b490:	f1b8 0f10 	cmp.w	r8, #16
 800b494:	dc02      	bgt.n	800b49c <__ieee754_rem_pio2+0x1d4>
 800b496:	e9ca 0100 	strd	r0, r1, [sl]
 800b49a:	e039      	b.n	800b510 <__ieee754_rem_pio2+0x248>
 800b49c:	a34e      	add	r3, pc, #312	; (adr r3, 800b5d8 <__ieee754_rem_pio2+0x310>)
 800b49e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4a2:	ec51 0b18 	vmov	r0, r1, d8
 800b4a6:	f7f5 f8a7 	bl	80005f8 <__aeabi_dmul>
 800b4aa:	4604      	mov	r4, r0
 800b4ac:	460d      	mov	r5, r1
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	4630      	mov	r0, r6
 800b4b4:	4639      	mov	r1, r7
 800b4b6:	f7f4 fee7 	bl	8000288 <__aeabi_dsub>
 800b4ba:	4602      	mov	r2, r0
 800b4bc:	460b      	mov	r3, r1
 800b4be:	4680      	mov	r8, r0
 800b4c0:	4689      	mov	r9, r1
 800b4c2:	4630      	mov	r0, r6
 800b4c4:	4639      	mov	r1, r7
 800b4c6:	f7f4 fedf 	bl	8000288 <__aeabi_dsub>
 800b4ca:	4622      	mov	r2, r4
 800b4cc:	462b      	mov	r3, r5
 800b4ce:	f7f4 fedb 	bl	8000288 <__aeabi_dsub>
 800b4d2:	a343      	add	r3, pc, #268	; (adr r3, 800b5e0 <__ieee754_rem_pio2+0x318>)
 800b4d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b4d8:	4604      	mov	r4, r0
 800b4da:	460d      	mov	r5, r1
 800b4dc:	ec51 0b18 	vmov	r0, r1, d8
 800b4e0:	f7f5 f88a 	bl	80005f8 <__aeabi_dmul>
 800b4e4:	4622      	mov	r2, r4
 800b4e6:	462b      	mov	r3, r5
 800b4e8:	f7f4 fece 	bl	8000288 <__aeabi_dsub>
 800b4ec:	4602      	mov	r2, r0
 800b4ee:	460b      	mov	r3, r1
 800b4f0:	4604      	mov	r4, r0
 800b4f2:	460d      	mov	r5, r1
 800b4f4:	4640      	mov	r0, r8
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	f7f4 fec6 	bl	8000288 <__aeabi_dsub>
 800b4fc:	9a03      	ldr	r2, [sp, #12]
 800b4fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800b502:	1ad3      	subs	r3, r2, r3
 800b504:	2b31      	cmp	r3, #49	; 0x31
 800b506:	dc24      	bgt.n	800b552 <__ieee754_rem_pio2+0x28a>
 800b508:	e9ca 0100 	strd	r0, r1, [sl]
 800b50c:	4646      	mov	r6, r8
 800b50e:	464f      	mov	r7, r9
 800b510:	e9da 8900 	ldrd	r8, r9, [sl]
 800b514:	4630      	mov	r0, r6
 800b516:	4642      	mov	r2, r8
 800b518:	464b      	mov	r3, r9
 800b51a:	4639      	mov	r1, r7
 800b51c:	f7f4 feb4 	bl	8000288 <__aeabi_dsub>
 800b520:	462b      	mov	r3, r5
 800b522:	4622      	mov	r2, r4
 800b524:	f7f4 feb0 	bl	8000288 <__aeabi_dsub>
 800b528:	9b02      	ldr	r3, [sp, #8]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b530:	f6bf af0a 	bge.w	800b348 <__ieee754_rem_pio2+0x80>
 800b534:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b538:	f8ca 3004 	str.w	r3, [sl, #4]
 800b53c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b540:	f8ca 8000 	str.w	r8, [sl]
 800b544:	f8ca 0008 	str.w	r0, [sl, #8]
 800b548:	f8ca 300c 	str.w	r3, [sl, #12]
 800b54c:	f1cb 0b00 	rsb	fp, fp, #0
 800b550:	e6fa      	b.n	800b348 <__ieee754_rem_pio2+0x80>
 800b552:	a327      	add	r3, pc, #156	; (adr r3, 800b5f0 <__ieee754_rem_pio2+0x328>)
 800b554:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b558:	ec51 0b18 	vmov	r0, r1, d8
 800b55c:	f7f5 f84c 	bl	80005f8 <__aeabi_dmul>
 800b560:	4604      	mov	r4, r0
 800b562:	460d      	mov	r5, r1
 800b564:	4602      	mov	r2, r0
 800b566:	460b      	mov	r3, r1
 800b568:	4640      	mov	r0, r8
 800b56a:	4649      	mov	r1, r9
 800b56c:	f7f4 fe8c 	bl	8000288 <__aeabi_dsub>
 800b570:	4602      	mov	r2, r0
 800b572:	460b      	mov	r3, r1
 800b574:	4606      	mov	r6, r0
 800b576:	460f      	mov	r7, r1
 800b578:	4640      	mov	r0, r8
 800b57a:	4649      	mov	r1, r9
 800b57c:	f7f4 fe84 	bl	8000288 <__aeabi_dsub>
 800b580:	4622      	mov	r2, r4
 800b582:	462b      	mov	r3, r5
 800b584:	f7f4 fe80 	bl	8000288 <__aeabi_dsub>
 800b588:	a31b      	add	r3, pc, #108	; (adr r3, 800b5f8 <__ieee754_rem_pio2+0x330>)
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	4604      	mov	r4, r0
 800b590:	460d      	mov	r5, r1
 800b592:	ec51 0b18 	vmov	r0, r1, d8
 800b596:	f7f5 f82f 	bl	80005f8 <__aeabi_dmul>
 800b59a:	4622      	mov	r2, r4
 800b59c:	462b      	mov	r3, r5
 800b59e:	f7f4 fe73 	bl	8000288 <__aeabi_dsub>
 800b5a2:	4604      	mov	r4, r0
 800b5a4:	460d      	mov	r5, r1
 800b5a6:	e75f      	b.n	800b468 <__ieee754_rem_pio2+0x1a0>
 800b5a8:	4b1b      	ldr	r3, [pc, #108]	; (800b618 <__ieee754_rem_pio2+0x350>)
 800b5aa:	4598      	cmp	r8, r3
 800b5ac:	dd36      	ble.n	800b61c <__ieee754_rem_pio2+0x354>
 800b5ae:	ee10 2a10 	vmov	r2, s0
 800b5b2:	462b      	mov	r3, r5
 800b5b4:	4620      	mov	r0, r4
 800b5b6:	4629      	mov	r1, r5
 800b5b8:	f7f4 fe66 	bl	8000288 <__aeabi_dsub>
 800b5bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800b5c0:	e9ca 0100 	strd	r0, r1, [sl]
 800b5c4:	e694      	b.n	800b2f0 <__ieee754_rem_pio2+0x28>
 800b5c6:	bf00      	nop
 800b5c8:	54400000 	.word	0x54400000
 800b5cc:	3ff921fb 	.word	0x3ff921fb
 800b5d0:	1a626331 	.word	0x1a626331
 800b5d4:	3dd0b461 	.word	0x3dd0b461
 800b5d8:	1a600000 	.word	0x1a600000
 800b5dc:	3dd0b461 	.word	0x3dd0b461
 800b5e0:	2e037073 	.word	0x2e037073
 800b5e4:	3ba3198a 	.word	0x3ba3198a
 800b5e8:	6dc9c883 	.word	0x6dc9c883
 800b5ec:	3fe45f30 	.word	0x3fe45f30
 800b5f0:	2e000000 	.word	0x2e000000
 800b5f4:	3ba3198a 	.word	0x3ba3198a
 800b5f8:	252049c1 	.word	0x252049c1
 800b5fc:	397b839a 	.word	0x397b839a
 800b600:	3fe921fb 	.word	0x3fe921fb
 800b604:	4002d97b 	.word	0x4002d97b
 800b608:	3ff921fb 	.word	0x3ff921fb
 800b60c:	413921fb 	.word	0x413921fb
 800b610:	3fe00000 	.word	0x3fe00000
 800b614:	0800cb60 	.word	0x0800cb60
 800b618:	7fefffff 	.word	0x7fefffff
 800b61c:	ea4f 5428 	mov.w	r4, r8, asr #20
 800b620:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800b624:	ee10 0a10 	vmov	r0, s0
 800b628:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800b62c:	ee10 6a10 	vmov	r6, s0
 800b630:	460f      	mov	r7, r1
 800b632:	f7f5 fa91 	bl	8000b58 <__aeabi_d2iz>
 800b636:	f7f4 ff75 	bl	8000524 <__aeabi_i2d>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	4630      	mov	r0, r6
 800b640:	4639      	mov	r1, r7
 800b642:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b646:	f7f4 fe1f 	bl	8000288 <__aeabi_dsub>
 800b64a:	4b23      	ldr	r3, [pc, #140]	; (800b6d8 <__ieee754_rem_pio2+0x410>)
 800b64c:	2200      	movs	r2, #0
 800b64e:	f7f4 ffd3 	bl	80005f8 <__aeabi_dmul>
 800b652:	460f      	mov	r7, r1
 800b654:	4606      	mov	r6, r0
 800b656:	f7f5 fa7f 	bl	8000b58 <__aeabi_d2iz>
 800b65a:	f7f4 ff63 	bl	8000524 <__aeabi_i2d>
 800b65e:	4602      	mov	r2, r0
 800b660:	460b      	mov	r3, r1
 800b662:	4630      	mov	r0, r6
 800b664:	4639      	mov	r1, r7
 800b666:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800b66a:	f7f4 fe0d 	bl	8000288 <__aeabi_dsub>
 800b66e:	4b1a      	ldr	r3, [pc, #104]	; (800b6d8 <__ieee754_rem_pio2+0x410>)
 800b670:	2200      	movs	r2, #0
 800b672:	f7f4 ffc1 	bl	80005f8 <__aeabi_dmul>
 800b676:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b67a:	ad04      	add	r5, sp, #16
 800b67c:	f04f 0803 	mov.w	r8, #3
 800b680:	46a9      	mov	r9, r5
 800b682:	2600      	movs	r6, #0
 800b684:	2700      	movs	r7, #0
 800b686:	4632      	mov	r2, r6
 800b688:	463b      	mov	r3, r7
 800b68a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800b68e:	46c3      	mov	fp, r8
 800b690:	3d08      	subs	r5, #8
 800b692:	f108 38ff 	add.w	r8, r8, #4294967295
 800b696:	f7f5 fa17 	bl	8000ac8 <__aeabi_dcmpeq>
 800b69a:	2800      	cmp	r0, #0
 800b69c:	d1f3      	bne.n	800b686 <__ieee754_rem_pio2+0x3be>
 800b69e:	4b0f      	ldr	r3, [pc, #60]	; (800b6dc <__ieee754_rem_pio2+0x414>)
 800b6a0:	9301      	str	r3, [sp, #4]
 800b6a2:	2302      	movs	r3, #2
 800b6a4:	9300      	str	r3, [sp, #0]
 800b6a6:	4622      	mov	r2, r4
 800b6a8:	465b      	mov	r3, fp
 800b6aa:	4651      	mov	r1, sl
 800b6ac:	4648      	mov	r0, r9
 800b6ae:	f000 f993 	bl	800b9d8 <__kernel_rem_pio2>
 800b6b2:	9b02      	ldr	r3, [sp, #8]
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	4683      	mov	fp, r0
 800b6b8:	f6bf ae46 	bge.w	800b348 <__ieee754_rem_pio2+0x80>
 800b6bc:	e9da 2100 	ldrd	r2, r1, [sl]
 800b6c0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6c4:	e9ca 2300 	strd	r2, r3, [sl]
 800b6c8:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800b6cc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b6d0:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800b6d4:	e73a      	b.n	800b54c <__ieee754_rem_pio2+0x284>
 800b6d6:	bf00      	nop
 800b6d8:	41700000 	.word	0x41700000
 800b6dc:	0800cbe0 	.word	0x0800cbe0

0800b6e0 <__ieee754_sqrt>:
 800b6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b6e4:	ec55 4b10 	vmov	r4, r5, d0
 800b6e8:	4e55      	ldr	r6, [pc, #340]	; (800b840 <__ieee754_sqrt+0x160>)
 800b6ea:	43ae      	bics	r6, r5
 800b6ec:	ee10 0a10 	vmov	r0, s0
 800b6f0:	ee10 3a10 	vmov	r3, s0
 800b6f4:	462a      	mov	r2, r5
 800b6f6:	4629      	mov	r1, r5
 800b6f8:	d110      	bne.n	800b71c <__ieee754_sqrt+0x3c>
 800b6fa:	ee10 2a10 	vmov	r2, s0
 800b6fe:	462b      	mov	r3, r5
 800b700:	f7f4 ff7a 	bl	80005f8 <__aeabi_dmul>
 800b704:	4602      	mov	r2, r0
 800b706:	460b      	mov	r3, r1
 800b708:	4620      	mov	r0, r4
 800b70a:	4629      	mov	r1, r5
 800b70c:	f7f4 fdbe 	bl	800028c <__adddf3>
 800b710:	4604      	mov	r4, r0
 800b712:	460d      	mov	r5, r1
 800b714:	ec45 4b10 	vmov	d0, r4, r5
 800b718:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b71c:	2d00      	cmp	r5, #0
 800b71e:	dc10      	bgt.n	800b742 <__ieee754_sqrt+0x62>
 800b720:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800b724:	4330      	orrs	r0, r6
 800b726:	d0f5      	beq.n	800b714 <__ieee754_sqrt+0x34>
 800b728:	b15d      	cbz	r5, 800b742 <__ieee754_sqrt+0x62>
 800b72a:	ee10 2a10 	vmov	r2, s0
 800b72e:	462b      	mov	r3, r5
 800b730:	ee10 0a10 	vmov	r0, s0
 800b734:	f7f4 fda8 	bl	8000288 <__aeabi_dsub>
 800b738:	4602      	mov	r2, r0
 800b73a:	460b      	mov	r3, r1
 800b73c:	f7f5 f886 	bl	800084c <__aeabi_ddiv>
 800b740:	e7e6      	b.n	800b710 <__ieee754_sqrt+0x30>
 800b742:	1512      	asrs	r2, r2, #20
 800b744:	d074      	beq.n	800b830 <__ieee754_sqrt+0x150>
 800b746:	07d4      	lsls	r4, r2, #31
 800b748:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800b74c:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800b750:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800b754:	bf5e      	ittt	pl
 800b756:	0fda      	lsrpl	r2, r3, #31
 800b758:	005b      	lslpl	r3, r3, #1
 800b75a:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800b75e:	2400      	movs	r4, #0
 800b760:	0fda      	lsrs	r2, r3, #31
 800b762:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800b766:	107f      	asrs	r7, r7, #1
 800b768:	005b      	lsls	r3, r3, #1
 800b76a:	2516      	movs	r5, #22
 800b76c:	4620      	mov	r0, r4
 800b76e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800b772:	1886      	adds	r6, r0, r2
 800b774:	428e      	cmp	r6, r1
 800b776:	bfde      	ittt	le
 800b778:	1b89      	suble	r1, r1, r6
 800b77a:	18b0      	addle	r0, r6, r2
 800b77c:	18a4      	addle	r4, r4, r2
 800b77e:	0049      	lsls	r1, r1, #1
 800b780:	3d01      	subs	r5, #1
 800b782:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800b786:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800b78a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b78e:	d1f0      	bne.n	800b772 <__ieee754_sqrt+0x92>
 800b790:	462a      	mov	r2, r5
 800b792:	f04f 0e20 	mov.w	lr, #32
 800b796:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800b79a:	4281      	cmp	r1, r0
 800b79c:	eb06 0c05 	add.w	ip, r6, r5
 800b7a0:	dc02      	bgt.n	800b7a8 <__ieee754_sqrt+0xc8>
 800b7a2:	d113      	bne.n	800b7cc <__ieee754_sqrt+0xec>
 800b7a4:	459c      	cmp	ip, r3
 800b7a6:	d811      	bhi.n	800b7cc <__ieee754_sqrt+0xec>
 800b7a8:	f1bc 0f00 	cmp.w	ip, #0
 800b7ac:	eb0c 0506 	add.w	r5, ip, r6
 800b7b0:	da43      	bge.n	800b83a <__ieee754_sqrt+0x15a>
 800b7b2:	2d00      	cmp	r5, #0
 800b7b4:	db41      	blt.n	800b83a <__ieee754_sqrt+0x15a>
 800b7b6:	f100 0801 	add.w	r8, r0, #1
 800b7ba:	1a09      	subs	r1, r1, r0
 800b7bc:	459c      	cmp	ip, r3
 800b7be:	bf88      	it	hi
 800b7c0:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800b7c4:	eba3 030c 	sub.w	r3, r3, ip
 800b7c8:	4432      	add	r2, r6
 800b7ca:	4640      	mov	r0, r8
 800b7cc:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800b7d0:	f1be 0e01 	subs.w	lr, lr, #1
 800b7d4:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800b7d8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b7dc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800b7e0:	d1db      	bne.n	800b79a <__ieee754_sqrt+0xba>
 800b7e2:	430b      	orrs	r3, r1
 800b7e4:	d006      	beq.n	800b7f4 <__ieee754_sqrt+0x114>
 800b7e6:	1c50      	adds	r0, r2, #1
 800b7e8:	bf13      	iteet	ne
 800b7ea:	3201      	addne	r2, #1
 800b7ec:	3401      	addeq	r4, #1
 800b7ee:	4672      	moveq	r2, lr
 800b7f0:	f022 0201 	bicne.w	r2, r2, #1
 800b7f4:	1063      	asrs	r3, r4, #1
 800b7f6:	0852      	lsrs	r2, r2, #1
 800b7f8:	07e1      	lsls	r1, r4, #31
 800b7fa:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800b7fe:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800b802:	bf48      	it	mi
 800b804:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800b808:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800b80c:	4614      	mov	r4, r2
 800b80e:	e781      	b.n	800b714 <__ieee754_sqrt+0x34>
 800b810:	0ad9      	lsrs	r1, r3, #11
 800b812:	3815      	subs	r0, #21
 800b814:	055b      	lsls	r3, r3, #21
 800b816:	2900      	cmp	r1, #0
 800b818:	d0fa      	beq.n	800b810 <__ieee754_sqrt+0x130>
 800b81a:	02cd      	lsls	r5, r1, #11
 800b81c:	d50a      	bpl.n	800b834 <__ieee754_sqrt+0x154>
 800b81e:	f1c2 0420 	rsb	r4, r2, #32
 800b822:	fa23 f404 	lsr.w	r4, r3, r4
 800b826:	1e55      	subs	r5, r2, #1
 800b828:	4093      	lsls	r3, r2
 800b82a:	4321      	orrs	r1, r4
 800b82c:	1b42      	subs	r2, r0, r5
 800b82e:	e78a      	b.n	800b746 <__ieee754_sqrt+0x66>
 800b830:	4610      	mov	r0, r2
 800b832:	e7f0      	b.n	800b816 <__ieee754_sqrt+0x136>
 800b834:	0049      	lsls	r1, r1, #1
 800b836:	3201      	adds	r2, #1
 800b838:	e7ef      	b.n	800b81a <__ieee754_sqrt+0x13a>
 800b83a:	4680      	mov	r8, r0
 800b83c:	e7bd      	b.n	800b7ba <__ieee754_sqrt+0xda>
 800b83e:	bf00      	nop
 800b840:	7ff00000 	.word	0x7ff00000
 800b844:	00000000 	.word	0x00000000

0800b848 <__kernel_cos>:
 800b848:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b84c:	ec57 6b10 	vmov	r6, r7, d0
 800b850:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800b854:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800b858:	ed8d 1b00 	vstr	d1, [sp]
 800b85c:	da07      	bge.n	800b86e <__kernel_cos+0x26>
 800b85e:	ee10 0a10 	vmov	r0, s0
 800b862:	4639      	mov	r1, r7
 800b864:	f7f5 f978 	bl	8000b58 <__aeabi_d2iz>
 800b868:	2800      	cmp	r0, #0
 800b86a:	f000 8088 	beq.w	800b97e <__kernel_cos+0x136>
 800b86e:	4632      	mov	r2, r6
 800b870:	463b      	mov	r3, r7
 800b872:	4630      	mov	r0, r6
 800b874:	4639      	mov	r1, r7
 800b876:	f7f4 febf 	bl	80005f8 <__aeabi_dmul>
 800b87a:	4b51      	ldr	r3, [pc, #324]	; (800b9c0 <__kernel_cos+0x178>)
 800b87c:	2200      	movs	r2, #0
 800b87e:	4604      	mov	r4, r0
 800b880:	460d      	mov	r5, r1
 800b882:	f7f4 feb9 	bl	80005f8 <__aeabi_dmul>
 800b886:	a340      	add	r3, pc, #256	; (adr r3, 800b988 <__kernel_cos+0x140>)
 800b888:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b88c:	4682      	mov	sl, r0
 800b88e:	468b      	mov	fp, r1
 800b890:	4620      	mov	r0, r4
 800b892:	4629      	mov	r1, r5
 800b894:	f7f4 feb0 	bl	80005f8 <__aeabi_dmul>
 800b898:	a33d      	add	r3, pc, #244	; (adr r3, 800b990 <__kernel_cos+0x148>)
 800b89a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89e:	f7f4 fcf5 	bl	800028c <__adddf3>
 800b8a2:	4622      	mov	r2, r4
 800b8a4:	462b      	mov	r3, r5
 800b8a6:	f7f4 fea7 	bl	80005f8 <__aeabi_dmul>
 800b8aa:	a33b      	add	r3, pc, #236	; (adr r3, 800b998 <__kernel_cos+0x150>)
 800b8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8b0:	f7f4 fcea 	bl	8000288 <__aeabi_dsub>
 800b8b4:	4622      	mov	r2, r4
 800b8b6:	462b      	mov	r3, r5
 800b8b8:	f7f4 fe9e 	bl	80005f8 <__aeabi_dmul>
 800b8bc:	a338      	add	r3, pc, #224	; (adr r3, 800b9a0 <__kernel_cos+0x158>)
 800b8be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8c2:	f7f4 fce3 	bl	800028c <__adddf3>
 800b8c6:	4622      	mov	r2, r4
 800b8c8:	462b      	mov	r3, r5
 800b8ca:	f7f4 fe95 	bl	80005f8 <__aeabi_dmul>
 800b8ce:	a336      	add	r3, pc, #216	; (adr r3, 800b9a8 <__kernel_cos+0x160>)
 800b8d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8d4:	f7f4 fcd8 	bl	8000288 <__aeabi_dsub>
 800b8d8:	4622      	mov	r2, r4
 800b8da:	462b      	mov	r3, r5
 800b8dc:	f7f4 fe8c 	bl	80005f8 <__aeabi_dmul>
 800b8e0:	a333      	add	r3, pc, #204	; (adr r3, 800b9b0 <__kernel_cos+0x168>)
 800b8e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8e6:	f7f4 fcd1 	bl	800028c <__adddf3>
 800b8ea:	4622      	mov	r2, r4
 800b8ec:	462b      	mov	r3, r5
 800b8ee:	f7f4 fe83 	bl	80005f8 <__aeabi_dmul>
 800b8f2:	4622      	mov	r2, r4
 800b8f4:	462b      	mov	r3, r5
 800b8f6:	f7f4 fe7f 	bl	80005f8 <__aeabi_dmul>
 800b8fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b8fe:	4604      	mov	r4, r0
 800b900:	460d      	mov	r5, r1
 800b902:	4630      	mov	r0, r6
 800b904:	4639      	mov	r1, r7
 800b906:	f7f4 fe77 	bl	80005f8 <__aeabi_dmul>
 800b90a:	460b      	mov	r3, r1
 800b90c:	4602      	mov	r2, r0
 800b90e:	4629      	mov	r1, r5
 800b910:	4620      	mov	r0, r4
 800b912:	f7f4 fcb9 	bl	8000288 <__aeabi_dsub>
 800b916:	4b2b      	ldr	r3, [pc, #172]	; (800b9c4 <__kernel_cos+0x17c>)
 800b918:	4598      	cmp	r8, r3
 800b91a:	4606      	mov	r6, r0
 800b91c:	460f      	mov	r7, r1
 800b91e:	dc10      	bgt.n	800b942 <__kernel_cos+0xfa>
 800b920:	4602      	mov	r2, r0
 800b922:	460b      	mov	r3, r1
 800b924:	4650      	mov	r0, sl
 800b926:	4659      	mov	r1, fp
 800b928:	f7f4 fcae 	bl	8000288 <__aeabi_dsub>
 800b92c:	460b      	mov	r3, r1
 800b92e:	4926      	ldr	r1, [pc, #152]	; (800b9c8 <__kernel_cos+0x180>)
 800b930:	4602      	mov	r2, r0
 800b932:	2000      	movs	r0, #0
 800b934:	f7f4 fca8 	bl	8000288 <__aeabi_dsub>
 800b938:	ec41 0b10 	vmov	d0, r0, r1
 800b93c:	b003      	add	sp, #12
 800b93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b942:	4b22      	ldr	r3, [pc, #136]	; (800b9cc <__kernel_cos+0x184>)
 800b944:	4920      	ldr	r1, [pc, #128]	; (800b9c8 <__kernel_cos+0x180>)
 800b946:	4598      	cmp	r8, r3
 800b948:	bfcc      	ite	gt
 800b94a:	4d21      	ldrgt	r5, [pc, #132]	; (800b9d0 <__kernel_cos+0x188>)
 800b94c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800b950:	2400      	movs	r4, #0
 800b952:	4622      	mov	r2, r4
 800b954:	462b      	mov	r3, r5
 800b956:	2000      	movs	r0, #0
 800b958:	f7f4 fc96 	bl	8000288 <__aeabi_dsub>
 800b95c:	4622      	mov	r2, r4
 800b95e:	4680      	mov	r8, r0
 800b960:	4689      	mov	r9, r1
 800b962:	462b      	mov	r3, r5
 800b964:	4650      	mov	r0, sl
 800b966:	4659      	mov	r1, fp
 800b968:	f7f4 fc8e 	bl	8000288 <__aeabi_dsub>
 800b96c:	4632      	mov	r2, r6
 800b96e:	463b      	mov	r3, r7
 800b970:	f7f4 fc8a 	bl	8000288 <__aeabi_dsub>
 800b974:	4602      	mov	r2, r0
 800b976:	460b      	mov	r3, r1
 800b978:	4640      	mov	r0, r8
 800b97a:	4649      	mov	r1, r9
 800b97c:	e7da      	b.n	800b934 <__kernel_cos+0xec>
 800b97e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800b9b8 <__kernel_cos+0x170>
 800b982:	e7db      	b.n	800b93c <__kernel_cos+0xf4>
 800b984:	f3af 8000 	nop.w
 800b988:	be8838d4 	.word	0xbe8838d4
 800b98c:	bda8fae9 	.word	0xbda8fae9
 800b990:	bdb4b1c4 	.word	0xbdb4b1c4
 800b994:	3e21ee9e 	.word	0x3e21ee9e
 800b998:	809c52ad 	.word	0x809c52ad
 800b99c:	3e927e4f 	.word	0x3e927e4f
 800b9a0:	19cb1590 	.word	0x19cb1590
 800b9a4:	3efa01a0 	.word	0x3efa01a0
 800b9a8:	16c15177 	.word	0x16c15177
 800b9ac:	3f56c16c 	.word	0x3f56c16c
 800b9b0:	5555554c 	.word	0x5555554c
 800b9b4:	3fa55555 	.word	0x3fa55555
 800b9b8:	00000000 	.word	0x00000000
 800b9bc:	3ff00000 	.word	0x3ff00000
 800b9c0:	3fe00000 	.word	0x3fe00000
 800b9c4:	3fd33332 	.word	0x3fd33332
 800b9c8:	3ff00000 	.word	0x3ff00000
 800b9cc:	3fe90000 	.word	0x3fe90000
 800b9d0:	3fd20000 	.word	0x3fd20000
 800b9d4:	00000000 	.word	0x00000000

0800b9d8 <__kernel_rem_pio2>:
 800b9d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b9dc:	ed2d 8b02 	vpush	{d8}
 800b9e0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800b9e4:	f112 0f14 	cmn.w	r2, #20
 800b9e8:	9308      	str	r3, [sp, #32]
 800b9ea:	9101      	str	r1, [sp, #4]
 800b9ec:	4bc4      	ldr	r3, [pc, #784]	; (800bd00 <__kernel_rem_pio2+0x328>)
 800b9ee:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800b9f0:	900b      	str	r0, [sp, #44]	; 0x2c
 800b9f2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b9f6:	9302      	str	r3, [sp, #8]
 800b9f8:	9b08      	ldr	r3, [sp, #32]
 800b9fa:	f103 33ff 	add.w	r3, r3, #4294967295
 800b9fe:	bfa8      	it	ge
 800ba00:	1ed4      	subge	r4, r2, #3
 800ba02:	9306      	str	r3, [sp, #24]
 800ba04:	bfb2      	itee	lt
 800ba06:	2400      	movlt	r4, #0
 800ba08:	2318      	movge	r3, #24
 800ba0a:	fb94 f4f3 	sdivge	r4, r4, r3
 800ba0e:	f06f 0317 	mvn.w	r3, #23
 800ba12:	fb04 3303 	mla	r3, r4, r3, r3
 800ba16:	eb03 0a02 	add.w	sl, r3, r2
 800ba1a:	9b02      	ldr	r3, [sp, #8]
 800ba1c:	9a06      	ldr	r2, [sp, #24]
 800ba1e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800bcf0 <__kernel_rem_pio2+0x318>
 800ba22:	eb03 0802 	add.w	r8, r3, r2
 800ba26:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800ba28:	1aa7      	subs	r7, r4, r2
 800ba2a:	ae22      	add	r6, sp, #136	; 0x88
 800ba2c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800ba30:	2500      	movs	r5, #0
 800ba32:	4545      	cmp	r5, r8
 800ba34:	dd13      	ble.n	800ba5e <__kernel_rem_pio2+0x86>
 800ba36:	9b08      	ldr	r3, [sp, #32]
 800ba38:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800bcf0 <__kernel_rem_pio2+0x318>
 800ba3c:	aa22      	add	r2, sp, #136	; 0x88
 800ba3e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800ba42:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800ba46:	f04f 0800 	mov.w	r8, #0
 800ba4a:	9b02      	ldr	r3, [sp, #8]
 800ba4c:	4598      	cmp	r8, r3
 800ba4e:	dc2f      	bgt.n	800bab0 <__kernel_rem_pio2+0xd8>
 800ba50:	ed8d 8b04 	vstr	d8, [sp, #16]
 800ba54:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800ba58:	462f      	mov	r7, r5
 800ba5a:	2600      	movs	r6, #0
 800ba5c:	e01b      	b.n	800ba96 <__kernel_rem_pio2+0xbe>
 800ba5e:	42ef      	cmn	r7, r5
 800ba60:	d407      	bmi.n	800ba72 <__kernel_rem_pio2+0x9a>
 800ba62:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800ba66:	f7f4 fd5d 	bl	8000524 <__aeabi_i2d>
 800ba6a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800ba6e:	3501      	adds	r5, #1
 800ba70:	e7df      	b.n	800ba32 <__kernel_rem_pio2+0x5a>
 800ba72:	ec51 0b18 	vmov	r0, r1, d8
 800ba76:	e7f8      	b.n	800ba6a <__kernel_rem_pio2+0x92>
 800ba78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ba7c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800ba80:	f7f4 fdba 	bl	80005f8 <__aeabi_dmul>
 800ba84:	4602      	mov	r2, r0
 800ba86:	460b      	mov	r3, r1
 800ba88:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba8c:	f7f4 fbfe 	bl	800028c <__adddf3>
 800ba90:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba94:	3601      	adds	r6, #1
 800ba96:	9b06      	ldr	r3, [sp, #24]
 800ba98:	429e      	cmp	r6, r3
 800ba9a:	f1a7 0708 	sub.w	r7, r7, #8
 800ba9e:	ddeb      	ble.n	800ba78 <__kernel_rem_pio2+0xa0>
 800baa0:	ed9d 7b04 	vldr	d7, [sp, #16]
 800baa4:	f108 0801 	add.w	r8, r8, #1
 800baa8:	ecab 7b02 	vstmia	fp!, {d7}
 800baac:	3508      	adds	r5, #8
 800baae:	e7cc      	b.n	800ba4a <__kernel_rem_pio2+0x72>
 800bab0:	9b02      	ldr	r3, [sp, #8]
 800bab2:	aa0e      	add	r2, sp, #56	; 0x38
 800bab4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800bab8:	930d      	str	r3, [sp, #52]	; 0x34
 800baba:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800babc:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800bac0:	9c02      	ldr	r4, [sp, #8]
 800bac2:	930c      	str	r3, [sp, #48]	; 0x30
 800bac4:	00e3      	lsls	r3, r4, #3
 800bac6:	930a      	str	r3, [sp, #40]	; 0x28
 800bac8:	ab9a      	add	r3, sp, #616	; 0x268
 800baca:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800bace:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800bad2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800bad6:	ab72      	add	r3, sp, #456	; 0x1c8
 800bad8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800badc:	46c3      	mov	fp, r8
 800bade:	46a1      	mov	r9, r4
 800bae0:	f1b9 0f00 	cmp.w	r9, #0
 800bae4:	f1a5 0508 	sub.w	r5, r5, #8
 800bae8:	dc77      	bgt.n	800bbda <__kernel_rem_pio2+0x202>
 800baea:	ec47 6b10 	vmov	d0, r6, r7
 800baee:	4650      	mov	r0, sl
 800baf0:	f000 fc46 	bl	800c380 <scalbn>
 800baf4:	ec57 6b10 	vmov	r6, r7, d0
 800baf8:	2200      	movs	r2, #0
 800bafa:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800bafe:	ee10 0a10 	vmov	r0, s0
 800bb02:	4639      	mov	r1, r7
 800bb04:	f7f4 fd78 	bl	80005f8 <__aeabi_dmul>
 800bb08:	ec41 0b10 	vmov	d0, r0, r1
 800bb0c:	f000 fbb8 	bl	800c280 <floor>
 800bb10:	4b7c      	ldr	r3, [pc, #496]	; (800bd04 <__kernel_rem_pio2+0x32c>)
 800bb12:	ec51 0b10 	vmov	r0, r1, d0
 800bb16:	2200      	movs	r2, #0
 800bb18:	f7f4 fd6e 	bl	80005f8 <__aeabi_dmul>
 800bb1c:	4602      	mov	r2, r0
 800bb1e:	460b      	mov	r3, r1
 800bb20:	4630      	mov	r0, r6
 800bb22:	4639      	mov	r1, r7
 800bb24:	f7f4 fbb0 	bl	8000288 <__aeabi_dsub>
 800bb28:	460f      	mov	r7, r1
 800bb2a:	4606      	mov	r6, r0
 800bb2c:	f7f5 f814 	bl	8000b58 <__aeabi_d2iz>
 800bb30:	9004      	str	r0, [sp, #16]
 800bb32:	f7f4 fcf7 	bl	8000524 <__aeabi_i2d>
 800bb36:	4602      	mov	r2, r0
 800bb38:	460b      	mov	r3, r1
 800bb3a:	4630      	mov	r0, r6
 800bb3c:	4639      	mov	r1, r7
 800bb3e:	f7f4 fba3 	bl	8000288 <__aeabi_dsub>
 800bb42:	f1ba 0f00 	cmp.w	sl, #0
 800bb46:	4606      	mov	r6, r0
 800bb48:	460f      	mov	r7, r1
 800bb4a:	dd6d      	ble.n	800bc28 <__kernel_rem_pio2+0x250>
 800bb4c:	1e62      	subs	r2, r4, #1
 800bb4e:	ab0e      	add	r3, sp, #56	; 0x38
 800bb50:	9d04      	ldr	r5, [sp, #16]
 800bb52:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800bb56:	f1ca 0118 	rsb	r1, sl, #24
 800bb5a:	fa40 f301 	asr.w	r3, r0, r1
 800bb5e:	441d      	add	r5, r3
 800bb60:	408b      	lsls	r3, r1
 800bb62:	1ac0      	subs	r0, r0, r3
 800bb64:	ab0e      	add	r3, sp, #56	; 0x38
 800bb66:	9504      	str	r5, [sp, #16]
 800bb68:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800bb6c:	f1ca 0317 	rsb	r3, sl, #23
 800bb70:	fa40 fb03 	asr.w	fp, r0, r3
 800bb74:	f1bb 0f00 	cmp.w	fp, #0
 800bb78:	dd65      	ble.n	800bc46 <__kernel_rem_pio2+0x26e>
 800bb7a:	9b04      	ldr	r3, [sp, #16]
 800bb7c:	2200      	movs	r2, #0
 800bb7e:	3301      	adds	r3, #1
 800bb80:	9304      	str	r3, [sp, #16]
 800bb82:	4615      	mov	r5, r2
 800bb84:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800bb88:	4294      	cmp	r4, r2
 800bb8a:	f300 809c 	bgt.w	800bcc6 <__kernel_rem_pio2+0x2ee>
 800bb8e:	f1ba 0f00 	cmp.w	sl, #0
 800bb92:	dd07      	ble.n	800bba4 <__kernel_rem_pio2+0x1cc>
 800bb94:	f1ba 0f01 	cmp.w	sl, #1
 800bb98:	f000 80c0 	beq.w	800bd1c <__kernel_rem_pio2+0x344>
 800bb9c:	f1ba 0f02 	cmp.w	sl, #2
 800bba0:	f000 80c6 	beq.w	800bd30 <__kernel_rem_pio2+0x358>
 800bba4:	f1bb 0f02 	cmp.w	fp, #2
 800bba8:	d14d      	bne.n	800bc46 <__kernel_rem_pio2+0x26e>
 800bbaa:	4632      	mov	r2, r6
 800bbac:	463b      	mov	r3, r7
 800bbae:	4956      	ldr	r1, [pc, #344]	; (800bd08 <__kernel_rem_pio2+0x330>)
 800bbb0:	2000      	movs	r0, #0
 800bbb2:	f7f4 fb69 	bl	8000288 <__aeabi_dsub>
 800bbb6:	4606      	mov	r6, r0
 800bbb8:	460f      	mov	r7, r1
 800bbba:	2d00      	cmp	r5, #0
 800bbbc:	d043      	beq.n	800bc46 <__kernel_rem_pio2+0x26e>
 800bbbe:	4650      	mov	r0, sl
 800bbc0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800bcf8 <__kernel_rem_pio2+0x320>
 800bbc4:	f000 fbdc 	bl	800c380 <scalbn>
 800bbc8:	4630      	mov	r0, r6
 800bbca:	4639      	mov	r1, r7
 800bbcc:	ec53 2b10 	vmov	r2, r3, d0
 800bbd0:	f7f4 fb5a 	bl	8000288 <__aeabi_dsub>
 800bbd4:	4606      	mov	r6, r0
 800bbd6:	460f      	mov	r7, r1
 800bbd8:	e035      	b.n	800bc46 <__kernel_rem_pio2+0x26e>
 800bbda:	4b4c      	ldr	r3, [pc, #304]	; (800bd0c <__kernel_rem_pio2+0x334>)
 800bbdc:	2200      	movs	r2, #0
 800bbde:	4630      	mov	r0, r6
 800bbe0:	4639      	mov	r1, r7
 800bbe2:	f7f4 fd09 	bl	80005f8 <__aeabi_dmul>
 800bbe6:	f7f4 ffb7 	bl	8000b58 <__aeabi_d2iz>
 800bbea:	f7f4 fc9b 	bl	8000524 <__aeabi_i2d>
 800bbee:	4602      	mov	r2, r0
 800bbf0:	460b      	mov	r3, r1
 800bbf2:	ec43 2b18 	vmov	d8, r2, r3
 800bbf6:	4b46      	ldr	r3, [pc, #280]	; (800bd10 <__kernel_rem_pio2+0x338>)
 800bbf8:	2200      	movs	r2, #0
 800bbfa:	f7f4 fcfd 	bl	80005f8 <__aeabi_dmul>
 800bbfe:	4602      	mov	r2, r0
 800bc00:	460b      	mov	r3, r1
 800bc02:	4630      	mov	r0, r6
 800bc04:	4639      	mov	r1, r7
 800bc06:	f7f4 fb3f 	bl	8000288 <__aeabi_dsub>
 800bc0a:	f7f4 ffa5 	bl	8000b58 <__aeabi_d2iz>
 800bc0e:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bc12:	f84b 0b04 	str.w	r0, [fp], #4
 800bc16:	ec51 0b18 	vmov	r0, r1, d8
 800bc1a:	f7f4 fb37 	bl	800028c <__adddf3>
 800bc1e:	f109 39ff 	add.w	r9, r9, #4294967295
 800bc22:	4606      	mov	r6, r0
 800bc24:	460f      	mov	r7, r1
 800bc26:	e75b      	b.n	800bae0 <__kernel_rem_pio2+0x108>
 800bc28:	d106      	bne.n	800bc38 <__kernel_rem_pio2+0x260>
 800bc2a:	1e63      	subs	r3, r4, #1
 800bc2c:	aa0e      	add	r2, sp, #56	; 0x38
 800bc2e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800bc32:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800bc36:	e79d      	b.n	800bb74 <__kernel_rem_pio2+0x19c>
 800bc38:	4b36      	ldr	r3, [pc, #216]	; (800bd14 <__kernel_rem_pio2+0x33c>)
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f7f4 ff62 	bl	8000b04 <__aeabi_dcmpge>
 800bc40:	2800      	cmp	r0, #0
 800bc42:	d13d      	bne.n	800bcc0 <__kernel_rem_pio2+0x2e8>
 800bc44:	4683      	mov	fp, r0
 800bc46:	2200      	movs	r2, #0
 800bc48:	2300      	movs	r3, #0
 800bc4a:	4630      	mov	r0, r6
 800bc4c:	4639      	mov	r1, r7
 800bc4e:	f7f4 ff3b 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc52:	2800      	cmp	r0, #0
 800bc54:	f000 80c0 	beq.w	800bdd8 <__kernel_rem_pio2+0x400>
 800bc58:	1e65      	subs	r5, r4, #1
 800bc5a:	462b      	mov	r3, r5
 800bc5c:	2200      	movs	r2, #0
 800bc5e:	9902      	ldr	r1, [sp, #8]
 800bc60:	428b      	cmp	r3, r1
 800bc62:	da6c      	bge.n	800bd3e <__kernel_rem_pio2+0x366>
 800bc64:	2a00      	cmp	r2, #0
 800bc66:	f000 8089 	beq.w	800bd7c <__kernel_rem_pio2+0x3a4>
 800bc6a:	ab0e      	add	r3, sp, #56	; 0x38
 800bc6c:	f1aa 0a18 	sub.w	sl, sl, #24
 800bc70:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800bc74:	2b00      	cmp	r3, #0
 800bc76:	f000 80ad 	beq.w	800bdd4 <__kernel_rem_pio2+0x3fc>
 800bc7a:	4650      	mov	r0, sl
 800bc7c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800bcf8 <__kernel_rem_pio2+0x320>
 800bc80:	f000 fb7e 	bl	800c380 <scalbn>
 800bc84:	ab9a      	add	r3, sp, #616	; 0x268
 800bc86:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800bc8a:	ec57 6b10 	vmov	r6, r7, d0
 800bc8e:	00ec      	lsls	r4, r5, #3
 800bc90:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800bc94:	46aa      	mov	sl, r5
 800bc96:	f1ba 0f00 	cmp.w	sl, #0
 800bc9a:	f280 80d6 	bge.w	800be4a <__kernel_rem_pio2+0x472>
 800bc9e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800bcf0 <__kernel_rem_pio2+0x318>
 800bca2:	462e      	mov	r6, r5
 800bca4:	2e00      	cmp	r6, #0
 800bca6:	f2c0 8104 	blt.w	800beb2 <__kernel_rem_pio2+0x4da>
 800bcaa:	ab72      	add	r3, sp, #456	; 0x1c8
 800bcac:	ed8d 8b06 	vstr	d8, [sp, #24]
 800bcb0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800bd18 <__kernel_rem_pio2+0x340>
 800bcb4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800bcb8:	f04f 0800 	mov.w	r8, #0
 800bcbc:	1baf      	subs	r7, r5, r6
 800bcbe:	e0ea      	b.n	800be96 <__kernel_rem_pio2+0x4be>
 800bcc0:	f04f 0b02 	mov.w	fp, #2
 800bcc4:	e759      	b.n	800bb7a <__kernel_rem_pio2+0x1a2>
 800bcc6:	f8d8 3000 	ldr.w	r3, [r8]
 800bcca:	b955      	cbnz	r5, 800bce2 <__kernel_rem_pio2+0x30a>
 800bccc:	b123      	cbz	r3, 800bcd8 <__kernel_rem_pio2+0x300>
 800bcce:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800bcd2:	f8c8 3000 	str.w	r3, [r8]
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	3201      	adds	r2, #1
 800bcda:	f108 0804 	add.w	r8, r8, #4
 800bcde:	461d      	mov	r5, r3
 800bce0:	e752      	b.n	800bb88 <__kernel_rem_pio2+0x1b0>
 800bce2:	1acb      	subs	r3, r1, r3
 800bce4:	f8c8 3000 	str.w	r3, [r8]
 800bce8:	462b      	mov	r3, r5
 800bcea:	e7f5      	b.n	800bcd8 <__kernel_rem_pio2+0x300>
 800bcec:	f3af 8000 	nop.w
	...
 800bcfc:	3ff00000 	.word	0x3ff00000
 800bd00:	0800cd28 	.word	0x0800cd28
 800bd04:	40200000 	.word	0x40200000
 800bd08:	3ff00000 	.word	0x3ff00000
 800bd0c:	3e700000 	.word	0x3e700000
 800bd10:	41700000 	.word	0x41700000
 800bd14:	3fe00000 	.word	0x3fe00000
 800bd18:	0800cce8 	.word	0x0800cce8
 800bd1c:	1e62      	subs	r2, r4, #1
 800bd1e:	ab0e      	add	r3, sp, #56	; 0x38
 800bd20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd24:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800bd28:	a90e      	add	r1, sp, #56	; 0x38
 800bd2a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800bd2e:	e739      	b.n	800bba4 <__kernel_rem_pio2+0x1cc>
 800bd30:	1e62      	subs	r2, r4, #1
 800bd32:	ab0e      	add	r3, sp, #56	; 0x38
 800bd34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800bd38:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800bd3c:	e7f4      	b.n	800bd28 <__kernel_rem_pio2+0x350>
 800bd3e:	a90e      	add	r1, sp, #56	; 0x38
 800bd40:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800bd44:	3b01      	subs	r3, #1
 800bd46:	430a      	orrs	r2, r1
 800bd48:	e789      	b.n	800bc5e <__kernel_rem_pio2+0x286>
 800bd4a:	3301      	adds	r3, #1
 800bd4c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800bd50:	2900      	cmp	r1, #0
 800bd52:	d0fa      	beq.n	800bd4a <__kernel_rem_pio2+0x372>
 800bd54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800bd56:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800bd5a:	446a      	add	r2, sp
 800bd5c:	3a98      	subs	r2, #152	; 0x98
 800bd5e:	920a      	str	r2, [sp, #40]	; 0x28
 800bd60:	9a08      	ldr	r2, [sp, #32]
 800bd62:	18e3      	adds	r3, r4, r3
 800bd64:	18a5      	adds	r5, r4, r2
 800bd66:	aa22      	add	r2, sp, #136	; 0x88
 800bd68:	f104 0801 	add.w	r8, r4, #1
 800bd6c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800bd70:	9304      	str	r3, [sp, #16]
 800bd72:	9b04      	ldr	r3, [sp, #16]
 800bd74:	4543      	cmp	r3, r8
 800bd76:	da04      	bge.n	800bd82 <__kernel_rem_pio2+0x3aa>
 800bd78:	461c      	mov	r4, r3
 800bd7a:	e6a3      	b.n	800bac4 <__kernel_rem_pio2+0xec>
 800bd7c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800bd7e:	2301      	movs	r3, #1
 800bd80:	e7e4      	b.n	800bd4c <__kernel_rem_pio2+0x374>
 800bd82:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800bd84:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800bd88:	f7f4 fbcc 	bl	8000524 <__aeabi_i2d>
 800bd8c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800bd90:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bd92:	46ab      	mov	fp, r5
 800bd94:	461c      	mov	r4, r3
 800bd96:	f04f 0900 	mov.w	r9, #0
 800bd9a:	2600      	movs	r6, #0
 800bd9c:	2700      	movs	r7, #0
 800bd9e:	9b06      	ldr	r3, [sp, #24]
 800bda0:	4599      	cmp	r9, r3
 800bda2:	dd06      	ble.n	800bdb2 <__kernel_rem_pio2+0x3da>
 800bda4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bda6:	e8e3 6702 	strd	r6, r7, [r3], #8
 800bdaa:	f108 0801 	add.w	r8, r8, #1
 800bdae:	930a      	str	r3, [sp, #40]	; 0x28
 800bdb0:	e7df      	b.n	800bd72 <__kernel_rem_pio2+0x39a>
 800bdb2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800bdb6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800bdba:	f7f4 fc1d 	bl	80005f8 <__aeabi_dmul>
 800bdbe:	4602      	mov	r2, r0
 800bdc0:	460b      	mov	r3, r1
 800bdc2:	4630      	mov	r0, r6
 800bdc4:	4639      	mov	r1, r7
 800bdc6:	f7f4 fa61 	bl	800028c <__adddf3>
 800bdca:	f109 0901 	add.w	r9, r9, #1
 800bdce:	4606      	mov	r6, r0
 800bdd0:	460f      	mov	r7, r1
 800bdd2:	e7e4      	b.n	800bd9e <__kernel_rem_pio2+0x3c6>
 800bdd4:	3d01      	subs	r5, #1
 800bdd6:	e748      	b.n	800bc6a <__kernel_rem_pio2+0x292>
 800bdd8:	ec47 6b10 	vmov	d0, r6, r7
 800bddc:	f1ca 0000 	rsb	r0, sl, #0
 800bde0:	f000 face 	bl	800c380 <scalbn>
 800bde4:	ec57 6b10 	vmov	r6, r7, d0
 800bde8:	4ba0      	ldr	r3, [pc, #640]	; (800c06c <__kernel_rem_pio2+0x694>)
 800bdea:	ee10 0a10 	vmov	r0, s0
 800bdee:	2200      	movs	r2, #0
 800bdf0:	4639      	mov	r1, r7
 800bdf2:	f7f4 fe87 	bl	8000b04 <__aeabi_dcmpge>
 800bdf6:	b1f8      	cbz	r0, 800be38 <__kernel_rem_pio2+0x460>
 800bdf8:	4b9d      	ldr	r3, [pc, #628]	; (800c070 <__kernel_rem_pio2+0x698>)
 800bdfa:	2200      	movs	r2, #0
 800bdfc:	4630      	mov	r0, r6
 800bdfe:	4639      	mov	r1, r7
 800be00:	f7f4 fbfa 	bl	80005f8 <__aeabi_dmul>
 800be04:	f7f4 fea8 	bl	8000b58 <__aeabi_d2iz>
 800be08:	4680      	mov	r8, r0
 800be0a:	f7f4 fb8b 	bl	8000524 <__aeabi_i2d>
 800be0e:	4b97      	ldr	r3, [pc, #604]	; (800c06c <__kernel_rem_pio2+0x694>)
 800be10:	2200      	movs	r2, #0
 800be12:	f7f4 fbf1 	bl	80005f8 <__aeabi_dmul>
 800be16:	460b      	mov	r3, r1
 800be18:	4602      	mov	r2, r0
 800be1a:	4639      	mov	r1, r7
 800be1c:	4630      	mov	r0, r6
 800be1e:	f7f4 fa33 	bl	8000288 <__aeabi_dsub>
 800be22:	f7f4 fe99 	bl	8000b58 <__aeabi_d2iz>
 800be26:	1c65      	adds	r5, r4, #1
 800be28:	ab0e      	add	r3, sp, #56	; 0x38
 800be2a:	f10a 0a18 	add.w	sl, sl, #24
 800be2e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800be32:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800be36:	e720      	b.n	800bc7a <__kernel_rem_pio2+0x2a2>
 800be38:	4630      	mov	r0, r6
 800be3a:	4639      	mov	r1, r7
 800be3c:	f7f4 fe8c 	bl	8000b58 <__aeabi_d2iz>
 800be40:	ab0e      	add	r3, sp, #56	; 0x38
 800be42:	4625      	mov	r5, r4
 800be44:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800be48:	e717      	b.n	800bc7a <__kernel_rem_pio2+0x2a2>
 800be4a:	ab0e      	add	r3, sp, #56	; 0x38
 800be4c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800be50:	f7f4 fb68 	bl	8000524 <__aeabi_i2d>
 800be54:	4632      	mov	r2, r6
 800be56:	463b      	mov	r3, r7
 800be58:	f7f4 fbce 	bl	80005f8 <__aeabi_dmul>
 800be5c:	4b84      	ldr	r3, [pc, #528]	; (800c070 <__kernel_rem_pio2+0x698>)
 800be5e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800be62:	2200      	movs	r2, #0
 800be64:	4630      	mov	r0, r6
 800be66:	4639      	mov	r1, r7
 800be68:	f7f4 fbc6 	bl	80005f8 <__aeabi_dmul>
 800be6c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800be70:	4606      	mov	r6, r0
 800be72:	460f      	mov	r7, r1
 800be74:	e70f      	b.n	800bc96 <__kernel_rem_pio2+0x2be>
 800be76:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800be7a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800be7e:	f7f4 fbbb 	bl	80005f8 <__aeabi_dmul>
 800be82:	4602      	mov	r2, r0
 800be84:	460b      	mov	r3, r1
 800be86:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be8a:	f7f4 f9ff 	bl	800028c <__adddf3>
 800be8e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be92:	f108 0801 	add.w	r8, r8, #1
 800be96:	9b02      	ldr	r3, [sp, #8]
 800be98:	4598      	cmp	r8, r3
 800be9a:	dc01      	bgt.n	800bea0 <__kernel_rem_pio2+0x4c8>
 800be9c:	45b8      	cmp	r8, r7
 800be9e:	ddea      	ble.n	800be76 <__kernel_rem_pio2+0x49e>
 800bea0:	ed9d 7b06 	vldr	d7, [sp, #24]
 800bea4:	ab4a      	add	r3, sp, #296	; 0x128
 800bea6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800beaa:	ed87 7b00 	vstr	d7, [r7]
 800beae:	3e01      	subs	r6, #1
 800beb0:	e6f8      	b.n	800bca4 <__kernel_rem_pio2+0x2cc>
 800beb2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800beb4:	2b02      	cmp	r3, #2
 800beb6:	dc0b      	bgt.n	800bed0 <__kernel_rem_pio2+0x4f8>
 800beb8:	2b00      	cmp	r3, #0
 800beba:	dc35      	bgt.n	800bf28 <__kernel_rem_pio2+0x550>
 800bebc:	d059      	beq.n	800bf72 <__kernel_rem_pio2+0x59a>
 800bebe:	9b04      	ldr	r3, [sp, #16]
 800bec0:	f003 0007 	and.w	r0, r3, #7
 800bec4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800bec8:	ecbd 8b02 	vpop	{d8}
 800becc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800bed2:	2b03      	cmp	r3, #3
 800bed4:	d1f3      	bne.n	800bebe <__kernel_rem_pio2+0x4e6>
 800bed6:	ab4a      	add	r3, sp, #296	; 0x128
 800bed8:	4423      	add	r3, r4
 800beda:	9306      	str	r3, [sp, #24]
 800bedc:	461c      	mov	r4, r3
 800bede:	469a      	mov	sl, r3
 800bee0:	9502      	str	r5, [sp, #8]
 800bee2:	9b02      	ldr	r3, [sp, #8]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	f1aa 0a08 	sub.w	sl, sl, #8
 800beea:	dc6b      	bgt.n	800bfc4 <__kernel_rem_pio2+0x5ec>
 800beec:	46aa      	mov	sl, r5
 800beee:	f1ba 0f01 	cmp.w	sl, #1
 800bef2:	f1a4 0408 	sub.w	r4, r4, #8
 800bef6:	f300 8085 	bgt.w	800c004 <__kernel_rem_pio2+0x62c>
 800befa:	9c06      	ldr	r4, [sp, #24]
 800befc:	2000      	movs	r0, #0
 800befe:	3408      	adds	r4, #8
 800bf00:	2100      	movs	r1, #0
 800bf02:	2d01      	cmp	r5, #1
 800bf04:	f300 809d 	bgt.w	800c042 <__kernel_rem_pio2+0x66a>
 800bf08:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800bf0c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800bf10:	f1bb 0f00 	cmp.w	fp, #0
 800bf14:	f040 809b 	bne.w	800c04e <__kernel_rem_pio2+0x676>
 800bf18:	9b01      	ldr	r3, [sp, #4]
 800bf1a:	e9c3 5600 	strd	r5, r6, [r3]
 800bf1e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800bf22:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800bf26:	e7ca      	b.n	800bebe <__kernel_rem_pio2+0x4e6>
 800bf28:	3408      	adds	r4, #8
 800bf2a:	ab4a      	add	r3, sp, #296	; 0x128
 800bf2c:	441c      	add	r4, r3
 800bf2e:	462e      	mov	r6, r5
 800bf30:	2000      	movs	r0, #0
 800bf32:	2100      	movs	r1, #0
 800bf34:	2e00      	cmp	r6, #0
 800bf36:	da36      	bge.n	800bfa6 <__kernel_rem_pio2+0x5ce>
 800bf38:	f1bb 0f00 	cmp.w	fp, #0
 800bf3c:	d039      	beq.n	800bfb2 <__kernel_rem_pio2+0x5da>
 800bf3e:	4602      	mov	r2, r0
 800bf40:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf44:	9c01      	ldr	r4, [sp, #4]
 800bf46:	e9c4 2300 	strd	r2, r3, [r4]
 800bf4a:	4602      	mov	r2, r0
 800bf4c:	460b      	mov	r3, r1
 800bf4e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800bf52:	f7f4 f999 	bl	8000288 <__aeabi_dsub>
 800bf56:	ae4c      	add	r6, sp, #304	; 0x130
 800bf58:	2401      	movs	r4, #1
 800bf5a:	42a5      	cmp	r5, r4
 800bf5c:	da2c      	bge.n	800bfb8 <__kernel_rem_pio2+0x5e0>
 800bf5e:	f1bb 0f00 	cmp.w	fp, #0
 800bf62:	d002      	beq.n	800bf6a <__kernel_rem_pio2+0x592>
 800bf64:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf68:	4619      	mov	r1, r3
 800bf6a:	9b01      	ldr	r3, [sp, #4]
 800bf6c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800bf70:	e7a5      	b.n	800bebe <__kernel_rem_pio2+0x4e6>
 800bf72:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800bf76:	eb0d 0403 	add.w	r4, sp, r3
 800bf7a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800bf7e:	2000      	movs	r0, #0
 800bf80:	2100      	movs	r1, #0
 800bf82:	2d00      	cmp	r5, #0
 800bf84:	da09      	bge.n	800bf9a <__kernel_rem_pio2+0x5c2>
 800bf86:	f1bb 0f00 	cmp.w	fp, #0
 800bf8a:	d002      	beq.n	800bf92 <__kernel_rem_pio2+0x5ba>
 800bf8c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800bf90:	4619      	mov	r1, r3
 800bf92:	9b01      	ldr	r3, [sp, #4]
 800bf94:	e9c3 0100 	strd	r0, r1, [r3]
 800bf98:	e791      	b.n	800bebe <__kernel_rem_pio2+0x4e6>
 800bf9a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bf9e:	f7f4 f975 	bl	800028c <__adddf3>
 800bfa2:	3d01      	subs	r5, #1
 800bfa4:	e7ed      	b.n	800bf82 <__kernel_rem_pio2+0x5aa>
 800bfa6:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800bfaa:	f7f4 f96f 	bl	800028c <__adddf3>
 800bfae:	3e01      	subs	r6, #1
 800bfb0:	e7c0      	b.n	800bf34 <__kernel_rem_pio2+0x55c>
 800bfb2:	4602      	mov	r2, r0
 800bfb4:	460b      	mov	r3, r1
 800bfb6:	e7c5      	b.n	800bf44 <__kernel_rem_pio2+0x56c>
 800bfb8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800bfbc:	f7f4 f966 	bl	800028c <__adddf3>
 800bfc0:	3401      	adds	r4, #1
 800bfc2:	e7ca      	b.n	800bf5a <__kernel_rem_pio2+0x582>
 800bfc4:	e9da 8900 	ldrd	r8, r9, [sl]
 800bfc8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800bfcc:	9b02      	ldr	r3, [sp, #8]
 800bfce:	3b01      	subs	r3, #1
 800bfd0:	9302      	str	r3, [sp, #8]
 800bfd2:	4632      	mov	r2, r6
 800bfd4:	463b      	mov	r3, r7
 800bfd6:	4640      	mov	r0, r8
 800bfd8:	4649      	mov	r1, r9
 800bfda:	f7f4 f957 	bl	800028c <__adddf3>
 800bfde:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bfe2:	4602      	mov	r2, r0
 800bfe4:	460b      	mov	r3, r1
 800bfe6:	4640      	mov	r0, r8
 800bfe8:	4649      	mov	r1, r9
 800bfea:	f7f4 f94d 	bl	8000288 <__aeabi_dsub>
 800bfee:	4632      	mov	r2, r6
 800bff0:	463b      	mov	r3, r7
 800bff2:	f7f4 f94b 	bl	800028c <__adddf3>
 800bff6:	ed9d 7b08 	vldr	d7, [sp, #32]
 800bffa:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800bffe:	ed8a 7b00 	vstr	d7, [sl]
 800c002:	e76e      	b.n	800bee2 <__kernel_rem_pio2+0x50a>
 800c004:	e9d4 8900 	ldrd	r8, r9, [r4]
 800c008:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800c00c:	4640      	mov	r0, r8
 800c00e:	4632      	mov	r2, r6
 800c010:	463b      	mov	r3, r7
 800c012:	4649      	mov	r1, r9
 800c014:	f7f4 f93a 	bl	800028c <__adddf3>
 800c018:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c01c:	4602      	mov	r2, r0
 800c01e:	460b      	mov	r3, r1
 800c020:	4640      	mov	r0, r8
 800c022:	4649      	mov	r1, r9
 800c024:	f7f4 f930 	bl	8000288 <__aeabi_dsub>
 800c028:	4632      	mov	r2, r6
 800c02a:	463b      	mov	r3, r7
 800c02c:	f7f4 f92e 	bl	800028c <__adddf3>
 800c030:	ed9d 7b02 	vldr	d7, [sp, #8]
 800c034:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800c038:	ed84 7b00 	vstr	d7, [r4]
 800c03c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800c040:	e755      	b.n	800beee <__kernel_rem_pio2+0x516>
 800c042:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800c046:	f7f4 f921 	bl	800028c <__adddf3>
 800c04a:	3d01      	subs	r5, #1
 800c04c:	e759      	b.n	800bf02 <__kernel_rem_pio2+0x52a>
 800c04e:	9b01      	ldr	r3, [sp, #4]
 800c050:	9a01      	ldr	r2, [sp, #4]
 800c052:	601d      	str	r5, [r3, #0]
 800c054:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800c058:	605c      	str	r4, [r3, #4]
 800c05a:	609f      	str	r7, [r3, #8]
 800c05c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800c060:	60d3      	str	r3, [r2, #12]
 800c062:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c066:	6110      	str	r0, [r2, #16]
 800c068:	6153      	str	r3, [r2, #20]
 800c06a:	e728      	b.n	800bebe <__kernel_rem_pio2+0x4e6>
 800c06c:	41700000 	.word	0x41700000
 800c070:	3e700000 	.word	0x3e700000
 800c074:	00000000 	.word	0x00000000

0800c078 <__kernel_sin>:
 800c078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c07c:	ed2d 8b04 	vpush	{d8-d9}
 800c080:	eeb0 8a41 	vmov.f32	s16, s2
 800c084:	eef0 8a61 	vmov.f32	s17, s3
 800c088:	ec55 4b10 	vmov	r4, r5, d0
 800c08c:	b083      	sub	sp, #12
 800c08e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c092:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800c096:	9001      	str	r0, [sp, #4]
 800c098:	da06      	bge.n	800c0a8 <__kernel_sin+0x30>
 800c09a:	ee10 0a10 	vmov	r0, s0
 800c09e:	4629      	mov	r1, r5
 800c0a0:	f7f4 fd5a 	bl	8000b58 <__aeabi_d2iz>
 800c0a4:	2800      	cmp	r0, #0
 800c0a6:	d051      	beq.n	800c14c <__kernel_sin+0xd4>
 800c0a8:	4622      	mov	r2, r4
 800c0aa:	462b      	mov	r3, r5
 800c0ac:	4620      	mov	r0, r4
 800c0ae:	4629      	mov	r1, r5
 800c0b0:	f7f4 faa2 	bl	80005f8 <__aeabi_dmul>
 800c0b4:	4682      	mov	sl, r0
 800c0b6:	468b      	mov	fp, r1
 800c0b8:	4602      	mov	r2, r0
 800c0ba:	460b      	mov	r3, r1
 800c0bc:	4620      	mov	r0, r4
 800c0be:	4629      	mov	r1, r5
 800c0c0:	f7f4 fa9a 	bl	80005f8 <__aeabi_dmul>
 800c0c4:	a341      	add	r3, pc, #260	; (adr r3, 800c1cc <__kernel_sin+0x154>)
 800c0c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ca:	4680      	mov	r8, r0
 800c0cc:	4689      	mov	r9, r1
 800c0ce:	4650      	mov	r0, sl
 800c0d0:	4659      	mov	r1, fp
 800c0d2:	f7f4 fa91 	bl	80005f8 <__aeabi_dmul>
 800c0d6:	a33f      	add	r3, pc, #252	; (adr r3, 800c1d4 <__kernel_sin+0x15c>)
 800c0d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0dc:	f7f4 f8d4 	bl	8000288 <__aeabi_dsub>
 800c0e0:	4652      	mov	r2, sl
 800c0e2:	465b      	mov	r3, fp
 800c0e4:	f7f4 fa88 	bl	80005f8 <__aeabi_dmul>
 800c0e8:	a33c      	add	r3, pc, #240	; (adr r3, 800c1dc <__kernel_sin+0x164>)
 800c0ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c0ee:	f7f4 f8cd 	bl	800028c <__adddf3>
 800c0f2:	4652      	mov	r2, sl
 800c0f4:	465b      	mov	r3, fp
 800c0f6:	f7f4 fa7f 	bl	80005f8 <__aeabi_dmul>
 800c0fa:	a33a      	add	r3, pc, #232	; (adr r3, 800c1e4 <__kernel_sin+0x16c>)
 800c0fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c100:	f7f4 f8c2 	bl	8000288 <__aeabi_dsub>
 800c104:	4652      	mov	r2, sl
 800c106:	465b      	mov	r3, fp
 800c108:	f7f4 fa76 	bl	80005f8 <__aeabi_dmul>
 800c10c:	a337      	add	r3, pc, #220	; (adr r3, 800c1ec <__kernel_sin+0x174>)
 800c10e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c112:	f7f4 f8bb 	bl	800028c <__adddf3>
 800c116:	9b01      	ldr	r3, [sp, #4]
 800c118:	4606      	mov	r6, r0
 800c11a:	460f      	mov	r7, r1
 800c11c:	b9eb      	cbnz	r3, 800c15a <__kernel_sin+0xe2>
 800c11e:	4602      	mov	r2, r0
 800c120:	460b      	mov	r3, r1
 800c122:	4650      	mov	r0, sl
 800c124:	4659      	mov	r1, fp
 800c126:	f7f4 fa67 	bl	80005f8 <__aeabi_dmul>
 800c12a:	a325      	add	r3, pc, #148	; (adr r3, 800c1c0 <__kernel_sin+0x148>)
 800c12c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c130:	f7f4 f8aa 	bl	8000288 <__aeabi_dsub>
 800c134:	4642      	mov	r2, r8
 800c136:	464b      	mov	r3, r9
 800c138:	f7f4 fa5e 	bl	80005f8 <__aeabi_dmul>
 800c13c:	4602      	mov	r2, r0
 800c13e:	460b      	mov	r3, r1
 800c140:	4620      	mov	r0, r4
 800c142:	4629      	mov	r1, r5
 800c144:	f7f4 f8a2 	bl	800028c <__adddf3>
 800c148:	4604      	mov	r4, r0
 800c14a:	460d      	mov	r5, r1
 800c14c:	ec45 4b10 	vmov	d0, r4, r5
 800c150:	b003      	add	sp, #12
 800c152:	ecbd 8b04 	vpop	{d8-d9}
 800c156:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c15a:	4b1b      	ldr	r3, [pc, #108]	; (800c1c8 <__kernel_sin+0x150>)
 800c15c:	ec51 0b18 	vmov	r0, r1, d8
 800c160:	2200      	movs	r2, #0
 800c162:	f7f4 fa49 	bl	80005f8 <__aeabi_dmul>
 800c166:	4632      	mov	r2, r6
 800c168:	ec41 0b19 	vmov	d9, r0, r1
 800c16c:	463b      	mov	r3, r7
 800c16e:	4640      	mov	r0, r8
 800c170:	4649      	mov	r1, r9
 800c172:	f7f4 fa41 	bl	80005f8 <__aeabi_dmul>
 800c176:	4602      	mov	r2, r0
 800c178:	460b      	mov	r3, r1
 800c17a:	ec51 0b19 	vmov	r0, r1, d9
 800c17e:	f7f4 f883 	bl	8000288 <__aeabi_dsub>
 800c182:	4652      	mov	r2, sl
 800c184:	465b      	mov	r3, fp
 800c186:	f7f4 fa37 	bl	80005f8 <__aeabi_dmul>
 800c18a:	ec53 2b18 	vmov	r2, r3, d8
 800c18e:	f7f4 f87b 	bl	8000288 <__aeabi_dsub>
 800c192:	a30b      	add	r3, pc, #44	; (adr r3, 800c1c0 <__kernel_sin+0x148>)
 800c194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c198:	4606      	mov	r6, r0
 800c19a:	460f      	mov	r7, r1
 800c19c:	4640      	mov	r0, r8
 800c19e:	4649      	mov	r1, r9
 800c1a0:	f7f4 fa2a 	bl	80005f8 <__aeabi_dmul>
 800c1a4:	4602      	mov	r2, r0
 800c1a6:	460b      	mov	r3, r1
 800c1a8:	4630      	mov	r0, r6
 800c1aa:	4639      	mov	r1, r7
 800c1ac:	f7f4 f86e 	bl	800028c <__adddf3>
 800c1b0:	4602      	mov	r2, r0
 800c1b2:	460b      	mov	r3, r1
 800c1b4:	4620      	mov	r0, r4
 800c1b6:	4629      	mov	r1, r5
 800c1b8:	f7f4 f866 	bl	8000288 <__aeabi_dsub>
 800c1bc:	e7c4      	b.n	800c148 <__kernel_sin+0xd0>
 800c1be:	bf00      	nop
 800c1c0:	55555549 	.word	0x55555549
 800c1c4:	3fc55555 	.word	0x3fc55555
 800c1c8:	3fe00000 	.word	0x3fe00000
 800c1cc:	5acfd57c 	.word	0x5acfd57c
 800c1d0:	3de5d93a 	.word	0x3de5d93a
 800c1d4:	8a2b9ceb 	.word	0x8a2b9ceb
 800c1d8:	3e5ae5e6 	.word	0x3e5ae5e6
 800c1dc:	57b1fe7d 	.word	0x57b1fe7d
 800c1e0:	3ec71de3 	.word	0x3ec71de3
 800c1e4:	19c161d5 	.word	0x19c161d5
 800c1e8:	3f2a01a0 	.word	0x3f2a01a0
 800c1ec:	1110f8a6 	.word	0x1110f8a6
 800c1f0:	3f811111 	.word	0x3f811111

0800c1f4 <with_errno>:
 800c1f4:	b570      	push	{r4, r5, r6, lr}
 800c1f6:	4604      	mov	r4, r0
 800c1f8:	460d      	mov	r5, r1
 800c1fa:	4616      	mov	r6, r2
 800c1fc:	f7fd fd76 	bl	8009cec <__errno>
 800c200:	4629      	mov	r1, r5
 800c202:	6006      	str	r6, [r0, #0]
 800c204:	4620      	mov	r0, r4
 800c206:	bd70      	pop	{r4, r5, r6, pc}

0800c208 <xflow>:
 800c208:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c20a:	4614      	mov	r4, r2
 800c20c:	461d      	mov	r5, r3
 800c20e:	b108      	cbz	r0, 800c214 <xflow+0xc>
 800c210:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800c214:	e9cd 2300 	strd	r2, r3, [sp]
 800c218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c21c:	4620      	mov	r0, r4
 800c21e:	4629      	mov	r1, r5
 800c220:	f7f4 f9ea 	bl	80005f8 <__aeabi_dmul>
 800c224:	2222      	movs	r2, #34	; 0x22
 800c226:	b003      	add	sp, #12
 800c228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c22c:	f7ff bfe2 	b.w	800c1f4 <with_errno>

0800c230 <__math_uflow>:
 800c230:	b508      	push	{r3, lr}
 800c232:	2200      	movs	r2, #0
 800c234:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800c238:	f7ff ffe6 	bl	800c208 <xflow>
 800c23c:	ec41 0b10 	vmov	d0, r0, r1
 800c240:	bd08      	pop	{r3, pc}

0800c242 <__math_oflow>:
 800c242:	b508      	push	{r3, lr}
 800c244:	2200      	movs	r2, #0
 800c246:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800c24a:	f7ff ffdd 	bl	800c208 <xflow>
 800c24e:	ec41 0b10 	vmov	d0, r0, r1
 800c252:	bd08      	pop	{r3, pc}

0800c254 <fabs>:
 800c254:	ec51 0b10 	vmov	r0, r1, d0
 800c258:	ee10 2a10 	vmov	r2, s0
 800c25c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800c260:	ec43 2b10 	vmov	d0, r2, r3
 800c264:	4770      	bx	lr

0800c266 <finite>:
 800c266:	b082      	sub	sp, #8
 800c268:	ed8d 0b00 	vstr	d0, [sp]
 800c26c:	9801      	ldr	r0, [sp, #4]
 800c26e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800c272:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800c276:	0fc0      	lsrs	r0, r0, #31
 800c278:	b002      	add	sp, #8
 800c27a:	4770      	bx	lr
 800c27c:	0000      	movs	r0, r0
	...

0800c280 <floor>:
 800c280:	ec51 0b10 	vmov	r0, r1, d0
 800c284:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c288:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800c28c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800c290:	2e13      	cmp	r6, #19
 800c292:	ee10 5a10 	vmov	r5, s0
 800c296:	ee10 8a10 	vmov	r8, s0
 800c29a:	460c      	mov	r4, r1
 800c29c:	dc32      	bgt.n	800c304 <floor+0x84>
 800c29e:	2e00      	cmp	r6, #0
 800c2a0:	da14      	bge.n	800c2cc <floor+0x4c>
 800c2a2:	a333      	add	r3, pc, #204	; (adr r3, 800c370 <floor+0xf0>)
 800c2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a8:	f7f3 fff0 	bl	800028c <__adddf3>
 800c2ac:	2200      	movs	r2, #0
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	f7f4 fc32 	bl	8000b18 <__aeabi_dcmpgt>
 800c2b4:	b138      	cbz	r0, 800c2c6 <floor+0x46>
 800c2b6:	2c00      	cmp	r4, #0
 800c2b8:	da57      	bge.n	800c36a <floor+0xea>
 800c2ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c2be:	431d      	orrs	r5, r3
 800c2c0:	d001      	beq.n	800c2c6 <floor+0x46>
 800c2c2:	4c2d      	ldr	r4, [pc, #180]	; (800c378 <floor+0xf8>)
 800c2c4:	2500      	movs	r5, #0
 800c2c6:	4621      	mov	r1, r4
 800c2c8:	4628      	mov	r0, r5
 800c2ca:	e025      	b.n	800c318 <floor+0x98>
 800c2cc:	4f2b      	ldr	r7, [pc, #172]	; (800c37c <floor+0xfc>)
 800c2ce:	4137      	asrs	r7, r6
 800c2d0:	ea01 0307 	and.w	r3, r1, r7
 800c2d4:	4303      	orrs	r3, r0
 800c2d6:	d01f      	beq.n	800c318 <floor+0x98>
 800c2d8:	a325      	add	r3, pc, #148	; (adr r3, 800c370 <floor+0xf0>)
 800c2da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2de:	f7f3 ffd5 	bl	800028c <__adddf3>
 800c2e2:	2200      	movs	r2, #0
 800c2e4:	2300      	movs	r3, #0
 800c2e6:	f7f4 fc17 	bl	8000b18 <__aeabi_dcmpgt>
 800c2ea:	2800      	cmp	r0, #0
 800c2ec:	d0eb      	beq.n	800c2c6 <floor+0x46>
 800c2ee:	2c00      	cmp	r4, #0
 800c2f0:	bfbe      	ittt	lt
 800c2f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800c2f6:	fa43 f606 	asrlt.w	r6, r3, r6
 800c2fa:	19a4      	addlt	r4, r4, r6
 800c2fc:	ea24 0407 	bic.w	r4, r4, r7
 800c300:	2500      	movs	r5, #0
 800c302:	e7e0      	b.n	800c2c6 <floor+0x46>
 800c304:	2e33      	cmp	r6, #51	; 0x33
 800c306:	dd0b      	ble.n	800c320 <floor+0xa0>
 800c308:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800c30c:	d104      	bne.n	800c318 <floor+0x98>
 800c30e:	ee10 2a10 	vmov	r2, s0
 800c312:	460b      	mov	r3, r1
 800c314:	f7f3 ffba 	bl	800028c <__adddf3>
 800c318:	ec41 0b10 	vmov	d0, r0, r1
 800c31c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c320:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800c324:	f04f 33ff 	mov.w	r3, #4294967295
 800c328:	fa23 f707 	lsr.w	r7, r3, r7
 800c32c:	4207      	tst	r7, r0
 800c32e:	d0f3      	beq.n	800c318 <floor+0x98>
 800c330:	a30f      	add	r3, pc, #60	; (adr r3, 800c370 <floor+0xf0>)
 800c332:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c336:	f7f3 ffa9 	bl	800028c <__adddf3>
 800c33a:	2200      	movs	r2, #0
 800c33c:	2300      	movs	r3, #0
 800c33e:	f7f4 fbeb 	bl	8000b18 <__aeabi_dcmpgt>
 800c342:	2800      	cmp	r0, #0
 800c344:	d0bf      	beq.n	800c2c6 <floor+0x46>
 800c346:	2c00      	cmp	r4, #0
 800c348:	da02      	bge.n	800c350 <floor+0xd0>
 800c34a:	2e14      	cmp	r6, #20
 800c34c:	d103      	bne.n	800c356 <floor+0xd6>
 800c34e:	3401      	adds	r4, #1
 800c350:	ea25 0507 	bic.w	r5, r5, r7
 800c354:	e7b7      	b.n	800c2c6 <floor+0x46>
 800c356:	2301      	movs	r3, #1
 800c358:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800c35c:	fa03 f606 	lsl.w	r6, r3, r6
 800c360:	4435      	add	r5, r6
 800c362:	4545      	cmp	r5, r8
 800c364:	bf38      	it	cc
 800c366:	18e4      	addcc	r4, r4, r3
 800c368:	e7f2      	b.n	800c350 <floor+0xd0>
 800c36a:	2500      	movs	r5, #0
 800c36c:	462c      	mov	r4, r5
 800c36e:	e7aa      	b.n	800c2c6 <floor+0x46>
 800c370:	8800759c 	.word	0x8800759c
 800c374:	7e37e43c 	.word	0x7e37e43c
 800c378:	bff00000 	.word	0xbff00000
 800c37c:	000fffff 	.word	0x000fffff

0800c380 <scalbn>:
 800c380:	b570      	push	{r4, r5, r6, lr}
 800c382:	ec55 4b10 	vmov	r4, r5, d0
 800c386:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800c38a:	4606      	mov	r6, r0
 800c38c:	462b      	mov	r3, r5
 800c38e:	b99a      	cbnz	r2, 800c3b8 <scalbn+0x38>
 800c390:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800c394:	4323      	orrs	r3, r4
 800c396:	d036      	beq.n	800c406 <scalbn+0x86>
 800c398:	4b39      	ldr	r3, [pc, #228]	; (800c480 <scalbn+0x100>)
 800c39a:	4629      	mov	r1, r5
 800c39c:	ee10 0a10 	vmov	r0, s0
 800c3a0:	2200      	movs	r2, #0
 800c3a2:	f7f4 f929 	bl	80005f8 <__aeabi_dmul>
 800c3a6:	4b37      	ldr	r3, [pc, #220]	; (800c484 <scalbn+0x104>)
 800c3a8:	429e      	cmp	r6, r3
 800c3aa:	4604      	mov	r4, r0
 800c3ac:	460d      	mov	r5, r1
 800c3ae:	da10      	bge.n	800c3d2 <scalbn+0x52>
 800c3b0:	a32b      	add	r3, pc, #172	; (adr r3, 800c460 <scalbn+0xe0>)
 800c3b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b6:	e03a      	b.n	800c42e <scalbn+0xae>
 800c3b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800c3bc:	428a      	cmp	r2, r1
 800c3be:	d10c      	bne.n	800c3da <scalbn+0x5a>
 800c3c0:	ee10 2a10 	vmov	r2, s0
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	4629      	mov	r1, r5
 800c3c8:	f7f3 ff60 	bl	800028c <__adddf3>
 800c3cc:	4604      	mov	r4, r0
 800c3ce:	460d      	mov	r5, r1
 800c3d0:	e019      	b.n	800c406 <scalbn+0x86>
 800c3d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800c3d6:	460b      	mov	r3, r1
 800c3d8:	3a36      	subs	r2, #54	; 0x36
 800c3da:	4432      	add	r2, r6
 800c3dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800c3e0:	428a      	cmp	r2, r1
 800c3e2:	dd08      	ble.n	800c3f6 <scalbn+0x76>
 800c3e4:	2d00      	cmp	r5, #0
 800c3e6:	a120      	add	r1, pc, #128	; (adr r1, 800c468 <scalbn+0xe8>)
 800c3e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3ec:	da1c      	bge.n	800c428 <scalbn+0xa8>
 800c3ee:	a120      	add	r1, pc, #128	; (adr r1, 800c470 <scalbn+0xf0>)
 800c3f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3f4:	e018      	b.n	800c428 <scalbn+0xa8>
 800c3f6:	2a00      	cmp	r2, #0
 800c3f8:	dd08      	ble.n	800c40c <scalbn+0x8c>
 800c3fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c3fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c402:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c406:	ec45 4b10 	vmov	d0, r4, r5
 800c40a:	bd70      	pop	{r4, r5, r6, pc}
 800c40c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800c410:	da19      	bge.n	800c446 <scalbn+0xc6>
 800c412:	f24c 3350 	movw	r3, #50000	; 0xc350
 800c416:	429e      	cmp	r6, r3
 800c418:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800c41c:	dd0a      	ble.n	800c434 <scalbn+0xb4>
 800c41e:	a112      	add	r1, pc, #72	; (adr r1, 800c468 <scalbn+0xe8>)
 800c420:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c424:	2b00      	cmp	r3, #0
 800c426:	d1e2      	bne.n	800c3ee <scalbn+0x6e>
 800c428:	a30f      	add	r3, pc, #60	; (adr r3, 800c468 <scalbn+0xe8>)
 800c42a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c42e:	f7f4 f8e3 	bl	80005f8 <__aeabi_dmul>
 800c432:	e7cb      	b.n	800c3cc <scalbn+0x4c>
 800c434:	a10a      	add	r1, pc, #40	; (adr r1, 800c460 <scalbn+0xe0>)
 800c436:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c43a:	2b00      	cmp	r3, #0
 800c43c:	d0b8      	beq.n	800c3b0 <scalbn+0x30>
 800c43e:	a10e      	add	r1, pc, #56	; (adr r1, 800c478 <scalbn+0xf8>)
 800c440:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c444:	e7b4      	b.n	800c3b0 <scalbn+0x30>
 800c446:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800c44a:	3236      	adds	r2, #54	; 0x36
 800c44c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800c450:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800c454:	4620      	mov	r0, r4
 800c456:	4b0c      	ldr	r3, [pc, #48]	; (800c488 <scalbn+0x108>)
 800c458:	2200      	movs	r2, #0
 800c45a:	e7e8      	b.n	800c42e <scalbn+0xae>
 800c45c:	f3af 8000 	nop.w
 800c460:	c2f8f359 	.word	0xc2f8f359
 800c464:	01a56e1f 	.word	0x01a56e1f
 800c468:	8800759c 	.word	0x8800759c
 800c46c:	7e37e43c 	.word	0x7e37e43c
 800c470:	8800759c 	.word	0x8800759c
 800c474:	fe37e43c 	.word	0xfe37e43c
 800c478:	c2f8f359 	.word	0xc2f8f359
 800c47c:	81a56e1f 	.word	0x81a56e1f
 800c480:	43500000 	.word	0x43500000
 800c484:	ffff3cb0 	.word	0xffff3cb0
 800c488:	3c900000 	.word	0x3c900000

0800c48c <_init>:
 800c48c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c48e:	bf00      	nop
 800c490:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c492:	bc08      	pop	{r3}
 800c494:	469e      	mov	lr, r3
 800c496:	4770      	bx	lr

0800c498 <_fini>:
 800c498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c49a:	bf00      	nop
 800c49c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c49e:	bc08      	pop	{r3}
 800c4a0:	469e      	mov	lr, r3
 800c4a2:	4770      	bx	lr
