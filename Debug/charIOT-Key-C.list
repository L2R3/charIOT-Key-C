
charIOT-Key-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000d1d8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000790  0800d368  0800d368  0001d368  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800daf8  0800daf8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800daf8  0800daf8  0001daf8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800db00  0800db00  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800db00  0800db00  0001db00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800db04  0800db04  0001db04  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800db08  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000310c  200000a8  0800dbb0  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200031b4  0800dbb0  000231b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00068cf6  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00006104  00000000  00000000  00088dce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004810  00000000  00000000  0008eed8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004568  00000000  00000000  000936e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005fc5  00000000  00000000  00097c50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032962  00000000  00000000  0009dc15  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001057c6  00000000  00000000  000d0577  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d5d3d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0001421c  00000000  00000000  001d5d90  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800d350 	.word	0x0800d350

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800d350 	.word	0x0800d350

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__aeabi_d2iz>:
 8000a1c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a24:	d215      	bcs.n	8000a52 <__aeabi_d2iz+0x36>
 8000a26:	d511      	bpl.n	8000a4c <__aeabi_d2iz+0x30>
 8000a28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a30:	d912      	bls.n	8000a58 <__aeabi_d2iz+0x3c>
 8000a32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a42:	fa23 f002 	lsr.w	r0, r3, r2
 8000a46:	bf18      	it	ne
 8000a48:	4240      	negne	r0, r0
 8000a4a:	4770      	bx	lr
 8000a4c:	f04f 0000 	mov.w	r0, #0
 8000a50:	4770      	bx	lr
 8000a52:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a56:	d105      	bne.n	8000a64 <__aeabi_d2iz+0x48>
 8000a58:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a5c:	bf08      	it	eq
 8000a5e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a62:	4770      	bx	lr
 8000a64:	f04f 0000 	mov.w	r0, #0
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop

08000a6c <__aeabi_uldivmod>:
 8000a6c:	b953      	cbnz	r3, 8000a84 <__aeabi_uldivmod+0x18>
 8000a6e:	b94a      	cbnz	r2, 8000a84 <__aeabi_uldivmod+0x18>
 8000a70:	2900      	cmp	r1, #0
 8000a72:	bf08      	it	eq
 8000a74:	2800      	cmpeq	r0, #0
 8000a76:	bf1c      	itt	ne
 8000a78:	f04f 31ff 	movne.w	r1, #4294967295
 8000a7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000a80:	f000 b974 	b.w	8000d6c <__aeabi_idiv0>
 8000a84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a8c:	f000 f806 	bl	8000a9c <__udivmoddi4>
 8000a90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a98:	b004      	add	sp, #16
 8000a9a:	4770      	bx	lr

08000a9c <__udivmoddi4>:
 8000a9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000aa0:	9d08      	ldr	r5, [sp, #32]
 8000aa2:	4604      	mov	r4, r0
 8000aa4:	468e      	mov	lr, r1
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d14d      	bne.n	8000b46 <__udivmoddi4+0xaa>
 8000aaa:	428a      	cmp	r2, r1
 8000aac:	4694      	mov	ip, r2
 8000aae:	d969      	bls.n	8000b84 <__udivmoddi4+0xe8>
 8000ab0:	fab2 f282 	clz	r2, r2
 8000ab4:	b152      	cbz	r2, 8000acc <__udivmoddi4+0x30>
 8000ab6:	fa01 f302 	lsl.w	r3, r1, r2
 8000aba:	f1c2 0120 	rsb	r1, r2, #32
 8000abe:	fa20 f101 	lsr.w	r1, r0, r1
 8000ac2:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ac6:	ea41 0e03 	orr.w	lr, r1, r3
 8000aca:	4094      	lsls	r4, r2
 8000acc:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad0:	0c21      	lsrs	r1, r4, #16
 8000ad2:	fbbe f6f8 	udiv	r6, lr, r8
 8000ad6:	fa1f f78c 	uxth.w	r7, ip
 8000ada:	fb08 e316 	mls	r3, r8, r6, lr
 8000ade:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000ae2:	fb06 f107 	mul.w	r1, r6, r7
 8000ae6:	4299      	cmp	r1, r3
 8000ae8:	d90a      	bls.n	8000b00 <__udivmoddi4+0x64>
 8000aea:	eb1c 0303 	adds.w	r3, ip, r3
 8000aee:	f106 30ff 	add.w	r0, r6, #4294967295
 8000af2:	f080 811f 	bcs.w	8000d34 <__udivmoddi4+0x298>
 8000af6:	4299      	cmp	r1, r3
 8000af8:	f240 811c 	bls.w	8000d34 <__udivmoddi4+0x298>
 8000afc:	3e02      	subs	r6, #2
 8000afe:	4463      	add	r3, ip
 8000b00:	1a5b      	subs	r3, r3, r1
 8000b02:	b2a4      	uxth	r4, r4
 8000b04:	fbb3 f0f8 	udiv	r0, r3, r8
 8000b08:	fb08 3310 	mls	r3, r8, r0, r3
 8000b0c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b10:	fb00 f707 	mul.w	r7, r0, r7
 8000b14:	42a7      	cmp	r7, r4
 8000b16:	d90a      	bls.n	8000b2e <__udivmoddi4+0x92>
 8000b18:	eb1c 0404 	adds.w	r4, ip, r4
 8000b1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b20:	f080 810a 	bcs.w	8000d38 <__udivmoddi4+0x29c>
 8000b24:	42a7      	cmp	r7, r4
 8000b26:	f240 8107 	bls.w	8000d38 <__udivmoddi4+0x29c>
 8000b2a:	4464      	add	r4, ip
 8000b2c:	3802      	subs	r0, #2
 8000b2e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000b32:	1be4      	subs	r4, r4, r7
 8000b34:	2600      	movs	r6, #0
 8000b36:	b11d      	cbz	r5, 8000b40 <__udivmoddi4+0xa4>
 8000b38:	40d4      	lsrs	r4, r2
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	e9c5 4300 	strd	r4, r3, [r5]
 8000b40:	4631      	mov	r1, r6
 8000b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b46:	428b      	cmp	r3, r1
 8000b48:	d909      	bls.n	8000b5e <__udivmoddi4+0xc2>
 8000b4a:	2d00      	cmp	r5, #0
 8000b4c:	f000 80ef 	beq.w	8000d2e <__udivmoddi4+0x292>
 8000b50:	2600      	movs	r6, #0
 8000b52:	e9c5 0100 	strd	r0, r1, [r5]
 8000b56:	4630      	mov	r0, r6
 8000b58:	4631      	mov	r1, r6
 8000b5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b5e:	fab3 f683 	clz	r6, r3
 8000b62:	2e00      	cmp	r6, #0
 8000b64:	d14a      	bne.n	8000bfc <__udivmoddi4+0x160>
 8000b66:	428b      	cmp	r3, r1
 8000b68:	d302      	bcc.n	8000b70 <__udivmoddi4+0xd4>
 8000b6a:	4282      	cmp	r2, r0
 8000b6c:	f200 80f9 	bhi.w	8000d62 <__udivmoddi4+0x2c6>
 8000b70:	1a84      	subs	r4, r0, r2
 8000b72:	eb61 0303 	sbc.w	r3, r1, r3
 8000b76:	2001      	movs	r0, #1
 8000b78:	469e      	mov	lr, r3
 8000b7a:	2d00      	cmp	r5, #0
 8000b7c:	d0e0      	beq.n	8000b40 <__udivmoddi4+0xa4>
 8000b7e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b82:	e7dd      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000b84:	b902      	cbnz	r2, 8000b88 <__udivmoddi4+0xec>
 8000b86:	deff      	udf	#255	; 0xff
 8000b88:	fab2 f282 	clz	r2, r2
 8000b8c:	2a00      	cmp	r2, #0
 8000b8e:	f040 8092 	bne.w	8000cb6 <__udivmoddi4+0x21a>
 8000b92:	eba1 010c 	sub.w	r1, r1, ip
 8000b96:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b9a:	fa1f fe8c 	uxth.w	lr, ip
 8000b9e:	2601      	movs	r6, #1
 8000ba0:	0c20      	lsrs	r0, r4, #16
 8000ba2:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ba6:	fb07 1113 	mls	r1, r7, r3, r1
 8000baa:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bae:	fb0e f003 	mul.w	r0, lr, r3
 8000bb2:	4288      	cmp	r0, r1
 8000bb4:	d908      	bls.n	8000bc8 <__udivmoddi4+0x12c>
 8000bb6:	eb1c 0101 	adds.w	r1, ip, r1
 8000bba:	f103 38ff 	add.w	r8, r3, #4294967295
 8000bbe:	d202      	bcs.n	8000bc6 <__udivmoddi4+0x12a>
 8000bc0:	4288      	cmp	r0, r1
 8000bc2:	f200 80cb 	bhi.w	8000d5c <__udivmoddi4+0x2c0>
 8000bc6:	4643      	mov	r3, r8
 8000bc8:	1a09      	subs	r1, r1, r0
 8000bca:	b2a4      	uxth	r4, r4
 8000bcc:	fbb1 f0f7 	udiv	r0, r1, r7
 8000bd0:	fb07 1110 	mls	r1, r7, r0, r1
 8000bd4:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000bd8:	fb0e fe00 	mul.w	lr, lr, r0
 8000bdc:	45a6      	cmp	lr, r4
 8000bde:	d908      	bls.n	8000bf2 <__udivmoddi4+0x156>
 8000be0:	eb1c 0404 	adds.w	r4, ip, r4
 8000be4:	f100 31ff 	add.w	r1, r0, #4294967295
 8000be8:	d202      	bcs.n	8000bf0 <__udivmoddi4+0x154>
 8000bea:	45a6      	cmp	lr, r4
 8000bec:	f200 80bb 	bhi.w	8000d66 <__udivmoddi4+0x2ca>
 8000bf0:	4608      	mov	r0, r1
 8000bf2:	eba4 040e 	sub.w	r4, r4, lr
 8000bf6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bfa:	e79c      	b.n	8000b36 <__udivmoddi4+0x9a>
 8000bfc:	f1c6 0720 	rsb	r7, r6, #32
 8000c00:	40b3      	lsls	r3, r6
 8000c02:	fa22 fc07 	lsr.w	ip, r2, r7
 8000c06:	ea4c 0c03 	orr.w	ip, ip, r3
 8000c0a:	fa20 f407 	lsr.w	r4, r0, r7
 8000c0e:	fa01 f306 	lsl.w	r3, r1, r6
 8000c12:	431c      	orrs	r4, r3
 8000c14:	40f9      	lsrs	r1, r7
 8000c16:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000c1a:	fa00 f306 	lsl.w	r3, r0, r6
 8000c1e:	fbb1 f8f9 	udiv	r8, r1, r9
 8000c22:	0c20      	lsrs	r0, r4, #16
 8000c24:	fa1f fe8c 	uxth.w	lr, ip
 8000c28:	fb09 1118 	mls	r1, r9, r8, r1
 8000c2c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000c30:	fb08 f00e 	mul.w	r0, r8, lr
 8000c34:	4288      	cmp	r0, r1
 8000c36:	fa02 f206 	lsl.w	r2, r2, r6
 8000c3a:	d90b      	bls.n	8000c54 <__udivmoddi4+0x1b8>
 8000c3c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c40:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c44:	f080 8088 	bcs.w	8000d58 <__udivmoddi4+0x2bc>
 8000c48:	4288      	cmp	r0, r1
 8000c4a:	f240 8085 	bls.w	8000d58 <__udivmoddi4+0x2bc>
 8000c4e:	f1a8 0802 	sub.w	r8, r8, #2
 8000c52:	4461      	add	r1, ip
 8000c54:	1a09      	subs	r1, r1, r0
 8000c56:	b2a4      	uxth	r4, r4
 8000c58:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c5c:	fb09 1110 	mls	r1, r9, r0, r1
 8000c60:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c64:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c68:	458e      	cmp	lr, r1
 8000c6a:	d908      	bls.n	8000c7e <__udivmoddi4+0x1e2>
 8000c6c:	eb1c 0101 	adds.w	r1, ip, r1
 8000c70:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c74:	d26c      	bcs.n	8000d50 <__udivmoddi4+0x2b4>
 8000c76:	458e      	cmp	lr, r1
 8000c78:	d96a      	bls.n	8000d50 <__udivmoddi4+0x2b4>
 8000c7a:	3802      	subs	r0, #2
 8000c7c:	4461      	add	r1, ip
 8000c7e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c82:	fba0 9402 	umull	r9, r4, r0, r2
 8000c86:	eba1 010e 	sub.w	r1, r1, lr
 8000c8a:	42a1      	cmp	r1, r4
 8000c8c:	46c8      	mov	r8, r9
 8000c8e:	46a6      	mov	lr, r4
 8000c90:	d356      	bcc.n	8000d40 <__udivmoddi4+0x2a4>
 8000c92:	d053      	beq.n	8000d3c <__udivmoddi4+0x2a0>
 8000c94:	b15d      	cbz	r5, 8000cae <__udivmoddi4+0x212>
 8000c96:	ebb3 0208 	subs.w	r2, r3, r8
 8000c9a:	eb61 010e 	sbc.w	r1, r1, lr
 8000c9e:	fa01 f707 	lsl.w	r7, r1, r7
 8000ca2:	fa22 f306 	lsr.w	r3, r2, r6
 8000ca6:	40f1      	lsrs	r1, r6
 8000ca8:	431f      	orrs	r7, r3
 8000caa:	e9c5 7100 	strd	r7, r1, [r5]
 8000cae:	2600      	movs	r6, #0
 8000cb0:	4631      	mov	r1, r6
 8000cb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cb6:	f1c2 0320 	rsb	r3, r2, #32
 8000cba:	40d8      	lsrs	r0, r3
 8000cbc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cc0:	fa21 f303 	lsr.w	r3, r1, r3
 8000cc4:	4091      	lsls	r1, r2
 8000cc6:	4301      	orrs	r1, r0
 8000cc8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ccc:	fa1f fe8c 	uxth.w	lr, ip
 8000cd0:	fbb3 f0f7 	udiv	r0, r3, r7
 8000cd4:	fb07 3610 	mls	r6, r7, r0, r3
 8000cd8:	0c0b      	lsrs	r3, r1, #16
 8000cda:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000cde:	fb00 f60e 	mul.w	r6, r0, lr
 8000ce2:	429e      	cmp	r6, r3
 8000ce4:	fa04 f402 	lsl.w	r4, r4, r2
 8000ce8:	d908      	bls.n	8000cfc <__udivmoddi4+0x260>
 8000cea:	eb1c 0303 	adds.w	r3, ip, r3
 8000cee:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cf2:	d22f      	bcs.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf4:	429e      	cmp	r6, r3
 8000cf6:	d92d      	bls.n	8000d54 <__udivmoddi4+0x2b8>
 8000cf8:	3802      	subs	r0, #2
 8000cfa:	4463      	add	r3, ip
 8000cfc:	1b9b      	subs	r3, r3, r6
 8000cfe:	b289      	uxth	r1, r1
 8000d00:	fbb3 f6f7 	udiv	r6, r3, r7
 8000d04:	fb07 3316 	mls	r3, r7, r6, r3
 8000d08:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d0c:	fb06 f30e 	mul.w	r3, r6, lr
 8000d10:	428b      	cmp	r3, r1
 8000d12:	d908      	bls.n	8000d26 <__udivmoddi4+0x28a>
 8000d14:	eb1c 0101 	adds.w	r1, ip, r1
 8000d18:	f106 38ff 	add.w	r8, r6, #4294967295
 8000d1c:	d216      	bcs.n	8000d4c <__udivmoddi4+0x2b0>
 8000d1e:	428b      	cmp	r3, r1
 8000d20:	d914      	bls.n	8000d4c <__udivmoddi4+0x2b0>
 8000d22:	3e02      	subs	r6, #2
 8000d24:	4461      	add	r1, ip
 8000d26:	1ac9      	subs	r1, r1, r3
 8000d28:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000d2c:	e738      	b.n	8000ba0 <__udivmoddi4+0x104>
 8000d2e:	462e      	mov	r6, r5
 8000d30:	4628      	mov	r0, r5
 8000d32:	e705      	b.n	8000b40 <__udivmoddi4+0xa4>
 8000d34:	4606      	mov	r6, r0
 8000d36:	e6e3      	b.n	8000b00 <__udivmoddi4+0x64>
 8000d38:	4618      	mov	r0, r3
 8000d3a:	e6f8      	b.n	8000b2e <__udivmoddi4+0x92>
 8000d3c:	454b      	cmp	r3, r9
 8000d3e:	d2a9      	bcs.n	8000c94 <__udivmoddi4+0x1f8>
 8000d40:	ebb9 0802 	subs.w	r8, r9, r2
 8000d44:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d48:	3801      	subs	r0, #1
 8000d4a:	e7a3      	b.n	8000c94 <__udivmoddi4+0x1f8>
 8000d4c:	4646      	mov	r6, r8
 8000d4e:	e7ea      	b.n	8000d26 <__udivmoddi4+0x28a>
 8000d50:	4620      	mov	r0, r4
 8000d52:	e794      	b.n	8000c7e <__udivmoddi4+0x1e2>
 8000d54:	4640      	mov	r0, r8
 8000d56:	e7d1      	b.n	8000cfc <__udivmoddi4+0x260>
 8000d58:	46d0      	mov	r8, sl
 8000d5a:	e77b      	b.n	8000c54 <__udivmoddi4+0x1b8>
 8000d5c:	3b02      	subs	r3, #2
 8000d5e:	4461      	add	r1, ip
 8000d60:	e732      	b.n	8000bc8 <__udivmoddi4+0x12c>
 8000d62:	4630      	mov	r0, r6
 8000d64:	e709      	b.n	8000b7a <__udivmoddi4+0xde>
 8000d66:	4464      	add	r4, ip
 8000d68:	3802      	subs	r0, #2
 8000d6a:	e742      	b.n	8000bf2 <__udivmoddi4+0x156>

08000d6c <__aeabi_idiv0>:
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop

08000d70 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b084      	sub	sp, #16
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	7c1b      	ldrb	r3, [r3, #16]
 8000d7e:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000d86:	461a      	mov	r2, r3
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	fb02 f303 	mul.w	r3, r2, r3
 8000d8e:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000d90:	68fb      	ldr	r3, [r7, #12]
 8000d92:	00db      	lsls	r3, r3, #3
 8000d94:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f00b fe06 	bl	800c9b0 <memset>
}
 8000da4:	bf00      	nop
 8000da6:	3710      	adds	r7, #16
 8000da8:	46bd      	mov	sp, r7
 8000daa:	bd80      	pop	{r7, pc}

08000dac <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b086      	sub	sp, #24
 8000db0:	af02      	add	r7, sp, #8
 8000db2:	6078      	str	r0, [r7, #4]
 8000db4:	460b      	mov	r3, r1
 8000db6:	70fb      	strb	r3, [r7, #3]
 8000db8:	4613      	mov	r3, r2
 8000dba:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	7c1b      	ldrb	r3, [r3, #16]
 8000dc2:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000dc4:	78fb      	ldrb	r3, [r7, #3]
 8000dc6:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000dcc:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000dce:	7bfb      	ldrb	r3, [r7, #15]
 8000dd0:	b29b      	uxth	r3, r3
 8000dd2:	89ba      	ldrh	r2, [r7, #12]
 8000dd4:	fb12 f303 	smulbb	r3, r2, r3
 8000dd8:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000dda:	89bb      	ldrh	r3, [r7, #12]
 8000ddc:	00db      	lsls	r3, r3, #3
 8000dde:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000de0:	89bb      	ldrh	r3, [r7, #12]
 8000de2:	68ba      	ldr	r2, [r7, #8]
 8000de4:	4413      	add	r3, r2
 8000de6:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000de8:	7bf9      	ldrb	r1, [r7, #15]
 8000dea:	78ba      	ldrb	r2, [r7, #2]
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	9300      	str	r3, [sp, #0]
 8000df0:	460b      	mov	r3, r1
 8000df2:	2100      	movs	r1, #0
 8000df4:	6878      	ldr	r0, [r7, #4]
 8000df6:	f001 fc96 	bl	8002726 <u8x8_DrawTile>
}
 8000dfa:	bf00      	nop
 8000dfc:	3710      	adds	r7, #16
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	bd80      	pop	{r7, pc}

08000e02 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000e02:	b580      	push	{r7, lr}
 8000e04:	b084      	sub	sp, #16
 8000e06:	af00      	add	r7, sp, #0
 8000e08:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000e0a:	2300      	movs	r3, #0
 8000e0c:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000e14:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000e1c:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	7c5b      	ldrb	r3, [r3, #17]
 8000e24:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000e26:	7bba      	ldrb	r2, [r7, #14]
 8000e28:	7bfb      	ldrb	r3, [r7, #15]
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	6878      	ldr	r0, [r7, #4]
 8000e2e:	f7ff ffbd 	bl	8000dac <u8g2_send_tile_row>
    src_row++;
 8000e32:	7bfb      	ldrb	r3, [r7, #15]
 8000e34:	3301      	adds	r3, #1
 8000e36:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000e38:	7bbb      	ldrb	r3, [r7, #14]
 8000e3a:	3301      	adds	r3, #1
 8000e3c:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8000e3e:	7bfa      	ldrb	r2, [r7, #15]
 8000e40:	7b7b      	ldrb	r3, [r7, #13]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	d203      	bcs.n	8000e4e <u8g2_send_buffer+0x4c>
 8000e46:	7bba      	ldrb	r2, [r7, #14]
 8000e48:	7b3b      	ldrb	r3, [r7, #12]
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	d3eb      	bcc.n	8000e26 <u8g2_send_buffer+0x24>
}
 8000e4e:	bf00      	nop
 8000e50:	3710      	adds	r7, #16
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000e56:	b580      	push	{r7, lr}
 8000e58:	b082      	sub	sp, #8
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f7ff ffcf 	bl	8000e02 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f001 fcaf 	bl	80027c8 <u8x8_RefreshDisplay>
}
 8000e6a:	bf00      	nop
 8000e6c:	3708      	adds	r7, #8
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	bd80      	pop	{r7, pc}

08000e72 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8000e72:	b580      	push	{r7, lr}
 8000e74:	b082      	sub	sp, #8
 8000e76:	af00      	add	r7, sp, #0
 8000e78:	6078      	str	r0, [r7, #4]
 8000e7a:	460b      	mov	r3, r1
 8000e7c:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	78fa      	ldrb	r2, [r7, #3]
 8000e82:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e94:	685b      	ldr	r3, [r3, #4]
 8000e96:	6878      	ldr	r0, [r7, #4]
 8000e98:	4798      	blx	r3
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000eb0:	2b00      	cmp	r3, #0
 8000eb2:	d002      	beq.n	8000eba <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8000eb4:	6878      	ldr	r0, [r7, #4]
 8000eb6:	f7ff ff5b 	bl	8000d70 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8000eba:	2100      	movs	r1, #0
 8000ebc:	6878      	ldr	r0, [r7, #4]
 8000ebe:	f7ff ffd8 	bl	8000e72 <u8g2_SetBufferCurrTileRow>
}
 8000ec2:	bf00      	nop
 8000ec4:	3708      	adds	r7, #8
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bd80      	pop	{r7, pc}

08000eca <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8000eca:	b580      	push	{r7, lr}
 8000ecc:	b084      	sub	sp, #16
 8000ece:	af00      	add	r7, sp, #0
 8000ed0:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 8000ed2:	6878      	ldr	r0, [r7, #4]
 8000ed4:	f7ff ff95 	bl	8000e02 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000ede:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 8000ee0:	687b      	ldr	r3, [r7, #4]
 8000ee2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8000ee6:	7bfb      	ldrb	r3, [r7, #15]
 8000ee8:	4413      	add	r3, r2
 8000eea:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	7c5b      	ldrb	r3, [r3, #17]
 8000ef2:	7bfa      	ldrb	r2, [r7, #15]
 8000ef4:	429a      	cmp	r2, r3
 8000ef6:	d304      	bcc.n	8000f02 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8000ef8:	6878      	ldr	r0, [r7, #4]
 8000efa:	f001 fc65 	bl	80027c8 <u8x8_RefreshDisplay>
    return 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	e00d      	b.n	8000f1e <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d002      	beq.n	8000f12 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8000f0c:	6878      	ldr	r0, [r7, #4]
 8000f0e:	f7ff ff2f 	bl	8000d70 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 8000f12:	7bfb      	ldrb	r3, [r7, #15]
 8000f14:	4619      	mov	r1, r3
 8000f16:	6878      	ldr	r0, [r7, #4]
 8000f18:	f7ff ffab 	bl	8000e72 <u8g2_SetBufferCurrTileRow>
  return 1;
 8000f1c:	2301      	movs	r3, #1
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	3710      	adds	r7, #16
 8000f22:	46bd      	mov	sp, r7
 8000f24:	bd80      	pop	{r7, pc}

08000f26 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8000f26:	b580      	push	{r7, lr}
 8000f28:	b082      	sub	sp, #8
 8000f2a:	af00      	add	r7, sp, #0
 8000f2c:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8000f2e:	6878      	ldr	r0, [r7, #4]
 8000f30:	f7ff ffb7 	bl	8000ea2 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8000f34:	6878      	ldr	r0, [r7, #4]
 8000f36:	f7ff ffc8 	bl	8000eca <u8g2_NextPage>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d1f9      	bne.n	8000f34 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 8000f40:	2100      	movs	r1, #0
 8000f42:	6878      	ldr	r0, [r7, #4]
 8000f44:	f7ff ff95 	bl	8000e72 <u8g2_SetBufferCurrTileRow>
}
 8000f48:	bf00      	nop
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	2204      	movs	r2, #4
 8000f5c:	701a      	strb	r2, [r3, #0]
  return buf;
 8000f5e:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <u8g2_m_16_4_f+0x1c>)
  #endif
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	370c      	adds	r7, #12
 8000f64:	46bd      	mov	sp, r7
 8000f66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6a:	4770      	bx	lr
 8000f6c:	200000c4 	.word	0x200000c4

08000f70 <u8g2_Setup_ssd1305_i2c_128x32_noname_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1305 f */
void u8g2_Setup_ssd1305_i2c_128x32_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b088      	sub	sp, #32
 8000f74:	af02      	add	r7, sp, #8
 8000f76:	60f8      	str	r0, [r7, #12]
 8000f78:	60b9      	str	r1, [r7, #8]
 8000f7a:	607a      	str	r2, [r7, #4]
 8000f7c:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1305_128x32_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	9300      	str	r3, [sp, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a0b      	ldr	r2, [pc, #44]	; (8000fb4 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x44>)
 8000f86:	490c      	ldr	r1, [pc, #48]	; (8000fb8 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x48>)
 8000f88:	68f8      	ldr	r0, [r7, #12]
 8000f8a:	f001 fc7d 	bl	8002888 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 8000f8e:	f107 0313 	add.w	r3, r7, #19
 8000f92:	4618      	mov	r0, r3
 8000f94:	f7ff ffdc 	bl	8000f50 <u8g2_m_16_4_f>
 8000f98:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 8000f9a:	7cfa      	ldrb	r2, [r7, #19]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
 8000f9e:	9300      	str	r3, [sp, #0]
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x4c>)
 8000fa2:	6979      	ldr	r1, [r7, #20]
 8000fa4:	68f8      	ldr	r0, [r7, #12]
 8000fa6:	f000 ffc4 	bl	8001f32 <u8g2_SetupBuffer>
}
 8000faa:	bf00      	nop
 8000fac:	3718      	adds	r7, #24
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}
 8000fb2:	bf00      	nop
 8000fb4:	0800241d 	.word	0x0800241d
 8000fb8:	080025dd 	.word	0x080025dd
 8000fbc:	08001db5 	.word	0x08001db5

08000fc0 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8000fc0:	b480      	push	{r7}
 8000fc2:	b083      	sub	sp, #12
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
 8000fc8:	460b      	mov	r3, r1
 8000fca:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8000fcc:	78fb      	ldrb	r3, [r7, #3]
 8000fce:	687a      	ldr	r2, [r7, #4]
 8000fd0:	4413      	add	r3, r2
 8000fd2:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	781b      	ldrb	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	370c      	adds	r7, #12
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe2:	4770      	bx	lr

08000fe4 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b085      	sub	sp, #20
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	460b      	mov	r3, r1
 8000fee:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8000ff0:	78fb      	ldrb	r3, [r7, #3]
 8000ff2:	687a      	ldr	r2, [r7, #4]
 8000ff4:	4413      	add	r3, r2
 8000ff6:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	781b      	ldrb	r3, [r3, #0]
 8000ffc:	81fb      	strh	r3, [r7, #14]
    font++;
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	3301      	adds	r3, #1
 8001002:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001004:	89fb      	ldrh	r3, [r7, #14]
 8001006:	021b      	lsls	r3, r3, #8
 8001008:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	781b      	ldrb	r3, [r3, #0]
 800100e:	b29a      	uxth	r2, r3
 8001010:	89fb      	ldrh	r3, [r7, #14]
 8001012:	4413      	add	r3, r2
 8001014:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001016:	89fb      	ldrh	r3, [r7, #14]
}
 8001018:	4618      	mov	r0, r3
 800101a:	3714      	adds	r7, #20
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr

08001024 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001024:	b580      	push	{r7, lr}
 8001026:	b082      	sub	sp, #8
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800102e:	2100      	movs	r1, #0
 8001030:	6838      	ldr	r0, [r7, #0]
 8001032:	f7ff ffc5 	bl	8000fc0 <u8g2_font_get_byte>
 8001036:	4603      	mov	r3, r0
 8001038:	461a      	mov	r2, r3
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800103e:	2101      	movs	r1, #1
 8001040:	6838      	ldr	r0, [r7, #0]
 8001042:	f7ff ffbd 	bl	8000fc0 <u8g2_font_get_byte>
 8001046:	4603      	mov	r3, r0
 8001048:	461a      	mov	r2, r3
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800104e:	2102      	movs	r1, #2
 8001050:	6838      	ldr	r0, [r7, #0]
 8001052:	f7ff ffb5 	bl	8000fc0 <u8g2_font_get_byte>
 8001056:	4603      	mov	r3, r0
 8001058:	461a      	mov	r2, r3
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800105e:	2103      	movs	r1, #3
 8001060:	6838      	ldr	r0, [r7, #0]
 8001062:	f7ff ffad 	bl	8000fc0 <u8g2_font_get_byte>
 8001066:	4603      	mov	r3, r0
 8001068:	461a      	mov	r2, r3
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 800106e:	2104      	movs	r1, #4
 8001070:	6838      	ldr	r0, [r7, #0]
 8001072:	f7ff ffa5 	bl	8000fc0 <u8g2_font_get_byte>
 8001076:	4603      	mov	r3, r0
 8001078:	461a      	mov	r2, r3
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 800107e:	2105      	movs	r1, #5
 8001080:	6838      	ldr	r0, [r7, #0]
 8001082:	f7ff ff9d 	bl	8000fc0 <u8g2_font_get_byte>
 8001086:	4603      	mov	r3, r0
 8001088:	461a      	mov	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 800108e:	2106      	movs	r1, #6
 8001090:	6838      	ldr	r0, [r7, #0]
 8001092:	f7ff ff95 	bl	8000fc0 <u8g2_font_get_byte>
 8001096:	4603      	mov	r3, r0
 8001098:	461a      	mov	r2, r3
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 800109e:	2107      	movs	r1, #7
 80010a0:	6838      	ldr	r0, [r7, #0]
 80010a2:	f7ff ff8d 	bl	8000fc0 <u8g2_font_get_byte>
 80010a6:	4603      	mov	r3, r0
 80010a8:	461a      	mov	r2, r3
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80010ae:	2108      	movs	r1, #8
 80010b0:	6838      	ldr	r0, [r7, #0]
 80010b2:	f7ff ff85 	bl	8000fc0 <u8g2_font_get_byte>
 80010b6:	4603      	mov	r3, r0
 80010b8:	461a      	mov	r2, r3
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80010be:	2109      	movs	r1, #9
 80010c0:	6838      	ldr	r0, [r7, #0]
 80010c2:	f7ff ff7d 	bl	8000fc0 <u8g2_font_get_byte>
 80010c6:	4603      	mov	r3, r0
 80010c8:	b25a      	sxtb	r2, r3
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 80010ce:	210a      	movs	r1, #10
 80010d0:	6838      	ldr	r0, [r7, #0]
 80010d2:	f7ff ff75 	bl	8000fc0 <u8g2_font_get_byte>
 80010d6:	4603      	mov	r3, r0
 80010d8:	b25a      	sxtb	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 80010de:	210b      	movs	r1, #11
 80010e0:	6838      	ldr	r0, [r7, #0]
 80010e2:	f7ff ff6d 	bl	8000fc0 <u8g2_font_get_byte>
 80010e6:	4603      	mov	r3, r0
 80010e8:	b25a      	sxtb	r2, r3
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 80010ee:	210c      	movs	r1, #12
 80010f0:	6838      	ldr	r0, [r7, #0]
 80010f2:	f7ff ff65 	bl	8000fc0 <u8g2_font_get_byte>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b25a      	sxtb	r2, r3
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 80010fe:	210d      	movs	r1, #13
 8001100:	6838      	ldr	r0, [r7, #0]
 8001102:	f7ff ff5d 	bl	8000fc0 <u8g2_font_get_byte>
 8001106:	4603      	mov	r3, r0
 8001108:	b25a      	sxtb	r2, r3
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800110e:	210e      	movs	r1, #14
 8001110:	6838      	ldr	r0, [r7, #0]
 8001112:	f7ff ff55 	bl	8000fc0 <u8g2_font_get_byte>
 8001116:	4603      	mov	r3, r0
 8001118:	b25a      	sxtb	r2, r3
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800111e:	210f      	movs	r1, #15
 8001120:	6838      	ldr	r0, [r7, #0]
 8001122:	f7ff ff4d 	bl	8000fc0 <u8g2_font_get_byte>
 8001126:	4603      	mov	r3, r0
 8001128:	b25a      	sxtb	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800112e:	2110      	movs	r1, #16
 8001130:	6838      	ldr	r0, [r7, #0]
 8001132:	f7ff ff45 	bl	8000fc0 <u8g2_font_get_byte>
 8001136:	4603      	mov	r3, r0
 8001138:	b25a      	sxtb	r2, r3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800113e:	2111      	movs	r1, #17
 8001140:	6838      	ldr	r0, [r7, #0]
 8001142:	f7ff ff4f 	bl	8000fe4 <u8g2_font_get_word>
 8001146:	4603      	mov	r3, r0
 8001148:	461a      	mov	r2, r3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800114e:	2113      	movs	r1, #19
 8001150:	6838      	ldr	r0, [r7, #0]
 8001152:	f7ff ff47 	bl	8000fe4 <u8g2_font_get_word>
 8001156:	4603      	mov	r3, r0
 8001158:	461a      	mov	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800115e:	2115      	movs	r1, #21
 8001160:	6838      	ldr	r0, [r7, #0]
 8001162:	f7ff ff3f 	bl	8000fe4 <u8g2_font_get_word>
 8001166:	4603      	mov	r3, r0
 8001168:	461a      	mov	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	82da      	strh	r2, [r3, #22]
#endif
}
 800116e:	bf00      	nop
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 8001176:	b480      	push	{r7}
 8001178:	b085      	sub	sp, #20
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	460b      	mov	r3, r1
 8001180:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	7b1b      	ldrb	r3, [r3, #12]
 8001186:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	781b      	ldrb	r3, [r3, #0]
 800118e:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 8001190:	7bfa      	ldrb	r2, [r7, #15]
 8001192:	7b7b      	ldrb	r3, [r7, #13]
 8001194:	fa42 f303 	asr.w	r3, r2, r3
 8001198:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 800119a:	7b7b      	ldrb	r3, [r7, #13]
 800119c:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 800119e:	7bba      	ldrb	r2, [r7, #14]
 80011a0:	78fb      	ldrb	r3, [r7, #3]
 80011a2:	4413      	add	r3, r2
 80011a4:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80011a6:	7bbb      	ldrb	r3, [r7, #14]
 80011a8:	2b07      	cmp	r3, #7
 80011aa:	d91a      	bls.n	80011e2 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80011ac:	2308      	movs	r3, #8
 80011ae:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80011b0:	7b3a      	ldrb	r2, [r7, #12]
 80011b2:	7b7b      	ldrb	r3, [r7, #13]
 80011b4:	1ad3      	subs	r3, r2, r3
 80011b6:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	1c5a      	adds	r2, r3, #1
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	781b      	ldrb	r3, [r3, #0]
 80011c8:	461a      	mov	r2, r3
 80011ca:	7b3b      	ldrb	r3, [r7, #12]
 80011cc:	fa02 f303 	lsl.w	r3, r2, r3
 80011d0:	b25a      	sxtb	r2, r3
 80011d2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011d6:	4313      	orrs	r3, r2
 80011d8:	b25b      	sxtb	r3, r3
 80011da:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 80011dc:	7bbb      	ldrb	r3, [r7, #14]
 80011de:	3b08      	subs	r3, #8
 80011e0:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 80011e2:	78fb      	ldrb	r3, [r7, #3]
 80011e4:	f04f 32ff 	mov.w	r2, #4294967295
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	b2db      	uxtb	r3, r3
 80011ee:	43db      	mvns	r3, r3
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	7bfb      	ldrb	r3, [r7, #15]
 80011f4:	4013      	ands	r3, r2
 80011f6:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	7bba      	ldrb	r2, [r7, #14]
 80011fc:	731a      	strb	r2, [r3, #12]
  return val;
 80011fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001200:	4618      	mov	r0, r3
 8001202:	3714      	adds	r7, #20
 8001204:	46bd      	mov	sp, r7
 8001206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120a:	4770      	bx	lr

0800120c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	b084      	sub	sp, #16
 8001210:	af00      	add	r7, sp, #0
 8001212:	6078      	str	r0, [r7, #4]
 8001214:	460b      	mov	r3, r1
 8001216:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001218:	78fb      	ldrb	r3, [r7, #3]
 800121a:	4619      	mov	r1, r3
 800121c:	6878      	ldr	r0, [r7, #4]
 800121e:	f7ff ffaa 	bl	8001176 <u8g2_font_decode_get_unsigned_bits>
 8001222:	4603      	mov	r3, r0
 8001224:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001226:	2301      	movs	r3, #1
 8001228:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800122a:	78fb      	ldrb	r3, [r7, #3]
 800122c:	3b01      	subs	r3, #1
 800122e:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001230:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001234:	78fb      	ldrb	r3, [r7, #3]
 8001236:	fa02 f303 	lsl.w	r3, r2, r3
 800123a:	73bb      	strb	r3, [r7, #14]
  v -= d;
 800123c:	7bfa      	ldrb	r2, [r7, #15]
 800123e:	7bbb      	ldrb	r3, [r7, #14]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	b2db      	uxtb	r3, r3
 8001244:	73fb      	strb	r3, [r7, #15]
  return v;
 8001246:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 800124a:	4618      	mov	r0, r3
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 8001252:	b490      	push	{r4, r7}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	4604      	mov	r4, r0
 800125a:	4608      	mov	r0, r1
 800125c:	4611      	mov	r1, r2
 800125e:	461a      	mov	r2, r3
 8001260:	4623      	mov	r3, r4
 8001262:	80fb      	strh	r3, [r7, #6]
 8001264:	4603      	mov	r3, r0
 8001266:	717b      	strb	r3, [r7, #5]
 8001268:	460b      	mov	r3, r1
 800126a:	713b      	strb	r3, [r7, #4]
 800126c:	4613      	mov	r3, r2
 800126e:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001270:	78fb      	ldrb	r3, [r7, #3]
 8001272:	2b02      	cmp	r3, #2
 8001274:	d014      	beq.n	80012a0 <u8g2_add_vector_y+0x4e>
 8001276:	2b02      	cmp	r3, #2
 8001278:	dc19      	bgt.n	80012ae <u8g2_add_vector_y+0x5c>
 800127a:	2b00      	cmp	r3, #0
 800127c:	d002      	beq.n	8001284 <u8g2_add_vector_y+0x32>
 800127e:	2b01      	cmp	r3, #1
 8001280:	d007      	beq.n	8001292 <u8g2_add_vector_y+0x40>
 8001282:	e014      	b.n	80012ae <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 8001284:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001288:	b29a      	uxth	r2, r3
 800128a:	88fb      	ldrh	r3, [r7, #6]
 800128c:	4413      	add	r3, r2
 800128e:	80fb      	strh	r3, [r7, #6]
      break;
 8001290:	e014      	b.n	80012bc <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 8001292:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001296:	b29a      	uxth	r2, r3
 8001298:	88fb      	ldrh	r3, [r7, #6]
 800129a:	4413      	add	r3, r2
 800129c:	80fb      	strh	r3, [r7, #6]
      break;
 800129e:	e00d      	b.n	80012bc <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80012a0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80012a4:	b29b      	uxth	r3, r3
 80012a6:	88fa      	ldrh	r2, [r7, #6]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	80fb      	strh	r3, [r7, #6]
      break;
 80012ac:	e006      	b.n	80012bc <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80012ae:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	88fa      	ldrh	r2, [r7, #6]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	80fb      	strh	r3, [r7, #6]
      break;      
 80012ba:	bf00      	nop
  }
  return dy;
 80012bc:	88fb      	ldrh	r3, [r7, #6]
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3708      	adds	r7, #8
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bc90      	pop	{r4, r7}
 80012c6:	4770      	bx	lr

080012c8 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 80012c8:	b490      	push	{r4, r7}
 80012ca:	b082      	sub	sp, #8
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	4604      	mov	r4, r0
 80012d0:	4608      	mov	r0, r1
 80012d2:	4611      	mov	r1, r2
 80012d4:	461a      	mov	r2, r3
 80012d6:	4623      	mov	r3, r4
 80012d8:	80fb      	strh	r3, [r7, #6]
 80012da:	4603      	mov	r3, r0
 80012dc:	717b      	strb	r3, [r7, #5]
 80012de:	460b      	mov	r3, r1
 80012e0:	713b      	strb	r3, [r7, #4]
 80012e2:	4613      	mov	r3, r2
 80012e4:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80012e6:	78fb      	ldrb	r3, [r7, #3]
 80012e8:	2b02      	cmp	r3, #2
 80012ea:	d014      	beq.n	8001316 <u8g2_add_vector_x+0x4e>
 80012ec:	2b02      	cmp	r3, #2
 80012ee:	dc19      	bgt.n	8001324 <u8g2_add_vector_x+0x5c>
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d002      	beq.n	80012fa <u8g2_add_vector_x+0x32>
 80012f4:	2b01      	cmp	r3, #1
 80012f6:	d007      	beq.n	8001308 <u8g2_add_vector_x+0x40>
 80012f8:	e014      	b.n	8001324 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 80012fa:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80012fe:	b29a      	uxth	r2, r3
 8001300:	88fb      	ldrh	r3, [r7, #6]
 8001302:	4413      	add	r3, r2
 8001304:	80fb      	strh	r3, [r7, #6]
      break;
 8001306:	e014      	b.n	8001332 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8001308:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800130c:	b29b      	uxth	r3, r3
 800130e:	88fa      	ldrh	r2, [r7, #6]
 8001310:	1ad3      	subs	r3, r2, r3
 8001312:	80fb      	strh	r3, [r7, #6]
      break;
 8001314:	e00d      	b.n	8001332 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8001316:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800131a:	b29b      	uxth	r3, r3
 800131c:	88fa      	ldrh	r2, [r7, #6]
 800131e:	1ad3      	subs	r3, r2, r3
 8001320:	80fb      	strh	r3, [r7, #6]
      break;
 8001322:	e006      	b.n	8001332 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001324:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001328:	b29a      	uxth	r2, r3
 800132a:	88fb      	ldrh	r3, [r7, #6]
 800132c:	4413      	add	r3, r2
 800132e:	80fb      	strh	r3, [r7, #6]
      break;      
 8001330:	bf00      	nop
  }
  return dx;
 8001332:	88fb      	ldrh	r3, [r7, #6]
}
 8001334:	4618      	mov	r0, r3
 8001336:	3708      	adds	r7, #8
 8001338:	46bd      	mov	sp, r7
 800133a:	bc90      	pop	{r4, r7}
 800133c:	4770      	bx	lr

0800133e <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800133e:	b580      	push	{r7, lr}
 8001340:	b088      	sub	sp, #32
 8001342:	af02      	add	r7, sp, #8
 8001344:	6078      	str	r0, [r7, #4]
 8001346:	460b      	mov	r3, r1
 8001348:	70fb      	strb	r3, [r7, #3]
 800134a:	4613      	mov	r3, r2
 800134c:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	3360      	adds	r3, #96	; 0x60
 8001352:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800135e:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001366:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 8001368:	693b      	ldr	r3, [r7, #16]
 800136a:	f993 300a 	ldrsb.w	r3, [r3, #10]
 800136e:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 8001370:	7bfa      	ldrb	r2, [r7, #15]
 8001372:	7d7b      	ldrb	r3, [r7, #21]
 8001374:	1ad3      	subs	r3, r2, r3
 8001376:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 800137c:	7dfa      	ldrb	r2, [r7, #23]
 800137e:	7bfb      	ldrb	r3, [r7, #15]
 8001380:	429a      	cmp	r2, r3
 8001382:	d201      	bcs.n	8001388 <u8g2_font_decode_len+0x4a>
      current = cnt;
 8001384:	7dfb      	ldrb	r3, [r7, #23]
 8001386:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 8001388:	693b      	ldr	r3, [r7, #16]
 800138a:	889b      	ldrh	r3, [r3, #4]
 800138c:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	88db      	ldrh	r3, [r3, #6]
 8001392:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 8001394:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001398:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800139c:	693b      	ldr	r3, [r7, #16]
 800139e:	7c1b      	ldrb	r3, [r3, #16]
 80013a0:	89b8      	ldrh	r0, [r7, #12]
 80013a2:	f7ff ff91 	bl	80012c8 <u8g2_add_vector_x>
 80013a6:	4603      	mov	r3, r0
 80013a8:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80013aa:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80013ae:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80013b2:	693b      	ldr	r3, [r7, #16]
 80013b4:	7c1b      	ldrb	r3, [r3, #16]
 80013b6:	8978      	ldrh	r0, [r7, #10]
 80013b8:	f7ff ff4b 	bl	8001252 <u8g2_add_vector_y>
 80013bc:	4603      	mov	r3, r0
 80013be:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80013c0:	78bb      	ldrb	r3, [r7, #2]
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d010      	beq.n	80013e8 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	7b9a      	ldrb	r2, [r3, #14]
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80013d0:	7dbb      	ldrb	r3, [r7, #22]
 80013d2:	b298      	uxth	r0, r3
 80013d4:	693b      	ldr	r3, [r7, #16]
 80013d6:	7c1b      	ldrb	r3, [r3, #16]
 80013d8:	897a      	ldrh	r2, [r7, #10]
 80013da:	89b9      	ldrh	r1, [r7, #12]
 80013dc:	9300      	str	r3, [sp, #0]
 80013de:	4603      	mov	r3, r0
 80013e0:	6878      	ldr	r0, [r7, #4]
 80013e2:	f000 fbfe 	bl	8001be2 <u8g2_DrawHVLine>
 80013e6:	e013      	b.n	8001410 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 80013e8:	693b      	ldr	r3, [r7, #16]
 80013ea:	7b5b      	ldrb	r3, [r3, #13]
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d10f      	bne.n	8001410 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	7bda      	ldrb	r2, [r3, #15]
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 80013fa:	7dbb      	ldrb	r3, [r7, #22]
 80013fc:	b298      	uxth	r0, r3
 80013fe:	693b      	ldr	r3, [r7, #16]
 8001400:	7c1b      	ldrb	r3, [r3, #16]
 8001402:	897a      	ldrh	r2, [r7, #10]
 8001404:	89b9      	ldrh	r1, [r7, #12]
 8001406:	9300      	str	r3, [sp, #0]
 8001408:	4603      	mov	r3, r0
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f000 fbe9 	bl	8001be2 <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001410:	7dfa      	ldrb	r2, [r7, #23]
 8001412:	7bfb      	ldrb	r3, [r7, #15]
 8001414:	429a      	cmp	r2, r3
 8001416:	d309      	bcc.n	800142c <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001418:	7dfa      	ldrb	r2, [r7, #23]
 800141a:	7bfb      	ldrb	r3, [r7, #15]
 800141c:	1ad3      	subs	r3, r2, r3
 800141e:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001420:	2300      	movs	r3, #0
 8001422:	757b      	strb	r3, [r7, #21]
    ly++;
 8001424:	7d3b      	ldrb	r3, [r7, #20]
 8001426:	3301      	adds	r3, #1
 8001428:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800142a:	e79d      	b.n	8001368 <u8g2_font_decode_len+0x2a>
      break;
 800142c:	bf00      	nop
  }
  lx += cnt;
 800142e:	7d7a      	ldrb	r2, [r7, #21]
 8001430:	7dfb      	ldrb	r3, [r7, #23]
 8001432:	4413      	add	r3, r2
 8001434:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001436:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800143e:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	725a      	strb	r2, [r3, #9]
}
 8001446:	bf00      	nop
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}

0800144e <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800144e:	b580      	push	{r7, lr}
 8001450:	b084      	sub	sp, #16
 8001452:	af00      	add	r7, sp, #0
 8001454:	6078      	str	r0, [r7, #4]
 8001456:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	3360      	adds	r3, #96	; 0x60
 800145c:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800145e:	68fb      	ldr	r3, [r7, #12]
 8001460:	683a      	ldr	r2, [r7, #0]
 8001462:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	2200      	movs	r2, #0
 8001468:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 8001470:	4619      	mov	r1, r3
 8001472:	68f8      	ldr	r0, [r7, #12]
 8001474:	f7ff fe7f 	bl	8001176 <u8g2_font_decode_get_unsigned_bits>
 8001478:	4603      	mov	r3, r0
 800147a:	b25a      	sxtb	r2, r3
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 8001486:	4619      	mov	r1, r3
 8001488:	68f8      	ldr	r0, [r7, #12]
 800148a:	f7ff fe74 	bl	8001176 <u8g2_font_decode_get_unsigned_bits>
 800148e:	4603      	mov	r3, r0
 8001490:	b25a      	sxtb	r2, r3
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 800149c:	68fb      	ldr	r3, [r7, #12]
 800149e:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80014a0:	68fb      	ldr	r3, [r7, #12]
 80014a2:	7b9b      	ldrb	r3, [r3, #14]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	bf0c      	ite	eq
 80014a8:	2301      	moveq	r3, #1
 80014aa:	2300      	movne	r3, #0
 80014ac:	b2db      	uxtb	r3, r3
 80014ae:	461a      	mov	r2, r3
 80014b0:	68fb      	ldr	r3, [r7, #12]
 80014b2:	73da      	strb	r2, [r3, #15]
}
 80014b4:	bf00      	nop
 80014b6:	3710      	adds	r7, #16
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b08a      	sub	sp, #40	; 0x28
 80014c0:	af02      	add	r7, sp, #8
 80014c2:	6078      	str	r0, [r7, #4]
 80014c4:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	3360      	adds	r3, #96	; 0x60
 80014ca:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 80014cc:	6839      	ldr	r1, [r7, #0]
 80014ce:	6878      	ldr	r0, [r7, #4]
 80014d0:	f7ff ffbd 	bl	800144e <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 80014da:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 80014e2:	4619      	mov	r1, r3
 80014e4:	6978      	ldr	r0, [r7, #20]
 80014e6:	f7ff fe91 	bl	800120c <u8g2_font_decode_get_signed_bits>
 80014ea:	4603      	mov	r3, r0
 80014ec:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 80014f4:	4619      	mov	r1, r3
 80014f6:	6978      	ldr	r0, [r7, #20]
 80014f8:	f7ff fe88 	bl	800120c <u8g2_font_decode_get_signed_bits>
 80014fc:	4603      	mov	r3, r0
 80014fe:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001506:	4619      	mov	r1, r3
 8001508:	6978      	ldr	r0, [r7, #20]
 800150a:	f7ff fe7f 	bl	800120c <u8g2_font_decode_get_signed_bits>
 800150e:	4603      	mov	r3, r0
 8001510:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001518:	2b00      	cmp	r3, #0
 800151a:	f340 80d7 	ble.w	80016cc <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	8898      	ldrh	r0, [r3, #4]
 8001522:	7cfa      	ldrb	r2, [r7, #19]
 8001524:	7c7b      	ldrb	r3, [r7, #17]
 8001526:	4413      	add	r3, r2
 8001528:	b2db      	uxtb	r3, r3
 800152a:	425b      	negs	r3, r3
 800152c:	b2db      	uxtb	r3, r3
 800152e:	b25a      	sxtb	r2, r3
 8001530:	697b      	ldr	r3, [r7, #20]
 8001532:	7c1b      	ldrb	r3, [r3, #16]
 8001534:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001538:	f7ff fec6 	bl	80012c8 <u8g2_add_vector_x>
 800153c:	4603      	mov	r3, r0
 800153e:	461a      	mov	r2, r3
 8001540:	697b      	ldr	r3, [r7, #20]
 8001542:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	88d8      	ldrh	r0, [r3, #6]
 8001548:	7cfa      	ldrb	r2, [r7, #19]
 800154a:	7c7b      	ldrb	r3, [r7, #17]
 800154c:	4413      	add	r3, r2
 800154e:	b2db      	uxtb	r3, r3
 8001550:	425b      	negs	r3, r3
 8001552:	b2db      	uxtb	r3, r3
 8001554:	b25a      	sxtb	r2, r3
 8001556:	697b      	ldr	r3, [r7, #20]
 8001558:	7c1b      	ldrb	r3, [r3, #16]
 800155a:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800155e:	f7ff fe78 	bl	8001252 <u8g2_add_vector_y>
 8001562:	4603      	mov	r3, r0
 8001564:	461a      	mov	r2, r3
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 800156a:	697b      	ldr	r3, [r7, #20]
 800156c:	889b      	ldrh	r3, [r3, #4]
 800156e:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	88db      	ldrh	r3, [r3, #6]
 8001574:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001576:	8bfb      	ldrh	r3, [r7, #30]
 8001578:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 800157a:	8b7b      	ldrh	r3, [r7, #26]
 800157c:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 800157e:	697b      	ldr	r3, [r7, #20]
 8001580:	7c1b      	ldrb	r3, [r3, #16]
 8001582:	2b03      	cmp	r3, #3
 8001584:	d85a      	bhi.n	800163c <u8g2_font_decode_glyph+0x180>
 8001586:	a201      	add	r2, pc, #4	; (adr r2, 800158c <u8g2_font_decode_glyph+0xd0>)
 8001588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800158c:	0800159d 	.word	0x0800159d
 8001590:	080015b9 	.word	0x080015b9
 8001594:	080015e1 	.word	0x080015e1
 8001598:	08001615 	.word	0x08001615
      {
	case 0:
	    x1 += decode->glyph_width;
 800159c:	697b      	ldr	r3, [r7, #20]
 800159e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80015a2:	b29a      	uxth	r2, r3
 80015a4:	8bbb      	ldrh	r3, [r7, #28]
 80015a6:	4413      	add	r3, r2
 80015a8:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80015aa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015ae:	b29a      	uxth	r2, r3
 80015b0:	8b3b      	ldrh	r3, [r7, #24]
 80015b2:	4413      	add	r3, r2
 80015b4:	833b      	strh	r3, [r7, #24]
	    break;
 80015b6:	e041      	b.n	800163c <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80015b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015bc:	b29b      	uxth	r3, r3
 80015be:	8bfa      	ldrh	r2, [r7, #30]
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80015c4:	8bfb      	ldrh	r3, [r7, #30]
 80015c6:	3301      	adds	r3, #1
 80015c8:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80015ca:	8bbb      	ldrh	r3, [r7, #28]
 80015cc:	3301      	adds	r3, #1
 80015ce:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 80015d0:	697b      	ldr	r3, [r7, #20]
 80015d2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80015d6:	b29a      	uxth	r2, r3
 80015d8:	8b3b      	ldrh	r3, [r7, #24]
 80015da:	4413      	add	r3, r2
 80015dc:	833b      	strh	r3, [r7, #24]
	    break;
 80015de:	e02d      	b.n	800163c <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 80015e0:	697b      	ldr	r3, [r7, #20]
 80015e2:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80015e6:	b29b      	uxth	r3, r3
 80015e8:	8bfa      	ldrh	r2, [r7, #30]
 80015ea:	1ad3      	subs	r3, r2, r3
 80015ec:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 80015ee:	8bfb      	ldrh	r3, [r7, #30]
 80015f0:	3301      	adds	r3, #1
 80015f2:	83fb      	strh	r3, [r7, #30]
	    x1++;
 80015f4:	8bbb      	ldrh	r3, [r7, #28]
 80015f6:	3301      	adds	r3, #1
 80015f8:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 80015fa:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80015fe:	b29b      	uxth	r3, r3
 8001600:	8b7a      	ldrh	r2, [r7, #26]
 8001602:	1ad3      	subs	r3, r2, r3
 8001604:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001606:	8b7b      	ldrh	r3, [r7, #26]
 8001608:	3301      	adds	r3, #1
 800160a:	837b      	strh	r3, [r7, #26]
	    y1++;
 800160c:	8b3b      	ldrh	r3, [r7, #24]
 800160e:	3301      	adds	r3, #1
 8001610:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001612:	e013      	b.n	800163c <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001614:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001618:	b29a      	uxth	r2, r3
 800161a:	8bbb      	ldrh	r3, [r7, #28]
 800161c:	4413      	add	r3, r2
 800161e:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001626:	b29b      	uxth	r3, r3
 8001628:	8b7a      	ldrh	r2, [r7, #26]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800162e:	8b7b      	ldrh	r3, [r7, #26]
 8001630:	3301      	adds	r3, #1
 8001632:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001634:	8b3b      	ldrh	r3, [r7, #24]
 8001636:	3301      	adds	r3, #1
 8001638:	833b      	strh	r3, [r7, #24]
	    break;	  
 800163a:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 800163c:	8bb8      	ldrh	r0, [r7, #28]
 800163e:	8b7a      	ldrh	r2, [r7, #26]
 8001640:	8bf9      	ldrh	r1, [r7, #30]
 8001642:	8b3b      	ldrh	r3, [r7, #24]
 8001644:	9300      	str	r3, [sp, #0]
 8001646:	4603      	mov	r3, r0
 8001648:	6878      	ldr	r0, [r7, #4]
 800164a:	f000 fb88 	bl	8001d5e <u8g2_IsIntersection>
 800164e:	4603      	mov	r3, r0
 8001650:	2b00      	cmp	r3, #0
 8001652:	d102      	bne.n	800165a <u8g2_font_decode_glyph+0x19e>
	return d;
 8001654:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001658:	e03a      	b.n	80016d0 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	2200      	movs	r2, #0
 800165e:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001660:	697b      	ldr	r3, [r7, #20]
 8001662:	2200      	movs	r2, #0
 8001664:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 800166c:	4619      	mov	r1, r3
 800166e:	6978      	ldr	r0, [r7, #20]
 8001670:	f7ff fd81 	bl	8001176 <u8g2_font_decode_get_unsigned_bits>
 8001674:	4603      	mov	r3, r0
 8001676:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 800167e:	4619      	mov	r1, r3
 8001680:	6978      	ldr	r0, [r7, #20]
 8001682:	f7ff fd78 	bl	8001176 <u8g2_font_decode_get_unsigned_bits>
 8001686:	4603      	mov	r3, r0
 8001688:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 800168a:	7bfb      	ldrb	r3, [r7, #15]
 800168c:	2200      	movs	r2, #0
 800168e:	4619      	mov	r1, r3
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fe54 	bl	800133e <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001696:	7bbb      	ldrb	r3, [r7, #14]
 8001698:	2201      	movs	r2, #1
 800169a:	4619      	mov	r1, r3
 800169c:	6878      	ldr	r0, [r7, #4]
 800169e:	f7ff fe4e 	bl	800133e <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80016a2:	2101      	movs	r1, #1
 80016a4:	6978      	ldr	r0, [r7, #20]
 80016a6:	f7ff fd66 	bl	8001176 <u8g2_font_decode_get_unsigned_bits>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d1ec      	bne.n	800168a <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80016b0:	697b      	ldr	r3, [r7, #20]
 80016b2:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80016b6:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80016ba:	429a      	cmp	r2, r3
 80016bc:	dd00      	ble.n	80016c0 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80016be:	e7d2      	b.n	8001666 <u8g2_font_decode_glyph+0x1aa>
	break;
 80016c0:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80016c2:	697b      	ldr	r3, [r7, #20]
 80016c4:	7b9a      	ldrb	r2, [r3, #14]
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 80016cc:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	3720      	adds	r7, #32
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}

080016d8 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b086      	sub	sp, #24
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
 80016e0:	460b      	mov	r3, r1
 80016e2:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016e8:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 80016ea:	697b      	ldr	r3, [r7, #20]
 80016ec:	3317      	adds	r3, #23
 80016ee:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	2bff      	cmp	r3, #255	; 0xff
 80016f4:	d82a      	bhi.n	800174c <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 80016f6:	887b      	ldrh	r3, [r7, #2]
 80016f8:	2b60      	cmp	r3, #96	; 0x60
 80016fa:	d907      	bls.n	800170c <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001702:	461a      	mov	r2, r3
 8001704:	697b      	ldr	r3, [r7, #20]
 8001706:	4413      	add	r3, r2
 8001708:	617b      	str	r3, [r7, #20]
 800170a:	e009      	b.n	8001720 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 800170c:	887b      	ldrh	r3, [r7, #2]
 800170e:	2b40      	cmp	r3, #64	; 0x40
 8001710:	d906      	bls.n	8001720 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001718:	461a      	mov	r2, r3
 800171a:	697b      	ldr	r3, [r7, #20]
 800171c:	4413      	add	r3, r2
 800171e:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001720:	697b      	ldr	r3, [r7, #20]
 8001722:	3301      	adds	r3, #1
 8001724:	781b      	ldrb	r3, [r3, #0]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d04e      	beq.n	80017c8 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 800172a:	697b      	ldr	r3, [r7, #20]
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	b29b      	uxth	r3, r3
 8001730:	887a      	ldrh	r2, [r7, #2]
 8001732:	429a      	cmp	r2, r3
 8001734:	d102      	bne.n	800173c <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001736:	697b      	ldr	r3, [r7, #20]
 8001738:	3302      	adds	r3, #2
 800173a:	e049      	b.n	80017d0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	3301      	adds	r3, #1
 8001740:	781b      	ldrb	r3, [r3, #0]
 8001742:	461a      	mov	r2, r3
 8001744:	697b      	ldr	r3, [r7, #20]
 8001746:	4413      	add	r3, r2
 8001748:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800174a:	e7e9      	b.n	8001720 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001752:	461a      	mov	r2, r3
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	4413      	add	r3, r2
 8001758:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 800175a:	697b      	ldr	r3, [r7, #20]
 800175c:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800175e:	2100      	movs	r1, #0
 8001760:	6938      	ldr	r0, [r7, #16]
 8001762:	f7ff fc3f 	bl	8000fe4 <u8g2_font_get_word>
 8001766:	4603      	mov	r3, r0
 8001768:	461a      	mov	r2, r3
 800176a:	697b      	ldr	r3, [r7, #20]
 800176c:	4413      	add	r3, r2
 800176e:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001770:	2102      	movs	r1, #2
 8001772:	6938      	ldr	r0, [r7, #16]
 8001774:	f7ff fc36 	bl	8000fe4 <u8g2_font_get_word>
 8001778:	4603      	mov	r3, r0
 800177a:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	3304      	adds	r3, #4
 8001780:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001782:	89fa      	ldrh	r2, [r7, #14]
 8001784:	887b      	ldrh	r3, [r7, #2]
 8001786:	429a      	cmp	r2, r3
 8001788:	d3e9      	bcc.n	800175e <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 800178a:	697b      	ldr	r3, [r7, #20]
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001790:	89fb      	ldrh	r3, [r7, #14]
 8001792:	021b      	lsls	r3, r3, #8
 8001794:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	3301      	adds	r3, #1
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	b29a      	uxth	r2, r3
 800179e:	89fb      	ldrh	r3, [r7, #14]
 80017a0:	4313      	orrs	r3, r2
 80017a2:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80017a4:	89fb      	ldrh	r3, [r7, #14]
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d010      	beq.n	80017cc <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80017aa:	89fa      	ldrh	r2, [r7, #14]
 80017ac:	887b      	ldrh	r3, [r7, #2]
 80017ae:	429a      	cmp	r2, r3
 80017b0:	d102      	bne.n	80017b8 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80017b2:	697b      	ldr	r3, [r7, #20]
 80017b4:	3303      	adds	r3, #3
 80017b6:	e00b      	b.n	80017d0 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80017b8:	697b      	ldr	r3, [r7, #20]
 80017ba:	3302      	adds	r3, #2
 80017bc:	781b      	ldrb	r3, [r3, #0]
 80017be:	461a      	mov	r2, r3
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	4413      	add	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 80017c6:	e7e0      	b.n	800178a <u8g2_font_get_glyph_data+0xb2>
	break;
 80017c8:	bf00      	nop
 80017ca:	e000      	b.n	80017ce <u8g2_font_get_glyph_data+0xf6>
	break;
 80017cc:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 80017ce:	2300      	movs	r3, #0
}
 80017d0:	4618      	mov	r0, r3
 80017d2:	3718      	adds	r7, #24
 80017d4:	46bd      	mov	sp, r7
 80017d6:	bd80      	pop	{r7, pc}

080017d8 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	4608      	mov	r0, r1
 80017e2:	4611      	mov	r1, r2
 80017e4:	461a      	mov	r2, r3
 80017e6:	4603      	mov	r3, r0
 80017e8:	817b      	strh	r3, [r7, #10]
 80017ea:	460b      	mov	r3, r1
 80017ec:	813b      	strh	r3, [r7, #8]
 80017ee:	4613      	mov	r3, r2
 80017f0:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 80017f2:	2300      	movs	r3, #0
 80017f4:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	897a      	ldrh	r2, [r7, #10]
 80017fa:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	893a      	ldrh	r2, [r7, #8]
 8001802:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001806:	88fb      	ldrh	r3, [r7, #6]
 8001808:	4619      	mov	r1, r3
 800180a:	68f8      	ldr	r0, [r7, #12]
 800180c:	f7ff ff64 	bl	80016d8 <u8g2_font_get_glyph_data>
 8001810:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001812:	693b      	ldr	r3, [r7, #16]
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001818:	6939      	ldr	r1, [r7, #16]
 800181a:	68f8      	ldr	r0, [r7, #12]
 800181c:	f7ff fe4e 	bl	80014bc <u8g2_font_decode_glyph>
 8001820:	4603      	mov	r3, r0
 8001822:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001824:	8afb      	ldrh	r3, [r7, #22]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3718      	adds	r7, #24
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
	...

08001830 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b084      	sub	sp, #16
 8001834:	af00      	add	r7, sp, #0
 8001836:	60f8      	str	r0, [r7, #12]
 8001838:	4608      	mov	r0, r1
 800183a:	4611      	mov	r1, r2
 800183c:	461a      	mov	r2, r3
 800183e:	4603      	mov	r3, r0
 8001840:	817b      	strh	r3, [r7, #10]
 8001842:	460b      	mov	r3, r1
 8001844:	813b      	strh	r3, [r7, #8]
 8001846:	4613      	mov	r3, r2
 8001848:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 800184a:	68fb      	ldr	r3, [r7, #12]
 800184c:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001850:	2b03      	cmp	r3, #3
 8001852:	d833      	bhi.n	80018bc <u8g2_DrawGlyph+0x8c>
 8001854:	a201      	add	r2, pc, #4	; (adr r2, 800185c <u8g2_DrawGlyph+0x2c>)
 8001856:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800185a:	bf00      	nop
 800185c:	0800186d 	.word	0x0800186d
 8001860:	08001881 	.word	0x08001881
 8001864:	08001895 	.word	0x08001895
 8001868:	080018a9 	.word	0x080018a9
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001870:	68f8      	ldr	r0, [r7, #12]
 8001872:	4798      	blx	r3
 8001874:	4603      	mov	r3, r0
 8001876:	461a      	mov	r2, r3
 8001878:	893b      	ldrh	r3, [r7, #8]
 800187a:	4413      	add	r3, r2
 800187c:	813b      	strh	r3, [r7, #8]
      break;
 800187e:	e01d      	b.n	80018bc <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001880:	68fb      	ldr	r3, [r7, #12]
 8001882:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001884:	68f8      	ldr	r0, [r7, #12]
 8001886:	4798      	blx	r3
 8001888:	4603      	mov	r3, r0
 800188a:	461a      	mov	r2, r3
 800188c:	897b      	ldrh	r3, [r7, #10]
 800188e:	1a9b      	subs	r3, r3, r2
 8001890:	817b      	strh	r3, [r7, #10]
      break;
 8001892:	e013      	b.n	80018bc <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001898:	68f8      	ldr	r0, [r7, #12]
 800189a:	4798      	blx	r3
 800189c:	4603      	mov	r3, r0
 800189e:	461a      	mov	r2, r3
 80018a0:	893b      	ldrh	r3, [r7, #8]
 80018a2:	1a9b      	subs	r3, r3, r2
 80018a4:	813b      	strh	r3, [r7, #8]
      break;
 80018a6:	e009      	b.n	80018bc <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	4798      	blx	r3
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	897b      	ldrh	r3, [r7, #10]
 80018b6:	4413      	add	r3, r2
 80018b8:	817b      	strh	r3, [r7, #10]
      break;
 80018ba:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80018bc:	88fb      	ldrh	r3, [r7, #6]
 80018be:	893a      	ldrh	r2, [r7, #8]
 80018c0:	8979      	ldrh	r1, [r7, #10]
 80018c2:	68f8      	ldr	r0, [r7, #12]
 80018c4:	f7ff ff88 	bl	80017d8 <u8g2_font_draw_glyph>
 80018c8:	4603      	mov	r3, r0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop

080018d4 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b086      	sub	sp, #24
 80018d8:	af00      	add	r7, sp, #0
 80018da:	60f8      	str	r0, [r7, #12]
 80018dc:	607b      	str	r3, [r7, #4]
 80018de:	460b      	mov	r3, r1
 80018e0:	817b      	strh	r3, [r7, #10]
 80018e2:	4613      	mov	r3, r2
 80018e4:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 80018e6:	68f8      	ldr	r0, [r7, #12]
 80018e8:	f000 fc6a 	bl	80021c0 <u8x8_utf8_init>
  sum = 0;
 80018ec:	2300      	movs	r3, #0
 80018ee:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80018f0:	68fb      	ldr	r3, [r7, #12]
 80018f2:	685b      	ldr	r3, [r3, #4]
 80018f4:	687a      	ldr	r2, [r7, #4]
 80018f6:	7812      	ldrb	r2, [r2, #0]
 80018f8:	4611      	mov	r1, r2
 80018fa:	68f8      	ldr	r0, [r7, #12]
 80018fc:	4798      	blx	r3
 80018fe:	4603      	mov	r3, r0
 8001900:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001902:	8abb      	ldrh	r3, [r7, #20]
 8001904:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001908:	4293      	cmp	r3, r2
 800190a:	d038      	beq.n	800197e <u8g2_draw_string+0xaa>
      break;
    str++;
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	3301      	adds	r3, #1
 8001910:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001912:	8abb      	ldrh	r3, [r7, #20]
 8001914:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001918:	4293      	cmp	r3, r2
 800191a:	d0e9      	beq.n	80018f0 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 800191c:	8abb      	ldrh	r3, [r7, #20]
 800191e:	893a      	ldrh	r2, [r7, #8]
 8001920:	8979      	ldrh	r1, [r7, #10]
 8001922:	68f8      	ldr	r0, [r7, #12]
 8001924:	f7ff ff84 	bl	8001830 <u8g2_DrawGlyph>
 8001928:	4603      	mov	r3, r0
 800192a:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001932:	2b03      	cmp	r3, #3
 8001934:	d81e      	bhi.n	8001974 <u8g2_draw_string+0xa0>
 8001936:	a201      	add	r2, pc, #4	; (adr r2, 800193c <u8g2_draw_string+0x68>)
 8001938:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800193c:	0800194d 	.word	0x0800194d
 8001940:	08001957 	.word	0x08001957
 8001944:	08001961 	.word	0x08001961
 8001948:	0800196b 	.word	0x0800196b
      {
	case 0:
	  x += delta;
 800194c:	897a      	ldrh	r2, [r7, #10]
 800194e:	8a7b      	ldrh	r3, [r7, #18]
 8001950:	4413      	add	r3, r2
 8001952:	817b      	strh	r3, [r7, #10]
	  break;
 8001954:	e00e      	b.n	8001974 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001956:	893a      	ldrh	r2, [r7, #8]
 8001958:	8a7b      	ldrh	r3, [r7, #18]
 800195a:	4413      	add	r3, r2
 800195c:	813b      	strh	r3, [r7, #8]
	  break;
 800195e:	e009      	b.n	8001974 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001960:	897a      	ldrh	r2, [r7, #10]
 8001962:	8a7b      	ldrh	r3, [r7, #18]
 8001964:	1ad3      	subs	r3, r2, r3
 8001966:	817b      	strh	r3, [r7, #10]
	  break;
 8001968:	e004      	b.n	8001974 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 800196a:	893a      	ldrh	r2, [r7, #8]
 800196c:	8a7b      	ldrh	r3, [r7, #18]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	813b      	strh	r3, [r7, #8]
	  break;
 8001972:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001974:	8afa      	ldrh	r2, [r7, #22]
 8001976:	8a7b      	ldrh	r3, [r7, #18]
 8001978:	4413      	add	r3, r2
 800197a:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 800197c:	e7b8      	b.n	80018f0 <u8g2_draw_string+0x1c>
      break;
 800197e:	bf00      	nop
    }
  }
  return sum;
 8001980:	8afb      	ldrh	r3, [r7, #22]
}
 8001982:	4618      	mov	r0, r3
 8001984:	3718      	adds	r7, #24
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop

0800198c <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b084      	sub	sp, #16
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	817b      	strh	r3, [r7, #10]
 800199a:	4613      	mov	r3, r2
 800199c:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	4a06      	ldr	r2, [pc, #24]	; (80019bc <u8g2_DrawStr+0x30>)
 80019a2:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 80019a4:	893a      	ldrh	r2, [r7, #8]
 80019a6:	8979      	ldrh	r1, [r7, #10]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	68f8      	ldr	r0, [r7, #12]
 80019ac:	f7ff ff92 	bl	80018d4 <u8g2_draw_string>
 80019b0:	4603      	mov	r3, r0
}
 80019b2:	4618      	mov	r0, r3
 80019b4:	3710      	adds	r7, #16
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}
 80019ba:	bf00      	nop
 80019bc:	080021dd 	.word	0x080021dd

080019c0 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019cc:	2b00      	cmp	r3, #0
 80019ce:	d05d      	beq.n	8001a8c <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80019ee:	2b00      	cmp	r3, #0
 80019f0:	d04d      	beq.n	8001a8e <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 80019f8:	2b01      	cmp	r3, #1
 80019fa:	d11c      	bne.n	8001a36 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8001a08:	429a      	cmp	r2, r3
 8001a0a:	da05      	bge.n	8001a18 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8001a24:	429a      	cmp	r2, r3
 8001a26:	dd32      	ble.n	8001a8e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001a34:	e02b      	b.n	8001a8e <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8001a3c:	461a      	mov	r2, r3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001a44:	4619      	mov	r1, r3
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001a4c:	440b      	add	r3, r1
 8001a4e:	429a      	cmp	r2, r3
 8001a50:	da0d      	bge.n	8001a6e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001a58:	b2da      	uxtb	r2, r3
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001a60:	b2db      	uxtb	r3, r3
 8001a62:	4413      	add	r3, r2
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	b25a      	sxtb	r2, r3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001a7a:	429a      	cmp	r2, r3
 8001a7c:	dd07      	ble.n	8001a8e <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001a8a:	e000      	b.n	8001a8e <u8g2_UpdateRefHeight+0xce>
    return;
 8001a8c:	bf00      	nop
  }  
}
 8001a8e:	370c      	adds	r7, #12
 8001a90:	46bd      	mov	sp, r7
 8001a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a96:	4770      	bx	lr

08001a98 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b083      	sub	sp, #12
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  return 0;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	370c      	adds	r7, #12
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
	...

08001ab0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001ab0:	b480      	push	{r7}
 8001ab2:	b083      	sub	sp, #12
 8001ab4:	af00      	add	r7, sp, #0
 8001ab6:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	4a04      	ldr	r2, [pc, #16]	; (8001acc <u8g2_SetFontPosBaseline+0x1c>)
 8001abc:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	08001a99 	.word	0x08001a99

08001ad0 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001ad0:	b580      	push	{r7, lr}
 8001ad2:	b082      	sub	sp, #8
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ade:	683a      	ldr	r2, [r7, #0]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	d00b      	beq.n	8001afc <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3374      	adds	r3, #116	; 0x74
 8001aee:	6839      	ldr	r1, [r7, #0]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff fa97 	bl	8001024 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001af6:	6878      	ldr	r0, [r7, #4]
 8001af8:	f7ff ff62 	bl	80019c0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001afc:	bf00      	nop
 8001afe:	3708      	adds	r7, #8
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}

08001b04 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001b04:	b480      	push	{r7}
 8001b06:	b087      	sub	sp, #28
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	60f8      	str	r0, [r7, #12]
 8001b0c:	60b9      	str	r1, [r7, #8]
 8001b0e:	4611      	mov	r1, r2
 8001b10:	461a      	mov	r2, r3
 8001b12:	460b      	mov	r3, r1
 8001b14:	80fb      	strh	r3, [r7, #6]
 8001b16:	4613      	mov	r3, r2
 8001b18:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8001b1a:	68fb      	ldr	r3, [r7, #12]
 8001b1c:	881b      	ldrh	r3, [r3, #0]
 8001b1e:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001b20:	8afb      	ldrh	r3, [r7, #22]
 8001b22:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001b24:	68bb      	ldr	r3, [r7, #8]
 8001b26:	881a      	ldrh	r2, [r3, #0]
 8001b28:	8abb      	ldrh	r3, [r7, #20]
 8001b2a:	4413      	add	r3, r2
 8001b2c:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001b2e:	8afa      	ldrh	r2, [r7, #22]
 8001b30:	8abb      	ldrh	r3, [r7, #20]
 8001b32:	429a      	cmp	r2, r3
 8001b34:	d90b      	bls.n	8001b4e <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001b36:	8afa      	ldrh	r2, [r7, #22]
 8001b38:	88bb      	ldrh	r3, [r7, #4]
 8001b3a:	429a      	cmp	r2, r3
 8001b3c:	d205      	bcs.n	8001b4a <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001b3e:	88bb      	ldrh	r3, [r7, #4]
 8001b40:	82bb      	strh	r3, [r7, #20]
      b--;
 8001b42:	8abb      	ldrh	r3, [r7, #20]
 8001b44:	3b01      	subs	r3, #1
 8001b46:	82bb      	strh	r3, [r7, #20]
 8001b48:	e001      	b.n	8001b4e <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001b4a:	88fb      	ldrh	r3, [r7, #6]
 8001b4c:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001b4e:	8afa      	ldrh	r2, [r7, #22]
 8001b50:	88bb      	ldrh	r3, [r7, #4]
 8001b52:	429a      	cmp	r2, r3
 8001b54:	d301      	bcc.n	8001b5a <u8g2_clip_intersection2+0x56>
    return 0;
 8001b56:	2300      	movs	r3, #0
 8001b58:	e01c      	b.n	8001b94 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001b5a:	8aba      	ldrh	r2, [r7, #20]
 8001b5c:	88fb      	ldrh	r3, [r7, #6]
 8001b5e:	429a      	cmp	r2, r3
 8001b60:	d801      	bhi.n	8001b66 <u8g2_clip_intersection2+0x62>
    return 0;
 8001b62:	2300      	movs	r3, #0
 8001b64:	e016      	b.n	8001b94 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001b66:	8afa      	ldrh	r2, [r7, #22]
 8001b68:	88fb      	ldrh	r3, [r7, #6]
 8001b6a:	429a      	cmp	r2, r3
 8001b6c:	d201      	bcs.n	8001b72 <u8g2_clip_intersection2+0x6e>
    a = c;
 8001b6e:	88fb      	ldrh	r3, [r7, #6]
 8001b70:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8001b72:	8aba      	ldrh	r2, [r7, #20]
 8001b74:	88bb      	ldrh	r3, [r7, #4]
 8001b76:	429a      	cmp	r2, r3
 8001b78:	d901      	bls.n	8001b7e <u8g2_clip_intersection2+0x7a>
    b = d;
 8001b7a:	88bb      	ldrh	r3, [r7, #4]
 8001b7c:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	8afa      	ldrh	r2, [r7, #22]
 8001b82:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001b84:	8aba      	ldrh	r2, [r7, #20]
 8001b86:	8afb      	ldrh	r3, [r7, #22]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001b8c:	68bb      	ldr	r3, [r7, #8]
 8001b8e:	8aba      	ldrh	r2, [r7, #20]
 8001b90:	801a      	strh	r2, [r3, #0]
  return 1;
 8001b92:	2301      	movs	r3, #1
}
 8001b94:	4618      	mov	r0, r3
 8001b96:	371c      	adds	r7, #28
 8001b98:	46bd      	mov	sp, r7
 8001b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b9e:	4770      	bx	lr

08001ba0 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001ba0:	b590      	push	{r4, r7, lr}
 8001ba2:	b087      	sub	sp, #28
 8001ba4:	af02      	add	r7, sp, #8
 8001ba6:	60f8      	str	r0, [r7, #12]
 8001ba8:	4608      	mov	r0, r1
 8001baa:	4611      	mov	r1, r2
 8001bac:	461a      	mov	r2, r3
 8001bae:	4603      	mov	r3, r0
 8001bb0:	817b      	strh	r3, [r7, #10]
 8001bb2:	460b      	mov	r3, r1
 8001bb4:	813b      	strh	r3, [r7, #8]
 8001bb6:	4613      	mov	r3, r2
 8001bb8:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001bbe:	893a      	ldrh	r2, [r7, #8]
 8001bc0:	1ad3      	subs	r3, r2, r3
 8001bc2:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001bc4:	68fb      	ldr	r3, [r7, #12]
 8001bc6:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001bc8:	88f8      	ldrh	r0, [r7, #6]
 8001bca:	893a      	ldrh	r2, [r7, #8]
 8001bcc:	8979      	ldrh	r1, [r7, #10]
 8001bce:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001bd2:	9300      	str	r3, [sp, #0]
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	68f8      	ldr	r0, [r7, #12]
 8001bd8:	47a0      	blx	r4
}
 8001bda:	bf00      	nop
 8001bdc:	3714      	adds	r7, #20
 8001bde:	46bd      	mov	sp, r7
 8001be0:	bd90      	pop	{r4, r7, pc}

08001be2 <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001be2:	b590      	push	{r4, r7, lr}
 8001be4:	b087      	sub	sp, #28
 8001be6:	af02      	add	r7, sp, #8
 8001be8:	60f8      	str	r0, [r7, #12]
 8001bea:	4608      	mov	r0, r1
 8001bec:	4611      	mov	r1, r2
 8001bee:	461a      	mov	r2, r3
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	817b      	strh	r3, [r7, #10]
 8001bf4:	460b      	mov	r3, r1
 8001bf6:	813b      	strh	r3, [r7, #8]
 8001bf8:	4613      	mov	r3, r2
 8001bfa:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d075      	beq.n	8001cf2 <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001c06:	88fb      	ldrh	r3, [r7, #6]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d072      	beq.n	8001cf2 <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001c0c:	88fb      	ldrh	r3, [r7, #6]
 8001c0e:	2b01      	cmp	r3, #1
 8001c10:	d91a      	bls.n	8001c48 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8001c12:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c16:	2b02      	cmp	r3, #2
 8001c18:	d109      	bne.n	8001c2e <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8001c1a:	897a      	ldrh	r2, [r7, #10]
 8001c1c:	88fb      	ldrh	r3, [r7, #6]
 8001c1e:	1ad3      	subs	r3, r2, r3
 8001c20:	b29b      	uxth	r3, r3
 8001c22:	817b      	strh	r3, [r7, #10]
	  x++;
 8001c24:	897b      	ldrh	r3, [r7, #10]
 8001c26:	3301      	adds	r3, #1
 8001c28:	b29b      	uxth	r3, r3
 8001c2a:	817b      	strh	r3, [r7, #10]
 8001c2c:	e00c      	b.n	8001c48 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8001c2e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c32:	2b03      	cmp	r3, #3
 8001c34:	d108      	bne.n	8001c48 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8001c36:	893a      	ldrh	r2, [r7, #8]
 8001c38:	88fb      	ldrh	r3, [r7, #6]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	b29b      	uxth	r3, r3
 8001c3e:	813b      	strh	r3, [r7, #8]
	  y++;
 8001c40:	893b      	ldrh	r3, [r7, #8]
 8001c42:	3301      	adds	r3, #1
 8001c44:	b29b      	uxth	r3, r3
 8001c46:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8001c48:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c4c:	f003 0301 	and.w	r3, r3, #1
 8001c50:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001c54:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d11a      	bne.n	8001c92 <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001c62:	893b      	ldrh	r3, [r7, #8]
 8001c64:	429a      	cmp	r2, r3
 8001c66:	d83b      	bhi.n	8001ce0 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8001c6e:	893b      	ldrh	r3, [r7, #8]
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d937      	bls.n	8001ce4 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001c80:	1db9      	adds	r1, r7, #6
 8001c82:	f107 000a 	add.w	r0, r7, #10
 8001c86:	f7ff ff3d 	bl	8001b04 <u8g2_clip_intersection2>
 8001c8a:	4603      	mov	r3, r0
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d11a      	bne.n	8001cc6 <u8g2_DrawHVLine+0xe4>
	  return;
 8001c90:	e02f      	b.n	8001cf2 <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001c98:	897b      	ldrh	r3, [r7, #10]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d824      	bhi.n	8001ce8 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8001c9e:	68fb      	ldr	r3, [r7, #12]
 8001ca0:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001ca4:	897b      	ldrh	r3, [r7, #10]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d920      	bls.n	8001cec <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001cb6:	1db9      	adds	r1, r7, #6
 8001cb8:	f107 0008 	add.w	r0, r7, #8
 8001cbc:	f7ff ff22 	bl	8001b04 <u8g2_clip_intersection2>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d014      	beq.n	8001cf0 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cca:	689c      	ldr	r4, [r3, #8]
 8001ccc:	8979      	ldrh	r1, [r7, #10]
 8001cce:	893a      	ldrh	r2, [r7, #8]
 8001cd0:	88f8      	ldrh	r0, [r7, #6]
 8001cd2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001cd6:	9300      	str	r3, [sp, #0]
 8001cd8:	4603      	mov	r3, r0
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	47a0      	blx	r4
 8001cde:	e008      	b.n	8001cf2 <u8g2_DrawHVLine+0x110>
	  return;
 8001ce0:	bf00      	nop
 8001ce2:	e006      	b.n	8001cf2 <u8g2_DrawHVLine+0x110>
	  return;
 8001ce4:	bf00      	nop
 8001ce6:	e004      	b.n	8001cf2 <u8g2_DrawHVLine+0x110>
	  return;
 8001ce8:	bf00      	nop
 8001cea:	e002      	b.n	8001cf2 <u8g2_DrawHVLine+0x110>
	  return;
 8001cec:	bf00      	nop
 8001cee:	e000      	b.n	8001cf2 <u8g2_DrawHVLine+0x110>
	  return;
 8001cf0:	bf00      	nop
    }
}
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd90      	pop	{r4, r7, pc}

08001cf8 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001cf8:	b490      	push	{r4, r7}
 8001cfa:	b082      	sub	sp, #8
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	4604      	mov	r4, r0
 8001d00:	4608      	mov	r0, r1
 8001d02:	4611      	mov	r1, r2
 8001d04:	461a      	mov	r2, r3
 8001d06:	4623      	mov	r3, r4
 8001d08:	80fb      	strh	r3, [r7, #6]
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	80bb      	strh	r3, [r7, #4]
 8001d0e:	460b      	mov	r3, r1
 8001d10:	807b      	strh	r3, [r7, #2]
 8001d12:	4613      	mov	r3, r2
 8001d14:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	88bb      	ldrh	r3, [r7, #4]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d20d      	bcs.n	8001d3a <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001d1e:	883a      	ldrh	r2, [r7, #0]
 8001d20:	88fb      	ldrh	r3, [r7, #6]
 8001d22:	429a      	cmp	r2, r3
 8001d24:	d901      	bls.n	8001d2a <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001d26:	2301      	movs	r3, #1
 8001d28:	e014      	b.n	8001d54 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001d2a:	887a      	ldrh	r2, [r7, #2]
 8001d2c:	883b      	ldrh	r3, [r7, #0]
 8001d2e:	429a      	cmp	r2, r3
 8001d30:	d901      	bls.n	8001d36 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001d32:	2301      	movs	r3, #1
 8001d34:	e00e      	b.n	8001d54 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001d36:	2300      	movs	r3, #0
 8001d38:	e00c      	b.n	8001d54 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001d3a:	883a      	ldrh	r2, [r7, #0]
 8001d3c:	88fb      	ldrh	r3, [r7, #6]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d907      	bls.n	8001d52 <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001d42:	887a      	ldrh	r2, [r7, #2]
 8001d44:	883b      	ldrh	r3, [r7, #0]
 8001d46:	429a      	cmp	r2, r3
 8001d48:	d901      	bls.n	8001d4e <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001d4a:	2301      	movs	r3, #1
 8001d4c:	e002      	b.n	8001d54 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001d4e:	2300      	movs	r3, #0
 8001d50:	e000      	b.n	8001d54 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001d52:	2300      	movs	r3, #0
    }
  }
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3708      	adds	r7, #8
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bc90      	pop	{r4, r7}
 8001d5c:	4770      	bx	lr

08001d5e <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001d5e:	b580      	push	{r7, lr}
 8001d60:	b084      	sub	sp, #16
 8001d62:	af00      	add	r7, sp, #0
 8001d64:	60f8      	str	r0, [r7, #12]
 8001d66:	4608      	mov	r0, r1
 8001d68:	4611      	mov	r1, r2
 8001d6a:	461a      	mov	r2, r3
 8001d6c:	4603      	mov	r3, r0
 8001d6e:	817b      	strh	r3, [r7, #10]
 8001d70:	460b      	mov	r3, r1
 8001d72:	813b      	strh	r3, [r7, #8]
 8001d74:	4613      	mov	r3, r2
 8001d76:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8001d84:	8b3b      	ldrh	r3, [r7, #24]
 8001d86:	893a      	ldrh	r2, [r7, #8]
 8001d88:	f7ff ffb6 	bl	8001cf8 <u8g2_is_intersection_decision_tree>
 8001d8c:	4603      	mov	r3, r0
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d101      	bne.n	8001d96 <u8g2_IsIntersection+0x38>
    return 0; 
 8001d92:	2300      	movs	r3, #0
 8001d94:	e00a      	b.n	8001dac <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8001da2:	88fb      	ldrh	r3, [r7, #6]
 8001da4:	897a      	ldrh	r2, [r7, #10]
 8001da6:	f7ff ffa7 	bl	8001cf8 <u8g2_is_intersection_decision_tree>
 8001daa:	4603      	mov	r3, r0
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	3710      	adds	r7, #16
 8001db0:	46bd      	mov	sp, r7
 8001db2:	bd80      	pop	{r7, pc}

08001db4 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001db4:	b480      	push	{r7}
 8001db6:	b089      	sub	sp, #36	; 0x24
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	60f8      	str	r0, [r7, #12]
 8001dbc:	4608      	mov	r0, r1
 8001dbe:	4611      	mov	r1, r2
 8001dc0:	461a      	mov	r2, r3
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	817b      	strh	r3, [r7, #10]
 8001dc6:	460b      	mov	r3, r1
 8001dc8:	813b      	strh	r3, [r7, #8]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001dce:	893b      	ldrh	r3, [r7, #8]
 8001dd0:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001dd2:	7efb      	ldrb	r3, [r7, #27]
 8001dd4:	f003 0307 	and.w	r3, r3, #7
 8001dd8:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001dde:	7e3a      	ldrb	r2, [r7, #24]
 8001de0:	7efb      	ldrb	r3, [r7, #27]
 8001de2:	fa02 f303 	lsl.w	r3, r2, r3
 8001de6:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001de8:	2300      	movs	r3, #0
 8001dea:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001dec:	2300      	movs	r3, #0
 8001dee:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d801      	bhi.n	8001dfe <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001dfa:	7e3b      	ldrb	r3, [r7, #24]
 8001dfc:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001e04:	2b01      	cmp	r3, #1
 8001e06:	d001      	beq.n	8001e0c <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001e08:	7e3b      	ldrb	r3, [r7, #24]
 8001e0a:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001e0c:	893b      	ldrh	r3, [r7, #8]
 8001e0e:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001e10:	8afb      	ldrh	r3, [r7, #22]
 8001e12:	f023 0307 	bic.w	r3, r3, #7
 8001e16:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	7c1b      	ldrb	r3, [r3, #16]
 8001e1e:	b29b      	uxth	r3, r3
 8001e20:	8afa      	ldrh	r2, [r7, #22]
 8001e22:	fb12 f303 	smulbb	r3, r2, r3
 8001e26:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2c:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8001e2e:	8afb      	ldrh	r3, [r7, #22]
 8001e30:	69fa      	ldr	r2, [r7, #28]
 8001e32:	4413      	add	r3, r2
 8001e34:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8001e36:	897b      	ldrh	r3, [r7, #10]
 8001e38:	69fa      	ldr	r2, [r7, #28]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8001e3e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001e42:	2b00      	cmp	r3, #0
 8001e44:	d117      	bne.n	8001e76 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	781a      	ldrb	r2, [r3, #0]
 8001e4a:	7ebb      	ldrb	r3, [r7, #26]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	b2da      	uxtb	r2, r3
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8001e54:	69fb      	ldr	r3, [r7, #28]
 8001e56:	781a      	ldrb	r2, [r3, #0]
 8001e58:	7e7b      	ldrb	r3, [r7, #25]
 8001e5a:	4053      	eors	r3, r2
 8001e5c:	b2da      	uxtb	r2, r3
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	701a      	strb	r2, [r3, #0]
	ptr++;
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3301      	adds	r3, #1
 8001e66:	61fb      	str	r3, [r7, #28]
	len--;
 8001e68:	88fb      	ldrh	r3, [r7, #6]
 8001e6a:	3b01      	subs	r3, #1
 8001e6c:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d1e8      	bne.n	8001e46 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8001e74:	e038      	b.n	8001ee8 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	781a      	ldrb	r2, [r3, #0]
 8001e7a:	7ebb      	ldrb	r3, [r7, #26]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	b2da      	uxtb	r2, r3
 8001e80:	69fb      	ldr	r3, [r7, #28]
 8001e82:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	781a      	ldrb	r2, [r3, #0]
 8001e88:	7e7b      	ldrb	r3, [r7, #25]
 8001e8a:	4053      	eors	r3, r2
 8001e8c:	b2da      	uxtb	r2, r3
 8001e8e:	69fb      	ldr	r3, [r7, #28]
 8001e90:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001e92:	7efb      	ldrb	r3, [r7, #27]
 8001e94:	3301      	adds	r3, #1
 8001e96:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8001e98:	7efb      	ldrb	r3, [r7, #27]
 8001e9a:	f003 0307 	and.w	r3, r3, #7
 8001e9e:	76fb      	strb	r3, [r7, #27]
      len--;
 8001ea0:	88fb      	ldrh	r3, [r7, #6]
 8001ea2:	3b01      	subs	r3, #1
 8001ea4:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8001ea6:	7efb      	ldrb	r3, [r7, #27]
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d114      	bne.n	8001ed6 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001eb0:	461a      	mov	r2, r3
 8001eb2:	69fb      	ldr	r3, [r7, #28]
 8001eb4:	4413      	add	r3, r2
 8001eb6:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001ebe:	2b01      	cmp	r3, #1
 8001ec0:	d801      	bhi.n	8001ec6 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8001ec2:	2301      	movs	r3, #1
 8001ec4:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d008      	beq.n	8001ee2 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	767b      	strb	r3, [r7, #25]
 8001ed4:	e005      	b.n	8001ee2 <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8001ed6:	7ebb      	ldrb	r3, [r7, #26]
 8001ed8:	005b      	lsls	r3, r3, #1
 8001eda:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8001edc:	7e7b      	ldrb	r3, [r7, #25]
 8001ede:	005b      	lsls	r3, r3, #1
 8001ee0:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 8001ee2:	88fb      	ldrh	r3, [r7, #6]
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d1c6      	bne.n	8001e76 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8001ee8:	bf00      	nop
 8001eea:	3724      	adds	r7, #36	; 0x24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef2:	4770      	bx	lr

08001ef4 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b082      	sub	sp, #8
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	2200      	movs	r2, #0
 8001f08:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f12:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f1c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	6878      	ldr	r0, [r7, #4]
 8001f28:	4798      	blx	r3
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	60f8      	str	r0, [r7, #12]
 8001f3a:	60b9      	str	r1, [r7, #8]
 8001f3c:	603b      	str	r3, [r7, #0]
 8001f3e:	4613      	mov	r3, r2
 8001f40:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 8001f42:	68fb      	ldr	r3, [r7, #12]
 8001f44:	2200      	movs	r2, #0
 8001f46:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	68ba      	ldr	r2, [r7, #8]
 8001f52:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	2200      	movs	r2, #0
 8001f60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2200      	movs	r2, #0
 8001f68:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8001f6c:	68fb      	ldr	r3, [r7, #12]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	2200      	movs	r2, #0
 8001f78:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	2201      	movs	r2, #1
 8001f88:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	69ba      	ldr	r2, [r7, #24]
 8001f90:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	68f8      	ldr	r0, [r7, #12]
 8001f9a:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7ff ffa9 	bl	8001ef4 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 8001fa2:	68f8      	ldr	r0, [r7, #12]
 8001fa4:	f7ff fd84 	bl	8001ab0 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	2200      	movs	r2, #0
 8001fac:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 8001fb0:	bf00      	nop
 8001fb2:	3710      	adds	r7, #16
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8001fb8:	b480      	push	{r7}
 8001fba:	b085      	sub	sp, #20
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001fcc:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001fce:	89fb      	ldrh	r3, [r7, #14]
 8001fd0:	00db      	lsls	r3, r3, #3
 8001fd2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	89fa      	ldrh	r2, [r7, #14]
 8001fd8:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8001fda:	68bb      	ldr	r3, [r7, #8]
 8001fdc:	7c1b      	ldrb	r3, [r3, #16]
 8001fde:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 8001fe0:	89fb      	ldrh	r3, [r7, #14]
 8001fe2:	00db      	lsls	r3, r3, #3
 8001fe4:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	89fa      	ldrh	r2, [r7, #14]
 8001fea:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8001ff2:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8001ff4:	89fb      	ldrh	r3, [r7, #14]
 8001ff6:	00db      	lsls	r3, r3, #3
 8001ff8:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	89fa      	ldrh	r2, [r7, #14]
 8001ffe:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002006:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002008:	89fb      	ldrh	r3, [r7, #14]
 800200a:	687a      	ldr	r2, [r7, #4]
 800200c:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 8002010:	4413      	add	r3, r2
 8002012:	68ba      	ldr	r2, [r7, #8]
 8002014:	7c52      	ldrb	r2, [r2, #17]
 8002016:	4293      	cmp	r3, r2
 8002018:	dd08      	ble.n	800202c <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 800201a:	68bb      	ldr	r3, [r7, #8]
 800201c:	7c5b      	ldrb	r3, [r3, #17]
 800201e:	b29a      	uxth	r2, r3
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002026:	b29b      	uxth	r3, r3
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800202c:	89fb      	ldrh	r3, [r7, #14]
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800204e:	89fb      	ldrh	r3, [r7, #14]
 8002050:	4413      	add	r3, r2
 8002052:	b29a      	uxth	r2, r3
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	8a9a      	ldrh	r2, [r3, #20]
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 8002064:	68bb      	ldr	r3, [r7, #8]
 8002066:	8ada      	ldrh	r2, [r3, #22]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 800206e:	bf00      	nop
 8002070:	3714      	adds	r7, #20
 8002072:	46bd      	mov	sp, r7
 8002074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002078:	4770      	bx	lr

0800207a <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 800207a:	b580      	push	{r7, lr}
 800207c:	b084      	sub	sp, #16
 800207e:	af02      	add	r7, sp, #8
 8002080:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800209a:	9300      	str	r3, [sp, #0]
 800209c:	4603      	mov	r3, r0
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff fe5d 	bl	8001d5e <u8g2_IsIntersection>
 80020a4:	4603      	mov	r3, r0
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d104      	bne.n	80020b4 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	2200      	movs	r2, #0
 80020ae:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80020b2:	e03b      	b.n	800212c <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	2201      	movs	r2, #1
 80020b8:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d205      	bcs.n	80020d8 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d905      	bls.n	80020f4 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002100:	429a      	cmp	r2, r3
 8002102:	d205      	bcs.n	8002110 <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800211c:	429a      	cmp	r2, r3
 800211e:	d905      	bls.n	800212c <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b082      	sub	sp, #8
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 800213c:	6878      	ldr	r0, [r7, #4]
 800213e:	f7ff ff3b 	bl	8001fb8 <u8g2_update_dimension_common>
}
 8002142:	bf00      	nop
 8002144:	3708      	adds	r7, #8
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}

0800214a <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 800214a:	b580      	push	{r7, lr}
 800214c:	b082      	sub	sp, #8
 800214e:	af00      	add	r7, sp, #0
 8002150:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	2200      	movs	r2, #0
 8002156:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 800217e:	6878      	ldr	r0, [r7, #4]
 8002180:	f7ff ff7b 	bl	800207a <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 8002184:	bf00      	nop
 8002186:	3708      	adds	r7, #8
 8002188:	46bd      	mov	sp, r7
 800218a:	bd80      	pop	{r7, pc}

0800218c <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800218c:	b580      	push	{r7, lr}
 800218e:	b086      	sub	sp, #24
 8002190:	af02      	add	r7, sp, #8
 8002192:	60f8      	str	r0, [r7, #12]
 8002194:	4608      	mov	r0, r1
 8002196:	4611      	mov	r1, r2
 8002198:	461a      	mov	r2, r3
 800219a:	4603      	mov	r3, r0
 800219c:	817b      	strh	r3, [r7, #10]
 800219e:	460b      	mov	r3, r1
 80021a0:	813b      	strh	r3, [r7, #8]
 80021a2:	4613      	mov	r3, r2
 80021a4:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80021a6:	88f8      	ldrh	r0, [r7, #6]
 80021a8:	893a      	ldrh	r2, [r7, #8]
 80021aa:	8979      	ldrh	r1, [r7, #10]
 80021ac:	7e3b      	ldrb	r3, [r7, #24]
 80021ae:	9300      	str	r3, [sp, #0]
 80021b0:	4603      	mov	r3, r0
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f7ff fcf4 	bl	8001ba0 <u8g2_draw_hv_line_2dir>
}
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80021c0:	b480      	push	{r7}
 80021c2:	b083      	sub	sp, #12
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2200      	movs	r2, #0
 80021cc:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80021d0:	bf00      	nop
 80021d2:	370c      	adds	r7, #12
 80021d4:	46bd      	mov	sp, r7
 80021d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021da:	4770      	bx	lr

080021dc <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	460b      	mov	r3, r1
 80021e6:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80021e8:	78fb      	ldrb	r3, [r7, #3]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d002      	beq.n	80021f4 <u8x8_ascii_next+0x18>
 80021ee:	78fb      	ldrb	r3, [r7, #3]
 80021f0:	2b0a      	cmp	r3, #10
 80021f2:	d102      	bne.n	80021fa <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80021f4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80021f8:	e001      	b.n	80021fe <u8x8_ascii_next+0x22>
  return b;
 80021fa:	78fb      	ldrb	r3, [r7, #3]
 80021fc:	b29b      	uxth	r3, r3
}
 80021fe:	4618      	mov	r0, r3
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr

0800220a <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 800220a:	b590      	push	{r4, r7, lr}
 800220c:	b085      	sub	sp, #20
 800220e:	af00      	add	r7, sp, #0
 8002210:	60f8      	str	r0, [r7, #12]
 8002212:	460b      	mov	r3, r1
 8002214:	607a      	str	r2, [r7, #4]
 8002216:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	691c      	ldr	r4, [r3, #16]
 800221c:	7afa      	ldrb	r2, [r7, #11]
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	2117      	movs	r1, #23
 8002222:	68f8      	ldr	r0, [r7, #12]
 8002224:	47a0      	blx	r4
 8002226:	4603      	mov	r3, r0
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	bd90      	pop	{r4, r7, pc}

08002230 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	460b      	mov	r3, r1
 800223a:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 800223c:	1cfb      	adds	r3, r7, #3
 800223e:	461a      	mov	r2, r3
 8002240:	2101      	movs	r1, #1
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff ffe1 	bl	800220a <u8x8_byte_SendBytes>
 8002248:	4603      	mov	r3, r0
}
 800224a:	4618      	mov	r0, r3
 800224c:	3708      	adds	r7, #8
 800224e:	46bd      	mov	sp, r7
 8002250:	bd80      	pop	{r7, pc}

08002252 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002252:	b590      	push	{r4, r7, lr}
 8002254:	b083      	sub	sp, #12
 8002256:	af00      	add	r7, sp, #0
 8002258:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	691c      	ldr	r4, [r3, #16]
 800225e:	2300      	movs	r3, #0
 8002260:	2200      	movs	r2, #0
 8002262:	2118      	movs	r1, #24
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	47a0      	blx	r4
 8002268:	4603      	mov	r3, r0
}
 800226a:	4618      	mov	r0, r3
 800226c:	370c      	adds	r7, #12
 800226e:	46bd      	mov	sp, r7
 8002270:	bd90      	pop	{r4, r7, pc}

08002272 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002272:	b590      	push	{r4, r7, lr}
 8002274:	b083      	sub	sp, #12
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	691c      	ldr	r4, [r3, #16]
 800227e:	2300      	movs	r3, #0
 8002280:	2200      	movs	r2, #0
 8002282:	2119      	movs	r1, #25
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	47a0      	blx	r4
 8002288:	4603      	mov	r3, r0
}
 800228a:	4618      	mov	r0, r3
 800228c:	370c      	adds	r7, #12
 800228e:	46bd      	mov	sp, r7
 8002290:	bd90      	pop	{r4, r7, pc}

08002292 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002292:	b590      	push	{r4, r7, lr}
 8002294:	b083      	sub	sp, #12
 8002296:	af00      	add	r7, sp, #0
 8002298:	6078      	str	r0, [r7, #4]
 800229a:	460b      	mov	r3, r1
 800229c:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	68dc      	ldr	r4, [r3, #12]
 80022a2:	78fa      	ldrb	r2, [r7, #3]
 80022a4:	2300      	movs	r3, #0
 80022a6:	2115      	movs	r1, #21
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	47a0      	blx	r4
 80022ac:	4603      	mov	r3, r0
}
 80022ae:	4618      	mov	r0, r3
 80022b0:	370c      	adds	r7, #12
 80022b2:	46bd      	mov	sp, r7
 80022b4:	bd90      	pop	{r4, r7, pc}

080022b6 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80022b6:	b590      	push	{r4, r7, lr}
 80022b8:	b083      	sub	sp, #12
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	68dc      	ldr	r4, [r3, #12]
 80022c6:	78fa      	ldrb	r2, [r7, #3]
 80022c8:	2300      	movs	r3, #0
 80022ca:	2116      	movs	r1, #22
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	47a0      	blx	r4
 80022d0:	4603      	mov	r3, r0
}
 80022d2:	4618      	mov	r0, r3
 80022d4:	370c      	adds	r7, #12
 80022d6:	46bd      	mov	sp, r7
 80022d8:	bd90      	pop	{r4, r7, pc}

080022da <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 80022da:	b590      	push	{r4, r7, lr}
 80022dc:	b085      	sub	sp, #20
 80022de:	af00      	add	r7, sp, #0
 80022e0:	60f8      	str	r0, [r7, #12]
 80022e2:	460b      	mov	r3, r1
 80022e4:	607a      	str	r2, [r7, #4]
 80022e6:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 80022e8:	68fb      	ldr	r3, [r7, #12]
 80022ea:	68dc      	ldr	r4, [r3, #12]
 80022ec:	7afa      	ldrb	r2, [r7, #11]
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2117      	movs	r1, #23
 80022f2:	68f8      	ldr	r0, [r7, #12]
 80022f4:	47a0      	blx	r4
 80022f6:	4603      	mov	r3, r0
}
 80022f8:	4618      	mov	r0, r3
 80022fa:	3714      	adds	r7, #20
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd90      	pop	{r4, r7, pc}

08002300 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002300:	b590      	push	{r4, r7, lr}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	68dc      	ldr	r4, [r3, #12]
 800230c:	2300      	movs	r3, #0
 800230e:	2200      	movs	r2, #0
 8002310:	2118      	movs	r1, #24
 8002312:	6878      	ldr	r0, [r7, #4]
 8002314:	47a0      	blx	r4
 8002316:	4603      	mov	r3, r0
}
 8002318:	4618      	mov	r0, r3
 800231a:	370c      	adds	r7, #12
 800231c:	46bd      	mov	sp, r7
 800231e:	bd90      	pop	{r4, r7, pc}

08002320 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002320:	b590      	push	{r4, r7, lr}
 8002322:	b083      	sub	sp, #12
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	68dc      	ldr	r4, [r3, #12]
 800232c:	2300      	movs	r3, #0
 800232e:	2200      	movs	r2, #0
 8002330:	2119      	movs	r1, #25
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	47a0      	blx	r4
 8002336:	4603      	mov	r3, r0
}
 8002338:	4618      	mov	r0, r3
 800233a:	370c      	adds	r7, #12
 800233c:	46bd      	mov	sp, r7
 800233e:	bd90      	pop	{r4, r7, pc}

08002340 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002340:	b590      	push	{r4, r7, lr}
 8002342:	b085      	sub	sp, #20
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
 8002348:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	73fb      	strb	r3, [r7, #15]
    data++;
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	3301      	adds	r3, #1
 8002354:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002356:	7bfb      	ldrb	r3, [r7, #15]
 8002358:	2bfe      	cmp	r3, #254	; 0xfe
 800235a:	d031      	beq.n	80023c0 <u8x8_cad_SendSequence+0x80>
 800235c:	2bfe      	cmp	r3, #254	; 0xfe
 800235e:	dc3d      	bgt.n	80023dc <u8x8_cad_SendSequence+0x9c>
 8002360:	2b19      	cmp	r3, #25
 8002362:	dc3b      	bgt.n	80023dc <u8x8_cad_SendSequence+0x9c>
 8002364:	2b18      	cmp	r3, #24
 8002366:	da23      	bge.n	80023b0 <u8x8_cad_SendSequence+0x70>
 8002368:	2b16      	cmp	r3, #22
 800236a:	dc02      	bgt.n	8002372 <u8x8_cad_SendSequence+0x32>
 800236c:	2b15      	cmp	r3, #21
 800236e:	da03      	bge.n	8002378 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002370:	e034      	b.n	80023dc <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002372:	2b17      	cmp	r3, #23
 8002374:	d00e      	beq.n	8002394 <u8x8_cad_SendSequence+0x54>
	return;
 8002376:	e031      	b.n	80023dc <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	781b      	ldrb	r3, [r3, #0]
 800237c:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68dc      	ldr	r4, [r3, #12]
 8002382:	7bba      	ldrb	r2, [r7, #14]
 8002384:	7bf9      	ldrb	r1, [r7, #15]
 8002386:	2300      	movs	r3, #0
 8002388:	6878      	ldr	r0, [r7, #4]
 800238a:	47a0      	blx	r4
	  data++;
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	3301      	adds	r3, #1
 8002390:	603b      	str	r3, [r7, #0]
	  break;
 8002392:	e022      	b.n	80023da <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002394:	683b      	ldr	r3, [r7, #0]
 8002396:	781b      	ldrb	r3, [r3, #0]
 8002398:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 800239a:	f107 030e 	add.w	r3, r7, #14
 800239e:	461a      	mov	r2, r3
 80023a0:	2101      	movs	r1, #1
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	f7ff ff99 	bl	80022da <u8x8_cad_SendData>
	  data++;
 80023a8:	683b      	ldr	r3, [r7, #0]
 80023aa:	3301      	adds	r3, #1
 80023ac:	603b      	str	r3, [r7, #0]
	  break;
 80023ae:	e014      	b.n	80023da <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68dc      	ldr	r4, [r3, #12]
 80023b4:	7bf9      	ldrb	r1, [r7, #15]
 80023b6:	2300      	movs	r3, #0
 80023b8:	2200      	movs	r2, #0
 80023ba:	6878      	ldr	r0, [r7, #4]
 80023bc:	47a0      	blx	r4
	  break;
 80023be:	e00c      	b.n	80023da <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	781b      	ldrb	r3, [r3, #0]
 80023c4:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 80023c6:	7bbb      	ldrb	r3, [r7, #14]
 80023c8:	461a      	mov	r2, r3
 80023ca:	2129      	movs	r1, #41	; 0x29
 80023cc:	6878      	ldr	r0, [r7, #4]
 80023ce:	f000 fa0a 	bl	80027e6 <u8x8_gpio_call>
	  data++;
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	3301      	adds	r3, #1
 80023d6:	603b      	str	r3, [r7, #0]
	  break;
 80023d8:	bf00      	nop
    cmd = *data;
 80023da:	e7b6      	b.n	800234a <u8x8_cad_SendSequence+0xa>
	return;
 80023dc:	bf00      	nop
    }
  }
}
 80023de:	3714      	adds	r7, #20
 80023e0:	46bd      	mov	sp, r7
 80023e2:	bd90      	pop	{r4, r7, pc}

080023e4 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 80023e4:	b590      	push	{r4, r7, lr}
 80023e6:	b085      	sub	sp, #20
 80023e8:	af00      	add	r7, sp, #0
 80023ea:	60f8      	str	r0, [r7, #12]
 80023ec:	460b      	mov	r3, r1
 80023ee:	607a      	str	r2, [r7, #4]
 80023f0:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 80023f2:	68f8      	ldr	r0, [r7, #12]
 80023f4:	f7ff ff2d 	bl	8002252 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 80023f8:	2140      	movs	r1, #64	; 0x40
 80023fa:	68f8      	ldr	r0, [r7, #12]
 80023fc:	f7ff ff18 	bl	8002230 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	691c      	ldr	r4, [r3, #16]
 8002404:	7afa      	ldrb	r2, [r7, #11]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	2117      	movs	r1, #23
 800240a:	68f8      	ldr	r0, [r7, #12]
 800240c:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 800240e:	68f8      	ldr	r0, [r7, #12]
 8002410:	f7ff ff2f 	bl	8002272 <u8x8_byte_EndTransfer>
}
 8002414:	bf00      	nop
 8002416:	3714      	adds	r7, #20
 8002418:	46bd      	mov	sp, r7
 800241a:	bd90      	pop	{r4, r7, pc}

0800241c <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	60f8      	str	r0, [r7, #12]
 8002424:	607b      	str	r3, [r7, #4]
 8002426:	460b      	mov	r3, r1
 8002428:	72fb      	strb	r3, [r7, #11]
 800242a:	4613      	mov	r3, r2
 800242c:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 800242e:	7afb      	ldrb	r3, [r7, #11]
 8002430:	3b14      	subs	r3, #20
 8002432:	2b05      	cmp	r3, #5
 8002434:	d848      	bhi.n	80024c8 <u8x8_cad_ssd13xx_i2c+0xac>
 8002436:	a201      	add	r2, pc, #4	; (adr r2, 800243c <u8x8_cad_ssd13xx_i2c+0x20>)
 8002438:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800243c:	080024a5 	.word	0x080024a5
 8002440:	08002455 	.word	0x08002455
 8002444:	08002455 	.word	0x08002455
 8002448:	08002475 	.word	0x08002475
 800244c:	080024cd 	.word	0x080024cd
 8002450:	080024cd 	.word	0x080024cd
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 8002454:	68f8      	ldr	r0, [r7, #12]
 8002456:	f7ff fefc 	bl	8002252 <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 800245a:	2100      	movs	r1, #0
 800245c:	68f8      	ldr	r0, [r7, #12]
 800245e:	f7ff fee7 	bl	8002230 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002462:	7abb      	ldrb	r3, [r7, #10]
 8002464:	4619      	mov	r1, r3
 8002466:	68f8      	ldr	r0, [r7, #12]
 8002468:	f7ff fee2 	bl	8002230 <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 800246c:	68f8      	ldr	r0, [r7, #12]
 800246e:	f7ff ff00 	bl	8002272 <u8x8_byte_EndTransfer>
      break;
 8002472:	e02c      	b.n	80024ce <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002478:	e00a      	b.n	8002490 <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	2118      	movs	r1, #24
 800247e:	68f8      	ldr	r0, [r7, #12]
 8002480:	f7ff ffb0 	bl	80023e4 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002484:	7abb      	ldrb	r3, [r7, #10]
 8002486:	3b18      	subs	r3, #24
 8002488:	72bb      	strb	r3, [r7, #10]
	p+=24;
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	3318      	adds	r3, #24
 800248e:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002490:	7abb      	ldrb	r3, [r7, #10]
 8002492:	2b18      	cmp	r3, #24
 8002494:	d8f1      	bhi.n	800247a <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002496:	7abb      	ldrb	r3, [r7, #10]
 8002498:	697a      	ldr	r2, [r7, #20]
 800249a:	4619      	mov	r1, r3
 800249c:	68f8      	ldr	r0, [r7, #12]
 800249e:	f7ff ffa1 	bl	80023e4 <u8x8_i2c_data_transfer>
      break;
 80024a2:	e014      	b.n	80024ce <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024aa:	2bff      	cmp	r3, #255	; 0xff
 80024ac:	d103      	bne.n	80024b6 <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2278      	movs	r2, #120	; 0x78
 80024b2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	691c      	ldr	r4, [r3, #16]
 80024ba:	7aba      	ldrb	r2, [r7, #10]
 80024bc:	7af9      	ldrb	r1, [r7, #11]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	68f8      	ldr	r0, [r7, #12]
 80024c2:	47a0      	blx	r4
 80024c4:	4603      	mov	r3, r0
 80024c6:	e003      	b.n	80024d0 <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 80024c8:	2300      	movs	r3, #0
 80024ca:	e001      	b.n	80024d0 <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 80024cc:	bf00      	nop
  }
  return 1;
 80024ce:	2301      	movs	r3, #1
}
 80024d0:	4618      	mov	r0, r3
 80024d2:	371c      	adds	r7, #28
 80024d4:	46bd      	mov	sp, r7
 80024d6:	bd90      	pop	{r4, r7, pc}

080024d8 <u8x8_d_ssd1305_generic>:
};



static uint8_t u8x8_d_ssd1305_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	60f8      	str	r0, [r7, #12]
 80024e0:	607b      	str	r3, [r7, #4]
 80024e2:	460b      	mov	r3, r1
 80024e4:	72fb      	strb	r3, [r7, #11]
 80024e6:	4613      	mov	r3, r2
 80024e8:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 80024ea:	7afb      	ldrb	r3, [r7, #11]
 80024ec:	2b0f      	cmp	r3, #15
 80024ee:	d006      	beq.n	80024fe <u8x8_d_ssd1305_generic+0x26>
 80024f0:	2b0f      	cmp	r3, #15
 80024f2:	dc67      	bgt.n	80025c4 <u8x8_d_ssd1305_generic+0xec>
 80024f4:	2b0b      	cmp	r3, #11
 80024f6:	d048      	beq.n	800258a <u8x8_d_ssd1305_generic+0xb2>
 80024f8:	2b0e      	cmp	r3, #14
 80024fa:	d053      	beq.n	80025a4 <u8x8_d_ssd1305_generic+0xcc>
 80024fc:	e062      	b.n	80025c4 <u8x8_d_ssd1305_generic+0xec>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 80024fe:	68f8      	ldr	r0, [r7, #12]
 8002500:	f7ff fefe 	bl	8002300 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	795b      	ldrb	r3, [r3, #5]
 8002508:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 800250a:	7dfb      	ldrb	r3, [r7, #23]
 800250c:	00db      	lsls	r3, r3, #3
 800250e:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002516:	7dfb      	ldrb	r3, [r7, #23]
 8002518:	4413      	add	r3, r2
 800251a:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 800251c:	2140      	movs	r1, #64	; 0x40
 800251e:	68f8      	ldr	r0, [r7, #12]
 8002520:	f7ff feb7 	bl	8002292 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002524:	7dfb      	ldrb	r3, [r7, #23]
 8002526:	091b      	lsrs	r3, r3, #4
 8002528:	b2db      	uxtb	r3, r3
 800252a:	f043 0310 	orr.w	r3, r3, #16
 800252e:	b2db      	uxtb	r3, r3
 8002530:	4619      	mov	r1, r3
 8002532:	68f8      	ldr	r0, [r7, #12]
 8002534:	f7ff fead 	bl	8002292 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 8002538:	7dfb      	ldrb	r3, [r7, #23]
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	b2db      	uxtb	r3, r3
 8002540:	4619      	mov	r1, r3
 8002542:	68f8      	ldr	r0, [r7, #12]
 8002544:	f7ff feb7 	bl	80022b6 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	799b      	ldrb	r3, [r3, #6]
 800254c:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002550:	b2db      	uxtb	r3, r3
 8002552:	4619      	mov	r1, r3
 8002554:	68f8      	ldr	r0, [r7, #12]
 8002556:	f7ff feae 	bl	80022b6 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	791b      	ldrb	r3, [r3, #4]
 800255e:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002566:	7dbb      	ldrb	r3, [r7, #22]
 8002568:	00db      	lsls	r3, r3, #3
 800256a:	b2db      	uxtb	r3, r3
 800256c:	693a      	ldr	r2, [r7, #16]
 800256e:	4619      	mov	r1, r3
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f7ff feb2 	bl	80022da <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8002576:	7abb      	ldrb	r3, [r7, #10]
 8002578:	3b01      	subs	r3, #1
 800257a:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 800257c:	7abb      	ldrb	r3, [r7, #10]
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1eb      	bne.n	800255a <u8x8_d_ssd1305_generic+0x82>
      
      u8x8_cad_EndTransfer(u8x8);
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f7ff fecc 	bl	8002320 <u8x8_cad_EndTransfer>
      break;
 8002588:	e01e      	b.n	80025c8 <u8x8_d_ssd1305_generic+0xf0>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 800258a:	7abb      	ldrb	r3, [r7, #10]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d104      	bne.n	800259a <u8x8_d_ssd1305_generic+0xc2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave0_seq);
 8002590:	4910      	ldr	r1, [pc, #64]	; (80025d4 <u8x8_d_ssd1305_generic+0xfc>)
 8002592:	68f8      	ldr	r0, [r7, #12]
 8002594:	f7ff fed4 	bl	8002340 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
      break;
 8002598:	e016      	b.n	80025c8 <u8x8_d_ssd1305_generic+0xf0>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
 800259a:	490f      	ldr	r1, [pc, #60]	; (80025d8 <u8x8_d_ssd1305_generic+0x100>)
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f7ff fecf 	bl	8002340 <u8x8_cad_SendSequence>
      break;
 80025a2:	e011      	b.n	80025c8 <u8x8_d_ssd1305_generic+0xf0>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80025a4:	68f8      	ldr	r0, [r7, #12]
 80025a6:	f7ff feab 	bl	8002300 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80025aa:	2181      	movs	r1, #129	; 0x81
 80025ac:	68f8      	ldr	r0, [r7, #12]
 80025ae:	f7ff fe70 	bl	8002292 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1305 has range from 0 to 255 */
 80025b2:	7abb      	ldrb	r3, [r7, #10]
 80025b4:	4619      	mov	r1, r3
 80025b6:	68f8      	ldr	r0, [r7, #12]
 80025b8:	f7ff fe7d 	bl	80022b6 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80025bc:	68f8      	ldr	r0, [r7, #12]
 80025be:	f7ff feaf 	bl	8002320 <u8x8_cad_EndTransfer>
      break;
 80025c2:	e001      	b.n	80025c8 <u8x8_d_ssd1305_generic+0xf0>
#endif
    default:
      return 0;
 80025c4:	2300      	movs	r3, #0
 80025c6:	e000      	b.n	80025ca <u8x8_d_ssd1305_generic+0xf2>
  }
  return 1;
 80025c8:	2301      	movs	r3, #1
}
 80025ca:	4618      	mov	r0, r3
 80025cc:	3718      	adds	r7, #24
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bd80      	pop	{r7, pc}
 80025d2:	bf00      	nop
 80025d4:	0800d8c8 	.word	0x0800d8c8
 80025d8:	0800d8d0 	.word	0x0800d8d0

080025dc <u8x8_d_ssd1305_128x32_noname>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1305_128x32_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b084      	sub	sp, #16
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	60f8      	str	r0, [r7, #12]
 80025e4:	607b      	str	r3, [r7, #4]
 80025e6:	460b      	mov	r3, r1
 80025e8:	72fb      	strb	r3, [r7, #11]
 80025ea:	4613      	mov	r3, r2
 80025ec:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1305_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 80025ee:	7aba      	ldrb	r2, [r7, #10]
 80025f0:	7af9      	ldrb	r1, [r7, #11]
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	68f8      	ldr	r0, [r7, #12]
 80025f6:	f7ff ff6f 	bl	80024d8 <u8x8_d_ssd1305_generic>
 80025fa:	4603      	mov	r3, r0
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d001      	beq.n	8002604 <u8x8_d_ssd1305_128x32_noname+0x28>
    return 1;
 8002600:	2301      	movs	r3, #1
 8002602:	e032      	b.n	800266a <u8x8_d_ssd1305_128x32_noname+0x8e>
  
  switch(msg)
 8002604:	7afb      	ldrb	r3, [r7, #11]
 8002606:	2b0d      	cmp	r3, #13
 8002608:	d006      	beq.n	8002618 <u8x8_d_ssd1305_128x32_noname+0x3c>
 800260a:	2b0d      	cmp	r3, #13
 800260c:	dc2a      	bgt.n	8002664 <u8x8_d_ssd1305_128x32_noname+0x88>
 800260e:	2b09      	cmp	r3, #9
 8002610:	d023      	beq.n	800265a <u8x8_d_ssd1305_128x32_noname+0x7e>
 8002612:	2b0a      	cmp	r3, #10
 8002614:	d019      	beq.n	800264a <u8x8_d_ssd1305_128x32_noname+0x6e>
 8002616:	e025      	b.n	8002664 <u8x8_d_ssd1305_128x32_noname+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002618:	7abb      	ldrb	r3, [r7, #10]
 800261a:	2b00      	cmp	r3, #0
 800261c:	d10a      	bne.n	8002634 <u8x8_d_ssd1305_128x32_noname+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip0_seq);
 800261e:	4915      	ldr	r1, [pc, #84]	; (8002674 <u8x8_d_ssd1305_128x32_noname+0x98>)
 8002620:	68f8      	ldr	r0, [r7, #12]
 8002622:	f7ff fe8d 	bl	8002340 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	7c9a      	ldrb	r2, [r3, #18]
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002632:	e019      	b.n	8002668 <u8x8_d_ssd1305_128x32_noname+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
 8002634:	4910      	ldr	r1, [pc, #64]	; (8002678 <u8x8_d_ssd1305_128x32_noname+0x9c>)
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f7ff fe82 	bl	8002340 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	7cda      	ldrb	r2, [r3, #19]
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8002648:	e00e      	b.n	8002668 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 800264a:	68f8      	ldr	r0, [r7, #12]
 800264c:	f000 f82e 	bl	80026ac <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_noname_init_seq);    
 8002650:	490a      	ldr	r1, [pc, #40]	; (800267c <u8x8_d_ssd1305_128x32_noname+0xa0>)
 8002652:	68f8      	ldr	r0, [r7, #12]
 8002654:	f7ff fe74 	bl	8002340 <u8x8_cad_SendSequence>
      break;
 8002658:	e006      	b.n	8002668 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1305_128x32_noname_display_info);
 800265a:	4909      	ldr	r1, [pc, #36]	; (8002680 <u8x8_d_ssd1305_128x32_noname+0xa4>)
 800265c:	68f8      	ldr	r0, [r7, #12]
 800265e:	f000 f811 	bl	8002684 <u8x8_d_helper_display_setup_memory>
      break;
 8002662:	e001      	b.n	8002668 <u8x8_d_ssd1305_128x32_noname+0x8c>
    default:
      return 0;
 8002664:	2300      	movs	r3, #0
 8002666:	e000      	b.n	800266a <u8x8_d_ssd1305_128x32_noname+0x8e>
  }
  return 1;
 8002668:	2301      	movs	r3, #1
}
 800266a:	4618      	mov	r0, r3
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	0800d8d8 	.word	0x0800d8d8
 8002678:	0800d8e4 	.word	0x0800d8e4
 800267c:	0800d908 	.word	0x0800d908
 8002680:	0800d8f0 	.word	0x0800d8f0

08002684 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002684:	b480      	push	{r7}
 8002686:	b083      	sub	sp, #12
 8002688:	af00      	add	r7, sp, #0
 800268a:	6078      	str	r0, [r7, #4]
 800268c:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	683a      	ldr	r2, [r7, #0]
 8002692:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	7c9a      	ldrb	r2, [r3, #18]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80026a0:	bf00      	nop
 80026a2:	370c      	adds	r7, #12
 80026a4:	46bd      	mov	sp, r7
 80026a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026aa:	4770      	bx	lr

080026ac <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80026ac:	b590      	push	{r4, r7, lr}
 80026ae:	b083      	sub	sp, #12
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	695c      	ldr	r4, [r3, #20]
 80026b8:	2300      	movs	r3, #0
 80026ba:	2200      	movs	r2, #0
 80026bc:	2128      	movs	r1, #40	; 0x28
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68dc      	ldr	r4, [r3, #12]
 80026c6:	2300      	movs	r3, #0
 80026c8:	2200      	movs	r2, #0
 80026ca:	2114      	movs	r1, #20
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 80026d0:	2201      	movs	r2, #1
 80026d2:	214b      	movs	r1, #75	; 0x4b
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f886 	bl	80027e6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	791b      	ldrb	r3, [r3, #4]
 80026e0:	461a      	mov	r2, r3
 80026e2:	2129      	movs	r1, #41	; 0x29
 80026e4:	6878      	ldr	r0, [r7, #4]
 80026e6:	f000 f87e 	bl	80027e6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 80026ea:	2200      	movs	r2, #0
 80026ec:	214b      	movs	r1, #75	; 0x4b
 80026ee:	6878      	ldr	r0, [r7, #4]
 80026f0:	f000 f879 	bl	80027e6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	791b      	ldrb	r3, [r3, #4]
 80026fa:	461a      	mov	r2, r3
 80026fc:	2129      	movs	r1, #41	; 0x29
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f000 f871 	bl	80027e6 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002704:	2201      	movs	r2, #1
 8002706:	214b      	movs	r1, #75	; 0x4b
 8002708:	6878      	ldr	r0, [r7, #4]
 800270a:	f000 f86c 	bl	80027e6 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	795b      	ldrb	r3, [r3, #5]
 8002714:	461a      	mov	r2, r3
 8002716:	2129      	movs	r1, #41	; 0x29
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 f864 	bl	80027e6 <u8x8_gpio_call>
}    
 800271e:	bf00      	nop
 8002720:	370c      	adds	r7, #12
 8002722:	46bd      	mov	sp, r7
 8002724:	bd90      	pop	{r4, r7, pc}

08002726 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002726:	b590      	push	{r4, r7, lr}
 8002728:	b085      	sub	sp, #20
 800272a:	af00      	add	r7, sp, #0
 800272c:	6078      	str	r0, [r7, #4]
 800272e:	4608      	mov	r0, r1
 8002730:	4611      	mov	r1, r2
 8002732:	461a      	mov	r2, r3
 8002734:	4603      	mov	r3, r0
 8002736:	70fb      	strb	r3, [r7, #3]
 8002738:	460b      	mov	r3, r1
 800273a:	70bb      	strb	r3, [r7, #2]
 800273c:	4613      	mov	r3, r2
 800273e:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8002740:	78fb      	ldrb	r3, [r7, #3]
 8002742:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002744:	78bb      	ldrb	r3, [r7, #2]
 8002746:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002748:	787b      	ldrb	r3, [r7, #1]
 800274a:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	689c      	ldr	r4, [r3, #8]
 8002754:	f107 0308 	add.w	r3, r7, #8
 8002758:	2201      	movs	r2, #1
 800275a:	210f      	movs	r1, #15
 800275c:	6878      	ldr	r0, [r7, #4]
 800275e:	47a0      	blx	r4
 8002760:	4603      	mov	r3, r0
}
 8002762:	4618      	mov	r0, r3
 8002764:	3714      	adds	r7, #20
 8002766:	46bd      	mov	sp, r7
 8002768:	bd90      	pop	{r4, r7, pc}

0800276a <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800276a:	b590      	push	{r4, r7, lr}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	689c      	ldr	r4, [r3, #8]
 8002776:	2300      	movs	r3, #0
 8002778:	2200      	movs	r2, #0
 800277a:	2109      	movs	r1, #9
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	47a0      	blx	r4
}
 8002780:	bf00      	nop
 8002782:	370c      	adds	r7, #12
 8002784:	46bd      	mov	sp, r7
 8002786:	bd90      	pop	{r4, r7, pc}

08002788 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 8002788:	b590      	push	{r4, r7, lr}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689c      	ldr	r4, [r3, #8]
 8002794:	2300      	movs	r3, #0
 8002796:	2200      	movs	r2, #0
 8002798:	210a      	movs	r1, #10
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 800279e:	bf00      	nop
 80027a0:	370c      	adds	r7, #12
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd90      	pop	{r4, r7, pc}

080027a6 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80027a6:	b590      	push	{r4, r7, lr}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
 80027ae:	460b      	mov	r3, r1
 80027b0:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	689c      	ldr	r4, [r3, #8]
 80027b6:	78fa      	ldrb	r2, [r7, #3]
 80027b8:	2300      	movs	r3, #0
 80027ba:	210b      	movs	r1, #11
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	47a0      	blx	r4
}
 80027c0:	bf00      	nop
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd90      	pop	{r4, r7, pc}

080027c8 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80027c8:	b590      	push	{r4, r7, lr}
 80027ca:	b083      	sub	sp, #12
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	689c      	ldr	r4, [r3, #8]
 80027d4:	2300      	movs	r3, #0
 80027d6:	2200      	movs	r2, #0
 80027d8:	2110      	movs	r1, #16
 80027da:	6878      	ldr	r0, [r7, #4]
 80027dc:	47a0      	blx	r4
}
 80027de:	bf00      	nop
 80027e0:	370c      	adds	r7, #12
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bd90      	pop	{r4, r7, pc}

080027e6 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80027e6:	b590      	push	{r4, r7, lr}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
 80027ee:	460b      	mov	r3, r1
 80027f0:	70fb      	strb	r3, [r7, #3]
 80027f2:	4613      	mov	r3, r2
 80027f4:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	695c      	ldr	r4, [r3, #20]
 80027fa:	78ba      	ldrb	r2, [r7, #2]
 80027fc:	78f9      	ldrb	r1, [r7, #3]
 80027fe:	2300      	movs	r3, #0
 8002800:	6878      	ldr	r0, [r7, #4]
 8002802:	47a0      	blx	r4
}
 8002804:	bf00      	nop
 8002806:	370c      	adds	r7, #12
 8002808:	46bd      	mov	sp, r7
 800280a:	bd90      	pop	{r4, r7, pc}

0800280c <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 800280c:	b480      	push	{r7}
 800280e:	b085      	sub	sp, #20
 8002810:	af00      	add	r7, sp, #0
 8002812:	60f8      	str	r0, [r7, #12]
 8002814:	607b      	str	r3, [r7, #4]
 8002816:	460b      	mov	r3, r1
 8002818:	72fb      	strb	r3, [r7, #11]
 800281a:	4613      	mov	r3, r2
 800281c:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800281e:	2300      	movs	r3, #0
}
 8002820:	4618      	mov	r0, r3
 8002822:	3714      	adds	r7, #20
 8002824:	46bd      	mov	sp, r7
 8002826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282a:	4770      	bx	lr

0800282c <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 800282c:	b480      	push	{r7}
 800282e:	b083      	sub	sp, #12
 8002830:	af00      	add	r7, sp, #0
 8002832:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2200      	movs	r2, #0
 8002838:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a11      	ldr	r2, [pc, #68]	; (8002884 <u8x8_SetupDefaults+0x58>)
 800283e:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	4a10      	ldr	r2, [pc, #64]	; (8002884 <u8x8_SetupDefaults+0x58>)
 8002844:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a0e      	ldr	r2, [pc, #56]	; (8002884 <u8x8_SetupDefaults+0x58>)
 800284a:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	4a0d      	ldr	r2, [pc, #52]	; (8002884 <u8x8_SetupDefaults+0x58>)
 8002850:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	2200      	movs	r2, #0
 8002856:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	2200      	movs	r2, #0
 800285e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	2200      	movs	r2, #0
 8002866:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	22ff      	movs	r2, #255	; 0xff
 800286c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	22ff      	movs	r2, #255	; 0xff
 8002874:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 8002878:	bf00      	nop
 800287a:	370c      	adds	r7, #12
 800287c:	46bd      	mov	sp, r7
 800287e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002882:	4770      	bx	lr
 8002884:	0800280d 	.word	0x0800280d

08002888 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b084      	sub	sp, #16
 800288c:	af00      	add	r7, sp, #0
 800288e:	60f8      	str	r0, [r7, #12]
 8002890:	60b9      	str	r1, [r7, #8]
 8002892:	607a      	str	r2, [r7, #4]
 8002894:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 8002896:	68f8      	ldr	r0, [r7, #12]
 8002898:	f7ff ffc8 	bl	800282c <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	68ba      	ldr	r2, [r7, #8]
 80028a0:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	687a      	ldr	r2, [r7, #4]
 80028a6:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	683a      	ldr	r2, [r7, #0]
 80028ac:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	69ba      	ldr	r2, [r7, #24]
 80028b2:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	f7ff ff58 	bl	800276a <u8x8_SetupMemory>
}
 80028ba:	bf00      	nop
 80028bc:	3710      	adds	r7, #16
 80028be:	46bd      	mov	sp, r7
 80028c0:	bd80      	pop	{r7, pc}
	...

080028c4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80028c8:	f001 fb0d 	bl	8003ee6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80028cc:	f000 f8e6 	bl	8002a9c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80028d0:	f000 fb0e 	bl	8002ef0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80028d4:	f000 fadc 	bl	8002e90 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80028d8:	f000 f9b6 	bl	8002c48 <MX_CAN1_Init>
  MX_I2C1_Init();
 80028dc:	f000 fa28 	bl	8002d30 <MX_I2C1_Init>
  MX_ADC1_Init();
 80028e0:	f000 f93e 	bl	8002b60 <MX_ADC1_Init>
  MX_DAC1_Init();
 80028e4:	f000 f9e8 	bl	8002cb8 <MX_DAC1_Init>
  MX_TIM6_Init();
 80028e8:	f000 fa66 	bl	8002db8 <MX_TIM6_Init>
  MX_TIM7_Init();
 80028ec:	f000 fa9a 	bl	8002e24 <MX_TIM7_Init>
  /* USER CODE BEGIN 2 */

	MY_ADC1_Init();
 80028f0:	f000 fb6c 	bl	8002fcc <MY_ADC1_Init>

	HAL_TIM_Base_Start(&htim7);
 80028f4:	484b      	ldr	r0, [pc, #300]	; (8002a24 <main+0x160>)
 80028f6:	f005 fb93 	bl	8008020 <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 80028fa:	484b      	ldr	r0, [pc, #300]	; (8002a28 <main+0x164>)
 80028fc:	f005 fbdc 	bl	80080b8 <HAL_TIM_Base_Start_IT>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002900:	2100      	movs	r1, #0
 8002902:	484a      	ldr	r0, [pc, #296]	; (8002a2c <main+0x168>)
 8002904:	f003 f990 	bl	8005c28 <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8002908:	2110      	movs	r1, #16
 800290a:	4848      	ldr	r0, [pc, #288]	; (8002a2c <main+0x168>)
 800290c:	f003 f98c 	bl	8005c28 <HAL_DAC_Start>

	setOutMuxBit(DRST_BIT, GPIO_PIN_RESET);
 8002910:	2304      	movs	r3, #4
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2100      	movs	r1, #0
 8002916:	4618      	mov	r0, r3
 8002918:	f000 fc58 	bl	80031cc <setOutMuxBit>
	delayMicro(2);
 800291c:	2002      	movs	r0, #2
 800291e:	f000 fbb5 	bl	800308c <delayMicro>
	setOutMuxBit(DRST_BIT, GPIO_PIN_SET);
 8002922:	2304      	movs	r3, #4
 8002924:	b2db      	uxtb	r3, r3
 8002926:	2101      	movs	r1, #1
 8002928:	4618      	mov	r0, r3
 800292a:	f000 fc4f 	bl	80031cc <setOutMuxBit>
	u8g2_Setup_ssd1305_i2c_128x32_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c,
 800292e:	4b40      	ldr	r3, [pc, #256]	; (8002a30 <main+0x16c>)
 8002930:	4a40      	ldr	r2, [pc, #256]	; (8002a34 <main+0x170>)
 8002932:	4941      	ldr	r1, [pc, #260]	; (8002a38 <main+0x174>)
 8002934:	4841      	ldr	r0, [pc, #260]	; (8002a3c <main+0x178>)
 8002936:	f7fe fb1b 	bl	8000f70 <u8g2_Setup_ssd1305_i2c_128x32_noname_f>
			u8x8_gpio_and_delay);
	u8g2_InitDisplay(&u8g2);
 800293a:	4840      	ldr	r0, [pc, #256]	; (8002a3c <main+0x178>)
 800293c:	f7ff ff24 	bl	8002788 <u8x8_InitDisplay>
	u8g2_ClearDisplay(&u8g2);
 8002940:	483e      	ldr	r0, [pc, #248]	; (8002a3c <main+0x178>)
 8002942:	f7fe faf0 	bl	8000f26 <u8g2_ClearDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8002946:	2100      	movs	r1, #0
 8002948:	483c      	ldr	r0, [pc, #240]	; (8002a3c <main+0x178>)
 800294a:	f7ff ff2c 	bl	80027a6 <u8x8_SetPowerSave>
	setOutMuxBit(DEN_BIT, GPIO_PIN_SET);
 800294e:	2303      	movs	r3, #3
 8002950:	b2db      	uxtb	r3, r3
 8002952:	2101      	movs	r1, #1
 8002954:	4618      	mov	r0, r3
 8002956:	f000 fc39 	bl	80031cc <setOutMuxBit>

	setCANFilter(IDin, 0x7ff, 0);
 800295a:	f240 1323 	movw	r3, #291	; 0x123
 800295e:	2200      	movs	r2, #0
 8002960:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8002964:	4618      	mov	r0, r3
 8002966:	f000 fbab 	bl	80030c0 <setCANFilter>
	HAL_CAN_Start(&hcan1);
 800296a:	4835      	ldr	r0, [pc, #212]	; (8002a40 <main+0x17c>)
 800296c:	f002 fb9d 	bl	80050aa <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8002970:	2102      	movs	r1, #2
 8002972:	4833      	ldr	r0, [pc, #204]	; (8002a40 <main+0x17c>)
 8002974:	f002 fe1c 	bl	80055b0 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 8002978:	2101      	movs	r1, #1
 800297a:	4831      	ldr	r0, [pc, #196]	; (8002a40 <main+0x17c>)
 800297c:	f002 fe18 	bl	80055b0 <HAL_CAN_ActivateNotification>

	serialPrintln("charIOT-Key-C");
 8002980:	4830      	ldr	r0, [pc, #192]	; (8002a44 <main+0x180>)
 8002982:	f000 fb65 	bl	8003050 <serialPrintln>
	UID0 = HAL_GetUIDw0();
 8002986:	f001 fb0b 	bl	8003fa0 <HAL_GetUIDw0>
 800298a:	4603      	mov	r3, r0
 800298c:	4a2e      	ldr	r2, [pc, #184]	; (8002a48 <main+0x184>)
 800298e:	6013      	str	r3, [r2, #0]
//	}

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002990:	f006 fb18 	bl	8008fc4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of keysMutex */
  keysMutexHandle = osMutexNew(&keysMutex_attributes);
 8002994:	482d      	ldr	r0, [pc, #180]	; (8002a4c <main+0x188>)
 8002996:	f006 fc0c 	bl	80091b2 <osMutexNew>
 800299a:	4603      	mov	r3, r0
 800299c:	4a2c      	ldr	r2, [pc, #176]	; (8002a50 <main+0x18c>)
 800299e:	6013      	str	r3, [r2, #0]
//	osMutexRelease(keysMutexHandle);
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_TX_Semaphore */
  CAN_TX_SemaphoreHandle = osSemaphoreNew(3, 3, &CAN_TX_Semaphore_attributes);
 80029a0:	4a2c      	ldr	r2, [pc, #176]	; (8002a54 <main+0x190>)
 80029a2:	2103      	movs	r1, #3
 80029a4:	2003      	movs	r0, #3
 80029a6:	f006 fc8a 	bl	80092be <osSemaphoreNew>
 80029aa:	4603      	mov	r3, r0
 80029ac:	4a2a      	ldr	r2, [pc, #168]	; (8002a58 <main+0x194>)
 80029ae:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80029b0:	4b29      	ldr	r3, [pc, #164]	; (8002a58 <main+0x194>)
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4618      	mov	r0, r3
 80029b6:	f006 fd5d 	bl	8009474 <osSemaphoreRelease>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of msgInQ */
  msgInQHandle = osMessageQueueNew (36, sizeof(CAN_MSG_t), &msgInQ_attributes);
 80029ba:	4a28      	ldr	r2, [pc, #160]	; (8002a5c <main+0x198>)
 80029bc:	210c      	movs	r1, #12
 80029be:	2024      	movs	r0, #36	; 0x24
 80029c0:	f006 fd9c 	bl	80094fc <osMessageQueueNew>
 80029c4:	4603      	mov	r3, r0
 80029c6:	4a26      	ldr	r2, [pc, #152]	; (8002a60 <main+0x19c>)
 80029c8:	6013      	str	r3, [r2, #0]

  /* creation of msgOutQ */
  msgOutQHandle = osMessageQueueNew (36, sizeof(CAN_MSG_t), &msgOutQ_attributes);
 80029ca:	4a26      	ldr	r2, [pc, #152]	; (8002a64 <main+0x1a0>)
 80029cc:	210c      	movs	r1, #12
 80029ce:	2024      	movs	r0, #36	; 0x24
 80029d0:	f006 fd94 	bl	80094fc <osMessageQueueNew>
 80029d4:	4603      	mov	r3, r0
 80029d6:	4a24      	ldr	r2, [pc, #144]	; (8002a68 <main+0x1a4>)
 80029d8:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80029da:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <main+0x1a8>)
 80029dc:	2100      	movs	r1, #0
 80029de:	4824      	ldr	r0, [pc, #144]	; (8002a70 <main+0x1ac>)
 80029e0:	f006 fb3a 	bl	8009058 <osThreadNew>
 80029e4:	4603      	mov	r3, r0
 80029e6:	4a23      	ldr	r2, [pc, #140]	; (8002a74 <main+0x1b0>)
 80029e8:	6013      	str	r3, [r2, #0]

  /* creation of displayUpdate */
//  displayUpdateHandle = osThreadNew(displayUpdateTask, NULL, &displayUpdate_attributes);

  /* creation of decodeTask */
  decodeTaskHandle = osThreadNew(decode, NULL, &decodeTask_attributes);
 80029ea:	4a23      	ldr	r2, [pc, #140]	; (8002a78 <main+0x1b4>)
 80029ec:	2100      	movs	r1, #0
 80029ee:	4823      	ldr	r0, [pc, #140]	; (8002a7c <main+0x1b8>)
 80029f0:	f006 fb32 	bl	8009058 <osThreadNew>
 80029f4:	4603      	mov	r3, r0
 80029f6:	4a22      	ldr	r2, [pc, #136]	; (8002a80 <main+0x1bc>)
 80029f8:	6013      	str	r3, [r2, #0]

  /* creation of CAN_TX_TaskName */
  CAN_TX_TaskNameHandle = osThreadNew(CAN_Transmit, NULL, &CAN_TX_TaskName_attributes);
 80029fa:	4a22      	ldr	r2, [pc, #136]	; (8002a84 <main+0x1c0>)
 80029fc:	2100      	movs	r1, #0
 80029fe:	4822      	ldr	r0, [pc, #136]	; (8002a88 <main+0x1c4>)
 8002a00:	f006 fb2a 	bl	8009058 <osThreadNew>
 8002a04:	4603      	mov	r3, r0
 8002a06:	4a21      	ldr	r2, [pc, #132]	; (8002a8c <main+0x1c8>)
 8002a08:	6013      	str	r3, [r2, #0]

  /* creation of handshakeTask */
  handshakeTaskHandle = osThreadNew(handshake, NULL, &handshakeTask_attributes);
 8002a0a:	4a21      	ldr	r2, [pc, #132]	; (8002a90 <main+0x1cc>)
 8002a0c:	2100      	movs	r1, #0
 8002a0e:	4821      	ldr	r0, [pc, #132]	; (8002a94 <main+0x1d0>)
 8002a10:	f006 fb22 	bl	8009058 <osThreadNew>
 8002a14:	4603      	mov	r3, r0
 8002a16:	4a20      	ldr	r2, [pc, #128]	; (8002a98 <main+0x1d4>)
 8002a18:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8002a1a:	f006 faf7 	bl	800900c <osKernelStart>
 8002a1e:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 8002a20:	4618      	mov	r0, r3
 8002a22:	bd80      	pop	{r7, pc}
 8002a24:	20000404 	.word	0x20000404
 8002a28:	200003b8 	.word	0x200003b8
 8002a2c:	20000350 	.word	0x20000350
 8002a30:	08003255 	.word	0x08003255
 8002a34:	08003275 	.word	0x08003275
 8002a38:	0800d8bc 	.word	0x0800d8bc
 8002a3c:	200004f4 	.word	0x200004f4
 8002a40:	20000328 	.word	0x20000328
 8002a44:	0800d3ec 	.word	0x0800d3ec
 8002a48:	200005e8 	.word	0x200005e8
 8002a4c:	0800d9fc 	.word	0x0800d9fc
 8002a50:	200004ec 	.word	0x200004ec
 8002a54:	0800da0c 	.word	0x0800da0c
 8002a58:	200004f0 	.word	0x200004f0
 8002a5c:	0800d9cc 	.word	0x0800d9cc
 8002a60:	200004e4 	.word	0x200004e4
 8002a64:	0800d9e4 	.word	0x0800d9e4
 8002a68:	200004e8 	.word	0x200004e8
 8002a6c:	0800d93c 	.word	0x0800d93c
 8002a70:	080034a9 	.word	0x080034a9
 8002a74:	200004d4 	.word	0x200004d4
 8002a78:	0800d960 	.word	0x0800d960
 8002a7c:	080034b9 	.word	0x080034b9
 8002a80:	200004d8 	.word	0x200004d8
 8002a84:	0800d984 	.word	0x0800d984
 8002a88:	080034f1 	.word	0x080034f1
 8002a8c:	200004dc 	.word	0x200004dc
 8002a90:	0800d9a8 	.word	0x0800d9a8
 8002a94:	08003531 	.word	0x08003531
 8002a98:	200004e0 	.word	0x200004e0

08002a9c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002a9c:	b580      	push	{r7, lr}
 8002a9e:	b096      	sub	sp, #88	; 0x58
 8002aa0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002aa2:	f107 0314 	add.w	r3, r7, #20
 8002aa6:	2244      	movs	r2, #68	; 0x44
 8002aa8:	2100      	movs	r1, #0
 8002aaa:	4618      	mov	r0, r3
 8002aac:	f009 ff80 	bl	800c9b0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002ab0:	463b      	mov	r3, r7
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	601a      	str	r2, [r3, #0]
 8002ab6:	605a      	str	r2, [r3, #4]
 8002ab8:	609a      	str	r2, [r3, #8]
 8002aba:	60da      	str	r2, [r3, #12]
 8002abc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002abe:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002ac2:	f004 f89d 	bl	8006c00 <HAL_PWREx_ControlVoltageScaling>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d001      	beq.n	8002ad0 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8002acc:	f000 feb0 	bl	8003830 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8002ad0:	f004 f878 	bl	8006bc4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002ad4:	4b21      	ldr	r3, [pc, #132]	; (8002b5c <SystemClock_Config+0xc0>)
 8002ad6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ada:	4a20      	ldr	r2, [pc, #128]	; (8002b5c <SystemClock_Config+0xc0>)
 8002adc:	f023 0318 	bic.w	r3, r3, #24
 8002ae0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8002ae4:	2314      	movs	r3, #20
 8002ae6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002ae8:	2301      	movs	r3, #1
 8002aea:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002aec:	2301      	movs	r3, #1
 8002aee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8002af0:	2300      	movs	r3, #0
 8002af2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002af4:	2360      	movs	r3, #96	; 0x60
 8002af6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002af8:	2302      	movs	r3, #2
 8002afa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002afc:	2301      	movs	r3, #1
 8002afe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002b00:	2301      	movs	r3, #1
 8002b02:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 8002b04:	2328      	movs	r3, #40	; 0x28
 8002b06:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002b08:	2307      	movs	r3, #7
 8002b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002b0c:	2302      	movs	r3, #2
 8002b0e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002b10:	2302      	movs	r3, #2
 8002b12:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002b14:	f107 0314 	add.w	r3, r7, #20
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f004 f8c7 	bl	8006cac <HAL_RCC_OscConfig>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d001      	beq.n	8002b28 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8002b24:	f000 fe84 	bl	8003830 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002b28:	230f      	movs	r3, #15
 8002b2a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002b30:	2300      	movs	r3, #0
 8002b32:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002b34:	2300      	movs	r3, #0
 8002b36:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002b38:	2300      	movs	r3, #0
 8002b3a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002b3c:	463b      	mov	r3, r7
 8002b3e:	2104      	movs	r1, #4
 8002b40:	4618      	mov	r0, r3
 8002b42:	f004 fcc7 	bl	80074d4 <HAL_RCC_ClockConfig>
 8002b46:	4603      	mov	r3, r0
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d001      	beq.n	8002b50 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8002b4c:	f000 fe70 	bl	8003830 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8002b50:	f005 f90c 	bl	8007d6c <HAL_RCCEx_EnableMSIPLLMode>
}
 8002b54:	bf00      	nop
 8002b56:	3758      	adds	r7, #88	; 0x58
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000

08002b60 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b086      	sub	sp, #24
 8002b64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8002b66:	463b      	mov	r3, r7
 8002b68:	2200      	movs	r2, #0
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	605a      	str	r2, [r3, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
 8002b70:	60da      	str	r2, [r3, #12]
 8002b72:	611a      	str	r2, [r3, #16]
 8002b74:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8002b76:	4b30      	ldr	r3, [pc, #192]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002b78:	4a30      	ldr	r2, [pc, #192]	; (8002c3c <MX_ADC1_Init+0xdc>)
 8002b7a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002b7c:	4b2e      	ldr	r3, [pc, #184]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002b7e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002b82:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002b84:	4b2c      	ldr	r3, [pc, #176]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002b8a:	4b2b      	ldr	r3, [pc, #172]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002b90:	4b29      	ldr	r3, [pc, #164]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002b92:	2201      	movs	r2, #1
 8002b94:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002b96:	4b28      	ldr	r3, [pc, #160]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002b98:	2204      	movs	r2, #4
 8002b9a:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8002b9c:	4b26      	ldr	r3, [pc, #152]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8002ba2:	4b25      	ldr	r3, [pc, #148]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 2;
 8002ba8:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002baa:	2202      	movs	r2, #2
 8002bac:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002bae:	4b22      	ldr	r3, [pc, #136]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002bb0:	2200      	movs	r2, #0
 8002bb2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002bb6:	4b20      	ldr	r3, [pc, #128]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002bb8:	2200      	movs	r2, #0
 8002bba:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002bbc:	4b1e      	ldr	r3, [pc, #120]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002bc2:	4b1d      	ldr	r3, [pc, #116]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002bca:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002bcc:	2200      	movs	r2, #0
 8002bce:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8002bd0:	4b19      	ldr	r3, [pc, #100]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002bd2:	2200      	movs	r2, #0
 8002bd4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002bd8:	4817      	ldr	r0, [pc, #92]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002bda:	f001 fb79 	bl	80042d0 <HAL_ADC_Init>
 8002bde:	4603      	mov	r3, r0
 8002be0:	2b00      	cmp	r3, #0
 8002be2:	d001      	beq.n	8002be8 <MX_ADC1_Init+0x88>
  {
    Error_Handler();
 8002be4:	f000 fe24 	bl	8003830 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8002be8:	4b15      	ldr	r3, [pc, #84]	; (8002c40 <MX_ADC1_Init+0xe0>)
 8002bea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8002bec:	2306      	movs	r3, #6
 8002bee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002bf0:	2300      	movs	r3, #0
 8002bf2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002bf4:	237f      	movs	r3, #127	; 0x7f
 8002bf6:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002bf8:	2304      	movs	r3, #4
 8002bfa:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c00:	463b      	mov	r3, r7
 8002c02:	4619      	mov	r1, r3
 8002c04:	480c      	ldr	r0, [pc, #48]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002c06:	f001 fcab 	bl	8004560 <HAL_ADC_ConfigChannel>
 8002c0a:	4603      	mov	r3, r0
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d001      	beq.n	8002c14 <MX_ADC1_Init+0xb4>
  {
    Error_Handler();
 8002c10:	f000 fe0e 	bl	8003830 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8002c14:	4b0b      	ldr	r3, [pc, #44]	; (8002c44 <MX_ADC1_Init+0xe4>)
 8002c16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8002c18:	230c      	movs	r3, #12
 8002c1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002c1c:	463b      	mov	r3, r7
 8002c1e:	4619      	mov	r1, r3
 8002c20:	4805      	ldr	r0, [pc, #20]	; (8002c38 <MX_ADC1_Init+0xd8>)
 8002c22:	f001 fc9d 	bl	8004560 <HAL_ADC_ConfigChannel>
 8002c26:	4603      	mov	r3, r0
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d001      	beq.n	8002c30 <MX_ADC1_Init+0xd0>
  {
    Error_Handler();
 8002c2c:	f000 fe00 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002c30:	bf00      	nop
 8002c32:	3718      	adds	r7, #24
 8002c34:	46bd      	mov	sp, r7
 8002c36:	bd80      	pop	{r7, pc}
 8002c38:	200002c4 	.word	0x200002c4
 8002c3c:	50040000 	.word	0x50040000
 8002c40:	14f00020 	.word	0x14f00020
 8002c44:	19200040 	.word	0x19200040

08002c48 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8002c4c:	4b18      	ldr	r3, [pc, #96]	; (8002cb0 <MX_CAN1_Init+0x68>)
 8002c4e:	4a19      	ldr	r2, [pc, #100]	; (8002cb4 <MX_CAN1_Init+0x6c>)
 8002c50:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 8002c52:	4b17      	ldr	r3, [pc, #92]	; (8002cb0 <MX_CAN1_Init+0x68>)
 8002c54:	2228      	movs	r2, #40	; 0x28
 8002c56:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002c58:	4b15      	ldr	r3, [pc, #84]	; (8002cb0 <MX_CAN1_Init+0x68>)
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 8002c5e:	4b14      	ldr	r3, [pc, #80]	; (8002cb0 <MX_CAN1_Init+0x68>)
 8002c60:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8002c64:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 8002c66:	4b12      	ldr	r3, [pc, #72]	; (8002cb0 <MX_CAN1_Init+0x68>)
 8002c68:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 8002c6c:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 8002c6e:	4b10      	ldr	r3, [pc, #64]	; (8002cb0 <MX_CAN1_Init+0x68>)
 8002c70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002c74:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8002c76:	4b0e      	ldr	r3, [pc, #56]	; (8002cb0 <MX_CAN1_Init+0x68>)
 8002c78:	2200      	movs	r2, #0
 8002c7a:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 8002c7c:	4b0c      	ldr	r3, [pc, #48]	; (8002cb0 <MX_CAN1_Init+0x68>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 8002c82:	4b0b      	ldr	r3, [pc, #44]	; (8002cb0 <MX_CAN1_Init+0x68>)
 8002c84:	2201      	movs	r2, #1
 8002c86:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 8002c88:	4b09      	ldr	r3, [pc, #36]	; (8002cb0 <MX_CAN1_Init+0x68>)
 8002c8a:	2201      	movs	r2, #1
 8002c8c:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002c8e:	4b08      	ldr	r3, [pc, #32]	; (8002cb0 <MX_CAN1_Init+0x68>)
 8002c90:	2200      	movs	r2, #0
 8002c92:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 8002c94:	4b06      	ldr	r3, [pc, #24]	; (8002cb0 <MX_CAN1_Init+0x68>)
 8002c96:	2201      	movs	r2, #1
 8002c98:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8002c9a:	4805      	ldr	r0, [pc, #20]	; (8002cb0 <MX_CAN1_Init+0x68>)
 8002c9c:	f002 f840 	bl	8004d20 <HAL_CAN_Init>
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d001      	beq.n	8002caa <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 8002ca6:	f000 fdc3 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8002caa:	bf00      	nop
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	20000328 	.word	0x20000328
 8002cb4:	40006400 	.word	0x40006400

08002cb8 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8002cb8:	b580      	push	{r7, lr}
 8002cba:	b08a      	sub	sp, #40	; 0x28
 8002cbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8002cbe:	1d3b      	adds	r3, r7, #4
 8002cc0:	2224      	movs	r2, #36	; 0x24
 8002cc2:	2100      	movs	r1, #0
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f009 fe73 	bl	800c9b0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8002cca:	4b17      	ldr	r3, [pc, #92]	; (8002d28 <MX_DAC1_Init+0x70>)
 8002ccc:	4a17      	ldr	r2, [pc, #92]	; (8002d2c <MX_DAC1_Init+0x74>)
 8002cce:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8002cd0:	4815      	ldr	r0, [pc, #84]	; (8002d28 <MX_DAC1_Init+0x70>)
 8002cd2:	f002 ff87 	bl	8005be4 <HAL_DAC_Init>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8002cdc:	f000 fda8 	bl	8003830 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002ce8:	2300      	movs	r3, #0
 8002cea:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8002cec:	2301      	movs	r3, #1
 8002cee:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8002cf4:	1d3b      	adds	r3, r7, #4
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	4619      	mov	r1, r3
 8002cfa:	480b      	ldr	r0, [pc, #44]	; (8002d28 <MX_DAC1_Init+0x70>)
 8002cfc:	f003 f86a 	bl	8005dd4 <HAL_DAC_ConfigChannel>
 8002d00:	4603      	mov	r3, r0
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d001      	beq.n	8002d0a <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 8002d06:	f000 fd93 	bl	8003830 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 8002d0a:	1d3b      	adds	r3, r7, #4
 8002d0c:	2210      	movs	r2, #16
 8002d0e:	4619      	mov	r1, r3
 8002d10:	4805      	ldr	r0, [pc, #20]	; (8002d28 <MX_DAC1_Init+0x70>)
 8002d12:	f003 f85f 	bl	8005dd4 <HAL_DAC_ConfigChannel>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d001      	beq.n	8002d20 <MX_DAC1_Init+0x68>
  {
    Error_Handler();
 8002d1c:	f000 fd88 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8002d20:	bf00      	nop
 8002d22:	3728      	adds	r7, #40	; 0x28
 8002d24:	46bd      	mov	sp, r7
 8002d26:	bd80      	pop	{r7, pc}
 8002d28:	20000350 	.word	0x20000350
 8002d2c:	40007400 	.word	0x40007400

08002d30 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8002d30:	b580      	push	{r7, lr}
 8002d32:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d34:	4b1d      	ldr	r3, [pc, #116]	; (8002dac <MX_I2C1_Init+0x7c>)
 8002d36:	4a1e      	ldr	r2, [pc, #120]	; (8002db0 <MX_I2C1_Init+0x80>)
 8002d38:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F33;
 8002d3a:	4b1c      	ldr	r3, [pc, #112]	; (8002dac <MX_I2C1_Init+0x7c>)
 8002d3c:	4a1d      	ldr	r2, [pc, #116]	; (8002db4 <MX_I2C1_Init+0x84>)
 8002d3e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8002d40:	4b1a      	ldr	r3, [pc, #104]	; (8002dac <MX_I2C1_Init+0x7c>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d46:	4b19      	ldr	r3, [pc, #100]	; (8002dac <MX_I2C1_Init+0x7c>)
 8002d48:	2201      	movs	r2, #1
 8002d4a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002d4c:	4b17      	ldr	r3, [pc, #92]	; (8002dac <MX_I2C1_Init+0x7c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8002d52:	4b16      	ldr	r3, [pc, #88]	; (8002dac <MX_I2C1_Init+0x7c>)
 8002d54:	2200      	movs	r2, #0
 8002d56:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002d58:	4b14      	ldr	r3, [pc, #80]	; (8002dac <MX_I2C1_Init+0x7c>)
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002d5e:	4b13      	ldr	r3, [pc, #76]	; (8002dac <MX_I2C1_Init+0x7c>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002d64:	4b11      	ldr	r3, [pc, #68]	; (8002dac <MX_I2C1_Init+0x7c>)
 8002d66:	2200      	movs	r2, #0
 8002d68:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002d6a:	4810      	ldr	r0, [pc, #64]	; (8002dac <MX_I2C1_Init+0x7c>)
 8002d6c:	f003 faf0 	bl	8006350 <HAL_I2C_Init>
 8002d70:	4603      	mov	r3, r0
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d001      	beq.n	8002d7a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8002d76:	f000 fd5b 	bl	8003830 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8002d7a:	2100      	movs	r1, #0
 8002d7c:	480b      	ldr	r0, [pc, #44]	; (8002dac <MX_I2C1_Init+0x7c>)
 8002d7e:	f003 fe69 	bl	8006a54 <HAL_I2CEx_ConfigAnalogFilter>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8002d88:	f000 fd52 	bl	8003830 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8002d8c:	2100      	movs	r1, #0
 8002d8e:	4807      	ldr	r0, [pc, #28]	; (8002dac <MX_I2C1_Init+0x7c>)
 8002d90:	f003 feab 	bl	8006aea <HAL_I2CEx_ConfigDigitalFilter>
 8002d94:	4603      	mov	r3, r0
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d001      	beq.n	8002d9e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8002d9a:	f000 fd49 	bl	8003830 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002d9e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002da2:	f003 feef 	bl	8006b84 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20000364 	.word	0x20000364
 8002db0:	40005400 	.word	0x40005400
 8002db4:	00300f33 	.word	0x00300f33

08002db8 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b084      	sub	sp, #16
 8002dbc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002dbe:	1d3b      	adds	r3, r7, #4
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]
 8002dc4:	605a      	str	r2, [r3, #4]
 8002dc6:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8002dc8:	4b14      	ldr	r3, [pc, #80]	; (8002e1c <MX_TIM6_Init+0x64>)
 8002dca:	4a15      	ldr	r2, [pc, #84]	; (8002e20 <MX_TIM6_Init+0x68>)
 8002dcc:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 8002dce:	4b13      	ldr	r3, [pc, #76]	; (8002e1c <MX_TIM6_Init+0x64>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002dd4:	4b11      	ldr	r3, [pc, #68]	; (8002e1c <MX_TIM6_Init+0x64>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3636-1;
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <MX_TIM6_Init+0x64>)
 8002ddc:	f640 6233 	movw	r2, #3635	; 0xe33
 8002de0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002de2:	4b0e      	ldr	r3, [pc, #56]	; (8002e1c <MX_TIM6_Init+0x64>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002de8:	480c      	ldr	r0, [pc, #48]	; (8002e1c <MX_TIM6_Init+0x64>)
 8002dea:	f005 f8c1 	bl	8007f70 <HAL_TIM_Base_Init>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d001      	beq.n	8002df8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8002df4:	f000 fd1c 	bl	8003830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002df8:	2320      	movs	r3, #32
 8002dfa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8002e00:	1d3b      	adds	r3, r7, #4
 8002e02:	4619      	mov	r1, r3
 8002e04:	4805      	ldr	r0, [pc, #20]	; (8002e1c <MX_TIM6_Init+0x64>)
 8002e06:	f005 fb57 	bl	80084b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8002e10:	f000 fd0e 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8002e14:	bf00      	nop
 8002e16:	3710      	adds	r7, #16
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	200003b8 	.word	0x200003b8
 8002e20:	40001000 	.word	0x40001000

08002e24 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b084      	sub	sp, #16
 8002e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002e2a:	1d3b      	adds	r3, r7, #4
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8002e34:	4b14      	ldr	r3, [pc, #80]	; (8002e88 <MX_TIM7_Init+0x64>)
 8002e36:	4a15      	ldr	r2, [pc, #84]	; (8002e8c <MX_TIM7_Init+0x68>)
 8002e38:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80-1;
 8002e3a:	4b13      	ldr	r3, [pc, #76]	; (8002e88 <MX_TIM7_Init+0x64>)
 8002e3c:	224f      	movs	r2, #79	; 0x4f
 8002e3e:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e40:	4b11      	ldr	r3, [pc, #68]	; (8002e88 <MX_TIM7_Init+0x64>)
 8002e42:	2200      	movs	r2, #0
 8002e44:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8002e46:	4b10      	ldr	r3, [pc, #64]	; (8002e88 <MX_TIM7_Init+0x64>)
 8002e48:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002e4c:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e4e:	4b0e      	ldr	r3, [pc, #56]	; (8002e88 <MX_TIM7_Init+0x64>)
 8002e50:	2200      	movs	r2, #0
 8002e52:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8002e54:	480c      	ldr	r0, [pc, #48]	; (8002e88 <MX_TIM7_Init+0x64>)
 8002e56:	f005 f88b 	bl	8007f70 <HAL_TIM_Base_Init>
 8002e5a:	4603      	mov	r3, r0
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d001      	beq.n	8002e64 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8002e60:	f000 fce6 	bl	8003830 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002e64:	2300      	movs	r3, #0
 8002e66:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e68:	2300      	movs	r3, #0
 8002e6a:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8002e6c:	1d3b      	adds	r3, r7, #4
 8002e6e:	4619      	mov	r1, r3
 8002e70:	4805      	ldr	r0, [pc, #20]	; (8002e88 <MX_TIM7_Init+0x64>)
 8002e72:	f005 fb21 	bl	80084b8 <HAL_TIMEx_MasterConfigSynchronization>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8002e7c:	f000 fcd8 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8002e80:	bf00      	nop
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}
 8002e88:	20000404 	.word	0x20000404
 8002e8c:	40001400 	.word	0x40001400

08002e90 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002e90:	b580      	push	{r7, lr}
 8002e92:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002e94:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002e96:	4a15      	ldr	r2, [pc, #84]	; (8002eec <MX_USART2_UART_Init+0x5c>)
 8002e98:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002e9a:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002e9c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002ea0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002ea2:	4b11      	ldr	r3, [pc, #68]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002ea8:	4b0f      	ldr	r3, [pc, #60]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002eae:	4b0e      	ldr	r3, [pc, #56]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002eb4:	4b0c      	ldr	r3, [pc, #48]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002eb6:	220c      	movs	r2, #12
 8002eb8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002eba:	4b0b      	ldr	r3, [pc, #44]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002ec0:	4b09      	ldr	r3, [pc, #36]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002ec2:	2200      	movs	r2, #0
 8002ec4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002ec6:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002ec8:	2200      	movs	r2, #0
 8002eca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002ecc:	4b06      	ldr	r3, [pc, #24]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002ece:	2200      	movs	r2, #0
 8002ed0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002ed2:	4805      	ldr	r0, [pc, #20]	; (8002ee8 <MX_USART2_UART_Init+0x58>)
 8002ed4:	f005 fb74 	bl	80085c0 <HAL_UART_Init>
 8002ed8:	4603      	mov	r3, r0
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d001      	beq.n	8002ee2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002ede:	f000 fca7 	bl	8003830 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002ee2:	bf00      	nop
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	20000450 	.word	0x20000450
 8002eec:	40004400 	.word	0x40004400

08002ef0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b088      	sub	sp, #32
 8002ef4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ef6:	f107 030c 	add.w	r3, r7, #12
 8002efa:	2200      	movs	r2, #0
 8002efc:	601a      	str	r2, [r3, #0]
 8002efe:	605a      	str	r2, [r3, #4]
 8002f00:	609a      	str	r2, [r3, #8]
 8002f02:	60da      	str	r2, [r3, #12]
 8002f04:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f06:	4b2f      	ldr	r3, [pc, #188]	; (8002fc4 <MX_GPIO_Init+0xd4>)
 8002f08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f0a:	4a2e      	ldr	r2, [pc, #184]	; (8002fc4 <MX_GPIO_Init+0xd4>)
 8002f0c:	f043 0304 	orr.w	r3, r3, #4
 8002f10:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f12:	4b2c      	ldr	r3, [pc, #176]	; (8002fc4 <MX_GPIO_Init+0xd4>)
 8002f14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f16:	f003 0304 	and.w	r3, r3, #4
 8002f1a:	60bb      	str	r3, [r7, #8]
 8002f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f1e:	4b29      	ldr	r3, [pc, #164]	; (8002fc4 <MX_GPIO_Init+0xd4>)
 8002f20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f22:	4a28      	ldr	r2, [pc, #160]	; (8002fc4 <MX_GPIO_Init+0xd4>)
 8002f24:	f043 0301 	orr.w	r3, r3, #1
 8002f28:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f2a:	4b26      	ldr	r3, [pc, #152]	; (8002fc4 <MX_GPIO_Init+0xd4>)
 8002f2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	607b      	str	r3, [r7, #4]
 8002f34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f36:	4b23      	ldr	r3, [pc, #140]	; (8002fc4 <MX_GPIO_Init+0xd4>)
 8002f38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f3a:	4a22      	ldr	r2, [pc, #136]	; (8002fc4 <MX_GPIO_Init+0xd4>)
 8002f3c:	f043 0302 	orr.w	r3, r3, #2
 8002f40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f42:	4b20      	ldr	r3, [pc, #128]	; (8002fc4 <MX_GPIO_Init+0xd4>)
 8002f44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f46:	f003 0302 	and.w	r3, r3, #2
 8002f4a:	603b      	str	r3, [r7, #0]
 8002f4c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8002f4e:	2200      	movs	r2, #0
 8002f50:	2140      	movs	r1, #64	; 0x40
 8002f52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f56:	f003 f9e3 	bl	8006320 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RA0_Pin|RA1_Pin|LED_BUILTIN_Pin|RA2_Pin
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	213b      	movs	r1, #59	; 0x3b
 8002f5e:	481a      	ldr	r0, [pc, #104]	; (8002fc8 <MX_GPIO_Init+0xd8>)
 8002f60:	f003 f9de 	bl	8006320 <HAL_GPIO_WritePin>
                          |OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C0_Pin C2_Pin C1_Pin C3_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C2_Pin|C1_Pin|C3_Pin;
 8002f64:	f44f 7362 	mov.w	r3, #904	; 0x388
 8002f68:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f6e:	2300      	movs	r3, #0
 8002f70:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f72:	f107 030c 	add.w	r3, r7, #12
 8002f76:	4619      	mov	r1, r3
 8002f78:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f7c:	f003 f84e 	bl	800601c <HAL_GPIO_Init>

  /*Configure GPIO pin : REN_Pin */
  GPIO_InitStruct.Pin = REN_Pin;
 8002f80:	2340      	movs	r3, #64	; 0x40
 8002f82:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002f84:	2301      	movs	r3, #1
 8002f86:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f88:	2300      	movs	r3, #0
 8002f8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(REN_GPIO_Port, &GPIO_InitStruct);
 8002f90:	f107 030c 	add.w	r3, r7, #12
 8002f94:	4619      	mov	r1, r3
 8002f96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002f9a:	f003 f83f 	bl	800601c <HAL_GPIO_Init>

  /*Configure GPIO pins : RA0_Pin RA1_Pin LED_BUILTIN_Pin RA2_Pin
                           OUT_Pin */
  GPIO_InitStruct.Pin = RA0_Pin|RA1_Pin|LED_BUILTIN_Pin|RA2_Pin
 8002f9e:	233b      	movs	r3, #59	; 0x3b
 8002fa0:	60fb      	str	r3, [r7, #12]
                          |OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002fa6:	2300      	movs	r3, #0
 8002fa8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002faa:	2300      	movs	r3, #0
 8002fac:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002fae:	f107 030c 	add.w	r3, r7, #12
 8002fb2:	4619      	mov	r1, r3
 8002fb4:	4804      	ldr	r0, [pc, #16]	; (8002fc8 <MX_GPIO_Init+0xd8>)
 8002fb6:	f003 f831 	bl	800601c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8002fba:	bf00      	nop
 8002fbc:	3720      	adds	r7, #32
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}
 8002fc2:	bf00      	nop
 8002fc4:	40021000 	.word	0x40021000
 8002fc8:	48000400 	.word	0x48000400

08002fcc <MY_ADC1_Init>:

/* USER CODE BEGIN 4 */

static void MY_ADC1_Init(void) {
 8002fcc:	b580      	push	{r7, lr}
 8002fce:	af00      	add	r7, sp, #0

	hadc1.Instance = ADC1;
 8002fd0:	4b1d      	ldr	r3, [pc, #116]	; (8003048 <MY_ADC1_Init+0x7c>)
 8002fd2:	4a1e      	ldr	r2, [pc, #120]	; (800304c <MY_ADC1_Init+0x80>)
 8002fd4:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8002fd6:	4b1c      	ldr	r3, [pc, #112]	; (8003048 <MY_ADC1_Init+0x7c>)
 8002fd8:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8002fdc:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002fde:	4b1a      	ldr	r3, [pc, #104]	; (8003048 <MY_ADC1_Init+0x7c>)
 8002fe0:	2200      	movs	r2, #0
 8002fe2:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002fe4:	4b18      	ldr	r3, [pc, #96]	; (8003048 <MY_ADC1_Init+0x7c>)
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002fea:	4b17      	ldr	r3, [pc, #92]	; (8003048 <MY_ADC1_Init+0x7c>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002ff0:	4b15      	ldr	r3, [pc, #84]	; (8003048 <MY_ADC1_Init+0x7c>)
 8002ff2:	2204      	movs	r2, #4
 8002ff4:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8002ff6:	4b14      	ldr	r3, [pc, #80]	; (8003048 <MY_ADC1_Init+0x7c>)
 8002ff8:	2200      	movs	r2, #0
 8002ffa:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002ffc:	4b12      	ldr	r3, [pc, #72]	; (8003048 <MY_ADC1_Init+0x7c>)
 8002ffe:	2200      	movs	r2, #0
 8003000:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8003002:	4b11      	ldr	r3, [pc, #68]	; (8003048 <MY_ADC1_Init+0x7c>)
 8003004:	2201      	movs	r2, #1
 8003006:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003008:	4b0f      	ldr	r3, [pc, #60]	; (8003048 <MY_ADC1_Init+0x7c>)
 800300a:	2200      	movs	r2, #0
 800300c:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8003010:	4b0d      	ldr	r3, [pc, #52]	; (8003048 <MY_ADC1_Init+0x7c>)
 8003012:	2200      	movs	r2, #0
 8003014:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003016:	4b0c      	ldr	r3, [pc, #48]	; (8003048 <MY_ADC1_Init+0x7c>)
 8003018:	2200      	movs	r2, #0
 800301a:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 800301c:	4b0a      	ldr	r3, [pc, #40]	; (8003048 <MY_ADC1_Init+0x7c>)
 800301e:	2200      	movs	r2, #0
 8003020:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003024:	4b08      	ldr	r3, [pc, #32]	; (8003048 <MY_ADC1_Init+0x7c>)
 8003026:	2200      	movs	r2, #0
 8003028:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 800302a:	4b07      	ldr	r3, [pc, #28]	; (8003048 <MY_ADC1_Init+0x7c>)
 800302c:	2200      	movs	r2, #0
 800302e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8003032:	4805      	ldr	r0, [pc, #20]	; (8003048 <MY_ADC1_Init+0x7c>)
 8003034:	f001 f94c 	bl	80042d0 <HAL_ADC_Init>
 8003038:	4603      	mov	r3, r0
 800303a:	2b00      	cmp	r3, #0
 800303c:	d001      	beq.n	8003042 <MY_ADC1_Init+0x76>
		Error_Handler();
 800303e:	f000 fbf7 	bl	8003830 <Error_Handler>
	}

}
 8003042:	bf00      	nop
 8003044:	bd80      	pop	{r7, pc}
 8003046:	bf00      	nop
 8003048:	200002c4 	.word	0x200002c4
 800304c:	50040000 	.word	0x50040000

08003050 <serialPrintln>:

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);

}

void serialPrintln(char val[]) {
 8003050:	b580      	push	{r7, lr}
 8003052:	b084      	sub	sp, #16
 8003054:	af00      	add	r7, sp, #0
 8003056:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
 8003058:	6878      	ldr	r0, [r7, #4]
 800305a:	f7fd f8b9 	bl	80001d0 <strlen>
 800305e:	4603      	mov	r3, r0
 8003060:	b29a      	uxth	r2, r3
 8003062:	230a      	movs	r3, #10
 8003064:	6879      	ldr	r1, [r7, #4]
 8003066:	4808      	ldr	r0, [pc, #32]	; (8003088 <serialPrintln+0x38>)
 8003068:	f005 faf8 	bl	800865c <HAL_UART_Transmit>
	char rn[2] = "\r\n";
 800306c:	f640 230d 	movw	r3, #2573	; 0xa0d
 8003070:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) rn, 2, 10);
 8003072:	f107 010c 	add.w	r1, r7, #12
 8003076:	230a      	movs	r3, #10
 8003078:	2202      	movs	r2, #2
 800307a:	4803      	ldr	r0, [pc, #12]	; (8003088 <serialPrintln+0x38>)
 800307c:	f005 faee 	bl	800865c <HAL_UART_Transmit>

}
 8003080:	bf00      	nop
 8003082:	3710      	adds	r7, #16
 8003084:	46bd      	mov	sp, r7
 8003086:	bd80      	pop	{r7, pc}
 8003088:	20000450 	.word	0x20000450

0800308c <delayMicro>:

void delayMicro(uint16_t us) {
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	80fb      	strh	r3, [r7, #6]

	htim7.Instance->CNT = 0;
 8003096:	4b09      	ldr	r3, [pc, #36]	; (80030bc <delayMicro+0x30>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2200      	movs	r2, #0
 800309c:	625a      	str	r2, [r3, #36]	; 0x24
	while (htim7.Instance->CNT < us)
 800309e:	bf00      	nop
 80030a0:	4b06      	ldr	r3, [pc, #24]	; (80030bc <delayMicro+0x30>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030a6:	88fb      	ldrh	r3, [r7, #6]
 80030a8:	429a      	cmp	r2, r3
 80030aa:	d3f9      	bcc.n	80030a0 <delayMicro+0x14>
		;

}
 80030ac:	bf00      	nop
 80030ae:	bf00      	nop
 80030b0:	370c      	adds	r7, #12
 80030b2:	46bd      	mov	sp, r7
 80030b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b8:	4770      	bx	lr
 80030ba:	bf00      	nop
 80030bc:	20000404 	.word	0x20000404

080030c0 <setCANFilter>:

	HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);

}

uint32_t setCANFilter(uint32_t filterID, uint32_t maskID, uint32_t filterBank) {
 80030c0:	b580      	push	{r7, lr}
 80030c2:	b08e      	sub	sp, #56	; 0x38
 80030c4:	af00      	add	r7, sp, #0
 80030c6:	60f8      	str	r0, [r7, #12]
 80030c8:	60b9      	str	r1, [r7, #8]
 80030ca:	607a      	str	r2, [r7, #4]

	CAN_FilterTypeDef filterInfo = { 0 };
 80030cc:	f107 0310 	add.w	r3, r7, #16
 80030d0:	2228      	movs	r2, #40	; 0x28
 80030d2:	2100      	movs	r1, #0
 80030d4:	4618      	mov	r0, r3
 80030d6:	f009 fc6b 	bl	800c9b0 <memset>

	filterInfo.FilterIdHigh = (filterID << 5) & 0xffe0;
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	015b      	lsls	r3, r3, #5
 80030de:	b29b      	uxth	r3, r3
 80030e0:	613b      	str	r3, [r7, #16]
	filterInfo.FilterIdLow = 0;
 80030e2:	2300      	movs	r3, #0
 80030e4:	617b      	str	r3, [r7, #20]
	filterInfo.FilterMaskIdHigh = (maskID << 5) & 0xffe0;
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	015b      	lsls	r3, r3, #5
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	61bb      	str	r3, [r7, #24]
	filterInfo.FilterMaskIdLow = 0;
 80030ee:	2300      	movs	r3, #0
 80030f0:	61fb      	str	r3, [r7, #28]
	filterInfo.FilterFIFOAssignment = 0;
 80030f2:	2300      	movs	r3, #0
 80030f4:	623b      	str	r3, [r7, #32]
	filterInfo.FilterBank = filterBank & 0xf;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	f003 030f 	and.w	r3, r3, #15
 80030fc:	627b      	str	r3, [r7, #36]	; 0x24
	filterInfo.FilterMode = CAN_FILTERMODE_IDMASK;
 80030fe:	2300      	movs	r3, #0
 8003100:	62bb      	str	r3, [r7, #40]	; 0x28
	filterInfo.FilterScale = CAN_FILTERSCALE_32BIT;
 8003102:	2301      	movs	r3, #1
 8003104:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterInfo.FilterActivation = CAN_FILTER_ENABLE;
 8003106:	2301      	movs	r3, #1
 8003108:	633b      	str	r3, [r7, #48]	; 0x30
	filterInfo.SlaveStartFilterBank = 0;
 800310a:	2300      	movs	r3, #0
 800310c:	637b      	str	r3, [r7, #52]	; 0x34

	return (uint32_t) HAL_CAN_ConfigFilter(&hcan1, &filterInfo);
 800310e:	f107 0310 	add.w	r3, r7, #16
 8003112:	4619      	mov	r1, r3
 8003114:	4803      	ldr	r0, [pc, #12]	; (8003124 <setCANFilter+0x64>)
 8003116:	f001 fefe 	bl	8004f16 <HAL_CAN_ConfigFilter>
 800311a:	4603      	mov	r3, r0

}
 800311c:	4618      	mov	r0, r3
 800311e:	3738      	adds	r7, #56	; 0x38
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	20000328 	.word	0x20000328

08003128 <CAN_TX>:

uint32_t CAN_TX(uint32_t ID, uint8_t data[8]) {
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]

	CAN_TxHeaderTypeDef txHeader = { 0 };
 8003132:	f107 0308 	add.w	r3, r7, #8
 8003136:	2200      	movs	r2, #0
 8003138:	601a      	str	r2, [r3, #0]
 800313a:	605a      	str	r2, [r3, #4]
 800313c:	609a      	str	r2, [r3, #8]
 800313e:	60da      	str	r2, [r3, #12]
 8003140:	611a      	str	r2, [r3, #16]
 8003142:	615a      	str	r2, [r3, #20]

	txHeader.StdId = ID & 0x7ff;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800314a:	60bb      	str	r3, [r7, #8]
	txHeader.ExtId = 0;
 800314c:	2300      	movs	r3, #0
 800314e:	60fb      	str	r3, [r7, #12]
	txHeader.IDE = CAN_ID_STD;
 8003150:	2300      	movs	r3, #0
 8003152:	613b      	str	r3, [r7, #16]
	txHeader.RTR = CAN_RTR_DATA;
 8003154:	2300      	movs	r3, #0
 8003156:	617b      	str	r3, [r7, #20]
	txHeader.DLC = 8;
 8003158:	2308      	movs	r3, #8
 800315a:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 800315c:	2300      	movs	r3, #0
 800315e:	773b      	strb	r3, [r7, #28]

	while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1))
 8003160:	bf00      	nop
 8003162:	4809      	ldr	r0, [pc, #36]	; (8003188 <CAN_TX+0x60>)
 8003164:	f002 f8b5 	bl	80052d2 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003168:	4603      	mov	r3, r0
 800316a:	2b00      	cmp	r3, #0
 800316c:	d0f9      	beq.n	8003162 <CAN_TX+0x3a>
		;

	return (uint32_t) HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, NULL);
 800316e:	f107 0108 	add.w	r1, r7, #8
 8003172:	2300      	movs	r3, #0
 8003174:	683a      	ldr	r2, [r7, #0]
 8003176:	4804      	ldr	r0, [pc, #16]	; (8003188 <CAN_TX+0x60>)
 8003178:	f001 ffdb 	bl	8005132 <HAL_CAN_AddTxMessage>
 800317c:	4603      	mov	r3, r0

}
 800317e:	4618      	mov	r0, r3
 8003180:	3720      	adds	r7, #32
 8003182:	46bd      	mov	sp, r7
 8003184:	bd80      	pop	{r7, pc}
 8003186:	bf00      	nop
 8003188:	20000328 	.word	0x20000328

0800318c <CAN_RX>:

	return HAL_CAN_GetRxFifoFillLevel(&hcan1, 0);

}

uint32_t CAN_RX(uint32_t *ID, uint8_t data[8]) {
 800318c:	b580      	push	{r7, lr}
 800318e:	b08a      	sub	sp, #40	; 0x28
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
 8003194:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef rxHeader;

	while (!HAL_CAN_GetRxFifoFillLevel(&hcan1, 0))
 8003196:	bf00      	nop
 8003198:	2100      	movs	r1, #0
 800319a:	480b      	ldr	r0, [pc, #44]	; (80031c8 <CAN_RX+0x3c>)
 800319c:	f002 f9e0 	bl	8005560 <HAL_CAN_GetRxFifoFillLevel>
 80031a0:	4603      	mov	r3, r0
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d0f8      	beq.n	8003198 <CAN_RX+0xc>
		;

	uint32_t result = (uint32_t) HAL_CAN_GetRxMessage(&hcan1, 0, &rxHeader,
 80031a6:	f107 0208 	add.w	r2, r7, #8
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	2100      	movs	r1, #0
 80031ae:	4806      	ldr	r0, [pc, #24]	; (80031c8 <CAN_RX+0x3c>)
 80031b0:	f002 f8c4 	bl	800533c <HAL_CAN_GetRxMessage>
 80031b4:	4603      	mov	r3, r0
 80031b6:	627b      	str	r3, [r7, #36]	; 0x24
			data);

	*ID = rxHeader.StdId;
 80031b8:	68ba      	ldr	r2, [r7, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	601a      	str	r2, [r3, #0]

	return result;
 80031be:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3728      	adds	r7, #40	; 0x28
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}
 80031c8:	20000328 	.word	0x20000328

080031cc <setOutMuxBit>:

void setOutMuxBit(const uint8_t bitIdx, const bool value) {
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	4603      	mov	r3, r0
 80031d4:	460a      	mov	r2, r1
 80031d6:	71fb      	strb	r3, [r7, #7]
 80031d8:	4613      	mov	r3, r2
 80031da:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80031dc:	2200      	movs	r2, #0
 80031de:	2140      	movs	r1, #64	; 0x40
 80031e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80031e4:	f003 f89c 	bl	8006320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, bitIdx & 0x01);
 80031e8:	79fb      	ldrb	r3, [r7, #7]
 80031ea:	f003 0301 	and.w	r3, r3, #1
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	461a      	mov	r2, r3
 80031f2:	2101      	movs	r1, #1
 80031f4:	4816      	ldr	r0, [pc, #88]	; (8003250 <setOutMuxBit+0x84>)
 80031f6:	f003 f893 	bl	8006320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, bitIdx & 0x02);
 80031fa:	79fb      	ldrb	r3, [r7, #7]
 80031fc:	f003 0302 	and.w	r3, r3, #2
 8003200:	b2db      	uxtb	r3, r3
 8003202:	461a      	mov	r2, r3
 8003204:	2102      	movs	r1, #2
 8003206:	4812      	ldr	r0, [pc, #72]	; (8003250 <setOutMuxBit+0x84>)
 8003208:	f003 f88a 	bl	8006320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, bitIdx & 0x04);
 800320c:	79fb      	ldrb	r3, [r7, #7]
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	b2db      	uxtb	r3, r3
 8003214:	461a      	mov	r2, r3
 8003216:	2110      	movs	r1, #16
 8003218:	480d      	ldr	r0, [pc, #52]	; (8003250 <setOutMuxBit+0x84>)
 800321a:	f003 f881 	bl	8006320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, value);
 800321e:	79bb      	ldrb	r3, [r7, #6]
 8003220:	461a      	mov	r2, r3
 8003222:	2120      	movs	r1, #32
 8003224:	480a      	ldr	r0, [pc, #40]	; (8003250 <setOutMuxBit+0x84>)
 8003226:	f003 f87b 	bl	8006320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 800322a:	2201      	movs	r2, #1
 800322c:	2140      	movs	r1, #64	; 0x40
 800322e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003232:	f003 f875 	bl	8006320 <HAL_GPIO_WritePin>
	delayMicro(2);
 8003236:	2002      	movs	r0, #2
 8003238:	f7ff ff28 	bl	800308c <delayMicro>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 800323c:	2200      	movs	r2, #0
 800323e:	2140      	movs	r1, #64	; 0x40
 8003240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003244:	f003 f86c 	bl	8006320 <HAL_GPIO_WritePin>

}
 8003248:	bf00      	nop
 800324a:	3708      	adds	r7, #8
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	48000400 	.word	0x48000400

08003254 <u8x8_gpio_and_delay>:

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8003254:	b480      	push	{r7}
 8003256:	b085      	sub	sp, #20
 8003258:	af00      	add	r7, sp, #0
 800325a:	60f8      	str	r0, [r7, #12]
 800325c:	607b      	str	r3, [r7, #4]
 800325e:	460b      	mov	r3, r1
 8003260:	72fb      	strb	r3, [r7, #11]
 8003262:	4613      	mov	r3, r2
 8003264:	72bb      	strb	r3, [r7, #10]

	return 1;
 8003266:	2301      	movs	r3, #1

}
 8003268:	4618      	mov	r0, r3
 800326a:	3714      	adds	r7, #20
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr

08003274 <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003274:	b580      	push	{r7, lr}
 8003276:	b088      	sub	sp, #32
 8003278:	af02      	add	r7, sp, #8
 800327a:	60f8      	str	r0, [r7, #12]
 800327c:	607b      	str	r3, [r7, #4]
 800327e:	460b      	mov	r3, r1
 8003280:	72fb      	strb	r3, [r7, #11]
 8003282:	4613      	mov	r3, r2
 8003284:	72bb      	strb	r3, [r7, #10]

	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch (msg) {
 8003286:	7afb      	ldrb	r3, [r7, #11]
 8003288:	3b14      	subs	r3, #20
 800328a:	2b0c      	cmp	r3, #12
 800328c:	d847      	bhi.n	800331e <u8x8_byte_i2c+0xaa>
 800328e:	a201      	add	r2, pc, #4	; (adr r2, 8003294 <u8x8_byte_i2c+0x20>)
 8003290:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003294:	08003323 	.word	0x08003323
 8003298:	0800331f 	.word	0x0800331f
 800329c:	0800331f 	.word	0x0800331f
 80032a0:	080032c9 	.word	0x080032c9
 80032a4:	080032f9 	.word	0x080032f9
 80032a8:	08003301 	.word	0x08003301
 80032ac:	0800331f 	.word	0x0800331f
 80032b0:	0800331f 	.word	0x0800331f
 80032b4:	0800331f 	.word	0x0800331f
 80032b8:	0800331f 	.word	0x0800331f
 80032bc:	0800331f 	.word	0x0800331f
 80032c0:	0800331f 	.word	0x0800331f
 80032c4:	08003323 	.word	0x08003323
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t*) arg_ptr;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	617b      	str	r3, [r7, #20]
		while (arg_int > 0) {
 80032cc:	e010      	b.n	80032f0 <u8x8_byte_i2c+0x7c>
			buffer[buf_idx++] = *data;
 80032ce:	4b18      	ldr	r3, [pc, #96]	; (8003330 <u8x8_byte_i2c+0xbc>)
 80032d0:	781b      	ldrb	r3, [r3, #0]
 80032d2:	1c5a      	adds	r2, r3, #1
 80032d4:	b2d1      	uxtb	r1, r2
 80032d6:	4a16      	ldr	r2, [pc, #88]	; (8003330 <u8x8_byte_i2c+0xbc>)
 80032d8:	7011      	strb	r1, [r2, #0]
 80032da:	461a      	mov	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	7819      	ldrb	r1, [r3, #0]
 80032e0:	4b14      	ldr	r3, [pc, #80]	; (8003334 <u8x8_byte_i2c+0xc0>)
 80032e2:	5499      	strb	r1, [r3, r2]
			data++;
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	3301      	adds	r3, #1
 80032e8:	617b      	str	r3, [r7, #20]
			arg_int--;
 80032ea:	7abb      	ldrb	r3, [r7, #10]
 80032ec:	3b01      	subs	r3, #1
 80032ee:	72bb      	strb	r3, [r7, #10]
		while (arg_int > 0) {
 80032f0:	7abb      	ldrb	r3, [r7, #10]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1eb      	bne.n	80032ce <u8x8_byte_i2c+0x5a>
		}
		break;
 80032f6:	e015      	b.n	8003324 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 80032f8:	4b0d      	ldr	r3, [pc, #52]	; (8003330 <u8x8_byte_i2c+0xbc>)
 80032fa:	2200      	movs	r2, #0
 80032fc:	701a      	strb	r2, [r3, #0]
		break;
 80032fe:	e011      	b.n	8003324 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8),
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003306:	b299      	uxth	r1, r3
 8003308:	4b09      	ldr	r3, [pc, #36]	; (8003330 <u8x8_byte_i2c+0xbc>)
 800330a:	781b      	ldrb	r3, [r3, #0]
 800330c:	b29b      	uxth	r3, r3
 800330e:	f04f 32ff 	mov.w	r2, #4294967295
 8003312:	9200      	str	r2, [sp, #0]
 8003314:	4a07      	ldr	r2, [pc, #28]	; (8003334 <u8x8_byte_i2c+0xc0>)
 8003316:	4808      	ldr	r0, [pc, #32]	; (8003338 <u8x8_byte_i2c+0xc4>)
 8003318:	f003 f8aa 	bl	8006470 <HAL_I2C_Master_Transmit>
				(uint8_t*) buffer, buf_idx, HAL_MAX_DELAY);
		break;
 800331c:	e002      	b.n	8003324 <u8x8_byte_i2c+0xb0>
	default:
		return 0;
 800331e:	2300      	movs	r3, #0
 8003320:	e001      	b.n	8003326 <u8x8_byte_i2c+0xb2>
		break;
 8003322:	bf00      	nop
	}

	return 1;
 8003324:	2301      	movs	r3, #1

}
 8003326:	4618      	mov	r0, r3
 8003328:	3718      	adds	r7, #24
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	200005ed 	.word	0x200005ed
 8003334:	200005f0 	.word	0x200005f0
 8003338:	20000364 	.word	0x20000364

0800333c <setRow>:

void setRow(uint8_t rowIdx) {
 800333c:	b580      	push	{r7, lr}
 800333e:	b082      	sub	sp, #8
 8003340:	af00      	add	r7, sp, #0
 8003342:	4603      	mov	r3, r0
 8003344:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003346:	2200      	movs	r2, #0
 8003348:	2140      	movs	r1, #64	; 0x40
 800334a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800334e:	f002 ffe7 	bl	8006320 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, rowIdx & 0x01);
 8003352:	79fb      	ldrb	r3, [r7, #7]
 8003354:	f003 0301 	and.w	r3, r3, #1
 8003358:	b2db      	uxtb	r3, r3
 800335a:	461a      	mov	r2, r3
 800335c:	2101      	movs	r1, #1
 800335e:	480f      	ldr	r0, [pc, #60]	; (800339c <setRow+0x60>)
 8003360:	f002 ffde 	bl	8006320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, rowIdx & 0x02);
 8003364:	79fb      	ldrb	r3, [r7, #7]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	b2db      	uxtb	r3, r3
 800336c:	461a      	mov	r2, r3
 800336e:	2102      	movs	r1, #2
 8003370:	480a      	ldr	r0, [pc, #40]	; (800339c <setRow+0x60>)
 8003372:	f002 ffd5 	bl	8006320 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, rowIdx & 0x04);
 8003376:	79fb      	ldrb	r3, [r7, #7]
 8003378:	f003 0304 	and.w	r3, r3, #4
 800337c:	b2db      	uxtb	r3, r3
 800337e:	461a      	mov	r2, r3
 8003380:	2110      	movs	r1, #16
 8003382:	4806      	ldr	r0, [pc, #24]	; (800339c <setRow+0x60>)
 8003384:	f002 ffcc 	bl	8006320 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 8003388:	2201      	movs	r2, #1
 800338a:	2140      	movs	r1, #64	; 0x40
 800338c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003390:	f002 ffc6 	bl	8006320 <HAL_GPIO_WritePin>

}
 8003394:	bf00      	nop
 8003396:	3708      	adds	r7, #8
 8003398:	46bd      	mov	sp, r7
 800339a:	bd80      	pop	{r7, pc}
 800339c:	48000400 	.word	0x48000400

080033a0 <readCols>:

uint8_t readCols() {
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b082      	sub	sp, #8
 80033a4:	af00      	add	r7, sp, #0

	uint8_t C0_val = HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin);
 80033a6:	2108      	movs	r1, #8
 80033a8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ac:	f002 ffa0 	bl	80062f0 <HAL_GPIO_ReadPin>
 80033b0:	4603      	mov	r3, r0
 80033b2:	71fb      	strb	r3, [r7, #7]
	uint8_t C1_val = HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin);
 80033b4:	f44f 7180 	mov.w	r1, #256	; 0x100
 80033b8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033bc:	f002 ff98 	bl	80062f0 <HAL_GPIO_ReadPin>
 80033c0:	4603      	mov	r3, r0
 80033c2:	71bb      	strb	r3, [r7, #6]
	uint8_t C2_val = HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin);
 80033c4:	2180      	movs	r1, #128	; 0x80
 80033c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033ca:	f002 ff91 	bl	80062f0 <HAL_GPIO_ReadPin>
 80033ce:	4603      	mov	r3, r0
 80033d0:	717b      	strb	r3, [r7, #5]
	uint8_t C3_val = HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin);
 80033d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80033d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80033da:	f002 ff89 	bl	80062f0 <HAL_GPIO_ReadPin>
 80033de:	4603      	mov	r3, r0
 80033e0:	713b      	strb	r3, [r7, #4]

	return (C3_val << 3) | (C2_val << 2) | (C1_val << 1) | C0_val;
 80033e2:	793b      	ldrb	r3, [r7, #4]
 80033e4:	00db      	lsls	r3, r3, #3
 80033e6:	b25a      	sxtb	r2, r3
 80033e8:	797b      	ldrb	r3, [r7, #5]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	b25b      	sxtb	r3, r3
 80033ee:	4313      	orrs	r3, r2
 80033f0:	b25a      	sxtb	r2, r3
 80033f2:	79bb      	ldrb	r3, [r7, #6]
 80033f4:	005b      	lsls	r3, r3, #1
 80033f6:	b25b      	sxtb	r3, r3
 80033f8:	4313      	orrs	r3, r2
 80033fa:	b25a      	sxtb	r2, r3
 80033fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003400:	4313      	orrs	r3, r2
 8003402:	b25b      	sxtb	r3, r3
 8003404:	b2db      	uxtb	r3, r3

}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <HAL_CAN_RxFifo0MsgPendingCallback>:

	}

}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]

	CAN_MSG_t RX;
	CAN_RX(&RX.ID, RX.Message);
 8003418:	f107 020c 	add.w	r2, r7, #12
 800341c:	f107 030c 	add.w	r3, r7, #12
 8003420:	3308      	adds	r3, #8
 8003422:	4611      	mov	r1, r2
 8003424:	4618      	mov	r0, r3
 8003426:	f7ff feb1 	bl	800318c <CAN_RX>
	osMessageQueuePut(msgInQHandle, &RX.Message, 0, 0);
 800342a:	4b06      	ldr	r3, [pc, #24]	; (8003444 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 800342c:	6818      	ldr	r0, [r3, #0]
 800342e:	f107 010c 	add.w	r1, r7, #12
 8003432:	2300      	movs	r3, #0
 8003434:	2200      	movs	r2, #0
 8003436:	f006 f8d5 	bl	80095e4 <osMessageQueuePut>

}
 800343a:	bf00      	nop
 800343c:	3718      	adds	r7, #24
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	200004e4 	.word	0x200004e4

08003448 <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 8003448:	b580      	push	{r7, lr}
 800344a:	b082      	sub	sp, #8
 800344c:	af00      	add	r7, sp, #0
 800344e:	6078      	str	r0, [r7, #4]

	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 8003450:	4b04      	ldr	r3, [pc, #16]	; (8003464 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	4618      	mov	r0, r3
 8003456:	f006 f80d 	bl	8009474 <osSemaphoreRelease>

}
 800345a:	bf00      	nop
 800345c:	3708      	adds	r7, #8
 800345e:	46bd      	mov	sp, r7
 8003460:	bd80      	pop	{r7, pc}
 8003462:	bf00      	nop
 8003464:	200004f0 	.word	0x200004f0

08003468 <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 8003468:	b580      	push	{r7, lr}
 800346a:	b082      	sub	sp, #8
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]

	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 8003470:	4b04      	ldr	r3, [pc, #16]	; (8003484 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f005 fffd 	bl	8009474 <osSemaphoreRelease>

}
 800347a:	bf00      	nop
 800347c:	3708      	adds	r7, #8
 800347e:	46bd      	mov	sp, r7
 8003480:	bd80      	pop	{r7, pc}
 8003482:	bf00      	nop
 8003484:	200004f0 	.word	0x200004f0

08003488 <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]

	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 8003490:	4b04      	ldr	r3, [pc, #16]	; (80034a4 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	4618      	mov	r0, r3
 8003496:	f005 ffed 	bl	8009474 <osSemaphoreRelease>

}
 800349a:	bf00      	nop
 800349c:	3708      	adds	r7, #8
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	bf00      	nop
 80034a4:	200004f0 	.word	0x200004f0

080034a8 <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 80034b0:	2001      	movs	r0, #1
 80034b2:	f005 fe63 	bl	800917c <osDelay>
 80034b6:	e7fb      	b.n	80034b0 <StartDefaultTask+0x8>

080034b8 <decode>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_decode */
void decode(void *argument)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b086      	sub	sp, #24
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
	CAN_MSG_t RX;

	/* Infinite loop */
	for (;;) {

		osMessageQueueGet(msgInQHandle, &RX, NULL, osWaitForever);
 80034c0:	4b09      	ldr	r3, [pc, #36]	; (80034e8 <decode+0x30>)
 80034c2:	6818      	ldr	r0, [r3, #0]
 80034c4:	f107 010c 	add.w	r1, r7, #12
 80034c8:	f04f 33ff 	mov.w	r3, #4294967295
 80034cc:	2200      	movs	r2, #0
 80034ce:	f006 f8e9 	bl	80096a4 <osMessageQueueGet>

		if (RX.Message[0] == 'H') {
 80034d2:	7b3b      	ldrb	r3, [r7, #12]
 80034d4:	2b48      	cmp	r3, #72	; 0x48
 80034d6:	d1f3      	bne.n	80034c0 <decode+0x8>
			keyboard_count += 1;
 80034d8:	4b04      	ldr	r3, [pc, #16]	; (80034ec <decode+0x34>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	3301      	adds	r3, #1
 80034e0:	b2da      	uxtb	r2, r3
 80034e2:	4b02      	ldr	r3, [pc, #8]	; (80034ec <decode+0x34>)
 80034e4:	701a      	strb	r2, [r3, #0]
		osMessageQueueGet(msgInQHandle, &RX, NULL, osWaitForever);
 80034e6:	e7eb      	b.n	80034c0 <decode+0x8>
 80034e8:	200004e4 	.word	0x200004e4
 80034ec:	20000003 	.word	0x20000003

080034f0 <CAN_Transmit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CAN_Transmit */
void CAN_Transmit(void *argument)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]

	CAN_MSG_t TX;

	for (;;) {

		osMessageQueueGet(msgOutQHandle, &TX, NULL, osWaitForever);
 80034f8:	4b0b      	ldr	r3, [pc, #44]	; (8003528 <CAN_Transmit+0x38>)
 80034fa:	6818      	ldr	r0, [r3, #0]
 80034fc:	f107 010c 	add.w	r1, r7, #12
 8003500:	f04f 33ff 	mov.w	r3, #4294967295
 8003504:	2200      	movs	r2, #0
 8003506:	f006 f8cd 	bl	80096a4 <osMessageQueueGet>
		osSemaphoreAcquire(CAN_TX_SemaphoreHandle, osWaitForever);
 800350a:	4b08      	ldr	r3, [pc, #32]	; (800352c <CAN_Transmit+0x3c>)
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f04f 31ff 	mov.w	r1, #4294967295
 8003512:	4618      	mov	r0, r3
 8003514:	f005 ff5c 	bl	80093d0 <osSemaphoreAcquire>
		CAN_TX(TX.ID, TX.Message);
 8003518:	697b      	ldr	r3, [r7, #20]
 800351a:	f107 020c 	add.w	r2, r7, #12
 800351e:	4611      	mov	r1, r2
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fe01 	bl	8003128 <CAN_TX>
		osMessageQueueGet(msgOutQHandle, &TX, NULL, osWaitForever);
 8003526:	e7e7      	b.n	80034f8 <CAN_Transmit+0x8>
 8003528:	200004e8 	.word	0x200004e8
 800352c:	200004f0 	.word	0x200004f0

08003530 <handshake>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_handshake */
void handshake(void *argument)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b08a      	sub	sp, #40	; 0x28
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN handshake */

	if (handshakeRequest) {
 8003538:	4b54      	ldr	r3, [pc, #336]	; (800368c <handshake+0x15c>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	f000 80a0 	beq.w	8003682 <handshake+0x152>

		// set the handshaking bits
		setOutMuxBit(HKOW_BIT, GPIO_PIN_SET);
 8003542:	2305      	movs	r3, #5
 8003544:	b2db      	uxtb	r3, r3
 8003546:	2101      	movs	r1, #1
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fe3f 	bl	80031cc <setOutMuxBit>
		setOutMuxBit(HKOE_BIT, GPIO_PIN_SET);
 800354e:	2306      	movs	r3, #6
 8003550:	b2db      	uxtb	r3, r3
 8003552:	2101      	movs	r1, #1
 8003554:	4618      	mov	r0, r3
 8003556:	f7ff fe39 	bl	80031cc <setOutMuxBit>

		HAL_Delay(2000);
 800355a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800355e:	f000 fcfb 	bl	8003f58 <HAL_Delay>

		// read handshake east
		setRow(6);
 8003562:	2006      	movs	r0, #6
 8003564:	f7ff feea 	bl	800333c <setRow>
		delayMicro(5);
 8003568:	2005      	movs	r0, #5
 800356a:	f7ff fd8f 	bl	800308c <delayMicro>
		bool HKIE = readCols() & 0x08;
 800356e:	f7ff ff17 	bl	80033a0 <readCols>
 8003572:	4603      	mov	r3, r0
 8003574:	f003 0308 	and.w	r3, r3, #8
 8003578:	2b00      	cmp	r3, #0
 800357a:	bf14      	ite	ne
 800357c:	2301      	movne	r3, #1
 800357e:	2300      	moveq	r3, #0
 8003580:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

		// read hanshake west repeatedly.
		setRow(5);
 8003584:	2005      	movs	r0, #5
 8003586:	f7ff fed9 	bl	800333c <setRow>
		delayMicro(5);
 800358a:	2005      	movs	r0, #5
 800358c:	f7ff fd7e 	bl	800308c <delayMicro>
		bool HKIW = readCols() & 0x08;
 8003590:	f7ff ff06 	bl	80033a0 <readCols>
 8003594:	4603      	mov	r3, r0
 8003596:	f003 0308 	and.w	r3, r3, #8
 800359a:	2b00      	cmp	r3, #0
 800359c:	bf14      	ite	ne
 800359e:	2301      	movne	r3, #1
 80035a0:	2300      	moveq	r3, #0
 80035a2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
		while (!HKIW) {
 80035a6:	e00d      	b.n	80035c4 <handshake+0x94>
			HKIW = readCols() & 0x08;
 80035a8:	f7ff fefa 	bl	80033a0 <readCols>
 80035ac:	4603      	mov	r3, r0
 80035ae:	f003 0308 	and.w	r3, r3, #8
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	bf14      	ite	ne
 80035b6:	2301      	movne	r3, #1
 80035b8:	2300      	moveq	r3, #0
 80035ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			HAL_Delay(100);
 80035be:	2064      	movs	r0, #100	; 0x64
 80035c0:	f000 fcca 	bl	8003f58 <HAL_Delay>
		while (!HKIW) {
 80035c4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80035c8:	f083 0301 	eor.w	r3, r3, #1
 80035cc:	b2db      	uxtb	r3, r3
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d1ea      	bne.n	80035a8 <handshake+0x78>
		}

		keyboard_position = keyboard_count - 1;
 80035d2:	4b2f      	ldr	r3, [pc, #188]	; (8003690 <handshake+0x160>)
 80035d4:	781b      	ldrb	r3, [r3, #0]
 80035d6:	b2db      	uxtb	r3, r3
 80035d8:	3b01      	subs	r3, #1
 80035da:	b2da      	uxtb	r2, r3
 80035dc:	4b2d      	ldr	r3, [pc, #180]	; (8003694 <handshake+0x164>)
 80035de:	701a      	strb	r2, [r3, #0]

		CAN_MSG_t TX;

		TX.ID = IDout;
 80035e0:	f240 1323 	movw	r3, #291	; 0x123
 80035e4:	623b      	str	r3, [r7, #32]
		TX.Message[0] = 'H';
 80035e6:	2348      	movs	r3, #72	; 0x48
 80035e8:	763b      	strb	r3, [r7, #24]
		TX.Message[1] = (uint8_t) (UID0 & 0xF000) >> 24;
 80035ea:	2300      	movs	r3, #0
 80035ec:	767b      	strb	r3, [r7, #25]
		TX.Message[2] = (uint8_t) (UID0 & 0x0F00) >> 16;
 80035ee:	2300      	movs	r3, #0
 80035f0:	76bb      	strb	r3, [r7, #26]
		TX.Message[3] = (uint8_t) (UID0 & 0x00F0) >> 8;
 80035f2:	2300      	movs	r3, #0
 80035f4:	76fb      	strb	r3, [r7, #27]
		TX.Message[4] = (uint8_t) (UID0 & 0x000F);
 80035f6:	4b28      	ldr	r3, [pc, #160]	; (8003698 <handshake+0x168>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	b2db      	uxtb	r3, r3
 80035fc:	f003 030f 	and.w	r3, r3, #15
 8003600:	b2db      	uxtb	r3, r3
 8003602:	773b      	strb	r3, [r7, #28]
		TX.Message[5] = keyboard_position;
 8003604:	4b23      	ldr	r3, [pc, #140]	; (8003694 <handshake+0x164>)
 8003606:	781b      	ldrb	r3, [r3, #0]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	777b      	strb	r3, [r7, #29]

		osMessageQueuePut(msgOutQHandle, &TX, 0, 0);
 800360c:	4b23      	ldr	r3, [pc, #140]	; (800369c <handshake+0x16c>)
 800360e:	6818      	ldr	r0, [r3, #0]
 8003610:	f107 0118 	add.w	r1, r7, #24
 8003614:	2300      	movs	r3, #0
 8003616:	2200      	movs	r2, #0
 8003618:	f005 ffe4 	bl	80095e4 <osMessageQueuePut>

		char UID0text[8];
		sprintf(UID0text, "%lX", UID0);
 800361c:	4b1e      	ldr	r3, [pc, #120]	; (8003698 <handshake+0x168>)
 800361e:	681a      	ldr	r2, [r3, #0]
 8003620:	f107 0310 	add.w	r3, r7, #16
 8003624:	491e      	ldr	r1, [pc, #120]	; (80036a0 <handshake+0x170>)
 8003626:	4618      	mov	r0, r3
 8003628:	f009 fad8 	bl	800cbdc <siprintf>

		char posText[2];
		sprintf(posText, "%i", keyboard_position);
 800362c:	4b19      	ldr	r3, [pc, #100]	; (8003694 <handshake+0x164>)
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	b2db      	uxtb	r3, r3
 8003632:	461a      	mov	r2, r3
 8003634:	f107 030c 	add.w	r3, r7, #12
 8003638:	491a      	ldr	r1, [pc, #104]	; (80036a4 <handshake+0x174>)
 800363a:	4618      	mov	r0, r3
 800363c:	f009 face 	bl	800cbdc <siprintf>

		u8g2_ClearBuffer(&u8g2);
 8003640:	4819      	ldr	r0, [pc, #100]	; (80036a8 <handshake+0x178>)
 8003642:	f7fd fb95 	bl	8000d70 <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_ncenB08_tr);
 8003646:	4919      	ldr	r1, [pc, #100]	; (80036ac <handshake+0x17c>)
 8003648:	4817      	ldr	r0, [pc, #92]	; (80036a8 <handshake+0x178>)
 800364a:	f7fe fa41 	bl	8001ad0 <u8g2_SetFont>
		u8g2_DrawStr(&u8g2, 2, 10, UID0text);
 800364e:	f107 0310 	add.w	r3, r7, #16
 8003652:	220a      	movs	r2, #10
 8003654:	2102      	movs	r1, #2
 8003656:	4814      	ldr	r0, [pc, #80]	; (80036a8 <handshake+0x178>)
 8003658:	f7fe f998 	bl	800198c <u8g2_DrawStr>
		u8g2_DrawStr(&u8g2, 2, 20, posText);
 800365c:	f107 030c 	add.w	r3, r7, #12
 8003660:	2214      	movs	r2, #20
 8003662:	2102      	movs	r1, #2
 8003664:	4810      	ldr	r0, [pc, #64]	; (80036a8 <handshake+0x178>)
 8003666:	f7fe f991 	bl	800198c <u8g2_DrawStr>
		u8g2_SendBuffer(&u8g2);
 800366a:	480f      	ldr	r0, [pc, #60]	; (80036a8 <handshake+0x178>)
 800366c:	f7fd fbf3 	bl	8000e56 <u8g2_SendBuffer>

		HAL_Delay(100);
 8003670:	2064      	movs	r0, #100	; 0x64
 8003672:	f000 fc71 	bl	8003f58 <HAL_Delay>

		setOutMuxBit(HKOE_BIT, GPIO_PIN_RESET);
 8003676:	2306      	movs	r3, #6
 8003678:	b2db      	uxtb	r3, r3
 800367a:	2100      	movs	r1, #0
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff fda5 	bl	80031cc <setOutMuxBit>

	}

	/* Infinite loop */
  /* USER CODE END handshake */
}
 8003682:	bf00      	nop
 8003684:	3728      	adds	r7, #40	; 0x28
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}
 800368a:	bf00      	nop
 800368c:	20000002 	.word	0x20000002
 8003690:	20000003 	.word	0x20000003
 8003694:	200005ec 	.word	0x200005ec
 8003698:	200005e8 	.word	0x200005e8
 800369c:	200004e8 	.word	0x200004e8
 80036a0:	0800d40c 	.word	0x0800d40c
 80036a4:	0800d410 	.word	0x0800d410
 80036a8:	200004f4 	.word	0x200004f4
 80036ac:	0800d42c 	.word	0x0800d42c

080036b0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

	if (htim == &htim6) {
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a53      	ldr	r2, [pc, #332]	; (8003808 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	f040 8098 	bne.w	80037f2 <HAL_TIM_PeriodElapsedCallback+0x142>
		static float imag[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

		float real2;
		float imag2;

		float Vadd = 0;
 80036c2:	f04f 0300 	mov.w	r3, #0
 80036c6:	61fb      	str	r3, [r7, #28]

		uint16_t localKeys;

		localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 80036c8:	4b50      	ldr	r3, [pc, #320]	; (800380c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	837b      	strh	r3, [r7, #26]

		for (int i = 0; i < 12; i++) {
 80036ce:	2300      	movs	r3, #0
 80036d0:	617b      	str	r3, [r7, #20]
 80036d2:	e062      	b.n	800379a <HAL_TIM_PeriodElapsedCallback+0xea>

			if (!(localKeys & 1)) {
 80036d4:	8b7b      	ldrh	r3, [r7, #26]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d157      	bne.n	800378e <HAL_TIM_PeriodElapsedCallback+0xde>

				real2 = dreal[i] * real[i] - dimag[i] * imag[i];
 80036de:	4a4c      	ldr	r2, [pc, #304]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	ed93 7a00 	vldr	s14, [r3]
 80036ea:	4a4a      	ldr	r2, [pc, #296]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80036ec:	697b      	ldr	r3, [r7, #20]
 80036ee:	009b      	lsls	r3, r3, #2
 80036f0:	4413      	add	r3, r2
 80036f2:	edd3 7a00 	vldr	s15, [r3]
 80036f6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80036fa:	4a47      	ldr	r2, [pc, #284]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x168>)
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	009b      	lsls	r3, r3, #2
 8003700:	4413      	add	r3, r2
 8003702:	edd3 6a00 	vldr	s13, [r3]
 8003706:	4a45      	ldr	r2, [pc, #276]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003708:	697b      	ldr	r3, [r7, #20]
 800370a:	009b      	lsls	r3, r3, #2
 800370c:	4413      	add	r3, r2
 800370e:	edd3 7a00 	vldr	s15, [r3]
 8003712:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003716:	ee77 7a67 	vsub.f32	s15, s14, s15
 800371a:	edc7 7a03 	vstr	s15, [r7, #12]
				imag2 = dimag[i] * real[i] + dreal[i] * imag[i];
 800371e:	4a3e      	ldr	r2, [pc, #248]	; (8003818 <HAL_TIM_PeriodElapsedCallback+0x168>)
 8003720:	697b      	ldr	r3, [r7, #20]
 8003722:	009b      	lsls	r3, r3, #2
 8003724:	4413      	add	r3, r2
 8003726:	ed93 7a00 	vldr	s14, [r3]
 800372a:	4a3a      	ldr	r2, [pc, #232]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800372c:	697b      	ldr	r3, [r7, #20]
 800372e:	009b      	lsls	r3, r3, #2
 8003730:	4413      	add	r3, r2
 8003732:	edd3 7a00 	vldr	s15, [r3]
 8003736:	ee27 7a27 	vmul.f32	s14, s14, s15
 800373a:	4a35      	ldr	r2, [pc, #212]	; (8003810 <HAL_TIM_PeriodElapsedCallback+0x160>)
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	009b      	lsls	r3, r3, #2
 8003740:	4413      	add	r3, r2
 8003742:	edd3 6a00 	vldr	s13, [r3]
 8003746:	4a35      	ldr	r2, [pc, #212]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003748:	697b      	ldr	r3, [r7, #20]
 800374a:	009b      	lsls	r3, r3, #2
 800374c:	4413      	add	r3, r2
 800374e:	edd3 7a00 	vldr	s15, [r3]
 8003752:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003756:	ee77 7a27 	vadd.f32	s15, s14, s15
 800375a:	edc7 7a02 	vstr	s15, [r7, #8]

				real[i] = real2;
 800375e:	4a2d      	ldr	r2, [pc, #180]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003760:	697b      	ldr	r3, [r7, #20]
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4413      	add	r3, r2
 8003766:	68fa      	ldr	r2, [r7, #12]
 8003768:	601a      	str	r2, [r3, #0]
				imag[i] = imag2;
 800376a:	4a2c      	ldr	r2, [pc, #176]	; (800381c <HAL_TIM_PeriodElapsedCallback+0x16c>)
 800376c:	697b      	ldr	r3, [r7, #20]
 800376e:	009b      	lsls	r3, r3, #2
 8003770:	4413      	add	r3, r2
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	601a      	str	r2, [r3, #0]

				Vadd += real[i];
 8003776:	4a27      	ldr	r2, [pc, #156]	; (8003814 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003778:	697b      	ldr	r3, [r7, #20]
 800377a:	009b      	lsls	r3, r3, #2
 800377c:	4413      	add	r3, r2
 800377e:	edd3 7a00 	vldr	s15, [r3]
 8003782:	ed97 7a07 	vldr	s14, [r7, #28]
 8003786:	ee77 7a27 	vadd.f32	s15, s14, s15
 800378a:	edc7 7a07 	vstr	s15, [r7, #28]

			}

			localKeys >>= 1;
 800378e:	8b7b      	ldrh	r3, [r7, #26]
 8003790:	085b      	lsrs	r3, r3, #1
 8003792:	837b      	strh	r3, [r7, #26]
		for (int i = 0; i < 12; i++) {
 8003794:	697b      	ldr	r3, [r7, #20]
 8003796:	3301      	adds	r3, #1
 8003798:	617b      	str	r3, [r7, #20]
 800379a:	697b      	ldr	r3, [r7, #20]
 800379c:	2b0b      	cmp	r3, #11
 800379e:	dd99      	ble.n	80036d4 <HAL_TIM_PeriodElapsedCallback+0x24>

		}

		int16_t Vout = (int16_t) 1024 * Vadd / 12.0;
 80037a0:	edd7 7a07 	vldr	s15, [r7, #28]
 80037a4:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8003820 <HAL_TIM_PeriodElapsedCallback+0x170>
 80037a8:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037ac:	ee17 0a90 	vmov	r0, s15
 80037b0:	f7fc feca 	bl	8000548 <__aeabi_f2d>
 80037b4:	f04f 0200 	mov.w	r2, #0
 80037b8:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <HAL_TIM_PeriodElapsedCallback+0x174>)
 80037ba:	f7fd f847 	bl	800084c <__aeabi_ddiv>
 80037be:	4602      	mov	r2, r0
 80037c0:	460b      	mov	r3, r1
 80037c2:	4610      	mov	r0, r2
 80037c4:	4619      	mov	r1, r3
 80037c6:	f7fd f929 	bl	8000a1c <__aeabi_d2iz>
 80037ca:	4603      	mov	r3, r0
 80037cc:	827b      	strh	r3, [r7, #18]

		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, Vout + 2048);
 80037ce:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80037d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037d6:	2200      	movs	r2, #0
 80037d8:	2100      	movs	r1, #0
 80037da:	4813      	ldr	r0, [pc, #76]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80037dc:	f002 facb 	bl	8005d76 <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, Vout + 2048);
 80037e0:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80037e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80037e8:	2200      	movs	r2, #0
 80037ea:	2110      	movs	r1, #16
 80037ec:	480e      	ldr	r0, [pc, #56]	; (8003828 <HAL_TIM_PeriodElapsedCallback+0x178>)
 80037ee:	f002 fac2 	bl	8005d76 <HAL_DAC_SetValue>
//				GPIO_PIN_RESET);

	}

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM16) {
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	4a0d      	ldr	r2, [pc, #52]	; (800382c <HAL_TIM_PeriodElapsedCallback+0x17c>)
 80037f8:	4293      	cmp	r3, r2
 80037fa:	d101      	bne.n	8003800 <HAL_TIM_PeriodElapsedCallback+0x150>
    HAL_IncTick();
 80037fc:	f000 fb8c 	bl	8003f18 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8003800:	bf00      	nop
 8003802:	3720      	adds	r7, #32
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	200003b8 	.word	0x200003b8
 800380c:	20000000 	.word	0x20000000
 8003810:	20000588 	.word	0x20000588
 8003814:	20000004 	.word	0x20000004
 8003818:	200005b8 	.word	0x200005b8
 800381c:	20000610 	.word	0x20000610
 8003820:	44800000 	.word	0x44800000
 8003824:	40280000 	.word	0x40280000
 8003828:	20000350 	.word	0x20000350
 800382c:	40014400 	.word	0x40014400

08003830 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003830:	b480      	push	{r7}
 8003832:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003834:	b672      	cpsid	i
}
 8003836:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8003838:	e7fe      	b.n	8003838 <Error_Handler+0x8>
	...

0800383c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800383c:	b580      	push	{r7, lr}
 800383e:	b082      	sub	sp, #8
 8003840:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003842:	4b11      	ldr	r3, [pc, #68]	; (8003888 <HAL_MspInit+0x4c>)
 8003844:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003846:	4a10      	ldr	r2, [pc, #64]	; (8003888 <HAL_MspInit+0x4c>)
 8003848:	f043 0301 	orr.w	r3, r3, #1
 800384c:	6613      	str	r3, [r2, #96]	; 0x60
 800384e:	4b0e      	ldr	r3, [pc, #56]	; (8003888 <HAL_MspInit+0x4c>)
 8003850:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003852:	f003 0301 	and.w	r3, r3, #1
 8003856:	607b      	str	r3, [r7, #4]
 8003858:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800385a:	4b0b      	ldr	r3, [pc, #44]	; (8003888 <HAL_MspInit+0x4c>)
 800385c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800385e:	4a0a      	ldr	r2, [pc, #40]	; (8003888 <HAL_MspInit+0x4c>)
 8003860:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003864:	6593      	str	r3, [r2, #88]	; 0x58
 8003866:	4b08      	ldr	r3, [pc, #32]	; (8003888 <HAL_MspInit+0x4c>)
 8003868:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800386a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800386e:	603b      	str	r3, [r7, #0]
 8003870:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003872:	2200      	movs	r2, #0
 8003874:	210f      	movs	r1, #15
 8003876:	f06f 0001 	mvn.w	r0, #1
 800387a:	f002 f989 	bl	8005b90 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800387e:	bf00      	nop
 8003880:	3708      	adds	r7, #8
 8003882:	46bd      	mov	sp, r7
 8003884:	bd80      	pop	{r7, pc}
 8003886:	bf00      	nop
 8003888:	40021000 	.word	0x40021000

0800388c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b09e      	sub	sp, #120	; 0x78
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003894:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003898:	2200      	movs	r2, #0
 800389a:	601a      	str	r2, [r3, #0]
 800389c:	605a      	str	r2, [r3, #4]
 800389e:	609a      	str	r2, [r3, #8]
 80038a0:	60da      	str	r2, [r3, #12]
 80038a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80038a4:	f107 0310 	add.w	r3, r7, #16
 80038a8:	2254      	movs	r2, #84	; 0x54
 80038aa:	2100      	movs	r1, #0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f009 f87f 	bl	800c9b0 <memset>
  if(hadc->Instance==ADC1)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a25      	ldr	r2, [pc, #148]	; (800394c <HAL_ADC_MspInit+0xc0>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d143      	bne.n	8003944 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 80038bc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80038c0:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 80038c2:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 80038c6:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80038c8:	2301      	movs	r3, #1
 80038ca:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80038cc:	2301      	movs	r3, #1
 80038ce:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 40;
 80038d0:	2328      	movs	r3, #40	; 0x28
 80038d2:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80038d4:	2307      	movs	r3, #7
 80038d6:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80038d8:	2302      	movs	r3, #2
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80038dc:	2302      	movs	r3, #2
 80038de:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 80038e0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80038e4:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80038e6:	f107 0310 	add.w	r3, r7, #16
 80038ea:	4618      	mov	r0, r3
 80038ec:	f004 f848 	bl	8007980 <HAL_RCCEx_PeriphCLKConfig>
 80038f0:	4603      	mov	r3, r0
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d001      	beq.n	80038fa <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 80038f6:	f7ff ff9b 	bl	8003830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80038fa:	4b15      	ldr	r3, [pc, #84]	; (8003950 <HAL_ADC_MspInit+0xc4>)
 80038fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038fe:	4a14      	ldr	r2, [pc, #80]	; (8003950 <HAL_ADC_MspInit+0xc4>)
 8003900:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003904:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <HAL_ADC_MspInit+0xc4>)
 8003908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800390a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800390e:	60fb      	str	r3, [r7, #12]
 8003910:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003912:	4b0f      	ldr	r3, [pc, #60]	; (8003950 <HAL_ADC_MspInit+0xc4>)
 8003914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003916:	4a0e      	ldr	r2, [pc, #56]	; (8003950 <HAL_ADC_MspInit+0xc4>)
 8003918:	f043 0301 	orr.w	r3, r3, #1
 800391c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800391e:	4b0c      	ldr	r3, [pc, #48]	; (8003950 <HAL_ADC_MspInit+0xc4>)
 8003920:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003922:	f003 0301 	and.w	r3, r3, #1
 8003926:	60bb      	str	r3, [r7, #8]
 8003928:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = JOYY_Pin|JOYX_Pin;
 800392a:	2303      	movs	r3, #3
 800392c:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800392e:	230b      	movs	r3, #11
 8003930:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003932:	2300      	movs	r3, #0
 8003934:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003936:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800393a:	4619      	mov	r1, r3
 800393c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003940:	f002 fb6c 	bl	800601c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003944:	bf00      	nop
 8003946:	3778      	adds	r7, #120	; 0x78
 8003948:	46bd      	mov	sp, r7
 800394a:	bd80      	pop	{r7, pc}
 800394c:	50040000 	.word	0x50040000
 8003950:	40021000 	.word	0x40021000

08003954 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003954:	b580      	push	{r7, lr}
 8003956:	b08a      	sub	sp, #40	; 0x28
 8003958:	af00      	add	r7, sp, #0
 800395a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800395c:	f107 0314 	add.w	r3, r7, #20
 8003960:	2200      	movs	r2, #0
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	605a      	str	r2, [r3, #4]
 8003966:	609a      	str	r2, [r3, #8]
 8003968:	60da      	str	r2, [r3, #12]
 800396a:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	4a29      	ldr	r2, [pc, #164]	; (8003a18 <HAL_CAN_MspInit+0xc4>)
 8003972:	4293      	cmp	r3, r2
 8003974:	d14b      	bne.n	8003a0e <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003976:	4b29      	ldr	r3, [pc, #164]	; (8003a1c <HAL_CAN_MspInit+0xc8>)
 8003978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800397a:	4a28      	ldr	r2, [pc, #160]	; (8003a1c <HAL_CAN_MspInit+0xc8>)
 800397c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003980:	6593      	str	r3, [r2, #88]	; 0x58
 8003982:	4b26      	ldr	r3, [pc, #152]	; (8003a1c <HAL_CAN_MspInit+0xc8>)
 8003984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003986:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800398a:	613b      	str	r3, [r7, #16]
 800398c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800398e:	4b23      	ldr	r3, [pc, #140]	; (8003a1c <HAL_CAN_MspInit+0xc8>)
 8003990:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003992:	4a22      	ldr	r2, [pc, #136]	; (8003a1c <HAL_CAN_MspInit+0xc8>)
 8003994:	f043 0301 	orr.w	r3, r3, #1
 8003998:	64d3      	str	r3, [r2, #76]	; 0x4c
 800399a:	4b20      	ldr	r3, [pc, #128]	; (8003a1c <HAL_CAN_MspInit+0xc8>)
 800399c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80039a6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80039aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ac:	2302      	movs	r3, #2
 80039ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039b0:	2301      	movs	r3, #1
 80039b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80039b4:	2301      	movs	r3, #1
 80039b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80039b8:	2309      	movs	r3, #9
 80039ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	4619      	mov	r1, r3
 80039c2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039c6:	f002 fb29 	bl	800601c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 80039ca:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039d0:	2302      	movs	r3, #2
 80039d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d4:	2300      	movs	r3, #0
 80039d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80039d8:	2301      	movs	r3, #1
 80039da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 80039dc:	2309      	movs	r3, #9
 80039de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039e0:	f107 0314 	add.w	r3, r7, #20
 80039e4:	4619      	mov	r1, r3
 80039e6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039ea:	f002 fb17 	bl	800601c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 80039ee:	2200      	movs	r2, #0
 80039f0:	2106      	movs	r1, #6
 80039f2:	2013      	movs	r0, #19
 80039f4:	f002 f8cc 	bl	8005b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 80039f8:	2013      	movs	r0, #19
 80039fa:	f002 f8e5 	bl	8005bc8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 80039fe:	2200      	movs	r2, #0
 8003a00:	2106      	movs	r1, #6
 8003a02:	2014      	movs	r0, #20
 8003a04:	f002 f8c4 	bl	8005b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8003a08:	2014      	movs	r0, #20
 8003a0a:	f002 f8dd 	bl	8005bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003a0e:	bf00      	nop
 8003a10:	3728      	adds	r7, #40	; 0x28
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	40006400 	.word	0x40006400
 8003a1c:	40021000 	.word	0x40021000

08003a20 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08a      	sub	sp, #40	; 0x28
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a28:	f107 0314 	add.w	r3, r7, #20
 8003a2c:	2200      	movs	r2, #0
 8003a2e:	601a      	str	r2, [r3, #0]
 8003a30:	605a      	str	r2, [r3, #4]
 8003a32:	609a      	str	r2, [r3, #8]
 8003a34:	60da      	str	r2, [r3, #12]
 8003a36:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a19      	ldr	r2, [pc, #100]	; (8003aa4 <HAL_DAC_MspInit+0x84>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d12c      	bne.n	8003a9c <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8003a42:	4b19      	ldr	r3, [pc, #100]	; (8003aa8 <HAL_DAC_MspInit+0x88>)
 8003a44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a46:	4a18      	ldr	r2, [pc, #96]	; (8003aa8 <HAL_DAC_MspInit+0x88>)
 8003a48:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8003a4c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a4e:	4b16      	ldr	r3, [pc, #88]	; (8003aa8 <HAL_DAC_MspInit+0x88>)
 8003a50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a52:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a56:	613b      	str	r3, [r7, #16]
 8003a58:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a5a:	4b13      	ldr	r3, [pc, #76]	; (8003aa8 <HAL_DAC_MspInit+0x88>)
 8003a5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a5e:	4a12      	ldr	r2, [pc, #72]	; (8003aa8 <HAL_DAC_MspInit+0x88>)
 8003a60:	f043 0301 	orr.w	r3, r3, #1
 8003a64:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003a66:	4b10      	ldr	r3, [pc, #64]	; (8003aa8 <HAL_DAC_MspInit+0x88>)
 8003a68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	60fb      	str	r3, [r7, #12]
 8003a70:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = OUTR_Pin|OUTL_Pin;
 8003a72:	2330      	movs	r3, #48	; 0x30
 8003a74:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8003a76:	2303      	movs	r3, #3
 8003a78:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a7e:	f107 0314 	add.w	r3, r7, #20
 8003a82:	4619      	mov	r1, r3
 8003a84:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003a88:	f002 fac8 	bl	800601c <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	2105      	movs	r1, #5
 8003a90:	2036      	movs	r0, #54	; 0x36
 8003a92:	f002 f87d 	bl	8005b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a96:	2036      	movs	r0, #54	; 0x36
 8003a98:	f002 f896 	bl	8005bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8003a9c:	bf00      	nop
 8003a9e:	3728      	adds	r7, #40	; 0x28
 8003aa0:	46bd      	mov	sp, r7
 8003aa2:	bd80      	pop	{r7, pc}
 8003aa4:	40007400 	.word	0x40007400
 8003aa8:	40021000 	.word	0x40021000

08003aac <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b09e      	sub	sp, #120	; 0x78
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ab4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003ab8:	2200      	movs	r2, #0
 8003aba:	601a      	str	r2, [r3, #0]
 8003abc:	605a      	str	r2, [r3, #4]
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	60da      	str	r2, [r3, #12]
 8003ac2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003ac4:	f107 0310 	add.w	r3, r7, #16
 8003ac8:	2254      	movs	r2, #84	; 0x54
 8003aca:	2100      	movs	r1, #0
 8003acc:	4618      	mov	r0, r3
 8003ace:	f008 ff6f 	bl	800c9b0 <memset>
  if(hi2c->Instance==I2C1)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4a1e      	ldr	r2, [pc, #120]	; (8003b50 <HAL_I2C_MspInit+0xa4>)
 8003ad8:	4293      	cmp	r3, r2
 8003ada:	d135      	bne.n	8003b48 <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8003adc:	2340      	movs	r3, #64	; 0x40
 8003ade:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003ae0:	2300      	movs	r3, #0
 8003ae2:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003ae4:	f107 0310 	add.w	r3, r7, #16
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f003 ff49 	bl	8007980 <HAL_RCCEx_PeriphCLKConfig>
 8003aee:	4603      	mov	r3, r0
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d001      	beq.n	8003af8 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003af4:	f7ff fe9c 	bl	8003830 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003af8:	4b16      	ldr	r3, [pc, #88]	; (8003b54 <HAL_I2C_MspInit+0xa8>)
 8003afa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003afc:	4a15      	ldr	r2, [pc, #84]	; (8003b54 <HAL_I2C_MspInit+0xa8>)
 8003afe:	f043 0302 	orr.w	r3, r3, #2
 8003b02:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003b04:	4b13      	ldr	r3, [pc, #76]	; (8003b54 <HAL_I2C_MspInit+0xa8>)
 8003b06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	60fb      	str	r3, [r7, #12]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b10:	23c0      	movs	r3, #192	; 0xc0
 8003b12:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003b14:	2312      	movs	r3, #18
 8003b16:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b18:	2300      	movs	r3, #0
 8003b1a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003b1c:	2303      	movs	r3, #3
 8003b1e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003b20:	2304      	movs	r3, #4
 8003b22:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003b24:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b28:	4619      	mov	r1, r3
 8003b2a:	480b      	ldr	r0, [pc, #44]	; (8003b58 <HAL_I2C_MspInit+0xac>)
 8003b2c:	f002 fa76 	bl	800601c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003b30:	4b08      	ldr	r3, [pc, #32]	; (8003b54 <HAL_I2C_MspInit+0xa8>)
 8003b32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b34:	4a07      	ldr	r2, [pc, #28]	; (8003b54 <HAL_I2C_MspInit+0xa8>)
 8003b36:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003b3a:	6593      	str	r3, [r2, #88]	; 0x58
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <HAL_I2C_MspInit+0xa8>)
 8003b3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b40:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b44:	60bb      	str	r3, [r7, #8]
 8003b46:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003b48:	bf00      	nop
 8003b4a:	3778      	adds	r7, #120	; 0x78
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}
 8003b50:	40005400 	.word	0x40005400
 8003b54:	40021000 	.word	0x40021000
 8003b58:	48000400 	.word	0x48000400

08003b5c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b084      	sub	sp, #16
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	4a16      	ldr	r2, [pc, #88]	; (8003bc4 <HAL_TIM_Base_MspInit+0x68>)
 8003b6a:	4293      	cmp	r3, r2
 8003b6c:	d114      	bne.n	8003b98 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003b6e:	4b16      	ldr	r3, [pc, #88]	; (8003bc8 <HAL_TIM_Base_MspInit+0x6c>)
 8003b70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b72:	4a15      	ldr	r2, [pc, #84]	; (8003bc8 <HAL_TIM_Base_MspInit+0x6c>)
 8003b74:	f043 0310 	orr.w	r3, r3, #16
 8003b78:	6593      	str	r3, [r2, #88]	; 0x58
 8003b7a:	4b13      	ldr	r3, [pc, #76]	; (8003bc8 <HAL_TIM_Base_MspInit+0x6c>)
 8003b7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003b7e:	f003 0310 	and.w	r3, r3, #16
 8003b82:	60fb      	str	r3, [r7, #12]
 8003b84:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003b86:	2200      	movs	r2, #0
 8003b88:	2105      	movs	r1, #5
 8003b8a:	2036      	movs	r0, #54	; 0x36
 8003b8c:	f002 f800 	bl	8005b90 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003b90:	2036      	movs	r0, #54	; 0x36
 8003b92:	f002 f819 	bl	8005bc8 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003b96:	e010      	b.n	8003bba <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a0b      	ldr	r2, [pc, #44]	; (8003bcc <HAL_TIM_Base_MspInit+0x70>)
 8003b9e:	4293      	cmp	r3, r2
 8003ba0:	d10b      	bne.n	8003bba <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003ba2:	4b09      	ldr	r3, [pc, #36]	; (8003bc8 <HAL_TIM_Base_MspInit+0x6c>)
 8003ba4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ba6:	4a08      	ldr	r2, [pc, #32]	; (8003bc8 <HAL_TIM_Base_MspInit+0x6c>)
 8003ba8:	f043 0320 	orr.w	r3, r3, #32
 8003bac:	6593      	str	r3, [r2, #88]	; 0x58
 8003bae:	4b06      	ldr	r3, [pc, #24]	; (8003bc8 <HAL_TIM_Base_MspInit+0x6c>)
 8003bb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bb2:	f003 0320 	and.w	r3, r3, #32
 8003bb6:	60bb      	str	r3, [r7, #8]
 8003bb8:	68bb      	ldr	r3, [r7, #8]
}
 8003bba:	bf00      	nop
 8003bbc:	3710      	adds	r7, #16
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}
 8003bc2:	bf00      	nop
 8003bc4:	40001000 	.word	0x40001000
 8003bc8:	40021000 	.word	0x40021000
 8003bcc:	40001400 	.word	0x40001400

08003bd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bd0:	b580      	push	{r7, lr}
 8003bd2:	b09e      	sub	sp, #120	; 0x78
 8003bd4:	af00      	add	r7, sp, #0
 8003bd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bd8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
 8003be0:	605a      	str	r2, [r3, #4]
 8003be2:	609a      	str	r2, [r3, #8]
 8003be4:	60da      	str	r2, [r3, #12]
 8003be6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003be8:	f107 0310 	add.w	r3, r7, #16
 8003bec:	2254      	movs	r2, #84	; 0x54
 8003bee:	2100      	movs	r1, #0
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f008 fedd 	bl	800c9b0 <memset>
  if(huart->Instance==USART2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	4a28      	ldr	r2, [pc, #160]	; (8003c9c <HAL_UART_MspInit+0xcc>)
 8003bfc:	4293      	cmp	r3, r2
 8003bfe:	d148      	bne.n	8003c92 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003c00:	2302      	movs	r3, #2
 8003c02:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003c04:	2300      	movs	r3, #0
 8003c06:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003c08:	f107 0310 	add.w	r3, r7, #16
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	f003 feb7 	bl	8007980 <HAL_RCCEx_PeriphCLKConfig>
 8003c12:	4603      	mov	r3, r0
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d001      	beq.n	8003c1c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003c18:	f7ff fe0a 	bl	8003830 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003c1c:	4b20      	ldr	r3, [pc, #128]	; (8003ca0 <HAL_UART_MspInit+0xd0>)
 8003c1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c20:	4a1f      	ldr	r2, [pc, #124]	; (8003ca0 <HAL_UART_MspInit+0xd0>)
 8003c22:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003c26:	6593      	str	r3, [r2, #88]	; 0x58
 8003c28:	4b1d      	ldr	r3, [pc, #116]	; (8003ca0 <HAL_UART_MspInit+0xd0>)
 8003c2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c34:	4b1a      	ldr	r3, [pc, #104]	; (8003ca0 <HAL_UART_MspInit+0xd0>)
 8003c36:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c38:	4a19      	ldr	r2, [pc, #100]	; (8003ca0 <HAL_UART_MspInit+0xd0>)
 8003c3a:	f043 0301 	orr.w	r3, r3, #1
 8003c3e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c40:	4b17      	ldr	r3, [pc, #92]	; (8003ca0 <HAL_UART_MspInit+0xd0>)
 8003c42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	60bb      	str	r3, [r7, #8]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003c4c:	2304      	movs	r3, #4
 8003c4e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c50:	2302      	movs	r3, #2
 8003c52:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c54:	2300      	movs	r3, #0
 8003c56:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c58:	2303      	movs	r3, #3
 8003c5a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003c5c:	2307      	movs	r3, #7
 8003c5e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c60:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c64:	4619      	mov	r1, r3
 8003c66:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c6a:	f002 f9d7 	bl	800601c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003c6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c72:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c74:	2302      	movs	r3, #2
 8003c76:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c7c:	2303      	movs	r3, #3
 8003c7e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003c80:	2303      	movs	r3, #3
 8003c82:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003c84:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003c88:	4619      	mov	r1, r3
 8003c8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003c8e:	f002 f9c5 	bl	800601c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003c92:	bf00      	nop
 8003c94:	3778      	adds	r7, #120	; 0x78
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}
 8003c9a:	bf00      	nop
 8003c9c:	40004400 	.word	0x40004400
 8003ca0:	40021000 	.word	0x40021000

08003ca4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08c      	sub	sp, #48	; 0x30
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003cac:	2300      	movs	r3, #0
 8003cae:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8003cb2:	4b2e      	ldr	r3, [pc, #184]	; (8003d6c <HAL_InitTick+0xc8>)
 8003cb4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cb6:	4a2d      	ldr	r2, [pc, #180]	; (8003d6c <HAL_InitTick+0xc8>)
 8003cb8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003cbc:	6613      	str	r3, [r2, #96]	; 0x60
 8003cbe:	4b2b      	ldr	r3, [pc, #172]	; (8003d6c <HAL_InitTick+0xc8>)
 8003cc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cc6:	60bb      	str	r3, [r7, #8]
 8003cc8:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003cca:	f107 020c 	add.w	r2, r7, #12
 8003cce:	f107 0310 	add.w	r3, r7, #16
 8003cd2:	4611      	mov	r1, r2
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	f003 fdc1 	bl	800785c <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003cda:	f003 fda9 	bl	8007830 <HAL_RCC_GetPCLK2Freq>
 8003cde:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ce0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ce2:	4a23      	ldr	r2, [pc, #140]	; (8003d70 <HAL_InitTick+0xcc>)
 8003ce4:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce8:	0c9b      	lsrs	r3, r3, #18
 8003cea:	3b01      	subs	r3, #1
 8003cec:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8003cee:	4b21      	ldr	r3, [pc, #132]	; (8003d74 <HAL_InitTick+0xd0>)
 8003cf0:	4a21      	ldr	r2, [pc, #132]	; (8003d78 <HAL_InitTick+0xd4>)
 8003cf2:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8003cf4:	4b1f      	ldr	r3, [pc, #124]	; (8003d74 <HAL_InitTick+0xd0>)
 8003cf6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cfa:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8003cfc:	4a1d      	ldr	r2, [pc, #116]	; (8003d74 <HAL_InitTick+0xd0>)
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d00:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8003d02:	4b1c      	ldr	r3, [pc, #112]	; (8003d74 <HAL_InitTick+0xd0>)
 8003d04:	2200      	movs	r2, #0
 8003d06:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003d08:	4b1a      	ldr	r3, [pc, #104]	; (8003d74 <HAL_InitTick+0xd0>)
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003d0e:	4b19      	ldr	r3, [pc, #100]	; (8003d74 <HAL_InitTick+0xd0>)
 8003d10:	2200      	movs	r2, #0
 8003d12:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8003d14:	4817      	ldr	r0, [pc, #92]	; (8003d74 <HAL_InitTick+0xd0>)
 8003d16:	f004 f92b 	bl	8007f70 <HAL_TIM_Base_Init>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003d20:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d11b      	bne.n	8003d60 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8003d28:	4812      	ldr	r0, [pc, #72]	; (8003d74 <HAL_InitTick+0xd0>)
 8003d2a:	f004 f9c5 	bl	80080b8 <HAL_TIM_Base_Start_IT>
 8003d2e:	4603      	mov	r3, r0
 8003d30:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003d34:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003d38:	2b00      	cmp	r3, #0
 8003d3a:	d111      	bne.n	8003d60 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003d3c:	2019      	movs	r0, #25
 8003d3e:	f001 ff43 	bl	8005bc8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	2b0f      	cmp	r3, #15
 8003d46:	d808      	bhi.n	8003d5a <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003d48:	2200      	movs	r2, #0
 8003d4a:	6879      	ldr	r1, [r7, #4]
 8003d4c:	2019      	movs	r0, #25
 8003d4e:	f001 ff1f 	bl	8005b90 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d52:	4a0a      	ldr	r2, [pc, #40]	; (8003d7c <HAL_InitTick+0xd8>)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6013      	str	r3, [r2, #0]
 8003d58:	e002      	b.n	8003d60 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003d60:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3730      	adds	r7, #48	; 0x30
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	431bde83 	.word	0x431bde83
 8003d74:	20000640 	.word	0x20000640
 8003d78:	40014400 	.word	0x40014400
 8003d7c:	20000038 	.word	0x20000038

08003d80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d80:	b480      	push	{r7}
 8003d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d84:	e7fe      	b.n	8003d84 <NMI_Handler+0x4>

08003d86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d86:	b480      	push	{r7}
 8003d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d8a:	e7fe      	b.n	8003d8a <HardFault_Handler+0x4>

08003d8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d8c:	b480      	push	{r7}
 8003d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d90:	e7fe      	b.n	8003d90 <MemManage_Handler+0x4>

08003d92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d92:	b480      	push	{r7}
 8003d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d96:	e7fe      	b.n	8003d96 <BusFault_Handler+0x4>

08003d98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d9c:	e7fe      	b.n	8003d9c <UsageFault_Handler+0x4>

08003d9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d9e:	b480      	push	{r7}
 8003da0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003da2:	bf00      	nop
 8003da4:	46bd      	mov	sp, r7
 8003da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003daa:	4770      	bx	lr

08003dac <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003db0:	4802      	ldr	r0, [pc, #8]	; (8003dbc <CAN1_TX_IRQHandler+0x10>)
 8003db2:	f001 fc23 	bl	80055fc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8003db6:	bf00      	nop
 8003db8:	bd80      	pop	{r7, pc}
 8003dba:	bf00      	nop
 8003dbc:	20000328 	.word	0x20000328

08003dc0 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003dc4:	4802      	ldr	r0, [pc, #8]	; (8003dd0 <CAN1_RX0_IRQHandler+0x10>)
 8003dc6:	f001 fc19 	bl	80055fc <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8003dca:	bf00      	nop
 8003dcc:	bd80      	pop	{r7, pc}
 8003dce:	bf00      	nop
 8003dd0:	20000328 	.word	0x20000328

08003dd4 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003dd8:	4802      	ldr	r0, [pc, #8]	; (8003de4 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003dda:	f004 f9c1 	bl	8008160 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	20000640 	.word	0x20000640

08003de8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003dec:	4803      	ldr	r0, [pc, #12]	; (8003dfc <TIM6_DAC_IRQHandler+0x14>)
 8003dee:	f004 f9b7 	bl	8008160 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003df2:	4803      	ldr	r0, [pc, #12]	; (8003e00 <TIM6_DAC_IRQHandler+0x18>)
 8003df4:	f001 ff65 	bl	8005cc2 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003df8:	bf00      	nop
 8003dfa:	bd80      	pop	{r7, pc}
 8003dfc:	200003b8 	.word	0x200003b8
 8003e00:	20000350 	.word	0x20000350

08003e04 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003e04:	b580      	push	{r7, lr}
 8003e06:	b086      	sub	sp, #24
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003e0c:	4a14      	ldr	r2, [pc, #80]	; (8003e60 <_sbrk+0x5c>)
 8003e0e:	4b15      	ldr	r3, [pc, #84]	; (8003e64 <_sbrk+0x60>)
 8003e10:	1ad3      	subs	r3, r2, r3
 8003e12:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003e18:	4b13      	ldr	r3, [pc, #76]	; (8003e68 <_sbrk+0x64>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	d102      	bne.n	8003e26 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003e20:	4b11      	ldr	r3, [pc, #68]	; (8003e68 <_sbrk+0x64>)
 8003e22:	4a12      	ldr	r2, [pc, #72]	; (8003e6c <_sbrk+0x68>)
 8003e24:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003e26:	4b10      	ldr	r3, [pc, #64]	; (8003e68 <_sbrk+0x64>)
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4413      	add	r3, r2
 8003e2e:	693a      	ldr	r2, [r7, #16]
 8003e30:	429a      	cmp	r2, r3
 8003e32:	d207      	bcs.n	8003e44 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003e34:	f008 fd82 	bl	800c93c <__errno>
 8003e38:	4603      	mov	r3, r0
 8003e3a:	220c      	movs	r2, #12
 8003e3c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003e3e:	f04f 33ff 	mov.w	r3, #4294967295
 8003e42:	e009      	b.n	8003e58 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003e44:	4b08      	ldr	r3, [pc, #32]	; (8003e68 <_sbrk+0x64>)
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003e4a:	4b07      	ldr	r3, [pc, #28]	; (8003e68 <_sbrk+0x64>)
 8003e4c:	681a      	ldr	r2, [r3, #0]
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	4413      	add	r3, r2
 8003e52:	4a05      	ldr	r2, [pc, #20]	; (8003e68 <_sbrk+0x64>)
 8003e54:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003e56:	68fb      	ldr	r3, [r7, #12]
}
 8003e58:	4618      	mov	r0, r3
 8003e5a:	3718      	adds	r7, #24
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	bd80      	pop	{r7, pc}
 8003e60:	20010000 	.word	0x20010000
 8003e64:	00000400 	.word	0x00000400
 8003e68:	2000068c 	.word	0x2000068c
 8003e6c:	200031b8 	.word	0x200031b8

08003e70 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003e70:	b480      	push	{r7}
 8003e72:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003e74:	4b06      	ldr	r3, [pc, #24]	; (8003e90 <SystemInit+0x20>)
 8003e76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003e7a:	4a05      	ldr	r2, [pc, #20]	; (8003e90 <SystemInit+0x20>)
 8003e7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e80:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003e84:	bf00      	nop
 8003e86:	46bd      	mov	sp, r7
 8003e88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8c:	4770      	bx	lr
 8003e8e:	bf00      	nop
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003e94:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ecc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003e98:	f7ff ffea 	bl	8003e70 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003e9c:	480c      	ldr	r0, [pc, #48]	; (8003ed0 <LoopForever+0x6>)
  ldr r1, =_edata
 8003e9e:	490d      	ldr	r1, [pc, #52]	; (8003ed4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003ea0:	4a0d      	ldr	r2, [pc, #52]	; (8003ed8 <LoopForever+0xe>)
  movs r3, #0
 8003ea2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003ea4:	e002      	b.n	8003eac <LoopCopyDataInit>

08003ea6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003ea6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003ea8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003eaa:	3304      	adds	r3, #4

08003eac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003eac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003eae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003eb0:	d3f9      	bcc.n	8003ea6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003eb2:	4a0a      	ldr	r2, [pc, #40]	; (8003edc <LoopForever+0x12>)
  ldr r4, =_ebss
 8003eb4:	4c0a      	ldr	r4, [pc, #40]	; (8003ee0 <LoopForever+0x16>)
  movs r3, #0
 8003eb6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003eb8:	e001      	b.n	8003ebe <LoopFillZerobss>

08003eba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003eba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003ebc:	3204      	adds	r2, #4

08003ebe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003ebe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003ec0:	d3fb      	bcc.n	8003eba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003ec2:	f008 fd41 	bl	800c948 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003ec6:	f7fe fcfd 	bl	80028c4 <main>

08003eca <LoopForever>:

LoopForever:
    b LoopForever
 8003eca:	e7fe      	b.n	8003eca <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ecc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003ed0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ed4:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8003ed8:	0800db08 	.word	0x0800db08
  ldr r2, =_sbss
 8003edc:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003ee0:	200031b4 	.word	0x200031b4

08003ee4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003ee4:	e7fe      	b.n	8003ee4 <ADC1_IRQHandler>

08003ee6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003ee6:	b580      	push	{r7, lr}
 8003ee8:	b082      	sub	sp, #8
 8003eea:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003eec:	2300      	movs	r3, #0
 8003eee:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003ef0:	2003      	movs	r0, #3
 8003ef2:	f001 fe42 	bl	8005b7a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003ef6:	200f      	movs	r0, #15
 8003ef8:	f7ff fed4 	bl	8003ca4 <HAL_InitTick>
 8003efc:	4603      	mov	r3, r0
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d002      	beq.n	8003f08 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	71fb      	strb	r3, [r7, #7]
 8003f06:	e001      	b.n	8003f0c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003f08:	f7ff fc98 	bl	800383c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003f0c:	79fb      	ldrb	r3, [r7, #7]
}
 8003f0e:	4618      	mov	r0, r3
 8003f10:	3708      	adds	r7, #8
 8003f12:	46bd      	mov	sp, r7
 8003f14:	bd80      	pop	{r7, pc}
	...

08003f18 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003f1c:	4b06      	ldr	r3, [pc, #24]	; (8003f38 <HAL_IncTick+0x20>)
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	461a      	mov	r2, r3
 8003f22:	4b06      	ldr	r3, [pc, #24]	; (8003f3c <HAL_IncTick+0x24>)
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4413      	add	r3, r2
 8003f28:	4a04      	ldr	r2, [pc, #16]	; (8003f3c <HAL_IncTick+0x24>)
 8003f2a:	6013      	str	r3, [r2, #0]
}
 8003f2c:	bf00      	nop
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	2000003c 	.word	0x2000003c
 8003f3c:	20000690 	.word	0x20000690

08003f40 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003f40:	b480      	push	{r7}
 8003f42:	af00      	add	r7, sp, #0
  return uwTick;
 8003f44:	4b03      	ldr	r3, [pc, #12]	; (8003f54 <HAL_GetTick+0x14>)
 8003f46:	681b      	ldr	r3, [r3, #0]
}
 8003f48:	4618      	mov	r0, r3
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr
 8003f52:	bf00      	nop
 8003f54:	20000690 	.word	0x20000690

08003f58 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003f58:	b580      	push	{r7, lr}
 8003f5a:	b084      	sub	sp, #16
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003f60:	f7ff ffee 	bl	8003f40 <HAL_GetTick>
 8003f64:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f70:	d005      	beq.n	8003f7e <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003f72:	4b0a      	ldr	r3, [pc, #40]	; (8003f9c <HAL_Delay+0x44>)
 8003f74:	781b      	ldrb	r3, [r3, #0]
 8003f76:	461a      	mov	r2, r3
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003f7e:	bf00      	nop
 8003f80:	f7ff ffde 	bl	8003f40 <HAL_GetTick>
 8003f84:	4602      	mov	r2, r0
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	1ad3      	subs	r3, r2, r3
 8003f8a:	68fa      	ldr	r2, [r7, #12]
 8003f8c:	429a      	cmp	r2, r3
 8003f8e:	d8f7      	bhi.n	8003f80 <HAL_Delay+0x28>
  {
  }
}
 8003f90:	bf00      	nop
 8003f92:	bf00      	nop
 8003f94:	3710      	adds	r7, #16
 8003f96:	46bd      	mov	sp, r7
 8003f98:	bd80      	pop	{r7, pc}
 8003f9a:	bf00      	nop
 8003f9c:	2000003c 	.word	0x2000003c

08003fa0 <HAL_GetUIDw0>:
/**
  * @brief  Return the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8003fa4:	4b03      	ldr	r3, [pc, #12]	; (8003fb4 <HAL_GetUIDw0+0x14>)
 8003fa6:	681b      	ldr	r3, [r3, #0]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	46bd      	mov	sp, r7
 8003fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb0:	4770      	bx	lr
 8003fb2:	bf00      	nop
 8003fb4:	1fff7590 	.word	0x1fff7590

08003fb8 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
 8003fc0:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	689b      	ldr	r3, [r3, #8]
 8003fc6:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003fca:	683b      	ldr	r3, [r7, #0]
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	609a      	str	r2, [r3, #8]
}
 8003fd2:	bf00      	nop
 8003fd4:	370c      	adds	r7, #12
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fdc:	4770      	bx	lr

08003fde <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003fde:	b480      	push	{r7}
 8003fe0:	b083      	sub	sp, #12
 8003fe2:	af00      	add	r7, sp, #0
 8003fe4:	6078      	str	r0, [r7, #4]
 8003fe6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003ff0:	683b      	ldr	r3, [r7, #0]
 8003ff2:	431a      	orrs	r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
}
 8003ff8:	bf00      	nop
 8003ffa:	370c      	adds	r7, #12
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr

08004004 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8004004:	b480      	push	{r7}
 8004006:	b083      	sub	sp, #12
 8004008:	af00      	add	r7, sp, #0
 800400a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8004014:	4618      	mov	r0, r3
 8004016:	370c      	adds	r7, #12
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr

08004020 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8004020:	b480      	push	{r7}
 8004022:	b087      	sub	sp, #28
 8004024:	af00      	add	r7, sp, #0
 8004026:	60f8      	str	r0, [r7, #12]
 8004028:	60b9      	str	r1, [r7, #8]
 800402a:	607a      	str	r2, [r7, #4]
 800402c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	3360      	adds	r3, #96	; 0x60
 8004032:	461a      	mov	r2, r3
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	009b      	lsls	r3, r3, #2
 8004038:	4413      	add	r3, r2
 800403a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800403c:	697b      	ldr	r3, [r7, #20]
 800403e:	681a      	ldr	r2, [r3, #0]
 8004040:	4b08      	ldr	r3, [pc, #32]	; (8004064 <LL_ADC_SetOffset+0x44>)
 8004042:	4013      	ands	r3, r2
 8004044:	687a      	ldr	r2, [r7, #4]
 8004046:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 800404a:	683a      	ldr	r2, [r7, #0]
 800404c:	430a      	orrs	r2, r1
 800404e:	4313      	orrs	r3, r2
 8004050:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004054:	697b      	ldr	r3, [r7, #20]
 8004056:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8004058:	bf00      	nop
 800405a:	371c      	adds	r7, #28
 800405c:	46bd      	mov	sp, r7
 800405e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004062:	4770      	bx	lr
 8004064:	03fff000 	.word	0x03fff000

08004068 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8004068:	b480      	push	{r7}
 800406a:	b085      	sub	sp, #20
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
 8004070:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	3360      	adds	r3, #96	; 0x60
 8004076:	461a      	mov	r2, r3
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	009b      	lsls	r3, r3, #2
 800407c:	4413      	add	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8004088:	4618      	mov	r0, r3
 800408a:	3714      	adds	r7, #20
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8004094:	b480      	push	{r7}
 8004096:	b087      	sub	sp, #28
 8004098:	af00      	add	r7, sp, #0
 800409a:	60f8      	str	r0, [r7, #12]
 800409c:	60b9      	str	r1, [r7, #8]
 800409e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	3360      	adds	r3, #96	; 0x60
 80040a4:	461a      	mov	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	009b      	lsls	r3, r3, #2
 80040aa:	4413      	add	r3, r2
 80040ac:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040ae:	697b      	ldr	r3, [r7, #20]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	431a      	orrs	r2, r3
 80040ba:	697b      	ldr	r3, [r7, #20]
 80040bc:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 80040be:	bf00      	nop
 80040c0:	371c      	adds	r7, #28
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr

080040ca <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80040ca:	b480      	push	{r7}
 80040cc:	b087      	sub	sp, #28
 80040ce:	af00      	add	r7, sp, #0
 80040d0:	60f8      	str	r0, [r7, #12]
 80040d2:	60b9      	str	r1, [r7, #8]
 80040d4:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	3330      	adds	r3, #48	; 0x30
 80040da:	461a      	mov	r2, r3
 80040dc:	68bb      	ldr	r3, [r7, #8]
 80040de:	0a1b      	lsrs	r3, r3, #8
 80040e0:	009b      	lsls	r3, r3, #2
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	4413      	add	r3, r2
 80040e8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80040ea:	697b      	ldr	r3, [r7, #20]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	f003 031f 	and.w	r3, r3, #31
 80040f4:	211f      	movs	r1, #31
 80040f6:	fa01 f303 	lsl.w	r3, r1, r3
 80040fa:	43db      	mvns	r3, r3
 80040fc:	401a      	ands	r2, r3
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	0e9b      	lsrs	r3, r3, #26
 8004102:	f003 011f 	and.w	r1, r3, #31
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f003 031f 	and.w	r3, r3, #31
 800410c:	fa01 f303 	lsl.w	r3, r1, r3
 8004110:	431a      	orrs	r2, r3
 8004112:	697b      	ldr	r3, [r7, #20]
 8004114:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8004116:	bf00      	nop
 8004118:	371c      	adds	r7, #28
 800411a:	46bd      	mov	sp, r7
 800411c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004120:	4770      	bx	lr

08004122 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8004122:	b480      	push	{r7}
 8004124:	b087      	sub	sp, #28
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	3314      	adds	r3, #20
 8004132:	461a      	mov	r2, r3
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	0e5b      	lsrs	r3, r3, #25
 8004138:	009b      	lsls	r3, r3, #2
 800413a:	f003 0304 	and.w	r3, r3, #4
 800413e:	4413      	add	r3, r2
 8004140:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8004142:	697b      	ldr	r3, [r7, #20]
 8004144:	681a      	ldr	r2, [r3, #0]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	0d1b      	lsrs	r3, r3, #20
 800414a:	f003 031f 	and.w	r3, r3, #31
 800414e:	2107      	movs	r1, #7
 8004150:	fa01 f303 	lsl.w	r3, r1, r3
 8004154:	43db      	mvns	r3, r3
 8004156:	401a      	ands	r2, r3
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	0d1b      	lsrs	r3, r3, #20
 800415c:	f003 031f 	and.w	r3, r3, #31
 8004160:	6879      	ldr	r1, [r7, #4]
 8004162:	fa01 f303 	lsl.w	r3, r1, r3
 8004166:	431a      	orrs	r2, r3
 8004168:	697b      	ldr	r3, [r7, #20]
 800416a:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 800416c:	bf00      	nop
 800416e:	371c      	adds	r7, #28
 8004170:	46bd      	mov	sp, r7
 8004172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004176:	4770      	bx	lr

08004178 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	60f8      	str	r0, [r7, #12]
 8004180:	60b9      	str	r1, [r7, #8]
 8004182:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004190:	43db      	mvns	r3, r3
 8004192:	401a      	ands	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	f003 0318 	and.w	r3, r3, #24
 800419a:	4908      	ldr	r1, [pc, #32]	; (80041bc <LL_ADC_SetChannelSingleDiff+0x44>)
 800419c:	40d9      	lsrs	r1, r3
 800419e:	68bb      	ldr	r3, [r7, #8]
 80041a0:	400b      	ands	r3, r1
 80041a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041a6:	431a      	orrs	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 80041ae:	bf00      	nop
 80041b0:	3714      	adds	r7, #20
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	0007ffff 	.word	0x0007ffff

080041c0 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	689b      	ldr	r3, [r3, #8]
 80041cc:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 80041d0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80041d4:	687a      	ldr	r2, [r7, #4]
 80041d6:	6093      	str	r3, [r2, #8]
}
 80041d8:	bf00      	nop
 80041da:	370c      	adds	r7, #12
 80041dc:	46bd      	mov	sp, r7
 80041de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e2:	4770      	bx	lr

080041e4 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
 80041ea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	689b      	ldr	r3, [r3, #8]
 80041f0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80041f4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80041f8:	d101      	bne.n	80041fe <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80041fa:	2301      	movs	r3, #1
 80041fc:	e000      	b.n	8004200 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80041fe:	2300      	movs	r3, #0
}
 8004200:	4618      	mov	r0, r3
 8004202:	370c      	adds	r7, #12
 8004204:	46bd      	mov	sp, r7
 8004206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420a:	4770      	bx	lr

0800420c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800420c:	b480      	push	{r7}
 800420e:	b083      	sub	sp, #12
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	689b      	ldr	r3, [r3, #8]
 8004218:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 800421c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004220:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004228:	bf00      	nop
 800422a:	370c      	adds	r7, #12
 800422c:	46bd      	mov	sp, r7
 800422e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004232:	4770      	bx	lr

08004234 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004244:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004248:	d101      	bne.n	800424e <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800424a:	2301      	movs	r3, #1
 800424c:	e000      	b.n	8004250 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800424e:	2300      	movs	r3, #0
}
 8004250:	4618      	mov	r0, r3
 8004252:	370c      	adds	r7, #12
 8004254:	46bd      	mov	sp, r7
 8004256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800425a:	4770      	bx	lr

0800425c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 800425c:	b480      	push	{r7}
 800425e:	b083      	sub	sp, #12
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0301 	and.w	r3, r3, #1
 800426c:	2b01      	cmp	r3, #1
 800426e:	d101      	bne.n	8004274 <LL_ADC_IsEnabled+0x18>
 8004270:	2301      	movs	r3, #1
 8004272:	e000      	b.n	8004276 <LL_ADC_IsEnabled+0x1a>
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	370c      	adds	r7, #12
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8004282:	b480      	push	{r7}
 8004284:	b083      	sub	sp, #12
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0304 	and.w	r3, r3, #4
 8004292:	2b04      	cmp	r3, #4
 8004294:	d101      	bne.n	800429a <LL_ADC_REG_IsConversionOngoing+0x18>
 8004296:	2301      	movs	r3, #1
 8004298:	e000      	b.n	800429c <LL_ADC_REG_IsConversionOngoing+0x1a>
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	370c      	adds	r7, #12
 80042a0:	46bd      	mov	sp, r7
 80042a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a6:	4770      	bx	lr

080042a8 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	689b      	ldr	r3, [r3, #8]
 80042b4:	f003 0308 	and.w	r3, r3, #8
 80042b8:	2b08      	cmp	r3, #8
 80042ba:	d101      	bne.n	80042c0 <LL_ADC_INJ_IsConversionOngoing+0x18>
 80042bc:	2301      	movs	r3, #1
 80042be:	e000      	b.n	80042c2 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80042c0:	2300      	movs	r3, #0
}
 80042c2:	4618      	mov	r0, r3
 80042c4:	370c      	adds	r7, #12
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
	...

080042d0 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b088      	sub	sp, #32
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80042d8:	2300      	movs	r3, #0
 80042da:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80042dc:	2300      	movs	r3, #0
 80042de:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e12c      	b.n	8004544 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d109      	bne.n	800430c <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80042f8:	6878      	ldr	r0, [r7, #4]
 80042fa:	f7ff fac7 	bl	800388c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2200      	movs	r2, #0
 8004302:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4618      	mov	r0, r3
 8004312:	f7ff ff67 	bl	80041e4 <LL_ADC_IsDeepPowerDownEnabled>
 8004316:	4603      	mov	r3, r0
 8004318:	2b00      	cmp	r3, #0
 800431a:	d004      	beq.n	8004326 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4618      	mov	r0, r3
 8004322:	f7ff ff4d 	bl	80041c0 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	4618      	mov	r0, r3
 800432c:	f7ff ff82 	bl	8004234 <LL_ADC_IsInternalRegulatorEnabled>
 8004330:	4603      	mov	r3, r0
 8004332:	2b00      	cmp	r3, #0
 8004334:	d115      	bne.n	8004362 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff ff66 	bl	800420c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004340:	4b82      	ldr	r3, [pc, #520]	; (800454c <HAL_ADC_Init+0x27c>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	099b      	lsrs	r3, r3, #6
 8004346:	4a82      	ldr	r2, [pc, #520]	; (8004550 <HAL_ADC_Init+0x280>)
 8004348:	fba2 2303 	umull	r2, r3, r2, r3
 800434c:	099b      	lsrs	r3, r3, #6
 800434e:	3301      	adds	r3, #1
 8004350:	005b      	lsls	r3, r3, #1
 8004352:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004354:	e002      	b.n	800435c <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	3b01      	subs	r3, #1
 800435a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 800435c:	68bb      	ldr	r3, [r7, #8]
 800435e:	2b00      	cmp	r3, #0
 8004360:	d1f9      	bne.n	8004356 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff ff64 	bl	8004234 <LL_ADC_IsInternalRegulatorEnabled>
 800436c:	4603      	mov	r3, r0
 800436e:	2b00      	cmp	r3, #0
 8004370:	d10d      	bne.n	800438e <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004376:	f043 0210 	orr.w	r2, r3, #16
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004382:	f043 0201 	orr.w	r2, r3, #1
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4618      	mov	r0, r3
 8004394:	f7ff ff75 	bl	8004282 <LL_ADC_REG_IsConversionOngoing>
 8004398:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800439e:	f003 0310 	and.w	r3, r3, #16
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	f040 80c5 	bne.w	8004532 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80043a8:	697b      	ldr	r3, [r7, #20]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	f040 80c1 	bne.w	8004532 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043b4:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80043b8:	f043 0202 	orr.w	r2, r3, #2
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	4618      	mov	r0, r3
 80043c6:	f7ff ff49 	bl	800425c <LL_ADC_IsEnabled>
 80043ca:	4603      	mov	r3, r0
 80043cc:	2b00      	cmp	r3, #0
 80043ce:	d10b      	bne.n	80043e8 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80043d0:	4860      	ldr	r0, [pc, #384]	; (8004554 <HAL_ADC_Init+0x284>)
 80043d2:	f7ff ff43 	bl	800425c <LL_ADC_IsEnabled>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d105      	bne.n	80043e8 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	685b      	ldr	r3, [r3, #4]
 80043e0:	4619      	mov	r1, r3
 80043e2:	485d      	ldr	r0, [pc, #372]	; (8004558 <HAL_ADC_Init+0x288>)
 80043e4:	f7ff fde8 	bl	8003fb8 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	7e5b      	ldrb	r3, [r3, #25]
 80043ec:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80043f2:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80043f8:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80043fe:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004406:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004408:	4313      	orrs	r3, r2
 800440a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004412:	2b01      	cmp	r3, #1
 8004414:	d106      	bne.n	8004424 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800441a:	3b01      	subs	r3, #1
 800441c:	045b      	lsls	r3, r3, #17
 800441e:	69ba      	ldr	r2, [r7, #24]
 8004420:	4313      	orrs	r3, r2
 8004422:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004428:	2b00      	cmp	r3, #0
 800442a:	d009      	beq.n	8004440 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004430:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004438:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800443a:	69ba      	ldr	r2, [r7, #24]
 800443c:	4313      	orrs	r3, r2
 800443e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	68da      	ldr	r2, [r3, #12]
 8004446:	4b45      	ldr	r3, [pc, #276]	; (800455c <HAL_ADC_Init+0x28c>)
 8004448:	4013      	ands	r3, r2
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	6812      	ldr	r2, [r2, #0]
 800444e:	69b9      	ldr	r1, [r7, #24]
 8004450:	430b      	orrs	r3, r1
 8004452:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	4618      	mov	r0, r3
 800445a:	f7ff ff12 	bl	8004282 <LL_ADC_REG_IsConversionOngoing>
 800445e:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	4618      	mov	r0, r3
 8004466:	f7ff ff1f 	bl	80042a8 <LL_ADC_INJ_IsConversionOngoing>
 800446a:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d13d      	bne.n	80044ee <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	2b00      	cmp	r3, #0
 8004476:	d13a      	bne.n	80044ee <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 800447c:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004484:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004486:	4313      	orrs	r3, r2
 8004488:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004494:	f023 0302 	bic.w	r3, r3, #2
 8004498:	687a      	ldr	r2, [r7, #4]
 800449a:	6812      	ldr	r2, [r2, #0]
 800449c:	69b9      	ldr	r1, [r7, #24]
 800449e:	430b      	orrs	r3, r1
 80044a0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80044a8:	2b01      	cmp	r3, #1
 80044aa:	d118      	bne.n	80044de <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	691b      	ldr	r3, [r3, #16]
 80044b2:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80044b6:	f023 0304 	bic.w	r3, r3, #4
 80044ba:	687a      	ldr	r2, [r7, #4]
 80044bc:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80044be:	687a      	ldr	r2, [r7, #4]
 80044c0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80044c2:	4311      	orrs	r1, r2
 80044c4:	687a      	ldr	r2, [r7, #4]
 80044c6:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80044c8:	4311      	orrs	r1, r2
 80044ca:	687a      	ldr	r2, [r7, #4]
 80044cc:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80044ce:	430a      	orrs	r2, r1
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	f042 0201 	orr.w	r2, r2, #1
 80044da:	611a      	str	r2, [r3, #16]
 80044dc:	e007      	b.n	80044ee <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	691a      	ldr	r2, [r3, #16]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0201 	bic.w	r2, r2, #1
 80044ec:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d10c      	bne.n	8004510 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80044fc:	f023 010f 	bic.w	r1, r3, #15
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	69db      	ldr	r3, [r3, #28]
 8004504:	1e5a      	subs	r2, r3, #1
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	430a      	orrs	r2, r1
 800450c:	631a      	str	r2, [r3, #48]	; 0x30
 800450e:	e007      	b.n	8004520 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f022 020f 	bic.w	r2, r2, #15
 800451e:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004524:	f023 0303 	bic.w	r3, r3, #3
 8004528:	f043 0201 	orr.w	r2, r3, #1
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	655a      	str	r2, [r3, #84]	; 0x54
 8004530:	e007      	b.n	8004542 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004536:	f043 0210 	orr.w	r2, r3, #16
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800453e:	2301      	movs	r3, #1
 8004540:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8004542:	7ffb      	ldrb	r3, [r7, #31]
}
 8004544:	4618      	mov	r0, r3
 8004546:	3720      	adds	r7, #32
 8004548:	46bd      	mov	sp, r7
 800454a:	bd80      	pop	{r7, pc}
 800454c:	20000034 	.word	0x20000034
 8004550:	053e2d63 	.word	0x053e2d63
 8004554:	50040000 	.word	0x50040000
 8004558:	50040300 	.word	0x50040300
 800455c:	fff0c007 	.word	0xfff0c007

08004560 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b0b6      	sub	sp, #216	; 0xd8
 8004564:	af00      	add	r7, sp, #0
 8004566:	6078      	str	r0, [r7, #4]
 8004568:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800456a:	2300      	movs	r3, #0
 800456c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8004570:	2300      	movs	r3, #0
 8004572:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800457a:	2b01      	cmp	r3, #1
 800457c:	d101      	bne.n	8004582 <HAL_ADC_ConfigChannel+0x22>
 800457e:	2302      	movs	r3, #2
 8004580:	e3b9      	b.n	8004cf6 <HAL_ADC_ConfigChannel+0x796>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2201      	movs	r2, #1
 8004586:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4618      	mov	r0, r3
 8004590:	f7ff fe77 	bl	8004282 <LL_ADC_REG_IsConversionOngoing>
 8004594:	4603      	mov	r3, r0
 8004596:	2b00      	cmp	r3, #0
 8004598:	f040 839e 	bne.w	8004cd8 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	685b      	ldr	r3, [r3, #4]
 80045a0:	2b05      	cmp	r3, #5
 80045a2:	d824      	bhi.n	80045ee <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	685b      	ldr	r3, [r3, #4]
 80045a8:	3b02      	subs	r3, #2
 80045aa:	2b03      	cmp	r3, #3
 80045ac:	d81b      	bhi.n	80045e6 <HAL_ADC_ConfigChannel+0x86>
 80045ae:	a201      	add	r2, pc, #4	; (adr r2, 80045b4 <HAL_ADC_ConfigChannel+0x54>)
 80045b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045b4:	080045c5 	.word	0x080045c5
 80045b8:	080045cd 	.word	0x080045cd
 80045bc:	080045d5 	.word	0x080045d5
 80045c0:	080045dd 	.word	0x080045dd
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	220c      	movs	r2, #12
 80045c8:	605a      	str	r2, [r3, #4]
          break;
 80045ca:	e011      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2212      	movs	r2, #18
 80045d0:	605a      	str	r2, [r3, #4]
          break;
 80045d2:	e00d      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80045d4:	683b      	ldr	r3, [r7, #0]
 80045d6:	2218      	movs	r2, #24
 80045d8:	605a      	str	r2, [r3, #4]
          break;
 80045da:	e009      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	f44f 7280 	mov.w	r2, #256	; 0x100
 80045e2:	605a      	str	r2, [r3, #4]
          break;
 80045e4:	e004      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	2206      	movs	r2, #6
 80045ea:	605a      	str	r2, [r3, #4]
          break;
 80045ec:	e000      	b.n	80045f0 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80045ee:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6818      	ldr	r0, [r3, #0]
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	6859      	ldr	r1, [r3, #4]
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	681b      	ldr	r3, [r3, #0]
 80045fc:	461a      	mov	r2, r3
 80045fe:	f7ff fd64 	bl	80040ca <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	4618      	mov	r0, r3
 8004608:	f7ff fe3b 	bl	8004282 <LL_ADC_REG_IsConversionOngoing>
 800460c:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4618      	mov	r0, r3
 8004616:	f7ff fe47 	bl	80042a8 <LL_ADC_INJ_IsConversionOngoing>
 800461a:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800461e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8004622:	2b00      	cmp	r3, #0
 8004624:	f040 81a6 	bne.w	8004974 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004628:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800462c:	2b00      	cmp	r3, #0
 800462e:	f040 81a1 	bne.w	8004974 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6818      	ldr	r0, [r3, #0]
 8004636:	683b      	ldr	r3, [r7, #0]
 8004638:	6819      	ldr	r1, [r3, #0]
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	461a      	mov	r2, r3
 8004640:	f7ff fd6f 	bl	8004122 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	695a      	ldr	r2, [r3, #20]
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	68db      	ldr	r3, [r3, #12]
 800464e:	08db      	lsrs	r3, r3, #3
 8004650:	f003 0303 	and.w	r3, r3, #3
 8004654:	005b      	lsls	r3, r3, #1
 8004656:	fa02 f303 	lsl.w	r3, r2, r3
 800465a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	691b      	ldr	r3, [r3, #16]
 8004662:	2b04      	cmp	r3, #4
 8004664:	d00a      	beq.n	800467c <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	6818      	ldr	r0, [r3, #0]
 800466a:	683b      	ldr	r3, [r7, #0]
 800466c:	6919      	ldr	r1, [r3, #16]
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681a      	ldr	r2, [r3, #0]
 8004672:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004676:	f7ff fcd3 	bl	8004020 <LL_ADC_SetOffset>
 800467a:	e17b      	b.n	8004974 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2100      	movs	r1, #0
 8004682:	4618      	mov	r0, r3
 8004684:	f7ff fcf0 	bl	8004068 <LL_ADC_GetOffsetChannel>
 8004688:	4603      	mov	r3, r0
 800468a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800468e:	2b00      	cmp	r3, #0
 8004690:	d10a      	bne.n	80046a8 <HAL_ADC_ConfigChannel+0x148>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	2100      	movs	r1, #0
 8004698:	4618      	mov	r0, r3
 800469a:	f7ff fce5 	bl	8004068 <LL_ADC_GetOffsetChannel>
 800469e:	4603      	mov	r3, r0
 80046a0:	0e9b      	lsrs	r3, r3, #26
 80046a2:	f003 021f 	and.w	r2, r3, #31
 80046a6:	e01e      	b.n	80046e6 <HAL_ADC_ConfigChannel+0x186>
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	2100      	movs	r1, #0
 80046ae:	4618      	mov	r0, r3
 80046b0:	f7ff fcda 	bl	8004068 <LL_ADC_GetOffsetChannel>
 80046b4:	4603      	mov	r3, r0
 80046b6:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80046ba:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80046be:	fa93 f3a3 	rbit	r3, r3
 80046c2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80046c6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80046ca:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80046ce:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d101      	bne.n	80046da <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80046d6:	2320      	movs	r3, #32
 80046d8:	e004      	b.n	80046e4 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80046da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80046de:	fab3 f383 	clz	r3, r3
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80046e6:	683b      	ldr	r3, [r7, #0]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d105      	bne.n	80046fe <HAL_ADC_ConfigChannel+0x19e>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	0e9b      	lsrs	r3, r3, #26
 80046f8:	f003 031f 	and.w	r3, r3, #31
 80046fc:	e018      	b.n	8004730 <HAL_ADC_ConfigChannel+0x1d0>
 80046fe:	683b      	ldr	r3, [r7, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004706:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800470a:	fa93 f3a3 	rbit	r3, r3
 800470e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8004712:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004716:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800471a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800471e:	2b00      	cmp	r3, #0
 8004720:	d101      	bne.n	8004726 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8004722:	2320      	movs	r3, #32
 8004724:	e004      	b.n	8004730 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004726:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800472a:	fab3 f383 	clz	r3, r3
 800472e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004730:	429a      	cmp	r2, r3
 8004732:	d106      	bne.n	8004742 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	2200      	movs	r2, #0
 800473a:	2100      	movs	r1, #0
 800473c:	4618      	mov	r0, r3
 800473e:	f7ff fca9 	bl	8004094 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	2101      	movs	r1, #1
 8004748:	4618      	mov	r0, r3
 800474a:	f7ff fc8d 	bl	8004068 <LL_ADC_GetOffsetChannel>
 800474e:	4603      	mov	r3, r0
 8004750:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004754:	2b00      	cmp	r3, #0
 8004756:	d10a      	bne.n	800476e <HAL_ADC_ConfigChannel+0x20e>
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	2101      	movs	r1, #1
 800475e:	4618      	mov	r0, r3
 8004760:	f7ff fc82 	bl	8004068 <LL_ADC_GetOffsetChannel>
 8004764:	4603      	mov	r3, r0
 8004766:	0e9b      	lsrs	r3, r3, #26
 8004768:	f003 021f 	and.w	r2, r3, #31
 800476c:	e01e      	b.n	80047ac <HAL_ADC_ConfigChannel+0x24c>
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	2101      	movs	r1, #1
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fc77 	bl	8004068 <LL_ADC_GetOffsetChannel>
 800477a:	4603      	mov	r3, r0
 800477c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004780:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004784:	fa93 f3a3 	rbit	r3, r3
 8004788:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800478c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004790:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004794:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004798:	2b00      	cmp	r3, #0
 800479a:	d101      	bne.n	80047a0 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 800479c:	2320      	movs	r3, #32
 800479e:	e004      	b.n	80047aa <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 80047a0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80047a4:	fab3 f383 	clz	r3, r3
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80047ac:	683b      	ldr	r3, [r7, #0]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d105      	bne.n	80047c4 <HAL_ADC_ConfigChannel+0x264>
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	0e9b      	lsrs	r3, r3, #26
 80047be:	f003 031f 	and.w	r3, r3, #31
 80047c2:	e018      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x296>
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047cc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80047d0:	fa93 f3a3 	rbit	r3, r3
 80047d4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80047d8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80047dc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80047e0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d101      	bne.n	80047ec <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80047e8:	2320      	movs	r3, #32
 80047ea:	e004      	b.n	80047f6 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80047ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80047f0:	fab3 f383 	clz	r3, r3
 80047f4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d106      	bne.n	8004808 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	2200      	movs	r2, #0
 8004800:	2101      	movs	r1, #1
 8004802:	4618      	mov	r0, r3
 8004804:	f7ff fc46 	bl	8004094 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	2102      	movs	r1, #2
 800480e:	4618      	mov	r0, r3
 8004810:	f7ff fc2a 	bl	8004068 <LL_ADC_GetOffsetChannel>
 8004814:	4603      	mov	r3, r0
 8004816:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800481a:	2b00      	cmp	r3, #0
 800481c:	d10a      	bne.n	8004834 <HAL_ADC_ConfigChannel+0x2d4>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	2102      	movs	r1, #2
 8004824:	4618      	mov	r0, r3
 8004826:	f7ff fc1f 	bl	8004068 <LL_ADC_GetOffsetChannel>
 800482a:	4603      	mov	r3, r0
 800482c:	0e9b      	lsrs	r3, r3, #26
 800482e:	f003 021f 	and.w	r2, r3, #31
 8004832:	e01e      	b.n	8004872 <HAL_ADC_ConfigChannel+0x312>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	2102      	movs	r1, #2
 800483a:	4618      	mov	r0, r3
 800483c:	f7ff fc14 	bl	8004068 <LL_ADC_GetOffsetChannel>
 8004840:	4603      	mov	r3, r0
 8004842:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004846:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800484a:	fa93 f3a3 	rbit	r3, r3
 800484e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8004852:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004856:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800485a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800485e:	2b00      	cmp	r3, #0
 8004860:	d101      	bne.n	8004866 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8004862:	2320      	movs	r3, #32
 8004864:	e004      	b.n	8004870 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004866:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800486a:	fab3 f383 	clz	r3, r3
 800486e:	b2db      	uxtb	r3, r3
 8004870:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004872:	683b      	ldr	r3, [r7, #0]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800487a:	2b00      	cmp	r3, #0
 800487c:	d105      	bne.n	800488a <HAL_ADC_ConfigChannel+0x32a>
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	0e9b      	lsrs	r3, r3, #26
 8004884:	f003 031f 	and.w	r3, r3, #31
 8004888:	e016      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x358>
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004892:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004896:	fa93 f3a3 	rbit	r3, r3
 800489a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800489c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800489e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80048a2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d101      	bne.n	80048ae <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80048aa:	2320      	movs	r3, #32
 80048ac:	e004      	b.n	80048b8 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80048ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80048b2:	fab3 f383 	clz	r3, r3
 80048b6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d106      	bne.n	80048ca <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	2200      	movs	r2, #0
 80048c2:	2102      	movs	r1, #2
 80048c4:	4618      	mov	r0, r3
 80048c6:	f7ff fbe5 	bl	8004094 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	2103      	movs	r1, #3
 80048d0:	4618      	mov	r0, r3
 80048d2:	f7ff fbc9 	bl	8004068 <LL_ADC_GetOffsetChannel>
 80048d6:	4603      	mov	r3, r0
 80048d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d10a      	bne.n	80048f6 <HAL_ADC_ConfigChannel+0x396>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2103      	movs	r1, #3
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7ff fbbe 	bl	8004068 <LL_ADC_GetOffsetChannel>
 80048ec:	4603      	mov	r3, r0
 80048ee:	0e9b      	lsrs	r3, r3, #26
 80048f0:	f003 021f 	and.w	r2, r3, #31
 80048f4:	e017      	b.n	8004926 <HAL_ADC_ConfigChannel+0x3c6>
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	2103      	movs	r1, #3
 80048fc:	4618      	mov	r0, r3
 80048fe:	f7ff fbb3 	bl	8004068 <LL_ADC_GetOffsetChannel>
 8004902:	4603      	mov	r3, r0
 8004904:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004906:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004908:	fa93 f3a3 	rbit	r3, r3
 800490c:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800490e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004910:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8004912:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004914:	2b00      	cmp	r3, #0
 8004916:	d101      	bne.n	800491c <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004918:	2320      	movs	r3, #32
 800491a:	e003      	b.n	8004924 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 800491c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800491e:	fab3 f383 	clz	r3, r3
 8004922:	b2db      	uxtb	r3, r3
 8004924:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800492e:	2b00      	cmp	r3, #0
 8004930:	d105      	bne.n	800493e <HAL_ADC_ConfigChannel+0x3de>
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	0e9b      	lsrs	r3, r3, #26
 8004938:	f003 031f 	and.w	r3, r3, #31
 800493c:	e011      	b.n	8004962 <HAL_ADC_ConfigChannel+0x402>
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004944:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004946:	fa93 f3a3 	rbit	r3, r3
 800494a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800494c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800494e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8004950:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004956:	2320      	movs	r3, #32
 8004958:	e003      	b.n	8004962 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 800495a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800495c:	fab3 f383 	clz	r3, r3
 8004960:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8004962:	429a      	cmp	r2, r3
 8004964:	d106      	bne.n	8004974 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	2200      	movs	r2, #0
 800496c:	2103      	movs	r1, #3
 800496e:	4618      	mov	r0, r3
 8004970:	f7ff fb90 	bl	8004094 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4618      	mov	r0, r3
 800497a:	f7ff fc6f 	bl	800425c <LL_ADC_IsEnabled>
 800497e:	4603      	mov	r3, r0
 8004980:	2b00      	cmp	r3, #0
 8004982:	f040 813f 	bne.w	8004c04 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6818      	ldr	r0, [r3, #0]
 800498a:	683b      	ldr	r3, [r7, #0]
 800498c:	6819      	ldr	r1, [r3, #0]
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	68db      	ldr	r3, [r3, #12]
 8004992:	461a      	mov	r2, r3
 8004994:	f7ff fbf0 	bl	8004178 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004998:	683b      	ldr	r3, [r7, #0]
 800499a:	68db      	ldr	r3, [r3, #12]
 800499c:	4a8e      	ldr	r2, [pc, #568]	; (8004bd8 <HAL_ADC_ConfigChannel+0x678>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	f040 8130 	bne.w	8004c04 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80049a8:	683b      	ldr	r3, [r7, #0]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d10b      	bne.n	80049cc <HAL_ADC_ConfigChannel+0x46c>
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	0e9b      	lsrs	r3, r3, #26
 80049ba:	3301      	adds	r3, #1
 80049bc:	f003 031f 	and.w	r3, r3, #31
 80049c0:	2b09      	cmp	r3, #9
 80049c2:	bf94      	ite	ls
 80049c4:	2301      	movls	r3, #1
 80049c6:	2300      	movhi	r3, #0
 80049c8:	b2db      	uxtb	r3, r3
 80049ca:	e019      	b.n	8004a00 <HAL_ADC_ConfigChannel+0x4a0>
 80049cc:	683b      	ldr	r3, [r7, #0]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80049d4:	fa93 f3a3 	rbit	r3, r3
 80049d8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80049da:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80049dc:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80049de:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d101      	bne.n	80049e8 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80049e4:	2320      	movs	r3, #32
 80049e6:	e003      	b.n	80049f0 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80049e8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80049ea:	fab3 f383 	clz	r3, r3
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	3301      	adds	r3, #1
 80049f2:	f003 031f 	and.w	r3, r3, #31
 80049f6:	2b09      	cmp	r3, #9
 80049f8:	bf94      	ite	ls
 80049fa:	2301      	movls	r3, #1
 80049fc:	2300      	movhi	r3, #0
 80049fe:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d079      	beq.n	8004af8 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d107      	bne.n	8004a20 <HAL_ADC_ConfigChannel+0x4c0>
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	0e9b      	lsrs	r3, r3, #26
 8004a16:	3301      	adds	r3, #1
 8004a18:	069b      	lsls	r3, r3, #26
 8004a1a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a1e:	e015      	b.n	8004a4c <HAL_ADC_ConfigChannel+0x4ec>
 8004a20:	683b      	ldr	r3, [r7, #0]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a26:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004a28:	fa93 f3a3 	rbit	r3, r3
 8004a2c:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8004a2e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004a30:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8004a32:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d101      	bne.n	8004a3c <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004a38:	2320      	movs	r3, #32
 8004a3a:	e003      	b.n	8004a44 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004a3c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004a3e:	fab3 f383 	clz	r3, r3
 8004a42:	b2db      	uxtb	r3, r3
 8004a44:	3301      	adds	r3, #1
 8004a46:	069b      	lsls	r3, r3, #26
 8004a48:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004a4c:	683b      	ldr	r3, [r7, #0]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	d109      	bne.n	8004a6c <HAL_ADC_ConfigChannel+0x50c>
 8004a58:	683b      	ldr	r3, [r7, #0]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	0e9b      	lsrs	r3, r3, #26
 8004a5e:	3301      	adds	r3, #1
 8004a60:	f003 031f 	and.w	r3, r3, #31
 8004a64:	2101      	movs	r1, #1
 8004a66:	fa01 f303 	lsl.w	r3, r1, r3
 8004a6a:	e017      	b.n	8004a9c <HAL_ADC_ConfigChannel+0x53c>
 8004a6c:	683b      	ldr	r3, [r7, #0]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004a72:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004a74:	fa93 f3a3 	rbit	r3, r3
 8004a78:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004a7a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004a7c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8004a7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d101      	bne.n	8004a88 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004a84:	2320      	movs	r3, #32
 8004a86:	e003      	b.n	8004a90 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004a88:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004a8a:	fab3 f383 	clz	r3, r3
 8004a8e:	b2db      	uxtb	r3, r3
 8004a90:	3301      	adds	r3, #1
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2101      	movs	r1, #1
 8004a98:	fa01 f303 	lsl.w	r3, r1, r3
 8004a9c:	ea42 0103 	orr.w	r1, r2, r3
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004aa8:	2b00      	cmp	r3, #0
 8004aaa:	d10a      	bne.n	8004ac2 <HAL_ADC_ConfigChannel+0x562>
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	0e9b      	lsrs	r3, r3, #26
 8004ab2:	3301      	adds	r3, #1
 8004ab4:	f003 021f 	and.w	r2, r3, #31
 8004ab8:	4613      	mov	r3, r2
 8004aba:	005b      	lsls	r3, r3, #1
 8004abc:	4413      	add	r3, r2
 8004abe:	051b      	lsls	r3, r3, #20
 8004ac0:	e018      	b.n	8004af4 <HAL_ADC_ConfigChannel+0x594>
 8004ac2:	683b      	ldr	r3, [r7, #0]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004aca:	fa93 f3a3 	rbit	r3, r3
 8004ace:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8004ad0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ad2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8004ad4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ad6:	2b00      	cmp	r3, #0
 8004ad8:	d101      	bne.n	8004ade <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 8004ada:	2320      	movs	r3, #32
 8004adc:	e003      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8004ade:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ae0:	fab3 f383 	clz	r3, r3
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	f003 021f 	and.w	r2, r3, #31
 8004aec:	4613      	mov	r3, r2
 8004aee:	005b      	lsls	r3, r3, #1
 8004af0:	4413      	add	r3, r2
 8004af2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004af4:	430b      	orrs	r3, r1
 8004af6:	e080      	b.n	8004bfa <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004af8:	683b      	ldr	r3, [r7, #0]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d107      	bne.n	8004b14 <HAL_ADC_ConfigChannel+0x5b4>
 8004b04:	683b      	ldr	r3, [r7, #0]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	0e9b      	lsrs	r3, r3, #26
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	069b      	lsls	r3, r3, #26
 8004b0e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b12:	e015      	b.n	8004b40 <HAL_ADC_ConfigChannel+0x5e0>
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b1c:	fa93 f3a3 	rbit	r3, r3
 8004b20:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8004b22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b24:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d101      	bne.n	8004b30 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004b2c:	2320      	movs	r3, #32
 8004b2e:	e003      	b.n	8004b38 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	fab3 f383 	clz	r3, r3
 8004b36:	b2db      	uxtb	r3, r3
 8004b38:	3301      	adds	r3, #1
 8004b3a:	069b      	lsls	r3, r3, #26
 8004b3c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004b40:	683b      	ldr	r3, [r7, #0]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d109      	bne.n	8004b60 <HAL_ADC_ConfigChannel+0x600>
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	681b      	ldr	r3, [r3, #0]
 8004b50:	0e9b      	lsrs	r3, r3, #26
 8004b52:	3301      	adds	r3, #1
 8004b54:	f003 031f 	and.w	r3, r3, #31
 8004b58:	2101      	movs	r1, #1
 8004b5a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b5e:	e017      	b.n	8004b90 <HAL_ADC_ConfigChannel+0x630>
 8004b60:	683b      	ldr	r3, [r7, #0]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004b66:	6a3b      	ldr	r3, [r7, #32]
 8004b68:	fa93 f3a3 	rbit	r3, r3
 8004b6c:	61fb      	str	r3, [r7, #28]
  return result;
 8004b6e:	69fb      	ldr	r3, [r7, #28]
 8004b70:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8004b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d101      	bne.n	8004b7c <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004b78:	2320      	movs	r3, #32
 8004b7a:	e003      	b.n	8004b84 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7e:	fab3 f383 	clz	r3, r3
 8004b82:	b2db      	uxtb	r3, r3
 8004b84:	3301      	adds	r3, #1
 8004b86:	f003 031f 	and.w	r3, r3, #31
 8004b8a:	2101      	movs	r1, #1
 8004b8c:	fa01 f303 	lsl.w	r3, r1, r3
 8004b90:	ea42 0103 	orr.w	r1, r2, r3
 8004b94:	683b      	ldr	r3, [r7, #0]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d10d      	bne.n	8004bbc <HAL_ADC_ConfigChannel+0x65c>
 8004ba0:	683b      	ldr	r3, [r7, #0]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	0e9b      	lsrs	r3, r3, #26
 8004ba6:	3301      	adds	r3, #1
 8004ba8:	f003 021f 	and.w	r2, r3, #31
 8004bac:	4613      	mov	r3, r2
 8004bae:	005b      	lsls	r3, r3, #1
 8004bb0:	4413      	add	r3, r2
 8004bb2:	3b1e      	subs	r3, #30
 8004bb4:	051b      	lsls	r3, r3, #20
 8004bb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004bba:	e01d      	b.n	8004bf8 <HAL_ADC_ConfigChannel+0x698>
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004bc2:	697b      	ldr	r3, [r7, #20]
 8004bc4:	fa93 f3a3 	rbit	r3, r3
 8004bc8:	613b      	str	r3, [r7, #16]
  return result;
 8004bca:	693b      	ldr	r3, [r7, #16]
 8004bcc:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8004bce:	69bb      	ldr	r3, [r7, #24]
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d103      	bne.n	8004bdc <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8004bd4:	2320      	movs	r3, #32
 8004bd6:	e005      	b.n	8004be4 <HAL_ADC_ConfigChannel+0x684>
 8004bd8:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8004bdc:	69bb      	ldr	r3, [r7, #24]
 8004bde:	fab3 f383 	clz	r3, r3
 8004be2:	b2db      	uxtb	r3, r3
 8004be4:	3301      	adds	r3, #1
 8004be6:	f003 021f 	and.w	r2, r3, #31
 8004bea:	4613      	mov	r3, r2
 8004bec:	005b      	lsls	r3, r3, #1
 8004bee:	4413      	add	r3, r2
 8004bf0:	3b1e      	subs	r3, #30
 8004bf2:	051b      	lsls	r3, r3, #20
 8004bf4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8004bf8:	430b      	orrs	r3, r1
 8004bfa:	683a      	ldr	r2, [r7, #0]
 8004bfc:	6892      	ldr	r2, [r2, #8]
 8004bfe:	4619      	mov	r1, r3
 8004c00:	f7ff fa8f 	bl	8004122 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	4b3d      	ldr	r3, [pc, #244]	; (8004d00 <HAL_ADC_ConfigChannel+0x7a0>)
 8004c0a:	4013      	ands	r3, r2
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d06c      	beq.n	8004cea <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004c10:	483c      	ldr	r0, [pc, #240]	; (8004d04 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c12:	f7ff f9f7 	bl	8004004 <LL_ADC_GetCommonPathInternalCh>
 8004c16:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4a3a      	ldr	r2, [pc, #232]	; (8004d08 <HAL_ADC_ConfigChannel+0x7a8>)
 8004c20:	4293      	cmp	r3, r2
 8004c22:	d127      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004c24:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d121      	bne.n	8004c74 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	4a35      	ldr	r2, [pc, #212]	; (8004d0c <HAL_ADC_ConfigChannel+0x7ac>)
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d157      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c3a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c3e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004c42:	4619      	mov	r1, r3
 8004c44:	482f      	ldr	r0, [pc, #188]	; (8004d04 <HAL_ADC_ConfigChannel+0x7a4>)
 8004c46:	f7ff f9ca 	bl	8003fde <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004c4a:	4b31      	ldr	r3, [pc, #196]	; (8004d10 <HAL_ADC_ConfigChannel+0x7b0>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	099b      	lsrs	r3, r3, #6
 8004c50:	4a30      	ldr	r2, [pc, #192]	; (8004d14 <HAL_ADC_ConfigChannel+0x7b4>)
 8004c52:	fba2 2303 	umull	r2, r3, r2, r3
 8004c56:	099b      	lsrs	r3, r3, #6
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	4613      	mov	r3, r2
 8004c5c:	005b      	lsls	r3, r3, #1
 8004c5e:	4413      	add	r3, r2
 8004c60:	009b      	lsls	r3, r3, #2
 8004c62:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c64:	e002      	b.n	8004c6c <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	3b01      	subs	r3, #1
 8004c6a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d1f9      	bne.n	8004c66 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004c72:	e03a      	b.n	8004cea <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a27      	ldr	r2, [pc, #156]	; (8004d18 <HAL_ADC_ConfigChannel+0x7b8>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d113      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x746>
 8004c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c82:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d10d      	bne.n	8004ca6 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4a1f      	ldr	r2, [pc, #124]	; (8004d0c <HAL_ADC_ConfigChannel+0x7ac>)
 8004c90:	4293      	cmp	r3, r2
 8004c92:	d12a      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004c94:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004c98:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004c9c:	4619      	mov	r1, r3
 8004c9e:	4819      	ldr	r0, [pc, #100]	; (8004d04 <HAL_ADC_ConfigChannel+0x7a4>)
 8004ca0:	f7ff f99d 	bl	8003fde <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004ca4:	e021      	b.n	8004cea <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004ca6:	683b      	ldr	r3, [r7, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1c      	ldr	r2, [pc, #112]	; (8004d1c <HAL_ADC_ConfigChannel+0x7bc>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d11c      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004cb0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d116      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	4a12      	ldr	r2, [pc, #72]	; (8004d0c <HAL_ADC_ConfigChannel+0x7ac>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d111      	bne.n	8004cea <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004cc6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004cca:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004cce:	4619      	mov	r1, r3
 8004cd0:	480c      	ldr	r0, [pc, #48]	; (8004d04 <HAL_ADC_ConfigChannel+0x7a4>)
 8004cd2:	f7ff f984 	bl	8003fde <LL_ADC_SetCommonPathInternalCh>
 8004cd6:	e008      	b.n	8004cea <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cdc:	f043 0220 	orr.w	r2, r3, #32
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	2200      	movs	r2, #0
 8004cee:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004cf2:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004cf6:	4618      	mov	r0, r3
 8004cf8:	37d8      	adds	r7, #216	; 0xd8
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	bd80      	pop	{r7, pc}
 8004cfe:	bf00      	nop
 8004d00:	80080000 	.word	0x80080000
 8004d04:	50040300 	.word	0x50040300
 8004d08:	c7520000 	.word	0xc7520000
 8004d0c:	50040000 	.word	0x50040000
 8004d10:	20000034 	.word	0x20000034
 8004d14:	053e2d63 	.word	0x053e2d63
 8004d18:	cb840000 	.word	0xcb840000
 8004d1c:	80000001 	.word	0x80000001

08004d20 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b084      	sub	sp, #16
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d101      	bne.n	8004d32 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004d2e:	2301      	movs	r3, #1
 8004d30:	e0ed      	b.n	8004f0e <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d102      	bne.n	8004d44 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f7fe fe08 	bl	8003954 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	681a      	ldr	r2, [r3, #0]
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f042 0201 	orr.w	r2, r2, #1
 8004d52:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004d54:	f7ff f8f4 	bl	8003f40 <HAL_GetTick>
 8004d58:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d5a:	e012      	b.n	8004d82 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004d5c:	f7ff f8f0 	bl	8003f40 <HAL_GetTick>
 8004d60:	4602      	mov	r2, r0
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	1ad3      	subs	r3, r2, r3
 8004d66:	2b0a      	cmp	r3, #10
 8004d68:	d90b      	bls.n	8004d82 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d6e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2205      	movs	r2, #5
 8004d7a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e0c5      	b.n	8004f0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	685b      	ldr	r3, [r3, #4]
 8004d88:	f003 0301 	and.w	r3, r3, #1
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d0e5      	beq.n	8004d5c <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681a      	ldr	r2, [r3, #0]
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	f022 0202 	bic.w	r2, r2, #2
 8004d9e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004da0:	f7ff f8ce 	bl	8003f40 <HAL_GetTick>
 8004da4:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004da6:	e012      	b.n	8004dce <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004da8:	f7ff f8ca 	bl	8003f40 <HAL_GetTick>
 8004dac:	4602      	mov	r2, r0
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	1ad3      	subs	r3, r2, r3
 8004db2:	2b0a      	cmp	r3, #10
 8004db4:	d90b      	bls.n	8004dce <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dba:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2205      	movs	r2, #5
 8004dc6:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e09f      	b.n	8004f0e <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	f003 0302 	and.w	r3, r3, #2
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d1e5      	bne.n	8004da8 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	7e1b      	ldrb	r3, [r3, #24]
 8004de0:	2b01      	cmp	r3, #1
 8004de2:	d108      	bne.n	8004df6 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	681b      	ldr	r3, [r3, #0]
 8004dee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004df2:	601a      	str	r2, [r3, #0]
 8004df4:	e007      	b.n	8004e06 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	681a      	ldr	r2, [r3, #0]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004e04:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	7e5b      	ldrb	r3, [r3, #25]
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d108      	bne.n	8004e20 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004e1c:	601a      	str	r2, [r3, #0]
 8004e1e:	e007      	b.n	8004e30 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004e2e:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	7e9b      	ldrb	r3, [r3, #26]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d108      	bne.n	8004e4a <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	681a      	ldr	r2, [r3, #0]
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	f042 0220 	orr.w	r2, r2, #32
 8004e46:	601a      	str	r2, [r3, #0]
 8004e48:	e007      	b.n	8004e5a <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	681a      	ldr	r2, [r3, #0]
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f022 0220 	bic.w	r2, r2, #32
 8004e58:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	7edb      	ldrb	r3, [r3, #27]
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	d108      	bne.n	8004e74 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f022 0210 	bic.w	r2, r2, #16
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	e007      	b.n	8004e84 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0210 	orr.w	r2, r2, #16
 8004e82:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	7f1b      	ldrb	r3, [r3, #28]
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d108      	bne.n	8004e9e <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0208 	orr.w	r2, r2, #8
 8004e9a:	601a      	str	r2, [r3, #0]
 8004e9c:	e007      	b.n	8004eae <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	681a      	ldr	r2, [r3, #0]
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f022 0208 	bic.w	r2, r2, #8
 8004eac:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	7f5b      	ldrb	r3, [r3, #29]
 8004eb2:	2b01      	cmp	r3, #1
 8004eb4:	d108      	bne.n	8004ec8 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	681a      	ldr	r2, [r3, #0]
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f042 0204 	orr.w	r2, r2, #4
 8004ec4:	601a      	str	r2, [r3, #0]
 8004ec6:	e007      	b.n	8004ed8 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681a      	ldr	r2, [r3, #0]
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	f022 0204 	bic.w	r2, r2, #4
 8004ed6:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	689a      	ldr	r2, [r3, #8]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	68db      	ldr	r3, [r3, #12]
 8004ee0:	431a      	orrs	r2, r3
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	691b      	ldr	r3, [r3, #16]
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	695b      	ldr	r3, [r3, #20]
 8004eec:	ea42 0103 	orr.w	r1, r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	1e5a      	subs	r2, r3, #1
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	430a      	orrs	r2, r1
 8004efc:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	2200      	movs	r2, #0
 8004f02:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	2201      	movs	r2, #1
 8004f08:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004f0c:	2300      	movs	r3, #0
}
 8004f0e:	4618      	mov	r0, r3
 8004f10:	3710      	adds	r7, #16
 8004f12:	46bd      	mov	sp, r7
 8004f14:	bd80      	pop	{r7, pc}

08004f16 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8004f16:	b480      	push	{r7}
 8004f18:	b087      	sub	sp, #28
 8004f1a:	af00      	add	r7, sp, #0
 8004f1c:	6078      	str	r0, [r7, #4]
 8004f1e:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004f2c:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 8004f2e:	7cfb      	ldrb	r3, [r7, #19]
 8004f30:	2b01      	cmp	r3, #1
 8004f32:	d003      	beq.n	8004f3c <HAL_CAN_ConfigFilter+0x26>
 8004f34:	7cfb      	ldrb	r3, [r7, #19]
 8004f36:	2b02      	cmp	r3, #2
 8004f38:	f040 80aa 	bne.w	8005090 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8004f42:	f043 0201 	orr.w	r2, r3, #1
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8004f4c:	683b      	ldr	r3, [r7, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	f003 031f 	and.w	r3, r3, #31
 8004f54:	2201      	movs	r2, #1
 8004f56:	fa02 f303 	lsl.w	r3, r2, r3
 8004f5a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	43db      	mvns	r3, r3
 8004f66:	401a      	ands	r2, r3
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8004f6e:	683b      	ldr	r3, [r7, #0]
 8004f70:	69db      	ldr	r3, [r3, #28]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d123      	bne.n	8004fbe <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8004f76:	697b      	ldr	r3, [r7, #20]
 8004f78:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	43db      	mvns	r3, r3
 8004f80:	401a      	ands	r2, r3
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f88:	683b      	ldr	r3, [r7, #0]
 8004f8a:	68db      	ldr	r3, [r3, #12]
 8004f8c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004f8e:	683b      	ldr	r3, [r7, #0]
 8004f90:	685b      	ldr	r3, [r3, #4]
 8004f92:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f94:	683a      	ldr	r2, [r7, #0]
 8004f96:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8004f98:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004f9a:	697b      	ldr	r3, [r7, #20]
 8004f9c:	3248      	adds	r2, #72	; 0x48
 8004f9e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fa2:	683b      	ldr	r3, [r7, #0]
 8004fa4:	689b      	ldr	r3, [r3, #8]
 8004fa6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fae:	683b      	ldr	r3, [r7, #0]
 8004fb0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004fb2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004fb4:	6979      	ldr	r1, [r7, #20]
 8004fb6:	3348      	adds	r3, #72	; 0x48
 8004fb8:	00db      	lsls	r3, r3, #3
 8004fba:	440b      	add	r3, r1
 8004fbc:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8004fbe:	683b      	ldr	r3, [r7, #0]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	2b01      	cmp	r3, #1
 8004fc4:	d122      	bne.n	800500c <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8004fc6:	697b      	ldr	r3, [r7, #20]
 8004fc8:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	431a      	orrs	r2, r3
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fe2:	683a      	ldr	r2, [r7, #0]
 8004fe4:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8004fe6:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8004fe8:	697b      	ldr	r3, [r7, #20]
 8004fea:	3248      	adds	r2, #72	; 0x48
 8004fec:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8004ff0:	683b      	ldr	r3, [r7, #0]
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8004ff6:	683b      	ldr	r3, [r7, #0]
 8004ff8:	68db      	ldr	r3, [r3, #12]
 8004ffa:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8005000:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8005002:	6979      	ldr	r1, [r7, #20]
 8005004:	3348      	adds	r3, #72	; 0x48
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	440b      	add	r3, r1
 800500a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	699b      	ldr	r3, [r3, #24]
 8005010:	2b00      	cmp	r3, #0
 8005012:	d109      	bne.n	8005028 <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8005014:	697b      	ldr	r3, [r7, #20]
 8005016:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	43db      	mvns	r3, r3
 800501e:	401a      	ands	r2, r3
 8005020:	697b      	ldr	r3, [r7, #20]
 8005022:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8005026:	e007      	b.n	8005038 <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8005028:	697b      	ldr	r3, [r7, #20]
 800502a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 800502e:	68fb      	ldr	r3, [r7, #12]
 8005030:	431a      	orrs	r2, r3
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8005038:	683b      	ldr	r3, [r7, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d109      	bne.n	8005054 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8005040:	697b      	ldr	r3, [r7, #20]
 8005042:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	43db      	mvns	r3, r3
 800504a:	401a      	ands	r2, r3
 800504c:	697b      	ldr	r3, [r7, #20]
 800504e:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 8005052:	e007      	b.n	8005064 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8005054:	697b      	ldr	r3, [r7, #20]
 8005056:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	431a      	orrs	r2, r3
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	6a1b      	ldr	r3, [r3, #32]
 8005068:	2b01      	cmp	r3, #1
 800506a:	d107      	bne.n	800507c <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800506c:	697b      	ldr	r3, [r7, #20]
 800506e:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	431a      	orrs	r2, r3
 8005076:	697b      	ldr	r3, [r7, #20]
 8005078:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800507c:	697b      	ldr	r3, [r7, #20]
 800507e:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8005082:	f023 0201 	bic.w	r2, r3, #1
 8005086:	697b      	ldr	r3, [r7, #20]
 8005088:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800508c:	2300      	movs	r3, #0
 800508e:	e006      	b.n	800509e <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005094:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800509c:	2301      	movs	r3, #1
  }
}
 800509e:	4618      	mov	r0, r3
 80050a0:	371c      	adds	r7, #28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a8:	4770      	bx	lr

080050aa <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80050aa:	b580      	push	{r7, lr}
 80050ac:	b084      	sub	sp, #16
 80050ae:	af00      	add	r7, sp, #0
 80050b0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80050b8:	b2db      	uxtb	r3, r3
 80050ba:	2b01      	cmp	r3, #1
 80050bc:	d12e      	bne.n	800511c <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	2202      	movs	r2, #2
 80050c2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f022 0201 	bic.w	r2, r2, #1
 80050d4:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80050d6:	f7fe ff33 	bl	8003f40 <HAL_GetTick>
 80050da:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80050dc:	e012      	b.n	8005104 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80050de:	f7fe ff2f 	bl	8003f40 <HAL_GetTick>
 80050e2:	4602      	mov	r2, r0
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	1ad3      	subs	r3, r2, r3
 80050e8:	2b0a      	cmp	r3, #10
 80050ea:	d90b      	bls.n	8005104 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2205      	movs	r2, #5
 80050fc:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8005100:	2301      	movs	r3, #1
 8005102:	e012      	b.n	800512a <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	685b      	ldr	r3, [r3, #4]
 800510a:	f003 0301 	and.w	r3, r3, #1
 800510e:	2b00      	cmp	r3, #0
 8005110:	d1e5      	bne.n	80050de <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 8005118:	2300      	movs	r3, #0
 800511a:	e006      	b.n	800512a <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
  }
}
 800512a:	4618      	mov	r0, r3
 800512c:	3710      	adds	r7, #16
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}

08005132 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8005132:	b480      	push	{r7}
 8005134:	b089      	sub	sp, #36	; 0x24
 8005136:	af00      	add	r7, sp, #0
 8005138:	60f8      	str	r0, [r7, #12]
 800513a:	60b9      	str	r1, [r7, #8]
 800513c:	607a      	str	r2, [r7, #4]
 800513e:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005146:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689b      	ldr	r3, [r3, #8]
 800514e:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8005150:	7ffb      	ldrb	r3, [r7, #31]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d003      	beq.n	800515e <HAL_CAN_AddTxMessage+0x2c>
 8005156:	7ffb      	ldrb	r3, [r7, #31]
 8005158:	2b02      	cmp	r3, #2
 800515a:	f040 80ad 	bne.w	80052b8 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800515e:	69bb      	ldr	r3, [r7, #24]
 8005160:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005164:	2b00      	cmp	r3, #0
 8005166:	d10a      	bne.n	800517e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 800516e:	2b00      	cmp	r3, #0
 8005170:	d105      	bne.n	800517e <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8005172:	69bb      	ldr	r3, [r7, #24]
 8005174:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 8095 	beq.w	80052a8 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 800517e:	69bb      	ldr	r3, [r7, #24]
 8005180:	0e1b      	lsrs	r3, r3, #24
 8005182:	f003 0303 	and.w	r3, r3, #3
 8005186:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8005188:	2201      	movs	r2, #1
 800518a:	697b      	ldr	r3, [r7, #20]
 800518c:	409a      	lsls	r2, r3
 800518e:	683b      	ldr	r3, [r7, #0]
 8005190:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d10d      	bne.n	80051b6 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80051a0:	68bb      	ldr	r3, [r7, #8]
 80051a2:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80051a4:	68f9      	ldr	r1, [r7, #12]
 80051a6:	6809      	ldr	r1, [r1, #0]
 80051a8:	431a      	orrs	r2, r3
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	3318      	adds	r3, #24
 80051ae:	011b      	lsls	r3, r3, #4
 80051b0:	440b      	add	r3, r1
 80051b2:	601a      	str	r2, [r3, #0]
 80051b4:	e00f      	b.n	80051d6 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	685b      	ldr	r3, [r3, #4]
 80051ba:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051c0:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80051c2:	68bb      	ldr	r3, [r7, #8]
 80051c4:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051c6:	68f9      	ldr	r1, [r7, #12]
 80051c8:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 80051ca:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80051cc:	697b      	ldr	r3, [r7, #20]
 80051ce:	3318      	adds	r3, #24
 80051d0:	011b      	lsls	r3, r3, #4
 80051d2:	440b      	add	r3, r1
 80051d4:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6819      	ldr	r1, [r3, #0]
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	691a      	ldr	r2, [r3, #16]
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	3318      	adds	r3, #24
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	440b      	add	r3, r1
 80051e6:	3304      	adds	r3, #4
 80051e8:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 80051ea:	68bb      	ldr	r3, [r7, #8]
 80051ec:	7d1b      	ldrb	r3, [r3, #20]
 80051ee:	2b01      	cmp	r3, #1
 80051f0:	d111      	bne.n	8005216 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	3318      	adds	r3, #24
 80051fa:	011b      	lsls	r3, r3, #4
 80051fc:	4413      	add	r3, r2
 80051fe:	3304      	adds	r3, #4
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	6811      	ldr	r1, [r2, #0]
 8005206:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	3318      	adds	r3, #24
 800520e:	011b      	lsls	r3, r3, #4
 8005210:	440b      	add	r3, r1
 8005212:	3304      	adds	r3, #4
 8005214:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	3307      	adds	r3, #7
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	061a      	lsls	r2, r3, #24
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	3306      	adds	r3, #6
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	041b      	lsls	r3, r3, #16
 8005226:	431a      	orrs	r2, r3
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	3305      	adds	r3, #5
 800522c:	781b      	ldrb	r3, [r3, #0]
 800522e:	021b      	lsls	r3, r3, #8
 8005230:	4313      	orrs	r3, r2
 8005232:	687a      	ldr	r2, [r7, #4]
 8005234:	3204      	adds	r2, #4
 8005236:	7812      	ldrb	r2, [r2, #0]
 8005238:	4610      	mov	r0, r2
 800523a:	68fa      	ldr	r2, [r7, #12]
 800523c:	6811      	ldr	r1, [r2, #0]
 800523e:	ea43 0200 	orr.w	r2, r3, r0
 8005242:	697b      	ldr	r3, [r7, #20]
 8005244:	011b      	lsls	r3, r3, #4
 8005246:	440b      	add	r3, r1
 8005248:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 800524c:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	3303      	adds	r3, #3
 8005252:	781b      	ldrb	r3, [r3, #0]
 8005254:	061a      	lsls	r2, r3, #24
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	3302      	adds	r3, #2
 800525a:	781b      	ldrb	r3, [r3, #0]
 800525c:	041b      	lsls	r3, r3, #16
 800525e:	431a      	orrs	r2, r3
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	3301      	adds	r3, #1
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	4313      	orrs	r3, r2
 800526a:	687a      	ldr	r2, [r7, #4]
 800526c:	7812      	ldrb	r2, [r2, #0]
 800526e:	4610      	mov	r0, r2
 8005270:	68fa      	ldr	r2, [r7, #12]
 8005272:	6811      	ldr	r1, [r2, #0]
 8005274:	ea43 0200 	orr.w	r2, r3, r0
 8005278:	697b      	ldr	r3, [r7, #20]
 800527a:	011b      	lsls	r3, r3, #4
 800527c:	440b      	add	r3, r1
 800527e:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8005282:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	3318      	adds	r3, #24
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	4413      	add	r3, r2
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	68fa      	ldr	r2, [r7, #12]
 8005294:	6811      	ldr	r1, [r2, #0]
 8005296:	f043 0201 	orr.w	r2, r3, #1
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	3318      	adds	r3, #24
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	440b      	add	r3, r1
 80052a2:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80052a4:	2300      	movs	r3, #0
 80052a6:	e00e      	b.n	80052c6 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052ac:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 80052b4:	2301      	movs	r3, #1
 80052b6:	e006      	b.n	80052c6 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052bc:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80052c4:	2301      	movs	r3, #1
  }
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3724      	adds	r7, #36	; 0x24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d0:	4770      	bx	lr

080052d2 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 80052d2:	b480      	push	{r7}
 80052d4:	b085      	sub	sp, #20
 80052d6:	af00      	add	r7, sp, #0
 80052d8:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 80052da:	2300      	movs	r3, #0
 80052dc:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80052e4:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 80052e6:	7afb      	ldrb	r3, [r7, #11]
 80052e8:	2b01      	cmp	r3, #1
 80052ea:	d002      	beq.n	80052f2 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 80052ec:	7afb      	ldrb	r3, [r7, #11]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d11d      	bne.n	800532e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	689b      	ldr	r3, [r3, #8]
 80052f8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d002      	beq.n	8005306 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8005300:	68fb      	ldr	r3, [r7, #12]
 8005302:	3301      	adds	r3, #1
 8005304:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	689b      	ldr	r3, [r3, #8]
 800530c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005310:	2b00      	cmp	r3, #0
 8005312:	d002      	beq.n	800531a <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8005314:	68fb      	ldr	r3, [r7, #12]
 8005316:	3301      	adds	r3, #1
 8005318:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	689b      	ldr	r3, [r3, #8]
 8005320:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005324:	2b00      	cmp	r3, #0
 8005326:	d002      	beq.n	800532e <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3301      	adds	r3, #1
 800532c:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 800532e:	68fb      	ldr	r3, [r7, #12]
}
 8005330:	4618      	mov	r0, r3
 8005332:	3714      	adds	r7, #20
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	60f8      	str	r0, [r7, #12]
 8005344:	60b9      	str	r1, [r7, #8]
 8005346:	607a      	str	r2, [r7, #4]
 8005348:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005350:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005352:	7dfb      	ldrb	r3, [r7, #23]
 8005354:	2b01      	cmp	r3, #1
 8005356:	d003      	beq.n	8005360 <HAL_CAN_GetRxMessage+0x24>
 8005358:	7dfb      	ldrb	r3, [r7, #23]
 800535a:	2b02      	cmp	r3, #2
 800535c:	f040 80f3 	bne.w	8005546 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	2b00      	cmp	r3, #0
 8005364:	d10e      	bne.n	8005384 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	f003 0303 	and.w	r3, r3, #3
 8005370:	2b00      	cmp	r3, #0
 8005372:	d116      	bne.n	80053a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005378:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8005380:	2301      	movs	r3, #1
 8005382:	e0e7      	b.n	8005554 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	691b      	ldr	r3, [r3, #16]
 800538a:	f003 0303 	and.w	r3, r3, #3
 800538e:	2b00      	cmp	r3, #0
 8005390:	d107      	bne.n	80053a2 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005396:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e0d8      	b.n	8005554 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681a      	ldr	r2, [r3, #0]
 80053a6:	68bb      	ldr	r3, [r7, #8]
 80053a8:	331b      	adds	r3, #27
 80053aa:	011b      	lsls	r3, r3, #4
 80053ac:	4413      	add	r3, r2
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0204 	and.w	r2, r3, #4
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	689b      	ldr	r3, [r3, #8]
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d10c      	bne.n	80053da <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	68bb      	ldr	r3, [r7, #8]
 80053c6:	331b      	adds	r3, #27
 80053c8:	011b      	lsls	r3, r3, #4
 80053ca:	4413      	add	r3, r2
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	0d5b      	lsrs	r3, r3, #21
 80053d0:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	601a      	str	r2, [r3, #0]
 80053d8:	e00b      	b.n	80053f2 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	68bb      	ldr	r3, [r7, #8]
 80053e0:	331b      	adds	r3, #27
 80053e2:	011b      	lsls	r3, r3, #4
 80053e4:	4413      	add	r3, r2
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	08db      	lsrs	r3, r3, #3
 80053ea:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681a      	ldr	r2, [r3, #0]
 80053f6:	68bb      	ldr	r3, [r7, #8]
 80053f8:	331b      	adds	r3, #27
 80053fa:	011b      	lsls	r3, r3, #4
 80053fc:	4413      	add	r3, r2
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	f003 0202 	and.w	r2, r3, #2
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681a      	ldr	r2, [r3, #0]
 800540c:	68bb      	ldr	r3, [r7, #8]
 800540e:	331b      	adds	r3, #27
 8005410:	011b      	lsls	r3, r3, #4
 8005412:	4413      	add	r3, r2
 8005414:	3304      	adds	r3, #4
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f003 020f 	and.w	r2, r3, #15
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	331b      	adds	r3, #27
 8005428:	011b      	lsls	r3, r3, #4
 800542a:	4413      	add	r3, r2
 800542c:	3304      	adds	r3, #4
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	0a1b      	lsrs	r3, r3, #8
 8005432:	b2da      	uxtb	r2, r3
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681a      	ldr	r2, [r3, #0]
 800543c:	68bb      	ldr	r3, [r7, #8]
 800543e:	331b      	adds	r3, #27
 8005440:	011b      	lsls	r3, r3, #4
 8005442:	4413      	add	r3, r2
 8005444:	3304      	adds	r3, #4
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	0c1b      	lsrs	r3, r3, #16
 800544a:	b29a      	uxth	r2, r3
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	681a      	ldr	r2, [r3, #0]
 8005454:	68bb      	ldr	r3, [r7, #8]
 8005456:	011b      	lsls	r3, r3, #4
 8005458:	4413      	add	r3, r2
 800545a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	b2da      	uxtb	r2, r3
 8005462:	683b      	ldr	r3, [r7, #0]
 8005464:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	011b      	lsls	r3, r3, #4
 800546e:	4413      	add	r3, r2
 8005470:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	0a1a      	lsrs	r2, r3, #8
 8005478:	683b      	ldr	r3, [r7, #0]
 800547a:	3301      	adds	r3, #1
 800547c:	b2d2      	uxtb	r2, r2
 800547e:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	011b      	lsls	r3, r3, #4
 8005488:	4413      	add	r3, r2
 800548a:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	0c1a      	lsrs	r2, r3, #16
 8005492:	683b      	ldr	r3, [r7, #0]
 8005494:	3302      	adds	r3, #2
 8005496:	b2d2      	uxtb	r2, r2
 8005498:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681a      	ldr	r2, [r3, #0]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	011b      	lsls	r3, r3, #4
 80054a2:	4413      	add	r3, r2
 80054a4:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	0e1a      	lsrs	r2, r3, #24
 80054ac:	683b      	ldr	r3, [r7, #0]
 80054ae:	3303      	adds	r3, #3
 80054b0:	b2d2      	uxtb	r2, r2
 80054b2:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	68bb      	ldr	r3, [r7, #8]
 80054ba:	011b      	lsls	r3, r3, #4
 80054bc:	4413      	add	r3, r2
 80054be:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054c2:	681a      	ldr	r2, [r3, #0]
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	3304      	adds	r3, #4
 80054c8:	b2d2      	uxtb	r2, r2
 80054ca:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	68bb      	ldr	r3, [r7, #8]
 80054d2:	011b      	lsls	r3, r3, #4
 80054d4:	4413      	add	r3, r2
 80054d6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	0a1a      	lsrs	r2, r3, #8
 80054de:	683b      	ldr	r3, [r7, #0]
 80054e0:	3305      	adds	r3, #5
 80054e2:	b2d2      	uxtb	r2, r2
 80054e4:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681a      	ldr	r2, [r3, #0]
 80054ea:	68bb      	ldr	r3, [r7, #8]
 80054ec:	011b      	lsls	r3, r3, #4
 80054ee:	4413      	add	r3, r2
 80054f0:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	0c1a      	lsrs	r2, r3, #16
 80054f8:	683b      	ldr	r3, [r7, #0]
 80054fa:	3306      	adds	r3, #6
 80054fc:	b2d2      	uxtb	r2, r2
 80054fe:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	68bb      	ldr	r3, [r7, #8]
 8005506:	011b      	lsls	r3, r3, #4
 8005508:	4413      	add	r3, r2
 800550a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	0e1a      	lsrs	r2, r3, #24
 8005512:	683b      	ldr	r3, [r7, #0]
 8005514:	3307      	adds	r3, #7
 8005516:	b2d2      	uxtb	r2, r2
 8005518:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	2b00      	cmp	r3, #0
 800551e:	d108      	bne.n	8005532 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	68da      	ldr	r2, [r3, #12]
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f042 0220 	orr.w	r2, r2, #32
 800552e:	60da      	str	r2, [r3, #12]
 8005530:	e007      	b.n	8005542 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	691a      	ldr	r2, [r3, #16]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f042 0220 	orr.w	r2, r2, #32
 8005540:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8005542:	2300      	movs	r3, #0
 8005544:	e006      	b.n	8005554 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800554a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8005552:	2301      	movs	r3, #1
  }
}
 8005554:	4618      	mov	r0, r3
 8005556:	371c      	adds	r7, #28
 8005558:	46bd      	mov	sp, r7
 800555a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800555e:	4770      	bx	lr

08005560 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8005560:	b480      	push	{r7}
 8005562:	b085      	sub	sp, #20
 8005564:	af00      	add	r7, sp, #0
 8005566:	6078      	str	r0, [r7, #4]
 8005568:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 800556a:	2300      	movs	r3, #0
 800556c:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	f893 3020 	ldrb.w	r3, [r3, #32]
 8005574:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8005576:	7afb      	ldrb	r3, [r7, #11]
 8005578:	2b01      	cmp	r3, #1
 800557a:	d002      	beq.n	8005582 <HAL_CAN_GetRxFifoFillLevel+0x22>
 800557c:	7afb      	ldrb	r3, [r7, #11]
 800557e:	2b02      	cmp	r3, #2
 8005580:	d10f      	bne.n	80055a2 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d106      	bne.n	8005596 <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	68db      	ldr	r3, [r3, #12]
 800558e:	f003 0303 	and.w	r3, r3, #3
 8005592:	60fb      	str	r3, [r7, #12]
 8005594:	e005      	b.n	80055a2 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	691b      	ldr	r3, [r3, #16]
 800559c:	f003 0303 	and.w	r3, r3, #3
 80055a0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 80055a2:	68fb      	ldr	r3, [r7, #12]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3714      	adds	r7, #20
 80055a8:	46bd      	mov	sp, r7
 80055aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ae:	4770      	bx	lr

080055b0 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 80055b0:	b480      	push	{r7}
 80055b2:	b085      	sub	sp, #20
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80055c0:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 80055c2:	7bfb      	ldrb	r3, [r7, #15]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d002      	beq.n	80055ce <HAL_CAN_ActivateNotification+0x1e>
 80055c8:	7bfb      	ldrb	r3, [r7, #15]
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d109      	bne.n	80055e2 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	6959      	ldr	r1, [r3, #20]
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	683a      	ldr	r2, [r7, #0]
 80055da:	430a      	orrs	r2, r1
 80055dc:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	e006      	b.n	80055f0 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055e6:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80055ee:	2301      	movs	r3, #1
  }
}
 80055f0:	4618      	mov	r0, r3
 80055f2:	3714      	adds	r7, #20
 80055f4:	46bd      	mov	sp, r7
 80055f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055fa:	4770      	bx	lr

080055fc <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80055fc:	b580      	push	{r7, lr}
 80055fe:	b08a      	sub	sp, #40	; 0x28
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8005604:	2300      	movs	r3, #0
 8005606:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	695b      	ldr	r3, [r3, #20]
 800560e:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	689b      	ldr	r3, [r3, #8]
 800561e:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	68db      	ldr	r3, [r3, #12]
 8005626:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8005638:	6a3b      	ldr	r3, [r7, #32]
 800563a:	f003 0301 	and.w	r3, r3, #1
 800563e:	2b00      	cmp	r3, #0
 8005640:	d07c      	beq.n	800573c <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8005642:	69bb      	ldr	r3, [r7, #24]
 8005644:	f003 0301 	and.w	r3, r3, #1
 8005648:	2b00      	cmp	r3, #0
 800564a:	d023      	beq.n	8005694 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	2201      	movs	r2, #1
 8005652:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8005654:	69bb      	ldr	r3, [r7, #24]
 8005656:	f003 0302 	and.w	r3, r3, #2
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7fd fef2 	bl	8003448 <HAL_CAN_TxMailbox0CompleteCallback>
 8005664:	e016      	b.n	8005694 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8005666:	69bb      	ldr	r3, [r7, #24]
 8005668:	f003 0304 	and.w	r3, r3, #4
 800566c:	2b00      	cmp	r3, #0
 800566e:	d004      	beq.n	800567a <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8005670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005672:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005676:	627b      	str	r3, [r7, #36]	; 0x24
 8005678:	e00c      	b.n	8005694 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800567a:	69bb      	ldr	r3, [r7, #24]
 800567c:	f003 0308 	and.w	r3, r3, #8
 8005680:	2b00      	cmp	r3, #0
 8005682:	d004      	beq.n	800568e <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8005684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005686:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
 800568c:	e002      	b.n	8005694 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f96b 	bl	800596a <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8005694:	69bb      	ldr	r3, [r7, #24]
 8005696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800569a:	2b00      	cmp	r3, #0
 800569c:	d024      	beq.n	80056e8 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80056a6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 80056a8:	69bb      	ldr	r3, [r7, #24]
 80056aa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 80056b2:	6878      	ldr	r0, [r7, #4]
 80056b4:	f7fd fed8 	bl	8003468 <HAL_CAN_TxMailbox1CompleteCallback>
 80056b8:	e016      	b.n	80056e8 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 80056ba:	69bb      	ldr	r3, [r7, #24]
 80056bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c0:	2b00      	cmp	r3, #0
 80056c2:	d004      	beq.n	80056ce <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 80056c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056c6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80056ca:	627b      	str	r3, [r7, #36]	; 0x24
 80056cc:	e00c      	b.n	80056e8 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80056ce:	69bb      	ldr	r3, [r7, #24]
 80056d0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d004      	beq.n	80056e2 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80056d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80056de:	627b      	str	r3, [r7, #36]	; 0x24
 80056e0:	e002      	b.n	80056e8 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80056e2:	6878      	ldr	r0, [r7, #4]
 80056e4:	f000 f94b 	bl	800597e <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d024      	beq.n	800573c <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80056fa:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80056fc:	69bb      	ldr	r3, [r7, #24]
 80056fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005702:	2b00      	cmp	r3, #0
 8005704:	d003      	beq.n	800570e <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8005706:	6878      	ldr	r0, [r7, #4]
 8005708:	f7fd febe 	bl	8003488 <HAL_CAN_TxMailbox2CompleteCallback>
 800570c:	e016      	b.n	800573c <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 800570e:	69bb      	ldr	r3, [r7, #24]
 8005710:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005714:	2b00      	cmp	r3, #0
 8005716:	d004      	beq.n	8005722 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8005718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800571a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800571e:	627b      	str	r3, [r7, #36]	; 0x24
 8005720:	e00c      	b.n	800573c <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8005722:	69bb      	ldr	r3, [r7, #24]
 8005724:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005728:	2b00      	cmp	r3, #0
 800572a:	d004      	beq.n	8005736 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 800572c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800572e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005732:	627b      	str	r3, [r7, #36]	; 0x24
 8005734:	e002      	b.n	800573c <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8005736:	6878      	ldr	r0, [r7, #4]
 8005738:	f000 f92b 	bl	8005992 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 800573c:	6a3b      	ldr	r3, [r7, #32]
 800573e:	f003 0308 	and.w	r3, r3, #8
 8005742:	2b00      	cmp	r3, #0
 8005744:	d00c      	beq.n	8005760 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8005746:	697b      	ldr	r3, [r7, #20]
 8005748:	f003 0310 	and.w	r3, r3, #16
 800574c:	2b00      	cmp	r3, #0
 800574e:	d007      	beq.n	8005760 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8005750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005752:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005756:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2210      	movs	r2, #16
 800575e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8005760:	6a3b      	ldr	r3, [r7, #32]
 8005762:	f003 0304 	and.w	r3, r3, #4
 8005766:	2b00      	cmp	r3, #0
 8005768:	d00b      	beq.n	8005782 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	f003 0308 	and.w	r3, r3, #8
 8005770:	2b00      	cmp	r3, #0
 8005772:	d006      	beq.n	8005782 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	2208      	movs	r2, #8
 800577a:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 f912 	bl	80059a6 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8005782:	6a3b      	ldr	r3, [r7, #32]
 8005784:	f003 0302 	and.w	r3, r3, #2
 8005788:	2b00      	cmp	r3, #0
 800578a:	d009      	beq.n	80057a0 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	68db      	ldr	r3, [r3, #12]
 8005792:	f003 0303 	and.w	r3, r3, #3
 8005796:	2b00      	cmp	r3, #0
 8005798:	d002      	beq.n	80057a0 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f7fd fe38 	bl	8003410 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 80057a0:	6a3b      	ldr	r3, [r7, #32]
 80057a2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00c      	beq.n	80057c4 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 80057aa:	693b      	ldr	r3, [r7, #16]
 80057ac:	f003 0310 	and.w	r3, r3, #16
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d007      	beq.n	80057c4 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 80057b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057b6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80057ba:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	2210      	movs	r2, #16
 80057c2:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 80057c4:	6a3b      	ldr	r3, [r7, #32]
 80057c6:	f003 0320 	and.w	r3, r3, #32
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d00b      	beq.n	80057e6 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80057ce:	693b      	ldr	r3, [r7, #16]
 80057d0:	f003 0308 	and.w	r3, r3, #8
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d006      	beq.n	80057e6 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2208      	movs	r2, #8
 80057de:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80057e0:	6878      	ldr	r0, [r7, #4]
 80057e2:	f000 f8f4 	bl	80059ce <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80057e6:	6a3b      	ldr	r3, [r7, #32]
 80057e8:	f003 0310 	and.w	r3, r3, #16
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d009      	beq.n	8005804 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0303 	and.w	r3, r3, #3
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d002      	beq.n	8005804 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80057fe:	6878      	ldr	r0, [r7, #4]
 8005800:	f000 f8db 	bl	80059ba <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8005804:	6a3b      	ldr	r3, [r7, #32]
 8005806:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00b      	beq.n	8005826 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	f003 0310 	and.w	r3, r3, #16
 8005814:	2b00      	cmp	r3, #0
 8005816:	d006      	beq.n	8005826 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	2210      	movs	r2, #16
 800581e:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 f8de 	bl	80059e2 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8005826:	6a3b      	ldr	r3, [r7, #32]
 8005828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800582c:	2b00      	cmp	r3, #0
 800582e:	d00b      	beq.n	8005848 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8005830:	69fb      	ldr	r3, [r7, #28]
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d006      	beq.n	8005848 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	2208      	movs	r2, #8
 8005840:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 f8d7 	bl	80059f6 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8005848:	6a3b      	ldr	r3, [r7, #32]
 800584a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800584e:	2b00      	cmp	r3, #0
 8005850:	d07b      	beq.n	800594a <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8005852:	69fb      	ldr	r3, [r7, #28]
 8005854:	f003 0304 	and.w	r3, r3, #4
 8005858:	2b00      	cmp	r3, #0
 800585a:	d072      	beq.n	8005942 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800585c:	6a3b      	ldr	r3, [r7, #32]
 800585e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005862:	2b00      	cmp	r3, #0
 8005864:	d008      	beq.n	8005878 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 800586c:	2b00      	cmp	r3, #0
 800586e:	d003      	beq.n	8005878 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	f043 0301 	orr.w	r3, r3, #1
 8005876:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005878:	6a3b      	ldr	r3, [r7, #32]
 800587a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800587e:	2b00      	cmp	r3, #0
 8005880:	d008      	beq.n	8005894 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8005888:	2b00      	cmp	r3, #0
 800588a:	d003      	beq.n	8005894 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 800588c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588e:	f043 0302 	orr.w	r3, r3, #2
 8005892:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800589a:	2b00      	cmp	r3, #0
 800589c:	d008      	beq.n	80058b0 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d003      	beq.n	80058b0 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 80058a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058aa:	f043 0304 	orr.w	r3, r3, #4
 80058ae:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80058b0:	6a3b      	ldr	r3, [r7, #32]
 80058b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d043      	beq.n	8005942 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d03e      	beq.n	8005942 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80058ca:	2b60      	cmp	r3, #96	; 0x60
 80058cc:	d02b      	beq.n	8005926 <HAL_CAN_IRQHandler+0x32a>
 80058ce:	2b60      	cmp	r3, #96	; 0x60
 80058d0:	d82e      	bhi.n	8005930 <HAL_CAN_IRQHandler+0x334>
 80058d2:	2b50      	cmp	r3, #80	; 0x50
 80058d4:	d022      	beq.n	800591c <HAL_CAN_IRQHandler+0x320>
 80058d6:	2b50      	cmp	r3, #80	; 0x50
 80058d8:	d82a      	bhi.n	8005930 <HAL_CAN_IRQHandler+0x334>
 80058da:	2b40      	cmp	r3, #64	; 0x40
 80058dc:	d019      	beq.n	8005912 <HAL_CAN_IRQHandler+0x316>
 80058de:	2b40      	cmp	r3, #64	; 0x40
 80058e0:	d826      	bhi.n	8005930 <HAL_CAN_IRQHandler+0x334>
 80058e2:	2b30      	cmp	r3, #48	; 0x30
 80058e4:	d010      	beq.n	8005908 <HAL_CAN_IRQHandler+0x30c>
 80058e6:	2b30      	cmp	r3, #48	; 0x30
 80058e8:	d822      	bhi.n	8005930 <HAL_CAN_IRQHandler+0x334>
 80058ea:	2b10      	cmp	r3, #16
 80058ec:	d002      	beq.n	80058f4 <HAL_CAN_IRQHandler+0x2f8>
 80058ee:	2b20      	cmp	r3, #32
 80058f0:	d005      	beq.n	80058fe <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80058f2:	e01d      	b.n	8005930 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	f043 0308 	orr.w	r3, r3, #8
 80058fa:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80058fc:	e019      	b.n	8005932 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	f043 0310 	orr.w	r3, r3, #16
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005906:	e014      	b.n	8005932 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8005908:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800590a:	f043 0320 	orr.w	r3, r3, #32
 800590e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005910:	e00f      	b.n	8005932 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8005912:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005914:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005918:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800591a:	e00a      	b.n	8005932 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 800591c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800591e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005922:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8005924:	e005      	b.n	8005932 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8005926:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005928:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800592c:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800592e:	e000      	b.n	8005932 <HAL_CAN_IRQHandler+0x336>
            break;
 8005930:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	699a      	ldr	r2, [r3, #24]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8005940:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2204      	movs	r2, #4
 8005948:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800594a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800594c:	2b00      	cmp	r3, #0
 800594e:	d008      	beq.n	8005962 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005956:	431a      	orrs	r2, r3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f854 	bl	8005a0a <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8005962:	bf00      	nop
 8005964:	3728      	adds	r7, #40	; 0x28
 8005966:	46bd      	mov	sp, r7
 8005968:	bd80      	pop	{r7, pc}

0800596a <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800596a:	b480      	push	{r7}
 800596c:	b083      	sub	sp, #12
 800596e:	af00      	add	r7, sp, #0
 8005970:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8005972:	bf00      	nop
 8005974:	370c      	adds	r7, #12
 8005976:	46bd      	mov	sp, r7
 8005978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597c:	4770      	bx	lr

0800597e <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 800597e:	b480      	push	{r7}
 8005980:	b083      	sub	sp, #12
 8005982:	af00      	add	r7, sp, #0
 8005984:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8005986:	bf00      	nop
 8005988:	370c      	adds	r7, #12
 800598a:	46bd      	mov	sp, r7
 800598c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005990:	4770      	bx	lr

08005992 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8005992:	b480      	push	{r7}
 8005994:	b083      	sub	sp, #12
 8005996:	af00      	add	r7, sp, #0
 8005998:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800599a:	bf00      	nop
 800599c:	370c      	adds	r7, #12
 800599e:	46bd      	mov	sp, r7
 80059a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059a4:	4770      	bx	lr

080059a6 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80059a6:	b480      	push	{r7}
 80059a8:	b083      	sub	sp, #12
 80059aa:	af00      	add	r7, sp, #0
 80059ac:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80059ae:	bf00      	nop
 80059b0:	370c      	adds	r7, #12
 80059b2:	46bd      	mov	sp, r7
 80059b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b8:	4770      	bx	lr

080059ba <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80059ba:	b480      	push	{r7}
 80059bc:	b083      	sub	sp, #12
 80059be:	af00      	add	r7, sp, #0
 80059c0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80059c2:	bf00      	nop
 80059c4:	370c      	adds	r7, #12
 80059c6:	46bd      	mov	sp, r7
 80059c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059cc:	4770      	bx	lr

080059ce <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80059ce:	b480      	push	{r7}
 80059d0:	b083      	sub	sp, #12
 80059d2:	af00      	add	r7, sp, #0
 80059d4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80059d6:	bf00      	nop
 80059d8:	370c      	adds	r7, #12
 80059da:	46bd      	mov	sp, r7
 80059dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e0:	4770      	bx	lr

080059e2 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80059e2:	b480      	push	{r7}
 80059e4:	b083      	sub	sp, #12
 80059e6:	af00      	add	r7, sp, #0
 80059e8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80059ea:	bf00      	nop
 80059ec:	370c      	adds	r7, #12
 80059ee:	46bd      	mov	sp, r7
 80059f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f4:	4770      	bx	lr

080059f6 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80059f6:	b480      	push	{r7}
 80059f8:	b083      	sub	sp, #12
 80059fa:	af00      	add	r7, sp, #0
 80059fc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80059fe:	bf00      	nop
 8005a00:	370c      	adds	r7, #12
 8005a02:	46bd      	mov	sp, r7
 8005a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a08:	4770      	bx	lr

08005a0a <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8005a0a:	b480      	push	{r7}
 8005a0c:	b083      	sub	sp, #12
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8005a12:	bf00      	nop
 8005a14:	370c      	adds	r7, #12
 8005a16:	46bd      	mov	sp, r7
 8005a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a1c:	4770      	bx	lr
	...

08005a20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	f003 0307 	and.w	r3, r3, #7
 8005a2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8005a30:	4b0c      	ldr	r3, [pc, #48]	; (8005a64 <__NVIC_SetPriorityGrouping+0x44>)
 8005a32:	68db      	ldr	r3, [r3, #12]
 8005a34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005a36:	68ba      	ldr	r2, [r7, #8]
 8005a38:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8005a3c:	4013      	ands	r3, r2
 8005a3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005a48:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005a4c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005a50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8005a52:	4a04      	ldr	r2, [pc, #16]	; (8005a64 <__NVIC_SetPriorityGrouping+0x44>)
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	60d3      	str	r3, [r2, #12]
}
 8005a58:	bf00      	nop
 8005a5a:	3714      	adds	r7, #20
 8005a5c:	46bd      	mov	sp, r7
 8005a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a62:	4770      	bx	lr
 8005a64:	e000ed00 	.word	0xe000ed00

08005a68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005a6c:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <__NVIC_GetPriorityGrouping+0x18>)
 8005a6e:	68db      	ldr	r3, [r3, #12]
 8005a70:	0a1b      	lsrs	r3, r3, #8
 8005a72:	f003 0307 	and.w	r3, r3, #7
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr
 8005a80:	e000ed00 	.word	0xe000ed00

08005a84 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b083      	sub	sp, #12
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	4603      	mov	r3, r0
 8005a8c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005a8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005a92:	2b00      	cmp	r3, #0
 8005a94:	db0b      	blt.n	8005aae <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8005a96:	79fb      	ldrb	r3, [r7, #7]
 8005a98:	f003 021f 	and.w	r2, r3, #31
 8005a9c:	4907      	ldr	r1, [pc, #28]	; (8005abc <__NVIC_EnableIRQ+0x38>)
 8005a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005aa2:	095b      	lsrs	r3, r3, #5
 8005aa4:	2001      	movs	r0, #1
 8005aa6:	fa00 f202 	lsl.w	r2, r0, r2
 8005aaa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8005aae:	bf00      	nop
 8005ab0:	370c      	adds	r7, #12
 8005ab2:	46bd      	mov	sp, r7
 8005ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	e000e100 	.word	0xe000e100

08005ac0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	4603      	mov	r3, r0
 8005ac8:	6039      	str	r1, [r7, #0]
 8005aca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005acc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	db0a      	blt.n	8005aea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	490c      	ldr	r1, [pc, #48]	; (8005b0c <__NVIC_SetPriority+0x4c>)
 8005ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005ade:	0112      	lsls	r2, r2, #4
 8005ae0:	b2d2      	uxtb	r2, r2
 8005ae2:	440b      	add	r3, r1
 8005ae4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8005ae8:	e00a      	b.n	8005b00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	b2da      	uxtb	r2, r3
 8005aee:	4908      	ldr	r1, [pc, #32]	; (8005b10 <__NVIC_SetPriority+0x50>)
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	f003 030f 	and.w	r3, r3, #15
 8005af6:	3b04      	subs	r3, #4
 8005af8:	0112      	lsls	r2, r2, #4
 8005afa:	b2d2      	uxtb	r2, r2
 8005afc:	440b      	add	r3, r1
 8005afe:	761a      	strb	r2, [r3, #24]
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr
 8005b0c:	e000e100 	.word	0xe000e100
 8005b10:	e000ed00 	.word	0xe000ed00

08005b14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b089      	sub	sp, #36	; 0x24
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	60f8      	str	r0, [r7, #12]
 8005b1c:	60b9      	str	r1, [r7, #8]
 8005b1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	f003 0307 	and.w	r3, r3, #7
 8005b26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005b28:	69fb      	ldr	r3, [r7, #28]
 8005b2a:	f1c3 0307 	rsb	r3, r3, #7
 8005b2e:	2b04      	cmp	r3, #4
 8005b30:	bf28      	it	cs
 8005b32:	2304      	movcs	r3, #4
 8005b34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005b36:	69fb      	ldr	r3, [r7, #28]
 8005b38:	3304      	adds	r3, #4
 8005b3a:	2b06      	cmp	r3, #6
 8005b3c:	d902      	bls.n	8005b44 <NVIC_EncodePriority+0x30>
 8005b3e:	69fb      	ldr	r3, [r7, #28]
 8005b40:	3b03      	subs	r3, #3
 8005b42:	e000      	b.n	8005b46 <NVIC_EncodePriority+0x32>
 8005b44:	2300      	movs	r3, #0
 8005b46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b48:	f04f 32ff 	mov.w	r2, #4294967295
 8005b4c:	69bb      	ldr	r3, [r7, #24]
 8005b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8005b52:	43da      	mvns	r2, r3
 8005b54:	68bb      	ldr	r3, [r7, #8]
 8005b56:	401a      	ands	r2, r3
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005b5c:	f04f 31ff 	mov.w	r1, #4294967295
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	fa01 f303 	lsl.w	r3, r1, r3
 8005b66:	43d9      	mvns	r1, r3
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005b6c:	4313      	orrs	r3, r2
         );
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3724      	adds	r7, #36	; 0x24
 8005b72:	46bd      	mov	sp, r7
 8005b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b78:	4770      	bx	lr

08005b7a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005b7a:	b580      	push	{r7, lr}
 8005b7c:	b082      	sub	sp, #8
 8005b7e:	af00      	add	r7, sp, #0
 8005b80:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005b82:	6878      	ldr	r0, [r7, #4]
 8005b84:	f7ff ff4c 	bl	8005a20 <__NVIC_SetPriorityGrouping>
}
 8005b88:	bf00      	nop
 8005b8a:	3708      	adds	r7, #8
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	bd80      	pop	{r7, pc}

08005b90 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b086      	sub	sp, #24
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	4603      	mov	r3, r0
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8005ba2:	f7ff ff61 	bl	8005a68 <__NVIC_GetPriorityGrouping>
 8005ba6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8005ba8:	687a      	ldr	r2, [r7, #4]
 8005baa:	68b9      	ldr	r1, [r7, #8]
 8005bac:	6978      	ldr	r0, [r7, #20]
 8005bae:	f7ff ffb1 	bl	8005b14 <NVIC_EncodePriority>
 8005bb2:	4602      	mov	r2, r0
 8005bb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005bb8:	4611      	mov	r1, r2
 8005bba:	4618      	mov	r0, r3
 8005bbc:	f7ff ff80 	bl	8005ac0 <__NVIC_SetPriority>
}
 8005bc0:	bf00      	nop
 8005bc2:	3718      	adds	r7, #24
 8005bc4:	46bd      	mov	sp, r7
 8005bc6:	bd80      	pop	{r7, pc}

08005bc8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	4603      	mov	r3, r0
 8005bd0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8005bd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005bd6:	4618      	mov	r0, r3
 8005bd8:	f7ff ff54 	bl	8005a84 <__NVIC_EnableIRQ>
}
 8005bdc:	bf00      	nop
 8005bde:	3708      	adds	r7, #8
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8005be4:	b580      	push	{r7, lr}
 8005be6:	b082      	sub	sp, #8
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	2b00      	cmp	r3, #0
 8005bf0:	d101      	bne.n	8005bf6 <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	e014      	b.n	8005c20 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	791b      	ldrb	r3, [r3, #4]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d105      	bne.n	8005c0c <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8005c06:	6878      	ldr	r0, [r7, #4]
 8005c08:	f7fd ff0a 	bl	8003a20 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	2202      	movs	r2, #2
 8005c10:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	2200      	movs	r2, #0
 8005c16:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	2201      	movs	r2, #1
 8005c1c:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}

08005c28 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8005c28:	b480      	push	{r7}
 8005c2a:	b083      	sub	sp, #12
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	6078      	str	r0, [r7, #4]
 8005c30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	795b      	ldrb	r3, [r3, #5]
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d101      	bne.n	8005c3e <HAL_DAC_Start+0x16>
 8005c3a:	2302      	movs	r3, #2
 8005c3c:	e03b      	b.n	8005cb6 <HAL_DAC_Start+0x8e>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	2201      	movs	r2, #1
 8005c42:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	2202      	movs	r2, #2
 8005c48:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	6819      	ldr	r1, [r3, #0]
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	f003 0310 	and.w	r3, r3, #16
 8005c56:	2201      	movs	r2, #1
 8005c58:	409a      	lsls	r2, r3
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	430a      	orrs	r2, r1
 8005c60:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8005c62:	683b      	ldr	r3, [r7, #0]
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d10f      	bne.n	8005c88 <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8005c72:	2b04      	cmp	r3, #4
 8005c74:	d118      	bne.n	8005ca8 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	685a      	ldr	r2, [r3, #4]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f042 0201 	orr.w	r2, r2, #1
 8005c84:	605a      	str	r2, [r3, #4]
 8005c86:	e00f      	b.n	8005ca8 <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8005c92:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005c96:	d107      	bne.n	8005ca8 <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	685a      	ldr	r2, [r3, #4]
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	f042 0202 	orr.w	r2, r2, #2
 8005ca6:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005cb4:	2300      	movs	r3, #0
}
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b082      	sub	sp, #8
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005cd8:	d120      	bne.n	8005d1c <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ce4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005ce8:	d118      	bne.n	8005d1c <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2204      	movs	r2, #4
 8005cee:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	691b      	ldr	r3, [r3, #16]
 8005cf4:	f043 0201 	orr.w	r2, r3, #1
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005d04:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005d14:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 8005d16:	6878      	ldr	r0, [r7, #4]
 8005d18:	f000 f852 	bl	8005dc0 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d26:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d2a:	d120      	bne.n	8005d6e <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005d32:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d36:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d3a:	d118      	bne.n	8005d6e <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	2204      	movs	r2, #4
 8005d40:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	691b      	ldr	r3, [r3, #16]
 8005d46:	f043 0202 	orr.w	r2, r3, #2
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 8005d56:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	681a      	ldr	r2, [r3, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 8005d66:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f000 f94d 	bl	8006008 <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8005d6e:	bf00      	nop
 8005d70:	3708      	adds	r7, #8
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8005d76:	b480      	push	{r7}
 8005d78:	b087      	sub	sp, #28
 8005d7a:	af00      	add	r7, sp, #0
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	607a      	str	r2, [r7, #4]
 8005d82:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8005d84:	2300      	movs	r3, #0
 8005d86:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	681b      	ldr	r3, [r3, #0]
 8005d8c:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005d8e:	68bb      	ldr	r3, [r7, #8]
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	d105      	bne.n	8005da0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	4413      	add	r3, r2
 8005d9a:	3308      	adds	r3, #8
 8005d9c:	617b      	str	r3, [r7, #20]
 8005d9e:	e004      	b.n	8005daa <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005da0:	697a      	ldr	r2, [r7, #20]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	4413      	add	r3, r2
 8005da6:	3314      	adds	r3, #20
 8005da8:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	461a      	mov	r2, r3
 8005dae:	683b      	ldr	r3, [r7, #0]
 8005db0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8005db2:	2300      	movs	r3, #0
}
 8005db4:	4618      	mov	r0, r3
 8005db6:	371c      	adds	r7, #28
 8005db8:	46bd      	mov	sp, r7
 8005dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dbe:	4770      	bx	lr

08005dc0 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8005dc0:	b480      	push	{r7}
 8005dc2:	b083      	sub	sp, #12
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8005dc8:	bf00      	nop
 8005dca:	370c      	adds	r7, #12
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd2:	4770      	bx	lr

08005dd4 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b088      	sub	sp, #32
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 8005de0:	2300      	movs	r3, #0
 8005de2:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	795b      	ldrb	r3, [r3, #5]
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d101      	bne.n	8005df0 <HAL_DAC_ConfigChannel+0x1c>
 8005dec:	2302      	movs	r3, #2
 8005dee:	e107      	b.n	8006000 <HAL_DAC_ConfigChannel+0x22c>
 8005df0:	68fb      	ldr	r3, [r7, #12]
 8005df2:	2201      	movs	r2, #1
 8005df4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	2202      	movs	r2, #2
 8005dfa:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b04      	cmp	r3, #4
 8005e02:	d174      	bne.n	8005eee <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8005e04:	f7fe f89c 	bl	8003f40 <HAL_GetTick>
 8005e08:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d134      	bne.n	8005e7a <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005e10:	e011      	b.n	8005e36 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005e12:	f7fe f895 	bl	8003f40 <HAL_GetTick>
 8005e16:	4602      	mov	r2, r0
 8005e18:	69fb      	ldr	r3, [r7, #28]
 8005e1a:	1ad3      	subs	r3, r2, r3
 8005e1c:	2b01      	cmp	r3, #1
 8005e1e:	d90a      	bls.n	8005e36 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005e20:	68fb      	ldr	r3, [r7, #12]
 8005e22:	691b      	ldr	r3, [r3, #16]
 8005e24:	f043 0208 	orr.w	r2, r3, #8
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2203      	movs	r2, #3
 8005e30:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005e32:	2303      	movs	r3, #3
 8005e34:	e0e4      	b.n	8006000 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005e36:	68fb      	ldr	r3, [r7, #12]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1e6      	bne.n	8005e12 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8005e44:	2001      	movs	r0, #1
 8005e46:	f7fe f887 	bl	8003f58 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68ba      	ldr	r2, [r7, #8]
 8005e50:	6992      	ldr	r2, [r2, #24]
 8005e52:	641a      	str	r2, [r3, #64]	; 0x40
 8005e54:	e01e      	b.n	8005e94 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005e56:	f7fe f873 	bl	8003f40 <HAL_GetTick>
 8005e5a:	4602      	mov	r2, r0
 8005e5c:	69fb      	ldr	r3, [r7, #28]
 8005e5e:	1ad3      	subs	r3, r2, r3
 8005e60:	2b01      	cmp	r3, #1
 8005e62:	d90a      	bls.n	8005e7a <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	691b      	ldr	r3, [r3, #16]
 8005e68:	f043 0208 	orr.w	r2, r3, #8
 8005e6c:	68fb      	ldr	r3, [r7, #12]
 8005e6e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005e70:	68fb      	ldr	r3, [r7, #12]
 8005e72:	2203      	movs	r2, #3
 8005e74:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005e76:	2303      	movs	r3, #3
 8005e78:	e0c2      	b.n	8006000 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8005e7a:	68fb      	ldr	r3, [r7, #12]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	dbe8      	blt.n	8005e56 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8005e84:	2001      	movs	r0, #1
 8005e86:	f7fe f867 	bl	8003f58 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	68ba      	ldr	r2, [r7, #8]
 8005e90:	6992      	ldr	r2, [r2, #24]
 8005e92:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	f003 0310 	and.w	r3, r3, #16
 8005ea0:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005ea4:	fa01 f303 	lsl.w	r3, r1, r3
 8005ea8:	43db      	mvns	r3, r3
 8005eaa:	ea02 0103 	and.w	r1, r2, r3
 8005eae:	68bb      	ldr	r3, [r7, #8]
 8005eb0:	69da      	ldr	r2, [r3, #28]
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	f003 0310 	and.w	r3, r3, #16
 8005eb8:	409a      	lsls	r2, r3
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	430a      	orrs	r2, r1
 8005ec0:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	f003 0310 	and.w	r3, r3, #16
 8005ece:	21ff      	movs	r1, #255	; 0xff
 8005ed0:	fa01 f303 	lsl.w	r3, r1, r3
 8005ed4:	43db      	mvns	r3, r3
 8005ed6:	ea02 0103 	and.w	r1, r2, r3
 8005eda:	68bb      	ldr	r3, [r7, #8]
 8005edc:	6a1a      	ldr	r2, [r3, #32]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f003 0310 	and.w	r3, r3, #16
 8005ee4:	409a      	lsls	r2, r3
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	430a      	orrs	r2, r1
 8005eec:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8005eee:	68bb      	ldr	r3, [r7, #8]
 8005ef0:	691b      	ldr	r3, [r3, #16]
 8005ef2:	2b01      	cmp	r3, #1
 8005ef4:	d11d      	bne.n	8005f32 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005efc:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f003 0310 	and.w	r3, r3, #16
 8005f04:	221f      	movs	r2, #31
 8005f06:	fa02 f303 	lsl.w	r3, r2, r3
 8005f0a:	43db      	mvns	r3, r3
 8005f0c:	69ba      	ldr	r2, [r7, #24]
 8005f0e:	4013      	ands	r3, r2
 8005f10:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	695b      	ldr	r3, [r3, #20]
 8005f16:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	f003 0310 	and.w	r3, r3, #16
 8005f1e:	697a      	ldr	r2, [r7, #20]
 8005f20:	fa02 f303 	lsl.w	r3, r2, r3
 8005f24:	69ba      	ldr	r2, [r7, #24]
 8005f26:	4313      	orrs	r3, r2
 8005f28:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	69ba      	ldr	r2, [r7, #24]
 8005f30:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f38:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	f003 0310 	and.w	r3, r3, #16
 8005f40:	2207      	movs	r2, #7
 8005f42:	fa02 f303 	lsl.w	r3, r2, r3
 8005f46:	43db      	mvns	r3, r3
 8005f48:	69ba      	ldr	r2, [r7, #24]
 8005f4a:	4013      	ands	r3, r2
 8005f4c:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8005f4e:	68bb      	ldr	r3, [r7, #8]
 8005f50:	681a      	ldr	r2, [r3, #0]
 8005f52:	68bb      	ldr	r3, [r7, #8]
 8005f54:	689b      	ldr	r3, [r3, #8]
 8005f56:	431a      	orrs	r2, r3
 8005f58:	68bb      	ldr	r3, [r7, #8]
 8005f5a:	68db      	ldr	r3, [r3, #12]
 8005f5c:	4313      	orrs	r3, r2
 8005f5e:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f003 0310 	and.w	r3, r3, #16
 8005f66:	697a      	ldr	r2, [r7, #20]
 8005f68:	fa02 f303 	lsl.w	r3, r2, r3
 8005f6c:	69ba      	ldr	r2, [r7, #24]
 8005f6e:	4313      	orrs	r3, r2
 8005f70:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	69ba      	ldr	r2, [r7, #24]
 8005f78:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8005f7a:	68fb      	ldr	r3, [r7, #12]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	6819      	ldr	r1, [r3, #0]
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f003 0310 	and.w	r3, r3, #16
 8005f86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8005f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8005f8e:	43da      	mvns	r2, r3
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	400a      	ands	r2, r1
 8005f96:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	f003 0310 	and.w	r3, r3, #16
 8005fa6:	f640 72fc 	movw	r2, #4092	; 0xffc
 8005faa:	fa02 f303 	lsl.w	r3, r2, r3
 8005fae:	43db      	mvns	r3, r3
 8005fb0:	69ba      	ldr	r2, [r7, #24]
 8005fb2:	4013      	ands	r3, r2
 8005fb4:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	685b      	ldr	r3, [r3, #4]
 8005fba:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	f003 0310 	and.w	r3, r3, #16
 8005fc2:	697a      	ldr	r2, [r7, #20]
 8005fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fc8:	69ba      	ldr	r2, [r7, #24]
 8005fca:	4313      	orrs	r3, r2
 8005fcc:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	69ba      	ldr	r2, [r7, #24]
 8005fd4:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	6819      	ldr	r1, [r3, #0]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	f003 0310 	and.w	r3, r3, #16
 8005fe2:	22c0      	movs	r2, #192	; 0xc0
 8005fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe8:	43da      	mvns	r2, r3
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	400a      	ands	r2, r1
 8005ff0:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	2201      	movs	r2, #1
 8005ff6:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8005ffe:	2300      	movs	r3, #0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3720      	adds	r7, #32
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8006010:	bf00      	nop
 8006012:	370c      	adds	r7, #12
 8006014:	46bd      	mov	sp, r7
 8006016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601a:	4770      	bx	lr

0800601c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800601c:	b480      	push	{r7}
 800601e:	b087      	sub	sp, #28
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8006026:	2300      	movs	r3, #0
 8006028:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800602a:	e148      	b.n	80062be <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800602c:	683b      	ldr	r3, [r7, #0]
 800602e:	681a      	ldr	r2, [r3, #0]
 8006030:	2101      	movs	r1, #1
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	fa01 f303 	lsl.w	r3, r1, r3
 8006038:	4013      	ands	r3, r2
 800603a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	2b00      	cmp	r3, #0
 8006040:	f000 813a 	beq.w	80062b8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	685b      	ldr	r3, [r3, #4]
 8006048:	f003 0303 	and.w	r3, r3, #3
 800604c:	2b01      	cmp	r3, #1
 800604e:	d005      	beq.n	800605c <HAL_GPIO_Init+0x40>
 8006050:	683b      	ldr	r3, [r7, #0]
 8006052:	685b      	ldr	r3, [r3, #4]
 8006054:	f003 0303 	and.w	r3, r3, #3
 8006058:	2b02      	cmp	r3, #2
 800605a:	d130      	bne.n	80060be <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	689b      	ldr	r3, [r3, #8]
 8006060:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	005b      	lsls	r3, r3, #1
 8006066:	2203      	movs	r2, #3
 8006068:	fa02 f303 	lsl.w	r3, r2, r3
 800606c:	43db      	mvns	r3, r3
 800606e:	693a      	ldr	r2, [r7, #16]
 8006070:	4013      	ands	r3, r2
 8006072:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	68da      	ldr	r2, [r3, #12]
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	005b      	lsls	r3, r3, #1
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	693a      	ldr	r2, [r7, #16]
 8006082:	4313      	orrs	r3, r2
 8006084:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	693a      	ldr	r2, [r7, #16]
 800608a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	685b      	ldr	r3, [r3, #4]
 8006090:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8006092:	2201      	movs	r2, #1
 8006094:	697b      	ldr	r3, [r7, #20]
 8006096:	fa02 f303 	lsl.w	r3, r2, r3
 800609a:	43db      	mvns	r3, r3
 800609c:	693a      	ldr	r2, [r7, #16]
 800609e:	4013      	ands	r3, r2
 80060a0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80060a2:	683b      	ldr	r3, [r7, #0]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	091b      	lsrs	r3, r3, #4
 80060a8:	f003 0201 	and.w	r2, r3, #1
 80060ac:	697b      	ldr	r3, [r7, #20]
 80060ae:	fa02 f303 	lsl.w	r3, r2, r3
 80060b2:	693a      	ldr	r2, [r7, #16]
 80060b4:	4313      	orrs	r3, r2
 80060b6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	693a      	ldr	r2, [r7, #16]
 80060bc:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060be:	683b      	ldr	r3, [r7, #0]
 80060c0:	685b      	ldr	r3, [r3, #4]
 80060c2:	f003 0303 	and.w	r3, r3, #3
 80060c6:	2b03      	cmp	r3, #3
 80060c8:	d017      	beq.n	80060fa <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	68db      	ldr	r3, [r3, #12]
 80060ce:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80060d0:	697b      	ldr	r3, [r7, #20]
 80060d2:	005b      	lsls	r3, r3, #1
 80060d4:	2203      	movs	r2, #3
 80060d6:	fa02 f303 	lsl.w	r3, r2, r3
 80060da:	43db      	mvns	r3, r3
 80060dc:	693a      	ldr	r2, [r7, #16]
 80060de:	4013      	ands	r3, r2
 80060e0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	689a      	ldr	r2, [r3, #8]
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	005b      	lsls	r3, r3, #1
 80060ea:	fa02 f303 	lsl.w	r3, r2, r3
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	693a      	ldr	r2, [r7, #16]
 80060f8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060fa:	683b      	ldr	r3, [r7, #0]
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	f003 0303 	and.w	r3, r3, #3
 8006102:	2b02      	cmp	r3, #2
 8006104:	d123      	bne.n	800614e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8006106:	697b      	ldr	r3, [r7, #20]
 8006108:	08da      	lsrs	r2, r3, #3
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	3208      	adds	r2, #8
 800610e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006112:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8006114:	697b      	ldr	r3, [r7, #20]
 8006116:	f003 0307 	and.w	r3, r3, #7
 800611a:	009b      	lsls	r3, r3, #2
 800611c:	220f      	movs	r2, #15
 800611e:	fa02 f303 	lsl.w	r3, r2, r3
 8006122:	43db      	mvns	r3, r3
 8006124:	693a      	ldr	r2, [r7, #16]
 8006126:	4013      	ands	r3, r2
 8006128:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	691a      	ldr	r2, [r3, #16]
 800612e:	697b      	ldr	r3, [r7, #20]
 8006130:	f003 0307 	and.w	r3, r3, #7
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	fa02 f303 	lsl.w	r3, r2, r3
 800613a:	693a      	ldr	r2, [r7, #16]
 800613c:	4313      	orrs	r3, r2
 800613e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8006140:	697b      	ldr	r3, [r7, #20]
 8006142:	08da      	lsrs	r2, r3, #3
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	3208      	adds	r2, #8
 8006148:	6939      	ldr	r1, [r7, #16]
 800614a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8006154:	697b      	ldr	r3, [r7, #20]
 8006156:	005b      	lsls	r3, r3, #1
 8006158:	2203      	movs	r2, #3
 800615a:	fa02 f303 	lsl.w	r3, r2, r3
 800615e:	43db      	mvns	r3, r3
 8006160:	693a      	ldr	r2, [r7, #16]
 8006162:	4013      	ands	r3, r2
 8006164:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	f003 0203 	and.w	r2, r3, #3
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	005b      	lsls	r3, r3, #1
 8006172:	fa02 f303 	lsl.w	r3, r2, r3
 8006176:	693a      	ldr	r2, [r7, #16]
 8006178:	4313      	orrs	r3, r2
 800617a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	693a      	ldr	r2, [r7, #16]
 8006180:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	685b      	ldr	r3, [r3, #4]
 8006186:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 8094 	beq.w	80062b8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006190:	4b52      	ldr	r3, [pc, #328]	; (80062dc <HAL_GPIO_Init+0x2c0>)
 8006192:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006194:	4a51      	ldr	r2, [pc, #324]	; (80062dc <HAL_GPIO_Init+0x2c0>)
 8006196:	f043 0301 	orr.w	r3, r3, #1
 800619a:	6613      	str	r3, [r2, #96]	; 0x60
 800619c:	4b4f      	ldr	r3, [pc, #316]	; (80062dc <HAL_GPIO_Init+0x2c0>)
 800619e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80061a0:	f003 0301 	and.w	r3, r3, #1
 80061a4:	60bb      	str	r3, [r7, #8]
 80061a6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80061a8:	4a4d      	ldr	r2, [pc, #308]	; (80062e0 <HAL_GPIO_Init+0x2c4>)
 80061aa:	697b      	ldr	r3, [r7, #20]
 80061ac:	089b      	lsrs	r3, r3, #2
 80061ae:	3302      	adds	r3, #2
 80061b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061b4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f003 0303 	and.w	r3, r3, #3
 80061bc:	009b      	lsls	r3, r3, #2
 80061be:	220f      	movs	r2, #15
 80061c0:	fa02 f303 	lsl.w	r3, r2, r3
 80061c4:	43db      	mvns	r3, r3
 80061c6:	693a      	ldr	r2, [r7, #16]
 80061c8:	4013      	ands	r3, r2
 80061ca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80061d2:	d00d      	beq.n	80061f0 <HAL_GPIO_Init+0x1d4>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	4a43      	ldr	r2, [pc, #268]	; (80062e4 <HAL_GPIO_Init+0x2c8>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d007      	beq.n	80061ec <HAL_GPIO_Init+0x1d0>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	4a42      	ldr	r2, [pc, #264]	; (80062e8 <HAL_GPIO_Init+0x2cc>)
 80061e0:	4293      	cmp	r3, r2
 80061e2:	d101      	bne.n	80061e8 <HAL_GPIO_Init+0x1cc>
 80061e4:	2302      	movs	r3, #2
 80061e6:	e004      	b.n	80061f2 <HAL_GPIO_Init+0x1d6>
 80061e8:	2307      	movs	r3, #7
 80061ea:	e002      	b.n	80061f2 <HAL_GPIO_Init+0x1d6>
 80061ec:	2301      	movs	r3, #1
 80061ee:	e000      	b.n	80061f2 <HAL_GPIO_Init+0x1d6>
 80061f0:	2300      	movs	r3, #0
 80061f2:	697a      	ldr	r2, [r7, #20]
 80061f4:	f002 0203 	and.w	r2, r2, #3
 80061f8:	0092      	lsls	r2, r2, #2
 80061fa:	4093      	lsls	r3, r2
 80061fc:	693a      	ldr	r2, [r7, #16]
 80061fe:	4313      	orrs	r3, r2
 8006200:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8006202:	4937      	ldr	r1, [pc, #220]	; (80062e0 <HAL_GPIO_Init+0x2c4>)
 8006204:	697b      	ldr	r3, [r7, #20]
 8006206:	089b      	lsrs	r3, r3, #2
 8006208:	3302      	adds	r3, #2
 800620a:	693a      	ldr	r2, [r7, #16]
 800620c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8006210:	4b36      	ldr	r3, [pc, #216]	; (80062ec <HAL_GPIO_Init+0x2d0>)
 8006212:	689b      	ldr	r3, [r3, #8]
 8006214:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	43db      	mvns	r3, r3
 800621a:	693a      	ldr	r2, [r7, #16]
 800621c:	4013      	ands	r3, r2
 800621e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006220:	683b      	ldr	r3, [r7, #0]
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006228:	2b00      	cmp	r3, #0
 800622a:	d003      	beq.n	8006234 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800622c:	693a      	ldr	r2, [r7, #16]
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	4313      	orrs	r3, r2
 8006232:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8006234:	4a2d      	ldr	r2, [pc, #180]	; (80062ec <HAL_GPIO_Init+0x2d0>)
 8006236:	693b      	ldr	r3, [r7, #16]
 8006238:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800623a:	4b2c      	ldr	r3, [pc, #176]	; (80062ec <HAL_GPIO_Init+0x2d0>)
 800623c:	68db      	ldr	r3, [r3, #12]
 800623e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	43db      	mvns	r3, r3
 8006244:	693a      	ldr	r2, [r7, #16]
 8006246:	4013      	ands	r3, r2
 8006248:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006252:	2b00      	cmp	r3, #0
 8006254:	d003      	beq.n	800625e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8006256:	693a      	ldr	r2, [r7, #16]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	4313      	orrs	r3, r2
 800625c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800625e:	4a23      	ldr	r2, [pc, #140]	; (80062ec <HAL_GPIO_Init+0x2d0>)
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8006264:	4b21      	ldr	r3, [pc, #132]	; (80062ec <HAL_GPIO_Init+0x2d0>)
 8006266:	685b      	ldr	r3, [r3, #4]
 8006268:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	43db      	mvns	r3, r3
 800626e:	693a      	ldr	r2, [r7, #16]
 8006270:	4013      	ands	r3, r2
 8006272:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	685b      	ldr	r3, [r3, #4]
 8006278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800627c:	2b00      	cmp	r3, #0
 800627e:	d003      	beq.n	8006288 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8006280:	693a      	ldr	r2, [r7, #16]
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	4313      	orrs	r3, r2
 8006286:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8006288:	4a18      	ldr	r2, [pc, #96]	; (80062ec <HAL_GPIO_Init+0x2d0>)
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800628e:	4b17      	ldr	r3, [pc, #92]	; (80062ec <HAL_GPIO_Init+0x2d0>)
 8006290:	681b      	ldr	r3, [r3, #0]
 8006292:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	43db      	mvns	r3, r3
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4013      	ands	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	685b      	ldr	r3, [r3, #4]
 80062a2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80062aa:	693a      	ldr	r2, [r7, #16]
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4313      	orrs	r3, r2
 80062b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80062b2:	4a0e      	ldr	r2, [pc, #56]	; (80062ec <HAL_GPIO_Init+0x2d0>)
 80062b4:	693b      	ldr	r3, [r7, #16]
 80062b6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80062b8:	697b      	ldr	r3, [r7, #20]
 80062ba:	3301      	adds	r3, #1
 80062bc:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	681a      	ldr	r2, [r3, #0]
 80062c2:	697b      	ldr	r3, [r7, #20]
 80062c4:	fa22 f303 	lsr.w	r3, r2, r3
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	f47f aeaf 	bne.w	800602c <HAL_GPIO_Init+0x10>
  }
}
 80062ce:	bf00      	nop
 80062d0:	bf00      	nop
 80062d2:	371c      	adds	r7, #28
 80062d4:	46bd      	mov	sp, r7
 80062d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062da:	4770      	bx	lr
 80062dc:	40021000 	.word	0x40021000
 80062e0:	40010000 	.word	0x40010000
 80062e4:	48000400 	.word	0x48000400
 80062e8:	48000800 	.word	0x48000800
 80062ec:	40010400 	.word	0x40010400

080062f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
 80062f8:	460b      	mov	r3, r1
 80062fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	691a      	ldr	r2, [r3, #16]
 8006300:	887b      	ldrh	r3, [r7, #2]
 8006302:	4013      	ands	r3, r2
 8006304:	2b00      	cmp	r3, #0
 8006306:	d002      	beq.n	800630e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006308:	2301      	movs	r3, #1
 800630a:	73fb      	strb	r3, [r7, #15]
 800630c:	e001      	b.n	8006312 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800630e:	2300      	movs	r3, #0
 8006310:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006312:	7bfb      	ldrb	r3, [r7, #15]
}
 8006314:	4618      	mov	r0, r3
 8006316:	3714      	adds	r7, #20
 8006318:	46bd      	mov	sp, r7
 800631a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631e:	4770      	bx	lr

08006320 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006320:	b480      	push	{r7}
 8006322:	b083      	sub	sp, #12
 8006324:	af00      	add	r7, sp, #0
 8006326:	6078      	str	r0, [r7, #4]
 8006328:	460b      	mov	r3, r1
 800632a:	807b      	strh	r3, [r7, #2]
 800632c:	4613      	mov	r3, r2
 800632e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006330:	787b      	ldrb	r3, [r7, #1]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d003      	beq.n	800633e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8006336:	887a      	ldrh	r2, [r7, #2]
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800633c:	e002      	b.n	8006344 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800633e:	887a      	ldrh	r2, [r7, #2]
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	629a      	str	r2, [r3, #40]	; 0x28
}
 8006344:	bf00      	nop
 8006346:	370c      	adds	r7, #12
 8006348:	46bd      	mov	sp, r7
 800634a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800634e:	4770      	bx	lr

08006350 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006350:	b580      	push	{r7, lr}
 8006352:	b082      	sub	sp, #8
 8006354:	af00      	add	r7, sp, #0
 8006356:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d101      	bne.n	8006362 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e081      	b.n	8006466 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b00      	cmp	r3, #0
 800636c:	d106      	bne.n	800637c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2200      	movs	r2, #0
 8006372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006376:	6878      	ldr	r0, [r7, #4]
 8006378:	f7fd fb98 	bl	8003aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2224      	movs	r2, #36	; 0x24
 8006380:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	681a      	ldr	r2, [r3, #0]
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	f022 0201 	bic.w	r2, r2, #1
 8006392:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	685a      	ldr	r2, [r3, #4]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80063a0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	689a      	ldr	r2, [r3, #8]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063b0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d107      	bne.n	80063ca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	689a      	ldr	r2, [r3, #8]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063c6:	609a      	str	r2, [r3, #8]
 80063c8:	e006      	b.n	80063d8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	689a      	ldr	r2, [r3, #8]
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80063d6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	68db      	ldr	r3, [r3, #12]
 80063dc:	2b02      	cmp	r3, #2
 80063de:	d104      	bne.n	80063ea <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80063e8:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	685b      	ldr	r3, [r3, #4]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6812      	ldr	r2, [r2, #0]
 80063f4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80063f8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80063fc:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	68da      	ldr	r2, [r3, #12]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800640c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	691a      	ldr	r2, [r3, #16]
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	695b      	ldr	r3, [r3, #20]
 8006416:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	699b      	ldr	r3, [r3, #24]
 800641e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	430a      	orrs	r2, r1
 8006426:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	69d9      	ldr	r1, [r3, #28]
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6a1a      	ldr	r2, [r3, #32]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	430a      	orrs	r2, r1
 8006436:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	681a      	ldr	r2, [r3, #0]
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	f042 0201 	orr.w	r2, r2, #1
 8006446:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	2200      	movs	r2, #0
 800644c:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2220      	movs	r2, #32
 8006452:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006464:	2300      	movs	r3, #0
}
 8006466:	4618      	mov	r0, r3
 8006468:	3708      	adds	r7, #8
 800646a:	46bd      	mov	sp, r7
 800646c:	bd80      	pop	{r7, pc}
	...

08006470 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b088      	sub	sp, #32
 8006474:	af02      	add	r7, sp, #8
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	607a      	str	r2, [r7, #4]
 800647a:	461a      	mov	r2, r3
 800647c:	460b      	mov	r3, r1
 800647e:	817b      	strh	r3, [r7, #10]
 8006480:	4613      	mov	r3, r2
 8006482:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800648a:	b2db      	uxtb	r3, r3
 800648c:	2b20      	cmp	r3, #32
 800648e:	f040 80da 	bne.w	8006646 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006498:	2b01      	cmp	r3, #1
 800649a:	d101      	bne.n	80064a0 <HAL_I2C_Master_Transmit+0x30>
 800649c:	2302      	movs	r3, #2
 800649e:	e0d3      	b.n	8006648 <HAL_I2C_Master_Transmit+0x1d8>
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2201      	movs	r2, #1
 80064a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 80064a8:	f7fd fd4a 	bl	8003f40 <HAL_GetTick>
 80064ac:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80064ae:	697b      	ldr	r3, [r7, #20]
 80064b0:	9300      	str	r3, [sp, #0]
 80064b2:	2319      	movs	r3, #25
 80064b4:	2201      	movs	r2, #1
 80064b6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80064ba:	68f8      	ldr	r0, [r7, #12]
 80064bc:	f000 f8f0 	bl	80066a0 <I2C_WaitOnFlagUntilTimeout>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d001      	beq.n	80064ca <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 80064c6:	2301      	movs	r3, #1
 80064c8:	e0be      	b.n	8006648 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	2221      	movs	r2, #33	; 0x21
 80064ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2210      	movs	r2, #16
 80064d6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064da:	68fb      	ldr	r3, [r7, #12]
 80064dc:	2200      	movs	r2, #0
 80064de:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	687a      	ldr	r2, [r7, #4]
 80064e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80064e6:	68fb      	ldr	r3, [r7, #12]
 80064e8:	893a      	ldrh	r2, [r7, #8]
 80064ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80064ec:	68fb      	ldr	r3, [r7, #12]
 80064ee:	2200      	movs	r2, #0
 80064f0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80064f2:	68fb      	ldr	r3, [r7, #12]
 80064f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80064f6:	b29b      	uxth	r3, r3
 80064f8:	2bff      	cmp	r3, #255	; 0xff
 80064fa:	d90e      	bls.n	800651a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	22ff      	movs	r2, #255	; 0xff
 8006500:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006506:	b2da      	uxtb	r2, r3
 8006508:	8979      	ldrh	r1, [r7, #10]
 800650a:	4b51      	ldr	r3, [pc, #324]	; (8006650 <HAL_I2C_Master_Transmit+0x1e0>)
 800650c:	9300      	str	r3, [sp, #0]
 800650e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006512:	68f8      	ldr	r0, [r7, #12]
 8006514:	f000 fa6c 	bl	80069f0 <I2C_TransferConfig>
 8006518:	e06c      	b.n	80065f4 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800651a:	68fb      	ldr	r3, [r7, #12]
 800651c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800651e:	b29a      	uxth	r2, r3
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006528:	b2da      	uxtb	r2, r3
 800652a:	8979      	ldrh	r1, [r7, #10]
 800652c:	4b48      	ldr	r3, [pc, #288]	; (8006650 <HAL_I2C_Master_Transmit+0x1e0>)
 800652e:	9300      	str	r3, [sp, #0]
 8006530:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f000 fa5b 	bl	80069f0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800653a:	e05b      	b.n	80065f4 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800653c:	697a      	ldr	r2, [r7, #20]
 800653e:	6a39      	ldr	r1, [r7, #32]
 8006540:	68f8      	ldr	r0, [r7, #12]
 8006542:	f000 f8ed 	bl	8006720 <I2C_WaitOnTXISFlagUntilTimeout>
 8006546:	4603      	mov	r3, r0
 8006548:	2b00      	cmp	r3, #0
 800654a:	d001      	beq.n	8006550 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 800654c:	2301      	movs	r3, #1
 800654e:	e07b      	b.n	8006648 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006554:	781a      	ldrb	r2, [r3, #0]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006560:	1c5a      	adds	r2, r3, #1
 8006562:	68fb      	ldr	r3, [r7, #12]
 8006564:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800656a:	b29b      	uxth	r3, r3
 800656c:	3b01      	subs	r3, #1
 800656e:	b29a      	uxth	r2, r3
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006578:	3b01      	subs	r3, #1
 800657a:	b29a      	uxth	r2, r3
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006584:	b29b      	uxth	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	d034      	beq.n	80065f4 <HAL_I2C_Master_Transmit+0x184>
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800658e:	2b00      	cmp	r3, #0
 8006590:	d130      	bne.n	80065f4 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8006592:	697b      	ldr	r3, [r7, #20]
 8006594:	9300      	str	r3, [sp, #0]
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	2200      	movs	r2, #0
 800659a:	2180      	movs	r1, #128	; 0x80
 800659c:	68f8      	ldr	r0, [r7, #12]
 800659e:	f000 f87f 	bl	80066a0 <I2C_WaitOnFlagUntilTimeout>
 80065a2:	4603      	mov	r3, r0
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d001      	beq.n	80065ac <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 80065a8:	2301      	movs	r3, #1
 80065aa:	e04d      	b.n	8006648 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80065ac:	68fb      	ldr	r3, [r7, #12]
 80065ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065b0:	b29b      	uxth	r3, r3
 80065b2:	2bff      	cmp	r3, #255	; 0xff
 80065b4:	d90e      	bls.n	80065d4 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	22ff      	movs	r2, #255	; 0xff
 80065ba:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065c0:	b2da      	uxtb	r2, r3
 80065c2:	8979      	ldrh	r1, [r7, #10]
 80065c4:	2300      	movs	r3, #0
 80065c6:	9300      	str	r3, [sp, #0]
 80065c8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80065cc:	68f8      	ldr	r0, [r7, #12]
 80065ce:	f000 fa0f 	bl	80069f0 <I2C_TransferConfig>
 80065d2:	e00f      	b.n	80065f4 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065d8:	b29a      	uxth	r2, r3
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80065e2:	b2da      	uxtb	r2, r3
 80065e4:	8979      	ldrh	r1, [r7, #10]
 80065e6:	2300      	movs	r3, #0
 80065e8:	9300      	str	r3, [sp, #0]
 80065ea:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80065ee:	68f8      	ldr	r0, [r7, #12]
 80065f0:	f000 f9fe 	bl	80069f0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 80065f4:	68fb      	ldr	r3, [r7, #12]
 80065f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80065f8:	b29b      	uxth	r3, r3
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d19e      	bne.n	800653c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80065fe:	697a      	ldr	r2, [r7, #20]
 8006600:	6a39      	ldr	r1, [r7, #32]
 8006602:	68f8      	ldr	r0, [r7, #12]
 8006604:	f000 f8cc 	bl	80067a0 <I2C_WaitOnSTOPFlagUntilTimeout>
 8006608:	4603      	mov	r3, r0
 800660a:	2b00      	cmp	r3, #0
 800660c:	d001      	beq.n	8006612 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800660e:	2301      	movs	r3, #1
 8006610:	e01a      	b.n	8006648 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	2220      	movs	r2, #32
 8006618:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800661a:	68fb      	ldr	r3, [r7, #12]
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	6859      	ldr	r1, [r3, #4]
 8006620:	68fb      	ldr	r3, [r7, #12]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	4b0b      	ldr	r3, [pc, #44]	; (8006654 <HAL_I2C_Master_Transmit+0x1e4>)
 8006626:	400b      	ands	r3, r1
 8006628:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800662a:	68fb      	ldr	r3, [r7, #12]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	2200      	movs	r2, #0
 8006636:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	2200      	movs	r2, #0
 800663e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006642:	2300      	movs	r3, #0
 8006644:	e000      	b.n	8006648 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 8006646:	2302      	movs	r3, #2
  }
}
 8006648:	4618      	mov	r0, r3
 800664a:	3718      	adds	r7, #24
 800664c:	46bd      	mov	sp, r7
 800664e:	bd80      	pop	{r7, pc}
 8006650:	80002000 	.word	0x80002000
 8006654:	fe00e800 	.word	0xfe00e800

08006658 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8006658:	b480      	push	{r7}
 800665a:	b083      	sub	sp, #12
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	f003 0302 	and.w	r3, r3, #2
 800666a:	2b02      	cmp	r3, #2
 800666c:	d103      	bne.n	8006676 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	2200      	movs	r2, #0
 8006674:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	699b      	ldr	r3, [r3, #24]
 800667c:	f003 0301 	and.w	r3, r3, #1
 8006680:	2b01      	cmp	r3, #1
 8006682:	d007      	beq.n	8006694 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	699a      	ldr	r2, [r3, #24]
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	f042 0201 	orr.w	r2, r2, #1
 8006692:	619a      	str	r2, [r3, #24]
  }
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr

080066a0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	b084      	sub	sp, #16
 80066a4:	af00      	add	r7, sp, #0
 80066a6:	60f8      	str	r0, [r7, #12]
 80066a8:	60b9      	str	r1, [r7, #8]
 80066aa:	603b      	str	r3, [r7, #0]
 80066ac:	4613      	mov	r3, r2
 80066ae:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066b0:	e022      	b.n	80066f8 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066b8:	d01e      	beq.n	80066f8 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80066ba:	f7fd fc41 	bl	8003f40 <HAL_GetTick>
 80066be:	4602      	mov	r2, r0
 80066c0:	69bb      	ldr	r3, [r7, #24]
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	683a      	ldr	r2, [r7, #0]
 80066c6:	429a      	cmp	r2, r3
 80066c8:	d302      	bcc.n	80066d0 <I2C_WaitOnFlagUntilTimeout+0x30>
 80066ca:	683b      	ldr	r3, [r7, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d113      	bne.n	80066f8 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80066d4:	f043 0220 	orr.w	r2, r3, #32
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	2220      	movs	r2, #32
 80066e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	2200      	movs	r2, #0
 80066e8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2200      	movs	r2, #0
 80066f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80066f4:	2301      	movs	r3, #1
 80066f6:	e00f      	b.n	8006718 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80066f8:	68fb      	ldr	r3, [r7, #12]
 80066fa:	681b      	ldr	r3, [r3, #0]
 80066fc:	699a      	ldr	r2, [r3, #24]
 80066fe:	68bb      	ldr	r3, [r7, #8]
 8006700:	4013      	ands	r3, r2
 8006702:	68ba      	ldr	r2, [r7, #8]
 8006704:	429a      	cmp	r2, r3
 8006706:	bf0c      	ite	eq
 8006708:	2301      	moveq	r3, #1
 800670a:	2300      	movne	r3, #0
 800670c:	b2db      	uxtb	r3, r3
 800670e:	461a      	mov	r2, r3
 8006710:	79fb      	ldrb	r3, [r7, #7]
 8006712:	429a      	cmp	r2, r3
 8006714:	d0cd      	beq.n	80066b2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006716:	2300      	movs	r3, #0
}
 8006718:	4618      	mov	r0, r3
 800671a:	3710      	adds	r7, #16
 800671c:	46bd      	mov	sp, r7
 800671e:	bd80      	pop	{r7, pc}

08006720 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8006720:	b580      	push	{r7, lr}
 8006722:	b084      	sub	sp, #16
 8006724:	af00      	add	r7, sp, #0
 8006726:	60f8      	str	r0, [r7, #12]
 8006728:	60b9      	str	r1, [r7, #8]
 800672a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800672c:	e02c      	b.n	8006788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	68b9      	ldr	r1, [r7, #8]
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	f000 f870 	bl	8006818 <I2C_IsErrorOccurred>
 8006738:	4603      	mov	r3, r0
 800673a:	2b00      	cmp	r3, #0
 800673c:	d001      	beq.n	8006742 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e02a      	b.n	8006798 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006742:	68bb      	ldr	r3, [r7, #8]
 8006744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006748:	d01e      	beq.n	8006788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800674a:	f7fd fbf9 	bl	8003f40 <HAL_GetTick>
 800674e:	4602      	mov	r2, r0
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	1ad3      	subs	r3, r2, r3
 8006754:	68ba      	ldr	r2, [r7, #8]
 8006756:	429a      	cmp	r2, r3
 8006758:	d302      	bcc.n	8006760 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800675a:	68bb      	ldr	r3, [r7, #8]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d113      	bne.n	8006788 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006764:	f043 0220 	orr.w	r2, r3, #32
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2220      	movs	r2, #32
 8006770:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	2200      	movs	r2, #0
 8006778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	2200      	movs	r2, #0
 8006780:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006784:	2301      	movs	r3, #1
 8006786:	e007      	b.n	8006798 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699b      	ldr	r3, [r3, #24]
 800678e:	f003 0302 	and.w	r3, r3, #2
 8006792:	2b02      	cmp	r3, #2
 8006794:	d1cb      	bne.n	800672e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006796:	2300      	movs	r3, #0
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}

080067a0 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	60f8      	str	r0, [r7, #12]
 80067a8:	60b9      	str	r1, [r7, #8]
 80067aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80067ac:	e028      	b.n	8006800 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80067ae:	687a      	ldr	r2, [r7, #4]
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	68f8      	ldr	r0, [r7, #12]
 80067b4:	f000 f830 	bl	8006818 <I2C_IsErrorOccurred>
 80067b8:	4603      	mov	r3, r0
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d001      	beq.n	80067c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e026      	b.n	8006810 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80067c2:	f7fd fbbd 	bl	8003f40 <HAL_GetTick>
 80067c6:	4602      	mov	r2, r0
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	1ad3      	subs	r3, r2, r3
 80067cc:	68ba      	ldr	r2, [r7, #8]
 80067ce:	429a      	cmp	r2, r3
 80067d0:	d302      	bcc.n	80067d8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d113      	bne.n	8006800 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80067dc:	f043 0220 	orr.w	r2, r3, #32
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	2220      	movs	r2, #32
 80067e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80067ec:	68fb      	ldr	r3, [r7, #12]
 80067ee:	2200      	movs	r2, #0
 80067f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80067f4:	68fb      	ldr	r3, [r7, #12]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80067fc:	2301      	movs	r3, #1
 80067fe:	e007      	b.n	8006810 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	699b      	ldr	r3, [r3, #24]
 8006806:	f003 0320 	and.w	r3, r3, #32
 800680a:	2b20      	cmp	r3, #32
 800680c:	d1cf      	bne.n	80067ae <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800680e:	2300      	movs	r3, #0
}
 8006810:	4618      	mov	r0, r3
 8006812:	3710      	adds	r7, #16
 8006814:	46bd      	mov	sp, r7
 8006816:	bd80      	pop	{r7, pc}

08006818 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006818:	b580      	push	{r7, lr}
 800681a:	b08a      	sub	sp, #40	; 0x28
 800681c:	af00      	add	r7, sp, #0
 800681e:	60f8      	str	r0, [r7, #12]
 8006820:	60b9      	str	r1, [r7, #8]
 8006822:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006824:	2300      	movs	r3, #0
 8006826:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	699b      	ldr	r3, [r3, #24]
 8006830:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8006832:	2300      	movs	r3, #0
 8006834:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800683a:	69bb      	ldr	r3, [r7, #24]
 800683c:	f003 0310 	and.w	r3, r3, #16
 8006840:	2b00      	cmp	r3, #0
 8006842:	d075      	beq.n	8006930 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	681b      	ldr	r3, [r3, #0]
 8006848:	2210      	movs	r2, #16
 800684a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800684c:	e056      	b.n	80068fc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800684e:	68bb      	ldr	r3, [r7, #8]
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006854:	d052      	beq.n	80068fc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006856:	f7fd fb73 	bl	8003f40 <HAL_GetTick>
 800685a:	4602      	mov	r2, r0
 800685c:	69fb      	ldr	r3, [r7, #28]
 800685e:	1ad3      	subs	r3, r2, r3
 8006860:	68ba      	ldr	r2, [r7, #8]
 8006862:	429a      	cmp	r2, r3
 8006864:	d302      	bcc.n	800686c <I2C_IsErrorOccurred+0x54>
 8006866:	68bb      	ldr	r3, [r7, #8]
 8006868:	2b00      	cmp	r3, #0
 800686a:	d147      	bne.n	80068fc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800686c:	68fb      	ldr	r3, [r7, #12]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	685b      	ldr	r3, [r3, #4]
 8006872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006876:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800687e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	681b      	ldr	r3, [r3, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800688a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688e:	d12e      	bne.n	80068ee <I2C_IsErrorOccurred+0xd6>
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006896:	d02a      	beq.n	80068ee <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006898:	7cfb      	ldrb	r3, [r7, #19]
 800689a:	2b20      	cmp	r3, #32
 800689c:	d027      	beq.n	80068ee <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	685a      	ldr	r2, [r3, #4]
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80068ac:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 80068ae:	f7fd fb47 	bl	8003f40 <HAL_GetTick>
 80068b2:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068b4:	e01b      	b.n	80068ee <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 80068b6:	f7fd fb43 	bl	8003f40 <HAL_GetTick>
 80068ba:	4602      	mov	r2, r0
 80068bc:	69fb      	ldr	r3, [r7, #28]
 80068be:	1ad3      	subs	r3, r2, r3
 80068c0:	2b19      	cmp	r3, #25
 80068c2:	d914      	bls.n	80068ee <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068c8:	f043 0220 	orr.w	r2, r3, #32
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	2200      	movs	r2, #0
 80068e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80068e8:	2301      	movs	r3, #1
 80068ea:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	699b      	ldr	r3, [r3, #24]
 80068f4:	f003 0320 	and.w	r3, r3, #32
 80068f8:	2b20      	cmp	r3, #32
 80068fa:	d1dc      	bne.n	80068b6 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80068fc:	68fb      	ldr	r3, [r7, #12]
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	699b      	ldr	r3, [r3, #24]
 8006902:	f003 0320 	and.w	r3, r3, #32
 8006906:	2b20      	cmp	r3, #32
 8006908:	d003      	beq.n	8006912 <I2C_IsErrorOccurred+0xfa>
 800690a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800690e:	2b00      	cmp	r3, #0
 8006910:	d09d      	beq.n	800684e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8006912:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006916:	2b00      	cmp	r3, #0
 8006918:	d103      	bne.n	8006922 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	2220      	movs	r2, #32
 8006920:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8006922:	6a3b      	ldr	r3, [r7, #32]
 8006924:	f043 0304 	orr.w	r3, r3, #4
 8006928:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800692a:	2301      	movs	r3, #1
 800692c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	699b      	ldr	r3, [r3, #24]
 8006936:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8006938:	69bb      	ldr	r3, [r7, #24]
 800693a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800693e:	2b00      	cmp	r3, #0
 8006940:	d00b      	beq.n	800695a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006942:	6a3b      	ldr	r3, [r7, #32]
 8006944:	f043 0301 	orr.w	r3, r3, #1
 8006948:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006952:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006954:	2301      	movs	r3, #1
 8006956:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800695a:	69bb      	ldr	r3, [r7, #24]
 800695c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006960:	2b00      	cmp	r3, #0
 8006962:	d00b      	beq.n	800697c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006964:	6a3b      	ldr	r3, [r7, #32]
 8006966:	f043 0308 	orr.w	r3, r3, #8
 800696a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006974:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800697c:	69bb      	ldr	r3, [r7, #24]
 800697e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006982:	2b00      	cmp	r3, #0
 8006984:	d00b      	beq.n	800699e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006986:	6a3b      	ldr	r3, [r7, #32]
 8006988:	f043 0302 	orr.w	r3, r3, #2
 800698c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	681b      	ldr	r3, [r3, #0]
 8006992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006996:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006998:	2301      	movs	r3, #1
 800699a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800699e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d01c      	beq.n	80069e0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80069a6:	68f8      	ldr	r0, [r7, #12]
 80069a8:	f7ff fe56 	bl	8006658 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	6859      	ldr	r1, [r3, #4]
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	681a      	ldr	r2, [r3, #0]
 80069b6:	4b0d      	ldr	r3, [pc, #52]	; (80069ec <I2C_IsErrorOccurred+0x1d4>)
 80069b8:	400b      	ands	r3, r1
 80069ba:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 80069bc:	68fb      	ldr	r3, [r7, #12]
 80069be:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069c0:	6a3b      	ldr	r3, [r7, #32]
 80069c2:	431a      	orrs	r2, r3
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2220      	movs	r2, #32
 80069cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	2200      	movs	r2, #0
 80069d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069d8:	68fb      	ldr	r3, [r7, #12]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80069e0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80069e4:	4618      	mov	r0, r3
 80069e6:	3728      	adds	r7, #40	; 0x28
 80069e8:	46bd      	mov	sp, r7
 80069ea:	bd80      	pop	{r7, pc}
 80069ec:	fe00e800 	.word	0xfe00e800

080069f0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80069f0:	b480      	push	{r7}
 80069f2:	b087      	sub	sp, #28
 80069f4:	af00      	add	r7, sp, #0
 80069f6:	60f8      	str	r0, [r7, #12]
 80069f8:	607b      	str	r3, [r7, #4]
 80069fa:	460b      	mov	r3, r1
 80069fc:	817b      	strh	r3, [r7, #10]
 80069fe:	4613      	mov	r3, r2
 8006a00:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a02:	897b      	ldrh	r3, [r7, #10]
 8006a04:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a08:	7a7b      	ldrb	r3, [r7, #9]
 8006a0a:	041b      	lsls	r3, r3, #16
 8006a0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a10:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8006a16:	6a3b      	ldr	r3, [r7, #32]
 8006a18:	4313      	orrs	r3, r2
 8006a1a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006a1e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	685a      	ldr	r2, [r3, #4]
 8006a26:	6a3b      	ldr	r3, [r7, #32]
 8006a28:	0d5b      	lsrs	r3, r3, #21
 8006a2a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8006a2e:	4b08      	ldr	r3, [pc, #32]	; (8006a50 <I2C_TransferConfig+0x60>)
 8006a30:	430b      	orrs	r3, r1
 8006a32:	43db      	mvns	r3, r3
 8006a34:	ea02 0103 	and.w	r1, r2, r3
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	697a      	ldr	r2, [r7, #20]
 8006a3e:	430a      	orrs	r2, r1
 8006a40:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
 8006a4e:	bf00      	nop
 8006a50:	03ff63ff 	.word	0x03ff63ff

08006a54 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8006a54:	b480      	push	{r7}
 8006a56:	b083      	sub	sp, #12
 8006a58:	af00      	add	r7, sp, #0
 8006a5a:	6078      	str	r0, [r7, #4]
 8006a5c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006a64:	b2db      	uxtb	r3, r3
 8006a66:	2b20      	cmp	r3, #32
 8006a68:	d138      	bne.n	8006adc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006a70:	2b01      	cmp	r3, #1
 8006a72:	d101      	bne.n	8006a78 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8006a74:	2302      	movs	r3, #2
 8006a76:	e032      	b.n	8006ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	2201      	movs	r2, #1
 8006a7c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	2224      	movs	r2, #36	; 0x24
 8006a84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	681a      	ldr	r2, [r3, #0]
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	681b      	ldr	r3, [r3, #0]
 8006a92:	f022 0201 	bic.w	r2, r2, #1
 8006a96:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	681a      	ldr	r2, [r3, #0]
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006aa6:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	6819      	ldr	r1, [r3, #0]
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	683a      	ldr	r2, [r7, #0]
 8006ab4:	430a      	orrs	r2, r1
 8006ab6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	681a      	ldr	r2, [r3, #0]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0201 	orr.w	r2, r2, #1
 8006ac6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2220      	movs	r2, #32
 8006acc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	e000      	b.n	8006ade <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006adc:	2302      	movs	r3, #2
  }
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	370c      	adds	r7, #12
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ae8:	4770      	bx	lr

08006aea <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006aea:	b480      	push	{r7}
 8006aec:	b085      	sub	sp, #20
 8006aee:	af00      	add	r7, sp, #0
 8006af0:	6078      	str	r0, [r7, #4]
 8006af2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006afa:	b2db      	uxtb	r3, r3
 8006afc:	2b20      	cmp	r3, #32
 8006afe:	d139      	bne.n	8006b74 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b06:	2b01      	cmp	r3, #1
 8006b08:	d101      	bne.n	8006b0e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006b0a:	2302      	movs	r3, #2
 8006b0c:	e033      	b.n	8006b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	2201      	movs	r2, #1
 8006b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2224      	movs	r2, #36	; 0x24
 8006b1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	681a      	ldr	r2, [r3, #0]
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f022 0201 	bic.w	r2, r2, #1
 8006b2c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8006b3c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8006b3e:	683b      	ldr	r3, [r7, #0]
 8006b40:	021b      	lsls	r3, r3, #8
 8006b42:	68fa      	ldr	r2, [r7, #12]
 8006b44:	4313      	orrs	r3, r2
 8006b46:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	68fa      	ldr	r2, [r7, #12]
 8006b4e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	f042 0201 	orr.w	r2, r2, #1
 8006b5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	2220      	movs	r2, #32
 8006b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	2200      	movs	r2, #0
 8006b6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006b70:	2300      	movs	r3, #0
 8006b72:	e000      	b.n	8006b76 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8006b74:	2302      	movs	r3, #2
  }
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3714      	adds	r7, #20
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b80:	4770      	bx	lr
	...

08006b84 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006b84:	b480      	push	{r7}
 8006b86:	b085      	sub	sp, #20
 8006b88:	af00      	add	r7, sp, #0
 8006b8a:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006b8c:	4b0b      	ldr	r3, [pc, #44]	; (8006bbc <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006b8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b90:	4a0a      	ldr	r2, [pc, #40]	; (8006bbc <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006b92:	f043 0301 	orr.w	r3, r3, #1
 8006b96:	6613      	str	r3, [r2, #96]	; 0x60
 8006b98:	4b08      	ldr	r3, [pc, #32]	; (8006bbc <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006b9a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006b9c:	f003 0301 	and.w	r3, r3, #1
 8006ba0:	60fb      	str	r3, [r7, #12]
 8006ba2:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006ba4:	4b06      	ldr	r3, [pc, #24]	; (8006bc0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006ba6:	685a      	ldr	r2, [r3, #4]
 8006ba8:	4905      	ldr	r1, [pc, #20]	; (8006bc0 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4313      	orrs	r3, r2
 8006bae:	604b      	str	r3, [r1, #4]
}
 8006bb0:	bf00      	nop
 8006bb2:	3714      	adds	r7, #20
 8006bb4:	46bd      	mov	sp, r7
 8006bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bba:	4770      	bx	lr
 8006bbc:	40021000 	.word	0x40021000
 8006bc0:	40010000 	.word	0x40010000

08006bc4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	4a04      	ldr	r2, [pc, #16]	; (8006be0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006bce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006bd2:	6013      	str	r3, [r2, #0]
}
 8006bd4:	bf00      	nop
 8006bd6:	46bd      	mov	sp, r7
 8006bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bdc:	4770      	bx	lr
 8006bde:	bf00      	nop
 8006be0:	40007000 	.word	0x40007000

08006be4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006be4:	b480      	push	{r7}
 8006be6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006be8:	4b04      	ldr	r3, [pc, #16]	; (8006bfc <HAL_PWREx_GetVoltageRange+0x18>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006bf0:	4618      	mov	r0, r3
 8006bf2:	46bd      	mov	sp, r7
 8006bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bf8:	4770      	bx	lr
 8006bfa:	bf00      	nop
 8006bfc:	40007000 	.word	0x40007000

08006c00 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006c00:	b480      	push	{r7}
 8006c02:	b085      	sub	sp, #20
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c0e:	d130      	bne.n	8006c72 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006c10:	4b23      	ldr	r3, [pc, #140]	; (8006ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006c1c:	d038      	beq.n	8006c90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006c1e:	4b20      	ldr	r3, [pc, #128]	; (8006ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c26:	4a1e      	ldr	r2, [pc, #120]	; (8006ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c2c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006c2e:	4b1d      	ldr	r3, [pc, #116]	; (8006ca4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	2232      	movs	r2, #50	; 0x32
 8006c34:	fb02 f303 	mul.w	r3, r2, r3
 8006c38:	4a1b      	ldr	r2, [pc, #108]	; (8006ca8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006c3a:	fba2 2303 	umull	r2, r3, r2, r3
 8006c3e:	0c9b      	lsrs	r3, r3, #18
 8006c40:	3301      	adds	r3, #1
 8006c42:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c44:	e002      	b.n	8006c4c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006c4c:	4b14      	ldr	r3, [pc, #80]	; (8006ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c4e:	695b      	ldr	r3, [r3, #20]
 8006c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c54:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c58:	d102      	bne.n	8006c60 <HAL_PWREx_ControlVoltageScaling+0x60>
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d1f2      	bne.n	8006c46 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006c60:	4b0f      	ldr	r3, [pc, #60]	; (8006ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c62:	695b      	ldr	r3, [r3, #20]
 8006c64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c6c:	d110      	bne.n	8006c90 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006c6e:	2303      	movs	r3, #3
 8006c70:	e00f      	b.n	8006c92 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006c72:	4b0b      	ldr	r3, [pc, #44]	; (8006ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006c7a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006c7e:	d007      	beq.n	8006c90 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006c80:	4b07      	ldr	r3, [pc, #28]	; (8006ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006c88:	4a05      	ldr	r2, [pc, #20]	; (8006ca0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006c8a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c8e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006c90:	2300      	movs	r3, #0
}
 8006c92:	4618      	mov	r0, r3
 8006c94:	3714      	adds	r7, #20
 8006c96:	46bd      	mov	sp, r7
 8006c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c9c:	4770      	bx	lr
 8006c9e:	bf00      	nop
 8006ca0:	40007000 	.word	0x40007000
 8006ca4:	20000034 	.word	0x20000034
 8006ca8:	431bde83 	.word	0x431bde83

08006cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b088      	sub	sp, #32
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d102      	bne.n	8006cc0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006cba:	2301      	movs	r3, #1
 8006cbc:	f000 bc02 	b.w	80074c4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006cc0:	4b96      	ldr	r3, [pc, #600]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	f003 030c 	and.w	r3, r3, #12
 8006cc8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006cca:	4b94      	ldr	r3, [pc, #592]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006ccc:	68db      	ldr	r3, [r3, #12]
 8006cce:	f003 0303 	and.w	r3, r3, #3
 8006cd2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006cd4:	687b      	ldr	r3, [r7, #4]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f003 0310 	and.w	r3, r3, #16
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 80e4 	beq.w	8006eaa <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006ce2:	69bb      	ldr	r3, [r7, #24]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d007      	beq.n	8006cf8 <HAL_RCC_OscConfig+0x4c>
 8006ce8:	69bb      	ldr	r3, [r7, #24]
 8006cea:	2b0c      	cmp	r3, #12
 8006cec:	f040 808b 	bne.w	8006e06 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006cf0:	697b      	ldr	r3, [r7, #20]
 8006cf2:	2b01      	cmp	r3, #1
 8006cf4:	f040 8087 	bne.w	8006e06 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006cf8:	4b88      	ldr	r3, [pc, #544]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f003 0302 	and.w	r3, r3, #2
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d005      	beq.n	8006d10 <HAL_RCC_OscConfig+0x64>
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	699b      	ldr	r3, [r3, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d101      	bne.n	8006d10 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006d0c:	2301      	movs	r3, #1
 8006d0e:	e3d9      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a1a      	ldr	r2, [r3, #32]
 8006d14:	4b81      	ldr	r3, [pc, #516]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0308 	and.w	r3, r3, #8
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d004      	beq.n	8006d2a <HAL_RCC_OscConfig+0x7e>
 8006d20:	4b7e      	ldr	r3, [pc, #504]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d28:	e005      	b.n	8006d36 <HAL_RCC_OscConfig+0x8a>
 8006d2a:	4b7c      	ldr	r3, [pc, #496]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006d2c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006d30:	091b      	lsrs	r3, r3, #4
 8006d32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d36:	4293      	cmp	r3, r2
 8006d38:	d223      	bcs.n	8006d82 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	6a1b      	ldr	r3, [r3, #32]
 8006d3e:	4618      	mov	r0, r3
 8006d40:	f000 fdbe 	bl	80078c0 <RCC_SetFlashLatencyFromMSIRange>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e3ba      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d4e:	4b73      	ldr	r3, [pc, #460]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4a72      	ldr	r2, [pc, #456]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006d54:	f043 0308 	orr.w	r3, r3, #8
 8006d58:	6013      	str	r3, [r2, #0]
 8006d5a:	4b70      	ldr	r3, [pc, #448]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	6a1b      	ldr	r3, [r3, #32]
 8006d66:	496d      	ldr	r1, [pc, #436]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006d6c:	4b6b      	ldr	r3, [pc, #428]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006d6e:	685b      	ldr	r3, [r3, #4]
 8006d70:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	69db      	ldr	r3, [r3, #28]
 8006d78:	021b      	lsls	r3, r3, #8
 8006d7a:	4968      	ldr	r1, [pc, #416]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006d7c:	4313      	orrs	r3, r2
 8006d7e:	604b      	str	r3, [r1, #4]
 8006d80:	e025      	b.n	8006dce <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006d82:	4b66      	ldr	r3, [pc, #408]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a65      	ldr	r2, [pc, #404]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006d88:	f043 0308 	orr.w	r3, r3, #8
 8006d8c:	6013      	str	r3, [r2, #0]
 8006d8e:	4b63      	ldr	r3, [pc, #396]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a1b      	ldr	r3, [r3, #32]
 8006d9a:	4960      	ldr	r1, [pc, #384]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006d9c:	4313      	orrs	r3, r2
 8006d9e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006da0:	4b5e      	ldr	r3, [pc, #376]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	69db      	ldr	r3, [r3, #28]
 8006dac:	021b      	lsls	r3, r3, #8
 8006dae:	495b      	ldr	r1, [pc, #364]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006db0:	4313      	orrs	r3, r2
 8006db2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006db4:	69bb      	ldr	r3, [r7, #24]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d109      	bne.n	8006dce <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	6a1b      	ldr	r3, [r3, #32]
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 fd7e 	bl	80078c0 <RCC_SetFlashLatencyFromMSIRange>
 8006dc4:	4603      	mov	r3, r0
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d001      	beq.n	8006dce <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e37a      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006dce:	f000 fc81 	bl	80076d4 <HAL_RCC_GetSysClockFreq>
 8006dd2:	4602      	mov	r2, r0
 8006dd4:	4b51      	ldr	r3, [pc, #324]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006dd6:	689b      	ldr	r3, [r3, #8]
 8006dd8:	091b      	lsrs	r3, r3, #4
 8006dda:	f003 030f 	and.w	r3, r3, #15
 8006dde:	4950      	ldr	r1, [pc, #320]	; (8006f20 <HAL_RCC_OscConfig+0x274>)
 8006de0:	5ccb      	ldrb	r3, [r1, r3]
 8006de2:	f003 031f 	and.w	r3, r3, #31
 8006de6:	fa22 f303 	lsr.w	r3, r2, r3
 8006dea:	4a4e      	ldr	r2, [pc, #312]	; (8006f24 <HAL_RCC_OscConfig+0x278>)
 8006dec:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006dee:	4b4e      	ldr	r3, [pc, #312]	; (8006f28 <HAL_RCC_OscConfig+0x27c>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	4618      	mov	r0, r3
 8006df4:	f7fc ff56 	bl	8003ca4 <HAL_InitTick>
 8006df8:	4603      	mov	r3, r0
 8006dfa:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006dfc:	7bfb      	ldrb	r3, [r7, #15]
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d052      	beq.n	8006ea8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006e02:	7bfb      	ldrb	r3, [r7, #15]
 8006e04:	e35e      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	699b      	ldr	r3, [r3, #24]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d032      	beq.n	8006e74 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006e0e:	4b43      	ldr	r3, [pc, #268]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a42      	ldr	r2, [pc, #264]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006e14:	f043 0301 	orr.w	r3, r3, #1
 8006e18:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e1a:	f7fd f891 	bl	8003f40 <HAL_GetTick>
 8006e1e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e20:	e008      	b.n	8006e34 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e22:	f7fd f88d 	bl	8003f40 <HAL_GetTick>
 8006e26:	4602      	mov	r2, r0
 8006e28:	693b      	ldr	r3, [r7, #16]
 8006e2a:	1ad3      	subs	r3, r2, r3
 8006e2c:	2b02      	cmp	r3, #2
 8006e2e:	d901      	bls.n	8006e34 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006e30:	2303      	movs	r3, #3
 8006e32:	e347      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006e34:	4b39      	ldr	r3, [pc, #228]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006e36:	681b      	ldr	r3, [r3, #0]
 8006e38:	f003 0302 	and.w	r3, r3, #2
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d0f0      	beq.n	8006e22 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006e40:	4b36      	ldr	r3, [pc, #216]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a35      	ldr	r2, [pc, #212]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006e46:	f043 0308 	orr.w	r3, r3, #8
 8006e4a:	6013      	str	r3, [r2, #0]
 8006e4c:	4b33      	ldr	r3, [pc, #204]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a1b      	ldr	r3, [r3, #32]
 8006e58:	4930      	ldr	r1, [pc, #192]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006e5a:	4313      	orrs	r3, r2
 8006e5c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006e5e:	4b2f      	ldr	r3, [pc, #188]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	69db      	ldr	r3, [r3, #28]
 8006e6a:	021b      	lsls	r3, r3, #8
 8006e6c:	492b      	ldr	r1, [pc, #172]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006e6e:	4313      	orrs	r3, r2
 8006e70:	604b      	str	r3, [r1, #4]
 8006e72:	e01a      	b.n	8006eaa <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006e74:	4b29      	ldr	r3, [pc, #164]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	4a28      	ldr	r2, [pc, #160]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006e7a:	f023 0301 	bic.w	r3, r3, #1
 8006e7e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006e80:	f7fd f85e 	bl	8003f40 <HAL_GetTick>
 8006e84:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e86:	e008      	b.n	8006e9a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006e88:	f7fd f85a 	bl	8003f40 <HAL_GetTick>
 8006e8c:	4602      	mov	r2, r0
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	1ad3      	subs	r3, r2, r3
 8006e92:	2b02      	cmp	r3, #2
 8006e94:	d901      	bls.n	8006e9a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006e96:	2303      	movs	r3, #3
 8006e98:	e314      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006e9a:	4b20      	ldr	r3, [pc, #128]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	f003 0302 	and.w	r3, r3, #2
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1f0      	bne.n	8006e88 <HAL_RCC_OscConfig+0x1dc>
 8006ea6:	e000      	b.n	8006eaa <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006ea8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f003 0301 	and.w	r3, r3, #1
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d073      	beq.n	8006f9e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006eb6:	69bb      	ldr	r3, [r7, #24]
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	d005      	beq.n	8006ec8 <HAL_RCC_OscConfig+0x21c>
 8006ebc:	69bb      	ldr	r3, [r7, #24]
 8006ebe:	2b0c      	cmp	r3, #12
 8006ec0:	d10e      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006ec2:	697b      	ldr	r3, [r7, #20]
 8006ec4:	2b03      	cmp	r3, #3
 8006ec6:	d10b      	bne.n	8006ee0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006ec8:	4b14      	ldr	r3, [pc, #80]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d063      	beq.n	8006f9c <HAL_RCC_OscConfig+0x2f0>
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d15f      	bne.n	8006f9c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006edc:	2301      	movs	r3, #1
 8006ede:	e2f1      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	685b      	ldr	r3, [r3, #4]
 8006ee4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006ee8:	d106      	bne.n	8006ef8 <HAL_RCC_OscConfig+0x24c>
 8006eea:	4b0c      	ldr	r3, [pc, #48]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	4a0b      	ldr	r2, [pc, #44]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006ef0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ef4:	6013      	str	r3, [r2, #0]
 8006ef6:	e025      	b.n	8006f44 <HAL_RCC_OscConfig+0x298>
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	685b      	ldr	r3, [r3, #4]
 8006efc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006f00:	d114      	bne.n	8006f2c <HAL_RCC_OscConfig+0x280>
 8006f02:	4b06      	ldr	r3, [pc, #24]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	4a05      	ldr	r2, [pc, #20]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006f08:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006f0c:	6013      	str	r3, [r2, #0]
 8006f0e:	4b03      	ldr	r3, [pc, #12]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	4a02      	ldr	r2, [pc, #8]	; (8006f1c <HAL_RCC_OscConfig+0x270>)
 8006f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006f18:	6013      	str	r3, [r2, #0]
 8006f1a:	e013      	b.n	8006f44 <HAL_RCC_OscConfig+0x298>
 8006f1c:	40021000 	.word	0x40021000
 8006f20:	0800da1c 	.word	0x0800da1c
 8006f24:	20000034 	.word	0x20000034
 8006f28:	20000038 	.word	0x20000038
 8006f2c:	4ba0      	ldr	r3, [pc, #640]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8006f2e:	681b      	ldr	r3, [r3, #0]
 8006f30:	4a9f      	ldr	r2, [pc, #636]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8006f32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	4b9d      	ldr	r3, [pc, #628]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	4a9c      	ldr	r2, [pc, #624]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8006f3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006f42:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	685b      	ldr	r3, [r3, #4]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	d013      	beq.n	8006f74 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f4c:	f7fc fff8 	bl	8003f40 <HAL_GetTick>
 8006f50:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f52:	e008      	b.n	8006f66 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f54:	f7fc fff4 	bl	8003f40 <HAL_GetTick>
 8006f58:	4602      	mov	r2, r0
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	1ad3      	subs	r3, r2, r3
 8006f5e:	2b64      	cmp	r3, #100	; 0x64
 8006f60:	d901      	bls.n	8006f66 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006f62:	2303      	movs	r3, #3
 8006f64:	e2ae      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006f66:	4b92      	ldr	r3, [pc, #584]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d0f0      	beq.n	8006f54 <HAL_RCC_OscConfig+0x2a8>
 8006f72:	e014      	b.n	8006f9e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006f74:	f7fc ffe4 	bl	8003f40 <HAL_GetTick>
 8006f78:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f7a:	e008      	b.n	8006f8e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006f7c:	f7fc ffe0 	bl	8003f40 <HAL_GetTick>
 8006f80:	4602      	mov	r2, r0
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	1ad3      	subs	r3, r2, r3
 8006f86:	2b64      	cmp	r3, #100	; 0x64
 8006f88:	d901      	bls.n	8006f8e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006f8a:	2303      	movs	r3, #3
 8006f8c:	e29a      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006f8e:	4b88      	ldr	r3, [pc, #544]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d1f0      	bne.n	8006f7c <HAL_RCC_OscConfig+0x2d0>
 8006f9a:	e000      	b.n	8006f9e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006f9c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	f003 0302 	and.w	r3, r3, #2
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d060      	beq.n	800706c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006faa:	69bb      	ldr	r3, [r7, #24]
 8006fac:	2b04      	cmp	r3, #4
 8006fae:	d005      	beq.n	8006fbc <HAL_RCC_OscConfig+0x310>
 8006fb0:	69bb      	ldr	r3, [r7, #24]
 8006fb2:	2b0c      	cmp	r3, #12
 8006fb4:	d119      	bne.n	8006fea <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006fb6:	697b      	ldr	r3, [r7, #20]
 8006fb8:	2b02      	cmp	r3, #2
 8006fba:	d116      	bne.n	8006fea <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fbc:	4b7c      	ldr	r3, [pc, #496]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006fc4:	2b00      	cmp	r3, #0
 8006fc6:	d005      	beq.n	8006fd4 <HAL_RCC_OscConfig+0x328>
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	68db      	ldr	r3, [r3, #12]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d101      	bne.n	8006fd4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	e277      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006fd4:	4b76      	ldr	r3, [pc, #472]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8006fd6:	685b      	ldr	r3, [r3, #4]
 8006fd8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	691b      	ldr	r3, [r3, #16]
 8006fe0:	061b      	lsls	r3, r3, #24
 8006fe2:	4973      	ldr	r1, [pc, #460]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8006fe4:	4313      	orrs	r3, r2
 8006fe6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006fe8:	e040      	b.n	800706c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006fea:	687b      	ldr	r3, [r7, #4]
 8006fec:	68db      	ldr	r3, [r3, #12]
 8006fee:	2b00      	cmp	r3, #0
 8006ff0:	d023      	beq.n	800703a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006ff2:	4b6f      	ldr	r3, [pc, #444]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	4a6e      	ldr	r2, [pc, #440]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8006ff8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ffc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ffe:	f7fc ff9f 	bl	8003f40 <HAL_GetTick>
 8007002:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007004:	e008      	b.n	8007018 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007006:	f7fc ff9b 	bl	8003f40 <HAL_GetTick>
 800700a:	4602      	mov	r2, r0
 800700c:	693b      	ldr	r3, [r7, #16]
 800700e:	1ad3      	subs	r3, r2, r3
 8007010:	2b02      	cmp	r3, #2
 8007012:	d901      	bls.n	8007018 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8007014:	2303      	movs	r3, #3
 8007016:	e255      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007018:	4b65      	ldr	r3, [pc, #404]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007020:	2b00      	cmp	r3, #0
 8007022:	d0f0      	beq.n	8007006 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007024:	4b62      	ldr	r3, [pc, #392]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8007026:	685b      	ldr	r3, [r3, #4]
 8007028:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	691b      	ldr	r3, [r3, #16]
 8007030:	061b      	lsls	r3, r3, #24
 8007032:	495f      	ldr	r1, [pc, #380]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8007034:	4313      	orrs	r3, r2
 8007036:	604b      	str	r3, [r1, #4]
 8007038:	e018      	b.n	800706c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800703a:	4b5d      	ldr	r3, [pc, #372]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	4a5c      	ldr	r2, [pc, #368]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8007040:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007044:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007046:	f7fc ff7b 	bl	8003f40 <HAL_GetTick>
 800704a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800704c:	e008      	b.n	8007060 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800704e:	f7fc ff77 	bl	8003f40 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	693b      	ldr	r3, [r7, #16]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	2b02      	cmp	r3, #2
 800705a:	d901      	bls.n	8007060 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800705c:	2303      	movs	r3, #3
 800705e:	e231      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8007060:	4b53      	ldr	r3, [pc, #332]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8007062:	681b      	ldr	r3, [r3, #0]
 8007064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007068:	2b00      	cmp	r3, #0
 800706a:	d1f0      	bne.n	800704e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	f003 0308 	and.w	r3, r3, #8
 8007074:	2b00      	cmp	r3, #0
 8007076:	d03c      	beq.n	80070f2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	695b      	ldr	r3, [r3, #20]
 800707c:	2b00      	cmp	r3, #0
 800707e:	d01c      	beq.n	80070ba <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007080:	4b4b      	ldr	r3, [pc, #300]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8007082:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007086:	4a4a      	ldr	r2, [pc, #296]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8007088:	f043 0301 	orr.w	r3, r3, #1
 800708c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007090:	f7fc ff56 	bl	8003f40 <HAL_GetTick>
 8007094:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8007096:	e008      	b.n	80070aa <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007098:	f7fc ff52 	bl	8003f40 <HAL_GetTick>
 800709c:	4602      	mov	r2, r0
 800709e:	693b      	ldr	r3, [r7, #16]
 80070a0:	1ad3      	subs	r3, r2, r3
 80070a2:	2b02      	cmp	r3, #2
 80070a4:	d901      	bls.n	80070aa <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80070a6:	2303      	movs	r3, #3
 80070a8:	e20c      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80070aa:	4b41      	ldr	r3, [pc, #260]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 80070ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070b0:	f003 0302 	and.w	r3, r3, #2
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0ef      	beq.n	8007098 <HAL_RCC_OscConfig+0x3ec>
 80070b8:	e01b      	b.n	80070f2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80070ba:	4b3d      	ldr	r3, [pc, #244]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 80070bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070c0:	4a3b      	ldr	r2, [pc, #236]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 80070c2:	f023 0301 	bic.w	r3, r3, #1
 80070c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ca:	f7fc ff39 	bl	8003f40 <HAL_GetTick>
 80070ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070d0:	e008      	b.n	80070e4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80070d2:	f7fc ff35 	bl	8003f40 <HAL_GetTick>
 80070d6:	4602      	mov	r2, r0
 80070d8:	693b      	ldr	r3, [r7, #16]
 80070da:	1ad3      	subs	r3, r2, r3
 80070dc:	2b02      	cmp	r3, #2
 80070de:	d901      	bls.n	80070e4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80070e0:	2303      	movs	r3, #3
 80070e2:	e1ef      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80070e4:	4b32      	ldr	r3, [pc, #200]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 80070e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80070ea:	f003 0302 	and.w	r3, r3, #2
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d1ef      	bne.n	80070d2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0304 	and.w	r3, r3, #4
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	f000 80a6 	beq.w	800724c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007100:	2300      	movs	r3, #0
 8007102:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8007104:	4b2a      	ldr	r3, [pc, #168]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8007106:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007108:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800710c:	2b00      	cmp	r3, #0
 800710e:	d10d      	bne.n	800712c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007110:	4b27      	ldr	r3, [pc, #156]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8007112:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007114:	4a26      	ldr	r2, [pc, #152]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8007116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800711a:	6593      	str	r3, [r2, #88]	; 0x58
 800711c:	4b24      	ldr	r3, [pc, #144]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 800711e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007124:	60bb      	str	r3, [r7, #8]
 8007126:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007128:	2301      	movs	r3, #1
 800712a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800712c:	4b21      	ldr	r3, [pc, #132]	; (80071b4 <HAL_RCC_OscConfig+0x508>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007134:	2b00      	cmp	r3, #0
 8007136:	d118      	bne.n	800716a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007138:	4b1e      	ldr	r3, [pc, #120]	; (80071b4 <HAL_RCC_OscConfig+0x508>)
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	4a1d      	ldr	r2, [pc, #116]	; (80071b4 <HAL_RCC_OscConfig+0x508>)
 800713e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007142:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007144:	f7fc fefc 	bl	8003f40 <HAL_GetTick>
 8007148:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800714a:	e008      	b.n	800715e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800714c:	f7fc fef8 	bl	8003f40 <HAL_GetTick>
 8007150:	4602      	mov	r2, r0
 8007152:	693b      	ldr	r3, [r7, #16]
 8007154:	1ad3      	subs	r3, r2, r3
 8007156:	2b02      	cmp	r3, #2
 8007158:	d901      	bls.n	800715e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800715a:	2303      	movs	r3, #3
 800715c:	e1b2      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800715e:	4b15      	ldr	r3, [pc, #84]	; (80071b4 <HAL_RCC_OscConfig+0x508>)
 8007160:	681b      	ldr	r3, [r3, #0]
 8007162:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007166:	2b00      	cmp	r3, #0
 8007168:	d0f0      	beq.n	800714c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	689b      	ldr	r3, [r3, #8]
 800716e:	2b01      	cmp	r3, #1
 8007170:	d108      	bne.n	8007184 <HAL_RCC_OscConfig+0x4d8>
 8007172:	4b0f      	ldr	r3, [pc, #60]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8007174:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007178:	4a0d      	ldr	r2, [pc, #52]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 800717a:	f043 0301 	orr.w	r3, r3, #1
 800717e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007182:	e029      	b.n	80071d8 <HAL_RCC_OscConfig+0x52c>
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	689b      	ldr	r3, [r3, #8]
 8007188:	2b05      	cmp	r3, #5
 800718a:	d115      	bne.n	80071b8 <HAL_RCC_OscConfig+0x50c>
 800718c:	4b08      	ldr	r3, [pc, #32]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 800718e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007192:	4a07      	ldr	r2, [pc, #28]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 8007194:	f043 0304 	orr.w	r3, r3, #4
 8007198:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800719c:	4b04      	ldr	r3, [pc, #16]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 800719e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071a2:	4a03      	ldr	r2, [pc, #12]	; (80071b0 <HAL_RCC_OscConfig+0x504>)
 80071a4:	f043 0301 	orr.w	r3, r3, #1
 80071a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071ac:	e014      	b.n	80071d8 <HAL_RCC_OscConfig+0x52c>
 80071ae:	bf00      	nop
 80071b0:	40021000 	.word	0x40021000
 80071b4:	40007000 	.word	0x40007000
 80071b8:	4b9a      	ldr	r3, [pc, #616]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 80071ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071be:	4a99      	ldr	r2, [pc, #612]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 80071c0:	f023 0301 	bic.w	r3, r3, #1
 80071c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80071c8:	4b96      	ldr	r3, [pc, #600]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 80071ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80071ce:	4a95      	ldr	r2, [pc, #596]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 80071d0:	f023 0304 	bic.w	r3, r3, #4
 80071d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	2b00      	cmp	r3, #0
 80071de:	d016      	beq.n	800720e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e0:	f7fc feae 	bl	8003f40 <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071e6:	e00a      	b.n	80071fe <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80071e8:	f7fc feaa 	bl	8003f40 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d901      	bls.n	80071fe <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80071fa:	2303      	movs	r3, #3
 80071fc:	e162      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80071fe:	4b89      	ldr	r3, [pc, #548]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 8007200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007204:	f003 0302 	and.w	r3, r3, #2
 8007208:	2b00      	cmp	r3, #0
 800720a:	d0ed      	beq.n	80071e8 <HAL_RCC_OscConfig+0x53c>
 800720c:	e015      	b.n	800723a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800720e:	f7fc fe97 	bl	8003f40 <HAL_GetTick>
 8007212:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007214:	e00a      	b.n	800722c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007216:	f7fc fe93 	bl	8003f40 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	f241 3288 	movw	r2, #5000	; 0x1388
 8007224:	4293      	cmp	r3, r2
 8007226:	d901      	bls.n	800722c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8007228:	2303      	movs	r3, #3
 800722a:	e14b      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800722c:	4b7d      	ldr	r3, [pc, #500]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 800722e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007232:	f003 0302 	and.w	r3, r3, #2
 8007236:	2b00      	cmp	r3, #0
 8007238:	d1ed      	bne.n	8007216 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800723a:	7ffb      	ldrb	r3, [r7, #31]
 800723c:	2b01      	cmp	r3, #1
 800723e:	d105      	bne.n	800724c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007240:	4b78      	ldr	r3, [pc, #480]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 8007242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007244:	4a77      	ldr	r2, [pc, #476]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 8007246:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800724a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f003 0320 	and.w	r3, r3, #32
 8007254:	2b00      	cmp	r3, #0
 8007256:	d03c      	beq.n	80072d2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800725c:	2b00      	cmp	r3, #0
 800725e:	d01c      	beq.n	800729a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8007260:	4b70      	ldr	r3, [pc, #448]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 8007262:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007266:	4a6f      	ldr	r2, [pc, #444]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 8007268:	f043 0301 	orr.w	r3, r3, #1
 800726c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007270:	f7fc fe66 	bl	8003f40 <HAL_GetTick>
 8007274:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007276:	e008      	b.n	800728a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8007278:	f7fc fe62 	bl	8003f40 <HAL_GetTick>
 800727c:	4602      	mov	r2, r0
 800727e:	693b      	ldr	r3, [r7, #16]
 8007280:	1ad3      	subs	r3, r2, r3
 8007282:	2b02      	cmp	r3, #2
 8007284:	d901      	bls.n	800728a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007286:	2303      	movs	r3, #3
 8007288:	e11c      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800728a:	4b66      	ldr	r3, [pc, #408]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 800728c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007290:	f003 0302 	and.w	r3, r3, #2
 8007294:	2b00      	cmp	r3, #0
 8007296:	d0ef      	beq.n	8007278 <HAL_RCC_OscConfig+0x5cc>
 8007298:	e01b      	b.n	80072d2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800729a:	4b62      	ldr	r3, [pc, #392]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 800729c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072a0:	4a60      	ldr	r2, [pc, #384]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 80072a2:	f023 0301 	bic.w	r3, r3, #1
 80072a6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072aa:	f7fc fe49 	bl	8003f40 <HAL_GetTick>
 80072ae:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80072b0:	e008      	b.n	80072c4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80072b2:	f7fc fe45 	bl	8003f40 <HAL_GetTick>
 80072b6:	4602      	mov	r2, r0
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	1ad3      	subs	r3, r2, r3
 80072bc:	2b02      	cmp	r3, #2
 80072be:	d901      	bls.n	80072c4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80072c0:	2303      	movs	r3, #3
 80072c2:	e0ff      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80072c4:	4b57      	ldr	r3, [pc, #348]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 80072c6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80072ca:	f003 0302 	and.w	r3, r3, #2
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d1ef      	bne.n	80072b2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	f000 80f3 	beq.w	80074c2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	f040 80c9 	bne.w	8007478 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80072e6:	4b4f      	ldr	r3, [pc, #316]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 80072e8:	68db      	ldr	r3, [r3, #12]
 80072ea:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f003 0203 	and.w	r2, r3, #3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072f6:	429a      	cmp	r2, r3
 80072f8:	d12c      	bne.n	8007354 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80072fa:	697b      	ldr	r3, [r7, #20]
 80072fc:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007304:	3b01      	subs	r3, #1
 8007306:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007308:	429a      	cmp	r2, r3
 800730a:	d123      	bne.n	8007354 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800730c:	697b      	ldr	r3, [r7, #20]
 800730e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007316:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007318:	429a      	cmp	r2, r3
 800731a:	d11b      	bne.n	8007354 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007326:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007328:	429a      	cmp	r2, r3
 800732a:	d113      	bne.n	8007354 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007336:	085b      	lsrs	r3, r3, #1
 8007338:	3b01      	subs	r3, #1
 800733a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800733c:	429a      	cmp	r2, r3
 800733e:	d109      	bne.n	8007354 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734a:	085b      	lsrs	r3, r3, #1
 800734c:	3b01      	subs	r3, #1
 800734e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8007350:	429a      	cmp	r2, r3
 8007352:	d06b      	beq.n	800742c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007354:	69bb      	ldr	r3, [r7, #24]
 8007356:	2b0c      	cmp	r3, #12
 8007358:	d062      	beq.n	8007420 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800735a:	4b32      	ldr	r3, [pc, #200]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007362:	2b00      	cmp	r3, #0
 8007364:	d001      	beq.n	800736a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8007366:	2301      	movs	r3, #1
 8007368:	e0ac      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800736a:	4b2e      	ldr	r3, [pc, #184]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a2d      	ldr	r2, [pc, #180]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 8007370:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007374:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007376:	f7fc fde3 	bl	8003f40 <HAL_GetTick>
 800737a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800737c:	e008      	b.n	8007390 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800737e:	f7fc fddf 	bl	8003f40 <HAL_GetTick>
 8007382:	4602      	mov	r2, r0
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	1ad3      	subs	r3, r2, r3
 8007388:	2b02      	cmp	r3, #2
 800738a:	d901      	bls.n	8007390 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800738c:	2303      	movs	r3, #3
 800738e:	e099      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007390:	4b24      	ldr	r3, [pc, #144]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007398:	2b00      	cmp	r3, #0
 800739a:	d1f0      	bne.n	800737e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800739c:	4b21      	ldr	r3, [pc, #132]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 800739e:	68da      	ldr	r2, [r3, #12]
 80073a0:	4b21      	ldr	r3, [pc, #132]	; (8007428 <HAL_RCC_OscConfig+0x77c>)
 80073a2:	4013      	ands	r3, r2
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80073a8:	687a      	ldr	r2, [r7, #4]
 80073aa:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80073ac:	3a01      	subs	r2, #1
 80073ae:	0112      	lsls	r2, r2, #4
 80073b0:	4311      	orrs	r1, r2
 80073b2:	687a      	ldr	r2, [r7, #4]
 80073b4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80073b6:	0212      	lsls	r2, r2, #8
 80073b8:	4311      	orrs	r1, r2
 80073ba:	687a      	ldr	r2, [r7, #4]
 80073bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80073be:	0852      	lsrs	r2, r2, #1
 80073c0:	3a01      	subs	r2, #1
 80073c2:	0552      	lsls	r2, r2, #21
 80073c4:	4311      	orrs	r1, r2
 80073c6:	687a      	ldr	r2, [r7, #4]
 80073c8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80073ca:	0852      	lsrs	r2, r2, #1
 80073cc:	3a01      	subs	r2, #1
 80073ce:	0652      	lsls	r2, r2, #25
 80073d0:	4311      	orrs	r1, r2
 80073d2:	687a      	ldr	r2, [r7, #4]
 80073d4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80073d6:	06d2      	lsls	r2, r2, #27
 80073d8:	430a      	orrs	r2, r1
 80073da:	4912      	ldr	r1, [pc, #72]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 80073dc:	4313      	orrs	r3, r2
 80073de:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80073e0:	4b10      	ldr	r3, [pc, #64]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	4a0f      	ldr	r2, [pc, #60]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 80073e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073ea:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80073ec:	4b0d      	ldr	r3, [pc, #52]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 80073ee:	68db      	ldr	r3, [r3, #12]
 80073f0:	4a0c      	ldr	r2, [pc, #48]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 80073f2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80073f6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80073f8:	f7fc fda2 	bl	8003f40 <HAL_GetTick>
 80073fc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073fe:	e008      	b.n	8007412 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007400:	f7fc fd9e 	bl	8003f40 <HAL_GetTick>
 8007404:	4602      	mov	r2, r0
 8007406:	693b      	ldr	r3, [r7, #16]
 8007408:	1ad3      	subs	r3, r2, r3
 800740a:	2b02      	cmp	r3, #2
 800740c:	d901      	bls.n	8007412 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800740e:	2303      	movs	r3, #3
 8007410:	e058      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007412:	4b04      	ldr	r3, [pc, #16]	; (8007424 <HAL_RCC_OscConfig+0x778>)
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800741a:	2b00      	cmp	r3, #0
 800741c:	d0f0      	beq.n	8007400 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800741e:	e050      	b.n	80074c2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8007420:	2301      	movs	r3, #1
 8007422:	e04f      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
 8007424:	40021000 	.word	0x40021000
 8007428:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800742c:	4b27      	ldr	r3, [pc, #156]	; (80074cc <HAL_RCC_OscConfig+0x820>)
 800742e:	681b      	ldr	r3, [r3, #0]
 8007430:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007434:	2b00      	cmp	r3, #0
 8007436:	d144      	bne.n	80074c2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8007438:	4b24      	ldr	r3, [pc, #144]	; (80074cc <HAL_RCC_OscConfig+0x820>)
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	4a23      	ldr	r2, [pc, #140]	; (80074cc <HAL_RCC_OscConfig+0x820>)
 800743e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007442:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007444:	4b21      	ldr	r3, [pc, #132]	; (80074cc <HAL_RCC_OscConfig+0x820>)
 8007446:	68db      	ldr	r3, [r3, #12]
 8007448:	4a20      	ldr	r2, [pc, #128]	; (80074cc <HAL_RCC_OscConfig+0x820>)
 800744a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800744e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8007450:	f7fc fd76 	bl	8003f40 <HAL_GetTick>
 8007454:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8007456:	e008      	b.n	800746a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007458:	f7fc fd72 	bl	8003f40 <HAL_GetTick>
 800745c:	4602      	mov	r2, r0
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	1ad3      	subs	r3, r2, r3
 8007462:	2b02      	cmp	r3, #2
 8007464:	d901      	bls.n	800746a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8007466:	2303      	movs	r3, #3
 8007468:	e02c      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800746a:	4b18      	ldr	r3, [pc, #96]	; (80074cc <HAL_RCC_OscConfig+0x820>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007472:	2b00      	cmp	r3, #0
 8007474:	d0f0      	beq.n	8007458 <HAL_RCC_OscConfig+0x7ac>
 8007476:	e024      	b.n	80074c2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	2b0c      	cmp	r3, #12
 800747c:	d01f      	beq.n	80074be <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800747e:	4b13      	ldr	r3, [pc, #76]	; (80074cc <HAL_RCC_OscConfig+0x820>)
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	4a12      	ldr	r2, [pc, #72]	; (80074cc <HAL_RCC_OscConfig+0x820>)
 8007484:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007488:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800748a:	f7fc fd59 	bl	8003f40 <HAL_GetTick>
 800748e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007490:	e008      	b.n	80074a4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007492:	f7fc fd55 	bl	8003f40 <HAL_GetTick>
 8007496:	4602      	mov	r2, r0
 8007498:	693b      	ldr	r3, [r7, #16]
 800749a:	1ad3      	subs	r3, r2, r3
 800749c:	2b02      	cmp	r3, #2
 800749e:	d901      	bls.n	80074a4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80074a0:	2303      	movs	r3, #3
 80074a2:	e00f      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80074a4:	4b09      	ldr	r3, [pc, #36]	; (80074cc <HAL_RCC_OscConfig+0x820>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d1f0      	bne.n	8007492 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80074b0:	4b06      	ldr	r3, [pc, #24]	; (80074cc <HAL_RCC_OscConfig+0x820>)
 80074b2:	68da      	ldr	r2, [r3, #12]
 80074b4:	4905      	ldr	r1, [pc, #20]	; (80074cc <HAL_RCC_OscConfig+0x820>)
 80074b6:	4b06      	ldr	r3, [pc, #24]	; (80074d0 <HAL_RCC_OscConfig+0x824>)
 80074b8:	4013      	ands	r3, r2
 80074ba:	60cb      	str	r3, [r1, #12]
 80074bc:	e001      	b.n	80074c2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80074be:	2301      	movs	r3, #1
 80074c0:	e000      	b.n	80074c4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80074c2:	2300      	movs	r3, #0
}
 80074c4:	4618      	mov	r0, r3
 80074c6:	3720      	adds	r7, #32
 80074c8:	46bd      	mov	sp, r7
 80074ca:	bd80      	pop	{r7, pc}
 80074cc:	40021000 	.word	0x40021000
 80074d0:	feeefffc 	.word	0xfeeefffc

080074d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d101      	bne.n	80074e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e4:	2301      	movs	r3, #1
 80074e6:	e0e7      	b.n	80076b8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074e8:	4b75      	ldr	r3, [pc, #468]	; (80076c0 <HAL_RCC_ClockConfig+0x1ec>)
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	f003 0307 	and.w	r3, r3, #7
 80074f0:	683a      	ldr	r2, [r7, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d910      	bls.n	8007518 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074f6:	4b72      	ldr	r3, [pc, #456]	; (80076c0 <HAL_RCC_ClockConfig+0x1ec>)
 80074f8:	681b      	ldr	r3, [r3, #0]
 80074fa:	f023 0207 	bic.w	r2, r3, #7
 80074fe:	4970      	ldr	r1, [pc, #448]	; (80076c0 <HAL_RCC_ClockConfig+0x1ec>)
 8007500:	683b      	ldr	r3, [r7, #0]
 8007502:	4313      	orrs	r3, r2
 8007504:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007506:	4b6e      	ldr	r3, [pc, #440]	; (80076c0 <HAL_RCC_ClockConfig+0x1ec>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	f003 0307 	and.w	r3, r3, #7
 800750e:	683a      	ldr	r2, [r7, #0]
 8007510:	429a      	cmp	r2, r3
 8007512:	d001      	beq.n	8007518 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e0cf      	b.n	80076b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007518:	687b      	ldr	r3, [r7, #4]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f003 0302 	and.w	r3, r3, #2
 8007520:	2b00      	cmp	r3, #0
 8007522:	d010      	beq.n	8007546 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	689a      	ldr	r2, [r3, #8]
 8007528:	4b66      	ldr	r3, [pc, #408]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 800752a:	689b      	ldr	r3, [r3, #8]
 800752c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007530:	429a      	cmp	r2, r3
 8007532:	d908      	bls.n	8007546 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007534:	4b63      	ldr	r3, [pc, #396]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007536:	689b      	ldr	r3, [r3, #8]
 8007538:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	689b      	ldr	r3, [r3, #8]
 8007540:	4960      	ldr	r1, [pc, #384]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007542:	4313      	orrs	r3, r2
 8007544:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	f003 0301 	and.w	r3, r3, #1
 800754e:	2b00      	cmp	r3, #0
 8007550:	d04c      	beq.n	80075ec <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	685b      	ldr	r3, [r3, #4]
 8007556:	2b03      	cmp	r3, #3
 8007558:	d107      	bne.n	800756a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800755a:	4b5a      	ldr	r3, [pc, #360]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007562:	2b00      	cmp	r3, #0
 8007564:	d121      	bne.n	80075aa <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8007566:	2301      	movs	r3, #1
 8007568:	e0a6      	b.n	80076b8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	685b      	ldr	r3, [r3, #4]
 800756e:	2b02      	cmp	r3, #2
 8007570:	d107      	bne.n	8007582 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8007572:	4b54      	ldr	r3, [pc, #336]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757a:	2b00      	cmp	r3, #0
 800757c:	d115      	bne.n	80075aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	e09a      	b.n	80076b8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	685b      	ldr	r3, [r3, #4]
 8007586:	2b00      	cmp	r3, #0
 8007588:	d107      	bne.n	800759a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800758a:	4b4e      	ldr	r3, [pc, #312]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 800758c:	681b      	ldr	r3, [r3, #0]
 800758e:	f003 0302 	and.w	r3, r3, #2
 8007592:	2b00      	cmp	r3, #0
 8007594:	d109      	bne.n	80075aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007596:	2301      	movs	r3, #1
 8007598:	e08e      	b.n	80076b8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800759a:	4b4a      	ldr	r3, [pc, #296]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d101      	bne.n	80075aa <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80075a6:	2301      	movs	r3, #1
 80075a8:	e086      	b.n	80076b8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80075aa:	4b46      	ldr	r3, [pc, #280]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 80075ac:	689b      	ldr	r3, [r3, #8]
 80075ae:	f023 0203 	bic.w	r2, r3, #3
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	685b      	ldr	r3, [r3, #4]
 80075b6:	4943      	ldr	r1, [pc, #268]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 80075b8:	4313      	orrs	r3, r2
 80075ba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80075bc:	f7fc fcc0 	bl	8003f40 <HAL_GetTick>
 80075c0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075c2:	e00a      	b.n	80075da <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075c4:	f7fc fcbc 	bl	8003f40 <HAL_GetTick>
 80075c8:	4602      	mov	r2, r0
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	1ad3      	subs	r3, r2, r3
 80075ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d901      	bls.n	80075da <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80075d6:	2303      	movs	r3, #3
 80075d8:	e06e      	b.n	80076b8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075da:	4b3a      	ldr	r3, [pc, #232]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 80075dc:	689b      	ldr	r3, [r3, #8]
 80075de:	f003 020c 	and.w	r2, r3, #12
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	685b      	ldr	r3, [r3, #4]
 80075e6:	009b      	lsls	r3, r3, #2
 80075e8:	429a      	cmp	r2, r3
 80075ea:	d1eb      	bne.n	80075c4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	f003 0302 	and.w	r3, r3, #2
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d010      	beq.n	800761a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	689a      	ldr	r2, [r3, #8]
 80075fc:	4b31      	ldr	r3, [pc, #196]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 80075fe:	689b      	ldr	r3, [r3, #8]
 8007600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007604:	429a      	cmp	r2, r3
 8007606:	d208      	bcs.n	800761a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007608:	4b2e      	ldr	r3, [pc, #184]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 800760a:	689b      	ldr	r3, [r3, #8]
 800760c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	492b      	ldr	r1, [pc, #172]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007616:	4313      	orrs	r3, r2
 8007618:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800761a:	4b29      	ldr	r3, [pc, #164]	; (80076c0 <HAL_RCC_ClockConfig+0x1ec>)
 800761c:	681b      	ldr	r3, [r3, #0]
 800761e:	f003 0307 	and.w	r3, r3, #7
 8007622:	683a      	ldr	r2, [r7, #0]
 8007624:	429a      	cmp	r2, r3
 8007626:	d210      	bcs.n	800764a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007628:	4b25      	ldr	r3, [pc, #148]	; (80076c0 <HAL_RCC_ClockConfig+0x1ec>)
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	f023 0207 	bic.w	r2, r3, #7
 8007630:	4923      	ldr	r1, [pc, #140]	; (80076c0 <HAL_RCC_ClockConfig+0x1ec>)
 8007632:	683b      	ldr	r3, [r7, #0]
 8007634:	4313      	orrs	r3, r2
 8007636:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007638:	4b21      	ldr	r3, [pc, #132]	; (80076c0 <HAL_RCC_ClockConfig+0x1ec>)
 800763a:	681b      	ldr	r3, [r3, #0]
 800763c:	f003 0307 	and.w	r3, r3, #7
 8007640:	683a      	ldr	r2, [r7, #0]
 8007642:	429a      	cmp	r2, r3
 8007644:	d001      	beq.n	800764a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8007646:	2301      	movs	r3, #1
 8007648:	e036      	b.n	80076b8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	f003 0304 	and.w	r3, r3, #4
 8007652:	2b00      	cmp	r3, #0
 8007654:	d008      	beq.n	8007668 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007656:	4b1b      	ldr	r3, [pc, #108]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007658:	689b      	ldr	r3, [r3, #8]
 800765a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	68db      	ldr	r3, [r3, #12]
 8007662:	4918      	ldr	r1, [pc, #96]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007664:	4313      	orrs	r3, r2
 8007666:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007668:	687b      	ldr	r3, [r7, #4]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	f003 0308 	and.w	r3, r3, #8
 8007670:	2b00      	cmp	r3, #0
 8007672:	d009      	beq.n	8007688 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007674:	4b13      	ldr	r3, [pc, #76]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007676:	689b      	ldr	r3, [r3, #8]
 8007678:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	691b      	ldr	r3, [r3, #16]
 8007680:	00db      	lsls	r3, r3, #3
 8007682:	4910      	ldr	r1, [pc, #64]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007684:	4313      	orrs	r3, r2
 8007686:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007688:	f000 f824 	bl	80076d4 <HAL_RCC_GetSysClockFreq>
 800768c:	4602      	mov	r2, r0
 800768e:	4b0d      	ldr	r3, [pc, #52]	; (80076c4 <HAL_RCC_ClockConfig+0x1f0>)
 8007690:	689b      	ldr	r3, [r3, #8]
 8007692:	091b      	lsrs	r3, r3, #4
 8007694:	f003 030f 	and.w	r3, r3, #15
 8007698:	490b      	ldr	r1, [pc, #44]	; (80076c8 <HAL_RCC_ClockConfig+0x1f4>)
 800769a:	5ccb      	ldrb	r3, [r1, r3]
 800769c:	f003 031f 	and.w	r3, r3, #31
 80076a0:	fa22 f303 	lsr.w	r3, r2, r3
 80076a4:	4a09      	ldr	r2, [pc, #36]	; (80076cc <HAL_RCC_ClockConfig+0x1f8>)
 80076a6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80076a8:	4b09      	ldr	r3, [pc, #36]	; (80076d0 <HAL_RCC_ClockConfig+0x1fc>)
 80076aa:	681b      	ldr	r3, [r3, #0]
 80076ac:	4618      	mov	r0, r3
 80076ae:	f7fc faf9 	bl	8003ca4 <HAL_InitTick>
 80076b2:	4603      	mov	r3, r0
 80076b4:	72fb      	strb	r3, [r7, #11]

  return status;
 80076b6:	7afb      	ldrb	r3, [r7, #11]
}
 80076b8:	4618      	mov	r0, r3
 80076ba:	3710      	adds	r7, #16
 80076bc:	46bd      	mov	sp, r7
 80076be:	bd80      	pop	{r7, pc}
 80076c0:	40022000 	.word	0x40022000
 80076c4:	40021000 	.word	0x40021000
 80076c8:	0800da1c 	.word	0x0800da1c
 80076cc:	20000034 	.word	0x20000034
 80076d0:	20000038 	.word	0x20000038

080076d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076d4:	b480      	push	{r7}
 80076d6:	b089      	sub	sp, #36	; 0x24
 80076d8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80076da:	2300      	movs	r3, #0
 80076dc:	61fb      	str	r3, [r7, #28]
 80076de:	2300      	movs	r3, #0
 80076e0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80076e2:	4b3e      	ldr	r3, [pc, #248]	; (80077dc <HAL_RCC_GetSysClockFreq+0x108>)
 80076e4:	689b      	ldr	r3, [r3, #8]
 80076e6:	f003 030c 	and.w	r3, r3, #12
 80076ea:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80076ec:	4b3b      	ldr	r3, [pc, #236]	; (80077dc <HAL_RCC_GetSysClockFreq+0x108>)
 80076ee:	68db      	ldr	r3, [r3, #12]
 80076f0:	f003 0303 	and.w	r3, r3, #3
 80076f4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d005      	beq.n	8007708 <HAL_RCC_GetSysClockFreq+0x34>
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	2b0c      	cmp	r3, #12
 8007700:	d121      	bne.n	8007746 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	2b01      	cmp	r3, #1
 8007706:	d11e      	bne.n	8007746 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007708:	4b34      	ldr	r3, [pc, #208]	; (80077dc <HAL_RCC_GetSysClockFreq+0x108>)
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	f003 0308 	and.w	r3, r3, #8
 8007710:	2b00      	cmp	r3, #0
 8007712:	d107      	bne.n	8007724 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007714:	4b31      	ldr	r3, [pc, #196]	; (80077dc <HAL_RCC_GetSysClockFreq+0x108>)
 8007716:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800771a:	0a1b      	lsrs	r3, r3, #8
 800771c:	f003 030f 	and.w	r3, r3, #15
 8007720:	61fb      	str	r3, [r7, #28]
 8007722:	e005      	b.n	8007730 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8007724:	4b2d      	ldr	r3, [pc, #180]	; (80077dc <HAL_RCC_GetSysClockFreq+0x108>)
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	091b      	lsrs	r3, r3, #4
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8007730:	4a2b      	ldr	r2, [pc, #172]	; (80077e0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8007732:	69fb      	ldr	r3, [r7, #28]
 8007734:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007738:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	2b00      	cmp	r3, #0
 800773e:	d10d      	bne.n	800775c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8007740:	69fb      	ldr	r3, [r7, #28]
 8007742:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8007744:	e00a      	b.n	800775c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8007746:	693b      	ldr	r3, [r7, #16]
 8007748:	2b04      	cmp	r3, #4
 800774a:	d102      	bne.n	8007752 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800774c:	4b25      	ldr	r3, [pc, #148]	; (80077e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800774e:	61bb      	str	r3, [r7, #24]
 8007750:	e004      	b.n	800775c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8007752:	693b      	ldr	r3, [r7, #16]
 8007754:	2b08      	cmp	r3, #8
 8007756:	d101      	bne.n	800775c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8007758:	4b23      	ldr	r3, [pc, #140]	; (80077e8 <HAL_RCC_GetSysClockFreq+0x114>)
 800775a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800775c:	693b      	ldr	r3, [r7, #16]
 800775e:	2b0c      	cmp	r3, #12
 8007760:	d134      	bne.n	80077cc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8007762:	4b1e      	ldr	r3, [pc, #120]	; (80077dc <HAL_RCC_GetSysClockFreq+0x108>)
 8007764:	68db      	ldr	r3, [r3, #12]
 8007766:	f003 0303 	and.w	r3, r3, #3
 800776a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	2b02      	cmp	r3, #2
 8007770:	d003      	beq.n	800777a <HAL_RCC_GetSysClockFreq+0xa6>
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	2b03      	cmp	r3, #3
 8007776:	d003      	beq.n	8007780 <HAL_RCC_GetSysClockFreq+0xac>
 8007778:	e005      	b.n	8007786 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800777a:	4b1a      	ldr	r3, [pc, #104]	; (80077e4 <HAL_RCC_GetSysClockFreq+0x110>)
 800777c:	617b      	str	r3, [r7, #20]
      break;
 800777e:	e005      	b.n	800778c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8007780:	4b19      	ldr	r3, [pc, #100]	; (80077e8 <HAL_RCC_GetSysClockFreq+0x114>)
 8007782:	617b      	str	r3, [r7, #20]
      break;
 8007784:	e002      	b.n	800778c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007786:	69fb      	ldr	r3, [r7, #28]
 8007788:	617b      	str	r3, [r7, #20]
      break;
 800778a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800778c:	4b13      	ldr	r3, [pc, #76]	; (80077dc <HAL_RCC_GetSysClockFreq+0x108>)
 800778e:	68db      	ldr	r3, [r3, #12]
 8007790:	091b      	lsrs	r3, r3, #4
 8007792:	f003 0307 	and.w	r3, r3, #7
 8007796:	3301      	adds	r3, #1
 8007798:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800779a:	4b10      	ldr	r3, [pc, #64]	; (80077dc <HAL_RCC_GetSysClockFreq+0x108>)
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	0a1b      	lsrs	r3, r3, #8
 80077a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80077a4:	697a      	ldr	r2, [r7, #20]
 80077a6:	fb03 f202 	mul.w	r2, r3, r2
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	fbb2 f3f3 	udiv	r3, r2, r3
 80077b0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80077b2:	4b0a      	ldr	r3, [pc, #40]	; (80077dc <HAL_RCC_GetSysClockFreq+0x108>)
 80077b4:	68db      	ldr	r3, [r3, #12]
 80077b6:	0e5b      	lsrs	r3, r3, #25
 80077b8:	f003 0303 	and.w	r3, r3, #3
 80077bc:	3301      	adds	r3, #1
 80077be:	005b      	lsls	r3, r3, #1
 80077c0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80077c2:	697a      	ldr	r2, [r7, #20]
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80077ca:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80077cc:	69bb      	ldr	r3, [r7, #24]
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3724      	adds	r7, #36	; 0x24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077d8:	4770      	bx	lr
 80077da:	bf00      	nop
 80077dc:	40021000 	.word	0x40021000
 80077e0:	0800da34 	.word	0x0800da34
 80077e4:	00f42400 	.word	0x00f42400
 80077e8:	007a1200 	.word	0x007a1200

080077ec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80077ec:	b480      	push	{r7}
 80077ee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80077f0:	4b03      	ldr	r3, [pc, #12]	; (8007800 <HAL_RCC_GetHCLKFreq+0x14>)
 80077f2:	681b      	ldr	r3, [r3, #0]
}
 80077f4:	4618      	mov	r0, r3
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr
 80077fe:	bf00      	nop
 8007800:	20000034 	.word	0x20000034

08007804 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007804:	b580      	push	{r7, lr}
 8007806:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007808:	f7ff fff0 	bl	80077ec <HAL_RCC_GetHCLKFreq>
 800780c:	4602      	mov	r2, r0
 800780e:	4b06      	ldr	r3, [pc, #24]	; (8007828 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007810:	689b      	ldr	r3, [r3, #8]
 8007812:	0a1b      	lsrs	r3, r3, #8
 8007814:	f003 0307 	and.w	r3, r3, #7
 8007818:	4904      	ldr	r1, [pc, #16]	; (800782c <HAL_RCC_GetPCLK1Freq+0x28>)
 800781a:	5ccb      	ldrb	r3, [r1, r3]
 800781c:	f003 031f 	and.w	r3, r3, #31
 8007820:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007824:	4618      	mov	r0, r3
 8007826:	bd80      	pop	{r7, pc}
 8007828:	40021000 	.word	0x40021000
 800782c:	0800da2c 	.word	0x0800da2c

08007830 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8007834:	f7ff ffda 	bl	80077ec <HAL_RCC_GetHCLKFreq>
 8007838:	4602      	mov	r2, r0
 800783a:	4b06      	ldr	r3, [pc, #24]	; (8007854 <HAL_RCC_GetPCLK2Freq+0x24>)
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	0adb      	lsrs	r3, r3, #11
 8007840:	f003 0307 	and.w	r3, r3, #7
 8007844:	4904      	ldr	r1, [pc, #16]	; (8007858 <HAL_RCC_GetPCLK2Freq+0x28>)
 8007846:	5ccb      	ldrb	r3, [r1, r3]
 8007848:	f003 031f 	and.w	r3, r3, #31
 800784c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007850:	4618      	mov	r0, r3
 8007852:	bd80      	pop	{r7, pc}
 8007854:	40021000 	.word	0x40021000
 8007858:	0800da2c 	.word	0x0800da2c

0800785c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800785c:	b480      	push	{r7}
 800785e:	b083      	sub	sp, #12
 8007860:	af00      	add	r7, sp, #0
 8007862:	6078      	str	r0, [r7, #4]
 8007864:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	220f      	movs	r2, #15
 800786a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800786c:	4b12      	ldr	r3, [pc, #72]	; (80078b8 <HAL_RCC_GetClockConfig+0x5c>)
 800786e:	689b      	ldr	r3, [r3, #8]
 8007870:	f003 0203 	and.w	r2, r3, #3
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8007878:	4b0f      	ldr	r3, [pc, #60]	; (80078b8 <HAL_RCC_GetClockConfig+0x5c>)
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007884:	4b0c      	ldr	r3, [pc, #48]	; (80078b8 <HAL_RCC_GetClockConfig+0x5c>)
 8007886:	689b      	ldr	r3, [r3, #8]
 8007888:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8007890:	4b09      	ldr	r3, [pc, #36]	; (80078b8 <HAL_RCC_GetClockConfig+0x5c>)
 8007892:	689b      	ldr	r3, [r3, #8]
 8007894:	08db      	lsrs	r3, r3, #3
 8007896:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800789e:	4b07      	ldr	r3, [pc, #28]	; (80078bc <HAL_RCC_GetClockConfig+0x60>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f003 0207 	and.w	r2, r3, #7
 80078a6:	683b      	ldr	r3, [r7, #0]
 80078a8:	601a      	str	r2, [r3, #0]
}
 80078aa:	bf00      	nop
 80078ac:	370c      	adds	r7, #12
 80078ae:	46bd      	mov	sp, r7
 80078b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078b4:	4770      	bx	lr
 80078b6:	bf00      	nop
 80078b8:	40021000 	.word	0x40021000
 80078bc:	40022000 	.word	0x40022000

080078c0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80078c0:	b580      	push	{r7, lr}
 80078c2:	b086      	sub	sp, #24
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80078c8:	2300      	movs	r3, #0
 80078ca:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80078cc:	4b2a      	ldr	r3, [pc, #168]	; (8007978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078d0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d003      	beq.n	80078e0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80078d8:	f7ff f984 	bl	8006be4 <HAL_PWREx_GetVoltageRange>
 80078dc:	6178      	str	r0, [r7, #20]
 80078de:	e014      	b.n	800790a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80078e0:	4b25      	ldr	r3, [pc, #148]	; (8007978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078e4:	4a24      	ldr	r2, [pc, #144]	; (8007978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ea:	6593      	str	r3, [r2, #88]	; 0x58
 80078ec:	4b22      	ldr	r3, [pc, #136]	; (8007978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80078ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078f4:	60fb      	str	r3, [r7, #12]
 80078f6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80078f8:	f7ff f974 	bl	8006be4 <HAL_PWREx_GetVoltageRange>
 80078fc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80078fe:	4b1e      	ldr	r3, [pc, #120]	; (8007978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007902:	4a1d      	ldr	r2, [pc, #116]	; (8007978 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007904:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007908:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800790a:	697b      	ldr	r3, [r7, #20]
 800790c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007910:	d10b      	bne.n	800792a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2b80      	cmp	r3, #128	; 0x80
 8007916:	d919      	bls.n	800794c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2ba0      	cmp	r3, #160	; 0xa0
 800791c:	d902      	bls.n	8007924 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800791e:	2302      	movs	r3, #2
 8007920:	613b      	str	r3, [r7, #16]
 8007922:	e013      	b.n	800794c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007924:	2301      	movs	r3, #1
 8007926:	613b      	str	r3, [r7, #16]
 8007928:	e010      	b.n	800794c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	2b80      	cmp	r3, #128	; 0x80
 800792e:	d902      	bls.n	8007936 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8007930:	2303      	movs	r3, #3
 8007932:	613b      	str	r3, [r7, #16]
 8007934:	e00a      	b.n	800794c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2b80      	cmp	r3, #128	; 0x80
 800793a:	d102      	bne.n	8007942 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800793c:	2302      	movs	r3, #2
 800793e:	613b      	str	r3, [r7, #16]
 8007940:	e004      	b.n	800794c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	2b70      	cmp	r3, #112	; 0x70
 8007946:	d101      	bne.n	800794c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8007948:	2301      	movs	r3, #1
 800794a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800794c:	4b0b      	ldr	r3, [pc, #44]	; (800797c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	f023 0207 	bic.w	r2, r3, #7
 8007954:	4909      	ldr	r1, [pc, #36]	; (800797c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8007956:	693b      	ldr	r3, [r7, #16]
 8007958:	4313      	orrs	r3, r2
 800795a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800795c:	4b07      	ldr	r3, [pc, #28]	; (800797c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f003 0307 	and.w	r3, r3, #7
 8007964:	693a      	ldr	r2, [r7, #16]
 8007966:	429a      	cmp	r2, r3
 8007968:	d001      	beq.n	800796e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800796a:	2301      	movs	r3, #1
 800796c:	e000      	b.n	8007970 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800796e:	2300      	movs	r3, #0
}
 8007970:	4618      	mov	r0, r3
 8007972:	3718      	adds	r7, #24
 8007974:	46bd      	mov	sp, r7
 8007976:	bd80      	pop	{r7, pc}
 8007978:	40021000 	.word	0x40021000
 800797c:	40022000 	.word	0x40022000

08007980 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b086      	sub	sp, #24
 8007984:	af00      	add	r7, sp, #0
 8007986:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007988:	2300      	movs	r3, #0
 800798a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800798c:	2300      	movs	r3, #0
 800798e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007998:	2b00      	cmp	r3, #0
 800799a:	d031      	beq.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80079a4:	d01a      	beq.n	80079dc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80079a6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80079aa:	d814      	bhi.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d009      	beq.n	80079c4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80079b0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80079b4:	d10f      	bne.n	80079d6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80079b6:	4b5d      	ldr	r3, [pc, #372]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079b8:	68db      	ldr	r3, [r3, #12]
 80079ba:	4a5c      	ldr	r2, [pc, #368]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80079c0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80079c2:	e00c      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	3304      	adds	r3, #4
 80079c8:	2100      	movs	r1, #0
 80079ca:	4618      	mov	r0, r3
 80079cc:	f000 f9de 	bl	8007d8c <RCCEx_PLLSAI1_Config>
 80079d0:	4603      	mov	r3, r0
 80079d2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80079d4:	e003      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80079d6:	2301      	movs	r3, #1
 80079d8:	74fb      	strb	r3, [r7, #19]
      break;
 80079da:	e000      	b.n	80079de <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80079dc:	bf00      	nop
    }

    if(ret == HAL_OK)
 80079de:	7cfb      	ldrb	r3, [r7, #19]
 80079e0:	2b00      	cmp	r3, #0
 80079e2:	d10b      	bne.n	80079fc <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80079e4:	4b51      	ldr	r3, [pc, #324]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079ea:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80079f2:	494e      	ldr	r1, [pc, #312]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80079f4:	4313      	orrs	r3, r2
 80079f6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80079fa:	e001      	b.n	8007a00 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079fc:	7cfb      	ldrb	r3, [r7, #19]
 80079fe:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007a08:	2b00      	cmp	r3, #0
 8007a0a:	f000 809e 	beq.w	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a0e:	2300      	movs	r3, #0
 8007a10:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8007a12:	4b46      	ldr	r3, [pc, #280]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a16:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d101      	bne.n	8007a22 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8007a1e:	2301      	movs	r3, #1
 8007a20:	e000      	b.n	8007a24 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8007a22:	2300      	movs	r3, #0
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d00d      	beq.n	8007a44 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a28:	4b40      	ldr	r3, [pc, #256]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a2c:	4a3f      	ldr	r2, [pc, #252]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a32:	6593      	str	r3, [r2, #88]	; 0x58
 8007a34:	4b3d      	ldr	r3, [pc, #244]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a3c:	60bb      	str	r3, [r7, #8]
 8007a3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a40:	2301      	movs	r3, #1
 8007a42:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8007a44:	4b3a      	ldr	r3, [pc, #232]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007a46:	681b      	ldr	r3, [r3, #0]
 8007a48:	4a39      	ldr	r2, [pc, #228]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a4e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8007a50:	f7fc fa76 	bl	8003f40 <HAL_GetTick>
 8007a54:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a56:	e009      	b.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a58:	f7fc fa72 	bl	8003f40 <HAL_GetTick>
 8007a5c:	4602      	mov	r2, r0
 8007a5e:	68fb      	ldr	r3, [r7, #12]
 8007a60:	1ad3      	subs	r3, r2, r3
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d902      	bls.n	8007a6c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8007a66:	2303      	movs	r3, #3
 8007a68:	74fb      	strb	r3, [r7, #19]
        break;
 8007a6a:	e005      	b.n	8007a78 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8007a6c:	4b30      	ldr	r3, [pc, #192]	; (8007b30 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d0ef      	beq.n	8007a58 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8007a78:	7cfb      	ldrb	r3, [r7, #19]
 8007a7a:	2b00      	cmp	r3, #0
 8007a7c:	d15a      	bne.n	8007b34 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8007a7e:	4b2b      	ldr	r3, [pc, #172]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a80:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007a84:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007a88:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d01e      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007a94:	697a      	ldr	r2, [r7, #20]
 8007a96:	429a      	cmp	r2, r3
 8007a98:	d019      	beq.n	8007ace <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007a9a:	4b24      	ldr	r3, [pc, #144]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007a9c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007aa4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007aa6:	4b21      	ldr	r3, [pc, #132]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007aa8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007aac:	4a1f      	ldr	r2, [pc, #124]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007aae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007ab2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007ab6:	4b1d      	ldr	r3, [pc, #116]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ab8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007abc:	4a1b      	ldr	r2, [pc, #108]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007ac2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007ac6:	4a19      	ldr	r2, [pc, #100]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8007ace:	697b      	ldr	r3, [r7, #20]
 8007ad0:	f003 0301 	and.w	r3, r3, #1
 8007ad4:	2b00      	cmp	r3, #0
 8007ad6:	d016      	beq.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007ad8:	f7fc fa32 	bl	8003f40 <HAL_GetTick>
 8007adc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007ade:	e00b      	b.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007ae0:	f7fc fa2e 	bl	8003f40 <HAL_GetTick>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	1ad3      	subs	r3, r2, r3
 8007aea:	f241 3288 	movw	r2, #5000	; 0x1388
 8007aee:	4293      	cmp	r3, r2
 8007af0:	d902      	bls.n	8007af8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	74fb      	strb	r3, [r7, #19]
            break;
 8007af6:	e006      	b.n	8007b06 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007af8:	4b0c      	ldr	r3, [pc, #48]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007afa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007afe:	f003 0302 	and.w	r3, r3, #2
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d0ec      	beq.n	8007ae0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007b06:	7cfb      	ldrb	r3, [r7, #19]
 8007b08:	2b00      	cmp	r3, #0
 8007b0a:	d10b      	bne.n	8007b24 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007b0c:	4b07      	ldr	r3, [pc, #28]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007b12:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b1a:	4904      	ldr	r1, [pc, #16]	; (8007b2c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007b1c:	4313      	orrs	r3, r2
 8007b1e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8007b22:	e009      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8007b24:	7cfb      	ldrb	r3, [r7, #19]
 8007b26:	74bb      	strb	r3, [r7, #18]
 8007b28:	e006      	b.n	8007b38 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8007b2a:	bf00      	nop
 8007b2c:	40021000 	.word	0x40021000
 8007b30:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007b34:	7cfb      	ldrb	r3, [r7, #19]
 8007b36:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b38:	7c7b      	ldrb	r3, [r7, #17]
 8007b3a:	2b01      	cmp	r3, #1
 8007b3c:	d105      	bne.n	8007b4a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b3e:	4b8a      	ldr	r3, [pc, #552]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007b42:	4a89      	ldr	r2, [pc, #548]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b48:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	f003 0301 	and.w	r3, r3, #1
 8007b52:	2b00      	cmp	r3, #0
 8007b54:	d00a      	beq.n	8007b6c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8007b56:	4b84      	ldr	r3, [pc, #528]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b5c:	f023 0203 	bic.w	r2, r3, #3
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	6a1b      	ldr	r3, [r3, #32]
 8007b64:	4980      	ldr	r1, [pc, #512]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b66:	4313      	orrs	r3, r2
 8007b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d00a      	beq.n	8007b8e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8007b78:	4b7b      	ldr	r3, [pc, #492]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b7e:	f023 020c 	bic.w	r2, r3, #12
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	4978      	ldr	r1, [pc, #480]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f003 0320 	and.w	r3, r3, #32
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00a      	beq.n	8007bb0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007b9a:	4b73      	ldr	r3, [pc, #460]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ba0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ba8:	496f      	ldr	r1, [pc, #444]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007baa:	4313      	orrs	r3, r2
 8007bac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00a      	beq.n	8007bd2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007bbc:	4b6a      	ldr	r3, [pc, #424]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007bca:	4967      	ldr	r1, [pc, #412]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007bcc:	4313      	orrs	r3, r2
 8007bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	681b      	ldr	r3, [r3, #0]
 8007bd6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d00a      	beq.n	8007bf4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007bde:	4b62      	ldr	r3, [pc, #392]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007be0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007be4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007bec:	495e      	ldr	r1, [pc, #376]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007bee:	4313      	orrs	r3, r2
 8007bf0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfc:	2b00      	cmp	r3, #0
 8007bfe:	d00a      	beq.n	8007c16 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007c00:	4b59      	ldr	r3, [pc, #356]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c06:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c0e:	4956      	ldr	r1, [pc, #344]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c10:	4313      	orrs	r3, r2
 8007c12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	681b      	ldr	r3, [r3, #0]
 8007c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d00a      	beq.n	8007c38 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007c22:	4b51      	ldr	r3, [pc, #324]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007c30:	494d      	ldr	r1, [pc, #308]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c32:	4313      	orrs	r3, r2
 8007c34:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d028      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007c44:	4b48      	ldr	r3, [pc, #288]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007c4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c52:	4945      	ldr	r1, [pc, #276]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c54:	4313      	orrs	r3, r2
 8007c56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007c62:	d106      	bne.n	8007c72 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007c64:	4b40      	ldr	r3, [pc, #256]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	4a3f      	ldr	r2, [pc, #252]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007c6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007c6e:	60d3      	str	r3, [r2, #12]
 8007c70:	e011      	b.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007c72:	687b      	ldr	r3, [r7, #4]
 8007c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c76:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007c7a:	d10c      	bne.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	3304      	adds	r3, #4
 8007c80:	2101      	movs	r1, #1
 8007c82:	4618      	mov	r0, r3
 8007c84:	f000 f882 	bl	8007d8c <RCCEx_PLLSAI1_Config>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007c8c:	7cfb      	ldrb	r3, [r7, #19]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d001      	beq.n	8007c96 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007c92:	7cfb      	ldrb	r3, [r7, #19]
 8007c94:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	681b      	ldr	r3, [r3, #0]
 8007c9a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d028      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007ca2:	4b31      	ldr	r3, [pc, #196]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007ca4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ca8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cb0:	492d      	ldr	r1, [pc, #180]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cbc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007cc0:	d106      	bne.n	8007cd0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007cc2:	4b29      	ldr	r3, [pc, #164]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	4a28      	ldr	r2, [pc, #160]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007cc8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007ccc:	60d3      	str	r3, [r2, #12]
 8007cce:	e011      	b.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007cd4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007cd8:	d10c      	bne.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	3304      	adds	r3, #4
 8007cde:	2101      	movs	r1, #1
 8007ce0:	4618      	mov	r0, r3
 8007ce2:	f000 f853 	bl	8007d8c <RCCEx_PLLSAI1_Config>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007cea:	7cfb      	ldrb	r3, [r7, #19]
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d001      	beq.n	8007cf4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8007cf0:	7cfb      	ldrb	r3, [r7, #19]
 8007cf2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cfc:	2b00      	cmp	r3, #0
 8007cfe:	d01c      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007d00:	4b19      	ldr	r3, [pc, #100]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d0e:	4916      	ldr	r1, [pc, #88]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d10:	4313      	orrs	r3, r2
 8007d12:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007d1a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007d1e:	d10c      	bne.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	3304      	adds	r3, #4
 8007d24:	2102      	movs	r1, #2
 8007d26:	4618      	mov	r0, r3
 8007d28:	f000 f830 	bl	8007d8c <RCCEx_PLLSAI1_Config>
 8007d2c:	4603      	mov	r3, r0
 8007d2e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007d30:	7cfb      	ldrb	r3, [r7, #19]
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d001      	beq.n	8007d3a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8007d36:	7cfb      	ldrb	r3, [r7, #19]
 8007d38:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007d42:	2b00      	cmp	r3, #0
 8007d44:	d00a      	beq.n	8007d5c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007d46:	4b08      	ldr	r3, [pc, #32]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d48:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007d4c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007d54:	4904      	ldr	r1, [pc, #16]	; (8007d68 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007d56:	4313      	orrs	r3, r2
 8007d58:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007d5c:	7cbb      	ldrb	r3, [r7, #18]
}
 8007d5e:	4618      	mov	r0, r3
 8007d60:	3718      	adds	r7, #24
 8007d62:	46bd      	mov	sp, r7
 8007d64:	bd80      	pop	{r7, pc}
 8007d66:	bf00      	nop
 8007d68:	40021000 	.word	0x40021000

08007d6c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007d70:	4b05      	ldr	r3, [pc, #20]	; (8007d88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007d72:	681b      	ldr	r3, [r3, #0]
 8007d74:	4a04      	ldr	r2, [pc, #16]	; (8007d88 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007d76:	f043 0304 	orr.w	r3, r3, #4
 8007d7a:	6013      	str	r3, [r2, #0]
}
 8007d7c:	bf00      	nop
 8007d7e:	46bd      	mov	sp, r7
 8007d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d84:	4770      	bx	lr
 8007d86:	bf00      	nop
 8007d88:	40021000 	.word	0x40021000

08007d8c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007d8c:	b580      	push	{r7, lr}
 8007d8e:	b084      	sub	sp, #16
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
 8007d94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007d96:	2300      	movs	r3, #0
 8007d98:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007d9a:	4b74      	ldr	r3, [pc, #464]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	f003 0303 	and.w	r3, r3, #3
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d018      	beq.n	8007dd8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007da6:	4b71      	ldr	r3, [pc, #452]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007da8:	68db      	ldr	r3, [r3, #12]
 8007daa:	f003 0203 	and.w	r2, r3, #3
 8007dae:	687b      	ldr	r3, [r7, #4]
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	d10d      	bne.n	8007dd2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	681b      	ldr	r3, [r3, #0]
       ||
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d009      	beq.n	8007dd2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007dbe:	4b6b      	ldr	r3, [pc, #428]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dc0:	68db      	ldr	r3, [r3, #12]
 8007dc2:	091b      	lsrs	r3, r3, #4
 8007dc4:	f003 0307 	and.w	r3, r3, #7
 8007dc8:	1c5a      	adds	r2, r3, #1
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	685b      	ldr	r3, [r3, #4]
       ||
 8007dce:	429a      	cmp	r2, r3
 8007dd0:	d047      	beq.n	8007e62 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	73fb      	strb	r3, [r7, #15]
 8007dd6:	e044      	b.n	8007e62 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	2b03      	cmp	r3, #3
 8007dde:	d018      	beq.n	8007e12 <RCCEx_PLLSAI1_Config+0x86>
 8007de0:	2b03      	cmp	r3, #3
 8007de2:	d825      	bhi.n	8007e30 <RCCEx_PLLSAI1_Config+0xa4>
 8007de4:	2b01      	cmp	r3, #1
 8007de6:	d002      	beq.n	8007dee <RCCEx_PLLSAI1_Config+0x62>
 8007de8:	2b02      	cmp	r3, #2
 8007dea:	d009      	beq.n	8007e00 <RCCEx_PLLSAI1_Config+0x74>
 8007dec:	e020      	b.n	8007e30 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007dee:	4b5f      	ldr	r3, [pc, #380]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f003 0302 	and.w	r3, r3, #2
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d11d      	bne.n	8007e36 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007dfe:	e01a      	b.n	8007e36 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007e00:	4b5a      	ldr	r3, [pc, #360]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d116      	bne.n	8007e3a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007e0c:	2301      	movs	r3, #1
 8007e0e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007e10:	e013      	b.n	8007e3a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007e12:	4b56      	ldr	r3, [pc, #344]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d10f      	bne.n	8007e3e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007e1e:	4b53      	ldr	r3, [pc, #332]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007e26:	2b00      	cmp	r3, #0
 8007e28:	d109      	bne.n	8007e3e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007e2a:	2301      	movs	r3, #1
 8007e2c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007e2e:	e006      	b.n	8007e3e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007e30:	2301      	movs	r3, #1
 8007e32:	73fb      	strb	r3, [r7, #15]
      break;
 8007e34:	e004      	b.n	8007e40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e36:	bf00      	nop
 8007e38:	e002      	b.n	8007e40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e3a:	bf00      	nop
 8007e3c:	e000      	b.n	8007e40 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007e3e:	bf00      	nop
    }

    if(status == HAL_OK)
 8007e40:	7bfb      	ldrb	r3, [r7, #15]
 8007e42:	2b00      	cmp	r3, #0
 8007e44:	d10d      	bne.n	8007e62 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007e46:	4b49      	ldr	r3, [pc, #292]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e48:	68db      	ldr	r3, [r3, #12]
 8007e4a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6819      	ldr	r1, [r3, #0]
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	685b      	ldr	r3, [r3, #4]
 8007e56:	3b01      	subs	r3, #1
 8007e58:	011b      	lsls	r3, r3, #4
 8007e5a:	430b      	orrs	r3, r1
 8007e5c:	4943      	ldr	r1, [pc, #268]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007e62:	7bfb      	ldrb	r3, [r7, #15]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d17c      	bne.n	8007f62 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007e68:	4b40      	ldr	r3, [pc, #256]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	4a3f      	ldr	r2, [pc, #252]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e6e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007e72:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007e74:	f7fc f864 	bl	8003f40 <HAL_GetTick>
 8007e78:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007e7a:	e009      	b.n	8007e90 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007e7c:	f7fc f860 	bl	8003f40 <HAL_GetTick>
 8007e80:	4602      	mov	r2, r0
 8007e82:	68bb      	ldr	r3, [r7, #8]
 8007e84:	1ad3      	subs	r3, r2, r3
 8007e86:	2b02      	cmp	r3, #2
 8007e88:	d902      	bls.n	8007e90 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007e8a:	2303      	movs	r3, #3
 8007e8c:	73fb      	strb	r3, [r7, #15]
        break;
 8007e8e:	e005      	b.n	8007e9c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007e90:	4b36      	ldr	r3, [pc, #216]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1ef      	bne.n	8007e7c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007e9c:	7bfb      	ldrb	r3, [r7, #15]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d15f      	bne.n	8007f62 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007ea2:	683b      	ldr	r3, [r7, #0]
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d110      	bne.n	8007eca <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ea8:	4b30      	ldr	r3, [pc, #192]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007eaa:	691b      	ldr	r3, [r3, #16]
 8007eac:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007eb0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007eb4:	687a      	ldr	r2, [r7, #4]
 8007eb6:	6892      	ldr	r2, [r2, #8]
 8007eb8:	0211      	lsls	r1, r2, #8
 8007eba:	687a      	ldr	r2, [r7, #4]
 8007ebc:	68d2      	ldr	r2, [r2, #12]
 8007ebe:	06d2      	lsls	r2, r2, #27
 8007ec0:	430a      	orrs	r2, r1
 8007ec2:	492a      	ldr	r1, [pc, #168]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ec4:	4313      	orrs	r3, r2
 8007ec6:	610b      	str	r3, [r1, #16]
 8007ec8:	e027      	b.n	8007f1a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007eca:	683b      	ldr	r3, [r7, #0]
 8007ecc:	2b01      	cmp	r3, #1
 8007ece:	d112      	bne.n	8007ef6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ed0:	4b26      	ldr	r3, [pc, #152]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ed2:	691b      	ldr	r3, [r3, #16]
 8007ed4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007ed8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007edc:	687a      	ldr	r2, [r7, #4]
 8007ede:	6892      	ldr	r2, [r2, #8]
 8007ee0:	0211      	lsls	r1, r2, #8
 8007ee2:	687a      	ldr	r2, [r7, #4]
 8007ee4:	6912      	ldr	r2, [r2, #16]
 8007ee6:	0852      	lsrs	r2, r2, #1
 8007ee8:	3a01      	subs	r2, #1
 8007eea:	0552      	lsls	r2, r2, #21
 8007eec:	430a      	orrs	r2, r1
 8007eee:	491f      	ldr	r1, [pc, #124]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	610b      	str	r3, [r1, #16]
 8007ef4:	e011      	b.n	8007f1a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007ef6:	4b1d      	ldr	r3, [pc, #116]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ef8:	691b      	ldr	r3, [r3, #16]
 8007efa:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007efe:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007f02:	687a      	ldr	r2, [r7, #4]
 8007f04:	6892      	ldr	r2, [r2, #8]
 8007f06:	0211      	lsls	r1, r2, #8
 8007f08:	687a      	ldr	r2, [r7, #4]
 8007f0a:	6952      	ldr	r2, [r2, #20]
 8007f0c:	0852      	lsrs	r2, r2, #1
 8007f0e:	3a01      	subs	r2, #1
 8007f10:	0652      	lsls	r2, r2, #25
 8007f12:	430a      	orrs	r2, r1
 8007f14:	4915      	ldr	r1, [pc, #84]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f16:	4313      	orrs	r3, r2
 8007f18:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007f1a:	4b14      	ldr	r3, [pc, #80]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	4a13      	ldr	r2, [pc, #76]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f20:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007f24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007f26:	f7fc f80b 	bl	8003f40 <HAL_GetTick>
 8007f2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007f2c:	e009      	b.n	8007f42 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007f2e:	f7fc f807 	bl	8003f40 <HAL_GetTick>
 8007f32:	4602      	mov	r2, r0
 8007f34:	68bb      	ldr	r3, [r7, #8]
 8007f36:	1ad3      	subs	r3, r2, r3
 8007f38:	2b02      	cmp	r3, #2
 8007f3a:	d902      	bls.n	8007f42 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007f3c:	2303      	movs	r3, #3
 8007f3e:	73fb      	strb	r3, [r7, #15]
          break;
 8007f40:	e005      	b.n	8007f4e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007f42:	4b0a      	ldr	r3, [pc, #40]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007f4a:	2b00      	cmp	r3, #0
 8007f4c:	d0ef      	beq.n	8007f2e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007f4e:	7bfb      	ldrb	r3, [r7, #15]
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d106      	bne.n	8007f62 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007f54:	4b05      	ldr	r3, [pc, #20]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f56:	691a      	ldr	r2, [r3, #16]
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	699b      	ldr	r3, [r3, #24]
 8007f5c:	4903      	ldr	r1, [pc, #12]	; (8007f6c <RCCEx_PLLSAI1_Config+0x1e0>)
 8007f5e:	4313      	orrs	r3, r2
 8007f60:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007f62:	7bfb      	ldrb	r3, [r7, #15]
}
 8007f64:	4618      	mov	r0, r3
 8007f66:	3710      	adds	r7, #16
 8007f68:	46bd      	mov	sp, r7
 8007f6a:	bd80      	pop	{r7, pc}
 8007f6c:	40021000 	.word	0x40021000

08007f70 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007f70:	b580      	push	{r7, lr}
 8007f72:	b082      	sub	sp, #8
 8007f74:	af00      	add	r7, sp, #0
 8007f76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	2b00      	cmp	r3, #0
 8007f7c:	d101      	bne.n	8007f82 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007f7e:	2301      	movs	r3, #1
 8007f80:	e049      	b.n	8008016 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f88:	b2db      	uxtb	r3, r3
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d106      	bne.n	8007f9c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	2200      	movs	r2, #0
 8007f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007f96:	6878      	ldr	r0, [r7, #4]
 8007f98:	f7fb fde0 	bl	8003b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2202      	movs	r2, #2
 8007fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	3304      	adds	r3, #4
 8007fac:	4619      	mov	r1, r3
 8007fae:	4610      	mov	r0, r2
 8007fb0:	f000 fa1e 	bl	80083f0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2201      	movs	r2, #1
 8007fb8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2201      	movs	r2, #1
 8007fc0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	2201      	movs	r2, #1
 8007fc8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007fcc:	687b      	ldr	r3, [r7, #4]
 8007fce:	2201      	movs	r2, #1
 8007fd0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	2201      	movs	r2, #1
 8007fd8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2201      	movs	r2, #1
 8007ff0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	2201      	movs	r2, #1
 8007ff8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	2201      	movs	r2, #1
 8008000:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	2201      	movs	r2, #1
 8008008:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2201      	movs	r2, #1
 8008010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008014:	2300      	movs	r3, #0
}
 8008016:	4618      	mov	r0, r3
 8008018:	3708      	adds	r7, #8
 800801a:	46bd      	mov	sp, r7
 800801c:	bd80      	pop	{r7, pc}
	...

08008020 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8008020:	b480      	push	{r7}
 8008022:	b085      	sub	sp, #20
 8008024:	af00      	add	r7, sp, #0
 8008026:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800802e:	b2db      	uxtb	r3, r3
 8008030:	2b01      	cmp	r3, #1
 8008032:	d001      	beq.n	8008038 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8008034:	2301      	movs	r3, #1
 8008036:	e033      	b.n	80080a0 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	2202      	movs	r2, #2
 800803c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008040:	687b      	ldr	r3, [r7, #4]
 8008042:	681b      	ldr	r3, [r3, #0]
 8008044:	4a19      	ldr	r2, [pc, #100]	; (80080ac <HAL_TIM_Base_Start+0x8c>)
 8008046:	4293      	cmp	r3, r2
 8008048:	d009      	beq.n	800805e <HAL_TIM_Base_Start+0x3e>
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	681b      	ldr	r3, [r3, #0]
 800804e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008052:	d004      	beq.n	800805e <HAL_TIM_Base_Start+0x3e>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	4a15      	ldr	r2, [pc, #84]	; (80080b0 <HAL_TIM_Base_Start+0x90>)
 800805a:	4293      	cmp	r3, r2
 800805c:	d115      	bne.n	800808a <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	689a      	ldr	r2, [r3, #8]
 8008064:	4b13      	ldr	r3, [pc, #76]	; (80080b4 <HAL_TIM_Base_Start+0x94>)
 8008066:	4013      	ands	r3, r2
 8008068:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	2b06      	cmp	r3, #6
 800806e:	d015      	beq.n	800809c <HAL_TIM_Base_Start+0x7c>
 8008070:	68fb      	ldr	r3, [r7, #12]
 8008072:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008076:	d011      	beq.n	800809c <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	681a      	ldr	r2, [r3, #0]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	f042 0201 	orr.w	r2, r2, #1
 8008086:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008088:	e008      	b.n	800809c <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681b      	ldr	r3, [r3, #0]
 800808e:	681a      	ldr	r2, [r3, #0]
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	f042 0201 	orr.w	r2, r2, #1
 8008098:	601a      	str	r2, [r3, #0]
 800809a:	e000      	b.n	800809e <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800809c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800809e:	2300      	movs	r3, #0
}
 80080a0:	4618      	mov	r0, r3
 80080a2:	3714      	adds	r7, #20
 80080a4:	46bd      	mov	sp, r7
 80080a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080aa:	4770      	bx	lr
 80080ac:	40012c00 	.word	0x40012c00
 80080b0:	40014000 	.word	0x40014000
 80080b4:	00010007 	.word	0x00010007

080080b8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80080b8:	b480      	push	{r7}
 80080ba:	b085      	sub	sp, #20
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080c6:	b2db      	uxtb	r3, r3
 80080c8:	2b01      	cmp	r3, #1
 80080ca:	d001      	beq.n	80080d0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080cc:	2301      	movs	r3, #1
 80080ce:	e03b      	b.n	8008148 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080d0:	687b      	ldr	r3, [r7, #4]
 80080d2:	2202      	movs	r2, #2
 80080d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	68da      	ldr	r2, [r3, #12]
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f042 0201 	orr.w	r2, r2, #1
 80080e6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	4a19      	ldr	r2, [pc, #100]	; (8008154 <HAL_TIM_Base_Start_IT+0x9c>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d009      	beq.n	8008106 <HAL_TIM_Base_Start_IT+0x4e>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	681b      	ldr	r3, [r3, #0]
 80080f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080fa:	d004      	beq.n	8008106 <HAL_TIM_Base_Start_IT+0x4e>
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	4a15      	ldr	r2, [pc, #84]	; (8008158 <HAL_TIM_Base_Start_IT+0xa0>)
 8008102:	4293      	cmp	r3, r2
 8008104:	d115      	bne.n	8008132 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	681b      	ldr	r3, [r3, #0]
 800810a:	689a      	ldr	r2, [r3, #8]
 800810c:	4b13      	ldr	r3, [pc, #76]	; (800815c <HAL_TIM_Base_Start_IT+0xa4>)
 800810e:	4013      	ands	r3, r2
 8008110:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	2b06      	cmp	r3, #6
 8008116:	d015      	beq.n	8008144 <HAL_TIM_Base_Start_IT+0x8c>
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800811e:	d011      	beq.n	8008144 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	681a      	ldr	r2, [r3, #0]
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f042 0201 	orr.w	r2, r2, #1
 800812e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008130:	e008      	b.n	8008144 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	681a      	ldr	r2, [r3, #0]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f042 0201 	orr.w	r2, r2, #1
 8008140:	601a      	str	r2, [r3, #0]
 8008142:	e000      	b.n	8008146 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008144:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8008146:	2300      	movs	r3, #0
}
 8008148:	4618      	mov	r0, r3
 800814a:	3714      	adds	r7, #20
 800814c:	46bd      	mov	sp, r7
 800814e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008152:	4770      	bx	lr
 8008154:	40012c00 	.word	0x40012c00
 8008158:	40014000 	.word	0x40014000
 800815c:	00010007 	.word	0x00010007

08008160 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008160:	b580      	push	{r7, lr}
 8008162:	b082      	sub	sp, #8
 8008164:	af00      	add	r7, sp, #0
 8008166:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	681b      	ldr	r3, [r3, #0]
 800816c:	691b      	ldr	r3, [r3, #16]
 800816e:	f003 0302 	and.w	r3, r3, #2
 8008172:	2b02      	cmp	r3, #2
 8008174:	d122      	bne.n	80081bc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	68db      	ldr	r3, [r3, #12]
 800817c:	f003 0302 	and.w	r3, r3, #2
 8008180:	2b02      	cmp	r3, #2
 8008182:	d11b      	bne.n	80081bc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	681b      	ldr	r3, [r3, #0]
 8008188:	f06f 0202 	mvn.w	r2, #2
 800818c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	2201      	movs	r2, #1
 8008192:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	681b      	ldr	r3, [r3, #0]
 8008198:	699b      	ldr	r3, [r3, #24]
 800819a:	f003 0303 	and.w	r3, r3, #3
 800819e:	2b00      	cmp	r3, #0
 80081a0:	d003      	beq.n	80081aa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80081a2:	6878      	ldr	r0, [r7, #4]
 80081a4:	f000 f905 	bl	80083b2 <HAL_TIM_IC_CaptureCallback>
 80081a8:	e005      	b.n	80081b6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80081aa:	6878      	ldr	r0, [r7, #4]
 80081ac:	f000 f8f7 	bl	800839e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f000 f908 	bl	80083c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	2200      	movs	r2, #0
 80081ba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	691b      	ldr	r3, [r3, #16]
 80081c2:	f003 0304 	and.w	r3, r3, #4
 80081c6:	2b04      	cmp	r3, #4
 80081c8:	d122      	bne.n	8008210 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	68db      	ldr	r3, [r3, #12]
 80081d0:	f003 0304 	and.w	r3, r3, #4
 80081d4:	2b04      	cmp	r3, #4
 80081d6:	d11b      	bne.n	8008210 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	681b      	ldr	r3, [r3, #0]
 80081dc:	f06f 0204 	mvn.w	r2, #4
 80081e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	2202      	movs	r2, #2
 80081e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	699b      	ldr	r3, [r3, #24]
 80081ee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 f8db 	bl	80083b2 <HAL_TIM_IC_CaptureCallback>
 80081fc:	e005      	b.n	800820a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80081fe:	6878      	ldr	r0, [r7, #4]
 8008200:	f000 f8cd 	bl	800839e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 f8de 	bl	80083c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2200      	movs	r2, #0
 800820e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	681b      	ldr	r3, [r3, #0]
 8008214:	691b      	ldr	r3, [r3, #16]
 8008216:	f003 0308 	and.w	r3, r3, #8
 800821a:	2b08      	cmp	r3, #8
 800821c:	d122      	bne.n	8008264 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	681b      	ldr	r3, [r3, #0]
 8008222:	68db      	ldr	r3, [r3, #12]
 8008224:	f003 0308 	and.w	r3, r3, #8
 8008228:	2b08      	cmp	r3, #8
 800822a:	d11b      	bne.n	8008264 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	f06f 0208 	mvn.w	r2, #8
 8008234:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	2204      	movs	r2, #4
 800823a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	69db      	ldr	r3, [r3, #28]
 8008242:	f003 0303 	and.w	r3, r3, #3
 8008246:	2b00      	cmp	r3, #0
 8008248:	d003      	beq.n	8008252 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800824a:	6878      	ldr	r0, [r7, #4]
 800824c:	f000 f8b1 	bl	80083b2 <HAL_TIM_IC_CaptureCallback>
 8008250:	e005      	b.n	800825e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008252:	6878      	ldr	r0, [r7, #4]
 8008254:	f000 f8a3 	bl	800839e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008258:	6878      	ldr	r0, [r7, #4]
 800825a:	f000 f8b4 	bl	80083c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	2200      	movs	r2, #0
 8008262:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	681b      	ldr	r3, [r3, #0]
 8008268:	691b      	ldr	r3, [r3, #16]
 800826a:	f003 0310 	and.w	r3, r3, #16
 800826e:	2b10      	cmp	r3, #16
 8008270:	d122      	bne.n	80082b8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	f003 0310 	and.w	r3, r3, #16
 800827c:	2b10      	cmp	r3, #16
 800827e:	d11b      	bne.n	80082b8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f06f 0210 	mvn.w	r2, #16
 8008288:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2208      	movs	r2, #8
 800828e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	69db      	ldr	r3, [r3, #28]
 8008296:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800829a:	2b00      	cmp	r3, #0
 800829c:	d003      	beq.n	80082a6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800829e:	6878      	ldr	r0, [r7, #4]
 80082a0:	f000 f887 	bl	80083b2 <HAL_TIM_IC_CaptureCallback>
 80082a4:	e005      	b.n	80082b2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f000 f879 	bl	800839e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082ac:	6878      	ldr	r0, [r7, #4]
 80082ae:	f000 f88a 	bl	80083c6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	691b      	ldr	r3, [r3, #16]
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	2b01      	cmp	r3, #1
 80082c4:	d10e      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b01      	cmp	r3, #1
 80082d2:	d107      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	f06f 0201 	mvn.w	r2, #1
 80082dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80082de:	6878      	ldr	r0, [r7, #4]
 80082e0:	f7fb f9e6 	bl	80036b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082ee:	2b80      	cmp	r3, #128	; 0x80
 80082f0:	d10e      	bne.n	8008310 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80082fc:	2b80      	cmp	r3, #128	; 0x80
 80082fe:	d107      	bne.n	8008310 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008308:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800830a:	6878      	ldr	r0, [r7, #4]
 800830c:	f000 f944 	bl	8008598 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	691b      	ldr	r3, [r3, #16]
 8008316:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800831a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800831e:	d10e      	bne.n	800833e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8008320:	687b      	ldr	r3, [r7, #4]
 8008322:	681b      	ldr	r3, [r3, #0]
 8008324:	68db      	ldr	r3, [r3, #12]
 8008326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800832a:	2b80      	cmp	r3, #128	; 0x80
 800832c:	d107      	bne.n	800833e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8008336:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8008338:	6878      	ldr	r0, [r7, #4]
 800833a:	f000 f937 	bl	80085ac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	681b      	ldr	r3, [r3, #0]
 8008342:	691b      	ldr	r3, [r3, #16]
 8008344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008348:	2b40      	cmp	r3, #64	; 0x40
 800834a:	d10e      	bne.n	800836a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	681b      	ldr	r3, [r3, #0]
 8008350:	68db      	ldr	r3, [r3, #12]
 8008352:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008356:	2b40      	cmp	r3, #64	; 0x40
 8008358:	d107      	bne.n	800836a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008362:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f838 	bl	80083da <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800836a:	687b      	ldr	r3, [r7, #4]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	691b      	ldr	r3, [r3, #16]
 8008370:	f003 0320 	and.w	r3, r3, #32
 8008374:	2b20      	cmp	r3, #32
 8008376:	d10e      	bne.n	8008396 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68db      	ldr	r3, [r3, #12]
 800837e:	f003 0320 	and.w	r3, r3, #32
 8008382:	2b20      	cmp	r3, #32
 8008384:	d107      	bne.n	8008396 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f06f 0220 	mvn.w	r2, #32
 800838e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008390:	6878      	ldr	r0, [r7, #4]
 8008392:	f000 f8f7 	bl	8008584 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008396:	bf00      	nop
 8008398:	3708      	adds	r7, #8
 800839a:	46bd      	mov	sp, r7
 800839c:	bd80      	pop	{r7, pc}

0800839e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800839e:	b480      	push	{r7}
 80083a0:	b083      	sub	sp, #12
 80083a2:	af00      	add	r7, sp, #0
 80083a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80083a6:	bf00      	nop
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b083      	sub	sp, #12
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80083ba:	bf00      	nop
 80083bc:	370c      	adds	r7, #12
 80083be:	46bd      	mov	sp, r7
 80083c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083c4:	4770      	bx	lr

080083c6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80083c6:	b480      	push	{r7}
 80083c8:	b083      	sub	sp, #12
 80083ca:	af00      	add	r7, sp, #0
 80083cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80083ce:	bf00      	nop
 80083d0:	370c      	adds	r7, #12
 80083d2:	46bd      	mov	sp, r7
 80083d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083d8:	4770      	bx	lr

080083da <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80083da:	b480      	push	{r7}
 80083dc:	b083      	sub	sp, #12
 80083de:	af00      	add	r7, sp, #0
 80083e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80083e2:	bf00      	nop
 80083e4:	370c      	adds	r7, #12
 80083e6:	46bd      	mov	sp, r7
 80083e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ec:	4770      	bx	lr
	...

080083f0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80083f0:	b480      	push	{r7}
 80083f2:	b085      	sub	sp, #20
 80083f4:	af00      	add	r7, sp, #0
 80083f6:	6078      	str	r0, [r7, #4]
 80083f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	4a2a      	ldr	r2, [pc, #168]	; (80084ac <TIM_Base_SetConfig+0xbc>)
 8008404:	4293      	cmp	r3, r2
 8008406:	d003      	beq.n	8008410 <TIM_Base_SetConfig+0x20>
 8008408:	687b      	ldr	r3, [r7, #4]
 800840a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800840e:	d108      	bne.n	8008422 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008416:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008418:	683b      	ldr	r3, [r7, #0]
 800841a:	685b      	ldr	r3, [r3, #4]
 800841c:	68fa      	ldr	r2, [r7, #12]
 800841e:	4313      	orrs	r3, r2
 8008420:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	4a21      	ldr	r2, [pc, #132]	; (80084ac <TIM_Base_SetConfig+0xbc>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d00b      	beq.n	8008442 <TIM_Base_SetConfig+0x52>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008430:	d007      	beq.n	8008442 <TIM_Base_SetConfig+0x52>
 8008432:	687b      	ldr	r3, [r7, #4]
 8008434:	4a1e      	ldr	r2, [pc, #120]	; (80084b0 <TIM_Base_SetConfig+0xc0>)
 8008436:	4293      	cmp	r3, r2
 8008438:	d003      	beq.n	8008442 <TIM_Base_SetConfig+0x52>
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	4a1d      	ldr	r2, [pc, #116]	; (80084b4 <TIM_Base_SetConfig+0xc4>)
 800843e:	4293      	cmp	r3, r2
 8008440:	d108      	bne.n	8008454 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008448:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800844a:	683b      	ldr	r3, [r7, #0]
 800844c:	68db      	ldr	r3, [r3, #12]
 800844e:	68fa      	ldr	r2, [r7, #12]
 8008450:	4313      	orrs	r3, r2
 8008452:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008454:	68fb      	ldr	r3, [r7, #12]
 8008456:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800845a:	683b      	ldr	r3, [r7, #0]
 800845c:	695b      	ldr	r3, [r3, #20]
 800845e:	4313      	orrs	r3, r2
 8008460:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	68fa      	ldr	r2, [r7, #12]
 8008466:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	689a      	ldr	r2, [r3, #8]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008470:	683b      	ldr	r3, [r7, #0]
 8008472:	681a      	ldr	r2, [r3, #0]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	4a0c      	ldr	r2, [pc, #48]	; (80084ac <TIM_Base_SetConfig+0xbc>)
 800847c:	4293      	cmp	r3, r2
 800847e:	d007      	beq.n	8008490 <TIM_Base_SetConfig+0xa0>
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	4a0b      	ldr	r2, [pc, #44]	; (80084b0 <TIM_Base_SetConfig+0xc0>)
 8008484:	4293      	cmp	r3, r2
 8008486:	d003      	beq.n	8008490 <TIM_Base_SetConfig+0xa0>
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	4a0a      	ldr	r2, [pc, #40]	; (80084b4 <TIM_Base_SetConfig+0xc4>)
 800848c:	4293      	cmp	r3, r2
 800848e:	d103      	bne.n	8008498 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008490:	683b      	ldr	r3, [r7, #0]
 8008492:	691a      	ldr	r2, [r3, #16]
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	2201      	movs	r2, #1
 800849c:	615a      	str	r2, [r3, #20]
}
 800849e:	bf00      	nop
 80084a0:	3714      	adds	r7, #20
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	40012c00 	.word	0x40012c00
 80084b0:	40014000 	.word	0x40014000
 80084b4:	40014400 	.word	0x40014400

080084b8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80084b8:	b480      	push	{r7}
 80084ba:	b085      	sub	sp, #20
 80084bc:	af00      	add	r7, sp, #0
 80084be:	6078      	str	r0, [r7, #4]
 80084c0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084c8:	2b01      	cmp	r3, #1
 80084ca:	d101      	bne.n	80084d0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80084cc:	2302      	movs	r3, #2
 80084ce:	e04f      	b.n	8008570 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	2201      	movs	r2, #1
 80084d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	2202      	movs	r2, #2
 80084dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	681b      	ldr	r3, [r3, #0]
 80084e4:	685b      	ldr	r3, [r3, #4]
 80084e6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	689b      	ldr	r3, [r3, #8]
 80084ee:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	681b      	ldr	r3, [r3, #0]
 80084f4:	4a21      	ldr	r2, [pc, #132]	; (800857c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80084f6:	4293      	cmp	r3, r2
 80084f8:	d108      	bne.n	800850c <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80084fa:	68fb      	ldr	r3, [r7, #12]
 80084fc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8008500:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8008502:	683b      	ldr	r3, [r7, #0]
 8008504:	685b      	ldr	r3, [r3, #4]
 8008506:	68fa      	ldr	r2, [r7, #12]
 8008508:	4313      	orrs	r3, r2
 800850a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008512:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008514:	683b      	ldr	r3, [r7, #0]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68fa      	ldr	r2, [r7, #12]
 800851a:	4313      	orrs	r3, r2
 800851c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	68fa      	ldr	r2, [r7, #12]
 8008524:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	4a14      	ldr	r2, [pc, #80]	; (800857c <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800852c:	4293      	cmp	r3, r2
 800852e:	d009      	beq.n	8008544 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	681b      	ldr	r3, [r3, #0]
 8008534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008538:	d004      	beq.n	8008544 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	4a10      	ldr	r2, [pc, #64]	; (8008580 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008540:	4293      	cmp	r3, r2
 8008542:	d10c      	bne.n	800855e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008544:	68bb      	ldr	r3, [r7, #8]
 8008546:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800854a:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800854c:	683b      	ldr	r3, [r7, #0]
 800854e:	689b      	ldr	r3, [r3, #8]
 8008550:	68ba      	ldr	r2, [r7, #8]
 8008552:	4313      	orrs	r3, r2
 8008554:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008556:	687b      	ldr	r3, [r7, #4]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	68ba      	ldr	r2, [r7, #8]
 800855c:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	2201      	movs	r2, #1
 8008562:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	2200      	movs	r2, #0
 800856a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800856e:	2300      	movs	r3, #0
}
 8008570:	4618      	mov	r0, r3
 8008572:	3714      	adds	r7, #20
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr
 800857c:	40012c00 	.word	0x40012c00
 8008580:	40014000 	.word	0x40014000

08008584 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008584:	b480      	push	{r7}
 8008586:	b083      	sub	sp, #12
 8008588:	af00      	add	r7, sp, #0
 800858a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800858c:	bf00      	nop
 800858e:	370c      	adds	r7, #12
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008598:	b480      	push	{r7}
 800859a:	b083      	sub	sp, #12
 800859c:	af00      	add	r7, sp, #0
 800859e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80085a0:	bf00      	nop
 80085a2:	370c      	adds	r7, #12
 80085a4:	46bd      	mov	sp, r7
 80085a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085aa:	4770      	bx	lr

080085ac <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80085ac:	b480      	push	{r7}
 80085ae:	b083      	sub	sp, #12
 80085b0:	af00      	add	r7, sp, #0
 80085b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80085b4:	bf00      	nop
 80085b6:	370c      	adds	r7, #12
 80085b8:	46bd      	mov	sp, r7
 80085ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085be:	4770      	bx	lr

080085c0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80085c0:	b580      	push	{r7, lr}
 80085c2:	b082      	sub	sp, #8
 80085c4:	af00      	add	r7, sp, #0
 80085c6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	2b00      	cmp	r3, #0
 80085cc:	d101      	bne.n	80085d2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80085ce:	2301      	movs	r3, #1
 80085d0:	e040      	b.n	8008654 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d106      	bne.n	80085e8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	2200      	movs	r2, #0
 80085de:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80085e2:	6878      	ldr	r0, [r7, #4]
 80085e4:	f7fb faf4 	bl	8003bd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	2224      	movs	r2, #36	; 0x24
 80085ec:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681a      	ldr	r2, [r3, #0]
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f022 0201 	bic.w	r2, r2, #1
 80085fc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80085fe:	6878      	ldr	r0, [r7, #4]
 8008600:	f000 f8c0 	bl	8008784 <UART_SetConfig>
 8008604:	4603      	mov	r3, r0
 8008606:	2b01      	cmp	r3, #1
 8008608:	d101      	bne.n	800860e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800860a:	2301      	movs	r3, #1
 800860c:	e022      	b.n	8008654 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008612:	2b00      	cmp	r3, #0
 8008614:	d002      	beq.n	800861c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008616:	6878      	ldr	r0, [r7, #4]
 8008618:	f000 fae0 	bl	8008bdc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	685a      	ldr	r2, [r3, #4]
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800862a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	689a      	ldr	r2, [r3, #8]
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	681b      	ldr	r3, [r3, #0]
 8008636:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800863a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	681a      	ldr	r2, [r3, #0]
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	681b      	ldr	r3, [r3, #0]
 8008646:	f042 0201 	orr.w	r2, r2, #1
 800864a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800864c:	6878      	ldr	r0, [r7, #4]
 800864e:	f000 fb67 	bl	8008d20 <UART_CheckIdleState>
 8008652:	4603      	mov	r3, r0
}
 8008654:	4618      	mov	r0, r3
 8008656:	3708      	adds	r7, #8
 8008658:	46bd      	mov	sp, r7
 800865a:	bd80      	pop	{r7, pc}

0800865c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b08a      	sub	sp, #40	; 0x28
 8008660:	af02      	add	r7, sp, #8
 8008662:	60f8      	str	r0, [r7, #12]
 8008664:	60b9      	str	r1, [r7, #8]
 8008666:	603b      	str	r3, [r7, #0]
 8008668:	4613      	mov	r3, r2
 800866a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008670:	2b20      	cmp	r3, #32
 8008672:	f040 8082 	bne.w	800877a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2b00      	cmp	r3, #0
 800867a:	d002      	beq.n	8008682 <HAL_UART_Transmit+0x26>
 800867c:	88fb      	ldrh	r3, [r7, #6]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d101      	bne.n	8008686 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e07a      	b.n	800877c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008686:	68fb      	ldr	r3, [r7, #12]
 8008688:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800868c:	2b01      	cmp	r3, #1
 800868e:	d101      	bne.n	8008694 <HAL_UART_Transmit+0x38>
 8008690:	2302      	movs	r3, #2
 8008692:	e073      	b.n	800877c <HAL_UART_Transmit+0x120>
 8008694:	68fb      	ldr	r3, [r7, #12]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800869c:	68fb      	ldr	r3, [r7, #12]
 800869e:	2200      	movs	r2, #0
 80086a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80086a4:	68fb      	ldr	r3, [r7, #12]
 80086a6:	2221      	movs	r2, #33	; 0x21
 80086a8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80086aa:	f7fb fc49 	bl	8003f40 <HAL_GetTick>
 80086ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80086b0:	68fb      	ldr	r3, [r7, #12]
 80086b2:	88fa      	ldrh	r2, [r7, #6]
 80086b4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80086b8:	68fb      	ldr	r3, [r7, #12]
 80086ba:	88fa      	ldrh	r2, [r7, #6]
 80086bc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80086c0:	68fb      	ldr	r3, [r7, #12]
 80086c2:	689b      	ldr	r3, [r3, #8]
 80086c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c8:	d108      	bne.n	80086dc <HAL_UART_Transmit+0x80>
 80086ca:	68fb      	ldr	r3, [r7, #12]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d104      	bne.n	80086dc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80086d2:	2300      	movs	r3, #0
 80086d4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80086d6:	68bb      	ldr	r3, [r7, #8]
 80086d8:	61bb      	str	r3, [r7, #24]
 80086da:	e003      	b.n	80086e4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80086dc:	68bb      	ldr	r3, [r7, #8]
 80086de:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80086e0:	2300      	movs	r3, #0
 80086e2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80086e4:	68fb      	ldr	r3, [r7, #12]
 80086e6:	2200      	movs	r2, #0
 80086e8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80086ec:	e02d      	b.n	800874a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	9300      	str	r3, [sp, #0]
 80086f2:	697b      	ldr	r3, [r7, #20]
 80086f4:	2200      	movs	r2, #0
 80086f6:	2180      	movs	r1, #128	; 0x80
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 fb5a 	bl	8008db2 <UART_WaitOnFlagUntilTimeout>
 80086fe:	4603      	mov	r3, r0
 8008700:	2b00      	cmp	r3, #0
 8008702:	d001      	beq.n	8008708 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008704:	2303      	movs	r3, #3
 8008706:	e039      	b.n	800877c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008708:	69fb      	ldr	r3, [r7, #28]
 800870a:	2b00      	cmp	r3, #0
 800870c:	d10b      	bne.n	8008726 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800870e:	69bb      	ldr	r3, [r7, #24]
 8008710:	881a      	ldrh	r2, [r3, #0]
 8008712:	68fb      	ldr	r3, [r7, #12]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800871a:	b292      	uxth	r2, r2
 800871c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800871e:	69bb      	ldr	r3, [r7, #24]
 8008720:	3302      	adds	r3, #2
 8008722:	61bb      	str	r3, [r7, #24]
 8008724:	e008      	b.n	8008738 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8008726:	69fb      	ldr	r3, [r7, #28]
 8008728:	781a      	ldrb	r2, [r3, #0]
 800872a:	68fb      	ldr	r3, [r7, #12]
 800872c:	681b      	ldr	r3, [r3, #0]
 800872e:	b292      	uxth	r2, r2
 8008730:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8008732:	69fb      	ldr	r3, [r7, #28]
 8008734:	3301      	adds	r3, #1
 8008736:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800873e:	b29b      	uxth	r3, r3
 8008740:	3b01      	subs	r3, #1
 8008742:	b29a      	uxth	r2, r3
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800874a:	68fb      	ldr	r3, [r7, #12]
 800874c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8008750:	b29b      	uxth	r3, r3
 8008752:	2b00      	cmp	r3, #0
 8008754:	d1cb      	bne.n	80086ee <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	9300      	str	r3, [sp, #0]
 800875a:	697b      	ldr	r3, [r7, #20]
 800875c:	2200      	movs	r2, #0
 800875e:	2140      	movs	r1, #64	; 0x40
 8008760:	68f8      	ldr	r0, [r7, #12]
 8008762:	f000 fb26 	bl	8008db2 <UART_WaitOnFlagUntilTimeout>
 8008766:	4603      	mov	r3, r0
 8008768:	2b00      	cmp	r3, #0
 800876a:	d001      	beq.n	8008770 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800876c:	2303      	movs	r3, #3
 800876e:	e005      	b.n	800877c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008770:	68fb      	ldr	r3, [r7, #12]
 8008772:	2220      	movs	r2, #32
 8008774:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8008776:	2300      	movs	r3, #0
 8008778:	e000      	b.n	800877c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800877a:	2302      	movs	r3, #2
  }
}
 800877c:	4618      	mov	r0, r3
 800877e:	3720      	adds	r7, #32
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}

08008784 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008784:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008788:	b08a      	sub	sp, #40	; 0x28
 800878a:	af00      	add	r7, sp, #0
 800878c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800878e:	2300      	movs	r3, #0
 8008790:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008794:	68fb      	ldr	r3, [r7, #12]
 8008796:	689a      	ldr	r2, [r3, #8]
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	431a      	orrs	r2, r3
 800879e:	68fb      	ldr	r3, [r7, #12]
 80087a0:	695b      	ldr	r3, [r3, #20]
 80087a2:	431a      	orrs	r2, r3
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	69db      	ldr	r3, [r3, #28]
 80087a8:	4313      	orrs	r3, r2
 80087aa:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	681a      	ldr	r2, [r3, #0]
 80087b2:	4bb4      	ldr	r3, [pc, #720]	; (8008a84 <UART_SetConfig+0x300>)
 80087b4:	4013      	ands	r3, r2
 80087b6:	68fa      	ldr	r2, [r7, #12]
 80087b8:	6812      	ldr	r2, [r2, #0]
 80087ba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80087bc:	430b      	orrs	r3, r1
 80087be:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	681b      	ldr	r3, [r3, #0]
 80087c4:	685b      	ldr	r3, [r3, #4]
 80087c6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80087ca:	68fb      	ldr	r3, [r7, #12]
 80087cc:	68da      	ldr	r2, [r3, #12]
 80087ce:	68fb      	ldr	r3, [r7, #12]
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	430a      	orrs	r2, r1
 80087d4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80087d6:	68fb      	ldr	r3, [r7, #12]
 80087d8:	699b      	ldr	r3, [r3, #24]
 80087da:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80087dc:	68fb      	ldr	r3, [r7, #12]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4aa9      	ldr	r2, [pc, #676]	; (8008a88 <UART_SetConfig+0x304>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d004      	beq.n	80087f0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80087e6:	68fb      	ldr	r3, [r7, #12]
 80087e8:	6a1b      	ldr	r3, [r3, #32]
 80087ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80087ec:	4313      	orrs	r3, r2
 80087ee:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	689b      	ldr	r3, [r3, #8]
 80087f6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008800:	430a      	orrs	r2, r1
 8008802:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4aa0      	ldr	r2, [pc, #640]	; (8008a8c <UART_SetConfig+0x308>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d126      	bne.n	800885c <UART_SetConfig+0xd8>
 800880e:	4ba0      	ldr	r3, [pc, #640]	; (8008a90 <UART_SetConfig+0x30c>)
 8008810:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008814:	f003 0303 	and.w	r3, r3, #3
 8008818:	2b03      	cmp	r3, #3
 800881a:	d81b      	bhi.n	8008854 <UART_SetConfig+0xd0>
 800881c:	a201      	add	r2, pc, #4	; (adr r2, 8008824 <UART_SetConfig+0xa0>)
 800881e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008822:	bf00      	nop
 8008824:	08008835 	.word	0x08008835
 8008828:	08008845 	.word	0x08008845
 800882c:	0800883d 	.word	0x0800883d
 8008830:	0800884d 	.word	0x0800884d
 8008834:	2301      	movs	r3, #1
 8008836:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800883a:	e080      	b.n	800893e <UART_SetConfig+0x1ba>
 800883c:	2302      	movs	r3, #2
 800883e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008842:	e07c      	b.n	800893e <UART_SetConfig+0x1ba>
 8008844:	2304      	movs	r3, #4
 8008846:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800884a:	e078      	b.n	800893e <UART_SetConfig+0x1ba>
 800884c:	2308      	movs	r3, #8
 800884e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008852:	e074      	b.n	800893e <UART_SetConfig+0x1ba>
 8008854:	2310      	movs	r3, #16
 8008856:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800885a:	e070      	b.n	800893e <UART_SetConfig+0x1ba>
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	4a8c      	ldr	r2, [pc, #560]	; (8008a94 <UART_SetConfig+0x310>)
 8008862:	4293      	cmp	r3, r2
 8008864:	d138      	bne.n	80088d8 <UART_SetConfig+0x154>
 8008866:	4b8a      	ldr	r3, [pc, #552]	; (8008a90 <UART_SetConfig+0x30c>)
 8008868:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800886c:	f003 030c 	and.w	r3, r3, #12
 8008870:	2b0c      	cmp	r3, #12
 8008872:	d82d      	bhi.n	80088d0 <UART_SetConfig+0x14c>
 8008874:	a201      	add	r2, pc, #4	; (adr r2, 800887c <UART_SetConfig+0xf8>)
 8008876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800887a:	bf00      	nop
 800887c:	080088b1 	.word	0x080088b1
 8008880:	080088d1 	.word	0x080088d1
 8008884:	080088d1 	.word	0x080088d1
 8008888:	080088d1 	.word	0x080088d1
 800888c:	080088c1 	.word	0x080088c1
 8008890:	080088d1 	.word	0x080088d1
 8008894:	080088d1 	.word	0x080088d1
 8008898:	080088d1 	.word	0x080088d1
 800889c:	080088b9 	.word	0x080088b9
 80088a0:	080088d1 	.word	0x080088d1
 80088a4:	080088d1 	.word	0x080088d1
 80088a8:	080088d1 	.word	0x080088d1
 80088ac:	080088c9 	.word	0x080088c9
 80088b0:	2300      	movs	r3, #0
 80088b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088b6:	e042      	b.n	800893e <UART_SetConfig+0x1ba>
 80088b8:	2302      	movs	r3, #2
 80088ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088be:	e03e      	b.n	800893e <UART_SetConfig+0x1ba>
 80088c0:	2304      	movs	r3, #4
 80088c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088c6:	e03a      	b.n	800893e <UART_SetConfig+0x1ba>
 80088c8:	2308      	movs	r3, #8
 80088ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088ce:	e036      	b.n	800893e <UART_SetConfig+0x1ba>
 80088d0:	2310      	movs	r3, #16
 80088d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80088d6:	e032      	b.n	800893e <UART_SetConfig+0x1ba>
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	4a6a      	ldr	r2, [pc, #424]	; (8008a88 <UART_SetConfig+0x304>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d12a      	bne.n	8008938 <UART_SetConfig+0x1b4>
 80088e2:	4b6b      	ldr	r3, [pc, #428]	; (8008a90 <UART_SetConfig+0x30c>)
 80088e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80088e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80088ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088f0:	d01a      	beq.n	8008928 <UART_SetConfig+0x1a4>
 80088f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80088f6:	d81b      	bhi.n	8008930 <UART_SetConfig+0x1ac>
 80088f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088fc:	d00c      	beq.n	8008918 <UART_SetConfig+0x194>
 80088fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008902:	d815      	bhi.n	8008930 <UART_SetConfig+0x1ac>
 8008904:	2b00      	cmp	r3, #0
 8008906:	d003      	beq.n	8008910 <UART_SetConfig+0x18c>
 8008908:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800890c:	d008      	beq.n	8008920 <UART_SetConfig+0x19c>
 800890e:	e00f      	b.n	8008930 <UART_SetConfig+0x1ac>
 8008910:	2300      	movs	r3, #0
 8008912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008916:	e012      	b.n	800893e <UART_SetConfig+0x1ba>
 8008918:	2302      	movs	r3, #2
 800891a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800891e:	e00e      	b.n	800893e <UART_SetConfig+0x1ba>
 8008920:	2304      	movs	r3, #4
 8008922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008926:	e00a      	b.n	800893e <UART_SetConfig+0x1ba>
 8008928:	2308      	movs	r3, #8
 800892a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800892e:	e006      	b.n	800893e <UART_SetConfig+0x1ba>
 8008930:	2310      	movs	r3, #16
 8008932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008936:	e002      	b.n	800893e <UART_SetConfig+0x1ba>
 8008938:	2310      	movs	r3, #16
 800893a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	4a51      	ldr	r2, [pc, #324]	; (8008a88 <UART_SetConfig+0x304>)
 8008944:	4293      	cmp	r3, r2
 8008946:	d17a      	bne.n	8008a3e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008948:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800894c:	2b08      	cmp	r3, #8
 800894e:	d824      	bhi.n	800899a <UART_SetConfig+0x216>
 8008950:	a201      	add	r2, pc, #4	; (adr r2, 8008958 <UART_SetConfig+0x1d4>)
 8008952:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008956:	bf00      	nop
 8008958:	0800897d 	.word	0x0800897d
 800895c:	0800899b 	.word	0x0800899b
 8008960:	08008985 	.word	0x08008985
 8008964:	0800899b 	.word	0x0800899b
 8008968:	0800898b 	.word	0x0800898b
 800896c:	0800899b 	.word	0x0800899b
 8008970:	0800899b 	.word	0x0800899b
 8008974:	0800899b 	.word	0x0800899b
 8008978:	08008993 	.word	0x08008993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800897c:	f7fe ff42 	bl	8007804 <HAL_RCC_GetPCLK1Freq>
 8008980:	61f8      	str	r0, [r7, #28]
        break;
 8008982:	e010      	b.n	80089a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008984:	4b44      	ldr	r3, [pc, #272]	; (8008a98 <UART_SetConfig+0x314>)
 8008986:	61fb      	str	r3, [r7, #28]
        break;
 8008988:	e00d      	b.n	80089a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800898a:	f7fe fea3 	bl	80076d4 <HAL_RCC_GetSysClockFreq>
 800898e:	61f8      	str	r0, [r7, #28]
        break;
 8008990:	e009      	b.n	80089a6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008996:	61fb      	str	r3, [r7, #28]
        break;
 8008998:	e005      	b.n	80089a6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800899a:	2300      	movs	r3, #0
 800899c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800899e:	2301      	movs	r3, #1
 80089a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80089a4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80089a6:	69fb      	ldr	r3, [r7, #28]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	f000 8107 	beq.w	8008bbc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	685a      	ldr	r2, [r3, #4]
 80089b2:	4613      	mov	r3, r2
 80089b4:	005b      	lsls	r3, r3, #1
 80089b6:	4413      	add	r3, r2
 80089b8:	69fa      	ldr	r2, [r7, #28]
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d305      	bcc.n	80089ca <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80089c4:	69fa      	ldr	r2, [r7, #28]
 80089c6:	429a      	cmp	r2, r3
 80089c8:	d903      	bls.n	80089d2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80089ca:	2301      	movs	r3, #1
 80089cc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80089d0:	e0f4      	b.n	8008bbc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80089d2:	69fb      	ldr	r3, [r7, #28]
 80089d4:	2200      	movs	r2, #0
 80089d6:	461c      	mov	r4, r3
 80089d8:	4615      	mov	r5, r2
 80089da:	f04f 0200 	mov.w	r2, #0
 80089de:	f04f 0300 	mov.w	r3, #0
 80089e2:	022b      	lsls	r3, r5, #8
 80089e4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80089e8:	0222      	lsls	r2, r4, #8
 80089ea:	68f9      	ldr	r1, [r7, #12]
 80089ec:	6849      	ldr	r1, [r1, #4]
 80089ee:	0849      	lsrs	r1, r1, #1
 80089f0:	2000      	movs	r0, #0
 80089f2:	4688      	mov	r8, r1
 80089f4:	4681      	mov	r9, r0
 80089f6:	eb12 0a08 	adds.w	sl, r2, r8
 80089fa:	eb43 0b09 	adc.w	fp, r3, r9
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	685b      	ldr	r3, [r3, #4]
 8008a02:	2200      	movs	r2, #0
 8008a04:	603b      	str	r3, [r7, #0]
 8008a06:	607a      	str	r2, [r7, #4]
 8008a08:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a0c:	4650      	mov	r0, sl
 8008a0e:	4659      	mov	r1, fp
 8008a10:	f7f8 f82c 	bl	8000a6c <__aeabi_uldivmod>
 8008a14:	4602      	mov	r2, r0
 8008a16:	460b      	mov	r3, r1
 8008a18:	4613      	mov	r3, r2
 8008a1a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008a22:	d308      	bcc.n	8008a36 <UART_SetConfig+0x2b2>
 8008a24:	69bb      	ldr	r3, [r7, #24]
 8008a26:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008a2a:	d204      	bcs.n	8008a36 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	69ba      	ldr	r2, [r7, #24]
 8008a32:	60da      	str	r2, [r3, #12]
 8008a34:	e0c2      	b.n	8008bbc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8008a36:	2301      	movs	r3, #1
 8008a38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008a3c:	e0be      	b.n	8008bbc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	69db      	ldr	r3, [r3, #28]
 8008a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008a46:	d16a      	bne.n	8008b1e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8008a48:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008a4c:	2b08      	cmp	r3, #8
 8008a4e:	d834      	bhi.n	8008aba <UART_SetConfig+0x336>
 8008a50:	a201      	add	r2, pc, #4	; (adr r2, 8008a58 <UART_SetConfig+0x2d4>)
 8008a52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a56:	bf00      	nop
 8008a58:	08008a7d 	.word	0x08008a7d
 8008a5c:	08008a9d 	.word	0x08008a9d
 8008a60:	08008aa5 	.word	0x08008aa5
 8008a64:	08008abb 	.word	0x08008abb
 8008a68:	08008aab 	.word	0x08008aab
 8008a6c:	08008abb 	.word	0x08008abb
 8008a70:	08008abb 	.word	0x08008abb
 8008a74:	08008abb 	.word	0x08008abb
 8008a78:	08008ab3 	.word	0x08008ab3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008a7c:	f7fe fec2 	bl	8007804 <HAL_RCC_GetPCLK1Freq>
 8008a80:	61f8      	str	r0, [r7, #28]
        break;
 8008a82:	e020      	b.n	8008ac6 <UART_SetConfig+0x342>
 8008a84:	efff69f3 	.word	0xefff69f3
 8008a88:	40008000 	.word	0x40008000
 8008a8c:	40013800 	.word	0x40013800
 8008a90:	40021000 	.word	0x40021000
 8008a94:	40004400 	.word	0x40004400
 8008a98:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008a9c:	f7fe fec8 	bl	8007830 <HAL_RCC_GetPCLK2Freq>
 8008aa0:	61f8      	str	r0, [r7, #28]
        break;
 8008aa2:	e010      	b.n	8008ac6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008aa4:	4b4c      	ldr	r3, [pc, #304]	; (8008bd8 <UART_SetConfig+0x454>)
 8008aa6:	61fb      	str	r3, [r7, #28]
        break;
 8008aa8:	e00d      	b.n	8008ac6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008aaa:	f7fe fe13 	bl	80076d4 <HAL_RCC_GetSysClockFreq>
 8008aae:	61f8      	str	r0, [r7, #28]
        break;
 8008ab0:	e009      	b.n	8008ac6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ab6:	61fb      	str	r3, [r7, #28]
        break;
 8008ab8:	e005      	b.n	8008ac6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008aba:	2300      	movs	r3, #0
 8008abc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008abe:	2301      	movs	r3, #1
 8008ac0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008ac4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008ac6:	69fb      	ldr	r3, [r7, #28]
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d077      	beq.n	8008bbc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008acc:	69fb      	ldr	r3, [r7, #28]
 8008ace:	005a      	lsls	r2, r3, #1
 8008ad0:	68fb      	ldr	r3, [r7, #12]
 8008ad2:	685b      	ldr	r3, [r3, #4]
 8008ad4:	085b      	lsrs	r3, r3, #1
 8008ad6:	441a      	add	r2, r3
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	685b      	ldr	r3, [r3, #4]
 8008adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ae0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008ae2:	69bb      	ldr	r3, [r7, #24]
 8008ae4:	2b0f      	cmp	r3, #15
 8008ae6:	d916      	bls.n	8008b16 <UART_SetConfig+0x392>
 8008ae8:	69bb      	ldr	r3, [r7, #24]
 8008aea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008aee:	d212      	bcs.n	8008b16 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008af0:	69bb      	ldr	r3, [r7, #24]
 8008af2:	b29b      	uxth	r3, r3
 8008af4:	f023 030f 	bic.w	r3, r3, #15
 8008af8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008afa:	69bb      	ldr	r3, [r7, #24]
 8008afc:	085b      	lsrs	r3, r3, #1
 8008afe:	b29b      	uxth	r3, r3
 8008b00:	f003 0307 	and.w	r3, r3, #7
 8008b04:	b29a      	uxth	r2, r3
 8008b06:	8afb      	ldrh	r3, [r7, #22]
 8008b08:	4313      	orrs	r3, r2
 8008b0a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	681b      	ldr	r3, [r3, #0]
 8008b10:	8afa      	ldrh	r2, [r7, #22]
 8008b12:	60da      	str	r2, [r3, #12]
 8008b14:	e052      	b.n	8008bbc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008b16:	2301      	movs	r3, #1
 8008b18:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008b1c:	e04e      	b.n	8008bbc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008b1e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8008b22:	2b08      	cmp	r3, #8
 8008b24:	d827      	bhi.n	8008b76 <UART_SetConfig+0x3f2>
 8008b26:	a201      	add	r2, pc, #4	; (adr r2, 8008b2c <UART_SetConfig+0x3a8>)
 8008b28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b2c:	08008b51 	.word	0x08008b51
 8008b30:	08008b59 	.word	0x08008b59
 8008b34:	08008b61 	.word	0x08008b61
 8008b38:	08008b77 	.word	0x08008b77
 8008b3c:	08008b67 	.word	0x08008b67
 8008b40:	08008b77 	.word	0x08008b77
 8008b44:	08008b77 	.word	0x08008b77
 8008b48:	08008b77 	.word	0x08008b77
 8008b4c:	08008b6f 	.word	0x08008b6f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008b50:	f7fe fe58 	bl	8007804 <HAL_RCC_GetPCLK1Freq>
 8008b54:	61f8      	str	r0, [r7, #28]
        break;
 8008b56:	e014      	b.n	8008b82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008b58:	f7fe fe6a 	bl	8007830 <HAL_RCC_GetPCLK2Freq>
 8008b5c:	61f8      	str	r0, [r7, #28]
        break;
 8008b5e:	e010      	b.n	8008b82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008b60:	4b1d      	ldr	r3, [pc, #116]	; (8008bd8 <UART_SetConfig+0x454>)
 8008b62:	61fb      	str	r3, [r7, #28]
        break;
 8008b64:	e00d      	b.n	8008b82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008b66:	f7fe fdb5 	bl	80076d4 <HAL_RCC_GetSysClockFreq>
 8008b6a:	61f8      	str	r0, [r7, #28]
        break;
 8008b6c:	e009      	b.n	8008b82 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008b6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008b72:	61fb      	str	r3, [r7, #28]
        break;
 8008b74:	e005      	b.n	8008b82 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8008b76:	2300      	movs	r3, #0
 8008b78:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8008b7a:	2301      	movs	r3, #1
 8008b7c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008b80:	bf00      	nop
    }

    if (pclk != 0U)
 8008b82:	69fb      	ldr	r3, [r7, #28]
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d019      	beq.n	8008bbc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008b88:	68fb      	ldr	r3, [r7, #12]
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	085a      	lsrs	r2, r3, #1
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	441a      	add	r2, r3
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	685b      	ldr	r3, [r3, #4]
 8008b96:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b9a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b9c:	69bb      	ldr	r3, [r7, #24]
 8008b9e:	2b0f      	cmp	r3, #15
 8008ba0:	d909      	bls.n	8008bb6 <UART_SetConfig+0x432>
 8008ba2:	69bb      	ldr	r3, [r7, #24]
 8008ba4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ba8:	d205      	bcs.n	8008bb6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008baa:	69bb      	ldr	r3, [r7, #24]
 8008bac:	b29a      	uxth	r2, r3
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	681b      	ldr	r3, [r3, #0]
 8008bb2:	60da      	str	r2, [r3, #12]
 8008bb4:	e002      	b.n	8008bbc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008bb6:	2301      	movs	r3, #1
 8008bb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008bbc:	68fb      	ldr	r3, [r7, #12]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008bc2:	68fb      	ldr	r3, [r7, #12]
 8008bc4:	2200      	movs	r2, #0
 8008bc6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008bc8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008bcc:	4618      	mov	r0, r3
 8008bce:	3728      	adds	r7, #40	; 0x28
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008bd6:	bf00      	nop
 8008bd8:	00f42400 	.word	0x00f42400

08008bdc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008bdc:	b480      	push	{r7}
 8008bde:	b083      	sub	sp, #12
 8008be0:	af00      	add	r7, sp, #0
 8008be2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008be8:	f003 0301 	and.w	r3, r3, #1
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d00a      	beq.n	8008c06 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	685b      	ldr	r3, [r3, #4]
 8008bf6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	430a      	orrs	r2, r1
 8008c04:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c0a:	f003 0302 	and.w	r3, r3, #2
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d00a      	beq.n	8008c28 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	430a      	orrs	r2, r1
 8008c26:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c2c:	f003 0304 	and.w	r3, r3, #4
 8008c30:	2b00      	cmp	r3, #0
 8008c32:	d00a      	beq.n	8008c4a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	685b      	ldr	r3, [r3, #4]
 8008c3a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008c42:	687b      	ldr	r3, [r7, #4]
 8008c44:	681b      	ldr	r3, [r3, #0]
 8008c46:	430a      	orrs	r2, r1
 8008c48:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c4e:	f003 0308 	and.w	r3, r3, #8
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d00a      	beq.n	8008c6c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	685b      	ldr	r3, [r3, #4]
 8008c5c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008c60:	687b      	ldr	r3, [r7, #4]
 8008c62:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	430a      	orrs	r2, r1
 8008c6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c70:	f003 0310 	and.w	r3, r3, #16
 8008c74:	2b00      	cmp	r3, #0
 8008c76:	d00a      	beq.n	8008c8e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	689b      	ldr	r3, [r3, #8]
 8008c7e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	681b      	ldr	r3, [r3, #0]
 8008c8a:	430a      	orrs	r2, r1
 8008c8c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008c92:	f003 0320 	and.w	r3, r3, #32
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d00a      	beq.n	8008cb0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	681b      	ldr	r3, [r3, #0]
 8008c9e:	689b      	ldr	r3, [r3, #8]
 8008ca0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	430a      	orrs	r2, r1
 8008cae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008cb8:	2b00      	cmp	r3, #0
 8008cba:	d01a      	beq.n	8008cf2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	685b      	ldr	r3, [r3, #4]
 8008cc2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	430a      	orrs	r2, r1
 8008cd0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008cda:	d10a      	bne.n	8008cf2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	685b      	ldr	r3, [r3, #4]
 8008ce2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	681b      	ldr	r3, [r3, #0]
 8008cee:	430a      	orrs	r2, r1
 8008cf0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00a      	beq.n	8008d14 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	685b      	ldr	r3, [r3, #4]
 8008d04:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	430a      	orrs	r2, r1
 8008d12:	605a      	str	r2, [r3, #4]
  }
}
 8008d14:	bf00      	nop
 8008d16:	370c      	adds	r7, #12
 8008d18:	46bd      	mov	sp, r7
 8008d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d1e:	4770      	bx	lr

08008d20 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b086      	sub	sp, #24
 8008d24:	af02      	add	r7, sp, #8
 8008d26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008d30:	f7fb f906 	bl	8003f40 <HAL_GetTick>
 8008d34:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 0308 	and.w	r3, r3, #8
 8008d40:	2b08      	cmp	r3, #8
 8008d42:	d10e      	bne.n	8008d62 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d48:	9300      	str	r3, [sp, #0]
 8008d4a:	68fb      	ldr	r3, [r7, #12]
 8008d4c:	2200      	movs	r2, #0
 8008d4e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008d52:	6878      	ldr	r0, [r7, #4]
 8008d54:	f000 f82d 	bl	8008db2 <UART_WaitOnFlagUntilTimeout>
 8008d58:	4603      	mov	r3, r0
 8008d5a:	2b00      	cmp	r3, #0
 8008d5c:	d001      	beq.n	8008d62 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d5e:	2303      	movs	r3, #3
 8008d60:	e023      	b.n	8008daa <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	681b      	ldr	r3, [r3, #0]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	f003 0304 	and.w	r3, r3, #4
 8008d6c:	2b04      	cmp	r3, #4
 8008d6e:	d10e      	bne.n	8008d8e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d70:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d74:	9300      	str	r3, [sp, #0]
 8008d76:	68fb      	ldr	r3, [r7, #12]
 8008d78:	2200      	movs	r2, #0
 8008d7a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f817 	bl	8008db2 <UART_WaitOnFlagUntilTimeout>
 8008d84:	4603      	mov	r3, r0
 8008d86:	2b00      	cmp	r3, #0
 8008d88:	d001      	beq.n	8008d8e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d8a:	2303      	movs	r3, #3
 8008d8c:	e00d      	b.n	8008daa <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008d94:	687b      	ldr	r3, [r7, #4]
 8008d96:	2220      	movs	r2, #32
 8008d98:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d9a:	687b      	ldr	r3, [r7, #4]
 8008d9c:	2200      	movs	r2, #0
 8008d9e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2200      	movs	r2, #0
 8008da4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008da8:	2300      	movs	r3, #0
}
 8008daa:	4618      	mov	r0, r3
 8008dac:	3710      	adds	r7, #16
 8008dae:	46bd      	mov	sp, r7
 8008db0:	bd80      	pop	{r7, pc}

08008db2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008db2:	b580      	push	{r7, lr}
 8008db4:	b09c      	sub	sp, #112	; 0x70
 8008db6:	af00      	add	r7, sp, #0
 8008db8:	60f8      	str	r0, [r7, #12]
 8008dba:	60b9      	str	r1, [r7, #8]
 8008dbc:	603b      	str	r3, [r7, #0]
 8008dbe:	4613      	mov	r3, r2
 8008dc0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dc2:	e0a5      	b.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008dc6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dca:	f000 80a1 	beq.w	8008f10 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008dce:	f7fb f8b7 	bl	8003f40 <HAL_GetTick>
 8008dd2:	4602      	mov	r2, r0
 8008dd4:	683b      	ldr	r3, [r7, #0]
 8008dd6:	1ad3      	subs	r3, r2, r3
 8008dd8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008dda:	429a      	cmp	r2, r3
 8008ddc:	d302      	bcc.n	8008de4 <UART_WaitOnFlagUntilTimeout+0x32>
 8008dde:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	d13e      	bne.n	8008e62 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008dec:	e853 3f00 	ldrex	r3, [r3]
 8008df0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008df2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008df4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008df8:	667b      	str	r3, [r7, #100]	; 0x64
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	681b      	ldr	r3, [r3, #0]
 8008dfe:	461a      	mov	r2, r3
 8008e00:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008e02:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e04:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e06:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008e08:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008e0a:	e841 2300 	strex	r3, r2, [r1]
 8008e0e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008e10:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008e12:	2b00      	cmp	r3, #0
 8008e14:	d1e6      	bne.n	8008de4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e16:	68fb      	ldr	r3, [r7, #12]
 8008e18:	681b      	ldr	r3, [r3, #0]
 8008e1a:	3308      	adds	r3, #8
 8008e1c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e1e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008e20:	e853 3f00 	ldrex	r3, [r3]
 8008e24:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008e28:	f023 0301 	bic.w	r3, r3, #1
 8008e2c:	663b      	str	r3, [r7, #96]	; 0x60
 8008e2e:	68fb      	ldr	r3, [r7, #12]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	3308      	adds	r3, #8
 8008e34:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008e36:	64ba      	str	r2, [r7, #72]	; 0x48
 8008e38:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008e3c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008e3e:	e841 2300 	strex	r3, r2, [r1]
 8008e42:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008e44:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e46:	2b00      	cmp	r3, #0
 8008e48:	d1e5      	bne.n	8008e16 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008e4a:	68fb      	ldr	r3, [r7, #12]
 8008e4c:	2220      	movs	r2, #32
 8008e4e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	2220      	movs	r2, #32
 8008e54:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	2200      	movs	r2, #0
 8008e5a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008e5e:	2303      	movs	r3, #3
 8008e60:	e067      	b.n	8008f32 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	f003 0304 	and.w	r3, r3, #4
 8008e6c:	2b00      	cmp	r3, #0
 8008e6e:	d04f      	beq.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	69db      	ldr	r3, [r3, #28]
 8008e76:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e7a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e7e:	d147      	bne.n	8008f10 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e80:	68fb      	ldr	r3, [r7, #12]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e88:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e92:	e853 3f00 	ldrex	r3, [r3]
 8008e96:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e9a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e9e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	681b      	ldr	r3, [r3, #0]
 8008ea4:	461a      	mov	r2, r3
 8008ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ea8:	637b      	str	r3, [r7, #52]	; 0x34
 8008eaa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008eac:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008eae:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008eb0:	e841 2300 	strex	r3, r2, [r1]
 8008eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008eb8:	2b00      	cmp	r3, #0
 8008eba:	d1e6      	bne.n	8008e8a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	3308      	adds	r3, #8
 8008ec2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ec4:	697b      	ldr	r3, [r7, #20]
 8008ec6:	e853 3f00 	ldrex	r3, [r3]
 8008eca:	613b      	str	r3, [r7, #16]
   return(result);
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	f023 0301 	bic.w	r3, r3, #1
 8008ed2:	66bb      	str	r3, [r7, #104]	; 0x68
 8008ed4:	68fb      	ldr	r3, [r7, #12]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	3308      	adds	r3, #8
 8008eda:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008edc:	623a      	str	r2, [r7, #32]
 8008ede:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ee0:	69f9      	ldr	r1, [r7, #28]
 8008ee2:	6a3a      	ldr	r2, [r7, #32]
 8008ee4:	e841 2300 	strex	r3, r2, [r1]
 8008ee8:	61bb      	str	r3, [r7, #24]
   return(result);
 8008eea:	69bb      	ldr	r3, [r7, #24]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d1e5      	bne.n	8008ebc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2220      	movs	r2, #32
 8008ef4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008ef6:	68fb      	ldr	r3, [r7, #12]
 8008ef8:	2220      	movs	r2, #32
 8008efa:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	2220      	movs	r2, #32
 8008f00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008f0c:	2303      	movs	r3, #3
 8008f0e:	e010      	b.n	8008f32 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f10:	68fb      	ldr	r3, [r7, #12]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	69da      	ldr	r2, [r3, #28]
 8008f16:	68bb      	ldr	r3, [r7, #8]
 8008f18:	4013      	ands	r3, r2
 8008f1a:	68ba      	ldr	r2, [r7, #8]
 8008f1c:	429a      	cmp	r2, r3
 8008f1e:	bf0c      	ite	eq
 8008f20:	2301      	moveq	r3, #1
 8008f22:	2300      	movne	r3, #0
 8008f24:	b2db      	uxtb	r3, r3
 8008f26:	461a      	mov	r2, r3
 8008f28:	79fb      	ldrb	r3, [r7, #7]
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	f43f af4a 	beq.w	8008dc4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008f30:	2300      	movs	r3, #0
}
 8008f32:	4618      	mov	r0, r3
 8008f34:	3770      	adds	r7, #112	; 0x70
 8008f36:	46bd      	mov	sp, r7
 8008f38:	bd80      	pop	{r7, pc}
	...

08008f3c <__NVIC_SetPriority>:
{
 8008f3c:	b480      	push	{r7}
 8008f3e:	b083      	sub	sp, #12
 8008f40:	af00      	add	r7, sp, #0
 8008f42:	4603      	mov	r3, r0
 8008f44:	6039      	str	r1, [r7, #0]
 8008f46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008f48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	db0a      	blt.n	8008f66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f50:	683b      	ldr	r3, [r7, #0]
 8008f52:	b2da      	uxtb	r2, r3
 8008f54:	490c      	ldr	r1, [pc, #48]	; (8008f88 <__NVIC_SetPriority+0x4c>)
 8008f56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008f5a:	0112      	lsls	r2, r2, #4
 8008f5c:	b2d2      	uxtb	r2, r2
 8008f5e:	440b      	add	r3, r1
 8008f60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008f64:	e00a      	b.n	8008f7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008f66:	683b      	ldr	r3, [r7, #0]
 8008f68:	b2da      	uxtb	r2, r3
 8008f6a:	4908      	ldr	r1, [pc, #32]	; (8008f8c <__NVIC_SetPriority+0x50>)
 8008f6c:	79fb      	ldrb	r3, [r7, #7]
 8008f6e:	f003 030f 	and.w	r3, r3, #15
 8008f72:	3b04      	subs	r3, #4
 8008f74:	0112      	lsls	r2, r2, #4
 8008f76:	b2d2      	uxtb	r2, r2
 8008f78:	440b      	add	r3, r1
 8008f7a:	761a      	strb	r2, [r3, #24]
}
 8008f7c:	bf00      	nop
 8008f7e:	370c      	adds	r7, #12
 8008f80:	46bd      	mov	sp, r7
 8008f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f86:	4770      	bx	lr
 8008f88:	e000e100 	.word	0xe000e100
 8008f8c:	e000ed00 	.word	0xe000ed00

08008f90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008f94:	4b05      	ldr	r3, [pc, #20]	; (8008fac <SysTick_Handler+0x1c>)
 8008f96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008f98:	f002 fb6c 	bl	800b674 <xTaskGetSchedulerState>
 8008f9c:	4603      	mov	r3, r0
 8008f9e:	2b01      	cmp	r3, #1
 8008fa0:	d001      	beq.n	8008fa6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008fa2:	f003 fa51 	bl	800c448 <xPortSysTickHandler>
  }
}
 8008fa6:	bf00      	nop
 8008fa8:	bd80      	pop	{r7, pc}
 8008faa:	bf00      	nop
 8008fac:	e000e010 	.word	0xe000e010

08008fb0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008fb0:	b580      	push	{r7, lr}
 8008fb2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	f06f 0004 	mvn.w	r0, #4
 8008fba:	f7ff ffbf 	bl	8008f3c <__NVIC_SetPriority>
#endif
}
 8008fbe:	bf00      	nop
 8008fc0:	bd80      	pop	{r7, pc}
	...

08008fc4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008fc4:	b480      	push	{r7}
 8008fc6:	b083      	sub	sp, #12
 8008fc8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008fca:	f3ef 8305 	mrs	r3, IPSR
 8008fce:	603b      	str	r3, [r7, #0]
  return(result);
 8008fd0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d003      	beq.n	8008fde <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008fd6:	f06f 0305 	mvn.w	r3, #5
 8008fda:	607b      	str	r3, [r7, #4]
 8008fdc:	e00c      	b.n	8008ff8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008fde:	4b0a      	ldr	r3, [pc, #40]	; (8009008 <osKernelInitialize+0x44>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	d105      	bne.n	8008ff2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008fe6:	4b08      	ldr	r3, [pc, #32]	; (8009008 <osKernelInitialize+0x44>)
 8008fe8:	2201      	movs	r2, #1
 8008fea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008fec:	2300      	movs	r3, #0
 8008fee:	607b      	str	r3, [r7, #4]
 8008ff0:	e002      	b.n	8008ff8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008ff2:	f04f 33ff 	mov.w	r3, #4294967295
 8008ff6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ff8:	687b      	ldr	r3, [r7, #4]
}
 8008ffa:	4618      	mov	r0, r3
 8008ffc:	370c      	adds	r7, #12
 8008ffe:	46bd      	mov	sp, r7
 8009000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009004:	4770      	bx	lr
 8009006:	bf00      	nop
 8009008:	20000694 	.word	0x20000694

0800900c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800900c:	b580      	push	{r7, lr}
 800900e:	b082      	sub	sp, #8
 8009010:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009012:	f3ef 8305 	mrs	r3, IPSR
 8009016:	603b      	str	r3, [r7, #0]
  return(result);
 8009018:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800901a:	2b00      	cmp	r3, #0
 800901c:	d003      	beq.n	8009026 <osKernelStart+0x1a>
    stat = osErrorISR;
 800901e:	f06f 0305 	mvn.w	r3, #5
 8009022:	607b      	str	r3, [r7, #4]
 8009024:	e010      	b.n	8009048 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009026:	4b0b      	ldr	r3, [pc, #44]	; (8009054 <osKernelStart+0x48>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	2b01      	cmp	r3, #1
 800902c:	d109      	bne.n	8009042 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800902e:	f7ff ffbf 	bl	8008fb0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009032:	4b08      	ldr	r3, [pc, #32]	; (8009054 <osKernelStart+0x48>)
 8009034:	2202      	movs	r2, #2
 8009036:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009038:	f001 fec0 	bl	800adbc <vTaskStartScheduler>
      stat = osOK;
 800903c:	2300      	movs	r3, #0
 800903e:	607b      	str	r3, [r7, #4]
 8009040:	e002      	b.n	8009048 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009042:	f04f 33ff 	mov.w	r3, #4294967295
 8009046:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009048:	687b      	ldr	r3, [r7, #4]
}
 800904a:	4618      	mov	r0, r3
 800904c:	3708      	adds	r7, #8
 800904e:	46bd      	mov	sp, r7
 8009050:	bd80      	pop	{r7, pc}
 8009052:	bf00      	nop
 8009054:	20000694 	.word	0x20000694

08009058 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009058:	b580      	push	{r7, lr}
 800905a:	b08e      	sub	sp, #56	; 0x38
 800905c:	af04      	add	r7, sp, #16
 800905e:	60f8      	str	r0, [r7, #12]
 8009060:	60b9      	str	r1, [r7, #8]
 8009062:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009064:	2300      	movs	r3, #0
 8009066:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009068:	f3ef 8305 	mrs	r3, IPSR
 800906c:	617b      	str	r3, [r7, #20]
  return(result);
 800906e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009070:	2b00      	cmp	r3, #0
 8009072:	d17e      	bne.n	8009172 <osThreadNew+0x11a>
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d07b      	beq.n	8009172 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800907a:	2340      	movs	r3, #64	; 0x40
 800907c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800907e:	2318      	movs	r3, #24
 8009080:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009082:	2300      	movs	r3, #0
 8009084:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8009086:	f04f 33ff 	mov.w	r3, #4294967295
 800908a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	2b00      	cmp	r3, #0
 8009090:	d045      	beq.n	800911e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	2b00      	cmp	r3, #0
 8009098:	d002      	beq.n	80090a0 <osThreadNew+0x48>
        name = attr->name;
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	699b      	ldr	r3, [r3, #24]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d002      	beq.n	80090ae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80090a8:	687b      	ldr	r3, [r7, #4]
 80090aa:	699b      	ldr	r3, [r3, #24]
 80090ac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80090ae:	69fb      	ldr	r3, [r7, #28]
 80090b0:	2b00      	cmp	r3, #0
 80090b2:	d008      	beq.n	80090c6 <osThreadNew+0x6e>
 80090b4:	69fb      	ldr	r3, [r7, #28]
 80090b6:	2b38      	cmp	r3, #56	; 0x38
 80090b8:	d805      	bhi.n	80090c6 <osThreadNew+0x6e>
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	685b      	ldr	r3, [r3, #4]
 80090be:	f003 0301 	and.w	r3, r3, #1
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d001      	beq.n	80090ca <osThreadNew+0x72>
        return (NULL);
 80090c6:	2300      	movs	r3, #0
 80090c8:	e054      	b.n	8009174 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	695b      	ldr	r3, [r3, #20]
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d003      	beq.n	80090da <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	695b      	ldr	r3, [r3, #20]
 80090d6:	089b      	lsrs	r3, r3, #2
 80090d8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	689b      	ldr	r3, [r3, #8]
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d00e      	beq.n	8009100 <osThreadNew+0xa8>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	68db      	ldr	r3, [r3, #12]
 80090e6:	2bbb      	cmp	r3, #187	; 0xbb
 80090e8:	d90a      	bls.n	8009100 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80090ee:	2b00      	cmp	r3, #0
 80090f0:	d006      	beq.n	8009100 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80090f2:	687b      	ldr	r3, [r7, #4]
 80090f4:	695b      	ldr	r3, [r3, #20]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d002      	beq.n	8009100 <osThreadNew+0xa8>
        mem = 1;
 80090fa:	2301      	movs	r3, #1
 80090fc:	61bb      	str	r3, [r7, #24]
 80090fe:	e010      	b.n	8009122 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	689b      	ldr	r3, [r3, #8]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d10c      	bne.n	8009122 <osThreadNew+0xca>
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	68db      	ldr	r3, [r3, #12]
 800910c:	2b00      	cmp	r3, #0
 800910e:	d108      	bne.n	8009122 <osThreadNew+0xca>
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	691b      	ldr	r3, [r3, #16]
 8009114:	2b00      	cmp	r3, #0
 8009116:	d104      	bne.n	8009122 <osThreadNew+0xca>
          mem = 0;
 8009118:	2300      	movs	r3, #0
 800911a:	61bb      	str	r3, [r7, #24]
 800911c:	e001      	b.n	8009122 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800911e:	2300      	movs	r3, #0
 8009120:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009122:	69bb      	ldr	r3, [r7, #24]
 8009124:	2b01      	cmp	r3, #1
 8009126:	d110      	bne.n	800914a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800912c:	687a      	ldr	r2, [r7, #4]
 800912e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009130:	9202      	str	r2, [sp, #8]
 8009132:	9301      	str	r3, [sp, #4]
 8009134:	69fb      	ldr	r3, [r7, #28]
 8009136:	9300      	str	r3, [sp, #0]
 8009138:	68bb      	ldr	r3, [r7, #8]
 800913a:	6a3a      	ldr	r2, [r7, #32]
 800913c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800913e:	68f8      	ldr	r0, [r7, #12]
 8009140:	f001 fc50 	bl	800a9e4 <xTaskCreateStatic>
 8009144:	4603      	mov	r3, r0
 8009146:	613b      	str	r3, [r7, #16]
 8009148:	e013      	b.n	8009172 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800914a:	69bb      	ldr	r3, [r7, #24]
 800914c:	2b00      	cmp	r3, #0
 800914e:	d110      	bne.n	8009172 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009150:	6a3b      	ldr	r3, [r7, #32]
 8009152:	b29a      	uxth	r2, r3
 8009154:	f107 0310 	add.w	r3, r7, #16
 8009158:	9301      	str	r3, [sp, #4]
 800915a:	69fb      	ldr	r3, [r7, #28]
 800915c:	9300      	str	r3, [sp, #0]
 800915e:	68bb      	ldr	r3, [r7, #8]
 8009160:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009162:	68f8      	ldr	r0, [r7, #12]
 8009164:	f001 fc9b 	bl	800aa9e <xTaskCreate>
 8009168:	4603      	mov	r3, r0
 800916a:	2b01      	cmp	r3, #1
 800916c:	d001      	beq.n	8009172 <osThreadNew+0x11a>
            hTask = NULL;
 800916e:	2300      	movs	r3, #0
 8009170:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009172:	693b      	ldr	r3, [r7, #16]
}
 8009174:	4618      	mov	r0, r3
 8009176:	3728      	adds	r7, #40	; 0x28
 8009178:	46bd      	mov	sp, r7
 800917a:	bd80      	pop	{r7, pc}

0800917c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800917c:	b580      	push	{r7, lr}
 800917e:	b084      	sub	sp, #16
 8009180:	af00      	add	r7, sp, #0
 8009182:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009184:	f3ef 8305 	mrs	r3, IPSR
 8009188:	60bb      	str	r3, [r7, #8]
  return(result);
 800918a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800918c:	2b00      	cmp	r3, #0
 800918e:	d003      	beq.n	8009198 <osDelay+0x1c>
    stat = osErrorISR;
 8009190:	f06f 0305 	mvn.w	r3, #5
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	e007      	b.n	80091a8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009198:	2300      	movs	r3, #0
 800919a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800919c:	687b      	ldr	r3, [r7, #4]
 800919e:	2b00      	cmp	r3, #0
 80091a0:	d002      	beq.n	80091a8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80091a2:	6878      	ldr	r0, [r7, #4]
 80091a4:	f001 fdd6 	bl	800ad54 <vTaskDelay>
    }
  }

  return (stat);
 80091a8:	68fb      	ldr	r3, [r7, #12]
}
 80091aa:	4618      	mov	r0, r3
 80091ac:	3710      	adds	r7, #16
 80091ae:	46bd      	mov	sp, r7
 80091b0:	bd80      	pop	{r7, pc}

080091b2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 80091b2:	b580      	push	{r7, lr}
 80091b4:	b088      	sub	sp, #32
 80091b6:	af00      	add	r7, sp, #0
 80091b8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 80091ba:	2300      	movs	r3, #0
 80091bc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091be:	f3ef 8305 	mrs	r3, IPSR
 80091c2:	60bb      	str	r3, [r7, #8]
  return(result);
 80091c4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 80091c6:	2b00      	cmp	r3, #0
 80091c8:	d174      	bne.n	80092b4 <osMutexNew+0x102>
    if (attr != NULL) {
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	2b00      	cmp	r3, #0
 80091ce:	d003      	beq.n	80091d8 <osMutexNew+0x26>
      type = attr->attr_bits;
 80091d0:	687b      	ldr	r3, [r7, #4]
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	61bb      	str	r3, [r7, #24]
 80091d6:	e001      	b.n	80091dc <osMutexNew+0x2a>
    } else {
      type = 0U;
 80091d8:	2300      	movs	r3, #0
 80091da:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 80091dc:	69bb      	ldr	r3, [r7, #24]
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	2b00      	cmp	r3, #0
 80091e4:	d002      	beq.n	80091ec <osMutexNew+0x3a>
      rmtx = 1U;
 80091e6:	2301      	movs	r3, #1
 80091e8:	617b      	str	r3, [r7, #20]
 80091ea:	e001      	b.n	80091f0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 80091ec:	2300      	movs	r3, #0
 80091ee:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 80091f0:	69bb      	ldr	r3, [r7, #24]
 80091f2:	f003 0308 	and.w	r3, r3, #8
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	d15c      	bne.n	80092b4 <osMutexNew+0x102>
      mem = -1;
 80091fa:	f04f 33ff 	mov.w	r3, #4294967295
 80091fe:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d015      	beq.n	8009232 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	2b00      	cmp	r3, #0
 800920c:	d006      	beq.n	800921c <osMutexNew+0x6a>
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	68db      	ldr	r3, [r3, #12]
 8009212:	2b4f      	cmp	r3, #79	; 0x4f
 8009214:	d902      	bls.n	800921c <osMutexNew+0x6a>
          mem = 1;
 8009216:	2301      	movs	r3, #1
 8009218:	613b      	str	r3, [r7, #16]
 800921a:	e00c      	b.n	8009236 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	689b      	ldr	r3, [r3, #8]
 8009220:	2b00      	cmp	r3, #0
 8009222:	d108      	bne.n	8009236 <osMutexNew+0x84>
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	68db      	ldr	r3, [r3, #12]
 8009228:	2b00      	cmp	r3, #0
 800922a:	d104      	bne.n	8009236 <osMutexNew+0x84>
            mem = 0;
 800922c:	2300      	movs	r3, #0
 800922e:	613b      	str	r3, [r7, #16]
 8009230:	e001      	b.n	8009236 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009232:	2300      	movs	r3, #0
 8009234:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009236:	693b      	ldr	r3, [r7, #16]
 8009238:	2b01      	cmp	r3, #1
 800923a:	d112      	bne.n	8009262 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800923c:	697b      	ldr	r3, [r7, #20]
 800923e:	2b00      	cmp	r3, #0
 8009240:	d007      	beq.n	8009252 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	4619      	mov	r1, r3
 8009248:	2004      	movs	r0, #4
 800924a:	f000 fce0 	bl	8009c0e <xQueueCreateMutexStatic>
 800924e:	61f8      	str	r0, [r7, #28]
 8009250:	e016      	b.n	8009280 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	689b      	ldr	r3, [r3, #8]
 8009256:	4619      	mov	r1, r3
 8009258:	2001      	movs	r0, #1
 800925a:	f000 fcd8 	bl	8009c0e <xQueueCreateMutexStatic>
 800925e:	61f8      	str	r0, [r7, #28]
 8009260:	e00e      	b.n	8009280 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009262:	693b      	ldr	r3, [r7, #16]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d10b      	bne.n	8009280 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009268:	697b      	ldr	r3, [r7, #20]
 800926a:	2b00      	cmp	r3, #0
 800926c:	d004      	beq.n	8009278 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800926e:	2004      	movs	r0, #4
 8009270:	f000 fcb5 	bl	8009bde <xQueueCreateMutex>
 8009274:	61f8      	str	r0, [r7, #28]
 8009276:	e003      	b.n	8009280 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009278:	2001      	movs	r0, #1
 800927a:	f000 fcb0 	bl	8009bde <xQueueCreateMutex>
 800927e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009280:	69fb      	ldr	r3, [r7, #28]
 8009282:	2b00      	cmp	r3, #0
 8009284:	d00c      	beq.n	80092a0 <osMutexNew+0xee>
        if (attr != NULL) {
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	2b00      	cmp	r3, #0
 800928a:	d003      	beq.n	8009294 <osMutexNew+0xe2>
          name = attr->name;
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	60fb      	str	r3, [r7, #12]
 8009292:	e001      	b.n	8009298 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009294:	2300      	movs	r3, #0
 8009296:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009298:	68f9      	ldr	r1, [r7, #12]
 800929a:	69f8      	ldr	r0, [r7, #28]
 800929c:	f001 fb1a 	bl	800a8d4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	2b00      	cmp	r3, #0
 80092a4:	d006      	beq.n	80092b4 <osMutexNew+0x102>
 80092a6:	697b      	ldr	r3, [r7, #20]
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d003      	beq.n	80092b4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 80092ac:	69fb      	ldr	r3, [r7, #28]
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 80092b4:	69fb      	ldr	r3, [r7, #28]
}
 80092b6:	4618      	mov	r0, r3
 80092b8:	3720      	adds	r7, #32
 80092ba:	46bd      	mov	sp, r7
 80092bc:	bd80      	pop	{r7, pc}

080092be <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80092be:	b580      	push	{r7, lr}
 80092c0:	b08a      	sub	sp, #40	; 0x28
 80092c2:	af02      	add	r7, sp, #8
 80092c4:	60f8      	str	r0, [r7, #12]
 80092c6:	60b9      	str	r1, [r7, #8]
 80092c8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80092ca:	2300      	movs	r3, #0
 80092cc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80092ce:	f3ef 8305 	mrs	r3, IPSR
 80092d2:	613b      	str	r3, [r7, #16]
  return(result);
 80092d4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80092d6:	2b00      	cmp	r3, #0
 80092d8:	d175      	bne.n	80093c6 <osSemaphoreNew+0x108>
 80092da:	68fb      	ldr	r3, [r7, #12]
 80092dc:	2b00      	cmp	r3, #0
 80092de:	d072      	beq.n	80093c6 <osSemaphoreNew+0x108>
 80092e0:	68ba      	ldr	r2, [r7, #8]
 80092e2:	68fb      	ldr	r3, [r7, #12]
 80092e4:	429a      	cmp	r2, r3
 80092e6:	d86e      	bhi.n	80093c6 <osSemaphoreNew+0x108>
    mem = -1;
 80092e8:	f04f 33ff 	mov.w	r3, #4294967295
 80092ec:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	2b00      	cmp	r3, #0
 80092f2:	d015      	beq.n	8009320 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	2b00      	cmp	r3, #0
 80092fa:	d006      	beq.n	800930a <osSemaphoreNew+0x4c>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	68db      	ldr	r3, [r3, #12]
 8009300:	2b4f      	cmp	r3, #79	; 0x4f
 8009302:	d902      	bls.n	800930a <osSemaphoreNew+0x4c>
        mem = 1;
 8009304:	2301      	movs	r3, #1
 8009306:	61bb      	str	r3, [r7, #24]
 8009308:	e00c      	b.n	8009324 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	689b      	ldr	r3, [r3, #8]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d108      	bne.n	8009324 <osSemaphoreNew+0x66>
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	2b00      	cmp	r3, #0
 8009318:	d104      	bne.n	8009324 <osSemaphoreNew+0x66>
          mem = 0;
 800931a:	2300      	movs	r3, #0
 800931c:	61bb      	str	r3, [r7, #24]
 800931e:	e001      	b.n	8009324 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8009320:	2300      	movs	r3, #0
 8009322:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8009324:	69bb      	ldr	r3, [r7, #24]
 8009326:	f1b3 3fff 	cmp.w	r3, #4294967295
 800932a:	d04c      	beq.n	80093c6 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	2b01      	cmp	r3, #1
 8009330:	d128      	bne.n	8009384 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8009332:	69bb      	ldr	r3, [r7, #24]
 8009334:	2b01      	cmp	r3, #1
 8009336:	d10a      	bne.n	800934e <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	689b      	ldr	r3, [r3, #8]
 800933c:	2203      	movs	r2, #3
 800933e:	9200      	str	r2, [sp, #0]
 8009340:	2200      	movs	r2, #0
 8009342:	2100      	movs	r1, #0
 8009344:	2001      	movs	r0, #1
 8009346:	f000 fb5b 	bl	8009a00 <xQueueGenericCreateStatic>
 800934a:	61f8      	str	r0, [r7, #28]
 800934c:	e005      	b.n	800935a <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800934e:	2203      	movs	r2, #3
 8009350:	2100      	movs	r1, #0
 8009352:	2001      	movs	r0, #1
 8009354:	f000 fbcc 	bl	8009af0 <xQueueGenericCreate>
 8009358:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800935a:	69fb      	ldr	r3, [r7, #28]
 800935c:	2b00      	cmp	r3, #0
 800935e:	d022      	beq.n	80093a6 <osSemaphoreNew+0xe8>
 8009360:	68bb      	ldr	r3, [r7, #8]
 8009362:	2b00      	cmp	r3, #0
 8009364:	d01f      	beq.n	80093a6 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8009366:	2300      	movs	r3, #0
 8009368:	2200      	movs	r2, #0
 800936a:	2100      	movs	r1, #0
 800936c:	69f8      	ldr	r0, [r7, #28]
 800936e:	f000 fcd3 	bl	8009d18 <xQueueGenericSend>
 8009372:	4603      	mov	r3, r0
 8009374:	2b01      	cmp	r3, #1
 8009376:	d016      	beq.n	80093a6 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8009378:	69f8      	ldr	r0, [r7, #28]
 800937a:	f001 f95f 	bl	800a63c <vQueueDelete>
            hSemaphore = NULL;
 800937e:	2300      	movs	r3, #0
 8009380:	61fb      	str	r3, [r7, #28]
 8009382:	e010      	b.n	80093a6 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8009384:	69bb      	ldr	r3, [r7, #24]
 8009386:	2b01      	cmp	r3, #1
 8009388:	d108      	bne.n	800939c <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	689b      	ldr	r3, [r3, #8]
 800938e:	461a      	mov	r2, r3
 8009390:	68b9      	ldr	r1, [r7, #8]
 8009392:	68f8      	ldr	r0, [r7, #12]
 8009394:	f000 fc56 	bl	8009c44 <xQueueCreateCountingSemaphoreStatic>
 8009398:	61f8      	str	r0, [r7, #28]
 800939a:	e004      	b.n	80093a6 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800939c:	68b9      	ldr	r1, [r7, #8]
 800939e:	68f8      	ldr	r0, [r7, #12]
 80093a0:	f000 fc87 	bl	8009cb2 <xQueueCreateCountingSemaphore>
 80093a4:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80093a6:	69fb      	ldr	r3, [r7, #28]
 80093a8:	2b00      	cmp	r3, #0
 80093aa:	d00c      	beq.n	80093c6 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d003      	beq.n	80093ba <osSemaphoreNew+0xfc>
          name = attr->name;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	617b      	str	r3, [r7, #20]
 80093b8:	e001      	b.n	80093be <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80093ba:	2300      	movs	r3, #0
 80093bc:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80093be:	6979      	ldr	r1, [r7, #20]
 80093c0:	69f8      	ldr	r0, [r7, #28]
 80093c2:	f001 fa87 	bl	800a8d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80093c6:	69fb      	ldr	r3, [r7, #28]
}
 80093c8:	4618      	mov	r0, r3
 80093ca:	3720      	adds	r7, #32
 80093cc:	46bd      	mov	sp, r7
 80093ce:	bd80      	pop	{r7, pc}

080093d0 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
 80093d8:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80093de:	2300      	movs	r3, #0
 80093e0:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80093e2:	693b      	ldr	r3, [r7, #16]
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d103      	bne.n	80093f0 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80093e8:	f06f 0303 	mvn.w	r3, #3
 80093ec:	617b      	str	r3, [r7, #20]
 80093ee:	e039      	b.n	8009464 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80093f0:	f3ef 8305 	mrs	r3, IPSR
 80093f4:	60fb      	str	r3, [r7, #12]
  return(result);
 80093f6:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80093f8:	2b00      	cmp	r3, #0
 80093fa:	d022      	beq.n	8009442 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80093fc:	683b      	ldr	r3, [r7, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d003      	beq.n	800940a <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8009402:	f06f 0303 	mvn.w	r3, #3
 8009406:	617b      	str	r3, [r7, #20]
 8009408:	e02c      	b.n	8009464 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800940a:	2300      	movs	r3, #0
 800940c:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800940e:	f107 0308 	add.w	r3, r7, #8
 8009412:	461a      	mov	r2, r3
 8009414:	2100      	movs	r1, #0
 8009416:	6938      	ldr	r0, [r7, #16]
 8009418:	f001 f890 	bl	800a53c <xQueueReceiveFromISR>
 800941c:	4603      	mov	r3, r0
 800941e:	2b01      	cmp	r3, #1
 8009420:	d003      	beq.n	800942a <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8009422:	f06f 0302 	mvn.w	r3, #2
 8009426:	617b      	str	r3, [r7, #20]
 8009428:	e01c      	b.n	8009464 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800942a:	68bb      	ldr	r3, [r7, #8]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d019      	beq.n	8009464 <osSemaphoreAcquire+0x94>
 8009430:	4b0f      	ldr	r3, [pc, #60]	; (8009470 <osSemaphoreAcquire+0xa0>)
 8009432:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009436:	601a      	str	r2, [r3, #0]
 8009438:	f3bf 8f4f 	dsb	sy
 800943c:	f3bf 8f6f 	isb	sy
 8009440:	e010      	b.n	8009464 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8009442:	6839      	ldr	r1, [r7, #0]
 8009444:	6938      	ldr	r0, [r7, #16]
 8009446:	f000 ff6d 	bl	800a324 <xQueueSemaphoreTake>
 800944a:	4603      	mov	r3, r0
 800944c:	2b01      	cmp	r3, #1
 800944e:	d009      	beq.n	8009464 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8009450:	683b      	ldr	r3, [r7, #0]
 8009452:	2b00      	cmp	r3, #0
 8009454:	d003      	beq.n	800945e <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8009456:	f06f 0301 	mvn.w	r3, #1
 800945a:	617b      	str	r3, [r7, #20]
 800945c:	e002      	b.n	8009464 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800945e:	f06f 0302 	mvn.w	r3, #2
 8009462:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009464:	697b      	ldr	r3, [r7, #20]
}
 8009466:	4618      	mov	r0, r3
 8009468:	3718      	adds	r7, #24
 800946a:	46bd      	mov	sp, r7
 800946c:	bd80      	pop	{r7, pc}
 800946e:	bf00      	nop
 8009470:	e000ed04 	.word	0xe000ed04

08009474 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8009474:	b580      	push	{r7, lr}
 8009476:	b086      	sub	sp, #24
 8009478:	af00      	add	r7, sp, #0
 800947a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800947c:	687b      	ldr	r3, [r7, #4]
 800947e:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8009480:	2300      	movs	r3, #0
 8009482:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8009484:	693b      	ldr	r3, [r7, #16]
 8009486:	2b00      	cmp	r3, #0
 8009488:	d103      	bne.n	8009492 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800948a:	f06f 0303 	mvn.w	r3, #3
 800948e:	617b      	str	r3, [r7, #20]
 8009490:	e02c      	b.n	80094ec <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009492:	f3ef 8305 	mrs	r3, IPSR
 8009496:	60fb      	str	r3, [r7, #12]
  return(result);
 8009498:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800949a:	2b00      	cmp	r3, #0
 800949c:	d01a      	beq.n	80094d4 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800949e:	2300      	movs	r3, #0
 80094a0:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80094a2:	f107 0308 	add.w	r3, r7, #8
 80094a6:	4619      	mov	r1, r3
 80094a8:	6938      	ldr	r0, [r7, #16]
 80094aa:	f000 fdce 	bl	800a04a <xQueueGiveFromISR>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d003      	beq.n	80094bc <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80094b4:	f06f 0302 	mvn.w	r3, #2
 80094b8:	617b      	str	r3, [r7, #20]
 80094ba:	e017      	b.n	80094ec <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80094bc:	68bb      	ldr	r3, [r7, #8]
 80094be:	2b00      	cmp	r3, #0
 80094c0:	d014      	beq.n	80094ec <osSemaphoreRelease+0x78>
 80094c2:	4b0d      	ldr	r3, [pc, #52]	; (80094f8 <osSemaphoreRelease+0x84>)
 80094c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094c8:	601a      	str	r2, [r3, #0]
 80094ca:	f3bf 8f4f 	dsb	sy
 80094ce:	f3bf 8f6f 	isb	sy
 80094d2:	e00b      	b.n	80094ec <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80094d4:	2300      	movs	r3, #0
 80094d6:	2200      	movs	r2, #0
 80094d8:	2100      	movs	r1, #0
 80094da:	6938      	ldr	r0, [r7, #16]
 80094dc:	f000 fc1c 	bl	8009d18 <xQueueGenericSend>
 80094e0:	4603      	mov	r3, r0
 80094e2:	2b01      	cmp	r3, #1
 80094e4:	d002      	beq.n	80094ec <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80094e6:	f06f 0302 	mvn.w	r3, #2
 80094ea:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80094ec:	697b      	ldr	r3, [r7, #20]
}
 80094ee:	4618      	mov	r0, r3
 80094f0:	3718      	adds	r7, #24
 80094f2:	46bd      	mov	sp, r7
 80094f4:	bd80      	pop	{r7, pc}
 80094f6:	bf00      	nop
 80094f8:	e000ed04 	.word	0xe000ed04

080094fc <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80094fc:	b580      	push	{r7, lr}
 80094fe:	b08a      	sub	sp, #40	; 0x28
 8009500:	af02      	add	r7, sp, #8
 8009502:	60f8      	str	r0, [r7, #12]
 8009504:	60b9      	str	r1, [r7, #8]
 8009506:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8009508:	2300      	movs	r3, #0
 800950a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800950c:	f3ef 8305 	mrs	r3, IPSR
 8009510:	613b      	str	r3, [r7, #16]
  return(result);
 8009512:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8009514:	2b00      	cmp	r3, #0
 8009516:	d15f      	bne.n	80095d8 <osMessageQueueNew+0xdc>
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	2b00      	cmp	r3, #0
 800951c:	d05c      	beq.n	80095d8 <osMessageQueueNew+0xdc>
 800951e:	68bb      	ldr	r3, [r7, #8]
 8009520:	2b00      	cmp	r3, #0
 8009522:	d059      	beq.n	80095d8 <osMessageQueueNew+0xdc>
    mem = -1;
 8009524:	f04f 33ff 	mov.w	r3, #4294967295
 8009528:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	2b00      	cmp	r3, #0
 800952e:	d029      	beq.n	8009584 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	689b      	ldr	r3, [r3, #8]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d012      	beq.n	800955e <osMessageQueueNew+0x62>
 8009538:	687b      	ldr	r3, [r7, #4]
 800953a:	68db      	ldr	r3, [r3, #12]
 800953c:	2b4f      	cmp	r3, #79	; 0x4f
 800953e:	d90e      	bls.n	800955e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8009544:	2b00      	cmp	r3, #0
 8009546:	d00a      	beq.n	800955e <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	695a      	ldr	r2, [r3, #20]
 800954c:	68fb      	ldr	r3, [r7, #12]
 800954e:	68b9      	ldr	r1, [r7, #8]
 8009550:	fb01 f303 	mul.w	r3, r1, r3
 8009554:	429a      	cmp	r2, r3
 8009556:	d302      	bcc.n	800955e <osMessageQueueNew+0x62>
        mem = 1;
 8009558:	2301      	movs	r3, #1
 800955a:	61bb      	str	r3, [r7, #24]
 800955c:	e014      	b.n	8009588 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	689b      	ldr	r3, [r3, #8]
 8009562:	2b00      	cmp	r3, #0
 8009564:	d110      	bne.n	8009588 <osMessageQueueNew+0x8c>
 8009566:	687b      	ldr	r3, [r7, #4]
 8009568:	68db      	ldr	r3, [r3, #12]
 800956a:	2b00      	cmp	r3, #0
 800956c:	d10c      	bne.n	8009588 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800956e:	687b      	ldr	r3, [r7, #4]
 8009570:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8009572:	2b00      	cmp	r3, #0
 8009574:	d108      	bne.n	8009588 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	695b      	ldr	r3, [r3, #20]
 800957a:	2b00      	cmp	r3, #0
 800957c:	d104      	bne.n	8009588 <osMessageQueueNew+0x8c>
          mem = 0;
 800957e:	2300      	movs	r3, #0
 8009580:	61bb      	str	r3, [r7, #24]
 8009582:	e001      	b.n	8009588 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8009584:	2300      	movs	r3, #0
 8009586:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009588:	69bb      	ldr	r3, [r7, #24]
 800958a:	2b01      	cmp	r3, #1
 800958c:	d10b      	bne.n	80095a6 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800958e:	687b      	ldr	r3, [r7, #4]
 8009590:	691a      	ldr	r2, [r3, #16]
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	2100      	movs	r1, #0
 8009598:	9100      	str	r1, [sp, #0]
 800959a:	68b9      	ldr	r1, [r7, #8]
 800959c:	68f8      	ldr	r0, [r7, #12]
 800959e:	f000 fa2f 	bl	8009a00 <xQueueGenericCreateStatic>
 80095a2:	61f8      	str	r0, [r7, #28]
 80095a4:	e008      	b.n	80095b8 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d105      	bne.n	80095b8 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80095ac:	2200      	movs	r2, #0
 80095ae:	68b9      	ldr	r1, [r7, #8]
 80095b0:	68f8      	ldr	r0, [r7, #12]
 80095b2:	f000 fa9d 	bl	8009af0 <xQueueGenericCreate>
 80095b6:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80095b8:	69fb      	ldr	r3, [r7, #28]
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	d00c      	beq.n	80095d8 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	d003      	beq.n	80095cc <osMessageQueueNew+0xd0>
        name = attr->name;
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	681b      	ldr	r3, [r3, #0]
 80095c8:	617b      	str	r3, [r7, #20]
 80095ca:	e001      	b.n	80095d0 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80095cc:	2300      	movs	r3, #0
 80095ce:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80095d0:	6979      	ldr	r1, [r7, #20]
 80095d2:	69f8      	ldr	r0, [r7, #28]
 80095d4:	f001 f97e 	bl	800a8d4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80095d8:	69fb      	ldr	r3, [r7, #28]
}
 80095da:	4618      	mov	r0, r3
 80095dc:	3720      	adds	r7, #32
 80095de:	46bd      	mov	sp, r7
 80095e0:	bd80      	pop	{r7, pc}
	...

080095e4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80095e4:	b580      	push	{r7, lr}
 80095e6:	b088      	sub	sp, #32
 80095e8:	af00      	add	r7, sp, #0
 80095ea:	60f8      	str	r0, [r7, #12]
 80095ec:	60b9      	str	r1, [r7, #8]
 80095ee:	603b      	str	r3, [r7, #0]
 80095f0:	4613      	mov	r3, r2
 80095f2:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80095f8:	2300      	movs	r3, #0
 80095fa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80095fc:	f3ef 8305 	mrs	r3, IPSR
 8009600:	617b      	str	r3, [r7, #20]
  return(result);
 8009602:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8009604:	2b00      	cmp	r3, #0
 8009606:	d028      	beq.n	800965a <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8009608:	69bb      	ldr	r3, [r7, #24]
 800960a:	2b00      	cmp	r3, #0
 800960c:	d005      	beq.n	800961a <osMessageQueuePut+0x36>
 800960e:	68bb      	ldr	r3, [r7, #8]
 8009610:	2b00      	cmp	r3, #0
 8009612:	d002      	beq.n	800961a <osMessageQueuePut+0x36>
 8009614:	683b      	ldr	r3, [r7, #0]
 8009616:	2b00      	cmp	r3, #0
 8009618:	d003      	beq.n	8009622 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800961a:	f06f 0303 	mvn.w	r3, #3
 800961e:	61fb      	str	r3, [r7, #28]
 8009620:	e038      	b.n	8009694 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8009622:	2300      	movs	r3, #0
 8009624:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8009626:	f107 0210 	add.w	r2, r7, #16
 800962a:	2300      	movs	r3, #0
 800962c:	68b9      	ldr	r1, [r7, #8]
 800962e:	69b8      	ldr	r0, [r7, #24]
 8009630:	f000 fc70 	bl	8009f14 <xQueueGenericSendFromISR>
 8009634:	4603      	mov	r3, r0
 8009636:	2b01      	cmp	r3, #1
 8009638:	d003      	beq.n	8009642 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800963a:	f06f 0302 	mvn.w	r3, #2
 800963e:	61fb      	str	r3, [r7, #28]
 8009640:	e028      	b.n	8009694 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 8009642:	693b      	ldr	r3, [r7, #16]
 8009644:	2b00      	cmp	r3, #0
 8009646:	d025      	beq.n	8009694 <osMessageQueuePut+0xb0>
 8009648:	4b15      	ldr	r3, [pc, #84]	; (80096a0 <osMessageQueuePut+0xbc>)
 800964a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800964e:	601a      	str	r2, [r3, #0]
 8009650:	f3bf 8f4f 	dsb	sy
 8009654:	f3bf 8f6f 	isb	sy
 8009658:	e01c      	b.n	8009694 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800965a:	69bb      	ldr	r3, [r7, #24]
 800965c:	2b00      	cmp	r3, #0
 800965e:	d002      	beq.n	8009666 <osMessageQueuePut+0x82>
 8009660:	68bb      	ldr	r3, [r7, #8]
 8009662:	2b00      	cmp	r3, #0
 8009664:	d103      	bne.n	800966e <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 8009666:	f06f 0303 	mvn.w	r3, #3
 800966a:	61fb      	str	r3, [r7, #28]
 800966c:	e012      	b.n	8009694 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800966e:	2300      	movs	r3, #0
 8009670:	683a      	ldr	r2, [r7, #0]
 8009672:	68b9      	ldr	r1, [r7, #8]
 8009674:	69b8      	ldr	r0, [r7, #24]
 8009676:	f000 fb4f 	bl	8009d18 <xQueueGenericSend>
 800967a:	4603      	mov	r3, r0
 800967c:	2b01      	cmp	r3, #1
 800967e:	d009      	beq.n	8009694 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	2b00      	cmp	r3, #0
 8009684:	d003      	beq.n	800968e <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 8009686:	f06f 0301 	mvn.w	r3, #1
 800968a:	61fb      	str	r3, [r7, #28]
 800968c:	e002      	b.n	8009694 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800968e:	f06f 0302 	mvn.w	r3, #2
 8009692:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009694:	69fb      	ldr	r3, [r7, #28]
}
 8009696:	4618      	mov	r0, r3
 8009698:	3720      	adds	r7, #32
 800969a:	46bd      	mov	sp, r7
 800969c:	bd80      	pop	{r7, pc}
 800969e:	bf00      	nop
 80096a0:	e000ed04 	.word	0xe000ed04

080096a4 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 80096a4:	b580      	push	{r7, lr}
 80096a6:	b088      	sub	sp, #32
 80096a8:	af00      	add	r7, sp, #0
 80096aa:	60f8      	str	r0, [r7, #12]
 80096ac:	60b9      	str	r1, [r7, #8]
 80096ae:	607a      	str	r2, [r7, #4]
 80096b0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80096b2:	68fb      	ldr	r3, [r7, #12]
 80096b4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80096b6:	2300      	movs	r3, #0
 80096b8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80096ba:	f3ef 8305 	mrs	r3, IPSR
 80096be:	617b      	str	r3, [r7, #20]
  return(result);
 80096c0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80096c2:	2b00      	cmp	r3, #0
 80096c4:	d028      	beq.n	8009718 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80096c6:	69bb      	ldr	r3, [r7, #24]
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d005      	beq.n	80096d8 <osMessageQueueGet+0x34>
 80096cc:	68bb      	ldr	r3, [r7, #8]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d002      	beq.n	80096d8 <osMessageQueueGet+0x34>
 80096d2:	683b      	ldr	r3, [r7, #0]
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d003      	beq.n	80096e0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80096d8:	f06f 0303 	mvn.w	r3, #3
 80096dc:	61fb      	str	r3, [r7, #28]
 80096de:	e037      	b.n	8009750 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80096e0:	2300      	movs	r3, #0
 80096e2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80096e4:	f107 0310 	add.w	r3, r7, #16
 80096e8:	461a      	mov	r2, r3
 80096ea:	68b9      	ldr	r1, [r7, #8]
 80096ec:	69b8      	ldr	r0, [r7, #24]
 80096ee:	f000 ff25 	bl	800a53c <xQueueReceiveFromISR>
 80096f2:	4603      	mov	r3, r0
 80096f4:	2b01      	cmp	r3, #1
 80096f6:	d003      	beq.n	8009700 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80096f8:	f06f 0302 	mvn.w	r3, #2
 80096fc:	61fb      	str	r3, [r7, #28]
 80096fe:	e027      	b.n	8009750 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8009700:	693b      	ldr	r3, [r7, #16]
 8009702:	2b00      	cmp	r3, #0
 8009704:	d024      	beq.n	8009750 <osMessageQueueGet+0xac>
 8009706:	4b15      	ldr	r3, [pc, #84]	; (800975c <osMessageQueueGet+0xb8>)
 8009708:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800970c:	601a      	str	r2, [r3, #0]
 800970e:	f3bf 8f4f 	dsb	sy
 8009712:	f3bf 8f6f 	isb	sy
 8009716:	e01b      	b.n	8009750 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8009718:	69bb      	ldr	r3, [r7, #24]
 800971a:	2b00      	cmp	r3, #0
 800971c:	d002      	beq.n	8009724 <osMessageQueueGet+0x80>
 800971e:	68bb      	ldr	r3, [r7, #8]
 8009720:	2b00      	cmp	r3, #0
 8009722:	d103      	bne.n	800972c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8009724:	f06f 0303 	mvn.w	r3, #3
 8009728:	61fb      	str	r3, [r7, #28]
 800972a:	e011      	b.n	8009750 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800972c:	683a      	ldr	r2, [r7, #0]
 800972e:	68b9      	ldr	r1, [r7, #8]
 8009730:	69b8      	ldr	r0, [r7, #24]
 8009732:	f000 fd17 	bl	800a164 <xQueueReceive>
 8009736:	4603      	mov	r3, r0
 8009738:	2b01      	cmp	r3, #1
 800973a:	d009      	beq.n	8009750 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800973c:	683b      	ldr	r3, [r7, #0]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d003      	beq.n	800974a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8009742:	f06f 0301 	mvn.w	r3, #1
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	e002      	b.n	8009750 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800974a:	f06f 0302 	mvn.w	r3, #2
 800974e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8009750:	69fb      	ldr	r3, [r7, #28]
}
 8009752:	4618      	mov	r0, r3
 8009754:	3720      	adds	r7, #32
 8009756:	46bd      	mov	sp, r7
 8009758:	bd80      	pop	{r7, pc}
 800975a:	bf00      	nop
 800975c:	e000ed04 	.word	0xe000ed04

08009760 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009760:	b480      	push	{r7}
 8009762:	b085      	sub	sp, #20
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	4a07      	ldr	r2, [pc, #28]	; (800978c <vApplicationGetIdleTaskMemory+0x2c>)
 8009770:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009772:	68bb      	ldr	r3, [r7, #8]
 8009774:	4a06      	ldr	r2, [pc, #24]	; (8009790 <vApplicationGetIdleTaskMemory+0x30>)
 8009776:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2240      	movs	r2, #64	; 0x40
 800977c:	601a      	str	r2, [r3, #0]
}
 800977e:	bf00      	nop
 8009780:	3714      	adds	r7, #20
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	20000698 	.word	0x20000698
 8009790:	20000754 	.word	0x20000754

08009794 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	60f8      	str	r0, [r7, #12]
 800979c:	60b9      	str	r1, [r7, #8]
 800979e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	4a07      	ldr	r2, [pc, #28]	; (80097c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80097a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80097a6:	68bb      	ldr	r3, [r7, #8]
 80097a8:	4a06      	ldr	r2, [pc, #24]	; (80097c4 <vApplicationGetTimerTaskMemory+0x30>)
 80097aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2280      	movs	r2, #128	; 0x80
 80097b0:	601a      	str	r2, [r3, #0]
}
 80097b2:	bf00      	nop
 80097b4:	3714      	adds	r7, #20
 80097b6:	46bd      	mov	sp, r7
 80097b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097bc:	4770      	bx	lr
 80097be:	bf00      	nop
 80097c0:	20000854 	.word	0x20000854
 80097c4:	20000910 	.word	0x20000910

080097c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80097c8:	b480      	push	{r7}
 80097ca:	b083      	sub	sp, #12
 80097cc:	af00      	add	r7, sp, #0
 80097ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	f103 0208 	add.w	r2, r3, #8
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	f04f 32ff 	mov.w	r2, #4294967295
 80097e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f103 0208 	add.w	r2, r3, #8
 80097e8:	687b      	ldr	r3, [r7, #4]
 80097ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	f103 0208 	add.w	r2, r3, #8
 80097f2:	687b      	ldr	r3, [r7, #4]
 80097f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	2200      	movs	r2, #0
 80097fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80097fc:	bf00      	nop
 80097fe:	370c      	adds	r7, #12
 8009800:	46bd      	mov	sp, r7
 8009802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009806:	4770      	bx	lr

08009808 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009808:	b480      	push	{r7}
 800980a:	b083      	sub	sp, #12
 800980c:	af00      	add	r7, sp, #0
 800980e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009810:	687b      	ldr	r3, [r7, #4]
 8009812:	2200      	movs	r2, #0
 8009814:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009816:	bf00      	nop
 8009818:	370c      	adds	r7, #12
 800981a:	46bd      	mov	sp, r7
 800981c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009820:	4770      	bx	lr

08009822 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009822:	b480      	push	{r7}
 8009824:	b085      	sub	sp, #20
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
 800982a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	685b      	ldr	r3, [r3, #4]
 8009830:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009832:	683b      	ldr	r3, [r7, #0]
 8009834:	68fa      	ldr	r2, [r7, #12]
 8009836:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009838:	68fb      	ldr	r3, [r7, #12]
 800983a:	689a      	ldr	r2, [r3, #8]
 800983c:	683b      	ldr	r3, [r7, #0]
 800983e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009840:	68fb      	ldr	r3, [r7, #12]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	683a      	ldr	r2, [r7, #0]
 8009846:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	683a      	ldr	r2, [r7, #0]
 800984c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800984e:	683b      	ldr	r3, [r7, #0]
 8009850:	687a      	ldr	r2, [r7, #4]
 8009852:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	1c5a      	adds	r2, r3, #1
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	601a      	str	r2, [r3, #0]
}
 800985e:	bf00      	nop
 8009860:	3714      	adds	r7, #20
 8009862:	46bd      	mov	sp, r7
 8009864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009868:	4770      	bx	lr

0800986a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800986a:	b480      	push	{r7}
 800986c:	b085      	sub	sp, #20
 800986e:	af00      	add	r7, sp, #0
 8009870:	6078      	str	r0, [r7, #4]
 8009872:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009874:	683b      	ldr	r3, [r7, #0]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800987a:	68bb      	ldr	r3, [r7, #8]
 800987c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009880:	d103      	bne.n	800988a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	691b      	ldr	r3, [r3, #16]
 8009886:	60fb      	str	r3, [r7, #12]
 8009888:	e00c      	b.n	80098a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	3308      	adds	r3, #8
 800988e:	60fb      	str	r3, [r7, #12]
 8009890:	e002      	b.n	8009898 <vListInsert+0x2e>
 8009892:	68fb      	ldr	r3, [r7, #12]
 8009894:	685b      	ldr	r3, [r3, #4]
 8009896:	60fb      	str	r3, [r7, #12]
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68ba      	ldr	r2, [r7, #8]
 80098a0:	429a      	cmp	r2, r3
 80098a2:	d2f6      	bcs.n	8009892 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80098a4:	68fb      	ldr	r3, [r7, #12]
 80098a6:	685a      	ldr	r2, [r3, #4]
 80098a8:	683b      	ldr	r3, [r7, #0]
 80098aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80098ac:	683b      	ldr	r3, [r7, #0]
 80098ae:	685b      	ldr	r3, [r3, #4]
 80098b0:	683a      	ldr	r2, [r7, #0]
 80098b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80098b4:	683b      	ldr	r3, [r7, #0]
 80098b6:	68fa      	ldr	r2, [r7, #12]
 80098b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	683a      	ldr	r2, [r7, #0]
 80098be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80098c0:	683b      	ldr	r3, [r7, #0]
 80098c2:	687a      	ldr	r2, [r7, #4]
 80098c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	1c5a      	adds	r2, r3, #1
 80098cc:	687b      	ldr	r3, [r7, #4]
 80098ce:	601a      	str	r2, [r3, #0]
}
 80098d0:	bf00      	nop
 80098d2:	3714      	adds	r7, #20
 80098d4:	46bd      	mov	sp, r7
 80098d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098da:	4770      	bx	lr

080098dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80098dc:	b480      	push	{r7}
 80098de:	b085      	sub	sp, #20
 80098e0:	af00      	add	r7, sp, #0
 80098e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	691b      	ldr	r3, [r3, #16]
 80098e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	685b      	ldr	r3, [r3, #4]
 80098ee:	687a      	ldr	r2, [r7, #4]
 80098f0:	6892      	ldr	r2, [r2, #8]
 80098f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	689b      	ldr	r3, [r3, #8]
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	6852      	ldr	r2, [r2, #4]
 80098fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80098fe:	68fb      	ldr	r3, [r7, #12]
 8009900:	685b      	ldr	r3, [r3, #4]
 8009902:	687a      	ldr	r2, [r7, #4]
 8009904:	429a      	cmp	r2, r3
 8009906:	d103      	bne.n	8009910 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009908:	687b      	ldr	r3, [r7, #4]
 800990a:	689a      	ldr	r2, [r3, #8]
 800990c:	68fb      	ldr	r3, [r7, #12]
 800990e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	2200      	movs	r2, #0
 8009914:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	681b      	ldr	r3, [r3, #0]
 800991a:	1e5a      	subs	r2, r3, #1
 800991c:	68fb      	ldr	r3, [r7, #12]
 800991e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	681b      	ldr	r3, [r3, #0]
}
 8009924:	4618      	mov	r0, r3
 8009926:	3714      	adds	r7, #20
 8009928:	46bd      	mov	sp, r7
 800992a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800992e:	4770      	bx	lr

08009930 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009930:	b580      	push	{r7, lr}
 8009932:	b084      	sub	sp, #16
 8009934:	af00      	add	r7, sp, #0
 8009936:	6078      	str	r0, [r7, #4]
 8009938:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800993e:	68fb      	ldr	r3, [r7, #12]
 8009940:	2b00      	cmp	r3, #0
 8009942:	d10a      	bne.n	800995a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009948:	f383 8811 	msr	BASEPRI, r3
 800994c:	f3bf 8f6f 	isb	sy
 8009950:	f3bf 8f4f 	dsb	sy
 8009954:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009956:	bf00      	nop
 8009958:	e7fe      	b.n	8009958 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800995a:	f002 fce3 	bl	800c324 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800995e:	68fb      	ldr	r3, [r7, #12]
 8009960:	681a      	ldr	r2, [r3, #0]
 8009962:	68fb      	ldr	r3, [r7, #12]
 8009964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009966:	68f9      	ldr	r1, [r7, #12]
 8009968:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800996a:	fb01 f303 	mul.w	r3, r1, r3
 800996e:	441a      	add	r2, r3
 8009970:	68fb      	ldr	r3, [r7, #12]
 8009972:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009974:	68fb      	ldr	r3, [r7, #12]
 8009976:	2200      	movs	r2, #0
 8009978:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800997a:	68fb      	ldr	r3, [r7, #12]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	68fb      	ldr	r3, [r7, #12]
 8009980:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009982:	68fb      	ldr	r3, [r7, #12]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800998a:	3b01      	subs	r3, #1
 800998c:	68f9      	ldr	r1, [r7, #12]
 800998e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009990:	fb01 f303 	mul.w	r3, r1, r3
 8009994:	441a      	add	r2, r3
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	22ff      	movs	r2, #255	; 0xff
 800999e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80099a2:	68fb      	ldr	r3, [r7, #12]
 80099a4:	22ff      	movs	r2, #255	; 0xff
 80099a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80099aa:	683b      	ldr	r3, [r7, #0]
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	d114      	bne.n	80099da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	691b      	ldr	r3, [r3, #16]
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d01a      	beq.n	80099ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80099b8:	68fb      	ldr	r3, [r7, #12]
 80099ba:	3310      	adds	r3, #16
 80099bc:	4618      	mov	r0, r3
 80099be:	f001 fc97 	bl	800b2f0 <xTaskRemoveFromEventList>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d012      	beq.n	80099ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80099c8:	4b0c      	ldr	r3, [pc, #48]	; (80099fc <xQueueGenericReset+0xcc>)
 80099ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099ce:	601a      	str	r2, [r3, #0]
 80099d0:	f3bf 8f4f 	dsb	sy
 80099d4:	f3bf 8f6f 	isb	sy
 80099d8:	e009      	b.n	80099ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80099da:	68fb      	ldr	r3, [r7, #12]
 80099dc:	3310      	adds	r3, #16
 80099de:	4618      	mov	r0, r3
 80099e0:	f7ff fef2 	bl	80097c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80099e4:	68fb      	ldr	r3, [r7, #12]
 80099e6:	3324      	adds	r3, #36	; 0x24
 80099e8:	4618      	mov	r0, r3
 80099ea:	f7ff feed 	bl	80097c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80099ee:	f002 fcc9 	bl	800c384 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80099f2:	2301      	movs	r3, #1
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3710      	adds	r7, #16
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	e000ed04 	.word	0xe000ed04

08009a00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b08e      	sub	sp, #56	; 0x38
 8009a04:	af02      	add	r7, sp, #8
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d10a      	bne.n	8009a2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a18:	f383 8811 	msr	BASEPRI, r3
 8009a1c:	f3bf 8f6f 	isb	sy
 8009a20:	f3bf 8f4f 	dsb	sy
 8009a24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a26:	bf00      	nop
 8009a28:	e7fe      	b.n	8009a28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b00      	cmp	r3, #0
 8009a2e:	d10a      	bne.n	8009a46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8009a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a34:	f383 8811 	msr	BASEPRI, r3
 8009a38:	f3bf 8f6f 	isb	sy
 8009a3c:	f3bf 8f4f 	dsb	sy
 8009a40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a42:	bf00      	nop
 8009a44:	e7fe      	b.n	8009a44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d002      	beq.n	8009a52 <xQueueGenericCreateStatic+0x52>
 8009a4c:	68bb      	ldr	r3, [r7, #8]
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d001      	beq.n	8009a56 <xQueueGenericCreateStatic+0x56>
 8009a52:	2301      	movs	r3, #1
 8009a54:	e000      	b.n	8009a58 <xQueueGenericCreateStatic+0x58>
 8009a56:	2300      	movs	r3, #0
 8009a58:	2b00      	cmp	r3, #0
 8009a5a:	d10a      	bne.n	8009a72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009a5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a60:	f383 8811 	msr	BASEPRI, r3
 8009a64:	f3bf 8f6f 	isb	sy
 8009a68:	f3bf 8f4f 	dsb	sy
 8009a6c:	623b      	str	r3, [r7, #32]
}
 8009a6e:	bf00      	nop
 8009a70:	e7fe      	b.n	8009a70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009a72:	687b      	ldr	r3, [r7, #4]
 8009a74:	2b00      	cmp	r3, #0
 8009a76:	d102      	bne.n	8009a7e <xQueueGenericCreateStatic+0x7e>
 8009a78:	68bb      	ldr	r3, [r7, #8]
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d101      	bne.n	8009a82 <xQueueGenericCreateStatic+0x82>
 8009a7e:	2301      	movs	r3, #1
 8009a80:	e000      	b.n	8009a84 <xQueueGenericCreateStatic+0x84>
 8009a82:	2300      	movs	r3, #0
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d10a      	bne.n	8009a9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a8c:	f383 8811 	msr	BASEPRI, r3
 8009a90:	f3bf 8f6f 	isb	sy
 8009a94:	f3bf 8f4f 	dsb	sy
 8009a98:	61fb      	str	r3, [r7, #28]
}
 8009a9a:	bf00      	nop
 8009a9c:	e7fe      	b.n	8009a9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009a9e:	2350      	movs	r3, #80	; 0x50
 8009aa0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009aa2:	697b      	ldr	r3, [r7, #20]
 8009aa4:	2b50      	cmp	r3, #80	; 0x50
 8009aa6:	d00a      	beq.n	8009abe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009aac:	f383 8811 	msr	BASEPRI, r3
 8009ab0:	f3bf 8f6f 	isb	sy
 8009ab4:	f3bf 8f4f 	dsb	sy
 8009ab8:	61bb      	str	r3, [r7, #24]
}
 8009aba:	bf00      	nop
 8009abc:	e7fe      	b.n	8009abc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009abe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009ac0:	683b      	ldr	r3, [r7, #0]
 8009ac2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8009ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00d      	beq.n	8009ae6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009aca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009acc:	2201      	movs	r2, #1
 8009ace:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009ad2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8009ad6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ad8:	9300      	str	r3, [sp, #0]
 8009ada:	4613      	mov	r3, r2
 8009adc:	687a      	ldr	r2, [r7, #4]
 8009ade:	68b9      	ldr	r1, [r7, #8]
 8009ae0:	68f8      	ldr	r0, [r7, #12]
 8009ae2:	f000 f83f 	bl	8009b64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009ae6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8009ae8:	4618      	mov	r0, r3
 8009aea:	3730      	adds	r7, #48	; 0x30
 8009aec:	46bd      	mov	sp, r7
 8009aee:	bd80      	pop	{r7, pc}

08009af0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b08a      	sub	sp, #40	; 0x28
 8009af4:	af02      	add	r7, sp, #8
 8009af6:	60f8      	str	r0, [r7, #12]
 8009af8:	60b9      	str	r1, [r7, #8]
 8009afa:	4613      	mov	r3, r2
 8009afc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009afe:	68fb      	ldr	r3, [r7, #12]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d10a      	bne.n	8009b1a <xQueueGenericCreate+0x2a>
	__asm volatile
 8009b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b08:	f383 8811 	msr	BASEPRI, r3
 8009b0c:	f3bf 8f6f 	isb	sy
 8009b10:	f3bf 8f4f 	dsb	sy
 8009b14:	613b      	str	r3, [r7, #16]
}
 8009b16:	bf00      	nop
 8009b18:	e7fe      	b.n	8009b18 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009b1a:	68fb      	ldr	r3, [r7, #12]
 8009b1c:	68ba      	ldr	r2, [r7, #8]
 8009b1e:	fb02 f303 	mul.w	r3, r2, r3
 8009b22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009b24:	69fb      	ldr	r3, [r7, #28]
 8009b26:	3350      	adds	r3, #80	; 0x50
 8009b28:	4618      	mov	r0, r3
 8009b2a:	f002 fd1d 	bl	800c568 <pvPortMalloc>
 8009b2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8009b30:	69bb      	ldr	r3, [r7, #24]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d011      	beq.n	8009b5a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009b36:	69bb      	ldr	r3, [r7, #24]
 8009b38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009b3a:	697b      	ldr	r3, [r7, #20]
 8009b3c:	3350      	adds	r3, #80	; 0x50
 8009b3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8009b40:	69bb      	ldr	r3, [r7, #24]
 8009b42:	2200      	movs	r2, #0
 8009b44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009b48:	79fa      	ldrb	r2, [r7, #7]
 8009b4a:	69bb      	ldr	r3, [r7, #24]
 8009b4c:	9300      	str	r3, [sp, #0]
 8009b4e:	4613      	mov	r3, r2
 8009b50:	697a      	ldr	r2, [r7, #20]
 8009b52:	68b9      	ldr	r1, [r7, #8]
 8009b54:	68f8      	ldr	r0, [r7, #12]
 8009b56:	f000 f805 	bl	8009b64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009b5a:	69bb      	ldr	r3, [r7, #24]
	}
 8009b5c:	4618      	mov	r0, r3
 8009b5e:	3720      	adds	r7, #32
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009b64:	b580      	push	{r7, lr}
 8009b66:	b084      	sub	sp, #16
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	60f8      	str	r0, [r7, #12]
 8009b6c:	60b9      	str	r1, [r7, #8]
 8009b6e:	607a      	str	r2, [r7, #4]
 8009b70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8009b72:	68bb      	ldr	r3, [r7, #8]
 8009b74:	2b00      	cmp	r3, #0
 8009b76:	d103      	bne.n	8009b80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009b78:	69bb      	ldr	r3, [r7, #24]
 8009b7a:	69ba      	ldr	r2, [r7, #24]
 8009b7c:	601a      	str	r2, [r3, #0]
 8009b7e:	e002      	b.n	8009b86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8009b80:	69bb      	ldr	r3, [r7, #24]
 8009b82:	687a      	ldr	r2, [r7, #4]
 8009b84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009b86:	69bb      	ldr	r3, [r7, #24]
 8009b88:	68fa      	ldr	r2, [r7, #12]
 8009b8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009b8c:	69bb      	ldr	r3, [r7, #24]
 8009b8e:	68ba      	ldr	r2, [r7, #8]
 8009b90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8009b92:	2101      	movs	r1, #1
 8009b94:	69b8      	ldr	r0, [r7, #24]
 8009b96:	f7ff fecb 	bl	8009930 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009b9a:	69bb      	ldr	r3, [r7, #24]
 8009b9c:	78fa      	ldrb	r2, [r7, #3]
 8009b9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8009ba2:	bf00      	nop
 8009ba4:	3710      	adds	r7, #16
 8009ba6:	46bd      	mov	sp, r7
 8009ba8:	bd80      	pop	{r7, pc}

08009baa <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009baa:	b580      	push	{r7, lr}
 8009bac:	b082      	sub	sp, #8
 8009bae:	af00      	add	r7, sp, #0
 8009bb0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d00e      	beq.n	8009bd6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	2200      	movs	r2, #0
 8009bbc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	2200      	movs	r2, #0
 8009bc8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8009bca:	2300      	movs	r3, #0
 8009bcc:	2200      	movs	r2, #0
 8009bce:	2100      	movs	r1, #0
 8009bd0:	6878      	ldr	r0, [r7, #4]
 8009bd2:	f000 f8a1 	bl	8009d18 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8009bd6:	bf00      	nop
 8009bd8:	3708      	adds	r7, #8
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	bd80      	pop	{r7, pc}

08009bde <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8009bde:	b580      	push	{r7, lr}
 8009be0:	b086      	sub	sp, #24
 8009be2:	af00      	add	r7, sp, #0
 8009be4:	4603      	mov	r3, r0
 8009be6:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009be8:	2301      	movs	r3, #1
 8009bea:	617b      	str	r3, [r7, #20]
 8009bec:	2300      	movs	r3, #0
 8009bee:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8009bf0:	79fb      	ldrb	r3, [r7, #7]
 8009bf2:	461a      	mov	r2, r3
 8009bf4:	6939      	ldr	r1, [r7, #16]
 8009bf6:	6978      	ldr	r0, [r7, #20]
 8009bf8:	f7ff ff7a 	bl	8009af0 <xQueueGenericCreate>
 8009bfc:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009bfe:	68f8      	ldr	r0, [r7, #12]
 8009c00:	f7ff ffd3 	bl	8009baa <prvInitialiseMutex>

		return xNewQueue;
 8009c04:	68fb      	ldr	r3, [r7, #12]
	}
 8009c06:	4618      	mov	r0, r3
 8009c08:	3718      	adds	r7, #24
 8009c0a:	46bd      	mov	sp, r7
 8009c0c:	bd80      	pop	{r7, pc}

08009c0e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8009c0e:	b580      	push	{r7, lr}
 8009c10:	b088      	sub	sp, #32
 8009c12:	af02      	add	r7, sp, #8
 8009c14:	4603      	mov	r3, r0
 8009c16:	6039      	str	r1, [r7, #0]
 8009c18:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	617b      	str	r3, [r7, #20]
 8009c1e:	2300      	movs	r3, #0
 8009c20:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8009c22:	79fb      	ldrb	r3, [r7, #7]
 8009c24:	9300      	str	r3, [sp, #0]
 8009c26:	683b      	ldr	r3, [r7, #0]
 8009c28:	2200      	movs	r2, #0
 8009c2a:	6939      	ldr	r1, [r7, #16]
 8009c2c:	6978      	ldr	r0, [r7, #20]
 8009c2e:	f7ff fee7 	bl	8009a00 <xQueueGenericCreateStatic>
 8009c32:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009c34:	68f8      	ldr	r0, [r7, #12]
 8009c36:	f7ff ffb8 	bl	8009baa <prvInitialiseMutex>

		return xNewQueue;
 8009c3a:	68fb      	ldr	r3, [r7, #12]
	}
 8009c3c:	4618      	mov	r0, r3
 8009c3e:	3718      	adds	r7, #24
 8009c40:	46bd      	mov	sp, r7
 8009c42:	bd80      	pop	{r7, pc}

08009c44 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8009c44:	b580      	push	{r7, lr}
 8009c46:	b08a      	sub	sp, #40	; 0x28
 8009c48:	af02      	add	r7, sp, #8
 8009c4a:	60f8      	str	r0, [r7, #12]
 8009c4c:	60b9      	str	r1, [r7, #8]
 8009c4e:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d10a      	bne.n	8009c6c <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8009c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c5a:	f383 8811 	msr	BASEPRI, r3
 8009c5e:	f3bf 8f6f 	isb	sy
 8009c62:	f3bf 8f4f 	dsb	sy
 8009c66:	61bb      	str	r3, [r7, #24]
}
 8009c68:	bf00      	nop
 8009c6a:	e7fe      	b.n	8009c6a <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009c6c:	68ba      	ldr	r2, [r7, #8]
 8009c6e:	68fb      	ldr	r3, [r7, #12]
 8009c70:	429a      	cmp	r2, r3
 8009c72:	d90a      	bls.n	8009c8a <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8009c74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c78:	f383 8811 	msr	BASEPRI, r3
 8009c7c:	f3bf 8f6f 	isb	sy
 8009c80:	f3bf 8f4f 	dsb	sy
 8009c84:	617b      	str	r3, [r7, #20]
}
 8009c86:	bf00      	nop
 8009c88:	e7fe      	b.n	8009c88 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009c8a:	2302      	movs	r3, #2
 8009c8c:	9300      	str	r3, [sp, #0]
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	2200      	movs	r2, #0
 8009c92:	2100      	movs	r1, #0
 8009c94:	68f8      	ldr	r0, [r7, #12]
 8009c96:	f7ff feb3 	bl	8009a00 <xQueueGenericCreateStatic>
 8009c9a:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8009c9c:	69fb      	ldr	r3, [r7, #28]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d002      	beq.n	8009ca8 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009ca2:	69fb      	ldr	r3, [r7, #28]
 8009ca4:	68ba      	ldr	r2, [r7, #8]
 8009ca6:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009ca8:	69fb      	ldr	r3, [r7, #28]
	}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3720      	adds	r7, #32
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}

08009cb2 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8009cb2:	b580      	push	{r7, lr}
 8009cb4:	b086      	sub	sp, #24
 8009cb6:	af00      	add	r7, sp, #0
 8009cb8:	6078      	str	r0, [r7, #4]
 8009cba:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8009cbc:	687b      	ldr	r3, [r7, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d10a      	bne.n	8009cd8 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8009cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009cc6:	f383 8811 	msr	BASEPRI, r3
 8009cca:	f3bf 8f6f 	isb	sy
 8009cce:	f3bf 8f4f 	dsb	sy
 8009cd2:	613b      	str	r3, [r7, #16]
}
 8009cd4:	bf00      	nop
 8009cd6:	e7fe      	b.n	8009cd6 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8009cd8:	683a      	ldr	r2, [r7, #0]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	429a      	cmp	r2, r3
 8009cde:	d90a      	bls.n	8009cf6 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8009ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009ce4:	f383 8811 	msr	BASEPRI, r3
 8009ce8:	f3bf 8f6f 	isb	sy
 8009cec:	f3bf 8f4f 	dsb	sy
 8009cf0:	60fb      	str	r3, [r7, #12]
}
 8009cf2:	bf00      	nop
 8009cf4:	e7fe      	b.n	8009cf4 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8009cf6:	2202      	movs	r2, #2
 8009cf8:	2100      	movs	r1, #0
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	f7ff fef8 	bl	8009af0 <xQueueGenericCreate>
 8009d00:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8009d02:	697b      	ldr	r3, [r7, #20]
 8009d04:	2b00      	cmp	r3, #0
 8009d06:	d002      	beq.n	8009d0e <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8009d08:	697b      	ldr	r3, [r7, #20]
 8009d0a:	683a      	ldr	r2, [r7, #0]
 8009d0c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8009d0e:	697b      	ldr	r3, [r7, #20]
	}
 8009d10:	4618      	mov	r0, r3
 8009d12:	3718      	adds	r7, #24
 8009d14:	46bd      	mov	sp, r7
 8009d16:	bd80      	pop	{r7, pc}

08009d18 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009d18:	b580      	push	{r7, lr}
 8009d1a:	b08e      	sub	sp, #56	; 0x38
 8009d1c:	af00      	add	r7, sp, #0
 8009d1e:	60f8      	str	r0, [r7, #12]
 8009d20:	60b9      	str	r1, [r7, #8]
 8009d22:	607a      	str	r2, [r7, #4]
 8009d24:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009d26:	2300      	movs	r3, #0
 8009d28:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8009d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d10a      	bne.n	8009d4a <xQueueGenericSend+0x32>
	__asm volatile
 8009d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d38:	f383 8811 	msr	BASEPRI, r3
 8009d3c:	f3bf 8f6f 	isb	sy
 8009d40:	f3bf 8f4f 	dsb	sy
 8009d44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009d46:	bf00      	nop
 8009d48:	e7fe      	b.n	8009d48 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009d4a:	68bb      	ldr	r3, [r7, #8]
 8009d4c:	2b00      	cmp	r3, #0
 8009d4e:	d103      	bne.n	8009d58 <xQueueGenericSend+0x40>
 8009d50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <xQueueGenericSend+0x44>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e000      	b.n	8009d5e <xQueueGenericSend+0x46>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10a      	bne.n	8009d78 <xQueueGenericSend+0x60>
	__asm volatile
 8009d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009d74:	bf00      	nop
 8009d76:	e7fe      	b.n	8009d76 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	2b02      	cmp	r3, #2
 8009d7c:	d103      	bne.n	8009d86 <xQueueGenericSend+0x6e>
 8009d7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009d80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d82:	2b01      	cmp	r3, #1
 8009d84:	d101      	bne.n	8009d8a <xQueueGenericSend+0x72>
 8009d86:	2301      	movs	r3, #1
 8009d88:	e000      	b.n	8009d8c <xQueueGenericSend+0x74>
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d10a      	bne.n	8009da6 <xQueueGenericSend+0x8e>
	__asm volatile
 8009d90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d94:	f383 8811 	msr	BASEPRI, r3
 8009d98:	f3bf 8f6f 	isb	sy
 8009d9c:	f3bf 8f4f 	dsb	sy
 8009da0:	623b      	str	r3, [r7, #32]
}
 8009da2:	bf00      	nop
 8009da4:	e7fe      	b.n	8009da4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009da6:	f001 fc65 	bl	800b674 <xTaskGetSchedulerState>
 8009daa:	4603      	mov	r3, r0
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	d102      	bne.n	8009db6 <xQueueGenericSend+0x9e>
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d101      	bne.n	8009dba <xQueueGenericSend+0xa2>
 8009db6:	2301      	movs	r3, #1
 8009db8:	e000      	b.n	8009dbc <xQueueGenericSend+0xa4>
 8009dba:	2300      	movs	r3, #0
 8009dbc:	2b00      	cmp	r3, #0
 8009dbe:	d10a      	bne.n	8009dd6 <xQueueGenericSend+0xbe>
	__asm volatile
 8009dc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009dc4:	f383 8811 	msr	BASEPRI, r3
 8009dc8:	f3bf 8f6f 	isb	sy
 8009dcc:	f3bf 8f4f 	dsb	sy
 8009dd0:	61fb      	str	r3, [r7, #28]
}
 8009dd2:	bf00      	nop
 8009dd4:	e7fe      	b.n	8009dd4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009dd6:	f002 faa5 	bl	800c324 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ddc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009dde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009de0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009de2:	429a      	cmp	r2, r3
 8009de4:	d302      	bcc.n	8009dec <xQueueGenericSend+0xd4>
 8009de6:	683b      	ldr	r3, [r7, #0]
 8009de8:	2b02      	cmp	r3, #2
 8009dea:	d129      	bne.n	8009e40 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009dec:	683a      	ldr	r2, [r7, #0]
 8009dee:	68b9      	ldr	r1, [r7, #8]
 8009df0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009df2:	f000 fc5e 	bl	800a6b2 <prvCopyDataToQueue>
 8009df6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009df8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dfa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009dfc:	2b00      	cmp	r3, #0
 8009dfe:	d010      	beq.n	8009e22 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e02:	3324      	adds	r3, #36	; 0x24
 8009e04:	4618      	mov	r0, r3
 8009e06:	f001 fa73 	bl	800b2f0 <xTaskRemoveFromEventList>
 8009e0a:	4603      	mov	r3, r0
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d013      	beq.n	8009e38 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8009e10:	4b3f      	ldr	r3, [pc, #252]	; (8009f10 <xQueueGenericSend+0x1f8>)
 8009e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e16:	601a      	str	r2, [r3, #0]
 8009e18:	f3bf 8f4f 	dsb	sy
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	e00a      	b.n	8009e38 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8009e22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e24:	2b00      	cmp	r3, #0
 8009e26:	d007      	beq.n	8009e38 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009e28:	4b39      	ldr	r3, [pc, #228]	; (8009f10 <xQueueGenericSend+0x1f8>)
 8009e2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009e2e:	601a      	str	r2, [r3, #0]
 8009e30:	f3bf 8f4f 	dsb	sy
 8009e34:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009e38:	f002 faa4 	bl	800c384 <vPortExitCritical>
				return pdPASS;
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	e063      	b.n	8009f08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009e40:	687b      	ldr	r3, [r7, #4]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d103      	bne.n	8009e4e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009e46:	f002 fa9d 	bl	800c384 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009e4a:	2300      	movs	r3, #0
 8009e4c:	e05c      	b.n	8009f08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009e4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009e50:	2b00      	cmp	r3, #0
 8009e52:	d106      	bne.n	8009e62 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e54:	f107 0314 	add.w	r3, r7, #20
 8009e58:	4618      	mov	r0, r3
 8009e5a:	f001 faad 	bl	800b3b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e5e:	2301      	movs	r3, #1
 8009e60:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e62:	f002 fa8f 	bl	800c384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e66:	f001 f819 	bl	800ae9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e6a:	f002 fa5b 	bl	800c324 <vPortEnterCritical>
 8009e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e74:	b25b      	sxtb	r3, r3
 8009e76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e7a:	d103      	bne.n	8009e84 <xQueueGenericSend+0x16c>
 8009e7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e7e:	2200      	movs	r2, #0
 8009e80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e86:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e8a:	b25b      	sxtb	r3, r3
 8009e8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e90:	d103      	bne.n	8009e9a <xQueueGenericSend+0x182>
 8009e92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009e94:	2200      	movs	r2, #0
 8009e96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e9a:	f002 fa73 	bl	800c384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e9e:	1d3a      	adds	r2, r7, #4
 8009ea0:	f107 0314 	add.w	r3, r7, #20
 8009ea4:	4611      	mov	r1, r2
 8009ea6:	4618      	mov	r0, r3
 8009ea8:	f001 fa9c 	bl	800b3e4 <xTaskCheckForTimeOut>
 8009eac:	4603      	mov	r3, r0
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d124      	bne.n	8009efc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009eb2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009eb4:	f000 fcf5 	bl	800a8a2 <prvIsQueueFull>
 8009eb8:	4603      	mov	r3, r0
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d018      	beq.n	8009ef0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009ebe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ec0:	3310      	adds	r3, #16
 8009ec2:	687a      	ldr	r2, [r7, #4]
 8009ec4:	4611      	mov	r1, r2
 8009ec6:	4618      	mov	r0, r3
 8009ec8:	f001 f9c2 	bl	800b250 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009ecc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ece:	f000 fc80 	bl	800a7d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009ed2:	f000 fff1 	bl	800aeb8 <xTaskResumeAll>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f47f af7c 	bne.w	8009dd6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8009ede:	4b0c      	ldr	r3, [pc, #48]	; (8009f10 <xQueueGenericSend+0x1f8>)
 8009ee0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009ee4:	601a      	str	r2, [r3, #0]
 8009ee6:	f3bf 8f4f 	dsb	sy
 8009eea:	f3bf 8f6f 	isb	sy
 8009eee:	e772      	b.n	8009dd6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8009ef0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009ef2:	f000 fc6e 	bl	800a7d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ef6:	f000 ffdf 	bl	800aeb8 <xTaskResumeAll>
 8009efa:	e76c      	b.n	8009dd6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8009efc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009efe:	f000 fc68 	bl	800a7d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009f02:	f000 ffd9 	bl	800aeb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8009f06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8009f08:	4618      	mov	r0, r3
 8009f0a:	3738      	adds	r7, #56	; 0x38
 8009f0c:	46bd      	mov	sp, r7
 8009f0e:	bd80      	pop	{r7, pc}
 8009f10:	e000ed04 	.word	0xe000ed04

08009f14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009f14:	b580      	push	{r7, lr}
 8009f16:	b090      	sub	sp, #64	; 0x40
 8009f18:	af00      	add	r7, sp, #0
 8009f1a:	60f8      	str	r0, [r7, #12]
 8009f1c:	60b9      	str	r1, [r7, #8]
 8009f1e:	607a      	str	r2, [r7, #4]
 8009f20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009f22:	68fb      	ldr	r3, [r7, #12]
 8009f24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009f26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f28:	2b00      	cmp	r3, #0
 8009f2a:	d10a      	bne.n	8009f42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f30:	f383 8811 	msr	BASEPRI, r3
 8009f34:	f3bf 8f6f 	isb	sy
 8009f38:	f3bf 8f4f 	dsb	sy
 8009f3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009f3e:	bf00      	nop
 8009f40:	e7fe      	b.n	8009f40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009f42:	68bb      	ldr	r3, [r7, #8]
 8009f44:	2b00      	cmp	r3, #0
 8009f46:	d103      	bne.n	8009f50 <xQueueGenericSendFromISR+0x3c>
 8009f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f4c:	2b00      	cmp	r3, #0
 8009f4e:	d101      	bne.n	8009f54 <xQueueGenericSendFromISR+0x40>
 8009f50:	2301      	movs	r3, #1
 8009f52:	e000      	b.n	8009f56 <xQueueGenericSendFromISR+0x42>
 8009f54:	2300      	movs	r3, #0
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d10a      	bne.n	8009f70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f5e:	f383 8811 	msr	BASEPRI, r3
 8009f62:	f3bf 8f6f 	isb	sy
 8009f66:	f3bf 8f4f 	dsb	sy
 8009f6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009f6c:	bf00      	nop
 8009f6e:	e7fe      	b.n	8009f6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009f70:	683b      	ldr	r3, [r7, #0]
 8009f72:	2b02      	cmp	r3, #2
 8009f74:	d103      	bne.n	8009f7e <xQueueGenericSendFromISR+0x6a>
 8009f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009f78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009f7a:	2b01      	cmp	r3, #1
 8009f7c:	d101      	bne.n	8009f82 <xQueueGenericSendFromISR+0x6e>
 8009f7e:	2301      	movs	r3, #1
 8009f80:	e000      	b.n	8009f84 <xQueueGenericSendFromISR+0x70>
 8009f82:	2300      	movs	r3, #0
 8009f84:	2b00      	cmp	r3, #0
 8009f86:	d10a      	bne.n	8009f9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f8c:	f383 8811 	msr	BASEPRI, r3
 8009f90:	f3bf 8f6f 	isb	sy
 8009f94:	f3bf 8f4f 	dsb	sy
 8009f98:	623b      	str	r3, [r7, #32]
}
 8009f9a:	bf00      	nop
 8009f9c:	e7fe      	b.n	8009f9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009f9e:	f002 faa3 	bl	800c4e8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009fa2:	f3ef 8211 	mrs	r2, BASEPRI
 8009fa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009faa:	f383 8811 	msr	BASEPRI, r3
 8009fae:	f3bf 8f6f 	isb	sy
 8009fb2:	f3bf 8f4f 	dsb	sy
 8009fb6:	61fa      	str	r2, [r7, #28]
 8009fb8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009fba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009fbc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009fbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009fc6:	429a      	cmp	r2, r3
 8009fc8:	d302      	bcc.n	8009fd0 <xQueueGenericSendFromISR+0xbc>
 8009fca:	683b      	ldr	r3, [r7, #0]
 8009fcc:	2b02      	cmp	r3, #2
 8009fce:	d12f      	bne.n	800a030 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009fd0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fd2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009fd6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009fda:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fde:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009fe0:	683a      	ldr	r2, [r7, #0]
 8009fe2:	68b9      	ldr	r1, [r7, #8]
 8009fe4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009fe6:	f000 fb64 	bl	800a6b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009fea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009fee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ff2:	d112      	bne.n	800a01a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ff4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d016      	beq.n	800a02a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ffe:	3324      	adds	r3, #36	; 0x24
 800a000:	4618      	mov	r0, r3
 800a002:	f001 f975 	bl	800b2f0 <xTaskRemoveFromEventList>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d00e      	beq.n	800a02a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a00c:	687b      	ldr	r3, [r7, #4]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d00b      	beq.n	800a02a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	2201      	movs	r2, #1
 800a016:	601a      	str	r2, [r3, #0]
 800a018:	e007      	b.n	800a02a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a01a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800a01e:	3301      	adds	r3, #1
 800a020:	b2db      	uxtb	r3, r3
 800a022:	b25a      	sxtb	r2, r3
 800a024:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a026:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a02a:	2301      	movs	r3, #1
 800a02c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800a02e:	e001      	b.n	800a034 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a030:	2300      	movs	r3, #0
 800a032:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a034:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a036:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a038:	697b      	ldr	r3, [r7, #20]
 800a03a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a03e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800a042:	4618      	mov	r0, r3
 800a044:	3740      	adds	r7, #64	; 0x40
 800a046:	46bd      	mov	sp, r7
 800a048:	bd80      	pop	{r7, pc}

0800a04a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a04a:	b580      	push	{r7, lr}
 800a04c:	b08e      	sub	sp, #56	; 0x38
 800a04e:	af00      	add	r7, sp, #0
 800a050:	6078      	str	r0, [r7, #4]
 800a052:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a058:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a05a:	2b00      	cmp	r3, #0
 800a05c:	d10a      	bne.n	800a074 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800a05e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a062:	f383 8811 	msr	BASEPRI, r3
 800a066:	f3bf 8f6f 	isb	sy
 800a06a:	f3bf 8f4f 	dsb	sy
 800a06e:	623b      	str	r3, [r7, #32]
}
 800a070:	bf00      	nop
 800a072:	e7fe      	b.n	800a072 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a078:	2b00      	cmp	r3, #0
 800a07a:	d00a      	beq.n	800a092 <xQueueGiveFromISR+0x48>
	__asm volatile
 800a07c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a080:	f383 8811 	msr	BASEPRI, r3
 800a084:	f3bf 8f6f 	isb	sy
 800a088:	f3bf 8f4f 	dsb	sy
 800a08c:	61fb      	str	r3, [r7, #28]
}
 800a08e:	bf00      	nop
 800a090:	e7fe      	b.n	800a090 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a092:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a094:	681b      	ldr	r3, [r3, #0]
 800a096:	2b00      	cmp	r3, #0
 800a098:	d103      	bne.n	800a0a2 <xQueueGiveFromISR+0x58>
 800a09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a09c:	689b      	ldr	r3, [r3, #8]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d101      	bne.n	800a0a6 <xQueueGiveFromISR+0x5c>
 800a0a2:	2301      	movs	r3, #1
 800a0a4:	e000      	b.n	800a0a8 <xQueueGiveFromISR+0x5e>
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	2b00      	cmp	r3, #0
 800a0aa:	d10a      	bne.n	800a0c2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800a0ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0b0:	f383 8811 	msr	BASEPRI, r3
 800a0b4:	f3bf 8f6f 	isb	sy
 800a0b8:	f3bf 8f4f 	dsb	sy
 800a0bc:	61bb      	str	r3, [r7, #24]
}
 800a0be:	bf00      	nop
 800a0c0:	e7fe      	b.n	800a0c0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a0c2:	f002 fa11 	bl	800c4e8 <vPortValidateInterruptPriority>
	__asm volatile
 800a0c6:	f3ef 8211 	mrs	r2, BASEPRI
 800a0ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0ce:	f383 8811 	msr	BASEPRI, r3
 800a0d2:	f3bf 8f6f 	isb	sy
 800a0d6:	f3bf 8f4f 	dsb	sy
 800a0da:	617a      	str	r2, [r7, #20]
 800a0dc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a0de:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a0e0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a0e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a0e6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a0e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a0ec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a0ee:	429a      	cmp	r2, r3
 800a0f0:	d22b      	bcs.n	800a14a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a0f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a0f4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a0f8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a0fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a0fe:	1c5a      	adds	r2, r3, #1
 800a100:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a102:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a104:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a108:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a10c:	d112      	bne.n	800a134 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a10e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a112:	2b00      	cmp	r3, #0
 800a114:	d016      	beq.n	800a144 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a118:	3324      	adds	r3, #36	; 0x24
 800a11a:	4618      	mov	r0, r3
 800a11c:	f001 f8e8 	bl	800b2f0 <xTaskRemoveFromEventList>
 800a120:	4603      	mov	r3, r0
 800a122:	2b00      	cmp	r3, #0
 800a124:	d00e      	beq.n	800a144 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a126:	683b      	ldr	r3, [r7, #0]
 800a128:	2b00      	cmp	r3, #0
 800a12a:	d00b      	beq.n	800a144 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a12c:	683b      	ldr	r3, [r7, #0]
 800a12e:	2201      	movs	r2, #1
 800a130:	601a      	str	r2, [r3, #0]
 800a132:	e007      	b.n	800a144 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a134:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a138:	3301      	adds	r3, #1
 800a13a:	b2db      	uxtb	r3, r3
 800a13c:	b25a      	sxtb	r2, r3
 800a13e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a140:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800a144:	2301      	movs	r3, #1
 800a146:	637b      	str	r3, [r7, #52]	; 0x34
 800a148:	e001      	b.n	800a14e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a14a:	2300      	movs	r3, #0
 800a14c:	637b      	str	r3, [r7, #52]	; 0x34
 800a14e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a150:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a152:	68fb      	ldr	r3, [r7, #12]
 800a154:	f383 8811 	msr	BASEPRI, r3
}
 800a158:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a15a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a15c:	4618      	mov	r0, r3
 800a15e:	3738      	adds	r7, #56	; 0x38
 800a160:	46bd      	mov	sp, r7
 800a162:	bd80      	pop	{r7, pc}

0800a164 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a164:	b580      	push	{r7, lr}
 800a166:	b08c      	sub	sp, #48	; 0x30
 800a168:	af00      	add	r7, sp, #0
 800a16a:	60f8      	str	r0, [r7, #12]
 800a16c:	60b9      	str	r1, [r7, #8]
 800a16e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a170:	2300      	movs	r3, #0
 800a172:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a174:	68fb      	ldr	r3, [r7, #12]
 800a176:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a17a:	2b00      	cmp	r3, #0
 800a17c:	d10a      	bne.n	800a194 <xQueueReceive+0x30>
	__asm volatile
 800a17e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a182:	f383 8811 	msr	BASEPRI, r3
 800a186:	f3bf 8f6f 	isb	sy
 800a18a:	f3bf 8f4f 	dsb	sy
 800a18e:	623b      	str	r3, [r7, #32]
}
 800a190:	bf00      	nop
 800a192:	e7fe      	b.n	800a192 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a194:	68bb      	ldr	r3, [r7, #8]
 800a196:	2b00      	cmp	r3, #0
 800a198:	d103      	bne.n	800a1a2 <xQueueReceive+0x3e>
 800a19a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a19c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a19e:	2b00      	cmp	r3, #0
 800a1a0:	d101      	bne.n	800a1a6 <xQueueReceive+0x42>
 800a1a2:	2301      	movs	r3, #1
 800a1a4:	e000      	b.n	800a1a8 <xQueueReceive+0x44>
 800a1a6:	2300      	movs	r3, #0
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d10a      	bne.n	800a1c2 <xQueueReceive+0x5e>
	__asm volatile
 800a1ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1b0:	f383 8811 	msr	BASEPRI, r3
 800a1b4:	f3bf 8f6f 	isb	sy
 800a1b8:	f3bf 8f4f 	dsb	sy
 800a1bc:	61fb      	str	r3, [r7, #28]
}
 800a1be:	bf00      	nop
 800a1c0:	e7fe      	b.n	800a1c0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1c2:	f001 fa57 	bl	800b674 <xTaskGetSchedulerState>
 800a1c6:	4603      	mov	r3, r0
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	d102      	bne.n	800a1d2 <xQueueReceive+0x6e>
 800a1cc:	687b      	ldr	r3, [r7, #4]
 800a1ce:	2b00      	cmp	r3, #0
 800a1d0:	d101      	bne.n	800a1d6 <xQueueReceive+0x72>
 800a1d2:	2301      	movs	r3, #1
 800a1d4:	e000      	b.n	800a1d8 <xQueueReceive+0x74>
 800a1d6:	2300      	movs	r3, #0
 800a1d8:	2b00      	cmp	r3, #0
 800a1da:	d10a      	bne.n	800a1f2 <xQueueReceive+0x8e>
	__asm volatile
 800a1dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1e0:	f383 8811 	msr	BASEPRI, r3
 800a1e4:	f3bf 8f6f 	isb	sy
 800a1e8:	f3bf 8f4f 	dsb	sy
 800a1ec:	61bb      	str	r3, [r7, #24]
}
 800a1ee:	bf00      	nop
 800a1f0:	e7fe      	b.n	800a1f0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1f2:	f002 f897 	bl	800c324 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a1f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a1fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d01f      	beq.n	800a242 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a202:	68b9      	ldr	r1, [r7, #8]
 800a204:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a206:	f000 fabe 	bl	800a786 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a20a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a20c:	1e5a      	subs	r2, r3, #1
 800a20e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a210:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a212:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a214:	691b      	ldr	r3, [r3, #16]
 800a216:	2b00      	cmp	r3, #0
 800a218:	d00f      	beq.n	800a23a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a21c:	3310      	adds	r3, #16
 800a21e:	4618      	mov	r0, r3
 800a220:	f001 f866 	bl	800b2f0 <xTaskRemoveFromEventList>
 800a224:	4603      	mov	r3, r0
 800a226:	2b00      	cmp	r3, #0
 800a228:	d007      	beq.n	800a23a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a22a:	4b3d      	ldr	r3, [pc, #244]	; (800a320 <xQueueReceive+0x1bc>)
 800a22c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a230:	601a      	str	r2, [r3, #0]
 800a232:	f3bf 8f4f 	dsb	sy
 800a236:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a23a:	f002 f8a3 	bl	800c384 <vPortExitCritical>
				return pdPASS;
 800a23e:	2301      	movs	r3, #1
 800a240:	e069      	b.n	800a316 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a242:	687b      	ldr	r3, [r7, #4]
 800a244:	2b00      	cmp	r3, #0
 800a246:	d103      	bne.n	800a250 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a248:	f002 f89c 	bl	800c384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a24c:	2300      	movs	r3, #0
 800a24e:	e062      	b.n	800a316 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a250:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a252:	2b00      	cmp	r3, #0
 800a254:	d106      	bne.n	800a264 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a256:	f107 0310 	add.w	r3, r7, #16
 800a25a:	4618      	mov	r0, r3
 800a25c:	f001 f8ac 	bl	800b3b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a260:	2301      	movs	r3, #1
 800a262:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a264:	f002 f88e 	bl	800c384 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a268:	f000 fe18 	bl	800ae9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a26c:	f002 f85a 	bl	800c324 <vPortEnterCritical>
 800a270:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a272:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a276:	b25b      	sxtb	r3, r3
 800a278:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a27c:	d103      	bne.n	800a286 <xQueueReceive+0x122>
 800a27e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a280:	2200      	movs	r2, #0
 800a282:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a288:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a28c:	b25b      	sxtb	r3, r3
 800a28e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a292:	d103      	bne.n	800a29c <xQueueReceive+0x138>
 800a294:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a296:	2200      	movs	r2, #0
 800a298:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a29c:	f002 f872 	bl	800c384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2a0:	1d3a      	adds	r2, r7, #4
 800a2a2:	f107 0310 	add.w	r3, r7, #16
 800a2a6:	4611      	mov	r1, r2
 800a2a8:	4618      	mov	r0, r3
 800a2aa:	f001 f89b 	bl	800b3e4 <xTaskCheckForTimeOut>
 800a2ae:	4603      	mov	r3, r0
 800a2b0:	2b00      	cmp	r3, #0
 800a2b2:	d123      	bne.n	800a2fc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a2b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2b6:	f000 fade 	bl	800a876 <prvIsQueueEmpty>
 800a2ba:	4603      	mov	r3, r0
 800a2bc:	2b00      	cmp	r3, #0
 800a2be:	d017      	beq.n	800a2f0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a2c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a2c2:	3324      	adds	r3, #36	; 0x24
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	4611      	mov	r1, r2
 800a2c8:	4618      	mov	r0, r3
 800a2ca:	f000 ffc1 	bl	800b250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a2ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2d0:	f000 fa7f 	bl	800a7d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a2d4:	f000 fdf0 	bl	800aeb8 <xTaskResumeAll>
 800a2d8:	4603      	mov	r3, r0
 800a2da:	2b00      	cmp	r3, #0
 800a2dc:	d189      	bne.n	800a1f2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800a2de:	4b10      	ldr	r3, [pc, #64]	; (800a320 <xQueueReceive+0x1bc>)
 800a2e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2e4:	601a      	str	r2, [r3, #0]
 800a2e6:	f3bf 8f4f 	dsb	sy
 800a2ea:	f3bf 8f6f 	isb	sy
 800a2ee:	e780      	b.n	800a1f2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a2f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2f2:	f000 fa6e 	bl	800a7d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a2f6:	f000 fddf 	bl	800aeb8 <xTaskResumeAll>
 800a2fa:	e77a      	b.n	800a1f2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a2fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a2fe:	f000 fa68 	bl	800a7d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a302:	f000 fdd9 	bl	800aeb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a306:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800a308:	f000 fab5 	bl	800a876 <prvIsQueueEmpty>
 800a30c:	4603      	mov	r3, r0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	f43f af6f 	beq.w	800a1f2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a314:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a316:	4618      	mov	r0, r3
 800a318:	3730      	adds	r7, #48	; 0x30
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	e000ed04 	.word	0xe000ed04

0800a324 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b08e      	sub	sp, #56	; 0x38
 800a328:	af00      	add	r7, sp, #0
 800a32a:	6078      	str	r0, [r7, #4]
 800a32c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a32e:	2300      	movs	r3, #0
 800a330:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a332:	687b      	ldr	r3, [r7, #4]
 800a334:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a336:	2300      	movs	r3, #0
 800a338:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a33a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a33c:	2b00      	cmp	r3, #0
 800a33e:	d10a      	bne.n	800a356 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800a340:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a344:	f383 8811 	msr	BASEPRI, r3
 800a348:	f3bf 8f6f 	isb	sy
 800a34c:	f3bf 8f4f 	dsb	sy
 800a350:	623b      	str	r3, [r7, #32]
}
 800a352:	bf00      	nop
 800a354:	e7fe      	b.n	800a354 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a35a:	2b00      	cmp	r3, #0
 800a35c:	d00a      	beq.n	800a374 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800a35e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a362:	f383 8811 	msr	BASEPRI, r3
 800a366:	f3bf 8f6f 	isb	sy
 800a36a:	f3bf 8f4f 	dsb	sy
 800a36e:	61fb      	str	r3, [r7, #28]
}
 800a370:	bf00      	nop
 800a372:	e7fe      	b.n	800a372 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a374:	f001 f97e 	bl	800b674 <xTaskGetSchedulerState>
 800a378:	4603      	mov	r3, r0
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d102      	bne.n	800a384 <xQueueSemaphoreTake+0x60>
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	2b00      	cmp	r3, #0
 800a382:	d101      	bne.n	800a388 <xQueueSemaphoreTake+0x64>
 800a384:	2301      	movs	r3, #1
 800a386:	e000      	b.n	800a38a <xQueueSemaphoreTake+0x66>
 800a388:	2300      	movs	r3, #0
 800a38a:	2b00      	cmp	r3, #0
 800a38c:	d10a      	bne.n	800a3a4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800a38e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a392:	f383 8811 	msr	BASEPRI, r3
 800a396:	f3bf 8f6f 	isb	sy
 800a39a:	f3bf 8f4f 	dsb	sy
 800a39e:	61bb      	str	r3, [r7, #24]
}
 800a3a0:	bf00      	nop
 800a3a2:	e7fe      	b.n	800a3a2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a3a4:	f001 ffbe 	bl	800c324 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a3a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a3ac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a3ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d024      	beq.n	800a3fe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a3b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a3b6:	1e5a      	subs	r2, r3, #1
 800a3b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3ba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a3bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d104      	bne.n	800a3ce <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a3c4:	f001 facc 	bl	800b960 <pvTaskIncrementMutexHeldCount>
 800a3c8:	4602      	mov	r2, r0
 800a3ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3cc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a3ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d0:	691b      	ldr	r3, [r3, #16]
 800a3d2:	2b00      	cmp	r3, #0
 800a3d4:	d00f      	beq.n	800a3f6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a3d8:	3310      	adds	r3, #16
 800a3da:	4618      	mov	r0, r3
 800a3dc:	f000 ff88 	bl	800b2f0 <xTaskRemoveFromEventList>
 800a3e0:	4603      	mov	r3, r0
 800a3e2:	2b00      	cmp	r3, #0
 800a3e4:	d007      	beq.n	800a3f6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a3e6:	4b54      	ldr	r3, [pc, #336]	; (800a538 <xQueueSemaphoreTake+0x214>)
 800a3e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a3ec:	601a      	str	r2, [r3, #0]
 800a3ee:	f3bf 8f4f 	dsb	sy
 800a3f2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a3f6:	f001 ffc5 	bl	800c384 <vPortExitCritical>
				return pdPASS;
 800a3fa:	2301      	movs	r3, #1
 800a3fc:	e097      	b.n	800a52e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a3fe:	683b      	ldr	r3, [r7, #0]
 800a400:	2b00      	cmp	r3, #0
 800a402:	d111      	bne.n	800a428 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a404:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a406:	2b00      	cmp	r3, #0
 800a408:	d00a      	beq.n	800a420 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800a40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a40e:	f383 8811 	msr	BASEPRI, r3
 800a412:	f3bf 8f6f 	isb	sy
 800a416:	f3bf 8f4f 	dsb	sy
 800a41a:	617b      	str	r3, [r7, #20]
}
 800a41c:	bf00      	nop
 800a41e:	e7fe      	b.n	800a41e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a420:	f001 ffb0 	bl	800c384 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a424:	2300      	movs	r3, #0
 800a426:	e082      	b.n	800a52e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a428:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d106      	bne.n	800a43c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a42e:	f107 030c 	add.w	r3, r7, #12
 800a432:	4618      	mov	r0, r3
 800a434:	f000 ffc0 	bl	800b3b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a438:	2301      	movs	r3, #1
 800a43a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a43c:	f001 ffa2 	bl	800c384 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a440:	f000 fd2c 	bl	800ae9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a444:	f001 ff6e 	bl	800c324 <vPortEnterCritical>
 800a448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a44a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a44e:	b25b      	sxtb	r3, r3
 800a450:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a454:	d103      	bne.n	800a45e <xQueueSemaphoreTake+0x13a>
 800a456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a458:	2200      	movs	r2, #0
 800a45a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a460:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a464:	b25b      	sxtb	r3, r3
 800a466:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a46a:	d103      	bne.n	800a474 <xQueueSemaphoreTake+0x150>
 800a46c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a46e:	2200      	movs	r2, #0
 800a470:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a474:	f001 ff86 	bl	800c384 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a478:	463a      	mov	r2, r7
 800a47a:	f107 030c 	add.w	r3, r7, #12
 800a47e:	4611      	mov	r1, r2
 800a480:	4618      	mov	r0, r3
 800a482:	f000 ffaf 	bl	800b3e4 <xTaskCheckForTimeOut>
 800a486:	4603      	mov	r3, r0
 800a488:	2b00      	cmp	r3, #0
 800a48a:	d132      	bne.n	800a4f2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a48c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a48e:	f000 f9f2 	bl	800a876 <prvIsQueueEmpty>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d026      	beq.n	800a4e6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a49a:	681b      	ldr	r3, [r3, #0]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d109      	bne.n	800a4b4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800a4a0:	f001 ff40 	bl	800c324 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a4a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4a6:	689b      	ldr	r3, [r3, #8]
 800a4a8:	4618      	mov	r0, r3
 800a4aa:	f001 f901 	bl	800b6b0 <xTaskPriorityInherit>
 800a4ae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800a4b0:	f001 ff68 	bl	800c384 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a4b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a4b6:	3324      	adds	r3, #36	; 0x24
 800a4b8:	683a      	ldr	r2, [r7, #0]
 800a4ba:	4611      	mov	r1, r2
 800a4bc:	4618      	mov	r0, r3
 800a4be:	f000 fec7 	bl	800b250 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a4c2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4c4:	f000 f985 	bl	800a7d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a4c8:	f000 fcf6 	bl	800aeb8 <xTaskResumeAll>
 800a4cc:	4603      	mov	r3, r0
 800a4ce:	2b00      	cmp	r3, #0
 800a4d0:	f47f af68 	bne.w	800a3a4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800a4d4:	4b18      	ldr	r3, [pc, #96]	; (800a538 <xQueueSemaphoreTake+0x214>)
 800a4d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a4da:	601a      	str	r2, [r3, #0]
 800a4dc:	f3bf 8f4f 	dsb	sy
 800a4e0:	f3bf 8f6f 	isb	sy
 800a4e4:	e75e      	b.n	800a3a4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a4e6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4e8:	f000 f973 	bl	800a7d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a4ec:	f000 fce4 	bl	800aeb8 <xTaskResumeAll>
 800a4f0:	e758      	b.n	800a3a4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a4f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4f4:	f000 f96d 	bl	800a7d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a4f8:	f000 fcde 	bl	800aeb8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a4fc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a4fe:	f000 f9ba 	bl	800a876 <prvIsQueueEmpty>
 800a502:	4603      	mov	r3, r0
 800a504:	2b00      	cmp	r3, #0
 800a506:	f43f af4d 	beq.w	800a3a4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a50a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d00d      	beq.n	800a52c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800a510:	f001 ff08 	bl	800c324 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a514:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800a516:	f000 f8b4 	bl	800a682 <prvGetDisinheritPriorityAfterTimeout>
 800a51a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a51e:	689b      	ldr	r3, [r3, #8]
 800a520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a522:	4618      	mov	r0, r3
 800a524:	f001 f99a 	bl	800b85c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a528:	f001 ff2c 	bl	800c384 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a52c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a52e:	4618      	mov	r0, r3
 800a530:	3738      	adds	r7, #56	; 0x38
 800a532:	46bd      	mov	sp, r7
 800a534:	bd80      	pop	{r7, pc}
 800a536:	bf00      	nop
 800a538:	e000ed04 	.word	0xe000ed04

0800a53c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a53c:	b580      	push	{r7, lr}
 800a53e:	b08e      	sub	sp, #56	; 0x38
 800a540:	af00      	add	r7, sp, #0
 800a542:	60f8      	str	r0, [r7, #12]
 800a544:	60b9      	str	r1, [r7, #8]
 800a546:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a548:	68fb      	ldr	r3, [r7, #12]
 800a54a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800a54c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a54e:	2b00      	cmp	r3, #0
 800a550:	d10a      	bne.n	800a568 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800a552:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a556:	f383 8811 	msr	BASEPRI, r3
 800a55a:	f3bf 8f6f 	isb	sy
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	623b      	str	r3, [r7, #32]
}
 800a564:	bf00      	nop
 800a566:	e7fe      	b.n	800a566 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a568:	68bb      	ldr	r3, [r7, #8]
 800a56a:	2b00      	cmp	r3, #0
 800a56c:	d103      	bne.n	800a576 <xQueueReceiveFromISR+0x3a>
 800a56e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a570:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a572:	2b00      	cmp	r3, #0
 800a574:	d101      	bne.n	800a57a <xQueueReceiveFromISR+0x3e>
 800a576:	2301      	movs	r3, #1
 800a578:	e000      	b.n	800a57c <xQueueReceiveFromISR+0x40>
 800a57a:	2300      	movs	r3, #0
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d10a      	bne.n	800a596 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800a580:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a584:	f383 8811 	msr	BASEPRI, r3
 800a588:	f3bf 8f6f 	isb	sy
 800a58c:	f3bf 8f4f 	dsb	sy
 800a590:	61fb      	str	r3, [r7, #28]
}
 800a592:	bf00      	nop
 800a594:	e7fe      	b.n	800a594 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a596:	f001 ffa7 	bl	800c4e8 <vPortValidateInterruptPriority>
	__asm volatile
 800a59a:	f3ef 8211 	mrs	r2, BASEPRI
 800a59e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a2:	f383 8811 	msr	BASEPRI, r3
 800a5a6:	f3bf 8f6f 	isb	sy
 800a5aa:	f3bf 8f4f 	dsb	sy
 800a5ae:	61ba      	str	r2, [r7, #24]
 800a5b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800a5b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a5b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a5b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a5ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a5bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d02f      	beq.n	800a622 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800a5c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a5c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a5cc:	68b9      	ldr	r1, [r7, #8]
 800a5ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800a5d0:	f000 f8d9 	bl	800a786 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a5d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a5d6:	1e5a      	subs	r2, r3, #1
 800a5d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800a5dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800a5e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a5e4:	d112      	bne.n	800a60c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5e8:	691b      	ldr	r3, [r3, #16]
 800a5ea:	2b00      	cmp	r3, #0
 800a5ec:	d016      	beq.n	800a61c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a5f0:	3310      	adds	r3, #16
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	f000 fe7c 	bl	800b2f0 <xTaskRemoveFromEventList>
 800a5f8:	4603      	mov	r3, r0
 800a5fa:	2b00      	cmp	r3, #0
 800a5fc:	d00e      	beq.n	800a61c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	2b00      	cmp	r3, #0
 800a602:	d00b      	beq.n	800a61c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	2201      	movs	r2, #1
 800a608:	601a      	str	r2, [r3, #0]
 800a60a:	e007      	b.n	800a61c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800a60c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800a610:	3301      	adds	r3, #1
 800a612:	b2db      	uxtb	r3, r3
 800a614:	b25a      	sxtb	r2, r3
 800a616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800a61c:	2301      	movs	r3, #1
 800a61e:	637b      	str	r3, [r7, #52]	; 0x34
 800a620:	e001      	b.n	800a626 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800a622:	2300      	movs	r3, #0
 800a624:	637b      	str	r3, [r7, #52]	; 0x34
 800a626:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a628:	613b      	str	r3, [r7, #16]
	__asm volatile
 800a62a:	693b      	ldr	r3, [r7, #16]
 800a62c:	f383 8811 	msr	BASEPRI, r3
}
 800a630:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a632:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800a634:	4618      	mov	r0, r3
 800a636:	3738      	adds	r7, #56	; 0x38
 800a638:	46bd      	mov	sp, r7
 800a63a:	bd80      	pop	{r7, pc}

0800a63c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800a63c:	b580      	push	{r7, lr}
 800a63e:	b084      	sub	sp, #16
 800a640:	af00      	add	r7, sp, #0
 800a642:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d10a      	bne.n	800a664 <vQueueDelete+0x28>
	__asm volatile
 800a64e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a652:	f383 8811 	msr	BASEPRI, r3
 800a656:	f3bf 8f6f 	isb	sy
 800a65a:	f3bf 8f4f 	dsb	sy
 800a65e:	60bb      	str	r3, [r7, #8]
}
 800a660:	bf00      	nop
 800a662:	e7fe      	b.n	800a662 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800a664:	68f8      	ldr	r0, [r7, #12]
 800a666:	f000 f95f 	bl	800a928 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800a66a:	68fb      	ldr	r3, [r7, #12]
 800a66c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800a670:	2b00      	cmp	r3, #0
 800a672:	d102      	bne.n	800a67a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800a674:	68f8      	ldr	r0, [r7, #12]
 800a676:	f002 f843 	bl	800c700 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800a67a:	bf00      	nop
 800a67c:	3710      	adds	r7, #16
 800a67e:	46bd      	mov	sp, r7
 800a680:	bd80      	pop	{r7, pc}

0800a682 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a682:	b480      	push	{r7}
 800a684:	b085      	sub	sp, #20
 800a686:	af00      	add	r7, sp, #0
 800a688:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a68e:	2b00      	cmp	r3, #0
 800a690:	d006      	beq.n	800a6a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a692:	687b      	ldr	r3, [r7, #4]
 800a694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a696:	681b      	ldr	r3, [r3, #0]
 800a698:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800a69c:	60fb      	str	r3, [r7, #12]
 800a69e:	e001      	b.n	800a6a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a6a0:	2300      	movs	r3, #0
 800a6a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a6a4:	68fb      	ldr	r3, [r7, #12]
	}
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	3714      	adds	r7, #20
 800a6aa:	46bd      	mov	sp, r7
 800a6ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6b0:	4770      	bx	lr

0800a6b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a6b2:	b580      	push	{r7, lr}
 800a6b4:	b086      	sub	sp, #24
 800a6b6:	af00      	add	r7, sp, #0
 800a6b8:	60f8      	str	r0, [r7, #12]
 800a6ba:	60b9      	str	r1, [r7, #8]
 800a6bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a6be:	2300      	movs	r3, #0
 800a6c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a6c2:	68fb      	ldr	r3, [r7, #12]
 800a6c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a6c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d10d      	bne.n	800a6ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a6d0:	68fb      	ldr	r3, [r7, #12]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	2b00      	cmp	r3, #0
 800a6d6:	d14d      	bne.n	800a774 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a6d8:	68fb      	ldr	r3, [r7, #12]
 800a6da:	689b      	ldr	r3, [r3, #8]
 800a6dc:	4618      	mov	r0, r3
 800a6de:	f001 f84f 	bl	800b780 <xTaskPriorityDisinherit>
 800a6e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	2200      	movs	r2, #0
 800a6e8:	609a      	str	r2, [r3, #8]
 800a6ea:	e043      	b.n	800a774 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2b00      	cmp	r3, #0
 800a6f0:	d119      	bne.n	800a726 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a6f2:	68fb      	ldr	r3, [r7, #12]
 800a6f4:	6858      	ldr	r0, [r3, #4]
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6fa:	461a      	mov	r2, r3
 800a6fc:	68b9      	ldr	r1, [r7, #8]
 800a6fe:	f002 f949 	bl	800c994 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a702:	68fb      	ldr	r3, [r7, #12]
 800a704:	685a      	ldr	r2, [r3, #4]
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a70a:	441a      	add	r2, r3
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	685a      	ldr	r2, [r3, #4]
 800a714:	68fb      	ldr	r3, [r7, #12]
 800a716:	689b      	ldr	r3, [r3, #8]
 800a718:	429a      	cmp	r2, r3
 800a71a:	d32b      	bcc.n	800a774 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	681a      	ldr	r2, [r3, #0]
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	605a      	str	r2, [r3, #4]
 800a724:	e026      	b.n	800a774 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800a726:	68fb      	ldr	r3, [r7, #12]
 800a728:	68d8      	ldr	r0, [r3, #12]
 800a72a:	68fb      	ldr	r3, [r7, #12]
 800a72c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a72e:	461a      	mov	r2, r3
 800a730:	68b9      	ldr	r1, [r7, #8]
 800a732:	f002 f92f 	bl	800c994 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800a736:	68fb      	ldr	r3, [r7, #12]
 800a738:	68da      	ldr	r2, [r3, #12]
 800a73a:	68fb      	ldr	r3, [r7, #12]
 800a73c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a73e:	425b      	negs	r3, r3
 800a740:	441a      	add	r2, r3
 800a742:	68fb      	ldr	r3, [r7, #12]
 800a744:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	68da      	ldr	r2, [r3, #12]
 800a74a:	68fb      	ldr	r3, [r7, #12]
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	429a      	cmp	r2, r3
 800a750:	d207      	bcs.n	800a762 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	689a      	ldr	r2, [r3, #8]
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a75a:	425b      	negs	r3, r3
 800a75c:	441a      	add	r2, r3
 800a75e:	68fb      	ldr	r3, [r7, #12]
 800a760:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	2b02      	cmp	r3, #2
 800a766:	d105      	bne.n	800a774 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a768:	693b      	ldr	r3, [r7, #16]
 800a76a:	2b00      	cmp	r3, #0
 800a76c:	d002      	beq.n	800a774 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800a76e:	693b      	ldr	r3, [r7, #16]
 800a770:	3b01      	subs	r3, #1
 800a772:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a774:	693b      	ldr	r3, [r7, #16]
 800a776:	1c5a      	adds	r2, r3, #1
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a77c:	697b      	ldr	r3, [r7, #20]
}
 800a77e:	4618      	mov	r0, r3
 800a780:	3718      	adds	r7, #24
 800a782:	46bd      	mov	sp, r7
 800a784:	bd80      	pop	{r7, pc}

0800a786 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a786:	b580      	push	{r7, lr}
 800a788:	b082      	sub	sp, #8
 800a78a:	af00      	add	r7, sp, #0
 800a78c:	6078      	str	r0, [r7, #4]
 800a78e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a794:	2b00      	cmp	r3, #0
 800a796:	d018      	beq.n	800a7ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a798:	687b      	ldr	r3, [r7, #4]
 800a79a:	68da      	ldr	r2, [r3, #12]
 800a79c:	687b      	ldr	r3, [r7, #4]
 800a79e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7a0:	441a      	add	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	68da      	ldr	r2, [r3, #12]
 800a7aa:	687b      	ldr	r3, [r7, #4]
 800a7ac:	689b      	ldr	r3, [r3, #8]
 800a7ae:	429a      	cmp	r2, r3
 800a7b0:	d303      	bcc.n	800a7ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681a      	ldr	r2, [r3, #0]
 800a7b6:	687b      	ldr	r3, [r7, #4]
 800a7b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	68d9      	ldr	r1, [r3, #12]
 800a7be:	687b      	ldr	r3, [r7, #4]
 800a7c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c2:	461a      	mov	r2, r3
 800a7c4:	6838      	ldr	r0, [r7, #0]
 800a7c6:	f002 f8e5 	bl	800c994 <memcpy>
	}
}
 800a7ca:	bf00      	nop
 800a7cc:	3708      	adds	r7, #8
 800a7ce:	46bd      	mov	sp, r7
 800a7d0:	bd80      	pop	{r7, pc}

0800a7d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a7d2:	b580      	push	{r7, lr}
 800a7d4:	b084      	sub	sp, #16
 800a7d6:	af00      	add	r7, sp, #0
 800a7d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a7da:	f001 fda3 	bl	800c324 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a7de:	687b      	ldr	r3, [r7, #4]
 800a7e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a7e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a7e6:	e011      	b.n	800a80c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a7e8:	687b      	ldr	r3, [r7, #4]
 800a7ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a7ec:	2b00      	cmp	r3, #0
 800a7ee:	d012      	beq.n	800a816 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a7f0:	687b      	ldr	r3, [r7, #4]
 800a7f2:	3324      	adds	r3, #36	; 0x24
 800a7f4:	4618      	mov	r0, r3
 800a7f6:	f000 fd7b 	bl	800b2f0 <xTaskRemoveFromEventList>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	2b00      	cmp	r3, #0
 800a7fe:	d001      	beq.n	800a804 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a800:	f000 fe52 	bl	800b4a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a804:	7bfb      	ldrb	r3, [r7, #15]
 800a806:	3b01      	subs	r3, #1
 800a808:	b2db      	uxtb	r3, r3
 800a80a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a80c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a810:	2b00      	cmp	r3, #0
 800a812:	dce9      	bgt.n	800a7e8 <prvUnlockQueue+0x16>
 800a814:	e000      	b.n	800a818 <prvUnlockQueue+0x46>
					break;
 800a816:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	22ff      	movs	r2, #255	; 0xff
 800a81c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a820:	f001 fdb0 	bl	800c384 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a824:	f001 fd7e 	bl	800c324 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a828:	687b      	ldr	r3, [r7, #4]
 800a82a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a82e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a830:	e011      	b.n	800a856 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	691b      	ldr	r3, [r3, #16]
 800a836:	2b00      	cmp	r3, #0
 800a838:	d012      	beq.n	800a860 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a83a:	687b      	ldr	r3, [r7, #4]
 800a83c:	3310      	adds	r3, #16
 800a83e:	4618      	mov	r0, r3
 800a840:	f000 fd56 	bl	800b2f0 <xTaskRemoveFromEventList>
 800a844:	4603      	mov	r3, r0
 800a846:	2b00      	cmp	r3, #0
 800a848:	d001      	beq.n	800a84e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a84a:	f000 fe2d 	bl	800b4a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a84e:	7bbb      	ldrb	r3, [r7, #14]
 800a850:	3b01      	subs	r3, #1
 800a852:	b2db      	uxtb	r3, r3
 800a854:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a856:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a85a:	2b00      	cmp	r3, #0
 800a85c:	dce9      	bgt.n	800a832 <prvUnlockQueue+0x60>
 800a85e:	e000      	b.n	800a862 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a860:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	22ff      	movs	r2, #255	; 0xff
 800a866:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a86a:	f001 fd8b 	bl	800c384 <vPortExitCritical>
}
 800a86e:	bf00      	nop
 800a870:	3710      	adds	r7, #16
 800a872:	46bd      	mov	sp, r7
 800a874:	bd80      	pop	{r7, pc}

0800a876 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a876:	b580      	push	{r7, lr}
 800a878:	b084      	sub	sp, #16
 800a87a:	af00      	add	r7, sp, #0
 800a87c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a87e:	f001 fd51 	bl	800c324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a882:	687b      	ldr	r3, [r7, #4]
 800a884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a886:	2b00      	cmp	r3, #0
 800a888:	d102      	bne.n	800a890 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a88a:	2301      	movs	r3, #1
 800a88c:	60fb      	str	r3, [r7, #12]
 800a88e:	e001      	b.n	800a894 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a890:	2300      	movs	r3, #0
 800a892:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a894:	f001 fd76 	bl	800c384 <vPortExitCritical>

	return xReturn;
 800a898:	68fb      	ldr	r3, [r7, #12]
}
 800a89a:	4618      	mov	r0, r3
 800a89c:	3710      	adds	r7, #16
 800a89e:	46bd      	mov	sp, r7
 800a8a0:	bd80      	pop	{r7, pc}

0800a8a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a8a2:	b580      	push	{r7, lr}
 800a8a4:	b084      	sub	sp, #16
 800a8a6:	af00      	add	r7, sp, #0
 800a8a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a8aa:	f001 fd3b 	bl	800c324 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a8ae:	687b      	ldr	r3, [r7, #4]
 800a8b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a8b2:	687b      	ldr	r3, [r7, #4]
 800a8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a8b6:	429a      	cmp	r2, r3
 800a8b8:	d102      	bne.n	800a8c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a8ba:	2301      	movs	r3, #1
 800a8bc:	60fb      	str	r3, [r7, #12]
 800a8be:	e001      	b.n	800a8c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a8c0:	2300      	movs	r3, #0
 800a8c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a8c4:	f001 fd5e 	bl	800c384 <vPortExitCritical>

	return xReturn;
 800a8c8:	68fb      	ldr	r3, [r7, #12]
}
 800a8ca:	4618      	mov	r0, r3
 800a8cc:	3710      	adds	r7, #16
 800a8ce:	46bd      	mov	sp, r7
 800a8d0:	bd80      	pop	{r7, pc}
	...

0800a8d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a8d4:	b480      	push	{r7}
 800a8d6:	b085      	sub	sp, #20
 800a8d8:	af00      	add	r7, sp, #0
 800a8da:	6078      	str	r0, [r7, #4]
 800a8dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a8de:	2300      	movs	r3, #0
 800a8e0:	60fb      	str	r3, [r7, #12]
 800a8e2:	e014      	b.n	800a90e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a8e4:	4a0f      	ldr	r2, [pc, #60]	; (800a924 <vQueueAddToRegistry+0x50>)
 800a8e6:	68fb      	ldr	r3, [r7, #12]
 800a8e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d10b      	bne.n	800a908 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a8f0:	490c      	ldr	r1, [pc, #48]	; (800a924 <vQueueAddToRegistry+0x50>)
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	683a      	ldr	r2, [r7, #0]
 800a8f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a8fa:	4a0a      	ldr	r2, [pc, #40]	; (800a924 <vQueueAddToRegistry+0x50>)
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	00db      	lsls	r3, r3, #3
 800a900:	4413      	add	r3, r2
 800a902:	687a      	ldr	r2, [r7, #4]
 800a904:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a906:	e006      	b.n	800a916 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	3301      	adds	r3, #1
 800a90c:	60fb      	str	r3, [r7, #12]
 800a90e:	68fb      	ldr	r3, [r7, #12]
 800a910:	2b07      	cmp	r3, #7
 800a912:	d9e7      	bls.n	800a8e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a914:	bf00      	nop
 800a916:	bf00      	nop
 800a918:	3714      	adds	r7, #20
 800a91a:	46bd      	mov	sp, r7
 800a91c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a920:	4770      	bx	lr
 800a922:	bf00      	nop
 800a924:	20000b10 	.word	0x20000b10

0800a928 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800a928:	b480      	push	{r7}
 800a92a:	b085      	sub	sp, #20
 800a92c:	af00      	add	r7, sp, #0
 800a92e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a930:	2300      	movs	r3, #0
 800a932:	60fb      	str	r3, [r7, #12]
 800a934:	e016      	b.n	800a964 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800a936:	4a10      	ldr	r2, [pc, #64]	; (800a978 <vQueueUnregisterQueue+0x50>)
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	00db      	lsls	r3, r3, #3
 800a93c:	4413      	add	r3, r2
 800a93e:	685b      	ldr	r3, [r3, #4]
 800a940:	687a      	ldr	r2, [r7, #4]
 800a942:	429a      	cmp	r2, r3
 800a944:	d10b      	bne.n	800a95e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800a946:	4a0c      	ldr	r2, [pc, #48]	; (800a978 <vQueueUnregisterQueue+0x50>)
 800a948:	68fb      	ldr	r3, [r7, #12]
 800a94a:	2100      	movs	r1, #0
 800a94c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800a950:	4a09      	ldr	r2, [pc, #36]	; (800a978 <vQueueUnregisterQueue+0x50>)
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	00db      	lsls	r3, r3, #3
 800a956:	4413      	add	r3, r2
 800a958:	2200      	movs	r2, #0
 800a95a:	605a      	str	r2, [r3, #4]
				break;
 800a95c:	e006      	b.n	800a96c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	3301      	adds	r3, #1
 800a962:	60fb      	str	r3, [r7, #12]
 800a964:	68fb      	ldr	r3, [r7, #12]
 800a966:	2b07      	cmp	r3, #7
 800a968:	d9e5      	bls.n	800a936 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800a96a:	bf00      	nop
 800a96c:	bf00      	nop
 800a96e:	3714      	adds	r7, #20
 800a970:	46bd      	mov	sp, r7
 800a972:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a976:	4770      	bx	lr
 800a978:	20000b10 	.word	0x20000b10

0800a97c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b086      	sub	sp, #24
 800a980:	af00      	add	r7, sp, #0
 800a982:	60f8      	str	r0, [r7, #12]
 800a984:	60b9      	str	r1, [r7, #8]
 800a986:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a988:	68fb      	ldr	r3, [r7, #12]
 800a98a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a98c:	f001 fcca 	bl	800c324 <vPortEnterCritical>
 800a990:	697b      	ldr	r3, [r7, #20]
 800a992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a996:	b25b      	sxtb	r3, r3
 800a998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a99c:	d103      	bne.n	800a9a6 <vQueueWaitForMessageRestricted+0x2a>
 800a99e:	697b      	ldr	r3, [r7, #20]
 800a9a0:	2200      	movs	r2, #0
 800a9a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a9a6:	697b      	ldr	r3, [r7, #20]
 800a9a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a9ac:	b25b      	sxtb	r3, r3
 800a9ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a9b2:	d103      	bne.n	800a9bc <vQueueWaitForMessageRestricted+0x40>
 800a9b4:	697b      	ldr	r3, [r7, #20]
 800a9b6:	2200      	movs	r2, #0
 800a9b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a9bc:	f001 fce2 	bl	800c384 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a9c0:	697b      	ldr	r3, [r7, #20]
 800a9c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d106      	bne.n	800a9d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a9c8:	697b      	ldr	r3, [r7, #20]
 800a9ca:	3324      	adds	r3, #36	; 0x24
 800a9cc:	687a      	ldr	r2, [r7, #4]
 800a9ce:	68b9      	ldr	r1, [r7, #8]
 800a9d0:	4618      	mov	r0, r3
 800a9d2:	f000 fc61 	bl	800b298 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a9d6:	6978      	ldr	r0, [r7, #20]
 800a9d8:	f7ff fefb 	bl	800a7d2 <prvUnlockQueue>
	}
 800a9dc:	bf00      	nop
 800a9de:	3718      	adds	r7, #24
 800a9e0:	46bd      	mov	sp, r7
 800a9e2:	bd80      	pop	{r7, pc}

0800a9e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a9e4:	b580      	push	{r7, lr}
 800a9e6:	b08e      	sub	sp, #56	; 0x38
 800a9e8:	af04      	add	r7, sp, #16
 800a9ea:	60f8      	str	r0, [r7, #12]
 800a9ec:	60b9      	str	r1, [r7, #8]
 800a9ee:	607a      	str	r2, [r7, #4]
 800a9f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a9f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d10a      	bne.n	800aa0e <xTaskCreateStatic+0x2a>
	__asm volatile
 800a9f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9fc:	f383 8811 	msr	BASEPRI, r3
 800aa00:	f3bf 8f6f 	isb	sy
 800aa04:	f3bf 8f4f 	dsb	sy
 800aa08:	623b      	str	r3, [r7, #32]
}
 800aa0a:	bf00      	nop
 800aa0c:	e7fe      	b.n	800aa0c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800aa0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d10a      	bne.n	800aa2a <xTaskCreateStatic+0x46>
	__asm volatile
 800aa14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa18:	f383 8811 	msr	BASEPRI, r3
 800aa1c:	f3bf 8f6f 	isb	sy
 800aa20:	f3bf 8f4f 	dsb	sy
 800aa24:	61fb      	str	r3, [r7, #28]
}
 800aa26:	bf00      	nop
 800aa28:	e7fe      	b.n	800aa28 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800aa2a:	23bc      	movs	r3, #188	; 0xbc
 800aa2c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800aa2e:	693b      	ldr	r3, [r7, #16]
 800aa30:	2bbc      	cmp	r3, #188	; 0xbc
 800aa32:	d00a      	beq.n	800aa4a <xTaskCreateStatic+0x66>
	__asm volatile
 800aa34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa38:	f383 8811 	msr	BASEPRI, r3
 800aa3c:	f3bf 8f6f 	isb	sy
 800aa40:	f3bf 8f4f 	dsb	sy
 800aa44:	61bb      	str	r3, [r7, #24]
}
 800aa46:	bf00      	nop
 800aa48:	e7fe      	b.n	800aa48 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800aa4a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800aa4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa4e:	2b00      	cmp	r3, #0
 800aa50:	d01e      	beq.n	800aa90 <xTaskCreateStatic+0xac>
 800aa52:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d01b      	beq.n	800aa90 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800aa58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800aa5a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800aa5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800aa60:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800aa62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa64:	2202      	movs	r2, #2
 800aa66:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800aa6a:	2300      	movs	r3, #0
 800aa6c:	9303      	str	r3, [sp, #12]
 800aa6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aa70:	9302      	str	r3, [sp, #8]
 800aa72:	f107 0314 	add.w	r3, r7, #20
 800aa76:	9301      	str	r3, [sp, #4]
 800aa78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800aa7a:	9300      	str	r3, [sp, #0]
 800aa7c:	683b      	ldr	r3, [r7, #0]
 800aa7e:	687a      	ldr	r2, [r7, #4]
 800aa80:	68b9      	ldr	r1, [r7, #8]
 800aa82:	68f8      	ldr	r0, [r7, #12]
 800aa84:	f000 f850 	bl	800ab28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aa88:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800aa8a:	f000 f8f3 	bl	800ac74 <prvAddNewTaskToReadyList>
 800aa8e:	e001      	b.n	800aa94 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800aa90:	2300      	movs	r3, #0
 800aa92:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800aa94:	697b      	ldr	r3, [r7, #20]
	}
 800aa96:	4618      	mov	r0, r3
 800aa98:	3728      	adds	r7, #40	; 0x28
 800aa9a:	46bd      	mov	sp, r7
 800aa9c:	bd80      	pop	{r7, pc}

0800aa9e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800aa9e:	b580      	push	{r7, lr}
 800aaa0:	b08c      	sub	sp, #48	; 0x30
 800aaa2:	af04      	add	r7, sp, #16
 800aaa4:	60f8      	str	r0, [r7, #12]
 800aaa6:	60b9      	str	r1, [r7, #8]
 800aaa8:	603b      	str	r3, [r7, #0]
 800aaaa:	4613      	mov	r3, r2
 800aaac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800aaae:	88fb      	ldrh	r3, [r7, #6]
 800aab0:	009b      	lsls	r3, r3, #2
 800aab2:	4618      	mov	r0, r3
 800aab4:	f001 fd58 	bl	800c568 <pvPortMalloc>
 800aab8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800aaba:	697b      	ldr	r3, [r7, #20]
 800aabc:	2b00      	cmp	r3, #0
 800aabe:	d00e      	beq.n	800aade <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800aac0:	20bc      	movs	r0, #188	; 0xbc
 800aac2:	f001 fd51 	bl	800c568 <pvPortMalloc>
 800aac6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800aac8:	69fb      	ldr	r3, [r7, #28]
 800aaca:	2b00      	cmp	r3, #0
 800aacc:	d003      	beq.n	800aad6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aace:	69fb      	ldr	r3, [r7, #28]
 800aad0:	697a      	ldr	r2, [r7, #20]
 800aad2:	631a      	str	r2, [r3, #48]	; 0x30
 800aad4:	e005      	b.n	800aae2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aad6:	6978      	ldr	r0, [r7, #20]
 800aad8:	f001 fe12 	bl	800c700 <vPortFree>
 800aadc:	e001      	b.n	800aae2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aade:	2300      	movs	r3, #0
 800aae0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aae2:	69fb      	ldr	r3, [r7, #28]
 800aae4:	2b00      	cmp	r3, #0
 800aae6:	d017      	beq.n	800ab18 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aae8:	69fb      	ldr	r3, [r7, #28]
 800aaea:	2200      	movs	r2, #0
 800aaec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aaf0:	88fa      	ldrh	r2, [r7, #6]
 800aaf2:	2300      	movs	r3, #0
 800aaf4:	9303      	str	r3, [sp, #12]
 800aaf6:	69fb      	ldr	r3, [r7, #28]
 800aaf8:	9302      	str	r3, [sp, #8]
 800aafa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800aafc:	9301      	str	r3, [sp, #4]
 800aafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab00:	9300      	str	r3, [sp, #0]
 800ab02:	683b      	ldr	r3, [r7, #0]
 800ab04:	68b9      	ldr	r1, [r7, #8]
 800ab06:	68f8      	ldr	r0, [r7, #12]
 800ab08:	f000 f80e 	bl	800ab28 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ab0c:	69f8      	ldr	r0, [r7, #28]
 800ab0e:	f000 f8b1 	bl	800ac74 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ab12:	2301      	movs	r3, #1
 800ab14:	61bb      	str	r3, [r7, #24]
 800ab16:	e002      	b.n	800ab1e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800ab18:	f04f 33ff 	mov.w	r3, #4294967295
 800ab1c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800ab1e:	69bb      	ldr	r3, [r7, #24]
	}
 800ab20:	4618      	mov	r0, r3
 800ab22:	3720      	adds	r7, #32
 800ab24:	46bd      	mov	sp, r7
 800ab26:	bd80      	pop	{r7, pc}

0800ab28 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800ab28:	b580      	push	{r7, lr}
 800ab2a:	b088      	sub	sp, #32
 800ab2c:	af00      	add	r7, sp, #0
 800ab2e:	60f8      	str	r0, [r7, #12]
 800ab30:	60b9      	str	r1, [r7, #8]
 800ab32:	607a      	str	r2, [r7, #4]
 800ab34:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ab36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab38:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	009b      	lsls	r3, r3, #2
 800ab3e:	461a      	mov	r2, r3
 800ab40:	21a5      	movs	r1, #165	; 0xa5
 800ab42:	f001 ff35 	bl	800c9b0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ab46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ab48:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800ab50:	3b01      	subs	r3, #1
 800ab52:	009b      	lsls	r3, r3, #2
 800ab54:	4413      	add	r3, r2
 800ab56:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ab58:	69bb      	ldr	r3, [r7, #24]
 800ab5a:	f023 0307 	bic.w	r3, r3, #7
 800ab5e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800ab60:	69bb      	ldr	r3, [r7, #24]
 800ab62:	f003 0307 	and.w	r3, r3, #7
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d00a      	beq.n	800ab80 <prvInitialiseNewTask+0x58>
	__asm volatile
 800ab6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab6e:	f383 8811 	msr	BASEPRI, r3
 800ab72:	f3bf 8f6f 	isb	sy
 800ab76:	f3bf 8f4f 	dsb	sy
 800ab7a:	617b      	str	r3, [r7, #20]
}
 800ab7c:	bf00      	nop
 800ab7e:	e7fe      	b.n	800ab7e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ab80:	68bb      	ldr	r3, [r7, #8]
 800ab82:	2b00      	cmp	r3, #0
 800ab84:	d01f      	beq.n	800abc6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ab86:	2300      	movs	r3, #0
 800ab88:	61fb      	str	r3, [r7, #28]
 800ab8a:	e012      	b.n	800abb2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ab8c:	68ba      	ldr	r2, [r7, #8]
 800ab8e:	69fb      	ldr	r3, [r7, #28]
 800ab90:	4413      	add	r3, r2
 800ab92:	7819      	ldrb	r1, [r3, #0]
 800ab94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ab96:	69fb      	ldr	r3, [r7, #28]
 800ab98:	4413      	add	r3, r2
 800ab9a:	3334      	adds	r3, #52	; 0x34
 800ab9c:	460a      	mov	r2, r1
 800ab9e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	69fb      	ldr	r3, [r7, #28]
 800aba4:	4413      	add	r3, r2
 800aba6:	781b      	ldrb	r3, [r3, #0]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d006      	beq.n	800abba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800abac:	69fb      	ldr	r3, [r7, #28]
 800abae:	3301      	adds	r3, #1
 800abb0:	61fb      	str	r3, [r7, #28]
 800abb2:	69fb      	ldr	r3, [r7, #28]
 800abb4:	2b0f      	cmp	r3, #15
 800abb6:	d9e9      	bls.n	800ab8c <prvInitialiseNewTask+0x64>
 800abb8:	e000      	b.n	800abbc <prvInitialiseNewTask+0x94>
			{
				break;
 800abba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800abbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abbe:	2200      	movs	r2, #0
 800abc0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800abc4:	e003      	b.n	800abce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800abc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abc8:	2200      	movs	r2, #0
 800abca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800abce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800abd0:	2b37      	cmp	r3, #55	; 0x37
 800abd2:	d901      	bls.n	800abd8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800abd4:	2337      	movs	r3, #55	; 0x37
 800abd6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800abd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abda:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abdc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800abde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800abe2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800abe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abe6:	2200      	movs	r2, #0
 800abe8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800abea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abec:	3304      	adds	r3, #4
 800abee:	4618      	mov	r0, r3
 800abf0:	f7fe fe0a 	bl	8009808 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800abf4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800abf6:	3318      	adds	r3, #24
 800abf8:	4618      	mov	r0, r3
 800abfa:	f7fe fe05 	bl	8009808 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800abfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac00:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac02:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ac04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ac06:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800ac0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac0c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800ac0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac10:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac12:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800ac14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac16:	2200      	movs	r2, #0
 800ac18:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800ac1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac1e:	2200      	movs	r2, #0
 800ac20:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800ac24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac26:	3354      	adds	r3, #84	; 0x54
 800ac28:	2260      	movs	r2, #96	; 0x60
 800ac2a:	2100      	movs	r1, #0
 800ac2c:	4618      	mov	r0, r3
 800ac2e:	f001 febf 	bl	800c9b0 <memset>
 800ac32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac34:	4a0c      	ldr	r2, [pc, #48]	; (800ac68 <prvInitialiseNewTask+0x140>)
 800ac36:	659a      	str	r2, [r3, #88]	; 0x58
 800ac38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac3a:	4a0c      	ldr	r2, [pc, #48]	; (800ac6c <prvInitialiseNewTask+0x144>)
 800ac3c:	65da      	str	r2, [r3, #92]	; 0x5c
 800ac3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac40:	4a0b      	ldr	r2, [pc, #44]	; (800ac70 <prvInitialiseNewTask+0x148>)
 800ac42:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800ac44:	683a      	ldr	r2, [r7, #0]
 800ac46:	68f9      	ldr	r1, [r7, #12]
 800ac48:	69b8      	ldr	r0, [r7, #24]
 800ac4a:	f001 fa3f 	bl	800c0cc <pxPortInitialiseStack>
 800ac4e:	4602      	mov	r2, r0
 800ac50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ac52:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800ac54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac56:	2b00      	cmp	r3, #0
 800ac58:	d002      	beq.n	800ac60 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800ac5a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ac5c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ac5e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac60:	bf00      	nop
 800ac62:	3720      	adds	r7, #32
 800ac64:	46bd      	mov	sp, r7
 800ac66:	bd80      	pop	{r7, pc}
 800ac68:	0800da84 	.word	0x0800da84
 800ac6c:	0800daa4 	.word	0x0800daa4
 800ac70:	0800da64 	.word	0x0800da64

0800ac74 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ac74:	b580      	push	{r7, lr}
 800ac76:	b082      	sub	sp, #8
 800ac78:	af00      	add	r7, sp, #0
 800ac7a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ac7c:	f001 fb52 	bl	800c324 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ac80:	4b2d      	ldr	r3, [pc, #180]	; (800ad38 <prvAddNewTaskToReadyList+0xc4>)
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	3301      	adds	r3, #1
 800ac86:	4a2c      	ldr	r2, [pc, #176]	; (800ad38 <prvAddNewTaskToReadyList+0xc4>)
 800ac88:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800ac8a:	4b2c      	ldr	r3, [pc, #176]	; (800ad3c <prvAddNewTaskToReadyList+0xc8>)
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	2b00      	cmp	r3, #0
 800ac90:	d109      	bne.n	800aca6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ac92:	4a2a      	ldr	r2, [pc, #168]	; (800ad3c <prvAddNewTaskToReadyList+0xc8>)
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ac98:	4b27      	ldr	r3, [pc, #156]	; (800ad38 <prvAddNewTaskToReadyList+0xc4>)
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	2b01      	cmp	r3, #1
 800ac9e:	d110      	bne.n	800acc2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800aca0:	f000 fc26 	bl	800b4f0 <prvInitialiseTaskLists>
 800aca4:	e00d      	b.n	800acc2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800aca6:	4b26      	ldr	r3, [pc, #152]	; (800ad40 <prvAddNewTaskToReadyList+0xcc>)
 800aca8:	681b      	ldr	r3, [r3, #0]
 800acaa:	2b00      	cmp	r3, #0
 800acac:	d109      	bne.n	800acc2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800acae:	4b23      	ldr	r3, [pc, #140]	; (800ad3c <prvAddNewTaskToReadyList+0xc8>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb8:	429a      	cmp	r2, r3
 800acba:	d802      	bhi.n	800acc2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800acbc:	4a1f      	ldr	r2, [pc, #124]	; (800ad3c <prvAddNewTaskToReadyList+0xc8>)
 800acbe:	687b      	ldr	r3, [r7, #4]
 800acc0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800acc2:	4b20      	ldr	r3, [pc, #128]	; (800ad44 <prvAddNewTaskToReadyList+0xd0>)
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	3301      	adds	r3, #1
 800acc8:	4a1e      	ldr	r2, [pc, #120]	; (800ad44 <prvAddNewTaskToReadyList+0xd0>)
 800acca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800accc:	4b1d      	ldr	r3, [pc, #116]	; (800ad44 <prvAddNewTaskToReadyList+0xd0>)
 800acce:	681a      	ldr	r2, [r3, #0]
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acd8:	4b1b      	ldr	r3, [pc, #108]	; (800ad48 <prvAddNewTaskToReadyList+0xd4>)
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	429a      	cmp	r2, r3
 800acde:	d903      	bls.n	800ace8 <prvAddNewTaskToReadyList+0x74>
 800ace0:	687b      	ldr	r3, [r7, #4]
 800ace2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ace4:	4a18      	ldr	r2, [pc, #96]	; (800ad48 <prvAddNewTaskToReadyList+0xd4>)
 800ace6:	6013      	str	r3, [r2, #0]
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acec:	4613      	mov	r3, r2
 800acee:	009b      	lsls	r3, r3, #2
 800acf0:	4413      	add	r3, r2
 800acf2:	009b      	lsls	r3, r3, #2
 800acf4:	4a15      	ldr	r2, [pc, #84]	; (800ad4c <prvAddNewTaskToReadyList+0xd8>)
 800acf6:	441a      	add	r2, r3
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	3304      	adds	r3, #4
 800acfc:	4619      	mov	r1, r3
 800acfe:	4610      	mov	r0, r2
 800ad00:	f7fe fd8f 	bl	8009822 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800ad04:	f001 fb3e 	bl	800c384 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800ad08:	4b0d      	ldr	r3, [pc, #52]	; (800ad40 <prvAddNewTaskToReadyList+0xcc>)
 800ad0a:	681b      	ldr	r3, [r3, #0]
 800ad0c:	2b00      	cmp	r3, #0
 800ad0e:	d00e      	beq.n	800ad2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ad10:	4b0a      	ldr	r3, [pc, #40]	; (800ad3c <prvAddNewTaskToReadyList+0xc8>)
 800ad12:	681b      	ldr	r3, [r3, #0]
 800ad14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ad1a:	429a      	cmp	r2, r3
 800ad1c:	d207      	bcs.n	800ad2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800ad1e:	4b0c      	ldr	r3, [pc, #48]	; (800ad50 <prvAddNewTaskToReadyList+0xdc>)
 800ad20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ad24:	601a      	str	r2, [r3, #0]
 800ad26:	f3bf 8f4f 	dsb	sy
 800ad2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ad2e:	bf00      	nop
 800ad30:	3708      	adds	r7, #8
 800ad32:	46bd      	mov	sp, r7
 800ad34:	bd80      	pop	{r7, pc}
 800ad36:	bf00      	nop
 800ad38:	20001024 	.word	0x20001024
 800ad3c:	20000b50 	.word	0x20000b50
 800ad40:	20001030 	.word	0x20001030
 800ad44:	20001040 	.word	0x20001040
 800ad48:	2000102c 	.word	0x2000102c
 800ad4c:	20000b54 	.word	0x20000b54
 800ad50:	e000ed04 	.word	0xe000ed04

0800ad54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ad54:	b580      	push	{r7, lr}
 800ad56:	b084      	sub	sp, #16
 800ad58:	af00      	add	r7, sp, #0
 800ad5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ad5c:	2300      	movs	r3, #0
 800ad5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d017      	beq.n	800ad96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ad66:	4b13      	ldr	r3, [pc, #76]	; (800adb4 <vTaskDelay+0x60>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	2b00      	cmp	r3, #0
 800ad6c:	d00a      	beq.n	800ad84 <vTaskDelay+0x30>
	__asm volatile
 800ad6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad72:	f383 8811 	msr	BASEPRI, r3
 800ad76:	f3bf 8f6f 	isb	sy
 800ad7a:	f3bf 8f4f 	dsb	sy
 800ad7e:	60bb      	str	r3, [r7, #8]
}
 800ad80:	bf00      	nop
 800ad82:	e7fe      	b.n	800ad82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ad84:	f000 f88a 	bl	800ae9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ad88:	2100      	movs	r1, #0
 800ad8a:	6878      	ldr	r0, [r7, #4]
 800ad8c:	f000 fdfc 	bl	800b988 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ad90:	f000 f892 	bl	800aeb8 <xTaskResumeAll>
 800ad94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ad96:	68fb      	ldr	r3, [r7, #12]
 800ad98:	2b00      	cmp	r3, #0
 800ad9a:	d107      	bne.n	800adac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800ad9c:	4b06      	ldr	r3, [pc, #24]	; (800adb8 <vTaskDelay+0x64>)
 800ad9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ada2:	601a      	str	r2, [r3, #0]
 800ada4:	f3bf 8f4f 	dsb	sy
 800ada8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800adac:	bf00      	nop
 800adae:	3710      	adds	r7, #16
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}
 800adb4:	2000104c 	.word	0x2000104c
 800adb8:	e000ed04 	.word	0xe000ed04

0800adbc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b08a      	sub	sp, #40	; 0x28
 800adc0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800adc2:	2300      	movs	r3, #0
 800adc4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800adc6:	2300      	movs	r3, #0
 800adc8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800adca:	463a      	mov	r2, r7
 800adcc:	1d39      	adds	r1, r7, #4
 800adce:	f107 0308 	add.w	r3, r7, #8
 800add2:	4618      	mov	r0, r3
 800add4:	f7fe fcc4 	bl	8009760 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800add8:	6839      	ldr	r1, [r7, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	68ba      	ldr	r2, [r7, #8]
 800adde:	9202      	str	r2, [sp, #8]
 800ade0:	9301      	str	r3, [sp, #4]
 800ade2:	2300      	movs	r3, #0
 800ade4:	9300      	str	r3, [sp, #0]
 800ade6:	2300      	movs	r3, #0
 800ade8:	460a      	mov	r2, r1
 800adea:	4924      	ldr	r1, [pc, #144]	; (800ae7c <vTaskStartScheduler+0xc0>)
 800adec:	4824      	ldr	r0, [pc, #144]	; (800ae80 <vTaskStartScheduler+0xc4>)
 800adee:	f7ff fdf9 	bl	800a9e4 <xTaskCreateStatic>
 800adf2:	4603      	mov	r3, r0
 800adf4:	4a23      	ldr	r2, [pc, #140]	; (800ae84 <vTaskStartScheduler+0xc8>)
 800adf6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800adf8:	4b22      	ldr	r3, [pc, #136]	; (800ae84 <vTaskStartScheduler+0xc8>)
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	2b00      	cmp	r3, #0
 800adfe:	d002      	beq.n	800ae06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ae00:	2301      	movs	r3, #1
 800ae02:	617b      	str	r3, [r7, #20]
 800ae04:	e001      	b.n	800ae0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ae06:	2300      	movs	r3, #0
 800ae08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ae0a:	697b      	ldr	r3, [r7, #20]
 800ae0c:	2b01      	cmp	r3, #1
 800ae0e:	d102      	bne.n	800ae16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ae10:	f000 fe0e 	bl	800ba30 <xTimerCreateTimerTask>
 800ae14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ae16:	697b      	ldr	r3, [r7, #20]
 800ae18:	2b01      	cmp	r3, #1
 800ae1a:	d11b      	bne.n	800ae54 <vTaskStartScheduler+0x98>
	__asm volatile
 800ae1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae20:	f383 8811 	msr	BASEPRI, r3
 800ae24:	f3bf 8f6f 	isb	sy
 800ae28:	f3bf 8f4f 	dsb	sy
 800ae2c:	613b      	str	r3, [r7, #16]
}
 800ae2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ae30:	4b15      	ldr	r3, [pc, #84]	; (800ae88 <vTaskStartScheduler+0xcc>)
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	3354      	adds	r3, #84	; 0x54
 800ae36:	4a15      	ldr	r2, [pc, #84]	; (800ae8c <vTaskStartScheduler+0xd0>)
 800ae38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ae3a:	4b15      	ldr	r3, [pc, #84]	; (800ae90 <vTaskStartScheduler+0xd4>)
 800ae3c:	f04f 32ff 	mov.w	r2, #4294967295
 800ae40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ae42:	4b14      	ldr	r3, [pc, #80]	; (800ae94 <vTaskStartScheduler+0xd8>)
 800ae44:	2201      	movs	r2, #1
 800ae46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ae48:	4b13      	ldr	r3, [pc, #76]	; (800ae98 <vTaskStartScheduler+0xdc>)
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ae4e:	f001 f9c7 	bl	800c1e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ae52:	e00e      	b.n	800ae72 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ae54:	697b      	ldr	r3, [r7, #20]
 800ae56:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ae5a:	d10a      	bne.n	800ae72 <vTaskStartScheduler+0xb6>
	__asm volatile
 800ae5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae60:	f383 8811 	msr	BASEPRI, r3
 800ae64:	f3bf 8f6f 	isb	sy
 800ae68:	f3bf 8f4f 	dsb	sy
 800ae6c:	60fb      	str	r3, [r7, #12]
}
 800ae6e:	bf00      	nop
 800ae70:	e7fe      	b.n	800ae70 <vTaskStartScheduler+0xb4>
}
 800ae72:	bf00      	nop
 800ae74:	3718      	adds	r7, #24
 800ae76:	46bd      	mov	sp, r7
 800ae78:	bd80      	pop	{r7, pc}
 800ae7a:	bf00      	nop
 800ae7c:	0800d414 	.word	0x0800d414
 800ae80:	0800b4c1 	.word	0x0800b4c1
 800ae84:	20001048 	.word	0x20001048
 800ae88:	20000b50 	.word	0x20000b50
 800ae8c:	20000044 	.word	0x20000044
 800ae90:	20001044 	.word	0x20001044
 800ae94:	20001030 	.word	0x20001030
 800ae98:	20001028 	.word	0x20001028

0800ae9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800ae9c:	b480      	push	{r7}
 800ae9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800aea0:	4b04      	ldr	r3, [pc, #16]	; (800aeb4 <vTaskSuspendAll+0x18>)
 800aea2:	681b      	ldr	r3, [r3, #0]
 800aea4:	3301      	adds	r3, #1
 800aea6:	4a03      	ldr	r2, [pc, #12]	; (800aeb4 <vTaskSuspendAll+0x18>)
 800aea8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800aeaa:	bf00      	nop
 800aeac:	46bd      	mov	sp, r7
 800aeae:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aeb2:	4770      	bx	lr
 800aeb4:	2000104c 	.word	0x2000104c

0800aeb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800aeb8:	b580      	push	{r7, lr}
 800aeba:	b084      	sub	sp, #16
 800aebc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800aebe:	2300      	movs	r3, #0
 800aec0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800aec2:	2300      	movs	r3, #0
 800aec4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800aec6:	4b42      	ldr	r3, [pc, #264]	; (800afd0 <xTaskResumeAll+0x118>)
 800aec8:	681b      	ldr	r3, [r3, #0]
 800aeca:	2b00      	cmp	r3, #0
 800aecc:	d10a      	bne.n	800aee4 <xTaskResumeAll+0x2c>
	__asm volatile
 800aece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aed2:	f383 8811 	msr	BASEPRI, r3
 800aed6:	f3bf 8f6f 	isb	sy
 800aeda:	f3bf 8f4f 	dsb	sy
 800aede:	603b      	str	r3, [r7, #0]
}
 800aee0:	bf00      	nop
 800aee2:	e7fe      	b.n	800aee2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800aee4:	f001 fa1e 	bl	800c324 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800aee8:	4b39      	ldr	r3, [pc, #228]	; (800afd0 <xTaskResumeAll+0x118>)
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	3b01      	subs	r3, #1
 800aeee:	4a38      	ldr	r2, [pc, #224]	; (800afd0 <xTaskResumeAll+0x118>)
 800aef0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800aef2:	4b37      	ldr	r3, [pc, #220]	; (800afd0 <xTaskResumeAll+0x118>)
 800aef4:	681b      	ldr	r3, [r3, #0]
 800aef6:	2b00      	cmp	r3, #0
 800aef8:	d162      	bne.n	800afc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800aefa:	4b36      	ldr	r3, [pc, #216]	; (800afd4 <xTaskResumeAll+0x11c>)
 800aefc:	681b      	ldr	r3, [r3, #0]
 800aefe:	2b00      	cmp	r3, #0
 800af00:	d05e      	beq.n	800afc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af02:	e02f      	b.n	800af64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af04:	4b34      	ldr	r3, [pc, #208]	; (800afd8 <xTaskResumeAll+0x120>)
 800af06:	68db      	ldr	r3, [r3, #12]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800af0c:	68fb      	ldr	r3, [r7, #12]
 800af0e:	3318      	adds	r3, #24
 800af10:	4618      	mov	r0, r3
 800af12:	f7fe fce3 	bl	80098dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800af16:	68fb      	ldr	r3, [r7, #12]
 800af18:	3304      	adds	r3, #4
 800af1a:	4618      	mov	r0, r3
 800af1c:	f7fe fcde 	bl	80098dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800af20:	68fb      	ldr	r3, [r7, #12]
 800af22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af24:	4b2d      	ldr	r3, [pc, #180]	; (800afdc <xTaskResumeAll+0x124>)
 800af26:	681b      	ldr	r3, [r3, #0]
 800af28:	429a      	cmp	r2, r3
 800af2a:	d903      	bls.n	800af34 <xTaskResumeAll+0x7c>
 800af2c:	68fb      	ldr	r3, [r7, #12]
 800af2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af30:	4a2a      	ldr	r2, [pc, #168]	; (800afdc <xTaskResumeAll+0x124>)
 800af32:	6013      	str	r3, [r2, #0]
 800af34:	68fb      	ldr	r3, [r7, #12]
 800af36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af38:	4613      	mov	r3, r2
 800af3a:	009b      	lsls	r3, r3, #2
 800af3c:	4413      	add	r3, r2
 800af3e:	009b      	lsls	r3, r3, #2
 800af40:	4a27      	ldr	r2, [pc, #156]	; (800afe0 <xTaskResumeAll+0x128>)
 800af42:	441a      	add	r2, r3
 800af44:	68fb      	ldr	r3, [r7, #12]
 800af46:	3304      	adds	r3, #4
 800af48:	4619      	mov	r1, r3
 800af4a:	4610      	mov	r0, r2
 800af4c:	f7fe fc69 	bl	8009822 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800af50:	68fb      	ldr	r3, [r7, #12]
 800af52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800af54:	4b23      	ldr	r3, [pc, #140]	; (800afe4 <xTaskResumeAll+0x12c>)
 800af56:	681b      	ldr	r3, [r3, #0]
 800af58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800af5a:	429a      	cmp	r2, r3
 800af5c:	d302      	bcc.n	800af64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800af5e:	4b22      	ldr	r3, [pc, #136]	; (800afe8 <xTaskResumeAll+0x130>)
 800af60:	2201      	movs	r2, #1
 800af62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800af64:	4b1c      	ldr	r3, [pc, #112]	; (800afd8 <xTaskResumeAll+0x120>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b00      	cmp	r3, #0
 800af6a:	d1cb      	bne.n	800af04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800af6c:	68fb      	ldr	r3, [r7, #12]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	d001      	beq.n	800af76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800af72:	f000 fb5f 	bl	800b634 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800af76:	4b1d      	ldr	r3, [pc, #116]	; (800afec <xTaskResumeAll+0x134>)
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2b00      	cmp	r3, #0
 800af80:	d010      	beq.n	800afa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800af82:	f000 f847 	bl	800b014 <xTaskIncrementTick>
 800af86:	4603      	mov	r3, r0
 800af88:	2b00      	cmp	r3, #0
 800af8a:	d002      	beq.n	800af92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800af8c:	4b16      	ldr	r3, [pc, #88]	; (800afe8 <xTaskResumeAll+0x130>)
 800af8e:	2201      	movs	r2, #1
 800af90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800af92:	687b      	ldr	r3, [r7, #4]
 800af94:	3b01      	subs	r3, #1
 800af96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	d1f1      	bne.n	800af82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800af9e:	4b13      	ldr	r3, [pc, #76]	; (800afec <xTaskResumeAll+0x134>)
 800afa0:	2200      	movs	r2, #0
 800afa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800afa4:	4b10      	ldr	r3, [pc, #64]	; (800afe8 <xTaskResumeAll+0x130>)
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	2b00      	cmp	r3, #0
 800afaa:	d009      	beq.n	800afc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800afac:	2301      	movs	r3, #1
 800afae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800afb0:	4b0f      	ldr	r3, [pc, #60]	; (800aff0 <xTaskResumeAll+0x138>)
 800afb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800afb6:	601a      	str	r2, [r3, #0]
 800afb8:	f3bf 8f4f 	dsb	sy
 800afbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800afc0:	f001 f9e0 	bl	800c384 <vPortExitCritical>

	return xAlreadyYielded;
 800afc4:	68bb      	ldr	r3, [r7, #8]
}
 800afc6:	4618      	mov	r0, r3
 800afc8:	3710      	adds	r7, #16
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	2000104c 	.word	0x2000104c
 800afd4:	20001024 	.word	0x20001024
 800afd8:	20000fe4 	.word	0x20000fe4
 800afdc:	2000102c 	.word	0x2000102c
 800afe0:	20000b54 	.word	0x20000b54
 800afe4:	20000b50 	.word	0x20000b50
 800afe8:	20001038 	.word	0x20001038
 800afec:	20001034 	.word	0x20001034
 800aff0:	e000ed04 	.word	0xe000ed04

0800aff4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800aff4:	b480      	push	{r7}
 800aff6:	b083      	sub	sp, #12
 800aff8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800affa:	4b05      	ldr	r3, [pc, #20]	; (800b010 <xTaskGetTickCount+0x1c>)
 800affc:	681b      	ldr	r3, [r3, #0]
 800affe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b000:	687b      	ldr	r3, [r7, #4]
}
 800b002:	4618      	mov	r0, r3
 800b004:	370c      	adds	r7, #12
 800b006:	46bd      	mov	sp, r7
 800b008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b00c:	4770      	bx	lr
 800b00e:	bf00      	nop
 800b010:	20001028 	.word	0x20001028

0800b014 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b014:	b580      	push	{r7, lr}
 800b016:	b086      	sub	sp, #24
 800b018:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b01a:	2300      	movs	r3, #0
 800b01c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b01e:	4b4f      	ldr	r3, [pc, #316]	; (800b15c <xTaskIncrementTick+0x148>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	2b00      	cmp	r3, #0
 800b024:	f040 808f 	bne.w	800b146 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b028:	4b4d      	ldr	r3, [pc, #308]	; (800b160 <xTaskIncrementTick+0x14c>)
 800b02a:	681b      	ldr	r3, [r3, #0]
 800b02c:	3301      	adds	r3, #1
 800b02e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b030:	4a4b      	ldr	r2, [pc, #300]	; (800b160 <xTaskIncrementTick+0x14c>)
 800b032:	693b      	ldr	r3, [r7, #16]
 800b034:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b036:	693b      	ldr	r3, [r7, #16]
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d120      	bne.n	800b07e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800b03c:	4b49      	ldr	r3, [pc, #292]	; (800b164 <xTaskIncrementTick+0x150>)
 800b03e:	681b      	ldr	r3, [r3, #0]
 800b040:	681b      	ldr	r3, [r3, #0]
 800b042:	2b00      	cmp	r3, #0
 800b044:	d00a      	beq.n	800b05c <xTaskIncrementTick+0x48>
	__asm volatile
 800b046:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b04a:	f383 8811 	msr	BASEPRI, r3
 800b04e:	f3bf 8f6f 	isb	sy
 800b052:	f3bf 8f4f 	dsb	sy
 800b056:	603b      	str	r3, [r7, #0]
}
 800b058:	bf00      	nop
 800b05a:	e7fe      	b.n	800b05a <xTaskIncrementTick+0x46>
 800b05c:	4b41      	ldr	r3, [pc, #260]	; (800b164 <xTaskIncrementTick+0x150>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	60fb      	str	r3, [r7, #12]
 800b062:	4b41      	ldr	r3, [pc, #260]	; (800b168 <xTaskIncrementTick+0x154>)
 800b064:	681b      	ldr	r3, [r3, #0]
 800b066:	4a3f      	ldr	r2, [pc, #252]	; (800b164 <xTaskIncrementTick+0x150>)
 800b068:	6013      	str	r3, [r2, #0]
 800b06a:	4a3f      	ldr	r2, [pc, #252]	; (800b168 <xTaskIncrementTick+0x154>)
 800b06c:	68fb      	ldr	r3, [r7, #12]
 800b06e:	6013      	str	r3, [r2, #0]
 800b070:	4b3e      	ldr	r3, [pc, #248]	; (800b16c <xTaskIncrementTick+0x158>)
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	3301      	adds	r3, #1
 800b076:	4a3d      	ldr	r2, [pc, #244]	; (800b16c <xTaskIncrementTick+0x158>)
 800b078:	6013      	str	r3, [r2, #0]
 800b07a:	f000 fadb 	bl	800b634 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b07e:	4b3c      	ldr	r3, [pc, #240]	; (800b170 <xTaskIncrementTick+0x15c>)
 800b080:	681b      	ldr	r3, [r3, #0]
 800b082:	693a      	ldr	r2, [r7, #16]
 800b084:	429a      	cmp	r2, r3
 800b086:	d349      	bcc.n	800b11c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b088:	4b36      	ldr	r3, [pc, #216]	; (800b164 <xTaskIncrementTick+0x150>)
 800b08a:	681b      	ldr	r3, [r3, #0]
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d104      	bne.n	800b09c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b092:	4b37      	ldr	r3, [pc, #220]	; (800b170 <xTaskIncrementTick+0x15c>)
 800b094:	f04f 32ff 	mov.w	r2, #4294967295
 800b098:	601a      	str	r2, [r3, #0]
					break;
 800b09a:	e03f      	b.n	800b11c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b09c:	4b31      	ldr	r3, [pc, #196]	; (800b164 <xTaskIncrementTick+0x150>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	68db      	ldr	r3, [r3, #12]
 800b0a2:	68db      	ldr	r3, [r3, #12]
 800b0a4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b0a6:	68bb      	ldr	r3, [r7, #8]
 800b0a8:	685b      	ldr	r3, [r3, #4]
 800b0aa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b0ac:	693a      	ldr	r2, [r7, #16]
 800b0ae:	687b      	ldr	r3, [r7, #4]
 800b0b0:	429a      	cmp	r2, r3
 800b0b2:	d203      	bcs.n	800b0bc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b0b4:	4a2e      	ldr	r2, [pc, #184]	; (800b170 <xTaskIncrementTick+0x15c>)
 800b0b6:	687b      	ldr	r3, [r7, #4]
 800b0b8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b0ba:	e02f      	b.n	800b11c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b0bc:	68bb      	ldr	r3, [r7, #8]
 800b0be:	3304      	adds	r3, #4
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	f7fe fc0b 	bl	80098dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b0c6:	68bb      	ldr	r3, [r7, #8]
 800b0c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0ca:	2b00      	cmp	r3, #0
 800b0cc:	d004      	beq.n	800b0d8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b0ce:	68bb      	ldr	r3, [r7, #8]
 800b0d0:	3318      	adds	r3, #24
 800b0d2:	4618      	mov	r0, r3
 800b0d4:	f7fe fc02 	bl	80098dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b0d8:	68bb      	ldr	r3, [r7, #8]
 800b0da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0dc:	4b25      	ldr	r3, [pc, #148]	; (800b174 <xTaskIncrementTick+0x160>)
 800b0de:	681b      	ldr	r3, [r3, #0]
 800b0e0:	429a      	cmp	r2, r3
 800b0e2:	d903      	bls.n	800b0ec <xTaskIncrementTick+0xd8>
 800b0e4:	68bb      	ldr	r3, [r7, #8]
 800b0e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0e8:	4a22      	ldr	r2, [pc, #136]	; (800b174 <xTaskIncrementTick+0x160>)
 800b0ea:	6013      	str	r3, [r2, #0]
 800b0ec:	68bb      	ldr	r3, [r7, #8]
 800b0ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0f0:	4613      	mov	r3, r2
 800b0f2:	009b      	lsls	r3, r3, #2
 800b0f4:	4413      	add	r3, r2
 800b0f6:	009b      	lsls	r3, r3, #2
 800b0f8:	4a1f      	ldr	r2, [pc, #124]	; (800b178 <xTaskIncrementTick+0x164>)
 800b0fa:	441a      	add	r2, r3
 800b0fc:	68bb      	ldr	r3, [r7, #8]
 800b0fe:	3304      	adds	r3, #4
 800b100:	4619      	mov	r1, r3
 800b102:	4610      	mov	r0, r2
 800b104:	f7fe fb8d 	bl	8009822 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b108:	68bb      	ldr	r3, [r7, #8]
 800b10a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b10c:	4b1b      	ldr	r3, [pc, #108]	; (800b17c <xTaskIncrementTick+0x168>)
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b112:	429a      	cmp	r2, r3
 800b114:	d3b8      	bcc.n	800b088 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800b116:	2301      	movs	r3, #1
 800b118:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b11a:	e7b5      	b.n	800b088 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b11c:	4b17      	ldr	r3, [pc, #92]	; (800b17c <xTaskIncrementTick+0x168>)
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b122:	4915      	ldr	r1, [pc, #84]	; (800b178 <xTaskIncrementTick+0x164>)
 800b124:	4613      	mov	r3, r2
 800b126:	009b      	lsls	r3, r3, #2
 800b128:	4413      	add	r3, r2
 800b12a:	009b      	lsls	r3, r3, #2
 800b12c:	440b      	add	r3, r1
 800b12e:	681b      	ldr	r3, [r3, #0]
 800b130:	2b01      	cmp	r3, #1
 800b132:	d901      	bls.n	800b138 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800b134:	2301      	movs	r3, #1
 800b136:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b138:	4b11      	ldr	r3, [pc, #68]	; (800b180 <xTaskIncrementTick+0x16c>)
 800b13a:	681b      	ldr	r3, [r3, #0]
 800b13c:	2b00      	cmp	r3, #0
 800b13e:	d007      	beq.n	800b150 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800b140:	2301      	movs	r3, #1
 800b142:	617b      	str	r3, [r7, #20]
 800b144:	e004      	b.n	800b150 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b146:	4b0f      	ldr	r3, [pc, #60]	; (800b184 <xTaskIncrementTick+0x170>)
 800b148:	681b      	ldr	r3, [r3, #0]
 800b14a:	3301      	adds	r3, #1
 800b14c:	4a0d      	ldr	r2, [pc, #52]	; (800b184 <xTaskIncrementTick+0x170>)
 800b14e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b150:	697b      	ldr	r3, [r7, #20]
}
 800b152:	4618      	mov	r0, r3
 800b154:	3718      	adds	r7, #24
 800b156:	46bd      	mov	sp, r7
 800b158:	bd80      	pop	{r7, pc}
 800b15a:	bf00      	nop
 800b15c:	2000104c 	.word	0x2000104c
 800b160:	20001028 	.word	0x20001028
 800b164:	20000fdc 	.word	0x20000fdc
 800b168:	20000fe0 	.word	0x20000fe0
 800b16c:	2000103c 	.word	0x2000103c
 800b170:	20001044 	.word	0x20001044
 800b174:	2000102c 	.word	0x2000102c
 800b178:	20000b54 	.word	0x20000b54
 800b17c:	20000b50 	.word	0x20000b50
 800b180:	20001038 	.word	0x20001038
 800b184:	20001034 	.word	0x20001034

0800b188 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b188:	b480      	push	{r7}
 800b18a:	b085      	sub	sp, #20
 800b18c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b18e:	4b2a      	ldr	r3, [pc, #168]	; (800b238 <vTaskSwitchContext+0xb0>)
 800b190:	681b      	ldr	r3, [r3, #0]
 800b192:	2b00      	cmp	r3, #0
 800b194:	d003      	beq.n	800b19e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b196:	4b29      	ldr	r3, [pc, #164]	; (800b23c <vTaskSwitchContext+0xb4>)
 800b198:	2201      	movs	r2, #1
 800b19a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b19c:	e046      	b.n	800b22c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800b19e:	4b27      	ldr	r3, [pc, #156]	; (800b23c <vTaskSwitchContext+0xb4>)
 800b1a0:	2200      	movs	r2, #0
 800b1a2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1a4:	4b26      	ldr	r3, [pc, #152]	; (800b240 <vTaskSwitchContext+0xb8>)
 800b1a6:	681b      	ldr	r3, [r3, #0]
 800b1a8:	60fb      	str	r3, [r7, #12]
 800b1aa:	e010      	b.n	800b1ce <vTaskSwitchContext+0x46>
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	2b00      	cmp	r3, #0
 800b1b0:	d10a      	bne.n	800b1c8 <vTaskSwitchContext+0x40>
	__asm volatile
 800b1b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1b6:	f383 8811 	msr	BASEPRI, r3
 800b1ba:	f3bf 8f6f 	isb	sy
 800b1be:	f3bf 8f4f 	dsb	sy
 800b1c2:	607b      	str	r3, [r7, #4]
}
 800b1c4:	bf00      	nop
 800b1c6:	e7fe      	b.n	800b1c6 <vTaskSwitchContext+0x3e>
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	3b01      	subs	r3, #1
 800b1cc:	60fb      	str	r3, [r7, #12]
 800b1ce:	491d      	ldr	r1, [pc, #116]	; (800b244 <vTaskSwitchContext+0xbc>)
 800b1d0:	68fa      	ldr	r2, [r7, #12]
 800b1d2:	4613      	mov	r3, r2
 800b1d4:	009b      	lsls	r3, r3, #2
 800b1d6:	4413      	add	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	440b      	add	r3, r1
 800b1dc:	681b      	ldr	r3, [r3, #0]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d0e4      	beq.n	800b1ac <vTaskSwitchContext+0x24>
 800b1e2:	68fa      	ldr	r2, [r7, #12]
 800b1e4:	4613      	mov	r3, r2
 800b1e6:	009b      	lsls	r3, r3, #2
 800b1e8:	4413      	add	r3, r2
 800b1ea:	009b      	lsls	r3, r3, #2
 800b1ec:	4a15      	ldr	r2, [pc, #84]	; (800b244 <vTaskSwitchContext+0xbc>)
 800b1ee:	4413      	add	r3, r2
 800b1f0:	60bb      	str	r3, [r7, #8]
 800b1f2:	68bb      	ldr	r3, [r7, #8]
 800b1f4:	685b      	ldr	r3, [r3, #4]
 800b1f6:	685a      	ldr	r2, [r3, #4]
 800b1f8:	68bb      	ldr	r3, [r7, #8]
 800b1fa:	605a      	str	r2, [r3, #4]
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	685a      	ldr	r2, [r3, #4]
 800b200:	68bb      	ldr	r3, [r7, #8]
 800b202:	3308      	adds	r3, #8
 800b204:	429a      	cmp	r2, r3
 800b206:	d104      	bne.n	800b212 <vTaskSwitchContext+0x8a>
 800b208:	68bb      	ldr	r3, [r7, #8]
 800b20a:	685b      	ldr	r3, [r3, #4]
 800b20c:	685a      	ldr	r2, [r3, #4]
 800b20e:	68bb      	ldr	r3, [r7, #8]
 800b210:	605a      	str	r2, [r3, #4]
 800b212:	68bb      	ldr	r3, [r7, #8]
 800b214:	685b      	ldr	r3, [r3, #4]
 800b216:	68db      	ldr	r3, [r3, #12]
 800b218:	4a0b      	ldr	r2, [pc, #44]	; (800b248 <vTaskSwitchContext+0xc0>)
 800b21a:	6013      	str	r3, [r2, #0]
 800b21c:	4a08      	ldr	r2, [pc, #32]	; (800b240 <vTaskSwitchContext+0xb8>)
 800b21e:	68fb      	ldr	r3, [r7, #12]
 800b220:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b222:	4b09      	ldr	r3, [pc, #36]	; (800b248 <vTaskSwitchContext+0xc0>)
 800b224:	681b      	ldr	r3, [r3, #0]
 800b226:	3354      	adds	r3, #84	; 0x54
 800b228:	4a08      	ldr	r2, [pc, #32]	; (800b24c <vTaskSwitchContext+0xc4>)
 800b22a:	6013      	str	r3, [r2, #0]
}
 800b22c:	bf00      	nop
 800b22e:	3714      	adds	r7, #20
 800b230:	46bd      	mov	sp, r7
 800b232:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b236:	4770      	bx	lr
 800b238:	2000104c 	.word	0x2000104c
 800b23c:	20001038 	.word	0x20001038
 800b240:	2000102c 	.word	0x2000102c
 800b244:	20000b54 	.word	0x20000b54
 800b248:	20000b50 	.word	0x20000b50
 800b24c:	20000044 	.word	0x20000044

0800b250 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b250:	b580      	push	{r7, lr}
 800b252:	b084      	sub	sp, #16
 800b254:	af00      	add	r7, sp, #0
 800b256:	6078      	str	r0, [r7, #4]
 800b258:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b25a:	687b      	ldr	r3, [r7, #4]
 800b25c:	2b00      	cmp	r3, #0
 800b25e:	d10a      	bne.n	800b276 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800b260:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b264:	f383 8811 	msr	BASEPRI, r3
 800b268:	f3bf 8f6f 	isb	sy
 800b26c:	f3bf 8f4f 	dsb	sy
 800b270:	60fb      	str	r3, [r7, #12]
}
 800b272:	bf00      	nop
 800b274:	e7fe      	b.n	800b274 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b276:	4b07      	ldr	r3, [pc, #28]	; (800b294 <vTaskPlaceOnEventList+0x44>)
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	3318      	adds	r3, #24
 800b27c:	4619      	mov	r1, r3
 800b27e:	6878      	ldr	r0, [r7, #4]
 800b280:	f7fe faf3 	bl	800986a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b284:	2101      	movs	r1, #1
 800b286:	6838      	ldr	r0, [r7, #0]
 800b288:	f000 fb7e 	bl	800b988 <prvAddCurrentTaskToDelayedList>
}
 800b28c:	bf00      	nop
 800b28e:	3710      	adds	r7, #16
 800b290:	46bd      	mov	sp, r7
 800b292:	bd80      	pop	{r7, pc}
 800b294:	20000b50 	.word	0x20000b50

0800b298 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b086      	sub	sp, #24
 800b29c:	af00      	add	r7, sp, #0
 800b29e:	60f8      	str	r0, [r7, #12]
 800b2a0:	60b9      	str	r1, [r7, #8]
 800b2a2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b2a4:	68fb      	ldr	r3, [r7, #12]
 800b2a6:	2b00      	cmp	r3, #0
 800b2a8:	d10a      	bne.n	800b2c0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800b2aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b2ae:	f383 8811 	msr	BASEPRI, r3
 800b2b2:	f3bf 8f6f 	isb	sy
 800b2b6:	f3bf 8f4f 	dsb	sy
 800b2ba:	617b      	str	r3, [r7, #20]
}
 800b2bc:	bf00      	nop
 800b2be:	e7fe      	b.n	800b2be <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b2c0:	4b0a      	ldr	r3, [pc, #40]	; (800b2ec <vTaskPlaceOnEventListRestricted+0x54>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	3318      	adds	r3, #24
 800b2c6:	4619      	mov	r1, r3
 800b2c8:	68f8      	ldr	r0, [r7, #12]
 800b2ca:	f7fe faaa 	bl	8009822 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	d002      	beq.n	800b2da <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800b2d4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2d8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b2da:	6879      	ldr	r1, [r7, #4]
 800b2dc:	68b8      	ldr	r0, [r7, #8]
 800b2de:	f000 fb53 	bl	800b988 <prvAddCurrentTaskToDelayedList>
	}
 800b2e2:	bf00      	nop
 800b2e4:	3718      	adds	r7, #24
 800b2e6:	46bd      	mov	sp, r7
 800b2e8:	bd80      	pop	{r7, pc}
 800b2ea:	bf00      	nop
 800b2ec:	20000b50 	.word	0x20000b50

0800b2f0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b2f0:	b580      	push	{r7, lr}
 800b2f2:	b086      	sub	sp, #24
 800b2f4:	af00      	add	r7, sp, #0
 800b2f6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	68db      	ldr	r3, [r3, #12]
 800b2fc:	68db      	ldr	r3, [r3, #12]
 800b2fe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b300:	693b      	ldr	r3, [r7, #16]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d10a      	bne.n	800b31c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800b306:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b30a:	f383 8811 	msr	BASEPRI, r3
 800b30e:	f3bf 8f6f 	isb	sy
 800b312:	f3bf 8f4f 	dsb	sy
 800b316:	60fb      	str	r3, [r7, #12]
}
 800b318:	bf00      	nop
 800b31a:	e7fe      	b.n	800b31a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b31c:	693b      	ldr	r3, [r7, #16]
 800b31e:	3318      	adds	r3, #24
 800b320:	4618      	mov	r0, r3
 800b322:	f7fe fadb 	bl	80098dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b326:	4b1e      	ldr	r3, [pc, #120]	; (800b3a0 <xTaskRemoveFromEventList+0xb0>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	d11d      	bne.n	800b36a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b32e:	693b      	ldr	r3, [r7, #16]
 800b330:	3304      	adds	r3, #4
 800b332:	4618      	mov	r0, r3
 800b334:	f7fe fad2 	bl	80098dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b338:	693b      	ldr	r3, [r7, #16]
 800b33a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b33c:	4b19      	ldr	r3, [pc, #100]	; (800b3a4 <xTaskRemoveFromEventList+0xb4>)
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	429a      	cmp	r2, r3
 800b342:	d903      	bls.n	800b34c <xTaskRemoveFromEventList+0x5c>
 800b344:	693b      	ldr	r3, [r7, #16]
 800b346:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b348:	4a16      	ldr	r2, [pc, #88]	; (800b3a4 <xTaskRemoveFromEventList+0xb4>)
 800b34a:	6013      	str	r3, [r2, #0]
 800b34c:	693b      	ldr	r3, [r7, #16]
 800b34e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b350:	4613      	mov	r3, r2
 800b352:	009b      	lsls	r3, r3, #2
 800b354:	4413      	add	r3, r2
 800b356:	009b      	lsls	r3, r3, #2
 800b358:	4a13      	ldr	r2, [pc, #76]	; (800b3a8 <xTaskRemoveFromEventList+0xb8>)
 800b35a:	441a      	add	r2, r3
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	3304      	adds	r3, #4
 800b360:	4619      	mov	r1, r3
 800b362:	4610      	mov	r0, r2
 800b364:	f7fe fa5d 	bl	8009822 <vListInsertEnd>
 800b368:	e005      	b.n	800b376 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b36a:	693b      	ldr	r3, [r7, #16]
 800b36c:	3318      	adds	r3, #24
 800b36e:	4619      	mov	r1, r3
 800b370:	480e      	ldr	r0, [pc, #56]	; (800b3ac <xTaskRemoveFromEventList+0xbc>)
 800b372:	f7fe fa56 	bl	8009822 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b376:	693b      	ldr	r3, [r7, #16]
 800b378:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b37a:	4b0d      	ldr	r3, [pc, #52]	; (800b3b0 <xTaskRemoveFromEventList+0xc0>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b380:	429a      	cmp	r2, r3
 800b382:	d905      	bls.n	800b390 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b384:	2301      	movs	r3, #1
 800b386:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b388:	4b0a      	ldr	r3, [pc, #40]	; (800b3b4 <xTaskRemoveFromEventList+0xc4>)
 800b38a:	2201      	movs	r2, #1
 800b38c:	601a      	str	r2, [r3, #0]
 800b38e:	e001      	b.n	800b394 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800b390:	2300      	movs	r3, #0
 800b392:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b394:	697b      	ldr	r3, [r7, #20]
}
 800b396:	4618      	mov	r0, r3
 800b398:	3718      	adds	r7, #24
 800b39a:	46bd      	mov	sp, r7
 800b39c:	bd80      	pop	{r7, pc}
 800b39e:	bf00      	nop
 800b3a0:	2000104c 	.word	0x2000104c
 800b3a4:	2000102c 	.word	0x2000102c
 800b3a8:	20000b54 	.word	0x20000b54
 800b3ac:	20000fe4 	.word	0x20000fe4
 800b3b0:	20000b50 	.word	0x20000b50
 800b3b4:	20001038 	.word	0x20001038

0800b3b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b3b8:	b480      	push	{r7}
 800b3ba:	b083      	sub	sp, #12
 800b3bc:	af00      	add	r7, sp, #0
 800b3be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b3c0:	4b06      	ldr	r3, [pc, #24]	; (800b3dc <vTaskInternalSetTimeOutState+0x24>)
 800b3c2:	681a      	ldr	r2, [r3, #0]
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b3c8:	4b05      	ldr	r3, [pc, #20]	; (800b3e0 <vTaskInternalSetTimeOutState+0x28>)
 800b3ca:	681a      	ldr	r2, [r3, #0]
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	605a      	str	r2, [r3, #4]
}
 800b3d0:	bf00      	nop
 800b3d2:	370c      	adds	r7, #12
 800b3d4:	46bd      	mov	sp, r7
 800b3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3da:	4770      	bx	lr
 800b3dc:	2000103c 	.word	0x2000103c
 800b3e0:	20001028 	.word	0x20001028

0800b3e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b3e4:	b580      	push	{r7, lr}
 800b3e6:	b088      	sub	sp, #32
 800b3e8:	af00      	add	r7, sp, #0
 800b3ea:	6078      	str	r0, [r7, #4]
 800b3ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b3ee:	687b      	ldr	r3, [r7, #4]
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d10a      	bne.n	800b40a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800b3f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3f8:	f383 8811 	msr	BASEPRI, r3
 800b3fc:	f3bf 8f6f 	isb	sy
 800b400:	f3bf 8f4f 	dsb	sy
 800b404:	613b      	str	r3, [r7, #16]
}
 800b406:	bf00      	nop
 800b408:	e7fe      	b.n	800b408 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d10a      	bne.n	800b426 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800b410:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b414:	f383 8811 	msr	BASEPRI, r3
 800b418:	f3bf 8f6f 	isb	sy
 800b41c:	f3bf 8f4f 	dsb	sy
 800b420:	60fb      	str	r3, [r7, #12]
}
 800b422:	bf00      	nop
 800b424:	e7fe      	b.n	800b424 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800b426:	f000 ff7d 	bl	800c324 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b42a:	4b1d      	ldr	r3, [pc, #116]	; (800b4a0 <xTaskCheckForTimeOut+0xbc>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	685b      	ldr	r3, [r3, #4]
 800b434:	69ba      	ldr	r2, [r7, #24]
 800b436:	1ad3      	subs	r3, r2, r3
 800b438:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b43a:	683b      	ldr	r3, [r7, #0]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b442:	d102      	bne.n	800b44a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b444:	2300      	movs	r3, #0
 800b446:	61fb      	str	r3, [r7, #28]
 800b448:	e023      	b.n	800b492 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b44a:	687b      	ldr	r3, [r7, #4]
 800b44c:	681a      	ldr	r2, [r3, #0]
 800b44e:	4b15      	ldr	r3, [pc, #84]	; (800b4a4 <xTaskCheckForTimeOut+0xc0>)
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	429a      	cmp	r2, r3
 800b454:	d007      	beq.n	800b466 <xTaskCheckForTimeOut+0x82>
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	685b      	ldr	r3, [r3, #4]
 800b45a:	69ba      	ldr	r2, [r7, #24]
 800b45c:	429a      	cmp	r2, r3
 800b45e:	d302      	bcc.n	800b466 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b460:	2301      	movs	r3, #1
 800b462:	61fb      	str	r3, [r7, #28]
 800b464:	e015      	b.n	800b492 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b466:	683b      	ldr	r3, [r7, #0]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	697a      	ldr	r2, [r7, #20]
 800b46c:	429a      	cmp	r2, r3
 800b46e:	d20b      	bcs.n	800b488 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b470:	683b      	ldr	r3, [r7, #0]
 800b472:	681a      	ldr	r2, [r3, #0]
 800b474:	697b      	ldr	r3, [r7, #20]
 800b476:	1ad2      	subs	r2, r2, r3
 800b478:	683b      	ldr	r3, [r7, #0]
 800b47a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b47c:	6878      	ldr	r0, [r7, #4]
 800b47e:	f7ff ff9b 	bl	800b3b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b482:	2300      	movs	r3, #0
 800b484:	61fb      	str	r3, [r7, #28]
 800b486:	e004      	b.n	800b492 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800b488:	683b      	ldr	r3, [r7, #0]
 800b48a:	2200      	movs	r2, #0
 800b48c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b48e:	2301      	movs	r3, #1
 800b490:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b492:	f000 ff77 	bl	800c384 <vPortExitCritical>

	return xReturn;
 800b496:	69fb      	ldr	r3, [r7, #28]
}
 800b498:	4618      	mov	r0, r3
 800b49a:	3720      	adds	r7, #32
 800b49c:	46bd      	mov	sp, r7
 800b49e:	bd80      	pop	{r7, pc}
 800b4a0:	20001028 	.word	0x20001028
 800b4a4:	2000103c 	.word	0x2000103c

0800b4a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b4a8:	b480      	push	{r7}
 800b4aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b4ac:	4b03      	ldr	r3, [pc, #12]	; (800b4bc <vTaskMissedYield+0x14>)
 800b4ae:	2201      	movs	r2, #1
 800b4b0:	601a      	str	r2, [r3, #0]
}
 800b4b2:	bf00      	nop
 800b4b4:	46bd      	mov	sp, r7
 800b4b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4ba:	4770      	bx	lr
 800b4bc:	20001038 	.word	0x20001038

0800b4c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b4c0:	b580      	push	{r7, lr}
 800b4c2:	b082      	sub	sp, #8
 800b4c4:	af00      	add	r7, sp, #0
 800b4c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b4c8:	f000 f852 	bl	800b570 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b4cc:	4b06      	ldr	r3, [pc, #24]	; (800b4e8 <prvIdleTask+0x28>)
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	2b01      	cmp	r3, #1
 800b4d2:	d9f9      	bls.n	800b4c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b4d4:	4b05      	ldr	r3, [pc, #20]	; (800b4ec <prvIdleTask+0x2c>)
 800b4d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b4da:	601a      	str	r2, [r3, #0]
 800b4dc:	f3bf 8f4f 	dsb	sy
 800b4e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b4e4:	e7f0      	b.n	800b4c8 <prvIdleTask+0x8>
 800b4e6:	bf00      	nop
 800b4e8:	20000b54 	.word	0x20000b54
 800b4ec:	e000ed04 	.word	0xe000ed04

0800b4f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b082      	sub	sp, #8
 800b4f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b4f6:	2300      	movs	r3, #0
 800b4f8:	607b      	str	r3, [r7, #4]
 800b4fa:	e00c      	b.n	800b516 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b4fc:	687a      	ldr	r2, [r7, #4]
 800b4fe:	4613      	mov	r3, r2
 800b500:	009b      	lsls	r3, r3, #2
 800b502:	4413      	add	r3, r2
 800b504:	009b      	lsls	r3, r3, #2
 800b506:	4a12      	ldr	r2, [pc, #72]	; (800b550 <prvInitialiseTaskLists+0x60>)
 800b508:	4413      	add	r3, r2
 800b50a:	4618      	mov	r0, r3
 800b50c:	f7fe f95c 	bl	80097c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b510:	687b      	ldr	r3, [r7, #4]
 800b512:	3301      	adds	r3, #1
 800b514:	607b      	str	r3, [r7, #4]
 800b516:	687b      	ldr	r3, [r7, #4]
 800b518:	2b37      	cmp	r3, #55	; 0x37
 800b51a:	d9ef      	bls.n	800b4fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b51c:	480d      	ldr	r0, [pc, #52]	; (800b554 <prvInitialiseTaskLists+0x64>)
 800b51e:	f7fe f953 	bl	80097c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b522:	480d      	ldr	r0, [pc, #52]	; (800b558 <prvInitialiseTaskLists+0x68>)
 800b524:	f7fe f950 	bl	80097c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b528:	480c      	ldr	r0, [pc, #48]	; (800b55c <prvInitialiseTaskLists+0x6c>)
 800b52a:	f7fe f94d 	bl	80097c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b52e:	480c      	ldr	r0, [pc, #48]	; (800b560 <prvInitialiseTaskLists+0x70>)
 800b530:	f7fe f94a 	bl	80097c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b534:	480b      	ldr	r0, [pc, #44]	; (800b564 <prvInitialiseTaskLists+0x74>)
 800b536:	f7fe f947 	bl	80097c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b53a:	4b0b      	ldr	r3, [pc, #44]	; (800b568 <prvInitialiseTaskLists+0x78>)
 800b53c:	4a05      	ldr	r2, [pc, #20]	; (800b554 <prvInitialiseTaskLists+0x64>)
 800b53e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b540:	4b0a      	ldr	r3, [pc, #40]	; (800b56c <prvInitialiseTaskLists+0x7c>)
 800b542:	4a05      	ldr	r2, [pc, #20]	; (800b558 <prvInitialiseTaskLists+0x68>)
 800b544:	601a      	str	r2, [r3, #0]
}
 800b546:	bf00      	nop
 800b548:	3708      	adds	r7, #8
 800b54a:	46bd      	mov	sp, r7
 800b54c:	bd80      	pop	{r7, pc}
 800b54e:	bf00      	nop
 800b550:	20000b54 	.word	0x20000b54
 800b554:	20000fb4 	.word	0x20000fb4
 800b558:	20000fc8 	.word	0x20000fc8
 800b55c:	20000fe4 	.word	0x20000fe4
 800b560:	20000ff8 	.word	0x20000ff8
 800b564:	20001010 	.word	0x20001010
 800b568:	20000fdc 	.word	0x20000fdc
 800b56c:	20000fe0 	.word	0x20000fe0

0800b570 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b570:	b580      	push	{r7, lr}
 800b572:	b082      	sub	sp, #8
 800b574:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b576:	e019      	b.n	800b5ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b578:	f000 fed4 	bl	800c324 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b57c:	4b10      	ldr	r3, [pc, #64]	; (800b5c0 <prvCheckTasksWaitingTermination+0x50>)
 800b57e:	68db      	ldr	r3, [r3, #12]
 800b580:	68db      	ldr	r3, [r3, #12]
 800b582:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b584:	687b      	ldr	r3, [r7, #4]
 800b586:	3304      	adds	r3, #4
 800b588:	4618      	mov	r0, r3
 800b58a:	f7fe f9a7 	bl	80098dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b58e:	4b0d      	ldr	r3, [pc, #52]	; (800b5c4 <prvCheckTasksWaitingTermination+0x54>)
 800b590:	681b      	ldr	r3, [r3, #0]
 800b592:	3b01      	subs	r3, #1
 800b594:	4a0b      	ldr	r2, [pc, #44]	; (800b5c4 <prvCheckTasksWaitingTermination+0x54>)
 800b596:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b598:	4b0b      	ldr	r3, [pc, #44]	; (800b5c8 <prvCheckTasksWaitingTermination+0x58>)
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	3b01      	subs	r3, #1
 800b59e:	4a0a      	ldr	r2, [pc, #40]	; (800b5c8 <prvCheckTasksWaitingTermination+0x58>)
 800b5a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b5a2:	f000 feef 	bl	800c384 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b5a6:	6878      	ldr	r0, [r7, #4]
 800b5a8:	f000 f810 	bl	800b5cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b5ac:	4b06      	ldr	r3, [pc, #24]	; (800b5c8 <prvCheckTasksWaitingTermination+0x58>)
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	2b00      	cmp	r3, #0
 800b5b2:	d1e1      	bne.n	800b578 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b5b4:	bf00      	nop
 800b5b6:	bf00      	nop
 800b5b8:	3708      	adds	r7, #8
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}
 800b5be:	bf00      	nop
 800b5c0:	20000ff8 	.word	0x20000ff8
 800b5c4:	20001024 	.word	0x20001024
 800b5c8:	2000100c 	.word	0x2000100c

0800b5cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b5cc:	b580      	push	{r7, lr}
 800b5ce:	b084      	sub	sp, #16
 800b5d0:	af00      	add	r7, sp, #0
 800b5d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	3354      	adds	r3, #84	; 0x54
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f001 fa93 	bl	800cb04 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b5de:	687b      	ldr	r3, [r7, #4]
 800b5e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b5e4:	2b00      	cmp	r3, #0
 800b5e6:	d108      	bne.n	800b5fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b5e8:	687b      	ldr	r3, [r7, #4]
 800b5ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b5ec:	4618      	mov	r0, r3
 800b5ee:	f001 f887 	bl	800c700 <vPortFree>
				vPortFree( pxTCB );
 800b5f2:	6878      	ldr	r0, [r7, #4]
 800b5f4:	f001 f884 	bl	800c700 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b5f8:	e018      	b.n	800b62c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b600:	2b01      	cmp	r3, #1
 800b602:	d103      	bne.n	800b60c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b604:	6878      	ldr	r0, [r7, #4]
 800b606:	f001 f87b 	bl	800c700 <vPortFree>
	}
 800b60a:	e00f      	b.n	800b62c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b60c:	687b      	ldr	r3, [r7, #4]
 800b60e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800b612:	2b02      	cmp	r3, #2
 800b614:	d00a      	beq.n	800b62c <prvDeleteTCB+0x60>
	__asm volatile
 800b616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b61a:	f383 8811 	msr	BASEPRI, r3
 800b61e:	f3bf 8f6f 	isb	sy
 800b622:	f3bf 8f4f 	dsb	sy
 800b626:	60fb      	str	r3, [r7, #12]
}
 800b628:	bf00      	nop
 800b62a:	e7fe      	b.n	800b62a <prvDeleteTCB+0x5e>
	}
 800b62c:	bf00      	nop
 800b62e:	3710      	adds	r7, #16
 800b630:	46bd      	mov	sp, r7
 800b632:	bd80      	pop	{r7, pc}

0800b634 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b634:	b480      	push	{r7}
 800b636:	b083      	sub	sp, #12
 800b638:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b63a:	4b0c      	ldr	r3, [pc, #48]	; (800b66c <prvResetNextTaskUnblockTime+0x38>)
 800b63c:	681b      	ldr	r3, [r3, #0]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d104      	bne.n	800b64e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b644:	4b0a      	ldr	r3, [pc, #40]	; (800b670 <prvResetNextTaskUnblockTime+0x3c>)
 800b646:	f04f 32ff 	mov.w	r2, #4294967295
 800b64a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b64c:	e008      	b.n	800b660 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b64e:	4b07      	ldr	r3, [pc, #28]	; (800b66c <prvResetNextTaskUnblockTime+0x38>)
 800b650:	681b      	ldr	r3, [r3, #0]
 800b652:	68db      	ldr	r3, [r3, #12]
 800b654:	68db      	ldr	r3, [r3, #12]
 800b656:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	685b      	ldr	r3, [r3, #4]
 800b65c:	4a04      	ldr	r2, [pc, #16]	; (800b670 <prvResetNextTaskUnblockTime+0x3c>)
 800b65e:	6013      	str	r3, [r2, #0]
}
 800b660:	bf00      	nop
 800b662:	370c      	adds	r7, #12
 800b664:	46bd      	mov	sp, r7
 800b666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b66a:	4770      	bx	lr
 800b66c:	20000fdc 	.word	0x20000fdc
 800b670:	20001044 	.word	0x20001044

0800b674 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b674:	b480      	push	{r7}
 800b676:	b083      	sub	sp, #12
 800b678:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b67a:	4b0b      	ldr	r3, [pc, #44]	; (800b6a8 <xTaskGetSchedulerState+0x34>)
 800b67c:	681b      	ldr	r3, [r3, #0]
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d102      	bne.n	800b688 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b682:	2301      	movs	r3, #1
 800b684:	607b      	str	r3, [r7, #4]
 800b686:	e008      	b.n	800b69a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b688:	4b08      	ldr	r3, [pc, #32]	; (800b6ac <xTaskGetSchedulerState+0x38>)
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	2b00      	cmp	r3, #0
 800b68e:	d102      	bne.n	800b696 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b690:	2302      	movs	r3, #2
 800b692:	607b      	str	r3, [r7, #4]
 800b694:	e001      	b.n	800b69a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b696:	2300      	movs	r3, #0
 800b698:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b69a:	687b      	ldr	r3, [r7, #4]
	}
 800b69c:	4618      	mov	r0, r3
 800b69e:	370c      	adds	r7, #12
 800b6a0:	46bd      	mov	sp, r7
 800b6a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6a6:	4770      	bx	lr
 800b6a8:	20001030 	.word	0x20001030
 800b6ac:	2000104c 	.word	0x2000104c

0800b6b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b6b0:	b580      	push	{r7, lr}
 800b6b2:	b084      	sub	sp, #16
 800b6b4:	af00      	add	r7, sp, #0
 800b6b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b6bc:	2300      	movs	r3, #0
 800b6be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b6c0:	687b      	ldr	r3, [r7, #4]
 800b6c2:	2b00      	cmp	r3, #0
 800b6c4:	d051      	beq.n	800b76a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b6c6:	68bb      	ldr	r3, [r7, #8]
 800b6c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6ca:	4b2a      	ldr	r3, [pc, #168]	; (800b774 <xTaskPriorityInherit+0xc4>)
 800b6cc:	681b      	ldr	r3, [r3, #0]
 800b6ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6d0:	429a      	cmp	r2, r3
 800b6d2:	d241      	bcs.n	800b758 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b6d4:	68bb      	ldr	r3, [r7, #8]
 800b6d6:	699b      	ldr	r3, [r3, #24]
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	db06      	blt.n	800b6ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6dc:	4b25      	ldr	r3, [pc, #148]	; (800b774 <xTaskPriorityInherit+0xc4>)
 800b6de:	681b      	ldr	r3, [r3, #0]
 800b6e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b6e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b6e6:	68bb      	ldr	r3, [r7, #8]
 800b6e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b6ea:	68bb      	ldr	r3, [r7, #8]
 800b6ec:	6959      	ldr	r1, [r3, #20]
 800b6ee:	68bb      	ldr	r3, [r7, #8]
 800b6f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b6f2:	4613      	mov	r3, r2
 800b6f4:	009b      	lsls	r3, r3, #2
 800b6f6:	4413      	add	r3, r2
 800b6f8:	009b      	lsls	r3, r3, #2
 800b6fa:	4a1f      	ldr	r2, [pc, #124]	; (800b778 <xTaskPriorityInherit+0xc8>)
 800b6fc:	4413      	add	r3, r2
 800b6fe:	4299      	cmp	r1, r3
 800b700:	d122      	bne.n	800b748 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b702:	68bb      	ldr	r3, [r7, #8]
 800b704:	3304      	adds	r3, #4
 800b706:	4618      	mov	r0, r3
 800b708:	f7fe f8e8 	bl	80098dc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b70c:	4b19      	ldr	r3, [pc, #100]	; (800b774 <xTaskPriorityInherit+0xc4>)
 800b70e:	681b      	ldr	r3, [r3, #0]
 800b710:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b712:	68bb      	ldr	r3, [r7, #8]
 800b714:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b716:	68bb      	ldr	r3, [r7, #8]
 800b718:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b71a:	4b18      	ldr	r3, [pc, #96]	; (800b77c <xTaskPriorityInherit+0xcc>)
 800b71c:	681b      	ldr	r3, [r3, #0]
 800b71e:	429a      	cmp	r2, r3
 800b720:	d903      	bls.n	800b72a <xTaskPriorityInherit+0x7a>
 800b722:	68bb      	ldr	r3, [r7, #8]
 800b724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b726:	4a15      	ldr	r2, [pc, #84]	; (800b77c <xTaskPriorityInherit+0xcc>)
 800b728:	6013      	str	r3, [r2, #0]
 800b72a:	68bb      	ldr	r3, [r7, #8]
 800b72c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b72e:	4613      	mov	r3, r2
 800b730:	009b      	lsls	r3, r3, #2
 800b732:	4413      	add	r3, r2
 800b734:	009b      	lsls	r3, r3, #2
 800b736:	4a10      	ldr	r2, [pc, #64]	; (800b778 <xTaskPriorityInherit+0xc8>)
 800b738:	441a      	add	r2, r3
 800b73a:	68bb      	ldr	r3, [r7, #8]
 800b73c:	3304      	adds	r3, #4
 800b73e:	4619      	mov	r1, r3
 800b740:	4610      	mov	r0, r2
 800b742:	f7fe f86e 	bl	8009822 <vListInsertEnd>
 800b746:	e004      	b.n	800b752 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b748:	4b0a      	ldr	r3, [pc, #40]	; (800b774 <xTaskPriorityInherit+0xc4>)
 800b74a:	681b      	ldr	r3, [r3, #0]
 800b74c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b74e:	68bb      	ldr	r3, [r7, #8]
 800b750:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b752:	2301      	movs	r3, #1
 800b754:	60fb      	str	r3, [r7, #12]
 800b756:	e008      	b.n	800b76a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b758:	68bb      	ldr	r3, [r7, #8]
 800b75a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b75c:	4b05      	ldr	r3, [pc, #20]	; (800b774 <xTaskPriorityInherit+0xc4>)
 800b75e:	681b      	ldr	r3, [r3, #0]
 800b760:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b762:	429a      	cmp	r2, r3
 800b764:	d201      	bcs.n	800b76a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b766:	2301      	movs	r3, #1
 800b768:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b76a:	68fb      	ldr	r3, [r7, #12]
	}
 800b76c:	4618      	mov	r0, r3
 800b76e:	3710      	adds	r7, #16
 800b770:	46bd      	mov	sp, r7
 800b772:	bd80      	pop	{r7, pc}
 800b774:	20000b50 	.word	0x20000b50
 800b778:	20000b54 	.word	0x20000b54
 800b77c:	2000102c 	.word	0x2000102c

0800b780 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b780:	b580      	push	{r7, lr}
 800b782:	b086      	sub	sp, #24
 800b784:	af00      	add	r7, sp, #0
 800b786:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b78c:	2300      	movs	r3, #0
 800b78e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b790:	687b      	ldr	r3, [r7, #4]
 800b792:	2b00      	cmp	r3, #0
 800b794:	d056      	beq.n	800b844 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b796:	4b2e      	ldr	r3, [pc, #184]	; (800b850 <xTaskPriorityDisinherit+0xd0>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	693a      	ldr	r2, [r7, #16]
 800b79c:	429a      	cmp	r2, r3
 800b79e:	d00a      	beq.n	800b7b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b7a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7a4:	f383 8811 	msr	BASEPRI, r3
 800b7a8:	f3bf 8f6f 	isb	sy
 800b7ac:	f3bf 8f4f 	dsb	sy
 800b7b0:	60fb      	str	r3, [r7, #12]
}
 800b7b2:	bf00      	nop
 800b7b4:	e7fe      	b.n	800b7b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b7b6:	693b      	ldr	r3, [r7, #16]
 800b7b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ba:	2b00      	cmp	r3, #0
 800b7bc:	d10a      	bne.n	800b7d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b7be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b7c2:	f383 8811 	msr	BASEPRI, r3
 800b7c6:	f3bf 8f6f 	isb	sy
 800b7ca:	f3bf 8f4f 	dsb	sy
 800b7ce:	60bb      	str	r3, [r7, #8]
}
 800b7d0:	bf00      	nop
 800b7d2:	e7fe      	b.n	800b7d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b7d4:	693b      	ldr	r3, [r7, #16]
 800b7d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7d8:	1e5a      	subs	r2, r3, #1
 800b7da:	693b      	ldr	r3, [r7, #16]
 800b7dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b7de:	693b      	ldr	r3, [r7, #16]
 800b7e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b7e2:	693b      	ldr	r3, [r7, #16]
 800b7e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b7e6:	429a      	cmp	r2, r3
 800b7e8:	d02c      	beq.n	800b844 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b7ea:	693b      	ldr	r3, [r7, #16]
 800b7ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b7ee:	2b00      	cmp	r3, #0
 800b7f0:	d128      	bne.n	800b844 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b7f2:	693b      	ldr	r3, [r7, #16]
 800b7f4:	3304      	adds	r3, #4
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	f7fe f870 	bl	80098dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b7fc:	693b      	ldr	r3, [r7, #16]
 800b7fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b800:	693b      	ldr	r3, [r7, #16]
 800b802:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b804:	693b      	ldr	r3, [r7, #16]
 800b806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b808:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b80c:	693b      	ldr	r3, [r7, #16]
 800b80e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b810:	693b      	ldr	r3, [r7, #16]
 800b812:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b814:	4b0f      	ldr	r3, [pc, #60]	; (800b854 <xTaskPriorityDisinherit+0xd4>)
 800b816:	681b      	ldr	r3, [r3, #0]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d903      	bls.n	800b824 <xTaskPriorityDisinherit+0xa4>
 800b81c:	693b      	ldr	r3, [r7, #16]
 800b81e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b820:	4a0c      	ldr	r2, [pc, #48]	; (800b854 <xTaskPriorityDisinherit+0xd4>)
 800b822:	6013      	str	r3, [r2, #0]
 800b824:	693b      	ldr	r3, [r7, #16]
 800b826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b828:	4613      	mov	r3, r2
 800b82a:	009b      	lsls	r3, r3, #2
 800b82c:	4413      	add	r3, r2
 800b82e:	009b      	lsls	r3, r3, #2
 800b830:	4a09      	ldr	r2, [pc, #36]	; (800b858 <xTaskPriorityDisinherit+0xd8>)
 800b832:	441a      	add	r2, r3
 800b834:	693b      	ldr	r3, [r7, #16]
 800b836:	3304      	adds	r3, #4
 800b838:	4619      	mov	r1, r3
 800b83a:	4610      	mov	r0, r2
 800b83c:	f7fd fff1 	bl	8009822 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b840:	2301      	movs	r3, #1
 800b842:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b844:	697b      	ldr	r3, [r7, #20]
	}
 800b846:	4618      	mov	r0, r3
 800b848:	3718      	adds	r7, #24
 800b84a:	46bd      	mov	sp, r7
 800b84c:	bd80      	pop	{r7, pc}
 800b84e:	bf00      	nop
 800b850:	20000b50 	.word	0x20000b50
 800b854:	2000102c 	.word	0x2000102c
 800b858:	20000b54 	.word	0x20000b54

0800b85c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b85c:	b580      	push	{r7, lr}
 800b85e:	b088      	sub	sp, #32
 800b860:	af00      	add	r7, sp, #0
 800b862:	6078      	str	r0, [r7, #4]
 800b864:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b866:	687b      	ldr	r3, [r7, #4]
 800b868:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b86a:	2301      	movs	r3, #1
 800b86c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	2b00      	cmp	r3, #0
 800b872:	d06a      	beq.n	800b94a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b874:	69bb      	ldr	r3, [r7, #24]
 800b876:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b878:	2b00      	cmp	r3, #0
 800b87a:	d10a      	bne.n	800b892 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b87c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b880:	f383 8811 	msr	BASEPRI, r3
 800b884:	f3bf 8f6f 	isb	sy
 800b888:	f3bf 8f4f 	dsb	sy
 800b88c:	60fb      	str	r3, [r7, #12]
}
 800b88e:	bf00      	nop
 800b890:	e7fe      	b.n	800b890 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b892:	69bb      	ldr	r3, [r7, #24]
 800b894:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b896:	683a      	ldr	r2, [r7, #0]
 800b898:	429a      	cmp	r2, r3
 800b89a:	d902      	bls.n	800b8a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	61fb      	str	r3, [r7, #28]
 800b8a0:	e002      	b.n	800b8a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b8a2:	69bb      	ldr	r3, [r7, #24]
 800b8a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b8a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b8a8:	69bb      	ldr	r3, [r7, #24]
 800b8aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8ac:	69fa      	ldr	r2, [r7, #28]
 800b8ae:	429a      	cmp	r2, r3
 800b8b0:	d04b      	beq.n	800b94a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b8b2:	69bb      	ldr	r3, [r7, #24]
 800b8b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b8b6:	697a      	ldr	r2, [r7, #20]
 800b8b8:	429a      	cmp	r2, r3
 800b8ba:	d146      	bne.n	800b94a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b8bc:	4b25      	ldr	r3, [pc, #148]	; (800b954 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	69ba      	ldr	r2, [r7, #24]
 800b8c2:	429a      	cmp	r2, r3
 800b8c4:	d10a      	bne.n	800b8dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b8c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b8ca:	f383 8811 	msr	BASEPRI, r3
 800b8ce:	f3bf 8f6f 	isb	sy
 800b8d2:	f3bf 8f4f 	dsb	sy
 800b8d6:	60bb      	str	r3, [r7, #8]
}
 800b8d8:	bf00      	nop
 800b8da:	e7fe      	b.n	800b8da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b8dc:	69bb      	ldr	r3, [r7, #24]
 800b8de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b8e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b8e2:	69bb      	ldr	r3, [r7, #24]
 800b8e4:	69fa      	ldr	r2, [r7, #28]
 800b8e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b8e8:	69bb      	ldr	r3, [r7, #24]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	db04      	blt.n	800b8fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b8f0:	69fb      	ldr	r3, [r7, #28]
 800b8f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b8f6:	69bb      	ldr	r3, [r7, #24]
 800b8f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b8fa:	69bb      	ldr	r3, [r7, #24]
 800b8fc:	6959      	ldr	r1, [r3, #20]
 800b8fe:	693a      	ldr	r2, [r7, #16]
 800b900:	4613      	mov	r3, r2
 800b902:	009b      	lsls	r3, r3, #2
 800b904:	4413      	add	r3, r2
 800b906:	009b      	lsls	r3, r3, #2
 800b908:	4a13      	ldr	r2, [pc, #76]	; (800b958 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b90a:	4413      	add	r3, r2
 800b90c:	4299      	cmp	r1, r3
 800b90e:	d11c      	bne.n	800b94a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b910:	69bb      	ldr	r3, [r7, #24]
 800b912:	3304      	adds	r3, #4
 800b914:	4618      	mov	r0, r3
 800b916:	f7fd ffe1 	bl	80098dc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b91a:	69bb      	ldr	r3, [r7, #24]
 800b91c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b91e:	4b0f      	ldr	r3, [pc, #60]	; (800b95c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b920:	681b      	ldr	r3, [r3, #0]
 800b922:	429a      	cmp	r2, r3
 800b924:	d903      	bls.n	800b92e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b926:	69bb      	ldr	r3, [r7, #24]
 800b928:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b92a:	4a0c      	ldr	r2, [pc, #48]	; (800b95c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b92c:	6013      	str	r3, [r2, #0]
 800b92e:	69bb      	ldr	r3, [r7, #24]
 800b930:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b932:	4613      	mov	r3, r2
 800b934:	009b      	lsls	r3, r3, #2
 800b936:	4413      	add	r3, r2
 800b938:	009b      	lsls	r3, r3, #2
 800b93a:	4a07      	ldr	r2, [pc, #28]	; (800b958 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b93c:	441a      	add	r2, r3
 800b93e:	69bb      	ldr	r3, [r7, #24]
 800b940:	3304      	adds	r3, #4
 800b942:	4619      	mov	r1, r3
 800b944:	4610      	mov	r0, r2
 800b946:	f7fd ff6c 	bl	8009822 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b94a:	bf00      	nop
 800b94c:	3720      	adds	r7, #32
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	20000b50 	.word	0x20000b50
 800b958:	20000b54 	.word	0x20000b54
 800b95c:	2000102c 	.word	0x2000102c

0800b960 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b960:	b480      	push	{r7}
 800b962:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b964:	4b07      	ldr	r3, [pc, #28]	; (800b984 <pvTaskIncrementMutexHeldCount+0x24>)
 800b966:	681b      	ldr	r3, [r3, #0]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d004      	beq.n	800b976 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b96c:	4b05      	ldr	r3, [pc, #20]	; (800b984 <pvTaskIncrementMutexHeldCount+0x24>)
 800b96e:	681b      	ldr	r3, [r3, #0]
 800b970:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b972:	3201      	adds	r2, #1
 800b974:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b976:	4b03      	ldr	r3, [pc, #12]	; (800b984 <pvTaskIncrementMutexHeldCount+0x24>)
 800b978:	681b      	ldr	r3, [r3, #0]
	}
 800b97a:	4618      	mov	r0, r3
 800b97c:	46bd      	mov	sp, r7
 800b97e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b982:	4770      	bx	lr
 800b984:	20000b50 	.word	0x20000b50

0800b988 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b988:	b580      	push	{r7, lr}
 800b98a:	b084      	sub	sp, #16
 800b98c:	af00      	add	r7, sp, #0
 800b98e:	6078      	str	r0, [r7, #4]
 800b990:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b992:	4b21      	ldr	r3, [pc, #132]	; (800ba18 <prvAddCurrentTaskToDelayedList+0x90>)
 800b994:	681b      	ldr	r3, [r3, #0]
 800b996:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b998:	4b20      	ldr	r3, [pc, #128]	; (800ba1c <prvAddCurrentTaskToDelayedList+0x94>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	3304      	adds	r3, #4
 800b99e:	4618      	mov	r0, r3
 800b9a0:	f7fd ff9c 	bl	80098dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b9a4:	687b      	ldr	r3, [r7, #4]
 800b9a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b9aa:	d10a      	bne.n	800b9c2 <prvAddCurrentTaskToDelayedList+0x3a>
 800b9ac:	683b      	ldr	r3, [r7, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d007      	beq.n	800b9c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9b2:	4b1a      	ldr	r3, [pc, #104]	; (800ba1c <prvAddCurrentTaskToDelayedList+0x94>)
 800b9b4:	681b      	ldr	r3, [r3, #0]
 800b9b6:	3304      	adds	r3, #4
 800b9b8:	4619      	mov	r1, r3
 800b9ba:	4819      	ldr	r0, [pc, #100]	; (800ba20 <prvAddCurrentTaskToDelayedList+0x98>)
 800b9bc:	f7fd ff31 	bl	8009822 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b9c0:	e026      	b.n	800ba10 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b9c2:	68fa      	ldr	r2, [r7, #12]
 800b9c4:	687b      	ldr	r3, [r7, #4]
 800b9c6:	4413      	add	r3, r2
 800b9c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b9ca:	4b14      	ldr	r3, [pc, #80]	; (800ba1c <prvAddCurrentTaskToDelayedList+0x94>)
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	68ba      	ldr	r2, [r7, #8]
 800b9d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b9d2:	68ba      	ldr	r2, [r7, #8]
 800b9d4:	68fb      	ldr	r3, [r7, #12]
 800b9d6:	429a      	cmp	r2, r3
 800b9d8:	d209      	bcs.n	800b9ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9da:	4b12      	ldr	r3, [pc, #72]	; (800ba24 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b9dc:	681a      	ldr	r2, [r3, #0]
 800b9de:	4b0f      	ldr	r3, [pc, #60]	; (800ba1c <prvAddCurrentTaskToDelayedList+0x94>)
 800b9e0:	681b      	ldr	r3, [r3, #0]
 800b9e2:	3304      	adds	r3, #4
 800b9e4:	4619      	mov	r1, r3
 800b9e6:	4610      	mov	r0, r2
 800b9e8:	f7fd ff3f 	bl	800986a <vListInsert>
}
 800b9ec:	e010      	b.n	800ba10 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b9ee:	4b0e      	ldr	r3, [pc, #56]	; (800ba28 <prvAddCurrentTaskToDelayedList+0xa0>)
 800b9f0:	681a      	ldr	r2, [r3, #0]
 800b9f2:	4b0a      	ldr	r3, [pc, #40]	; (800ba1c <prvAddCurrentTaskToDelayedList+0x94>)
 800b9f4:	681b      	ldr	r3, [r3, #0]
 800b9f6:	3304      	adds	r3, #4
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	4610      	mov	r0, r2
 800b9fc:	f7fd ff35 	bl	800986a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ba00:	4b0a      	ldr	r3, [pc, #40]	; (800ba2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba02:	681b      	ldr	r3, [r3, #0]
 800ba04:	68ba      	ldr	r2, [r7, #8]
 800ba06:	429a      	cmp	r2, r3
 800ba08:	d202      	bcs.n	800ba10 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800ba0a:	4a08      	ldr	r2, [pc, #32]	; (800ba2c <prvAddCurrentTaskToDelayedList+0xa4>)
 800ba0c:	68bb      	ldr	r3, [r7, #8]
 800ba0e:	6013      	str	r3, [r2, #0]
}
 800ba10:	bf00      	nop
 800ba12:	3710      	adds	r7, #16
 800ba14:	46bd      	mov	sp, r7
 800ba16:	bd80      	pop	{r7, pc}
 800ba18:	20001028 	.word	0x20001028
 800ba1c:	20000b50 	.word	0x20000b50
 800ba20:	20001010 	.word	0x20001010
 800ba24:	20000fe0 	.word	0x20000fe0
 800ba28:	20000fdc 	.word	0x20000fdc
 800ba2c:	20001044 	.word	0x20001044

0800ba30 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800ba30:	b580      	push	{r7, lr}
 800ba32:	b08a      	sub	sp, #40	; 0x28
 800ba34:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800ba36:	2300      	movs	r3, #0
 800ba38:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800ba3a:	f000 fb07 	bl	800c04c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800ba3e:	4b1c      	ldr	r3, [pc, #112]	; (800bab0 <xTimerCreateTimerTask+0x80>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	2b00      	cmp	r3, #0
 800ba44:	d021      	beq.n	800ba8a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800ba46:	2300      	movs	r3, #0
 800ba48:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ba4a:	2300      	movs	r3, #0
 800ba4c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ba4e:	1d3a      	adds	r2, r7, #4
 800ba50:	f107 0108 	add.w	r1, r7, #8
 800ba54:	f107 030c 	add.w	r3, r7, #12
 800ba58:	4618      	mov	r0, r3
 800ba5a:	f7fd fe9b 	bl	8009794 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ba5e:	6879      	ldr	r1, [r7, #4]
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	68fa      	ldr	r2, [r7, #12]
 800ba64:	9202      	str	r2, [sp, #8]
 800ba66:	9301      	str	r3, [sp, #4]
 800ba68:	2302      	movs	r3, #2
 800ba6a:	9300      	str	r3, [sp, #0]
 800ba6c:	2300      	movs	r3, #0
 800ba6e:	460a      	mov	r2, r1
 800ba70:	4910      	ldr	r1, [pc, #64]	; (800bab4 <xTimerCreateTimerTask+0x84>)
 800ba72:	4811      	ldr	r0, [pc, #68]	; (800bab8 <xTimerCreateTimerTask+0x88>)
 800ba74:	f7fe ffb6 	bl	800a9e4 <xTaskCreateStatic>
 800ba78:	4603      	mov	r3, r0
 800ba7a:	4a10      	ldr	r2, [pc, #64]	; (800babc <xTimerCreateTimerTask+0x8c>)
 800ba7c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ba7e:	4b0f      	ldr	r3, [pc, #60]	; (800babc <xTimerCreateTimerTask+0x8c>)
 800ba80:	681b      	ldr	r3, [r3, #0]
 800ba82:	2b00      	cmp	r3, #0
 800ba84:	d001      	beq.n	800ba8a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ba86:	2301      	movs	r3, #1
 800ba88:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ba8a:	697b      	ldr	r3, [r7, #20]
 800ba8c:	2b00      	cmp	r3, #0
 800ba8e:	d10a      	bne.n	800baa6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800ba90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba94:	f383 8811 	msr	BASEPRI, r3
 800ba98:	f3bf 8f6f 	isb	sy
 800ba9c:	f3bf 8f4f 	dsb	sy
 800baa0:	613b      	str	r3, [r7, #16]
}
 800baa2:	bf00      	nop
 800baa4:	e7fe      	b.n	800baa4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800baa6:	697b      	ldr	r3, [r7, #20]
}
 800baa8:	4618      	mov	r0, r3
 800baaa:	3718      	adds	r7, #24
 800baac:	46bd      	mov	sp, r7
 800baae:	bd80      	pop	{r7, pc}
 800bab0:	20001080 	.word	0x20001080
 800bab4:	0800d41c 	.word	0x0800d41c
 800bab8:	0800bbf5 	.word	0x0800bbf5
 800babc:	20001084 	.word	0x20001084

0800bac0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bac0:	b580      	push	{r7, lr}
 800bac2:	b08a      	sub	sp, #40	; 0x28
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	60b9      	str	r1, [r7, #8]
 800baca:	607a      	str	r2, [r7, #4]
 800bacc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bace:	2300      	movs	r3, #0
 800bad0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bad2:	68fb      	ldr	r3, [r7, #12]
 800bad4:	2b00      	cmp	r3, #0
 800bad6:	d10a      	bne.n	800baee <xTimerGenericCommand+0x2e>
	__asm volatile
 800bad8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800badc:	f383 8811 	msr	BASEPRI, r3
 800bae0:	f3bf 8f6f 	isb	sy
 800bae4:	f3bf 8f4f 	dsb	sy
 800bae8:	623b      	str	r3, [r7, #32]
}
 800baea:	bf00      	nop
 800baec:	e7fe      	b.n	800baec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800baee:	4b1a      	ldr	r3, [pc, #104]	; (800bb58 <xTimerGenericCommand+0x98>)
 800baf0:	681b      	ldr	r3, [r3, #0]
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	d02a      	beq.n	800bb4c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800baf6:	68bb      	ldr	r3, [r7, #8]
 800baf8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bafa:	687b      	ldr	r3, [r7, #4]
 800bafc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bafe:	68fb      	ldr	r3, [r7, #12]
 800bb00:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	2b05      	cmp	r3, #5
 800bb06:	dc18      	bgt.n	800bb3a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bb08:	f7ff fdb4 	bl	800b674 <xTaskGetSchedulerState>
 800bb0c:	4603      	mov	r3, r0
 800bb0e:	2b02      	cmp	r3, #2
 800bb10:	d109      	bne.n	800bb26 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bb12:	4b11      	ldr	r3, [pc, #68]	; (800bb58 <xTimerGenericCommand+0x98>)
 800bb14:	6818      	ldr	r0, [r3, #0]
 800bb16:	f107 0110 	add.w	r1, r7, #16
 800bb1a:	2300      	movs	r3, #0
 800bb1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800bb1e:	f7fe f8fb 	bl	8009d18 <xQueueGenericSend>
 800bb22:	6278      	str	r0, [r7, #36]	; 0x24
 800bb24:	e012      	b.n	800bb4c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bb26:	4b0c      	ldr	r3, [pc, #48]	; (800bb58 <xTimerGenericCommand+0x98>)
 800bb28:	6818      	ldr	r0, [r3, #0]
 800bb2a:	f107 0110 	add.w	r1, r7, #16
 800bb2e:	2300      	movs	r3, #0
 800bb30:	2200      	movs	r2, #0
 800bb32:	f7fe f8f1 	bl	8009d18 <xQueueGenericSend>
 800bb36:	6278      	str	r0, [r7, #36]	; 0x24
 800bb38:	e008      	b.n	800bb4c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bb3a:	4b07      	ldr	r3, [pc, #28]	; (800bb58 <xTimerGenericCommand+0x98>)
 800bb3c:	6818      	ldr	r0, [r3, #0]
 800bb3e:	f107 0110 	add.w	r1, r7, #16
 800bb42:	2300      	movs	r3, #0
 800bb44:	683a      	ldr	r2, [r7, #0]
 800bb46:	f7fe f9e5 	bl	8009f14 <xQueueGenericSendFromISR>
 800bb4a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bb4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	3728      	adds	r7, #40	; 0x28
 800bb52:	46bd      	mov	sp, r7
 800bb54:	bd80      	pop	{r7, pc}
 800bb56:	bf00      	nop
 800bb58:	20001080 	.word	0x20001080

0800bb5c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bb5c:	b580      	push	{r7, lr}
 800bb5e:	b088      	sub	sp, #32
 800bb60:	af02      	add	r7, sp, #8
 800bb62:	6078      	str	r0, [r7, #4]
 800bb64:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bb66:	4b22      	ldr	r3, [pc, #136]	; (800bbf0 <prvProcessExpiredTimer+0x94>)
 800bb68:	681b      	ldr	r3, [r3, #0]
 800bb6a:	68db      	ldr	r3, [r3, #12]
 800bb6c:	68db      	ldr	r3, [r3, #12]
 800bb6e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bb70:	697b      	ldr	r3, [r7, #20]
 800bb72:	3304      	adds	r3, #4
 800bb74:	4618      	mov	r0, r3
 800bb76:	f7fd feb1 	bl	80098dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bb80:	f003 0304 	and.w	r3, r3, #4
 800bb84:	2b00      	cmp	r3, #0
 800bb86:	d022      	beq.n	800bbce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	699a      	ldr	r2, [r3, #24]
 800bb8c:	687b      	ldr	r3, [r7, #4]
 800bb8e:	18d1      	adds	r1, r2, r3
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	683a      	ldr	r2, [r7, #0]
 800bb94:	6978      	ldr	r0, [r7, #20]
 800bb96:	f000 f8d1 	bl	800bd3c <prvInsertTimerInActiveList>
 800bb9a:	4603      	mov	r3, r0
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d01f      	beq.n	800bbe0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bba0:	2300      	movs	r3, #0
 800bba2:	9300      	str	r3, [sp, #0]
 800bba4:	2300      	movs	r3, #0
 800bba6:	687a      	ldr	r2, [r7, #4]
 800bba8:	2100      	movs	r1, #0
 800bbaa:	6978      	ldr	r0, [r7, #20]
 800bbac:	f7ff ff88 	bl	800bac0 <xTimerGenericCommand>
 800bbb0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bbb2:	693b      	ldr	r3, [r7, #16]
 800bbb4:	2b00      	cmp	r3, #0
 800bbb6:	d113      	bne.n	800bbe0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800bbb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbbc:	f383 8811 	msr	BASEPRI, r3
 800bbc0:	f3bf 8f6f 	isb	sy
 800bbc4:	f3bf 8f4f 	dsb	sy
 800bbc8:	60fb      	str	r3, [r7, #12]
}
 800bbca:	bf00      	nop
 800bbcc:	e7fe      	b.n	800bbcc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bbce:	697b      	ldr	r3, [r7, #20]
 800bbd0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bbd4:	f023 0301 	bic.w	r3, r3, #1
 800bbd8:	b2da      	uxtb	r2, r3
 800bbda:	697b      	ldr	r3, [r7, #20]
 800bbdc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	6a1b      	ldr	r3, [r3, #32]
 800bbe4:	6978      	ldr	r0, [r7, #20]
 800bbe6:	4798      	blx	r3
}
 800bbe8:	bf00      	nop
 800bbea:	3718      	adds	r7, #24
 800bbec:	46bd      	mov	sp, r7
 800bbee:	bd80      	pop	{r7, pc}
 800bbf0:	20001078 	.word	0x20001078

0800bbf4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bbf4:	b580      	push	{r7, lr}
 800bbf6:	b084      	sub	sp, #16
 800bbf8:	af00      	add	r7, sp, #0
 800bbfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bbfc:	f107 0308 	add.w	r3, r7, #8
 800bc00:	4618      	mov	r0, r3
 800bc02:	f000 f857 	bl	800bcb4 <prvGetNextExpireTime>
 800bc06:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bc08:	68bb      	ldr	r3, [r7, #8]
 800bc0a:	4619      	mov	r1, r3
 800bc0c:	68f8      	ldr	r0, [r7, #12]
 800bc0e:	f000 f803 	bl	800bc18 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bc12:	f000 f8d5 	bl	800bdc0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bc16:	e7f1      	b.n	800bbfc <prvTimerTask+0x8>

0800bc18 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b084      	sub	sp, #16
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
 800bc20:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bc22:	f7ff f93b 	bl	800ae9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bc26:	f107 0308 	add.w	r3, r7, #8
 800bc2a:	4618      	mov	r0, r3
 800bc2c:	f000 f866 	bl	800bcfc <prvSampleTimeNow>
 800bc30:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bc32:	68bb      	ldr	r3, [r7, #8]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d130      	bne.n	800bc9a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bc38:	683b      	ldr	r3, [r7, #0]
 800bc3a:	2b00      	cmp	r3, #0
 800bc3c:	d10a      	bne.n	800bc54 <prvProcessTimerOrBlockTask+0x3c>
 800bc3e:	687a      	ldr	r2, [r7, #4]
 800bc40:	68fb      	ldr	r3, [r7, #12]
 800bc42:	429a      	cmp	r2, r3
 800bc44:	d806      	bhi.n	800bc54 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bc46:	f7ff f937 	bl	800aeb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bc4a:	68f9      	ldr	r1, [r7, #12]
 800bc4c:	6878      	ldr	r0, [r7, #4]
 800bc4e:	f7ff ff85 	bl	800bb5c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bc52:	e024      	b.n	800bc9e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	2b00      	cmp	r3, #0
 800bc58:	d008      	beq.n	800bc6c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bc5a:	4b13      	ldr	r3, [pc, #76]	; (800bca8 <prvProcessTimerOrBlockTask+0x90>)
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	681b      	ldr	r3, [r3, #0]
 800bc60:	2b00      	cmp	r3, #0
 800bc62:	d101      	bne.n	800bc68 <prvProcessTimerOrBlockTask+0x50>
 800bc64:	2301      	movs	r3, #1
 800bc66:	e000      	b.n	800bc6a <prvProcessTimerOrBlockTask+0x52>
 800bc68:	2300      	movs	r3, #0
 800bc6a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bc6c:	4b0f      	ldr	r3, [pc, #60]	; (800bcac <prvProcessTimerOrBlockTask+0x94>)
 800bc6e:	6818      	ldr	r0, [r3, #0]
 800bc70:	687a      	ldr	r2, [r7, #4]
 800bc72:	68fb      	ldr	r3, [r7, #12]
 800bc74:	1ad3      	subs	r3, r2, r3
 800bc76:	683a      	ldr	r2, [r7, #0]
 800bc78:	4619      	mov	r1, r3
 800bc7a:	f7fe fe7f 	bl	800a97c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bc7e:	f7ff f91b 	bl	800aeb8 <xTaskResumeAll>
 800bc82:	4603      	mov	r3, r0
 800bc84:	2b00      	cmp	r3, #0
 800bc86:	d10a      	bne.n	800bc9e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bc88:	4b09      	ldr	r3, [pc, #36]	; (800bcb0 <prvProcessTimerOrBlockTask+0x98>)
 800bc8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bc8e:	601a      	str	r2, [r3, #0]
 800bc90:	f3bf 8f4f 	dsb	sy
 800bc94:	f3bf 8f6f 	isb	sy
}
 800bc98:	e001      	b.n	800bc9e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bc9a:	f7ff f90d 	bl	800aeb8 <xTaskResumeAll>
}
 800bc9e:	bf00      	nop
 800bca0:	3710      	adds	r7, #16
 800bca2:	46bd      	mov	sp, r7
 800bca4:	bd80      	pop	{r7, pc}
 800bca6:	bf00      	nop
 800bca8:	2000107c 	.word	0x2000107c
 800bcac:	20001080 	.word	0x20001080
 800bcb0:	e000ed04 	.word	0xe000ed04

0800bcb4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b085      	sub	sp, #20
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bcbc:	4b0e      	ldr	r3, [pc, #56]	; (800bcf8 <prvGetNextExpireTime+0x44>)
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	681b      	ldr	r3, [r3, #0]
 800bcc2:	2b00      	cmp	r3, #0
 800bcc4:	d101      	bne.n	800bcca <prvGetNextExpireTime+0x16>
 800bcc6:	2201      	movs	r2, #1
 800bcc8:	e000      	b.n	800bccc <prvGetNextExpireTime+0x18>
 800bcca:	2200      	movs	r2, #0
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bcd0:	687b      	ldr	r3, [r7, #4]
 800bcd2:	681b      	ldr	r3, [r3, #0]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d105      	bne.n	800bce4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bcd8:	4b07      	ldr	r3, [pc, #28]	; (800bcf8 <prvGetNextExpireTime+0x44>)
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	68db      	ldr	r3, [r3, #12]
 800bcde:	681b      	ldr	r3, [r3, #0]
 800bce0:	60fb      	str	r3, [r7, #12]
 800bce2:	e001      	b.n	800bce8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bce4:	2300      	movs	r3, #0
 800bce6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bce8:	68fb      	ldr	r3, [r7, #12]
}
 800bcea:	4618      	mov	r0, r3
 800bcec:	3714      	adds	r7, #20
 800bcee:	46bd      	mov	sp, r7
 800bcf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcf4:	4770      	bx	lr
 800bcf6:	bf00      	nop
 800bcf8:	20001078 	.word	0x20001078

0800bcfc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bcfc:	b580      	push	{r7, lr}
 800bcfe:	b084      	sub	sp, #16
 800bd00:	af00      	add	r7, sp, #0
 800bd02:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bd04:	f7ff f976 	bl	800aff4 <xTaskGetTickCount>
 800bd08:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bd0a:	4b0b      	ldr	r3, [pc, #44]	; (800bd38 <prvSampleTimeNow+0x3c>)
 800bd0c:	681b      	ldr	r3, [r3, #0]
 800bd0e:	68fa      	ldr	r2, [r7, #12]
 800bd10:	429a      	cmp	r2, r3
 800bd12:	d205      	bcs.n	800bd20 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bd14:	f000 f936 	bl	800bf84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bd18:	687b      	ldr	r3, [r7, #4]
 800bd1a:	2201      	movs	r2, #1
 800bd1c:	601a      	str	r2, [r3, #0]
 800bd1e:	e002      	b.n	800bd26 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bd20:	687b      	ldr	r3, [r7, #4]
 800bd22:	2200      	movs	r2, #0
 800bd24:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bd26:	4a04      	ldr	r2, [pc, #16]	; (800bd38 <prvSampleTimeNow+0x3c>)
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
}
 800bd2e:	4618      	mov	r0, r3
 800bd30:	3710      	adds	r7, #16
 800bd32:	46bd      	mov	sp, r7
 800bd34:	bd80      	pop	{r7, pc}
 800bd36:	bf00      	nop
 800bd38:	20001088 	.word	0x20001088

0800bd3c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bd3c:	b580      	push	{r7, lr}
 800bd3e:	b086      	sub	sp, #24
 800bd40:	af00      	add	r7, sp, #0
 800bd42:	60f8      	str	r0, [r7, #12]
 800bd44:	60b9      	str	r1, [r7, #8]
 800bd46:	607a      	str	r2, [r7, #4]
 800bd48:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800bd4e:	68fb      	ldr	r3, [r7, #12]
 800bd50:	68ba      	ldr	r2, [r7, #8]
 800bd52:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bd54:	68fb      	ldr	r3, [r7, #12]
 800bd56:	68fa      	ldr	r2, [r7, #12]
 800bd58:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800bd5a:	68ba      	ldr	r2, [r7, #8]
 800bd5c:	687b      	ldr	r3, [r7, #4]
 800bd5e:	429a      	cmp	r2, r3
 800bd60:	d812      	bhi.n	800bd88 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bd62:	687a      	ldr	r2, [r7, #4]
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	1ad2      	subs	r2, r2, r3
 800bd68:	68fb      	ldr	r3, [r7, #12]
 800bd6a:	699b      	ldr	r3, [r3, #24]
 800bd6c:	429a      	cmp	r2, r3
 800bd6e:	d302      	bcc.n	800bd76 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800bd70:	2301      	movs	r3, #1
 800bd72:	617b      	str	r3, [r7, #20]
 800bd74:	e01b      	b.n	800bdae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800bd76:	4b10      	ldr	r3, [pc, #64]	; (800bdb8 <prvInsertTimerInActiveList+0x7c>)
 800bd78:	681a      	ldr	r2, [r3, #0]
 800bd7a:	68fb      	ldr	r3, [r7, #12]
 800bd7c:	3304      	adds	r3, #4
 800bd7e:	4619      	mov	r1, r3
 800bd80:	4610      	mov	r0, r2
 800bd82:	f7fd fd72 	bl	800986a <vListInsert>
 800bd86:	e012      	b.n	800bdae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800bd88:	687a      	ldr	r2, [r7, #4]
 800bd8a:	683b      	ldr	r3, [r7, #0]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d206      	bcs.n	800bd9e <prvInsertTimerInActiveList+0x62>
 800bd90:	68ba      	ldr	r2, [r7, #8]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	429a      	cmp	r2, r3
 800bd96:	d302      	bcc.n	800bd9e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800bd98:	2301      	movs	r3, #1
 800bd9a:	617b      	str	r3, [r7, #20]
 800bd9c:	e007      	b.n	800bdae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bd9e:	4b07      	ldr	r3, [pc, #28]	; (800bdbc <prvInsertTimerInActiveList+0x80>)
 800bda0:	681a      	ldr	r2, [r3, #0]
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	3304      	adds	r3, #4
 800bda6:	4619      	mov	r1, r3
 800bda8:	4610      	mov	r0, r2
 800bdaa:	f7fd fd5e 	bl	800986a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800bdae:	697b      	ldr	r3, [r7, #20]
}
 800bdb0:	4618      	mov	r0, r3
 800bdb2:	3718      	adds	r7, #24
 800bdb4:	46bd      	mov	sp, r7
 800bdb6:	bd80      	pop	{r7, pc}
 800bdb8:	2000107c 	.word	0x2000107c
 800bdbc:	20001078 	.word	0x20001078

0800bdc0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b08e      	sub	sp, #56	; 0x38
 800bdc4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bdc6:	e0ca      	b.n	800bf5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	da18      	bge.n	800be00 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800bdce:	1d3b      	adds	r3, r7, #4
 800bdd0:	3304      	adds	r3, #4
 800bdd2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800bdd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdd6:	2b00      	cmp	r3, #0
 800bdd8:	d10a      	bne.n	800bdf0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800bdda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdde:	f383 8811 	msr	BASEPRI, r3
 800bde2:	f3bf 8f6f 	isb	sy
 800bde6:	f3bf 8f4f 	dsb	sy
 800bdea:	61fb      	str	r3, [r7, #28]
}
 800bdec:	bf00      	nop
 800bdee:	e7fe      	b.n	800bdee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800bdf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bdf2:	681b      	ldr	r3, [r3, #0]
 800bdf4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdf6:	6850      	ldr	r0, [r2, #4]
 800bdf8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800bdfa:	6892      	ldr	r2, [r2, #8]
 800bdfc:	4611      	mov	r1, r2
 800bdfe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	f2c0 80aa 	blt.w	800bf5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800be0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be0e:	695b      	ldr	r3, [r3, #20]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d004      	beq.n	800be1e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be16:	3304      	adds	r3, #4
 800be18:	4618      	mov	r0, r3
 800be1a:	f7fd fd5f 	bl	80098dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800be1e:	463b      	mov	r3, r7
 800be20:	4618      	mov	r0, r3
 800be22:	f7ff ff6b 	bl	800bcfc <prvSampleTimeNow>
 800be26:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2b09      	cmp	r3, #9
 800be2c:	f200 8097 	bhi.w	800bf5e <prvProcessReceivedCommands+0x19e>
 800be30:	a201      	add	r2, pc, #4	; (adr r2, 800be38 <prvProcessReceivedCommands+0x78>)
 800be32:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800be36:	bf00      	nop
 800be38:	0800be61 	.word	0x0800be61
 800be3c:	0800be61 	.word	0x0800be61
 800be40:	0800be61 	.word	0x0800be61
 800be44:	0800bed5 	.word	0x0800bed5
 800be48:	0800bee9 	.word	0x0800bee9
 800be4c:	0800bf33 	.word	0x0800bf33
 800be50:	0800be61 	.word	0x0800be61
 800be54:	0800be61 	.word	0x0800be61
 800be58:	0800bed5 	.word	0x0800bed5
 800be5c:	0800bee9 	.word	0x0800bee9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800be60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be62:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be66:	f043 0301 	orr.w	r3, r3, #1
 800be6a:	b2da      	uxtb	r2, r3
 800be6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be6e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800be72:	68ba      	ldr	r2, [r7, #8]
 800be74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be76:	699b      	ldr	r3, [r3, #24]
 800be78:	18d1      	adds	r1, r2, r3
 800be7a:	68bb      	ldr	r3, [r7, #8]
 800be7c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800be7e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be80:	f7ff ff5c 	bl	800bd3c <prvInsertTimerInActiveList>
 800be84:	4603      	mov	r3, r0
 800be86:	2b00      	cmp	r3, #0
 800be88:	d069      	beq.n	800bf5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be8c:	6a1b      	ldr	r3, [r3, #32]
 800be8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800be90:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800be94:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800be98:	f003 0304 	and.w	r3, r3, #4
 800be9c:	2b00      	cmp	r3, #0
 800be9e:	d05e      	beq.n	800bf5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800bea0:	68ba      	ldr	r2, [r7, #8]
 800bea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bea4:	699b      	ldr	r3, [r3, #24]
 800bea6:	441a      	add	r2, r3
 800bea8:	2300      	movs	r3, #0
 800beaa:	9300      	str	r3, [sp, #0]
 800beac:	2300      	movs	r3, #0
 800beae:	2100      	movs	r1, #0
 800beb0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800beb2:	f7ff fe05 	bl	800bac0 <xTimerGenericCommand>
 800beb6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800beb8:	6a3b      	ldr	r3, [r7, #32]
 800beba:	2b00      	cmp	r3, #0
 800bebc:	d14f      	bne.n	800bf5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800bebe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bec2:	f383 8811 	msr	BASEPRI, r3
 800bec6:	f3bf 8f6f 	isb	sy
 800beca:	f3bf 8f4f 	dsb	sy
 800bece:	61bb      	str	r3, [r7, #24]
}
 800bed0:	bf00      	nop
 800bed2:	e7fe      	b.n	800bed2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bed6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800beda:	f023 0301 	bic.w	r3, r3, #1
 800bede:	b2da      	uxtb	r2, r3
 800bee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bee2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800bee6:	e03a      	b.n	800bf5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800bee8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800beea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800beee:	f043 0301 	orr.w	r3, r3, #1
 800bef2:	b2da      	uxtb	r2, r3
 800bef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bef6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800befa:	68ba      	ldr	r2, [r7, #8]
 800befc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800befe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800bf00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf02:	699b      	ldr	r3, [r3, #24]
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d10a      	bne.n	800bf1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800bf08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0c:	f383 8811 	msr	BASEPRI, r3
 800bf10:	f3bf 8f6f 	isb	sy
 800bf14:	f3bf 8f4f 	dsb	sy
 800bf18:	617b      	str	r3, [r7, #20]
}
 800bf1a:	bf00      	nop
 800bf1c:	e7fe      	b.n	800bf1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800bf1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf20:	699a      	ldr	r2, [r3, #24]
 800bf22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf24:	18d1      	adds	r1, r2, r3
 800bf26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf2c:	f7ff ff06 	bl	800bd3c <prvInsertTimerInActiveList>
					break;
 800bf30:	e015      	b.n	800bf5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800bf32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf38:	f003 0302 	and.w	r3, r3, #2
 800bf3c:	2b00      	cmp	r3, #0
 800bf3e:	d103      	bne.n	800bf48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800bf40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800bf42:	f000 fbdd 	bl	800c700 <vPortFree>
 800bf46:	e00a      	b.n	800bf5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bf48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bf4e:	f023 0301 	bic.w	r3, r3, #1
 800bf52:	b2da      	uxtb	r2, r3
 800bf54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800bf56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800bf5a:	e000      	b.n	800bf5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800bf5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800bf5e:	4b08      	ldr	r3, [pc, #32]	; (800bf80 <prvProcessReceivedCommands+0x1c0>)
 800bf60:	681b      	ldr	r3, [r3, #0]
 800bf62:	1d39      	adds	r1, r7, #4
 800bf64:	2200      	movs	r2, #0
 800bf66:	4618      	mov	r0, r3
 800bf68:	f7fe f8fc 	bl	800a164 <xQueueReceive>
 800bf6c:	4603      	mov	r3, r0
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	f47f af2a 	bne.w	800bdc8 <prvProcessReceivedCommands+0x8>
	}
}
 800bf74:	bf00      	nop
 800bf76:	bf00      	nop
 800bf78:	3730      	adds	r7, #48	; 0x30
 800bf7a:	46bd      	mov	sp, r7
 800bf7c:	bd80      	pop	{r7, pc}
 800bf7e:	bf00      	nop
 800bf80:	20001080 	.word	0x20001080

0800bf84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800bf84:	b580      	push	{r7, lr}
 800bf86:	b088      	sub	sp, #32
 800bf88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800bf8a:	e048      	b.n	800c01e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf8c:	4b2d      	ldr	r3, [pc, #180]	; (800c044 <prvSwitchTimerLists+0xc0>)
 800bf8e:	681b      	ldr	r3, [r3, #0]
 800bf90:	68db      	ldr	r3, [r3, #12]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf96:	4b2b      	ldr	r3, [pc, #172]	; (800c044 <prvSwitchTimerLists+0xc0>)
 800bf98:	681b      	ldr	r3, [r3, #0]
 800bf9a:	68db      	ldr	r3, [r3, #12]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	3304      	adds	r3, #4
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f7fd fc99 	bl	80098dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfaa:	68fb      	ldr	r3, [r7, #12]
 800bfac:	6a1b      	ldr	r3, [r3, #32]
 800bfae:	68f8      	ldr	r0, [r7, #12]
 800bfb0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800bfb8:	f003 0304 	and.w	r3, r3, #4
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d02e      	beq.n	800c01e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800bfc0:	68fb      	ldr	r3, [r7, #12]
 800bfc2:	699b      	ldr	r3, [r3, #24]
 800bfc4:	693a      	ldr	r2, [r7, #16]
 800bfc6:	4413      	add	r3, r2
 800bfc8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800bfca:	68ba      	ldr	r2, [r7, #8]
 800bfcc:	693b      	ldr	r3, [r7, #16]
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d90e      	bls.n	800bff0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800bfd2:	68fb      	ldr	r3, [r7, #12]
 800bfd4:	68ba      	ldr	r2, [r7, #8]
 800bfd6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	68fa      	ldr	r2, [r7, #12]
 800bfdc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800bfde:	4b19      	ldr	r3, [pc, #100]	; (800c044 <prvSwitchTimerLists+0xc0>)
 800bfe0:	681a      	ldr	r2, [r3, #0]
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	3304      	adds	r3, #4
 800bfe6:	4619      	mov	r1, r3
 800bfe8:	4610      	mov	r0, r2
 800bfea:	f7fd fc3e 	bl	800986a <vListInsert>
 800bfee:	e016      	b.n	800c01e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bff0:	2300      	movs	r3, #0
 800bff2:	9300      	str	r3, [sp, #0]
 800bff4:	2300      	movs	r3, #0
 800bff6:	693a      	ldr	r2, [r7, #16]
 800bff8:	2100      	movs	r1, #0
 800bffa:	68f8      	ldr	r0, [r7, #12]
 800bffc:	f7ff fd60 	bl	800bac0 <xTimerGenericCommand>
 800c000:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	2b00      	cmp	r3, #0
 800c006:	d10a      	bne.n	800c01e <prvSwitchTimerLists+0x9a>
	__asm volatile
 800c008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c00c:	f383 8811 	msr	BASEPRI, r3
 800c010:	f3bf 8f6f 	isb	sy
 800c014:	f3bf 8f4f 	dsb	sy
 800c018:	603b      	str	r3, [r7, #0]
}
 800c01a:	bf00      	nop
 800c01c:	e7fe      	b.n	800c01c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c01e:	4b09      	ldr	r3, [pc, #36]	; (800c044 <prvSwitchTimerLists+0xc0>)
 800c020:	681b      	ldr	r3, [r3, #0]
 800c022:	681b      	ldr	r3, [r3, #0]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d1b1      	bne.n	800bf8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c028:	4b06      	ldr	r3, [pc, #24]	; (800c044 <prvSwitchTimerLists+0xc0>)
 800c02a:	681b      	ldr	r3, [r3, #0]
 800c02c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c02e:	4b06      	ldr	r3, [pc, #24]	; (800c048 <prvSwitchTimerLists+0xc4>)
 800c030:	681b      	ldr	r3, [r3, #0]
 800c032:	4a04      	ldr	r2, [pc, #16]	; (800c044 <prvSwitchTimerLists+0xc0>)
 800c034:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c036:	4a04      	ldr	r2, [pc, #16]	; (800c048 <prvSwitchTimerLists+0xc4>)
 800c038:	697b      	ldr	r3, [r7, #20]
 800c03a:	6013      	str	r3, [r2, #0]
}
 800c03c:	bf00      	nop
 800c03e:	3718      	adds	r7, #24
 800c040:	46bd      	mov	sp, r7
 800c042:	bd80      	pop	{r7, pc}
 800c044:	20001078 	.word	0x20001078
 800c048:	2000107c 	.word	0x2000107c

0800c04c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c04c:	b580      	push	{r7, lr}
 800c04e:	b082      	sub	sp, #8
 800c050:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c052:	f000 f967 	bl	800c324 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c056:	4b15      	ldr	r3, [pc, #84]	; (800c0ac <prvCheckForValidListAndQueue+0x60>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d120      	bne.n	800c0a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c05e:	4814      	ldr	r0, [pc, #80]	; (800c0b0 <prvCheckForValidListAndQueue+0x64>)
 800c060:	f7fd fbb2 	bl	80097c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c064:	4813      	ldr	r0, [pc, #76]	; (800c0b4 <prvCheckForValidListAndQueue+0x68>)
 800c066:	f7fd fbaf 	bl	80097c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c06a:	4b13      	ldr	r3, [pc, #76]	; (800c0b8 <prvCheckForValidListAndQueue+0x6c>)
 800c06c:	4a10      	ldr	r2, [pc, #64]	; (800c0b0 <prvCheckForValidListAndQueue+0x64>)
 800c06e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c070:	4b12      	ldr	r3, [pc, #72]	; (800c0bc <prvCheckForValidListAndQueue+0x70>)
 800c072:	4a10      	ldr	r2, [pc, #64]	; (800c0b4 <prvCheckForValidListAndQueue+0x68>)
 800c074:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c076:	2300      	movs	r3, #0
 800c078:	9300      	str	r3, [sp, #0]
 800c07a:	4b11      	ldr	r3, [pc, #68]	; (800c0c0 <prvCheckForValidListAndQueue+0x74>)
 800c07c:	4a11      	ldr	r2, [pc, #68]	; (800c0c4 <prvCheckForValidListAndQueue+0x78>)
 800c07e:	2110      	movs	r1, #16
 800c080:	200a      	movs	r0, #10
 800c082:	f7fd fcbd 	bl	8009a00 <xQueueGenericCreateStatic>
 800c086:	4603      	mov	r3, r0
 800c088:	4a08      	ldr	r2, [pc, #32]	; (800c0ac <prvCheckForValidListAndQueue+0x60>)
 800c08a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c08c:	4b07      	ldr	r3, [pc, #28]	; (800c0ac <prvCheckForValidListAndQueue+0x60>)
 800c08e:	681b      	ldr	r3, [r3, #0]
 800c090:	2b00      	cmp	r3, #0
 800c092:	d005      	beq.n	800c0a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c094:	4b05      	ldr	r3, [pc, #20]	; (800c0ac <prvCheckForValidListAndQueue+0x60>)
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	490b      	ldr	r1, [pc, #44]	; (800c0c8 <prvCheckForValidListAndQueue+0x7c>)
 800c09a:	4618      	mov	r0, r3
 800c09c:	f7fe fc1a 	bl	800a8d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c0a0:	f000 f970 	bl	800c384 <vPortExitCritical>
}
 800c0a4:	bf00      	nop
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	20001080 	.word	0x20001080
 800c0b0:	20001050 	.word	0x20001050
 800c0b4:	20001064 	.word	0x20001064
 800c0b8:	20001078 	.word	0x20001078
 800c0bc:	2000107c 	.word	0x2000107c
 800c0c0:	2000112c 	.word	0x2000112c
 800c0c4:	2000108c 	.word	0x2000108c
 800c0c8:	0800d424 	.word	0x0800d424

0800c0cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c0cc:	b480      	push	{r7}
 800c0ce:	b085      	sub	sp, #20
 800c0d0:	af00      	add	r7, sp, #0
 800c0d2:	60f8      	str	r0, [r7, #12]
 800c0d4:	60b9      	str	r1, [r7, #8]
 800c0d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c0d8:	68fb      	ldr	r3, [r7, #12]
 800c0da:	3b04      	subs	r3, #4
 800c0dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c0de:	68fb      	ldr	r3, [r7, #12]
 800c0e0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800c0e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	3b04      	subs	r3, #4
 800c0ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c0ec:	68bb      	ldr	r3, [r7, #8]
 800c0ee:	f023 0201 	bic.w	r2, r3, #1
 800c0f2:	68fb      	ldr	r3, [r7, #12]
 800c0f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	3b04      	subs	r3, #4
 800c0fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c0fc:	4a0c      	ldr	r2, [pc, #48]	; (800c130 <pxPortInitialiseStack+0x64>)
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	3b14      	subs	r3, #20
 800c106:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c108:	687a      	ldr	r2, [r7, #4]
 800c10a:	68fb      	ldr	r3, [r7, #12]
 800c10c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c10e:	68fb      	ldr	r3, [r7, #12]
 800c110:	3b04      	subs	r3, #4
 800c112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c114:	68fb      	ldr	r3, [r7, #12]
 800c116:	f06f 0202 	mvn.w	r2, #2
 800c11a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c11c:	68fb      	ldr	r3, [r7, #12]
 800c11e:	3b20      	subs	r3, #32
 800c120:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c122:	68fb      	ldr	r3, [r7, #12]
}
 800c124:	4618      	mov	r0, r3
 800c126:	3714      	adds	r7, #20
 800c128:	46bd      	mov	sp, r7
 800c12a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c12e:	4770      	bx	lr
 800c130:	0800c135 	.word	0x0800c135

0800c134 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c134:	b480      	push	{r7}
 800c136:	b085      	sub	sp, #20
 800c138:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c13a:	2300      	movs	r3, #0
 800c13c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c13e:	4b12      	ldr	r3, [pc, #72]	; (800c188 <prvTaskExitError+0x54>)
 800c140:	681b      	ldr	r3, [r3, #0]
 800c142:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c146:	d00a      	beq.n	800c15e <prvTaskExitError+0x2a>
	__asm volatile
 800c148:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c14c:	f383 8811 	msr	BASEPRI, r3
 800c150:	f3bf 8f6f 	isb	sy
 800c154:	f3bf 8f4f 	dsb	sy
 800c158:	60fb      	str	r3, [r7, #12]
}
 800c15a:	bf00      	nop
 800c15c:	e7fe      	b.n	800c15c <prvTaskExitError+0x28>
	__asm volatile
 800c15e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c162:	f383 8811 	msr	BASEPRI, r3
 800c166:	f3bf 8f6f 	isb	sy
 800c16a:	f3bf 8f4f 	dsb	sy
 800c16e:	60bb      	str	r3, [r7, #8]
}
 800c170:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c172:	bf00      	nop
 800c174:	687b      	ldr	r3, [r7, #4]
 800c176:	2b00      	cmp	r3, #0
 800c178:	d0fc      	beq.n	800c174 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c17a:	bf00      	nop
 800c17c:	bf00      	nop
 800c17e:	3714      	adds	r7, #20
 800c180:	46bd      	mov	sp, r7
 800c182:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c186:	4770      	bx	lr
 800c188:	20000040 	.word	0x20000040
 800c18c:	00000000 	.word	0x00000000

0800c190 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c190:	4b07      	ldr	r3, [pc, #28]	; (800c1b0 <pxCurrentTCBConst2>)
 800c192:	6819      	ldr	r1, [r3, #0]
 800c194:	6808      	ldr	r0, [r1, #0]
 800c196:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c19a:	f380 8809 	msr	PSP, r0
 800c19e:	f3bf 8f6f 	isb	sy
 800c1a2:	f04f 0000 	mov.w	r0, #0
 800c1a6:	f380 8811 	msr	BASEPRI, r0
 800c1aa:	4770      	bx	lr
 800c1ac:	f3af 8000 	nop.w

0800c1b0 <pxCurrentTCBConst2>:
 800c1b0:	20000b50 	.word	0x20000b50
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c1b4:	bf00      	nop
 800c1b6:	bf00      	nop

0800c1b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c1b8:	4808      	ldr	r0, [pc, #32]	; (800c1dc <prvPortStartFirstTask+0x24>)
 800c1ba:	6800      	ldr	r0, [r0, #0]
 800c1bc:	6800      	ldr	r0, [r0, #0]
 800c1be:	f380 8808 	msr	MSP, r0
 800c1c2:	f04f 0000 	mov.w	r0, #0
 800c1c6:	f380 8814 	msr	CONTROL, r0
 800c1ca:	b662      	cpsie	i
 800c1cc:	b661      	cpsie	f
 800c1ce:	f3bf 8f4f 	dsb	sy
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	df00      	svc	0
 800c1d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c1da:	bf00      	nop
 800c1dc:	e000ed08 	.word	0xe000ed08

0800c1e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c1e0:	b580      	push	{r7, lr}
 800c1e2:	b086      	sub	sp, #24
 800c1e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c1e6:	4b46      	ldr	r3, [pc, #280]	; (800c300 <xPortStartScheduler+0x120>)
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	4a46      	ldr	r2, [pc, #280]	; (800c304 <xPortStartScheduler+0x124>)
 800c1ec:	4293      	cmp	r3, r2
 800c1ee:	d10a      	bne.n	800c206 <xPortStartScheduler+0x26>
	__asm volatile
 800c1f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1f4:	f383 8811 	msr	BASEPRI, r3
 800c1f8:	f3bf 8f6f 	isb	sy
 800c1fc:	f3bf 8f4f 	dsb	sy
 800c200:	613b      	str	r3, [r7, #16]
}
 800c202:	bf00      	nop
 800c204:	e7fe      	b.n	800c204 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c206:	4b3e      	ldr	r3, [pc, #248]	; (800c300 <xPortStartScheduler+0x120>)
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	4a3f      	ldr	r2, [pc, #252]	; (800c308 <xPortStartScheduler+0x128>)
 800c20c:	4293      	cmp	r3, r2
 800c20e:	d10a      	bne.n	800c226 <xPortStartScheduler+0x46>
	__asm volatile
 800c210:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c214:	f383 8811 	msr	BASEPRI, r3
 800c218:	f3bf 8f6f 	isb	sy
 800c21c:	f3bf 8f4f 	dsb	sy
 800c220:	60fb      	str	r3, [r7, #12]
}
 800c222:	bf00      	nop
 800c224:	e7fe      	b.n	800c224 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c226:	4b39      	ldr	r3, [pc, #228]	; (800c30c <xPortStartScheduler+0x12c>)
 800c228:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c22a:	697b      	ldr	r3, [r7, #20]
 800c22c:	781b      	ldrb	r3, [r3, #0]
 800c22e:	b2db      	uxtb	r3, r3
 800c230:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c232:	697b      	ldr	r3, [r7, #20]
 800c234:	22ff      	movs	r2, #255	; 0xff
 800c236:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c238:	697b      	ldr	r3, [r7, #20]
 800c23a:	781b      	ldrb	r3, [r3, #0]
 800c23c:	b2db      	uxtb	r3, r3
 800c23e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c240:	78fb      	ldrb	r3, [r7, #3]
 800c242:	b2db      	uxtb	r3, r3
 800c244:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800c248:	b2da      	uxtb	r2, r3
 800c24a:	4b31      	ldr	r3, [pc, #196]	; (800c310 <xPortStartScheduler+0x130>)
 800c24c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c24e:	4b31      	ldr	r3, [pc, #196]	; (800c314 <xPortStartScheduler+0x134>)
 800c250:	2207      	movs	r2, #7
 800c252:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c254:	e009      	b.n	800c26a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800c256:	4b2f      	ldr	r3, [pc, #188]	; (800c314 <xPortStartScheduler+0x134>)
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	3b01      	subs	r3, #1
 800c25c:	4a2d      	ldr	r2, [pc, #180]	; (800c314 <xPortStartScheduler+0x134>)
 800c25e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c260:	78fb      	ldrb	r3, [r7, #3]
 800c262:	b2db      	uxtb	r3, r3
 800c264:	005b      	lsls	r3, r3, #1
 800c266:	b2db      	uxtb	r3, r3
 800c268:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c26a:	78fb      	ldrb	r3, [r7, #3]
 800c26c:	b2db      	uxtb	r3, r3
 800c26e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c272:	2b80      	cmp	r3, #128	; 0x80
 800c274:	d0ef      	beq.n	800c256 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c276:	4b27      	ldr	r3, [pc, #156]	; (800c314 <xPortStartScheduler+0x134>)
 800c278:	681b      	ldr	r3, [r3, #0]
 800c27a:	f1c3 0307 	rsb	r3, r3, #7
 800c27e:	2b04      	cmp	r3, #4
 800c280:	d00a      	beq.n	800c298 <xPortStartScheduler+0xb8>
	__asm volatile
 800c282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c286:	f383 8811 	msr	BASEPRI, r3
 800c28a:	f3bf 8f6f 	isb	sy
 800c28e:	f3bf 8f4f 	dsb	sy
 800c292:	60bb      	str	r3, [r7, #8]
}
 800c294:	bf00      	nop
 800c296:	e7fe      	b.n	800c296 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c298:	4b1e      	ldr	r3, [pc, #120]	; (800c314 <xPortStartScheduler+0x134>)
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	021b      	lsls	r3, r3, #8
 800c29e:	4a1d      	ldr	r2, [pc, #116]	; (800c314 <xPortStartScheduler+0x134>)
 800c2a0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c2a2:	4b1c      	ldr	r3, [pc, #112]	; (800c314 <xPortStartScheduler+0x134>)
 800c2a4:	681b      	ldr	r3, [r3, #0]
 800c2a6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800c2aa:	4a1a      	ldr	r2, [pc, #104]	; (800c314 <xPortStartScheduler+0x134>)
 800c2ac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c2ae:	687b      	ldr	r3, [r7, #4]
 800c2b0:	b2da      	uxtb	r2, r3
 800c2b2:	697b      	ldr	r3, [r7, #20]
 800c2b4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c2b6:	4b18      	ldr	r3, [pc, #96]	; (800c318 <xPortStartScheduler+0x138>)
 800c2b8:	681b      	ldr	r3, [r3, #0]
 800c2ba:	4a17      	ldr	r2, [pc, #92]	; (800c318 <xPortStartScheduler+0x138>)
 800c2bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800c2c0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c2c2:	4b15      	ldr	r3, [pc, #84]	; (800c318 <xPortStartScheduler+0x138>)
 800c2c4:	681b      	ldr	r3, [r3, #0]
 800c2c6:	4a14      	ldr	r2, [pc, #80]	; (800c318 <xPortStartScheduler+0x138>)
 800c2c8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800c2cc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c2ce:	f000 f8dd 	bl	800c48c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c2d2:	4b12      	ldr	r3, [pc, #72]	; (800c31c <xPortStartScheduler+0x13c>)
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c2d8:	f000 f8fc 	bl	800c4d4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c2dc:	4b10      	ldr	r3, [pc, #64]	; (800c320 <xPortStartScheduler+0x140>)
 800c2de:	681b      	ldr	r3, [r3, #0]
 800c2e0:	4a0f      	ldr	r2, [pc, #60]	; (800c320 <xPortStartScheduler+0x140>)
 800c2e2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800c2e6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c2e8:	f7ff ff66 	bl	800c1b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c2ec:	f7fe ff4c 	bl	800b188 <vTaskSwitchContext>
	prvTaskExitError();
 800c2f0:	f7ff ff20 	bl	800c134 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c2f4:	2300      	movs	r3, #0
}
 800c2f6:	4618      	mov	r0, r3
 800c2f8:	3718      	adds	r7, #24
 800c2fa:	46bd      	mov	sp, r7
 800c2fc:	bd80      	pop	{r7, pc}
 800c2fe:	bf00      	nop
 800c300:	e000ed00 	.word	0xe000ed00
 800c304:	410fc271 	.word	0x410fc271
 800c308:	410fc270 	.word	0x410fc270
 800c30c:	e000e400 	.word	0xe000e400
 800c310:	2000117c 	.word	0x2000117c
 800c314:	20001180 	.word	0x20001180
 800c318:	e000ed20 	.word	0xe000ed20
 800c31c:	20000040 	.word	0x20000040
 800c320:	e000ef34 	.word	0xe000ef34

0800c324 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c324:	b480      	push	{r7}
 800c326:	b083      	sub	sp, #12
 800c328:	af00      	add	r7, sp, #0
	__asm volatile
 800c32a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c32e:	f383 8811 	msr	BASEPRI, r3
 800c332:	f3bf 8f6f 	isb	sy
 800c336:	f3bf 8f4f 	dsb	sy
 800c33a:	607b      	str	r3, [r7, #4]
}
 800c33c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c33e:	4b0f      	ldr	r3, [pc, #60]	; (800c37c <vPortEnterCritical+0x58>)
 800c340:	681b      	ldr	r3, [r3, #0]
 800c342:	3301      	adds	r3, #1
 800c344:	4a0d      	ldr	r2, [pc, #52]	; (800c37c <vPortEnterCritical+0x58>)
 800c346:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c348:	4b0c      	ldr	r3, [pc, #48]	; (800c37c <vPortEnterCritical+0x58>)
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	2b01      	cmp	r3, #1
 800c34e:	d10f      	bne.n	800c370 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c350:	4b0b      	ldr	r3, [pc, #44]	; (800c380 <vPortEnterCritical+0x5c>)
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	b2db      	uxtb	r3, r3
 800c356:	2b00      	cmp	r3, #0
 800c358:	d00a      	beq.n	800c370 <vPortEnterCritical+0x4c>
	__asm volatile
 800c35a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c35e:	f383 8811 	msr	BASEPRI, r3
 800c362:	f3bf 8f6f 	isb	sy
 800c366:	f3bf 8f4f 	dsb	sy
 800c36a:	603b      	str	r3, [r7, #0]
}
 800c36c:	bf00      	nop
 800c36e:	e7fe      	b.n	800c36e <vPortEnterCritical+0x4a>
	}
}
 800c370:	bf00      	nop
 800c372:	370c      	adds	r7, #12
 800c374:	46bd      	mov	sp, r7
 800c376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c37a:	4770      	bx	lr
 800c37c:	20000040 	.word	0x20000040
 800c380:	e000ed04 	.word	0xe000ed04

0800c384 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c384:	b480      	push	{r7}
 800c386:	b083      	sub	sp, #12
 800c388:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c38a:	4b12      	ldr	r3, [pc, #72]	; (800c3d4 <vPortExitCritical+0x50>)
 800c38c:	681b      	ldr	r3, [r3, #0]
 800c38e:	2b00      	cmp	r3, #0
 800c390:	d10a      	bne.n	800c3a8 <vPortExitCritical+0x24>
	__asm volatile
 800c392:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c396:	f383 8811 	msr	BASEPRI, r3
 800c39a:	f3bf 8f6f 	isb	sy
 800c39e:	f3bf 8f4f 	dsb	sy
 800c3a2:	607b      	str	r3, [r7, #4]
}
 800c3a4:	bf00      	nop
 800c3a6:	e7fe      	b.n	800c3a6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c3a8:	4b0a      	ldr	r3, [pc, #40]	; (800c3d4 <vPortExitCritical+0x50>)
 800c3aa:	681b      	ldr	r3, [r3, #0]
 800c3ac:	3b01      	subs	r3, #1
 800c3ae:	4a09      	ldr	r2, [pc, #36]	; (800c3d4 <vPortExitCritical+0x50>)
 800c3b0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c3b2:	4b08      	ldr	r3, [pc, #32]	; (800c3d4 <vPortExitCritical+0x50>)
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d105      	bne.n	800c3c6 <vPortExitCritical+0x42>
 800c3ba:	2300      	movs	r3, #0
 800c3bc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c3be:	683b      	ldr	r3, [r7, #0]
 800c3c0:	f383 8811 	msr	BASEPRI, r3
}
 800c3c4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c3c6:	bf00      	nop
 800c3c8:	370c      	adds	r7, #12
 800c3ca:	46bd      	mov	sp, r7
 800c3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3d0:	4770      	bx	lr
 800c3d2:	bf00      	nop
 800c3d4:	20000040 	.word	0x20000040
	...

0800c3e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c3e0:	f3ef 8009 	mrs	r0, PSP
 800c3e4:	f3bf 8f6f 	isb	sy
 800c3e8:	4b15      	ldr	r3, [pc, #84]	; (800c440 <pxCurrentTCBConst>)
 800c3ea:	681a      	ldr	r2, [r3, #0]
 800c3ec:	f01e 0f10 	tst.w	lr, #16
 800c3f0:	bf08      	it	eq
 800c3f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c3f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c3fa:	6010      	str	r0, [r2, #0]
 800c3fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c400:	f04f 0050 	mov.w	r0, #80	; 0x50
 800c404:	f380 8811 	msr	BASEPRI, r0
 800c408:	f3bf 8f4f 	dsb	sy
 800c40c:	f3bf 8f6f 	isb	sy
 800c410:	f7fe feba 	bl	800b188 <vTaskSwitchContext>
 800c414:	f04f 0000 	mov.w	r0, #0
 800c418:	f380 8811 	msr	BASEPRI, r0
 800c41c:	bc09      	pop	{r0, r3}
 800c41e:	6819      	ldr	r1, [r3, #0]
 800c420:	6808      	ldr	r0, [r1, #0]
 800c422:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c426:	f01e 0f10 	tst.w	lr, #16
 800c42a:	bf08      	it	eq
 800c42c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c430:	f380 8809 	msr	PSP, r0
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	4770      	bx	lr
 800c43a:	bf00      	nop
 800c43c:	f3af 8000 	nop.w

0800c440 <pxCurrentTCBConst>:
 800c440:	20000b50 	.word	0x20000b50
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c444:	bf00      	nop
 800c446:	bf00      	nop

0800c448 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c448:	b580      	push	{r7, lr}
 800c44a:	b082      	sub	sp, #8
 800c44c:	af00      	add	r7, sp, #0
	__asm volatile
 800c44e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c452:	f383 8811 	msr	BASEPRI, r3
 800c456:	f3bf 8f6f 	isb	sy
 800c45a:	f3bf 8f4f 	dsb	sy
 800c45e:	607b      	str	r3, [r7, #4]
}
 800c460:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c462:	f7fe fdd7 	bl	800b014 <xTaskIncrementTick>
 800c466:	4603      	mov	r3, r0
 800c468:	2b00      	cmp	r3, #0
 800c46a:	d003      	beq.n	800c474 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c46c:	4b06      	ldr	r3, [pc, #24]	; (800c488 <xPortSysTickHandler+0x40>)
 800c46e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c472:	601a      	str	r2, [r3, #0]
 800c474:	2300      	movs	r3, #0
 800c476:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c478:	683b      	ldr	r3, [r7, #0]
 800c47a:	f383 8811 	msr	BASEPRI, r3
}
 800c47e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c480:	bf00      	nop
 800c482:	3708      	adds	r7, #8
 800c484:	46bd      	mov	sp, r7
 800c486:	bd80      	pop	{r7, pc}
 800c488:	e000ed04 	.word	0xe000ed04

0800c48c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c48c:	b480      	push	{r7}
 800c48e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c490:	4b0b      	ldr	r3, [pc, #44]	; (800c4c0 <vPortSetupTimerInterrupt+0x34>)
 800c492:	2200      	movs	r2, #0
 800c494:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c496:	4b0b      	ldr	r3, [pc, #44]	; (800c4c4 <vPortSetupTimerInterrupt+0x38>)
 800c498:	2200      	movs	r2, #0
 800c49a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c49c:	4b0a      	ldr	r3, [pc, #40]	; (800c4c8 <vPortSetupTimerInterrupt+0x3c>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	4a0a      	ldr	r2, [pc, #40]	; (800c4cc <vPortSetupTimerInterrupt+0x40>)
 800c4a2:	fba2 2303 	umull	r2, r3, r2, r3
 800c4a6:	099b      	lsrs	r3, r3, #6
 800c4a8:	4a09      	ldr	r2, [pc, #36]	; (800c4d0 <vPortSetupTimerInterrupt+0x44>)
 800c4aa:	3b01      	subs	r3, #1
 800c4ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c4ae:	4b04      	ldr	r3, [pc, #16]	; (800c4c0 <vPortSetupTimerInterrupt+0x34>)
 800c4b0:	2207      	movs	r2, #7
 800c4b2:	601a      	str	r2, [r3, #0]
}
 800c4b4:	bf00      	nop
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4bc:	4770      	bx	lr
 800c4be:	bf00      	nop
 800c4c0:	e000e010 	.word	0xe000e010
 800c4c4:	e000e018 	.word	0xe000e018
 800c4c8:	20000034 	.word	0x20000034
 800c4cc:	10624dd3 	.word	0x10624dd3
 800c4d0:	e000e014 	.word	0xe000e014

0800c4d4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c4d4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800c4e4 <vPortEnableVFP+0x10>
 800c4d8:	6801      	ldr	r1, [r0, #0]
 800c4da:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800c4de:	6001      	str	r1, [r0, #0]
 800c4e0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c4e2:	bf00      	nop
 800c4e4:	e000ed88 	.word	0xe000ed88

0800c4e8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c4e8:	b480      	push	{r7}
 800c4ea:	b085      	sub	sp, #20
 800c4ec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c4ee:	f3ef 8305 	mrs	r3, IPSR
 800c4f2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c4f4:	68fb      	ldr	r3, [r7, #12]
 800c4f6:	2b0f      	cmp	r3, #15
 800c4f8:	d914      	bls.n	800c524 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c4fa:	4a17      	ldr	r2, [pc, #92]	; (800c558 <vPortValidateInterruptPriority+0x70>)
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	4413      	add	r3, r2
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c504:	4b15      	ldr	r3, [pc, #84]	; (800c55c <vPortValidateInterruptPriority+0x74>)
 800c506:	781b      	ldrb	r3, [r3, #0]
 800c508:	7afa      	ldrb	r2, [r7, #11]
 800c50a:	429a      	cmp	r2, r3
 800c50c:	d20a      	bcs.n	800c524 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800c50e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c512:	f383 8811 	msr	BASEPRI, r3
 800c516:	f3bf 8f6f 	isb	sy
 800c51a:	f3bf 8f4f 	dsb	sy
 800c51e:	607b      	str	r3, [r7, #4]
}
 800c520:	bf00      	nop
 800c522:	e7fe      	b.n	800c522 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c524:	4b0e      	ldr	r3, [pc, #56]	; (800c560 <vPortValidateInterruptPriority+0x78>)
 800c526:	681b      	ldr	r3, [r3, #0]
 800c528:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800c52c:	4b0d      	ldr	r3, [pc, #52]	; (800c564 <vPortValidateInterruptPriority+0x7c>)
 800c52e:	681b      	ldr	r3, [r3, #0]
 800c530:	429a      	cmp	r2, r3
 800c532:	d90a      	bls.n	800c54a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800c534:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c538:	f383 8811 	msr	BASEPRI, r3
 800c53c:	f3bf 8f6f 	isb	sy
 800c540:	f3bf 8f4f 	dsb	sy
 800c544:	603b      	str	r3, [r7, #0]
}
 800c546:	bf00      	nop
 800c548:	e7fe      	b.n	800c548 <vPortValidateInterruptPriority+0x60>
	}
 800c54a:	bf00      	nop
 800c54c:	3714      	adds	r7, #20
 800c54e:	46bd      	mov	sp, r7
 800c550:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c554:	4770      	bx	lr
 800c556:	bf00      	nop
 800c558:	e000e3f0 	.word	0xe000e3f0
 800c55c:	2000117c 	.word	0x2000117c
 800c560:	e000ed0c 	.word	0xe000ed0c
 800c564:	20001180 	.word	0x20001180

0800c568 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c568:	b580      	push	{r7, lr}
 800c56a:	b08a      	sub	sp, #40	; 0x28
 800c56c:	af00      	add	r7, sp, #0
 800c56e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c570:	2300      	movs	r3, #0
 800c572:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c574:	f7fe fc92 	bl	800ae9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c578:	4b5b      	ldr	r3, [pc, #364]	; (800c6e8 <pvPortMalloc+0x180>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d101      	bne.n	800c584 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c580:	f000 f920 	bl	800c7c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c584:	4b59      	ldr	r3, [pc, #356]	; (800c6ec <pvPortMalloc+0x184>)
 800c586:	681a      	ldr	r2, [r3, #0]
 800c588:	687b      	ldr	r3, [r7, #4]
 800c58a:	4013      	ands	r3, r2
 800c58c:	2b00      	cmp	r3, #0
 800c58e:	f040 8093 	bne.w	800c6b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c592:	687b      	ldr	r3, [r7, #4]
 800c594:	2b00      	cmp	r3, #0
 800c596:	d01d      	beq.n	800c5d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800c598:	2208      	movs	r2, #8
 800c59a:	687b      	ldr	r3, [r7, #4]
 800c59c:	4413      	add	r3, r2
 800c59e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c5a0:	687b      	ldr	r3, [r7, #4]
 800c5a2:	f003 0307 	and.w	r3, r3, #7
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d014      	beq.n	800c5d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c5aa:	687b      	ldr	r3, [r7, #4]
 800c5ac:	f023 0307 	bic.w	r3, r3, #7
 800c5b0:	3308      	adds	r3, #8
 800c5b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	f003 0307 	and.w	r3, r3, #7
 800c5ba:	2b00      	cmp	r3, #0
 800c5bc:	d00a      	beq.n	800c5d4 <pvPortMalloc+0x6c>
	__asm volatile
 800c5be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5c2:	f383 8811 	msr	BASEPRI, r3
 800c5c6:	f3bf 8f6f 	isb	sy
 800c5ca:	f3bf 8f4f 	dsb	sy
 800c5ce:	617b      	str	r3, [r7, #20]
}
 800c5d0:	bf00      	nop
 800c5d2:	e7fe      	b.n	800c5d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d06e      	beq.n	800c6b8 <pvPortMalloc+0x150>
 800c5da:	4b45      	ldr	r3, [pc, #276]	; (800c6f0 <pvPortMalloc+0x188>)
 800c5dc:	681b      	ldr	r3, [r3, #0]
 800c5de:	687a      	ldr	r2, [r7, #4]
 800c5e0:	429a      	cmp	r2, r3
 800c5e2:	d869      	bhi.n	800c6b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c5e4:	4b43      	ldr	r3, [pc, #268]	; (800c6f4 <pvPortMalloc+0x18c>)
 800c5e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c5e8:	4b42      	ldr	r3, [pc, #264]	; (800c6f4 <pvPortMalloc+0x18c>)
 800c5ea:	681b      	ldr	r3, [r3, #0]
 800c5ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5ee:	e004      	b.n	800c5fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800c5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c5f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5f6:	681b      	ldr	r3, [r3, #0]
 800c5f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c5fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5fc:	685b      	ldr	r3, [r3, #4]
 800c5fe:	687a      	ldr	r2, [r7, #4]
 800c600:	429a      	cmp	r2, r3
 800c602:	d903      	bls.n	800c60c <pvPortMalloc+0xa4>
 800c604:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d1f1      	bne.n	800c5f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c60c:	4b36      	ldr	r3, [pc, #216]	; (800c6e8 <pvPortMalloc+0x180>)
 800c60e:	681b      	ldr	r3, [r3, #0]
 800c610:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c612:	429a      	cmp	r2, r3
 800c614:	d050      	beq.n	800c6b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c616:	6a3b      	ldr	r3, [r7, #32]
 800c618:	681b      	ldr	r3, [r3, #0]
 800c61a:	2208      	movs	r2, #8
 800c61c:	4413      	add	r3, r2
 800c61e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c622:	681a      	ldr	r2, [r3, #0]
 800c624:	6a3b      	ldr	r3, [r7, #32]
 800c626:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c62a:	685a      	ldr	r2, [r3, #4]
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	1ad2      	subs	r2, r2, r3
 800c630:	2308      	movs	r3, #8
 800c632:	005b      	lsls	r3, r3, #1
 800c634:	429a      	cmp	r2, r3
 800c636:	d91f      	bls.n	800c678 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c638:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	4413      	add	r3, r2
 800c63e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c640:	69bb      	ldr	r3, [r7, #24]
 800c642:	f003 0307 	and.w	r3, r3, #7
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00a      	beq.n	800c660 <pvPortMalloc+0xf8>
	__asm volatile
 800c64a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c64e:	f383 8811 	msr	BASEPRI, r3
 800c652:	f3bf 8f6f 	isb	sy
 800c656:	f3bf 8f4f 	dsb	sy
 800c65a:	613b      	str	r3, [r7, #16]
}
 800c65c:	bf00      	nop
 800c65e:	e7fe      	b.n	800c65e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c660:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c662:	685a      	ldr	r2, [r3, #4]
 800c664:	687b      	ldr	r3, [r7, #4]
 800c666:	1ad2      	subs	r2, r2, r3
 800c668:	69bb      	ldr	r3, [r7, #24]
 800c66a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c66c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c66e:	687a      	ldr	r2, [r7, #4]
 800c670:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c672:	69b8      	ldr	r0, [r7, #24]
 800c674:	f000 f908 	bl	800c888 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c678:	4b1d      	ldr	r3, [pc, #116]	; (800c6f0 <pvPortMalloc+0x188>)
 800c67a:	681a      	ldr	r2, [r3, #0]
 800c67c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67e:	685b      	ldr	r3, [r3, #4]
 800c680:	1ad3      	subs	r3, r2, r3
 800c682:	4a1b      	ldr	r2, [pc, #108]	; (800c6f0 <pvPortMalloc+0x188>)
 800c684:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c686:	4b1a      	ldr	r3, [pc, #104]	; (800c6f0 <pvPortMalloc+0x188>)
 800c688:	681a      	ldr	r2, [r3, #0]
 800c68a:	4b1b      	ldr	r3, [pc, #108]	; (800c6f8 <pvPortMalloc+0x190>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	429a      	cmp	r2, r3
 800c690:	d203      	bcs.n	800c69a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c692:	4b17      	ldr	r3, [pc, #92]	; (800c6f0 <pvPortMalloc+0x188>)
 800c694:	681b      	ldr	r3, [r3, #0]
 800c696:	4a18      	ldr	r2, [pc, #96]	; (800c6f8 <pvPortMalloc+0x190>)
 800c698:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c69a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c69c:	685a      	ldr	r2, [r3, #4]
 800c69e:	4b13      	ldr	r3, [pc, #76]	; (800c6ec <pvPortMalloc+0x184>)
 800c6a0:	681b      	ldr	r3, [r3, #0]
 800c6a2:	431a      	orrs	r2, r3
 800c6a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c6a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6aa:	2200      	movs	r2, #0
 800c6ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c6ae:	4b13      	ldr	r3, [pc, #76]	; (800c6fc <pvPortMalloc+0x194>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	3301      	adds	r3, #1
 800c6b4:	4a11      	ldr	r2, [pc, #68]	; (800c6fc <pvPortMalloc+0x194>)
 800c6b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c6b8:	f7fe fbfe 	bl	800aeb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c6bc:	69fb      	ldr	r3, [r7, #28]
 800c6be:	f003 0307 	and.w	r3, r3, #7
 800c6c2:	2b00      	cmp	r3, #0
 800c6c4:	d00a      	beq.n	800c6dc <pvPortMalloc+0x174>
	__asm volatile
 800c6c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6ca:	f383 8811 	msr	BASEPRI, r3
 800c6ce:	f3bf 8f6f 	isb	sy
 800c6d2:	f3bf 8f4f 	dsb	sy
 800c6d6:	60fb      	str	r3, [r7, #12]
}
 800c6d8:	bf00      	nop
 800c6da:	e7fe      	b.n	800c6da <pvPortMalloc+0x172>
	return pvReturn;
 800c6dc:	69fb      	ldr	r3, [r7, #28]
}
 800c6de:	4618      	mov	r0, r3
 800c6e0:	3728      	adds	r7, #40	; 0x28
 800c6e2:	46bd      	mov	sp, r7
 800c6e4:	bd80      	pop	{r7, pc}
 800c6e6:	bf00      	nop
 800c6e8:	2000318c 	.word	0x2000318c
 800c6ec:	200031a0 	.word	0x200031a0
 800c6f0:	20003190 	.word	0x20003190
 800c6f4:	20003184 	.word	0x20003184
 800c6f8:	20003194 	.word	0x20003194
 800c6fc:	20003198 	.word	0x20003198

0800c700 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c700:	b580      	push	{r7, lr}
 800c702:	b086      	sub	sp, #24
 800c704:	af00      	add	r7, sp, #0
 800c706:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c708:	687b      	ldr	r3, [r7, #4]
 800c70a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d04d      	beq.n	800c7ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c712:	2308      	movs	r3, #8
 800c714:	425b      	negs	r3, r3
 800c716:	697a      	ldr	r2, [r7, #20]
 800c718:	4413      	add	r3, r2
 800c71a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c71c:	697b      	ldr	r3, [r7, #20]
 800c71e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c720:	693b      	ldr	r3, [r7, #16]
 800c722:	685a      	ldr	r2, [r3, #4]
 800c724:	4b24      	ldr	r3, [pc, #144]	; (800c7b8 <vPortFree+0xb8>)
 800c726:	681b      	ldr	r3, [r3, #0]
 800c728:	4013      	ands	r3, r2
 800c72a:	2b00      	cmp	r3, #0
 800c72c:	d10a      	bne.n	800c744 <vPortFree+0x44>
	__asm volatile
 800c72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c732:	f383 8811 	msr	BASEPRI, r3
 800c736:	f3bf 8f6f 	isb	sy
 800c73a:	f3bf 8f4f 	dsb	sy
 800c73e:	60fb      	str	r3, [r7, #12]
}
 800c740:	bf00      	nop
 800c742:	e7fe      	b.n	800c742 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c744:	693b      	ldr	r3, [r7, #16]
 800c746:	681b      	ldr	r3, [r3, #0]
 800c748:	2b00      	cmp	r3, #0
 800c74a:	d00a      	beq.n	800c762 <vPortFree+0x62>
	__asm volatile
 800c74c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c750:	f383 8811 	msr	BASEPRI, r3
 800c754:	f3bf 8f6f 	isb	sy
 800c758:	f3bf 8f4f 	dsb	sy
 800c75c:	60bb      	str	r3, [r7, #8]
}
 800c75e:	bf00      	nop
 800c760:	e7fe      	b.n	800c760 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c762:	693b      	ldr	r3, [r7, #16]
 800c764:	685a      	ldr	r2, [r3, #4]
 800c766:	4b14      	ldr	r3, [pc, #80]	; (800c7b8 <vPortFree+0xb8>)
 800c768:	681b      	ldr	r3, [r3, #0]
 800c76a:	4013      	ands	r3, r2
 800c76c:	2b00      	cmp	r3, #0
 800c76e:	d01e      	beq.n	800c7ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	2b00      	cmp	r3, #0
 800c776:	d11a      	bne.n	800c7ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c778:	693b      	ldr	r3, [r7, #16]
 800c77a:	685a      	ldr	r2, [r3, #4]
 800c77c:	4b0e      	ldr	r3, [pc, #56]	; (800c7b8 <vPortFree+0xb8>)
 800c77e:	681b      	ldr	r3, [r3, #0]
 800c780:	43db      	mvns	r3, r3
 800c782:	401a      	ands	r2, r3
 800c784:	693b      	ldr	r3, [r7, #16]
 800c786:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c788:	f7fe fb88 	bl	800ae9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c78c:	693b      	ldr	r3, [r7, #16]
 800c78e:	685a      	ldr	r2, [r3, #4]
 800c790:	4b0a      	ldr	r3, [pc, #40]	; (800c7bc <vPortFree+0xbc>)
 800c792:	681b      	ldr	r3, [r3, #0]
 800c794:	4413      	add	r3, r2
 800c796:	4a09      	ldr	r2, [pc, #36]	; (800c7bc <vPortFree+0xbc>)
 800c798:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c79a:	6938      	ldr	r0, [r7, #16]
 800c79c:	f000 f874 	bl	800c888 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c7a0:	4b07      	ldr	r3, [pc, #28]	; (800c7c0 <vPortFree+0xc0>)
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	3301      	adds	r3, #1
 800c7a6:	4a06      	ldr	r2, [pc, #24]	; (800c7c0 <vPortFree+0xc0>)
 800c7a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c7aa:	f7fe fb85 	bl	800aeb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c7ae:	bf00      	nop
 800c7b0:	3718      	adds	r7, #24
 800c7b2:	46bd      	mov	sp, r7
 800c7b4:	bd80      	pop	{r7, pc}
 800c7b6:	bf00      	nop
 800c7b8:	200031a0 	.word	0x200031a0
 800c7bc:	20003190 	.word	0x20003190
 800c7c0:	2000319c 	.word	0x2000319c

0800c7c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c7c4:	b480      	push	{r7}
 800c7c6:	b085      	sub	sp, #20
 800c7c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7ca:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800c7ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c7d0:	4b27      	ldr	r3, [pc, #156]	; (800c870 <prvHeapInit+0xac>)
 800c7d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	f003 0307 	and.w	r3, r3, #7
 800c7da:	2b00      	cmp	r3, #0
 800c7dc:	d00c      	beq.n	800c7f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7de:	68fb      	ldr	r3, [r7, #12]
 800c7e0:	3307      	adds	r3, #7
 800c7e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7e4:	68fb      	ldr	r3, [r7, #12]
 800c7e6:	f023 0307 	bic.w	r3, r3, #7
 800c7ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7ec:	68ba      	ldr	r2, [r7, #8]
 800c7ee:	68fb      	ldr	r3, [r7, #12]
 800c7f0:	1ad3      	subs	r3, r2, r3
 800c7f2:	4a1f      	ldr	r2, [pc, #124]	; (800c870 <prvHeapInit+0xac>)
 800c7f4:	4413      	add	r3, r2
 800c7f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c7f8:	68fb      	ldr	r3, [r7, #12]
 800c7fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7fc:	4a1d      	ldr	r2, [pc, #116]	; (800c874 <prvHeapInit+0xb0>)
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c802:	4b1c      	ldr	r3, [pc, #112]	; (800c874 <prvHeapInit+0xb0>)
 800c804:	2200      	movs	r2, #0
 800c806:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c808:	687b      	ldr	r3, [r7, #4]
 800c80a:	68ba      	ldr	r2, [r7, #8]
 800c80c:	4413      	add	r3, r2
 800c80e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c810:	2208      	movs	r2, #8
 800c812:	68fb      	ldr	r3, [r7, #12]
 800c814:	1a9b      	subs	r3, r3, r2
 800c816:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c818:	68fb      	ldr	r3, [r7, #12]
 800c81a:	f023 0307 	bic.w	r3, r3, #7
 800c81e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c820:	68fb      	ldr	r3, [r7, #12]
 800c822:	4a15      	ldr	r2, [pc, #84]	; (800c878 <prvHeapInit+0xb4>)
 800c824:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c826:	4b14      	ldr	r3, [pc, #80]	; (800c878 <prvHeapInit+0xb4>)
 800c828:	681b      	ldr	r3, [r3, #0]
 800c82a:	2200      	movs	r2, #0
 800c82c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c82e:	4b12      	ldr	r3, [pc, #72]	; (800c878 <prvHeapInit+0xb4>)
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	2200      	movs	r2, #0
 800c834:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c83a:	683b      	ldr	r3, [r7, #0]
 800c83c:	68fa      	ldr	r2, [r7, #12]
 800c83e:	1ad2      	subs	r2, r2, r3
 800c840:	683b      	ldr	r3, [r7, #0]
 800c842:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c844:	4b0c      	ldr	r3, [pc, #48]	; (800c878 <prvHeapInit+0xb4>)
 800c846:	681a      	ldr	r2, [r3, #0]
 800c848:	683b      	ldr	r3, [r7, #0]
 800c84a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c84c:	683b      	ldr	r3, [r7, #0]
 800c84e:	685b      	ldr	r3, [r3, #4]
 800c850:	4a0a      	ldr	r2, [pc, #40]	; (800c87c <prvHeapInit+0xb8>)
 800c852:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c854:	683b      	ldr	r3, [r7, #0]
 800c856:	685b      	ldr	r3, [r3, #4]
 800c858:	4a09      	ldr	r2, [pc, #36]	; (800c880 <prvHeapInit+0xbc>)
 800c85a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c85c:	4b09      	ldr	r3, [pc, #36]	; (800c884 <prvHeapInit+0xc0>)
 800c85e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c862:	601a      	str	r2, [r3, #0]
}
 800c864:	bf00      	nop
 800c866:	3714      	adds	r7, #20
 800c868:	46bd      	mov	sp, r7
 800c86a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c86e:	4770      	bx	lr
 800c870:	20001184 	.word	0x20001184
 800c874:	20003184 	.word	0x20003184
 800c878:	2000318c 	.word	0x2000318c
 800c87c:	20003194 	.word	0x20003194
 800c880:	20003190 	.word	0x20003190
 800c884:	200031a0 	.word	0x200031a0

0800c888 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c888:	b480      	push	{r7}
 800c88a:	b085      	sub	sp, #20
 800c88c:	af00      	add	r7, sp, #0
 800c88e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c890:	4b28      	ldr	r3, [pc, #160]	; (800c934 <prvInsertBlockIntoFreeList+0xac>)
 800c892:	60fb      	str	r3, [r7, #12]
 800c894:	e002      	b.n	800c89c <prvInsertBlockIntoFreeList+0x14>
 800c896:	68fb      	ldr	r3, [r7, #12]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	60fb      	str	r3, [r7, #12]
 800c89c:	68fb      	ldr	r3, [r7, #12]
 800c89e:	681b      	ldr	r3, [r3, #0]
 800c8a0:	687a      	ldr	r2, [r7, #4]
 800c8a2:	429a      	cmp	r2, r3
 800c8a4:	d8f7      	bhi.n	800c896 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c8a6:	68fb      	ldr	r3, [r7, #12]
 800c8a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	685b      	ldr	r3, [r3, #4]
 800c8ae:	68ba      	ldr	r2, [r7, #8]
 800c8b0:	4413      	add	r3, r2
 800c8b2:	687a      	ldr	r2, [r7, #4]
 800c8b4:	429a      	cmp	r2, r3
 800c8b6:	d108      	bne.n	800c8ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	685a      	ldr	r2, [r3, #4]
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	685b      	ldr	r3, [r3, #4]
 800c8c0:	441a      	add	r2, r3
 800c8c2:	68fb      	ldr	r3, [r7, #12]
 800c8c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c8c6:	68fb      	ldr	r3, [r7, #12]
 800c8c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c8ca:	687b      	ldr	r3, [r7, #4]
 800c8cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c8ce:	687b      	ldr	r3, [r7, #4]
 800c8d0:	685b      	ldr	r3, [r3, #4]
 800c8d2:	68ba      	ldr	r2, [r7, #8]
 800c8d4:	441a      	add	r2, r3
 800c8d6:	68fb      	ldr	r3, [r7, #12]
 800c8d8:	681b      	ldr	r3, [r3, #0]
 800c8da:	429a      	cmp	r2, r3
 800c8dc:	d118      	bne.n	800c910 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c8de:	68fb      	ldr	r3, [r7, #12]
 800c8e0:	681a      	ldr	r2, [r3, #0]
 800c8e2:	4b15      	ldr	r3, [pc, #84]	; (800c938 <prvInsertBlockIntoFreeList+0xb0>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	429a      	cmp	r2, r3
 800c8e8:	d00d      	beq.n	800c906 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	685a      	ldr	r2, [r3, #4]
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	681b      	ldr	r3, [r3, #0]
 800c8f2:	685b      	ldr	r3, [r3, #4]
 800c8f4:	441a      	add	r2, r3
 800c8f6:	687b      	ldr	r3, [r7, #4]
 800c8f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	681a      	ldr	r2, [r3, #0]
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	601a      	str	r2, [r3, #0]
 800c904:	e008      	b.n	800c918 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c906:	4b0c      	ldr	r3, [pc, #48]	; (800c938 <prvInsertBlockIntoFreeList+0xb0>)
 800c908:	681a      	ldr	r2, [r3, #0]
 800c90a:	687b      	ldr	r3, [r7, #4]
 800c90c:	601a      	str	r2, [r3, #0]
 800c90e:	e003      	b.n	800c918 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681a      	ldr	r2, [r3, #0]
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c918:	68fa      	ldr	r2, [r7, #12]
 800c91a:	687b      	ldr	r3, [r7, #4]
 800c91c:	429a      	cmp	r2, r3
 800c91e:	d002      	beq.n	800c926 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	687a      	ldr	r2, [r7, #4]
 800c924:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c926:	bf00      	nop
 800c928:	3714      	adds	r7, #20
 800c92a:	46bd      	mov	sp, r7
 800c92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c930:	4770      	bx	lr
 800c932:	bf00      	nop
 800c934:	20003184 	.word	0x20003184
 800c938:	2000318c 	.word	0x2000318c

0800c93c <__errno>:
 800c93c:	4b01      	ldr	r3, [pc, #4]	; (800c944 <__errno+0x8>)
 800c93e:	6818      	ldr	r0, [r3, #0]
 800c940:	4770      	bx	lr
 800c942:	bf00      	nop
 800c944:	20000044 	.word	0x20000044

0800c948 <__libc_init_array>:
 800c948:	b570      	push	{r4, r5, r6, lr}
 800c94a:	4d0d      	ldr	r5, [pc, #52]	; (800c980 <__libc_init_array+0x38>)
 800c94c:	4c0d      	ldr	r4, [pc, #52]	; (800c984 <__libc_init_array+0x3c>)
 800c94e:	1b64      	subs	r4, r4, r5
 800c950:	10a4      	asrs	r4, r4, #2
 800c952:	2600      	movs	r6, #0
 800c954:	42a6      	cmp	r6, r4
 800c956:	d109      	bne.n	800c96c <__libc_init_array+0x24>
 800c958:	4d0b      	ldr	r5, [pc, #44]	; (800c988 <__libc_init_array+0x40>)
 800c95a:	4c0c      	ldr	r4, [pc, #48]	; (800c98c <__libc_init_array+0x44>)
 800c95c:	f000 fcf8 	bl	800d350 <_init>
 800c960:	1b64      	subs	r4, r4, r5
 800c962:	10a4      	asrs	r4, r4, #2
 800c964:	2600      	movs	r6, #0
 800c966:	42a6      	cmp	r6, r4
 800c968:	d105      	bne.n	800c976 <__libc_init_array+0x2e>
 800c96a:	bd70      	pop	{r4, r5, r6, pc}
 800c96c:	f855 3b04 	ldr.w	r3, [r5], #4
 800c970:	4798      	blx	r3
 800c972:	3601      	adds	r6, #1
 800c974:	e7ee      	b.n	800c954 <__libc_init_array+0xc>
 800c976:	f855 3b04 	ldr.w	r3, [r5], #4
 800c97a:	4798      	blx	r3
 800c97c:	3601      	adds	r6, #1
 800c97e:	e7f2      	b.n	800c966 <__libc_init_array+0x1e>
 800c980:	0800db00 	.word	0x0800db00
 800c984:	0800db00 	.word	0x0800db00
 800c988:	0800db00 	.word	0x0800db00
 800c98c:	0800db04 	.word	0x0800db04

0800c990 <__retarget_lock_acquire_recursive>:
 800c990:	4770      	bx	lr

0800c992 <__retarget_lock_release_recursive>:
 800c992:	4770      	bx	lr

0800c994 <memcpy>:
 800c994:	440a      	add	r2, r1
 800c996:	4291      	cmp	r1, r2
 800c998:	f100 33ff 	add.w	r3, r0, #4294967295
 800c99c:	d100      	bne.n	800c9a0 <memcpy+0xc>
 800c99e:	4770      	bx	lr
 800c9a0:	b510      	push	{r4, lr}
 800c9a2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c9a6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c9aa:	4291      	cmp	r1, r2
 800c9ac:	d1f9      	bne.n	800c9a2 <memcpy+0xe>
 800c9ae:	bd10      	pop	{r4, pc}

0800c9b0 <memset>:
 800c9b0:	4402      	add	r2, r0
 800c9b2:	4603      	mov	r3, r0
 800c9b4:	4293      	cmp	r3, r2
 800c9b6:	d100      	bne.n	800c9ba <memset+0xa>
 800c9b8:	4770      	bx	lr
 800c9ba:	f803 1b01 	strb.w	r1, [r3], #1
 800c9be:	e7f9      	b.n	800c9b4 <memset+0x4>

0800c9c0 <sbrk_aligned>:
 800c9c0:	b570      	push	{r4, r5, r6, lr}
 800c9c2:	4e0e      	ldr	r6, [pc, #56]	; (800c9fc <sbrk_aligned+0x3c>)
 800c9c4:	460c      	mov	r4, r1
 800c9c6:	6831      	ldr	r1, [r6, #0]
 800c9c8:	4605      	mov	r5, r0
 800c9ca:	b911      	cbnz	r1, 800c9d2 <sbrk_aligned+0x12>
 800c9cc:	f000 f8f6 	bl	800cbbc <_sbrk_r>
 800c9d0:	6030      	str	r0, [r6, #0]
 800c9d2:	4621      	mov	r1, r4
 800c9d4:	4628      	mov	r0, r5
 800c9d6:	f000 f8f1 	bl	800cbbc <_sbrk_r>
 800c9da:	1c43      	adds	r3, r0, #1
 800c9dc:	d00a      	beq.n	800c9f4 <sbrk_aligned+0x34>
 800c9de:	1cc4      	adds	r4, r0, #3
 800c9e0:	f024 0403 	bic.w	r4, r4, #3
 800c9e4:	42a0      	cmp	r0, r4
 800c9e6:	d007      	beq.n	800c9f8 <sbrk_aligned+0x38>
 800c9e8:	1a21      	subs	r1, r4, r0
 800c9ea:	4628      	mov	r0, r5
 800c9ec:	f000 f8e6 	bl	800cbbc <_sbrk_r>
 800c9f0:	3001      	adds	r0, #1
 800c9f2:	d101      	bne.n	800c9f8 <sbrk_aligned+0x38>
 800c9f4:	f04f 34ff 	mov.w	r4, #4294967295
 800c9f8:	4620      	mov	r0, r4
 800c9fa:	bd70      	pop	{r4, r5, r6, pc}
 800c9fc:	200031ac 	.word	0x200031ac

0800ca00 <_malloc_r>:
 800ca00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca04:	1ccd      	adds	r5, r1, #3
 800ca06:	f025 0503 	bic.w	r5, r5, #3
 800ca0a:	3508      	adds	r5, #8
 800ca0c:	2d0c      	cmp	r5, #12
 800ca0e:	bf38      	it	cc
 800ca10:	250c      	movcc	r5, #12
 800ca12:	2d00      	cmp	r5, #0
 800ca14:	4607      	mov	r7, r0
 800ca16:	db01      	blt.n	800ca1c <_malloc_r+0x1c>
 800ca18:	42a9      	cmp	r1, r5
 800ca1a:	d905      	bls.n	800ca28 <_malloc_r+0x28>
 800ca1c:	230c      	movs	r3, #12
 800ca1e:	603b      	str	r3, [r7, #0]
 800ca20:	2600      	movs	r6, #0
 800ca22:	4630      	mov	r0, r6
 800ca24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ca28:	4e2e      	ldr	r6, [pc, #184]	; (800cae4 <_malloc_r+0xe4>)
 800ca2a:	f000 f8f7 	bl	800cc1c <__malloc_lock>
 800ca2e:	6833      	ldr	r3, [r6, #0]
 800ca30:	461c      	mov	r4, r3
 800ca32:	bb34      	cbnz	r4, 800ca82 <_malloc_r+0x82>
 800ca34:	4629      	mov	r1, r5
 800ca36:	4638      	mov	r0, r7
 800ca38:	f7ff ffc2 	bl	800c9c0 <sbrk_aligned>
 800ca3c:	1c43      	adds	r3, r0, #1
 800ca3e:	4604      	mov	r4, r0
 800ca40:	d14d      	bne.n	800cade <_malloc_r+0xde>
 800ca42:	6834      	ldr	r4, [r6, #0]
 800ca44:	4626      	mov	r6, r4
 800ca46:	2e00      	cmp	r6, #0
 800ca48:	d140      	bne.n	800cacc <_malloc_r+0xcc>
 800ca4a:	6823      	ldr	r3, [r4, #0]
 800ca4c:	4631      	mov	r1, r6
 800ca4e:	4638      	mov	r0, r7
 800ca50:	eb04 0803 	add.w	r8, r4, r3
 800ca54:	f000 f8b2 	bl	800cbbc <_sbrk_r>
 800ca58:	4580      	cmp	r8, r0
 800ca5a:	d13a      	bne.n	800cad2 <_malloc_r+0xd2>
 800ca5c:	6821      	ldr	r1, [r4, #0]
 800ca5e:	3503      	adds	r5, #3
 800ca60:	1a6d      	subs	r5, r5, r1
 800ca62:	f025 0503 	bic.w	r5, r5, #3
 800ca66:	3508      	adds	r5, #8
 800ca68:	2d0c      	cmp	r5, #12
 800ca6a:	bf38      	it	cc
 800ca6c:	250c      	movcc	r5, #12
 800ca6e:	4629      	mov	r1, r5
 800ca70:	4638      	mov	r0, r7
 800ca72:	f7ff ffa5 	bl	800c9c0 <sbrk_aligned>
 800ca76:	3001      	adds	r0, #1
 800ca78:	d02b      	beq.n	800cad2 <_malloc_r+0xd2>
 800ca7a:	6823      	ldr	r3, [r4, #0]
 800ca7c:	442b      	add	r3, r5
 800ca7e:	6023      	str	r3, [r4, #0]
 800ca80:	e00e      	b.n	800caa0 <_malloc_r+0xa0>
 800ca82:	6822      	ldr	r2, [r4, #0]
 800ca84:	1b52      	subs	r2, r2, r5
 800ca86:	d41e      	bmi.n	800cac6 <_malloc_r+0xc6>
 800ca88:	2a0b      	cmp	r2, #11
 800ca8a:	d916      	bls.n	800caba <_malloc_r+0xba>
 800ca8c:	1961      	adds	r1, r4, r5
 800ca8e:	42a3      	cmp	r3, r4
 800ca90:	6025      	str	r5, [r4, #0]
 800ca92:	bf18      	it	ne
 800ca94:	6059      	strne	r1, [r3, #4]
 800ca96:	6863      	ldr	r3, [r4, #4]
 800ca98:	bf08      	it	eq
 800ca9a:	6031      	streq	r1, [r6, #0]
 800ca9c:	5162      	str	r2, [r4, r5]
 800ca9e:	604b      	str	r3, [r1, #4]
 800caa0:	4638      	mov	r0, r7
 800caa2:	f104 060b 	add.w	r6, r4, #11
 800caa6:	f000 f8bf 	bl	800cc28 <__malloc_unlock>
 800caaa:	f026 0607 	bic.w	r6, r6, #7
 800caae:	1d23      	adds	r3, r4, #4
 800cab0:	1af2      	subs	r2, r6, r3
 800cab2:	d0b6      	beq.n	800ca22 <_malloc_r+0x22>
 800cab4:	1b9b      	subs	r3, r3, r6
 800cab6:	50a3      	str	r3, [r4, r2]
 800cab8:	e7b3      	b.n	800ca22 <_malloc_r+0x22>
 800caba:	6862      	ldr	r2, [r4, #4]
 800cabc:	42a3      	cmp	r3, r4
 800cabe:	bf0c      	ite	eq
 800cac0:	6032      	streq	r2, [r6, #0]
 800cac2:	605a      	strne	r2, [r3, #4]
 800cac4:	e7ec      	b.n	800caa0 <_malloc_r+0xa0>
 800cac6:	4623      	mov	r3, r4
 800cac8:	6864      	ldr	r4, [r4, #4]
 800caca:	e7b2      	b.n	800ca32 <_malloc_r+0x32>
 800cacc:	4634      	mov	r4, r6
 800cace:	6876      	ldr	r6, [r6, #4]
 800cad0:	e7b9      	b.n	800ca46 <_malloc_r+0x46>
 800cad2:	230c      	movs	r3, #12
 800cad4:	603b      	str	r3, [r7, #0]
 800cad6:	4638      	mov	r0, r7
 800cad8:	f000 f8a6 	bl	800cc28 <__malloc_unlock>
 800cadc:	e7a1      	b.n	800ca22 <_malloc_r+0x22>
 800cade:	6025      	str	r5, [r4, #0]
 800cae0:	e7de      	b.n	800caa0 <_malloc_r+0xa0>
 800cae2:	bf00      	nop
 800cae4:	200031a8 	.word	0x200031a8

0800cae8 <cleanup_glue>:
 800cae8:	b538      	push	{r3, r4, r5, lr}
 800caea:	460c      	mov	r4, r1
 800caec:	6809      	ldr	r1, [r1, #0]
 800caee:	4605      	mov	r5, r0
 800caf0:	b109      	cbz	r1, 800caf6 <cleanup_glue+0xe>
 800caf2:	f7ff fff9 	bl	800cae8 <cleanup_glue>
 800caf6:	4621      	mov	r1, r4
 800caf8:	4628      	mov	r0, r5
 800cafa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800cafe:	f000 b899 	b.w	800cc34 <_free_r>
	...

0800cb04 <_reclaim_reent>:
 800cb04:	4b2c      	ldr	r3, [pc, #176]	; (800cbb8 <_reclaim_reent+0xb4>)
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	4283      	cmp	r3, r0
 800cb0a:	b570      	push	{r4, r5, r6, lr}
 800cb0c:	4604      	mov	r4, r0
 800cb0e:	d051      	beq.n	800cbb4 <_reclaim_reent+0xb0>
 800cb10:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800cb12:	b143      	cbz	r3, 800cb26 <_reclaim_reent+0x22>
 800cb14:	68db      	ldr	r3, [r3, #12]
 800cb16:	2b00      	cmp	r3, #0
 800cb18:	d14a      	bne.n	800cbb0 <_reclaim_reent+0xac>
 800cb1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb1c:	6819      	ldr	r1, [r3, #0]
 800cb1e:	b111      	cbz	r1, 800cb26 <_reclaim_reent+0x22>
 800cb20:	4620      	mov	r0, r4
 800cb22:	f000 f887 	bl	800cc34 <_free_r>
 800cb26:	6961      	ldr	r1, [r4, #20]
 800cb28:	b111      	cbz	r1, 800cb30 <_reclaim_reent+0x2c>
 800cb2a:	4620      	mov	r0, r4
 800cb2c:	f000 f882 	bl	800cc34 <_free_r>
 800cb30:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800cb32:	b111      	cbz	r1, 800cb3a <_reclaim_reent+0x36>
 800cb34:	4620      	mov	r0, r4
 800cb36:	f000 f87d 	bl	800cc34 <_free_r>
 800cb3a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800cb3c:	b111      	cbz	r1, 800cb44 <_reclaim_reent+0x40>
 800cb3e:	4620      	mov	r0, r4
 800cb40:	f000 f878 	bl	800cc34 <_free_r>
 800cb44:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800cb46:	b111      	cbz	r1, 800cb4e <_reclaim_reent+0x4a>
 800cb48:	4620      	mov	r0, r4
 800cb4a:	f000 f873 	bl	800cc34 <_free_r>
 800cb4e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800cb50:	b111      	cbz	r1, 800cb58 <_reclaim_reent+0x54>
 800cb52:	4620      	mov	r0, r4
 800cb54:	f000 f86e 	bl	800cc34 <_free_r>
 800cb58:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800cb5a:	b111      	cbz	r1, 800cb62 <_reclaim_reent+0x5e>
 800cb5c:	4620      	mov	r0, r4
 800cb5e:	f000 f869 	bl	800cc34 <_free_r>
 800cb62:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800cb64:	b111      	cbz	r1, 800cb6c <_reclaim_reent+0x68>
 800cb66:	4620      	mov	r0, r4
 800cb68:	f000 f864 	bl	800cc34 <_free_r>
 800cb6c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800cb6e:	b111      	cbz	r1, 800cb76 <_reclaim_reent+0x72>
 800cb70:	4620      	mov	r0, r4
 800cb72:	f000 f85f 	bl	800cc34 <_free_r>
 800cb76:	69a3      	ldr	r3, [r4, #24]
 800cb78:	b1e3      	cbz	r3, 800cbb4 <_reclaim_reent+0xb0>
 800cb7a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800cb7c:	4620      	mov	r0, r4
 800cb7e:	4798      	blx	r3
 800cb80:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800cb82:	b1b9      	cbz	r1, 800cbb4 <_reclaim_reent+0xb0>
 800cb84:	4620      	mov	r0, r4
 800cb86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800cb8a:	f7ff bfad 	b.w	800cae8 <cleanup_glue>
 800cb8e:	5949      	ldr	r1, [r1, r5]
 800cb90:	b941      	cbnz	r1, 800cba4 <_reclaim_reent+0xa0>
 800cb92:	3504      	adds	r5, #4
 800cb94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cb96:	2d80      	cmp	r5, #128	; 0x80
 800cb98:	68d9      	ldr	r1, [r3, #12]
 800cb9a:	d1f8      	bne.n	800cb8e <_reclaim_reent+0x8a>
 800cb9c:	4620      	mov	r0, r4
 800cb9e:	f000 f849 	bl	800cc34 <_free_r>
 800cba2:	e7ba      	b.n	800cb1a <_reclaim_reent+0x16>
 800cba4:	680e      	ldr	r6, [r1, #0]
 800cba6:	4620      	mov	r0, r4
 800cba8:	f000 f844 	bl	800cc34 <_free_r>
 800cbac:	4631      	mov	r1, r6
 800cbae:	e7ef      	b.n	800cb90 <_reclaim_reent+0x8c>
 800cbb0:	2500      	movs	r5, #0
 800cbb2:	e7ef      	b.n	800cb94 <_reclaim_reent+0x90>
 800cbb4:	bd70      	pop	{r4, r5, r6, pc}
 800cbb6:	bf00      	nop
 800cbb8:	20000044 	.word	0x20000044

0800cbbc <_sbrk_r>:
 800cbbc:	b538      	push	{r3, r4, r5, lr}
 800cbbe:	4d06      	ldr	r5, [pc, #24]	; (800cbd8 <_sbrk_r+0x1c>)
 800cbc0:	2300      	movs	r3, #0
 800cbc2:	4604      	mov	r4, r0
 800cbc4:	4608      	mov	r0, r1
 800cbc6:	602b      	str	r3, [r5, #0]
 800cbc8:	f7f7 f91c 	bl	8003e04 <_sbrk>
 800cbcc:	1c43      	adds	r3, r0, #1
 800cbce:	d102      	bne.n	800cbd6 <_sbrk_r+0x1a>
 800cbd0:	682b      	ldr	r3, [r5, #0]
 800cbd2:	b103      	cbz	r3, 800cbd6 <_sbrk_r+0x1a>
 800cbd4:	6023      	str	r3, [r4, #0]
 800cbd6:	bd38      	pop	{r3, r4, r5, pc}
 800cbd8:	200031b0 	.word	0x200031b0

0800cbdc <siprintf>:
 800cbdc:	b40e      	push	{r1, r2, r3}
 800cbde:	b500      	push	{lr}
 800cbe0:	b09c      	sub	sp, #112	; 0x70
 800cbe2:	ab1d      	add	r3, sp, #116	; 0x74
 800cbe4:	9002      	str	r0, [sp, #8]
 800cbe6:	9006      	str	r0, [sp, #24]
 800cbe8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800cbec:	4809      	ldr	r0, [pc, #36]	; (800cc14 <siprintf+0x38>)
 800cbee:	9107      	str	r1, [sp, #28]
 800cbf0:	9104      	str	r1, [sp, #16]
 800cbf2:	4909      	ldr	r1, [pc, #36]	; (800cc18 <siprintf+0x3c>)
 800cbf4:	f853 2b04 	ldr.w	r2, [r3], #4
 800cbf8:	9105      	str	r1, [sp, #20]
 800cbfa:	6800      	ldr	r0, [r0, #0]
 800cbfc:	9301      	str	r3, [sp, #4]
 800cbfe:	a902      	add	r1, sp, #8
 800cc00:	f000 f8c0 	bl	800cd84 <_svfiprintf_r>
 800cc04:	9b02      	ldr	r3, [sp, #8]
 800cc06:	2200      	movs	r2, #0
 800cc08:	701a      	strb	r2, [r3, #0]
 800cc0a:	b01c      	add	sp, #112	; 0x70
 800cc0c:	f85d eb04 	ldr.w	lr, [sp], #4
 800cc10:	b003      	add	sp, #12
 800cc12:	4770      	bx	lr
 800cc14:	20000044 	.word	0x20000044
 800cc18:	ffff0208 	.word	0xffff0208

0800cc1c <__malloc_lock>:
 800cc1c:	4801      	ldr	r0, [pc, #4]	; (800cc24 <__malloc_lock+0x8>)
 800cc1e:	f7ff beb7 	b.w	800c990 <__retarget_lock_acquire_recursive>
 800cc22:	bf00      	nop
 800cc24:	200031a4 	.word	0x200031a4

0800cc28 <__malloc_unlock>:
 800cc28:	4801      	ldr	r0, [pc, #4]	; (800cc30 <__malloc_unlock+0x8>)
 800cc2a:	f7ff beb2 	b.w	800c992 <__retarget_lock_release_recursive>
 800cc2e:	bf00      	nop
 800cc30:	200031a4 	.word	0x200031a4

0800cc34 <_free_r>:
 800cc34:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc36:	2900      	cmp	r1, #0
 800cc38:	d044      	beq.n	800ccc4 <_free_r+0x90>
 800cc3a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cc3e:	9001      	str	r0, [sp, #4]
 800cc40:	2b00      	cmp	r3, #0
 800cc42:	f1a1 0404 	sub.w	r4, r1, #4
 800cc46:	bfb8      	it	lt
 800cc48:	18e4      	addlt	r4, r4, r3
 800cc4a:	f7ff ffe7 	bl	800cc1c <__malloc_lock>
 800cc4e:	4a1e      	ldr	r2, [pc, #120]	; (800ccc8 <_free_r+0x94>)
 800cc50:	9801      	ldr	r0, [sp, #4]
 800cc52:	6813      	ldr	r3, [r2, #0]
 800cc54:	b933      	cbnz	r3, 800cc64 <_free_r+0x30>
 800cc56:	6063      	str	r3, [r4, #4]
 800cc58:	6014      	str	r4, [r2, #0]
 800cc5a:	b003      	add	sp, #12
 800cc5c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc60:	f7ff bfe2 	b.w	800cc28 <__malloc_unlock>
 800cc64:	42a3      	cmp	r3, r4
 800cc66:	d908      	bls.n	800cc7a <_free_r+0x46>
 800cc68:	6825      	ldr	r5, [r4, #0]
 800cc6a:	1961      	adds	r1, r4, r5
 800cc6c:	428b      	cmp	r3, r1
 800cc6e:	bf01      	itttt	eq
 800cc70:	6819      	ldreq	r1, [r3, #0]
 800cc72:	685b      	ldreq	r3, [r3, #4]
 800cc74:	1949      	addeq	r1, r1, r5
 800cc76:	6021      	streq	r1, [r4, #0]
 800cc78:	e7ed      	b.n	800cc56 <_free_r+0x22>
 800cc7a:	461a      	mov	r2, r3
 800cc7c:	685b      	ldr	r3, [r3, #4]
 800cc7e:	b10b      	cbz	r3, 800cc84 <_free_r+0x50>
 800cc80:	42a3      	cmp	r3, r4
 800cc82:	d9fa      	bls.n	800cc7a <_free_r+0x46>
 800cc84:	6811      	ldr	r1, [r2, #0]
 800cc86:	1855      	adds	r5, r2, r1
 800cc88:	42a5      	cmp	r5, r4
 800cc8a:	d10b      	bne.n	800cca4 <_free_r+0x70>
 800cc8c:	6824      	ldr	r4, [r4, #0]
 800cc8e:	4421      	add	r1, r4
 800cc90:	1854      	adds	r4, r2, r1
 800cc92:	42a3      	cmp	r3, r4
 800cc94:	6011      	str	r1, [r2, #0]
 800cc96:	d1e0      	bne.n	800cc5a <_free_r+0x26>
 800cc98:	681c      	ldr	r4, [r3, #0]
 800cc9a:	685b      	ldr	r3, [r3, #4]
 800cc9c:	6053      	str	r3, [r2, #4]
 800cc9e:	4421      	add	r1, r4
 800cca0:	6011      	str	r1, [r2, #0]
 800cca2:	e7da      	b.n	800cc5a <_free_r+0x26>
 800cca4:	d902      	bls.n	800ccac <_free_r+0x78>
 800cca6:	230c      	movs	r3, #12
 800cca8:	6003      	str	r3, [r0, #0]
 800ccaa:	e7d6      	b.n	800cc5a <_free_r+0x26>
 800ccac:	6825      	ldr	r5, [r4, #0]
 800ccae:	1961      	adds	r1, r4, r5
 800ccb0:	428b      	cmp	r3, r1
 800ccb2:	bf04      	itt	eq
 800ccb4:	6819      	ldreq	r1, [r3, #0]
 800ccb6:	685b      	ldreq	r3, [r3, #4]
 800ccb8:	6063      	str	r3, [r4, #4]
 800ccba:	bf04      	itt	eq
 800ccbc:	1949      	addeq	r1, r1, r5
 800ccbe:	6021      	streq	r1, [r4, #0]
 800ccc0:	6054      	str	r4, [r2, #4]
 800ccc2:	e7ca      	b.n	800cc5a <_free_r+0x26>
 800ccc4:	b003      	add	sp, #12
 800ccc6:	bd30      	pop	{r4, r5, pc}
 800ccc8:	200031a8 	.word	0x200031a8

0800cccc <__ssputs_r>:
 800cccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ccd0:	688e      	ldr	r6, [r1, #8]
 800ccd2:	429e      	cmp	r6, r3
 800ccd4:	4682      	mov	sl, r0
 800ccd6:	460c      	mov	r4, r1
 800ccd8:	4690      	mov	r8, r2
 800ccda:	461f      	mov	r7, r3
 800ccdc:	d838      	bhi.n	800cd50 <__ssputs_r+0x84>
 800ccde:	898a      	ldrh	r2, [r1, #12]
 800cce0:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cce4:	d032      	beq.n	800cd4c <__ssputs_r+0x80>
 800cce6:	6825      	ldr	r5, [r4, #0]
 800cce8:	6909      	ldr	r1, [r1, #16]
 800ccea:	eba5 0901 	sub.w	r9, r5, r1
 800ccee:	6965      	ldr	r5, [r4, #20]
 800ccf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ccf4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ccf8:	3301      	adds	r3, #1
 800ccfa:	444b      	add	r3, r9
 800ccfc:	106d      	asrs	r5, r5, #1
 800ccfe:	429d      	cmp	r5, r3
 800cd00:	bf38      	it	cc
 800cd02:	461d      	movcc	r5, r3
 800cd04:	0553      	lsls	r3, r2, #21
 800cd06:	d531      	bpl.n	800cd6c <__ssputs_r+0xa0>
 800cd08:	4629      	mov	r1, r5
 800cd0a:	f7ff fe79 	bl	800ca00 <_malloc_r>
 800cd0e:	4606      	mov	r6, r0
 800cd10:	b950      	cbnz	r0, 800cd28 <__ssputs_r+0x5c>
 800cd12:	230c      	movs	r3, #12
 800cd14:	f8ca 3000 	str.w	r3, [sl]
 800cd18:	89a3      	ldrh	r3, [r4, #12]
 800cd1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cd1e:	81a3      	strh	r3, [r4, #12]
 800cd20:	f04f 30ff 	mov.w	r0, #4294967295
 800cd24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cd28:	6921      	ldr	r1, [r4, #16]
 800cd2a:	464a      	mov	r2, r9
 800cd2c:	f7ff fe32 	bl	800c994 <memcpy>
 800cd30:	89a3      	ldrh	r3, [r4, #12]
 800cd32:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800cd36:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cd3a:	81a3      	strh	r3, [r4, #12]
 800cd3c:	6126      	str	r6, [r4, #16]
 800cd3e:	6165      	str	r5, [r4, #20]
 800cd40:	444e      	add	r6, r9
 800cd42:	eba5 0509 	sub.w	r5, r5, r9
 800cd46:	6026      	str	r6, [r4, #0]
 800cd48:	60a5      	str	r5, [r4, #8]
 800cd4a:	463e      	mov	r6, r7
 800cd4c:	42be      	cmp	r6, r7
 800cd4e:	d900      	bls.n	800cd52 <__ssputs_r+0x86>
 800cd50:	463e      	mov	r6, r7
 800cd52:	6820      	ldr	r0, [r4, #0]
 800cd54:	4632      	mov	r2, r6
 800cd56:	4641      	mov	r1, r8
 800cd58:	f000 faa8 	bl	800d2ac <memmove>
 800cd5c:	68a3      	ldr	r3, [r4, #8]
 800cd5e:	1b9b      	subs	r3, r3, r6
 800cd60:	60a3      	str	r3, [r4, #8]
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	4433      	add	r3, r6
 800cd66:	6023      	str	r3, [r4, #0]
 800cd68:	2000      	movs	r0, #0
 800cd6a:	e7db      	b.n	800cd24 <__ssputs_r+0x58>
 800cd6c:	462a      	mov	r2, r5
 800cd6e:	f000 fab7 	bl	800d2e0 <_realloc_r>
 800cd72:	4606      	mov	r6, r0
 800cd74:	2800      	cmp	r0, #0
 800cd76:	d1e1      	bne.n	800cd3c <__ssputs_r+0x70>
 800cd78:	6921      	ldr	r1, [r4, #16]
 800cd7a:	4650      	mov	r0, sl
 800cd7c:	f7ff ff5a 	bl	800cc34 <_free_r>
 800cd80:	e7c7      	b.n	800cd12 <__ssputs_r+0x46>
	...

0800cd84 <_svfiprintf_r>:
 800cd84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd88:	4698      	mov	r8, r3
 800cd8a:	898b      	ldrh	r3, [r1, #12]
 800cd8c:	061b      	lsls	r3, r3, #24
 800cd8e:	b09d      	sub	sp, #116	; 0x74
 800cd90:	4607      	mov	r7, r0
 800cd92:	460d      	mov	r5, r1
 800cd94:	4614      	mov	r4, r2
 800cd96:	d50e      	bpl.n	800cdb6 <_svfiprintf_r+0x32>
 800cd98:	690b      	ldr	r3, [r1, #16]
 800cd9a:	b963      	cbnz	r3, 800cdb6 <_svfiprintf_r+0x32>
 800cd9c:	2140      	movs	r1, #64	; 0x40
 800cd9e:	f7ff fe2f 	bl	800ca00 <_malloc_r>
 800cda2:	6028      	str	r0, [r5, #0]
 800cda4:	6128      	str	r0, [r5, #16]
 800cda6:	b920      	cbnz	r0, 800cdb2 <_svfiprintf_r+0x2e>
 800cda8:	230c      	movs	r3, #12
 800cdaa:	603b      	str	r3, [r7, #0]
 800cdac:	f04f 30ff 	mov.w	r0, #4294967295
 800cdb0:	e0d1      	b.n	800cf56 <_svfiprintf_r+0x1d2>
 800cdb2:	2340      	movs	r3, #64	; 0x40
 800cdb4:	616b      	str	r3, [r5, #20]
 800cdb6:	2300      	movs	r3, #0
 800cdb8:	9309      	str	r3, [sp, #36]	; 0x24
 800cdba:	2320      	movs	r3, #32
 800cdbc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cdc0:	f8cd 800c 	str.w	r8, [sp, #12]
 800cdc4:	2330      	movs	r3, #48	; 0x30
 800cdc6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800cf70 <_svfiprintf_r+0x1ec>
 800cdca:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cdce:	f04f 0901 	mov.w	r9, #1
 800cdd2:	4623      	mov	r3, r4
 800cdd4:	469a      	mov	sl, r3
 800cdd6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdda:	b10a      	cbz	r2, 800cde0 <_svfiprintf_r+0x5c>
 800cddc:	2a25      	cmp	r2, #37	; 0x25
 800cdde:	d1f9      	bne.n	800cdd4 <_svfiprintf_r+0x50>
 800cde0:	ebba 0b04 	subs.w	fp, sl, r4
 800cde4:	d00b      	beq.n	800cdfe <_svfiprintf_r+0x7a>
 800cde6:	465b      	mov	r3, fp
 800cde8:	4622      	mov	r2, r4
 800cdea:	4629      	mov	r1, r5
 800cdec:	4638      	mov	r0, r7
 800cdee:	f7ff ff6d 	bl	800cccc <__ssputs_r>
 800cdf2:	3001      	adds	r0, #1
 800cdf4:	f000 80aa 	beq.w	800cf4c <_svfiprintf_r+0x1c8>
 800cdf8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cdfa:	445a      	add	r2, fp
 800cdfc:	9209      	str	r2, [sp, #36]	; 0x24
 800cdfe:	f89a 3000 	ldrb.w	r3, [sl]
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	f000 80a2 	beq.w	800cf4c <_svfiprintf_r+0x1c8>
 800ce08:	2300      	movs	r3, #0
 800ce0a:	f04f 32ff 	mov.w	r2, #4294967295
 800ce0e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ce12:	f10a 0a01 	add.w	sl, sl, #1
 800ce16:	9304      	str	r3, [sp, #16]
 800ce18:	9307      	str	r3, [sp, #28]
 800ce1a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ce1e:	931a      	str	r3, [sp, #104]	; 0x68
 800ce20:	4654      	mov	r4, sl
 800ce22:	2205      	movs	r2, #5
 800ce24:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ce28:	4851      	ldr	r0, [pc, #324]	; (800cf70 <_svfiprintf_r+0x1ec>)
 800ce2a:	f7f3 f9d9 	bl	80001e0 <memchr>
 800ce2e:	9a04      	ldr	r2, [sp, #16]
 800ce30:	b9d8      	cbnz	r0, 800ce6a <_svfiprintf_r+0xe6>
 800ce32:	06d0      	lsls	r0, r2, #27
 800ce34:	bf44      	itt	mi
 800ce36:	2320      	movmi	r3, #32
 800ce38:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce3c:	0711      	lsls	r1, r2, #28
 800ce3e:	bf44      	itt	mi
 800ce40:	232b      	movmi	r3, #43	; 0x2b
 800ce42:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ce46:	f89a 3000 	ldrb.w	r3, [sl]
 800ce4a:	2b2a      	cmp	r3, #42	; 0x2a
 800ce4c:	d015      	beq.n	800ce7a <_svfiprintf_r+0xf6>
 800ce4e:	9a07      	ldr	r2, [sp, #28]
 800ce50:	4654      	mov	r4, sl
 800ce52:	2000      	movs	r0, #0
 800ce54:	f04f 0c0a 	mov.w	ip, #10
 800ce58:	4621      	mov	r1, r4
 800ce5a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ce5e:	3b30      	subs	r3, #48	; 0x30
 800ce60:	2b09      	cmp	r3, #9
 800ce62:	d94e      	bls.n	800cf02 <_svfiprintf_r+0x17e>
 800ce64:	b1b0      	cbz	r0, 800ce94 <_svfiprintf_r+0x110>
 800ce66:	9207      	str	r2, [sp, #28]
 800ce68:	e014      	b.n	800ce94 <_svfiprintf_r+0x110>
 800ce6a:	eba0 0308 	sub.w	r3, r0, r8
 800ce6e:	fa09 f303 	lsl.w	r3, r9, r3
 800ce72:	4313      	orrs	r3, r2
 800ce74:	9304      	str	r3, [sp, #16]
 800ce76:	46a2      	mov	sl, r4
 800ce78:	e7d2      	b.n	800ce20 <_svfiprintf_r+0x9c>
 800ce7a:	9b03      	ldr	r3, [sp, #12]
 800ce7c:	1d19      	adds	r1, r3, #4
 800ce7e:	681b      	ldr	r3, [r3, #0]
 800ce80:	9103      	str	r1, [sp, #12]
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	bfbb      	ittet	lt
 800ce86:	425b      	neglt	r3, r3
 800ce88:	f042 0202 	orrlt.w	r2, r2, #2
 800ce8c:	9307      	strge	r3, [sp, #28]
 800ce8e:	9307      	strlt	r3, [sp, #28]
 800ce90:	bfb8      	it	lt
 800ce92:	9204      	strlt	r2, [sp, #16]
 800ce94:	7823      	ldrb	r3, [r4, #0]
 800ce96:	2b2e      	cmp	r3, #46	; 0x2e
 800ce98:	d10c      	bne.n	800ceb4 <_svfiprintf_r+0x130>
 800ce9a:	7863      	ldrb	r3, [r4, #1]
 800ce9c:	2b2a      	cmp	r3, #42	; 0x2a
 800ce9e:	d135      	bne.n	800cf0c <_svfiprintf_r+0x188>
 800cea0:	9b03      	ldr	r3, [sp, #12]
 800cea2:	1d1a      	adds	r2, r3, #4
 800cea4:	681b      	ldr	r3, [r3, #0]
 800cea6:	9203      	str	r2, [sp, #12]
 800cea8:	2b00      	cmp	r3, #0
 800ceaa:	bfb8      	it	lt
 800ceac:	f04f 33ff 	movlt.w	r3, #4294967295
 800ceb0:	3402      	adds	r4, #2
 800ceb2:	9305      	str	r3, [sp, #20]
 800ceb4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800cf80 <_svfiprintf_r+0x1fc>
 800ceb8:	7821      	ldrb	r1, [r4, #0]
 800ceba:	2203      	movs	r2, #3
 800cebc:	4650      	mov	r0, sl
 800cebe:	f7f3 f98f 	bl	80001e0 <memchr>
 800cec2:	b140      	cbz	r0, 800ced6 <_svfiprintf_r+0x152>
 800cec4:	2340      	movs	r3, #64	; 0x40
 800cec6:	eba0 000a 	sub.w	r0, r0, sl
 800ceca:	fa03 f000 	lsl.w	r0, r3, r0
 800cece:	9b04      	ldr	r3, [sp, #16]
 800ced0:	4303      	orrs	r3, r0
 800ced2:	3401      	adds	r4, #1
 800ced4:	9304      	str	r3, [sp, #16]
 800ced6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ceda:	4826      	ldr	r0, [pc, #152]	; (800cf74 <_svfiprintf_r+0x1f0>)
 800cedc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cee0:	2206      	movs	r2, #6
 800cee2:	f7f3 f97d 	bl	80001e0 <memchr>
 800cee6:	2800      	cmp	r0, #0
 800cee8:	d038      	beq.n	800cf5c <_svfiprintf_r+0x1d8>
 800ceea:	4b23      	ldr	r3, [pc, #140]	; (800cf78 <_svfiprintf_r+0x1f4>)
 800ceec:	bb1b      	cbnz	r3, 800cf36 <_svfiprintf_r+0x1b2>
 800ceee:	9b03      	ldr	r3, [sp, #12]
 800cef0:	3307      	adds	r3, #7
 800cef2:	f023 0307 	bic.w	r3, r3, #7
 800cef6:	3308      	adds	r3, #8
 800cef8:	9303      	str	r3, [sp, #12]
 800cefa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cefc:	4433      	add	r3, r6
 800cefe:	9309      	str	r3, [sp, #36]	; 0x24
 800cf00:	e767      	b.n	800cdd2 <_svfiprintf_r+0x4e>
 800cf02:	fb0c 3202 	mla	r2, ip, r2, r3
 800cf06:	460c      	mov	r4, r1
 800cf08:	2001      	movs	r0, #1
 800cf0a:	e7a5      	b.n	800ce58 <_svfiprintf_r+0xd4>
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	3401      	adds	r4, #1
 800cf10:	9305      	str	r3, [sp, #20]
 800cf12:	4619      	mov	r1, r3
 800cf14:	f04f 0c0a 	mov.w	ip, #10
 800cf18:	4620      	mov	r0, r4
 800cf1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800cf1e:	3a30      	subs	r2, #48	; 0x30
 800cf20:	2a09      	cmp	r2, #9
 800cf22:	d903      	bls.n	800cf2c <_svfiprintf_r+0x1a8>
 800cf24:	2b00      	cmp	r3, #0
 800cf26:	d0c5      	beq.n	800ceb4 <_svfiprintf_r+0x130>
 800cf28:	9105      	str	r1, [sp, #20]
 800cf2a:	e7c3      	b.n	800ceb4 <_svfiprintf_r+0x130>
 800cf2c:	fb0c 2101 	mla	r1, ip, r1, r2
 800cf30:	4604      	mov	r4, r0
 800cf32:	2301      	movs	r3, #1
 800cf34:	e7f0      	b.n	800cf18 <_svfiprintf_r+0x194>
 800cf36:	ab03      	add	r3, sp, #12
 800cf38:	9300      	str	r3, [sp, #0]
 800cf3a:	462a      	mov	r2, r5
 800cf3c:	4b0f      	ldr	r3, [pc, #60]	; (800cf7c <_svfiprintf_r+0x1f8>)
 800cf3e:	a904      	add	r1, sp, #16
 800cf40:	4638      	mov	r0, r7
 800cf42:	f3af 8000 	nop.w
 800cf46:	1c42      	adds	r2, r0, #1
 800cf48:	4606      	mov	r6, r0
 800cf4a:	d1d6      	bne.n	800cefa <_svfiprintf_r+0x176>
 800cf4c:	89ab      	ldrh	r3, [r5, #12]
 800cf4e:	065b      	lsls	r3, r3, #25
 800cf50:	f53f af2c 	bmi.w	800cdac <_svfiprintf_r+0x28>
 800cf54:	9809      	ldr	r0, [sp, #36]	; 0x24
 800cf56:	b01d      	add	sp, #116	; 0x74
 800cf58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf5c:	ab03      	add	r3, sp, #12
 800cf5e:	9300      	str	r3, [sp, #0]
 800cf60:	462a      	mov	r2, r5
 800cf62:	4b06      	ldr	r3, [pc, #24]	; (800cf7c <_svfiprintf_r+0x1f8>)
 800cf64:	a904      	add	r1, sp, #16
 800cf66:	4638      	mov	r0, r7
 800cf68:	f000 f87a 	bl	800d060 <_printf_i>
 800cf6c:	e7eb      	b.n	800cf46 <_svfiprintf_r+0x1c2>
 800cf6e:	bf00      	nop
 800cf70:	0800dac4 	.word	0x0800dac4
 800cf74:	0800dace 	.word	0x0800dace
 800cf78:	00000000 	.word	0x00000000
 800cf7c:	0800cccd 	.word	0x0800cccd
 800cf80:	0800daca 	.word	0x0800daca

0800cf84 <_printf_common>:
 800cf84:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cf88:	4616      	mov	r6, r2
 800cf8a:	4699      	mov	r9, r3
 800cf8c:	688a      	ldr	r2, [r1, #8]
 800cf8e:	690b      	ldr	r3, [r1, #16]
 800cf90:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800cf94:	4293      	cmp	r3, r2
 800cf96:	bfb8      	it	lt
 800cf98:	4613      	movlt	r3, r2
 800cf9a:	6033      	str	r3, [r6, #0]
 800cf9c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800cfa0:	4607      	mov	r7, r0
 800cfa2:	460c      	mov	r4, r1
 800cfa4:	b10a      	cbz	r2, 800cfaa <_printf_common+0x26>
 800cfa6:	3301      	adds	r3, #1
 800cfa8:	6033      	str	r3, [r6, #0]
 800cfaa:	6823      	ldr	r3, [r4, #0]
 800cfac:	0699      	lsls	r1, r3, #26
 800cfae:	bf42      	ittt	mi
 800cfb0:	6833      	ldrmi	r3, [r6, #0]
 800cfb2:	3302      	addmi	r3, #2
 800cfb4:	6033      	strmi	r3, [r6, #0]
 800cfb6:	6825      	ldr	r5, [r4, #0]
 800cfb8:	f015 0506 	ands.w	r5, r5, #6
 800cfbc:	d106      	bne.n	800cfcc <_printf_common+0x48>
 800cfbe:	f104 0a19 	add.w	sl, r4, #25
 800cfc2:	68e3      	ldr	r3, [r4, #12]
 800cfc4:	6832      	ldr	r2, [r6, #0]
 800cfc6:	1a9b      	subs	r3, r3, r2
 800cfc8:	42ab      	cmp	r3, r5
 800cfca:	dc26      	bgt.n	800d01a <_printf_common+0x96>
 800cfcc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800cfd0:	1e13      	subs	r3, r2, #0
 800cfd2:	6822      	ldr	r2, [r4, #0]
 800cfd4:	bf18      	it	ne
 800cfd6:	2301      	movne	r3, #1
 800cfd8:	0692      	lsls	r2, r2, #26
 800cfda:	d42b      	bmi.n	800d034 <_printf_common+0xb0>
 800cfdc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800cfe0:	4649      	mov	r1, r9
 800cfe2:	4638      	mov	r0, r7
 800cfe4:	47c0      	blx	r8
 800cfe6:	3001      	adds	r0, #1
 800cfe8:	d01e      	beq.n	800d028 <_printf_common+0xa4>
 800cfea:	6823      	ldr	r3, [r4, #0]
 800cfec:	68e5      	ldr	r5, [r4, #12]
 800cfee:	6832      	ldr	r2, [r6, #0]
 800cff0:	f003 0306 	and.w	r3, r3, #6
 800cff4:	2b04      	cmp	r3, #4
 800cff6:	bf08      	it	eq
 800cff8:	1aad      	subeq	r5, r5, r2
 800cffa:	68a3      	ldr	r3, [r4, #8]
 800cffc:	6922      	ldr	r2, [r4, #16]
 800cffe:	bf0c      	ite	eq
 800d000:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d004:	2500      	movne	r5, #0
 800d006:	4293      	cmp	r3, r2
 800d008:	bfc4      	itt	gt
 800d00a:	1a9b      	subgt	r3, r3, r2
 800d00c:	18ed      	addgt	r5, r5, r3
 800d00e:	2600      	movs	r6, #0
 800d010:	341a      	adds	r4, #26
 800d012:	42b5      	cmp	r5, r6
 800d014:	d11a      	bne.n	800d04c <_printf_common+0xc8>
 800d016:	2000      	movs	r0, #0
 800d018:	e008      	b.n	800d02c <_printf_common+0xa8>
 800d01a:	2301      	movs	r3, #1
 800d01c:	4652      	mov	r2, sl
 800d01e:	4649      	mov	r1, r9
 800d020:	4638      	mov	r0, r7
 800d022:	47c0      	blx	r8
 800d024:	3001      	adds	r0, #1
 800d026:	d103      	bne.n	800d030 <_printf_common+0xac>
 800d028:	f04f 30ff 	mov.w	r0, #4294967295
 800d02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d030:	3501      	adds	r5, #1
 800d032:	e7c6      	b.n	800cfc2 <_printf_common+0x3e>
 800d034:	18e1      	adds	r1, r4, r3
 800d036:	1c5a      	adds	r2, r3, #1
 800d038:	2030      	movs	r0, #48	; 0x30
 800d03a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800d03e:	4422      	add	r2, r4
 800d040:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800d044:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800d048:	3302      	adds	r3, #2
 800d04a:	e7c7      	b.n	800cfdc <_printf_common+0x58>
 800d04c:	2301      	movs	r3, #1
 800d04e:	4622      	mov	r2, r4
 800d050:	4649      	mov	r1, r9
 800d052:	4638      	mov	r0, r7
 800d054:	47c0      	blx	r8
 800d056:	3001      	adds	r0, #1
 800d058:	d0e6      	beq.n	800d028 <_printf_common+0xa4>
 800d05a:	3601      	adds	r6, #1
 800d05c:	e7d9      	b.n	800d012 <_printf_common+0x8e>
	...

0800d060 <_printf_i>:
 800d060:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d064:	7e0f      	ldrb	r7, [r1, #24]
 800d066:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800d068:	2f78      	cmp	r7, #120	; 0x78
 800d06a:	4691      	mov	r9, r2
 800d06c:	4680      	mov	r8, r0
 800d06e:	460c      	mov	r4, r1
 800d070:	469a      	mov	sl, r3
 800d072:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800d076:	d807      	bhi.n	800d088 <_printf_i+0x28>
 800d078:	2f62      	cmp	r7, #98	; 0x62
 800d07a:	d80a      	bhi.n	800d092 <_printf_i+0x32>
 800d07c:	2f00      	cmp	r7, #0
 800d07e:	f000 80d8 	beq.w	800d232 <_printf_i+0x1d2>
 800d082:	2f58      	cmp	r7, #88	; 0x58
 800d084:	f000 80a3 	beq.w	800d1ce <_printf_i+0x16e>
 800d088:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d08c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800d090:	e03a      	b.n	800d108 <_printf_i+0xa8>
 800d092:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800d096:	2b15      	cmp	r3, #21
 800d098:	d8f6      	bhi.n	800d088 <_printf_i+0x28>
 800d09a:	a101      	add	r1, pc, #4	; (adr r1, 800d0a0 <_printf_i+0x40>)
 800d09c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d0a0:	0800d0f9 	.word	0x0800d0f9
 800d0a4:	0800d10d 	.word	0x0800d10d
 800d0a8:	0800d089 	.word	0x0800d089
 800d0ac:	0800d089 	.word	0x0800d089
 800d0b0:	0800d089 	.word	0x0800d089
 800d0b4:	0800d089 	.word	0x0800d089
 800d0b8:	0800d10d 	.word	0x0800d10d
 800d0bc:	0800d089 	.word	0x0800d089
 800d0c0:	0800d089 	.word	0x0800d089
 800d0c4:	0800d089 	.word	0x0800d089
 800d0c8:	0800d089 	.word	0x0800d089
 800d0cc:	0800d219 	.word	0x0800d219
 800d0d0:	0800d13d 	.word	0x0800d13d
 800d0d4:	0800d1fb 	.word	0x0800d1fb
 800d0d8:	0800d089 	.word	0x0800d089
 800d0dc:	0800d089 	.word	0x0800d089
 800d0e0:	0800d23b 	.word	0x0800d23b
 800d0e4:	0800d089 	.word	0x0800d089
 800d0e8:	0800d13d 	.word	0x0800d13d
 800d0ec:	0800d089 	.word	0x0800d089
 800d0f0:	0800d089 	.word	0x0800d089
 800d0f4:	0800d203 	.word	0x0800d203
 800d0f8:	682b      	ldr	r3, [r5, #0]
 800d0fa:	1d1a      	adds	r2, r3, #4
 800d0fc:	681b      	ldr	r3, [r3, #0]
 800d0fe:	602a      	str	r2, [r5, #0]
 800d100:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800d104:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800d108:	2301      	movs	r3, #1
 800d10a:	e0a3      	b.n	800d254 <_printf_i+0x1f4>
 800d10c:	6820      	ldr	r0, [r4, #0]
 800d10e:	6829      	ldr	r1, [r5, #0]
 800d110:	0606      	lsls	r6, r0, #24
 800d112:	f101 0304 	add.w	r3, r1, #4
 800d116:	d50a      	bpl.n	800d12e <_printf_i+0xce>
 800d118:	680e      	ldr	r6, [r1, #0]
 800d11a:	602b      	str	r3, [r5, #0]
 800d11c:	2e00      	cmp	r6, #0
 800d11e:	da03      	bge.n	800d128 <_printf_i+0xc8>
 800d120:	232d      	movs	r3, #45	; 0x2d
 800d122:	4276      	negs	r6, r6
 800d124:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d128:	485e      	ldr	r0, [pc, #376]	; (800d2a4 <_printf_i+0x244>)
 800d12a:	230a      	movs	r3, #10
 800d12c:	e019      	b.n	800d162 <_printf_i+0x102>
 800d12e:	680e      	ldr	r6, [r1, #0]
 800d130:	602b      	str	r3, [r5, #0]
 800d132:	f010 0f40 	tst.w	r0, #64	; 0x40
 800d136:	bf18      	it	ne
 800d138:	b236      	sxthne	r6, r6
 800d13a:	e7ef      	b.n	800d11c <_printf_i+0xbc>
 800d13c:	682b      	ldr	r3, [r5, #0]
 800d13e:	6820      	ldr	r0, [r4, #0]
 800d140:	1d19      	adds	r1, r3, #4
 800d142:	6029      	str	r1, [r5, #0]
 800d144:	0601      	lsls	r1, r0, #24
 800d146:	d501      	bpl.n	800d14c <_printf_i+0xec>
 800d148:	681e      	ldr	r6, [r3, #0]
 800d14a:	e002      	b.n	800d152 <_printf_i+0xf2>
 800d14c:	0646      	lsls	r6, r0, #25
 800d14e:	d5fb      	bpl.n	800d148 <_printf_i+0xe8>
 800d150:	881e      	ldrh	r6, [r3, #0]
 800d152:	4854      	ldr	r0, [pc, #336]	; (800d2a4 <_printf_i+0x244>)
 800d154:	2f6f      	cmp	r7, #111	; 0x6f
 800d156:	bf0c      	ite	eq
 800d158:	2308      	moveq	r3, #8
 800d15a:	230a      	movne	r3, #10
 800d15c:	2100      	movs	r1, #0
 800d15e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800d162:	6865      	ldr	r5, [r4, #4]
 800d164:	60a5      	str	r5, [r4, #8]
 800d166:	2d00      	cmp	r5, #0
 800d168:	bfa2      	ittt	ge
 800d16a:	6821      	ldrge	r1, [r4, #0]
 800d16c:	f021 0104 	bicge.w	r1, r1, #4
 800d170:	6021      	strge	r1, [r4, #0]
 800d172:	b90e      	cbnz	r6, 800d178 <_printf_i+0x118>
 800d174:	2d00      	cmp	r5, #0
 800d176:	d04d      	beq.n	800d214 <_printf_i+0x1b4>
 800d178:	4615      	mov	r5, r2
 800d17a:	fbb6 f1f3 	udiv	r1, r6, r3
 800d17e:	fb03 6711 	mls	r7, r3, r1, r6
 800d182:	5dc7      	ldrb	r7, [r0, r7]
 800d184:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800d188:	4637      	mov	r7, r6
 800d18a:	42bb      	cmp	r3, r7
 800d18c:	460e      	mov	r6, r1
 800d18e:	d9f4      	bls.n	800d17a <_printf_i+0x11a>
 800d190:	2b08      	cmp	r3, #8
 800d192:	d10b      	bne.n	800d1ac <_printf_i+0x14c>
 800d194:	6823      	ldr	r3, [r4, #0]
 800d196:	07de      	lsls	r6, r3, #31
 800d198:	d508      	bpl.n	800d1ac <_printf_i+0x14c>
 800d19a:	6923      	ldr	r3, [r4, #16]
 800d19c:	6861      	ldr	r1, [r4, #4]
 800d19e:	4299      	cmp	r1, r3
 800d1a0:	bfde      	ittt	le
 800d1a2:	2330      	movle	r3, #48	; 0x30
 800d1a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800d1a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800d1ac:	1b52      	subs	r2, r2, r5
 800d1ae:	6122      	str	r2, [r4, #16]
 800d1b0:	f8cd a000 	str.w	sl, [sp]
 800d1b4:	464b      	mov	r3, r9
 800d1b6:	aa03      	add	r2, sp, #12
 800d1b8:	4621      	mov	r1, r4
 800d1ba:	4640      	mov	r0, r8
 800d1bc:	f7ff fee2 	bl	800cf84 <_printf_common>
 800d1c0:	3001      	adds	r0, #1
 800d1c2:	d14c      	bne.n	800d25e <_printf_i+0x1fe>
 800d1c4:	f04f 30ff 	mov.w	r0, #4294967295
 800d1c8:	b004      	add	sp, #16
 800d1ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d1ce:	4835      	ldr	r0, [pc, #212]	; (800d2a4 <_printf_i+0x244>)
 800d1d0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800d1d4:	6829      	ldr	r1, [r5, #0]
 800d1d6:	6823      	ldr	r3, [r4, #0]
 800d1d8:	f851 6b04 	ldr.w	r6, [r1], #4
 800d1dc:	6029      	str	r1, [r5, #0]
 800d1de:	061d      	lsls	r5, r3, #24
 800d1e0:	d514      	bpl.n	800d20c <_printf_i+0x1ac>
 800d1e2:	07df      	lsls	r7, r3, #31
 800d1e4:	bf44      	itt	mi
 800d1e6:	f043 0320 	orrmi.w	r3, r3, #32
 800d1ea:	6023      	strmi	r3, [r4, #0]
 800d1ec:	b91e      	cbnz	r6, 800d1f6 <_printf_i+0x196>
 800d1ee:	6823      	ldr	r3, [r4, #0]
 800d1f0:	f023 0320 	bic.w	r3, r3, #32
 800d1f4:	6023      	str	r3, [r4, #0]
 800d1f6:	2310      	movs	r3, #16
 800d1f8:	e7b0      	b.n	800d15c <_printf_i+0xfc>
 800d1fa:	6823      	ldr	r3, [r4, #0]
 800d1fc:	f043 0320 	orr.w	r3, r3, #32
 800d200:	6023      	str	r3, [r4, #0]
 800d202:	2378      	movs	r3, #120	; 0x78
 800d204:	4828      	ldr	r0, [pc, #160]	; (800d2a8 <_printf_i+0x248>)
 800d206:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800d20a:	e7e3      	b.n	800d1d4 <_printf_i+0x174>
 800d20c:	0659      	lsls	r1, r3, #25
 800d20e:	bf48      	it	mi
 800d210:	b2b6      	uxthmi	r6, r6
 800d212:	e7e6      	b.n	800d1e2 <_printf_i+0x182>
 800d214:	4615      	mov	r5, r2
 800d216:	e7bb      	b.n	800d190 <_printf_i+0x130>
 800d218:	682b      	ldr	r3, [r5, #0]
 800d21a:	6826      	ldr	r6, [r4, #0]
 800d21c:	6961      	ldr	r1, [r4, #20]
 800d21e:	1d18      	adds	r0, r3, #4
 800d220:	6028      	str	r0, [r5, #0]
 800d222:	0635      	lsls	r5, r6, #24
 800d224:	681b      	ldr	r3, [r3, #0]
 800d226:	d501      	bpl.n	800d22c <_printf_i+0x1cc>
 800d228:	6019      	str	r1, [r3, #0]
 800d22a:	e002      	b.n	800d232 <_printf_i+0x1d2>
 800d22c:	0670      	lsls	r0, r6, #25
 800d22e:	d5fb      	bpl.n	800d228 <_printf_i+0x1c8>
 800d230:	8019      	strh	r1, [r3, #0]
 800d232:	2300      	movs	r3, #0
 800d234:	6123      	str	r3, [r4, #16]
 800d236:	4615      	mov	r5, r2
 800d238:	e7ba      	b.n	800d1b0 <_printf_i+0x150>
 800d23a:	682b      	ldr	r3, [r5, #0]
 800d23c:	1d1a      	adds	r2, r3, #4
 800d23e:	602a      	str	r2, [r5, #0]
 800d240:	681d      	ldr	r5, [r3, #0]
 800d242:	6862      	ldr	r2, [r4, #4]
 800d244:	2100      	movs	r1, #0
 800d246:	4628      	mov	r0, r5
 800d248:	f7f2 ffca 	bl	80001e0 <memchr>
 800d24c:	b108      	cbz	r0, 800d252 <_printf_i+0x1f2>
 800d24e:	1b40      	subs	r0, r0, r5
 800d250:	6060      	str	r0, [r4, #4]
 800d252:	6863      	ldr	r3, [r4, #4]
 800d254:	6123      	str	r3, [r4, #16]
 800d256:	2300      	movs	r3, #0
 800d258:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800d25c:	e7a8      	b.n	800d1b0 <_printf_i+0x150>
 800d25e:	6923      	ldr	r3, [r4, #16]
 800d260:	462a      	mov	r2, r5
 800d262:	4649      	mov	r1, r9
 800d264:	4640      	mov	r0, r8
 800d266:	47d0      	blx	sl
 800d268:	3001      	adds	r0, #1
 800d26a:	d0ab      	beq.n	800d1c4 <_printf_i+0x164>
 800d26c:	6823      	ldr	r3, [r4, #0]
 800d26e:	079b      	lsls	r3, r3, #30
 800d270:	d413      	bmi.n	800d29a <_printf_i+0x23a>
 800d272:	68e0      	ldr	r0, [r4, #12]
 800d274:	9b03      	ldr	r3, [sp, #12]
 800d276:	4298      	cmp	r0, r3
 800d278:	bfb8      	it	lt
 800d27a:	4618      	movlt	r0, r3
 800d27c:	e7a4      	b.n	800d1c8 <_printf_i+0x168>
 800d27e:	2301      	movs	r3, #1
 800d280:	4632      	mov	r2, r6
 800d282:	4649      	mov	r1, r9
 800d284:	4640      	mov	r0, r8
 800d286:	47d0      	blx	sl
 800d288:	3001      	adds	r0, #1
 800d28a:	d09b      	beq.n	800d1c4 <_printf_i+0x164>
 800d28c:	3501      	adds	r5, #1
 800d28e:	68e3      	ldr	r3, [r4, #12]
 800d290:	9903      	ldr	r1, [sp, #12]
 800d292:	1a5b      	subs	r3, r3, r1
 800d294:	42ab      	cmp	r3, r5
 800d296:	dcf2      	bgt.n	800d27e <_printf_i+0x21e>
 800d298:	e7eb      	b.n	800d272 <_printf_i+0x212>
 800d29a:	2500      	movs	r5, #0
 800d29c:	f104 0619 	add.w	r6, r4, #25
 800d2a0:	e7f5      	b.n	800d28e <_printf_i+0x22e>
 800d2a2:	bf00      	nop
 800d2a4:	0800dad5 	.word	0x0800dad5
 800d2a8:	0800dae6 	.word	0x0800dae6

0800d2ac <memmove>:
 800d2ac:	4288      	cmp	r0, r1
 800d2ae:	b510      	push	{r4, lr}
 800d2b0:	eb01 0402 	add.w	r4, r1, r2
 800d2b4:	d902      	bls.n	800d2bc <memmove+0x10>
 800d2b6:	4284      	cmp	r4, r0
 800d2b8:	4623      	mov	r3, r4
 800d2ba:	d807      	bhi.n	800d2cc <memmove+0x20>
 800d2bc:	1e43      	subs	r3, r0, #1
 800d2be:	42a1      	cmp	r1, r4
 800d2c0:	d008      	beq.n	800d2d4 <memmove+0x28>
 800d2c2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d2c6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d2ca:	e7f8      	b.n	800d2be <memmove+0x12>
 800d2cc:	4402      	add	r2, r0
 800d2ce:	4601      	mov	r1, r0
 800d2d0:	428a      	cmp	r2, r1
 800d2d2:	d100      	bne.n	800d2d6 <memmove+0x2a>
 800d2d4:	bd10      	pop	{r4, pc}
 800d2d6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d2da:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d2de:	e7f7      	b.n	800d2d0 <memmove+0x24>

0800d2e0 <_realloc_r>:
 800d2e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d2e4:	4680      	mov	r8, r0
 800d2e6:	4614      	mov	r4, r2
 800d2e8:	460e      	mov	r6, r1
 800d2ea:	b921      	cbnz	r1, 800d2f6 <_realloc_r+0x16>
 800d2ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d2f0:	4611      	mov	r1, r2
 800d2f2:	f7ff bb85 	b.w	800ca00 <_malloc_r>
 800d2f6:	b92a      	cbnz	r2, 800d304 <_realloc_r+0x24>
 800d2f8:	f7ff fc9c 	bl	800cc34 <_free_r>
 800d2fc:	4625      	mov	r5, r4
 800d2fe:	4628      	mov	r0, r5
 800d300:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d304:	f000 f81b 	bl	800d33e <_malloc_usable_size_r>
 800d308:	4284      	cmp	r4, r0
 800d30a:	4607      	mov	r7, r0
 800d30c:	d802      	bhi.n	800d314 <_realloc_r+0x34>
 800d30e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d312:	d812      	bhi.n	800d33a <_realloc_r+0x5a>
 800d314:	4621      	mov	r1, r4
 800d316:	4640      	mov	r0, r8
 800d318:	f7ff fb72 	bl	800ca00 <_malloc_r>
 800d31c:	4605      	mov	r5, r0
 800d31e:	2800      	cmp	r0, #0
 800d320:	d0ed      	beq.n	800d2fe <_realloc_r+0x1e>
 800d322:	42bc      	cmp	r4, r7
 800d324:	4622      	mov	r2, r4
 800d326:	4631      	mov	r1, r6
 800d328:	bf28      	it	cs
 800d32a:	463a      	movcs	r2, r7
 800d32c:	f7ff fb32 	bl	800c994 <memcpy>
 800d330:	4631      	mov	r1, r6
 800d332:	4640      	mov	r0, r8
 800d334:	f7ff fc7e 	bl	800cc34 <_free_r>
 800d338:	e7e1      	b.n	800d2fe <_realloc_r+0x1e>
 800d33a:	4635      	mov	r5, r6
 800d33c:	e7df      	b.n	800d2fe <_realloc_r+0x1e>

0800d33e <_malloc_usable_size_r>:
 800d33e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d342:	1f18      	subs	r0, r3, #4
 800d344:	2b00      	cmp	r3, #0
 800d346:	bfbc      	itt	lt
 800d348:	580b      	ldrlt	r3, [r1, r0]
 800d34a:	18c0      	addlt	r0, r0, r3
 800d34c:	4770      	bx	lr
	...

0800d350 <_init>:
 800d350:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d352:	bf00      	nop
 800d354:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d356:	bc08      	pop	{r3}
 800d358:	469e      	mov	lr, r3
 800d35a:	4770      	bx	lr

0800d35c <_fini>:
 800d35c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35e:	bf00      	nop
 800d360:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800d362:	bc08      	pop	{r3}
 800d364:	469e      	mov	lr, r3
 800d366:	4770      	bx	lr
