
charIOT-Key-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e17c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000008a8  0800e310  0800e310  0001e310  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ebb8  0800ebb8  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  0800ebb8  0800ebb8  0001ebb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ebc0  0800ebc0  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ebc0  0800ebc0  0001ebc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ebc4  0800ebc4  0001ebc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  0800ebc8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ca4  200000a8  0800ec70  000200a8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d4c  0800ec70  00021d4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00068970  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000061f2  00000000  00000000  00088a48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004808  00000000  00000000  0008ec40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004560  00000000  00000000  00093448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00005d6c  00000000  00000000  000979a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00032e5e  00000000  00000000  0009d714  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00104505  00000000  00000000  000d0572  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001d4a77  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000145c4  00000000  00000000  001d4ac8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a8 	.word	0x200000a8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800e2f4 	.word	0x0800e2f4

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000ac 	.word	0x200000ac
 80001cc:	0800e2f4 	.word	0x0800e2f4

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_drsub>:
 80001e0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001e4:	e002      	b.n	80001ec <__adddf3>
 80001e6:	bf00      	nop

080001e8 <__aeabi_dsub>:
 80001e8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001ec <__adddf3>:
 80001ec:	b530      	push	{r4, r5, lr}
 80001ee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001f2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001f6:	ea94 0f05 	teq	r4, r5
 80001fa:	bf08      	it	eq
 80001fc:	ea90 0f02 	teqeq	r0, r2
 8000200:	bf1f      	itttt	ne
 8000202:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000206:	ea55 0c02 	orrsne.w	ip, r5, r2
 800020a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800020e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000212:	f000 80e2 	beq.w	80003da <__adddf3+0x1ee>
 8000216:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800021a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800021e:	bfb8      	it	lt
 8000220:	426d      	neglt	r5, r5
 8000222:	dd0c      	ble.n	800023e <__adddf3+0x52>
 8000224:	442c      	add	r4, r5
 8000226:	ea80 0202 	eor.w	r2, r0, r2
 800022a:	ea81 0303 	eor.w	r3, r1, r3
 800022e:	ea82 0000 	eor.w	r0, r2, r0
 8000232:	ea83 0101 	eor.w	r1, r3, r1
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	2d36      	cmp	r5, #54	; 0x36
 8000240:	bf88      	it	hi
 8000242:	bd30      	pophi	{r4, r5, pc}
 8000244:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000248:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800024c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000250:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000254:	d002      	beq.n	800025c <__adddf3+0x70>
 8000256:	4240      	negs	r0, r0
 8000258:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800025c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000260:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000264:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000268:	d002      	beq.n	8000270 <__adddf3+0x84>
 800026a:	4252      	negs	r2, r2
 800026c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000270:	ea94 0f05 	teq	r4, r5
 8000274:	f000 80a7 	beq.w	80003c6 <__adddf3+0x1da>
 8000278:	f1a4 0401 	sub.w	r4, r4, #1
 800027c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000280:	db0d      	blt.n	800029e <__adddf3+0xb2>
 8000282:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000286:	fa22 f205 	lsr.w	r2, r2, r5
 800028a:	1880      	adds	r0, r0, r2
 800028c:	f141 0100 	adc.w	r1, r1, #0
 8000290:	fa03 f20e 	lsl.w	r2, r3, lr
 8000294:	1880      	adds	r0, r0, r2
 8000296:	fa43 f305 	asr.w	r3, r3, r5
 800029a:	4159      	adcs	r1, r3
 800029c:	e00e      	b.n	80002bc <__adddf3+0xd0>
 800029e:	f1a5 0520 	sub.w	r5, r5, #32
 80002a2:	f10e 0e20 	add.w	lr, lr, #32
 80002a6:	2a01      	cmp	r2, #1
 80002a8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ac:	bf28      	it	cs
 80002ae:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	18c0      	adds	r0, r0, r3
 80002b8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002c0:	d507      	bpl.n	80002d2 <__adddf3+0xe6>
 80002c2:	f04f 0e00 	mov.w	lr, #0
 80002c6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002ca:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ce:	eb6e 0101 	sbc.w	r1, lr, r1
 80002d2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002d6:	d31b      	bcc.n	8000310 <__adddf3+0x124>
 80002d8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002dc:	d30c      	bcc.n	80002f8 <__adddf3+0x10c>
 80002de:	0849      	lsrs	r1, r1, #1
 80002e0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002e4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e8:	f104 0401 	add.w	r4, r4, #1
 80002ec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002f0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002f4:	f080 809a 	bcs.w	800042c <__adddf3+0x240>
 80002f8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002fc:	bf08      	it	eq
 80002fe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000302:	f150 0000 	adcs.w	r0, r0, #0
 8000306:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800030a:	ea41 0105 	orr.w	r1, r1, r5
 800030e:	bd30      	pop	{r4, r5, pc}
 8000310:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000314:	4140      	adcs	r0, r0
 8000316:	eb41 0101 	adc.w	r1, r1, r1
 800031a:	3c01      	subs	r4, #1
 800031c:	bf28      	it	cs
 800031e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000322:	d2e9      	bcs.n	80002f8 <__adddf3+0x10c>
 8000324:	f091 0f00 	teq	r1, #0
 8000328:	bf04      	itt	eq
 800032a:	4601      	moveq	r1, r0
 800032c:	2000      	moveq	r0, #0
 800032e:	fab1 f381 	clz	r3, r1
 8000332:	bf08      	it	eq
 8000334:	3320      	addeq	r3, #32
 8000336:	f1a3 030b 	sub.w	r3, r3, #11
 800033a:	f1b3 0220 	subs.w	r2, r3, #32
 800033e:	da0c      	bge.n	800035a <__adddf3+0x16e>
 8000340:	320c      	adds	r2, #12
 8000342:	dd08      	ble.n	8000356 <__adddf3+0x16a>
 8000344:	f102 0c14 	add.w	ip, r2, #20
 8000348:	f1c2 020c 	rsb	r2, r2, #12
 800034c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000350:	fa21 f102 	lsr.w	r1, r1, r2
 8000354:	e00c      	b.n	8000370 <__adddf3+0x184>
 8000356:	f102 0214 	add.w	r2, r2, #20
 800035a:	bfd8      	it	le
 800035c:	f1c2 0c20 	rsble	ip, r2, #32
 8000360:	fa01 f102 	lsl.w	r1, r1, r2
 8000364:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000368:	bfdc      	itt	le
 800036a:	ea41 010c 	orrle.w	r1, r1, ip
 800036e:	4090      	lslle	r0, r2
 8000370:	1ae4      	subs	r4, r4, r3
 8000372:	bfa2      	ittt	ge
 8000374:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000378:	4329      	orrge	r1, r5
 800037a:	bd30      	popge	{r4, r5, pc}
 800037c:	ea6f 0404 	mvn.w	r4, r4
 8000380:	3c1f      	subs	r4, #31
 8000382:	da1c      	bge.n	80003be <__adddf3+0x1d2>
 8000384:	340c      	adds	r4, #12
 8000386:	dc0e      	bgt.n	80003a6 <__adddf3+0x1ba>
 8000388:	f104 0414 	add.w	r4, r4, #20
 800038c:	f1c4 0220 	rsb	r2, r4, #32
 8000390:	fa20 f004 	lsr.w	r0, r0, r4
 8000394:	fa01 f302 	lsl.w	r3, r1, r2
 8000398:	ea40 0003 	orr.w	r0, r0, r3
 800039c:	fa21 f304 	lsr.w	r3, r1, r4
 80003a0:	ea45 0103 	orr.w	r1, r5, r3
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	f1c4 040c 	rsb	r4, r4, #12
 80003aa:	f1c4 0220 	rsb	r2, r4, #32
 80003ae:	fa20 f002 	lsr.w	r0, r0, r2
 80003b2:	fa01 f304 	lsl.w	r3, r1, r4
 80003b6:	ea40 0003 	orr.w	r0, r0, r3
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	fa21 f004 	lsr.w	r0, r1, r4
 80003c2:	4629      	mov	r1, r5
 80003c4:	bd30      	pop	{r4, r5, pc}
 80003c6:	f094 0f00 	teq	r4, #0
 80003ca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ce:	bf06      	itte	eq
 80003d0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003d4:	3401      	addeq	r4, #1
 80003d6:	3d01      	subne	r5, #1
 80003d8:	e74e      	b.n	8000278 <__adddf3+0x8c>
 80003da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003de:	bf18      	it	ne
 80003e0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003e4:	d029      	beq.n	800043a <__adddf3+0x24e>
 80003e6:	ea94 0f05 	teq	r4, r5
 80003ea:	bf08      	it	eq
 80003ec:	ea90 0f02 	teqeq	r0, r2
 80003f0:	d005      	beq.n	80003fe <__adddf3+0x212>
 80003f2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003f6:	bf04      	itt	eq
 80003f8:	4619      	moveq	r1, r3
 80003fa:	4610      	moveq	r0, r2
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	ea91 0f03 	teq	r1, r3
 8000402:	bf1e      	ittt	ne
 8000404:	2100      	movne	r1, #0
 8000406:	2000      	movne	r0, #0
 8000408:	bd30      	popne	{r4, r5, pc}
 800040a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800040e:	d105      	bne.n	800041c <__adddf3+0x230>
 8000410:	0040      	lsls	r0, r0, #1
 8000412:	4149      	adcs	r1, r1
 8000414:	bf28      	it	cs
 8000416:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800041a:	bd30      	pop	{r4, r5, pc}
 800041c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000420:	bf3c      	itt	cc
 8000422:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000426:	bd30      	popcc	{r4, r5, pc}
 8000428:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800042c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000430:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000434:	f04f 0000 	mov.w	r0, #0
 8000438:	bd30      	pop	{r4, r5, pc}
 800043a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800043e:	bf1a      	itte	ne
 8000440:	4619      	movne	r1, r3
 8000442:	4610      	movne	r0, r2
 8000444:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000448:	bf1c      	itt	ne
 800044a:	460b      	movne	r3, r1
 800044c:	4602      	movne	r2, r0
 800044e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000452:	bf06      	itte	eq
 8000454:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000458:	ea91 0f03 	teqeq	r1, r3
 800045c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	bf00      	nop

08000464 <__aeabi_ui2d>:
 8000464:	f090 0f00 	teq	r0, #0
 8000468:	bf04      	itt	eq
 800046a:	2100      	moveq	r1, #0
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000474:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000478:	f04f 0500 	mov.w	r5, #0
 800047c:	f04f 0100 	mov.w	r1, #0
 8000480:	e750      	b.n	8000324 <__adddf3+0x138>
 8000482:	bf00      	nop

08000484 <__aeabi_i2d>:
 8000484:	f090 0f00 	teq	r0, #0
 8000488:	bf04      	itt	eq
 800048a:	2100      	moveq	r1, #0
 800048c:	4770      	bxeq	lr
 800048e:	b530      	push	{r4, r5, lr}
 8000490:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000494:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000498:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800049c:	bf48      	it	mi
 800049e:	4240      	negmi	r0, r0
 80004a0:	f04f 0100 	mov.w	r1, #0
 80004a4:	e73e      	b.n	8000324 <__adddf3+0x138>
 80004a6:	bf00      	nop

080004a8 <__aeabi_f2d>:
 80004a8:	0042      	lsls	r2, r0, #1
 80004aa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ae:	ea4f 0131 	mov.w	r1, r1, rrx
 80004b2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004b6:	bf1f      	itttt	ne
 80004b8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004bc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004c0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004c4:	4770      	bxne	lr
 80004c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004ca:	bf08      	it	eq
 80004cc:	4770      	bxeq	lr
 80004ce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004d2:	bf04      	itt	eq
 80004d4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d8:	4770      	bxeq	lr
 80004da:	b530      	push	{r4, r5, lr}
 80004dc:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004e4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e8:	e71c      	b.n	8000324 <__adddf3+0x138>
 80004ea:	bf00      	nop

080004ec <__aeabi_ul2d>:
 80004ec:	ea50 0201 	orrs.w	r2, r0, r1
 80004f0:	bf08      	it	eq
 80004f2:	4770      	bxeq	lr
 80004f4:	b530      	push	{r4, r5, lr}
 80004f6:	f04f 0500 	mov.w	r5, #0
 80004fa:	e00a      	b.n	8000512 <__aeabi_l2d+0x16>

080004fc <__aeabi_l2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800050a:	d502      	bpl.n	8000512 <__aeabi_l2d+0x16>
 800050c:	4240      	negs	r0, r0
 800050e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000512:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000516:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800051a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800051e:	f43f aed8 	beq.w	80002d2 <__adddf3+0xe6>
 8000522:	f04f 0203 	mov.w	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000532:	bf18      	it	ne
 8000534:	3203      	addne	r2, #3
 8000536:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800053a:	f1c2 0320 	rsb	r3, r2, #32
 800053e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000542:	fa20 f002 	lsr.w	r0, r0, r2
 8000546:	fa01 fe03 	lsl.w	lr, r1, r3
 800054a:	ea40 000e 	orr.w	r0, r0, lr
 800054e:	fa21 f102 	lsr.w	r1, r1, r2
 8000552:	4414      	add	r4, r2
 8000554:	e6bd      	b.n	80002d2 <__adddf3+0xe6>
 8000556:	bf00      	nop

08000558 <__aeabi_dmul>:
 8000558:	b570      	push	{r4, r5, r6, lr}
 800055a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800055e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000562:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000566:	bf1d      	ittte	ne
 8000568:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800056c:	ea94 0f0c 	teqne	r4, ip
 8000570:	ea95 0f0c 	teqne	r5, ip
 8000574:	f000 f8de 	bleq	8000734 <__aeabi_dmul+0x1dc>
 8000578:	442c      	add	r4, r5
 800057a:	ea81 0603 	eor.w	r6, r1, r3
 800057e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000582:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000586:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800058a:	bf18      	it	ne
 800058c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000590:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000594:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000598:	d038      	beq.n	800060c <__aeabi_dmul+0xb4>
 800059a:	fba0 ce02 	umull	ip, lr, r0, r2
 800059e:	f04f 0500 	mov.w	r5, #0
 80005a2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005a6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005aa:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ae:	f04f 0600 	mov.w	r6, #0
 80005b2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005b6:	f09c 0f00 	teq	ip, #0
 80005ba:	bf18      	it	ne
 80005bc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005c0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005c4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005cc:	d204      	bcs.n	80005d8 <__aeabi_dmul+0x80>
 80005ce:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005d2:	416d      	adcs	r5, r5
 80005d4:	eb46 0606 	adc.w	r6, r6, r6
 80005d8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005dc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005e0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005e4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005ec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005f0:	bf88      	it	hi
 80005f2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005f6:	d81e      	bhi.n	8000636 <__aeabi_dmul+0xde>
 80005f8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005fc:	bf08      	it	eq
 80005fe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000602:	f150 0000 	adcs.w	r0, r0, #0
 8000606:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000610:	ea46 0101 	orr.w	r1, r6, r1
 8000614:	ea40 0002 	orr.w	r0, r0, r2
 8000618:	ea81 0103 	eor.w	r1, r1, r3
 800061c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000620:	bfc2      	ittt	gt
 8000622:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000626:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800062a:	bd70      	popgt	{r4, r5, r6, pc}
 800062c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000630:	f04f 0e00 	mov.w	lr, #0
 8000634:	3c01      	subs	r4, #1
 8000636:	f300 80ab 	bgt.w	8000790 <__aeabi_dmul+0x238>
 800063a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800063e:	bfde      	ittt	le
 8000640:	2000      	movle	r0, #0
 8000642:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000646:	bd70      	pople	{r4, r5, r6, pc}
 8000648:	f1c4 0400 	rsb	r4, r4, #0
 800064c:	3c20      	subs	r4, #32
 800064e:	da35      	bge.n	80006bc <__aeabi_dmul+0x164>
 8000650:	340c      	adds	r4, #12
 8000652:	dc1b      	bgt.n	800068c <__aeabi_dmul+0x134>
 8000654:	f104 0414 	add.w	r4, r4, #20
 8000658:	f1c4 0520 	rsb	r5, r4, #32
 800065c:	fa00 f305 	lsl.w	r3, r0, r5
 8000660:	fa20 f004 	lsr.w	r0, r0, r4
 8000664:	fa01 f205 	lsl.w	r2, r1, r5
 8000668:	ea40 0002 	orr.w	r0, r0, r2
 800066c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000670:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000674:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000678:	fa21 f604 	lsr.w	r6, r1, r4
 800067c:	eb42 0106 	adc.w	r1, r2, r6
 8000680:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000684:	bf08      	it	eq
 8000686:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800068a:	bd70      	pop	{r4, r5, r6, pc}
 800068c:	f1c4 040c 	rsb	r4, r4, #12
 8000690:	f1c4 0520 	rsb	r5, r4, #32
 8000694:	fa00 f304 	lsl.w	r3, r0, r4
 8000698:	fa20 f005 	lsr.w	r0, r0, r5
 800069c:	fa01 f204 	lsl.w	r2, r1, r4
 80006a0:	ea40 0002 	orr.w	r0, r0, r2
 80006a4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ac:	f141 0100 	adc.w	r1, r1, #0
 80006b0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006b4:	bf08      	it	eq
 80006b6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f1c4 0520 	rsb	r5, r4, #32
 80006c0:	fa00 f205 	lsl.w	r2, r0, r5
 80006c4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c8:	fa20 f304 	lsr.w	r3, r0, r4
 80006cc:	fa01 f205 	lsl.w	r2, r1, r5
 80006d0:	ea43 0302 	orr.w	r3, r3, r2
 80006d4:	fa21 f004 	lsr.w	r0, r1, r4
 80006d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006dc:	fa21 f204 	lsr.w	r2, r1, r4
 80006e0:	ea20 0002 	bic.w	r0, r0, r2
 80006e4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ec:	bf08      	it	eq
 80006ee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f094 0f00 	teq	r4, #0
 80006f8:	d10f      	bne.n	800071a <__aeabi_dmul+0x1c2>
 80006fa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006fe:	0040      	lsls	r0, r0, #1
 8000700:	eb41 0101 	adc.w	r1, r1, r1
 8000704:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000708:	bf08      	it	eq
 800070a:	3c01      	subeq	r4, #1
 800070c:	d0f7      	beq.n	80006fe <__aeabi_dmul+0x1a6>
 800070e:	ea41 0106 	orr.w	r1, r1, r6
 8000712:	f095 0f00 	teq	r5, #0
 8000716:	bf18      	it	ne
 8000718:	4770      	bxne	lr
 800071a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800071e:	0052      	lsls	r2, r2, #1
 8000720:	eb43 0303 	adc.w	r3, r3, r3
 8000724:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000728:	bf08      	it	eq
 800072a:	3d01      	subeq	r5, #1
 800072c:	d0f7      	beq.n	800071e <__aeabi_dmul+0x1c6>
 800072e:	ea43 0306 	orr.w	r3, r3, r6
 8000732:	4770      	bx	lr
 8000734:	ea94 0f0c 	teq	r4, ip
 8000738:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800073c:	bf18      	it	ne
 800073e:	ea95 0f0c 	teqne	r5, ip
 8000742:	d00c      	beq.n	800075e <__aeabi_dmul+0x206>
 8000744:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000748:	bf18      	it	ne
 800074a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800074e:	d1d1      	bne.n	80006f4 <__aeabi_dmul+0x19c>
 8000750:	ea81 0103 	eor.w	r1, r1, r3
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	f04f 0000 	mov.w	r0, #0
 800075c:	bd70      	pop	{r4, r5, r6, pc}
 800075e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000762:	bf06      	itte	eq
 8000764:	4610      	moveq	r0, r2
 8000766:	4619      	moveq	r1, r3
 8000768:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800076c:	d019      	beq.n	80007a2 <__aeabi_dmul+0x24a>
 800076e:	ea94 0f0c 	teq	r4, ip
 8000772:	d102      	bne.n	800077a <__aeabi_dmul+0x222>
 8000774:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000778:	d113      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800077a:	ea95 0f0c 	teq	r5, ip
 800077e:	d105      	bne.n	800078c <__aeabi_dmul+0x234>
 8000780:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000784:	bf1c      	itt	ne
 8000786:	4610      	movne	r0, r2
 8000788:	4619      	movne	r1, r3
 800078a:	d10a      	bne.n	80007a2 <__aeabi_dmul+0x24a>
 800078c:	ea81 0103 	eor.w	r1, r1, r3
 8000790:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000794:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000798:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800079c:	f04f 0000 	mov.w	r0, #0
 80007a0:	bd70      	pop	{r4, r5, r6, pc}
 80007a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007aa:	bd70      	pop	{r4, r5, r6, pc}

080007ac <__aeabi_ddiv>:
 80007ac:	b570      	push	{r4, r5, r6, lr}
 80007ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ba:	bf1d      	ittte	ne
 80007bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007c0:	ea94 0f0c 	teqne	r4, ip
 80007c4:	ea95 0f0c 	teqne	r5, ip
 80007c8:	f000 f8a7 	bleq	800091a <__aeabi_ddiv+0x16e>
 80007cc:	eba4 0405 	sub.w	r4, r4, r5
 80007d0:	ea81 0e03 	eor.w	lr, r1, r3
 80007d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007dc:	f000 8088 	beq.w	80008f0 <__aeabi_ddiv+0x144>
 80007e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000800:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000804:	429d      	cmp	r5, r3
 8000806:	bf08      	it	eq
 8000808:	4296      	cmpeq	r6, r2
 800080a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800080e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000812:	d202      	bcs.n	800081a <__aeabi_ddiv+0x6e>
 8000814:	085b      	lsrs	r3, r3, #1
 8000816:	ea4f 0232 	mov.w	r2, r2, rrx
 800081a:	1ab6      	subs	r6, r6, r2
 800081c:	eb65 0503 	sbc.w	r5, r5, r3
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800082a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000870:	085b      	lsrs	r3, r3, #1
 8000872:	ea4f 0232 	mov.w	r2, r2, rrx
 8000876:	ebb6 0e02 	subs.w	lr, r6, r2
 800087a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800087e:	bf22      	ittt	cs
 8000880:	1ab6      	subcs	r6, r6, r2
 8000882:	4675      	movcs	r5, lr
 8000884:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000888:	ea55 0e06 	orrs.w	lr, r5, r6
 800088c:	d018      	beq.n	80008c0 <__aeabi_ddiv+0x114>
 800088e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000892:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000896:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800089a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800089e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008aa:	d1c0      	bne.n	800082e <__aeabi_ddiv+0x82>
 80008ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008b0:	d10b      	bne.n	80008ca <__aeabi_ddiv+0x11e>
 80008b2:	ea41 0100 	orr.w	r1, r1, r0
 80008b6:	f04f 0000 	mov.w	r0, #0
 80008ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008be:	e7b6      	b.n	800082e <__aeabi_ddiv+0x82>
 80008c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c4:	bf04      	itt	eq
 80008c6:	4301      	orreq	r1, r0
 80008c8:	2000      	moveq	r0, #0
 80008ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008ce:	bf88      	it	hi
 80008d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008d4:	f63f aeaf 	bhi.w	8000636 <__aeabi_dmul+0xde>
 80008d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008dc:	bf04      	itt	eq
 80008de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008e6:	f150 0000 	adcs.w	r0, r0, #0
 80008ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	pop	{r4, r5, r6, pc}
 80008f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008fc:	bfc2      	ittt	gt
 80008fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000902:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000906:	bd70      	popgt	{r4, r5, r6, pc}
 8000908:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800090c:	f04f 0e00 	mov.w	lr, #0
 8000910:	3c01      	subs	r4, #1
 8000912:	e690      	b.n	8000636 <__aeabi_dmul+0xde>
 8000914:	ea45 0e06 	orr.w	lr, r5, r6
 8000918:	e68d      	b.n	8000636 <__aeabi_dmul+0xde>
 800091a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800091e:	ea94 0f0c 	teq	r4, ip
 8000922:	bf08      	it	eq
 8000924:	ea95 0f0c 	teqeq	r5, ip
 8000928:	f43f af3b 	beq.w	80007a2 <__aeabi_dmul+0x24a>
 800092c:	ea94 0f0c 	teq	r4, ip
 8000930:	d10a      	bne.n	8000948 <__aeabi_ddiv+0x19c>
 8000932:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000936:	f47f af34 	bne.w	80007a2 <__aeabi_dmul+0x24a>
 800093a:	ea95 0f0c 	teq	r5, ip
 800093e:	f47f af25 	bne.w	800078c <__aeabi_dmul+0x234>
 8000942:	4610      	mov	r0, r2
 8000944:	4619      	mov	r1, r3
 8000946:	e72c      	b.n	80007a2 <__aeabi_dmul+0x24a>
 8000948:	ea95 0f0c 	teq	r5, ip
 800094c:	d106      	bne.n	800095c <__aeabi_ddiv+0x1b0>
 800094e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000952:	f43f aefd 	beq.w	8000750 <__aeabi_dmul+0x1f8>
 8000956:	4610      	mov	r0, r2
 8000958:	4619      	mov	r1, r3
 800095a:	e722      	b.n	80007a2 <__aeabi_dmul+0x24a>
 800095c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000960:	bf18      	it	ne
 8000962:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000966:	f47f aec5 	bne.w	80006f4 <__aeabi_dmul+0x19c>
 800096a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800096e:	f47f af0d 	bne.w	800078c <__aeabi_dmul+0x234>
 8000972:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000976:	f47f aeeb 	bne.w	8000750 <__aeabi_dmul+0x1f8>
 800097a:	e712      	b.n	80007a2 <__aeabi_dmul+0x24a>

0800097c <__gedf2>:
 800097c:	f04f 3cff 	mov.w	ip, #4294967295
 8000980:	e006      	b.n	8000990 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__ledf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	e002      	b.n	8000990 <__cmpdf2+0x4>
 800098a:	bf00      	nop

0800098c <__cmpdf2>:
 800098c:	f04f 0c01 	mov.w	ip, #1
 8000990:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000994:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000998:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800099c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009a6:	d01b      	beq.n	80009e0 <__cmpdf2+0x54>
 80009a8:	b001      	add	sp, #4
 80009aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ae:	bf0c      	ite	eq
 80009b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009b4:	ea91 0f03 	teqne	r1, r3
 80009b8:	bf02      	ittt	eq
 80009ba:	ea90 0f02 	teqeq	r0, r2
 80009be:	2000      	moveq	r0, #0
 80009c0:	4770      	bxeq	lr
 80009c2:	f110 0f00 	cmn.w	r0, #0
 80009c6:	ea91 0f03 	teq	r1, r3
 80009ca:	bf58      	it	pl
 80009cc:	4299      	cmppl	r1, r3
 80009ce:	bf08      	it	eq
 80009d0:	4290      	cmpeq	r0, r2
 80009d2:	bf2c      	ite	cs
 80009d4:	17d8      	asrcs	r0, r3, #31
 80009d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009da:	f040 0001 	orr.w	r0, r0, #1
 80009de:	4770      	bx	lr
 80009e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e8:	d102      	bne.n	80009f0 <__cmpdf2+0x64>
 80009ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009ee:	d107      	bne.n	8000a00 <__cmpdf2+0x74>
 80009f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d1d6      	bne.n	80009a8 <__cmpdf2+0x1c>
 80009fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009fe:	d0d3      	beq.n	80009a8 <__cmpdf2+0x1c>
 8000a00:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a04:	4770      	bx	lr
 8000a06:	bf00      	nop

08000a08 <__aeabi_cdrcmple>:
 8000a08:	4684      	mov	ip, r0
 8000a0a:	4610      	mov	r0, r2
 8000a0c:	4662      	mov	r2, ip
 8000a0e:	468c      	mov	ip, r1
 8000a10:	4619      	mov	r1, r3
 8000a12:	4663      	mov	r3, ip
 8000a14:	e000      	b.n	8000a18 <__aeabi_cdcmpeq>
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdcmpeq>:
 8000a18:	b501      	push	{r0, lr}
 8000a1a:	f7ff ffb7 	bl	800098c <__cmpdf2>
 8000a1e:	2800      	cmp	r0, #0
 8000a20:	bf48      	it	mi
 8000a22:	f110 0f00 	cmnmi.w	r0, #0
 8000a26:	bd01      	pop	{r0, pc}

08000a28 <__aeabi_dcmpeq>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff fff4 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a30:	bf0c      	ite	eq
 8000a32:	2001      	moveq	r0, #1
 8000a34:	2000      	movne	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmplt>:
 8000a3c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a40:	f7ff ffea 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a44:	bf34      	ite	cc
 8000a46:	2001      	movcc	r0, #1
 8000a48:	2000      	movcs	r0, #0
 8000a4a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4e:	bf00      	nop

08000a50 <__aeabi_dcmple>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff ffe0 	bl	8000a18 <__aeabi_cdcmpeq>
 8000a58:	bf94      	ite	ls
 8000a5a:	2001      	movls	r0, #1
 8000a5c:	2000      	movhi	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmpge>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffce 	bl	8000a08 <__aeabi_cdrcmple>
 8000a6c:	bf94      	ite	ls
 8000a6e:	2001      	movls	r0, #1
 8000a70:	2000      	movhi	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmpgt>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffc4 	bl	8000a08 <__aeabi_cdrcmple>
 8000a80:	bf34      	ite	cc
 8000a82:	2001      	movcc	r0, #1
 8000a84:	2000      	movcs	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpun>:
 8000a8c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a90:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a94:	d102      	bne.n	8000a9c <__aeabi_dcmpun+0x10>
 8000a96:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9a:	d10a      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000a9c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa4:	d102      	bne.n	8000aac <__aeabi_dcmpun+0x20>
 8000aa6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aaa:	d102      	bne.n	8000ab2 <__aeabi_dcmpun+0x26>
 8000aac:	f04f 0000 	mov.w	r0, #0
 8000ab0:	4770      	bx	lr
 8000ab2:	f04f 0001 	mov.w	r0, #1
 8000ab6:	4770      	bx	lr

08000ab8 <__aeabi_d2iz>:
 8000ab8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d215      	bcs.n	8000aee <__aeabi_d2iz+0x36>
 8000ac2:	d511      	bpl.n	8000ae8 <__aeabi_d2iz+0x30>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d912      	bls.n	8000af4 <__aeabi_d2iz+0x3c>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ade:	fa23 f002 	lsr.w	r0, r3, r2
 8000ae2:	bf18      	it	ne
 8000ae4:	4240      	negne	r0, r0
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000af2:	d105      	bne.n	8000b00 <__aeabi_d2iz+0x48>
 8000af4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af8:	bf08      	it	eq
 8000afa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afe:	4770      	bx	lr
 8000b00:	f04f 0000 	mov.w	r0, #0
 8000b04:	4770      	bx	lr
 8000b06:	bf00      	nop

08000b08 <__aeabi_d2f>:
 8000b08:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b0c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b10:	bf24      	itt	cs
 8000b12:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b16:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b1a:	d90d      	bls.n	8000b38 <__aeabi_d2f+0x30>
 8000b1c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b20:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b24:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b28:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b2c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b30:	bf08      	it	eq
 8000b32:	f020 0001 	biceq.w	r0, r0, #1
 8000b36:	4770      	bx	lr
 8000b38:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b3c:	d121      	bne.n	8000b82 <__aeabi_d2f+0x7a>
 8000b3e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b42:	bfbc      	itt	lt
 8000b44:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b48:	4770      	bxlt	lr
 8000b4a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b4e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b52:	f1c2 0218 	rsb	r2, r2, #24
 8000b56:	f1c2 0c20 	rsb	ip, r2, #32
 8000b5a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b5e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b62:	bf18      	it	ne
 8000b64:	f040 0001 	orrne.w	r0, r0, #1
 8000b68:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b6c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b70:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b74:	ea40 000c 	orr.w	r0, r0, ip
 8000b78:	fa23 f302 	lsr.w	r3, r3, r2
 8000b7c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b80:	e7cc      	b.n	8000b1c <__aeabi_d2f+0x14>
 8000b82:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b86:	d107      	bne.n	8000b98 <__aeabi_d2f+0x90>
 8000b88:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b8c:	bf1e      	ittt	ne
 8000b8e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b92:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b96:	4770      	bxne	lr
 8000b98:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ba0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b084      	sub	sp, #16
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	7c1b      	ldrb	r3, [r3, #16]
 8000eba:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000ec2:	461a      	mov	r2, r3
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	fb02 f303 	mul.w	r3, r2, r3
 8000eca:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8000ecc:	68fb      	ldr	r3, [r7, #12]
 8000ece:	00db      	lsls	r3, r3, #3
 8000ed0:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 8000ed2:	687b      	ldr	r3, [r7, #4]
 8000ed4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ed6:	68fa      	ldr	r2, [r7, #12]
 8000ed8:	2100      	movs	r1, #0
 8000eda:	4618      	mov	r0, r3
 8000edc:	f00b fa10 	bl	800c300 <memset>
}
 8000ee0:	bf00      	nop
 8000ee2:	3710      	adds	r7, #16
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}

08000ee8 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b086      	sub	sp, #24
 8000eec:	af02      	add	r7, sp, #8
 8000eee:	6078      	str	r0, [r7, #4]
 8000ef0:	460b      	mov	r3, r1
 8000ef2:	70fb      	strb	r3, [r7, #3]
 8000ef4:	4613      	mov	r3, r2
 8000ef6:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	7c1b      	ldrb	r3, [r3, #16]
 8000efe:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 8000f00:	78fb      	ldrb	r3, [r7, #3]
 8000f02:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f08:	60bb      	str	r3, [r7, #8]
  offset *= w;
 8000f0a:	7bfb      	ldrb	r3, [r7, #15]
 8000f0c:	b29b      	uxth	r3, r3
 8000f0e:	89ba      	ldrh	r2, [r7, #12]
 8000f10:	fb12 f303 	smulbb	r3, r2, r3
 8000f14:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 8000f16:	89bb      	ldrh	r3, [r7, #12]
 8000f18:	00db      	lsls	r3, r3, #3
 8000f1a:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 8000f1c:	89bb      	ldrh	r3, [r7, #12]
 8000f1e:	68ba      	ldr	r2, [r7, #8]
 8000f20:	4413      	add	r3, r2
 8000f22:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 8000f24:	7bf9      	ldrb	r1, [r7, #15]
 8000f26:	78ba      	ldrb	r2, [r7, #2]
 8000f28:	68bb      	ldr	r3, [r7, #8]
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	460b      	mov	r3, r1
 8000f2e:	2100      	movs	r1, #0
 8000f30:	6878      	ldr	r0, [r7, #4]
 8000f32:	f001 fc96 	bl	8002862 <u8x8_DrawTile>
}
 8000f36:	bf00      	nop
 8000f38:	3710      	adds	r7, #16
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bd80      	pop	{r7, pc}

08000f3e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 8000f3e:	b580      	push	{r7, lr}
 8000f40:	b084      	sub	sp, #16
 8000f42:	af00      	add	r7, sp, #0
 8000f44:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 8000f46:	2300      	movs	r3, #0
 8000f48:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8000f50:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8000f58:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	7c5b      	ldrb	r3, [r3, #17]
 8000f60:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 8000f62:	7bba      	ldrb	r2, [r7, #14]
 8000f64:	7bfb      	ldrb	r3, [r7, #15]
 8000f66:	4619      	mov	r1, r3
 8000f68:	6878      	ldr	r0, [r7, #4]
 8000f6a:	f7ff ffbd 	bl	8000ee8 <u8g2_send_tile_row>
    src_row++;
 8000f6e:	7bfb      	ldrb	r3, [r7, #15]
 8000f70:	3301      	adds	r3, #1
 8000f72:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 8000f74:	7bbb      	ldrb	r3, [r7, #14]
 8000f76:	3301      	adds	r3, #1
 8000f78:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8000f7a:	7bfa      	ldrb	r2, [r7, #15]
 8000f7c:	7b7b      	ldrb	r3, [r7, #13]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	d203      	bcs.n	8000f8a <u8g2_send_buffer+0x4c>
 8000f82:	7bba      	ldrb	r2, [r7, #14]
 8000f84:	7b3b      	ldrb	r3, [r7, #12]
 8000f86:	429a      	cmp	r2, r3
 8000f88:	d3eb      	bcc.n	8000f62 <u8g2_send_buffer+0x24>
}
 8000f8a:	bf00      	nop
 8000f8c:	3710      	adds	r7, #16
 8000f8e:	46bd      	mov	sp, r7
 8000f90:	bd80      	pop	{r7, pc}

08000f92 <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b082      	sub	sp, #8
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8000f9a:	6878      	ldr	r0, [r7, #4]
 8000f9c:	f7ff ffcf 	bl	8000f3e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 8000fa0:	6878      	ldr	r0, [r7, #4]
 8000fa2:	f001 fcaf 	bl	8002904 <u8x8_RefreshDisplay>
}
 8000fa6:	bf00      	nop
 8000fa8:	3708      	adds	r7, #8
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	b082      	sub	sp, #8
 8000fb2:	af00      	add	r7, sp, #0
 8000fb4:	6078      	str	r0, [r7, #4]
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	78fa      	ldrb	r2, [r7, #3]
 8000fbe:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	681b      	ldr	r3, [r3, #0]
 8000fc8:	6878      	ldr	r0, [r7, #4]
 8000fca:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fd0:	685b      	ldr	r3, [r3, #4]
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	4798      	blx	r3
}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b082      	sub	sp, #8
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d002      	beq.n	8000ff6 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 8000ff0:	6878      	ldr	r0, [r7, #4]
 8000ff2:	f7ff ff5b 	bl	8000eac <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	6878      	ldr	r0, [r7, #4]
 8000ffa:	f7ff ffd8 	bl	8000fae <u8g2_SetBufferCurrTileRow>
}
 8000ffe:	bf00      	nop
 8001000:	3708      	adds	r7, #8
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}

08001006 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 8001006:	b580      	push	{r7, lr}
 8001008:	b084      	sub	sp, #16
 800100a:	af00      	add	r7, sp, #0
 800100c:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 800100e:	6878      	ldr	r0, [r7, #4]
 8001010:	f7ff ff95 	bl	8000f3e <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800101a:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 8001022:	7bfb      	ldrb	r3, [r7, #15]
 8001024:	4413      	add	r3, r2
 8001026:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	7c5b      	ldrb	r3, [r3, #17]
 800102e:	7bfa      	ldrb	r2, [r7, #15]
 8001030:	429a      	cmp	r2, r3
 8001032:	d304      	bcc.n	800103e <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 8001034:	6878      	ldr	r0, [r7, #4]
 8001036:	f001 fc65 	bl	8002904 <u8x8_RefreshDisplay>
    return 0;
 800103a:	2300      	movs	r3, #0
 800103c:	e00d      	b.n	800105a <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001044:	2b00      	cmp	r3, #0
 8001046:	d002      	beq.n	800104e <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff2f 	bl	8000eac <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 800104e:	7bfb      	ldrb	r3, [r7, #15]
 8001050:	4619      	mov	r1, r3
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff ffab 	bl	8000fae <u8g2_SetBufferCurrTileRow>
  return 1;
 8001058:	2301      	movs	r3, #1
}
 800105a:	4618      	mov	r0, r3
 800105c:	3710      	adds	r7, #16
 800105e:	46bd      	mov	sp, r7
 8001060:	bd80      	pop	{r7, pc}

08001062 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001062:	b580      	push	{r7, lr}
 8001064:	b082      	sub	sp, #8
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 800106a:	6878      	ldr	r0, [r7, #4]
 800106c:	f7ff ffb7 	bl	8000fde <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001070:	6878      	ldr	r0, [r7, #4]
 8001072:	f7ff ffc8 	bl	8001006 <u8g2_NextPage>
 8001076:	4603      	mov	r3, r0
 8001078:	2b00      	cmp	r3, #0
 800107a:	d1f9      	bne.n	8001070 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 800107c:	2100      	movs	r1, #0
 800107e:	6878      	ldr	r0, [r7, #4]
 8001080:	f7ff ff95 	bl	8000fae <u8g2_SetBufferCurrTileRow>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}

0800108c <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 800108c:	b480      	push	{r7}
 800108e:	b083      	sub	sp, #12
 8001090:	af00      	add	r7, sp, #0
 8001092:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	2204      	movs	r2, #4
 8001098:	701a      	strb	r2, [r3, #0]
  return buf;
 800109a:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <u8g2_m_16_4_f+0x1c>)
  #endif
}
 800109c:	4618      	mov	r0, r3
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr
 80010a8:	200000c4 	.word	0x200000c4

080010ac <u8g2_Setup_ssd1305_i2c_128x32_noname_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1305 f */
void u8g2_Setup_ssd1305_i2c_128x32_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b088      	sub	sp, #32
 80010b0:	af02      	add	r7, sp, #8
 80010b2:	60f8      	str	r0, [r7, #12]
 80010b4:	60b9      	str	r1, [r7, #8]
 80010b6:	607a      	str	r2, [r7, #4]
 80010b8:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1305_128x32_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	9300      	str	r3, [sp, #0]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	4a0b      	ldr	r2, [pc, #44]	; (80010f0 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x44>)
 80010c2:	490c      	ldr	r1, [pc, #48]	; (80010f4 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x48>)
 80010c4:	68f8      	ldr	r0, [r7, #12]
 80010c6:	f001 fc7d 	bl	80029c4 <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 80010ca:	f107 0313 	add.w	r3, r7, #19
 80010ce:	4618      	mov	r0, r3
 80010d0:	f7ff ffdc 	bl	800108c <u8g2_m_16_4_f>
 80010d4:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80010d6:	7cfa      	ldrb	r2, [r7, #19]
 80010d8:	68bb      	ldr	r3, [r7, #8]
 80010da:	9300      	str	r3, [sp, #0]
 80010dc:	4b06      	ldr	r3, [pc, #24]	; (80010f8 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x4c>)
 80010de:	6979      	ldr	r1, [r7, #20]
 80010e0:	68f8      	ldr	r0, [r7, #12]
 80010e2:	f000 ffc4 	bl	800206e <u8g2_SetupBuffer>
}
 80010e6:	bf00      	nop
 80010e8:	3718      	adds	r7, #24
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	08002559 	.word	0x08002559
 80010f4:	08002719 	.word	0x08002719
 80010f8:	08001ef1 	.word	0x08001ef1

080010fc <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 80010fc:	b480      	push	{r7}
 80010fe:	b083      	sub	sp, #12
 8001100:	af00      	add	r7, sp, #0
 8001102:	6078      	str	r0, [r7, #4]
 8001104:	460b      	mov	r3, r1
 8001106:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001108:	78fb      	ldrb	r3, [r7, #3]
 800110a:	687a      	ldr	r2, [r7, #4]
 800110c:	4413      	add	r3, r2
 800110e:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	781b      	ldrb	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	370c      	adds	r7, #12
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr

08001120 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001120:	b480      	push	{r7}
 8001122:	b085      	sub	sp, #20
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
 8001128:	460b      	mov	r3, r1
 800112a:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 800112c:	78fb      	ldrb	r3, [r7, #3]
 800112e:	687a      	ldr	r2, [r7, #4]
 8001130:	4413      	add	r3, r2
 8001132:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	781b      	ldrb	r3, [r3, #0]
 8001138:	81fb      	strh	r3, [r7, #14]
    font++;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3301      	adds	r3, #1
 800113e:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001140:	89fb      	ldrh	r3, [r7, #14]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	781b      	ldrb	r3, [r3, #0]
 800114a:	b29a      	uxth	r2, r3
 800114c:	89fb      	ldrh	r3, [r7, #14]
 800114e:	4413      	add	r3, r2
 8001150:	81fb      	strh	r3, [r7, #14]
    return pos;
 8001152:	89fb      	ldrh	r3, [r7, #14]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b082      	sub	sp, #8
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
 8001168:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 800116a:	2100      	movs	r1, #0
 800116c:	6838      	ldr	r0, [r7, #0]
 800116e:	f7ff ffc5 	bl	80010fc <u8g2_font_get_byte>
 8001172:	4603      	mov	r3, r0
 8001174:	461a      	mov	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 800117a:	2101      	movs	r1, #1
 800117c:	6838      	ldr	r0, [r7, #0]
 800117e:	f7ff ffbd 	bl	80010fc <u8g2_font_get_byte>
 8001182:	4603      	mov	r3, r0
 8001184:	461a      	mov	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 800118a:	2102      	movs	r1, #2
 800118c:	6838      	ldr	r0, [r7, #0]
 800118e:	f7ff ffb5 	bl	80010fc <u8g2_font_get_byte>
 8001192:	4603      	mov	r3, r0
 8001194:	461a      	mov	r2, r3
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 800119a:	2103      	movs	r1, #3
 800119c:	6838      	ldr	r0, [r7, #0]
 800119e:	f7ff ffad 	bl	80010fc <u8g2_font_get_byte>
 80011a2:	4603      	mov	r3, r0
 80011a4:	461a      	mov	r2, r3
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80011aa:	2104      	movs	r1, #4
 80011ac:	6838      	ldr	r0, [r7, #0]
 80011ae:	f7ff ffa5 	bl	80010fc <u8g2_font_get_byte>
 80011b2:	4603      	mov	r3, r0
 80011b4:	461a      	mov	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80011ba:	2105      	movs	r1, #5
 80011bc:	6838      	ldr	r0, [r7, #0]
 80011be:	f7ff ff9d 	bl	80010fc <u8g2_font_get_byte>
 80011c2:	4603      	mov	r3, r0
 80011c4:	461a      	mov	r2, r3
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80011ca:	2106      	movs	r1, #6
 80011cc:	6838      	ldr	r0, [r7, #0]
 80011ce:	f7ff ff95 	bl	80010fc <u8g2_font_get_byte>
 80011d2:	4603      	mov	r3, r0
 80011d4:	461a      	mov	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 80011da:	2107      	movs	r1, #7
 80011dc:	6838      	ldr	r0, [r7, #0]
 80011de:	f7ff ff8d 	bl	80010fc <u8g2_font_get_byte>
 80011e2:	4603      	mov	r3, r0
 80011e4:	461a      	mov	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 80011ea:	2108      	movs	r1, #8
 80011ec:	6838      	ldr	r0, [r7, #0]
 80011ee:	f7ff ff85 	bl	80010fc <u8g2_font_get_byte>
 80011f2:	4603      	mov	r3, r0
 80011f4:	461a      	mov	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 80011fa:	2109      	movs	r1, #9
 80011fc:	6838      	ldr	r0, [r7, #0]
 80011fe:	f7ff ff7d 	bl	80010fc <u8g2_font_get_byte>
 8001202:	4603      	mov	r3, r0
 8001204:	b25a      	sxtb	r2, r3
 8001206:	687b      	ldr	r3, [r7, #4]
 8001208:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 800120a:	210a      	movs	r1, #10
 800120c:	6838      	ldr	r0, [r7, #0]
 800120e:	f7ff ff75 	bl	80010fc <u8g2_font_get_byte>
 8001212:	4603      	mov	r3, r0
 8001214:	b25a      	sxtb	r2, r3
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 800121a:	210b      	movs	r1, #11
 800121c:	6838      	ldr	r0, [r7, #0]
 800121e:	f7ff ff6d 	bl	80010fc <u8g2_font_get_byte>
 8001222:	4603      	mov	r3, r0
 8001224:	b25a      	sxtb	r2, r3
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 800122a:	210c      	movs	r1, #12
 800122c:	6838      	ldr	r0, [r7, #0]
 800122e:	f7ff ff65 	bl	80010fc <u8g2_font_get_byte>
 8001232:	4603      	mov	r3, r0
 8001234:	b25a      	sxtb	r2, r3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 800123a:	210d      	movs	r1, #13
 800123c:	6838      	ldr	r0, [r7, #0]
 800123e:	f7ff ff5d 	bl	80010fc <u8g2_font_get_byte>
 8001242:	4603      	mov	r3, r0
 8001244:	b25a      	sxtb	r2, r3
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 800124a:	210e      	movs	r1, #14
 800124c:	6838      	ldr	r0, [r7, #0]
 800124e:	f7ff ff55 	bl	80010fc <u8g2_font_get_byte>
 8001252:	4603      	mov	r3, r0
 8001254:	b25a      	sxtb	r2, r3
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 800125a:	210f      	movs	r1, #15
 800125c:	6838      	ldr	r0, [r7, #0]
 800125e:	f7ff ff4d 	bl	80010fc <u8g2_font_get_byte>
 8001262:	4603      	mov	r3, r0
 8001264:	b25a      	sxtb	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 800126a:	2110      	movs	r1, #16
 800126c:	6838      	ldr	r0, [r7, #0]
 800126e:	f7ff ff45 	bl	80010fc <u8g2_font_get_byte>
 8001272:	4603      	mov	r3, r0
 8001274:	b25a      	sxtb	r2, r3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 800127a:	2111      	movs	r1, #17
 800127c:	6838      	ldr	r0, [r7, #0]
 800127e:	f7ff ff4f 	bl	8001120 <u8g2_font_get_word>
 8001282:	4603      	mov	r3, r0
 8001284:	461a      	mov	r2, r3
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 800128a:	2113      	movs	r1, #19
 800128c:	6838      	ldr	r0, [r7, #0]
 800128e:	f7ff ff47 	bl	8001120 <u8g2_font_get_word>
 8001292:	4603      	mov	r3, r0
 8001294:	461a      	mov	r2, r3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 800129a:	2115      	movs	r1, #21
 800129c:	6838      	ldr	r0, [r7, #0]
 800129e:	f7ff ff3f 	bl	8001120 <u8g2_font_get_word>
 80012a2:	4603      	mov	r3, r0
 80012a4:	461a      	mov	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	82da      	strh	r2, [r3, #22]
#endif
}
 80012aa:	bf00      	nop
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}

080012b2 <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80012b2:	b480      	push	{r7}
 80012b4:	b085      	sub	sp, #20
 80012b6:	af00      	add	r7, sp, #0
 80012b8:	6078      	str	r0, [r7, #4]
 80012ba:	460b      	mov	r3, r1
 80012bc:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	7b1b      	ldrb	r3, [r3, #12]
 80012c2:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80012cc:	7bfa      	ldrb	r2, [r7, #15]
 80012ce:	7b7b      	ldrb	r3, [r7, #13]
 80012d0:	fa42 f303 	asr.w	r3, r2, r3
 80012d4:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80012d6:	7b7b      	ldrb	r3, [r7, #13]
 80012d8:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 80012da:	7bba      	ldrb	r2, [r7, #14]
 80012dc:	78fb      	ldrb	r3, [r7, #3]
 80012de:	4413      	add	r3, r2
 80012e0:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 80012e2:	7bbb      	ldrb	r3, [r7, #14]
 80012e4:	2b07      	cmp	r3, #7
 80012e6:	d91a      	bls.n	800131e <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 80012e8:	2308      	movs	r3, #8
 80012ea:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 80012ec:	7b3a      	ldrb	r2, [r7, #12]
 80012ee:	7b7b      	ldrb	r3, [r7, #13]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	1c5a      	adds	r2, r3, #1
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	461a      	mov	r2, r3
 8001306:	7b3b      	ldrb	r3, [r7, #12]
 8001308:	fa02 f303 	lsl.w	r3, r2, r3
 800130c:	b25a      	sxtb	r2, r3
 800130e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001312:	4313      	orrs	r3, r2
 8001314:	b25b      	sxtb	r3, r3
 8001316:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001318:	7bbb      	ldrb	r3, [r7, #14]
 800131a:	3b08      	subs	r3, #8
 800131c:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 800131e:	78fb      	ldrb	r3, [r7, #3]
 8001320:	f04f 32ff 	mov.w	r2, #4294967295
 8001324:	fa02 f303 	lsl.w	r3, r2, r3
 8001328:	b2db      	uxtb	r3, r3
 800132a:	43db      	mvns	r3, r3
 800132c:	b2da      	uxtb	r2, r3
 800132e:	7bfb      	ldrb	r3, [r7, #15]
 8001330:	4013      	ands	r3, r2
 8001332:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	7bba      	ldrb	r2, [r7, #14]
 8001338:	731a      	strb	r2, [r3, #12]
  return val;
 800133a:	7bfb      	ldrb	r3, [r7, #15]
}
 800133c:	4618      	mov	r0, r3
 800133e:	3714      	adds	r7, #20
 8001340:	46bd      	mov	sp, r7
 8001342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001346:	4770      	bx	lr

08001348 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b084      	sub	sp, #16
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	460b      	mov	r3, r1
 8001352:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 8001354:	78fb      	ldrb	r3, [r7, #3]
 8001356:	4619      	mov	r1, r3
 8001358:	6878      	ldr	r0, [r7, #4]
 800135a:	f7ff ffaa 	bl	80012b2 <u8g2_font_decode_get_unsigned_bits>
 800135e:	4603      	mov	r3, r0
 8001360:	73fb      	strb	r3, [r7, #15]
  d = 1;
 8001362:	2301      	movs	r3, #1
 8001364:	73bb      	strb	r3, [r7, #14]
  cnt--;
 8001366:	78fb      	ldrb	r3, [r7, #3]
 8001368:	3b01      	subs	r3, #1
 800136a:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 800136c:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001370:	78fb      	ldrb	r3, [r7, #3]
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	73bb      	strb	r3, [r7, #14]
  v -= d;
 8001378:	7bfa      	ldrb	r2, [r7, #15]
 800137a:	7bbb      	ldrb	r3, [r7, #14]
 800137c:	1ad3      	subs	r3, r2, r3
 800137e:	b2db      	uxtb	r3, r3
 8001380:	73fb      	strb	r3, [r7, #15]
  return v;
 8001382:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 800138e:	b490      	push	{r4, r7}
 8001390:	b082      	sub	sp, #8
 8001392:	af00      	add	r7, sp, #0
 8001394:	4604      	mov	r4, r0
 8001396:	4608      	mov	r0, r1
 8001398:	4611      	mov	r1, r2
 800139a:	461a      	mov	r2, r3
 800139c:	4623      	mov	r3, r4
 800139e:	80fb      	strh	r3, [r7, #6]
 80013a0:	4603      	mov	r3, r0
 80013a2:	717b      	strb	r3, [r7, #5]
 80013a4:	460b      	mov	r3, r1
 80013a6:	713b      	strb	r3, [r7, #4]
 80013a8:	4613      	mov	r3, r2
 80013aa:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80013ac:	78fb      	ldrb	r3, [r7, #3]
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d014      	beq.n	80013dc <u8g2_add_vector_y+0x4e>
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	dc19      	bgt.n	80013ea <u8g2_add_vector_y+0x5c>
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d002      	beq.n	80013c0 <u8g2_add_vector_y+0x32>
 80013ba:	2b01      	cmp	r3, #1
 80013bc:	d007      	beq.n	80013ce <u8g2_add_vector_y+0x40>
 80013be:	e014      	b.n	80013ea <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80013c0:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013c4:	b29a      	uxth	r2, r3
 80013c6:	88fb      	ldrh	r3, [r7, #6]
 80013c8:	4413      	add	r3, r2
 80013ca:	80fb      	strh	r3, [r7, #6]
      break;
 80013cc:	e014      	b.n	80013f8 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80013ce:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013d2:	b29a      	uxth	r2, r3
 80013d4:	88fb      	ldrh	r3, [r7, #6]
 80013d6:	4413      	add	r3, r2
 80013d8:	80fb      	strh	r3, [r7, #6]
      break;
 80013da:	e00d      	b.n	80013f8 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 80013dc:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	88fa      	ldrh	r2, [r7, #6]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	80fb      	strh	r3, [r7, #6]
      break;
 80013e8:	e006      	b.n	80013f8 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 80013ea:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80013ee:	b29b      	uxth	r3, r3
 80013f0:	88fa      	ldrh	r2, [r7, #6]
 80013f2:	1ad3      	subs	r3, r2, r3
 80013f4:	80fb      	strh	r3, [r7, #6]
      break;      
 80013f6:	bf00      	nop
  }
  return dy;
 80013f8:	88fb      	ldrh	r3, [r7, #6]
}
 80013fa:	4618      	mov	r0, r3
 80013fc:	3708      	adds	r7, #8
 80013fe:	46bd      	mov	sp, r7
 8001400:	bc90      	pop	{r4, r7}
 8001402:	4770      	bx	lr

08001404 <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 8001404:	b490      	push	{r4, r7}
 8001406:	b082      	sub	sp, #8
 8001408:	af00      	add	r7, sp, #0
 800140a:	4604      	mov	r4, r0
 800140c:	4608      	mov	r0, r1
 800140e:	4611      	mov	r1, r2
 8001410:	461a      	mov	r2, r3
 8001412:	4623      	mov	r3, r4
 8001414:	80fb      	strh	r3, [r7, #6]
 8001416:	4603      	mov	r3, r0
 8001418:	717b      	strb	r3, [r7, #5]
 800141a:	460b      	mov	r3, r1
 800141c:	713b      	strb	r3, [r7, #4]
 800141e:	4613      	mov	r3, r2
 8001420:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 8001422:	78fb      	ldrb	r3, [r7, #3]
 8001424:	2b02      	cmp	r3, #2
 8001426:	d014      	beq.n	8001452 <u8g2_add_vector_x+0x4e>
 8001428:	2b02      	cmp	r3, #2
 800142a:	dc19      	bgt.n	8001460 <u8g2_add_vector_x+0x5c>
 800142c:	2b00      	cmp	r3, #0
 800142e:	d002      	beq.n	8001436 <u8g2_add_vector_x+0x32>
 8001430:	2b01      	cmp	r3, #1
 8001432:	d007      	beq.n	8001444 <u8g2_add_vector_x+0x40>
 8001434:	e014      	b.n	8001460 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 8001436:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800143a:	b29a      	uxth	r2, r3
 800143c:	88fb      	ldrh	r3, [r7, #6]
 800143e:	4413      	add	r3, r2
 8001440:	80fb      	strh	r3, [r7, #6]
      break;
 8001442:	e014      	b.n	800146e <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 8001444:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001448:	b29b      	uxth	r3, r3
 800144a:	88fa      	ldrh	r2, [r7, #6]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	80fb      	strh	r3, [r7, #6]
      break;
 8001450:	e00d      	b.n	800146e <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 8001452:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001456:	b29b      	uxth	r3, r3
 8001458:	88fa      	ldrh	r2, [r7, #6]
 800145a:	1ad3      	subs	r3, r2, r3
 800145c:	80fb      	strh	r3, [r7, #6]
      break;
 800145e:	e006      	b.n	800146e <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001460:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001464:	b29a      	uxth	r2, r3
 8001466:	88fb      	ldrh	r3, [r7, #6]
 8001468:	4413      	add	r3, r2
 800146a:	80fb      	strh	r3, [r7, #6]
      break;      
 800146c:	bf00      	nop
  }
  return dx;
 800146e:	88fb      	ldrh	r3, [r7, #6]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3708      	adds	r7, #8
 8001474:	46bd      	mov	sp, r7
 8001476:	bc90      	pop	{r4, r7}
 8001478:	4770      	bx	lr

0800147a <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 800147a:	b580      	push	{r7, lr}
 800147c:	b088      	sub	sp, #32
 800147e:	af02      	add	r7, sp, #8
 8001480:	6078      	str	r0, [r7, #4]
 8001482:	460b      	mov	r3, r1
 8001484:	70fb      	strb	r3, [r7, #3]
 8001486:	4613      	mov	r3, r2
 8001488:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	3360      	adds	r3, #96	; 0x60
 800148e:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 8001490:	78fb      	ldrb	r3, [r7, #3]
 8001492:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 8001494:	693b      	ldr	r3, [r7, #16]
 8001496:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800149a:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80014a2:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80014a4:	693b      	ldr	r3, [r7, #16]
 80014a6:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80014aa:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80014ac:	7bfa      	ldrb	r2, [r7, #15]
 80014ae:	7d7b      	ldrb	r3, [r7, #21]
 80014b0:	1ad3      	subs	r3, r2, r3
 80014b2:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80014b4:	7bfb      	ldrb	r3, [r7, #15]
 80014b6:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80014b8:	7dfa      	ldrb	r2, [r7, #23]
 80014ba:	7bfb      	ldrb	r3, [r7, #15]
 80014bc:	429a      	cmp	r2, r3
 80014be:	d201      	bcs.n	80014c4 <u8g2_font_decode_len+0x4a>
      current = cnt;
 80014c0:	7dfb      	ldrb	r3, [r7, #23]
 80014c2:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	889b      	ldrh	r3, [r3, #4]
 80014c8:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80014ca:	693b      	ldr	r3, [r7, #16]
 80014cc:	88db      	ldrh	r3, [r3, #6]
 80014ce:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80014d0:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80014d4:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80014d8:	693b      	ldr	r3, [r7, #16]
 80014da:	7c1b      	ldrb	r3, [r3, #16]
 80014dc:	89b8      	ldrh	r0, [r7, #12]
 80014de:	f7ff ff91 	bl	8001404 <u8g2_add_vector_x>
 80014e2:	4603      	mov	r3, r0
 80014e4:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 80014e6:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80014ea:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	7c1b      	ldrb	r3, [r3, #16]
 80014f2:	8978      	ldrh	r0, [r7, #10]
 80014f4:	f7ff ff4b 	bl	800138e <u8g2_add_vector_y>
 80014f8:	4603      	mov	r3, r0
 80014fa:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 80014fc:	78bb      	ldrb	r3, [r7, #2]
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d010      	beq.n	8001524 <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 8001502:	693b      	ldr	r3, [r7, #16]
 8001504:	7b9a      	ldrb	r2, [r3, #14]
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800150c:	7dbb      	ldrb	r3, [r7, #22]
 800150e:	b298      	uxth	r0, r3
 8001510:	693b      	ldr	r3, [r7, #16]
 8001512:	7c1b      	ldrb	r3, [r3, #16]
 8001514:	897a      	ldrh	r2, [r7, #10]
 8001516:	89b9      	ldrh	r1, [r7, #12]
 8001518:	9300      	str	r3, [sp, #0]
 800151a:	4603      	mov	r3, r0
 800151c:	6878      	ldr	r0, [r7, #4]
 800151e:	f000 fbfe 	bl	8001d1e <u8g2_DrawHVLine>
 8001522:	e013      	b.n	800154c <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	7b5b      	ldrb	r3, [r3, #13]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d10f      	bne.n	800154c <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 800152c:	693b      	ldr	r3, [r7, #16]
 800152e:	7bda      	ldrb	r2, [r3, #15]
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8001536:	7dbb      	ldrb	r3, [r7, #22]
 8001538:	b298      	uxth	r0, r3
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	7c1b      	ldrb	r3, [r3, #16]
 800153e:	897a      	ldrh	r2, [r7, #10]
 8001540:	89b9      	ldrh	r1, [r7, #12]
 8001542:	9300      	str	r3, [sp, #0]
 8001544:	4603      	mov	r3, r0
 8001546:	6878      	ldr	r0, [r7, #4]
 8001548:	f000 fbe9 	bl	8001d1e <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 800154c:	7dfa      	ldrb	r2, [r7, #23]
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	429a      	cmp	r2, r3
 8001552:	d309      	bcc.n	8001568 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 8001554:	7dfa      	ldrb	r2, [r7, #23]
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	1ad3      	subs	r3, r2, r3
 800155a:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 800155c:	2300      	movs	r3, #0
 800155e:	757b      	strb	r3, [r7, #21]
    ly++;
 8001560:	7d3b      	ldrb	r3, [r7, #20]
 8001562:	3301      	adds	r3, #1
 8001564:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 8001566:	e79d      	b.n	80014a4 <u8g2_font_decode_len+0x2a>
      break;
 8001568:	bf00      	nop
  }
  lx += cnt;
 800156a:	7d7a      	ldrb	r2, [r7, #21]
 800156c:	7dfb      	ldrb	r3, [r7, #23]
 800156e:	4413      	add	r3, r2
 8001570:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 8001572:	f997 2015 	ldrsb.w	r2, [r7, #21]
 8001576:	693b      	ldr	r3, [r7, #16]
 8001578:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 800157a:	f997 2014 	ldrsb.w	r2, [r7, #20]
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	725a      	strb	r2, [r3, #9]
}
 8001582:	bf00      	nop
 8001584:	3718      	adds	r7, #24
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}

0800158a <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 800158a:	b580      	push	{r7, lr}
 800158c:	b084      	sub	sp, #16
 800158e:	af00      	add	r7, sp, #0
 8001590:	6078      	str	r0, [r7, #4]
 8001592:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	3360      	adds	r3, #96	; 0x60
 8001598:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2200      	movs	r2, #0
 80015a4:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80015ac:	4619      	mov	r1, r3
 80015ae:	68f8      	ldr	r0, [r7, #12]
 80015b0:	f7ff fe7f 	bl	80012b2 <u8g2_font_decode_get_unsigned_bits>
 80015b4:	4603      	mov	r3, r0
 80015b6:	b25a      	sxtb	r2, r3
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80015c2:	4619      	mov	r1, r3
 80015c4:	68f8      	ldr	r0, [r7, #12]
 80015c6:	f7ff fe74 	bl	80012b2 <u8g2_font_decode_get_unsigned_bits>
 80015ca:	4603      	mov	r3, r0
 80015cc:	b25a      	sxtb	r2, r3
 80015ce:	68fb      	ldr	r3, [r7, #12]
 80015d0:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	7b9b      	ldrb	r3, [r3, #14]
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	bf0c      	ite	eq
 80015e4:	2301      	moveq	r3, #1
 80015e6:	2300      	movne	r3, #0
 80015e8:	b2db      	uxtb	r3, r3
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	73da      	strb	r2, [r3, #15]
}
 80015f0:	bf00      	nop
 80015f2:	3710      	adds	r7, #16
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	; 0x28
 80015fc:	af02      	add	r7, sp, #8
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	3360      	adds	r3, #96	; 0x60
 8001606:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8001608:	6839      	ldr	r1, [r7, #0]
 800160a:	6878      	ldr	r0, [r7, #4]
 800160c:	f7ff ffbd 	bl	800158a <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001616:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 800161e:	4619      	mov	r1, r3
 8001620:	6978      	ldr	r0, [r7, #20]
 8001622:	f7ff fe91 	bl	8001348 <u8g2_font_decode_get_signed_bits>
 8001626:	4603      	mov	r3, r0
 8001628:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001630:	4619      	mov	r1, r3
 8001632:	6978      	ldr	r0, [r7, #20]
 8001634:	f7ff fe88 	bl	8001348 <u8g2_font_decode_get_signed_bits>
 8001638:	4603      	mov	r3, r0
 800163a:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001642:	4619      	mov	r1, r3
 8001644:	6978      	ldr	r0, [r7, #20]
 8001646:	f7ff fe7f 	bl	8001348 <u8g2_font_decode_get_signed_bits>
 800164a:	4603      	mov	r3, r0
 800164c:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 800164e:	697b      	ldr	r3, [r7, #20]
 8001650:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f340 80d7 	ble.w	8001808 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 800165a:	697b      	ldr	r3, [r7, #20]
 800165c:	8898      	ldrh	r0, [r3, #4]
 800165e:	7cfa      	ldrb	r2, [r7, #19]
 8001660:	7c7b      	ldrb	r3, [r7, #17]
 8001662:	4413      	add	r3, r2
 8001664:	b2db      	uxtb	r3, r3
 8001666:	425b      	negs	r3, r3
 8001668:	b2db      	uxtb	r3, r3
 800166a:	b25a      	sxtb	r2, r3
 800166c:	697b      	ldr	r3, [r7, #20]
 800166e:	7c1b      	ldrb	r3, [r3, #16]
 8001670:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001674:	f7ff fec6 	bl	8001404 <u8g2_add_vector_x>
 8001678:	4603      	mov	r3, r0
 800167a:	461a      	mov	r2, r3
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001680:	697b      	ldr	r3, [r7, #20]
 8001682:	88d8      	ldrh	r0, [r3, #6]
 8001684:	7cfa      	ldrb	r2, [r7, #19]
 8001686:	7c7b      	ldrb	r3, [r7, #17]
 8001688:	4413      	add	r3, r2
 800168a:	b2db      	uxtb	r3, r3
 800168c:	425b      	negs	r3, r3
 800168e:	b2db      	uxtb	r3, r3
 8001690:	b25a      	sxtb	r2, r3
 8001692:	697b      	ldr	r3, [r7, #20]
 8001694:	7c1b      	ldrb	r3, [r3, #16]
 8001696:	f997 1012 	ldrsb.w	r1, [r7, #18]
 800169a:	f7ff fe78 	bl	800138e <u8g2_add_vector_y>
 800169e:	4603      	mov	r3, r0
 80016a0:	461a      	mov	r2, r3
 80016a2:	697b      	ldr	r3, [r7, #20]
 80016a4:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 80016a6:	697b      	ldr	r3, [r7, #20]
 80016a8:	889b      	ldrh	r3, [r3, #4]
 80016aa:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	88db      	ldrh	r3, [r3, #6]
 80016b0:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 80016b2:	8bfb      	ldrh	r3, [r7, #30]
 80016b4:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 80016b6:	8b7b      	ldrh	r3, [r7, #26]
 80016b8:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	7c1b      	ldrb	r3, [r3, #16]
 80016be:	2b03      	cmp	r3, #3
 80016c0:	d85a      	bhi.n	8001778 <u8g2_font_decode_glyph+0x180>
 80016c2:	a201      	add	r2, pc, #4	; (adr r2, 80016c8 <u8g2_font_decode_glyph+0xd0>)
 80016c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80016c8:	080016d9 	.word	0x080016d9
 80016cc:	080016f5 	.word	0x080016f5
 80016d0:	0800171d 	.word	0x0800171d
 80016d4:	08001751 	.word	0x08001751
      {
	case 0:
	    x1 += decode->glyph_width;
 80016d8:	697b      	ldr	r3, [r7, #20]
 80016da:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80016de:	b29a      	uxth	r2, r3
 80016e0:	8bbb      	ldrh	r3, [r7, #28]
 80016e2:	4413      	add	r3, r2
 80016e4:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 80016e6:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80016ea:	b29a      	uxth	r2, r3
 80016ec:	8b3b      	ldrh	r3, [r7, #24]
 80016ee:	4413      	add	r3, r2
 80016f0:	833b      	strh	r3, [r7, #24]
	    break;
 80016f2:	e041      	b.n	8001778 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 80016f4:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80016f8:	b29b      	uxth	r3, r3
 80016fa:	8bfa      	ldrh	r2, [r7, #30]
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001700:	8bfb      	ldrh	r3, [r7, #30]
 8001702:	3301      	adds	r3, #1
 8001704:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001706:	8bbb      	ldrh	r3, [r7, #28]
 8001708:	3301      	adds	r3, #1
 800170a:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001712:	b29a      	uxth	r2, r3
 8001714:	8b3b      	ldrh	r3, [r7, #24]
 8001716:	4413      	add	r3, r2
 8001718:	833b      	strh	r3, [r7, #24]
	    break;
 800171a:	e02d      	b.n	8001778 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 800171c:	697b      	ldr	r3, [r7, #20]
 800171e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001722:	b29b      	uxth	r3, r3
 8001724:	8bfa      	ldrh	r2, [r7, #30]
 8001726:	1ad3      	subs	r3, r2, r3
 8001728:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800172a:	8bfb      	ldrh	r3, [r7, #30]
 800172c:	3301      	adds	r3, #1
 800172e:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001730:	8bbb      	ldrh	r3, [r7, #28]
 8001732:	3301      	adds	r3, #1
 8001734:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001736:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800173a:	b29b      	uxth	r3, r3
 800173c:	8b7a      	ldrh	r2, [r7, #26]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001742:	8b7b      	ldrh	r3, [r7, #26]
 8001744:	3301      	adds	r3, #1
 8001746:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001748:	8b3b      	ldrh	r3, [r7, #24]
 800174a:	3301      	adds	r3, #1
 800174c:	833b      	strh	r3, [r7, #24]
	    break;	  
 800174e:	e013      	b.n	8001778 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001750:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001754:	b29a      	uxth	r2, r3
 8001756:	8bbb      	ldrh	r3, [r7, #28]
 8001758:	4413      	add	r3, r2
 800175a:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 800175c:	697b      	ldr	r3, [r7, #20]
 800175e:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001762:	b29b      	uxth	r3, r3
 8001764:	8b7a      	ldrh	r2, [r7, #26]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 800176a:	8b7b      	ldrh	r3, [r7, #26]
 800176c:	3301      	adds	r3, #1
 800176e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001770:	8b3b      	ldrh	r3, [r7, #24]
 8001772:	3301      	adds	r3, #1
 8001774:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001776:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001778:	8bb8      	ldrh	r0, [r7, #28]
 800177a:	8b7a      	ldrh	r2, [r7, #26]
 800177c:	8bf9      	ldrh	r1, [r7, #30]
 800177e:	8b3b      	ldrh	r3, [r7, #24]
 8001780:	9300      	str	r3, [sp, #0]
 8001782:	4603      	mov	r3, r0
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f000 fb88 	bl	8001e9a <u8g2_IsIntersection>
 800178a:	4603      	mov	r3, r0
 800178c:	2b00      	cmp	r3, #0
 800178e:	d102      	bne.n	8001796 <u8g2_font_decode_glyph+0x19e>
	return d;
 8001790:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001794:	e03a      	b.n	800180c <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	2200      	movs	r2, #0
 800179a:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 800179c:	697b      	ldr	r3, [r7, #20]
 800179e:	2200      	movs	r2, #0
 80017a0:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 80017a8:	4619      	mov	r1, r3
 80017aa:	6978      	ldr	r0, [r7, #20]
 80017ac:	f7ff fd81 	bl	80012b2 <u8g2_font_decode_get_unsigned_bits>
 80017b0:	4603      	mov	r3, r0
 80017b2:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 80017ba:	4619      	mov	r1, r3
 80017bc:	6978      	ldr	r0, [r7, #20]
 80017be:	f7ff fd78 	bl	80012b2 <u8g2_font_decode_get_unsigned_bits>
 80017c2:	4603      	mov	r3, r0
 80017c4:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 80017c6:	7bfb      	ldrb	r3, [r7, #15]
 80017c8:	2200      	movs	r2, #0
 80017ca:	4619      	mov	r1, r3
 80017cc:	6878      	ldr	r0, [r7, #4]
 80017ce:	f7ff fe54 	bl	800147a <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 80017d2:	7bbb      	ldrb	r3, [r7, #14]
 80017d4:	2201      	movs	r2, #1
 80017d6:	4619      	mov	r1, r3
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff fe4e 	bl	800147a <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 80017de:	2101      	movs	r1, #1
 80017e0:	6978      	ldr	r0, [r7, #20]
 80017e2:	f7ff fd66 	bl	80012b2 <u8g2_font_decode_get_unsigned_bits>
 80017e6:	4603      	mov	r3, r0
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1ec      	bne.n	80017c6 <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80017f2:	f997 2013 	ldrsb.w	r2, [r7, #19]
 80017f6:	429a      	cmp	r2, r3
 80017f8:	dd00      	ble.n	80017fc <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 80017fa:	e7d2      	b.n	80017a2 <u8g2_font_decode_glyph+0x1aa>
	break;
 80017fc:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 80017fe:	697b      	ldr	r3, [r7, #20]
 8001800:	7b9a      	ldrb	r2, [r3, #14]
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8001808:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 800180c:	4618      	mov	r0, r3
 800180e:	3720      	adds	r7, #32
 8001810:	46bd      	mov	sp, r7
 8001812:	bd80      	pop	{r7, pc}

08001814 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b086      	sub	sp, #24
 8001818:	af00      	add	r7, sp, #0
 800181a:	6078      	str	r0, [r7, #4]
 800181c:	460b      	mov	r3, r1
 800181e:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001824:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	3317      	adds	r3, #23
 800182a:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 800182c:	887b      	ldrh	r3, [r7, #2]
 800182e:	2bff      	cmp	r3, #255	; 0xff
 8001830:	d82a      	bhi.n	8001888 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001832:	887b      	ldrh	r3, [r7, #2]
 8001834:	2b60      	cmp	r3, #96	; 0x60
 8001836:	d907      	bls.n	8001848 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 800183e:	461a      	mov	r2, r3
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	4413      	add	r3, r2
 8001844:	617b      	str	r3, [r7, #20]
 8001846:	e009      	b.n	800185c <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001848:	887b      	ldrh	r3, [r7, #2]
 800184a:	2b40      	cmp	r3, #64	; 0x40
 800184c:	d906      	bls.n	800185c <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001854:	461a      	mov	r2, r3
 8001856:	697b      	ldr	r3, [r7, #20]
 8001858:	4413      	add	r3, r2
 800185a:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 800185c:	697b      	ldr	r3, [r7, #20]
 800185e:	3301      	adds	r3, #1
 8001860:	781b      	ldrb	r3, [r3, #0]
 8001862:	2b00      	cmp	r3, #0
 8001864:	d04e      	beq.n	8001904 <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001866:	697b      	ldr	r3, [r7, #20]
 8001868:	781b      	ldrb	r3, [r3, #0]
 800186a:	b29b      	uxth	r3, r3
 800186c:	887a      	ldrh	r2, [r7, #2]
 800186e:	429a      	cmp	r2, r3
 8001870:	d102      	bne.n	8001878 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	3302      	adds	r3, #2
 8001876:	e049      	b.n	800190c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001878:	697b      	ldr	r3, [r7, #20]
 800187a:	3301      	adds	r3, #1
 800187c:	781b      	ldrb	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	4413      	add	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001886:	e7e9      	b.n	800185c <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 800188e:	461a      	mov	r2, r3
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	4413      	add	r3, r2
 8001894:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001896:	697b      	ldr	r3, [r7, #20]
 8001898:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 800189a:	2100      	movs	r1, #0
 800189c:	6938      	ldr	r0, [r7, #16]
 800189e:	f7ff fc3f 	bl	8001120 <u8g2_font_get_word>
 80018a2:	4603      	mov	r3, r0
 80018a4:	461a      	mov	r2, r3
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	4413      	add	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 80018ac:	2102      	movs	r1, #2
 80018ae:	6938      	ldr	r0, [r7, #16]
 80018b0:	f7ff fc36 	bl	8001120 <u8g2_font_get_word>
 80018b4:	4603      	mov	r3, r0
 80018b6:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	3304      	adds	r3, #4
 80018bc:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 80018be:	89fa      	ldrh	r2, [r7, #14]
 80018c0:	887b      	ldrh	r3, [r7, #2]
 80018c2:	429a      	cmp	r2, r3
 80018c4:	d3e9      	bcc.n	800189a <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 80018cc:	89fb      	ldrh	r3, [r7, #14]
 80018ce:	021b      	lsls	r3, r3, #8
 80018d0:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	3301      	adds	r3, #1
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	b29a      	uxth	r2, r3
 80018da:	89fb      	ldrh	r3, [r7, #14]
 80018dc:	4313      	orrs	r3, r2
 80018de:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 80018e0:	89fb      	ldrh	r3, [r7, #14]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d010      	beq.n	8001908 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 80018e6:	89fa      	ldrh	r2, [r7, #14]
 80018e8:	887b      	ldrh	r3, [r7, #2]
 80018ea:	429a      	cmp	r2, r3
 80018ec:	d102      	bne.n	80018f4 <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 80018ee:	697b      	ldr	r3, [r7, #20]
 80018f0:	3303      	adds	r3, #3
 80018f2:	e00b      	b.n	800190c <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	3302      	adds	r3, #2
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	461a      	mov	r2, r3
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	4413      	add	r3, r2
 8001900:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001902:	e7e0      	b.n	80018c6 <u8g2_font_get_glyph_data+0xb2>
	break;
 8001904:	bf00      	nop
 8001906:	e000      	b.n	800190a <u8g2_font_get_glyph_data+0xf6>
	break;
 8001908:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 800190a:	2300      	movs	r3, #0
}
 800190c:	4618      	mov	r0, r3
 800190e:	3718      	adds	r7, #24
 8001910:	46bd      	mov	sp, r7
 8001912:	bd80      	pop	{r7, pc}

08001914 <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b086      	sub	sp, #24
 8001918:	af00      	add	r7, sp, #0
 800191a:	60f8      	str	r0, [r7, #12]
 800191c:	4608      	mov	r0, r1
 800191e:	4611      	mov	r1, r2
 8001920:	461a      	mov	r2, r3
 8001922:	4603      	mov	r3, r0
 8001924:	817b      	strh	r3, [r7, #10]
 8001926:	460b      	mov	r3, r1
 8001928:	813b      	strh	r3, [r7, #8]
 800192a:	4613      	mov	r3, r2
 800192c:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 800192e:	2300      	movs	r3, #0
 8001930:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	897a      	ldrh	r2, [r7, #10]
 8001936:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	893a      	ldrh	r2, [r7, #8]
 800193e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001942:	88fb      	ldrh	r3, [r7, #6]
 8001944:	4619      	mov	r1, r3
 8001946:	68f8      	ldr	r0, [r7, #12]
 8001948:	f7ff ff64 	bl	8001814 <u8g2_font_get_glyph_data>
 800194c:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 800194e:	693b      	ldr	r3, [r7, #16]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d005      	beq.n	8001960 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001954:	6939      	ldr	r1, [r7, #16]
 8001956:	68f8      	ldr	r0, [r7, #12]
 8001958:	f7ff fe4e 	bl	80015f8 <u8g2_font_decode_glyph>
 800195c:	4603      	mov	r3, r0
 800195e:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001960:	8afb      	ldrh	r3, [r7, #22]
}
 8001962:	4618      	mov	r0, r3
 8001964:	3718      	adds	r7, #24
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}
	...

0800196c <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b084      	sub	sp, #16
 8001970:	af00      	add	r7, sp, #0
 8001972:	60f8      	str	r0, [r7, #12]
 8001974:	4608      	mov	r0, r1
 8001976:	4611      	mov	r1, r2
 8001978:	461a      	mov	r2, r3
 800197a:	4603      	mov	r3, r0
 800197c:	817b      	strh	r3, [r7, #10]
 800197e:	460b      	mov	r3, r1
 8001980:	813b      	strh	r3, [r7, #8]
 8001982:	4613      	mov	r3, r2
 8001984:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 800198c:	2b03      	cmp	r3, #3
 800198e:	d833      	bhi.n	80019f8 <u8g2_DrawGlyph+0x8c>
 8001990:	a201      	add	r2, pc, #4	; (adr r2, 8001998 <u8g2_DrawGlyph+0x2c>)
 8001992:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001996:	bf00      	nop
 8001998:	080019a9 	.word	0x080019a9
 800199c:	080019bd 	.word	0x080019bd
 80019a0:	080019d1 	.word	0x080019d1
 80019a4:	080019e5 	.word	0x080019e5
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 80019a8:	68fb      	ldr	r3, [r7, #12]
 80019aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ac:	68f8      	ldr	r0, [r7, #12]
 80019ae:	4798      	blx	r3
 80019b0:	4603      	mov	r3, r0
 80019b2:	461a      	mov	r2, r3
 80019b4:	893b      	ldrh	r3, [r7, #8]
 80019b6:	4413      	add	r3, r2
 80019b8:	813b      	strh	r3, [r7, #8]
      break;
 80019ba:	e01d      	b.n	80019f8 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 80019bc:	68fb      	ldr	r3, [r7, #12]
 80019be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019c0:	68f8      	ldr	r0, [r7, #12]
 80019c2:	4798      	blx	r3
 80019c4:	4603      	mov	r3, r0
 80019c6:	461a      	mov	r2, r3
 80019c8:	897b      	ldrh	r3, [r7, #10]
 80019ca:	1a9b      	subs	r3, r3, r2
 80019cc:	817b      	strh	r3, [r7, #10]
      break;
 80019ce:	e013      	b.n	80019f8 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019d4:	68f8      	ldr	r0, [r7, #12]
 80019d6:	4798      	blx	r3
 80019d8:	4603      	mov	r3, r0
 80019da:	461a      	mov	r2, r3
 80019dc:	893b      	ldrh	r3, [r7, #8]
 80019de:	1a9b      	subs	r3, r3, r2
 80019e0:	813b      	strh	r3, [r7, #8]
      break;
 80019e2:	e009      	b.n	80019f8 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	68f8      	ldr	r0, [r7, #12]
 80019ea:	4798      	blx	r3
 80019ec:	4603      	mov	r3, r0
 80019ee:	461a      	mov	r2, r3
 80019f0:	897b      	ldrh	r3, [r7, #10]
 80019f2:	4413      	add	r3, r2
 80019f4:	817b      	strh	r3, [r7, #10]
      break;
 80019f6:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 80019f8:	88fb      	ldrh	r3, [r7, #6]
 80019fa:	893a      	ldrh	r2, [r7, #8]
 80019fc:	8979      	ldrh	r1, [r7, #10]
 80019fe:	68f8      	ldr	r0, [r7, #12]
 8001a00:	f7ff ff88 	bl	8001914 <u8g2_font_draw_glyph>
 8001a04:	4603      	mov	r3, r0
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3710      	adds	r7, #16
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	bd80      	pop	{r7, pc}
 8001a0e:	bf00      	nop

08001a10 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b086      	sub	sp, #24
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	60f8      	str	r0, [r7, #12]
 8001a18:	607b      	str	r3, [r7, #4]
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	817b      	strh	r3, [r7, #10]
 8001a1e:	4613      	mov	r3, r2
 8001a20:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001a22:	68f8      	ldr	r0, [r7, #12]
 8001a24:	f000 fc6a 	bl	80022fc <u8x8_utf8_init>
  sum = 0;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	685b      	ldr	r3, [r3, #4]
 8001a30:	687a      	ldr	r2, [r7, #4]
 8001a32:	7812      	ldrb	r2, [r2, #0]
 8001a34:	4611      	mov	r1, r2
 8001a36:	68f8      	ldr	r0, [r7, #12]
 8001a38:	4798      	blx	r3
 8001a3a:	4603      	mov	r3, r0
 8001a3c:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001a3e:	8abb      	ldrh	r3, [r7, #20]
 8001a40:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001a44:	4293      	cmp	r3, r2
 8001a46:	d038      	beq.n	8001aba <u8g2_draw_string+0xaa>
      break;
    str++;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	3301      	adds	r3, #1
 8001a4c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001a4e:	8abb      	ldrh	r3, [r7, #20]
 8001a50:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001a54:	4293      	cmp	r3, r2
 8001a56:	d0e9      	beq.n	8001a2c <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001a58:	8abb      	ldrh	r3, [r7, #20]
 8001a5a:	893a      	ldrh	r2, [r7, #8]
 8001a5c:	8979      	ldrh	r1, [r7, #10]
 8001a5e:	68f8      	ldr	r0, [r7, #12]
 8001a60:	f7ff ff84 	bl	800196c <u8g2_DrawGlyph>
 8001a64:	4603      	mov	r3, r0
 8001a66:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001a6e:	2b03      	cmp	r3, #3
 8001a70:	d81e      	bhi.n	8001ab0 <u8g2_draw_string+0xa0>
 8001a72:	a201      	add	r2, pc, #4	; (adr r2, 8001a78 <u8g2_draw_string+0x68>)
 8001a74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a78:	08001a89 	.word	0x08001a89
 8001a7c:	08001a93 	.word	0x08001a93
 8001a80:	08001a9d 	.word	0x08001a9d
 8001a84:	08001aa7 	.word	0x08001aa7
      {
	case 0:
	  x += delta;
 8001a88:	897a      	ldrh	r2, [r7, #10]
 8001a8a:	8a7b      	ldrh	r3, [r7, #18]
 8001a8c:	4413      	add	r3, r2
 8001a8e:	817b      	strh	r3, [r7, #10]
	  break;
 8001a90:	e00e      	b.n	8001ab0 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001a92:	893a      	ldrh	r2, [r7, #8]
 8001a94:	8a7b      	ldrh	r3, [r7, #18]
 8001a96:	4413      	add	r3, r2
 8001a98:	813b      	strh	r3, [r7, #8]
	  break;
 8001a9a:	e009      	b.n	8001ab0 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001a9c:	897a      	ldrh	r2, [r7, #10]
 8001a9e:	8a7b      	ldrh	r3, [r7, #18]
 8001aa0:	1ad3      	subs	r3, r2, r3
 8001aa2:	817b      	strh	r3, [r7, #10]
	  break;
 8001aa4:	e004      	b.n	8001ab0 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001aa6:	893a      	ldrh	r2, [r7, #8]
 8001aa8:	8a7b      	ldrh	r3, [r7, #18]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	813b      	strh	r3, [r7, #8]
	  break;
 8001aae:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001ab0:	8afa      	ldrh	r2, [r7, #22]
 8001ab2:	8a7b      	ldrh	r3, [r7, #18]
 8001ab4:	4413      	add	r3, r2
 8001ab6:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001ab8:	e7b8      	b.n	8001a2c <u8g2_draw_string+0x1c>
      break;
 8001aba:	bf00      	nop
    }
  }
  return sum;
 8001abc:	8afb      	ldrh	r3, [r7, #22]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop

08001ac8 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001ac8:	b580      	push	{r7, lr}
 8001aca:	b084      	sub	sp, #16
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	60f8      	str	r0, [r7, #12]
 8001ad0:	607b      	str	r3, [r7, #4]
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	817b      	strh	r3, [r7, #10]
 8001ad6:	4613      	mov	r3, r2
 8001ad8:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	4a06      	ldr	r2, [pc, #24]	; (8001af8 <u8g2_DrawStr+0x30>)
 8001ade:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001ae0:	893a      	ldrh	r2, [r7, #8]
 8001ae2:	8979      	ldrh	r1, [r7, #10]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	68f8      	ldr	r0, [r7, #12]
 8001ae8:	f7ff ff92 	bl	8001a10 <u8g2_draw_string>
 8001aec:	4603      	mov	r3, r0
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	3710      	adds	r7, #16
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	08002319 	.word	0x08002319

08001afc <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d05d      	beq.n	8001bc8 <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d04d      	beq.n	8001bca <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8001b34:	2b01      	cmp	r3, #1
 8001b36:	d11c      	bne.n	8001b72 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8001b44:	429a      	cmp	r2, r3
 8001b46:	da05      	bge.n	8001b54 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8001b60:	429a      	cmp	r2, r3
 8001b62:	dd32      	ble.n	8001bca <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001b70:	e02b      	b.n	8001bca <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 8001b78:	461a      	mov	r2, r3
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001b80:	4619      	mov	r1, r3
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001b88:	440b      	add	r3, r1
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	da0d      	bge.n	8001baa <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	4413      	add	r3, r2
 8001ba0:	b2db      	uxtb	r3, r3
 8001ba2:	b25a      	sxtb	r2, r3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8001bb6:	429a      	cmp	r2, r3
 8001bb8:	dd07      	ble.n	8001bca <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8001bc6:	e000      	b.n	8001bca <u8g2_UpdateRefHeight+0xce>
    return;
 8001bc8:	bf00      	nop
  }  
}
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd2:	4770      	bx	lr

08001bd4 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b083      	sub	sp, #12
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
  return 0;
 8001bdc:	2300      	movs	r3, #0
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	370c      	adds	r7, #12
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	4a04      	ldr	r2, [pc, #16]	; (8001c08 <u8g2_SetFontPosBaseline+0x1c>)
 8001bf8:	65da      	str	r2, [r3, #92]	; 0x5c
}
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	08001bd5 	.word	0x08001bd5

08001c0c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
 8001c14:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d00b      	beq.n	8001c38 <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	683a      	ldr	r2, [r7, #0]
 8001c24:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	3374      	adds	r3, #116	; 0x74
 8001c2a:	6839      	ldr	r1, [r7, #0]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff fa97 	bl	8001160 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f7ff ff62 	bl	8001afc <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 8001c38:	bf00      	nop
 8001c3a:	3708      	adds	r7, #8
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 8001c40:	b480      	push	{r7}
 8001c42:	b087      	sub	sp, #28
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	60b9      	str	r1, [r7, #8]
 8001c4a:	4611      	mov	r1, r2
 8001c4c:	461a      	mov	r2, r3
 8001c4e:	460b      	mov	r3, r1
 8001c50:	80fb      	strh	r3, [r7, #6]
 8001c52:	4613      	mov	r3, r2
 8001c54:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	881b      	ldrh	r3, [r3, #0]
 8001c5a:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8001c5c:	8afb      	ldrh	r3, [r7, #22]
 8001c5e:	82bb      	strh	r3, [r7, #20]
  b += *len;
 8001c60:	68bb      	ldr	r3, [r7, #8]
 8001c62:	881a      	ldrh	r2, [r3, #0]
 8001c64:	8abb      	ldrh	r3, [r7, #20]
 8001c66:	4413      	add	r3, r2
 8001c68:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8001c6a:	8afa      	ldrh	r2, [r7, #22]
 8001c6c:	8abb      	ldrh	r3, [r7, #20]
 8001c6e:	429a      	cmp	r2, r3
 8001c70:	d90b      	bls.n	8001c8a <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 8001c72:	8afa      	ldrh	r2, [r7, #22]
 8001c74:	88bb      	ldrh	r3, [r7, #4]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d205      	bcs.n	8001c86 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8001c7a:	88bb      	ldrh	r3, [r7, #4]
 8001c7c:	82bb      	strh	r3, [r7, #20]
      b--;
 8001c7e:	8abb      	ldrh	r3, [r7, #20]
 8001c80:	3b01      	subs	r3, #1
 8001c82:	82bb      	strh	r3, [r7, #20]
 8001c84:	e001      	b.n	8001c8a <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8001c86:	88fb      	ldrh	r3, [r7, #6]
 8001c88:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8001c8a:	8afa      	ldrh	r2, [r7, #22]
 8001c8c:	88bb      	ldrh	r3, [r7, #4]
 8001c8e:	429a      	cmp	r2, r3
 8001c90:	d301      	bcc.n	8001c96 <u8g2_clip_intersection2+0x56>
    return 0;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e01c      	b.n	8001cd0 <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 8001c96:	8aba      	ldrh	r2, [r7, #20]
 8001c98:	88fb      	ldrh	r3, [r7, #6]
 8001c9a:	429a      	cmp	r2, r3
 8001c9c:	d801      	bhi.n	8001ca2 <u8g2_clip_intersection2+0x62>
    return 0;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	e016      	b.n	8001cd0 <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 8001ca2:	8afa      	ldrh	r2, [r7, #22]
 8001ca4:	88fb      	ldrh	r3, [r7, #6]
 8001ca6:	429a      	cmp	r2, r3
 8001ca8:	d201      	bcs.n	8001cae <u8g2_clip_intersection2+0x6e>
    a = c;
 8001caa:	88fb      	ldrh	r3, [r7, #6]
 8001cac:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 8001cae:	8aba      	ldrh	r2, [r7, #20]
 8001cb0:	88bb      	ldrh	r3, [r7, #4]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d901      	bls.n	8001cba <u8g2_clip_intersection2+0x7a>
    b = d;
 8001cb6:	88bb      	ldrh	r3, [r7, #4]
 8001cb8:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	8afa      	ldrh	r2, [r7, #22]
 8001cbe:	801a      	strh	r2, [r3, #0]
  b -= a;
 8001cc0:	8aba      	ldrh	r2, [r7, #20]
 8001cc2:	8afb      	ldrh	r3, [r7, #22]
 8001cc4:	1ad3      	subs	r3, r2, r3
 8001cc6:	82bb      	strh	r3, [r7, #20]
  *len = b;
 8001cc8:	68bb      	ldr	r3, [r7, #8]
 8001cca:	8aba      	ldrh	r2, [r7, #20]
 8001ccc:	801a      	strh	r2, [r3, #0]
  return 1;
 8001cce:	2301      	movs	r3, #1
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	371c      	adds	r7, #28
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001cdc:	b590      	push	{r4, r7, lr}
 8001cde:	b087      	sub	sp, #28
 8001ce0:	af02      	add	r7, sp, #8
 8001ce2:	60f8      	str	r0, [r7, #12]
 8001ce4:	4608      	mov	r0, r1
 8001ce6:	4611      	mov	r1, r2
 8001ce8:	461a      	mov	r2, r3
 8001cea:	4603      	mov	r3, r0
 8001cec:	817b      	strh	r3, [r7, #10]
 8001cee:	460b      	mov	r3, r1
 8001cf0:	813b      	strh	r3, [r7, #8]
 8001cf2:	4613      	mov	r3, r2
 8001cf4:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8001cfa:	893a      	ldrh	r2, [r7, #8]
 8001cfc:	1ad3      	subs	r3, r2, r3
 8001cfe:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8001d04:	88f8      	ldrh	r0, [r7, #6]
 8001d06:	893a      	ldrh	r2, [r7, #8]
 8001d08:	8979      	ldrh	r1, [r7, #10]
 8001d0a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d0e:	9300      	str	r3, [sp, #0]
 8001d10:	4603      	mov	r3, r0
 8001d12:	68f8      	ldr	r0, [r7, #12]
 8001d14:	47a0      	blx	r4
}
 8001d16:	bf00      	nop
 8001d18:	3714      	adds	r7, #20
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd90      	pop	{r4, r7, pc}

08001d1e <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001d1e:	b590      	push	{r4, r7, lr}
 8001d20:	b087      	sub	sp, #28
 8001d22:	af02      	add	r7, sp, #8
 8001d24:	60f8      	str	r0, [r7, #12]
 8001d26:	4608      	mov	r0, r1
 8001d28:	4611      	mov	r1, r2
 8001d2a:	461a      	mov	r2, r3
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	817b      	strh	r3, [r7, #10]
 8001d30:	460b      	mov	r3, r1
 8001d32:	813b      	strh	r3, [r7, #8]
 8001d34:	4613      	mov	r3, r2
 8001d36:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d075      	beq.n	8001e2e <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 8001d42:	88fb      	ldrh	r3, [r7, #6]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d072      	beq.n	8001e2e <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8001d48:	88fb      	ldrh	r3, [r7, #6]
 8001d4a:	2b01      	cmp	r3, #1
 8001d4c:	d91a      	bls.n	8001d84 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 8001d4e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d52:	2b02      	cmp	r3, #2
 8001d54:	d109      	bne.n	8001d6a <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8001d56:	897a      	ldrh	r2, [r7, #10]
 8001d58:	88fb      	ldrh	r3, [r7, #6]
 8001d5a:	1ad3      	subs	r3, r2, r3
 8001d5c:	b29b      	uxth	r3, r3
 8001d5e:	817b      	strh	r3, [r7, #10]
	  x++;
 8001d60:	897b      	ldrh	r3, [r7, #10]
 8001d62:	3301      	adds	r3, #1
 8001d64:	b29b      	uxth	r3, r3
 8001d66:	817b      	strh	r3, [r7, #10]
 8001d68:	e00c      	b.n	8001d84 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8001d6a:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d6e:	2b03      	cmp	r3, #3
 8001d70:	d108      	bne.n	8001d84 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 8001d72:	893a      	ldrh	r2, [r7, #8]
 8001d74:	88fb      	ldrh	r3, [r7, #6]
 8001d76:	1ad3      	subs	r3, r2, r3
 8001d78:	b29b      	uxth	r3, r3
 8001d7a:	813b      	strh	r3, [r7, #8]
	  y++;
 8001d7c:	893b      	ldrh	r3, [r7, #8]
 8001d7e:	3301      	adds	r3, #1
 8001d80:	b29b      	uxth	r3, r3
 8001d82:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8001d84:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d88:	f003 0301 	and.w	r3, r3, #1
 8001d8c:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 8001d90:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d11a      	bne.n	8001dce <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001d9e:	893b      	ldrh	r3, [r7, #8]
 8001da0:	429a      	cmp	r2, r3
 8001da2:	d83b      	bhi.n	8001e1c <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8001daa:	893b      	ldrh	r3, [r7, #8]
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d937      	bls.n	8001e20 <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 8001db0:	68fb      	ldr	r3, [r7, #12]
 8001db2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8001dbc:	1db9      	adds	r1, r7, #6
 8001dbe:	f107 000a 	add.w	r0, r7, #10
 8001dc2:	f7ff ff3d 	bl	8001c40 <u8g2_clip_intersection2>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d11a      	bne.n	8001e02 <u8g2_DrawHVLine+0xe4>
	  return;
 8001dcc:	e02f      	b.n	8001e2e <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8001dd4:	897b      	ldrh	r3, [r7, #10]
 8001dd6:	429a      	cmp	r2, r3
 8001dd8:	d824      	bhi.n	8001e24 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8001de0:	897b      	ldrh	r3, [r7, #10]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d920      	bls.n	8001e28 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 8001df2:	1db9      	adds	r1, r7, #6
 8001df4:	f107 0008 	add.w	r0, r7, #8
 8001df8:	f7ff ff22 	bl	8001c40 <u8g2_clip_intersection2>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d014      	beq.n	8001e2c <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e06:	689c      	ldr	r4, [r3, #8]
 8001e08:	8979      	ldrh	r1, [r7, #10]
 8001e0a:	893a      	ldrh	r2, [r7, #8]
 8001e0c:	88f8      	ldrh	r0, [r7, #6]
 8001e0e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001e12:	9300      	str	r3, [sp, #0]
 8001e14:	4603      	mov	r3, r0
 8001e16:	68f8      	ldr	r0, [r7, #12]
 8001e18:	47a0      	blx	r4
 8001e1a:	e008      	b.n	8001e2e <u8g2_DrawHVLine+0x110>
	  return;
 8001e1c:	bf00      	nop
 8001e1e:	e006      	b.n	8001e2e <u8g2_DrawHVLine+0x110>
	  return;
 8001e20:	bf00      	nop
 8001e22:	e004      	b.n	8001e2e <u8g2_DrawHVLine+0x110>
	  return;
 8001e24:	bf00      	nop
 8001e26:	e002      	b.n	8001e2e <u8g2_DrawHVLine+0x110>
	  return;
 8001e28:	bf00      	nop
 8001e2a:	e000      	b.n	8001e2e <u8g2_DrawHVLine+0x110>
	  return;
 8001e2c:	bf00      	nop
    }
}
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd90      	pop	{r4, r7, pc}

08001e34 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 8001e34:	b490      	push	{r4, r7}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	4604      	mov	r4, r0
 8001e3c:	4608      	mov	r0, r1
 8001e3e:	4611      	mov	r1, r2
 8001e40:	461a      	mov	r2, r3
 8001e42:	4623      	mov	r3, r4
 8001e44:	80fb      	strh	r3, [r7, #6]
 8001e46:	4603      	mov	r3, r0
 8001e48:	80bb      	strh	r3, [r7, #4]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	807b      	strh	r3, [r7, #2]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 8001e52:	887a      	ldrh	r2, [r7, #2]
 8001e54:	88bb      	ldrh	r3, [r7, #4]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d20d      	bcs.n	8001e76 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 8001e5a:	883a      	ldrh	r2, [r7, #0]
 8001e5c:	88fb      	ldrh	r3, [r7, #6]
 8001e5e:	429a      	cmp	r2, r3
 8001e60:	d901      	bls.n	8001e66 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8001e62:	2301      	movs	r3, #1
 8001e64:	e014      	b.n	8001e90 <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8001e66:	887a      	ldrh	r2, [r7, #2]
 8001e68:	883b      	ldrh	r3, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d901      	bls.n	8001e72 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e00e      	b.n	8001e90 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001e72:	2300      	movs	r3, #0
 8001e74:	e00c      	b.n	8001e90 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8001e76:	883a      	ldrh	r2, [r7, #0]
 8001e78:	88fb      	ldrh	r3, [r7, #6]
 8001e7a:	429a      	cmp	r2, r3
 8001e7c:	d907      	bls.n	8001e8e <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 8001e7e:	887a      	ldrh	r2, [r7, #2]
 8001e80:	883b      	ldrh	r3, [r7, #0]
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d901      	bls.n	8001e8a <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e002      	b.n	8001e90 <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	e000      	b.n	8001e90 <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 8001e8e:	2300      	movs	r3, #0
    }
  }
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bc90      	pop	{r4, r7}
 8001e98:	4770      	bx	lr

08001e9a <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8001e9a:	b580      	push	{r7, lr}
 8001e9c:	b084      	sub	sp, #16
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	4608      	mov	r0, r1
 8001ea4:	4611      	mov	r1, r2
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	817b      	strh	r3, [r7, #10]
 8001eac:	460b      	mov	r3, r1
 8001eae:	813b      	strh	r3, [r7, #8]
 8001eb0:	4613      	mov	r3, r2
 8001eb2:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 8001ec0:	8b3b      	ldrh	r3, [r7, #24]
 8001ec2:	893a      	ldrh	r2, [r7, #8]
 8001ec4:	f7ff ffb6 	bl	8001e34 <u8g2_is_intersection_decision_tree>
 8001ec8:	4603      	mov	r3, r0
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d101      	bne.n	8001ed2 <u8g2_IsIntersection+0x38>
    return 0; 
 8001ece:	2300      	movs	r3, #0
 8001ed0:	e00a      	b.n	8001ee8 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 8001ede:	88fb      	ldrh	r3, [r7, #6]
 8001ee0:	897a      	ldrh	r2, [r7, #10]
 8001ee2:	f7ff ffa7 	bl	8001e34 <u8g2_is_intersection_decision_tree>
 8001ee6:	4603      	mov	r3, r0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3710      	adds	r7, #16
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	b089      	sub	sp, #36	; 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	4608      	mov	r0, r1
 8001efa:	4611      	mov	r1, r2
 8001efc:	461a      	mov	r2, r3
 8001efe:	4603      	mov	r3, r0
 8001f00:	817b      	strh	r3, [r7, #10]
 8001f02:	460b      	mov	r3, r1
 8001f04:	813b      	strh	r3, [r7, #8]
 8001f06:	4613      	mov	r3, r2
 8001f08:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 8001f0a:	893b      	ldrh	r3, [r7, #8]
 8001f0c:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 8001f0e:	7efb      	ldrb	r3, [r7, #27]
 8001f10:	f003 0307 	and.w	r3, r3, #7
 8001f14:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 8001f16:	2301      	movs	r3, #1
 8001f18:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 8001f1a:	7e3a      	ldrb	r2, [r7, #24]
 8001f1c:	7efb      	ldrb	r3, [r7, #27]
 8001f1e:	fa02 f303 	lsl.w	r3, r2, r3
 8001f22:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 8001f24:	2300      	movs	r3, #0
 8001f26:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 8001f2c:	68fb      	ldr	r3, [r7, #12]
 8001f2e:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d801      	bhi.n	8001f3a <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 8001f36:	7e3b      	ldrb	r3, [r7, #24]
 8001f38:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d001      	beq.n	8001f48 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 8001f44:	7e3b      	ldrb	r3, [r7, #24]
 8001f46:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 8001f48:	893b      	ldrh	r3, [r7, #8]
 8001f4a:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 8001f4c:	8afb      	ldrh	r3, [r7, #22]
 8001f4e:	f023 0307 	bic.w	r3, r3, #7
 8001f52:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	7c1b      	ldrb	r3, [r3, #16]
 8001f5a:	b29b      	uxth	r3, r3
 8001f5c:	8afa      	ldrh	r2, [r7, #22]
 8001f5e:	fb12 f303 	smulbb	r3, r2, r3
 8001f62:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f68:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8001f6a:	8afb      	ldrh	r3, [r7, #22]
 8001f6c:	69fa      	ldr	r2, [r7, #28]
 8001f6e:	4413      	add	r3, r2
 8001f70:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8001f72:	897b      	ldrh	r3, [r7, #10]
 8001f74:	69fa      	ldr	r2, [r7, #28]
 8001f76:	4413      	add	r3, r2
 8001f78:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8001f7a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d117      	bne.n	8001fb2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8001f82:	69fb      	ldr	r3, [r7, #28]
 8001f84:	781a      	ldrb	r2, [r3, #0]
 8001f86:	7ebb      	ldrb	r3, [r7, #26]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	b2da      	uxtb	r2, r3
 8001f8c:	69fb      	ldr	r3, [r7, #28]
 8001f8e:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 8001f90:	69fb      	ldr	r3, [r7, #28]
 8001f92:	781a      	ldrb	r2, [r3, #0]
 8001f94:	7e7b      	ldrb	r3, [r7, #25]
 8001f96:	4053      	eors	r3, r2
 8001f98:	b2da      	uxtb	r2, r3
 8001f9a:	69fb      	ldr	r3, [r7, #28]
 8001f9c:	701a      	strb	r2, [r3, #0]
	ptr++;
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	3301      	adds	r3, #1
 8001fa2:	61fb      	str	r3, [r7, #28]
	len--;
 8001fa4:	88fb      	ldrh	r3, [r7, #6]
 8001fa6:	3b01      	subs	r3, #1
 8001fa8:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8001faa:	88fb      	ldrh	r3, [r7, #6]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d1e8      	bne.n	8001f82 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 8001fb0:	e038      	b.n	8002024 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	7ebb      	ldrb	r3, [r7, #26]
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	781a      	ldrb	r2, [r3, #0]
 8001fc4:	7e7b      	ldrb	r3, [r7, #25]
 8001fc6:	4053      	eors	r3, r2
 8001fc8:	b2da      	uxtb	r2, r3
 8001fca:	69fb      	ldr	r3, [r7, #28]
 8001fcc:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 8001fce:	7efb      	ldrb	r3, [r7, #27]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8001fd4:	7efb      	ldrb	r3, [r7, #27]
 8001fd6:	f003 0307 	and.w	r3, r3, #7
 8001fda:	76fb      	strb	r3, [r7, #27]
      len--;
 8001fdc:	88fb      	ldrh	r3, [r7, #6]
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8001fe2:	7efb      	ldrb	r3, [r7, #27]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d114      	bne.n	8002012 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 8001fec:	461a      	mov	r2, r3
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	4413      	add	r3, r2
 8001ff2:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d801      	bhi.n	8002002 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 8001ffe:	2301      	movs	r3, #1
 8002000:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002008:	2b01      	cmp	r3, #1
 800200a:	d008      	beq.n	800201e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 800200c:	2301      	movs	r3, #1
 800200e:	767b      	strb	r3, [r7, #25]
 8002010:	e005      	b.n	800201e <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 8002012:	7ebb      	ldrb	r3, [r7, #26]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 8002018:	7e7b      	ldrb	r3, [r7, #25]
 800201a:	005b      	lsls	r3, r3, #1
 800201c:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 800201e:	88fb      	ldrh	r3, [r7, #6]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d1c6      	bne.n	8001fb2 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 8002024:	bf00      	nop
 8002026:	3724      	adds	r7, #36	; 0x24
 8002028:	46bd      	mov	sp, r7
 800202a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202e:	4770      	bx	lr

08002030 <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b082      	sub	sp, #8
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	2200      	movs	r2, #0
 800203c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2200      	movs	r2, #0
 8002044:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800204e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002058:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002060:	685b      	ldr	r3, [r3, #4]
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	4798      	blx	r3
}
 8002066:	bf00      	nop
 8002068:	3708      	adds	r7, #8
 800206a:	46bd      	mov	sp, r7
 800206c:	bd80      	pop	{r7, pc}

0800206e <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800206e:	b580      	push	{r7, lr}
 8002070:	b084      	sub	sp, #16
 8002072:	af00      	add	r7, sp, #0
 8002074:	60f8      	str	r0, [r7, #12]
 8002076:	60b9      	str	r1, [r7, #8]
 8002078:	603b      	str	r3, [r7, #0]
 800207a:	4613      	mov	r3, r2
 800207c:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2200      	movs	r2, #0
 8002082:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	68ba      	ldr	r2, [r7, #8]
 800208e:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	79fa      	ldrb	r2, [r7, #7]
 8002094:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	2200      	movs	r2, #0
 800209c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 80020b0:	68fb      	ldr	r3, [r7, #12]
 80020b2:	2200      	movs	r2, #0
 80020b4:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	2201      	movs	r2, #1
 80020bc:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2201      	movs	r2, #1
 80020c4:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	69ba      	ldr	r2, [r7, #24]
 80020cc:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 80020d8:	68f8      	ldr	r0, [r7, #12]
 80020da:	f7ff ffa9 	bl	8002030 <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 80020de:	68f8      	ldr	r0, [r7, #12]
 80020e0:	f7ff fd84 	bl	8001bec <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 80020ec:	bf00      	nop
 80020ee:	3710      	adds	r7, #16
 80020f0:	46bd      	mov	sp, r7
 80020f2:	bd80      	pop	{r7, pc}

080020f4 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 80020f4:	b480      	push	{r7}
 80020f6:	b085      	sub	sp, #20
 80020f8:	af00      	add	r7, sp, #0
 80020fa:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002108:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 800210a:	89fb      	ldrh	r3, [r7, #14]
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	89fa      	ldrh	r2, [r7, #14]
 8002114:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 8002116:	68bb      	ldr	r3, [r7, #8]
 8002118:	7c1b      	ldrb	r3, [r3, #16]
 800211a:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 800211c:	89fb      	ldrh	r3, [r7, #14]
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	89fa      	ldrh	r2, [r7, #14]
 8002126:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800212e:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002130:	89fb      	ldrh	r3, [r7, #14]
 8002132:	00db      	lsls	r3, r3, #3
 8002134:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	89fa      	ldrh	r2, [r7, #14]
 800213a:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002142:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 8002144:	89fb      	ldrh	r3, [r7, #14]
 8002146:	687a      	ldr	r2, [r7, #4]
 8002148:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 800214c:	4413      	add	r3, r2
 800214e:	68ba      	ldr	r2, [r7, #8]
 8002150:	7c52      	ldrb	r2, [r2, #17]
 8002152:	4293      	cmp	r3, r2
 8002154:	dd08      	ble.n	8002168 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 8002156:	68bb      	ldr	r3, [r7, #8]
 8002158:	7c5b      	ldrb	r3, [r3, #17]
 800215a:	b29a      	uxth	r2, r3
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002162:	b29b      	uxth	r3, r3
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002168:	89fb      	ldrh	r3, [r7, #14]
 800216a:	00db      	lsls	r3, r3, #3
 800216c:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 800218a:	89fb      	ldrh	r3, [r7, #14]
 800218c:	4413      	add	r3, r2
 800218e:	b29a      	uxth	r2, r3
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002196:	68bb      	ldr	r3, [r7, #8]
 8002198:	8a9a      	ldrh	r2, [r3, #20]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 80021a0:	68bb      	ldr	r3, [r7, #8]
 80021a2:	8ada      	ldrh	r2, [r3, #22]
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 80021aa:	bf00      	nop
 80021ac:	3714      	adds	r7, #20
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr

080021b6 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 80021b6:	b580      	push	{r7, lr}
 80021b8:	b084      	sub	sp, #16
 80021ba:	af02      	add	r7, sp, #8
 80021bc:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80021d6:	9300      	str	r3, [sp, #0]
 80021d8:	4603      	mov	r3, r0
 80021da:	6878      	ldr	r0, [r7, #4]
 80021dc:	f7ff fe5d 	bl	8001e9a <u8g2_IsIntersection>
 80021e0:	4603      	mov	r3, r0
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d104      	bne.n	80021f0 <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	2200      	movs	r2, #0
 80021ea:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 80021ee:	e03b      	b.n	8002268 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	2201      	movs	r2, #1
 80021f4:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 8002204:	429a      	cmp	r2, r3
 8002206:	d205      	bcs.n	8002214 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002220:	429a      	cmp	r2, r3
 8002222:	d905      	bls.n	8002230 <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 800223c:	429a      	cmp	r2, r3
 800223e:	d205      	bcs.n	800224c <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002258:	429a      	cmp	r2, r3
 800225a:	d905      	bls.n	8002268 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002268:	bf00      	nop
 800226a:	3708      	adds	r7, #8
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b082      	sub	sp, #8
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002278:	6878      	ldr	r0, [r7, #4]
 800227a:	f7ff ff3b 	bl	80020f4 <u8g2_update_dimension_common>
}
 800227e:	bf00      	nop
 8002280:	3708      	adds	r7, #8
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b082      	sub	sp, #8
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	2200      	movs	r2, #0
 8002292:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f7ff ff7b 	bl	80021b6 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 80022c0:	bf00      	nop
 80022c2:	3708      	adds	r7, #8
 80022c4:	46bd      	mov	sp, r7
 80022c6:	bd80      	pop	{r7, pc}

080022c8 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b086      	sub	sp, #24
 80022cc:	af02      	add	r7, sp, #8
 80022ce:	60f8      	str	r0, [r7, #12]
 80022d0:	4608      	mov	r0, r1
 80022d2:	4611      	mov	r1, r2
 80022d4:	461a      	mov	r2, r3
 80022d6:	4603      	mov	r3, r0
 80022d8:	817b      	strh	r3, [r7, #10]
 80022da:	460b      	mov	r3, r1
 80022dc:	813b      	strh	r3, [r7, #8]
 80022de:	4613      	mov	r3, r2
 80022e0:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 80022e2:	88f8      	ldrh	r0, [r7, #6]
 80022e4:	893a      	ldrh	r2, [r7, #8]
 80022e6:	8979      	ldrh	r1, [r7, #10]
 80022e8:	7e3b      	ldrb	r3, [r7, #24]
 80022ea:	9300      	str	r3, [sp, #0]
 80022ec:	4603      	mov	r3, r0
 80022ee:	68f8      	ldr	r0, [r7, #12]
 80022f0:	f7ff fcf4 	bl	8001cdc <u8g2_draw_hv_line_2dir>
}
 80022f4:	bf00      	nop
 80022f6:	3710      	adds	r7, #16
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}

080022fc <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 80022fc:	b480      	push	{r7}
 80022fe:	b083      	sub	sp, #12
 8002300:	af00      	add	r7, sp, #0
 8002302:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2200      	movs	r2, #0
 8002308:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 800230c:	bf00      	nop
 800230e:	370c      	adds	r7, #12
 8002310:	46bd      	mov	sp, r7
 8002312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002316:	4770      	bx	lr

08002318 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 8002318:	b480      	push	{r7}
 800231a:	b083      	sub	sp, #12
 800231c:	af00      	add	r7, sp, #0
 800231e:	6078      	str	r0, [r7, #4]
 8002320:	460b      	mov	r3, r1
 8002322:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 8002324:	78fb      	ldrb	r3, [r7, #3]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d002      	beq.n	8002330 <u8x8_ascii_next+0x18>
 800232a:	78fb      	ldrb	r3, [r7, #3]
 800232c:	2b0a      	cmp	r3, #10
 800232e:	d102      	bne.n	8002336 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 8002330:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002334:	e001      	b.n	800233a <u8x8_ascii_next+0x22>
  return b;
 8002336:	78fb      	ldrb	r3, [r7, #3]
 8002338:	b29b      	uxth	r3, r3
}
 800233a:	4618      	mov	r0, r3
 800233c:	370c      	adds	r7, #12
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002346:	b590      	push	{r4, r7, lr}
 8002348:	b085      	sub	sp, #20
 800234a:	af00      	add	r7, sp, #0
 800234c:	60f8      	str	r0, [r7, #12]
 800234e:	460b      	mov	r3, r1
 8002350:	607a      	str	r2, [r7, #4]
 8002352:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	691c      	ldr	r4, [r3, #16]
 8002358:	7afa      	ldrb	r2, [r7, #11]
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2117      	movs	r1, #23
 800235e:	68f8      	ldr	r0, [r7, #12]
 8002360:	47a0      	blx	r4
 8002362:	4603      	mov	r3, r0
}
 8002364:	4618      	mov	r0, r3
 8002366:	3714      	adds	r7, #20
 8002368:	46bd      	mov	sp, r7
 800236a:	bd90      	pop	{r4, r7, pc}

0800236c <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 800236c:	b580      	push	{r7, lr}
 800236e:	b082      	sub	sp, #8
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
 8002374:	460b      	mov	r3, r1
 8002376:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002378:	1cfb      	adds	r3, r7, #3
 800237a:	461a      	mov	r2, r3
 800237c:	2101      	movs	r1, #1
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	f7ff ffe1 	bl	8002346 <u8x8_byte_SendBytes>
 8002384:	4603      	mov	r3, r0
}
 8002386:	4618      	mov	r0, r3
 8002388:	3708      	adds	r7, #8
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 800238e:	b590      	push	{r4, r7, lr}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	691c      	ldr	r4, [r3, #16]
 800239a:	2300      	movs	r3, #0
 800239c:	2200      	movs	r2, #0
 800239e:	2118      	movs	r1, #24
 80023a0:	6878      	ldr	r0, [r7, #4]
 80023a2:	47a0      	blx	r4
 80023a4:	4603      	mov	r3, r0
}
 80023a6:	4618      	mov	r0, r3
 80023a8:	370c      	adds	r7, #12
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd90      	pop	{r4, r7, pc}

080023ae <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 80023ae:	b590      	push	{r4, r7, lr}
 80023b0:	b083      	sub	sp, #12
 80023b2:	af00      	add	r7, sp, #0
 80023b4:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	691c      	ldr	r4, [r3, #16]
 80023ba:	2300      	movs	r3, #0
 80023bc:	2200      	movs	r2, #0
 80023be:	2119      	movs	r1, #25
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	47a0      	blx	r4
 80023c4:	4603      	mov	r3, r0
}
 80023c6:	4618      	mov	r0, r3
 80023c8:	370c      	adds	r7, #12
 80023ca:	46bd      	mov	sp, r7
 80023cc:	bd90      	pop	{r4, r7, pc}

080023ce <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 80023ce:	b590      	push	{r4, r7, lr}
 80023d0:	b083      	sub	sp, #12
 80023d2:	af00      	add	r7, sp, #0
 80023d4:	6078      	str	r0, [r7, #4]
 80023d6:	460b      	mov	r3, r1
 80023d8:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	68dc      	ldr	r4, [r3, #12]
 80023de:	78fa      	ldrb	r2, [r7, #3]
 80023e0:	2300      	movs	r3, #0
 80023e2:	2115      	movs	r1, #21
 80023e4:	6878      	ldr	r0, [r7, #4]
 80023e6:	47a0      	blx	r4
 80023e8:	4603      	mov	r3, r0
}
 80023ea:	4618      	mov	r0, r3
 80023ec:	370c      	adds	r7, #12
 80023ee:	46bd      	mov	sp, r7
 80023f0:	bd90      	pop	{r4, r7, pc}

080023f2 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 80023f2:	b590      	push	{r4, r7, lr}
 80023f4:	b083      	sub	sp, #12
 80023f6:	af00      	add	r7, sp, #0
 80023f8:	6078      	str	r0, [r7, #4]
 80023fa:	460b      	mov	r3, r1
 80023fc:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	68dc      	ldr	r4, [r3, #12]
 8002402:	78fa      	ldrb	r2, [r7, #3]
 8002404:	2300      	movs	r3, #0
 8002406:	2116      	movs	r1, #22
 8002408:	6878      	ldr	r0, [r7, #4]
 800240a:	47a0      	blx	r4
 800240c:	4603      	mov	r3, r0
}
 800240e:	4618      	mov	r0, r3
 8002410:	370c      	adds	r7, #12
 8002412:	46bd      	mov	sp, r7
 8002414:	bd90      	pop	{r4, r7, pc}

08002416 <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002416:	b590      	push	{r4, r7, lr}
 8002418:	b085      	sub	sp, #20
 800241a:	af00      	add	r7, sp, #0
 800241c:	60f8      	str	r0, [r7, #12]
 800241e:	460b      	mov	r3, r1
 8002420:	607a      	str	r2, [r7, #4]
 8002422:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	68dc      	ldr	r4, [r3, #12]
 8002428:	7afa      	ldrb	r2, [r7, #11]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	2117      	movs	r1, #23
 800242e:	68f8      	ldr	r0, [r7, #12]
 8002430:	47a0      	blx	r4
 8002432:	4603      	mov	r3, r0
}
 8002434:	4618      	mov	r0, r3
 8002436:	3714      	adds	r7, #20
 8002438:	46bd      	mov	sp, r7
 800243a:	bd90      	pop	{r4, r7, pc}

0800243c <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 800243c:	b590      	push	{r4, r7, lr}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	68dc      	ldr	r4, [r3, #12]
 8002448:	2300      	movs	r3, #0
 800244a:	2200      	movs	r2, #0
 800244c:	2118      	movs	r1, #24
 800244e:	6878      	ldr	r0, [r7, #4]
 8002450:	47a0      	blx	r4
 8002452:	4603      	mov	r3, r0
}
 8002454:	4618      	mov	r0, r3
 8002456:	370c      	adds	r7, #12
 8002458:	46bd      	mov	sp, r7
 800245a:	bd90      	pop	{r4, r7, pc}

0800245c <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 800245c:	b590      	push	{r4, r7, lr}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68dc      	ldr	r4, [r3, #12]
 8002468:	2300      	movs	r3, #0
 800246a:	2200      	movs	r2, #0
 800246c:	2119      	movs	r1, #25
 800246e:	6878      	ldr	r0, [r7, #4]
 8002470:	47a0      	blx	r4
 8002472:	4603      	mov	r3, r0
}
 8002474:	4618      	mov	r0, r3
 8002476:	370c      	adds	r7, #12
 8002478:	46bd      	mov	sp, r7
 800247a:	bd90      	pop	{r4, r7, pc}

0800247c <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 800247c:	b590      	push	{r4, r7, lr}
 800247e:	b085      	sub	sp, #20
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
 8002484:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	73fb      	strb	r3, [r7, #15]
    data++;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	3301      	adds	r3, #1
 8002490:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002492:	7bfb      	ldrb	r3, [r7, #15]
 8002494:	2bfe      	cmp	r3, #254	; 0xfe
 8002496:	d031      	beq.n	80024fc <u8x8_cad_SendSequence+0x80>
 8002498:	2bfe      	cmp	r3, #254	; 0xfe
 800249a:	dc3d      	bgt.n	8002518 <u8x8_cad_SendSequence+0x9c>
 800249c:	2b19      	cmp	r3, #25
 800249e:	dc3b      	bgt.n	8002518 <u8x8_cad_SendSequence+0x9c>
 80024a0:	2b18      	cmp	r3, #24
 80024a2:	da23      	bge.n	80024ec <u8x8_cad_SendSequence+0x70>
 80024a4:	2b16      	cmp	r3, #22
 80024a6:	dc02      	bgt.n	80024ae <u8x8_cad_SendSequence+0x32>
 80024a8:	2b15      	cmp	r3, #21
 80024aa:	da03      	bge.n	80024b4 <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 80024ac:	e034      	b.n	8002518 <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 80024ae:	2b17      	cmp	r3, #23
 80024b0:	d00e      	beq.n	80024d0 <u8x8_cad_SendSequence+0x54>
	return;
 80024b2:	e031      	b.n	8002518 <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68dc      	ldr	r4, [r3, #12]
 80024be:	7bba      	ldrb	r2, [r7, #14]
 80024c0:	7bf9      	ldrb	r1, [r7, #15]
 80024c2:	2300      	movs	r3, #0
 80024c4:	6878      	ldr	r0, [r7, #4]
 80024c6:	47a0      	blx	r4
	  data++;
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	3301      	adds	r3, #1
 80024cc:	603b      	str	r3, [r7, #0]
	  break;
 80024ce:	e022      	b.n	8002516 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80024d0:	683b      	ldr	r3, [r7, #0]
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 80024d6:	f107 030e 	add.w	r3, r7, #14
 80024da:	461a      	mov	r2, r3
 80024dc:	2101      	movs	r1, #1
 80024de:	6878      	ldr	r0, [r7, #4]
 80024e0:	f7ff ff99 	bl	8002416 <u8x8_cad_SendData>
	  data++;
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	3301      	adds	r3, #1
 80024e8:	603b      	str	r3, [r7, #0]
	  break;
 80024ea:	e014      	b.n	8002516 <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	68dc      	ldr	r4, [r3, #12]
 80024f0:	7bf9      	ldrb	r1, [r7, #15]
 80024f2:	2300      	movs	r3, #0
 80024f4:	2200      	movs	r2, #0
 80024f6:	6878      	ldr	r0, [r7, #4]
 80024f8:	47a0      	blx	r4
	  break;
 80024fa:	e00c      	b.n	8002516 <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	781b      	ldrb	r3, [r3, #0]
 8002500:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002502:	7bbb      	ldrb	r3, [r7, #14]
 8002504:	461a      	mov	r2, r3
 8002506:	2129      	movs	r1, #41	; 0x29
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f000 fa0a 	bl	8002922 <u8x8_gpio_call>
	  data++;
 800250e:	683b      	ldr	r3, [r7, #0]
 8002510:	3301      	adds	r3, #1
 8002512:	603b      	str	r3, [r7, #0]
	  break;
 8002514:	bf00      	nop
    cmd = *data;
 8002516:	e7b6      	b.n	8002486 <u8x8_cad_SendSequence+0xa>
	return;
 8002518:	bf00      	nop
    }
  }
}
 800251a:	3714      	adds	r7, #20
 800251c:	46bd      	mov	sp, r7
 800251e:	bd90      	pop	{r4, r7, pc}

08002520 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002520:	b590      	push	{r4, r7, lr}
 8002522:	b085      	sub	sp, #20
 8002524:	af00      	add	r7, sp, #0
 8002526:	60f8      	str	r0, [r7, #12]
 8002528:	460b      	mov	r3, r1
 800252a:	607a      	str	r2, [r7, #4]
 800252c:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 800252e:	68f8      	ldr	r0, [r7, #12]
 8002530:	f7ff ff2d 	bl	800238e <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002534:	2140      	movs	r1, #64	; 0x40
 8002536:	68f8      	ldr	r0, [r7, #12]
 8002538:	f7ff ff18 	bl	800236c <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	691c      	ldr	r4, [r3, #16]
 8002540:	7afa      	ldrb	r2, [r7, #11]
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	2117      	movs	r1, #23
 8002546:	68f8      	ldr	r0, [r7, #12]
 8002548:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 800254a:	68f8      	ldr	r0, [r7, #12]
 800254c:	f7ff ff2f 	bl	80023ae <u8x8_byte_EndTransfer>
}
 8002550:	bf00      	nop
 8002552:	3714      	adds	r7, #20
 8002554:	46bd      	mov	sp, r7
 8002556:	bd90      	pop	{r4, r7, pc}

08002558 <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002558:	b590      	push	{r4, r7, lr}
 800255a:	b087      	sub	sp, #28
 800255c:	af00      	add	r7, sp, #0
 800255e:	60f8      	str	r0, [r7, #12]
 8002560:	607b      	str	r3, [r7, #4]
 8002562:	460b      	mov	r3, r1
 8002564:	72fb      	strb	r3, [r7, #11]
 8002566:	4613      	mov	r3, r2
 8002568:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 800256a:	7afb      	ldrb	r3, [r7, #11]
 800256c:	3b14      	subs	r3, #20
 800256e:	2b05      	cmp	r3, #5
 8002570:	d848      	bhi.n	8002604 <u8x8_cad_ssd13xx_i2c+0xac>
 8002572:	a201      	add	r2, pc, #4	; (adr r2, 8002578 <u8x8_cad_ssd13xx_i2c+0x20>)
 8002574:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002578:	080025e1 	.word	0x080025e1
 800257c:	08002591 	.word	0x08002591
 8002580:	08002591 	.word	0x08002591
 8002584:	080025b1 	.word	0x080025b1
 8002588:	08002609 	.word	0x08002609
 800258c:	08002609 	.word	0x08002609
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 8002590:	68f8      	ldr	r0, [r7, #12]
 8002592:	f7ff fefc 	bl	800238e <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 8002596:	2100      	movs	r1, #0
 8002598:	68f8      	ldr	r0, [r7, #12]
 800259a:	f7ff fee7 	bl	800236c <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 800259e:	7abb      	ldrb	r3, [r7, #10]
 80025a0:	4619      	mov	r1, r3
 80025a2:	68f8      	ldr	r0, [r7, #12]
 80025a4:	f7ff fee2 	bl	800236c <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 80025a8:	68f8      	ldr	r0, [r7, #12]
 80025aa:	f7ff ff00 	bl	80023ae <u8x8_byte_EndTransfer>
      break;
 80025ae:	e02c      	b.n	800260a <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80025b4:	e00a      	b.n	80025cc <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 80025b6:	697a      	ldr	r2, [r7, #20]
 80025b8:	2118      	movs	r1, #24
 80025ba:	68f8      	ldr	r0, [r7, #12]
 80025bc:	f7ff ffb0 	bl	8002520 <u8x8_i2c_data_transfer>
	arg_int-=24;
 80025c0:	7abb      	ldrb	r3, [r7, #10]
 80025c2:	3b18      	subs	r3, #24
 80025c4:	72bb      	strb	r3, [r7, #10]
	p+=24;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	3318      	adds	r3, #24
 80025ca:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 80025cc:	7abb      	ldrb	r3, [r7, #10]
 80025ce:	2b18      	cmp	r3, #24
 80025d0:	d8f1      	bhi.n	80025b6 <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 80025d2:	7abb      	ldrb	r3, [r7, #10]
 80025d4:	697a      	ldr	r2, [r7, #20]
 80025d6:	4619      	mov	r1, r3
 80025d8:	68f8      	ldr	r0, [r7, #12]
 80025da:	f7ff ffa1 	bl	8002520 <u8x8_i2c_data_transfer>
      break;
 80025de:	e014      	b.n	800260a <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80025e6:	2bff      	cmp	r3, #255	; 0xff
 80025e8:	d103      	bne.n	80025f2 <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	2278      	movs	r2, #120	; 0x78
 80025ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	691c      	ldr	r4, [r3, #16]
 80025f6:	7aba      	ldrb	r2, [r7, #10]
 80025f8:	7af9      	ldrb	r1, [r7, #11]
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	47a0      	blx	r4
 8002600:	4603      	mov	r3, r0
 8002602:	e003      	b.n	800260c <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 8002604:	2300      	movs	r3, #0
 8002606:	e001      	b.n	800260c <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 8002608:	bf00      	nop
  }
  return 1;
 800260a:	2301      	movs	r3, #1
}
 800260c:	4618      	mov	r0, r3
 800260e:	371c      	adds	r7, #28
 8002610:	46bd      	mov	sp, r7
 8002612:	bd90      	pop	{r4, r7, pc}

08002614 <u8x8_d_ssd1305_generic>:
};



static uint8_t u8x8_d_ssd1305_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	b086      	sub	sp, #24
 8002618:	af00      	add	r7, sp, #0
 800261a:	60f8      	str	r0, [r7, #12]
 800261c:	607b      	str	r3, [r7, #4]
 800261e:	460b      	mov	r3, r1
 8002620:	72fb      	strb	r3, [r7, #11]
 8002622:	4613      	mov	r3, r2
 8002624:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002626:	7afb      	ldrb	r3, [r7, #11]
 8002628:	2b0f      	cmp	r3, #15
 800262a:	d006      	beq.n	800263a <u8x8_d_ssd1305_generic+0x26>
 800262c:	2b0f      	cmp	r3, #15
 800262e:	dc67      	bgt.n	8002700 <u8x8_d_ssd1305_generic+0xec>
 8002630:	2b0b      	cmp	r3, #11
 8002632:	d048      	beq.n	80026c6 <u8x8_d_ssd1305_generic+0xb2>
 8002634:	2b0e      	cmp	r3, #14
 8002636:	d053      	beq.n	80026e0 <u8x8_d_ssd1305_generic+0xcc>
 8002638:	e062      	b.n	8002700 <u8x8_d_ssd1305_generic+0xec>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 800263a:	68f8      	ldr	r0, [r7, #12]
 800263c:	f7ff fefe 	bl	800243c <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	795b      	ldrb	r3, [r3, #5]
 8002644:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8002646:	7dfb      	ldrb	r3, [r7, #23]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 800264c:	68fb      	ldr	r3, [r7, #12]
 800264e:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002652:	7dfb      	ldrb	r3, [r7, #23]
 8002654:	4413      	add	r3, r2
 8002656:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002658:	2140      	movs	r1, #64	; 0x40
 800265a:	68f8      	ldr	r0, [r7, #12]
 800265c:	f7ff feb7 	bl	80023ce <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002660:	7dfb      	ldrb	r3, [r7, #23]
 8002662:	091b      	lsrs	r3, r3, #4
 8002664:	b2db      	uxtb	r3, r3
 8002666:	f043 0310 	orr.w	r3, r3, #16
 800266a:	b2db      	uxtb	r3, r3
 800266c:	4619      	mov	r1, r3
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f7ff fead 	bl	80023ce <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 8002674:	7dfb      	ldrb	r3, [r7, #23]
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	b2db      	uxtb	r3, r3
 800267c:	4619      	mov	r1, r3
 800267e:	68f8      	ldr	r0, [r7, #12]
 8002680:	f7ff feb7 	bl	80023f2 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	799b      	ldrb	r3, [r3, #6]
 8002688:	f063 034f 	orn	r3, r3, #79	; 0x4f
 800268c:	b2db      	uxtb	r3, r3
 800268e:	4619      	mov	r1, r3
 8002690:	68f8      	ldr	r0, [r7, #12]
 8002692:	f7ff feae 	bl	80023f2 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	791b      	ldrb	r3, [r3, #4]
 800269a:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 80026a2:	7dbb      	ldrb	r3, [r7, #22]
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	b2db      	uxtb	r3, r3
 80026a8:	693a      	ldr	r2, [r7, #16]
 80026aa:	4619      	mov	r1, r3
 80026ac:	68f8      	ldr	r0, [r7, #12]
 80026ae:	f7ff feb2 	bl	8002416 <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 80026b2:	7abb      	ldrb	r3, [r7, #10]
 80026b4:	3b01      	subs	r3, #1
 80026b6:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 80026b8:	7abb      	ldrb	r3, [r7, #10]
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d1eb      	bne.n	8002696 <u8x8_d_ssd1305_generic+0x82>
      
      u8x8_cad_EndTransfer(u8x8);
 80026be:	68f8      	ldr	r0, [r7, #12]
 80026c0:	f7ff fecc 	bl	800245c <u8x8_cad_EndTransfer>
      break;
 80026c4:	e01e      	b.n	8002704 <u8x8_d_ssd1305_generic+0xf0>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 80026c6:	7abb      	ldrb	r3, [r7, #10]
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d104      	bne.n	80026d6 <u8x8_d_ssd1305_generic+0xc2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave0_seq);
 80026cc:	4910      	ldr	r1, [pc, #64]	; (8002710 <u8x8_d_ssd1305_generic+0xfc>)
 80026ce:	68f8      	ldr	r0, [r7, #12]
 80026d0:	f7ff fed4 	bl	800247c <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
      break;
 80026d4:	e016      	b.n	8002704 <u8x8_d_ssd1305_generic+0xf0>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
 80026d6:	490f      	ldr	r1, [pc, #60]	; (8002714 <u8x8_d_ssd1305_generic+0x100>)
 80026d8:	68f8      	ldr	r0, [r7, #12]
 80026da:	f7ff fecf 	bl	800247c <u8x8_cad_SendSequence>
      break;
 80026de:	e011      	b.n	8002704 <u8x8_d_ssd1305_generic+0xf0>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 80026e0:	68f8      	ldr	r0, [r7, #12]
 80026e2:	f7ff feab 	bl	800243c <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 80026e6:	2181      	movs	r1, #129	; 0x81
 80026e8:	68f8      	ldr	r0, [r7, #12]
 80026ea:	f7ff fe70 	bl	80023ce <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1305 has range from 0 to 255 */
 80026ee:	7abb      	ldrb	r3, [r7, #10]
 80026f0:	4619      	mov	r1, r3
 80026f2:	68f8      	ldr	r0, [r7, #12]
 80026f4:	f7ff fe7d 	bl	80023f2 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 80026f8:	68f8      	ldr	r0, [r7, #12]
 80026fa:	f7ff feaf 	bl	800245c <u8x8_cad_EndTransfer>
      break;
 80026fe:	e001      	b.n	8002704 <u8x8_d_ssd1305_generic+0xf0>
#endif
    default:
      return 0;
 8002700:	2300      	movs	r3, #0
 8002702:	e000      	b.n	8002706 <u8x8_d_ssd1305_generic+0xf2>
  }
  return 1;
 8002704:	2301      	movs	r3, #1
}
 8002706:	4618      	mov	r0, r3
 8002708:	3718      	adds	r7, #24
 800270a:	46bd      	mov	sp, r7
 800270c:	bd80      	pop	{r7, pc}
 800270e:	bf00      	nop
 8002710:	0800e818 	.word	0x0800e818
 8002714:	0800e820 	.word	0x0800e820

08002718 <u8x8_d_ssd1305_128x32_noname>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1305_128x32_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b084      	sub	sp, #16
 800271c:	af00      	add	r7, sp, #0
 800271e:	60f8      	str	r0, [r7, #12]
 8002720:	607b      	str	r3, [r7, #4]
 8002722:	460b      	mov	r3, r1
 8002724:	72fb      	strb	r3, [r7, #11]
 8002726:	4613      	mov	r3, r2
 8002728:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1305_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 800272a:	7aba      	ldrb	r2, [r7, #10]
 800272c:	7af9      	ldrb	r1, [r7, #11]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	68f8      	ldr	r0, [r7, #12]
 8002732:	f7ff ff6f 	bl	8002614 <u8x8_d_ssd1305_generic>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <u8x8_d_ssd1305_128x32_noname+0x28>
    return 1;
 800273c:	2301      	movs	r3, #1
 800273e:	e032      	b.n	80027a6 <u8x8_d_ssd1305_128x32_noname+0x8e>
  
  switch(msg)
 8002740:	7afb      	ldrb	r3, [r7, #11]
 8002742:	2b0d      	cmp	r3, #13
 8002744:	d006      	beq.n	8002754 <u8x8_d_ssd1305_128x32_noname+0x3c>
 8002746:	2b0d      	cmp	r3, #13
 8002748:	dc2a      	bgt.n	80027a0 <u8x8_d_ssd1305_128x32_noname+0x88>
 800274a:	2b09      	cmp	r3, #9
 800274c:	d023      	beq.n	8002796 <u8x8_d_ssd1305_128x32_noname+0x7e>
 800274e:	2b0a      	cmp	r3, #10
 8002750:	d019      	beq.n	8002786 <u8x8_d_ssd1305_128x32_noname+0x6e>
 8002752:	e025      	b.n	80027a0 <u8x8_d_ssd1305_128x32_noname+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002754:	7abb      	ldrb	r3, [r7, #10]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10a      	bne.n	8002770 <u8x8_d_ssd1305_128x32_noname+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip0_seq);
 800275a:	4915      	ldr	r1, [pc, #84]	; (80027b0 <u8x8_d_ssd1305_128x32_noname+0x98>)
 800275c:	68f8      	ldr	r0, [r7, #12]
 800275e:	f7ff fe8d 	bl	800247c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	7c9a      	ldrb	r2, [r3, #18]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 800276e:	e019      	b.n	80027a4 <u8x8_d_ssd1305_128x32_noname+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
 8002770:	4910      	ldr	r1, [pc, #64]	; (80027b4 <u8x8_d_ssd1305_128x32_noname+0x9c>)
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	f7ff fe82 	bl	800247c <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	7cda      	ldrb	r2, [r3, #19]
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8002784:	e00e      	b.n	80027a4 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002786:	68f8      	ldr	r0, [r7, #12]
 8002788:	f000 f82e 	bl	80027e8 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_noname_init_seq);    
 800278c:	490a      	ldr	r1, [pc, #40]	; (80027b8 <u8x8_d_ssd1305_128x32_noname+0xa0>)
 800278e:	68f8      	ldr	r0, [r7, #12]
 8002790:	f7ff fe74 	bl	800247c <u8x8_cad_SendSequence>
      break;
 8002794:	e006      	b.n	80027a4 <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1305_128x32_noname_display_info);
 8002796:	4909      	ldr	r1, [pc, #36]	; (80027bc <u8x8_d_ssd1305_128x32_noname+0xa4>)
 8002798:	68f8      	ldr	r0, [r7, #12]
 800279a:	f000 f811 	bl	80027c0 <u8x8_d_helper_display_setup_memory>
      break;
 800279e:	e001      	b.n	80027a4 <u8x8_d_ssd1305_128x32_noname+0x8c>
    default:
      return 0;
 80027a0:	2300      	movs	r3, #0
 80027a2:	e000      	b.n	80027a6 <u8x8_d_ssd1305_128x32_noname+0x8e>
  }
  return 1;
 80027a4:	2301      	movs	r3, #1
}
 80027a6:	4618      	mov	r0, r3
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	0800e828 	.word	0x0800e828
 80027b4:	0800e834 	.word	0x0800e834
 80027b8:	0800e858 	.word	0x0800e858
 80027bc:	0800e840 	.word	0x0800e840

080027c0 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 80027c0:	b480      	push	{r7}
 80027c2:	b083      	sub	sp, #12
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
 80027c8:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	683a      	ldr	r2, [r7, #0]
 80027ce:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	7c9a      	ldrb	r2, [r3, #18]
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 80027dc:	bf00      	nop
 80027de:	370c      	adds	r7, #12
 80027e0:	46bd      	mov	sp, r7
 80027e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e6:	4770      	bx	lr

080027e8 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 80027e8:	b590      	push	{r4, r7, lr}
 80027ea:	b083      	sub	sp, #12
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	695c      	ldr	r4, [r3, #20]
 80027f4:	2300      	movs	r3, #0
 80027f6:	2200      	movs	r2, #0
 80027f8:	2128      	movs	r1, #40	; 0x28
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	68dc      	ldr	r4, [r3, #12]
 8002802:	2300      	movs	r3, #0
 8002804:	2200      	movs	r2, #0
 8002806:	2114      	movs	r1, #20
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 800280c:	2201      	movs	r2, #1
 800280e:	214b      	movs	r1, #75	; 0x4b
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f886 	bl	8002922 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	791b      	ldrb	r3, [r3, #4]
 800281c:	461a      	mov	r2, r3
 800281e:	2129      	movs	r1, #41	; 0x29
 8002820:	6878      	ldr	r0, [r7, #4]
 8002822:	f000 f87e 	bl	8002922 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002826:	2200      	movs	r2, #0
 8002828:	214b      	movs	r1, #75	; 0x4b
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f000 f879 	bl	8002922 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	791b      	ldrb	r3, [r3, #4]
 8002836:	461a      	mov	r2, r3
 8002838:	2129      	movs	r1, #41	; 0x29
 800283a:	6878      	ldr	r0, [r7, #4]
 800283c:	f000 f871 	bl	8002922 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002840:	2201      	movs	r2, #1
 8002842:	214b      	movs	r1, #75	; 0x4b
 8002844:	6878      	ldr	r0, [r7, #4]
 8002846:	f000 f86c 	bl	8002922 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	795b      	ldrb	r3, [r3, #5]
 8002850:	461a      	mov	r2, r3
 8002852:	2129      	movs	r1, #41	; 0x29
 8002854:	6878      	ldr	r0, [r7, #4]
 8002856:	f000 f864 	bl	8002922 <u8x8_gpio_call>
}    
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	bd90      	pop	{r4, r7, pc}

08002862 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 8002862:	b590      	push	{r4, r7, lr}
 8002864:	b085      	sub	sp, #20
 8002866:	af00      	add	r7, sp, #0
 8002868:	6078      	str	r0, [r7, #4]
 800286a:	4608      	mov	r0, r1
 800286c:	4611      	mov	r1, r2
 800286e:	461a      	mov	r2, r3
 8002870:	4603      	mov	r3, r0
 8002872:	70fb      	strb	r3, [r7, #3]
 8002874:	460b      	mov	r3, r1
 8002876:	70bb      	strb	r3, [r7, #2]
 8002878:	4613      	mov	r3, r2
 800287a:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 800287c:	78fb      	ldrb	r3, [r7, #3]
 800287e:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8002880:	78bb      	ldrb	r3, [r7, #2]
 8002882:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 8002884:	787b      	ldrb	r3, [r7, #1]
 8002886:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8002888:	6a3b      	ldr	r3, [r7, #32]
 800288a:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	689c      	ldr	r4, [r3, #8]
 8002890:	f107 0308 	add.w	r3, r7, #8
 8002894:	2201      	movs	r2, #1
 8002896:	210f      	movs	r1, #15
 8002898:	6878      	ldr	r0, [r7, #4]
 800289a:	47a0      	blx	r4
 800289c:	4603      	mov	r3, r0
}
 800289e:	4618      	mov	r0, r3
 80028a0:	3714      	adds	r7, #20
 80028a2:	46bd      	mov	sp, r7
 80028a4:	bd90      	pop	{r4, r7, pc}

080028a6 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 80028a6:	b590      	push	{r4, r7, lr}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	689c      	ldr	r4, [r3, #8]
 80028b2:	2300      	movs	r3, #0
 80028b4:	2200      	movs	r2, #0
 80028b6:	2109      	movs	r1, #9
 80028b8:	6878      	ldr	r0, [r7, #4]
 80028ba:	47a0      	blx	r4
}
 80028bc:	bf00      	nop
 80028be:	370c      	adds	r7, #12
 80028c0:	46bd      	mov	sp, r7
 80028c2:	bd90      	pop	{r4, r7, pc}

080028c4 <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 80028c4:	b590      	push	{r4, r7, lr}
 80028c6:	b083      	sub	sp, #12
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	689c      	ldr	r4, [r3, #8]
 80028d0:	2300      	movs	r3, #0
 80028d2:	2200      	movs	r2, #0
 80028d4:	210a      	movs	r1, #10
 80028d6:	6878      	ldr	r0, [r7, #4]
 80028d8:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 80028da:	bf00      	nop
 80028dc:	370c      	adds	r7, #12
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd90      	pop	{r4, r7, pc}

080028e2 <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 80028e2:	b590      	push	{r4, r7, lr}
 80028e4:	b083      	sub	sp, #12
 80028e6:	af00      	add	r7, sp, #0
 80028e8:	6078      	str	r0, [r7, #4]
 80028ea:	460b      	mov	r3, r1
 80028ec:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	689c      	ldr	r4, [r3, #8]
 80028f2:	78fa      	ldrb	r2, [r7, #3]
 80028f4:	2300      	movs	r3, #0
 80028f6:	210b      	movs	r1, #11
 80028f8:	6878      	ldr	r0, [r7, #4]
 80028fa:	47a0      	blx	r4
}
 80028fc:	bf00      	nop
 80028fe:	370c      	adds	r7, #12
 8002900:	46bd      	mov	sp, r7
 8002902:	bd90      	pop	{r4, r7, pc}

08002904 <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 8002904:	b590      	push	{r4, r7, lr}
 8002906:	b083      	sub	sp, #12
 8002908:	af00      	add	r7, sp, #0
 800290a:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689c      	ldr	r4, [r3, #8]
 8002910:	2300      	movs	r3, #0
 8002912:	2200      	movs	r2, #0
 8002914:	2110      	movs	r1, #16
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	47a0      	blx	r4
}
 800291a:	bf00      	nop
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	bd90      	pop	{r4, r7, pc}

08002922 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 8002922:	b590      	push	{r4, r7, lr}
 8002924:	b083      	sub	sp, #12
 8002926:	af00      	add	r7, sp, #0
 8002928:	6078      	str	r0, [r7, #4]
 800292a:	460b      	mov	r3, r1
 800292c:	70fb      	strb	r3, [r7, #3]
 800292e:	4613      	mov	r3, r2
 8002930:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	695c      	ldr	r4, [r3, #20]
 8002936:	78ba      	ldrb	r2, [r7, #2]
 8002938:	78f9      	ldrb	r1, [r7, #3]
 800293a:	2300      	movs	r3, #0
 800293c:	6878      	ldr	r0, [r7, #4]
 800293e:	47a0      	blx	r4
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	bd90      	pop	{r4, r7, pc}

08002948 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 8002948:	b480      	push	{r7}
 800294a:	b085      	sub	sp, #20
 800294c:	af00      	add	r7, sp, #0
 800294e:	60f8      	str	r0, [r7, #12]
 8002950:	607b      	str	r3, [r7, #4]
 8002952:	460b      	mov	r3, r1
 8002954:	72fb      	strb	r3, [r7, #11]
 8002956:	4613      	mov	r3, r2
 8002958:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3714      	adds	r7, #20
 8002960:	46bd      	mov	sp, r7
 8002962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002966:	4770      	bx	lr

08002968 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8002968:	b480      	push	{r7}
 800296a:	b083      	sub	sp, #12
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	4a11      	ldr	r2, [pc, #68]	; (80029c0 <u8x8_SetupDefaults+0x58>)
 800297a:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a10      	ldr	r2, [pc, #64]	; (80029c0 <u8x8_SetupDefaults+0x58>)
 8002980:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	4a0e      	ldr	r2, [pc, #56]	; (80029c0 <u8x8_SetupDefaults+0x58>)
 8002986:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <u8x8_SetupDefaults+0x58>)
 800298c:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2200      	movs	r2, #0
 800299a:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	2200      	movs	r2, #0
 80029a2:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	22ff      	movs	r2, #255	; 0xff
 80029a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	22ff      	movs	r2, #255	; 0xff
 80029b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	08002949 	.word	0x08002949

080029c4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b084      	sub	sp, #16
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	60f8      	str	r0, [r7, #12]
 80029cc:	60b9      	str	r1, [r7, #8]
 80029ce:	607a      	str	r2, [r7, #4]
 80029d0:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 80029d2:	68f8      	ldr	r0, [r7, #12]
 80029d4:	f7ff ffc8 	bl	8002968 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	68ba      	ldr	r2, [r7, #8]
 80029dc:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	687a      	ldr	r2, [r7, #4]
 80029e2:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	683a      	ldr	r2, [r7, #0]
 80029e8:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	69ba      	ldr	r2, [r7, #24]
 80029ee:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 80029f0:	68f8      	ldr	r0, [r7, #12]
 80029f2:	f7ff ff58 	bl	80028a6 <u8x8_SetupMemory>
}
 80029f6:	bf00      	nop
 80029f8:	3710      	adds	r7, #16
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bd80      	pop	{r7, pc}
	...

08002a00 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8002a00:	b580      	push	{r7, lr}
 8002a02:	af00      	add	r7, sp, #0
	/* USER CODE BEGIN 1 */

	rotationSteps(dreal, dimag);
 8002a04:	493b      	ldr	r1, [pc, #236]	; (8002af4 <main+0xf4>)
 8002a06:	483c      	ldr	r0, [pc, #240]	; (8002af8 <main+0xf8>)
 8002a08:	f000 fca6 	bl	8003358 <rotationSteps>
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8002a0c:	f001 f975 	bl	8003cfa <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8002a10:	f000 f89a 	bl	8002b48 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8002a14:	f000 fab0 	bl	8002f78 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8002a18:	f000 fa7e 	bl	8002f18 <MX_USART2_UART_Init>
	MX_CAN1_Init();
 8002a1c:	f000 f95c 	bl	8002cd8 <MX_CAN1_Init>
	MX_I2C1_Init();
 8002a20:	f000 f9ca 	bl	8002db8 <MX_I2C1_Init>
	MX_ADC1_Init();
 8002a24:	f000 f8f4 	bl	8002c10 <MX_ADC1_Init>
	MX_DAC1_Init();
 8002a28:	f000 f98a 	bl	8002d40 <MX_DAC1_Init>
	MX_TIM6_Init();
 8002a2c:	f000 fa08 	bl	8002e40 <MX_TIM6_Init>
	MX_TIM7_Init();
 8002a30:	f000 fa3c 	bl	8002eac <MX_TIM7_Init>
	/* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim7);
 8002a34:	4831      	ldr	r0, [pc, #196]	; (8002afc <main+0xfc>)
 8002a36:	f005 fa31 	bl	8007e9c <HAL_TIM_Base_Start>

	HAL_TIM_Base_Start_IT(&htim6);
 8002a3a:	4831      	ldr	r0, [pc, #196]	; (8002b00 <main+0x100>)
 8002a3c:	f005 fa7a 	bl	8007f34 <HAL_TIM_Base_Start_IT>

	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
 8002a40:	2100      	movs	r1, #0
 8002a42:	4830      	ldr	r0, [pc, #192]	; (8002b04 <main+0x104>)
 8002a44:	f002 fa6a 	bl	8004f1c <HAL_DAC_Start>
	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);
 8002a48:	2110      	movs	r1, #16
 8002a4a:	482e      	ldr	r0, [pc, #184]	; (8002b04 <main+0x104>)
 8002a4c:	f002 fa66 	bl	8004f1c <HAL_DAC_Start>

	setOutMuxBit(DRST_BIT, GPIO_PIN_RESET);
 8002a50:	2304      	movs	r3, #4
 8002a52:	b2db      	uxtb	r3, r3
 8002a54:	2100      	movs	r1, #0
 8002a56:	4618      	mov	r0, r3
 8002a58:	f000 fb34 	bl	80030c4 <setOutMuxBit>
	delayMicro(2);
 8002a5c:	2002      	movs	r0, #2
 8002a5e:	f000 fb17 	bl	8003090 <delayMicro>
	setOutMuxBit(DRST_BIT, GPIO_PIN_SET);
 8002a62:	2304      	movs	r3, #4
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2101      	movs	r1, #1
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 fb2b 	bl	80030c4 <setOutMuxBit>
	u8g2_Setup_ssd1305_i2c_128x32_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c,
 8002a6e:	4b26      	ldr	r3, [pc, #152]	; (8002b08 <main+0x108>)
 8002a70:	4a26      	ldr	r2, [pc, #152]	; (8002b0c <main+0x10c>)
 8002a72:	4927      	ldr	r1, [pc, #156]	; (8002b10 <main+0x110>)
 8002a74:	4827      	ldr	r0, [pc, #156]	; (8002b14 <main+0x114>)
 8002a76:	f7fe fb19 	bl	80010ac <u8g2_Setup_ssd1305_i2c_128x32_noname_f>
			u8x8_gpio_and_delay);
	u8g2_InitDisplay(&u8g2);
 8002a7a:	4826      	ldr	r0, [pc, #152]	; (8002b14 <main+0x114>)
 8002a7c:	f7ff ff22 	bl	80028c4 <u8x8_InitDisplay>
	u8g2_ClearDisplay(&u8g2);
 8002a80:	4824      	ldr	r0, [pc, #144]	; (8002b14 <main+0x114>)
 8002a82:	f7fe faee 	bl	8001062 <u8g2_ClearDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8002a86:	2100      	movs	r1, #0
 8002a88:	4822      	ldr	r0, [pc, #136]	; (8002b14 <main+0x114>)
 8002a8a:	f7ff ff2a 	bl	80028e2 <u8x8_SetPowerSave>
	setOutMuxBit(DEN_BIT, GPIO_PIN_SET);
 8002a8e:	2303      	movs	r3, #3
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2101      	movs	r1, #1
 8002a94:	4618      	mov	r0, r3
 8002a96:	f000 fb15 	bl	80030c4 <setOutMuxBit>

	serialPrintln("charIOT-Key-C");
 8002a9a:	481f      	ldr	r0, [pc, #124]	; (8002b18 <main+0x118>)
 8002a9c:	f000 fada 	bl	8003054 <serialPrintln>

	/* USER CODE END 2 */

	/* Init scheduler */
	osKernelInitialize();
 8002aa0:	f006 f9ce 	bl	8008e40 <osKernelInitialize>
	/* Create the mutex(es) */
	/* creation of keysMutex */
	keysMutexHandle = osMutexNew(&keysMutex_attributes);
 8002aa4:	481d      	ldr	r0, [pc, #116]	; (8002b1c <main+0x11c>)
 8002aa6:	f006 fac2 	bl	800902e <osMutexNew>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	4a1c      	ldr	r2, [pc, #112]	; (8002b20 <main+0x120>)
 8002aae:	6013      	str	r3, [r2, #0]

	/* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	osMutexRelease(keysMutexHandle);
 8002ab0:	4b1b      	ldr	r3, [pc, #108]	; (8002b20 <main+0x120>)
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	f006 fb8b 	bl	80091d0 <osMutexRelease>
	/* add queues, ... */
	/* USER CODE END RTOS_QUEUES */

	/* Create the thread(s) */
	/* creation of defaultTask */
	defaultTaskHandle = osThreadNew(StartDefaultTask, NULL,
 8002aba:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <main+0x124>)
 8002abc:	2100      	movs	r1, #0
 8002abe:	481a      	ldr	r0, [pc, #104]	; (8002b28 <main+0x128>)
 8002ac0:	f006 fa08 	bl	8008ed4 <osThreadNew>
 8002ac4:	4603      	mov	r3, r0
 8002ac6:	4a19      	ldr	r2, [pc, #100]	; (8002b2c <main+0x12c>)
 8002ac8:	6013      	str	r3, [r2, #0]
			&defaultTask_attributes);

	/* creation of scanKeys */
	scanKeysHandle = osThreadNew(scanKeysTask, NULL, &scanKeys_attributes);
 8002aca:	4a19      	ldr	r2, [pc, #100]	; (8002b30 <main+0x130>)
 8002acc:	2100      	movs	r1, #0
 8002ace:	4819      	ldr	r0, [pc, #100]	; (8002b34 <main+0x134>)
 8002ad0:	f006 fa00 	bl	8008ed4 <osThreadNew>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	4a18      	ldr	r2, [pc, #96]	; (8002b38 <main+0x138>)
 8002ad8:	6013      	str	r3, [r2, #0]

	/* creation of displayUpdate */
	displayUpdateHandle = osThreadNew(displayUpdateTask, NULL,
 8002ada:	4a18      	ldr	r2, [pc, #96]	; (8002b3c <main+0x13c>)
 8002adc:	2100      	movs	r1, #0
 8002ade:	4818      	ldr	r0, [pc, #96]	; (8002b40 <main+0x140>)
 8002ae0:	f006 f9f8 	bl	8008ed4 <osThreadNew>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4a17      	ldr	r2, [pc, #92]	; (8002b44 <main+0x144>)
 8002ae8:	6013      	str	r3, [r2, #0]
	/* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
	/* USER CODE END RTOS_EVENTS */

	/* Start scheduler */
	osKernelStart();
 8002aea:	f006 f9cd 	bl	8008e88 <osKernelStart>
 8002aee:	2300      	movs	r3, #0
	/* USER CODE BEGIN WHILE */
	/* USER CODE END WHILE */

	/* USER CODE BEGIN 3 */
	/* USER CODE END 3 */
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	bd80      	pop	{r7, pc}
 8002af4:	200005a8 	.word	0x200005a8
 8002af8:	20000578 	.word	0x20000578
 8002afc:	20000404 	.word	0x20000404
 8002b00:	200003b8 	.word	0x200003b8
 8002b04:	20000350 	.word	0x20000350
 8002b08:	0800314d 	.word	0x0800314d
 8002b0c:	0800316d 	.word	0x0800316d
 8002b10:	0800e80c 	.word	0x0800e80c
 8002b14:	200004e4 	.word	0x200004e4
 8002b18:	0800e344 	.word	0x0800e344
 8002b1c:	0800e8f8 	.word	0x0800e8f8
 8002b20:	200004e0 	.word	0x200004e0
 8002b24:	0800e88c 	.word	0x0800e88c
 8002b28:	08003465 	.word	0x08003465
 8002b2c:	200004d4 	.word	0x200004d4
 8002b30:	0800e8b0 	.word	0x0800e8b0
 8002b34:	08003475 	.word	0x08003475
 8002b38:	200004d8 	.word	0x200004d8
 8002b3c:	0800e8d4 	.word	0x0800e8d4
 8002b40:	080034c5 	.word	0x080034c5
 8002b44:	200004dc 	.word	0x200004dc

08002b48 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8002b48:	b580      	push	{r7, lr}
 8002b4a:	b096      	sub	sp, #88	; 0x58
 8002b4c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8002b4e:	f107 0314 	add.w	r3, r7, #20
 8002b52:	2244      	movs	r2, #68	; 0x44
 8002b54:	2100      	movs	r1, #0
 8002b56:	4618      	mov	r0, r3
 8002b58:	f009 fbd2 	bl	800c300 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8002b5c:	463b      	mov	r3, r7
 8002b5e:	2200      	movs	r2, #0
 8002b60:	601a      	str	r2, [r3, #0]
 8002b62:	605a      	str	r2, [r3, #4]
 8002b64:	609a      	str	r2, [r3, #8]
 8002b66:	60da      	str	r2, [r3, #12]
 8002b68:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1)
 8002b6a:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002b6e:	f003 ff85 	bl	8006a7c <HAL_PWREx_ControlVoltageScaling>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d001      	beq.n	8002b7c <SystemClock_Config+0x34>
			!= HAL_OK) {
		Error_Handler();
 8002b78:	f000 fdac 	bl	80036d4 <Error_Handler>
	}

	/** Configure LSE Drive Capability
	 */
	HAL_PWR_EnableBkUpAccess();
 8002b7c:	f003 ff60 	bl	8006a40 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8002b80:	4b22      	ldr	r3, [pc, #136]	; (8002c0c <SystemClock_Config+0xc4>)
 8002b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002b86:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <SystemClock_Config+0xc4>)
 8002b88:	f023 0318 	bic.w	r3, r3, #24
 8002b8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE
 8002b90:	2314      	movs	r3, #20
 8002b92:	617b      	str	r3, [r7, #20]
			| RCC_OSCILLATORTYPE_MSI;
	RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8002b94:	2301      	movs	r3, #1
 8002b96:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8002b98:	2301      	movs	r3, #1
 8002b9a:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.MSICalibrationValue = 0;
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8002ba0:	2360      	movs	r3, #96	; 0x60
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002ba4:	2302      	movs	r3, #2
 8002ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8002ba8:	2301      	movs	r3, #1
 8002baa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLM = 1;
 8002bac:	2301      	movs	r3, #1
 8002bae:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLN = 40;
 8002bb0:	2328      	movs	r3, #40	; 0x28
 8002bb2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002bb4:	2307      	movs	r3, #7
 8002bb6:	64fb      	str	r3, [r7, #76]	; 0x4c
	RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	653b      	str	r3, [r7, #80]	; 0x50
	RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002bbc:	2302      	movs	r3, #2
 8002bbe:	657b      	str	r3, [r7, #84]	; 0x54
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8002bc0:	f107 0314 	add.w	r3, r7, #20
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f003 ffaf 	bl	8006b28 <HAL_RCC_OscConfig>
 8002bca:	4603      	mov	r3, r0
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d001      	beq.n	8002bd4 <SystemClock_Config+0x8c>
		Error_Handler();
 8002bd0:	f000 fd80 	bl	80036d4 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8002bd4:	230f      	movs	r3, #15
 8002bd6:	603b      	str	r3, [r7, #0]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002bd8:	2303      	movs	r3, #3
 8002bda:	607b      	str	r3, [r7, #4]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002bdc:	2300      	movs	r3, #0
 8002bde:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8002be0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002be4:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002be6:	2300      	movs	r3, #0
 8002be8:	613b      	str	r3, [r7, #16]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK) {
 8002bea:	463b      	mov	r3, r7
 8002bec:	2104      	movs	r1, #4
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f004 fbae 	bl	8007350 <HAL_RCC_ClockConfig>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d001      	beq.n	8002bfe <SystemClock_Config+0xb6>
		Error_Handler();
 8002bfa:	f000 fd6b 	bl	80036d4 <Error_Handler>
	}

	/** Enable MSI Auto calibration
	 */
	HAL_RCCEx_EnableMSIPLLMode();
 8002bfe:	f004 fff3 	bl	8007be8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8002c02:	bf00      	nop
 8002c04:	3758      	adds	r7, #88	; 0x58
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}
 8002c0a:	bf00      	nop
 8002c0c:	40021000 	.word	0x40021000

08002c10 <MX_ADC1_Init>:
/**
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void) {
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b086      	sub	sp, #24
 8002c14:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = { 0 };
 8002c16:	463b      	mov	r3, r7
 8002c18:	2200      	movs	r2, #0
 8002c1a:	601a      	str	r2, [r3, #0]
 8002c1c:	605a      	str	r2, [r3, #4]
 8002c1e:	609a      	str	r2, [r3, #8]
 8002c20:	60da      	str	r2, [r3, #12]
 8002c22:	611a      	str	r2, [r3, #16]
 8002c24:	615a      	str	r2, [r3, #20]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002c26:	4b29      	ldr	r3, [pc, #164]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c28:	4a29      	ldr	r2, [pc, #164]	; (8002cd0 <MX_ADC1_Init+0xc0>)
 8002c2a:	601a      	str	r2, [r3, #0]
	hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 8002c2c:	4b27      	ldr	r3, [pc, #156]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	605a      	str	r2, [r3, #4]
	hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002c32:	4b26      	ldr	r3, [pc, #152]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	609a      	str	r2, [r3, #8]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002c38:	4b24      	ldr	r3, [pc, #144]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	60da      	str	r2, [r3, #12]
	hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8002c3e:	4b23      	ldr	r3, [pc, #140]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c40:	2200      	movs	r2, #0
 8002c42:	611a      	str	r2, [r3, #16]
	hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8002c44:	4b21      	ldr	r3, [pc, #132]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c46:	2204      	movs	r2, #4
 8002c48:	615a      	str	r2, [r3, #20]
	hadc1.Init.LowPowerAutoWait = DISABLE;
 8002c4a:	4b20      	ldr	r3, [pc, #128]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	761a      	strb	r2, [r3, #24]
	hadc1.Init.ContinuousConvMode = DISABLE;
 8002c50:	4b1e      	ldr	r3, [pc, #120]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c52:	2200      	movs	r2, #0
 8002c54:	765a      	strb	r2, [r3, #25]
	hadc1.Init.NbrOfConversion = 1;
 8002c56:	4b1d      	ldr	r3, [pc, #116]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c58:	2201      	movs	r2, #1
 8002c5a:	61da      	str	r2, [r3, #28]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002c5c:	4b1b      	ldr	r3, [pc, #108]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2020 	strb.w	r2, [r3, #32]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002c64:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c66:	2200      	movs	r2, #0
 8002c68:	629a      	str	r2, [r3, #40]	; 0x28
	hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8002c6a:	4b18      	ldr	r3, [pc, #96]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	62da      	str	r2, [r3, #44]	; 0x2c
	hadc1.Init.DMAContinuousRequests = DISABLE;
 8002c70:	4b16      	ldr	r3, [pc, #88]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c72:	2200      	movs	r2, #0
 8002c74:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
	hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8002c78:	4b14      	ldr	r3, [pc, #80]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	635a      	str	r2, [r3, #52]	; 0x34
	hadc1.Init.OversamplingMode = DISABLE;
 8002c7e:	4b13      	ldr	r3, [pc, #76]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	if (HAL_ADC_Init(&hadc1) != HAL_OK) {
 8002c86:	4811      	ldr	r0, [pc, #68]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002c88:	f001 fa20 	bl	80040cc <HAL_ADC_Init>
 8002c8c:	4603      	mov	r3, r0
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	d001      	beq.n	8002c96 <MX_ADC1_Init+0x86>
		Error_Handler();
 8002c92:	f000 fd1f 	bl	80036d4 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_5;
 8002c96:	4b0f      	ldr	r3, [pc, #60]	; (8002cd4 <MX_ADC1_Init+0xc4>)
 8002c98:	603b      	str	r3, [r7, #0]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 8002c9a:	2306      	movs	r3, #6
 8002c9c:	607b      	str	r3, [r7, #4]
	sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	60bb      	str	r3, [r7, #8]
	sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8002ca2:	237f      	movs	r3, #127	; 0x7f
 8002ca4:	60fb      	str	r3, [r7, #12]
	sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8002ca6:	2304      	movs	r3, #4
 8002ca8:	613b      	str	r3, [r7, #16]
	sConfig.Offset = 0;
 8002caa:	2300      	movs	r3, #0
 8002cac:	617b      	str	r3, [r7, #20]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK) {
 8002cae:	463b      	mov	r3, r7
 8002cb0:	4619      	mov	r1, r3
 8002cb2:	4806      	ldr	r0, [pc, #24]	; (8002ccc <MX_ADC1_Init+0xbc>)
 8002cb4:	f001 fb52 	bl	800435c <HAL_ADC_ConfigChannel>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d001      	beq.n	8002cc2 <MX_ADC1_Init+0xb2>
		Error_Handler();
 8002cbe:	f000 fd09 	bl	80036d4 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002cc2:	bf00      	nop
 8002cc4:	3718      	adds	r7, #24
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	bd80      	pop	{r7, pc}
 8002cca:	bf00      	nop
 8002ccc:	200002c4 	.word	0x200002c4
 8002cd0:	50040000 	.word	0x50040000
 8002cd4:	14f00020 	.word	0x14f00020

08002cd8 <MX_CAN1_Init>:
/**
 * @brief CAN1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_CAN1_Init(void) {
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	af00      	add	r7, sp, #0
	/* USER CODE END CAN1_Init 0 */

	/* USER CODE BEGIN CAN1_Init 1 */

	/* USER CODE END CAN1_Init 1 */
	hcan1.Instance = CAN1;
 8002cdc:	4b16      	ldr	r3, [pc, #88]	; (8002d38 <MX_CAN1_Init+0x60>)
 8002cde:	4a17      	ldr	r2, [pc, #92]	; (8002d3c <MX_CAN1_Init+0x64>)
 8002ce0:	601a      	str	r2, [r3, #0]
	hcan1.Init.Prescaler = 16;
 8002ce2:	4b15      	ldr	r3, [pc, #84]	; (8002d38 <MX_CAN1_Init+0x60>)
 8002ce4:	2210      	movs	r2, #16
 8002ce6:	605a      	str	r2, [r3, #4]
	hcan1.Init.Mode = CAN_MODE_NORMAL;
 8002ce8:	4b13      	ldr	r3, [pc, #76]	; (8002d38 <MX_CAN1_Init+0x60>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	609a      	str	r2, [r3, #8]
	hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8002cee:	4b12      	ldr	r3, [pc, #72]	; (8002d38 <MX_CAN1_Init+0x60>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	60da      	str	r2, [r3, #12]
	hcan1.Init.TimeSeg1 = CAN_BS1_1TQ;
 8002cf4:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <MX_CAN1_Init+0x60>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]
	hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <MX_CAN1_Init+0x60>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	615a      	str	r2, [r3, #20]
	hcan1.Init.TimeTriggeredMode = DISABLE;
 8002d00:	4b0d      	ldr	r3, [pc, #52]	; (8002d38 <MX_CAN1_Init+0x60>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	761a      	strb	r2, [r3, #24]
	hcan1.Init.AutoBusOff = DISABLE;
 8002d06:	4b0c      	ldr	r3, [pc, #48]	; (8002d38 <MX_CAN1_Init+0x60>)
 8002d08:	2200      	movs	r2, #0
 8002d0a:	765a      	strb	r2, [r3, #25]
	hcan1.Init.AutoWakeUp = DISABLE;
 8002d0c:	4b0a      	ldr	r3, [pc, #40]	; (8002d38 <MX_CAN1_Init+0x60>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	769a      	strb	r2, [r3, #26]
	hcan1.Init.AutoRetransmission = DISABLE;
 8002d12:	4b09      	ldr	r3, [pc, #36]	; (8002d38 <MX_CAN1_Init+0x60>)
 8002d14:	2200      	movs	r2, #0
 8002d16:	76da      	strb	r2, [r3, #27]
	hcan1.Init.ReceiveFifoLocked = DISABLE;
 8002d18:	4b07      	ldr	r3, [pc, #28]	; (8002d38 <MX_CAN1_Init+0x60>)
 8002d1a:	2200      	movs	r2, #0
 8002d1c:	771a      	strb	r2, [r3, #28]
	hcan1.Init.TransmitFifoPriority = DISABLE;
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <MX_CAN1_Init+0x60>)
 8002d20:	2200      	movs	r2, #0
 8002d22:	775a      	strb	r2, [r3, #29]
	if (HAL_CAN_Init(&hcan1) != HAL_OK) {
 8002d24:	4804      	ldr	r0, [pc, #16]	; (8002d38 <MX_CAN1_Init+0x60>)
 8002d26:	f001 fef9 	bl	8004b1c <HAL_CAN_Init>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d001      	beq.n	8002d34 <MX_CAN1_Init+0x5c>
		Error_Handler();
 8002d30:	f000 fcd0 	bl	80036d4 <Error_Handler>
	}
	/* USER CODE BEGIN CAN1_Init 2 */

	/* USER CODE END CAN1_Init 2 */

}
 8002d34:	bf00      	nop
 8002d36:	bd80      	pop	{r7, pc}
 8002d38:	20000328 	.word	0x20000328
 8002d3c:	40006400 	.word	0x40006400

08002d40 <MX_DAC1_Init>:
/**
 * @brief DAC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_DAC1_Init(void) {
 8002d40:	b580      	push	{r7, lr}
 8002d42:	b08a      	sub	sp, #40	; 0x28
 8002d44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN DAC1_Init 0 */

	/* USER CODE END DAC1_Init 0 */

	DAC_ChannelConfTypeDef sConfig = { 0 };
 8002d46:	1d3b      	adds	r3, r7, #4
 8002d48:	2224      	movs	r2, #36	; 0x24
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4618      	mov	r0, r3
 8002d4e:	f009 fad7 	bl	800c300 <memset>

	/* USER CODE END DAC1_Init 1 */

	/** DAC Initialization
	 */
	hdac1.Instance = DAC1;
 8002d52:	4b17      	ldr	r3, [pc, #92]	; (8002db0 <MX_DAC1_Init+0x70>)
 8002d54:	4a17      	ldr	r2, [pc, #92]	; (8002db4 <MX_DAC1_Init+0x74>)
 8002d56:	601a      	str	r2, [r3, #0]
	if (HAL_DAC_Init(&hdac1) != HAL_OK) {
 8002d58:	4815      	ldr	r0, [pc, #84]	; (8002db0 <MX_DAC1_Init+0x70>)
 8002d5a:	f002 f8bd 	bl	8004ed8 <HAL_DAC_Init>
 8002d5e:	4603      	mov	r3, r0
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d001      	beq.n	8002d68 <MX_DAC1_Init+0x28>
		Error_Handler();
 8002d64:	f000 fcb6 	bl	80036d4 <Error_Handler>
	}

	/** DAC channel OUT1 config
	 */
	sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	607b      	str	r3, [r7, #4]
	sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8002d6c:	2304      	movs	r3, #4
 8002d6e:	60bb      	str	r3, [r7, #8]
	sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8002d70:	2300      	movs	r3, #0
 8002d72:	60fb      	str	r3, [r7, #12]
	sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8002d74:	2301      	movs	r3, #1
 8002d76:	613b      	str	r3, [r7, #16]
	sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8002d78:	2300      	movs	r3, #0
 8002d7a:	617b      	str	r3, [r7, #20]
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK) {
 8002d7c:	1d3b      	adds	r3, r7, #4
 8002d7e:	2200      	movs	r2, #0
 8002d80:	4619      	mov	r1, r3
 8002d82:	480b      	ldr	r0, [pc, #44]	; (8002db0 <MX_DAC1_Init+0x70>)
 8002d84:	f002 f9a0 	bl	80050c8 <HAL_DAC_ConfigChannel>
 8002d88:	4603      	mov	r3, r0
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d001      	beq.n	8002d92 <MX_DAC1_Init+0x52>
		Error_Handler();
 8002d8e:	f000 fca1 	bl	80036d4 <Error_Handler>
	}

	/** DAC channel OUT2 config
	 */
	if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK) {
 8002d92:	1d3b      	adds	r3, r7, #4
 8002d94:	2210      	movs	r2, #16
 8002d96:	4619      	mov	r1, r3
 8002d98:	4805      	ldr	r0, [pc, #20]	; (8002db0 <MX_DAC1_Init+0x70>)
 8002d9a:	f002 f995 	bl	80050c8 <HAL_DAC_ConfigChannel>
 8002d9e:	4603      	mov	r3, r0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d001      	beq.n	8002da8 <MX_DAC1_Init+0x68>
		Error_Handler();
 8002da4:	f000 fc96 	bl	80036d4 <Error_Handler>
	}
	/* USER CODE BEGIN DAC1_Init 2 */

	/* USER CODE END DAC1_Init 2 */

}
 8002da8:	bf00      	nop
 8002daa:	3728      	adds	r7, #40	; 0x28
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}
 8002db0:	20000350 	.word	0x20000350
 8002db4:	40007400 	.word	0x40007400

08002db8 <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8002db8:	b580      	push	{r7, lr}
 8002dba:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8002dbc:	4b1d      	ldr	r3, [pc, #116]	; (8002e34 <MX_I2C1_Init+0x7c>)
 8002dbe:	4a1e      	ldr	r2, [pc, #120]	; (8002e38 <MX_I2C1_Init+0x80>)
 8002dc0:	601a      	str	r2, [r3, #0]
	hi2c1.Init.Timing = 0x00100618;
 8002dc2:	4b1c      	ldr	r3, [pc, #112]	; (8002e34 <MX_I2C1_Init+0x7c>)
 8002dc4:	4a1d      	ldr	r2, [pc, #116]	; (8002e3c <MX_I2C1_Init+0x84>)
 8002dc6:	605a      	str	r2, [r3, #4]
	hi2c1.Init.OwnAddress1 = 0;
 8002dc8:	4b1a      	ldr	r3, [pc, #104]	; (8002e34 <MX_I2C1_Init+0x7c>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	609a      	str	r2, [r3, #8]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002dce:	4b19      	ldr	r3, [pc, #100]	; (8002e34 <MX_I2C1_Init+0x7c>)
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	60da      	str	r2, [r3, #12]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002dd4:	4b17      	ldr	r3, [pc, #92]	; (8002e34 <MX_I2C1_Init+0x7c>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	611a      	str	r2, [r3, #16]
	hi2c1.Init.OwnAddress2 = 0;
 8002dda:	4b16      	ldr	r3, [pc, #88]	; (8002e34 <MX_I2C1_Init+0x7c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8002de0:	4b14      	ldr	r3, [pc, #80]	; (8002e34 <MX_I2C1_Init+0x7c>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002de6:	4b13      	ldr	r3, [pc, #76]	; (8002e34 <MX_I2C1_Init+0x7c>)
 8002de8:	2200      	movs	r2, #0
 8002dea:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002dec:	4b11      	ldr	r3, [pc, #68]	; (8002e34 <MX_I2C1_Init+0x7c>)
 8002dee:	2200      	movs	r2, #0
 8002df0:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8002df2:	4810      	ldr	r0, [pc, #64]	; (8002e34 <MX_I2C1_Init+0x7c>)
 8002df4:	f002 fc76 	bl	80056e4 <HAL_I2C_Init>
 8002df8:	4603      	mov	r3, r0
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d001      	beq.n	8002e02 <MX_I2C1_Init+0x4a>
		Error_Handler();
 8002dfe:	f000 fc69 	bl	80036d4 <Error_Handler>
	}

	/** Configure Analogue filter
	 */
	if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE)
 8002e02:	2100      	movs	r1, #0
 8002e04:	480b      	ldr	r0, [pc, #44]	; (8002e34 <MX_I2C1_Init+0x7c>)
 8002e06:	f003 fd63 	bl	80068d0 <HAL_I2CEx_ConfigAnalogFilter>
 8002e0a:	4603      	mov	r3, r0
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d001      	beq.n	8002e14 <MX_I2C1_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002e10:	f000 fc60 	bl	80036d4 <Error_Handler>
	}

	/** Configure Digital filter
	 */
	if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK) {
 8002e14:	2100      	movs	r1, #0
 8002e16:	4807      	ldr	r0, [pc, #28]	; (8002e34 <MX_I2C1_Init+0x7c>)
 8002e18:	f003 fda5 	bl	8006966 <HAL_I2CEx_ConfigDigitalFilter>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d001      	beq.n	8002e26 <MX_I2C1_Init+0x6e>
		Error_Handler();
 8002e22:	f000 fc57 	bl	80036d4 <Error_Handler>
	}

	/** I2C Fast mode Plus enable
	 */
	HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 8002e26:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002e2a:	f003 fde9 	bl	8006a00 <HAL_I2CEx_EnableFastModePlus>
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8002e2e:	bf00      	nop
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	20000364 	.word	0x20000364
 8002e38:	40005400 	.word	0x40005400
 8002e3c:	00100618 	.word	0x00100618

08002e40 <MX_TIM6_Init>:
/**
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void) {
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002e46:	1d3b      	adds	r3, r7, #4
 8002e48:	2200      	movs	r2, #0
 8002e4a:	601a      	str	r2, [r3, #0]
 8002e4c:	605a      	str	r2, [r3, #4]
 8002e4e:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8002e50:	4b14      	ldr	r3, [pc, #80]	; (8002ea4 <MX_TIM6_Init+0x64>)
 8002e52:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <MX_TIM6_Init+0x68>)
 8002e54:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 0;
 8002e56:	4b13      	ldr	r3, [pc, #76]	; (8002ea4 <MX_TIM6_Init+0x64>)
 8002e58:	2200      	movs	r2, #0
 8002e5a:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002e5c:	4b11      	ldr	r3, [pc, #68]	; (8002ea4 <MX_TIM6_Init+0x64>)
 8002e5e:	2200      	movs	r2, #0
 8002e60:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 3636 - 1;
 8002e62:	4b10      	ldr	r3, [pc, #64]	; (8002ea4 <MX_TIM6_Init+0x64>)
 8002e64:	f640 6233 	movw	r2, #3635	; 0xe33
 8002e68:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002e6a:	4b0e      	ldr	r3, [pc, #56]	; (8002ea4 <MX_TIM6_Init+0x64>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK) {
 8002e70:	480c      	ldr	r0, [pc, #48]	; (8002ea4 <MX_TIM6_Init+0x64>)
 8002e72:	f004 ffbb 	bl	8007dec <HAL_TIM_Base_Init>
 8002e76:	4603      	mov	r3, r0
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d001      	beq.n	8002e80 <MX_TIM6_Init+0x40>
		Error_Handler();
 8002e7c:	f000 fc2a 	bl	80036d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8002e80:	2320      	movs	r3, #32
 8002e82:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002e84:	2300      	movs	r3, #0
 8002e86:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig)
 8002e88:	1d3b      	adds	r3, r7, #4
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4805      	ldr	r0, [pc, #20]	; (8002ea4 <MX_TIM6_Init+0x64>)
 8002e8e:	f005 fa51 	bl	8008334 <HAL_TIMEx_MasterConfigSynchronization>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d001      	beq.n	8002e9c <MX_TIM6_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002e98:	f000 fc1c 	bl	80036d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 8002e9c:	bf00      	nop
 8002e9e:	3710      	adds	r7, #16
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	200003b8 	.word	0x200003b8
 8002ea8:	40001000 	.word	0x40001000

08002eac <MX_TIM7_Init>:
/**
 * @brief TIM7 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM7_Init(void) {
 8002eac:	b580      	push	{r7, lr}
 8002eae:	b084      	sub	sp, #16
 8002eb0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM7_Init 0 */

	/* USER CODE END TIM7_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = { 0 };
 8002eb2:	1d3b      	adds	r3, r7, #4
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]

	/* USER CODE BEGIN TIM7_Init 1 */

	/* USER CODE END TIM7_Init 1 */
	htim7.Instance = TIM7;
 8002ebc:	4b14      	ldr	r3, [pc, #80]	; (8002f10 <MX_TIM7_Init+0x64>)
 8002ebe:	4a15      	ldr	r2, [pc, #84]	; (8002f14 <MX_TIM7_Init+0x68>)
 8002ec0:	601a      	str	r2, [r3, #0]
	htim7.Init.Prescaler = 80 - 1;
 8002ec2:	4b13      	ldr	r3, [pc, #76]	; (8002f10 <MX_TIM7_Init+0x64>)
 8002ec4:	224f      	movs	r2, #79	; 0x4f
 8002ec6:	605a      	str	r2, [r3, #4]
	htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002ec8:	4b11      	ldr	r3, [pc, #68]	; (8002f10 <MX_TIM7_Init+0x64>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
	htim7.Init.Period = 1000 - 1;
 8002ece:	4b10      	ldr	r3, [pc, #64]	; (8002f10 <MX_TIM7_Init+0x64>)
 8002ed0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002ed4:	60da      	str	r2, [r3, #12]
	htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002ed6:	4b0e      	ldr	r3, [pc, #56]	; (8002f10 <MX_TIM7_Init+0x64>)
 8002ed8:	2200      	movs	r2, #0
 8002eda:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim7) != HAL_OK) {
 8002edc:	480c      	ldr	r0, [pc, #48]	; (8002f10 <MX_TIM7_Init+0x64>)
 8002ede:	f004 ff85 	bl	8007dec <HAL_TIM_Base_Init>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <MX_TIM7_Init+0x40>
		Error_Handler();
 8002ee8:	f000 fbf4 	bl	80036d4 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002eec:	2300      	movs	r3, #0
 8002eee:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig)
 8002ef4:	1d3b      	adds	r3, r7, #4
 8002ef6:	4619      	mov	r1, r3
 8002ef8:	4805      	ldr	r0, [pc, #20]	; (8002f10 <MX_TIM7_Init+0x64>)
 8002efa:	f005 fa1b 	bl	8008334 <HAL_TIMEx_MasterConfigSynchronization>
 8002efe:	4603      	mov	r3, r0
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d001      	beq.n	8002f08 <MX_TIM7_Init+0x5c>
			!= HAL_OK) {
		Error_Handler();
 8002f04:	f000 fbe6 	bl	80036d4 <Error_Handler>
	}
	/* USER CODE BEGIN TIM7_Init 2 */

	/* USER CODE END TIM7_Init 2 */

}
 8002f08:	bf00      	nop
 8002f0a:	3710      	adds	r7, #16
 8002f0c:	46bd      	mov	sp, r7
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	20000404 	.word	0x20000404
 8002f14:	40001400 	.word	0x40001400

08002f18 <MX_USART2_UART_Init>:
/**
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void) {
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002f1c:	4b14      	ldr	r3, [pc, #80]	; (8002f70 <MX_USART2_UART_Init+0x58>)
 8002f1e:	4a15      	ldr	r2, [pc, #84]	; (8002f74 <MX_USART2_UART_Init+0x5c>)
 8002f20:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8002f22:	4b13      	ldr	r3, [pc, #76]	; (8002f70 <MX_USART2_UART_Init+0x58>)
 8002f24:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002f28:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002f2a:	4b11      	ldr	r3, [pc, #68]	; (8002f70 <MX_USART2_UART_Init+0x58>)
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002f30:	4b0f      	ldr	r3, [pc, #60]	; (8002f70 <MX_USART2_UART_Init+0x58>)
 8002f32:	2200      	movs	r2, #0
 8002f34:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8002f36:	4b0e      	ldr	r3, [pc, #56]	; (8002f70 <MX_USART2_UART_Init+0x58>)
 8002f38:	2200      	movs	r2, #0
 8002f3a:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8002f3c:	4b0c      	ldr	r3, [pc, #48]	; (8002f70 <MX_USART2_UART_Init+0x58>)
 8002f3e:	220c      	movs	r2, #12
 8002f40:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002f42:	4b0b      	ldr	r3, [pc, #44]	; (8002f70 <MX_USART2_UART_Init+0x58>)
 8002f44:	2200      	movs	r2, #0
 8002f46:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002f48:	4b09      	ldr	r3, [pc, #36]	; (8002f70 <MX_USART2_UART_Init+0x58>)
 8002f4a:	2200      	movs	r2, #0
 8002f4c:	61da      	str	r2, [r3, #28]
	huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002f4e:	4b08      	ldr	r3, [pc, #32]	; (8002f70 <MX_USART2_UART_Init+0x58>)
 8002f50:	2200      	movs	r2, #0
 8002f52:	621a      	str	r2, [r3, #32]
	huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002f54:	4b06      	ldr	r3, [pc, #24]	; (8002f70 <MX_USART2_UART_Init+0x58>)
 8002f56:	2200      	movs	r2, #0
 8002f58:	625a      	str	r2, [r3, #36]	; 0x24
	if (HAL_UART_Init(&huart2) != HAL_OK) {
 8002f5a:	4805      	ldr	r0, [pc, #20]	; (8002f70 <MX_USART2_UART_Init+0x58>)
 8002f5c:	f005 fa6e 	bl	800843c <HAL_UART_Init>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <MX_USART2_UART_Init+0x52>
		Error_Handler();
 8002f66:	f000 fbb5 	bl	80036d4 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8002f6a:	bf00      	nop
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	20000450 	.word	0x20000450
 8002f74:	40004400 	.word	0x40004400

08002f78 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b088      	sub	sp, #32
 8002f7c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8002f7e:	f107 030c 	add.w	r3, r7, #12
 8002f82:	2200      	movs	r2, #0
 8002f84:	601a      	str	r2, [r3, #0]
 8002f86:	605a      	str	r2, [r3, #4]
 8002f88:	609a      	str	r2, [r3, #8]
 8002f8a:	60da      	str	r2, [r3, #12]
 8002f8c:	611a      	str	r2, [r3, #16]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8002f8e:	4b2f      	ldr	r3, [pc, #188]	; (800304c <MX_GPIO_Init+0xd4>)
 8002f90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f92:	4a2e      	ldr	r2, [pc, #184]	; (800304c <MX_GPIO_Init+0xd4>)
 8002f94:	f043 0304 	orr.w	r3, r3, #4
 8002f98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002f9a:	4b2c      	ldr	r3, [pc, #176]	; (800304c <MX_GPIO_Init+0xd4>)
 8002f9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002f9e:	f003 0304 	and.w	r3, r3, #4
 8002fa2:	60bb      	str	r3, [r7, #8]
 8002fa4:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002fa6:	4b29      	ldr	r3, [pc, #164]	; (800304c <MX_GPIO_Init+0xd4>)
 8002fa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002faa:	4a28      	ldr	r2, [pc, #160]	; (800304c <MX_GPIO_Init+0xd4>)
 8002fac:	f043 0301 	orr.w	r3, r3, #1
 8002fb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fb2:	4b26      	ldr	r3, [pc, #152]	; (800304c <MX_GPIO_Init+0xd4>)
 8002fb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	607b      	str	r3, [r7, #4]
 8002fbc:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002fbe:	4b23      	ldr	r3, [pc, #140]	; (800304c <MX_GPIO_Init+0xd4>)
 8002fc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fc2:	4a22      	ldr	r2, [pc, #136]	; (800304c <MX_GPIO_Init+0xd4>)
 8002fc4:	f043 0302 	orr.w	r3, r3, #2
 8002fc8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002fca:	4b20      	ldr	r3, [pc, #128]	; (800304c <MX_GPIO_Init+0xd4>)
 8002fcc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	603b      	str	r3, [r7, #0]
 8002fd4:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	2140      	movs	r1, #64	; 0x40
 8002fda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002fde:	f002 fb69 	bl	80056b4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB,
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	213b      	movs	r1, #59	; 0x3b
 8002fe6:	481a      	ldr	r0, [pc, #104]	; (8003050 <MX_GPIO_Init+0xd8>)
 8002fe8:	f002 fb64 	bl	80056b4 <HAL_GPIO_WritePin>
			RA0_Pin | RA1_Pin | LED_BUILTIN_Pin | RA2_Pin | OUT_Pin,
			GPIO_PIN_RESET);

	/*Configure GPIO pins : C0_Pin C2_Pin C1_Pin C3_Pin */
	GPIO_InitStruct.Pin = C0_Pin | C2_Pin | C1_Pin | C3_Pin;
 8002fec:	f44f 7362 	mov.w	r3, #904	; 0x388
 8002ff0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ffa:	f107 030c 	add.w	r3, r7, #12
 8002ffe:	4619      	mov	r1, r3
 8003000:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003004:	f002 f9d4 	bl	80053b0 <HAL_GPIO_Init>

	/*Configure GPIO pin : REN_Pin */
	GPIO_InitStruct.Pin = REN_Pin;
 8003008:	2340      	movs	r3, #64	; 0x40
 800300a:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800300c:	2301      	movs	r3, #1
 800300e:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003010:	2300      	movs	r3, #0
 8003012:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003014:	2300      	movs	r3, #0
 8003016:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(REN_GPIO_Port, &GPIO_InitStruct);
 8003018:	f107 030c 	add.w	r3, r7, #12
 800301c:	4619      	mov	r1, r3
 800301e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003022:	f002 f9c5 	bl	80053b0 <HAL_GPIO_Init>

	/*Configure GPIO pins : RA0_Pin RA1_Pin LED_BUILTIN_Pin RA2_Pin
	 OUT_Pin */
	GPIO_InitStruct.Pin = RA0_Pin | RA1_Pin | LED_BUILTIN_Pin | RA2_Pin
 8003026:	233b      	movs	r3, #59	; 0x3b
 8003028:	60fb      	str	r3, [r7, #12]
			| OUT_Pin;
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800302a:	2301      	movs	r3, #1
 800302c:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800302e:	2300      	movs	r3, #0
 8003030:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003032:	2300      	movs	r3, #0
 8003034:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003036:	f107 030c 	add.w	r3, r7, #12
 800303a:	4619      	mov	r1, r3
 800303c:	4804      	ldr	r0, [pc, #16]	; (8003050 <MX_GPIO_Init+0xd8>)
 800303e:	f002 f9b7 	bl	80053b0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8003042:	bf00      	nop
 8003044:	3720      	adds	r7, #32
 8003046:	46bd      	mov	sp, r7
 8003048:	bd80      	pop	{r7, pc}
 800304a:	bf00      	nop
 800304c:	40021000 	.word	0x40021000
 8003050:	48000400 	.word	0x48000400

08003054 <serialPrintln>:

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);

}

void serialPrintln(char val[]) {
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f7fd f8b7 	bl	80001d0 <strlen>
 8003062:	4603      	mov	r3, r0
 8003064:	b29a      	uxth	r2, r3
 8003066:	230a      	movs	r3, #10
 8003068:	6879      	ldr	r1, [r7, #4]
 800306a:	4808      	ldr	r0, [pc, #32]	; (800308c <serialPrintln+0x38>)
 800306c:	f005 fa34 	bl	80084d8 <HAL_UART_Transmit>
	char newline[2] = "\r\n";
 8003070:	f640 230d 	movw	r3, #2573	; 0xa0d
 8003074:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) newline, 2, 10);
 8003076:	f107 010c 	add.w	r1, r7, #12
 800307a:	230a      	movs	r3, #10
 800307c:	2202      	movs	r2, #2
 800307e:	4803      	ldr	r0, [pc, #12]	; (800308c <serialPrintln+0x38>)
 8003080:	f005 fa2a 	bl	80084d8 <HAL_UART_Transmit>

}
 8003084:	bf00      	nop
 8003086:	3710      	adds	r7, #16
 8003088:	46bd      	mov	sp, r7
 800308a:	bd80      	pop	{r7, pc}
 800308c:	20000450 	.word	0x20000450

08003090 <delayMicro>:

void delayMicro(uint16_t us) {
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	4603      	mov	r3, r0
 8003098:	80fb      	strh	r3, [r7, #6]

	htim7.Instance->CNT = 0;
 800309a:	4b09      	ldr	r3, [pc, #36]	; (80030c0 <delayMicro+0x30>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2200      	movs	r2, #0
 80030a0:	625a      	str	r2, [r3, #36]	; 0x24
	while (htim7.Instance->CNT < us)
 80030a2:	bf00      	nop
 80030a4:	4b06      	ldr	r3, [pc, #24]	; (80030c0 <delayMicro+0x30>)
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80030aa:	88fb      	ldrh	r3, [r7, #6]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d3f9      	bcc.n	80030a4 <delayMicro+0x14>
		;

}
 80030b0:	bf00      	nop
 80030b2:	bf00      	nop
 80030b4:	370c      	adds	r7, #12
 80030b6:	46bd      	mov	sp, r7
 80030b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030bc:	4770      	bx	lr
 80030be:	bf00      	nop
 80030c0:	20000404 	.word	0x20000404

080030c4 <setOutMuxBit>:

void setOutMuxBit(const uint8_t bitIdx, const bool value) {
 80030c4:	b580      	push	{r7, lr}
 80030c6:	b082      	sub	sp, #8
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	4603      	mov	r3, r0
 80030cc:	460a      	mov	r2, r1
 80030ce:	71fb      	strb	r3, [r7, #7]
 80030d0:	4613      	mov	r3, r2
 80030d2:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 80030d4:	2200      	movs	r2, #0
 80030d6:	2140      	movs	r1, #64	; 0x40
 80030d8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80030dc:	f002 faea 	bl	80056b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, bitIdx & 0x01);
 80030e0:	79fb      	ldrb	r3, [r7, #7]
 80030e2:	f003 0301 	and.w	r3, r3, #1
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
 80030ea:	2101      	movs	r1, #1
 80030ec:	4816      	ldr	r0, [pc, #88]	; (8003148 <setOutMuxBit+0x84>)
 80030ee:	f002 fae1 	bl	80056b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, bitIdx & 0x02);
 80030f2:	79fb      	ldrb	r3, [r7, #7]
 80030f4:	f003 0302 	and.w	r3, r3, #2
 80030f8:	b2db      	uxtb	r3, r3
 80030fa:	461a      	mov	r2, r3
 80030fc:	2102      	movs	r1, #2
 80030fe:	4812      	ldr	r0, [pc, #72]	; (8003148 <setOutMuxBit+0x84>)
 8003100:	f002 fad8 	bl	80056b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, bitIdx & 0x04);
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	f003 0304 	and.w	r3, r3, #4
 800310a:	b2db      	uxtb	r3, r3
 800310c:	461a      	mov	r2, r3
 800310e:	2110      	movs	r1, #16
 8003110:	480d      	ldr	r0, [pc, #52]	; (8003148 <setOutMuxBit+0x84>)
 8003112:	f002 facf 	bl	80056b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, value);
 8003116:	79bb      	ldrb	r3, [r7, #6]
 8003118:	461a      	mov	r2, r3
 800311a:	2120      	movs	r1, #32
 800311c:	480a      	ldr	r0, [pc, #40]	; (8003148 <setOutMuxBit+0x84>)
 800311e:	f002 fac9 	bl	80056b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 8003122:	2201      	movs	r2, #1
 8003124:	2140      	movs	r1, #64	; 0x40
 8003126:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800312a:	f002 fac3 	bl	80056b4 <HAL_GPIO_WritePin>
	delayMicro(2);
 800312e:	2002      	movs	r0, #2
 8003130:	f7ff ffae 	bl	8003090 <delayMicro>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003134:	2200      	movs	r2, #0
 8003136:	2140      	movs	r1, #64	; 0x40
 8003138:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800313c:	f002 faba 	bl	80056b4 <HAL_GPIO_WritePin>

}
 8003140:	bf00      	nop
 8003142:	3708      	adds	r7, #8
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}
 8003148:	48000400 	.word	0x48000400

0800314c <u8x8_gpio_and_delay>:

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 800314c:	b480      	push	{r7}
 800314e:	b085      	sub	sp, #20
 8003150:	af00      	add	r7, sp, #0
 8003152:	60f8      	str	r0, [r7, #12]
 8003154:	607b      	str	r3, [r7, #4]
 8003156:	460b      	mov	r3, r1
 8003158:	72fb      	strb	r3, [r7, #11]
 800315a:	4613      	mov	r3, r2
 800315c:	72bb      	strb	r3, [r7, #10]

	return 1;
 800315e:	2301      	movs	r3, #1

}
 8003160:	4618      	mov	r0, r3
 8003162:	3714      	adds	r7, #20
 8003164:	46bd      	mov	sp, r7
 8003166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800316a:	4770      	bx	lr

0800316c <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 800316c:	b580      	push	{r7, lr}
 800316e:	b088      	sub	sp, #32
 8003170:	af02      	add	r7, sp, #8
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	607b      	str	r3, [r7, #4]
 8003176:	460b      	mov	r3, r1
 8003178:	72fb      	strb	r3, [r7, #11]
 800317a:	4613      	mov	r3, r2
 800317c:	72bb      	strb	r3, [r7, #10]

	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch (msg) {
 800317e:	7afb      	ldrb	r3, [r7, #11]
 8003180:	3b14      	subs	r3, #20
 8003182:	2b0c      	cmp	r3, #12
 8003184:	d847      	bhi.n	8003216 <u8x8_byte_i2c+0xaa>
 8003186:	a201      	add	r2, pc, #4	; (adr r2, 800318c <u8x8_byte_i2c+0x20>)
 8003188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800318c:	0800321b 	.word	0x0800321b
 8003190:	08003217 	.word	0x08003217
 8003194:	08003217 	.word	0x08003217
 8003198:	080031c1 	.word	0x080031c1
 800319c:	080031f1 	.word	0x080031f1
 80031a0:	080031f9 	.word	0x080031f9
 80031a4:	08003217 	.word	0x08003217
 80031a8:	08003217 	.word	0x08003217
 80031ac:	08003217 	.word	0x08003217
 80031b0:	08003217 	.word	0x08003217
 80031b4:	08003217 	.word	0x08003217
 80031b8:	08003217 	.word	0x08003217
 80031bc:	0800321b 	.word	0x0800321b
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t*) arg_ptr;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	617b      	str	r3, [r7, #20]
		while (arg_int > 0) {
 80031c4:	e010      	b.n	80031e8 <u8x8_byte_i2c+0x7c>
			buffer[buf_idx++] = *data;
 80031c6:	4b18      	ldr	r3, [pc, #96]	; (8003228 <u8x8_byte_i2c+0xbc>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	b2d1      	uxtb	r1, r2
 80031ce:	4a16      	ldr	r2, [pc, #88]	; (8003228 <u8x8_byte_i2c+0xbc>)
 80031d0:	7011      	strb	r1, [r2, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	7819      	ldrb	r1, [r3, #0]
 80031d8:	4b14      	ldr	r3, [pc, #80]	; (800322c <u8x8_byte_i2c+0xc0>)
 80031da:	5499      	strb	r1, [r3, r2]
			data++;
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	3301      	adds	r3, #1
 80031e0:	617b      	str	r3, [r7, #20]
			arg_int--;
 80031e2:	7abb      	ldrb	r3, [r7, #10]
 80031e4:	3b01      	subs	r3, #1
 80031e6:	72bb      	strb	r3, [r7, #10]
		while (arg_int > 0) {
 80031e8:	7abb      	ldrb	r3, [r7, #10]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d1eb      	bne.n	80031c6 <u8x8_byte_i2c+0x5a>
		}
		break;
 80031ee:	e015      	b.n	800321c <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 80031f0:	4b0d      	ldr	r3, [pc, #52]	; (8003228 <u8x8_byte_i2c+0xbc>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	701a      	strb	r2, [r3, #0]
		break;
 80031f6:	e011      	b.n	800321c <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8),
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031fe:	b299      	uxth	r1, r3
 8003200:	4b09      	ldr	r3, [pc, #36]	; (8003228 <u8x8_byte_i2c+0xbc>)
 8003202:	781b      	ldrb	r3, [r3, #0]
 8003204:	b29b      	uxth	r3, r3
 8003206:	f04f 32ff 	mov.w	r2, #4294967295
 800320a:	9200      	str	r2, [sp, #0]
 800320c:	4a07      	ldr	r2, [pc, #28]	; (800322c <u8x8_byte_i2c+0xc0>)
 800320e:	4808      	ldr	r0, [pc, #32]	; (8003230 <u8x8_byte_i2c+0xc4>)
 8003210:	f002 faf8 	bl	8005804 <HAL_I2C_Master_Transmit>
				(uint8_t*) buffer, buf_idx, HAL_MAX_DELAY);
		break;
 8003214:	e002      	b.n	800321c <u8x8_byte_i2c+0xb0>
	default:
		return 0;
 8003216:	2300      	movs	r3, #0
 8003218:	e001      	b.n	800321e <u8x8_byte_i2c+0xb2>
		break;
 800321a:	bf00      	nop
	}

	return 1;
 800321c:	2301      	movs	r3, #1

}
 800321e:	4618      	mov	r0, r3
 8003220:	3718      	adds	r7, #24
 8003222:	46bd      	mov	sp, r7
 8003224:	bd80      	pop	{r7, pc}
 8003226:	bf00      	nop
 8003228:	200005d8 	.word	0x200005d8
 800322c:	200005dc 	.word	0x200005dc
 8003230:	20000364 	.word	0x20000364

08003234 <setRow>:

void setRow(uint8_t rowIdx) {
 8003234:	b580      	push	{r7, lr}
 8003236:	b082      	sub	sp, #8
 8003238:	af00      	add	r7, sp, #0
 800323a:	4603      	mov	r3, r0
 800323c:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 800323e:	2200      	movs	r2, #0
 8003240:	2140      	movs	r1, #64	; 0x40
 8003242:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003246:	f002 fa35 	bl	80056b4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, rowIdx & 0x01);
 800324a:	79fb      	ldrb	r3, [r7, #7]
 800324c:	f003 0301 	and.w	r3, r3, #1
 8003250:	b2db      	uxtb	r3, r3
 8003252:	461a      	mov	r2, r3
 8003254:	2101      	movs	r1, #1
 8003256:	480f      	ldr	r0, [pc, #60]	; (8003294 <setRow+0x60>)
 8003258:	f002 fa2c 	bl	80056b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, rowIdx & 0x02);
 800325c:	79fb      	ldrb	r3, [r7, #7]
 800325e:	f003 0302 	and.w	r3, r3, #2
 8003262:	b2db      	uxtb	r3, r3
 8003264:	461a      	mov	r2, r3
 8003266:	2102      	movs	r1, #2
 8003268:	480a      	ldr	r0, [pc, #40]	; (8003294 <setRow+0x60>)
 800326a:	f002 fa23 	bl	80056b4 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, rowIdx & 0x04);
 800326e:	79fb      	ldrb	r3, [r7, #7]
 8003270:	f003 0304 	and.w	r3, r3, #4
 8003274:	b2db      	uxtb	r3, r3
 8003276:	461a      	mov	r2, r3
 8003278:	2110      	movs	r1, #16
 800327a:	4806      	ldr	r0, [pc, #24]	; (8003294 <setRow+0x60>)
 800327c:	f002 fa1a 	bl	80056b4 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 8003280:	2201      	movs	r2, #1
 8003282:	2140      	movs	r1, #64	; 0x40
 8003284:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003288:	f002 fa14 	bl	80056b4 <HAL_GPIO_WritePin>

}
 800328c:	bf00      	nop
 800328e:	3708      	adds	r7, #8
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}
 8003294:	48000400 	.word	0x48000400

08003298 <readCols>:

uint8_t readCols() {
 8003298:	b580      	push	{r7, lr}
 800329a:	b082      	sub	sp, #8
 800329c:	af00      	add	r7, sp, #0

	uint8_t C0_val = HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin);
 800329e:	2108      	movs	r1, #8
 80032a0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032a4:	f002 f9ee 	bl	8005684 <HAL_GPIO_ReadPin>
 80032a8:	4603      	mov	r3, r0
 80032aa:	71fb      	strb	r3, [r7, #7]
	uint8_t C1_val = HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin);
 80032ac:	f44f 7180 	mov.w	r1, #256	; 0x100
 80032b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032b4:	f002 f9e6 	bl	8005684 <HAL_GPIO_ReadPin>
 80032b8:	4603      	mov	r3, r0
 80032ba:	71bb      	strb	r3, [r7, #6]
	uint8_t C2_val = HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin);
 80032bc:	2180      	movs	r1, #128	; 0x80
 80032be:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032c2:	f002 f9df 	bl	8005684 <HAL_GPIO_ReadPin>
 80032c6:	4603      	mov	r3, r0
 80032c8:	717b      	strb	r3, [r7, #5]
	uint8_t C3_val = HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin);
 80032ca:	f44f 7100 	mov.w	r1, #512	; 0x200
 80032ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80032d2:	f002 f9d7 	bl	8005684 <HAL_GPIO_ReadPin>
 80032d6:	4603      	mov	r3, r0
 80032d8:	713b      	strb	r3, [r7, #4]

	return (C3_val << 3) | (C2_val << 2) | (C1_val << 1) | C0_val;
 80032da:	793b      	ldrb	r3, [r7, #4]
 80032dc:	00db      	lsls	r3, r3, #3
 80032de:	b25a      	sxtb	r2, r3
 80032e0:	797b      	ldrb	r3, [r7, #5]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	b25b      	sxtb	r3, r3
 80032e6:	4313      	orrs	r3, r2
 80032e8:	b25a      	sxtb	r2, r3
 80032ea:	79bb      	ldrb	r3, [r7, #6]
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	b25b      	sxtb	r3, r3
 80032f0:	4313      	orrs	r3, r2
 80032f2:	b25a      	sxtb	r2, r3
 80032f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032f8:	4313      	orrs	r3, r2
 80032fa:	b25b      	sxtb	r3, r3
 80032fc:	b2db      	uxtb	r3, r3

}
 80032fe:	4618      	mov	r0, r3
 8003300:	3708      	adds	r7, #8
 8003302:	46bd      	mov	sp, r7
 8003304:	bd80      	pop	{r7, pc}

08003306 <readKeys>:

uint16_t readKeys() {
 8003306:	b580      	push	{r7, lr}
 8003308:	b082      	sub	sp, #8
 800330a:	af00      	add	r7, sp, #0

	uint16_t keysRead = 0;
 800330c:	2300      	movs	r3, #0
 800330e:	80fb      	strh	r3, [r7, #6]

	for (int i = 0; i <= 2; i++) {
 8003310:	2300      	movs	r3, #0
 8003312:	603b      	str	r3, [r7, #0]
 8003314:	e018      	b.n	8003348 <readKeys+0x42>

		setRow(i);
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	b2db      	uxtb	r3, r3
 800331a:	4618      	mov	r0, r3
 800331c:	f7ff ff8a 	bl	8003234 <setRow>
		delayMicro(5);
 8003320:	2005      	movs	r0, #5
 8003322:	f7ff feb5 	bl	8003090 <delayMicro>
		keysRead |= readCols() << (4 * i);
 8003326:	f7ff ffb7 	bl	8003298 <readCols>
 800332a:	4603      	mov	r3, r0
 800332c:	461a      	mov	r2, r3
 800332e:	683b      	ldr	r3, [r7, #0]
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	b21a      	sxth	r2, r3
 8003338:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800333c:	4313      	orrs	r3, r2
 800333e:	b21b      	sxth	r3, r3
 8003340:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i <= 2; i++) {
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	3301      	adds	r3, #1
 8003346:	603b      	str	r3, [r7, #0]
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	2b02      	cmp	r3, #2
 800334c:	dde3      	ble.n	8003316 <readKeys+0x10>

	}

	return keysRead;
 800334e:	88fb      	ldrh	r3, [r7, #6]

}
 8003350:	4618      	mov	r0, r3
 8003352:	3708      	adds	r7, #8
 8003354:	46bd      	mov	sp, r7
 8003356:	bd80      	pop	{r7, pc}

08003358 <rotationSteps>:

void rotationSteps(float *dreal, float *dimag) {
 8003358:	b5b0      	push	{r4, r5, r7, lr}
 800335a:	b084      	sub	sp, #16
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
 8003360:	6039      	str	r1, [r7, #0]

	float phi;

	for (int i = 0; i < 12; i++) {
 8003362:	2300      	movs	r3, #0
 8003364:	60fb      	str	r3, [r7, #12]
 8003366:	e067      	b.n	8003438 <rotationSteps+0xe0>

		phi = 2 * M_PI * fA * pow(2, (i - 9) / 12.0) / fs;
 8003368:	4b3b      	ldr	r3, [pc, #236]	; (8003458 <rotationSteps+0x100>)
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd f89c 	bl	80004a8 <__aeabi_f2d>
 8003370:	a335      	add	r3, pc, #212	; (adr r3, 8003448 <rotationSteps+0xf0>)
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	f7fd f8ef 	bl	8000558 <__aeabi_dmul>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4614      	mov	r4, r2
 8003380:	461d      	mov	r5, r3
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	3b09      	subs	r3, #9
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f87c 	bl	8000484 <__aeabi_i2d>
 800338c:	f04f 0200 	mov.w	r2, #0
 8003390:	4b32      	ldr	r3, [pc, #200]	; (800345c <rotationSteps+0x104>)
 8003392:	f7fd fa0b 	bl	80007ac <__aeabi_ddiv>
 8003396:	4602      	mov	r2, r0
 8003398:	460b      	mov	r3, r1
 800339a:	ec43 2b17 	vmov	d7, r2, r3
 800339e:	eeb0 1a47 	vmov.f32	s2, s14
 80033a2:	eef0 1a67 	vmov.f32	s3, s15
 80033a6:	ed9f 0b2a 	vldr	d0, [pc, #168]	; 8003450 <rotationSteps+0xf8>
 80033aa:	f009 f921 	bl	800c5f0 <pow>
 80033ae:	ec53 2b10 	vmov	r2, r3, d0
 80033b2:	4620      	mov	r0, r4
 80033b4:	4629      	mov	r1, r5
 80033b6:	f7fd f8cf 	bl	8000558 <__aeabi_dmul>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4614      	mov	r4, r2
 80033c0:	461d      	mov	r5, r3
 80033c2:	4b27      	ldr	r3, [pc, #156]	; (8003460 <rotationSteps+0x108>)
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7fd f86f 	bl	80004a8 <__aeabi_f2d>
 80033ca:	4602      	mov	r2, r0
 80033cc:	460b      	mov	r3, r1
 80033ce:	4620      	mov	r0, r4
 80033d0:	4629      	mov	r1, r5
 80033d2:	f7fd f9eb 	bl	80007ac <__aeabi_ddiv>
 80033d6:	4602      	mov	r2, r0
 80033d8:	460b      	mov	r3, r1
 80033da:	4610      	mov	r0, r2
 80033dc:	4619      	mov	r1, r3
 80033de:	f7fd fb93 	bl	8000b08 <__aeabi_d2f>
 80033e2:	4603      	mov	r3, r0
 80033e4:	60bb      	str	r3, [r7, #8]
		dreal[i] = cos(phi);
 80033e6:	68b8      	ldr	r0, [r7, #8]
 80033e8:	f7fd f85e 	bl	80004a8 <__aeabi_f2d>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	ec43 2b10 	vmov	d0, r2, r3
 80033f4:	f009 f850 	bl	800c498 <cos>
 80033f8:	ec51 0b10 	vmov	r0, r1, d0
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	009b      	lsls	r3, r3, #2
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	18d4      	adds	r4, r2, r3
 8003404:	f7fd fb80 	bl	8000b08 <__aeabi_d2f>
 8003408:	4603      	mov	r3, r0
 800340a:	6023      	str	r3, [r4, #0]
		dimag[i] = sin(phi);
 800340c:	68b8      	ldr	r0, [r7, #8]
 800340e:	f7fd f84b 	bl	80004a8 <__aeabi_f2d>
 8003412:	4602      	mov	r2, r0
 8003414:	460b      	mov	r3, r1
 8003416:	ec43 2b10 	vmov	d0, r2, r3
 800341a:	f009 f891 	bl	800c540 <sin>
 800341e:	ec51 0b10 	vmov	r0, r1, d0
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	009b      	lsls	r3, r3, #2
 8003426:	683a      	ldr	r2, [r7, #0]
 8003428:	18d4      	adds	r4, r2, r3
 800342a:	f7fd fb6d 	bl	8000b08 <__aeabi_d2f>
 800342e:	4603      	mov	r3, r0
 8003430:	6023      	str	r3, [r4, #0]
	for (int i = 0; i < 12; i++) {
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	3301      	adds	r3, #1
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2b0b      	cmp	r3, #11
 800343c:	dd94      	ble.n	8003368 <rotationSteps+0x10>

	}

}
 800343e:	bf00      	nop
 8003440:	bf00      	nop
 8003442:	3710      	adds	r7, #16
 8003444:	46bd      	mov	sp, r7
 8003446:	bdb0      	pop	{r4, r5, r7, pc}
 8003448:	54442d18 	.word	0x54442d18
 800344c:	401921fb 	.word	0x401921fb
 8003450:	00000000 	.word	0x00000000
 8003454:	40000000 	.word	0x40000000
 8003458:	43dc0000 	.word	0x43dc0000
 800345c:	40280000 	.word	0x40280000
 8003460:	46abe000 	.word	0x46abe000

08003464 <StartDefaultTask>:
 * @brief  Function implementing the defaultTask thread.
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument) {
 8003464:	b580      	push	{r7, lr}
 8003466:	b082      	sub	sp, #8
 8003468:	af00      	add	r7, sp, #0
 800346a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 800346c:	2001      	movs	r0, #1
 800346e:	f005 fdc3 	bl	8008ff8 <osDelay>
 8003472:	e7fb      	b.n	800346c <StartDefaultTask+0x8>

08003474 <scanKeysTask>:
 * @brief Function implementing the scanKeys thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_scanKeysTask */
void scanKeysTask(void *argument) {
 8003474:	b580      	push	{r7, lr}
 8003476:	b086      	sub	sp, #24
 8003478:	af00      	add	r7, sp, #0
 800347a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN scanKeysTask */

	const TickType_t xFrequency = 50 / portTICK_PERIOD_MS;
 800347c:	2332      	movs	r3, #50	; 0x32
 800347e:	617b      	str	r3, [r7, #20]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8003480:	f007 fa52 	bl	800a928 <xTaskGetTickCount>
 8003484:	4603      	mov	r3, r0
 8003486:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8003488:	f107 030c 	add.w	r3, r7, #12
 800348c:	6979      	ldr	r1, [r7, #20]
 800348e:	4618      	mov	r0, r3
 8003490:	f007 f87c 	bl	800a58c <vTaskDelayUntil>

		uint16_t localKeys = readKeys();
 8003494:	f7ff ff37 	bl	8003306 <readKeys>
 8003498:	4603      	mov	r3, r0
 800349a:	827b      	strh	r3, [r7, #18]

		osMutexAcquire(keysMutexHandle, osWaitForever);
 800349c:	4b07      	ldr	r3, [pc, #28]	; (80034bc <scanKeysTask+0x48>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f04f 31ff 	mov.w	r1, #4294967295
 80034a4:	4618      	mov	r0, r3
 80034a6:	f005 fe48 	bl	800913a <osMutexAcquire>

		__atomic_store_n(&keys, localKeys, __ATOMIC_RELAXED);
 80034aa:	4a05      	ldr	r2, [pc, #20]	; (80034c0 <scanKeysTask+0x4c>)
 80034ac:	8a7b      	ldrh	r3, [r7, #18]
 80034ae:	8013      	strh	r3, [r2, #0]

		osMutexRelease(keysMutexHandle);
 80034b0:	4b02      	ldr	r3, [pc, #8]	; (80034bc <scanKeysTask+0x48>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	4618      	mov	r0, r3
 80034b6:	f005 fe8b 	bl	80091d0 <osMutexRelease>
	for (;;) {
 80034ba:	e7e5      	b.n	8003488 <scanKeysTask+0x14>
 80034bc:	200004e0 	.word	0x200004e0
 80034c0:	20000000 	.word	0x20000000

080034c4 <displayUpdateTask>:
 * @brief Function implementing the displayUpdate thread.
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_displayUpdateTask */
void displayUpdateTask(void *argument) {
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN displayUpdateTask */

	const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
 80034cc:	2364      	movs	r3, #100	; 0x64
 80034ce:	617b      	str	r3, [r7, #20]
	TickType_t xLastWakeTime = xTaskGetTickCount();
 80034d0:	f007 fa2a 	bl	800a928 <xTaskGetTickCount>
 80034d4:	4603      	mov	r3, r0
 80034d6:	60fb      	str	r3, [r7, #12]

	/* Infinite loop */
	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 80034d8:	f107 030c 	add.w	r3, r7, #12
 80034dc:	6979      	ldr	r1, [r7, #20]
 80034de:	4618      	mov	r0, r3
 80034e0:	f007 f854 	bl	800a58c <vTaskDelayUntil>

		osMutexAcquire(keysMutexHandle, osWaitForever);
 80034e4:	4b15      	ldr	r3, [pc, #84]	; (800353c <displayUpdateTask+0x78>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f04f 31ff 	mov.w	r1, #4294967295
 80034ec:	4618      	mov	r0, r3
 80034ee:	f005 fe24 	bl	800913a <osMutexAcquire>

		uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 80034f2:	4b13      	ldr	r3, [pc, #76]	; (8003540 <displayUpdateTask+0x7c>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	827b      	strh	r3, [r7, #18]

		osMutexRelease(keysMutexHandle);
 80034f8:	4b10      	ldr	r3, [pc, #64]	; (800353c <displayUpdateTask+0x78>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f005 fe67 	bl	80091d0 <osMutexRelease>

		u8g2_ClearBuffer(&u8g2);
 8003502:	4810      	ldr	r0, [pc, #64]	; (8003544 <displayUpdateTask+0x80>)
 8003504:	f7fd fcd2 	bl	8000eac <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_ncenB08_tr);
 8003508:	490f      	ldr	r1, [pc, #60]	; (8003548 <displayUpdateTask+0x84>)
 800350a:	480e      	ldr	r0, [pc, #56]	; (8003544 <displayUpdateTask+0x80>)
 800350c:	f7fe fb7e 	bl	8001c0c <u8g2_SetFont>

		if (localKeys == 0x0FFF) {
 8003510:	8a7b      	ldrh	r3, [r7, #18]
 8003512:	f640 72ff 	movw	r2, #4095	; 0xfff
 8003516:	4293      	cmp	r3, r2
 8003518:	d106      	bne.n	8003528 <displayUpdateTask+0x64>

			u8g2_DrawStr(&u8g2, 2, 20, "- ^_^ -");
 800351a:	4b0c      	ldr	r3, [pc, #48]	; (800354c <displayUpdateTask+0x88>)
 800351c:	2214      	movs	r2, #20
 800351e:	2102      	movs	r1, #2
 8003520:	4808      	ldr	r0, [pc, #32]	; (8003544 <displayUpdateTask+0x80>)
 8003522:	f7fe fad1 	bl	8001ac8 <u8g2_DrawStr>
 8003526:	e005      	b.n	8003534 <displayUpdateTask+0x70>

		} else {

			u8g2_DrawStr(&u8g2, 2, 20, "- ^0^ -");
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <displayUpdateTask+0x8c>)
 800352a:	2214      	movs	r2, #20
 800352c:	2102      	movs	r1, #2
 800352e:	4805      	ldr	r0, [pc, #20]	; (8003544 <displayUpdateTask+0x80>)
 8003530:	f7fe faca 	bl	8001ac8 <u8g2_DrawStr>

		}

		u8g2_SendBuffer(&u8g2);
 8003534:	4803      	ldr	r0, [pc, #12]	; (8003544 <displayUpdateTask+0x80>)
 8003536:	f7fd fd2c 	bl	8000f92 <u8g2_SendBuffer>
	for (;;) {
 800353a:	e7cd      	b.n	80034d8 <displayUpdateTask+0x14>
 800353c:	200004e0 	.word	0x200004e0
 8003540:	20000000 	.word	0x20000000
 8003544:	200004e4 	.word	0x200004e4
 8003548:	0800e37c 	.word	0x0800e37c
 800354c:	0800e354 	.word	0x0800e354
 8003550:	0800e35c 	.word	0x0800e35c

08003554 <HAL_TIM_PeriodElapsedCallback>:
 * HAL_TIM_IRQHandler(). It makes a direct call to HAL_IncTick() to increment
 * a global variable "uwTick" used as application time base.
 * @param  htim : TIM handle
 * @retval None
 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8003554:	b580      	push	{r7, lr}
 8003556:	b088      	sub	sp, #32
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	if (htim == &htim6) {
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	4a53      	ldr	r2, [pc, #332]	; (80036ac <HAL_TIM_PeriodElapsedCallback+0x158>)
 8003560:	4293      	cmp	r3, r2
 8003562:	f040 8098 	bne.w	8003696 <HAL_TIM_PeriodElapsedCallback+0x142>
		static float imag[12] = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };

		float real2;
		float imag2;

		float Vadd = 0;
 8003566:	f04f 0300 	mov.w	r3, #0
 800356a:	61fb      	str	r3, [r7, #28]

		uint16_t localKeys;

		localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 800356c:	4b50      	ldr	r3, [pc, #320]	; (80036b0 <HAL_TIM_PeriodElapsedCallback+0x15c>)
 800356e:	881b      	ldrh	r3, [r3, #0]
 8003570:	837b      	strh	r3, [r7, #26]

		for (int i = 0; i < 12; i++) {
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
 8003576:	e062      	b.n	800363e <HAL_TIM_PeriodElapsedCallback+0xea>

			if (!(localKeys & 1)) {
 8003578:	8b7b      	ldrh	r3, [r7, #26]
 800357a:	f003 0301 	and.w	r3, r3, #1
 800357e:	2b00      	cmp	r3, #0
 8003580:	d157      	bne.n	8003632 <HAL_TIM_PeriodElapsedCallback+0xde>

				real2 = dreal[i] * real[i] - dimag[i] * imag[i];
 8003582:	4a4c      	ldr	r2, [pc, #304]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8003584:	697b      	ldr	r3, [r7, #20]
 8003586:	009b      	lsls	r3, r3, #2
 8003588:	4413      	add	r3, r2
 800358a:	ed93 7a00 	vldr	s14, [r3]
 800358e:	4a4a      	ldr	r2, [pc, #296]	; (80036b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003590:	697b      	ldr	r3, [r7, #20]
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	edd3 7a00 	vldr	s15, [r3]
 800359a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800359e:	4a47      	ldr	r2, [pc, #284]	; (80036bc <HAL_TIM_PeriodElapsedCallback+0x168>)
 80035a0:	697b      	ldr	r3, [r7, #20]
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	4413      	add	r3, r2
 80035a6:	edd3 6a00 	vldr	s13, [r3]
 80035aa:	4a45      	ldr	r2, [pc, #276]	; (80036c0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80035ac:	697b      	ldr	r3, [r7, #20]
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	edd3 7a00 	vldr	s15, [r3]
 80035b6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035ba:	ee77 7a67 	vsub.f32	s15, s14, s15
 80035be:	edc7 7a03 	vstr	s15, [r7, #12]
				imag2 = dimag[i] * real[i] + dreal[i] * imag[i];
 80035c2:	4a3e      	ldr	r2, [pc, #248]	; (80036bc <HAL_TIM_PeriodElapsedCallback+0x168>)
 80035c4:	697b      	ldr	r3, [r7, #20]
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	4413      	add	r3, r2
 80035ca:	ed93 7a00 	vldr	s14, [r3]
 80035ce:	4a3a      	ldr	r2, [pc, #232]	; (80036b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 80035d0:	697b      	ldr	r3, [r7, #20]
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	4413      	add	r3, r2
 80035d6:	edd3 7a00 	vldr	s15, [r3]
 80035da:	ee27 7a27 	vmul.f32	s14, s14, s15
 80035de:	4a35      	ldr	r2, [pc, #212]	; (80036b4 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80035e0:	697b      	ldr	r3, [r7, #20]
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	edd3 6a00 	vldr	s13, [r3]
 80035ea:	4a35      	ldr	r2, [pc, #212]	; (80036c0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 80035ec:	697b      	ldr	r3, [r7, #20]
 80035ee:	009b      	lsls	r3, r3, #2
 80035f0:	4413      	add	r3, r2
 80035f2:	edd3 7a00 	vldr	s15, [r3]
 80035f6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80035fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80035fe:	edc7 7a02 	vstr	s15, [r7, #8]

				real[i] = real2;
 8003602:	4a2d      	ldr	r2, [pc, #180]	; (80036b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8003604:	697b      	ldr	r3, [r7, #20]
 8003606:	009b      	lsls	r3, r3, #2
 8003608:	4413      	add	r3, r2
 800360a:	68fa      	ldr	r2, [r7, #12]
 800360c:	601a      	str	r2, [r3, #0]
				imag[i] = imag2;
 800360e:	4a2c      	ldr	r2, [pc, #176]	; (80036c0 <HAL_TIM_PeriodElapsedCallback+0x16c>)
 8003610:	697b      	ldr	r3, [r7, #20]
 8003612:	009b      	lsls	r3, r3, #2
 8003614:	4413      	add	r3, r2
 8003616:	68ba      	ldr	r2, [r7, #8]
 8003618:	601a      	str	r2, [r3, #0]

				Vadd += real[i];
 800361a:	4a27      	ldr	r2, [pc, #156]	; (80036b8 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	4413      	add	r3, r2
 8003622:	edd3 7a00 	vldr	s15, [r3]
 8003626:	ed97 7a07 	vldr	s14, [r7, #28]
 800362a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800362e:	edc7 7a07 	vstr	s15, [r7, #28]

			}

			localKeys >>= 1;
 8003632:	8b7b      	ldrh	r3, [r7, #26]
 8003634:	085b      	lsrs	r3, r3, #1
 8003636:	837b      	strh	r3, [r7, #26]
		for (int i = 0; i < 12; i++) {
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	3301      	adds	r3, #1
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	697b      	ldr	r3, [r7, #20]
 8003640:	2b0b      	cmp	r3, #11
 8003642:	dd99      	ble.n	8003578 <HAL_TIM_PeriodElapsedCallback+0x24>

		}

		int16_t Vout = (int16_t) 1024 * Vadd / 12.0;
 8003644:	edd7 7a07 	vldr	s15, [r7, #28]
 8003648:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80036c4 <HAL_TIM_PeriodElapsedCallback+0x170>
 800364c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003650:	ee17 0a90 	vmov	r0, s15
 8003654:	f7fc ff28 	bl	80004a8 <__aeabi_f2d>
 8003658:	f04f 0200 	mov.w	r2, #0
 800365c:	4b1a      	ldr	r3, [pc, #104]	; (80036c8 <HAL_TIM_PeriodElapsedCallback+0x174>)
 800365e:	f7fd f8a5 	bl	80007ac <__aeabi_ddiv>
 8003662:	4602      	mov	r2, r0
 8003664:	460b      	mov	r3, r1
 8003666:	4610      	mov	r0, r2
 8003668:	4619      	mov	r1, r3
 800366a:	f7fd fa25 	bl	8000ab8 <__aeabi_d2iz>
 800366e:	4603      	mov	r3, r0
 8003670:	827b      	strh	r3, [r7, #18]

		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, Vout + 2048);
 8003672:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800367a:	2200      	movs	r2, #0
 800367c:	2100      	movs	r1, #0
 800367e:	4813      	ldr	r0, [pc, #76]	; (80036cc <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003680:	f001 fcf3 	bl	800506a <HAL_DAC_SetValue>
		HAL_DAC_SetValue(&hdac1, DAC1_CHANNEL_2, DAC_ALIGN_12B_R, Vout + 2048);
 8003684:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8003688:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800368c:	2200      	movs	r2, #0
 800368e:	2110      	movs	r1, #16
 8003690:	480e      	ldr	r0, [pc, #56]	; (80036cc <HAL_TIM_PeriodElapsedCallback+0x178>)
 8003692:	f001 fcea 	bl	800506a <HAL_DAC_SetValue>
//				GPIO_PIN_RESET);

	}

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM16) {
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	4a0d      	ldr	r2, [pc, #52]	; (80036d0 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 800369c:	4293      	cmp	r3, r2
 800369e:	d101      	bne.n	80036a4 <HAL_TIM_PeriodElapsedCallback+0x150>
		HAL_IncTick();
 80036a0:	f000 fb44 	bl	8003d2c <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 80036a4:	bf00      	nop
 80036a6:	3720      	adds	r7, #32
 80036a8:	46bd      	mov	sp, r7
 80036aa:	bd80      	pop	{r7, pc}
 80036ac:	200003b8 	.word	0x200003b8
 80036b0:	20000000 	.word	0x20000000
 80036b4:	20000578 	.word	0x20000578
 80036b8:	20000004 	.word	0x20000004
 80036bc:	200005a8 	.word	0x200005a8
 80036c0:	200005fc 	.word	0x200005fc
 80036c4:	44800000 	.word	0x44800000
 80036c8:	40280000 	.word	0x40280000
 80036cc:	20000350 	.word	0x20000350
 80036d0:	40014400 	.word	0x40014400

080036d4 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80036d4:	b480      	push	{r7}
 80036d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80036d8:	b672      	cpsid	i
}
 80036da:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 80036dc:	e7fe      	b.n	80036dc <Error_Handler+0x8>
	...

080036e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b082      	sub	sp, #8
 80036e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80036e6:	4b11      	ldr	r3, [pc, #68]	; (800372c <HAL_MspInit+0x4c>)
 80036e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036ea:	4a10      	ldr	r2, [pc, #64]	; (800372c <HAL_MspInit+0x4c>)
 80036ec:	f043 0301 	orr.w	r3, r3, #1
 80036f0:	6613      	str	r3, [r2, #96]	; 0x60
 80036f2:	4b0e      	ldr	r3, [pc, #56]	; (800372c <HAL_MspInit+0x4c>)
 80036f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	607b      	str	r3, [r7, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80036fe:	4b0b      	ldr	r3, [pc, #44]	; (800372c <HAL_MspInit+0x4c>)
 8003700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003702:	4a0a      	ldr	r2, [pc, #40]	; (800372c <HAL_MspInit+0x4c>)
 8003704:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003708:	6593      	str	r3, [r2, #88]	; 0x58
 800370a:	4b08      	ldr	r3, [pc, #32]	; (800372c <HAL_MspInit+0x4c>)
 800370c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800370e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003712:	603b      	str	r3, [r7, #0]
 8003714:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8003716:	2200      	movs	r2, #0
 8003718:	210f      	movs	r1, #15
 800371a:	f06f 0001 	mvn.w	r0, #1
 800371e:	f001 fbb1 	bl	8004e84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003722:	bf00      	nop
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}
 800372a:	bf00      	nop
 800372c:	40021000 	.word	0x40021000

08003730 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b09e      	sub	sp, #120	; 0x78
 8003734:	af00      	add	r7, sp, #0
 8003736:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003738:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800373c:	2200      	movs	r2, #0
 800373e:	601a      	str	r2, [r3, #0]
 8003740:	605a      	str	r2, [r3, #4]
 8003742:	609a      	str	r2, [r3, #8]
 8003744:	60da      	str	r2, [r3, #12]
 8003746:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003748:	f107 0310 	add.w	r3, r7, #16
 800374c:	2254      	movs	r2, #84	; 0x54
 800374e:	2100      	movs	r1, #0
 8003750:	4618      	mov	r0, r3
 8003752:	f008 fdd5 	bl	800c300 <memset>
  if(hadc->Instance==ADC1)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	4a25      	ldr	r2, [pc, #148]	; (80037f0 <HAL_ADC_MspInit+0xc0>)
 800375c:	4293      	cmp	r3, r2
 800375e:	d143      	bne.n	80037e8 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8003760:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003764:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8003766:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800376a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800376c:	2301      	movs	r3, #1
 800376e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003770:	2301      	movs	r3, #1
 8003772:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8003774:	2310      	movs	r3, #16
 8003776:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003778:	2307      	movs	r3, #7
 800377a:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800377c:	2302      	movs	r3, #2
 800377e:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003780:	2302      	movs	r3, #2
 8003782:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8003784:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003788:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800378a:	f107 0310 	add.w	r3, r7, #16
 800378e:	4618      	mov	r0, r3
 8003790:	f004 f834 	bl	80077fc <HAL_RCCEx_PeriphCLKConfig>
 8003794:	4603      	mov	r3, r0
 8003796:	2b00      	cmp	r3, #0
 8003798:	d001      	beq.n	800379e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 800379a:	f7ff ff9b 	bl	80036d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800379e:	4b15      	ldr	r3, [pc, #84]	; (80037f4 <HAL_ADC_MspInit+0xc4>)
 80037a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037a2:	4a14      	ldr	r2, [pc, #80]	; (80037f4 <HAL_ADC_MspInit+0xc4>)
 80037a4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80037a8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037aa:	4b12      	ldr	r3, [pc, #72]	; (80037f4 <HAL_ADC_MspInit+0xc4>)
 80037ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ae:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80037b6:	4b0f      	ldr	r3, [pc, #60]	; (80037f4 <HAL_ADC_MspInit+0xc4>)
 80037b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037ba:	4a0e      	ldr	r2, [pc, #56]	; (80037f4 <HAL_ADC_MspInit+0xc4>)
 80037bc:	f043 0301 	orr.w	r3, r3, #1
 80037c0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80037c2:	4b0c      	ldr	r3, [pc, #48]	; (80037f4 <HAL_ADC_MspInit+0xc4>)
 80037c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80037c6:	f003 0301 	and.w	r3, r3, #1
 80037ca:	60bb      	str	r3, [r7, #8]
 80037cc:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = JOYY_Pin|JOYX_Pin;
 80037ce:	2303      	movs	r3, #3
 80037d0:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80037d2:	230b      	movs	r3, #11
 80037d4:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037d6:	2300      	movs	r3, #0
 80037d8:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037da:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80037de:	4619      	mov	r1, r3
 80037e0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80037e4:	f001 fde4 	bl	80053b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80037e8:	bf00      	nop
 80037ea:	3778      	adds	r7, #120	; 0x78
 80037ec:	46bd      	mov	sp, r7
 80037ee:	bd80      	pop	{r7, pc}
 80037f0:	50040000 	.word	0x50040000
 80037f4:	40021000 	.word	0x40021000

080037f8 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003800:	f107 0314 	add.w	r3, r7, #20
 8003804:	2200      	movs	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
 8003808:	605a      	str	r2, [r3, #4]
 800380a:	609a      	str	r2, [r3, #8]
 800380c:	60da      	str	r2, [r3, #12]
 800380e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a18      	ldr	r2, [pc, #96]	; (8003878 <HAL_CAN_MspInit+0x80>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d129      	bne.n	800386e <HAL_CAN_MspInit+0x76>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 800381a:	4b18      	ldr	r3, [pc, #96]	; (800387c <HAL_CAN_MspInit+0x84>)
 800381c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800381e:	4a17      	ldr	r2, [pc, #92]	; (800387c <HAL_CAN_MspInit+0x84>)
 8003820:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003824:	6593      	str	r3, [r2, #88]	; 0x58
 8003826:	4b15      	ldr	r3, [pc, #84]	; (800387c <HAL_CAN_MspInit+0x84>)
 8003828:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800382a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800382e:	613b      	str	r3, [r7, #16]
 8003830:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003832:	4b12      	ldr	r3, [pc, #72]	; (800387c <HAL_CAN_MspInit+0x84>)
 8003834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003836:	4a11      	ldr	r2, [pc, #68]	; (800387c <HAL_CAN_MspInit+0x84>)
 8003838:	f043 0301 	orr.w	r3, r3, #1
 800383c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800383e:	4b0f      	ldr	r3, [pc, #60]	; (800387c <HAL_CAN_MspInit+0x84>)
 8003840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003842:	f003 0301 	and.w	r3, r3, #1
 8003846:	60fb      	str	r3, [r7, #12]
 8003848:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800384a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800384e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003850:	2302      	movs	r3, #2
 8003852:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003854:	2300      	movs	r3, #0
 8003856:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003858:	2303      	movs	r3, #3
 800385a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800385c:	2309      	movs	r3, #9
 800385e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003860:	f107 0314 	add.w	r3, r7, #20
 8003864:	4619      	mov	r1, r3
 8003866:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800386a:	f001 fda1 	bl	80053b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 800386e:	bf00      	nop
 8003870:	3728      	adds	r7, #40	; 0x28
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40006400 	.word	0x40006400
 800387c:	40021000 	.word	0x40021000

08003880 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b08a      	sub	sp, #40	; 0x28
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003888:	f107 0314 	add.w	r3, r7, #20
 800388c:	2200      	movs	r2, #0
 800388e:	601a      	str	r2, [r3, #0]
 8003890:	605a      	str	r2, [r3, #4]
 8003892:	609a      	str	r2, [r3, #8]
 8003894:	60da      	str	r2, [r3, #12]
 8003896:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	4a19      	ldr	r2, [pc, #100]	; (8003904 <HAL_DAC_MspInit+0x84>)
 800389e:	4293      	cmp	r3, r2
 80038a0:	d12c      	bne.n	80038fc <HAL_DAC_MspInit+0x7c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 80038a2:	4b19      	ldr	r3, [pc, #100]	; (8003908 <HAL_DAC_MspInit+0x88>)
 80038a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038a6:	4a18      	ldr	r2, [pc, #96]	; (8003908 <HAL_DAC_MspInit+0x88>)
 80038a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80038ac:	6593      	str	r3, [r2, #88]	; 0x58
 80038ae:	4b16      	ldr	r3, [pc, #88]	; (8003908 <HAL_DAC_MspInit+0x88>)
 80038b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80038b2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038ba:	4b13      	ldr	r3, [pc, #76]	; (8003908 <HAL_DAC_MspInit+0x88>)
 80038bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038be:	4a12      	ldr	r2, [pc, #72]	; (8003908 <HAL_DAC_MspInit+0x88>)
 80038c0:	f043 0301 	orr.w	r3, r3, #1
 80038c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80038c6:	4b10      	ldr	r3, [pc, #64]	; (8003908 <HAL_DAC_MspInit+0x88>)
 80038c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	60fb      	str	r3, [r7, #12]
 80038d0:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = OUTR_Pin|OUTL_Pin;
 80038d2:	2330      	movs	r3, #48	; 0x30
 80038d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80038d6:	2303      	movs	r3, #3
 80038d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038da:	2300      	movs	r3, #0
 80038dc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038de:	f107 0314 	add.w	r3, r7, #20
 80038e2:	4619      	mov	r1, r3
 80038e4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80038e8:	f001 fd62 	bl	80053b0 <HAL_GPIO_Init>

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 80038ec:	2200      	movs	r2, #0
 80038ee:	2105      	movs	r1, #5
 80038f0:	2036      	movs	r0, #54	; 0x36
 80038f2:	f001 fac7 	bl	8004e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80038f6:	2036      	movs	r0, #54	; 0x36
 80038f8:	f001 fae0 	bl	8004ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 80038fc:	bf00      	nop
 80038fe:	3728      	adds	r7, #40	; 0x28
 8003900:	46bd      	mov	sp, r7
 8003902:	bd80      	pop	{r7, pc}
 8003904:	40007400 	.word	0x40007400
 8003908:	40021000 	.word	0x40021000

0800390c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b09e      	sub	sp, #120	; 0x78
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003924:	f107 0310 	add.w	r3, r7, #16
 8003928:	2254      	movs	r2, #84	; 0x54
 800392a:	2100      	movs	r1, #0
 800392c:	4618      	mov	r0, r3
 800392e:	f008 fce7 	bl	800c300 <memset>
  if(hi2c->Instance==I2C1)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a26      	ldr	r2, [pc, #152]	; (80039d0 <HAL_I2C_MspInit+0xc4>)
 8003938:	4293      	cmp	r3, r2
 800393a:	d145      	bne.n	80039c8 <HAL_I2C_MspInit+0xbc>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800393c:	2340      	movs	r3, #64	; 0x40
 800393e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003940:	2300      	movs	r3, #0
 8003942:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003944:	f107 0310 	add.w	r3, r7, #16
 8003948:	4618      	mov	r0, r3
 800394a:	f003 ff57 	bl	80077fc <HAL_RCCEx_PeriphCLKConfig>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d001      	beq.n	8003958 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8003954:	f7ff febe 	bl	80036d4 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003958:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <HAL_I2C_MspInit+0xc8>)
 800395a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395c:	4a1d      	ldr	r2, [pc, #116]	; (80039d4 <HAL_I2C_MspInit+0xc8>)
 800395e:	f043 0302 	orr.w	r3, r3, #2
 8003962:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003964:	4b1b      	ldr	r3, [pc, #108]	; (80039d4 <HAL_I2C_MspInit+0xc8>)
 8003966:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003968:	f003 0302 	and.w	r3, r3, #2
 800396c:	60fb      	str	r3, [r7, #12]
 800396e:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003970:	23c0      	movs	r3, #192	; 0xc0
 8003972:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003974:	2312      	movs	r3, #18
 8003976:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003978:	2300      	movs	r3, #0
 800397a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800397c:	2303      	movs	r3, #3
 800397e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003980:	2304      	movs	r3, #4
 8003982:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003984:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003988:	4619      	mov	r1, r3
 800398a:	4813      	ldr	r0, [pc, #76]	; (80039d8 <HAL_I2C_MspInit+0xcc>)
 800398c:	f001 fd10 	bl	80053b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003990:	4b10      	ldr	r3, [pc, #64]	; (80039d4 <HAL_I2C_MspInit+0xc8>)
 8003992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003994:	4a0f      	ldr	r2, [pc, #60]	; (80039d4 <HAL_I2C_MspInit+0xc8>)
 8003996:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800399a:	6593      	str	r3, [r2, #88]	; 0x58
 800399c:	4b0d      	ldr	r3, [pc, #52]	; (80039d4 <HAL_I2C_MspInit+0xc8>)
 800399e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039a0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039a4:	60bb      	str	r3, [r7, #8]
 80039a6:	68bb      	ldr	r3, [r7, #8]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 80039a8:	2200      	movs	r2, #0
 80039aa:	2105      	movs	r1, #5
 80039ac:	201f      	movs	r0, #31
 80039ae:	f001 fa69 	bl	8004e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80039b2:	201f      	movs	r0, #31
 80039b4:	f001 fa82 	bl	8004ebc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 80039b8:	2200      	movs	r2, #0
 80039ba:	2105      	movs	r1, #5
 80039bc:	2020      	movs	r0, #32
 80039be:	f001 fa61 	bl	8004e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80039c2:	2020      	movs	r0, #32
 80039c4:	f001 fa7a 	bl	8004ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80039c8:	bf00      	nop
 80039ca:	3778      	adds	r7, #120	; 0x78
 80039cc:	46bd      	mov	sp, r7
 80039ce:	bd80      	pop	{r7, pc}
 80039d0:	40005400 	.word	0x40005400
 80039d4:	40021000 	.word	0x40021000
 80039d8:	48000400 	.word	0x48000400

080039dc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80039dc:	b580      	push	{r7, lr}
 80039de:	b084      	sub	sp, #16
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM6)
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <HAL_TIM_Base_MspInit+0x68>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d114      	bne.n	8003a18 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 80039ee:	4b16      	ldr	r3, [pc, #88]	; (8003a48 <HAL_TIM_Base_MspInit+0x6c>)
 80039f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039f2:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <HAL_TIM_Base_MspInit+0x6c>)
 80039f4:	f043 0310 	orr.w	r3, r3, #16
 80039f8:	6593      	str	r3, [r2, #88]	; 0x58
 80039fa:	4b13      	ldr	r3, [pc, #76]	; (8003a48 <HAL_TIM_Base_MspInit+0x6c>)
 80039fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80039fe:	f003 0310 	and.w	r3, r3, #16
 8003a02:	60fb      	str	r3, [r7, #12]
 8003a04:	68fb      	ldr	r3, [r7, #12]
    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8003a06:	2200      	movs	r2, #0
 8003a08:	2105      	movs	r1, #5
 8003a0a:	2036      	movs	r0, #54	; 0x36
 8003a0c:	f001 fa3a 	bl	8004e84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003a10:	2036      	movs	r0, #54	; 0x36
 8003a12:	f001 fa53 	bl	8004ebc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 8003a16:	e010      	b.n	8003a3a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM7)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	4a0b      	ldr	r2, [pc, #44]	; (8003a4c <HAL_TIM_Base_MspInit+0x70>)
 8003a1e:	4293      	cmp	r3, r2
 8003a20:	d10b      	bne.n	8003a3a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003a22:	4b09      	ldr	r3, [pc, #36]	; (8003a48 <HAL_TIM_Base_MspInit+0x6c>)
 8003a24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a26:	4a08      	ldr	r2, [pc, #32]	; (8003a48 <HAL_TIM_Base_MspInit+0x6c>)
 8003a28:	f043 0320 	orr.w	r3, r3, #32
 8003a2c:	6593      	str	r3, [r2, #88]	; 0x58
 8003a2e:	4b06      	ldr	r3, [pc, #24]	; (8003a48 <HAL_TIM_Base_MspInit+0x6c>)
 8003a30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003a32:	f003 0320 	and.w	r3, r3, #32
 8003a36:	60bb      	str	r3, [r7, #8]
 8003a38:	68bb      	ldr	r3, [r7, #8]
}
 8003a3a:	bf00      	nop
 8003a3c:	3710      	adds	r7, #16
 8003a3e:	46bd      	mov	sp, r7
 8003a40:	bd80      	pop	{r7, pc}
 8003a42:	bf00      	nop
 8003a44:	40001000 	.word	0x40001000
 8003a48:	40021000 	.word	0x40021000
 8003a4c:	40001400 	.word	0x40001400

08003a50 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b09e      	sub	sp, #120	; 0x78
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003a5c:	2200      	movs	r2, #0
 8003a5e:	601a      	str	r2, [r3, #0]
 8003a60:	605a      	str	r2, [r3, #4]
 8003a62:	609a      	str	r2, [r3, #8]
 8003a64:	60da      	str	r2, [r3, #12]
 8003a66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a68:	f107 0310 	add.w	r3, r7, #16
 8003a6c:	2254      	movs	r2, #84	; 0x54
 8003a6e:	2100      	movs	r1, #0
 8003a70:	4618      	mov	r0, r3
 8003a72:	f008 fc45 	bl	800c300 <memset>
  if(huart->Instance==USART2)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a28      	ldr	r2, [pc, #160]	; (8003b1c <HAL_UART_MspInit+0xcc>)
 8003a7c:	4293      	cmp	r3, r2
 8003a7e:	d148      	bne.n	8003b12 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8003a80:	2302      	movs	r3, #2
 8003a82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003a84:	2300      	movs	r3, #0
 8003a86:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003a88:	f107 0310 	add.w	r3, r7, #16
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	f003 feb5 	bl	80077fc <HAL_RCCEx_PeriphCLKConfig>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8003a98:	f7ff fe1c 	bl	80036d4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a9c:	4b20      	ldr	r3, [pc, #128]	; (8003b20 <HAL_UART_MspInit+0xd0>)
 8003a9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aa0:	4a1f      	ldr	r2, [pc, #124]	; (8003b20 <HAL_UART_MspInit+0xd0>)
 8003aa2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003aa6:	6593      	str	r3, [r2, #88]	; 0x58
 8003aa8:	4b1d      	ldr	r3, [pc, #116]	; (8003b20 <HAL_UART_MspInit+0xd0>)
 8003aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003aac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ab0:	60fb      	str	r3, [r7, #12]
 8003ab2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab4:	4b1a      	ldr	r3, [pc, #104]	; (8003b20 <HAL_UART_MspInit+0xd0>)
 8003ab6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ab8:	4a19      	ldr	r2, [pc, #100]	; (8003b20 <HAL_UART_MspInit+0xd0>)
 8003aba:	f043 0301 	orr.w	r3, r3, #1
 8003abe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003ac0:	4b17      	ldr	r3, [pc, #92]	; (8003b20 <HAL_UART_MspInit+0xd0>)
 8003ac2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	60bb      	str	r3, [r7, #8]
 8003aca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003acc:	2304      	movs	r3, #4
 8003ace:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ad0:	2302      	movs	r3, #2
 8003ad2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003adc:	2307      	movs	r3, #7
 8003ade:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ae0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003aea:	f001 fc61 	bl	80053b0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003af4:	2302      	movs	r3, #2
 8003af6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003af8:	2300      	movs	r3, #0
 8003afa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003afc:	2303      	movs	r3, #3
 8003afe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003b00:	2303      	movs	r3, #3
 8003b02:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8003b08:	4619      	mov	r1, r3
 8003b0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003b0e:	f001 fc4f 	bl	80053b0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003b12:	bf00      	nop
 8003b14:	3778      	adds	r7, #120	; 0x78
 8003b16:	46bd      	mov	sp, r7
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	40004400 	.word	0x40004400
 8003b20:	40021000 	.word	0x40021000

08003b24 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b08c      	sub	sp, #48	; 0x30
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 8003b32:	4b2e      	ldr	r3, [pc, #184]	; (8003bec <HAL_InitTick+0xc8>)
 8003b34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b36:	4a2d      	ldr	r2, [pc, #180]	; (8003bec <HAL_InitTick+0xc8>)
 8003b38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b3c:	6613      	str	r3, [r2, #96]	; 0x60
 8003b3e:	4b2b      	ldr	r3, [pc, #172]	; (8003bec <HAL_InitTick+0xc8>)
 8003b40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	60bb      	str	r3, [r7, #8]
 8003b48:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003b4a:	f107 020c 	add.w	r2, r7, #12
 8003b4e:	f107 0310 	add.w	r3, r7, #16
 8003b52:	4611      	mov	r1, r2
 8003b54:	4618      	mov	r0, r3
 8003b56:	f003 fdbf 	bl	80076d8 <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8003b5a:	f003 fda7 	bl	80076ac <HAL_RCC_GetPCLK2Freq>
 8003b5e:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003b60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b62:	4a23      	ldr	r2, [pc, #140]	; (8003bf0 <HAL_InitTick+0xcc>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	0c9b      	lsrs	r3, r3, #18
 8003b6a:	3b01      	subs	r3, #1
 8003b6c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8003b6e:	4b21      	ldr	r3, [pc, #132]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003b70:	4a21      	ldr	r2, [pc, #132]	; (8003bf8 <HAL_InitTick+0xd4>)
 8003b72:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 8003b74:	4b1f      	ldr	r3, [pc, #124]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003b76:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003b7a:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8003b7c:	4a1d      	ldr	r2, [pc, #116]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b80:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 8003b82:	4b1c      	ldr	r3, [pc, #112]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003b84:	2200      	movs	r2, #0
 8003b86:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003b88:	4b1a      	ldr	r3, [pc, #104]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003b8e:	4b19      	ldr	r3, [pc, #100]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003b90:	2200      	movs	r2, #0
 8003b92:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 8003b94:	4817      	ldr	r0, [pc, #92]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003b96:	f004 f929 	bl	8007dec <HAL_TIM_Base_Init>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8003ba0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d11b      	bne.n	8003be0 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 8003ba8:	4812      	ldr	r0, [pc, #72]	; (8003bf4 <HAL_InitTick+0xd0>)
 8003baa:	f004 f9c3 	bl	8007f34 <HAL_TIM_Base_Start_IT>
 8003bae:	4603      	mov	r3, r0
 8003bb0:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8003bb4:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d111      	bne.n	8003be0 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8003bbc:	2019      	movs	r0, #25
 8003bbe:	f001 f97d 	bl	8004ebc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	2b0f      	cmp	r3, #15
 8003bc6:	d808      	bhi.n	8003bda <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8003bc8:	2200      	movs	r2, #0
 8003bca:	6879      	ldr	r1, [r7, #4]
 8003bcc:	2019      	movs	r0, #25
 8003bce:	f001 f959 	bl	8004e84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003bd2:	4a0a      	ldr	r2, [pc, #40]	; (8003bfc <HAL_InitTick+0xd8>)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	e002      	b.n	8003be0 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 8003bda:	2301      	movs	r3, #1
 8003bdc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8003be0:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3730      	adds	r7, #48	; 0x30
 8003be8:	46bd      	mov	sp, r7
 8003bea:	bd80      	pop	{r7, pc}
 8003bec:	40021000 	.word	0x40021000
 8003bf0:	431bde83 	.word	0x431bde83
 8003bf4:	2000062c 	.word	0x2000062c
 8003bf8:	40014400 	.word	0x40014400
 8003bfc:	20000038 	.word	0x20000038

08003c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003c00:	b480      	push	{r7}
 8003c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003c04:	e7fe      	b.n	8003c04 <NMI_Handler+0x4>

08003c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c06:	b480      	push	{r7}
 8003c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003c0a:	e7fe      	b.n	8003c0a <HardFault_Handler+0x4>

08003c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c0c:	b480      	push	{r7}
 8003c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003c10:	e7fe      	b.n	8003c10 <MemManage_Handler+0x4>

08003c12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c12:	b480      	push	{r7}
 8003c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003c16:	e7fe      	b.n	8003c16 <BusFault_Handler+0x4>

08003c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003c1c:	e7fe      	b.n	8003c1c <UsageFault_Handler+0x4>

08003c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003c1e:	b480      	push	{r7}
 8003c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003c22:	bf00      	nop
 8003c24:	46bd      	mov	sp, r7
 8003c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2a:	4770      	bx	lr

08003c2c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8003c2c:	b580      	push	{r7, lr}
 8003c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8003c30:	4802      	ldr	r0, [pc, #8]	; (8003c3c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8003c32:	f004 f9d3 	bl	8007fdc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8003c36:	bf00      	nop
 8003c38:	bd80      	pop	{r7, pc}
 8003c3a:	bf00      	nop
 8003c3c:	2000062c 	.word	0x2000062c

08003c40 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003c44:	4802      	ldr	r0, [pc, #8]	; (8003c50 <I2C1_EV_IRQHandler+0x10>)
 8003c46:	f001 fed1 	bl	80059ec <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003c4a:	bf00      	nop
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	20000364 	.word	0x20000364

08003c54 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003c54:	b580      	push	{r7, lr}
 8003c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003c58:	4802      	ldr	r0, [pc, #8]	; (8003c64 <I2C1_ER_IRQHandler+0x10>)
 8003c5a:	f001 fee1 	bl	8005a20 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003c5e:	bf00      	nop
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	20000364 	.word	0x20000364

08003c68 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003c6c:	4803      	ldr	r0, [pc, #12]	; (8003c7c <TIM6_DAC_IRQHandler+0x14>)
 8003c6e:	f004 f9b5 	bl	8007fdc <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 8003c72:	4803      	ldr	r0, [pc, #12]	; (8003c80 <TIM6_DAC_IRQHandler+0x18>)
 8003c74:	f001 f99f 	bl	8004fb6 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003c78:	bf00      	nop
 8003c7a:	bd80      	pop	{r7, pc}
 8003c7c:	200003b8 	.word	0x200003b8
 8003c80:	20000350 	.word	0x20000350

08003c84 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8003c84:	b480      	push	{r7}
 8003c86:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8003c88:	4b06      	ldr	r3, [pc, #24]	; (8003ca4 <SystemInit+0x20>)
 8003c8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c8e:	4a05      	ldr	r2, [pc, #20]	; (8003ca4 <SystemInit+0x20>)
 8003c90:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003c94:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8003c98:	bf00      	nop
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr
 8003ca2:	bf00      	nop
 8003ca4:	e000ed00 	.word	0xe000ed00

08003ca8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8003ca8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003ce0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8003cac:	f7ff ffea 	bl	8003c84 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003cb0:	480c      	ldr	r0, [pc, #48]	; (8003ce4 <LoopForever+0x6>)
  ldr r1, =_edata
 8003cb2:	490d      	ldr	r1, [pc, #52]	; (8003ce8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8003cb4:	4a0d      	ldr	r2, [pc, #52]	; (8003cec <LoopForever+0xe>)
  movs r3, #0
 8003cb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003cb8:	e002      	b.n	8003cc0 <LoopCopyDataInit>

08003cba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003cba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003cbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003cbe:	3304      	adds	r3, #4

08003cc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003cc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003cc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003cc4:	d3f9      	bcc.n	8003cba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003cc6:	4a0a      	ldr	r2, [pc, #40]	; (8003cf0 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003cc8:	4c0a      	ldr	r4, [pc, #40]	; (8003cf4 <LoopForever+0x16>)
  movs r3, #0
 8003cca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003ccc:	e001      	b.n	8003cd2 <LoopFillZerobss>

08003cce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003cce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003cd0:	3204      	adds	r2, #4

08003cd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003cd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003cd4:	d3fb      	bcc.n	8003cce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003cd6:	f008 fadf 	bl	800c298 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8003cda:	f7fe fe91 	bl	8002a00 <main>

08003cde <LoopForever>:

LoopForever:
    b LoopForever
 8003cde:	e7fe      	b.n	8003cde <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8003ce0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8003ce4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003ce8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8003cec:	0800ebc8 	.word	0x0800ebc8
  ldr r2, =_sbss
 8003cf0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003cf4:	20001d4c 	.word	0x20001d4c

08003cf8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8003cf8:	e7fe      	b.n	8003cf8 <ADC1_IRQHandler>

08003cfa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8003d00:	2300      	movs	r3, #0
 8003d02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d04:	2003      	movs	r0, #3
 8003d06:	f001 f8b2 	bl	8004e6e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8003d0a:	200f      	movs	r0, #15
 8003d0c:	f7ff ff0a 	bl	8003b24 <HAL_InitTick>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d002      	beq.n	8003d1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	71fb      	strb	r3, [r7, #7]
 8003d1a:	e001      	b.n	8003d20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8003d1c:	f7ff fce0 	bl	80036e0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8003d20:	79fb      	ldrb	r3, [r7, #7]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3708      	adds	r7, #8
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
	...

08003d2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8003d30:	4b06      	ldr	r3, [pc, #24]	; (8003d4c <HAL_IncTick+0x20>)
 8003d32:	781b      	ldrb	r3, [r3, #0]
 8003d34:	461a      	mov	r2, r3
 8003d36:	4b06      	ldr	r3, [pc, #24]	; (8003d50 <HAL_IncTick+0x24>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4413      	add	r3, r2
 8003d3c:	4a04      	ldr	r2, [pc, #16]	; (8003d50 <HAL_IncTick+0x24>)
 8003d3e:	6013      	str	r3, [r2, #0]
}
 8003d40:	bf00      	nop
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	2000003c 	.word	0x2000003c
 8003d50:	20000678 	.word	0x20000678

08003d54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d54:	b480      	push	{r7}
 8003d56:	af00      	add	r7, sp, #0
  return uwTick;
 8003d58:	4b03      	ldr	r3, [pc, #12]	; (8003d68 <HAL_GetTick+0x14>)
 8003d5a:	681b      	ldr	r3, [r3, #0]
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d64:	4770      	bx	lr
 8003d66:	bf00      	nop
 8003d68:	20000678 	.word	0x20000678

08003d6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b084      	sub	sp, #16
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d74:	f7ff ffee 	bl	8003d54 <HAL_GetTick>
 8003d78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d84:	d005      	beq.n	8003d92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <HAL_Delay+0x44>)
 8003d88:	781b      	ldrb	r3, [r3, #0]
 8003d8a:	461a      	mov	r2, r3
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	4413      	add	r3, r2
 8003d90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003d92:	bf00      	nop
 8003d94:	f7ff ffde 	bl	8003d54 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	68bb      	ldr	r3, [r7, #8]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	68fa      	ldr	r2, [r7, #12]
 8003da0:	429a      	cmp	r2, r3
 8003da2:	d8f7      	bhi.n	8003d94 <HAL_Delay+0x28>
  {
  }
}
 8003da4:	bf00      	nop
 8003da6:	bf00      	nop
 8003da8:	3710      	adds	r7, #16
 8003daa:	46bd      	mov	sp, r7
 8003dac:	bd80      	pop	{r7, pc}
 8003dae:	bf00      	nop
 8003db0:	2000003c 	.word	0x2000003c

08003db4 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b083      	sub	sp, #12
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	431a      	orrs	r2, r3
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	609a      	str	r2, [r3, #8]
}
 8003dce:	bf00      	nop
 8003dd0:	370c      	adds	r7, #12
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd8:	4770      	bx	lr

08003dda <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b083      	sub	sp, #12
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
 8003de2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8003dec:	683b      	ldr	r3, [r7, #0]
 8003dee:	431a      	orrs	r2, r3
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	609a      	str	r2, [r3, #8]
}
 8003df4:	bf00      	nop
 8003df6:	370c      	adds	r7, #12
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr

08003e00 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8003e00:	b480      	push	{r7}
 8003e02:	b083      	sub	sp, #12
 8003e04:	af00      	add	r7, sp, #0
 8003e06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	689b      	ldr	r3, [r3, #8]
 8003e0c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	370c      	adds	r7, #12
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b087      	sub	sp, #28
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
 8003e28:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	3360      	adds	r3, #96	; 0x60
 8003e2e:	461a      	mov	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	009b      	lsls	r3, r3, #2
 8003e34:	4413      	add	r3, r2
 8003e36:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003e38:	697b      	ldr	r3, [r7, #20]
 8003e3a:	681a      	ldr	r2, [r3, #0]
 8003e3c:	4b08      	ldr	r3, [pc, #32]	; (8003e60 <LL_ADC_SetOffset+0x44>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	687a      	ldr	r2, [r7, #4]
 8003e42:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 8003e46:	683a      	ldr	r2, [r7, #0]
 8003e48:	430a      	orrs	r2, r1
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e50:	697b      	ldr	r3, [r7, #20]
 8003e52:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8003e54:	bf00      	nop
 8003e56:	371c      	adds	r7, #28
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	03fff000 	.word	0x03fff000

08003e64 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b085      	sub	sp, #20
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	3360      	adds	r3, #96	; 0x60
 8003e72:	461a      	mov	r2, r3
 8003e74:	683b      	ldr	r3, [r7, #0]
 8003e76:	009b      	lsls	r3, r3, #2
 8003e78:	4413      	add	r3, r2
 8003e7a:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8003e84:	4618      	mov	r0, r3
 8003e86:	3714      	adds	r7, #20
 8003e88:	46bd      	mov	sp, r7
 8003e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8e:	4770      	bx	lr

08003e90 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8003e90:	b480      	push	{r7}
 8003e92:	b087      	sub	sp, #28
 8003e94:	af00      	add	r7, sp, #0
 8003e96:	60f8      	str	r0, [r7, #12]
 8003e98:	60b9      	str	r1, [r7, #8]
 8003e9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	3360      	adds	r3, #96	; 0x60
 8003ea0:	461a      	mov	r2, r3
 8003ea2:	68bb      	ldr	r3, [r7, #8]
 8003ea4:	009b      	lsls	r3, r3, #2
 8003ea6:	4413      	add	r3, r2
 8003ea8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	431a      	orrs	r2, r3
 8003eb6:	697b      	ldr	r3, [r7, #20]
 8003eb8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8003eba:	bf00      	nop
 8003ebc:	371c      	adds	r7, #28
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec4:	4770      	bx	lr

08003ec6 <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8003ec6:	b480      	push	{r7}
 8003ec8:	b087      	sub	sp, #28
 8003eca:	af00      	add	r7, sp, #0
 8003ecc:	60f8      	str	r0, [r7, #12]
 8003ece:	60b9      	str	r1, [r7, #8]
 8003ed0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	3330      	adds	r3, #48	; 0x30
 8003ed6:	461a      	mov	r2, r3
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	0a1b      	lsrs	r3, r3, #8
 8003edc:	009b      	lsls	r3, r3, #2
 8003ede:	f003 030c 	and.w	r3, r3, #12
 8003ee2:	4413      	add	r3, r2
 8003ee4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003ee6:	697b      	ldr	r3, [r7, #20]
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	f003 031f 	and.w	r3, r3, #31
 8003ef0:	211f      	movs	r1, #31
 8003ef2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ef6:	43db      	mvns	r3, r3
 8003ef8:	401a      	ands	r2, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	0e9b      	lsrs	r3, r3, #26
 8003efe:	f003 011f 	and.w	r1, r3, #31
 8003f02:	68bb      	ldr	r3, [r7, #8]
 8003f04:	f003 031f 	and.w	r3, r3, #31
 8003f08:	fa01 f303 	lsl.w	r3, r1, r3
 8003f0c:	431a      	orrs	r2, r3
 8003f0e:	697b      	ldr	r3, [r7, #20]
 8003f10:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8003f12:	bf00      	nop
 8003f14:	371c      	adds	r7, #28
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b087      	sub	sp, #28
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	3314      	adds	r3, #20
 8003f2e:	461a      	mov	r2, r3
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	0e5b      	lsrs	r3, r3, #25
 8003f34:	009b      	lsls	r3, r3, #2
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	4413      	add	r3, r2
 8003f3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8003f3e:	697b      	ldr	r3, [r7, #20]
 8003f40:	681a      	ldr	r2, [r3, #0]
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	0d1b      	lsrs	r3, r3, #20
 8003f46:	f003 031f 	and.w	r3, r3, #31
 8003f4a:	2107      	movs	r1, #7
 8003f4c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f50:	43db      	mvns	r3, r3
 8003f52:	401a      	ands	r2, r3
 8003f54:	68bb      	ldr	r3, [r7, #8]
 8003f56:	0d1b      	lsrs	r3, r3, #20
 8003f58:	f003 031f 	and.w	r3, r3, #31
 8003f5c:	6879      	ldr	r1, [r7, #4]
 8003f5e:	fa01 f303 	lsl.w	r3, r1, r3
 8003f62:	431a      	orrs	r2, r3
 8003f64:	697b      	ldr	r3, [r7, #20]
 8003f66:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8003f68:	bf00      	nop
 8003f6a:	371c      	adds	r7, #28
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f72:	4770      	bx	lr

08003f74 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8003f74:	b480      	push	{r7}
 8003f76:	b085      	sub	sp, #20
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003f8c:	43db      	mvns	r3, r3
 8003f8e:	401a      	ands	r2, r3
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f003 0318 	and.w	r3, r3, #24
 8003f96:	4908      	ldr	r1, [pc, #32]	; (8003fb8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8003f98:	40d9      	lsrs	r1, r3
 8003f9a:	68bb      	ldr	r3, [r7, #8]
 8003f9c:	400b      	ands	r3, r1
 8003f9e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fa2:	431a      	orrs	r2, r3
 8003fa4:	68fb      	ldr	r3, [r7, #12]
 8003fa6:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8003faa:	bf00      	nop
 8003fac:	3714      	adds	r7, #20
 8003fae:	46bd      	mov	sp, r7
 8003fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fb4:	4770      	bx	lr
 8003fb6:	bf00      	nop
 8003fb8:	0007ffff 	.word	0x0007ffff

08003fbc <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8003fbc:	b480      	push	{r7}
 8003fbe:	b083      	sub	sp, #12
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8003fcc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003fd0:	687a      	ldr	r2, [r7, #4]
 8003fd2:	6093      	str	r3, [r2, #8]
}
 8003fd4:	bf00      	nop
 8003fd6:	370c      	adds	r7, #12
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr

08003fe0 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	b083      	sub	sp, #12
 8003fe4:	af00      	add	r7, sp, #0
 8003fe6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003ff0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003ff4:	d101      	bne.n	8003ffa <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e000      	b.n	8003ffc <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8003ffa:	2300      	movs	r3, #0
}
 8003ffc:	4618      	mov	r0, r3
 8003ffe:	370c      	adds	r7, #12
 8004000:	46bd      	mov	sp, r7
 8004002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004006:	4770      	bx	lr

08004008 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8004018:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800401c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8004024:	bf00      	nop
 8004026:	370c      	adds	r7, #12
 8004028:	46bd      	mov	sp, r7
 800402a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800402e:	4770      	bx	lr

08004030 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8004030:	b480      	push	{r7}
 8004032:	b083      	sub	sp, #12
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	689b      	ldr	r3, [r3, #8]
 800403c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004040:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004044:	d101      	bne.n	800404a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8004046:	2301      	movs	r3, #1
 8004048:	e000      	b.n	800404c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 800404a:	2300      	movs	r3, #0
}
 800404c:	4618      	mov	r0, r3
 800404e:	370c      	adds	r7, #12
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr

08004058 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8004058:	b480      	push	{r7}
 800405a:	b083      	sub	sp, #12
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	689b      	ldr	r3, [r3, #8]
 8004064:	f003 0301 	and.w	r3, r3, #1
 8004068:	2b01      	cmp	r3, #1
 800406a:	d101      	bne.n	8004070 <LL_ADC_IsEnabled+0x18>
 800406c:	2301      	movs	r3, #1
 800406e:	e000      	b.n	8004072 <LL_ADC_IsEnabled+0x1a>
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	370c      	adds	r7, #12
 8004076:	46bd      	mov	sp, r7
 8004078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800407c:	4770      	bx	lr

0800407e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800407e:	b480      	push	{r7}
 8004080:	b083      	sub	sp, #12
 8004082:	af00      	add	r7, sp, #0
 8004084:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	689b      	ldr	r3, [r3, #8]
 800408a:	f003 0304 	and.w	r3, r3, #4
 800408e:	2b04      	cmp	r3, #4
 8004090:	d101      	bne.n	8004096 <LL_ADC_REG_IsConversionOngoing+0x18>
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	370c      	adds	r7, #12
 800409c:	46bd      	mov	sp, r7
 800409e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a2:	4770      	bx	lr

080040a4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 80040a4:	b480      	push	{r7}
 80040a6:	b083      	sub	sp, #12
 80040a8:	af00      	add	r7, sp, #0
 80040aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	f003 0308 	and.w	r3, r3, #8
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	d101      	bne.n	80040bc <LL_ADC_INJ_IsConversionOngoing+0x18>
 80040b8:	2301      	movs	r3, #1
 80040ba:	e000      	b.n	80040be <LL_ADC_INJ_IsConversionOngoing+0x1a>
 80040bc:	2300      	movs	r3, #0
}
 80040be:	4618      	mov	r0, r3
 80040c0:	370c      	adds	r7, #12
 80040c2:	46bd      	mov	sp, r7
 80040c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c8:	4770      	bx	lr
	...

080040cc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b088      	sub	sp, #32
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 80040d8:	2300      	movs	r3, #0
 80040da:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d101      	bne.n	80040e6 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	e12c      	b.n	8004340 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	691b      	ldr	r3, [r3, #16]
 80040ea:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d109      	bne.n	8004108 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f7ff fb1b 	bl	8003730 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	2200      	movs	r2, #0
 80040fe:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	4618      	mov	r0, r3
 800410e:	f7ff ff67 	bl	8003fe0 <LL_ADC_IsDeepPowerDownEnabled>
 8004112:	4603      	mov	r3, r0
 8004114:	2b00      	cmp	r3, #0
 8004116:	d004      	beq.n	8004122 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	4618      	mov	r0, r3
 800411e:	f7ff ff4d 	bl	8003fbc <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	4618      	mov	r0, r3
 8004128:	f7ff ff82 	bl	8004030 <LL_ADC_IsInternalRegulatorEnabled>
 800412c:	4603      	mov	r3, r0
 800412e:	2b00      	cmp	r3, #0
 8004130:	d115      	bne.n	800415e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4618      	mov	r0, r3
 8004138:	f7ff ff66 	bl	8004008 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 800413c:	4b82      	ldr	r3, [pc, #520]	; (8004348 <HAL_ADC_Init+0x27c>)
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	099b      	lsrs	r3, r3, #6
 8004142:	4a82      	ldr	r2, [pc, #520]	; (800434c <HAL_ADC_Init+0x280>)
 8004144:	fba2 2303 	umull	r2, r3, r2, r3
 8004148:	099b      	lsrs	r3, r3, #6
 800414a:	3301      	adds	r3, #1
 800414c:	005b      	lsls	r3, r3, #1
 800414e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004150:	e002      	b.n	8004158 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	3b01      	subs	r3, #1
 8004156:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f9      	bne.n	8004152 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	4618      	mov	r0, r3
 8004164:	f7ff ff64 	bl	8004030 <LL_ADC_IsInternalRegulatorEnabled>
 8004168:	4603      	mov	r3, r0
 800416a:	2b00      	cmp	r3, #0
 800416c:	d10d      	bne.n	800418a <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004172:	f043 0210 	orr.w	r2, r3, #16
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800417e:	f043 0201 	orr.w	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7ff ff75 	bl	800407e <LL_ADC_REG_IsConversionOngoing>
 8004194:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800419a:	f003 0310 	and.w	r3, r3, #16
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f040 80c5 	bne.w	800432e <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80041a4:	697b      	ldr	r3, [r7, #20]
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	f040 80c1 	bne.w	800432e <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80041b0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 80041b4:	f043 0202 	orr.w	r2, r3, #2
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4618      	mov	r0, r3
 80041c2:	f7ff ff49 	bl	8004058 <LL_ADC_IsEnabled>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10b      	bne.n	80041e4 <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80041cc:	4860      	ldr	r0, [pc, #384]	; (8004350 <HAL_ADC_Init+0x284>)
 80041ce:	f7ff ff43 	bl	8004058 <LL_ADC_IsEnabled>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d105      	bne.n	80041e4 <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	4619      	mov	r1, r3
 80041de:	485d      	ldr	r0, [pc, #372]	; (8004354 <HAL_ADC_Init+0x288>)
 80041e0:	f7ff fde8 	bl	8003db4 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	7e5b      	ldrb	r3, [r3, #25]
 80041e8:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80041ee:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 80041f4:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 80041fa:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004202:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8004204:	4313      	orrs	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800420e:	2b01      	cmp	r3, #1
 8004210:	d106      	bne.n	8004220 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	3b01      	subs	r3, #1
 8004218:	045b      	lsls	r3, r3, #17
 800421a:	69ba      	ldr	r2, [r7, #24]
 800421c:	4313      	orrs	r3, r2
 800421e:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004224:	2b00      	cmp	r3, #0
 8004226:	d009      	beq.n	800423c <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800422c:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004234:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8004236:	69ba      	ldr	r2, [r7, #24]
 8004238:	4313      	orrs	r3, r2
 800423a:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	68da      	ldr	r2, [r3, #12]
 8004242:	4b45      	ldr	r3, [pc, #276]	; (8004358 <HAL_ADC_Init+0x28c>)
 8004244:	4013      	ands	r3, r2
 8004246:	687a      	ldr	r2, [r7, #4]
 8004248:	6812      	ldr	r2, [r2, #0]
 800424a:	69b9      	ldr	r1, [r7, #24]
 800424c:	430b      	orrs	r3, r1
 800424e:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f7ff ff12 	bl	800407e <LL_ADC_REG_IsConversionOngoing>
 800425a:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	4618      	mov	r0, r3
 8004262:	f7ff ff1f 	bl	80040a4 <LL_ADC_INJ_IsConversionOngoing>
 8004266:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8004268:	693b      	ldr	r3, [r7, #16]
 800426a:	2b00      	cmp	r3, #0
 800426c:	d13d      	bne.n	80042ea <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	2b00      	cmp	r3, #0
 8004272:	d13a      	bne.n	80042ea <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004278:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8004280:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8004282:	4313      	orrs	r3, r2
 8004284:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	68db      	ldr	r3, [r3, #12]
 800428c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004290:	f023 0302 	bic.w	r3, r3, #2
 8004294:	687a      	ldr	r2, [r7, #4]
 8004296:	6812      	ldr	r2, [r2, #0]
 8004298:	69b9      	ldr	r1, [r7, #24]
 800429a:	430b      	orrs	r3, r1
 800429c:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80042a4:	2b01      	cmp	r3, #1
 80042a6:	d118      	bne.n	80042da <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	691b      	ldr	r3, [r3, #16]
 80042ae:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80042b2:	f023 0304 	bic.w	r3, r3, #4
 80042b6:	687a      	ldr	r2, [r7, #4]
 80042b8:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 80042ba:	687a      	ldr	r2, [r7, #4]
 80042bc:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80042be:	4311      	orrs	r1, r2
 80042c0:	687a      	ldr	r2, [r7, #4]
 80042c2:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80042c4:	4311      	orrs	r1, r2
 80042c6:	687a      	ldr	r2, [r7, #4]
 80042c8:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80042ca:	430a      	orrs	r2, r1
 80042cc:	431a      	orrs	r2, r3
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f042 0201 	orr.w	r2, r2, #1
 80042d6:	611a      	str	r2, [r3, #16]
 80042d8:	e007      	b.n	80042ea <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	691a      	ldr	r2, [r3, #16]
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	f022 0201 	bic.w	r2, r2, #1
 80042e8:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	691b      	ldr	r3, [r3, #16]
 80042ee:	2b01      	cmp	r3, #1
 80042f0:	d10c      	bne.n	800430c <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80042f8:	f023 010f 	bic.w	r1, r3, #15
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	69db      	ldr	r3, [r3, #28]
 8004300:	1e5a      	subs	r2, r3, #1
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	430a      	orrs	r2, r1
 8004308:	631a      	str	r2, [r3, #48]	; 0x30
 800430a:	e007      	b.n	800431c <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f022 020f 	bic.w	r2, r2, #15
 800431a:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004320:	f023 0303 	bic.w	r3, r3, #3
 8004324:	f043 0201 	orr.w	r2, r3, #1
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	655a      	str	r2, [r3, #84]	; 0x54
 800432c:	e007      	b.n	800433e <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004332:	f043 0210 	orr.w	r2, r3, #16
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 800433a:	2301      	movs	r3, #1
 800433c:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800433e:	7ffb      	ldrb	r3, [r7, #31]
}
 8004340:	4618      	mov	r0, r3
 8004342:	3720      	adds	r7, #32
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}
 8004348:	20000034 	.word	0x20000034
 800434c:	053e2d63 	.word	0x053e2d63
 8004350:	50040000 	.word	0x50040000
 8004354:	50040300 	.word	0x50040300
 8004358:	fff0c007 	.word	0xfff0c007

0800435c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b0b6      	sub	sp, #216	; 0xd8
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004366:	2300      	movs	r3, #0
 8004368:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004376:	2b01      	cmp	r3, #1
 8004378:	d101      	bne.n	800437e <HAL_ADC_ConfigChannel+0x22>
 800437a:	2302      	movs	r3, #2
 800437c:	e3b9      	b.n	8004af2 <HAL_ADC_ConfigChannel+0x796>
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	2201      	movs	r2, #1
 8004382:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	4618      	mov	r0, r3
 800438c:	f7ff fe77 	bl	800407e <LL_ADC_REG_IsConversionOngoing>
 8004390:	4603      	mov	r3, r0
 8004392:	2b00      	cmp	r3, #0
 8004394:	f040 839e 	bne.w	8004ad4 <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	2b05      	cmp	r3, #5
 800439e:	d824      	bhi.n	80043ea <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	685b      	ldr	r3, [r3, #4]
 80043a4:	3b02      	subs	r3, #2
 80043a6:	2b03      	cmp	r3, #3
 80043a8:	d81b      	bhi.n	80043e2 <HAL_ADC_ConfigChannel+0x86>
 80043aa:	a201      	add	r2, pc, #4	; (adr r2, 80043b0 <HAL_ADC_ConfigChannel+0x54>)
 80043ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043b0:	080043c1 	.word	0x080043c1
 80043b4:	080043c9 	.word	0x080043c9
 80043b8:	080043d1 	.word	0x080043d1
 80043bc:	080043d9 	.word	0x080043d9
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	220c      	movs	r2, #12
 80043c4:	605a      	str	r2, [r3, #4]
          break;
 80043c6:	e011      	b.n	80043ec <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	2212      	movs	r2, #18
 80043cc:	605a      	str	r2, [r3, #4]
          break;
 80043ce:	e00d      	b.n	80043ec <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	2218      	movs	r2, #24
 80043d4:	605a      	str	r2, [r3, #4]
          break;
 80043d6:	e009      	b.n	80043ec <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80043de:	605a      	str	r2, [r3, #4]
          break;
 80043e0:	e004      	b.n	80043ec <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	2206      	movs	r2, #6
 80043e6:	605a      	str	r2, [r3, #4]
          break;
 80043e8:	e000      	b.n	80043ec <HAL_ADC_ConfigChannel+0x90>
      }
    }
 80043ea:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6818      	ldr	r0, [r3, #0]
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	6859      	ldr	r1, [r3, #4]
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	461a      	mov	r2, r3
 80043fa:	f7ff fd64 	bl	8003ec6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	4618      	mov	r0, r3
 8004404:	f7ff fe3b 	bl	800407e <LL_ADC_REG_IsConversionOngoing>
 8004408:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	4618      	mov	r0, r3
 8004412:	f7ff fe47 	bl	80040a4 <LL_ADC_INJ_IsConversionOngoing>
 8004416:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800441a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800441e:	2b00      	cmp	r3, #0
 8004420:	f040 81a6 	bne.w	8004770 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8004424:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004428:	2b00      	cmp	r3, #0
 800442a:	f040 81a1 	bne.w	8004770 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6818      	ldr	r0, [r3, #0]
 8004432:	683b      	ldr	r3, [r7, #0]
 8004434:	6819      	ldr	r1, [r3, #0]
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	689b      	ldr	r3, [r3, #8]
 800443a:	461a      	mov	r2, r3
 800443c:	f7ff fd6f 	bl	8003f1e <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	695a      	ldr	r2, [r3, #20]
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	08db      	lsrs	r3, r3, #3
 800444c:	f003 0303 	and.w	r3, r3, #3
 8004450:	005b      	lsls	r3, r3, #1
 8004452:	fa02 f303 	lsl.w	r3, r2, r3
 8004456:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	691b      	ldr	r3, [r3, #16]
 800445e:	2b04      	cmp	r3, #4
 8004460:	d00a      	beq.n	8004478 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6818      	ldr	r0, [r3, #0]
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	6919      	ldr	r1, [r3, #16]
 800446a:	683b      	ldr	r3, [r7, #0]
 800446c:	681a      	ldr	r2, [r3, #0]
 800446e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004472:	f7ff fcd3 	bl	8003e1c <LL_ADC_SetOffset>
 8004476:	e17b      	b.n	8004770 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	2100      	movs	r1, #0
 800447e:	4618      	mov	r0, r3
 8004480:	f7ff fcf0 	bl	8003e64 <LL_ADC_GetOffsetChannel>
 8004484:	4603      	mov	r3, r0
 8004486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800448a:	2b00      	cmp	r3, #0
 800448c:	d10a      	bne.n	80044a4 <HAL_ADC_ConfigChannel+0x148>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	2100      	movs	r1, #0
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff fce5 	bl	8003e64 <LL_ADC_GetOffsetChannel>
 800449a:	4603      	mov	r3, r0
 800449c:	0e9b      	lsrs	r3, r3, #26
 800449e:	f003 021f 	and.w	r2, r3, #31
 80044a2:	e01e      	b.n	80044e2 <HAL_ADC_ConfigChannel+0x186>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	2100      	movs	r1, #0
 80044aa:	4618      	mov	r0, r3
 80044ac:	f7ff fcda 	bl	8003e64 <LL_ADC_GetOffsetChannel>
 80044b0:	4603      	mov	r3, r0
 80044b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044b6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80044ba:	fa93 f3a3 	rbit	r3, r3
 80044be:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80044c2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80044c6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80044ca:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044ce:	2b00      	cmp	r3, #0
 80044d0:	d101      	bne.n	80044d6 <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 80044d2:	2320      	movs	r3, #32
 80044d4:	e004      	b.n	80044e0 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 80044d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80044da:	fab3 f383 	clz	r3, r3
 80044de:	b2db      	uxtb	r3, r3
 80044e0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d105      	bne.n	80044fa <HAL_ADC_ConfigChannel+0x19e>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	0e9b      	lsrs	r3, r3, #26
 80044f4:	f003 031f 	and.w	r3, r3, #31
 80044f8:	e018      	b.n	800452c <HAL_ADC_ConfigChannel+0x1d0>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004502:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8004506:	fa93 f3a3 	rbit	r3, r3
 800450a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800450e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8004512:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8004516:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800451a:	2b00      	cmp	r3, #0
 800451c:	d101      	bne.n	8004522 <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 800451e:	2320      	movs	r3, #32
 8004520:	e004      	b.n	800452c <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8004522:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8004526:	fab3 f383 	clz	r3, r3
 800452a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800452c:	429a      	cmp	r2, r3
 800452e:	d106      	bne.n	800453e <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	2200      	movs	r2, #0
 8004536:	2100      	movs	r1, #0
 8004538:	4618      	mov	r0, r3
 800453a:	f7ff fca9 	bl	8003e90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2101      	movs	r1, #1
 8004544:	4618      	mov	r0, r3
 8004546:	f7ff fc8d 	bl	8003e64 <LL_ADC_GetOffsetChannel>
 800454a:	4603      	mov	r3, r0
 800454c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004550:	2b00      	cmp	r3, #0
 8004552:	d10a      	bne.n	800456a <HAL_ADC_ConfigChannel+0x20e>
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2101      	movs	r1, #1
 800455a:	4618      	mov	r0, r3
 800455c:	f7ff fc82 	bl	8003e64 <LL_ADC_GetOffsetChannel>
 8004560:	4603      	mov	r3, r0
 8004562:	0e9b      	lsrs	r3, r3, #26
 8004564:	f003 021f 	and.w	r2, r3, #31
 8004568:	e01e      	b.n	80045a8 <HAL_ADC_ConfigChannel+0x24c>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	2101      	movs	r1, #1
 8004570:	4618      	mov	r0, r3
 8004572:	f7ff fc77 	bl	8003e64 <LL_ADC_GetOffsetChannel>
 8004576:	4603      	mov	r3, r0
 8004578:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800457c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8004580:	fa93 f3a3 	rbit	r3, r3
 8004584:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8004588:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800458c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8004590:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8004594:	2b00      	cmp	r3, #0
 8004596:	d101      	bne.n	800459c <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8004598:	2320      	movs	r3, #32
 800459a:	e004      	b.n	80045a6 <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 800459c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80045a0:	fab3 f383 	clz	r3, r3
 80045a4:	b2db      	uxtb	r3, r3
 80045a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d105      	bne.n	80045c0 <HAL_ADC_ConfigChannel+0x264>
 80045b4:	683b      	ldr	r3, [r7, #0]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	0e9b      	lsrs	r3, r3, #26
 80045ba:	f003 031f 	and.w	r3, r3, #31
 80045be:	e018      	b.n	80045f2 <HAL_ADC_ConfigChannel+0x296>
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80045cc:	fa93 f3a3 	rbit	r3, r3
 80045d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80045d4:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80045d8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80045dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d101      	bne.n	80045e8 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 80045e4:	2320      	movs	r3, #32
 80045e6:	e004      	b.n	80045f2 <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 80045e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80045ec:	fab3 f383 	clz	r3, r3
 80045f0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80045f2:	429a      	cmp	r2, r3
 80045f4:	d106      	bne.n	8004604 <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	2200      	movs	r2, #0
 80045fc:	2101      	movs	r1, #1
 80045fe:	4618      	mov	r0, r3
 8004600:	f7ff fc46 	bl	8003e90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	2102      	movs	r1, #2
 800460a:	4618      	mov	r0, r3
 800460c:	f7ff fc2a 	bl	8003e64 <LL_ADC_GetOffsetChannel>
 8004610:	4603      	mov	r3, r0
 8004612:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004616:	2b00      	cmp	r3, #0
 8004618:	d10a      	bne.n	8004630 <HAL_ADC_ConfigChannel+0x2d4>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	2102      	movs	r1, #2
 8004620:	4618      	mov	r0, r3
 8004622:	f7ff fc1f 	bl	8003e64 <LL_ADC_GetOffsetChannel>
 8004626:	4603      	mov	r3, r0
 8004628:	0e9b      	lsrs	r3, r3, #26
 800462a:	f003 021f 	and.w	r2, r3, #31
 800462e:	e01e      	b.n	800466e <HAL_ADC_ConfigChannel+0x312>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	2102      	movs	r1, #2
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fc14 	bl	8003e64 <LL_ADC_GetOffsetChannel>
 800463c:	4603      	mov	r3, r0
 800463e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004642:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004646:	fa93 f3a3 	rbit	r3, r3
 800464a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800464e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004652:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8004656:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800465a:	2b00      	cmp	r3, #0
 800465c:	d101      	bne.n	8004662 <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 800465e:	2320      	movs	r3, #32
 8004660:	e004      	b.n	800466c <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8004662:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8004666:	fab3 f383 	clz	r3, r3
 800466a:	b2db      	uxtb	r3, r3
 800466c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800466e:	683b      	ldr	r3, [r7, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004676:	2b00      	cmp	r3, #0
 8004678:	d105      	bne.n	8004686 <HAL_ADC_ConfigChannel+0x32a>
 800467a:	683b      	ldr	r3, [r7, #0]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	0e9b      	lsrs	r3, r3, #26
 8004680:	f003 031f 	and.w	r3, r3, #31
 8004684:	e016      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x358>
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800468e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8004692:	fa93 f3a3 	rbit	r3, r3
 8004696:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8004698:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800469a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800469e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d101      	bne.n	80046aa <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 80046a6:	2320      	movs	r3, #32
 80046a8:	e004      	b.n	80046b4 <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 80046aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80046ae:	fab3 f383 	clz	r3, r3
 80046b2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80046b4:	429a      	cmp	r2, r3
 80046b6:	d106      	bne.n	80046c6 <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	2200      	movs	r2, #0
 80046be:	2102      	movs	r1, #2
 80046c0:	4618      	mov	r0, r3
 80046c2:	f7ff fbe5 	bl	8003e90 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	2103      	movs	r1, #3
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fbc9 	bl	8003e64 <LL_ADC_GetOffsetChannel>
 80046d2:	4603      	mov	r3, r0
 80046d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d10a      	bne.n	80046f2 <HAL_ADC_ConfigChannel+0x396>
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	2103      	movs	r1, #3
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff fbbe 	bl	8003e64 <LL_ADC_GetOffsetChannel>
 80046e8:	4603      	mov	r3, r0
 80046ea:	0e9b      	lsrs	r3, r3, #26
 80046ec:	f003 021f 	and.w	r2, r3, #31
 80046f0:	e017      	b.n	8004722 <HAL_ADC_ConfigChannel+0x3c6>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	2103      	movs	r1, #3
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff fbb3 	bl	8003e64 <LL_ADC_GetOffsetChannel>
 80046fe:	4603      	mov	r3, r0
 8004700:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004702:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004704:	fa93 f3a3 	rbit	r3, r3
 8004708:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 800470a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800470c:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800470e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004710:	2b00      	cmp	r3, #0
 8004712:	d101      	bne.n	8004718 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8004714:	2320      	movs	r3, #32
 8004716:	e003      	b.n	8004720 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8004718:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800471a:	fab3 f383 	clz	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800472a:	2b00      	cmp	r3, #0
 800472c:	d105      	bne.n	800473a <HAL_ADC_ConfigChannel+0x3de>
 800472e:	683b      	ldr	r3, [r7, #0]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	0e9b      	lsrs	r3, r3, #26
 8004734:	f003 031f 	and.w	r3, r3, #31
 8004738:	e011      	b.n	800475e <HAL_ADC_ConfigChannel+0x402>
 800473a:	683b      	ldr	r3, [r7, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004740:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004742:	fa93 f3a3 	rbit	r3, r3
 8004746:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8004748:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800474a:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 800474c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8004752:	2320      	movs	r3, #32
 8004754:	e003      	b.n	800475e <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8004756:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004758:	fab3 f383 	clz	r3, r3
 800475c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800475e:	429a      	cmp	r2, r3
 8004760:	d106      	bne.n	8004770 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2200      	movs	r2, #0
 8004768:	2103      	movs	r1, #3
 800476a:	4618      	mov	r0, r3
 800476c:	f7ff fb90 	bl	8003e90 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	4618      	mov	r0, r3
 8004776:	f7ff fc6f 	bl	8004058 <LL_ADC_IsEnabled>
 800477a:	4603      	mov	r3, r0
 800477c:	2b00      	cmp	r3, #0
 800477e:	f040 813f 	bne.w	8004a00 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6818      	ldr	r0, [r3, #0]
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	6819      	ldr	r1, [r3, #0]
 800478a:	683b      	ldr	r3, [r7, #0]
 800478c:	68db      	ldr	r3, [r3, #12]
 800478e:	461a      	mov	r2, r3
 8004790:	f7ff fbf0 	bl	8003f74 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8004794:	683b      	ldr	r3, [r7, #0]
 8004796:	68db      	ldr	r3, [r3, #12]
 8004798:	4a8e      	ldr	r2, [pc, #568]	; (80049d4 <HAL_ADC_ConfigChannel+0x678>)
 800479a:	4293      	cmp	r3, r2
 800479c:	f040 8130 	bne.w	8004a00 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d10b      	bne.n	80047c8 <HAL_ADC_ConfigChannel+0x46c>
 80047b0:	683b      	ldr	r3, [r7, #0]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	0e9b      	lsrs	r3, r3, #26
 80047b6:	3301      	adds	r3, #1
 80047b8:	f003 031f 	and.w	r3, r3, #31
 80047bc:	2b09      	cmp	r3, #9
 80047be:	bf94      	ite	ls
 80047c0:	2301      	movls	r3, #1
 80047c2:	2300      	movhi	r3, #0
 80047c4:	b2db      	uxtb	r3, r3
 80047c6:	e019      	b.n	80047fc <HAL_ADC_ConfigChannel+0x4a0>
 80047c8:	683b      	ldr	r3, [r7, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80047d0:	fa93 f3a3 	rbit	r3, r3
 80047d4:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80047d6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80047d8:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80047da:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d101      	bne.n	80047e4 <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 80047e0:	2320      	movs	r3, #32
 80047e2:	e003      	b.n	80047ec <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 80047e4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80047e6:	fab3 f383 	clz	r3, r3
 80047ea:	b2db      	uxtb	r3, r3
 80047ec:	3301      	adds	r3, #1
 80047ee:	f003 031f 	and.w	r3, r3, #31
 80047f2:	2b09      	cmp	r3, #9
 80047f4:	bf94      	ite	ls
 80047f6:	2301      	movls	r3, #1
 80047f8:	2300      	movhi	r3, #0
 80047fa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d079      	beq.n	80048f4 <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004808:	2b00      	cmp	r3, #0
 800480a:	d107      	bne.n	800481c <HAL_ADC_ConfigChannel+0x4c0>
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	0e9b      	lsrs	r3, r3, #26
 8004812:	3301      	adds	r3, #1
 8004814:	069b      	lsls	r3, r3, #26
 8004816:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800481a:	e015      	b.n	8004848 <HAL_ADC_ConfigChannel+0x4ec>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004822:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004824:	fa93 f3a3 	rbit	r3, r3
 8004828:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 800482a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800482c:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800482e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8004834:	2320      	movs	r3, #32
 8004836:	e003      	b.n	8004840 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8004838:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800483a:	fab3 f383 	clz	r3, r3
 800483e:	b2db      	uxtb	r3, r3
 8004840:	3301      	adds	r3, #1
 8004842:	069b      	lsls	r3, r3, #26
 8004844:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004850:	2b00      	cmp	r3, #0
 8004852:	d109      	bne.n	8004868 <HAL_ADC_ConfigChannel+0x50c>
 8004854:	683b      	ldr	r3, [r7, #0]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	0e9b      	lsrs	r3, r3, #26
 800485a:	3301      	adds	r3, #1
 800485c:	f003 031f 	and.w	r3, r3, #31
 8004860:	2101      	movs	r1, #1
 8004862:	fa01 f303 	lsl.w	r3, r1, r3
 8004866:	e017      	b.n	8004898 <HAL_ADC_ConfigChannel+0x53c>
 8004868:	683b      	ldr	r3, [r7, #0]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800486e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004870:	fa93 f3a3 	rbit	r3, r3
 8004874:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8004876:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004878:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800487a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800487c:	2b00      	cmp	r3, #0
 800487e:	d101      	bne.n	8004884 <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8004880:	2320      	movs	r3, #32
 8004882:	e003      	b.n	800488c <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 8004884:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004886:	fab3 f383 	clz	r3, r3
 800488a:	b2db      	uxtb	r3, r3
 800488c:	3301      	adds	r3, #1
 800488e:	f003 031f 	and.w	r3, r3, #31
 8004892:	2101      	movs	r1, #1
 8004894:	fa01 f303 	lsl.w	r3, r1, r3
 8004898:	ea42 0103 	orr.w	r1, r2, r3
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d10a      	bne.n	80048be <HAL_ADC_ConfigChannel+0x562>
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	0e9b      	lsrs	r3, r3, #26
 80048ae:	3301      	adds	r3, #1
 80048b0:	f003 021f 	and.w	r2, r3, #31
 80048b4:	4613      	mov	r3, r2
 80048b6:	005b      	lsls	r3, r3, #1
 80048b8:	4413      	add	r3, r2
 80048ba:	051b      	lsls	r3, r3, #20
 80048bc:	e018      	b.n	80048f0 <HAL_ADC_ConfigChannel+0x594>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80048c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048c6:	fa93 f3a3 	rbit	r3, r3
 80048ca:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80048cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80048ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80048d0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d101      	bne.n	80048da <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 80048d6:	2320      	movs	r3, #32
 80048d8:	e003      	b.n	80048e2 <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 80048da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80048dc:	fab3 f383 	clz	r3, r3
 80048e0:	b2db      	uxtb	r3, r3
 80048e2:	3301      	adds	r3, #1
 80048e4:	f003 021f 	and.w	r2, r3, #31
 80048e8:	4613      	mov	r3, r2
 80048ea:	005b      	lsls	r3, r3, #1
 80048ec:	4413      	add	r3, r2
 80048ee:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80048f0:	430b      	orrs	r3, r1
 80048f2:	e080      	b.n	80049f6 <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80048f4:	683b      	ldr	r3, [r7, #0]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d107      	bne.n	8004910 <HAL_ADC_ConfigChannel+0x5b4>
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	0e9b      	lsrs	r3, r3, #26
 8004906:	3301      	adds	r3, #1
 8004908:	069b      	lsls	r3, r3, #26
 800490a:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800490e:	e015      	b.n	800493c <HAL_ADC_ConfigChannel+0x5e0>
 8004910:	683b      	ldr	r3, [r7, #0]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004918:	fa93 f3a3 	rbit	r3, r3
 800491c:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800491e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004920:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 8004922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004924:	2b00      	cmp	r3, #0
 8004926:	d101      	bne.n	800492c <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 8004928:	2320      	movs	r3, #32
 800492a:	e003      	b.n	8004934 <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	fab3 f383 	clz	r3, r3
 8004932:	b2db      	uxtb	r3, r3
 8004934:	3301      	adds	r3, #1
 8004936:	069b      	lsls	r3, r3, #26
 8004938:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004944:	2b00      	cmp	r3, #0
 8004946:	d109      	bne.n	800495c <HAL_ADC_ConfigChannel+0x600>
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	0e9b      	lsrs	r3, r3, #26
 800494e:	3301      	adds	r3, #1
 8004950:	f003 031f 	and.w	r3, r3, #31
 8004954:	2101      	movs	r1, #1
 8004956:	fa01 f303 	lsl.w	r3, r1, r3
 800495a:	e017      	b.n	800498c <HAL_ADC_ConfigChannel+0x630>
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004962:	6a3b      	ldr	r3, [r7, #32]
 8004964:	fa93 f3a3 	rbit	r3, r3
 8004968:	61fb      	str	r3, [r7, #28]
  return result;
 800496a:	69fb      	ldr	r3, [r7, #28]
 800496c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800496e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004970:	2b00      	cmp	r3, #0
 8004972:	d101      	bne.n	8004978 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 8004974:	2320      	movs	r3, #32
 8004976:	e003      	b.n	8004980 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8004978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800497a:	fab3 f383 	clz	r3, r3
 800497e:	b2db      	uxtb	r3, r3
 8004980:	3301      	adds	r3, #1
 8004982:	f003 031f 	and.w	r3, r3, #31
 8004986:	2101      	movs	r1, #1
 8004988:	fa01 f303 	lsl.w	r3, r1, r3
 800498c:	ea42 0103 	orr.w	r1, r2, r3
 8004990:	683b      	ldr	r3, [r7, #0]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004998:	2b00      	cmp	r3, #0
 800499a:	d10d      	bne.n	80049b8 <HAL_ADC_ConfigChannel+0x65c>
 800499c:	683b      	ldr	r3, [r7, #0]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	0e9b      	lsrs	r3, r3, #26
 80049a2:	3301      	adds	r3, #1
 80049a4:	f003 021f 	and.w	r2, r3, #31
 80049a8:	4613      	mov	r3, r2
 80049aa:	005b      	lsls	r3, r3, #1
 80049ac:	4413      	add	r3, r2
 80049ae:	3b1e      	subs	r3, #30
 80049b0:	051b      	lsls	r3, r3, #20
 80049b2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80049b6:	e01d      	b.n	80049f4 <HAL_ADC_ConfigChannel+0x698>
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80049be:	697b      	ldr	r3, [r7, #20]
 80049c0:	fa93 f3a3 	rbit	r3, r3
 80049c4:	613b      	str	r3, [r7, #16]
  return result;
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80049ca:	69bb      	ldr	r3, [r7, #24]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d103      	bne.n	80049d8 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 80049d0:	2320      	movs	r3, #32
 80049d2:	e005      	b.n	80049e0 <HAL_ADC_ConfigChannel+0x684>
 80049d4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 80049d8:	69bb      	ldr	r3, [r7, #24]
 80049da:	fab3 f383 	clz	r3, r3
 80049de:	b2db      	uxtb	r3, r3
 80049e0:	3301      	adds	r3, #1
 80049e2:	f003 021f 	and.w	r2, r3, #31
 80049e6:	4613      	mov	r3, r2
 80049e8:	005b      	lsls	r3, r3, #1
 80049ea:	4413      	add	r3, r2
 80049ec:	3b1e      	subs	r3, #30
 80049ee:	051b      	lsls	r3, r3, #20
 80049f0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80049f4:	430b      	orrs	r3, r1
 80049f6:	683a      	ldr	r2, [r7, #0]
 80049f8:	6892      	ldr	r2, [r2, #8]
 80049fa:	4619      	mov	r1, r3
 80049fc:	f7ff fa8f 	bl	8003f1e <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8004a00:	683b      	ldr	r3, [r7, #0]
 8004a02:	681a      	ldr	r2, [r3, #0]
 8004a04:	4b3d      	ldr	r3, [pc, #244]	; (8004afc <HAL_ADC_ConfigChannel+0x7a0>)
 8004a06:	4013      	ands	r3, r2
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d06c      	beq.n	8004ae6 <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8004a0c:	483c      	ldr	r0, [pc, #240]	; (8004b00 <HAL_ADC_ConfigChannel+0x7a4>)
 8004a0e:	f7ff f9f7 	bl	8003e00 <LL_ADC_GetCommonPathInternalCh>
 8004a12:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a3a      	ldr	r2, [pc, #232]	; (8004b04 <HAL_ADC_ConfigChannel+0x7a8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d127      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8004a20:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d121      	bne.n	8004a70 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	4a35      	ldr	r2, [pc, #212]	; (8004b08 <HAL_ADC_ConfigChannel+0x7ac>)
 8004a32:	4293      	cmp	r3, r2
 8004a34:	d157      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a36:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a3a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004a3e:	4619      	mov	r1, r3
 8004a40:	482f      	ldr	r0, [pc, #188]	; (8004b00 <HAL_ADC_ConfigChannel+0x7a4>)
 8004a42:	f7ff f9ca 	bl	8003dda <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8004a46:	4b31      	ldr	r3, [pc, #196]	; (8004b0c <HAL_ADC_ConfigChannel+0x7b0>)
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	099b      	lsrs	r3, r3, #6
 8004a4c:	4a30      	ldr	r2, [pc, #192]	; (8004b10 <HAL_ADC_ConfigChannel+0x7b4>)
 8004a4e:	fba2 2303 	umull	r2, r3, r2, r3
 8004a52:	099b      	lsrs	r3, r3, #6
 8004a54:	1c5a      	adds	r2, r3, #1
 8004a56:	4613      	mov	r3, r2
 8004a58:	005b      	lsls	r3, r3, #1
 8004a5a:	4413      	add	r3, r2
 8004a5c:	009b      	lsls	r3, r3, #2
 8004a5e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a60:	e002      	b.n	8004a68 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	3b01      	subs	r3, #1
 8004a66:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d1f9      	bne.n	8004a62 <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8004a6e:	e03a      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	4a27      	ldr	r2, [pc, #156]	; (8004b14 <HAL_ADC_ConfigChannel+0x7b8>)
 8004a76:	4293      	cmp	r3, r2
 8004a78:	d113      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x746>
 8004a7a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a7e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d10d      	bne.n	8004aa2 <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	4a1f      	ldr	r2, [pc, #124]	; (8004b08 <HAL_ADC_ConfigChannel+0x7ac>)
 8004a8c:	4293      	cmp	r3, r2
 8004a8e:	d12a      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004a90:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004a94:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4819      	ldr	r0, [pc, #100]	; (8004b00 <HAL_ADC_ConfigChannel+0x7a4>)
 8004a9c:	f7ff f99d 	bl	8003dda <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8004aa0:	e021      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8004aa2:	683b      	ldr	r3, [r7, #0]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	4a1c      	ldr	r2, [pc, #112]	; (8004b18 <HAL_ADC_ConfigChannel+0x7bc>)
 8004aa8:	4293      	cmp	r3, r2
 8004aaa:	d11c      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8004aac:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ab0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d116      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a12      	ldr	r2, [pc, #72]	; (8004b08 <HAL_ADC_ConfigChannel+0x7ac>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d111      	bne.n	8004ae6 <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8004ac2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8004ac6:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8004aca:	4619      	mov	r1, r3
 8004acc:	480c      	ldr	r0, [pc, #48]	; (8004b00 <HAL_ADC_ConfigChannel+0x7a4>)
 8004ace:	f7ff f984 	bl	8003dda <LL_ADC_SetCommonPathInternalCh>
 8004ad2:	e008      	b.n	8004ae6 <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ad8:	f043 0220 	orr.w	r2, r3, #32
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8004ae0:	2301      	movs	r3, #1
 8004ae2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8004aee:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	37d8      	adds	r7, #216	; 0xd8
 8004af6:	46bd      	mov	sp, r7
 8004af8:	bd80      	pop	{r7, pc}
 8004afa:	bf00      	nop
 8004afc:	80080000 	.word	0x80080000
 8004b00:	50040300 	.word	0x50040300
 8004b04:	c7520000 	.word	0xc7520000
 8004b08:	50040000 	.word	0x50040000
 8004b0c:	20000034 	.word	0x20000034
 8004b10:	053e2d63 	.word	0x053e2d63
 8004b14:	cb840000 	.word	0xcb840000
 8004b18:	80000001 	.word	0x80000001

08004b1c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8004b1c:	b580      	push	{r7, lr}
 8004b1e:	b084      	sub	sp, #16
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d101      	bne.n	8004b2e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8004b2a:	2301      	movs	r3, #1
 8004b2c:	e0ed      	b.n	8004d0a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	f893 3020 	ldrb.w	r3, [r3, #32]
 8004b34:	b2db      	uxtb	r3, r3
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d102      	bne.n	8004b40 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8004b3a:	6878      	ldr	r0, [r7, #4]
 8004b3c:	f7fe fe5c 	bl	80037f8 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f042 0201 	orr.w	r2, r2, #1
 8004b4e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b50:	f7ff f900 	bl	8003d54 <HAL_GetTick>
 8004b54:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b56:	e012      	b.n	8004b7e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004b58:	f7ff f8fc 	bl	8003d54 <HAL_GetTick>
 8004b5c:	4602      	mov	r2, r0
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	2b0a      	cmp	r3, #10
 8004b64:	d90b      	bls.n	8004b7e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	2205      	movs	r2, #5
 8004b76:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004b7a:	2301      	movs	r3, #1
 8004b7c:	e0c5      	b.n	8004d0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	685b      	ldr	r3, [r3, #4]
 8004b84:	f003 0301 	and.w	r3, r3, #1
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d0e5      	beq.n	8004b58 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681a      	ldr	r2, [r3, #0]
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	f022 0202 	bic.w	r2, r2, #2
 8004b9a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004b9c:	f7ff f8da 	bl	8003d54 <HAL_GetTick>
 8004ba0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004ba2:	e012      	b.n	8004bca <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8004ba4:	f7ff f8d6 	bl	8003d54 <HAL_GetTick>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	2b0a      	cmp	r3, #10
 8004bb0:	d90b      	bls.n	8004bca <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2205      	movs	r2, #5
 8004bc2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8004bc6:	2301      	movs	r3, #1
 8004bc8:	e09f      	b.n	8004d0a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	f003 0302 	and.w	r3, r3, #2
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e5      	bne.n	8004ba4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	7e1b      	ldrb	r3, [r3, #24]
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d108      	bne.n	8004bf2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8004bee:	601a      	str	r2, [r3, #0]
 8004bf0:	e007      	b.n	8004c02 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	681a      	ldr	r2, [r3, #0]
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004c00:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	7e5b      	ldrb	r3, [r3, #25]
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d108      	bne.n	8004c1c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	681a      	ldr	r2, [r3, #0]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004c18:	601a      	str	r2, [r3, #0]
 8004c1a:	e007      	b.n	8004c2c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	681a      	ldr	r2, [r3, #0]
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c2a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	7e9b      	ldrb	r3, [r3, #26]
 8004c30:	2b01      	cmp	r3, #1
 8004c32:	d108      	bne.n	8004c46 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f042 0220 	orr.w	r2, r2, #32
 8004c42:	601a      	str	r2, [r3, #0]
 8004c44:	e007      	b.n	8004c56 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	681a      	ldr	r2, [r3, #0]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	f022 0220 	bic.w	r2, r2, #32
 8004c54:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	7edb      	ldrb	r3, [r3, #27]
 8004c5a:	2b01      	cmp	r3, #1
 8004c5c:	d108      	bne.n	8004c70 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	681a      	ldr	r2, [r3, #0]
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	f022 0210 	bic.w	r2, r2, #16
 8004c6c:	601a      	str	r2, [r3, #0]
 8004c6e:	e007      	b.n	8004c80 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f042 0210 	orr.w	r2, r2, #16
 8004c7e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	7f1b      	ldrb	r3, [r3, #28]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d108      	bne.n	8004c9a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f042 0208 	orr.w	r2, r2, #8
 8004c96:	601a      	str	r2, [r3, #0]
 8004c98:	e007      	b.n	8004caa <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	681a      	ldr	r2, [r3, #0]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f022 0208 	bic.w	r2, r2, #8
 8004ca8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	7f5b      	ldrb	r3, [r3, #29]
 8004cae:	2b01      	cmp	r3, #1
 8004cb0:	d108      	bne.n	8004cc4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	681a      	ldr	r2, [r3, #0]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	f042 0204 	orr.w	r2, r2, #4
 8004cc0:	601a      	str	r2, [r3, #0]
 8004cc2:	e007      	b.n	8004cd4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	681b      	ldr	r3, [r3, #0]
 8004cce:	f022 0204 	bic.w	r2, r2, #4
 8004cd2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	689a      	ldr	r2, [r3, #8]
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	68db      	ldr	r3, [r3, #12]
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	431a      	orrs	r2, r3
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	695b      	ldr	r3, [r3, #20]
 8004ce8:	ea42 0103 	orr.w	r1, r2, r3
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	685b      	ldr	r3, [r3, #4]
 8004cf0:	1e5a      	subs	r2, r3, #1
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	430a      	orrs	r2, r1
 8004cf8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	2201      	movs	r2, #1
 8004d04:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	3710      	adds	r7, #16
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	bd80      	pop	{r7, pc}
	...

08004d14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	f003 0307 	and.w	r3, r3, #7
 8004d22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <__NVIC_SetPriorityGrouping+0x44>)
 8004d26:	68db      	ldr	r3, [r3, #12]
 8004d28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004d2a:	68ba      	ldr	r2, [r7, #8]
 8004d2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004d30:	4013      	ands	r3, r2
 8004d32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004d38:	68bb      	ldr	r3, [r7, #8]
 8004d3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004d3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004d40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004d44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d46:	4a04      	ldr	r2, [pc, #16]	; (8004d58 <__NVIC_SetPriorityGrouping+0x44>)
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	60d3      	str	r3, [r2, #12]
}
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	e000ed00 	.word	0xe000ed00

08004d5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <__NVIC_GetPriorityGrouping+0x18>)
 8004d62:	68db      	ldr	r3, [r3, #12]
 8004d64:	0a1b      	lsrs	r3, r3, #8
 8004d66:	f003 0307 	and.w	r3, r3, #7
}
 8004d6a:	4618      	mov	r0, r3
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d72:	4770      	bx	lr
 8004d74:	e000ed00 	.word	0xe000ed00

08004d78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	4603      	mov	r3, r0
 8004d80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	db0b      	blt.n	8004da2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004d8a:	79fb      	ldrb	r3, [r7, #7]
 8004d8c:	f003 021f 	and.w	r2, r3, #31
 8004d90:	4907      	ldr	r1, [pc, #28]	; (8004db0 <__NVIC_EnableIRQ+0x38>)
 8004d92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d96:	095b      	lsrs	r3, r3, #5
 8004d98:	2001      	movs	r0, #1
 8004d9a:	fa00 f202 	lsl.w	r2, r0, r2
 8004d9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8004da2:	bf00      	nop
 8004da4:	370c      	adds	r7, #12
 8004da6:	46bd      	mov	sp, r7
 8004da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dac:	4770      	bx	lr
 8004dae:	bf00      	nop
 8004db0:	e000e100 	.word	0xe000e100

08004db4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004db4:	b480      	push	{r7}
 8004db6:	b083      	sub	sp, #12
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	4603      	mov	r3, r0
 8004dbc:	6039      	str	r1, [r7, #0]
 8004dbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004dc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	db0a      	blt.n	8004dde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dc8:	683b      	ldr	r3, [r7, #0]
 8004dca:	b2da      	uxtb	r2, r3
 8004dcc:	490c      	ldr	r1, [pc, #48]	; (8004e00 <__NVIC_SetPriority+0x4c>)
 8004dce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004dd2:	0112      	lsls	r2, r2, #4
 8004dd4:	b2d2      	uxtb	r2, r2
 8004dd6:	440b      	add	r3, r1
 8004dd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004ddc:	e00a      	b.n	8004df4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dde:	683b      	ldr	r3, [r7, #0]
 8004de0:	b2da      	uxtb	r2, r3
 8004de2:	4908      	ldr	r1, [pc, #32]	; (8004e04 <__NVIC_SetPriority+0x50>)
 8004de4:	79fb      	ldrb	r3, [r7, #7]
 8004de6:	f003 030f 	and.w	r3, r3, #15
 8004dea:	3b04      	subs	r3, #4
 8004dec:	0112      	lsls	r2, r2, #4
 8004dee:	b2d2      	uxtb	r2, r2
 8004df0:	440b      	add	r3, r1
 8004df2:	761a      	strb	r2, [r3, #24]
}
 8004df4:	bf00      	nop
 8004df6:	370c      	adds	r7, #12
 8004df8:	46bd      	mov	sp, r7
 8004dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfe:	4770      	bx	lr
 8004e00:	e000e100 	.word	0xe000e100
 8004e04:	e000ed00 	.word	0xe000ed00

08004e08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b089      	sub	sp, #36	; 0x24
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	60b9      	str	r1, [r7, #8]
 8004e12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f003 0307 	and.w	r3, r3, #7
 8004e1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004e1c:	69fb      	ldr	r3, [r7, #28]
 8004e1e:	f1c3 0307 	rsb	r3, r3, #7
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	bf28      	it	cs
 8004e26:	2304      	movcs	r3, #4
 8004e28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004e2a:	69fb      	ldr	r3, [r7, #28]
 8004e2c:	3304      	adds	r3, #4
 8004e2e:	2b06      	cmp	r3, #6
 8004e30:	d902      	bls.n	8004e38 <NVIC_EncodePriority+0x30>
 8004e32:	69fb      	ldr	r3, [r7, #28]
 8004e34:	3b03      	subs	r3, #3
 8004e36:	e000      	b.n	8004e3a <NVIC_EncodePriority+0x32>
 8004e38:	2300      	movs	r3, #0
 8004e3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e3c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e40:	69bb      	ldr	r3, [r7, #24]
 8004e42:	fa02 f303 	lsl.w	r3, r2, r3
 8004e46:	43da      	mvns	r2, r3
 8004e48:	68bb      	ldr	r3, [r7, #8]
 8004e4a:	401a      	ands	r2, r3
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004e50:	f04f 31ff 	mov.w	r1, #4294967295
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	fa01 f303 	lsl.w	r3, r1, r3
 8004e5a:	43d9      	mvns	r1, r3
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004e60:	4313      	orrs	r3, r2
         );
}
 8004e62:	4618      	mov	r0, r3
 8004e64:	3724      	adds	r7, #36	; 0x24
 8004e66:	46bd      	mov	sp, r7
 8004e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e6c:	4770      	bx	lr

08004e6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e6e:	b580      	push	{r7, lr}
 8004e70:	b082      	sub	sp, #8
 8004e72:	af00      	add	r7, sp, #0
 8004e74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f7ff ff4c 	bl	8004d14 <__NVIC_SetPriorityGrouping>
}
 8004e7c:	bf00      	nop
 8004e7e:	3708      	adds	r7, #8
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b086      	sub	sp, #24
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	4603      	mov	r3, r0
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
 8004e90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8004e92:	2300      	movs	r3, #0
 8004e94:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8004e96:	f7ff ff61 	bl	8004d5c <__NVIC_GetPriorityGrouping>
 8004e9a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e9c:	687a      	ldr	r2, [r7, #4]
 8004e9e:	68b9      	ldr	r1, [r7, #8]
 8004ea0:	6978      	ldr	r0, [r7, #20]
 8004ea2:	f7ff ffb1 	bl	8004e08 <NVIC_EncodePriority>
 8004ea6:	4602      	mov	r2, r0
 8004ea8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004eac:	4611      	mov	r1, r2
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7ff ff80 	bl	8004db4 <__NVIC_SetPriority>
}
 8004eb4:	bf00      	nop
 8004eb6:	3718      	adds	r7, #24
 8004eb8:	46bd      	mov	sp, r7
 8004eba:	bd80      	pop	{r7, pc}

08004ebc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b082      	sub	sp, #8
 8004ec0:	af00      	add	r7, sp, #0
 8004ec2:	4603      	mov	r3, r0
 8004ec4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004ec6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004eca:	4618      	mov	r0, r3
 8004ecc:	f7ff ff54 	bl	8004d78 <__NVIC_EnableIRQ>
}
 8004ed0:	bf00      	nop
 8004ed2:	3708      	adds	r7, #8
 8004ed4:	46bd      	mov	sp, r7
 8004ed6:	bd80      	pop	{r7, pc}

08004ed8 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004ed8:	b580      	push	{r7, lr}
 8004eda:	b082      	sub	sp, #8
 8004edc:	af00      	add	r7, sp, #0
 8004ede:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d101      	bne.n	8004eea <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8004ee6:	2301      	movs	r3, #1
 8004ee8:	e014      	b.n	8004f14 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	791b      	ldrb	r3, [r3, #4]
 8004eee:	b2db      	uxtb	r3, r3
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d105      	bne.n	8004f00 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2200      	movs	r2, #0
 8004ef8:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8004efa:	6878      	ldr	r0, [r7, #4]
 8004efc:	f7fe fcc0 	bl	8003880 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2202      	movs	r2, #2
 8004f04:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	2201      	movs	r2, #1
 8004f10:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3708      	adds	r7, #8
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (when supported)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8004f1c:	b480      	push	{r7}
 8004f1e:	b083      	sub	sp, #12
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	6078      	str	r0, [r7, #4]
 8004f24:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	795b      	ldrb	r3, [r3, #5]
 8004f2a:	2b01      	cmp	r3, #1
 8004f2c:	d101      	bne.n	8004f32 <HAL_DAC_Start+0x16>
 8004f2e:	2302      	movs	r3, #2
 8004f30:	e03b      	b.n	8004faa <HAL_DAC_Start+0x8e>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	2201      	movs	r2, #1
 8004f36:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2202      	movs	r2, #2
 8004f3c:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	6819      	ldr	r1, [r3, #0]
 8004f44:	683b      	ldr	r3, [r7, #0]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	409a      	lsls	r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	430a      	orrs	r2, r1
 8004f54:	601a      	str	r2, [r3, #0]

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx                                     */

#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx)
  if(Channel == DAC_CHANNEL_1)
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d10f      	bne.n	8004f7c <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_CR_TEN1)
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8004f66:	2b04      	cmp	r3, #4
 8004f68:	d118      	bne.n	8004f9c <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	685a      	ldr	r2, [r3, #4]
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	f042 0201 	orr.w	r2, r2, #1
 8004f78:	605a      	str	r2, [r3, #4]
 8004f7a:	e00f      	b.n	8004f9c <HAL_DAC_Start+0x80>
    }
  }
  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == DAC_CR_TEN2)
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8004f86:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004f8a:	d107      	bne.n	8004f9c <HAL_DAC_Start+0x80>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	685a      	ldr	r2, [r3, #4]
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	f042 0202 	orr.w	r2, r2, #2
 8004f9a:	605a      	str	r2, [r3, #4]
    /* Enable the selected DAC software conversion */
    SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
  }
#endif /* STM32L451xx STM32L452xx STM32L462xx */
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2201      	movs	r2, #1
 8004fa0:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	370c      	adds	r7, #12
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr

08004fb6 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b082      	sub	sp, #8
 8004fba:	af00      	add	r7, sp, #0
 8004fbc:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fc8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fcc:	d120      	bne.n	8005010 <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004fd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004fdc:	d118      	bne.n	8005010 <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	2204      	movs	r2, #4
 8004fe2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	f043 0201 	orr.w	r2, r3, #1
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004ff8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005008:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 800500a:	6878      	ldr	r0, [r7, #4]
 800500c:	f000 f852 	bl	80050b4 <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800501a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800501e:	d120      	bne.n	8005062 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005026:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800502a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800502e:	d118      	bne.n	8005062 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2204      	movs	r2, #4
 8005034:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	691b      	ldr	r3, [r3, #16]
 800503a:	f043 0202 	orr.w	r2, r3, #2
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 800504a:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	681a      	ldr	r2, [r3, #0]
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 800505a:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 800505c:	6878      	ldr	r0, [r7, #4]
 800505e:	f000 f94d 	bl	80052fc <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8005062:	bf00      	nop
 8005064:	3708      	adds	r7, #8
 8005066:	46bd      	mov	sp, r7
 8005068:	bd80      	pop	{r7, pc}

0800506a <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 800506a:	b480      	push	{r7}
 800506c:	b087      	sub	sp, #28
 800506e:	af00      	add	r7, sp, #0
 8005070:	60f8      	str	r0, [r7, #12]
 8005072:	60b9      	str	r1, [r7, #8]
 8005074:	607a      	str	r2, [r7, #4]
 8005076:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0;
 8005078:	2300      	movs	r3, #0
 800507a:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8005082:	68bb      	ldr	r3, [r7, #8]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d105      	bne.n	8005094 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8005088:	697a      	ldr	r2, [r7, #20]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4413      	add	r3, r2
 800508e:	3308      	adds	r3, #8
 8005090:	617b      	str	r3, [r7, #20]
 8005092:	e004      	b.n	800509e <HAL_DAC_SetValue+0x34>
  }
  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8005094:	697a      	ldr	r2, [r7, #20]
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	4413      	add	r3, r2
 800509a:	3314      	adds	r3, #20
 800509c:	617b      	str	r3, [r7, #20]
  }

  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	461a      	mov	r2, r3
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 80050a6:	2300      	movs	r3, #0
}
 80050a8:	4618      	mov	r0, r3
 80050aa:	371c      	adds	r7, #28
 80050ac:	46bd      	mov	sp, r7
 80050ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050b2:	4770      	bx	lr

080050b4 <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 80050b4:	b480      	push	{r7}
 80050b6:	b083      	sub	sp, #12
 80050b8:	af00      	add	r7, sp, #0
 80050ba:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 80050bc:	bf00      	nop
 80050be:	370c      	adds	r7, #12
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 80050d4:	2300      	movs	r3, #0
 80050d6:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	795b      	ldrb	r3, [r3, #5]
 80050dc:	2b01      	cmp	r3, #1
 80050de:	d101      	bne.n	80050e4 <HAL_DAC_ConfigChannel+0x1c>
 80050e0:	2302      	movs	r3, #2
 80050e2:	e107      	b.n	80052f4 <HAL_DAC_ConfigChannel+0x22c>
 80050e4:	68fb      	ldr	r3, [r7, #12]
 80050e6:	2201      	movs	r2, #1
 80050e8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	2202      	movs	r2, #2
 80050ee:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 80050f0:	68bb      	ldr	r3, [r7, #8]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	2b04      	cmp	r3, #4
 80050f6:	d174      	bne.n	80051e2 <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 80050f8:	f7fe fe2c 	bl	8003d54 <HAL_GetTick>
 80050fc:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d134      	bne.n	800516e <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8005104:	e011      	b.n	800512a <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8005106:	f7fe fe25 	bl	8003d54 <HAL_GetTick>
 800510a:	4602      	mov	r2, r0
 800510c:	69fb      	ldr	r3, [r7, #28]
 800510e:	1ad3      	subs	r3, r2, r3
 8005110:	2b01      	cmp	r3, #1
 8005112:	d90a      	bls.n	800512a <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	691b      	ldr	r3, [r3, #16]
 8005118:	f043 0208 	orr.w	r2, r3, #8
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	2203      	movs	r2, #3
 8005124:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 8005126:	2303      	movs	r3, #3
 8005128:	e0e4      	b.n	80052f4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005130:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005134:	2b00      	cmp	r3, #0
 8005136:	d1e6      	bne.n	8005106 <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 8005138:	2001      	movs	r0, #1
 800513a:	f7fe fe17 	bl	8003d6c <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	68ba      	ldr	r2, [r7, #8]
 8005144:	6992      	ldr	r2, [r2, #24]
 8005146:	641a      	str	r2, [r3, #64]	; 0x40
 8005148:	e01e      	b.n	8005188 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800514a:	f7fe fe03 	bl	8003d54 <HAL_GetTick>
 800514e:	4602      	mov	r2, r0
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	1ad3      	subs	r3, r2, r3
 8005154:	2b01      	cmp	r3, #1
 8005156:	d90a      	bls.n	800516e <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	691b      	ldr	r3, [r3, #16]
 800515c:	f043 0208 	orr.w	r2, r3, #8
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	2203      	movs	r2, #3
 8005168:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e0c2      	b.n	80052f4 <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005174:	2b00      	cmp	r3, #0
 8005176:	dbe8      	blt.n	800514a <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 8005178:	2001      	movs	r0, #1
 800517a:	f7fe fdf7 	bl	8003d6c <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	68ba      	ldr	r2, [r7, #8]
 8005184:	6992      	ldr	r2, [r2, #24]
 8005186:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	f003 0310 	and.w	r3, r3, #16
 8005194:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8005198:	fa01 f303 	lsl.w	r3, r1, r3
 800519c:	43db      	mvns	r3, r3
 800519e:	ea02 0103 	and.w	r1, r2, r3
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	69da      	ldr	r2, [r3, #28]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	f003 0310 	and.w	r3, r3, #16
 80051ac:	409a      	lsls	r2, r3
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	430a      	orrs	r2, r1
 80051b4:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	f003 0310 	and.w	r3, r3, #16
 80051c2:	21ff      	movs	r1, #255	; 0xff
 80051c4:	fa01 f303 	lsl.w	r3, r1, r3
 80051c8:	43db      	mvns	r3, r3
 80051ca:	ea02 0103 	and.w	r1, r2, r3
 80051ce:	68bb      	ldr	r3, [r7, #8]
 80051d0:	6a1a      	ldr	r2, [r3, #32]
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	f003 0310 	and.w	r3, r3, #16
 80051d8:	409a      	lsls	r2, r3
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	430a      	orrs	r2, r1
 80051e0:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80051e2:	68bb      	ldr	r3, [r7, #8]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d11d      	bne.n	8005226 <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051f0:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	f003 0310 	and.w	r3, r3, #16
 80051f8:	221f      	movs	r2, #31
 80051fa:	fa02 f303 	lsl.w	r3, r2, r3
 80051fe:	43db      	mvns	r3, r3
 8005200:	69ba      	ldr	r2, [r7, #24]
 8005202:	4013      	ands	r3, r2
 8005204:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	695b      	ldr	r3, [r3, #20]
 800520a:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	f003 0310 	and.w	r3, r3, #16
 8005212:	697a      	ldr	r2, [r7, #20]
 8005214:	fa02 f303 	lsl.w	r3, r2, r3
 8005218:	69ba      	ldr	r2, [r7, #24]
 800521a:	4313      	orrs	r3, r2
 800521c:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	69ba      	ldr	r2, [r7, #24]
 8005224:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800522c:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f003 0310 	and.w	r3, r3, #16
 8005234:	2207      	movs	r2, #7
 8005236:	fa02 f303 	lsl.w	r3, r2, r3
 800523a:	43db      	mvns	r3, r3
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	4013      	ands	r3, r2
 8005240:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	681a      	ldr	r2, [r3, #0]
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	431a      	orrs	r2, r3
 800524c:	68bb      	ldr	r3, [r7, #8]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	4313      	orrs	r3, r2
 8005252:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	f003 0310 	and.w	r3, r3, #16
 800525a:	697a      	ldr	r2, [r7, #20]
 800525c:	fa02 f303 	lsl.w	r3, r2, r3
 8005260:	69ba      	ldr	r2, [r7, #24]
 8005262:	4313      	orrs	r3, r2
 8005264:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	69ba      	ldr	r2, [r7, #24]
 800526c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	6819      	ldr	r1, [r3, #0]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	f003 0310 	and.w	r3, r3, #16
 800527a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800527e:	fa02 f303 	lsl.w	r3, r2, r3
 8005282:	43da      	mvns	r2, r3
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	400a      	ands	r2, r1
 800528a:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	f003 0310 	and.w	r3, r3, #16
 800529a:	f640 72fc 	movw	r2, #4092	; 0xffc
 800529e:	fa02 f303 	lsl.w	r3, r2, r3
 80052a2:	43db      	mvns	r3, r3
 80052a4:	69ba      	ldr	r2, [r7, #24]
 80052a6:	4013      	ands	r3, r2
 80052a8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 80052aa:	68bb      	ldr	r3, [r7, #8]
 80052ac:	685b      	ldr	r3, [r3, #4]
 80052ae:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	f003 0310 	and.w	r3, r3, #16
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	fa02 f303 	lsl.w	r3, r2, r3
 80052bc:	69ba      	ldr	r2, [r7, #24]
 80052be:	4313      	orrs	r3, r2
 80052c0:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	69ba      	ldr	r2, [r7, #24]
 80052c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	6819      	ldr	r1, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f003 0310 	and.w	r3, r3, #16
 80052d6:	22c0      	movs	r2, #192	; 0xc0
 80052d8:	fa02 f303 	lsl.w	r3, r2, r3
 80052dc:	43da      	mvns	r2, r3
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	400a      	ands	r2, r1
 80052e4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2201      	movs	r2, #1
 80052ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	2200      	movs	r2, #0
 80052f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80052f2:	2300      	movs	r3, #0
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3720      	adds	r7, #32
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}

080052fc <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80052fc:	b480      	push	{r7}
 80052fe:	b083      	sub	sp, #12
 8005300:	af00      	add	r7, sp, #0
 8005302:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8005304:	bf00      	nop
 8005306:	370c      	adds	r7, #12
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr

08005310 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005310:	b580      	push	{r7, lr}
 8005312:	b084      	sub	sp, #16
 8005314:	af00      	add	r7, sp, #0
 8005316:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005318:	2300      	movs	r3, #0
 800531a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005322:	b2db      	uxtb	r3, r3
 8005324:	2b02      	cmp	r3, #2
 8005326:	d005      	beq.n	8005334 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	2204      	movs	r2, #4
 800532c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800532e:	2301      	movs	r3, #1
 8005330:	73fb      	strb	r3, [r7, #15]
 8005332:	e029      	b.n	8005388 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f022 020e 	bic.w	r2, r2, #14
 8005342:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f022 0201 	bic.w	r2, r2, #1
 8005352:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005358:	f003 021c 	and.w	r2, r3, #28
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005360:	2101      	movs	r1, #1
 8005362:	fa01 f202 	lsl.w	r2, r1, r2
 8005366:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2201      	movs	r2, #1
 800536c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800537c:	2b00      	cmp	r3, #0
 800537e:	d003      	beq.n	8005388 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005384:	6878      	ldr	r0, [r7, #4]
 8005386:	4798      	blx	r3
    }
  }
  return status;
 8005388:	7bfb      	ldrb	r3, [r7, #15]
}
 800538a:	4618      	mov	r0, r3
 800538c:	3710      	adds	r7, #16
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}

08005392 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8005392:	b480      	push	{r7}
 8005394:	b083      	sub	sp, #12
 8005396:	af00      	add	r7, sp, #0
 8005398:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80053a0:	b2db      	uxtb	r3, r3
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	370c      	adds	r7, #12
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr
	...

080053b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80053b0:	b480      	push	{r7}
 80053b2:	b087      	sub	sp, #28
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
 80053b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80053ba:	2300      	movs	r3, #0
 80053bc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80053be:	e148      	b.n	8005652 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	681a      	ldr	r2, [r3, #0]
 80053c4:	2101      	movs	r1, #1
 80053c6:	697b      	ldr	r3, [r7, #20]
 80053c8:	fa01 f303 	lsl.w	r3, r1, r3
 80053cc:	4013      	ands	r3, r2
 80053ce:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	f000 813a 	beq.w	800564c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	685b      	ldr	r3, [r3, #4]
 80053dc:	f003 0303 	and.w	r3, r3, #3
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	d005      	beq.n	80053f0 <HAL_GPIO_Init+0x40>
 80053e4:	683b      	ldr	r3, [r7, #0]
 80053e6:	685b      	ldr	r3, [r3, #4]
 80053e8:	f003 0303 	and.w	r3, r3, #3
 80053ec:	2b02      	cmp	r3, #2
 80053ee:	d130      	bne.n	8005452 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80053f6:	697b      	ldr	r3, [r7, #20]
 80053f8:	005b      	lsls	r3, r3, #1
 80053fa:	2203      	movs	r2, #3
 80053fc:	fa02 f303 	lsl.w	r3, r2, r3
 8005400:	43db      	mvns	r3, r3
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4013      	ands	r3, r2
 8005406:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005408:	683b      	ldr	r3, [r7, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	697b      	ldr	r3, [r7, #20]
 800540e:	005b      	lsls	r3, r3, #1
 8005410:	fa02 f303 	lsl.w	r3, r2, r3
 8005414:	693a      	ldr	r2, [r7, #16]
 8005416:	4313      	orrs	r3, r2
 8005418:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	685b      	ldr	r3, [r3, #4]
 8005424:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005426:	2201      	movs	r2, #1
 8005428:	697b      	ldr	r3, [r7, #20]
 800542a:	fa02 f303 	lsl.w	r3, r2, r3
 800542e:	43db      	mvns	r3, r3
 8005430:	693a      	ldr	r2, [r7, #16]
 8005432:	4013      	ands	r3, r2
 8005434:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	091b      	lsrs	r3, r3, #4
 800543c:	f003 0201 	and.w	r2, r3, #1
 8005440:	697b      	ldr	r3, [r7, #20]
 8005442:	fa02 f303 	lsl.w	r3, r2, r3
 8005446:	693a      	ldr	r2, [r7, #16]
 8005448:	4313      	orrs	r3, r2
 800544a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	693a      	ldr	r2, [r7, #16]
 8005450:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8005452:	683b      	ldr	r3, [r7, #0]
 8005454:	685b      	ldr	r3, [r3, #4]
 8005456:	f003 0303 	and.w	r3, r3, #3
 800545a:	2b03      	cmp	r3, #3
 800545c:	d017      	beq.n	800548e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	005b      	lsls	r3, r3, #1
 8005468:	2203      	movs	r2, #3
 800546a:	fa02 f303 	lsl.w	r3, r2, r3
 800546e:	43db      	mvns	r3, r3
 8005470:	693a      	ldr	r2, [r7, #16]
 8005472:	4013      	ands	r3, r2
 8005474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005476:	683b      	ldr	r3, [r7, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	005b      	lsls	r3, r3, #1
 800547e:	fa02 f303 	lsl.w	r3, r2, r3
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	4313      	orrs	r3, r2
 8005486:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	693a      	ldr	r2, [r7, #16]
 800548c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800548e:	683b      	ldr	r3, [r7, #0]
 8005490:	685b      	ldr	r3, [r3, #4]
 8005492:	f003 0303 	and.w	r3, r3, #3
 8005496:	2b02      	cmp	r3, #2
 8005498:	d123      	bne.n	80054e2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800549a:	697b      	ldr	r3, [r7, #20]
 800549c:	08da      	lsrs	r2, r3, #3
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	3208      	adds	r2, #8
 80054a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80054a8:	697b      	ldr	r3, [r7, #20]
 80054aa:	f003 0307 	and.w	r3, r3, #7
 80054ae:	009b      	lsls	r3, r3, #2
 80054b0:	220f      	movs	r2, #15
 80054b2:	fa02 f303 	lsl.w	r3, r2, r3
 80054b6:	43db      	mvns	r3, r3
 80054b8:	693a      	ldr	r2, [r7, #16]
 80054ba:	4013      	ands	r3, r2
 80054bc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80054be:	683b      	ldr	r3, [r7, #0]
 80054c0:	691a      	ldr	r2, [r3, #16]
 80054c2:	697b      	ldr	r3, [r7, #20]
 80054c4:	f003 0307 	and.w	r3, r3, #7
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	fa02 f303 	lsl.w	r3, r2, r3
 80054ce:	693a      	ldr	r2, [r7, #16]
 80054d0:	4313      	orrs	r3, r2
 80054d2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	08da      	lsrs	r2, r3, #3
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	3208      	adds	r2, #8
 80054dc:	6939      	ldr	r1, [r7, #16]
 80054de:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80054e8:	697b      	ldr	r3, [r7, #20]
 80054ea:	005b      	lsls	r3, r3, #1
 80054ec:	2203      	movs	r2, #3
 80054ee:	fa02 f303 	lsl.w	r3, r2, r3
 80054f2:	43db      	mvns	r3, r3
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	4013      	ands	r3, r2
 80054f8:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80054fa:	683b      	ldr	r3, [r7, #0]
 80054fc:	685b      	ldr	r3, [r3, #4]
 80054fe:	f003 0203 	and.w	r2, r3, #3
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	005b      	lsls	r3, r3, #1
 8005506:	fa02 f303 	lsl.w	r3, r2, r3
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	4313      	orrs	r3, r2
 800550e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	693a      	ldr	r2, [r7, #16]
 8005514:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	685b      	ldr	r3, [r3, #4]
 800551a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800551e:	2b00      	cmp	r3, #0
 8005520:	f000 8094 	beq.w	800564c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005524:	4b52      	ldr	r3, [pc, #328]	; (8005670 <HAL_GPIO_Init+0x2c0>)
 8005526:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005528:	4a51      	ldr	r2, [pc, #324]	; (8005670 <HAL_GPIO_Init+0x2c0>)
 800552a:	f043 0301 	orr.w	r3, r3, #1
 800552e:	6613      	str	r3, [r2, #96]	; 0x60
 8005530:	4b4f      	ldr	r3, [pc, #316]	; (8005670 <HAL_GPIO_Init+0x2c0>)
 8005532:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005534:	f003 0301 	and.w	r3, r3, #1
 8005538:	60bb      	str	r3, [r7, #8]
 800553a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800553c:	4a4d      	ldr	r2, [pc, #308]	; (8005674 <HAL_GPIO_Init+0x2c4>)
 800553e:	697b      	ldr	r3, [r7, #20]
 8005540:	089b      	lsrs	r3, r3, #2
 8005542:	3302      	adds	r3, #2
 8005544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005548:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	f003 0303 	and.w	r3, r3, #3
 8005550:	009b      	lsls	r3, r3, #2
 8005552:	220f      	movs	r2, #15
 8005554:	fa02 f303 	lsl.w	r3, r2, r3
 8005558:	43db      	mvns	r3, r3
 800555a:	693a      	ldr	r2, [r7, #16]
 800555c:	4013      	ands	r3, r2
 800555e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8005566:	d00d      	beq.n	8005584 <HAL_GPIO_Init+0x1d4>
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	4a43      	ldr	r2, [pc, #268]	; (8005678 <HAL_GPIO_Init+0x2c8>)
 800556c:	4293      	cmp	r3, r2
 800556e:	d007      	beq.n	8005580 <HAL_GPIO_Init+0x1d0>
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	4a42      	ldr	r2, [pc, #264]	; (800567c <HAL_GPIO_Init+0x2cc>)
 8005574:	4293      	cmp	r3, r2
 8005576:	d101      	bne.n	800557c <HAL_GPIO_Init+0x1cc>
 8005578:	2302      	movs	r3, #2
 800557a:	e004      	b.n	8005586 <HAL_GPIO_Init+0x1d6>
 800557c:	2307      	movs	r3, #7
 800557e:	e002      	b.n	8005586 <HAL_GPIO_Init+0x1d6>
 8005580:	2301      	movs	r3, #1
 8005582:	e000      	b.n	8005586 <HAL_GPIO_Init+0x1d6>
 8005584:	2300      	movs	r3, #0
 8005586:	697a      	ldr	r2, [r7, #20]
 8005588:	f002 0203 	and.w	r2, r2, #3
 800558c:	0092      	lsls	r2, r2, #2
 800558e:	4093      	lsls	r3, r2
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	4313      	orrs	r3, r2
 8005594:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8005596:	4937      	ldr	r1, [pc, #220]	; (8005674 <HAL_GPIO_Init+0x2c4>)
 8005598:	697b      	ldr	r3, [r7, #20]
 800559a:	089b      	lsrs	r3, r3, #2
 800559c:	3302      	adds	r3, #2
 800559e:	693a      	ldr	r2, [r7, #16]
 80055a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80055a4:	4b36      	ldr	r3, [pc, #216]	; (8005680 <HAL_GPIO_Init+0x2d0>)
 80055a6:	689b      	ldr	r3, [r3, #8]
 80055a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055aa:	68fb      	ldr	r3, [r7, #12]
 80055ac:	43db      	mvns	r3, r3
 80055ae:	693a      	ldr	r2, [r7, #16]
 80055b0:	4013      	ands	r3, r2
 80055b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80055b4:	683b      	ldr	r3, [r7, #0]
 80055b6:	685b      	ldr	r3, [r3, #4]
 80055b8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d003      	beq.n	80055c8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	4313      	orrs	r3, r2
 80055c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80055c8:	4a2d      	ldr	r2, [pc, #180]	; (8005680 <HAL_GPIO_Init+0x2d0>)
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80055ce:	4b2c      	ldr	r3, [pc, #176]	; (8005680 <HAL_GPIO_Init+0x2d0>)
 80055d0:	68db      	ldr	r3, [r3, #12]
 80055d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	43db      	mvns	r3, r3
 80055d8:	693a      	ldr	r2, [r7, #16]
 80055da:	4013      	ands	r3, r2
 80055dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80055de:	683b      	ldr	r3, [r7, #0]
 80055e0:	685b      	ldr	r3, [r3, #4]
 80055e2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d003      	beq.n	80055f2 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80055ea:	693a      	ldr	r2, [r7, #16]
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80055f2:	4a23      	ldr	r2, [pc, #140]	; (8005680 <HAL_GPIO_Init+0x2d0>)
 80055f4:	693b      	ldr	r3, [r7, #16]
 80055f6:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80055f8:	4b21      	ldr	r3, [pc, #132]	; (8005680 <HAL_GPIO_Init+0x2d0>)
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	43db      	mvns	r3, r3
 8005602:	693a      	ldr	r2, [r7, #16]
 8005604:	4013      	ands	r3, r2
 8005606:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	685b      	ldr	r3, [r3, #4]
 800560c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005610:	2b00      	cmp	r3, #0
 8005612:	d003      	beq.n	800561c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8005614:	693a      	ldr	r2, [r7, #16]
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	4313      	orrs	r3, r2
 800561a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800561c:	4a18      	ldr	r2, [pc, #96]	; (8005680 <HAL_GPIO_Init+0x2d0>)
 800561e:	693b      	ldr	r3, [r7, #16]
 8005620:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8005622:	4b17      	ldr	r3, [pc, #92]	; (8005680 <HAL_GPIO_Init+0x2d0>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	43db      	mvns	r3, r3
 800562c:	693a      	ldr	r2, [r7, #16]
 800562e:	4013      	ands	r3, r2
 8005630:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800563a:	2b00      	cmp	r3, #0
 800563c:	d003      	beq.n	8005646 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	4313      	orrs	r3, r2
 8005644:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8005646:	4a0e      	ldr	r2, [pc, #56]	; (8005680 <HAL_GPIO_Init+0x2d0>)
 8005648:	693b      	ldr	r3, [r7, #16]
 800564a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800564c:	697b      	ldr	r3, [r7, #20]
 800564e:	3301      	adds	r3, #1
 8005650:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	681a      	ldr	r2, [r3, #0]
 8005656:	697b      	ldr	r3, [r7, #20]
 8005658:	fa22 f303 	lsr.w	r3, r2, r3
 800565c:	2b00      	cmp	r3, #0
 800565e:	f47f aeaf 	bne.w	80053c0 <HAL_GPIO_Init+0x10>
  }
}
 8005662:	bf00      	nop
 8005664:	bf00      	nop
 8005666:	371c      	adds	r7, #28
 8005668:	46bd      	mov	sp, r7
 800566a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800566e:	4770      	bx	lr
 8005670:	40021000 	.word	0x40021000
 8005674:	40010000 	.word	0x40010000
 8005678:	48000400 	.word	0x48000400
 800567c:	48000800 	.word	0x48000800
 8005680:	40010400 	.word	0x40010400

08005684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005684:	b480      	push	{r7}
 8005686:	b085      	sub	sp, #20
 8005688:	af00      	add	r7, sp, #0
 800568a:	6078      	str	r0, [r7, #4]
 800568c:	460b      	mov	r3, r1
 800568e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	691a      	ldr	r2, [r3, #16]
 8005694:	887b      	ldrh	r3, [r7, #2]
 8005696:	4013      	ands	r3, r2
 8005698:	2b00      	cmp	r3, #0
 800569a:	d002      	beq.n	80056a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800569c:	2301      	movs	r3, #1
 800569e:	73fb      	strb	r3, [r7, #15]
 80056a0:	e001      	b.n	80056a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80056a2:	2300      	movs	r3, #0
 80056a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80056a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80056a8:	4618      	mov	r0, r3
 80056aa:	3714      	adds	r7, #20
 80056ac:	46bd      	mov	sp, r7
 80056ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b2:	4770      	bx	lr

080056b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80056b4:	b480      	push	{r7}
 80056b6:	b083      	sub	sp, #12
 80056b8:	af00      	add	r7, sp, #0
 80056ba:	6078      	str	r0, [r7, #4]
 80056bc:	460b      	mov	r3, r1
 80056be:	807b      	strh	r3, [r7, #2]
 80056c0:	4613      	mov	r3, r2
 80056c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80056c4:	787b      	ldrb	r3, [r7, #1]
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d003      	beq.n	80056d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80056ca:	887a      	ldrh	r2, [r7, #2]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80056d0:	e002      	b.n	80056d8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80056d2:	887a      	ldrh	r2, [r7, #2]
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80056d8:	bf00      	nop
 80056da:	370c      	adds	r7, #12
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80056e4:	b580      	push	{r7, lr}
 80056e6:	b082      	sub	sp, #8
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d101      	bne.n	80056f6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80056f2:	2301      	movs	r3, #1
 80056f4:	e081      	b.n	80057fa <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80056fc:	b2db      	uxtb	r3, r3
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d106      	bne.n	8005710 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800570a:	6878      	ldr	r0, [r7, #4]
 800570c:	f7fe f8fe 	bl	800390c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	2224      	movs	r2, #36	; 0x24
 8005714:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f022 0201 	bic.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	685a      	ldr	r2, [r3, #4]
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8005734:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	681b      	ldr	r3, [r3, #0]
 800573a:	689a      	ldr	r2, [r3, #8]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005744:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	68db      	ldr	r3, [r3, #12]
 800574a:	2b01      	cmp	r3, #1
 800574c:	d107      	bne.n	800575e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	689a      	ldr	r2, [r3, #8]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800575a:	609a      	str	r2, [r3, #8]
 800575c:	e006      	b.n	800576c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	689a      	ldr	r2, [r3, #8]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 800576a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	68db      	ldr	r3, [r3, #12]
 8005770:	2b02      	cmp	r3, #2
 8005772:	d104      	bne.n	800577e <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800577c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	6812      	ldr	r2, [r2, #0]
 8005788:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800578c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005790:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68da      	ldr	r2, [r3, #12]
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80057a0:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	691a      	ldr	r2, [r3, #16]
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	695b      	ldr	r3, [r3, #20]
 80057aa:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	699b      	ldr	r3, [r3, #24]
 80057b2:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	430a      	orrs	r2, r1
 80057ba:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	69d9      	ldr	r1, [r3, #28]
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1a      	ldr	r2, [r3, #32]
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	430a      	orrs	r2, r1
 80057ca:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	681a      	ldr	r2, [r3, #0]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f042 0201 	orr.w	r2, r2, #1
 80057da:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2200      	movs	r2, #0
 80057e0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2220      	movs	r2, #32
 80057e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	2200      	movs	r2, #0
 80057ee:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	2200      	movs	r2, #0
 80057f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80057f8:	2300      	movs	r3, #0
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3708      	adds	r7, #8
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
	...

08005804 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8005804:	b580      	push	{r7, lr}
 8005806:	b088      	sub	sp, #32
 8005808:	af02      	add	r7, sp, #8
 800580a:	60f8      	str	r0, [r7, #12]
 800580c:	607a      	str	r2, [r7, #4]
 800580e:	461a      	mov	r2, r3
 8005810:	460b      	mov	r3, r1
 8005812:	817b      	strh	r3, [r7, #10]
 8005814:	4613      	mov	r3, r2
 8005816:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800581e:	b2db      	uxtb	r3, r3
 8005820:	2b20      	cmp	r3, #32
 8005822:	f040 80da 	bne.w	80059da <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800582c:	2b01      	cmp	r3, #1
 800582e:	d101      	bne.n	8005834 <HAL_I2C_Master_Transmit+0x30>
 8005830:	2302      	movs	r3, #2
 8005832:	e0d3      	b.n	80059dc <HAL_I2C_Master_Transmit+0x1d8>
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	2201      	movs	r2, #1
 8005838:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800583c:	f7fe fa8a 	bl	8003d54 <HAL_GetTick>
 8005840:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8005842:	697b      	ldr	r3, [r7, #20]
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	2319      	movs	r3, #25
 8005848:	2201      	movs	r2, #1
 800584a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800584e:	68f8      	ldr	r0, [r7, #12]
 8005850:	f000 fe05 	bl	800645e <I2C_WaitOnFlagUntilTimeout>
 8005854:	4603      	mov	r3, r0
 8005856:	2b00      	cmp	r3, #0
 8005858:	d001      	beq.n	800585e <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 800585a:	2301      	movs	r3, #1
 800585c:	e0be      	b.n	80059dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2221      	movs	r2, #33	; 0x21
 8005862:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	2210      	movs	r2, #16
 800586a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2200      	movs	r2, #0
 8005872:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	687a      	ldr	r2, [r7, #4]
 8005878:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	893a      	ldrh	r2, [r7, #8]
 800587e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	2200      	movs	r2, #0
 8005884:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800588a:	b29b      	uxth	r3, r3
 800588c:	2bff      	cmp	r3, #255	; 0xff
 800588e:	d90e      	bls.n	80058ae <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	22ff      	movs	r2, #255	; 0xff
 8005894:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800589a:	b2da      	uxtb	r2, r3
 800589c:	8979      	ldrh	r1, [r7, #10]
 800589e:	4b51      	ldr	r3, [pc, #324]	; (80059e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80058a0:	9300      	str	r3, [sp, #0]
 80058a2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80058a6:	68f8      	ldr	r0, [r7, #12]
 80058a8:	f000 ff82 	bl	80067b0 <I2C_TransferConfig>
 80058ac:	e06c      	b.n	8005988 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058b2:	b29a      	uxth	r2, r3
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	8979      	ldrh	r1, [r7, #10]
 80058c0:	4b48      	ldr	r3, [pc, #288]	; (80059e4 <HAL_I2C_Master_Transmit+0x1e0>)
 80058c2:	9300      	str	r3, [sp, #0]
 80058c4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80058c8:	68f8      	ldr	r0, [r7, #12]
 80058ca:	f000 ff71 	bl	80067b0 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 80058ce:	e05b      	b.n	8005988 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80058d0:	697a      	ldr	r2, [r7, #20]
 80058d2:	6a39      	ldr	r1, [r7, #32]
 80058d4:	68f8      	ldr	r0, [r7, #12]
 80058d6:	f000 fe02 	bl	80064de <I2C_WaitOnTXISFlagUntilTimeout>
 80058da:	4603      	mov	r3, r0
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d001      	beq.n	80058e4 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80058e0:	2301      	movs	r3, #1
 80058e2:	e07b      	b.n	80059dc <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e8:	781a      	ldrb	r2, [r3, #0]
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058f4:	1c5a      	adds	r2, r3, #1
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058fe:	b29b      	uxth	r3, r3
 8005900:	3b01      	subs	r3, #1
 8005902:	b29a      	uxth	r2, r3
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800590c:	3b01      	subs	r3, #1
 800590e:	b29a      	uxth	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	2b00      	cmp	r3, #0
 800591c:	d034      	beq.n	8005988 <HAL_I2C_Master_Transmit+0x184>
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005922:	2b00      	cmp	r3, #0
 8005924:	d130      	bne.n	8005988 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8005926:	697b      	ldr	r3, [r7, #20]
 8005928:	9300      	str	r3, [sp, #0]
 800592a:	6a3b      	ldr	r3, [r7, #32]
 800592c:	2200      	movs	r2, #0
 800592e:	2180      	movs	r1, #128	; 0x80
 8005930:	68f8      	ldr	r0, [r7, #12]
 8005932:	f000 fd94 	bl	800645e <I2C_WaitOnFlagUntilTimeout>
 8005936:	4603      	mov	r3, r0
 8005938:	2b00      	cmp	r3, #0
 800593a:	d001      	beq.n	8005940 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 800593c:	2301      	movs	r3, #1
 800593e:	e04d      	b.n	80059dc <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005944:	b29b      	uxth	r3, r3
 8005946:	2bff      	cmp	r3, #255	; 0xff
 8005948:	d90e      	bls.n	8005968 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	22ff      	movs	r2, #255	; 0xff
 800594e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005954:	b2da      	uxtb	r2, r3
 8005956:	8979      	ldrh	r1, [r7, #10]
 8005958:	2300      	movs	r3, #0
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8005960:	68f8      	ldr	r0, [r7, #12]
 8005962:	f000 ff25 	bl	80067b0 <I2C_TransferConfig>
 8005966:	e00f      	b.n	8005988 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800596c:	b29a      	uxth	r2, r3
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005976:	b2da      	uxtb	r2, r3
 8005978:	8979      	ldrh	r1, [r7, #10]
 800597a:	2300      	movs	r3, #0
 800597c:	9300      	str	r3, [sp, #0]
 800597e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 ff14 	bl	80067b0 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800598c:	b29b      	uxth	r3, r3
 800598e:	2b00      	cmp	r3, #0
 8005990:	d19e      	bne.n	80058d0 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005992:	697a      	ldr	r2, [r7, #20]
 8005994:	6a39      	ldr	r1, [r7, #32]
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	f000 fde1 	bl	800655e <I2C_WaitOnSTOPFlagUntilTimeout>
 800599c:	4603      	mov	r3, r0
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d001      	beq.n	80059a6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 80059a2:	2301      	movs	r3, #1
 80059a4:	e01a      	b.n	80059dc <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	2220      	movs	r2, #32
 80059ac:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	6859      	ldr	r1, [r3, #4]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	681a      	ldr	r2, [r3, #0]
 80059b8:	4b0b      	ldr	r3, [pc, #44]	; (80059e8 <HAL_I2C_Master_Transmit+0x1e4>)
 80059ba:	400b      	ands	r3, r1
 80059bc:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	2220      	movs	r2, #32
 80059c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	2200      	movs	r2, #0
 80059d2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80059d6:	2300      	movs	r3, #0
 80059d8:	e000      	b.n	80059dc <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80059da:	2302      	movs	r3, #2
  }
}
 80059dc:	4618      	mov	r0, r3
 80059de:	3718      	adds	r7, #24
 80059e0:	46bd      	mov	sp, r7
 80059e2:	bd80      	pop	{r7, pc}
 80059e4:	80002000 	.word	0x80002000
 80059e8:	fe00e800 	.word	0xfe00e800

080059ec <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	699b      	ldr	r3, [r3, #24]
 80059fa:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d005      	beq.n	8005a18 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a10:	68ba      	ldr	r2, [r7, #8]
 8005a12:	68f9      	ldr	r1, [r7, #12]
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	4798      	blx	r3
  }
}
 8005a18:	bf00      	nop
 8005a1a:	3710      	adds	r7, #16
 8005a1c:	46bd      	mov	sp, r7
 8005a1e:	bd80      	pop	{r7, pc}

08005a20 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b086      	sub	sp, #24
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	681b      	ldr	r3, [r3, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	681b      	ldr	r3, [r3, #0]
 8005a36:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	0a1b      	lsrs	r3, r3, #8
 8005a3c:	f003 0301 	and.w	r3, r3, #1
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d010      	beq.n	8005a66 <HAL_I2C_ER_IRQHandler+0x46>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005a44:	693b      	ldr	r3, [r7, #16]
 8005a46:	09db      	lsrs	r3, r3, #7
 8005a48:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d00a      	beq.n	8005a66 <HAL_I2C_ER_IRQHandler+0x46>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a54:	f043 0201 	orr.w	r2, r3, #1
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005a64:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005a66:	697b      	ldr	r3, [r7, #20]
 8005a68:	0a9b      	lsrs	r3, r3, #10
 8005a6a:	f003 0301 	and.w	r3, r3, #1
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d010      	beq.n	8005a94 <HAL_I2C_ER_IRQHandler+0x74>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	09db      	lsrs	r3, r3, #7
 8005a76:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d00a      	beq.n	8005a94 <HAL_I2C_ER_IRQHandler+0x74>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a82:	f043 0208 	orr.w	r2, r3, #8
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005a92:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005a94:	697b      	ldr	r3, [r7, #20]
 8005a96:	0a5b      	lsrs	r3, r3, #9
 8005a98:	f003 0301 	and.w	r3, r3, #1
 8005a9c:	2b00      	cmp	r3, #0
 8005a9e:	d010      	beq.n	8005ac2 <HAL_I2C_ER_IRQHandler+0xa2>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8005aa0:	693b      	ldr	r3, [r7, #16]
 8005aa2:	09db      	lsrs	r3, r3, #7
 8005aa4:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d00a      	beq.n	8005ac2 <HAL_I2C_ER_IRQHandler+0xa2>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ab0:	f043 0202 	orr.w	r2, r3, #2
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005ac0:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac6:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	f003 030b 	and.w	r3, r3, #11
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_I2C_ER_IRQHandler+0xba>
  {
    I2C_ITError(hi2c, tmperror);
 8005ad2:	68f9      	ldr	r1, [r7, #12]
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 fb89 	bl	80061ec <I2C_ITError>
  }
}
 8005ada:	bf00      	nop
 8005adc:	3718      	adds	r7, #24
 8005ade:	46bd      	mov	sp, r7
 8005ae0:	bd80      	pop	{r7, pc}

08005ae2 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b083      	sub	sp, #12
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005aea:	bf00      	nop
 8005aec:	370c      	adds	r7, #12
 8005aee:	46bd      	mov	sp, r7
 8005af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af4:	4770      	bx	lr

08005af6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005af6:	b480      	push	{r7}
 8005af8:	b083      	sub	sp, #12
 8005afa:	af00      	add	r7, sp, #0
 8005afc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005afe:	bf00      	nop
 8005b00:	370c      	adds	r7, #12
 8005b02:	46bd      	mov	sp, r7
 8005b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b08:	4770      	bx	lr

08005b0a <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005b0a:	b480      	push	{r7}
 8005b0c:	b083      	sub	sp, #12
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	6078      	str	r0, [r7, #4]
 8005b12:	460b      	mov	r3, r1
 8005b14:	70fb      	strb	r3, [r7, #3]
 8005b16:	4613      	mov	r3, r2
 8005b18:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005b1a:	bf00      	nop
 8005b1c:	370c      	adds	r7, #12
 8005b1e:	46bd      	mov	sp, r7
 8005b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b24:	4770      	bx	lr

08005b26 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b26:	b480      	push	{r7}
 8005b28:	b083      	sub	sp, #12
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8005b2e:	bf00      	nop
 8005b30:	370c      	adds	r7, #12
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b083      	sub	sp, #12
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005b42:	bf00      	nop
 8005b44:	370c      	adds	r7, #12
 8005b46:	46bd      	mov	sp, r7
 8005b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4c:	4770      	bx	lr

08005b4e <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b4e:	b480      	push	{r7}
 8005b50:	b083      	sub	sp, #12
 8005b52:	af00      	add	r7, sp, #0
 8005b54:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b56:	bf00      	nop
 8005b58:	370c      	adds	r7, #12
 8005b5a:	46bd      	mov	sp, r7
 8005b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b60:	4770      	bx	lr

08005b62 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8005b62:	b580      	push	{r7, lr}
 8005b64:	b086      	sub	sp, #24
 8005b66:	af00      	add	r7, sp, #0
 8005b68:	60f8      	str	r0, [r7, #12]
 8005b6a:	60b9      	str	r1, [r7, #8]
 8005b6c:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b72:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005b7e:	2b01      	cmp	r3, #1
 8005b80:	d101      	bne.n	8005b86 <I2C_Slave_ISR_IT+0x24>
 8005b82:	2302      	movs	r3, #2
 8005b84:	e0ec      	b.n	8005d60 <I2C_Slave_ISR_IT+0x1fe>
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2201      	movs	r2, #1
 8005b8a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	095b      	lsrs	r3, r3, #5
 8005b92:	f003 0301 	and.w	r3, r3, #1
 8005b96:	2b00      	cmp	r3, #0
 8005b98:	d009      	beq.n	8005bae <I2C_Slave_ISR_IT+0x4c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	095b      	lsrs	r3, r3, #5
 8005b9e:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8005ba2:	2b00      	cmp	r3, #0
 8005ba4:	d003      	beq.n	8005bae <I2C_Slave_ISR_IT+0x4c>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8005ba6:	6939      	ldr	r1, [r7, #16]
 8005ba8:	68f8      	ldr	r0, [r7, #12]
 8005baa:	f000 f9bf 	bl	8005f2c <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005bae:	693b      	ldr	r3, [r7, #16]
 8005bb0:	091b      	lsrs	r3, r3, #4
 8005bb2:	f003 0301 	and.w	r3, r3, #1
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d04d      	beq.n	8005c56 <I2C_Slave_ISR_IT+0xf4>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	f003 0301 	and.w	r3, r3, #1
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d047      	beq.n	8005c56 <I2C_Slave_ISR_IT+0xf4>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bca:	b29b      	uxth	r3, r3
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d128      	bne.n	8005c22 <I2C_Slave_ISR_IT+0xc0>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bd6:	b2db      	uxtb	r3, r3
 8005bd8:	2b28      	cmp	r3, #40	; 0x28
 8005bda:	d108      	bne.n	8005bee <I2C_Slave_ISR_IT+0x8c>
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005be2:	d104      	bne.n	8005bee <I2C_Slave_ISR_IT+0x8c>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8005be4:	6939      	ldr	r1, [r7, #16]
 8005be6:	68f8      	ldr	r0, [r7, #12]
 8005be8:	f000 faaa 	bl	8006140 <I2C_ITListenCplt>
 8005bec:	e032      	b.n	8005c54 <I2C_Slave_ISR_IT+0xf2>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005bf4:	b2db      	uxtb	r3, r3
 8005bf6:	2b29      	cmp	r3, #41	; 0x29
 8005bf8:	d10e      	bne.n	8005c18 <I2C_Slave_ISR_IT+0xb6>
 8005bfa:	697b      	ldr	r3, [r7, #20]
 8005bfc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c00:	d00a      	beq.n	8005c18 <I2C_Slave_ISR_IT+0xb6>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	2210      	movs	r2, #16
 8005c08:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8005c0a:	68f8      	ldr	r0, [r7, #12]
 8005c0c:	f000 fbe5 	bl	80063da <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005c10:	68f8      	ldr	r0, [r7, #12]
 8005c12:	f000 f92d 	bl	8005e70 <I2C_ITSlaveSeqCplt>
 8005c16:	e01d      	b.n	8005c54 <I2C_Slave_ISR_IT+0xf2>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2210      	movs	r2, #16
 8005c1e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8005c20:	e096      	b.n	8005d50 <I2C_Slave_ISR_IT+0x1ee>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	2210      	movs	r2, #16
 8005c28:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c2e:	f043 0204 	orr.w	r2, r3, #4
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8005c36:	697b      	ldr	r3, [r7, #20]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d004      	beq.n	8005c46 <I2C_Slave_ISR_IT+0xe4>
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005c42:	f040 8085 	bne.w	8005d50 <I2C_Slave_ISR_IT+0x1ee>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8005c46:	68fb      	ldr	r3, [r7, #12]
 8005c48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c4a:	4619      	mov	r1, r3
 8005c4c:	68f8      	ldr	r0, [r7, #12]
 8005c4e:	f000 facd 	bl	80061ec <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8005c52:	e07d      	b.n	8005d50 <I2C_Slave_ISR_IT+0x1ee>
 8005c54:	e07c      	b.n	8005d50 <I2C_Slave_ISR_IT+0x1ee>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005c56:	693b      	ldr	r3, [r7, #16]
 8005c58:	089b      	lsrs	r3, r3, #2
 8005c5a:	f003 0301 	and.w	r3, r3, #1
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d030      	beq.n	8005cc4 <I2C_Slave_ISR_IT+0x162>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	089b      	lsrs	r3, r3, #2
 8005c66:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8005c6a:	2b00      	cmp	r3, #0
 8005c6c:	d02a      	beq.n	8005cc4 <I2C_Slave_ISR_IT+0x162>
  {
    if (hi2c->XferCount > 0U)
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005c72:	b29b      	uxth	r3, r3
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d018      	beq.n	8005caa <I2C_Slave_ISR_IT+0x148>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8005c78:	68fb      	ldr	r3, [r7, #12]
 8005c7a:	681b      	ldr	r3, [r3, #0]
 8005c7c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c82:	b2d2      	uxtb	r2, r2
 8005c84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005c8a:	1c5a      	adds	r2, r3, #1
 8005c8c:	68fb      	ldr	r3, [r7, #12]
 8005c8e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005c94:	3b01      	subs	r3, #1
 8005c96:	b29a      	uxth	r2, r3
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8005c9c:	68fb      	ldr	r3, [r7, #12]
 8005c9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca0:	b29b      	uxth	r3, r3
 8005ca2:	3b01      	subs	r3, #1
 8005ca4:	b29a      	uxth	r2, r3
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cae:	b29b      	uxth	r3, r3
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d14f      	bne.n	8005d54 <I2C_Slave_ISR_IT+0x1f2>
 8005cb4:	697b      	ldr	r3, [r7, #20]
 8005cb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cba:	d04b      	beq.n	8005d54 <I2C_Slave_ISR_IT+0x1f2>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8005cbc:	68f8      	ldr	r0, [r7, #12]
 8005cbe:	f000 f8d7 	bl	8005e70 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8005cc2:	e047      	b.n	8005d54 <I2C_Slave_ISR_IT+0x1f2>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005cc4:	693b      	ldr	r3, [r7, #16]
 8005cc6:	08db      	lsrs	r3, r3, #3
 8005cc8:	f003 0301 	and.w	r3, r3, #1
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d00a      	beq.n	8005ce6 <I2C_Slave_ISR_IT+0x184>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	08db      	lsrs	r3, r3, #3
 8005cd4:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d004      	beq.n	8005ce6 <I2C_Slave_ISR_IT+0x184>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8005cdc:	6939      	ldr	r1, [r7, #16]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f000 f842 	bl	8005d68 <I2C_ITAddrCplt>
 8005ce4:	e037      	b.n	8005d56 <I2C_Slave_ISR_IT+0x1f4>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005ce6:	693b      	ldr	r3, [r7, #16]
 8005ce8:	085b      	lsrs	r3, r3, #1
 8005cea:	f003 0301 	and.w	r3, r3, #1
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d031      	beq.n	8005d56 <I2C_Slave_ISR_IT+0x1f4>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	085b      	lsrs	r3, r3, #1
 8005cf6:	f003 0301 	and.w	r3, r3, #1
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d02b      	beq.n	8005d56 <I2C_Slave_ISR_IT+0x1f4>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d02:	b29b      	uxth	r3, r3
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d018      	beq.n	8005d3a <I2C_Slave_ISR_IT+0x1d8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d0c:	781a      	ldrb	r2, [r3, #0]
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d18:	1c5a      	adds	r2, r3, #1
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d22:	b29b      	uxth	r3, r3
 8005d24:	3b01      	subs	r3, #1
 8005d26:	b29a      	uxth	r2, r3
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005d30:	3b01      	subs	r3, #1
 8005d32:	b29a      	uxth	r2, r3
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	851a      	strh	r2, [r3, #40]	; 0x28
 8005d38:	e00d      	b.n	8005d56 <I2C_Slave_ISR_IT+0x1f4>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005d40:	d002      	beq.n	8005d48 <I2C_Slave_ISR_IT+0x1e6>
 8005d42:	697b      	ldr	r3, [r7, #20]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d106      	bne.n	8005d56 <I2C_Slave_ISR_IT+0x1f4>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8005d48:	68f8      	ldr	r0, [r7, #12]
 8005d4a:	f000 f891 	bl	8005e70 <I2C_ITSlaveSeqCplt>
 8005d4e:	e002      	b.n	8005d56 <I2C_Slave_ISR_IT+0x1f4>
    if (hi2c->XferCount == 0U)
 8005d50:	bf00      	nop
 8005d52:	e000      	b.n	8005d56 <I2C_Slave_ISR_IT+0x1f4>
    if ((hi2c->XferCount == 0U) && \
 8005d54:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8005d5e:	2300      	movs	r3, #0
}
 8005d60:	4618      	mov	r0, r3
 8005d62:	3718      	adds	r7, #24
 8005d64:	46bd      	mov	sp, r7
 8005d66:	bd80      	pop	{r7, pc}

08005d68 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005d68:	b580      	push	{r7, lr}
 8005d6a:	b084      	sub	sp, #16
 8005d6c:	af00      	add	r7, sp, #0
 8005d6e:	6078      	str	r0, [r7, #4]
 8005d70:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005d7e:	2b28      	cmp	r3, #40	; 0x28
 8005d80:	d16a      	bne.n	8005e58 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	699b      	ldr	r3, [r3, #24]
 8005d88:	0c1b      	lsrs	r3, r3, #16
 8005d8a:	b2db      	uxtb	r3, r3
 8005d8c:	f003 0301 	and.w	r3, r3, #1
 8005d90:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	699b      	ldr	r3, [r3, #24]
 8005d98:	0c1b      	lsrs	r3, r3, #16
 8005d9a:	b29b      	uxth	r3, r3
 8005d9c:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005da0:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8005dae:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	b29b      	uxth	r3, r3
 8005db8:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8005dbc:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	68db      	ldr	r3, [r3, #12]
 8005dc2:	2b02      	cmp	r3, #2
 8005dc4:	d138      	bne.n	8005e38 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8005dc6:	897b      	ldrh	r3, [r7, #10]
 8005dc8:	09db      	lsrs	r3, r3, #7
 8005dca:	b29a      	uxth	r2, r3
 8005dcc:	89bb      	ldrh	r3, [r7, #12]
 8005dce:	4053      	eors	r3, r2
 8005dd0:	b29b      	uxth	r3, r3
 8005dd2:	f003 0306 	and.w	r3, r3, #6
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d11c      	bne.n	8005e14 <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8005dda:	897b      	ldrh	r3, [r7, #10]
 8005ddc:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005de2:	1c5a      	adds	r2, r3, #1
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005dec:	2b02      	cmp	r3, #2
 8005dee:	d13b      	bne.n	8005e68 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	2200      	movs	r2, #0
 8005df4:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	2208      	movs	r2, #8
 8005dfc:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	2200      	movs	r2, #0
 8005e02:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e06:	89ba      	ldrh	r2, [r7, #12]
 8005e08:	7bfb      	ldrb	r3, [r7, #15]
 8005e0a:	4619      	mov	r1, r3
 8005e0c:	6878      	ldr	r0, [r7, #4]
 8005e0e:	f7ff fe7c 	bl	8005b0a <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005e12:	e029      	b.n	8005e68 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8005e14:	893b      	ldrh	r3, [r7, #8]
 8005e16:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005e18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f000 fcf9 	bl	8006814 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2200      	movs	r2, #0
 8005e26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e2a:	89ba      	ldrh	r2, [r7, #12]
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	4619      	mov	r1, r3
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	f7ff fe6a 	bl	8005b0a <HAL_I2C_AddrCallback>
}
 8005e36:	e017      	b.n	8005e68 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8005e38:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005e3c:	6878      	ldr	r0, [r7, #4]
 8005e3e:	f000 fce9 	bl	8006814 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8005e4a:	89ba      	ldrh	r2, [r7, #12]
 8005e4c:	7bfb      	ldrb	r3, [r7, #15]
 8005e4e:	4619      	mov	r1, r3
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff fe5a 	bl	8005b0a <HAL_I2C_AddrCallback>
}
 8005e56:	e007      	b.n	8005e68 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	681b      	ldr	r3, [r3, #0]
 8005e5c:	2208      	movs	r2, #8
 8005e5e:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2200      	movs	r2, #0
 8005e64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8005e68:	bf00      	nop
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2200      	movs	r2, #0
 8005e84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	0b9b      	lsrs	r3, r3, #14
 8005e8c:	f003 0301 	and.w	r3, r3, #1
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d008      	beq.n	8005ea6 <I2C_ITSlaveSeqCplt+0x36>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	681a      	ldr	r2, [r3, #0]
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005ea2:	601a      	str	r2, [r3, #0]
 8005ea4:	e00d      	b.n	8005ec2 <I2C_ITSlaveSeqCplt+0x52>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	0bdb      	lsrs	r3, r3, #15
 8005eaa:	f003 0301 	and.w	r3, r3, #1
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d007      	beq.n	8005ec2 <I2C_ITSlaveSeqCplt+0x52>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	681a      	ldr	r2, [r3, #0]
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005ec0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec8:	b2db      	uxtb	r3, r3
 8005eca:	2b29      	cmp	r3, #41	; 0x29
 8005ecc:	d112      	bne.n	8005ef4 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2228      	movs	r2, #40	; 0x28
 8005ed2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	2221      	movs	r2, #33	; 0x21
 8005eda:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8005edc:	2101      	movs	r1, #1
 8005ede:	6878      	ldr	r0, [r7, #4]
 8005ee0:	f000 fc98 	bl	8006814 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005eec:	6878      	ldr	r0, [r7, #4]
 8005eee:	f7ff fdf8 	bl	8005ae2 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8005ef2:	e017      	b.n	8005f24 <I2C_ITSlaveSeqCplt+0xb4>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005efa:	b2db      	uxtb	r3, r3
 8005efc:	2b2a      	cmp	r3, #42	; 0x2a
 8005efe:	d111      	bne.n	8005f24 <I2C_ITSlaveSeqCplt+0xb4>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	2228      	movs	r2, #40	; 0x28
 8005f04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	2222      	movs	r2, #34	; 0x22
 8005f0c:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8005f0e:	2102      	movs	r1, #2
 8005f10:	6878      	ldr	r0, [r7, #4]
 8005f12:	f000 fc7f 	bl	8006814 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2200      	movs	r2, #0
 8005f1a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7ff fde9 	bl	8005af6 <HAL_I2C_SlaveRxCpltCallback>
}
 8005f24:	bf00      	nop
 8005f26:	3710      	adds	r7, #16
 8005f28:	46bd      	mov	sp, r7
 8005f2a:	bd80      	pop	{r7, pc}

08005f2c <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b086      	sub	sp, #24
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
 8005f34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	681b      	ldr	r3, [r3, #0]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 8005f3e:	683b      	ldr	r3, [r7, #0]
 8005f40:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005f48:	73fb      	strb	r3, [r7, #15]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2220      	movs	r2, #32
 8005f50:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f52:	7bfb      	ldrb	r3, [r7, #15]
 8005f54:	2b21      	cmp	r3, #33	; 0x21
 8005f56:	d002      	beq.n	8005f5e <I2C_ITSlaveCplt+0x32>
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	2b29      	cmp	r3, #41	; 0x29
 8005f5c:	d108      	bne.n	8005f70 <I2C_ITSlaveCplt+0x44>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8005f5e:	f248 0101 	movw	r1, #32769	; 0x8001
 8005f62:	6878      	ldr	r0, [r7, #4]
 8005f64:	f000 fc56 	bl	8006814 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	2221      	movs	r2, #33	; 0x21
 8005f6c:	631a      	str	r2, [r3, #48]	; 0x30
 8005f6e:	e00d      	b.n	8005f8c <I2C_ITSlaveCplt+0x60>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f70:	7bfb      	ldrb	r3, [r7, #15]
 8005f72:	2b22      	cmp	r3, #34	; 0x22
 8005f74:	d002      	beq.n	8005f7c <I2C_ITSlaveCplt+0x50>
 8005f76:	7bfb      	ldrb	r3, [r7, #15]
 8005f78:	2b2a      	cmp	r3, #42	; 0x2a
 8005f7a:	d107      	bne.n	8005f8c <I2C_ITSlaveCplt+0x60>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8005f7c:	f248 0102 	movw	r1, #32770	; 0x8002
 8005f80:	6878      	ldr	r0, [r7, #4]
 8005f82:	f000 fc47 	bl	8006814 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2222      	movs	r2, #34	; 0x22
 8005f8a:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	685a      	ldr	r2, [r3, #4]
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005f9a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	6859      	ldr	r1, [r3, #4]
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681a      	ldr	r2, [r3, #0]
 8005fa6:	4b64      	ldr	r3, [pc, #400]	; (8006138 <I2C_ITSlaveCplt+0x20c>)
 8005fa8:	400b      	ands	r3, r1
 8005faa:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8005fac:	6878      	ldr	r0, [r7, #4]
 8005fae:	f000 fa14 	bl	80063da <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	0b9b      	lsrs	r3, r3, #14
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d013      	beq.n	8005fe6 <I2C_ITSlaveCplt+0xba>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	681a      	ldr	r2, [r3, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8005fcc:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d020      	beq.n	8006018 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	b29a      	uxth	r2, r3
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8005fe4:	e018      	b.n	8006018 <I2C_ITSlaveCplt+0xec>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8005fe6:	693b      	ldr	r3, [r7, #16]
 8005fe8:	0bdb      	lsrs	r3, r3, #15
 8005fea:	f003 0301 	and.w	r3, r3, #1
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d012      	beq.n	8006018 <I2C_ITSlaveCplt+0xec>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	681b      	ldr	r3, [r3, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006000:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006006:	2b00      	cmp	r3, #0
 8006008:	d006      	beq.n	8006018 <I2C_ITSlaveCplt+0xec>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	b29a      	uxth	r2, r3
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8006018:	697b      	ldr	r3, [r7, #20]
 800601a:	089b      	lsrs	r3, r3, #2
 800601c:	f003 0301 	and.w	r3, r3, #1
 8006020:	2b00      	cmp	r3, #0
 8006022:	d020      	beq.n	8006066 <I2C_ITSlaveCplt+0x13a>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006024:	697b      	ldr	r3, [r7, #20]
 8006026:	f023 0304 	bic.w	r3, r3, #4
 800602a:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006036:	b2d2      	uxtb	r2, r2
 8006038:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800603e:	1c5a      	adds	r2, r3, #1
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006048:	2b00      	cmp	r3, #0
 800604a:	d00c      	beq.n	8006066 <I2C_ITSlaveCplt+0x13a>
    {
      hi2c->XferSize--;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006050:	3b01      	subs	r3, #1
 8006052:	b29a      	uxth	r2, r3
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800605c:	b29b      	uxth	r3, r3
 800605e:	3b01      	subs	r3, #1
 8006060:	b29a      	uxth	r2, r3
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606a:	b29b      	uxth	r3, r3
 800606c:	2b00      	cmp	r3, #0
 800606e:	d005      	beq.n	800607c <I2C_ITSlaveCplt+0x150>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006074:	f043 0204 	orr.w	r2, r3, #4
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	2200      	movs	r2, #0
 8006088:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800608e:	2b00      	cmp	r3, #0
 8006090:	d010      	beq.n	80060b4 <I2C_ITSlaveCplt+0x188>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006096:	4619      	mov	r1, r3
 8006098:	6878      	ldr	r0, [r7, #4]
 800609a:	f000 f8a7 	bl	80061ec <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060a4:	b2db      	uxtb	r3, r3
 80060a6:	2b28      	cmp	r3, #40	; 0x28
 80060a8:	d141      	bne.n	800612e <I2C_ITSlaveCplt+0x202>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80060aa:	6979      	ldr	r1, [r7, #20]
 80060ac:	6878      	ldr	r0, [r7, #4]
 80060ae:	f000 f847 	bl	8006140 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80060b2:	e03c      	b.n	800612e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80060bc:	d014      	beq.n	80060e8 <I2C_ITSlaveCplt+0x1bc>
    I2C_ITSlaveSeqCplt(hi2c);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f7ff fed6 	bl	8005e70 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	4a1d      	ldr	r2, [pc, #116]	; (800613c <I2C_ITSlaveCplt+0x210>)
 80060c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2220      	movs	r2, #32
 80060ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	2200      	movs	r2, #0
 80060d6:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 80060e0:	6878      	ldr	r0, [r7, #4]
 80060e2:	f7ff fd20 	bl	8005b26 <HAL_I2C_ListenCpltCallback>
}
 80060e6:	e022      	b.n	800612e <I2C_ITSlaveCplt+0x202>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b22      	cmp	r3, #34	; 0x22
 80060f2:	d10e      	bne.n	8006112 <I2C_ITSlaveCplt+0x1e6>
    hi2c->State = HAL_I2C_STATE_READY;
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	2220      	movs	r2, #32
 80060f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2200      	movs	r2, #0
 8006100:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f7ff fcf3 	bl	8005af6 <HAL_I2C_SlaveRxCpltCallback>
}
 8006110:	e00d      	b.n	800612e <I2C_ITSlaveCplt+0x202>
    hi2c->State = HAL_I2C_STATE_READY;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	2220      	movs	r2, #32
 8006116:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006128:	6878      	ldr	r0, [r7, #4]
 800612a:	f7ff fcda 	bl	8005ae2 <HAL_I2C_SlaveTxCpltCallback>
}
 800612e:	bf00      	nop
 8006130:	3718      	adds	r7, #24
 8006132:	46bd      	mov	sp, r7
 8006134:	bd80      	pop	{r7, pc}
 8006136:	bf00      	nop
 8006138:	fe00e800 	.word	0xfe00e800
 800613c:	ffff0000 	.word	0xffff0000

08006140 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b082      	sub	sp, #8
 8006144:	af00      	add	r7, sp, #0
 8006146:	6078      	str	r0, [r7, #4]
 8006148:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	4a26      	ldr	r2, [pc, #152]	; (80061e8 <I2C_ITListenCplt+0xa8>)
 800614e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	2200      	movs	r2, #0
 8006154:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	2220      	movs	r2, #32
 800615a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2200      	movs	r2, #0
 800616a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800616c:	683b      	ldr	r3, [r7, #0]
 800616e:	089b      	lsrs	r3, r3, #2
 8006170:	f003 0301 	and.w	r3, r3, #1
 8006174:	2b00      	cmp	r3, #0
 8006176:	d022      	beq.n	80061be <I2C_ITListenCplt+0x7e>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006182:	b2d2      	uxtb	r2, r2
 8006184:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800618a:	1c5a      	adds	r2, r3, #1
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006194:	2b00      	cmp	r3, #0
 8006196:	d012      	beq.n	80061be <I2C_ITListenCplt+0x7e>
    {
      hi2c->XferSize--;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800619c:	3b01      	subs	r3, #1
 800619e:	b29a      	uxth	r2, r3
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80061b6:	f043 0204 	orr.w	r2, r3, #4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 80061be:	f248 0103 	movw	r1, #32771	; 0x8003
 80061c2:	6878      	ldr	r0, [r7, #4]
 80061c4:	f000 fb26 	bl	8006814 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2210      	movs	r2, #16
 80061ce:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	2200      	movs	r2, #0
 80061d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 80061d8:	6878      	ldr	r0, [r7, #4]
 80061da:	f7ff fca4 	bl	8005b26 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 80061de:	bf00      	nop
 80061e0:	3708      	adds	r7, #8
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	ffff0000 	.word	0xffff0000

080061ec <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b084      	sub	sp, #16
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
 80061f4:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80061fc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2200      	movs	r2, #0
 8006202:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a5d      	ldr	r2, [pc, #372]	; (8006380 <I2C_ITError+0x194>)
 800620a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2200      	movs	r2, #0
 8006210:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006216:	683b      	ldr	r3, [r7, #0]
 8006218:	431a      	orrs	r2, r3
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800621e:	7bfb      	ldrb	r3, [r7, #15]
 8006220:	2b28      	cmp	r3, #40	; 0x28
 8006222:	d005      	beq.n	8006230 <I2C_ITError+0x44>
 8006224:	7bfb      	ldrb	r3, [r7, #15]
 8006226:	2b29      	cmp	r3, #41	; 0x29
 8006228:	d002      	beq.n	8006230 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	2b2a      	cmp	r3, #42	; 0x2a
 800622e:	d10b      	bne.n	8006248 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006230:	2103      	movs	r1, #3
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 faee 	bl	8006814 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	2228      	movs	r2, #40	; 0x28
 800623c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	4a50      	ldr	r2, [pc, #320]	; (8006384 <I2C_ITError+0x198>)
 8006244:	635a      	str	r2, [r3, #52]	; 0x34
 8006246:	e011      	b.n	800626c <I2C_ITError+0x80>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8006248:	f248 0103 	movw	r1, #32771	; 0x8003
 800624c:	6878      	ldr	r0, [r7, #4]
 800624e:	f000 fae1 	bl	8006814 <I2C_Disable_IRQ>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006258:	b2db      	uxtb	r3, r3
 800625a:	2b60      	cmp	r3, #96	; 0x60
 800625c:	d003      	beq.n	8006266 <I2C_ITError+0x7a>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	2220      	movs	r2, #32
 8006262:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    }
    hi2c->XferISR       = NULL;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006270:	60bb      	str	r3, [r7, #8]
  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006276:	2b00      	cmp	r3, #0
 8006278:	d039      	beq.n	80062ee <I2C_ITError+0x102>
 800627a:	68bb      	ldr	r3, [r7, #8]
 800627c:	2b11      	cmp	r3, #17
 800627e:	d002      	beq.n	8006286 <I2C_ITError+0x9a>
 8006280:	68bb      	ldr	r3, [r7, #8]
 8006282:	2b21      	cmp	r3, #33	; 0x21
 8006284:	d133      	bne.n	80062ee <I2C_ITError+0x102>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006290:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006294:	d107      	bne.n	80062a6 <I2C_ITError+0xba>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80062a4:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062aa:	4618      	mov	r0, r3
 80062ac:	f7ff f871 	bl	8005392 <HAL_DMA_GetState>
 80062b0:	4603      	mov	r3, r0
 80062b2:	2b01      	cmp	r3, #1
 80062b4:	d017      	beq.n	80062e6 <I2C_ITError+0xfa>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ba:	4a33      	ldr	r2, [pc, #204]	; (8006388 <I2C_ITError+0x19c>)
 80062bc:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	2200      	movs	r2, #0
 80062c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062ca:	4618      	mov	r0, r3
 80062cc:	f7ff f820 	bl	8005310 <HAL_DMA_Abort_IT>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d04d      	beq.n	8006372 <I2C_ITError+0x186>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062dc:	687a      	ldr	r2, [r7, #4]
 80062de:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80062e0:	4610      	mov	r0, r2
 80062e2:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062e4:	e045      	b.n	8006372 <I2C_ITError+0x186>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80062e6:	6878      	ldr	r0, [r7, #4]
 80062e8:	f000 f850 	bl	800638c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80062ec:	e041      	b.n	8006372 <I2C_ITError+0x186>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d039      	beq.n	800636a <I2C_ITError+0x17e>
 80062f6:	68bb      	ldr	r3, [r7, #8]
 80062f8:	2b12      	cmp	r3, #18
 80062fa:	d002      	beq.n	8006302 <I2C_ITError+0x116>
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b22      	cmp	r3, #34	; 0x22
 8006300:	d133      	bne.n	800636a <I2C_ITError+0x17e>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800630c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006310:	d107      	bne.n	8006322 <I2C_ITError+0x136>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	681a      	ldr	r2, [r3, #0]
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006320:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006326:	4618      	mov	r0, r3
 8006328:	f7ff f833 	bl	8005392 <HAL_DMA_GetState>
 800632c:	4603      	mov	r3, r0
 800632e:	2b01      	cmp	r3, #1
 8006330:	d017      	beq.n	8006362 <I2C_ITError+0x176>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006336:	4a14      	ldr	r2, [pc, #80]	; (8006388 <I2C_ITError+0x19c>)
 8006338:	639a      	str	r2, [r3, #56]	; 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2200      	movs	r2, #0
 800633e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006346:	4618      	mov	r0, r3
 8006348:	f7fe ffe2 	bl	8005310 <HAL_DMA_Abort_IT>
 800634c:	4603      	mov	r3, r0
 800634e:	2b00      	cmp	r3, #0
 8006350:	d011      	beq.n	8006376 <I2C_ITError+0x18a>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006358:	687a      	ldr	r2, [r7, #4]
 800635a:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800635c:	4610      	mov	r0, r2
 800635e:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006360:	e009      	b.n	8006376 <I2C_ITError+0x18a>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8006362:	6878      	ldr	r0, [r7, #4]
 8006364:	f000 f812 	bl	800638c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006368:	e005      	b.n	8006376 <I2C_ITError+0x18a>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800636a:	6878      	ldr	r0, [r7, #4]
 800636c:	f000 f80e 	bl	800638c <I2C_TreatErrorCallback>
  }
}
 8006370:	e002      	b.n	8006378 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006372:	bf00      	nop
 8006374:	e000      	b.n	8006378 <I2C_ITError+0x18c>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006376:	bf00      	nop
}
 8006378:	bf00      	nop
 800637a:	3710      	adds	r7, #16
 800637c:	46bd      	mov	sp, r7
 800637e:	bd80      	pop	{r7, pc}
 8006380:	ffff0000 	.word	0xffff0000
 8006384:	08005b63 	.word	0x08005b63
 8006388:	08006423 	.word	0x08006423

0800638c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b082      	sub	sp, #8
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b60      	cmp	r3, #96	; 0x60
 800639e:	d10e      	bne.n	80063be <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2220      	movs	r2, #32
 80063a4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2200      	movs	r2, #0
 80063ac:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80063b6:	6878      	ldr	r0, [r7, #4]
 80063b8:	f7ff fbc9 	bl	8005b4e <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80063bc:	e009      	b.n	80063d2 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	2200      	movs	r2, #0
 80063c2:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f7ff fbb4 	bl	8005b3a <HAL_I2C_ErrorCallback>
}
 80063d2:	bf00      	nop
 80063d4:	3708      	adds	r7, #8
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80063da:	b480      	push	{r7}
 80063dc:	b083      	sub	sp, #12
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	f003 0302 	and.w	r3, r3, #2
 80063ec:	2b02      	cmp	r3, #2
 80063ee:	d103      	bne.n	80063f8 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	681b      	ldr	r3, [r3, #0]
 80063f4:	2200      	movs	r2, #0
 80063f6:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	699b      	ldr	r3, [r3, #24]
 80063fe:	f003 0301 	and.w	r3, r3, #1
 8006402:	2b01      	cmp	r3, #1
 8006404:	d007      	beq.n	8006416 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	681b      	ldr	r3, [r3, #0]
 800640a:	699a      	ldr	r2, [r3, #24]
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	681b      	ldr	r3, [r3, #0]
 8006410:	f042 0201 	orr.w	r2, r2, #1
 8006414:	619a      	str	r2, [r3, #24]
  }
}
 8006416:	bf00      	nop
 8006418:	370c      	adds	r7, #12
 800641a:	46bd      	mov	sp, r7
 800641c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006420:	4770      	bx	lr

08006422 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8006422:	b580      	push	{r7, lr}
 8006424:	b084      	sub	sp, #16
 8006426:	af00      	add	r7, sp, #0
 8006428:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800642e:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006434:	2b00      	cmp	r3, #0
 8006436:	d003      	beq.n	8006440 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800643c:	2200      	movs	r2, #0
 800643e:	639a      	str	r2, [r3, #56]	; 0x38
  }
  if (hi2c->hdmarx != NULL)
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006444:	2b00      	cmp	r3, #0
 8006446:	d003      	beq.n	8006450 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006448:	68fb      	ldr	r3, [r7, #12]
 800644a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800644c:	2200      	movs	r2, #0
 800644e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 8006450:	68f8      	ldr	r0, [r7, #12]
 8006452:	f7ff ff9b 	bl	800638c <I2C_TreatErrorCallback>
}
 8006456:	bf00      	nop
 8006458:	3710      	adds	r7, #16
 800645a:	46bd      	mov	sp, r7
 800645c:	bd80      	pop	{r7, pc}

0800645e <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800645e:	b580      	push	{r7, lr}
 8006460:	b084      	sub	sp, #16
 8006462:	af00      	add	r7, sp, #0
 8006464:	60f8      	str	r0, [r7, #12]
 8006466:	60b9      	str	r1, [r7, #8]
 8006468:	603b      	str	r3, [r7, #0]
 800646a:	4613      	mov	r3, r2
 800646c:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800646e:	e022      	b.n	80064b6 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006470:	683b      	ldr	r3, [r7, #0]
 8006472:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006476:	d01e      	beq.n	80064b6 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006478:	f7fd fc6c 	bl	8003d54 <HAL_GetTick>
 800647c:	4602      	mov	r2, r0
 800647e:	69bb      	ldr	r3, [r7, #24]
 8006480:	1ad3      	subs	r3, r2, r3
 8006482:	683a      	ldr	r2, [r7, #0]
 8006484:	429a      	cmp	r2, r3
 8006486:	d302      	bcc.n	800648e <I2C_WaitOnFlagUntilTimeout+0x30>
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	2b00      	cmp	r3, #0
 800648c:	d113      	bne.n	80064b6 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006492:	f043 0220 	orr.w	r2, r3, #32
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2220      	movs	r2, #32
 800649e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	2200      	movs	r2, #0
 80064a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	2200      	movs	r2, #0
 80064ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80064b2:	2301      	movs	r3, #1
 80064b4:	e00f      	b.n	80064d6 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80064b6:	68fb      	ldr	r3, [r7, #12]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	699a      	ldr	r2, [r3, #24]
 80064bc:	68bb      	ldr	r3, [r7, #8]
 80064be:	4013      	ands	r3, r2
 80064c0:	68ba      	ldr	r2, [r7, #8]
 80064c2:	429a      	cmp	r2, r3
 80064c4:	bf0c      	ite	eq
 80064c6:	2301      	moveq	r3, #1
 80064c8:	2300      	movne	r3, #0
 80064ca:	b2db      	uxtb	r3, r3
 80064cc:	461a      	mov	r2, r3
 80064ce:	79fb      	ldrb	r3, [r7, #7]
 80064d0:	429a      	cmp	r2, r3
 80064d2:	d0cd      	beq.n	8006470 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80064d4:	2300      	movs	r3, #0
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3710      	adds	r7, #16
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}

080064de <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80064de:	b580      	push	{r7, lr}
 80064e0:	b084      	sub	sp, #16
 80064e2:	af00      	add	r7, sp, #0
 80064e4:	60f8      	str	r0, [r7, #12]
 80064e6:	60b9      	str	r1, [r7, #8]
 80064e8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80064ea:	e02c      	b.n	8006546 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80064ec:	687a      	ldr	r2, [r7, #4]
 80064ee:	68b9      	ldr	r1, [r7, #8]
 80064f0:	68f8      	ldr	r0, [r7, #12]
 80064f2:	f000 f871 	bl	80065d8 <I2C_IsErrorOccurred>
 80064f6:	4603      	mov	r3, r0
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d001      	beq.n	8006500 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e02a      	b.n	8006556 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006500:	68bb      	ldr	r3, [r7, #8]
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006506:	d01e      	beq.n	8006546 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006508:	f7fd fc24 	bl	8003d54 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	68ba      	ldr	r2, [r7, #8]
 8006514:	429a      	cmp	r2, r3
 8006516:	d302      	bcc.n	800651e <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8006518:	68bb      	ldr	r3, [r7, #8]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d113      	bne.n	8006546 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006522:	f043 0220 	orr.w	r2, r3, #32
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2220      	movs	r2, #32
 800652e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2200      	movs	r2, #0
 8006536:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800653a:	68fb      	ldr	r3, [r7, #12]
 800653c:	2200      	movs	r2, #0
 800653e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	e007      	b.n	8006556 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	699b      	ldr	r3, [r3, #24]
 800654c:	f003 0302 	and.w	r3, r3, #2
 8006550:	2b02      	cmp	r3, #2
 8006552:	d1cb      	bne.n	80064ec <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3710      	adds	r7, #16
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b084      	sub	sp, #16
 8006562:	af00      	add	r7, sp, #0
 8006564:	60f8      	str	r0, [r7, #12]
 8006566:	60b9      	str	r1, [r7, #8]
 8006568:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800656a:	e028      	b.n	80065be <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800656c:	687a      	ldr	r2, [r7, #4]
 800656e:	68b9      	ldr	r1, [r7, #8]
 8006570:	68f8      	ldr	r0, [r7, #12]
 8006572:	f000 f831 	bl	80065d8 <I2C_IsErrorOccurred>
 8006576:	4603      	mov	r3, r0
 8006578:	2b00      	cmp	r3, #0
 800657a:	d001      	beq.n	8006580 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800657c:	2301      	movs	r3, #1
 800657e:	e026      	b.n	80065ce <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006580:	f7fd fbe8 	bl	8003d54 <HAL_GetTick>
 8006584:	4602      	mov	r2, r0
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	68ba      	ldr	r2, [r7, #8]
 800658c:	429a      	cmp	r2, r3
 800658e:	d302      	bcc.n	8006596 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8006590:	68bb      	ldr	r3, [r7, #8]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d113      	bne.n	80065be <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800659a:	f043 0220 	orr.w	r2, r3, #32
 800659e:	68fb      	ldr	r3, [r7, #12]
 80065a0:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80065a2:	68fb      	ldr	r3, [r7, #12]
 80065a4:	2220      	movs	r2, #32
 80065a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80065aa:	68fb      	ldr	r3, [r7, #12]
 80065ac:	2200      	movs	r2, #0
 80065ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80065b2:	68fb      	ldr	r3, [r7, #12]
 80065b4:	2200      	movs	r2, #0
 80065b6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e007      	b.n	80065ce <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80065be:	68fb      	ldr	r3, [r7, #12]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	f003 0320 	and.w	r3, r3, #32
 80065c8:	2b20      	cmp	r3, #32
 80065ca:	d1cf      	bne.n	800656c <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 80065cc:	2300      	movs	r3, #0
}
 80065ce:	4618      	mov	r0, r3
 80065d0:	3710      	adds	r7, #16
 80065d2:	46bd      	mov	sp, r7
 80065d4:	bd80      	pop	{r7, pc}
	...

080065d8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b08a      	sub	sp, #40	; 0x28
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80065e4:	2300      	movs	r3, #0
 80065e6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	699b      	ldr	r3, [r3, #24]
 80065f0:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80065f2:	2300      	movs	r3, #0
 80065f4:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80065fa:	69bb      	ldr	r3, [r7, #24]
 80065fc:	f003 0310 	and.w	r3, r3, #16
 8006600:	2b00      	cmp	r3, #0
 8006602:	d075      	beq.n	80066f0 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	681b      	ldr	r3, [r3, #0]
 8006608:	2210      	movs	r2, #16
 800660a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800660c:	e056      	b.n	80066bc <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006614:	d052      	beq.n	80066bc <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8006616:	f7fd fb9d 	bl	8003d54 <HAL_GetTick>
 800661a:	4602      	mov	r2, r0
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	1ad3      	subs	r3, r2, r3
 8006620:	68ba      	ldr	r2, [r7, #8]
 8006622:	429a      	cmp	r2, r3
 8006624:	d302      	bcc.n	800662c <I2C_IsErrorOccurred+0x54>
 8006626:	68bb      	ldr	r3, [r7, #8]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d147      	bne.n	80066bc <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	685b      	ldr	r3, [r3, #4]
 8006632:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006636:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800663e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	699b      	ldr	r3, [r3, #24]
 8006646:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800664a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800664e:	d12e      	bne.n	80066ae <I2C_IsErrorOccurred+0xd6>
 8006650:	697b      	ldr	r3, [r7, #20]
 8006652:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006656:	d02a      	beq.n	80066ae <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 8006658:	7cfb      	ldrb	r3, [r7, #19]
 800665a:	2b20      	cmp	r3, #32
 800665c:	d027      	beq.n	80066ae <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	685a      	ldr	r2, [r3, #4]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800666c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800666e:	f7fd fb71 	bl	8003d54 <HAL_GetTick>
 8006672:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8006674:	e01b      	b.n	80066ae <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8006676:	f7fd fb6d 	bl	8003d54 <HAL_GetTick>
 800667a:	4602      	mov	r2, r0
 800667c:	69fb      	ldr	r3, [r7, #28]
 800667e:	1ad3      	subs	r3, r2, r3
 8006680:	2b19      	cmp	r3, #25
 8006682:	d914      	bls.n	80066ae <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006688:	f043 0220 	orr.w	r2, r3, #32
 800668c:	68fb      	ldr	r3, [r7, #12]
 800668e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	2220      	movs	r2, #32
 8006694:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2200      	movs	r2, #0
 800669c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2200      	movs	r2, #0
 80066a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 80066a8:	2301      	movs	r3, #1
 80066aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	699b      	ldr	r3, [r3, #24]
 80066b4:	f003 0320 	and.w	r3, r3, #32
 80066b8:	2b20      	cmp	r3, #32
 80066ba:	d1dc      	bne.n	8006676 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	699b      	ldr	r3, [r3, #24]
 80066c2:	f003 0320 	and.w	r3, r3, #32
 80066c6:	2b20      	cmp	r3, #32
 80066c8:	d003      	beq.n	80066d2 <I2C_IsErrorOccurred+0xfa>
 80066ca:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d09d      	beq.n	800660e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80066d2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d103      	bne.n	80066e2 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	2220      	movs	r2, #32
 80066e0:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80066e2:	6a3b      	ldr	r3, [r7, #32]
 80066e4:	f043 0304 	orr.w	r3, r3, #4
 80066e8:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80066ea:	2301      	movs	r3, #1
 80066ec:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80066f0:	68fb      	ldr	r3, [r7, #12]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	699b      	ldr	r3, [r3, #24]
 80066f6:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80066f8:	69bb      	ldr	r3, [r7, #24]
 80066fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80066fe:	2b00      	cmp	r3, #0
 8006700:	d00b      	beq.n	800671a <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8006702:	6a3b      	ldr	r3, [r7, #32]
 8006704:	f043 0301 	orr.w	r3, r3, #1
 8006708:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006712:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800671a:	69bb      	ldr	r3, [r7, #24]
 800671c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006720:	2b00      	cmp	r3, #0
 8006722:	d00b      	beq.n	800673c <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	f043 0308 	orr.w	r3, r3, #8
 800672a:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006734:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800673c:	69bb      	ldr	r3, [r7, #24]
 800673e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00b      	beq.n	800675e <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8006746:	6a3b      	ldr	r3, [r7, #32]
 8006748:	f043 0302 	orr.w	r3, r3, #2
 800674c:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006756:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8006758:	2301      	movs	r3, #1
 800675a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 800675e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006762:	2b00      	cmp	r3, #0
 8006764:	d01c      	beq.n	80067a0 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006766:	68f8      	ldr	r0, [r7, #12]
 8006768:	f7ff fe37 	bl	80063da <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	6859      	ldr	r1, [r3, #4]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681a      	ldr	r2, [r3, #0]
 8006776:	4b0d      	ldr	r3, [pc, #52]	; (80067ac <I2C_IsErrorOccurred+0x1d4>)
 8006778:	400b      	ands	r3, r1
 800677a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006780:	6a3b      	ldr	r3, [r7, #32]
 8006782:	431a      	orrs	r2, r3
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	2220      	movs	r2, #32
 800678c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	2200      	movs	r2, #0
 8006794:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	2200      	movs	r2, #0
 800679c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 80067a0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 80067a4:	4618      	mov	r0, r3
 80067a6:	3728      	adds	r7, #40	; 0x28
 80067a8:	46bd      	mov	sp, r7
 80067aa:	bd80      	pop	{r7, pc}
 80067ac:	fe00e800 	.word	0xfe00e800

080067b0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80067b0:	b480      	push	{r7}
 80067b2:	b087      	sub	sp, #28
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	60f8      	str	r0, [r7, #12]
 80067b8:	607b      	str	r3, [r7, #4]
 80067ba:	460b      	mov	r3, r1
 80067bc:	817b      	strh	r3, [r7, #10]
 80067be:	4613      	mov	r3, r2
 80067c0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067c2:	897b      	ldrh	r3, [r7, #10]
 80067c4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067c8:	7a7b      	ldrb	r3, [r7, #9]
 80067ca:	041b      	lsls	r3, r3, #16
 80067cc:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067d0:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80067d6:	6a3b      	ldr	r3, [r7, #32]
 80067d8:	4313      	orrs	r3, r2
 80067da:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067de:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	685a      	ldr	r2, [r3, #4]
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	0d5b      	lsrs	r3, r3, #21
 80067ea:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80067ee:	4b08      	ldr	r3, [pc, #32]	; (8006810 <I2C_TransferConfig+0x60>)
 80067f0:	430b      	orrs	r3, r1
 80067f2:	43db      	mvns	r3, r3
 80067f4:	ea02 0103 	and.w	r1, r2, r3
 80067f8:	68fb      	ldr	r3, [r7, #12]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	697a      	ldr	r2, [r7, #20]
 80067fe:	430a      	orrs	r2, r1
 8006800:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8006802:	bf00      	nop
 8006804:	371c      	adds	r7, #28
 8006806:	46bd      	mov	sp, r7
 8006808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680c:	4770      	bx	lr
 800680e:	bf00      	nop
 8006810:	03ff63ff 	.word	0x03ff63ff

08006814 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8006814:	b480      	push	{r7}
 8006816:	b085      	sub	sp, #20
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	460b      	mov	r3, r1
 800681e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8006820:	2300      	movs	r3, #0
 8006822:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8006824:	887b      	ldrh	r3, [r7, #2]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d00f      	beq.n	800684e <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8006834:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800683c:	b2db      	uxtb	r3, r3
 800683e:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006842:	2b28      	cmp	r3, #40	; 0x28
 8006844:	d003      	beq.n	800684e <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 800684c:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800684e:	887b      	ldrh	r3, [r7, #2]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d00f      	beq.n	8006878 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 800685e:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006866:	b2db      	uxtb	r3, r3
 8006868:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800686c:	2b28      	cmp	r3, #40	; 0x28
 800686e:	d003      	beq.n	8006878 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006870:	68fb      	ldr	r3, [r7, #12]
 8006872:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8006876:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8006878:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800687c:	2b00      	cmp	r3, #0
 800687e:	da03      	bge.n	8006888 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8006880:	68fb      	ldr	r3, [r7, #12]
 8006882:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8006886:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8006888:	887b      	ldrh	r3, [r7, #2]
 800688a:	2b10      	cmp	r3, #16
 800688c:	d103      	bne.n	8006896 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8006894:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8006896:	887b      	ldrh	r3, [r7, #2]
 8006898:	2b20      	cmp	r3, #32
 800689a:	d103      	bne.n	80068a4 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	f043 0320 	orr.w	r3, r3, #32
 80068a2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80068a4:	887b      	ldrh	r3, [r7, #2]
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d103      	bne.n	80068b2 <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80068b0:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	6819      	ldr	r1, [r3, #0]
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	43da      	mvns	r2, r3
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	400a      	ands	r2, r1
 80068c2:	601a      	str	r2, [r3, #0]
}
 80068c4:	bf00      	nop
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80068d0:	b480      	push	{r7}
 80068d2:	b083      	sub	sp, #12
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]
 80068d8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068e0:	b2db      	uxtb	r3, r3
 80068e2:	2b20      	cmp	r3, #32
 80068e4:	d138      	bne.n	8006958 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ec:	2b01      	cmp	r3, #1
 80068ee:	d101      	bne.n	80068f4 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80068f0:	2302      	movs	r3, #2
 80068f2:	e032      	b.n	800695a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2201      	movs	r2, #1
 80068f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2224      	movs	r2, #36	; 0x24
 8006900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	681a      	ldr	r2, [r3, #0]
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f022 0201 	bic.w	r2, r2, #1
 8006912:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006922:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	6819      	ldr	r1, [r3, #0]
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	683a      	ldr	r2, [r7, #0]
 8006930:	430a      	orrs	r2, r1
 8006932:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f042 0201 	orr.w	r2, r2, #1
 8006942:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	2220      	movs	r2, #32
 8006948:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	2200      	movs	r2, #0
 8006950:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8006954:	2300      	movs	r3, #0
 8006956:	e000      	b.n	800695a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8006958:	2302      	movs	r3, #2
  }
}
 800695a:	4618      	mov	r0, r3
 800695c:	370c      	adds	r7, #12
 800695e:	46bd      	mov	sp, r7
 8006960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006964:	4770      	bx	lr

08006966 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8006966:	b480      	push	{r7}
 8006968:	b085      	sub	sp, #20
 800696a:	af00      	add	r7, sp, #0
 800696c:	6078      	str	r0, [r7, #4]
 800696e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006976:	b2db      	uxtb	r3, r3
 8006978:	2b20      	cmp	r3, #32
 800697a:	d139      	bne.n	80069f0 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006982:	2b01      	cmp	r3, #1
 8006984:	d101      	bne.n	800698a <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8006986:	2302      	movs	r3, #2
 8006988:	e033      	b.n	80069f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	2201      	movs	r2, #1
 800698e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	2224      	movs	r2, #36	; 0x24
 8006996:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f022 0201 	bic.w	r2, r2, #1
 80069a8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80069b8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	021b      	lsls	r3, r3, #8
 80069be:	68fa      	ldr	r2, [r7, #12]
 80069c0:	4313      	orrs	r3, r2
 80069c2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	68fa      	ldr	r2, [r7, #12]
 80069ca:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	681b      	ldr	r3, [r3, #0]
 80069d0:	681a      	ldr	r2, [r3, #0]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	f042 0201 	orr.w	r2, r2, #1
 80069da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2220      	movs	r2, #32
 80069e0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	e000      	b.n	80069f2 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80069f0:	2302      	movs	r3, #2
  }
}
 80069f2:	4618      	mov	r0, r3
 80069f4:	3714      	adds	r7, #20
 80069f6:	46bd      	mov	sp, r7
 80069f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069fc:	4770      	bx	lr
	...

08006a00 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 8006a00:	b480      	push	{r7}
 8006a02:	b085      	sub	sp, #20
 8006a04:	af00      	add	r7, sp, #0
 8006a06:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a08:	4b0b      	ldr	r3, [pc, #44]	; (8006a38 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006a0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a0c:	4a0a      	ldr	r2, [pc, #40]	; (8006a38 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006a0e:	f043 0301 	orr.w	r3, r3, #1
 8006a12:	6613      	str	r3, [r2, #96]	; 0x60
 8006a14:	4b08      	ldr	r3, [pc, #32]	; (8006a38 <HAL_I2CEx_EnableFastModePlus+0x38>)
 8006a16:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8006a18:	f003 0301 	and.w	r3, r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]
 8006a1e:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8006a20:	4b06      	ldr	r3, [pc, #24]	; (8006a3c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006a22:	685a      	ldr	r2, [r3, #4]
 8006a24:	4905      	ldr	r1, [pc, #20]	; (8006a3c <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	604b      	str	r3, [r1, #4]
}
 8006a2c:	bf00      	nop
 8006a2e:	3714      	adds	r7, #20
 8006a30:	46bd      	mov	sp, r7
 8006a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a36:	4770      	bx	lr
 8006a38:	40021000 	.word	0x40021000
 8006a3c:	40010000 	.word	0x40010000

08006a40 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8006a40:	b480      	push	{r7}
 8006a42:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006a44:	4b05      	ldr	r3, [pc, #20]	; (8006a5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	4a04      	ldr	r2, [pc, #16]	; (8006a5c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8006a4a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a4e:	6013      	str	r3, [r2, #0]
}
 8006a50:	bf00      	nop
 8006a52:	46bd      	mov	sp, r7
 8006a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a58:	4770      	bx	lr
 8006a5a:	bf00      	nop
 8006a5c:	40007000 	.word	0x40007000

08006a60 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8006a60:	b480      	push	{r7}
 8006a62:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8006a64:	4b04      	ldr	r3, [pc, #16]	; (8006a78 <HAL_PWREx_GetVoltageRange+0x18>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8006a6c:	4618      	mov	r0, r3
 8006a6e:	46bd      	mov	sp, r7
 8006a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a74:	4770      	bx	lr
 8006a76:	bf00      	nop
 8006a78:	40007000 	.word	0x40007000

08006a7c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b085      	sub	sp, #20
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a8a:	d130      	bne.n	8006aee <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8006a8c:	4b23      	ldr	r3, [pc, #140]	; (8006b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006a94:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a98:	d038      	beq.n	8006b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8006a9a:	4b20      	ldr	r3, [pc, #128]	; (8006b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006aa2:	4a1e      	ldr	r2, [pc, #120]	; (8006b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006aa4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006aa8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8006aaa:	4b1d      	ldr	r3, [pc, #116]	; (8006b20 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2232      	movs	r2, #50	; 0x32
 8006ab0:	fb02 f303 	mul.w	r3, r2, r3
 8006ab4:	4a1b      	ldr	r2, [pc, #108]	; (8006b24 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8006ab6:	fba2 2303 	umull	r2, r3, r2, r3
 8006aba:	0c9b      	lsrs	r3, r3, #18
 8006abc:	3301      	adds	r3, #1
 8006abe:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ac0:	e002      	b.n	8006ac8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8006ac2:	68fb      	ldr	r3, [r7, #12]
 8006ac4:	3b01      	subs	r3, #1
 8006ac6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8006ac8:	4b14      	ldr	r3, [pc, #80]	; (8006b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006aca:	695b      	ldr	r3, [r3, #20]
 8006acc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ad0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ad4:	d102      	bne.n	8006adc <HAL_PWREx_ControlVoltageScaling+0x60>
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	d1f2      	bne.n	8006ac2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8006adc:	4b0f      	ldr	r3, [pc, #60]	; (8006b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006ade:	695b      	ldr	r3, [r3, #20]
 8006ae0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ae4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ae8:	d110      	bne.n	8006b0c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8006aea:	2303      	movs	r3, #3
 8006aec:	e00f      	b.n	8006b0e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8006aee:	4b0b      	ldr	r3, [pc, #44]	; (8006b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8006af6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006afa:	d007      	beq.n	8006b0c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8006afc:	4b07      	ldr	r3, [pc, #28]	; (8006b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8006b04:	4a05      	ldr	r2, [pc, #20]	; (8006b1c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8006b06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006b0a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8006b0c:	2300      	movs	r3, #0
}
 8006b0e:	4618      	mov	r0, r3
 8006b10:	3714      	adds	r7, #20
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop
 8006b1c:	40007000 	.word	0x40007000
 8006b20:	20000034 	.word	0x20000034
 8006b24:	431bde83 	.word	0x431bde83

08006b28 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b088      	sub	sp, #32
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d102      	bne.n	8006b3c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8006b36:	2301      	movs	r3, #1
 8006b38:	f000 bc02 	b.w	8007340 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8006b3c:	4b96      	ldr	r3, [pc, #600]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006b3e:	689b      	ldr	r3, [r3, #8]
 8006b40:	f003 030c 	and.w	r3, r3, #12
 8006b44:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8006b46:	4b94      	ldr	r3, [pc, #592]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	f003 0303 	and.w	r3, r3, #3
 8006b4e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	f003 0310 	and.w	r3, r3, #16
 8006b58:	2b00      	cmp	r3, #0
 8006b5a:	f000 80e4 	beq.w	8006d26 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8006b5e:	69bb      	ldr	r3, [r7, #24]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d007      	beq.n	8006b74 <HAL_RCC_OscConfig+0x4c>
 8006b64:	69bb      	ldr	r3, [r7, #24]
 8006b66:	2b0c      	cmp	r3, #12
 8006b68:	f040 808b 	bne.w	8006c82 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	f040 8087 	bne.w	8006c82 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006b74:	4b88      	ldr	r3, [pc, #544]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	f003 0302 	and.w	r3, r3, #2
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d005      	beq.n	8006b8c <HAL_RCC_OscConfig+0x64>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	699b      	ldr	r3, [r3, #24]
 8006b84:	2b00      	cmp	r3, #0
 8006b86:	d101      	bne.n	8006b8c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8006b88:	2301      	movs	r3, #1
 8006b8a:	e3d9      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	6a1a      	ldr	r2, [r3, #32]
 8006b90:	4b81      	ldr	r3, [pc, #516]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f003 0308 	and.w	r3, r3, #8
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d004      	beq.n	8006ba6 <HAL_RCC_OscConfig+0x7e>
 8006b9c:	4b7e      	ldr	r3, [pc, #504]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006ba4:	e005      	b.n	8006bb2 <HAL_RCC_OscConfig+0x8a>
 8006ba6:	4b7c      	ldr	r3, [pc, #496]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006ba8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006bac:	091b      	lsrs	r3, r3, #4
 8006bae:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bb2:	4293      	cmp	r3, r2
 8006bb4:	d223      	bcs.n	8006bfe <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6a1b      	ldr	r3, [r3, #32]
 8006bba:	4618      	mov	r0, r3
 8006bbc:	f000 fdbe 	bl	800773c <RCC_SetFlashLatencyFromMSIRange>
 8006bc0:	4603      	mov	r3, r0
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d001      	beq.n	8006bca <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8006bc6:	2301      	movs	r3, #1
 8006bc8:	e3ba      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bca:	4b73      	ldr	r3, [pc, #460]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	4a72      	ldr	r2, [pc, #456]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006bd0:	f043 0308 	orr.w	r3, r3, #8
 8006bd4:	6013      	str	r3, [r2, #0]
 8006bd6:	4b70      	ldr	r3, [pc, #448]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6a1b      	ldr	r3, [r3, #32]
 8006be2:	496d      	ldr	r1, [pc, #436]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006be4:	4313      	orrs	r3, r2
 8006be6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006be8:	4b6b      	ldr	r3, [pc, #428]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006bea:	685b      	ldr	r3, [r3, #4]
 8006bec:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	69db      	ldr	r3, [r3, #28]
 8006bf4:	021b      	lsls	r3, r3, #8
 8006bf6:	4968      	ldr	r1, [pc, #416]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006bf8:	4313      	orrs	r3, r2
 8006bfa:	604b      	str	r3, [r1, #4]
 8006bfc:	e025      	b.n	8006c4a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006bfe:	4b66      	ldr	r3, [pc, #408]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	4a65      	ldr	r2, [pc, #404]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006c04:	f043 0308 	orr.w	r3, r3, #8
 8006c08:	6013      	str	r3, [r2, #0]
 8006c0a:	4b63      	ldr	r3, [pc, #396]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	6a1b      	ldr	r3, [r3, #32]
 8006c16:	4960      	ldr	r1, [pc, #384]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006c18:	4313      	orrs	r3, r2
 8006c1a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006c1c:	4b5e      	ldr	r3, [pc, #376]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006c1e:	685b      	ldr	r3, [r3, #4]
 8006c20:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	69db      	ldr	r3, [r3, #28]
 8006c28:	021b      	lsls	r3, r3, #8
 8006c2a:	495b      	ldr	r1, [pc, #364]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006c2c:	4313      	orrs	r3, r2
 8006c2e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8006c30:	69bb      	ldr	r3, [r7, #24]
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d109      	bne.n	8006c4a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6a1b      	ldr	r3, [r3, #32]
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f000 fd7e 	bl	800773c <RCC_SetFlashLatencyFromMSIRange>
 8006c40:	4603      	mov	r3, r0
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d001      	beq.n	8006c4a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8006c46:	2301      	movs	r3, #1
 8006c48:	e37a      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006c4a:	f000 fc81 	bl	8007550 <HAL_RCC_GetSysClockFreq>
 8006c4e:	4602      	mov	r2, r0
 8006c50:	4b51      	ldr	r3, [pc, #324]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	091b      	lsrs	r3, r3, #4
 8006c56:	f003 030f 	and.w	r3, r3, #15
 8006c5a:	4950      	ldr	r1, [pc, #320]	; (8006d9c <HAL_RCC_OscConfig+0x274>)
 8006c5c:	5ccb      	ldrb	r3, [r1, r3]
 8006c5e:	f003 031f 	and.w	r3, r3, #31
 8006c62:	fa22 f303 	lsr.w	r3, r2, r3
 8006c66:	4a4e      	ldr	r2, [pc, #312]	; (8006da0 <HAL_RCC_OscConfig+0x278>)
 8006c68:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8006c6a:	4b4e      	ldr	r3, [pc, #312]	; (8006da4 <HAL_RCC_OscConfig+0x27c>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	4618      	mov	r0, r3
 8006c70:	f7fc ff58 	bl	8003b24 <HAL_InitTick>
 8006c74:	4603      	mov	r3, r0
 8006c76:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8006c78:	7bfb      	ldrb	r3, [r7, #15]
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d052      	beq.n	8006d24 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8006c7e:	7bfb      	ldrb	r3, [r7, #15]
 8006c80:	e35e      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	699b      	ldr	r3, [r3, #24]
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d032      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8006c8a:	4b43      	ldr	r3, [pc, #268]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	4a42      	ldr	r2, [pc, #264]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006c90:	f043 0301 	orr.w	r3, r3, #1
 8006c94:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006c96:	f7fd f85d 	bl	8003d54 <HAL_GetTick>
 8006c9a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006c9c:	e008      	b.n	8006cb0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006c9e:	f7fd f859 	bl	8003d54 <HAL_GetTick>
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	693b      	ldr	r3, [r7, #16]
 8006ca6:	1ad3      	subs	r3, r2, r3
 8006ca8:	2b02      	cmp	r3, #2
 8006caa:	d901      	bls.n	8006cb0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8006cac:	2303      	movs	r3, #3
 8006cae:	e347      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006cb0:	4b39      	ldr	r3, [pc, #228]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	f003 0302 	and.w	r3, r3, #2
 8006cb8:	2b00      	cmp	r3, #0
 8006cba:	d0f0      	beq.n	8006c9e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8006cbc:	4b36      	ldr	r3, [pc, #216]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a35      	ldr	r2, [pc, #212]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006cc2:	f043 0308 	orr.w	r3, r3, #8
 8006cc6:	6013      	str	r3, [r2, #0]
 8006cc8:	4b33      	ldr	r3, [pc, #204]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	6a1b      	ldr	r3, [r3, #32]
 8006cd4:	4930      	ldr	r1, [pc, #192]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006cd6:	4313      	orrs	r3, r2
 8006cd8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8006cda:	4b2f      	ldr	r3, [pc, #188]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	69db      	ldr	r3, [r3, #28]
 8006ce6:	021b      	lsls	r3, r3, #8
 8006ce8:	492b      	ldr	r1, [pc, #172]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006cea:	4313      	orrs	r3, r2
 8006cec:	604b      	str	r3, [r1, #4]
 8006cee:	e01a      	b.n	8006d26 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8006cf0:	4b29      	ldr	r3, [pc, #164]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	4a28      	ldr	r2, [pc, #160]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006cf6:	f023 0301 	bic.w	r3, r3, #1
 8006cfa:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8006cfc:	f7fd f82a 	bl	8003d54 <HAL_GetTick>
 8006d00:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006d02:	e008      	b.n	8006d16 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8006d04:	f7fd f826 	bl	8003d54 <HAL_GetTick>
 8006d08:	4602      	mov	r2, r0
 8006d0a:	693b      	ldr	r3, [r7, #16]
 8006d0c:	1ad3      	subs	r3, r2, r3
 8006d0e:	2b02      	cmp	r3, #2
 8006d10:	d901      	bls.n	8006d16 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8006d12:	2303      	movs	r3, #3
 8006d14:	e314      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8006d16:	4b20      	ldr	r3, [pc, #128]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f003 0302 	and.w	r3, r3, #2
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1f0      	bne.n	8006d04 <HAL_RCC_OscConfig+0x1dc>
 8006d22:	e000      	b.n	8006d26 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8006d24:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	f003 0301 	and.w	r3, r3, #1
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d073      	beq.n	8006e1a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8006d32:	69bb      	ldr	r3, [r7, #24]
 8006d34:	2b08      	cmp	r3, #8
 8006d36:	d005      	beq.n	8006d44 <HAL_RCC_OscConfig+0x21c>
 8006d38:	69bb      	ldr	r3, [r7, #24]
 8006d3a:	2b0c      	cmp	r3, #12
 8006d3c:	d10e      	bne.n	8006d5c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b03      	cmp	r3, #3
 8006d42:	d10b      	bne.n	8006d5c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006d44:	4b14      	ldr	r3, [pc, #80]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d063      	beq.n	8006e18 <HAL_RCC_OscConfig+0x2f0>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	685b      	ldr	r3, [r3, #4]
 8006d54:	2b00      	cmp	r3, #0
 8006d56:	d15f      	bne.n	8006e18 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	e2f1      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	685b      	ldr	r3, [r3, #4]
 8006d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006d64:	d106      	bne.n	8006d74 <HAL_RCC_OscConfig+0x24c>
 8006d66:	4b0c      	ldr	r3, [pc, #48]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	4a0b      	ldr	r2, [pc, #44]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006d6c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d70:	6013      	str	r3, [r2, #0]
 8006d72:	e025      	b.n	8006dc0 <HAL_RCC_OscConfig+0x298>
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006d7c:	d114      	bne.n	8006da8 <HAL_RCC_OscConfig+0x280>
 8006d7e:	4b06      	ldr	r3, [pc, #24]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	4a05      	ldr	r2, [pc, #20]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006d84:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006d88:	6013      	str	r3, [r2, #0]
 8006d8a:	4b03      	ldr	r3, [pc, #12]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	4a02      	ldr	r2, [pc, #8]	; (8006d98 <HAL_RCC_OscConfig+0x270>)
 8006d90:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006d94:	6013      	str	r3, [r2, #0]
 8006d96:	e013      	b.n	8006dc0 <HAL_RCC_OscConfig+0x298>
 8006d98:	40021000 	.word	0x40021000
 8006d9c:	0800e908 	.word	0x0800e908
 8006da0:	20000034 	.word	0x20000034
 8006da4:	20000038 	.word	0x20000038
 8006da8:	4ba0      	ldr	r3, [pc, #640]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	4a9f      	ldr	r2, [pc, #636]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006db2:	6013      	str	r3, [r2, #0]
 8006db4:	4b9d      	ldr	r3, [pc, #628]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	4a9c      	ldr	r2, [pc, #624]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	685b      	ldr	r3, [r3, #4]
 8006dc4:	2b00      	cmp	r3, #0
 8006dc6:	d013      	beq.n	8006df0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006dc8:	f7fc ffc4 	bl	8003d54 <HAL_GetTick>
 8006dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006dce:	e008      	b.n	8006de2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006dd0:	f7fc ffc0 	bl	8003d54 <HAL_GetTick>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	693b      	ldr	r3, [r7, #16]
 8006dd8:	1ad3      	subs	r3, r2, r3
 8006dda:	2b64      	cmp	r3, #100	; 0x64
 8006ddc:	d901      	bls.n	8006de2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8006dde:	2303      	movs	r3, #3
 8006de0:	e2ae      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8006de2:	4b92      	ldr	r3, [pc, #584]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d0f0      	beq.n	8006dd0 <HAL_RCC_OscConfig+0x2a8>
 8006dee:	e014      	b.n	8006e1a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006df0:	f7fc ffb0 	bl	8003d54 <HAL_GetTick>
 8006df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006df6:	e008      	b.n	8006e0a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006df8:	f7fc ffac 	bl	8003d54 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	693b      	ldr	r3, [r7, #16]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	2b64      	cmp	r3, #100	; 0x64
 8006e04:	d901      	bls.n	8006e0a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8006e06:	2303      	movs	r3, #3
 8006e08:	e29a      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8006e0a:	4b88      	ldr	r3, [pc, #544]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d1f0      	bne.n	8006df8 <HAL_RCC_OscConfig+0x2d0>
 8006e16:	e000      	b.n	8006e1a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f003 0302 	and.w	r3, r3, #2
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d060      	beq.n	8006ee8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8006e26:	69bb      	ldr	r3, [r7, #24]
 8006e28:	2b04      	cmp	r3, #4
 8006e2a:	d005      	beq.n	8006e38 <HAL_RCC_OscConfig+0x310>
 8006e2c:	69bb      	ldr	r3, [r7, #24]
 8006e2e:	2b0c      	cmp	r3, #12
 8006e30:	d119      	bne.n	8006e66 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8006e32:	697b      	ldr	r3, [r7, #20]
 8006e34:	2b02      	cmp	r3, #2
 8006e36:	d116      	bne.n	8006e66 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e38:	4b7c      	ldr	r3, [pc, #496]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e40:	2b00      	cmp	r3, #0
 8006e42:	d005      	beq.n	8006e50 <HAL_RCC_OscConfig+0x328>
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	68db      	ldr	r3, [r3, #12]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d101      	bne.n	8006e50 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	e277      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006e50:	4b76      	ldr	r3, [pc, #472]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	691b      	ldr	r3, [r3, #16]
 8006e5c:	061b      	lsls	r3, r3, #24
 8006e5e:	4973      	ldr	r1, [pc, #460]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006e60:	4313      	orrs	r3, r2
 8006e62:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8006e64:	e040      	b.n	8006ee8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	68db      	ldr	r3, [r3, #12]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d023      	beq.n	8006eb6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006e6e:	4b6f      	ldr	r3, [pc, #444]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	4a6e      	ldr	r2, [pc, #440]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006e74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006e7a:	f7fc ff6b 	bl	8003d54 <HAL_GetTick>
 8006e7e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e80:	e008      	b.n	8006e94 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006e82:	f7fc ff67 	bl	8003d54 <HAL_GetTick>
 8006e86:	4602      	mov	r2, r0
 8006e88:	693b      	ldr	r3, [r7, #16]
 8006e8a:	1ad3      	subs	r3, r2, r3
 8006e8c:	2b02      	cmp	r3, #2
 8006e8e:	d901      	bls.n	8006e94 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8006e90:	2303      	movs	r3, #3
 8006e92:	e255      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006e94:	4b65      	ldr	r3, [pc, #404]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d0f0      	beq.n	8006e82 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006ea0:	4b62      	ldr	r3, [pc, #392]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006ea2:	685b      	ldr	r3, [r3, #4]
 8006ea4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	691b      	ldr	r3, [r3, #16]
 8006eac:	061b      	lsls	r3, r3, #24
 8006eae:	495f      	ldr	r1, [pc, #380]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006eb0:	4313      	orrs	r3, r2
 8006eb2:	604b      	str	r3, [r1, #4]
 8006eb4:	e018      	b.n	8006ee8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006eb6:	4b5d      	ldr	r3, [pc, #372]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	4a5c      	ldr	r2, [pc, #368]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006ebc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ec0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006ec2:	f7fc ff47 	bl	8003d54 <HAL_GetTick>
 8006ec6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006ec8:	e008      	b.n	8006edc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006eca:	f7fc ff43 	bl	8003d54 <HAL_GetTick>
 8006ece:	4602      	mov	r2, r0
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	1ad3      	subs	r3, r2, r3
 8006ed4:	2b02      	cmp	r3, #2
 8006ed6:	d901      	bls.n	8006edc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8006ed8:	2303      	movs	r3, #3
 8006eda:	e231      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8006edc:	4b53      	ldr	r3, [pc, #332]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d1f0      	bne.n	8006eca <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f003 0308 	and.w	r3, r3, #8
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	d03c      	beq.n	8006f6e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	695b      	ldr	r3, [r3, #20]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d01c      	beq.n	8006f36 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006efc:	4b4b      	ldr	r3, [pc, #300]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f02:	4a4a      	ldr	r2, [pc, #296]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006f04:	f043 0301 	orr.w	r3, r3, #1
 8006f08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f0c:	f7fc ff22 	bl	8003d54 <HAL_GetTick>
 8006f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f12:	e008      	b.n	8006f26 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f14:	f7fc ff1e 	bl	8003d54 <HAL_GetTick>
 8006f18:	4602      	mov	r2, r0
 8006f1a:	693b      	ldr	r3, [r7, #16]
 8006f1c:	1ad3      	subs	r3, r2, r3
 8006f1e:	2b02      	cmp	r3, #2
 8006f20:	d901      	bls.n	8006f26 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8006f22:	2303      	movs	r3, #3
 8006f24:	e20c      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8006f26:	4b41      	ldr	r3, [pc, #260]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006f28:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f2c:	f003 0302 	and.w	r3, r3, #2
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d0ef      	beq.n	8006f14 <HAL_RCC_OscConfig+0x3ec>
 8006f34:	e01b      	b.n	8006f6e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006f36:	4b3d      	ldr	r3, [pc, #244]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006f38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f3c:	4a3b      	ldr	r2, [pc, #236]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006f3e:	f023 0301 	bic.w	r3, r3, #1
 8006f42:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006f46:	f7fc ff05 	bl	8003d54 <HAL_GetTick>
 8006f4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f4c:	e008      	b.n	8006f60 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006f4e:	f7fc ff01 	bl	8003d54 <HAL_GetTick>
 8006f52:	4602      	mov	r2, r0
 8006f54:	693b      	ldr	r3, [r7, #16]
 8006f56:	1ad3      	subs	r3, r2, r3
 8006f58:	2b02      	cmp	r3, #2
 8006f5a:	d901      	bls.n	8006f60 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8006f5c:	2303      	movs	r3, #3
 8006f5e:	e1ef      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8006f60:	4b32      	ldr	r3, [pc, #200]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006f62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8006f66:	f003 0302 	and.w	r3, r3, #2
 8006f6a:	2b00      	cmp	r3, #0
 8006f6c:	d1ef      	bne.n	8006f4e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	f003 0304 	and.w	r3, r3, #4
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	f000 80a6 	beq.w	80070c8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006f7c:	2300      	movs	r3, #0
 8006f7e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8006f80:	4b2a      	ldr	r3, [pc, #168]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d10d      	bne.n	8006fa8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006f8c:	4b27      	ldr	r3, [pc, #156]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006f8e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f90:	4a26      	ldr	r2, [pc, #152]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006f92:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006f96:	6593      	str	r3, [r2, #88]	; 0x58
 8006f98:	4b24      	ldr	r3, [pc, #144]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006fa0:	60bb      	str	r3, [r7, #8]
 8006fa2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006fa4:	2301      	movs	r3, #1
 8006fa6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fa8:	4b21      	ldr	r3, [pc, #132]	; (8007030 <HAL_RCC_OscConfig+0x508>)
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fb0:	2b00      	cmp	r3, #0
 8006fb2:	d118      	bne.n	8006fe6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006fb4:	4b1e      	ldr	r3, [pc, #120]	; (8007030 <HAL_RCC_OscConfig+0x508>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	4a1d      	ldr	r2, [pc, #116]	; (8007030 <HAL_RCC_OscConfig+0x508>)
 8006fba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006fbe:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006fc0:	f7fc fec8 	bl	8003d54 <HAL_GetTick>
 8006fc4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fc6:	e008      	b.n	8006fda <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006fc8:	f7fc fec4 	bl	8003d54 <HAL_GetTick>
 8006fcc:	4602      	mov	r2, r0
 8006fce:	693b      	ldr	r3, [r7, #16]
 8006fd0:	1ad3      	subs	r3, r2, r3
 8006fd2:	2b02      	cmp	r3, #2
 8006fd4:	d901      	bls.n	8006fda <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8006fd6:	2303      	movs	r3, #3
 8006fd8:	e1b2      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8006fda:	4b15      	ldr	r3, [pc, #84]	; (8007030 <HAL_RCC_OscConfig+0x508>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d0f0      	beq.n	8006fc8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	689b      	ldr	r3, [r3, #8]
 8006fea:	2b01      	cmp	r3, #1
 8006fec:	d108      	bne.n	8007000 <HAL_RCC_OscConfig+0x4d8>
 8006fee:	4b0f      	ldr	r3, [pc, #60]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8006ff4:	4a0d      	ldr	r2, [pc, #52]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8006ff6:	f043 0301 	orr.w	r3, r3, #1
 8006ffa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006ffe:	e029      	b.n	8007054 <HAL_RCC_OscConfig+0x52c>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	689b      	ldr	r3, [r3, #8]
 8007004:	2b05      	cmp	r3, #5
 8007006:	d115      	bne.n	8007034 <HAL_RCC_OscConfig+0x50c>
 8007008:	4b08      	ldr	r3, [pc, #32]	; (800702c <HAL_RCC_OscConfig+0x504>)
 800700a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800700e:	4a07      	ldr	r2, [pc, #28]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8007010:	f043 0304 	orr.w	r3, r3, #4
 8007014:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007018:	4b04      	ldr	r3, [pc, #16]	; (800702c <HAL_RCC_OscConfig+0x504>)
 800701a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800701e:	4a03      	ldr	r2, [pc, #12]	; (800702c <HAL_RCC_OscConfig+0x504>)
 8007020:	f043 0301 	orr.w	r3, r3, #1
 8007024:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007028:	e014      	b.n	8007054 <HAL_RCC_OscConfig+0x52c>
 800702a:	bf00      	nop
 800702c:	40021000 	.word	0x40021000
 8007030:	40007000 	.word	0x40007000
 8007034:	4b9a      	ldr	r3, [pc, #616]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 8007036:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800703a:	4a99      	ldr	r2, [pc, #612]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 800703c:	f023 0301 	bic.w	r3, r3, #1
 8007040:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8007044:	4b96      	ldr	r3, [pc, #600]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 8007046:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800704a:	4a95      	ldr	r2, [pc, #596]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 800704c:	f023 0304 	bic.w	r3, r3, #4
 8007050:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	689b      	ldr	r3, [r3, #8]
 8007058:	2b00      	cmp	r3, #0
 800705a:	d016      	beq.n	800708a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800705c:	f7fc fe7a 	bl	8003d54 <HAL_GetTick>
 8007060:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007062:	e00a      	b.n	800707a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007064:	f7fc fe76 	bl	8003d54 <HAL_GetTick>
 8007068:	4602      	mov	r2, r0
 800706a:	693b      	ldr	r3, [r7, #16]
 800706c:	1ad3      	subs	r3, r2, r3
 800706e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007072:	4293      	cmp	r3, r2
 8007074:	d901      	bls.n	800707a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8007076:	2303      	movs	r3, #3
 8007078:	e162      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800707a:	4b89      	ldr	r3, [pc, #548]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 800707c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007080:	f003 0302 	and.w	r3, r3, #2
 8007084:	2b00      	cmp	r3, #0
 8007086:	d0ed      	beq.n	8007064 <HAL_RCC_OscConfig+0x53c>
 8007088:	e015      	b.n	80070b6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800708a:	f7fc fe63 	bl	8003d54 <HAL_GetTick>
 800708e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8007090:	e00a      	b.n	80070a8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007092:	f7fc fe5f 	bl	8003d54 <HAL_GetTick>
 8007096:	4602      	mov	r2, r0
 8007098:	693b      	ldr	r3, [r7, #16]
 800709a:	1ad3      	subs	r3, r2, r3
 800709c:	f241 3288 	movw	r2, #5000	; 0x1388
 80070a0:	4293      	cmp	r3, r2
 80070a2:	d901      	bls.n	80070a8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80070a4:	2303      	movs	r3, #3
 80070a6:	e14b      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80070a8:	4b7d      	ldr	r3, [pc, #500]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 80070aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80070ae:	f003 0302 	and.w	r3, r3, #2
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1ed      	bne.n	8007092 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80070b6:	7ffb      	ldrb	r3, [r7, #31]
 80070b8:	2b01      	cmp	r3, #1
 80070ba:	d105      	bne.n	80070c8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80070bc:	4b78      	ldr	r3, [pc, #480]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 80070be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80070c0:	4a77      	ldr	r2, [pc, #476]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 80070c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070c6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	f003 0320 	and.w	r3, r3, #32
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d03c      	beq.n	800714e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d01c      	beq.n	8007116 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80070dc:	4b70      	ldr	r3, [pc, #448]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 80070de:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80070e2:	4a6f      	ldr	r2, [pc, #444]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 80070e4:	f043 0301 	orr.w	r3, r3, #1
 80070e8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80070ec:	f7fc fe32 	bl	8003d54 <HAL_GetTick>
 80070f0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80070f2:	e008      	b.n	8007106 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80070f4:	f7fc fe2e 	bl	8003d54 <HAL_GetTick>
 80070f8:	4602      	mov	r2, r0
 80070fa:	693b      	ldr	r3, [r7, #16]
 80070fc:	1ad3      	subs	r3, r2, r3
 80070fe:	2b02      	cmp	r3, #2
 8007100:	d901      	bls.n	8007106 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8007102:	2303      	movs	r3, #3
 8007104:	e11c      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8007106:	4b66      	ldr	r3, [pc, #408]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 8007108:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800710c:	f003 0302 	and.w	r3, r3, #2
 8007110:	2b00      	cmp	r3, #0
 8007112:	d0ef      	beq.n	80070f4 <HAL_RCC_OscConfig+0x5cc>
 8007114:	e01b      	b.n	800714e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8007116:	4b62      	ldr	r3, [pc, #392]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 8007118:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800711c:	4a60      	ldr	r2, [pc, #384]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 800711e:	f023 0301 	bic.w	r3, r3, #1
 8007122:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007126:	f7fc fe15 	bl	8003d54 <HAL_GetTick>
 800712a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800712c:	e008      	b.n	8007140 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800712e:	f7fc fe11 	bl	8003d54 <HAL_GetTick>
 8007132:	4602      	mov	r2, r0
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	1ad3      	subs	r3, r2, r3
 8007138:	2b02      	cmp	r3, #2
 800713a:	d901      	bls.n	8007140 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800713c:	2303      	movs	r3, #3
 800713e:	e0ff      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8007140:	4b57      	ldr	r3, [pc, #348]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 8007142:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8007146:	f003 0302 	and.w	r3, r3, #2
 800714a:	2b00      	cmp	r3, #0
 800714c:	d1ef      	bne.n	800712e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007152:	2b00      	cmp	r3, #0
 8007154:	f000 80f3 	beq.w	800733e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800715c:	2b02      	cmp	r3, #2
 800715e:	f040 80c9 	bne.w	80072f4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8007162:	4b4f      	ldr	r3, [pc, #316]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 8007164:	68db      	ldr	r3, [r3, #12]
 8007166:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007168:	697b      	ldr	r3, [r7, #20]
 800716a:	f003 0203 	and.w	r2, r3, #3
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007172:	429a      	cmp	r2, r3
 8007174:	d12c      	bne.n	80071d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007180:	3b01      	subs	r3, #1
 8007182:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8007184:	429a      	cmp	r2, r3
 8007186:	d123      	bne.n	80071d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007192:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8007194:	429a      	cmp	r2, r3
 8007196:	d11b      	bne.n	80071d0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071a2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80071a4:	429a      	cmp	r2, r3
 80071a6:	d113      	bne.n	80071d0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071a8:	697b      	ldr	r3, [r7, #20]
 80071aa:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80071b2:	085b      	lsrs	r3, r3, #1
 80071b4:	3b01      	subs	r3, #1
 80071b6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80071b8:	429a      	cmp	r2, r3
 80071ba:	d109      	bne.n	80071d0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80071c2:	687b      	ldr	r3, [r7, #4]
 80071c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071c6:	085b      	lsrs	r3, r3, #1
 80071c8:	3b01      	subs	r3, #1
 80071ca:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80071cc:	429a      	cmp	r2, r3
 80071ce:	d06b      	beq.n	80072a8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80071d0:	69bb      	ldr	r3, [r7, #24]
 80071d2:	2b0c      	cmp	r3, #12
 80071d4:	d062      	beq.n	800729c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80071d6:	4b32      	ldr	r3, [pc, #200]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d001      	beq.n	80071e6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80071e2:	2301      	movs	r3, #1
 80071e4:	e0ac      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80071e6:	4b2e      	ldr	r3, [pc, #184]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	4a2d      	ldr	r2, [pc, #180]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 80071ec:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80071f0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80071f2:	f7fc fdaf 	bl	8003d54 <HAL_GetTick>
 80071f6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80071f8:	e008      	b.n	800720c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80071fa:	f7fc fdab 	bl	8003d54 <HAL_GetTick>
 80071fe:	4602      	mov	r2, r0
 8007200:	693b      	ldr	r3, [r7, #16]
 8007202:	1ad3      	subs	r3, r2, r3
 8007204:	2b02      	cmp	r3, #2
 8007206:	d901      	bls.n	800720c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8007208:	2303      	movs	r3, #3
 800720a:	e099      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800720c:	4b24      	ldr	r3, [pc, #144]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1f0      	bne.n	80071fa <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8007218:	4b21      	ldr	r3, [pc, #132]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 800721a:	68da      	ldr	r2, [r3, #12]
 800721c:	4b21      	ldr	r3, [pc, #132]	; (80072a4 <HAL_RCC_OscConfig+0x77c>)
 800721e:	4013      	ands	r3, r2
 8007220:	687a      	ldr	r2, [r7, #4]
 8007222:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8007228:	3a01      	subs	r2, #1
 800722a:	0112      	lsls	r2, r2, #4
 800722c:	4311      	orrs	r1, r2
 800722e:	687a      	ldr	r2, [r7, #4]
 8007230:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8007232:	0212      	lsls	r2, r2, #8
 8007234:	4311      	orrs	r1, r2
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800723a:	0852      	lsrs	r2, r2, #1
 800723c:	3a01      	subs	r2, #1
 800723e:	0552      	lsls	r2, r2, #21
 8007240:	4311      	orrs	r1, r2
 8007242:	687a      	ldr	r2, [r7, #4]
 8007244:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8007246:	0852      	lsrs	r2, r2, #1
 8007248:	3a01      	subs	r2, #1
 800724a:	0652      	lsls	r2, r2, #25
 800724c:	4311      	orrs	r1, r2
 800724e:	687a      	ldr	r2, [r7, #4]
 8007250:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007252:	06d2      	lsls	r2, r2, #27
 8007254:	430a      	orrs	r2, r1
 8007256:	4912      	ldr	r1, [pc, #72]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 8007258:	4313      	orrs	r3, r2
 800725a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800725c:	4b10      	ldr	r3, [pc, #64]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a0f      	ldr	r2, [pc, #60]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 8007262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007266:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8007268:	4b0d      	ldr	r3, [pc, #52]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	4a0c      	ldr	r2, [pc, #48]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 800726e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8007272:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8007274:	f7fc fd6e 	bl	8003d54 <HAL_GetTick>
 8007278:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800727a:	e008      	b.n	800728e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800727c:	f7fc fd6a 	bl	8003d54 <HAL_GetTick>
 8007280:	4602      	mov	r2, r0
 8007282:	693b      	ldr	r3, [r7, #16]
 8007284:	1ad3      	subs	r3, r2, r3
 8007286:	2b02      	cmp	r3, #2
 8007288:	d901      	bls.n	800728e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800728a:	2303      	movs	r3, #3
 800728c:	e058      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800728e:	4b04      	ldr	r3, [pc, #16]	; (80072a0 <HAL_RCC_OscConfig+0x778>)
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007296:	2b00      	cmp	r3, #0
 8007298:	d0f0      	beq.n	800727c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800729a:	e050      	b.n	800733e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800729c:	2301      	movs	r3, #1
 800729e:	e04f      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
 80072a0:	40021000 	.word	0x40021000
 80072a4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072a8:	4b27      	ldr	r3, [pc, #156]	; (8007348 <HAL_RCC_OscConfig+0x820>)
 80072aa:	681b      	ldr	r3, [r3, #0]
 80072ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d144      	bne.n	800733e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80072b4:	4b24      	ldr	r3, [pc, #144]	; (8007348 <HAL_RCC_OscConfig+0x820>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a23      	ldr	r2, [pc, #140]	; (8007348 <HAL_RCC_OscConfig+0x820>)
 80072ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072be:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80072c0:	4b21      	ldr	r3, [pc, #132]	; (8007348 <HAL_RCC_OscConfig+0x820>)
 80072c2:	68db      	ldr	r3, [r3, #12]
 80072c4:	4a20      	ldr	r2, [pc, #128]	; (8007348 <HAL_RCC_OscConfig+0x820>)
 80072c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80072ca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80072cc:	f7fc fd42 	bl	8003d54 <HAL_GetTick>
 80072d0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072d2:	e008      	b.n	80072e6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80072d4:	f7fc fd3e 	bl	8003d54 <HAL_GetTick>
 80072d8:	4602      	mov	r2, r0
 80072da:	693b      	ldr	r3, [r7, #16]
 80072dc:	1ad3      	subs	r3, r2, r3
 80072de:	2b02      	cmp	r3, #2
 80072e0:	d901      	bls.n	80072e6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80072e2:	2303      	movs	r3, #3
 80072e4:	e02c      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80072e6:	4b18      	ldr	r3, [pc, #96]	; (8007348 <HAL_RCC_OscConfig+0x820>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80072ee:	2b00      	cmp	r3, #0
 80072f0:	d0f0      	beq.n	80072d4 <HAL_RCC_OscConfig+0x7ac>
 80072f2:	e024      	b.n	800733e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80072f4:	69bb      	ldr	r3, [r7, #24]
 80072f6:	2b0c      	cmp	r3, #12
 80072f8:	d01f      	beq.n	800733a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80072fa:	4b13      	ldr	r3, [pc, #76]	; (8007348 <HAL_RCC_OscConfig+0x820>)
 80072fc:	681b      	ldr	r3, [r3, #0]
 80072fe:	4a12      	ldr	r2, [pc, #72]	; (8007348 <HAL_RCC_OscConfig+0x820>)
 8007300:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007304:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007306:	f7fc fd25 	bl	8003d54 <HAL_GetTick>
 800730a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800730c:	e008      	b.n	8007320 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800730e:	f7fc fd21 	bl	8003d54 <HAL_GetTick>
 8007312:	4602      	mov	r2, r0
 8007314:	693b      	ldr	r3, [r7, #16]
 8007316:	1ad3      	subs	r3, r2, r3
 8007318:	2b02      	cmp	r3, #2
 800731a:	d901      	bls.n	8007320 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800731c:	2303      	movs	r3, #3
 800731e:	e00f      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8007320:	4b09      	ldr	r3, [pc, #36]	; (8007348 <HAL_RCC_OscConfig+0x820>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007328:	2b00      	cmp	r3, #0
 800732a:	d1f0      	bne.n	800730e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800732c:	4b06      	ldr	r3, [pc, #24]	; (8007348 <HAL_RCC_OscConfig+0x820>)
 800732e:	68da      	ldr	r2, [r3, #12]
 8007330:	4905      	ldr	r1, [pc, #20]	; (8007348 <HAL_RCC_OscConfig+0x820>)
 8007332:	4b06      	ldr	r3, [pc, #24]	; (800734c <HAL_RCC_OscConfig+0x824>)
 8007334:	4013      	ands	r3, r2
 8007336:	60cb      	str	r3, [r1, #12]
 8007338:	e001      	b.n	800733e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800733a:	2301      	movs	r3, #1
 800733c:	e000      	b.n	8007340 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800733e:	2300      	movs	r3, #0
}
 8007340:	4618      	mov	r0, r3
 8007342:	3720      	adds	r7, #32
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}
 8007348:	40021000 	.word	0x40021000
 800734c:	feeefffc 	.word	0xfeeefffc

08007350 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b084      	sub	sp, #16
 8007354:	af00      	add	r7, sp, #0
 8007356:	6078      	str	r0, [r7, #4]
 8007358:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	2b00      	cmp	r3, #0
 800735e:	d101      	bne.n	8007364 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007360:	2301      	movs	r3, #1
 8007362:	e0e7      	b.n	8007534 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007364:	4b75      	ldr	r3, [pc, #468]	; (800753c <HAL_RCC_ClockConfig+0x1ec>)
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	f003 0307 	and.w	r3, r3, #7
 800736c:	683a      	ldr	r2, [r7, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	d910      	bls.n	8007394 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007372:	4b72      	ldr	r3, [pc, #456]	; (800753c <HAL_RCC_ClockConfig+0x1ec>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	f023 0207 	bic.w	r2, r3, #7
 800737a:	4970      	ldr	r1, [pc, #448]	; (800753c <HAL_RCC_ClockConfig+0x1ec>)
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	4313      	orrs	r3, r2
 8007380:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007382:	4b6e      	ldr	r3, [pc, #440]	; (800753c <HAL_RCC_ClockConfig+0x1ec>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	f003 0307 	and.w	r3, r3, #7
 800738a:	683a      	ldr	r2, [r7, #0]
 800738c:	429a      	cmp	r2, r3
 800738e:	d001      	beq.n	8007394 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8007390:	2301      	movs	r3, #1
 8007392:	e0cf      	b.n	8007534 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	f003 0302 	and.w	r3, r3, #2
 800739c:	2b00      	cmp	r3, #0
 800739e:	d010      	beq.n	80073c2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	689a      	ldr	r2, [r3, #8]
 80073a4:	4b66      	ldr	r3, [pc, #408]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 80073a6:	689b      	ldr	r3, [r3, #8]
 80073a8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80073ac:	429a      	cmp	r2, r3
 80073ae:	d908      	bls.n	80073c2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80073b0:	4b63      	ldr	r3, [pc, #396]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 80073b2:	689b      	ldr	r3, [r3, #8]
 80073b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	689b      	ldr	r3, [r3, #8]
 80073bc:	4960      	ldr	r1, [pc, #384]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 80073be:	4313      	orrs	r3, r2
 80073c0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	f003 0301 	and.w	r3, r3, #1
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d04c      	beq.n	8007468 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	685b      	ldr	r3, [r3, #4]
 80073d2:	2b03      	cmp	r3, #3
 80073d4:	d107      	bne.n	80073e6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80073d6:	4b5a      	ldr	r3, [pc, #360]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d121      	bne.n	8007426 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80073e2:	2301      	movs	r3, #1
 80073e4:	e0a6      	b.n	8007534 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	685b      	ldr	r3, [r3, #4]
 80073ea:	2b02      	cmp	r3, #2
 80073ec:	d107      	bne.n	80073fe <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80073ee:	4b54      	ldr	r3, [pc, #336]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d115      	bne.n	8007426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	e09a      	b.n	8007534 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	685b      	ldr	r3, [r3, #4]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d107      	bne.n	8007416 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8007406:	4b4e      	ldr	r3, [pc, #312]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f003 0302 	and.w	r3, r3, #2
 800740e:	2b00      	cmp	r3, #0
 8007410:	d109      	bne.n	8007426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007412:	2301      	movs	r3, #1
 8007414:	e08e      	b.n	8007534 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8007416:	4b4a      	ldr	r3, [pc, #296]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800741e:	2b00      	cmp	r3, #0
 8007420:	d101      	bne.n	8007426 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8007422:	2301      	movs	r3, #1
 8007424:	e086      	b.n	8007534 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8007426:	4b46      	ldr	r3, [pc, #280]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 8007428:	689b      	ldr	r3, [r3, #8]
 800742a:	f023 0203 	bic.w	r2, r3, #3
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	685b      	ldr	r3, [r3, #4]
 8007432:	4943      	ldr	r1, [pc, #268]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 8007434:	4313      	orrs	r3, r2
 8007436:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007438:	f7fc fc8c 	bl	8003d54 <HAL_GetTick>
 800743c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800743e:	e00a      	b.n	8007456 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007440:	f7fc fc88 	bl	8003d54 <HAL_GetTick>
 8007444:	4602      	mov	r2, r0
 8007446:	68fb      	ldr	r3, [r7, #12]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	f241 3288 	movw	r2, #5000	; 0x1388
 800744e:	4293      	cmp	r3, r2
 8007450:	d901      	bls.n	8007456 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8007452:	2303      	movs	r3, #3
 8007454:	e06e      	b.n	8007534 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007456:	4b3a      	ldr	r3, [pc, #232]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 8007458:	689b      	ldr	r3, [r3, #8]
 800745a:	f003 020c 	and.w	r2, r3, #12
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	685b      	ldr	r3, [r3, #4]
 8007462:	009b      	lsls	r3, r3, #2
 8007464:	429a      	cmp	r2, r3
 8007466:	d1eb      	bne.n	8007440 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	681b      	ldr	r3, [r3, #0]
 800746c:	f003 0302 	and.w	r3, r3, #2
 8007470:	2b00      	cmp	r3, #0
 8007472:	d010      	beq.n	8007496 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	689a      	ldr	r2, [r3, #8]
 8007478:	4b31      	ldr	r3, [pc, #196]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 800747a:	689b      	ldr	r3, [r3, #8]
 800747c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007480:	429a      	cmp	r2, r3
 8007482:	d208      	bcs.n	8007496 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007484:	4b2e      	ldr	r3, [pc, #184]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 8007486:	689b      	ldr	r3, [r3, #8]
 8007488:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800748c:	687b      	ldr	r3, [r7, #4]
 800748e:	689b      	ldr	r3, [r3, #8]
 8007490:	492b      	ldr	r1, [pc, #172]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 8007492:	4313      	orrs	r3, r2
 8007494:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007496:	4b29      	ldr	r3, [pc, #164]	; (800753c <HAL_RCC_ClockConfig+0x1ec>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	f003 0307 	and.w	r3, r3, #7
 800749e:	683a      	ldr	r2, [r7, #0]
 80074a0:	429a      	cmp	r2, r3
 80074a2:	d210      	bcs.n	80074c6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074a4:	4b25      	ldr	r3, [pc, #148]	; (800753c <HAL_RCC_ClockConfig+0x1ec>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f023 0207 	bic.w	r2, r3, #7
 80074ac:	4923      	ldr	r1, [pc, #140]	; (800753c <HAL_RCC_ClockConfig+0x1ec>)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	4313      	orrs	r3, r2
 80074b2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80074b4:	4b21      	ldr	r3, [pc, #132]	; (800753c <HAL_RCC_ClockConfig+0x1ec>)
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	f003 0307 	and.w	r3, r3, #7
 80074bc:	683a      	ldr	r2, [r7, #0]
 80074be:	429a      	cmp	r2, r3
 80074c0:	d001      	beq.n	80074c6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80074c2:	2301      	movs	r3, #1
 80074c4:	e036      	b.n	8007534 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	f003 0304 	and.w	r3, r3, #4
 80074ce:	2b00      	cmp	r3, #0
 80074d0:	d008      	beq.n	80074e4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80074d2:	4b1b      	ldr	r3, [pc, #108]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 80074d4:	689b      	ldr	r3, [r3, #8]
 80074d6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	68db      	ldr	r3, [r3, #12]
 80074de:	4918      	ldr	r1, [pc, #96]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 80074e0:	4313      	orrs	r3, r2
 80074e2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	f003 0308 	and.w	r3, r3, #8
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d009      	beq.n	8007504 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80074f0:	4b13      	ldr	r3, [pc, #76]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 80074f2:	689b      	ldr	r3, [r3, #8]
 80074f4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80074f8:	687b      	ldr	r3, [r7, #4]
 80074fa:	691b      	ldr	r3, [r3, #16]
 80074fc:	00db      	lsls	r3, r3, #3
 80074fe:	4910      	ldr	r1, [pc, #64]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 8007500:	4313      	orrs	r3, r2
 8007502:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8007504:	f000 f824 	bl	8007550 <HAL_RCC_GetSysClockFreq>
 8007508:	4602      	mov	r2, r0
 800750a:	4b0d      	ldr	r3, [pc, #52]	; (8007540 <HAL_RCC_ClockConfig+0x1f0>)
 800750c:	689b      	ldr	r3, [r3, #8]
 800750e:	091b      	lsrs	r3, r3, #4
 8007510:	f003 030f 	and.w	r3, r3, #15
 8007514:	490b      	ldr	r1, [pc, #44]	; (8007544 <HAL_RCC_ClockConfig+0x1f4>)
 8007516:	5ccb      	ldrb	r3, [r1, r3]
 8007518:	f003 031f 	and.w	r3, r3, #31
 800751c:	fa22 f303 	lsr.w	r3, r2, r3
 8007520:	4a09      	ldr	r2, [pc, #36]	; (8007548 <HAL_RCC_ClockConfig+0x1f8>)
 8007522:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8007524:	4b09      	ldr	r3, [pc, #36]	; (800754c <HAL_RCC_ClockConfig+0x1fc>)
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	4618      	mov	r0, r3
 800752a:	f7fc fafb 	bl	8003b24 <HAL_InitTick>
 800752e:	4603      	mov	r3, r0
 8007530:	72fb      	strb	r3, [r7, #11]

  return status;
 8007532:	7afb      	ldrb	r3, [r7, #11]
}
 8007534:	4618      	mov	r0, r3
 8007536:	3710      	adds	r7, #16
 8007538:	46bd      	mov	sp, r7
 800753a:	bd80      	pop	{r7, pc}
 800753c:	40022000 	.word	0x40022000
 8007540:	40021000 	.word	0x40021000
 8007544:	0800e908 	.word	0x0800e908
 8007548:	20000034 	.word	0x20000034
 800754c:	20000038 	.word	0x20000038

08007550 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007550:	b480      	push	{r7}
 8007552:	b089      	sub	sp, #36	; 0x24
 8007554:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8007556:	2300      	movs	r3, #0
 8007558:	61fb      	str	r3, [r7, #28]
 800755a:	2300      	movs	r3, #0
 800755c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800755e:	4b3e      	ldr	r3, [pc, #248]	; (8007658 <HAL_RCC_GetSysClockFreq+0x108>)
 8007560:	689b      	ldr	r3, [r3, #8]
 8007562:	f003 030c 	and.w	r3, r3, #12
 8007566:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8007568:	4b3b      	ldr	r3, [pc, #236]	; (8007658 <HAL_RCC_GetSysClockFreq+0x108>)
 800756a:	68db      	ldr	r3, [r3, #12]
 800756c:	f003 0303 	and.w	r3, r3, #3
 8007570:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8007572:	693b      	ldr	r3, [r7, #16]
 8007574:	2b00      	cmp	r3, #0
 8007576:	d005      	beq.n	8007584 <HAL_RCC_GetSysClockFreq+0x34>
 8007578:	693b      	ldr	r3, [r7, #16]
 800757a:	2b0c      	cmp	r3, #12
 800757c:	d121      	bne.n	80075c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800757e:	68fb      	ldr	r3, [r7, #12]
 8007580:	2b01      	cmp	r3, #1
 8007582:	d11e      	bne.n	80075c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8007584:	4b34      	ldr	r3, [pc, #208]	; (8007658 <HAL_RCC_GetSysClockFreq+0x108>)
 8007586:	681b      	ldr	r3, [r3, #0]
 8007588:	f003 0308 	and.w	r3, r3, #8
 800758c:	2b00      	cmp	r3, #0
 800758e:	d107      	bne.n	80075a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8007590:	4b31      	ldr	r3, [pc, #196]	; (8007658 <HAL_RCC_GetSysClockFreq+0x108>)
 8007592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8007596:	0a1b      	lsrs	r3, r3, #8
 8007598:	f003 030f 	and.w	r3, r3, #15
 800759c:	61fb      	str	r3, [r7, #28]
 800759e:	e005      	b.n	80075ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80075a0:	4b2d      	ldr	r3, [pc, #180]	; (8007658 <HAL_RCC_GetSysClockFreq+0x108>)
 80075a2:	681b      	ldr	r3, [r3, #0]
 80075a4:	091b      	lsrs	r3, r3, #4
 80075a6:	f003 030f 	and.w	r3, r3, #15
 80075aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80075ac:	4a2b      	ldr	r2, [pc, #172]	; (800765c <HAL_RCC_GetSysClockFreq+0x10c>)
 80075ae:	69fb      	ldr	r3, [r7, #28]
 80075b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80075b6:	693b      	ldr	r3, [r7, #16]
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d10d      	bne.n	80075d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80075bc:	69fb      	ldr	r3, [r7, #28]
 80075be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80075c0:	e00a      	b.n	80075d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80075c2:	693b      	ldr	r3, [r7, #16]
 80075c4:	2b04      	cmp	r3, #4
 80075c6:	d102      	bne.n	80075ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80075c8:	4b25      	ldr	r3, [pc, #148]	; (8007660 <HAL_RCC_GetSysClockFreq+0x110>)
 80075ca:	61bb      	str	r3, [r7, #24]
 80075cc:	e004      	b.n	80075d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80075ce:	693b      	ldr	r3, [r7, #16]
 80075d0:	2b08      	cmp	r3, #8
 80075d2:	d101      	bne.n	80075d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80075d4:	4b23      	ldr	r3, [pc, #140]	; (8007664 <HAL_RCC_GetSysClockFreq+0x114>)
 80075d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80075d8:	693b      	ldr	r3, [r7, #16]
 80075da:	2b0c      	cmp	r3, #12
 80075dc:	d134      	bne.n	8007648 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80075de:	4b1e      	ldr	r3, [pc, #120]	; (8007658 <HAL_RCC_GetSysClockFreq+0x108>)
 80075e0:	68db      	ldr	r3, [r3, #12]
 80075e2:	f003 0303 	and.w	r3, r3, #3
 80075e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d003      	beq.n	80075f6 <HAL_RCC_GetSysClockFreq+0xa6>
 80075ee:	68bb      	ldr	r3, [r7, #8]
 80075f0:	2b03      	cmp	r3, #3
 80075f2:	d003      	beq.n	80075fc <HAL_RCC_GetSysClockFreq+0xac>
 80075f4:	e005      	b.n	8007602 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80075f6:	4b1a      	ldr	r3, [pc, #104]	; (8007660 <HAL_RCC_GetSysClockFreq+0x110>)
 80075f8:	617b      	str	r3, [r7, #20]
      break;
 80075fa:	e005      	b.n	8007608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80075fc:	4b19      	ldr	r3, [pc, #100]	; (8007664 <HAL_RCC_GetSysClockFreq+0x114>)
 80075fe:	617b      	str	r3, [r7, #20]
      break;
 8007600:	e002      	b.n	8007608 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8007602:	69fb      	ldr	r3, [r7, #28]
 8007604:	617b      	str	r3, [r7, #20]
      break;
 8007606:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8007608:	4b13      	ldr	r3, [pc, #76]	; (8007658 <HAL_RCC_GetSysClockFreq+0x108>)
 800760a:	68db      	ldr	r3, [r3, #12]
 800760c:	091b      	lsrs	r3, r3, #4
 800760e:	f003 0307 	and.w	r3, r3, #7
 8007612:	3301      	adds	r3, #1
 8007614:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8007616:	4b10      	ldr	r3, [pc, #64]	; (8007658 <HAL_RCC_GetSysClockFreq+0x108>)
 8007618:	68db      	ldr	r3, [r3, #12]
 800761a:	0a1b      	lsrs	r3, r3, #8
 800761c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007620:	697a      	ldr	r2, [r7, #20]
 8007622:	fb03 f202 	mul.w	r2, r3, r2
 8007626:	687b      	ldr	r3, [r7, #4]
 8007628:	fbb2 f3f3 	udiv	r3, r2, r3
 800762c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800762e:	4b0a      	ldr	r3, [pc, #40]	; (8007658 <HAL_RCC_GetSysClockFreq+0x108>)
 8007630:	68db      	ldr	r3, [r3, #12]
 8007632:	0e5b      	lsrs	r3, r3, #25
 8007634:	f003 0303 	and.w	r3, r3, #3
 8007638:	3301      	adds	r3, #1
 800763a:	005b      	lsls	r3, r3, #1
 800763c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800763e:	697a      	ldr	r2, [r7, #20]
 8007640:	683b      	ldr	r3, [r7, #0]
 8007642:	fbb2 f3f3 	udiv	r3, r2, r3
 8007646:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8007648:	69bb      	ldr	r3, [r7, #24]
}
 800764a:	4618      	mov	r0, r3
 800764c:	3724      	adds	r7, #36	; 0x24
 800764e:	46bd      	mov	sp, r7
 8007650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007654:	4770      	bx	lr
 8007656:	bf00      	nop
 8007658:	40021000 	.word	0x40021000
 800765c:	0800e920 	.word	0x0800e920
 8007660:	00f42400 	.word	0x00f42400
 8007664:	007a1200 	.word	0x007a1200

08007668 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007668:	b480      	push	{r7}
 800766a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800766c:	4b03      	ldr	r3, [pc, #12]	; (800767c <HAL_RCC_GetHCLKFreq+0x14>)
 800766e:	681b      	ldr	r3, [r3, #0]
}
 8007670:	4618      	mov	r0, r3
 8007672:	46bd      	mov	sp, r7
 8007674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007678:	4770      	bx	lr
 800767a:	bf00      	nop
 800767c:	20000034 	.word	0x20000034

08007680 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007680:	b580      	push	{r7, lr}
 8007682:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8007684:	f7ff fff0 	bl	8007668 <HAL_RCC_GetHCLKFreq>
 8007688:	4602      	mov	r2, r0
 800768a:	4b06      	ldr	r3, [pc, #24]	; (80076a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800768c:	689b      	ldr	r3, [r3, #8]
 800768e:	0a1b      	lsrs	r3, r3, #8
 8007690:	f003 0307 	and.w	r3, r3, #7
 8007694:	4904      	ldr	r1, [pc, #16]	; (80076a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8007696:	5ccb      	ldrb	r3, [r1, r3]
 8007698:	f003 031f 	and.w	r3, r3, #31
 800769c:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076a0:	4618      	mov	r0, r3
 80076a2:	bd80      	pop	{r7, pc}
 80076a4:	40021000 	.word	0x40021000
 80076a8:	0800e918 	.word	0x0800e918

080076ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80076ac:	b580      	push	{r7, lr}
 80076ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80076b0:	f7ff ffda 	bl	8007668 <HAL_RCC_GetHCLKFreq>
 80076b4:	4602      	mov	r2, r0
 80076b6:	4b06      	ldr	r3, [pc, #24]	; (80076d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80076b8:	689b      	ldr	r3, [r3, #8]
 80076ba:	0adb      	lsrs	r3, r3, #11
 80076bc:	f003 0307 	and.w	r3, r3, #7
 80076c0:	4904      	ldr	r1, [pc, #16]	; (80076d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80076c2:	5ccb      	ldrb	r3, [r1, r3]
 80076c4:	f003 031f 	and.w	r3, r3, #31
 80076c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80076cc:	4618      	mov	r0, r3
 80076ce:	bd80      	pop	{r7, pc}
 80076d0:	40021000 	.word	0x40021000
 80076d4:	0800e918 	.word	0x0800e918

080076d8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80076d8:	b480      	push	{r7}
 80076da:	b083      	sub	sp, #12
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	220f      	movs	r2, #15
 80076e6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80076e8:	4b12      	ldr	r3, [pc, #72]	; (8007734 <HAL_RCC_GetClockConfig+0x5c>)
 80076ea:	689b      	ldr	r3, [r3, #8]
 80076ec:	f003 0203 	and.w	r2, r3, #3
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80076f4:	4b0f      	ldr	r3, [pc, #60]	; (8007734 <HAL_RCC_GetClockConfig+0x5c>)
 80076f6:	689b      	ldr	r3, [r3, #8]
 80076f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8007700:	4b0c      	ldr	r3, [pc, #48]	; (8007734 <HAL_RCC_GetClockConfig+0x5c>)
 8007702:	689b      	ldr	r3, [r3, #8]
 8007704:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800770c:	4b09      	ldr	r3, [pc, #36]	; (8007734 <HAL_RCC_GetClockConfig+0x5c>)
 800770e:	689b      	ldr	r3, [r3, #8]
 8007710:	08db      	lsrs	r3, r3, #3
 8007712:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800771a:	4b07      	ldr	r3, [pc, #28]	; (8007738 <HAL_RCC_GetClockConfig+0x60>)
 800771c:	681b      	ldr	r3, [r3, #0]
 800771e:	f003 0207 	and.w	r2, r3, #7
 8007722:	683b      	ldr	r3, [r7, #0]
 8007724:	601a      	str	r2, [r3, #0]
}
 8007726:	bf00      	nop
 8007728:	370c      	adds	r7, #12
 800772a:	46bd      	mov	sp, r7
 800772c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007730:	4770      	bx	lr
 8007732:	bf00      	nop
 8007734:	40021000 	.word	0x40021000
 8007738:	40022000 	.word	0x40022000

0800773c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b086      	sub	sp, #24
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8007744:	2300      	movs	r3, #0
 8007746:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8007748:	4b2a      	ldr	r3, [pc, #168]	; (80077f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800774a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800774c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007750:	2b00      	cmp	r3, #0
 8007752:	d003      	beq.n	800775c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8007754:	f7ff f984 	bl	8006a60 <HAL_PWREx_GetVoltageRange>
 8007758:	6178      	str	r0, [r7, #20]
 800775a:	e014      	b.n	8007786 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800775c:	4b25      	ldr	r3, [pc, #148]	; (80077f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800775e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007760:	4a24      	ldr	r2, [pc, #144]	; (80077f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007762:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007766:	6593      	str	r3, [r2, #88]	; 0x58
 8007768:	4b22      	ldr	r3, [pc, #136]	; (80077f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800776a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800776c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007770:	60fb      	str	r3, [r7, #12]
 8007772:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8007774:	f7ff f974 	bl	8006a60 <HAL_PWREx_GetVoltageRange>
 8007778:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800777a:	4b1e      	ldr	r3, [pc, #120]	; (80077f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800777c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800777e:	4a1d      	ldr	r2, [pc, #116]	; (80077f4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8007780:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007784:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8007786:	697b      	ldr	r3, [r7, #20]
 8007788:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800778c:	d10b      	bne.n	80077a6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2b80      	cmp	r3, #128	; 0x80
 8007792:	d919      	bls.n	80077c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2ba0      	cmp	r3, #160	; 0xa0
 8007798:	d902      	bls.n	80077a0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800779a:	2302      	movs	r3, #2
 800779c:	613b      	str	r3, [r7, #16]
 800779e:	e013      	b.n	80077c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80077a0:	2301      	movs	r3, #1
 80077a2:	613b      	str	r3, [r7, #16]
 80077a4:	e010      	b.n	80077c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	2b80      	cmp	r3, #128	; 0x80
 80077aa:	d902      	bls.n	80077b2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80077ac:	2303      	movs	r3, #3
 80077ae:	613b      	str	r3, [r7, #16]
 80077b0:	e00a      	b.n	80077c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2b80      	cmp	r3, #128	; 0x80
 80077b6:	d102      	bne.n	80077be <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80077b8:	2302      	movs	r3, #2
 80077ba:	613b      	str	r3, [r7, #16]
 80077bc:	e004      	b.n	80077c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2b70      	cmp	r3, #112	; 0x70
 80077c2:	d101      	bne.n	80077c8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80077c4:	2301      	movs	r3, #1
 80077c6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80077c8:	4b0b      	ldr	r3, [pc, #44]	; (80077f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f023 0207 	bic.w	r2, r3, #7
 80077d0:	4909      	ldr	r1, [pc, #36]	; (80077f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80077d2:	693b      	ldr	r3, [r7, #16]
 80077d4:	4313      	orrs	r3, r2
 80077d6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80077d8:	4b07      	ldr	r3, [pc, #28]	; (80077f8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f003 0307 	and.w	r3, r3, #7
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	429a      	cmp	r2, r3
 80077e4:	d001      	beq.n	80077ea <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80077e6:	2301      	movs	r3, #1
 80077e8:	e000      	b.n	80077ec <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80077ea:	2300      	movs	r3, #0
}
 80077ec:	4618      	mov	r0, r3
 80077ee:	3718      	adds	r7, #24
 80077f0:	46bd      	mov	sp, r7
 80077f2:	bd80      	pop	{r7, pc}
 80077f4:	40021000 	.word	0x40021000
 80077f8:	40022000 	.word	0x40022000

080077fc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80077fc:	b580      	push	{r7, lr}
 80077fe:	b086      	sub	sp, #24
 8007800:	af00      	add	r7, sp, #0
 8007802:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8007804:	2300      	movs	r3, #0
 8007806:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8007808:	2300      	movs	r3, #0
 800780a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007814:	2b00      	cmp	r3, #0
 8007816:	d031      	beq.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800781c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007820:	d01a      	beq.n	8007858 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8007822:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8007826:	d814      	bhi.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8007828:	2b00      	cmp	r3, #0
 800782a:	d009      	beq.n	8007840 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800782c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8007830:	d10f      	bne.n	8007852 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8007832:	4b5d      	ldr	r3, [pc, #372]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007834:	68db      	ldr	r3, [r3, #12]
 8007836:	4a5c      	ldr	r2, [pc, #368]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007838:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800783c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800783e:	e00c      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8007840:	687b      	ldr	r3, [r7, #4]
 8007842:	3304      	adds	r3, #4
 8007844:	2100      	movs	r1, #0
 8007846:	4618      	mov	r0, r3
 8007848:	f000 f9de 	bl	8007c08 <RCCEx_PLLSAI1_Config>
 800784c:	4603      	mov	r3, r0
 800784e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8007850:	e003      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	74fb      	strb	r3, [r7, #19]
      break;
 8007856:	e000      	b.n	800785a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8007858:	bf00      	nop
    }

    if(ret == HAL_OK)
 800785a:	7cfb      	ldrb	r3, [r7, #19]
 800785c:	2b00      	cmp	r3, #0
 800785e:	d10b      	bne.n	8007878 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8007860:	4b51      	ldr	r3, [pc, #324]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007866:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800786e:	494e      	ldr	r1, [pc, #312]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007870:	4313      	orrs	r3, r2
 8007872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8007876:	e001      	b.n	800787c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8007878:	7cfb      	ldrb	r3, [r7, #19]
 800787a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 809e 	beq.w	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800788a:	2300      	movs	r3, #0
 800788c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800788e:	4b46      	ldr	r3, [pc, #280]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007892:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007896:	2b00      	cmp	r3, #0
 8007898:	d101      	bne.n	800789e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800789a:	2301      	movs	r3, #1
 800789c:	e000      	b.n	80078a0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800789e:	2300      	movs	r3, #0
 80078a0:	2b00      	cmp	r3, #0
 80078a2:	d00d      	beq.n	80078c0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80078a4:	4b40      	ldr	r3, [pc, #256]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80078a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078a8:	4a3f      	ldr	r2, [pc, #252]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80078aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80078ae:	6593      	str	r3, [r2, #88]	; 0x58
 80078b0:	4b3d      	ldr	r3, [pc, #244]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80078b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80078b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80078b8:	60bb      	str	r3, [r7, #8]
 80078ba:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80078bc:	2301      	movs	r3, #1
 80078be:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80078c0:	4b3a      	ldr	r3, [pc, #232]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	4a39      	ldr	r2, [pc, #228]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80078c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80078ca:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80078cc:	f7fc fa42 	bl	8003d54 <HAL_GetTick>
 80078d0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80078d2:	e009      	b.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80078d4:	f7fc fa3e 	bl	8003d54 <HAL_GetTick>
 80078d8:	4602      	mov	r2, r0
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	1ad3      	subs	r3, r2, r3
 80078de:	2b02      	cmp	r3, #2
 80078e0:	d902      	bls.n	80078e8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80078e2:	2303      	movs	r3, #3
 80078e4:	74fb      	strb	r3, [r7, #19]
        break;
 80078e6:	e005      	b.n	80078f4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80078e8:	4b30      	ldr	r3, [pc, #192]	; (80079ac <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d0ef      	beq.n	80078d4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80078f4:	7cfb      	ldrb	r3, [r7, #19]
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d15a      	bne.n	80079b0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80078fa:	4b2b      	ldr	r3, [pc, #172]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80078fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007900:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007904:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d01e      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007910:	697a      	ldr	r2, [r7, #20]
 8007912:	429a      	cmp	r2, r3
 8007914:	d019      	beq.n	800794a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8007916:	4b24      	ldr	r3, [pc, #144]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007918:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800791c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007920:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8007922:	4b21      	ldr	r3, [pc, #132]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007924:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007928:	4a1f      	ldr	r2, [pc, #124]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800792a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800792e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8007932:	4b1d      	ldr	r3, [pc, #116]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007934:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007938:	4a1b      	ldr	r2, [pc, #108]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800793a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800793e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8007942:	4a19      	ldr	r2, [pc, #100]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800794a:	697b      	ldr	r3, [r7, #20]
 800794c:	f003 0301 	and.w	r3, r3, #1
 8007950:	2b00      	cmp	r3, #0
 8007952:	d016      	beq.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007954:	f7fc f9fe 	bl	8003d54 <HAL_GetTick>
 8007958:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800795a:	e00b      	b.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800795c:	f7fc f9fa 	bl	8003d54 <HAL_GetTick>
 8007960:	4602      	mov	r2, r0
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	1ad3      	subs	r3, r2, r3
 8007966:	f241 3288 	movw	r2, #5000	; 0x1388
 800796a:	4293      	cmp	r3, r2
 800796c:	d902      	bls.n	8007974 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800796e:	2303      	movs	r3, #3
 8007970:	74fb      	strb	r3, [r7, #19]
            break;
 8007972:	e006      	b.n	8007982 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8007974:	4b0c      	ldr	r3, [pc, #48]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800797a:	f003 0302 	and.w	r3, r3, #2
 800797e:	2b00      	cmp	r3, #0
 8007980:	d0ec      	beq.n	800795c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8007982:	7cfb      	ldrb	r3, [r7, #19]
 8007984:	2b00      	cmp	r3, #0
 8007986:	d10b      	bne.n	80079a0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007988:	4b07      	ldr	r3, [pc, #28]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800798a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800798e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007992:	687b      	ldr	r3, [r7, #4]
 8007994:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007996:	4904      	ldr	r1, [pc, #16]	; (80079a8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8007998:	4313      	orrs	r3, r2
 800799a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800799e:	e009      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80079a0:	7cfb      	ldrb	r3, [r7, #19]
 80079a2:	74bb      	strb	r3, [r7, #18]
 80079a4:	e006      	b.n	80079b4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80079a6:	bf00      	nop
 80079a8:	40021000 	.word	0x40021000
 80079ac:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80079b0:	7cfb      	ldrb	r3, [r7, #19]
 80079b2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80079b4:	7c7b      	ldrb	r3, [r7, #17]
 80079b6:	2b01      	cmp	r3, #1
 80079b8:	d105      	bne.n	80079c6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80079ba:	4b8a      	ldr	r3, [pc, #552]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80079bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80079be:	4a89      	ldr	r2, [pc, #548]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80079c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80079c4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	f003 0301 	and.w	r3, r3, #1
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d00a      	beq.n	80079e8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80079d2:	4b84      	ldr	r3, [pc, #528]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80079d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079d8:	f023 0203 	bic.w	r2, r3, #3
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	6a1b      	ldr	r3, [r3, #32]
 80079e0:	4980      	ldr	r1, [pc, #512]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80079e2:	4313      	orrs	r3, r2
 80079e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	f003 0302 	and.w	r3, r3, #2
 80079f0:	2b00      	cmp	r3, #0
 80079f2:	d00a      	beq.n	8007a0a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80079f4:	4b7b      	ldr	r3, [pc, #492]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80079f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80079fa:	f023 020c 	bic.w	r2, r3, #12
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a02:	4978      	ldr	r1, [pc, #480]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007a04:	4313      	orrs	r3, r2
 8007a06:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	f003 0320 	and.w	r3, r3, #32
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d00a      	beq.n	8007a2c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8007a16:	4b73      	ldr	r3, [pc, #460]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007a18:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a1c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a24:	496f      	ldr	r1, [pc, #444]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007a26:	4313      	orrs	r3, r2
 8007a28:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	d00a      	beq.n	8007a4e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8007a38:	4b6a      	ldr	r3, [pc, #424]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a3e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007a46:	4967      	ldr	r1, [pc, #412]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007a48:	4313      	orrs	r3, r2
 8007a4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d00a      	beq.n	8007a70 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8007a5a:	4b62      	ldr	r3, [pc, #392]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007a5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a60:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a68:	495e      	ldr	r1, [pc, #376]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007a6a:	4313      	orrs	r3, r2
 8007a6c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8007a70:	687b      	ldr	r3, [r7, #4]
 8007a72:	681b      	ldr	r3, [r3, #0]
 8007a74:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d00a      	beq.n	8007a92 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8007a7c:	4b59      	ldr	r3, [pc, #356]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007a7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007a82:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a8a:	4956      	ldr	r1, [pc, #344]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007a8c:	4313      	orrs	r3, r2
 8007a8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d00a      	beq.n	8007ab4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8007a9e:	4b51      	ldr	r3, [pc, #324]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007aa0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007aa4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007aac:	494d      	ldr	r1, [pc, #308]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007aae:	4313      	orrs	r3, r2
 8007ab0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d028      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8007ac0:	4b48      	ldr	r3, [pc, #288]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007ac2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007ac6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ace:	4945      	ldr	r1, [pc, #276]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007ad0:	4313      	orrs	r3, r2
 8007ad2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ada:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007ade:	d106      	bne.n	8007aee <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007ae0:	4b40      	ldr	r3, [pc, #256]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007ae2:	68db      	ldr	r3, [r3, #12]
 8007ae4:	4a3f      	ldr	r2, [pc, #252]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007ae6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007aea:	60d3      	str	r3, [r2, #12]
 8007aec:	e011      	b.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007af6:	d10c      	bne.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	3304      	adds	r3, #4
 8007afc:	2101      	movs	r1, #1
 8007afe:	4618      	mov	r0, r3
 8007b00:	f000 f882 	bl	8007c08 <RCCEx_PLLSAI1_Config>
 8007b04:	4603      	mov	r3, r0
 8007b06:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8007b08:	7cfb      	ldrb	r3, [r7, #19]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d001      	beq.n	8007b12 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8007b0e:	7cfb      	ldrb	r3, [r7, #19]
 8007b10:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d028      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8007b1e:	4b31      	ldr	r3, [pc, #196]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b24:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2c:	492d      	ldr	r1, [pc, #180]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b2e:	4313      	orrs	r3, r2
 8007b30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b38:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8007b3c:	d106      	bne.n	8007b4c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8007b3e:	4b29      	ldr	r3, [pc, #164]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b40:	68db      	ldr	r3, [r3, #12]
 8007b42:	4a28      	ldr	r2, [pc, #160]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b44:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007b48:	60d3      	str	r3, [r2, #12]
 8007b4a:	e011      	b.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b50:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8007b54:	d10c      	bne.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	3304      	adds	r3, #4
 8007b5a:	2101      	movs	r1, #1
 8007b5c:	4618      	mov	r0, r3
 8007b5e:	f000 f853 	bl	8007c08 <RCCEx_PLLSAI1_Config>
 8007b62:	4603      	mov	r3, r0
 8007b64:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007b66:	7cfb      	ldrb	r3, [r7, #19]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d001      	beq.n	8007b70 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8007b6c:	7cfb      	ldrb	r3, [r7, #19]
 8007b6e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d01c      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8007b7c:	4b19      	ldr	r3, [pc, #100]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b7e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007b82:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b8a:	4916      	ldr	r1, [pc, #88]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007b96:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8007b9a:	d10c      	bne.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	3304      	adds	r3, #4
 8007ba0:	2102      	movs	r1, #2
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 f830 	bl	8007c08 <RCCEx_PLLSAI1_Config>
 8007ba8:	4603      	mov	r3, r0
 8007baa:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8007bac:	7cfb      	ldrb	r3, [r7, #19]
 8007bae:	2b00      	cmp	r3, #0
 8007bb0:	d001      	beq.n	8007bb6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8007bb2:	7cfb      	ldrb	r3, [r7, #19]
 8007bb4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8007bb6:	687b      	ldr	r3, [r7, #4]
 8007bb8:	681b      	ldr	r3, [r3, #0]
 8007bba:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00a      	beq.n	8007bd8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8007bc2:	4b08      	ldr	r3, [pc, #32]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007bc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bd0:	4904      	ldr	r1, [pc, #16]	; (8007be4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8007bd2:	4313      	orrs	r3, r2
 8007bd4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8007bd8:	7cbb      	ldrb	r3, [r7, #18]
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3718      	adds	r7, #24
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
 8007be2:	bf00      	nop
 8007be4:	40021000 	.word	0x40021000

08007be8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8007be8:	b480      	push	{r7}
 8007bea:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8007bec:	4b05      	ldr	r3, [pc, #20]	; (8007c04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	4a04      	ldr	r2, [pc, #16]	; (8007c04 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8007bf2:	f043 0304 	orr.w	r3, r3, #4
 8007bf6:	6013      	str	r3, [r2, #0]
}
 8007bf8:	bf00      	nop
 8007bfa:	46bd      	mov	sp, r7
 8007bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c00:	4770      	bx	lr
 8007c02:	bf00      	nop
 8007c04:	40021000 	.word	0x40021000

08007c08 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8007c08:	b580      	push	{r7, lr}
 8007c0a:	b084      	sub	sp, #16
 8007c0c:	af00      	add	r7, sp, #0
 8007c0e:	6078      	str	r0, [r7, #4]
 8007c10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8007c12:	2300      	movs	r3, #0
 8007c14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8007c16:	4b74      	ldr	r3, [pc, #464]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c18:	68db      	ldr	r3, [r3, #12]
 8007c1a:	f003 0303 	and.w	r3, r3, #3
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d018      	beq.n	8007c54 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8007c22:	4b71      	ldr	r3, [pc, #452]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c24:	68db      	ldr	r3, [r3, #12]
 8007c26:	f003 0203 	and.w	r2, r3, #3
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	429a      	cmp	r2, r3
 8007c30:	d10d      	bne.n	8007c4e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
       ||
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	d009      	beq.n	8007c4e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8007c3a:	4b6b      	ldr	r3, [pc, #428]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c3c:	68db      	ldr	r3, [r3, #12]
 8007c3e:	091b      	lsrs	r3, r3, #4
 8007c40:	f003 0307 	and.w	r3, r3, #7
 8007c44:	1c5a      	adds	r2, r3, #1
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	685b      	ldr	r3, [r3, #4]
       ||
 8007c4a:	429a      	cmp	r2, r3
 8007c4c:	d047      	beq.n	8007cde <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	73fb      	strb	r3, [r7, #15]
 8007c52:	e044      	b.n	8007cde <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	2b03      	cmp	r3, #3
 8007c5a:	d018      	beq.n	8007c8e <RCCEx_PLLSAI1_Config+0x86>
 8007c5c:	2b03      	cmp	r3, #3
 8007c5e:	d825      	bhi.n	8007cac <RCCEx_PLLSAI1_Config+0xa4>
 8007c60:	2b01      	cmp	r3, #1
 8007c62:	d002      	beq.n	8007c6a <RCCEx_PLLSAI1_Config+0x62>
 8007c64:	2b02      	cmp	r3, #2
 8007c66:	d009      	beq.n	8007c7c <RCCEx_PLLSAI1_Config+0x74>
 8007c68:	e020      	b.n	8007cac <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8007c6a:	4b5f      	ldr	r3, [pc, #380]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c6c:	681b      	ldr	r3, [r3, #0]
 8007c6e:	f003 0302 	and.w	r3, r3, #2
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	d11d      	bne.n	8007cb2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c7a:	e01a      	b.n	8007cb2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8007c7c:	4b5a      	ldr	r3, [pc, #360]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007c84:	2b00      	cmp	r3, #0
 8007c86:	d116      	bne.n	8007cb6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8007c88:	2301      	movs	r3, #1
 8007c8a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8007c8c:	e013      	b.n	8007cb6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8007c8e:	4b56      	ldr	r3, [pc, #344]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007c96:	2b00      	cmp	r3, #0
 8007c98:	d10f      	bne.n	8007cba <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8007c9a:	4b53      	ldr	r3, [pc, #332]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d109      	bne.n	8007cba <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8007caa:	e006      	b.n	8007cba <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	73fb      	strb	r3, [r7, #15]
      break;
 8007cb0:	e004      	b.n	8007cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007cb2:	bf00      	nop
 8007cb4:	e002      	b.n	8007cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007cb6:	bf00      	nop
 8007cb8:	e000      	b.n	8007cbc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8007cba:	bf00      	nop
    }

    if(status == HAL_OK)
 8007cbc:	7bfb      	ldrb	r3, [r7, #15]
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10d      	bne.n	8007cde <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8007cc2:	4b49      	ldr	r3, [pc, #292]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007cc4:	68db      	ldr	r3, [r3, #12]
 8007cc6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6819      	ldr	r1, [r3, #0]
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	3b01      	subs	r3, #1
 8007cd4:	011b      	lsls	r3, r3, #4
 8007cd6:	430b      	orrs	r3, r1
 8007cd8:	4943      	ldr	r1, [pc, #268]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8007cde:	7bfb      	ldrb	r3, [r7, #15]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d17c      	bne.n	8007dde <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8007ce4:	4b40      	ldr	r3, [pc, #256]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007ce6:	681b      	ldr	r3, [r3, #0]
 8007ce8:	4a3f      	ldr	r2, [pc, #252]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007cea:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8007cee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8007cf0:	f7fc f830 	bl	8003d54 <HAL_GetTick>
 8007cf4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007cf6:	e009      	b.n	8007d0c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007cf8:	f7fc f82c 	bl	8003d54 <HAL_GetTick>
 8007cfc:	4602      	mov	r2, r0
 8007cfe:	68bb      	ldr	r3, [r7, #8]
 8007d00:	1ad3      	subs	r3, r2, r3
 8007d02:	2b02      	cmp	r3, #2
 8007d04:	d902      	bls.n	8007d0c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8007d06:	2303      	movs	r3, #3
 8007d08:	73fb      	strb	r3, [r7, #15]
        break;
 8007d0a:	e005      	b.n	8007d18 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8007d0c:	4b36      	ldr	r3, [pc, #216]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007d14:	2b00      	cmp	r3, #0
 8007d16:	d1ef      	bne.n	8007cf8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8007d18:	7bfb      	ldrb	r3, [r7, #15]
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d15f      	bne.n	8007dde <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8007d1e:	683b      	ldr	r3, [r7, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d110      	bne.n	8007d46 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007d24:	4b30      	ldr	r3, [pc, #192]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d26:	691b      	ldr	r3, [r3, #16]
 8007d28:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8007d2c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007d30:	687a      	ldr	r2, [r7, #4]
 8007d32:	6892      	ldr	r2, [r2, #8]
 8007d34:	0211      	lsls	r1, r2, #8
 8007d36:	687a      	ldr	r2, [r7, #4]
 8007d38:	68d2      	ldr	r2, [r2, #12]
 8007d3a:	06d2      	lsls	r2, r2, #27
 8007d3c:	430a      	orrs	r2, r1
 8007d3e:	492a      	ldr	r1, [pc, #168]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d40:	4313      	orrs	r3, r2
 8007d42:	610b      	str	r3, [r1, #16]
 8007d44:	e027      	b.n	8007d96 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	2b01      	cmp	r3, #1
 8007d4a:	d112      	bne.n	8007d72 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007d4c:	4b26      	ldr	r3, [pc, #152]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d4e:	691b      	ldr	r3, [r3, #16]
 8007d50:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8007d54:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007d58:	687a      	ldr	r2, [r7, #4]
 8007d5a:	6892      	ldr	r2, [r2, #8]
 8007d5c:	0211      	lsls	r1, r2, #8
 8007d5e:	687a      	ldr	r2, [r7, #4]
 8007d60:	6912      	ldr	r2, [r2, #16]
 8007d62:	0852      	lsrs	r2, r2, #1
 8007d64:	3a01      	subs	r2, #1
 8007d66:	0552      	lsls	r2, r2, #21
 8007d68:	430a      	orrs	r2, r1
 8007d6a:	491f      	ldr	r1, [pc, #124]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d6c:	4313      	orrs	r3, r2
 8007d6e:	610b      	str	r3, [r1, #16]
 8007d70:	e011      	b.n	8007d96 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8007d72:	4b1d      	ldr	r3, [pc, #116]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d74:	691b      	ldr	r3, [r3, #16]
 8007d76:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8007d7a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8007d7e:	687a      	ldr	r2, [r7, #4]
 8007d80:	6892      	ldr	r2, [r2, #8]
 8007d82:	0211      	lsls	r1, r2, #8
 8007d84:	687a      	ldr	r2, [r7, #4]
 8007d86:	6952      	ldr	r2, [r2, #20]
 8007d88:	0852      	lsrs	r2, r2, #1
 8007d8a:	3a01      	subs	r2, #1
 8007d8c:	0652      	lsls	r2, r2, #25
 8007d8e:	430a      	orrs	r2, r1
 8007d90:	4915      	ldr	r1, [pc, #84]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d92:	4313      	orrs	r3, r2
 8007d94:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8007d96:	4b14      	ldr	r3, [pc, #80]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	4a13      	ldr	r2, [pc, #76]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007d9c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007da0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007da2:	f7fb ffd7 	bl	8003d54 <HAL_GetTick>
 8007da6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007da8:	e009      	b.n	8007dbe <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8007daa:	f7fb ffd3 	bl	8003d54 <HAL_GetTick>
 8007dae:	4602      	mov	r2, r0
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	1ad3      	subs	r3, r2, r3
 8007db4:	2b02      	cmp	r3, #2
 8007db6:	d902      	bls.n	8007dbe <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8007db8:	2303      	movs	r3, #3
 8007dba:	73fb      	strb	r3, [r7, #15]
          break;
 8007dbc:	e005      	b.n	8007dca <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8007dbe:	4b0a      	ldr	r3, [pc, #40]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dc0:	681b      	ldr	r3, [r3, #0]
 8007dc2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d0ef      	beq.n	8007daa <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8007dca:	7bfb      	ldrb	r3, [r7, #15]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d106      	bne.n	8007dde <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8007dd0:	4b05      	ldr	r3, [pc, #20]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dd2:	691a      	ldr	r2, [r3, #16]
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	4903      	ldr	r1, [pc, #12]	; (8007de8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8007dda:	4313      	orrs	r3, r2
 8007ddc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8007dde:	7bfb      	ldrb	r3, [r7, #15]
}
 8007de0:	4618      	mov	r0, r3
 8007de2:	3710      	adds	r7, #16
 8007de4:	46bd      	mov	sp, r7
 8007de6:	bd80      	pop	{r7, pc}
 8007de8:	40021000 	.word	0x40021000

08007dec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007dec:	b580      	push	{r7, lr}
 8007dee:	b082      	sub	sp, #8
 8007df0:	af00      	add	r7, sp, #0
 8007df2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d101      	bne.n	8007dfe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007dfa:	2301      	movs	r3, #1
 8007dfc:	e049      	b.n	8007e92 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007dfe:	687b      	ldr	r3, [r7, #4]
 8007e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007e04:	b2db      	uxtb	r3, r3
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d106      	bne.n	8007e18 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8007e12:	6878      	ldr	r0, [r7, #4]
 8007e14:	f7fb fde2 	bl	80039dc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2202      	movs	r2, #2
 8007e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	681a      	ldr	r2, [r3, #0]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	3304      	adds	r3, #4
 8007e28:	4619      	mov	r1, r3
 8007e2a:	4610      	mov	r0, r2
 8007e2c:	f000 fa1e 	bl	800826c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	2201      	movs	r2, #1
 8007e34:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	2201      	movs	r2, #1
 8007e3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	2201      	movs	r2, #1
 8007e44:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007e48:	687b      	ldr	r3, [r7, #4]
 8007e4a:	2201      	movs	r2, #1
 8007e4c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	2201      	movs	r2, #1
 8007e54:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8007e58:	687b      	ldr	r3, [r7, #4]
 8007e5a:	2201      	movs	r2, #1
 8007e5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	2201      	movs	r2, #1
 8007e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007e78:	687b      	ldr	r3, [r7, #4]
 8007e7a:	2201      	movs	r2, #1
 8007e7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	2201      	movs	r2, #1
 8007e84:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007e90:	2300      	movs	r3, #0
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3708      	adds	r7, #8
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}
	...

08007e9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007e9c:	b480      	push	{r7}
 8007e9e:	b085      	sub	sp, #20
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007eaa:	b2db      	uxtb	r3, r3
 8007eac:	2b01      	cmp	r3, #1
 8007eae:	d001      	beq.n	8007eb4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007eb0:	2301      	movs	r3, #1
 8007eb2:	e033      	b.n	8007f1c <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	2202      	movs	r2, #2
 8007eb8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	4a19      	ldr	r2, [pc, #100]	; (8007f28 <HAL_TIM_Base_Start+0x8c>)
 8007ec2:	4293      	cmp	r3, r2
 8007ec4:	d009      	beq.n	8007eda <HAL_TIM_Base_Start+0x3e>
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007ece:	d004      	beq.n	8007eda <HAL_TIM_Base_Start+0x3e>
 8007ed0:	687b      	ldr	r3, [r7, #4]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	4a15      	ldr	r2, [pc, #84]	; (8007f2c <HAL_TIM_Base_Start+0x90>)
 8007ed6:	4293      	cmp	r3, r2
 8007ed8:	d115      	bne.n	8007f06 <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	681b      	ldr	r3, [r3, #0]
 8007ede:	689a      	ldr	r2, [r3, #8]
 8007ee0:	4b13      	ldr	r3, [pc, #76]	; (8007f30 <HAL_TIM_Base_Start+0x94>)
 8007ee2:	4013      	ands	r3, r2
 8007ee4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	2b06      	cmp	r3, #6
 8007eea:	d015      	beq.n	8007f18 <HAL_TIM_Base_Start+0x7c>
 8007eec:	68fb      	ldr	r3, [r7, #12]
 8007eee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007ef2:	d011      	beq.n	8007f18 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	681a      	ldr	r2, [r3, #0]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f042 0201 	orr.w	r2, r2, #1
 8007f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f04:	e008      	b.n	8007f18 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	f042 0201 	orr.w	r2, r2, #1
 8007f14:	601a      	str	r2, [r3, #0]
 8007f16:	e000      	b.n	8007f1a <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f18:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007f1a:	2300      	movs	r3, #0
}
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	3714      	adds	r7, #20
 8007f20:	46bd      	mov	sp, r7
 8007f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f26:	4770      	bx	lr
 8007f28:	40012c00 	.word	0x40012c00
 8007f2c:	40014000 	.word	0x40014000
 8007f30:	00010007 	.word	0x00010007

08007f34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007f34:	b480      	push	{r7}
 8007f36:	b085      	sub	sp, #20
 8007f38:	af00      	add	r7, sp, #0
 8007f3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f42:	b2db      	uxtb	r3, r3
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d001      	beq.n	8007f4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007f48:	2301      	movs	r3, #1
 8007f4a:	e03b      	b.n	8007fc4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2202      	movs	r2, #2
 8007f50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	68da      	ldr	r2, [r3, #12]
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	f042 0201 	orr.w	r2, r2, #1
 8007f62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	4a19      	ldr	r2, [pc, #100]	; (8007fd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d009      	beq.n	8007f82 <HAL_TIM_Base_Start_IT+0x4e>
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007f76:	d004      	beq.n	8007f82 <HAL_TIM_Base_Start_IT+0x4e>
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	4a15      	ldr	r2, [pc, #84]	; (8007fd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8007f7e:	4293      	cmp	r3, r2
 8007f80:	d115      	bne.n	8007fae <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	681b      	ldr	r3, [r3, #0]
 8007f86:	689a      	ldr	r2, [r3, #8]
 8007f88:	4b13      	ldr	r3, [pc, #76]	; (8007fd8 <HAL_TIM_Base_Start_IT+0xa4>)
 8007f8a:	4013      	ands	r3, r2
 8007f8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007f8e:	68fb      	ldr	r3, [r7, #12]
 8007f90:	2b06      	cmp	r3, #6
 8007f92:	d015      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x8c>
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007f9a:	d011      	beq.n	8007fc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	681a      	ldr	r2, [r3, #0]
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	f042 0201 	orr.w	r2, r2, #1
 8007faa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fac:	e008      	b.n	8007fc0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	681b      	ldr	r3, [r3, #0]
 8007fb2:	681a      	ldr	r2, [r3, #0]
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	f042 0201 	orr.w	r2, r2, #1
 8007fbc:	601a      	str	r2, [r3, #0]
 8007fbe:	e000      	b.n	8007fc2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007fc0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007fc2:	2300      	movs	r3, #0
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	3714      	adds	r7, #20
 8007fc8:	46bd      	mov	sp, r7
 8007fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fce:	4770      	bx	lr
 8007fd0:	40012c00 	.word	0x40012c00
 8007fd4:	40014000 	.word	0x40014000
 8007fd8:	00010007 	.word	0x00010007

08007fdc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b082      	sub	sp, #8
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	681b      	ldr	r3, [r3, #0]
 8007fe8:	691b      	ldr	r3, [r3, #16]
 8007fea:	f003 0302 	and.w	r3, r3, #2
 8007fee:	2b02      	cmp	r3, #2
 8007ff0:	d122      	bne.n	8008038 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	681b      	ldr	r3, [r3, #0]
 8007ff6:	68db      	ldr	r3, [r3, #12]
 8007ff8:	f003 0302 	and.w	r3, r3, #2
 8007ffc:	2b02      	cmp	r3, #2
 8007ffe:	d11b      	bne.n	8008038 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	f06f 0202 	mvn.w	r2, #2
 8008008:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	2201      	movs	r2, #1
 800800e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	681b      	ldr	r3, [r3, #0]
 8008014:	699b      	ldr	r3, [r3, #24]
 8008016:	f003 0303 	and.w	r3, r3, #3
 800801a:	2b00      	cmp	r3, #0
 800801c:	d003      	beq.n	8008026 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f000 f905 	bl	800822e <HAL_TIM_IC_CaptureCallback>
 8008024:	e005      	b.n	8008032 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008026:	6878      	ldr	r0, [r7, #4]
 8008028:	f000 f8f7 	bl	800821a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800802c:	6878      	ldr	r0, [r7, #4]
 800802e:	f000 f908 	bl	8008242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	2200      	movs	r2, #0
 8008036:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	681b      	ldr	r3, [r3, #0]
 800803c:	691b      	ldr	r3, [r3, #16]
 800803e:	f003 0304 	and.w	r3, r3, #4
 8008042:	2b04      	cmp	r3, #4
 8008044:	d122      	bne.n	800808c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	68db      	ldr	r3, [r3, #12]
 800804c:	f003 0304 	and.w	r3, r3, #4
 8008050:	2b04      	cmp	r3, #4
 8008052:	d11b      	bne.n	800808c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	f06f 0204 	mvn.w	r2, #4
 800805c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	2202      	movs	r2, #2
 8008062:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	699b      	ldr	r3, [r3, #24]
 800806a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800806e:	2b00      	cmp	r3, #0
 8008070:	d003      	beq.n	800807a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008072:	6878      	ldr	r0, [r7, #4]
 8008074:	f000 f8db 	bl	800822e <HAL_TIM_IC_CaptureCallback>
 8008078:	e005      	b.n	8008086 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800807a:	6878      	ldr	r0, [r7, #4]
 800807c:	f000 f8cd 	bl	800821a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008080:	6878      	ldr	r0, [r7, #4]
 8008082:	f000 f8de 	bl	8008242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2200      	movs	r2, #0
 800808a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	691b      	ldr	r3, [r3, #16]
 8008092:	f003 0308 	and.w	r3, r3, #8
 8008096:	2b08      	cmp	r3, #8
 8008098:	d122      	bne.n	80080e0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	68db      	ldr	r3, [r3, #12]
 80080a0:	f003 0308 	and.w	r3, r3, #8
 80080a4:	2b08      	cmp	r3, #8
 80080a6:	d11b      	bne.n	80080e0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	681b      	ldr	r3, [r3, #0]
 80080ac:	f06f 0208 	mvn.w	r2, #8
 80080b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	2204      	movs	r2, #4
 80080b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	69db      	ldr	r3, [r3, #28]
 80080be:	f003 0303 	and.w	r3, r3, #3
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f8b1 	bl	800822e <HAL_TIM_IC_CaptureCallback>
 80080cc:	e005      	b.n	80080da <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80080ce:	6878      	ldr	r0, [r7, #4]
 80080d0:	f000 f8a3 	bl	800821a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80080d4:	6878      	ldr	r0, [r7, #4]
 80080d6:	f000 f8b4 	bl	8008242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	2200      	movs	r2, #0
 80080de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	681b      	ldr	r3, [r3, #0]
 80080e4:	691b      	ldr	r3, [r3, #16]
 80080e6:	f003 0310 	and.w	r3, r3, #16
 80080ea:	2b10      	cmp	r3, #16
 80080ec:	d122      	bne.n	8008134 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	f003 0310 	and.w	r3, r3, #16
 80080f8:	2b10      	cmp	r3, #16
 80080fa:	d11b      	bne.n	8008134 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f06f 0210 	mvn.w	r2, #16
 8008104:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2208      	movs	r2, #8
 800810a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	69db      	ldr	r3, [r3, #28]
 8008112:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008116:	2b00      	cmp	r3, #0
 8008118:	d003      	beq.n	8008122 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800811a:	6878      	ldr	r0, [r7, #4]
 800811c:	f000 f887 	bl	800822e <HAL_TIM_IC_CaptureCallback>
 8008120:	e005      	b.n	800812e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008122:	6878      	ldr	r0, [r7, #4]
 8008124:	f000 f879 	bl	800821a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008128:	6878      	ldr	r0, [r7, #4]
 800812a:	f000 f88a 	bl	8008242 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	2200      	movs	r2, #0
 8008132:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	681b      	ldr	r3, [r3, #0]
 8008138:	691b      	ldr	r3, [r3, #16]
 800813a:	f003 0301 	and.w	r3, r3, #1
 800813e:	2b01      	cmp	r3, #1
 8008140:	d10e      	bne.n	8008160 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	68db      	ldr	r3, [r3, #12]
 8008148:	f003 0301 	and.w	r3, r3, #1
 800814c:	2b01      	cmp	r3, #1
 800814e:	d107      	bne.n	8008160 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f06f 0201 	mvn.w	r2, #1
 8008158:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7fb f9fa 	bl	8003554 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008160:	687b      	ldr	r3, [r7, #4]
 8008162:	681b      	ldr	r3, [r3, #0]
 8008164:	691b      	ldr	r3, [r3, #16]
 8008166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800816a:	2b80      	cmp	r3, #128	; 0x80
 800816c:	d10e      	bne.n	800818c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	68db      	ldr	r3, [r3, #12]
 8008174:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008178:	2b80      	cmp	r3, #128	; 0x80
 800817a:	d107      	bne.n	800818c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	681b      	ldr	r3, [r3, #0]
 8008180:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008184:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008186:	6878      	ldr	r0, [r7, #4]
 8008188:	f000 f944 	bl	8008414 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	691b      	ldr	r3, [r3, #16]
 8008192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008196:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800819a:	d10e      	bne.n	80081ba <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	68db      	ldr	r3, [r3, #12]
 80081a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081a6:	2b80      	cmp	r3, #128	; 0x80
 80081a8:	d107      	bne.n	80081ba <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	681b      	ldr	r3, [r3, #0]
 80081ae:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80081b2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80081b4:	6878      	ldr	r0, [r7, #4]
 80081b6:	f000 f937 	bl	8008428 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	681b      	ldr	r3, [r3, #0]
 80081be:	691b      	ldr	r3, [r3, #16]
 80081c0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c4:	2b40      	cmp	r3, #64	; 0x40
 80081c6:	d10e      	bne.n	80081e6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d2:	2b40      	cmp	r3, #64	; 0x40
 80081d4:	d107      	bne.n	80081e6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80081de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80081e0:	6878      	ldr	r0, [r7, #4]
 80081e2:	f000 f838 	bl	8008256 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	691b      	ldr	r3, [r3, #16]
 80081ec:	f003 0320 	and.w	r3, r3, #32
 80081f0:	2b20      	cmp	r3, #32
 80081f2:	d10e      	bne.n	8008212 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	68db      	ldr	r3, [r3, #12]
 80081fa:	f003 0320 	and.w	r3, r3, #32
 80081fe:	2b20      	cmp	r3, #32
 8008200:	d107      	bne.n	8008212 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	f06f 0220 	mvn.w	r2, #32
 800820a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800820c:	6878      	ldr	r0, [r7, #4]
 800820e:	f000 f8f7 	bl	8008400 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008212:	bf00      	nop
 8008214:	3708      	adds	r7, #8
 8008216:	46bd      	mov	sp, r7
 8008218:	bd80      	pop	{r7, pc}

0800821a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800821a:	b480      	push	{r7}
 800821c:	b083      	sub	sp, #12
 800821e:	af00      	add	r7, sp, #0
 8008220:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008222:	bf00      	nop
 8008224:	370c      	adds	r7, #12
 8008226:	46bd      	mov	sp, r7
 8008228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822c:	4770      	bx	lr

0800822e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800822e:	b480      	push	{r7}
 8008230:	b083      	sub	sp, #12
 8008232:	af00      	add	r7, sp, #0
 8008234:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008236:	bf00      	nop
 8008238:	370c      	adds	r7, #12
 800823a:	46bd      	mov	sp, r7
 800823c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008240:	4770      	bx	lr

08008242 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008242:	b480      	push	{r7}
 8008244:	b083      	sub	sp, #12
 8008246:	af00      	add	r7, sp, #0
 8008248:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800824a:	bf00      	nop
 800824c:	370c      	adds	r7, #12
 800824e:	46bd      	mov	sp, r7
 8008250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008254:	4770      	bx	lr

08008256 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008256:	b480      	push	{r7}
 8008258:	b083      	sub	sp, #12
 800825a:	af00      	add	r7, sp, #0
 800825c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800825e:	bf00      	nop
 8008260:	370c      	adds	r7, #12
 8008262:	46bd      	mov	sp, r7
 8008264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008268:	4770      	bx	lr
	...

0800826c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800826c:	b480      	push	{r7}
 800826e:	b085      	sub	sp, #20
 8008270:	af00      	add	r7, sp, #0
 8008272:	6078      	str	r0, [r7, #4]
 8008274:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	4a2a      	ldr	r2, [pc, #168]	; (8008328 <TIM_Base_SetConfig+0xbc>)
 8008280:	4293      	cmp	r3, r2
 8008282:	d003      	beq.n	800828c <TIM_Base_SetConfig+0x20>
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800828a:	d108      	bne.n	800829e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800828c:	68fb      	ldr	r3, [r7, #12]
 800828e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008292:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	685b      	ldr	r3, [r3, #4]
 8008298:	68fa      	ldr	r2, [r7, #12]
 800829a:	4313      	orrs	r3, r2
 800829c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	4a21      	ldr	r2, [pc, #132]	; (8008328 <TIM_Base_SetConfig+0xbc>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d00b      	beq.n	80082be <TIM_Base_SetConfig+0x52>
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80082ac:	d007      	beq.n	80082be <TIM_Base_SetConfig+0x52>
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	4a1e      	ldr	r2, [pc, #120]	; (800832c <TIM_Base_SetConfig+0xc0>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d003      	beq.n	80082be <TIM_Base_SetConfig+0x52>
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	4a1d      	ldr	r2, [pc, #116]	; (8008330 <TIM_Base_SetConfig+0xc4>)
 80082ba:	4293      	cmp	r3, r2
 80082bc:	d108      	bne.n	80082d0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80082c4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80082c6:	683b      	ldr	r3, [r7, #0]
 80082c8:	68db      	ldr	r3, [r3, #12]
 80082ca:	68fa      	ldr	r2, [r7, #12]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80082d6:	683b      	ldr	r3, [r7, #0]
 80082d8:	695b      	ldr	r3, [r3, #20]
 80082da:	4313      	orrs	r3, r2
 80082dc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	68fa      	ldr	r2, [r7, #12]
 80082e2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80082e4:	683b      	ldr	r3, [r7, #0]
 80082e6:	689a      	ldr	r2, [r3, #8]
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80082ec:	683b      	ldr	r3, [r7, #0]
 80082ee:	681a      	ldr	r2, [r3, #0]
 80082f0:	687b      	ldr	r3, [r7, #4]
 80082f2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	4a0c      	ldr	r2, [pc, #48]	; (8008328 <TIM_Base_SetConfig+0xbc>)
 80082f8:	4293      	cmp	r3, r2
 80082fa:	d007      	beq.n	800830c <TIM_Base_SetConfig+0xa0>
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	4a0b      	ldr	r2, [pc, #44]	; (800832c <TIM_Base_SetConfig+0xc0>)
 8008300:	4293      	cmp	r3, r2
 8008302:	d003      	beq.n	800830c <TIM_Base_SetConfig+0xa0>
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	4a0a      	ldr	r2, [pc, #40]	; (8008330 <TIM_Base_SetConfig+0xc4>)
 8008308:	4293      	cmp	r3, r2
 800830a:	d103      	bne.n	8008314 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	691a      	ldr	r2, [r3, #16]
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2201      	movs	r2, #1
 8008318:	615a      	str	r2, [r3, #20]
}
 800831a:	bf00      	nop
 800831c:	3714      	adds	r7, #20
 800831e:	46bd      	mov	sp, r7
 8008320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008324:	4770      	bx	lr
 8008326:	bf00      	nop
 8008328:	40012c00 	.word	0x40012c00
 800832c:	40014000 	.word	0x40014000
 8008330:	40014400 	.word	0x40014400

08008334 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
 800833c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008344:	2b01      	cmp	r3, #1
 8008346:	d101      	bne.n	800834c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008348:	2302      	movs	r3, #2
 800834a:	e04f      	b.n	80083ec <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2201      	movs	r2, #1
 8008350:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	2202      	movs	r2, #2
 8008358:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800835c:	687b      	ldr	r3, [r7, #4]
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	685b      	ldr	r3, [r3, #4]
 8008362:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	689b      	ldr	r3, [r3, #8]
 800836a:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	4a21      	ldr	r2, [pc, #132]	; (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d108      	bne.n	8008388 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800837c:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800837e:	683b      	ldr	r3, [r7, #0]
 8008380:	685b      	ldr	r3, [r3, #4]
 8008382:	68fa      	ldr	r2, [r7, #12]
 8008384:	4313      	orrs	r3, r2
 8008386:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800838e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008390:	683b      	ldr	r3, [r7, #0]
 8008392:	681b      	ldr	r3, [r3, #0]
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	4313      	orrs	r3, r2
 8008398:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68fa      	ldr	r2, [r7, #12]
 80083a0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	4a14      	ldr	r2, [pc, #80]	; (80083f8 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 80083a8:	4293      	cmp	r3, r2
 80083aa:	d009      	beq.n	80083c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80083b4:	d004      	beq.n	80083c0 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 80083b6:	687b      	ldr	r3, [r7, #4]
 80083b8:	681b      	ldr	r3, [r3, #0]
 80083ba:	4a10      	ldr	r2, [pc, #64]	; (80083fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80083bc:	4293      	cmp	r3, r2
 80083be:	d10c      	bne.n	80083da <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083c0:	68bb      	ldr	r3, [r7, #8]
 80083c2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083c6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	689b      	ldr	r3, [r3, #8]
 80083cc:	68ba      	ldr	r2, [r7, #8]
 80083ce:	4313      	orrs	r3, r2
 80083d0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	68ba      	ldr	r2, [r7, #8]
 80083d8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2201      	movs	r2, #1
 80083de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083e2:	687b      	ldr	r3, [r7, #4]
 80083e4:	2200      	movs	r2, #0
 80083e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083ea:	2300      	movs	r3, #0
}
 80083ec:	4618      	mov	r0, r3
 80083ee:	3714      	adds	r7, #20
 80083f0:	46bd      	mov	sp, r7
 80083f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f6:	4770      	bx	lr
 80083f8:	40012c00 	.word	0x40012c00
 80083fc:	40014000 	.word	0x40014000

08008400 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008400:	b480      	push	{r7}
 8008402:	b083      	sub	sp, #12
 8008404:	af00      	add	r7, sp, #0
 8008406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008408:	bf00      	nop
 800840a:	370c      	adds	r7, #12
 800840c:	46bd      	mov	sp, r7
 800840e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008412:	4770      	bx	lr

08008414 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e040      	b.n	80084d0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8008452:	2b00      	cmp	r3, #0
 8008454:	d106      	bne.n	8008464 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	2200      	movs	r2, #0
 800845a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f7fb faf6 	bl	8003a50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2224      	movs	r2, #36	; 0x24
 8008468:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800846a:	687b      	ldr	r3, [r7, #4]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	681a      	ldr	r2, [r3, #0]
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	f022 0201 	bic.w	r2, r2, #1
 8008478:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f000 f8c0 	bl	8008600 <UART_SetConfig>
 8008480:	4603      	mov	r3, r0
 8008482:	2b01      	cmp	r3, #1
 8008484:	d101      	bne.n	800848a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8008486:	2301      	movs	r3, #1
 8008488:	e022      	b.n	80084d0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800848a:	687b      	ldr	r3, [r7, #4]
 800848c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800848e:	2b00      	cmp	r3, #0
 8008490:	d002      	beq.n	8008498 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8008492:	6878      	ldr	r0, [r7, #4]
 8008494:	f000 fae0 	bl	8008a58 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	681b      	ldr	r3, [r3, #0]
 800849c:	685a      	ldr	r2, [r3, #4]
 800849e:	687b      	ldr	r3, [r7, #4]
 80084a0:	681b      	ldr	r3, [r3, #0]
 80084a2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80084a6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	681b      	ldr	r3, [r3, #0]
 80084ac:	689a      	ldr	r2, [r3, #8]
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084b6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681a      	ldr	r2, [r3, #0]
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	681b      	ldr	r3, [r3, #0]
 80084c2:	f042 0201 	orr.w	r2, r2, #1
 80084c6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80084c8:	6878      	ldr	r0, [r7, #4]
 80084ca:	f000 fb67 	bl	8008b9c <UART_CheckIdleState>
 80084ce:	4603      	mov	r3, r0
}
 80084d0:	4618      	mov	r0, r3
 80084d2:	3708      	adds	r7, #8
 80084d4:	46bd      	mov	sp, r7
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08a      	sub	sp, #40	; 0x28
 80084dc:	af02      	add	r7, sp, #8
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	603b      	str	r3, [r7, #0]
 80084e4:	4613      	mov	r3, r2
 80084e6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80084ec:	2b20      	cmp	r3, #32
 80084ee:	f040 8082 	bne.w	80085f6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <HAL_UART_Transmit+0x26>
 80084f8:	88fb      	ldrh	r3, [r7, #6]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e07a      	b.n	80085f8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8008508:	2b01      	cmp	r3, #1
 800850a:	d101      	bne.n	8008510 <HAL_UART_Transmit+0x38>
 800850c:	2302      	movs	r3, #2
 800850e:	e073      	b.n	80085f8 <HAL_UART_Transmit+0x120>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008518:	68fb      	ldr	r3, [r7, #12]
 800851a:	2200      	movs	r2, #0
 800851c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008520:	68fb      	ldr	r3, [r7, #12]
 8008522:	2221      	movs	r2, #33	; 0x21
 8008524:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008526:	f7fb fc15 	bl	8003d54 <HAL_GetTick>
 800852a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800852c:	68fb      	ldr	r3, [r7, #12]
 800852e:	88fa      	ldrh	r2, [r7, #6]
 8008530:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8008534:	68fb      	ldr	r3, [r7, #12]
 8008536:	88fa      	ldrh	r2, [r7, #6]
 8008538:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800853c:	68fb      	ldr	r3, [r7, #12]
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008544:	d108      	bne.n	8008558 <HAL_UART_Transmit+0x80>
 8008546:	68fb      	ldr	r3, [r7, #12]
 8008548:	691b      	ldr	r3, [r3, #16]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d104      	bne.n	8008558 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800854e:	2300      	movs	r3, #0
 8008550:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8008552:	68bb      	ldr	r3, [r7, #8]
 8008554:	61bb      	str	r3, [r7, #24]
 8008556:	e003      	b.n	8008560 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800855c:	2300      	movs	r3, #0
 800855e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	2200      	movs	r2, #0
 8008564:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8008568:	e02d      	b.n	80085c6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800856a:	683b      	ldr	r3, [r7, #0]
 800856c:	9300      	str	r3, [sp, #0]
 800856e:	697b      	ldr	r3, [r7, #20]
 8008570:	2200      	movs	r2, #0
 8008572:	2180      	movs	r1, #128	; 0x80
 8008574:	68f8      	ldr	r0, [r7, #12]
 8008576:	f000 fb5a 	bl	8008c2e <UART_WaitOnFlagUntilTimeout>
 800857a:	4603      	mov	r3, r0
 800857c:	2b00      	cmp	r3, #0
 800857e:	d001      	beq.n	8008584 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8008580:	2303      	movs	r3, #3
 8008582:	e039      	b.n	80085f8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8008584:	69fb      	ldr	r3, [r7, #28]
 8008586:	2b00      	cmp	r3, #0
 8008588:	d10b      	bne.n	80085a2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800858a:	69bb      	ldr	r3, [r7, #24]
 800858c:	881a      	ldrh	r2, [r3, #0]
 800858e:	68fb      	ldr	r3, [r7, #12]
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008596:	b292      	uxth	r2, r2
 8008598:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800859a:	69bb      	ldr	r3, [r7, #24]
 800859c:	3302      	adds	r3, #2
 800859e:	61bb      	str	r3, [r7, #24]
 80085a0:	e008      	b.n	80085b4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80085a2:	69fb      	ldr	r3, [r7, #28]
 80085a4:	781a      	ldrb	r2, [r3, #0]
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	b292      	uxth	r2, r2
 80085ac:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80085ae:	69fb      	ldr	r3, [r7, #28]
 80085b0:	3301      	adds	r3, #1
 80085b2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80085ba:	b29b      	uxth	r3, r3
 80085bc:	3b01      	subs	r3, #1
 80085be:	b29a      	uxth	r2, r3
 80085c0:	68fb      	ldr	r3, [r7, #12]
 80085c2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80085cc:	b29b      	uxth	r3, r3
 80085ce:	2b00      	cmp	r3, #0
 80085d0:	d1cb      	bne.n	800856a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80085d2:	683b      	ldr	r3, [r7, #0]
 80085d4:	9300      	str	r3, [sp, #0]
 80085d6:	697b      	ldr	r3, [r7, #20]
 80085d8:	2200      	movs	r2, #0
 80085da:	2140      	movs	r1, #64	; 0x40
 80085dc:	68f8      	ldr	r0, [r7, #12]
 80085de:	f000 fb26 	bl	8008c2e <UART_WaitOnFlagUntilTimeout>
 80085e2:	4603      	mov	r3, r0
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	d001      	beq.n	80085ec <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80085e8:	2303      	movs	r3, #3
 80085ea:	e005      	b.n	80085f8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80085ec:	68fb      	ldr	r3, [r7, #12]
 80085ee:	2220      	movs	r2, #32
 80085f0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80085f2:	2300      	movs	r3, #0
 80085f4:	e000      	b.n	80085f8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80085f6:	2302      	movs	r3, #2
  }
}
 80085f8:	4618      	mov	r0, r3
 80085fa:	3720      	adds	r7, #32
 80085fc:	46bd      	mov	sp, r7
 80085fe:	bd80      	pop	{r7, pc}

08008600 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008600:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008604:	b08a      	sub	sp, #40	; 0x28
 8008606:	af00      	add	r7, sp, #0
 8008608:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800860a:	2300      	movs	r3, #0
 800860c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	689a      	ldr	r2, [r3, #8]
 8008614:	68fb      	ldr	r3, [r7, #12]
 8008616:	691b      	ldr	r3, [r3, #16]
 8008618:	431a      	orrs	r2, r3
 800861a:	68fb      	ldr	r3, [r7, #12]
 800861c:	695b      	ldr	r3, [r3, #20]
 800861e:	431a      	orrs	r2, r3
 8008620:	68fb      	ldr	r3, [r7, #12]
 8008622:	69db      	ldr	r3, [r3, #28]
 8008624:	4313      	orrs	r3, r2
 8008626:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008628:	68fb      	ldr	r3, [r7, #12]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	4bb4      	ldr	r3, [pc, #720]	; (8008900 <UART_SetConfig+0x300>)
 8008630:	4013      	ands	r3, r2
 8008632:	68fa      	ldr	r2, [r7, #12]
 8008634:	6812      	ldr	r2, [r2, #0]
 8008636:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008638:	430b      	orrs	r3, r1
 800863a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	685b      	ldr	r3, [r3, #4]
 8008642:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	68da      	ldr	r2, [r3, #12]
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	430a      	orrs	r2, r1
 8008650:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8008652:	68fb      	ldr	r3, [r7, #12]
 8008654:	699b      	ldr	r3, [r3, #24]
 8008656:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008658:	68fb      	ldr	r3, [r7, #12]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	4aa9      	ldr	r2, [pc, #676]	; (8008904 <UART_SetConfig+0x304>)
 800865e:	4293      	cmp	r3, r2
 8008660:	d004      	beq.n	800866c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8008662:	68fb      	ldr	r3, [r7, #12]
 8008664:	6a1b      	ldr	r3, [r3, #32]
 8008666:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008668:	4313      	orrs	r3, r2
 800866a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800866c:	68fb      	ldr	r3, [r7, #12]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	689b      	ldr	r3, [r3, #8]
 8008672:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8008676:	68fb      	ldr	r3, [r7, #12]
 8008678:	681b      	ldr	r3, [r3, #0]
 800867a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800867c:	430a      	orrs	r2, r1
 800867e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008680:	68fb      	ldr	r3, [r7, #12]
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	4aa0      	ldr	r2, [pc, #640]	; (8008908 <UART_SetConfig+0x308>)
 8008686:	4293      	cmp	r3, r2
 8008688:	d126      	bne.n	80086d8 <UART_SetConfig+0xd8>
 800868a:	4ba0      	ldr	r3, [pc, #640]	; (800890c <UART_SetConfig+0x30c>)
 800868c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008690:	f003 0303 	and.w	r3, r3, #3
 8008694:	2b03      	cmp	r3, #3
 8008696:	d81b      	bhi.n	80086d0 <UART_SetConfig+0xd0>
 8008698:	a201      	add	r2, pc, #4	; (adr r2, 80086a0 <UART_SetConfig+0xa0>)
 800869a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800869e:	bf00      	nop
 80086a0:	080086b1 	.word	0x080086b1
 80086a4:	080086c1 	.word	0x080086c1
 80086a8:	080086b9 	.word	0x080086b9
 80086ac:	080086c9 	.word	0x080086c9
 80086b0:	2301      	movs	r3, #1
 80086b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086b6:	e080      	b.n	80087ba <UART_SetConfig+0x1ba>
 80086b8:	2302      	movs	r3, #2
 80086ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086be:	e07c      	b.n	80087ba <UART_SetConfig+0x1ba>
 80086c0:	2304      	movs	r3, #4
 80086c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086c6:	e078      	b.n	80087ba <UART_SetConfig+0x1ba>
 80086c8:	2308      	movs	r3, #8
 80086ca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086ce:	e074      	b.n	80087ba <UART_SetConfig+0x1ba>
 80086d0:	2310      	movs	r3, #16
 80086d2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80086d6:	e070      	b.n	80087ba <UART_SetConfig+0x1ba>
 80086d8:	68fb      	ldr	r3, [r7, #12]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	4a8c      	ldr	r2, [pc, #560]	; (8008910 <UART_SetConfig+0x310>)
 80086de:	4293      	cmp	r3, r2
 80086e0:	d138      	bne.n	8008754 <UART_SetConfig+0x154>
 80086e2:	4b8a      	ldr	r3, [pc, #552]	; (800890c <UART_SetConfig+0x30c>)
 80086e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086e8:	f003 030c 	and.w	r3, r3, #12
 80086ec:	2b0c      	cmp	r3, #12
 80086ee:	d82d      	bhi.n	800874c <UART_SetConfig+0x14c>
 80086f0:	a201      	add	r2, pc, #4	; (adr r2, 80086f8 <UART_SetConfig+0xf8>)
 80086f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80086f6:	bf00      	nop
 80086f8:	0800872d 	.word	0x0800872d
 80086fc:	0800874d 	.word	0x0800874d
 8008700:	0800874d 	.word	0x0800874d
 8008704:	0800874d 	.word	0x0800874d
 8008708:	0800873d 	.word	0x0800873d
 800870c:	0800874d 	.word	0x0800874d
 8008710:	0800874d 	.word	0x0800874d
 8008714:	0800874d 	.word	0x0800874d
 8008718:	08008735 	.word	0x08008735
 800871c:	0800874d 	.word	0x0800874d
 8008720:	0800874d 	.word	0x0800874d
 8008724:	0800874d 	.word	0x0800874d
 8008728:	08008745 	.word	0x08008745
 800872c:	2300      	movs	r3, #0
 800872e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008732:	e042      	b.n	80087ba <UART_SetConfig+0x1ba>
 8008734:	2302      	movs	r3, #2
 8008736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800873a:	e03e      	b.n	80087ba <UART_SetConfig+0x1ba>
 800873c:	2304      	movs	r3, #4
 800873e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008742:	e03a      	b.n	80087ba <UART_SetConfig+0x1ba>
 8008744:	2308      	movs	r3, #8
 8008746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800874a:	e036      	b.n	80087ba <UART_SetConfig+0x1ba>
 800874c:	2310      	movs	r3, #16
 800874e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008752:	e032      	b.n	80087ba <UART_SetConfig+0x1ba>
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	4a6a      	ldr	r2, [pc, #424]	; (8008904 <UART_SetConfig+0x304>)
 800875a:	4293      	cmp	r3, r2
 800875c:	d12a      	bne.n	80087b4 <UART_SetConfig+0x1b4>
 800875e:	4b6b      	ldr	r3, [pc, #428]	; (800890c <UART_SetConfig+0x30c>)
 8008760:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008764:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008768:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800876c:	d01a      	beq.n	80087a4 <UART_SetConfig+0x1a4>
 800876e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008772:	d81b      	bhi.n	80087ac <UART_SetConfig+0x1ac>
 8008774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008778:	d00c      	beq.n	8008794 <UART_SetConfig+0x194>
 800877a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800877e:	d815      	bhi.n	80087ac <UART_SetConfig+0x1ac>
 8008780:	2b00      	cmp	r3, #0
 8008782:	d003      	beq.n	800878c <UART_SetConfig+0x18c>
 8008784:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008788:	d008      	beq.n	800879c <UART_SetConfig+0x19c>
 800878a:	e00f      	b.n	80087ac <UART_SetConfig+0x1ac>
 800878c:	2300      	movs	r3, #0
 800878e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8008792:	e012      	b.n	80087ba <UART_SetConfig+0x1ba>
 8008794:	2302      	movs	r3, #2
 8008796:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800879a:	e00e      	b.n	80087ba <UART_SetConfig+0x1ba>
 800879c:	2304      	movs	r3, #4
 800879e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087a2:	e00a      	b.n	80087ba <UART_SetConfig+0x1ba>
 80087a4:	2308      	movs	r3, #8
 80087a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087aa:	e006      	b.n	80087ba <UART_SetConfig+0x1ba>
 80087ac:	2310      	movs	r3, #16
 80087ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80087b2:	e002      	b.n	80087ba <UART_SetConfig+0x1ba>
 80087b4:	2310      	movs	r3, #16
 80087b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a51      	ldr	r2, [pc, #324]	; (8008904 <UART_SetConfig+0x304>)
 80087c0:	4293      	cmp	r3, r2
 80087c2:	d17a      	bne.n	80088ba <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80087c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80087c8:	2b08      	cmp	r3, #8
 80087ca:	d824      	bhi.n	8008816 <UART_SetConfig+0x216>
 80087cc:	a201      	add	r2, pc, #4	; (adr r2, 80087d4 <UART_SetConfig+0x1d4>)
 80087ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80087d2:	bf00      	nop
 80087d4:	080087f9 	.word	0x080087f9
 80087d8:	08008817 	.word	0x08008817
 80087dc:	08008801 	.word	0x08008801
 80087e0:	08008817 	.word	0x08008817
 80087e4:	08008807 	.word	0x08008807
 80087e8:	08008817 	.word	0x08008817
 80087ec:	08008817 	.word	0x08008817
 80087f0:	08008817 	.word	0x08008817
 80087f4:	0800880f 	.word	0x0800880f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80087f8:	f7fe ff42 	bl	8007680 <HAL_RCC_GetPCLK1Freq>
 80087fc:	61f8      	str	r0, [r7, #28]
        break;
 80087fe:	e010      	b.n	8008822 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008800:	4b44      	ldr	r3, [pc, #272]	; (8008914 <UART_SetConfig+0x314>)
 8008802:	61fb      	str	r3, [r7, #28]
        break;
 8008804:	e00d      	b.n	8008822 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008806:	f7fe fea3 	bl	8007550 <HAL_RCC_GetSysClockFreq>
 800880a:	61f8      	str	r0, [r7, #28]
        break;
 800880c:	e009      	b.n	8008822 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800880e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008812:	61fb      	str	r3, [r7, #28]
        break;
 8008814:	e005      	b.n	8008822 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8008816:	2300      	movs	r3, #0
 8008818:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008820:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008822:	69fb      	ldr	r3, [r7, #28]
 8008824:	2b00      	cmp	r3, #0
 8008826:	f000 8107 	beq.w	8008a38 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	685a      	ldr	r2, [r3, #4]
 800882e:	4613      	mov	r3, r2
 8008830:	005b      	lsls	r3, r3, #1
 8008832:	4413      	add	r3, r2
 8008834:	69fa      	ldr	r2, [r7, #28]
 8008836:	429a      	cmp	r2, r3
 8008838:	d305      	bcc.n	8008846 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8008840:	69fa      	ldr	r2, [r7, #28]
 8008842:	429a      	cmp	r2, r3
 8008844:	d903      	bls.n	800884e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8008846:	2301      	movs	r3, #1
 8008848:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800884c:	e0f4      	b.n	8008a38 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800884e:	69fb      	ldr	r3, [r7, #28]
 8008850:	2200      	movs	r2, #0
 8008852:	461c      	mov	r4, r3
 8008854:	4615      	mov	r5, r2
 8008856:	f04f 0200 	mov.w	r2, #0
 800885a:	f04f 0300 	mov.w	r3, #0
 800885e:	022b      	lsls	r3, r5, #8
 8008860:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8008864:	0222      	lsls	r2, r4, #8
 8008866:	68f9      	ldr	r1, [r7, #12]
 8008868:	6849      	ldr	r1, [r1, #4]
 800886a:	0849      	lsrs	r1, r1, #1
 800886c:	2000      	movs	r0, #0
 800886e:	4688      	mov	r8, r1
 8008870:	4681      	mov	r9, r0
 8008872:	eb12 0a08 	adds.w	sl, r2, r8
 8008876:	eb43 0b09 	adc.w	fp, r3, r9
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	685b      	ldr	r3, [r3, #4]
 800887e:	2200      	movs	r2, #0
 8008880:	603b      	str	r3, [r7, #0]
 8008882:	607a      	str	r2, [r7, #4]
 8008884:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008888:	4650      	mov	r0, sl
 800888a:	4659      	mov	r1, fp
 800888c:	f7f8 f98c 	bl	8000ba8 <__aeabi_uldivmod>
 8008890:	4602      	mov	r2, r0
 8008892:	460b      	mov	r3, r1
 8008894:	4613      	mov	r3, r2
 8008896:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008898:	69bb      	ldr	r3, [r7, #24]
 800889a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800889e:	d308      	bcc.n	80088b2 <UART_SetConfig+0x2b2>
 80088a0:	69bb      	ldr	r3, [r7, #24]
 80088a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80088a6:	d204      	bcs.n	80088b2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	681b      	ldr	r3, [r3, #0]
 80088ac:	69ba      	ldr	r2, [r7, #24]
 80088ae:	60da      	str	r2, [r3, #12]
 80088b0:	e0c2      	b.n	8008a38 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80088b2:	2301      	movs	r3, #1
 80088b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80088b8:	e0be      	b.n	8008a38 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80088ba:	68fb      	ldr	r3, [r7, #12]
 80088bc:	69db      	ldr	r3, [r3, #28]
 80088be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80088c2:	d16a      	bne.n	800899a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80088c4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80088c8:	2b08      	cmp	r3, #8
 80088ca:	d834      	bhi.n	8008936 <UART_SetConfig+0x336>
 80088cc:	a201      	add	r2, pc, #4	; (adr r2, 80088d4 <UART_SetConfig+0x2d4>)
 80088ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80088d2:	bf00      	nop
 80088d4:	080088f9 	.word	0x080088f9
 80088d8:	08008919 	.word	0x08008919
 80088dc:	08008921 	.word	0x08008921
 80088e0:	08008937 	.word	0x08008937
 80088e4:	08008927 	.word	0x08008927
 80088e8:	08008937 	.word	0x08008937
 80088ec:	08008937 	.word	0x08008937
 80088f0:	08008937 	.word	0x08008937
 80088f4:	0800892f 	.word	0x0800892f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088f8:	f7fe fec2 	bl	8007680 <HAL_RCC_GetPCLK1Freq>
 80088fc:	61f8      	str	r0, [r7, #28]
        break;
 80088fe:	e020      	b.n	8008942 <UART_SetConfig+0x342>
 8008900:	efff69f3 	.word	0xefff69f3
 8008904:	40008000 	.word	0x40008000
 8008908:	40013800 	.word	0x40013800
 800890c:	40021000 	.word	0x40021000
 8008910:	40004400 	.word	0x40004400
 8008914:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008918:	f7fe fec8 	bl	80076ac <HAL_RCC_GetPCLK2Freq>
 800891c:	61f8      	str	r0, [r7, #28]
        break;
 800891e:	e010      	b.n	8008942 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008920:	4b4c      	ldr	r3, [pc, #304]	; (8008a54 <UART_SetConfig+0x454>)
 8008922:	61fb      	str	r3, [r7, #28]
        break;
 8008924:	e00d      	b.n	8008942 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008926:	f7fe fe13 	bl	8007550 <HAL_RCC_GetSysClockFreq>
 800892a:	61f8      	str	r0, [r7, #28]
        break;
 800892c:	e009      	b.n	8008942 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800892e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008932:	61fb      	str	r3, [r7, #28]
        break;
 8008934:	e005      	b.n	8008942 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8008936:	2300      	movs	r3, #0
 8008938:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800893a:	2301      	movs	r3, #1
 800893c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8008940:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008942:	69fb      	ldr	r3, [r7, #28]
 8008944:	2b00      	cmp	r3, #0
 8008946:	d077      	beq.n	8008a38 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8008948:	69fb      	ldr	r3, [r7, #28]
 800894a:	005a      	lsls	r2, r3, #1
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	685b      	ldr	r3, [r3, #4]
 8008950:	085b      	lsrs	r3, r3, #1
 8008952:	441a      	add	r2, r3
 8008954:	68fb      	ldr	r3, [r7, #12]
 8008956:	685b      	ldr	r3, [r3, #4]
 8008958:	fbb2 f3f3 	udiv	r3, r2, r3
 800895c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800895e:	69bb      	ldr	r3, [r7, #24]
 8008960:	2b0f      	cmp	r3, #15
 8008962:	d916      	bls.n	8008992 <UART_SetConfig+0x392>
 8008964:	69bb      	ldr	r3, [r7, #24]
 8008966:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800896a:	d212      	bcs.n	8008992 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800896c:	69bb      	ldr	r3, [r7, #24]
 800896e:	b29b      	uxth	r3, r3
 8008970:	f023 030f 	bic.w	r3, r3, #15
 8008974:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008976:	69bb      	ldr	r3, [r7, #24]
 8008978:	085b      	lsrs	r3, r3, #1
 800897a:	b29b      	uxth	r3, r3
 800897c:	f003 0307 	and.w	r3, r3, #7
 8008980:	b29a      	uxth	r2, r3
 8008982:	8afb      	ldrh	r3, [r7, #22]
 8008984:	4313      	orrs	r3, r2
 8008986:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	681b      	ldr	r3, [r3, #0]
 800898c:	8afa      	ldrh	r2, [r7, #22]
 800898e:	60da      	str	r2, [r3, #12]
 8008990:	e052      	b.n	8008a38 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008992:	2301      	movs	r3, #1
 8008994:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8008998:	e04e      	b.n	8008a38 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800899a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800899e:	2b08      	cmp	r3, #8
 80089a0:	d827      	bhi.n	80089f2 <UART_SetConfig+0x3f2>
 80089a2:	a201      	add	r2, pc, #4	; (adr r2, 80089a8 <UART_SetConfig+0x3a8>)
 80089a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089a8:	080089cd 	.word	0x080089cd
 80089ac:	080089d5 	.word	0x080089d5
 80089b0:	080089dd 	.word	0x080089dd
 80089b4:	080089f3 	.word	0x080089f3
 80089b8:	080089e3 	.word	0x080089e3
 80089bc:	080089f3 	.word	0x080089f3
 80089c0:	080089f3 	.word	0x080089f3
 80089c4:	080089f3 	.word	0x080089f3
 80089c8:	080089eb 	.word	0x080089eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089cc:	f7fe fe58 	bl	8007680 <HAL_RCC_GetPCLK1Freq>
 80089d0:	61f8      	str	r0, [r7, #28]
        break;
 80089d2:	e014      	b.n	80089fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089d4:	f7fe fe6a 	bl	80076ac <HAL_RCC_GetPCLK2Freq>
 80089d8:	61f8      	str	r0, [r7, #28]
        break;
 80089da:	e010      	b.n	80089fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80089dc:	4b1d      	ldr	r3, [pc, #116]	; (8008a54 <UART_SetConfig+0x454>)
 80089de:	61fb      	str	r3, [r7, #28]
        break;
 80089e0:	e00d      	b.n	80089fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80089e2:	f7fe fdb5 	bl	8007550 <HAL_RCC_GetSysClockFreq>
 80089e6:	61f8      	str	r0, [r7, #28]
        break;
 80089e8:	e009      	b.n	80089fe <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80089ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80089ee:	61fb      	str	r3, [r7, #28]
        break;
 80089f0:	e005      	b.n	80089fe <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80089f6:	2301      	movs	r3, #1
 80089f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80089fc:	bf00      	nop
    }

    if (pclk != 0U)
 80089fe:	69fb      	ldr	r3, [r7, #28]
 8008a00:	2b00      	cmp	r3, #0
 8008a02:	d019      	beq.n	8008a38 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8008a04:	68fb      	ldr	r3, [r7, #12]
 8008a06:	685b      	ldr	r3, [r3, #4]
 8008a08:	085a      	lsrs	r2, r3, #1
 8008a0a:	69fb      	ldr	r3, [r7, #28]
 8008a0c:	441a      	add	r2, r3
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	685b      	ldr	r3, [r3, #4]
 8008a12:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a16:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a18:	69bb      	ldr	r3, [r7, #24]
 8008a1a:	2b0f      	cmp	r3, #15
 8008a1c:	d909      	bls.n	8008a32 <UART_SetConfig+0x432>
 8008a1e:	69bb      	ldr	r3, [r7, #24]
 8008a20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a24:	d205      	bcs.n	8008a32 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008a26:	69bb      	ldr	r3, [r7, #24]
 8008a28:	b29a      	uxth	r2, r3
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	60da      	str	r2, [r3, #12]
 8008a30:	e002      	b.n	8008a38 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8008a32:	2301      	movs	r3, #1
 8008a34:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	2200      	movs	r2, #0
 8008a3c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8008a3e:	68fb      	ldr	r3, [r7, #12]
 8008a40:	2200      	movs	r2, #0
 8008a42:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8008a44:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8008a48:	4618      	mov	r0, r3
 8008a4a:	3728      	adds	r7, #40	; 0x28
 8008a4c:	46bd      	mov	sp, r7
 8008a4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008a52:	bf00      	nop
 8008a54:	00f42400 	.word	0x00f42400

08008a58 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008a58:	b480      	push	{r7}
 8008a5a:	b083      	sub	sp, #12
 8008a5c:	af00      	add	r7, sp, #0
 8008a5e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a64:	f003 0301 	and.w	r3, r3, #1
 8008a68:	2b00      	cmp	r3, #0
 8008a6a:	d00a      	beq.n	8008a82 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	685b      	ldr	r3, [r3, #4]
 8008a72:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008a76:	687b      	ldr	r3, [r7, #4]
 8008a78:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	430a      	orrs	r2, r1
 8008a80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008a82:	687b      	ldr	r3, [r7, #4]
 8008a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a86:	f003 0302 	and.w	r3, r3, #2
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d00a      	beq.n	8008aa4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	681b      	ldr	r3, [r3, #0]
 8008a92:	685b      	ldr	r3, [r3, #4]
 8008a94:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	430a      	orrs	r2, r1
 8008aa2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aa8:	f003 0304 	and.w	r3, r3, #4
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	d00a      	beq.n	8008ac6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	685b      	ldr	r3, [r3, #4]
 8008ab6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	430a      	orrs	r2, r1
 8008ac4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aca:	f003 0308 	and.w	r3, r3, #8
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d00a      	beq.n	8008ae8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008ad2:	687b      	ldr	r3, [r7, #4]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	681b      	ldr	r3, [r3, #0]
 8008ae4:	430a      	orrs	r2, r1
 8008ae6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008ae8:	687b      	ldr	r3, [r7, #4]
 8008aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008aec:	f003 0310 	and.w	r3, r3, #16
 8008af0:	2b00      	cmp	r3, #0
 8008af2:	d00a      	beq.n	8008b0a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	681b      	ldr	r3, [r3, #0]
 8008af8:	689b      	ldr	r3, [r3, #8]
 8008afa:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	430a      	orrs	r2, r1
 8008b08:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b0e:	f003 0320 	and.w	r3, r3, #32
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d00a      	beq.n	8008b2c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	689b      	ldr	r3, [r3, #8]
 8008b1c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	430a      	orrs	r2, r1
 8008b2a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b30:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b34:	2b00      	cmp	r3, #0
 8008b36:	d01a      	beq.n	8008b6e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	681b      	ldr	r3, [r3, #0]
 8008b3c:	685b      	ldr	r3, [r3, #4]
 8008b3e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	681b      	ldr	r3, [r3, #0]
 8008b4a:	430a      	orrs	r2, r1
 8008b4c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b52:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008b56:	d10a      	bne.n	8008b6e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	685b      	ldr	r3, [r3, #4]
 8008b5e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008b66:	687b      	ldr	r3, [r7, #4]
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	430a      	orrs	r2, r1
 8008b6c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d00a      	beq.n	8008b90 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	685b      	ldr	r3, [r3, #4]
 8008b80:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	430a      	orrs	r2, r1
 8008b8e:	605a      	str	r2, [r3, #4]
  }
}
 8008b90:	bf00      	nop
 8008b92:	370c      	adds	r7, #12
 8008b94:	46bd      	mov	sp, r7
 8008b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b9a:	4770      	bx	lr

08008b9c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008b9c:	b580      	push	{r7, lr}
 8008b9e:	b086      	sub	sp, #24
 8008ba0:	af02      	add	r7, sp, #8
 8008ba2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	2200      	movs	r2, #0
 8008ba8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008bac:	f7fb f8d2 	bl	8003d54 <HAL_GetTick>
 8008bb0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008bb2:	687b      	ldr	r3, [r7, #4]
 8008bb4:	681b      	ldr	r3, [r3, #0]
 8008bb6:	681b      	ldr	r3, [r3, #0]
 8008bb8:	f003 0308 	and.w	r3, r3, #8
 8008bbc:	2b08      	cmp	r3, #8
 8008bbe:	d10e      	bne.n	8008bde <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bc0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bc4:	9300      	str	r3, [sp, #0]
 8008bc6:	68fb      	ldr	r3, [r7, #12]
 8008bc8:	2200      	movs	r2, #0
 8008bca:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008bce:	6878      	ldr	r0, [r7, #4]
 8008bd0:	f000 f82d 	bl	8008c2e <UART_WaitOnFlagUntilTimeout>
 8008bd4:	4603      	mov	r3, r0
 8008bd6:	2b00      	cmp	r3, #0
 8008bd8:	d001      	beq.n	8008bde <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008bda:	2303      	movs	r3, #3
 8008bdc:	e023      	b.n	8008c26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	681b      	ldr	r3, [r3, #0]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f003 0304 	and.w	r3, r3, #4
 8008be8:	2b04      	cmp	r3, #4
 8008bea:	d10e      	bne.n	8008c0a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008bec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008bf0:	9300      	str	r3, [sp, #0]
 8008bf2:	68fb      	ldr	r3, [r7, #12]
 8008bf4:	2200      	movs	r2, #0
 8008bf6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008bfa:	6878      	ldr	r0, [r7, #4]
 8008bfc:	f000 f817 	bl	8008c2e <UART_WaitOnFlagUntilTimeout>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d001      	beq.n	8008c0a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e00d      	b.n	8008c26 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	2220      	movs	r2, #32
 8008c0e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	2220      	movs	r2, #32
 8008c14:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	2200      	movs	r2, #0
 8008c1a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2200      	movs	r2, #0
 8008c20:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8008c24:	2300      	movs	r3, #0
}
 8008c26:	4618      	mov	r0, r3
 8008c28:	3710      	adds	r7, #16
 8008c2a:	46bd      	mov	sp, r7
 8008c2c:	bd80      	pop	{r7, pc}

08008c2e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008c2e:	b580      	push	{r7, lr}
 8008c30:	b09c      	sub	sp, #112	; 0x70
 8008c32:	af00      	add	r7, sp, #0
 8008c34:	60f8      	str	r0, [r7, #12]
 8008c36:	60b9      	str	r1, [r7, #8]
 8008c38:	603b      	str	r3, [r7, #0]
 8008c3a:	4613      	mov	r3, r2
 8008c3c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008c3e:	e0a5      	b.n	8008d8c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008c40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c46:	f000 80a1 	beq.w	8008d8c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008c4a:	f7fb f883 	bl	8003d54 <HAL_GetTick>
 8008c4e:	4602      	mov	r2, r0
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	1ad3      	subs	r3, r2, r3
 8008c54:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008c56:	429a      	cmp	r2, r3
 8008c58:	d302      	bcc.n	8008c60 <UART_WaitOnFlagUntilTimeout+0x32>
 8008c5a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c5c:	2b00      	cmp	r3, #0
 8008c5e:	d13e      	bne.n	8008cde <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008c60:	68fb      	ldr	r3, [r7, #12]
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c66:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c68:	e853 3f00 	ldrex	r3, [r3]
 8008c6c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008c6e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c70:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008c74:	667b      	str	r3, [r7, #100]	; 0x64
 8008c76:	68fb      	ldr	r3, [r7, #12]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	461a      	mov	r2, r3
 8008c7c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c7e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008c80:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c82:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008c84:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008c86:	e841 2300 	strex	r3, r2, [r1]
 8008c8a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008c8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d1e6      	bne.n	8008c60 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	3308      	adds	r3, #8
 8008c98:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c9c:	e853 3f00 	ldrex	r3, [r3]
 8008ca0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ca2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ca4:	f023 0301 	bic.w	r3, r3, #1
 8008ca8:	663b      	str	r3, [r7, #96]	; 0x60
 8008caa:	68fb      	ldr	r3, [r7, #12]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	3308      	adds	r3, #8
 8008cb0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008cb2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008cb4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cb6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008cb8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008cba:	e841 2300 	strex	r3, r2, [r1]
 8008cbe:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008cc0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008cc2:	2b00      	cmp	r3, #0
 8008cc4:	d1e5      	bne.n	8008c92 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2220      	movs	r2, #32
 8008cca:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8008ccc:	68fb      	ldr	r3, [r7, #12]
 8008cce:	2220      	movs	r2, #32
 8008cd0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8008cda:	2303      	movs	r3, #3
 8008cdc:	e067      	b.n	8008dae <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	f003 0304 	and.w	r3, r3, #4
 8008ce8:	2b00      	cmp	r3, #0
 8008cea:	d04f      	beq.n	8008d8c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	681b      	ldr	r3, [r3, #0]
 8008cf0:	69db      	ldr	r3, [r3, #28]
 8008cf2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008cf6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008cfa:	d147      	bne.n	8008d8c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008d04:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008d06:	68fb      	ldr	r3, [r7, #12]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d0e:	e853 3f00 	ldrex	r3, [r3]
 8008d12:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008d14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d1a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008d1c:	68fb      	ldr	r3, [r7, #12]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	461a      	mov	r2, r3
 8008d22:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d24:	637b      	str	r3, [r7, #52]	; 0x34
 8008d26:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d28:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008d2a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008d2c:	e841 2300 	strex	r3, r2, [r1]
 8008d30:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	d1e6      	bne.n	8008d06 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	3308      	adds	r3, #8
 8008d3e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d40:	697b      	ldr	r3, [r7, #20]
 8008d42:	e853 3f00 	ldrex	r3, [r3]
 8008d46:	613b      	str	r3, [r7, #16]
   return(result);
 8008d48:	693b      	ldr	r3, [r7, #16]
 8008d4a:	f023 0301 	bic.w	r3, r3, #1
 8008d4e:	66bb      	str	r3, [r7, #104]	; 0x68
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	3308      	adds	r3, #8
 8008d56:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008d58:	623a      	str	r2, [r7, #32]
 8008d5a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d5c:	69f9      	ldr	r1, [r7, #28]
 8008d5e:	6a3a      	ldr	r2, [r7, #32]
 8008d60:	e841 2300 	strex	r3, r2, [r1]
 8008d64:	61bb      	str	r3, [r7, #24]
   return(result);
 8008d66:	69bb      	ldr	r3, [r7, #24]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e5      	bne.n	8008d38 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8008d6c:	68fb      	ldr	r3, [r7, #12]
 8008d6e:	2220      	movs	r2, #32
 8008d70:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8008d72:	68fb      	ldr	r3, [r7, #12]
 8008d74:	2220      	movs	r2, #32
 8008d76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	2220      	movs	r2, #32
 8008d7c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	2200      	movs	r2, #0
 8008d84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e010      	b.n	8008dae <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	69da      	ldr	r2, [r3, #28]
 8008d92:	68bb      	ldr	r3, [r7, #8]
 8008d94:	4013      	ands	r3, r2
 8008d96:	68ba      	ldr	r2, [r7, #8]
 8008d98:	429a      	cmp	r2, r3
 8008d9a:	bf0c      	ite	eq
 8008d9c:	2301      	moveq	r3, #1
 8008d9e:	2300      	movne	r3, #0
 8008da0:	b2db      	uxtb	r3, r3
 8008da2:	461a      	mov	r2, r3
 8008da4:	79fb      	ldrb	r3, [r7, #7]
 8008da6:	429a      	cmp	r2, r3
 8008da8:	f43f af4a 	beq.w	8008c40 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008dac:	2300      	movs	r3, #0
}
 8008dae:	4618      	mov	r0, r3
 8008db0:	3770      	adds	r7, #112	; 0x70
 8008db2:	46bd      	mov	sp, r7
 8008db4:	bd80      	pop	{r7, pc}
	...

08008db8 <__NVIC_SetPriority>:
{
 8008db8:	b480      	push	{r7}
 8008dba:	b083      	sub	sp, #12
 8008dbc:	af00      	add	r7, sp, #0
 8008dbe:	4603      	mov	r3, r0
 8008dc0:	6039      	str	r1, [r7, #0]
 8008dc2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008dc4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	db0a      	blt.n	8008de2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008dcc:	683b      	ldr	r3, [r7, #0]
 8008dce:	b2da      	uxtb	r2, r3
 8008dd0:	490c      	ldr	r1, [pc, #48]	; (8008e04 <__NVIC_SetPriority+0x4c>)
 8008dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008dd6:	0112      	lsls	r2, r2, #4
 8008dd8:	b2d2      	uxtb	r2, r2
 8008dda:	440b      	add	r3, r1
 8008ddc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008de0:	e00a      	b.n	8008df8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008de2:	683b      	ldr	r3, [r7, #0]
 8008de4:	b2da      	uxtb	r2, r3
 8008de6:	4908      	ldr	r1, [pc, #32]	; (8008e08 <__NVIC_SetPriority+0x50>)
 8008de8:	79fb      	ldrb	r3, [r7, #7]
 8008dea:	f003 030f 	and.w	r3, r3, #15
 8008dee:	3b04      	subs	r3, #4
 8008df0:	0112      	lsls	r2, r2, #4
 8008df2:	b2d2      	uxtb	r2, r2
 8008df4:	440b      	add	r3, r1
 8008df6:	761a      	strb	r2, [r3, #24]
}
 8008df8:	bf00      	nop
 8008dfa:	370c      	adds	r7, #12
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	e000e100 	.word	0xe000e100
 8008e08:	e000ed00 	.word	0xe000ed00

08008e0c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8008e0c:	b580      	push	{r7, lr}
 8008e0e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8008e10:	4b05      	ldr	r3, [pc, #20]	; (8008e28 <SysTick_Handler+0x1c>)
 8008e12:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8008e14:	f002 f8d8 	bl	800afc8 <xTaskGetSchedulerState>
 8008e18:	4603      	mov	r3, r0
 8008e1a:	2b01      	cmp	r3, #1
 8008e1c:	d001      	beq.n	8008e22 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8008e1e:	f002 ffbb 	bl	800bd98 <xPortSysTickHandler>
  }
}
 8008e22:	bf00      	nop
 8008e24:	bd80      	pop	{r7, pc}
 8008e26:	bf00      	nop
 8008e28:	e000e010 	.word	0xe000e010

08008e2c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008e2c:	b580      	push	{r7, lr}
 8008e2e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008e30:	2100      	movs	r1, #0
 8008e32:	f06f 0004 	mvn.w	r0, #4
 8008e36:	f7ff ffbf 	bl	8008db8 <__NVIC_SetPriority>
#endif
}
 8008e3a:	bf00      	nop
 8008e3c:	bd80      	pop	{r7, pc}
	...

08008e40 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008e40:	b480      	push	{r7}
 8008e42:	b083      	sub	sp, #12
 8008e44:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e46:	f3ef 8305 	mrs	r3, IPSR
 8008e4a:	603b      	str	r3, [r7, #0]
  return(result);
 8008e4c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	d003      	beq.n	8008e5a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008e52:	f06f 0305 	mvn.w	r3, #5
 8008e56:	607b      	str	r3, [r7, #4]
 8008e58:	e00c      	b.n	8008e74 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008e5a:	4b0a      	ldr	r3, [pc, #40]	; (8008e84 <osKernelInitialize+0x44>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d105      	bne.n	8008e6e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008e62:	4b08      	ldr	r3, [pc, #32]	; (8008e84 <osKernelInitialize+0x44>)
 8008e64:	2201      	movs	r2, #1
 8008e66:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008e68:	2300      	movs	r3, #0
 8008e6a:	607b      	str	r3, [r7, #4]
 8008e6c:	e002      	b.n	8008e74 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008e6e:	f04f 33ff 	mov.w	r3, #4294967295
 8008e72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008e74:	687b      	ldr	r3, [r7, #4]
}
 8008e76:	4618      	mov	r0, r3
 8008e78:	370c      	adds	r7, #12
 8008e7a:	46bd      	mov	sp, r7
 8008e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e80:	4770      	bx	lr
 8008e82:	bf00      	nop
 8008e84:	2000067c 	.word	0x2000067c

08008e88 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008e88:	b580      	push	{r7, lr}
 8008e8a:	b082      	sub	sp, #8
 8008e8c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008e8e:	f3ef 8305 	mrs	r3, IPSR
 8008e92:	603b      	str	r3, [r7, #0]
  return(result);
 8008e94:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008e96:	2b00      	cmp	r3, #0
 8008e98:	d003      	beq.n	8008ea2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008e9a:	f06f 0305 	mvn.w	r3, #5
 8008e9e:	607b      	str	r3, [r7, #4]
 8008ea0:	e010      	b.n	8008ec4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008ea2:	4b0b      	ldr	r3, [pc, #44]	; (8008ed0 <osKernelStart+0x48>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	2b01      	cmp	r3, #1
 8008ea8:	d109      	bne.n	8008ebe <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008eaa:	f7ff ffbf 	bl	8008e2c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008eae:	4b08      	ldr	r3, [pc, #32]	; (8008ed0 <osKernelStart+0x48>)
 8008eb0:	2202      	movs	r2, #2
 8008eb2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008eb4:	f001 fc1c 	bl	800a6f0 <vTaskStartScheduler>
      stat = osOK;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	607b      	str	r3, [r7, #4]
 8008ebc:	e002      	b.n	8008ec4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008ebe:	f04f 33ff 	mov.w	r3, #4294967295
 8008ec2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008ec4:	687b      	ldr	r3, [r7, #4]
}
 8008ec6:	4618      	mov	r0, r3
 8008ec8:	3708      	adds	r7, #8
 8008eca:	46bd      	mov	sp, r7
 8008ecc:	bd80      	pop	{r7, pc}
 8008ece:	bf00      	nop
 8008ed0:	2000067c 	.word	0x2000067c

08008ed4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008ed4:	b580      	push	{r7, lr}
 8008ed6:	b08e      	sub	sp, #56	; 0x38
 8008ed8:	af04      	add	r7, sp, #16
 8008eda:	60f8      	str	r0, [r7, #12]
 8008edc:	60b9      	str	r1, [r7, #8]
 8008ede:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008ee0:	2300      	movs	r3, #0
 8008ee2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ee4:	f3ef 8305 	mrs	r3, IPSR
 8008ee8:	617b      	str	r3, [r7, #20]
  return(result);
 8008eea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d17e      	bne.n	8008fee <osThreadNew+0x11a>
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d07b      	beq.n	8008fee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008ef6:	2340      	movs	r3, #64	; 0x40
 8008ef8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008efa:	2318      	movs	r3, #24
 8008efc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008efe:	2300      	movs	r3, #0
 8008f00:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008f02:	f04f 33ff 	mov.w	r3, #4294967295
 8008f06:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008f08:	687b      	ldr	r3, [r7, #4]
 8008f0a:	2b00      	cmp	r3, #0
 8008f0c:	d045      	beq.n	8008f9a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	2b00      	cmp	r3, #0
 8008f14:	d002      	beq.n	8008f1c <osThreadNew+0x48>
        name = attr->name;
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	681b      	ldr	r3, [r3, #0]
 8008f1a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	699b      	ldr	r3, [r3, #24]
 8008f20:	2b00      	cmp	r3, #0
 8008f22:	d002      	beq.n	8008f2a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	699b      	ldr	r3, [r3, #24]
 8008f28:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008f2a:	69fb      	ldr	r3, [r7, #28]
 8008f2c:	2b00      	cmp	r3, #0
 8008f2e:	d008      	beq.n	8008f42 <osThreadNew+0x6e>
 8008f30:	69fb      	ldr	r3, [r7, #28]
 8008f32:	2b38      	cmp	r3, #56	; 0x38
 8008f34:	d805      	bhi.n	8008f42 <osThreadNew+0x6e>
 8008f36:	687b      	ldr	r3, [r7, #4]
 8008f38:	685b      	ldr	r3, [r3, #4]
 8008f3a:	f003 0301 	and.w	r3, r3, #1
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d001      	beq.n	8008f46 <osThreadNew+0x72>
        return (NULL);
 8008f42:	2300      	movs	r3, #0
 8008f44:	e054      	b.n	8008ff0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d003      	beq.n	8008f56 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008f4e:	687b      	ldr	r3, [r7, #4]
 8008f50:	695b      	ldr	r3, [r3, #20]
 8008f52:	089b      	lsrs	r3, r3, #2
 8008f54:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d00e      	beq.n	8008f7c <osThreadNew+0xa8>
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	68db      	ldr	r3, [r3, #12]
 8008f62:	2bbb      	cmp	r3, #187	; 0xbb
 8008f64:	d90a      	bls.n	8008f7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d006      	beq.n	8008f7c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	695b      	ldr	r3, [r3, #20]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <osThreadNew+0xa8>
        mem = 1;
 8008f76:	2301      	movs	r3, #1
 8008f78:	61bb      	str	r3, [r7, #24]
 8008f7a:	e010      	b.n	8008f9e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	689b      	ldr	r3, [r3, #8]
 8008f80:	2b00      	cmp	r3, #0
 8008f82:	d10c      	bne.n	8008f9e <osThreadNew+0xca>
 8008f84:	687b      	ldr	r3, [r7, #4]
 8008f86:	68db      	ldr	r3, [r3, #12]
 8008f88:	2b00      	cmp	r3, #0
 8008f8a:	d108      	bne.n	8008f9e <osThreadNew+0xca>
 8008f8c:	687b      	ldr	r3, [r7, #4]
 8008f8e:	691b      	ldr	r3, [r3, #16]
 8008f90:	2b00      	cmp	r3, #0
 8008f92:	d104      	bne.n	8008f9e <osThreadNew+0xca>
          mem = 0;
 8008f94:	2300      	movs	r3, #0
 8008f96:	61bb      	str	r3, [r7, #24]
 8008f98:	e001      	b.n	8008f9e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008f9a:	2300      	movs	r3, #0
 8008f9c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008f9e:	69bb      	ldr	r3, [r7, #24]
 8008fa0:	2b01      	cmp	r3, #1
 8008fa2:	d110      	bne.n	8008fc6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008fa8:	687a      	ldr	r2, [r7, #4]
 8008faa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008fac:	9202      	str	r2, [sp, #8]
 8008fae:	9301      	str	r3, [sp, #4]
 8008fb0:	69fb      	ldr	r3, [r7, #28]
 8008fb2:	9300      	str	r3, [sp, #0]
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	6a3a      	ldr	r2, [r7, #32]
 8008fb8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fba:	68f8      	ldr	r0, [r7, #12]
 8008fbc:	f001 f92e 	bl	800a21c <xTaskCreateStatic>
 8008fc0:	4603      	mov	r3, r0
 8008fc2:	613b      	str	r3, [r7, #16]
 8008fc4:	e013      	b.n	8008fee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008fc6:	69bb      	ldr	r3, [r7, #24]
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d110      	bne.n	8008fee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008fcc:	6a3b      	ldr	r3, [r7, #32]
 8008fce:	b29a      	uxth	r2, r3
 8008fd0:	f107 0310 	add.w	r3, r7, #16
 8008fd4:	9301      	str	r3, [sp, #4]
 8008fd6:	69fb      	ldr	r3, [r7, #28]
 8008fd8:	9300      	str	r3, [sp, #0]
 8008fda:	68bb      	ldr	r3, [r7, #8]
 8008fdc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008fde:	68f8      	ldr	r0, [r7, #12]
 8008fe0:	f001 f979 	bl	800a2d6 <xTaskCreate>
 8008fe4:	4603      	mov	r3, r0
 8008fe6:	2b01      	cmp	r3, #1
 8008fe8:	d001      	beq.n	8008fee <osThreadNew+0x11a>
            hTask = NULL;
 8008fea:	2300      	movs	r3, #0
 8008fec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008fee:	693b      	ldr	r3, [r7, #16]
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	3728      	adds	r7, #40	; 0x28
 8008ff4:	46bd      	mov	sp, r7
 8008ff6:	bd80      	pop	{r7, pc}

08008ff8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008ff8:	b580      	push	{r7, lr}
 8008ffa:	b084      	sub	sp, #16
 8008ffc:	af00      	add	r7, sp, #0
 8008ffe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009000:	f3ef 8305 	mrs	r3, IPSR
 8009004:	60bb      	str	r3, [r7, #8]
  return(result);
 8009006:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009008:	2b00      	cmp	r3, #0
 800900a:	d003      	beq.n	8009014 <osDelay+0x1c>
    stat = osErrorISR;
 800900c:	f06f 0305 	mvn.w	r3, #5
 8009010:	60fb      	str	r3, [r7, #12]
 8009012:	e007      	b.n	8009024 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009014:	2300      	movs	r3, #0
 8009016:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	2b00      	cmp	r3, #0
 800901c:	d002      	beq.n	8009024 <osDelay+0x2c>
      vTaskDelay(ticks);
 800901e:	6878      	ldr	r0, [r7, #4]
 8009020:	f001 fb32 	bl	800a688 <vTaskDelay>
    }
  }

  return (stat);
 8009024:	68fb      	ldr	r3, [r7, #12]
}
 8009026:	4618      	mov	r0, r3
 8009028:	3710      	adds	r7, #16
 800902a:	46bd      	mov	sp, r7
 800902c:	bd80      	pop	{r7, pc}

0800902e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800902e:	b580      	push	{r7, lr}
 8009030:	b088      	sub	sp, #32
 8009032:	af00      	add	r7, sp, #0
 8009034:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009036:	2300      	movs	r3, #0
 8009038:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800903a:	f3ef 8305 	mrs	r3, IPSR
 800903e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009040:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009042:	2b00      	cmp	r3, #0
 8009044:	d174      	bne.n	8009130 <osMutexNew+0x102>
    if (attr != NULL) {
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <osMutexNew+0x26>
      type = attr->attr_bits;
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	685b      	ldr	r3, [r3, #4]
 8009050:	61bb      	str	r3, [r7, #24]
 8009052:	e001      	b.n	8009058 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009054:	2300      	movs	r3, #0
 8009056:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009058:	69bb      	ldr	r3, [r7, #24]
 800905a:	f003 0301 	and.w	r3, r3, #1
 800905e:	2b00      	cmp	r3, #0
 8009060:	d002      	beq.n	8009068 <osMutexNew+0x3a>
      rmtx = 1U;
 8009062:	2301      	movs	r3, #1
 8009064:	617b      	str	r3, [r7, #20]
 8009066:	e001      	b.n	800906c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009068:	2300      	movs	r3, #0
 800906a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800906c:	69bb      	ldr	r3, [r7, #24]
 800906e:	f003 0308 	and.w	r3, r3, #8
 8009072:	2b00      	cmp	r3, #0
 8009074:	d15c      	bne.n	8009130 <osMutexNew+0x102>
      mem = -1;
 8009076:	f04f 33ff 	mov.w	r3, #4294967295
 800907a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	2b00      	cmp	r3, #0
 8009080:	d015      	beq.n	80090ae <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	689b      	ldr	r3, [r3, #8]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d006      	beq.n	8009098 <osMutexNew+0x6a>
 800908a:	687b      	ldr	r3, [r7, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	2b4f      	cmp	r3, #79	; 0x4f
 8009090:	d902      	bls.n	8009098 <osMutexNew+0x6a>
          mem = 1;
 8009092:	2301      	movs	r3, #1
 8009094:	613b      	str	r3, [r7, #16]
 8009096:	e00c      	b.n	80090b2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	689b      	ldr	r3, [r3, #8]
 800909c:	2b00      	cmp	r3, #0
 800909e:	d108      	bne.n	80090b2 <osMutexNew+0x84>
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	68db      	ldr	r3, [r3, #12]
 80090a4:	2b00      	cmp	r3, #0
 80090a6:	d104      	bne.n	80090b2 <osMutexNew+0x84>
            mem = 0;
 80090a8:	2300      	movs	r3, #0
 80090aa:	613b      	str	r3, [r7, #16]
 80090ac:	e001      	b.n	80090b2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 80090ae:	2300      	movs	r3, #0
 80090b0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 80090b2:	693b      	ldr	r3, [r7, #16]
 80090b4:	2b01      	cmp	r3, #1
 80090b6:	d112      	bne.n	80090de <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 80090b8:	697b      	ldr	r3, [r7, #20]
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	d007      	beq.n	80090ce <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	689b      	ldr	r3, [r3, #8]
 80090c2:	4619      	mov	r1, r3
 80090c4:	2004      	movs	r0, #4
 80090c6:	f000 fb18 	bl	80096fa <xQueueCreateMutexStatic>
 80090ca:	61f8      	str	r0, [r7, #28]
 80090cc:	e016      	b.n	80090fc <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	689b      	ldr	r3, [r3, #8]
 80090d2:	4619      	mov	r1, r3
 80090d4:	2001      	movs	r0, #1
 80090d6:	f000 fb10 	bl	80096fa <xQueueCreateMutexStatic>
 80090da:	61f8      	str	r0, [r7, #28]
 80090dc:	e00e      	b.n	80090fc <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 80090de:	693b      	ldr	r3, [r7, #16]
 80090e0:	2b00      	cmp	r3, #0
 80090e2:	d10b      	bne.n	80090fc <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 80090e4:	697b      	ldr	r3, [r7, #20]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d004      	beq.n	80090f4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 80090ea:	2004      	movs	r0, #4
 80090ec:	f000 faed 	bl	80096ca <xQueueCreateMutex>
 80090f0:	61f8      	str	r0, [r7, #28]
 80090f2:	e003      	b.n	80090fc <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 80090f4:	2001      	movs	r0, #1
 80090f6:	f000 fae8 	bl	80096ca <xQueueCreateMutex>
 80090fa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 80090fc:	69fb      	ldr	r3, [r7, #28]
 80090fe:	2b00      	cmp	r3, #0
 8009100:	d00c      	beq.n	800911c <osMutexNew+0xee>
        if (attr != NULL) {
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2b00      	cmp	r3, #0
 8009106:	d003      	beq.n	8009110 <osMutexNew+0xe2>
          name = attr->name;
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	60fb      	str	r3, [r7, #12]
 800910e:	e001      	b.n	8009114 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009110:	2300      	movs	r3, #0
 8009112:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009114:	68f9      	ldr	r1, [r7, #12]
 8009116:	69f8      	ldr	r0, [r7, #28]
 8009118:	f001 f822 	bl	800a160 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800911c:	69fb      	ldr	r3, [r7, #28]
 800911e:	2b00      	cmp	r3, #0
 8009120:	d006      	beq.n	8009130 <osMutexNew+0x102>
 8009122:	697b      	ldr	r3, [r7, #20]
 8009124:	2b00      	cmp	r3, #0
 8009126:	d003      	beq.n	8009130 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009128:	69fb      	ldr	r3, [r7, #28]
 800912a:	f043 0301 	orr.w	r3, r3, #1
 800912e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009130:	69fb      	ldr	r3, [r7, #28]
}
 8009132:	4618      	mov	r0, r3
 8009134:	3720      	adds	r7, #32
 8009136:	46bd      	mov	sp, r7
 8009138:	bd80      	pop	{r7, pc}

0800913a <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800913a:	b580      	push	{r7, lr}
 800913c:	b086      	sub	sp, #24
 800913e:	af00      	add	r7, sp, #0
 8009140:	6078      	str	r0, [r7, #4]
 8009142:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	f023 0301 	bic.w	r3, r3, #1
 800914a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	f003 0301 	and.w	r3, r3, #1
 8009152:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8009154:	2300      	movs	r3, #0
 8009156:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009158:	f3ef 8305 	mrs	r3, IPSR
 800915c:	60bb      	str	r3, [r7, #8]
  return(result);
 800915e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8009160:	2b00      	cmp	r3, #0
 8009162:	d003      	beq.n	800916c <osMutexAcquire+0x32>
    stat = osErrorISR;
 8009164:	f06f 0305 	mvn.w	r3, #5
 8009168:	617b      	str	r3, [r7, #20]
 800916a:	e02c      	b.n	80091c6 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800916c:	693b      	ldr	r3, [r7, #16]
 800916e:	2b00      	cmp	r3, #0
 8009170:	d103      	bne.n	800917a <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8009172:	f06f 0303 	mvn.w	r3, #3
 8009176:	617b      	str	r3, [r7, #20]
 8009178:	e025      	b.n	80091c6 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	2b00      	cmp	r3, #0
 800917e:	d011      	beq.n	80091a4 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8009180:	6839      	ldr	r1, [r7, #0]
 8009182:	6938      	ldr	r0, [r7, #16]
 8009184:	f000 fb08 	bl	8009798 <xQueueTakeMutexRecursive>
 8009188:	4603      	mov	r3, r0
 800918a:	2b01      	cmp	r3, #1
 800918c:	d01b      	beq.n	80091c6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800918e:	683b      	ldr	r3, [r7, #0]
 8009190:	2b00      	cmp	r3, #0
 8009192:	d003      	beq.n	800919c <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8009194:	f06f 0301 	mvn.w	r3, #1
 8009198:	617b      	str	r3, [r7, #20]
 800919a:	e014      	b.n	80091c6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800919c:	f06f 0302 	mvn.w	r3, #2
 80091a0:	617b      	str	r3, [r7, #20]
 80091a2:	e010      	b.n	80091c6 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 80091a4:	6839      	ldr	r1, [r7, #0]
 80091a6:	6938      	ldr	r0, [r7, #16]
 80091a8:	f000 fda6 	bl	8009cf8 <xQueueSemaphoreTake>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b01      	cmp	r3, #1
 80091b0:	d009      	beq.n	80091c6 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 80091b2:	683b      	ldr	r3, [r7, #0]
 80091b4:	2b00      	cmp	r3, #0
 80091b6:	d003      	beq.n	80091c0 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 80091b8:	f06f 0301 	mvn.w	r3, #1
 80091bc:	617b      	str	r3, [r7, #20]
 80091be:	e002      	b.n	80091c6 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 80091c0:	f06f 0302 	mvn.w	r3, #2
 80091c4:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 80091c6:	697b      	ldr	r3, [r7, #20]
}
 80091c8:	4618      	mov	r0, r3
 80091ca:	3718      	adds	r7, #24
 80091cc:	46bd      	mov	sp, r7
 80091ce:	bd80      	pop	{r7, pc}

080091d0 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 80091d0:	b580      	push	{r7, lr}
 80091d2:	b086      	sub	sp, #24
 80091d4:	af00      	add	r7, sp, #0
 80091d6:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	f023 0301 	bic.w	r3, r3, #1
 80091de:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	f003 0301 	and.w	r3, r3, #1
 80091e6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 80091e8:	2300      	movs	r3, #0
 80091ea:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80091ec:	f3ef 8305 	mrs	r3, IPSR
 80091f0:	60bb      	str	r3, [r7, #8]
  return(result);
 80091f2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 80091f4:	2b00      	cmp	r3, #0
 80091f6:	d003      	beq.n	8009200 <osMutexRelease+0x30>
    stat = osErrorISR;
 80091f8:	f06f 0305 	mvn.w	r3, #5
 80091fc:	617b      	str	r3, [r7, #20]
 80091fe:	e01f      	b.n	8009240 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8009200:	693b      	ldr	r3, [r7, #16]
 8009202:	2b00      	cmp	r3, #0
 8009204:	d103      	bne.n	800920e <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8009206:	f06f 0303 	mvn.w	r3, #3
 800920a:	617b      	str	r3, [r7, #20]
 800920c:	e018      	b.n	8009240 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2b00      	cmp	r3, #0
 8009212:	d009      	beq.n	8009228 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8009214:	6938      	ldr	r0, [r7, #16]
 8009216:	f000 fa8b 	bl	8009730 <xQueueGiveMutexRecursive>
 800921a:	4603      	mov	r3, r0
 800921c:	2b01      	cmp	r3, #1
 800921e:	d00f      	beq.n	8009240 <osMutexRelease+0x70>
        stat = osErrorResource;
 8009220:	f06f 0302 	mvn.w	r3, #2
 8009224:	617b      	str	r3, [r7, #20]
 8009226:	e00b      	b.n	8009240 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8009228:	2300      	movs	r3, #0
 800922a:	2200      	movs	r2, #0
 800922c:	2100      	movs	r1, #0
 800922e:	6938      	ldr	r0, [r7, #16]
 8009230:	f000 fae8 	bl	8009804 <xQueueGenericSend>
 8009234:	4603      	mov	r3, r0
 8009236:	2b01      	cmp	r3, #1
 8009238:	d002      	beq.n	8009240 <osMutexRelease+0x70>
        stat = osErrorResource;
 800923a:	f06f 0302 	mvn.w	r3, #2
 800923e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8009240:	697b      	ldr	r3, [r7, #20]
}
 8009242:	4618      	mov	r0, r3
 8009244:	3718      	adds	r7, #24
 8009246:	46bd      	mov	sp, r7
 8009248:	bd80      	pop	{r7, pc}
	...

0800924c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800924c:	b480      	push	{r7}
 800924e:	b085      	sub	sp, #20
 8009250:	af00      	add	r7, sp, #0
 8009252:	60f8      	str	r0, [r7, #12]
 8009254:	60b9      	str	r1, [r7, #8]
 8009256:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009258:	68fb      	ldr	r3, [r7, #12]
 800925a:	4a07      	ldr	r2, [pc, #28]	; (8009278 <vApplicationGetIdleTaskMemory+0x2c>)
 800925c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800925e:	68bb      	ldr	r3, [r7, #8]
 8009260:	4a06      	ldr	r2, [pc, #24]	; (800927c <vApplicationGetIdleTaskMemory+0x30>)
 8009262:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2240      	movs	r2, #64	; 0x40
 8009268:	601a      	str	r2, [r3, #0]
}
 800926a:	bf00      	nop
 800926c:	3714      	adds	r7, #20
 800926e:	46bd      	mov	sp, r7
 8009270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009274:	4770      	bx	lr
 8009276:	bf00      	nop
 8009278:	20000680 	.word	0x20000680
 800927c:	2000073c 	.word	0x2000073c

08009280 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009280:	b480      	push	{r7}
 8009282:	b085      	sub	sp, #20
 8009284:	af00      	add	r7, sp, #0
 8009286:	60f8      	str	r0, [r7, #12]
 8009288:	60b9      	str	r1, [r7, #8]
 800928a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800928c:	68fb      	ldr	r3, [r7, #12]
 800928e:	4a07      	ldr	r2, [pc, #28]	; (80092ac <vApplicationGetTimerTaskMemory+0x2c>)
 8009290:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009292:	68bb      	ldr	r3, [r7, #8]
 8009294:	4a06      	ldr	r2, [pc, #24]	; (80092b0 <vApplicationGetTimerTaskMemory+0x30>)
 8009296:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009298:	687b      	ldr	r3, [r7, #4]
 800929a:	2280      	movs	r2, #128	; 0x80
 800929c:	601a      	str	r2, [r3, #0]
}
 800929e:	bf00      	nop
 80092a0:	3714      	adds	r7, #20
 80092a2:	46bd      	mov	sp, r7
 80092a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092a8:	4770      	bx	lr
 80092aa:	bf00      	nop
 80092ac:	2000083c 	.word	0x2000083c
 80092b0:	200008f8 	.word	0x200008f8

080092b4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80092b4:	b480      	push	{r7}
 80092b6:	b083      	sub	sp, #12
 80092b8:	af00      	add	r7, sp, #0
 80092ba:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092bc:	687b      	ldr	r3, [r7, #4]
 80092be:	f103 0208 	add.w	r2, r3, #8
 80092c2:	687b      	ldr	r3, [r7, #4]
 80092c4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	f04f 32ff 	mov.w	r2, #4294967295
 80092cc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	f103 0208 	add.w	r2, r3, #8
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80092d8:	687b      	ldr	r3, [r7, #4]
 80092da:	f103 0208 	add.w	r2, r3, #8
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80092e2:	687b      	ldr	r3, [r7, #4]
 80092e4:	2200      	movs	r2, #0
 80092e6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80092e8:	bf00      	nop
 80092ea:	370c      	adds	r7, #12
 80092ec:	46bd      	mov	sp, r7
 80092ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092f2:	4770      	bx	lr

080092f4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80092f4:	b480      	push	{r7}
 80092f6:	b083      	sub	sp, #12
 80092f8:	af00      	add	r7, sp, #0
 80092fa:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	2200      	movs	r2, #0
 8009300:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009302:	bf00      	nop
 8009304:	370c      	adds	r7, #12
 8009306:	46bd      	mov	sp, r7
 8009308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800930c:	4770      	bx	lr

0800930e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800930e:	b480      	push	{r7}
 8009310:	b085      	sub	sp, #20
 8009312:	af00      	add	r7, sp, #0
 8009314:	6078      	str	r0, [r7, #4]
 8009316:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	685b      	ldr	r3, [r3, #4]
 800931c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800931e:	683b      	ldr	r3, [r7, #0]
 8009320:	68fa      	ldr	r2, [r7, #12]
 8009322:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009324:	68fb      	ldr	r3, [r7, #12]
 8009326:	689a      	ldr	r2, [r3, #8]
 8009328:	683b      	ldr	r3, [r7, #0]
 800932a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	689b      	ldr	r3, [r3, #8]
 8009330:	683a      	ldr	r2, [r7, #0]
 8009332:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009334:	68fb      	ldr	r3, [r7, #12]
 8009336:	683a      	ldr	r2, [r7, #0]
 8009338:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800933a:	683b      	ldr	r3, [r7, #0]
 800933c:	687a      	ldr	r2, [r7, #4]
 800933e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009340:	687b      	ldr	r3, [r7, #4]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	1c5a      	adds	r2, r3, #1
 8009346:	687b      	ldr	r3, [r7, #4]
 8009348:	601a      	str	r2, [r3, #0]
}
 800934a:	bf00      	nop
 800934c:	3714      	adds	r7, #20
 800934e:	46bd      	mov	sp, r7
 8009350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009354:	4770      	bx	lr

08009356 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009356:	b480      	push	{r7}
 8009358:	b085      	sub	sp, #20
 800935a:	af00      	add	r7, sp, #0
 800935c:	6078      	str	r0, [r7, #4]
 800935e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009360:	683b      	ldr	r3, [r7, #0]
 8009362:	681b      	ldr	r3, [r3, #0]
 8009364:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009366:	68bb      	ldr	r3, [r7, #8]
 8009368:	f1b3 3fff 	cmp.w	r3, #4294967295
 800936c:	d103      	bne.n	8009376 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	691b      	ldr	r3, [r3, #16]
 8009372:	60fb      	str	r3, [r7, #12]
 8009374:	e00c      	b.n	8009390 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	3308      	adds	r3, #8
 800937a:	60fb      	str	r3, [r7, #12]
 800937c:	e002      	b.n	8009384 <vListInsert+0x2e>
 800937e:	68fb      	ldr	r3, [r7, #12]
 8009380:	685b      	ldr	r3, [r3, #4]
 8009382:	60fb      	str	r3, [r7, #12]
 8009384:	68fb      	ldr	r3, [r7, #12]
 8009386:	685b      	ldr	r3, [r3, #4]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	68ba      	ldr	r2, [r7, #8]
 800938c:	429a      	cmp	r2, r3
 800938e:	d2f6      	bcs.n	800937e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009390:	68fb      	ldr	r3, [r7, #12]
 8009392:	685a      	ldr	r2, [r3, #4]
 8009394:	683b      	ldr	r3, [r7, #0]
 8009396:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	685b      	ldr	r3, [r3, #4]
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80093a0:	683b      	ldr	r3, [r7, #0]
 80093a2:	68fa      	ldr	r2, [r7, #12]
 80093a4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80093a6:	68fb      	ldr	r3, [r7, #12]
 80093a8:	683a      	ldr	r2, [r7, #0]
 80093aa:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	687a      	ldr	r2, [r7, #4]
 80093b0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	1c5a      	adds	r2, r3, #1
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	601a      	str	r2, [r3, #0]
}
 80093bc:	bf00      	nop
 80093be:	3714      	adds	r7, #20
 80093c0:	46bd      	mov	sp, r7
 80093c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c6:	4770      	bx	lr

080093c8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80093c8:	b480      	push	{r7}
 80093ca:	b085      	sub	sp, #20
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	685b      	ldr	r3, [r3, #4]
 80093da:	687a      	ldr	r2, [r7, #4]
 80093dc:	6892      	ldr	r2, [r2, #8]
 80093de:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	689b      	ldr	r3, [r3, #8]
 80093e4:	687a      	ldr	r2, [r7, #4]
 80093e6:	6852      	ldr	r2, [r2, #4]
 80093e8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	687a      	ldr	r2, [r7, #4]
 80093f0:	429a      	cmp	r2, r3
 80093f2:	d103      	bne.n	80093fc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	689a      	ldr	r2, [r3, #8]
 80093f8:	68fb      	ldr	r3, [r7, #12]
 80093fa:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	2200      	movs	r2, #0
 8009400:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	1e5a      	subs	r2, r3, #1
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800940c:	68fb      	ldr	r3, [r7, #12]
 800940e:	681b      	ldr	r3, [r3, #0]
}
 8009410:	4618      	mov	r0, r3
 8009412:	3714      	adds	r7, #20
 8009414:	46bd      	mov	sp, r7
 8009416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800941a:	4770      	bx	lr

0800941c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800941c:	b580      	push	{r7, lr}
 800941e:	b084      	sub	sp, #16
 8009420:	af00      	add	r7, sp, #0
 8009422:	6078      	str	r0, [r7, #4]
 8009424:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800942a:	68fb      	ldr	r3, [r7, #12]
 800942c:	2b00      	cmp	r3, #0
 800942e:	d10a      	bne.n	8009446 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009434:	f383 8811 	msr	BASEPRI, r3
 8009438:	f3bf 8f6f 	isb	sy
 800943c:	f3bf 8f4f 	dsb	sy
 8009440:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009442:	bf00      	nop
 8009444:	e7fe      	b.n	8009444 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009446:	f002 fc15 	bl	800bc74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	68fb      	ldr	r3, [r7, #12]
 8009450:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009452:	68f9      	ldr	r1, [r7, #12]
 8009454:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8009456:	fb01 f303 	mul.w	r3, r1, r3
 800945a:	441a      	add	r2, r3
 800945c:	68fb      	ldr	r3, [r7, #12]
 800945e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	2200      	movs	r2, #0
 8009464:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009466:	68fb      	ldr	r3, [r7, #12]
 8009468:	681a      	ldr	r2, [r3, #0]
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800946e:	68fb      	ldr	r3, [r7, #12]
 8009470:	681a      	ldr	r2, [r3, #0]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009476:	3b01      	subs	r3, #1
 8009478:	68f9      	ldr	r1, [r7, #12]
 800947a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800947c:	fb01 f303 	mul.w	r3, r1, r3
 8009480:	441a      	add	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009486:	68fb      	ldr	r3, [r7, #12]
 8009488:	22ff      	movs	r2, #255	; 0xff
 800948a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	22ff      	movs	r2, #255	; 0xff
 8009492:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8009496:	683b      	ldr	r3, [r7, #0]
 8009498:	2b00      	cmp	r3, #0
 800949a:	d114      	bne.n	80094c6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	691b      	ldr	r3, [r3, #16]
 80094a0:	2b00      	cmp	r3, #0
 80094a2:	d01a      	beq.n	80094da <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	3310      	adds	r3, #16
 80094a8:	4618      	mov	r0, r3
 80094aa:	f001 fbbb 	bl	800ac24 <xTaskRemoveFromEventList>
 80094ae:	4603      	mov	r3, r0
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d012      	beq.n	80094da <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80094b4:	4b0c      	ldr	r3, [pc, #48]	; (80094e8 <xQueueGenericReset+0xcc>)
 80094b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80094ba:	601a      	str	r2, [r3, #0]
 80094bc:	f3bf 8f4f 	dsb	sy
 80094c0:	f3bf 8f6f 	isb	sy
 80094c4:	e009      	b.n	80094da <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80094c6:	68fb      	ldr	r3, [r7, #12]
 80094c8:	3310      	adds	r3, #16
 80094ca:	4618      	mov	r0, r3
 80094cc:	f7ff fef2 	bl	80092b4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	3324      	adds	r3, #36	; 0x24
 80094d4:	4618      	mov	r0, r3
 80094d6:	f7ff feed 	bl	80092b4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80094da:	f002 fbfb 	bl	800bcd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80094de:	2301      	movs	r3, #1
}
 80094e0:	4618      	mov	r0, r3
 80094e2:	3710      	adds	r7, #16
 80094e4:	46bd      	mov	sp, r7
 80094e6:	bd80      	pop	{r7, pc}
 80094e8:	e000ed04 	.word	0xe000ed04

080094ec <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	b08e      	sub	sp, #56	; 0x38
 80094f0:	af02      	add	r7, sp, #8
 80094f2:	60f8      	str	r0, [r7, #12]
 80094f4:	60b9      	str	r1, [r7, #8]
 80094f6:	607a      	str	r2, [r7, #4]
 80094f8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80094fa:	68fb      	ldr	r3, [r7, #12]
 80094fc:	2b00      	cmp	r3, #0
 80094fe:	d10a      	bne.n	8009516 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8009500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009504:	f383 8811 	msr	BASEPRI, r3
 8009508:	f3bf 8f6f 	isb	sy
 800950c:	f3bf 8f4f 	dsb	sy
 8009510:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009512:	bf00      	nop
 8009514:	e7fe      	b.n	8009514 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009516:	683b      	ldr	r3, [r7, #0]
 8009518:	2b00      	cmp	r3, #0
 800951a:	d10a      	bne.n	8009532 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800951c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009520:	f383 8811 	msr	BASEPRI, r3
 8009524:	f3bf 8f6f 	isb	sy
 8009528:	f3bf 8f4f 	dsb	sy
 800952c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800952e:	bf00      	nop
 8009530:	e7fe      	b.n	8009530 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	d002      	beq.n	800953e <xQueueGenericCreateStatic+0x52>
 8009538:	68bb      	ldr	r3, [r7, #8]
 800953a:	2b00      	cmp	r3, #0
 800953c:	d001      	beq.n	8009542 <xQueueGenericCreateStatic+0x56>
 800953e:	2301      	movs	r3, #1
 8009540:	e000      	b.n	8009544 <xQueueGenericCreateStatic+0x58>
 8009542:	2300      	movs	r3, #0
 8009544:	2b00      	cmp	r3, #0
 8009546:	d10a      	bne.n	800955e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8009548:	f04f 0350 	mov.w	r3, #80	; 0x50
 800954c:	f383 8811 	msr	BASEPRI, r3
 8009550:	f3bf 8f6f 	isb	sy
 8009554:	f3bf 8f4f 	dsb	sy
 8009558:	623b      	str	r3, [r7, #32]
}
 800955a:	bf00      	nop
 800955c:	e7fe      	b.n	800955c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	2b00      	cmp	r3, #0
 8009562:	d102      	bne.n	800956a <xQueueGenericCreateStatic+0x7e>
 8009564:	68bb      	ldr	r3, [r7, #8]
 8009566:	2b00      	cmp	r3, #0
 8009568:	d101      	bne.n	800956e <xQueueGenericCreateStatic+0x82>
 800956a:	2301      	movs	r3, #1
 800956c:	e000      	b.n	8009570 <xQueueGenericCreateStatic+0x84>
 800956e:	2300      	movs	r3, #0
 8009570:	2b00      	cmp	r3, #0
 8009572:	d10a      	bne.n	800958a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8009574:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009578:	f383 8811 	msr	BASEPRI, r3
 800957c:	f3bf 8f6f 	isb	sy
 8009580:	f3bf 8f4f 	dsb	sy
 8009584:	61fb      	str	r3, [r7, #28]
}
 8009586:	bf00      	nop
 8009588:	e7fe      	b.n	8009588 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800958a:	2350      	movs	r3, #80	; 0x50
 800958c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800958e:	697b      	ldr	r3, [r7, #20]
 8009590:	2b50      	cmp	r3, #80	; 0x50
 8009592:	d00a      	beq.n	80095aa <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8009594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009598:	f383 8811 	msr	BASEPRI, r3
 800959c:	f3bf 8f6f 	isb	sy
 80095a0:	f3bf 8f4f 	dsb	sy
 80095a4:	61bb      	str	r3, [r7, #24]
}
 80095a6:	bf00      	nop
 80095a8:	e7fe      	b.n	80095a8 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80095aa:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80095ac:	683b      	ldr	r3, [r7, #0]
 80095ae:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80095b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d00d      	beq.n	80095d2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80095b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095b8:	2201      	movs	r2, #1
 80095ba:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80095be:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80095c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095c4:	9300      	str	r3, [sp, #0]
 80095c6:	4613      	mov	r3, r2
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	68b9      	ldr	r1, [r7, #8]
 80095cc:	68f8      	ldr	r0, [r7, #12]
 80095ce:	f000 f83f 	bl	8009650 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80095d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80095d4:	4618      	mov	r0, r3
 80095d6:	3730      	adds	r7, #48	; 0x30
 80095d8:	46bd      	mov	sp, r7
 80095da:	bd80      	pop	{r7, pc}

080095dc <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80095dc:	b580      	push	{r7, lr}
 80095de:	b08a      	sub	sp, #40	; 0x28
 80095e0:	af02      	add	r7, sp, #8
 80095e2:	60f8      	str	r0, [r7, #12]
 80095e4:	60b9      	str	r1, [r7, #8]
 80095e6:	4613      	mov	r3, r2
 80095e8:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d10a      	bne.n	8009606 <xQueueGenericCreate+0x2a>
	__asm volatile
 80095f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80095f4:	f383 8811 	msr	BASEPRI, r3
 80095f8:	f3bf 8f6f 	isb	sy
 80095fc:	f3bf 8f4f 	dsb	sy
 8009600:	613b      	str	r3, [r7, #16]
}
 8009602:	bf00      	nop
 8009604:	e7fe      	b.n	8009604 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009606:	68fb      	ldr	r3, [r7, #12]
 8009608:	68ba      	ldr	r2, [r7, #8]
 800960a:	fb02 f303 	mul.w	r3, r2, r3
 800960e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8009610:	69fb      	ldr	r3, [r7, #28]
 8009612:	3350      	adds	r3, #80	; 0x50
 8009614:	4618      	mov	r0, r3
 8009616:	f002 fc4f 	bl	800beb8 <pvPortMalloc>
 800961a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800961c:	69bb      	ldr	r3, [r7, #24]
 800961e:	2b00      	cmp	r3, #0
 8009620:	d011      	beq.n	8009646 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8009622:	69bb      	ldr	r3, [r7, #24]
 8009624:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009626:	697b      	ldr	r3, [r7, #20]
 8009628:	3350      	adds	r3, #80	; 0x50
 800962a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800962c:	69bb      	ldr	r3, [r7, #24]
 800962e:	2200      	movs	r2, #0
 8009630:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009634:	79fa      	ldrb	r2, [r7, #7]
 8009636:	69bb      	ldr	r3, [r7, #24]
 8009638:	9300      	str	r3, [sp, #0]
 800963a:	4613      	mov	r3, r2
 800963c:	697a      	ldr	r2, [r7, #20]
 800963e:	68b9      	ldr	r1, [r7, #8]
 8009640:	68f8      	ldr	r0, [r7, #12]
 8009642:	f000 f805 	bl	8009650 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009646:	69bb      	ldr	r3, [r7, #24]
	}
 8009648:	4618      	mov	r0, r3
 800964a:	3720      	adds	r7, #32
 800964c:	46bd      	mov	sp, r7
 800964e:	bd80      	pop	{r7, pc}

08009650 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8009650:	b580      	push	{r7, lr}
 8009652:	b084      	sub	sp, #16
 8009654:	af00      	add	r7, sp, #0
 8009656:	60f8      	str	r0, [r7, #12]
 8009658:	60b9      	str	r1, [r7, #8]
 800965a:	607a      	str	r2, [r7, #4]
 800965c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800965e:	68bb      	ldr	r3, [r7, #8]
 8009660:	2b00      	cmp	r3, #0
 8009662:	d103      	bne.n	800966c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8009664:	69bb      	ldr	r3, [r7, #24]
 8009666:	69ba      	ldr	r2, [r7, #24]
 8009668:	601a      	str	r2, [r3, #0]
 800966a:	e002      	b.n	8009672 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800966c:	69bb      	ldr	r3, [r7, #24]
 800966e:	687a      	ldr	r2, [r7, #4]
 8009670:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8009672:	69bb      	ldr	r3, [r7, #24]
 8009674:	68fa      	ldr	r2, [r7, #12]
 8009676:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8009678:	69bb      	ldr	r3, [r7, #24]
 800967a:	68ba      	ldr	r2, [r7, #8]
 800967c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800967e:	2101      	movs	r1, #1
 8009680:	69b8      	ldr	r0, [r7, #24]
 8009682:	f7ff fecb 	bl	800941c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8009686:	69bb      	ldr	r3, [r7, #24]
 8009688:	78fa      	ldrb	r2, [r7, #3]
 800968a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800968e:	bf00      	nop
 8009690:	3710      	adds	r7, #16
 8009692:	46bd      	mov	sp, r7
 8009694:	bd80      	pop	{r7, pc}

08009696 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8009696:	b580      	push	{r7, lr}
 8009698:	b082      	sub	sp, #8
 800969a:	af00      	add	r7, sp, #0
 800969c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800969e:	687b      	ldr	r3, [r7, #4]
 80096a0:	2b00      	cmp	r3, #0
 80096a2:	d00e      	beq.n	80096c2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	2200      	movs	r2, #0
 80096a8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	2200      	movs	r2, #0
 80096ae:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	2200      	movs	r2, #0
 80096b4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80096b6:	2300      	movs	r3, #0
 80096b8:	2200      	movs	r2, #0
 80096ba:	2100      	movs	r1, #0
 80096bc:	6878      	ldr	r0, [r7, #4]
 80096be:	f000 f8a1 	bl	8009804 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80096c2:	bf00      	nop
 80096c4:	3708      	adds	r7, #8
 80096c6:	46bd      	mov	sp, r7
 80096c8:	bd80      	pop	{r7, pc}

080096ca <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80096ca:	b580      	push	{r7, lr}
 80096cc:	b086      	sub	sp, #24
 80096ce:	af00      	add	r7, sp, #0
 80096d0:	4603      	mov	r3, r0
 80096d2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80096d4:	2301      	movs	r3, #1
 80096d6:	617b      	str	r3, [r7, #20]
 80096d8:	2300      	movs	r3, #0
 80096da:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80096dc:	79fb      	ldrb	r3, [r7, #7]
 80096de:	461a      	mov	r2, r3
 80096e0:	6939      	ldr	r1, [r7, #16]
 80096e2:	6978      	ldr	r0, [r7, #20]
 80096e4:	f7ff ff7a 	bl	80095dc <xQueueGenericCreate>
 80096e8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80096ea:	68f8      	ldr	r0, [r7, #12]
 80096ec:	f7ff ffd3 	bl	8009696 <prvInitialiseMutex>

		return xNewQueue;
 80096f0:	68fb      	ldr	r3, [r7, #12]
	}
 80096f2:	4618      	mov	r0, r3
 80096f4:	3718      	adds	r7, #24
 80096f6:	46bd      	mov	sp, r7
 80096f8:	bd80      	pop	{r7, pc}

080096fa <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 80096fa:	b580      	push	{r7, lr}
 80096fc:	b088      	sub	sp, #32
 80096fe:	af02      	add	r7, sp, #8
 8009700:	4603      	mov	r3, r0
 8009702:	6039      	str	r1, [r7, #0]
 8009704:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8009706:	2301      	movs	r3, #1
 8009708:	617b      	str	r3, [r7, #20]
 800970a:	2300      	movs	r3, #0
 800970c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800970e:	79fb      	ldrb	r3, [r7, #7]
 8009710:	9300      	str	r3, [sp, #0]
 8009712:	683b      	ldr	r3, [r7, #0]
 8009714:	2200      	movs	r2, #0
 8009716:	6939      	ldr	r1, [r7, #16]
 8009718:	6978      	ldr	r0, [r7, #20]
 800971a:	f7ff fee7 	bl	80094ec <xQueueGenericCreateStatic>
 800971e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8009720:	68f8      	ldr	r0, [r7, #12]
 8009722:	f7ff ffb8 	bl	8009696 <prvInitialiseMutex>

		return xNewQueue;
 8009726:	68fb      	ldr	r3, [r7, #12]
	}
 8009728:	4618      	mov	r0, r3
 800972a:	3718      	adds	r7, #24
 800972c:	46bd      	mov	sp, r7
 800972e:	bd80      	pop	{r7, pc}

08009730 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 8009730:	b590      	push	{r4, r7, lr}
 8009732:	b087      	sub	sp, #28
 8009734:	af00      	add	r7, sp, #0
 8009736:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800973c:	693b      	ldr	r3, [r7, #16]
 800973e:	2b00      	cmp	r3, #0
 8009740:	d10a      	bne.n	8009758 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 8009742:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009746:	f383 8811 	msr	BASEPRI, r3
 800974a:	f3bf 8f6f 	isb	sy
 800974e:	f3bf 8f4f 	dsb	sy
 8009752:	60fb      	str	r3, [r7, #12]
}
 8009754:	bf00      	nop
 8009756:	e7fe      	b.n	8009756 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8009758:	693b      	ldr	r3, [r7, #16]
 800975a:	689c      	ldr	r4, [r3, #8]
 800975c:	f001 fc24 	bl	800afa8 <xTaskGetCurrentTaskHandle>
 8009760:	4603      	mov	r3, r0
 8009762:	429c      	cmp	r4, r3
 8009764:	d111      	bne.n	800978a <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8009766:	693b      	ldr	r3, [r7, #16]
 8009768:	68db      	ldr	r3, [r3, #12]
 800976a:	1e5a      	subs	r2, r3, #1
 800976c:	693b      	ldr	r3, [r7, #16]
 800976e:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 8009770:	693b      	ldr	r3, [r7, #16]
 8009772:	68db      	ldr	r3, [r3, #12]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d105      	bne.n	8009784 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8009778:	2300      	movs	r3, #0
 800977a:	2200      	movs	r2, #0
 800977c:	2100      	movs	r1, #0
 800977e:	6938      	ldr	r0, [r7, #16]
 8009780:	f000 f840 	bl	8009804 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8009784:	2301      	movs	r3, #1
 8009786:	617b      	str	r3, [r7, #20]
 8009788:	e001      	b.n	800978e <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800978a:	2300      	movs	r3, #0
 800978c:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800978e:	697b      	ldr	r3, [r7, #20]
	}
 8009790:	4618      	mov	r0, r3
 8009792:	371c      	adds	r7, #28
 8009794:	46bd      	mov	sp, r7
 8009796:	bd90      	pop	{r4, r7, pc}

08009798 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 8009798:	b590      	push	{r4, r7, lr}
 800979a:	b087      	sub	sp, #28
 800979c:	af00      	add	r7, sp, #0
 800979e:	6078      	str	r0, [r7, #4]
 80097a0:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80097a6:	693b      	ldr	r3, [r7, #16]
 80097a8:	2b00      	cmp	r3, #0
 80097aa:	d10a      	bne.n	80097c2 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80097ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097b0:	f383 8811 	msr	BASEPRI, r3
 80097b4:	f3bf 8f6f 	isb	sy
 80097b8:	f3bf 8f4f 	dsb	sy
 80097bc:	60fb      	str	r3, [r7, #12]
}
 80097be:	bf00      	nop
 80097c0:	e7fe      	b.n	80097c0 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80097c2:	693b      	ldr	r3, [r7, #16]
 80097c4:	689c      	ldr	r4, [r3, #8]
 80097c6:	f001 fbef 	bl	800afa8 <xTaskGetCurrentTaskHandle>
 80097ca:	4603      	mov	r3, r0
 80097cc:	429c      	cmp	r4, r3
 80097ce:	d107      	bne.n	80097e0 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80097d0:	693b      	ldr	r3, [r7, #16]
 80097d2:	68db      	ldr	r3, [r3, #12]
 80097d4:	1c5a      	adds	r2, r3, #1
 80097d6:	693b      	ldr	r3, [r7, #16]
 80097d8:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80097da:	2301      	movs	r3, #1
 80097dc:	617b      	str	r3, [r7, #20]
 80097de:	e00c      	b.n	80097fa <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80097e0:	6839      	ldr	r1, [r7, #0]
 80097e2:	6938      	ldr	r0, [r7, #16]
 80097e4:	f000 fa88 	bl	8009cf8 <xQueueSemaphoreTake>
 80097e8:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80097ea:	697b      	ldr	r3, [r7, #20]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	d004      	beq.n	80097fa <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80097f0:	693b      	ldr	r3, [r7, #16]
 80097f2:	68db      	ldr	r3, [r3, #12]
 80097f4:	1c5a      	adds	r2, r3, #1
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 80097fa:	697b      	ldr	r3, [r7, #20]
	}
 80097fc:	4618      	mov	r0, r3
 80097fe:	371c      	adds	r7, #28
 8009800:	46bd      	mov	sp, r7
 8009802:	bd90      	pop	{r4, r7, pc}

08009804 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8009804:	b580      	push	{r7, lr}
 8009806:	b08e      	sub	sp, #56	; 0x38
 8009808:	af00      	add	r7, sp, #0
 800980a:	60f8      	str	r0, [r7, #12]
 800980c:	60b9      	str	r1, [r7, #8]
 800980e:	607a      	str	r2, [r7, #4]
 8009810:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8009812:	2300      	movs	r3, #0
 8009814:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800981a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800981c:	2b00      	cmp	r3, #0
 800981e:	d10a      	bne.n	8009836 <xQueueGenericSend+0x32>
	__asm volatile
 8009820:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009824:	f383 8811 	msr	BASEPRI, r3
 8009828:	f3bf 8f6f 	isb	sy
 800982c:	f3bf 8f4f 	dsb	sy
 8009830:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009832:	bf00      	nop
 8009834:	e7fe      	b.n	8009834 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009836:	68bb      	ldr	r3, [r7, #8]
 8009838:	2b00      	cmp	r3, #0
 800983a:	d103      	bne.n	8009844 <xQueueGenericSend+0x40>
 800983c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800983e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009840:	2b00      	cmp	r3, #0
 8009842:	d101      	bne.n	8009848 <xQueueGenericSend+0x44>
 8009844:	2301      	movs	r3, #1
 8009846:	e000      	b.n	800984a <xQueueGenericSend+0x46>
 8009848:	2300      	movs	r3, #0
 800984a:	2b00      	cmp	r3, #0
 800984c:	d10a      	bne.n	8009864 <xQueueGenericSend+0x60>
	__asm volatile
 800984e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009852:	f383 8811 	msr	BASEPRI, r3
 8009856:	f3bf 8f6f 	isb	sy
 800985a:	f3bf 8f4f 	dsb	sy
 800985e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009860:	bf00      	nop
 8009862:	e7fe      	b.n	8009862 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009864:	683b      	ldr	r3, [r7, #0]
 8009866:	2b02      	cmp	r3, #2
 8009868:	d103      	bne.n	8009872 <xQueueGenericSend+0x6e>
 800986a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800986c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986e:	2b01      	cmp	r3, #1
 8009870:	d101      	bne.n	8009876 <xQueueGenericSend+0x72>
 8009872:	2301      	movs	r3, #1
 8009874:	e000      	b.n	8009878 <xQueueGenericSend+0x74>
 8009876:	2300      	movs	r3, #0
 8009878:	2b00      	cmp	r3, #0
 800987a:	d10a      	bne.n	8009892 <xQueueGenericSend+0x8e>
	__asm volatile
 800987c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009880:	f383 8811 	msr	BASEPRI, r3
 8009884:	f3bf 8f6f 	isb	sy
 8009888:	f3bf 8f4f 	dsb	sy
 800988c:	623b      	str	r3, [r7, #32]
}
 800988e:	bf00      	nop
 8009890:	e7fe      	b.n	8009890 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009892:	f001 fb99 	bl	800afc8 <xTaskGetSchedulerState>
 8009896:	4603      	mov	r3, r0
 8009898:	2b00      	cmp	r3, #0
 800989a:	d102      	bne.n	80098a2 <xQueueGenericSend+0x9e>
 800989c:	687b      	ldr	r3, [r7, #4]
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d101      	bne.n	80098a6 <xQueueGenericSend+0xa2>
 80098a2:	2301      	movs	r3, #1
 80098a4:	e000      	b.n	80098a8 <xQueueGenericSend+0xa4>
 80098a6:	2300      	movs	r3, #0
 80098a8:	2b00      	cmp	r3, #0
 80098aa:	d10a      	bne.n	80098c2 <xQueueGenericSend+0xbe>
	__asm volatile
 80098ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80098b0:	f383 8811 	msr	BASEPRI, r3
 80098b4:	f3bf 8f6f 	isb	sy
 80098b8:	f3bf 8f4f 	dsb	sy
 80098bc:	61fb      	str	r3, [r7, #28]
}
 80098be:	bf00      	nop
 80098c0:	e7fe      	b.n	80098c0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80098c2:	f002 f9d7 	bl	800bc74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80098c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80098ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80098ce:	429a      	cmp	r2, r3
 80098d0:	d302      	bcc.n	80098d8 <xQueueGenericSend+0xd4>
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	2b02      	cmp	r3, #2
 80098d6:	d129      	bne.n	800992c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80098d8:	683a      	ldr	r2, [r7, #0]
 80098da:	68b9      	ldr	r1, [r7, #8]
 80098dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80098de:	f000 fb2f 	bl	8009f40 <prvCopyDataToQueue>
 80098e2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80098e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80098e8:	2b00      	cmp	r3, #0
 80098ea:	d010      	beq.n	800990e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80098ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80098ee:	3324      	adds	r3, #36	; 0x24
 80098f0:	4618      	mov	r0, r3
 80098f2:	f001 f997 	bl	800ac24 <xTaskRemoveFromEventList>
 80098f6:	4603      	mov	r3, r0
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d013      	beq.n	8009924 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80098fc:	4b3f      	ldr	r3, [pc, #252]	; (80099fc <xQueueGenericSend+0x1f8>)
 80098fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009902:	601a      	str	r2, [r3, #0]
 8009904:	f3bf 8f4f 	dsb	sy
 8009908:	f3bf 8f6f 	isb	sy
 800990c:	e00a      	b.n	8009924 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800990e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009910:	2b00      	cmp	r3, #0
 8009912:	d007      	beq.n	8009924 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8009914:	4b39      	ldr	r3, [pc, #228]	; (80099fc <xQueueGenericSend+0x1f8>)
 8009916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800991a:	601a      	str	r2, [r3, #0]
 800991c:	f3bf 8f4f 	dsb	sy
 8009920:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8009924:	f002 f9d6 	bl	800bcd4 <vPortExitCritical>
				return pdPASS;
 8009928:	2301      	movs	r3, #1
 800992a:	e063      	b.n	80099f4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	2b00      	cmp	r3, #0
 8009930:	d103      	bne.n	800993a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009932:	f002 f9cf 	bl	800bcd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8009936:	2300      	movs	r3, #0
 8009938:	e05c      	b.n	80099f4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800993a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800993c:	2b00      	cmp	r3, #0
 800993e:	d106      	bne.n	800994e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009940:	f107 0314 	add.w	r3, r7, #20
 8009944:	4618      	mov	r0, r3
 8009946:	f001 f9d1 	bl	800acec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800994a:	2301      	movs	r3, #1
 800994c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800994e:	f002 f9c1 	bl	800bcd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009952:	f000 ff3d 	bl	800a7d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009956:	f002 f98d 	bl	800bc74 <vPortEnterCritical>
 800995a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800995c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009960:	b25b      	sxtb	r3, r3
 8009962:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009966:	d103      	bne.n	8009970 <xQueueGenericSend+0x16c>
 8009968:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800996a:	2200      	movs	r2, #0
 800996c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009970:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009972:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009976:	b25b      	sxtb	r3, r3
 8009978:	f1b3 3fff 	cmp.w	r3, #4294967295
 800997c:	d103      	bne.n	8009986 <xQueueGenericSend+0x182>
 800997e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009980:	2200      	movs	r2, #0
 8009982:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009986:	f002 f9a5 	bl	800bcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800998a:	1d3a      	adds	r2, r7, #4
 800998c:	f107 0314 	add.w	r3, r7, #20
 8009990:	4611      	mov	r1, r2
 8009992:	4618      	mov	r0, r3
 8009994:	f001 f9c0 	bl	800ad18 <xTaskCheckForTimeOut>
 8009998:	4603      	mov	r3, r0
 800999a:	2b00      	cmp	r3, #0
 800999c:	d124      	bne.n	80099e8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800999e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099a0:	f000 fbc6 	bl	800a130 <prvIsQueueFull>
 80099a4:	4603      	mov	r3, r0
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d018      	beq.n	80099dc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80099aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ac:	3310      	adds	r3, #16
 80099ae:	687a      	ldr	r2, [r7, #4]
 80099b0:	4611      	mov	r1, r2
 80099b2:	4618      	mov	r0, r3
 80099b4:	f001 f8e6 	bl	800ab84 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80099b8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099ba:	f000 fb51 	bl	800a060 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80099be:	f000 ff15 	bl	800a7ec <xTaskResumeAll>
 80099c2:	4603      	mov	r3, r0
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	f47f af7c 	bne.w	80098c2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80099ca:	4b0c      	ldr	r3, [pc, #48]	; (80099fc <xQueueGenericSend+0x1f8>)
 80099cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80099d0:	601a      	str	r2, [r3, #0]
 80099d2:	f3bf 8f4f 	dsb	sy
 80099d6:	f3bf 8f6f 	isb	sy
 80099da:	e772      	b.n	80098c2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80099dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099de:	f000 fb3f 	bl	800a060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80099e2:	f000 ff03 	bl	800a7ec <xTaskResumeAll>
 80099e6:	e76c      	b.n	80098c2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80099e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80099ea:	f000 fb39 	bl	800a060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80099ee:	f000 fefd 	bl	800a7ec <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80099f2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80099f4:	4618      	mov	r0, r3
 80099f6:	3738      	adds	r7, #56	; 0x38
 80099f8:	46bd      	mov	sp, r7
 80099fa:	bd80      	pop	{r7, pc}
 80099fc:	e000ed04 	.word	0xe000ed04

08009a00 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8009a00:	b580      	push	{r7, lr}
 8009a02:	b090      	sub	sp, #64	; 0x40
 8009a04:	af00      	add	r7, sp, #0
 8009a06:	60f8      	str	r0, [r7, #12]
 8009a08:	60b9      	str	r1, [r7, #8]
 8009a0a:	607a      	str	r2, [r7, #4]
 8009a0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8009a0e:	68fb      	ldr	r3, [r7, #12]
 8009a10:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8009a12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a14:	2b00      	cmp	r3, #0
 8009a16:	d10a      	bne.n	8009a2e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8009a18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a1c:	f383 8811 	msr	BASEPRI, r3
 8009a20:	f3bf 8f6f 	isb	sy
 8009a24:	f3bf 8f4f 	dsb	sy
 8009a28:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009a2a:	bf00      	nop
 8009a2c:	e7fe      	b.n	8009a2c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009a2e:	68bb      	ldr	r3, [r7, #8]
 8009a30:	2b00      	cmp	r3, #0
 8009a32:	d103      	bne.n	8009a3c <xQueueGenericSendFromISR+0x3c>
 8009a34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d101      	bne.n	8009a40 <xQueueGenericSendFromISR+0x40>
 8009a3c:	2301      	movs	r3, #1
 8009a3e:	e000      	b.n	8009a42 <xQueueGenericSendFromISR+0x42>
 8009a40:	2300      	movs	r3, #0
 8009a42:	2b00      	cmp	r3, #0
 8009a44:	d10a      	bne.n	8009a5c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8009a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a4a:	f383 8811 	msr	BASEPRI, r3
 8009a4e:	f3bf 8f6f 	isb	sy
 8009a52:	f3bf 8f4f 	dsb	sy
 8009a56:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009a58:	bf00      	nop
 8009a5a:	e7fe      	b.n	8009a5a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009a5c:	683b      	ldr	r3, [r7, #0]
 8009a5e:	2b02      	cmp	r3, #2
 8009a60:	d103      	bne.n	8009a6a <xQueueGenericSendFromISR+0x6a>
 8009a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a66:	2b01      	cmp	r3, #1
 8009a68:	d101      	bne.n	8009a6e <xQueueGenericSendFromISR+0x6e>
 8009a6a:	2301      	movs	r3, #1
 8009a6c:	e000      	b.n	8009a70 <xQueueGenericSendFromISR+0x70>
 8009a6e:	2300      	movs	r3, #0
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10a      	bne.n	8009a8a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8009a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a78:	f383 8811 	msr	BASEPRI, r3
 8009a7c:	f3bf 8f6f 	isb	sy
 8009a80:	f3bf 8f4f 	dsb	sy
 8009a84:	623b      	str	r3, [r7, #32]
}
 8009a86:	bf00      	nop
 8009a88:	e7fe      	b.n	8009a88 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009a8a:	f002 f9d5 	bl	800be38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009a8e:	f3ef 8211 	mrs	r2, BASEPRI
 8009a92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009a96:	f383 8811 	msr	BASEPRI, r3
 8009a9a:	f3bf 8f6f 	isb	sy
 8009a9e:	f3bf 8f4f 	dsb	sy
 8009aa2:	61fa      	str	r2, [r7, #28]
 8009aa4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8009aa6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009aa8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009aae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009ab2:	429a      	cmp	r2, r3
 8009ab4:	d302      	bcc.n	8009abc <xQueueGenericSendFromISR+0xbc>
 8009ab6:	683b      	ldr	r3, [r7, #0]
 8009ab8:	2b02      	cmp	r3, #2
 8009aba:	d12f      	bne.n	8009b1c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009abc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009abe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009ac2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ac8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aca:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8009acc:	683a      	ldr	r2, [r7, #0]
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8009ad2:	f000 fa35 	bl	8009f40 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8009ad6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8009ada:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009ade:	d112      	bne.n	8009b06 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009ae0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009ae4:	2b00      	cmp	r3, #0
 8009ae6:	d016      	beq.n	8009b16 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8009ae8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aea:	3324      	adds	r3, #36	; 0x24
 8009aec:	4618      	mov	r0, r3
 8009aee:	f001 f899 	bl	800ac24 <xTaskRemoveFromEventList>
 8009af2:	4603      	mov	r3, r0
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d00e      	beq.n	8009b16 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d00b      	beq.n	8009b16 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	2201      	movs	r2, #1
 8009b02:	601a      	str	r2, [r3, #0]
 8009b04:	e007      	b.n	8009b16 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8009b06:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8009b0a:	3301      	adds	r3, #1
 8009b0c:	b2db      	uxtb	r3, r3
 8009b0e:	b25a      	sxtb	r2, r3
 8009b10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8009b16:	2301      	movs	r3, #1
 8009b18:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8009b1a:	e001      	b.n	8009b20 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8009b1c:	2300      	movs	r3, #0
 8009b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009b22:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8009b24:	697b      	ldr	r3, [r7, #20]
 8009b26:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009b2a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009b2c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009b2e:	4618      	mov	r0, r3
 8009b30:	3740      	adds	r7, #64	; 0x40
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
	...

08009b38 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009b38:	b580      	push	{r7, lr}
 8009b3a:	b08c      	sub	sp, #48	; 0x30
 8009b3c:	af00      	add	r7, sp, #0
 8009b3e:	60f8      	str	r0, [r7, #12]
 8009b40:	60b9      	str	r1, [r7, #8]
 8009b42:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8009b44:	2300      	movs	r3, #0
 8009b46:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009b48:	68fb      	ldr	r3, [r7, #12]
 8009b4a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009b4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d10a      	bne.n	8009b68 <xQueueReceive+0x30>
	__asm volatile
 8009b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b56:	f383 8811 	msr	BASEPRI, r3
 8009b5a:	f3bf 8f6f 	isb	sy
 8009b5e:	f3bf 8f4f 	dsb	sy
 8009b62:	623b      	str	r3, [r7, #32]
}
 8009b64:	bf00      	nop
 8009b66:	e7fe      	b.n	8009b66 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009b68:	68bb      	ldr	r3, [r7, #8]
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d103      	bne.n	8009b76 <xQueueReceive+0x3e>
 8009b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <xQueueReceive+0x42>
 8009b76:	2301      	movs	r3, #1
 8009b78:	e000      	b.n	8009b7c <xQueueReceive+0x44>
 8009b7a:	2300      	movs	r3, #0
 8009b7c:	2b00      	cmp	r3, #0
 8009b7e:	d10a      	bne.n	8009b96 <xQueueReceive+0x5e>
	__asm volatile
 8009b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b84:	f383 8811 	msr	BASEPRI, r3
 8009b88:	f3bf 8f6f 	isb	sy
 8009b8c:	f3bf 8f4f 	dsb	sy
 8009b90:	61fb      	str	r3, [r7, #28]
}
 8009b92:	bf00      	nop
 8009b94:	e7fe      	b.n	8009b94 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009b96:	f001 fa17 	bl	800afc8 <xTaskGetSchedulerState>
 8009b9a:	4603      	mov	r3, r0
 8009b9c:	2b00      	cmp	r3, #0
 8009b9e:	d102      	bne.n	8009ba6 <xQueueReceive+0x6e>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d101      	bne.n	8009baa <xQueueReceive+0x72>
 8009ba6:	2301      	movs	r3, #1
 8009ba8:	e000      	b.n	8009bac <xQueueReceive+0x74>
 8009baa:	2300      	movs	r3, #0
 8009bac:	2b00      	cmp	r3, #0
 8009bae:	d10a      	bne.n	8009bc6 <xQueueReceive+0x8e>
	__asm volatile
 8009bb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009bb4:	f383 8811 	msr	BASEPRI, r3
 8009bb8:	f3bf 8f6f 	isb	sy
 8009bbc:	f3bf 8f4f 	dsb	sy
 8009bc0:	61bb      	str	r3, [r7, #24]
}
 8009bc2:	bf00      	nop
 8009bc4:	e7fe      	b.n	8009bc4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009bc6:	f002 f855 	bl	800bc74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009bca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009bce:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009bd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009bd2:	2b00      	cmp	r3, #0
 8009bd4:	d01f      	beq.n	8009c16 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8009bd6:	68b9      	ldr	r1, [r7, #8]
 8009bd8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009bda:	f000 fa1b 	bl	800a014 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8009bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009be0:	1e5a      	subs	r2, r3, #1
 8009be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	2b00      	cmp	r3, #0
 8009bec:	d00f      	beq.n	8009c0e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009bf0:	3310      	adds	r3, #16
 8009bf2:	4618      	mov	r0, r3
 8009bf4:	f001 f816 	bl	800ac24 <xTaskRemoveFromEventList>
 8009bf8:	4603      	mov	r3, r0
 8009bfa:	2b00      	cmp	r3, #0
 8009bfc:	d007      	beq.n	8009c0e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009bfe:	4b3d      	ldr	r3, [pc, #244]	; (8009cf4 <xQueueReceive+0x1bc>)
 8009c00:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009c04:	601a      	str	r2, [r3, #0]
 8009c06:	f3bf 8f4f 	dsb	sy
 8009c0a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009c0e:	f002 f861 	bl	800bcd4 <vPortExitCritical>
				return pdPASS;
 8009c12:	2301      	movs	r3, #1
 8009c14:	e069      	b.n	8009cea <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	2b00      	cmp	r3, #0
 8009c1a:	d103      	bne.n	8009c24 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8009c1c:	f002 f85a 	bl	800bcd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009c20:	2300      	movs	r3, #0
 8009c22:	e062      	b.n	8009cea <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009c24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d106      	bne.n	8009c38 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009c2a:	f107 0310 	add.w	r3, r7, #16
 8009c2e:	4618      	mov	r0, r3
 8009c30:	f001 f85c 	bl	800acec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009c34:	2301      	movs	r3, #1
 8009c36:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009c38:	f002 f84c 	bl	800bcd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009c3c:	f000 fdc8 	bl	800a7d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009c40:	f002 f818 	bl	800bc74 <vPortEnterCritical>
 8009c44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c46:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009c4a:	b25b      	sxtb	r3, r3
 8009c4c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c50:	d103      	bne.n	8009c5a <xQueueReceive+0x122>
 8009c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c54:	2200      	movs	r2, #0
 8009c56:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009c5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009c60:	b25b      	sxtb	r3, r3
 8009c62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c66:	d103      	bne.n	8009c70 <xQueueReceive+0x138>
 8009c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c6a:	2200      	movs	r2, #0
 8009c6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009c70:	f002 f830 	bl	800bcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009c74:	1d3a      	adds	r2, r7, #4
 8009c76:	f107 0310 	add.w	r3, r7, #16
 8009c7a:	4611      	mov	r1, r2
 8009c7c:	4618      	mov	r0, r3
 8009c7e:	f001 f84b 	bl	800ad18 <xTaskCheckForTimeOut>
 8009c82:	4603      	mov	r3, r0
 8009c84:	2b00      	cmp	r3, #0
 8009c86:	d123      	bne.n	8009cd0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009c88:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009c8a:	f000 fa3b 	bl	800a104 <prvIsQueueEmpty>
 8009c8e:	4603      	mov	r3, r0
 8009c90:	2b00      	cmp	r3, #0
 8009c92:	d017      	beq.n	8009cc4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009c94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009c96:	3324      	adds	r3, #36	; 0x24
 8009c98:	687a      	ldr	r2, [r7, #4]
 8009c9a:	4611      	mov	r1, r2
 8009c9c:	4618      	mov	r0, r3
 8009c9e:	f000 ff71 	bl	800ab84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009ca2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009ca4:	f000 f9dc 	bl	800a060 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009ca8:	f000 fda0 	bl	800a7ec <xTaskResumeAll>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d189      	bne.n	8009bc6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8009cb2:	4b10      	ldr	r3, [pc, #64]	; (8009cf4 <xQueueReceive+0x1bc>)
 8009cb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009cb8:	601a      	str	r2, [r3, #0]
 8009cba:	f3bf 8f4f 	dsb	sy
 8009cbe:	f3bf 8f6f 	isb	sy
 8009cc2:	e780      	b.n	8009bc6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8009cc4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cc6:	f000 f9cb 	bl	800a060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009cca:	f000 fd8f 	bl	800a7ec <xTaskResumeAll>
 8009cce:	e77a      	b.n	8009bc6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8009cd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cd2:	f000 f9c5 	bl	800a060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009cd6:	f000 fd89 	bl	800a7ec <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009cda:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009cdc:	f000 fa12 	bl	800a104 <prvIsQueueEmpty>
 8009ce0:	4603      	mov	r3, r0
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f43f af6f 	beq.w	8009bc6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009ce8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009cea:	4618      	mov	r0, r3
 8009cec:	3730      	adds	r7, #48	; 0x30
 8009cee:	46bd      	mov	sp, r7
 8009cf0:	bd80      	pop	{r7, pc}
 8009cf2:	bf00      	nop
 8009cf4:	e000ed04 	.word	0xe000ed04

08009cf8 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8009cf8:	b580      	push	{r7, lr}
 8009cfa:	b08e      	sub	sp, #56	; 0x38
 8009cfc:	af00      	add	r7, sp, #0
 8009cfe:	6078      	str	r0, [r7, #4]
 8009d00:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8009d02:	2300      	movs	r3, #0
 8009d04:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8009d0a:	2300      	movs	r3, #0
 8009d0c:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009d0e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	d10a      	bne.n	8009d2a <xQueueSemaphoreTake+0x32>
	__asm volatile
 8009d14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d18:	f383 8811 	msr	BASEPRI, r3
 8009d1c:	f3bf 8f6f 	isb	sy
 8009d20:	f3bf 8f4f 	dsb	sy
 8009d24:	623b      	str	r3, [r7, #32]
}
 8009d26:	bf00      	nop
 8009d28:	e7fe      	b.n	8009d28 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8009d2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d00a      	beq.n	8009d48 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8009d32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d36:	f383 8811 	msr	BASEPRI, r3
 8009d3a:	f3bf 8f6f 	isb	sy
 8009d3e:	f3bf 8f4f 	dsb	sy
 8009d42:	61fb      	str	r3, [r7, #28]
}
 8009d44:	bf00      	nop
 8009d46:	e7fe      	b.n	8009d46 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8009d48:	f001 f93e 	bl	800afc8 <xTaskGetSchedulerState>
 8009d4c:	4603      	mov	r3, r0
 8009d4e:	2b00      	cmp	r3, #0
 8009d50:	d102      	bne.n	8009d58 <xQueueSemaphoreTake+0x60>
 8009d52:	683b      	ldr	r3, [r7, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	d101      	bne.n	8009d5c <xQueueSemaphoreTake+0x64>
 8009d58:	2301      	movs	r3, #1
 8009d5a:	e000      	b.n	8009d5e <xQueueSemaphoreTake+0x66>
 8009d5c:	2300      	movs	r3, #0
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	d10a      	bne.n	8009d78 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8009d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009d66:	f383 8811 	msr	BASEPRI, r3
 8009d6a:	f3bf 8f6f 	isb	sy
 8009d6e:	f3bf 8f4f 	dsb	sy
 8009d72:	61bb      	str	r3, [r7, #24]
}
 8009d74:	bf00      	nop
 8009d76:	e7fe      	b.n	8009d76 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8009d78:	f001 ff7c 	bl	800bc74 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8009d7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d80:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8009d82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d84:	2b00      	cmp	r3, #0
 8009d86:	d024      	beq.n	8009dd2 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8009d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009d8a:	1e5a      	subs	r2, r3, #1
 8009d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d8e:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	2b00      	cmp	r3, #0
 8009d96:	d104      	bne.n	8009da2 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8009d98:	f001 fa8c 	bl	800b2b4 <pvTaskIncrementMutexHeldCount>
 8009d9c:	4602      	mov	r2, r0
 8009d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da0:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009da2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009da4:	691b      	ldr	r3, [r3, #16]
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d00f      	beq.n	8009dca <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009dac:	3310      	adds	r3, #16
 8009dae:	4618      	mov	r0, r3
 8009db0:	f000 ff38 	bl	800ac24 <xTaskRemoveFromEventList>
 8009db4:	4603      	mov	r3, r0
 8009db6:	2b00      	cmp	r3, #0
 8009db8:	d007      	beq.n	8009dca <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8009dba:	4b54      	ldr	r3, [pc, #336]	; (8009f0c <xQueueSemaphoreTake+0x214>)
 8009dbc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009dc0:	601a      	str	r2, [r3, #0]
 8009dc2:	f3bf 8f4f 	dsb	sy
 8009dc6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8009dca:	f001 ff83 	bl	800bcd4 <vPortExitCritical>
				return pdPASS;
 8009dce:	2301      	movs	r3, #1
 8009dd0:	e097      	b.n	8009f02 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009dd2:	683b      	ldr	r3, [r7, #0]
 8009dd4:	2b00      	cmp	r3, #0
 8009dd6:	d111      	bne.n	8009dfc <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8009dd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009dda:	2b00      	cmp	r3, #0
 8009ddc:	d00a      	beq.n	8009df4 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8009dde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009de2:	f383 8811 	msr	BASEPRI, r3
 8009de6:	f3bf 8f6f 	isb	sy
 8009dea:	f3bf 8f4f 	dsb	sy
 8009dee:	617b      	str	r3, [r7, #20]
}
 8009df0:	bf00      	nop
 8009df2:	e7fe      	b.n	8009df2 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8009df4:	f001 ff6e 	bl	800bcd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8009df8:	2300      	movs	r3, #0
 8009dfa:	e082      	b.n	8009f02 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009dfc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d106      	bne.n	8009e10 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009e02:	f107 030c 	add.w	r3, r7, #12
 8009e06:	4618      	mov	r0, r3
 8009e08:	f000 ff70 	bl	800acec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009e0c:	2301      	movs	r3, #1
 8009e0e:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009e10:	f001 ff60 	bl	800bcd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009e14:	f000 fcdc 	bl	800a7d0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009e18:	f001 ff2c 	bl	800bc74 <vPortEnterCritical>
 8009e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e1e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009e22:	b25b      	sxtb	r3, r3
 8009e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e28:	d103      	bne.n	8009e32 <xQueueSemaphoreTake+0x13a>
 8009e2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e2c:	2200      	movs	r2, #0
 8009e2e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e34:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009e38:	b25b      	sxtb	r3, r3
 8009e3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009e3e:	d103      	bne.n	8009e48 <xQueueSemaphoreTake+0x150>
 8009e40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e42:	2200      	movs	r2, #0
 8009e44:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009e48:	f001 ff44 	bl	800bcd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009e4c:	463a      	mov	r2, r7
 8009e4e:	f107 030c 	add.w	r3, r7, #12
 8009e52:	4611      	mov	r1, r2
 8009e54:	4618      	mov	r0, r3
 8009e56:	f000 ff5f 	bl	800ad18 <xTaskCheckForTimeOut>
 8009e5a:	4603      	mov	r3, r0
 8009e5c:	2b00      	cmp	r3, #0
 8009e5e:	d132      	bne.n	8009ec6 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009e60:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e62:	f000 f94f 	bl	800a104 <prvIsQueueEmpty>
 8009e66:	4603      	mov	r3, r0
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d026      	beq.n	8009eba <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009e6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	d109      	bne.n	8009e88 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8009e74:	f001 fefe 	bl	800bc74 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e7a:	689b      	ldr	r3, [r3, #8]
 8009e7c:	4618      	mov	r0, r3
 8009e7e:	f001 f8c1 	bl	800b004 <xTaskPriorityInherit>
 8009e82:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8009e84:	f001 ff26 	bl	800bcd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8009e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009e8a:	3324      	adds	r3, #36	; 0x24
 8009e8c:	683a      	ldr	r2, [r7, #0]
 8009e8e:	4611      	mov	r1, r2
 8009e90:	4618      	mov	r0, r3
 8009e92:	f000 fe77 	bl	800ab84 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8009e96:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009e98:	f000 f8e2 	bl	800a060 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009e9c:	f000 fca6 	bl	800a7ec <xTaskResumeAll>
 8009ea0:	4603      	mov	r3, r0
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	f47f af68 	bne.w	8009d78 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8009ea8:	4b18      	ldr	r3, [pc, #96]	; (8009f0c <xQueueSemaphoreTake+0x214>)
 8009eaa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009eae:	601a      	str	r2, [r3, #0]
 8009eb0:	f3bf 8f4f 	dsb	sy
 8009eb4:	f3bf 8f6f 	isb	sy
 8009eb8:	e75e      	b.n	8009d78 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8009eba:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ebc:	f000 f8d0 	bl	800a060 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8009ec0:	f000 fc94 	bl	800a7ec <xTaskResumeAll>
 8009ec4:	e758      	b.n	8009d78 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8009ec6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ec8:	f000 f8ca 	bl	800a060 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8009ecc:	f000 fc8e 	bl	800a7ec <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009ed0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009ed2:	f000 f917 	bl	800a104 <prvIsQueueEmpty>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	f43f af4d 	beq.w	8009d78 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8009ede:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d00d      	beq.n	8009f00 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8009ee4:	f001 fec6 	bl	800bc74 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8009ee8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8009eea:	f000 f811 	bl	8009f10 <prvGetDisinheritPriorityAfterTimeout>
 8009eee:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8009ef0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009ef2:	689b      	ldr	r3, [r3, #8]
 8009ef4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009ef6:	4618      	mov	r0, r3
 8009ef8:	f001 f95a 	bl	800b1b0 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8009efc:	f001 feea 	bl	800bcd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8009f00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8009f02:	4618      	mov	r0, r3
 8009f04:	3738      	adds	r7, #56	; 0x38
 8009f06:	46bd      	mov	sp, r7
 8009f08:	bd80      	pop	{r7, pc}
 8009f0a:	bf00      	nop
 8009f0c:	e000ed04 	.word	0xe000ed04

08009f10 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8009f10:	b480      	push	{r7}
 8009f12:	b085      	sub	sp, #20
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d006      	beq.n	8009f2e <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009f24:	681b      	ldr	r3, [r3, #0]
 8009f26:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8009f2a:	60fb      	str	r3, [r7, #12]
 8009f2c:	e001      	b.n	8009f32 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8009f2e:	2300      	movs	r3, #0
 8009f30:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8009f32:	68fb      	ldr	r3, [r7, #12]
	}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b086      	sub	sp, #24
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	60f8      	str	r0, [r7, #12]
 8009f48:	60b9      	str	r1, [r7, #8]
 8009f4a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8009f4c:	2300      	movs	r3, #0
 8009f4e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8009f50:	68fb      	ldr	r3, [r7, #12]
 8009f52:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f54:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8009f56:	68fb      	ldr	r3, [r7, #12]
 8009f58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10d      	bne.n	8009f7a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8009f5e:	68fb      	ldr	r3, [r7, #12]
 8009f60:	681b      	ldr	r3, [r3, #0]
 8009f62:	2b00      	cmp	r3, #0
 8009f64:	d14d      	bne.n	800a002 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8009f66:	68fb      	ldr	r3, [r7, #12]
 8009f68:	689b      	ldr	r3, [r3, #8]
 8009f6a:	4618      	mov	r0, r3
 8009f6c:	f001 f8b2 	bl	800b0d4 <xTaskPriorityDisinherit>
 8009f70:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	2200      	movs	r2, #0
 8009f76:	609a      	str	r2, [r3, #8]
 8009f78:	e043      	b.n	800a002 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	d119      	bne.n	8009fb4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009f80:	68fb      	ldr	r3, [r7, #12]
 8009f82:	6858      	ldr	r0, [r3, #4]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f88:	461a      	mov	r2, r3
 8009f8a:	68b9      	ldr	r1, [r7, #8]
 8009f8c:	f002 f9aa 	bl	800c2e4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	685a      	ldr	r2, [r3, #4]
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f98:	441a      	add	r2, r3
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	685a      	ldr	r2, [r3, #4]
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	689b      	ldr	r3, [r3, #8]
 8009fa6:	429a      	cmp	r2, r3
 8009fa8:	d32b      	bcc.n	800a002 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	68fb      	ldr	r3, [r7, #12]
 8009fb0:	605a      	str	r2, [r3, #4]
 8009fb2:	e026      	b.n	800a002 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	68d8      	ldr	r0, [r3, #12]
 8009fb8:	68fb      	ldr	r3, [r7, #12]
 8009fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fbc:	461a      	mov	r2, r3
 8009fbe:	68b9      	ldr	r1, [r7, #8]
 8009fc0:	f002 f990 	bl	800c2e4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009fc4:	68fb      	ldr	r3, [r7, #12]
 8009fc6:	68da      	ldr	r2, [r3, #12]
 8009fc8:	68fb      	ldr	r3, [r7, #12]
 8009fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fcc:	425b      	negs	r3, r3
 8009fce:	441a      	add	r2, r3
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009fd4:	68fb      	ldr	r3, [r7, #12]
 8009fd6:	68da      	ldr	r2, [r3, #12]
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	429a      	cmp	r2, r3
 8009fde:	d207      	bcs.n	8009ff0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009fe0:	68fb      	ldr	r3, [r7, #12]
 8009fe2:	689a      	ldr	r2, [r3, #8]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009fe8:	425b      	negs	r3, r3
 8009fea:	441a      	add	r2, r3
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	2b02      	cmp	r3, #2
 8009ff4:	d105      	bne.n	800a002 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009ff6:	693b      	ldr	r3, [r7, #16]
 8009ff8:	2b00      	cmp	r3, #0
 8009ffa:	d002      	beq.n	800a002 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8009ffc:	693b      	ldr	r3, [r7, #16]
 8009ffe:	3b01      	subs	r3, #1
 800a000:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a002:	693b      	ldr	r3, [r7, #16]
 800a004:	1c5a      	adds	r2, r3, #1
 800a006:	68fb      	ldr	r3, [r7, #12]
 800a008:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800a00a:	697b      	ldr	r3, [r7, #20]
}
 800a00c:	4618      	mov	r0, r3
 800a00e:	3718      	adds	r7, #24
 800a010:	46bd      	mov	sp, r7
 800a012:	bd80      	pop	{r7, pc}

0800a014 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800a014:	b580      	push	{r7, lr}
 800a016:	b082      	sub	sp, #8
 800a018:	af00      	add	r7, sp, #0
 800a01a:	6078      	str	r0, [r7, #4]
 800a01c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a022:	2b00      	cmp	r3, #0
 800a024:	d018      	beq.n	800a058 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	68da      	ldr	r2, [r3, #12]
 800a02a:	687b      	ldr	r3, [r7, #4]
 800a02c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a02e:	441a      	add	r2, r3
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	68da      	ldr	r2, [r3, #12]
 800a038:	687b      	ldr	r3, [r7, #4]
 800a03a:	689b      	ldr	r3, [r3, #8]
 800a03c:	429a      	cmp	r2, r3
 800a03e:	d303      	bcc.n	800a048 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800a040:	687b      	ldr	r3, [r7, #4]
 800a042:	681a      	ldr	r2, [r3, #0]
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a048:	687b      	ldr	r3, [r7, #4]
 800a04a:	68d9      	ldr	r1, [r3, #12]
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a050:	461a      	mov	r2, r3
 800a052:	6838      	ldr	r0, [r7, #0]
 800a054:	f002 f946 	bl	800c2e4 <memcpy>
	}
}
 800a058:	bf00      	nop
 800a05a:	3708      	adds	r7, #8
 800a05c:	46bd      	mov	sp, r7
 800a05e:	bd80      	pop	{r7, pc}

0800a060 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800a060:	b580      	push	{r7, lr}
 800a062:	b084      	sub	sp, #16
 800a064:	af00      	add	r7, sp, #0
 800a066:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800a068:	f001 fe04 	bl	800bc74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a072:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a074:	e011      	b.n	800a09a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d012      	beq.n	800a0a4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	3324      	adds	r3, #36	; 0x24
 800a082:	4618      	mov	r0, r3
 800a084:	f000 fdce 	bl	800ac24 <xTaskRemoveFromEventList>
 800a088:	4603      	mov	r3, r0
 800a08a:	2b00      	cmp	r3, #0
 800a08c:	d001      	beq.n	800a092 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800a08e:	f000 fea5 	bl	800addc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800a092:	7bfb      	ldrb	r3, [r7, #15]
 800a094:	3b01      	subs	r3, #1
 800a096:	b2db      	uxtb	r3, r3
 800a098:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800a09a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	dce9      	bgt.n	800a076 <prvUnlockQueue+0x16>
 800a0a2:	e000      	b.n	800a0a6 <prvUnlockQueue+0x46>
					break;
 800a0a4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	22ff      	movs	r2, #255	; 0xff
 800a0aa:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800a0ae:	f001 fe11 	bl	800bcd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800a0b2:	f001 fddf 	bl	800bc74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800a0b6:	687b      	ldr	r3, [r7, #4]
 800a0b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a0bc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0be:	e011      	b.n	800a0e4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	691b      	ldr	r3, [r3, #16]
 800a0c4:	2b00      	cmp	r3, #0
 800a0c6:	d012      	beq.n	800a0ee <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	3310      	adds	r3, #16
 800a0cc:	4618      	mov	r0, r3
 800a0ce:	f000 fda9 	bl	800ac24 <xTaskRemoveFromEventList>
 800a0d2:	4603      	mov	r3, r0
 800a0d4:	2b00      	cmp	r3, #0
 800a0d6:	d001      	beq.n	800a0dc <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800a0d8:	f000 fe80 	bl	800addc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800a0dc:	7bbb      	ldrb	r3, [r7, #14]
 800a0de:	3b01      	subs	r3, #1
 800a0e0:	b2db      	uxtb	r3, r3
 800a0e2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800a0e4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	dce9      	bgt.n	800a0c0 <prvUnlockQueue+0x60>
 800a0ec:	e000      	b.n	800a0f0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800a0ee:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	22ff      	movs	r2, #255	; 0xff
 800a0f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800a0f8:	f001 fdec 	bl	800bcd4 <vPortExitCritical>
}
 800a0fc:	bf00      	nop
 800a0fe:	3710      	adds	r7, #16
 800a100:	46bd      	mov	sp, r7
 800a102:	bd80      	pop	{r7, pc}

0800a104 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b084      	sub	sp, #16
 800a108:	af00      	add	r7, sp, #0
 800a10a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a10c:	f001 fdb2 	bl	800bc74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800a110:	687b      	ldr	r3, [r7, #4]
 800a112:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a114:	2b00      	cmp	r3, #0
 800a116:	d102      	bne.n	800a11e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800a118:	2301      	movs	r3, #1
 800a11a:	60fb      	str	r3, [r7, #12]
 800a11c:	e001      	b.n	800a122 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800a11e:	2300      	movs	r3, #0
 800a120:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a122:	f001 fdd7 	bl	800bcd4 <vPortExitCritical>

	return xReturn;
 800a126:	68fb      	ldr	r3, [r7, #12]
}
 800a128:	4618      	mov	r0, r3
 800a12a:	3710      	adds	r7, #16
 800a12c:	46bd      	mov	sp, r7
 800a12e:	bd80      	pop	{r7, pc}

0800a130 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800a130:	b580      	push	{r7, lr}
 800a132:	b084      	sub	sp, #16
 800a134:	af00      	add	r7, sp, #0
 800a136:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800a138:	f001 fd9c 	bl	800bc74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800a144:	429a      	cmp	r2, r3
 800a146:	d102      	bne.n	800a14e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800a148:	2301      	movs	r3, #1
 800a14a:	60fb      	str	r3, [r7, #12]
 800a14c:	e001      	b.n	800a152 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800a14e:	2300      	movs	r3, #0
 800a150:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800a152:	f001 fdbf 	bl	800bcd4 <vPortExitCritical>

	return xReturn;
 800a156:	68fb      	ldr	r3, [r7, #12]
}
 800a158:	4618      	mov	r0, r3
 800a15a:	3710      	adds	r7, #16
 800a15c:	46bd      	mov	sp, r7
 800a15e:	bd80      	pop	{r7, pc}

0800a160 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800a160:	b480      	push	{r7}
 800a162:	b085      	sub	sp, #20
 800a164:	af00      	add	r7, sp, #0
 800a166:	6078      	str	r0, [r7, #4]
 800a168:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a16a:	2300      	movs	r3, #0
 800a16c:	60fb      	str	r3, [r7, #12]
 800a16e:	e014      	b.n	800a19a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800a170:	4a0f      	ldr	r2, [pc, #60]	; (800a1b0 <vQueueAddToRegistry+0x50>)
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d10b      	bne.n	800a194 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800a17c:	490c      	ldr	r1, [pc, #48]	; (800a1b0 <vQueueAddToRegistry+0x50>)
 800a17e:	68fb      	ldr	r3, [r7, #12]
 800a180:	683a      	ldr	r2, [r7, #0]
 800a182:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800a186:	4a0a      	ldr	r2, [pc, #40]	; (800a1b0 <vQueueAddToRegistry+0x50>)
 800a188:	68fb      	ldr	r3, [r7, #12]
 800a18a:	00db      	lsls	r3, r3, #3
 800a18c:	4413      	add	r3, r2
 800a18e:	687a      	ldr	r2, [r7, #4]
 800a190:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800a192:	e006      	b.n	800a1a2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	3301      	adds	r3, #1
 800a198:	60fb      	str	r3, [r7, #12]
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	2b07      	cmp	r3, #7
 800a19e:	d9e7      	bls.n	800a170 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800a1a0:	bf00      	nop
 800a1a2:	bf00      	nop
 800a1a4:	3714      	adds	r7, #20
 800a1a6:	46bd      	mov	sp, r7
 800a1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1ac:	4770      	bx	lr
 800a1ae:	bf00      	nop
 800a1b0:	20000af8 	.word	0x20000af8

0800a1b4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a1b4:	b580      	push	{r7, lr}
 800a1b6:	b086      	sub	sp, #24
 800a1b8:	af00      	add	r7, sp, #0
 800a1ba:	60f8      	str	r0, [r7, #12]
 800a1bc:	60b9      	str	r1, [r7, #8]
 800a1be:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800a1c0:	68fb      	ldr	r3, [r7, #12]
 800a1c2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800a1c4:	f001 fd56 	bl	800bc74 <vPortEnterCritical>
 800a1c8:	697b      	ldr	r3, [r7, #20]
 800a1ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800a1ce:	b25b      	sxtb	r3, r3
 800a1d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1d4:	d103      	bne.n	800a1de <vQueueWaitForMessageRestricted+0x2a>
 800a1d6:	697b      	ldr	r3, [r7, #20]
 800a1d8:	2200      	movs	r2, #0
 800a1da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800a1e4:	b25b      	sxtb	r3, r3
 800a1e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a1ea:	d103      	bne.n	800a1f4 <vQueueWaitForMessageRestricted+0x40>
 800a1ec:	697b      	ldr	r3, [r7, #20]
 800a1ee:	2200      	movs	r2, #0
 800a1f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800a1f4:	f001 fd6e 	bl	800bcd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800a1f8:	697b      	ldr	r3, [r7, #20]
 800a1fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a1fc:	2b00      	cmp	r3, #0
 800a1fe:	d106      	bne.n	800a20e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800a200:	697b      	ldr	r3, [r7, #20]
 800a202:	3324      	adds	r3, #36	; 0x24
 800a204:	687a      	ldr	r2, [r7, #4]
 800a206:	68b9      	ldr	r1, [r7, #8]
 800a208:	4618      	mov	r0, r3
 800a20a:	f000 fcdf 	bl	800abcc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800a20e:	6978      	ldr	r0, [r7, #20]
 800a210:	f7ff ff26 	bl	800a060 <prvUnlockQueue>
	}
 800a214:	bf00      	nop
 800a216:	3718      	adds	r7, #24
 800a218:	46bd      	mov	sp, r7
 800a21a:	bd80      	pop	{r7, pc}

0800a21c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800a21c:	b580      	push	{r7, lr}
 800a21e:	b08e      	sub	sp, #56	; 0x38
 800a220:	af04      	add	r7, sp, #16
 800a222:	60f8      	str	r0, [r7, #12]
 800a224:	60b9      	str	r1, [r7, #8]
 800a226:	607a      	str	r2, [r7, #4]
 800a228:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800a22a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a22c:	2b00      	cmp	r3, #0
 800a22e:	d10a      	bne.n	800a246 <xTaskCreateStatic+0x2a>
	__asm volatile
 800a230:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a234:	f383 8811 	msr	BASEPRI, r3
 800a238:	f3bf 8f6f 	isb	sy
 800a23c:	f3bf 8f4f 	dsb	sy
 800a240:	623b      	str	r3, [r7, #32]
}
 800a242:	bf00      	nop
 800a244:	e7fe      	b.n	800a244 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800a246:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a248:	2b00      	cmp	r3, #0
 800a24a:	d10a      	bne.n	800a262 <xTaskCreateStatic+0x46>
	__asm volatile
 800a24c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a250:	f383 8811 	msr	BASEPRI, r3
 800a254:	f3bf 8f6f 	isb	sy
 800a258:	f3bf 8f4f 	dsb	sy
 800a25c:	61fb      	str	r3, [r7, #28]
}
 800a25e:	bf00      	nop
 800a260:	e7fe      	b.n	800a260 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800a262:	23bc      	movs	r3, #188	; 0xbc
 800a264:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800a266:	693b      	ldr	r3, [r7, #16]
 800a268:	2bbc      	cmp	r3, #188	; 0xbc
 800a26a:	d00a      	beq.n	800a282 <xTaskCreateStatic+0x66>
	__asm volatile
 800a26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a270:	f383 8811 	msr	BASEPRI, r3
 800a274:	f3bf 8f6f 	isb	sy
 800a278:	f3bf 8f4f 	dsb	sy
 800a27c:	61bb      	str	r3, [r7, #24]
}
 800a27e:	bf00      	nop
 800a280:	e7fe      	b.n	800a280 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800a282:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800a284:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a286:	2b00      	cmp	r3, #0
 800a288:	d01e      	beq.n	800a2c8 <xTaskCreateStatic+0xac>
 800a28a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a28c:	2b00      	cmp	r3, #0
 800a28e:	d01b      	beq.n	800a2c8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a290:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a292:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800a294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a296:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a298:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800a29a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a29c:	2202      	movs	r2, #2
 800a29e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800a2a2:	2300      	movs	r3, #0
 800a2a4:	9303      	str	r3, [sp, #12]
 800a2a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a2a8:	9302      	str	r3, [sp, #8]
 800a2aa:	f107 0314 	add.w	r3, r7, #20
 800a2ae:	9301      	str	r3, [sp, #4]
 800a2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a2b2:	9300      	str	r3, [sp, #0]
 800a2b4:	683b      	ldr	r3, [r7, #0]
 800a2b6:	687a      	ldr	r2, [r7, #4]
 800a2b8:	68b9      	ldr	r1, [r7, #8]
 800a2ba:	68f8      	ldr	r0, [r7, #12]
 800a2bc:	f000 f850 	bl	800a360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a2c0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800a2c2:	f000 f8f3 	bl	800a4ac <prvAddNewTaskToReadyList>
 800a2c6:	e001      	b.n	800a2cc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800a2cc:	697b      	ldr	r3, [r7, #20]
	}
 800a2ce:	4618      	mov	r0, r3
 800a2d0:	3728      	adds	r7, #40	; 0x28
 800a2d2:	46bd      	mov	sp, r7
 800a2d4:	bd80      	pop	{r7, pc}

0800a2d6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800a2d6:	b580      	push	{r7, lr}
 800a2d8:	b08c      	sub	sp, #48	; 0x30
 800a2da:	af04      	add	r7, sp, #16
 800a2dc:	60f8      	str	r0, [r7, #12]
 800a2de:	60b9      	str	r1, [r7, #8]
 800a2e0:	603b      	str	r3, [r7, #0]
 800a2e2:	4613      	mov	r3, r2
 800a2e4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800a2e6:	88fb      	ldrh	r3, [r7, #6]
 800a2e8:	009b      	lsls	r3, r3, #2
 800a2ea:	4618      	mov	r0, r3
 800a2ec:	f001 fde4 	bl	800beb8 <pvPortMalloc>
 800a2f0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800a2f2:	697b      	ldr	r3, [r7, #20]
 800a2f4:	2b00      	cmp	r3, #0
 800a2f6:	d00e      	beq.n	800a316 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800a2f8:	20bc      	movs	r0, #188	; 0xbc
 800a2fa:	f001 fddd 	bl	800beb8 <pvPortMalloc>
 800a2fe:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	2b00      	cmp	r3, #0
 800a304:	d003      	beq.n	800a30e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800a306:	69fb      	ldr	r3, [r7, #28]
 800a308:	697a      	ldr	r2, [r7, #20]
 800a30a:	631a      	str	r2, [r3, #48]	; 0x30
 800a30c:	e005      	b.n	800a31a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800a30e:	6978      	ldr	r0, [r7, #20]
 800a310:	f001 fe9e 	bl	800c050 <vPortFree>
 800a314:	e001      	b.n	800a31a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800a316:	2300      	movs	r3, #0
 800a318:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800a31a:	69fb      	ldr	r3, [r7, #28]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d017      	beq.n	800a350 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800a320:	69fb      	ldr	r3, [r7, #28]
 800a322:	2200      	movs	r2, #0
 800a324:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800a328:	88fa      	ldrh	r2, [r7, #6]
 800a32a:	2300      	movs	r3, #0
 800a32c:	9303      	str	r3, [sp, #12]
 800a32e:	69fb      	ldr	r3, [r7, #28]
 800a330:	9302      	str	r3, [sp, #8]
 800a332:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a334:	9301      	str	r3, [sp, #4]
 800a336:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a338:	9300      	str	r3, [sp, #0]
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	68b9      	ldr	r1, [r7, #8]
 800a33e:	68f8      	ldr	r0, [r7, #12]
 800a340:	f000 f80e 	bl	800a360 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800a344:	69f8      	ldr	r0, [r7, #28]
 800a346:	f000 f8b1 	bl	800a4ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800a34a:	2301      	movs	r3, #1
 800a34c:	61bb      	str	r3, [r7, #24]
 800a34e:	e002      	b.n	800a356 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800a350:	f04f 33ff 	mov.w	r3, #4294967295
 800a354:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800a356:	69bb      	ldr	r3, [r7, #24]
	}
 800a358:	4618      	mov	r0, r3
 800a35a:	3720      	adds	r7, #32
 800a35c:	46bd      	mov	sp, r7
 800a35e:	bd80      	pop	{r7, pc}

0800a360 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800a360:	b580      	push	{r7, lr}
 800a362:	b088      	sub	sp, #32
 800a364:	af00      	add	r7, sp, #0
 800a366:	60f8      	str	r0, [r7, #12]
 800a368:	60b9      	str	r1, [r7, #8]
 800a36a:	607a      	str	r2, [r7, #4]
 800a36c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800a36e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a370:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	009b      	lsls	r3, r3, #2
 800a376:	461a      	mov	r2, r3
 800a378:	21a5      	movs	r1, #165	; 0xa5
 800a37a:	f001 ffc1 	bl	800c300 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800a37e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a380:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800a388:	3b01      	subs	r3, #1
 800a38a:	009b      	lsls	r3, r3, #2
 800a38c:	4413      	add	r3, r2
 800a38e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800a390:	69bb      	ldr	r3, [r7, #24]
 800a392:	f023 0307 	bic.w	r3, r3, #7
 800a396:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800a398:	69bb      	ldr	r3, [r7, #24]
 800a39a:	f003 0307 	and.w	r3, r3, #7
 800a39e:	2b00      	cmp	r3, #0
 800a3a0:	d00a      	beq.n	800a3b8 <prvInitialiseNewTask+0x58>
	__asm volatile
 800a3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3a6:	f383 8811 	msr	BASEPRI, r3
 800a3aa:	f3bf 8f6f 	isb	sy
 800a3ae:	f3bf 8f4f 	dsb	sy
 800a3b2:	617b      	str	r3, [r7, #20]
}
 800a3b4:	bf00      	nop
 800a3b6:	e7fe      	b.n	800a3b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800a3b8:	68bb      	ldr	r3, [r7, #8]
 800a3ba:	2b00      	cmp	r3, #0
 800a3bc:	d01f      	beq.n	800a3fe <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3be:	2300      	movs	r3, #0
 800a3c0:	61fb      	str	r3, [r7, #28]
 800a3c2:	e012      	b.n	800a3ea <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800a3c4:	68ba      	ldr	r2, [r7, #8]
 800a3c6:	69fb      	ldr	r3, [r7, #28]
 800a3c8:	4413      	add	r3, r2
 800a3ca:	7819      	ldrb	r1, [r3, #0]
 800a3cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a3ce:	69fb      	ldr	r3, [r7, #28]
 800a3d0:	4413      	add	r3, r2
 800a3d2:	3334      	adds	r3, #52	; 0x34
 800a3d4:	460a      	mov	r2, r1
 800a3d6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800a3d8:	68ba      	ldr	r2, [r7, #8]
 800a3da:	69fb      	ldr	r3, [r7, #28]
 800a3dc:	4413      	add	r3, r2
 800a3de:	781b      	ldrb	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d006      	beq.n	800a3f2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800a3e4:	69fb      	ldr	r3, [r7, #28]
 800a3e6:	3301      	adds	r3, #1
 800a3e8:	61fb      	str	r3, [r7, #28]
 800a3ea:	69fb      	ldr	r3, [r7, #28]
 800a3ec:	2b0f      	cmp	r3, #15
 800a3ee:	d9e9      	bls.n	800a3c4 <prvInitialiseNewTask+0x64>
 800a3f0:	e000      	b.n	800a3f4 <prvInitialiseNewTask+0x94>
			{
				break;
 800a3f2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800a3f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a3f6:	2200      	movs	r2, #0
 800a3f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800a3fc:	e003      	b.n	800a406 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800a3fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a400:	2200      	movs	r2, #0
 800a402:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800a406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a408:	2b37      	cmp	r3, #55	; 0x37
 800a40a:	d901      	bls.n	800a410 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800a40c:	2337      	movs	r3, #55	; 0x37
 800a40e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800a410:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a412:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a414:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800a416:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a418:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800a41a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800a41c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a41e:	2200      	movs	r2, #0
 800a420:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800a422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a424:	3304      	adds	r3, #4
 800a426:	4618      	mov	r0, r3
 800a428:	f7fe ff64 	bl	80092f4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800a42c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a42e:	3318      	adds	r3, #24
 800a430:	4618      	mov	r0, r3
 800a432:	f7fe ff5f 	bl	80092f4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800a436:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a438:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a43a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a43c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a43e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a444:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800a446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a448:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a44a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800a44c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a44e:	2200      	movs	r2, #0
 800a450:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800a454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a456:	2200      	movs	r2, #0
 800a458:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800a45c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a45e:	3354      	adds	r3, #84	; 0x54
 800a460:	2260      	movs	r2, #96	; 0x60
 800a462:	2100      	movs	r1, #0
 800a464:	4618      	mov	r0, r3
 800a466:	f001 ff4b 	bl	800c300 <memset>
 800a46a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a46c:	4a0c      	ldr	r2, [pc, #48]	; (800a4a0 <prvInitialiseNewTask+0x140>)
 800a46e:	659a      	str	r2, [r3, #88]	; 0x58
 800a470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a472:	4a0c      	ldr	r2, [pc, #48]	; (800a4a4 <prvInitialiseNewTask+0x144>)
 800a474:	65da      	str	r2, [r3, #92]	; 0x5c
 800a476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a478:	4a0b      	ldr	r2, [pc, #44]	; (800a4a8 <prvInitialiseNewTask+0x148>)
 800a47a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800a47c:	683a      	ldr	r2, [r7, #0]
 800a47e:	68f9      	ldr	r1, [r7, #12]
 800a480:	69b8      	ldr	r0, [r7, #24]
 800a482:	f001 facd 	bl	800ba20 <pxPortInitialiseStack>
 800a486:	4602      	mov	r2, r0
 800a488:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a48a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800a48c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a48e:	2b00      	cmp	r3, #0
 800a490:	d002      	beq.n	800a498 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800a492:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a494:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a496:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a498:	bf00      	nop
 800a49a:	3720      	adds	r7, #32
 800a49c:	46bd      	mov	sp, r7
 800a49e:	bd80      	pop	{r7, pc}
 800a4a0:	0800e970 	.word	0x0800e970
 800a4a4:	0800e990 	.word	0x0800e990
 800a4a8:	0800e950 	.word	0x0800e950

0800a4ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800a4ac:	b580      	push	{r7, lr}
 800a4ae:	b082      	sub	sp, #8
 800a4b0:	af00      	add	r7, sp, #0
 800a4b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800a4b4:	f001 fbde 	bl	800bc74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800a4b8:	4b2d      	ldr	r3, [pc, #180]	; (800a570 <prvAddNewTaskToReadyList+0xc4>)
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	3301      	adds	r3, #1
 800a4be:	4a2c      	ldr	r2, [pc, #176]	; (800a570 <prvAddNewTaskToReadyList+0xc4>)
 800a4c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800a4c2:	4b2c      	ldr	r3, [pc, #176]	; (800a574 <prvAddNewTaskToReadyList+0xc8>)
 800a4c4:	681b      	ldr	r3, [r3, #0]
 800a4c6:	2b00      	cmp	r3, #0
 800a4c8:	d109      	bne.n	800a4de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800a4ca:	4a2a      	ldr	r2, [pc, #168]	; (800a574 <prvAddNewTaskToReadyList+0xc8>)
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800a4d0:	4b27      	ldr	r3, [pc, #156]	; (800a570 <prvAddNewTaskToReadyList+0xc4>)
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	2b01      	cmp	r3, #1
 800a4d6:	d110      	bne.n	800a4fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800a4d8:	f000 fca4 	bl	800ae24 <prvInitialiseTaskLists>
 800a4dc:	e00d      	b.n	800a4fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800a4de:	4b26      	ldr	r3, [pc, #152]	; (800a578 <prvAddNewTaskToReadyList+0xcc>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	2b00      	cmp	r3, #0
 800a4e4:	d109      	bne.n	800a4fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800a4e6:	4b23      	ldr	r3, [pc, #140]	; (800a574 <prvAddNewTaskToReadyList+0xc8>)
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a4f0:	429a      	cmp	r2, r3
 800a4f2:	d802      	bhi.n	800a4fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800a4f4:	4a1f      	ldr	r2, [pc, #124]	; (800a574 <prvAddNewTaskToReadyList+0xc8>)
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800a4fa:	4b20      	ldr	r3, [pc, #128]	; (800a57c <prvAddNewTaskToReadyList+0xd0>)
 800a4fc:	681b      	ldr	r3, [r3, #0]
 800a4fe:	3301      	adds	r3, #1
 800a500:	4a1e      	ldr	r2, [pc, #120]	; (800a57c <prvAddNewTaskToReadyList+0xd0>)
 800a502:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800a504:	4b1d      	ldr	r3, [pc, #116]	; (800a57c <prvAddNewTaskToReadyList+0xd0>)
 800a506:	681a      	ldr	r2, [r3, #0]
 800a508:	687b      	ldr	r3, [r7, #4]
 800a50a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a510:	4b1b      	ldr	r3, [pc, #108]	; (800a580 <prvAddNewTaskToReadyList+0xd4>)
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	429a      	cmp	r2, r3
 800a516:	d903      	bls.n	800a520 <prvAddNewTaskToReadyList+0x74>
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a51c:	4a18      	ldr	r2, [pc, #96]	; (800a580 <prvAddNewTaskToReadyList+0xd4>)
 800a51e:	6013      	str	r3, [r2, #0]
 800a520:	687b      	ldr	r3, [r7, #4]
 800a522:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a524:	4613      	mov	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4413      	add	r3, r2
 800a52a:	009b      	lsls	r3, r3, #2
 800a52c:	4a15      	ldr	r2, [pc, #84]	; (800a584 <prvAddNewTaskToReadyList+0xd8>)
 800a52e:	441a      	add	r2, r3
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	3304      	adds	r3, #4
 800a534:	4619      	mov	r1, r3
 800a536:	4610      	mov	r0, r2
 800a538:	f7fe fee9 	bl	800930e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800a53c:	f001 fbca 	bl	800bcd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800a540:	4b0d      	ldr	r3, [pc, #52]	; (800a578 <prvAddNewTaskToReadyList+0xcc>)
 800a542:	681b      	ldr	r3, [r3, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00e      	beq.n	800a566 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800a548:	4b0a      	ldr	r3, [pc, #40]	; (800a574 <prvAddNewTaskToReadyList+0xc8>)
 800a54a:	681b      	ldr	r3, [r3, #0]
 800a54c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a54e:	687b      	ldr	r3, [r7, #4]
 800a550:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a552:	429a      	cmp	r2, r3
 800a554:	d207      	bcs.n	800a566 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800a556:	4b0c      	ldr	r3, [pc, #48]	; (800a588 <prvAddNewTaskToReadyList+0xdc>)
 800a558:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a55c:	601a      	str	r2, [r3, #0]
 800a55e:	f3bf 8f4f 	dsb	sy
 800a562:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800a566:	bf00      	nop
 800a568:	3708      	adds	r7, #8
 800a56a:	46bd      	mov	sp, r7
 800a56c:	bd80      	pop	{r7, pc}
 800a56e:	bf00      	nop
 800a570:	2000100c 	.word	0x2000100c
 800a574:	20000b38 	.word	0x20000b38
 800a578:	20001018 	.word	0x20001018
 800a57c:	20001028 	.word	0x20001028
 800a580:	20001014 	.word	0x20001014
 800a584:	20000b3c 	.word	0x20000b3c
 800a588:	e000ed04 	.word	0xe000ed04

0800a58c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800a58c:	b580      	push	{r7, lr}
 800a58e:	b08a      	sub	sp, #40	; 0x28
 800a590:	af00      	add	r7, sp, #0
 800a592:	6078      	str	r0, [r7, #4]
 800a594:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800a596:	2300      	movs	r3, #0
 800a598:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	2b00      	cmp	r3, #0
 800a59e:	d10a      	bne.n	800a5b6 <vTaskDelayUntil+0x2a>
	__asm volatile
 800a5a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5a4:	f383 8811 	msr	BASEPRI, r3
 800a5a8:	f3bf 8f6f 	isb	sy
 800a5ac:	f3bf 8f4f 	dsb	sy
 800a5b0:	617b      	str	r3, [r7, #20]
}
 800a5b2:	bf00      	nop
 800a5b4:	e7fe      	b.n	800a5b4 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800a5b6:	683b      	ldr	r3, [r7, #0]
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d10a      	bne.n	800a5d2 <vTaskDelayUntil+0x46>
	__asm volatile
 800a5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5c0:	f383 8811 	msr	BASEPRI, r3
 800a5c4:	f3bf 8f6f 	isb	sy
 800a5c8:	f3bf 8f4f 	dsb	sy
 800a5cc:	613b      	str	r3, [r7, #16]
}
 800a5ce:	bf00      	nop
 800a5d0:	e7fe      	b.n	800a5d0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800a5d2:	4b2a      	ldr	r3, [pc, #168]	; (800a67c <vTaskDelayUntil+0xf0>)
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	2b00      	cmp	r3, #0
 800a5d8:	d00a      	beq.n	800a5f0 <vTaskDelayUntil+0x64>
	__asm volatile
 800a5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a5de:	f383 8811 	msr	BASEPRI, r3
 800a5e2:	f3bf 8f6f 	isb	sy
 800a5e6:	f3bf 8f4f 	dsb	sy
 800a5ea:	60fb      	str	r3, [r7, #12]
}
 800a5ec:	bf00      	nop
 800a5ee:	e7fe      	b.n	800a5ee <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800a5f0:	f000 f8ee 	bl	800a7d0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800a5f4:	4b22      	ldr	r3, [pc, #136]	; (800a680 <vTaskDelayUntil+0xf4>)
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	683a      	ldr	r2, [r7, #0]
 800a600:	4413      	add	r3, r2
 800a602:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	6a3a      	ldr	r2, [r7, #32]
 800a60a:	429a      	cmp	r2, r3
 800a60c:	d20b      	bcs.n	800a626 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	69fa      	ldr	r2, [r7, #28]
 800a614:	429a      	cmp	r2, r3
 800a616:	d211      	bcs.n	800a63c <vTaskDelayUntil+0xb0>
 800a618:	69fa      	ldr	r2, [r7, #28]
 800a61a:	6a3b      	ldr	r3, [r7, #32]
 800a61c:	429a      	cmp	r2, r3
 800a61e:	d90d      	bls.n	800a63c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a620:	2301      	movs	r3, #1
 800a622:	627b      	str	r3, [r7, #36]	; 0x24
 800a624:	e00a      	b.n	800a63c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	69fa      	ldr	r2, [r7, #28]
 800a62c:	429a      	cmp	r2, r3
 800a62e:	d303      	bcc.n	800a638 <vTaskDelayUntil+0xac>
 800a630:	69fa      	ldr	r2, [r7, #28]
 800a632:	6a3b      	ldr	r3, [r7, #32]
 800a634:	429a      	cmp	r2, r3
 800a636:	d901      	bls.n	800a63c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800a638:	2301      	movs	r3, #1
 800a63a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800a63c:	687b      	ldr	r3, [r7, #4]
 800a63e:	69fa      	ldr	r2, [r7, #28]
 800a640:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800a642:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a644:	2b00      	cmp	r3, #0
 800a646:	d006      	beq.n	800a656 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800a648:	69fa      	ldr	r2, [r7, #28]
 800a64a:	6a3b      	ldr	r3, [r7, #32]
 800a64c:	1ad3      	subs	r3, r2, r3
 800a64e:	2100      	movs	r1, #0
 800a650:	4618      	mov	r0, r3
 800a652:	f000 fe43 	bl	800b2dc <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800a656:	f000 f8c9 	bl	800a7ec <xTaskResumeAll>
 800a65a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a65c:	69bb      	ldr	r3, [r7, #24]
 800a65e:	2b00      	cmp	r3, #0
 800a660:	d107      	bne.n	800a672 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800a662:	4b08      	ldr	r3, [pc, #32]	; (800a684 <vTaskDelayUntil+0xf8>)
 800a664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a668:	601a      	str	r2, [r3, #0]
 800a66a:	f3bf 8f4f 	dsb	sy
 800a66e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a672:	bf00      	nop
 800a674:	3728      	adds	r7, #40	; 0x28
 800a676:	46bd      	mov	sp, r7
 800a678:	bd80      	pop	{r7, pc}
 800a67a:	bf00      	nop
 800a67c:	20001034 	.word	0x20001034
 800a680:	20001010 	.word	0x20001010
 800a684:	e000ed04 	.word	0xe000ed04

0800a688 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800a690:	2300      	movs	r3, #0
 800a692:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	2b00      	cmp	r3, #0
 800a698:	d017      	beq.n	800a6ca <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800a69a:	4b13      	ldr	r3, [pc, #76]	; (800a6e8 <vTaskDelay+0x60>)
 800a69c:	681b      	ldr	r3, [r3, #0]
 800a69e:	2b00      	cmp	r3, #0
 800a6a0:	d00a      	beq.n	800a6b8 <vTaskDelay+0x30>
	__asm volatile
 800a6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a6:	f383 8811 	msr	BASEPRI, r3
 800a6aa:	f3bf 8f6f 	isb	sy
 800a6ae:	f3bf 8f4f 	dsb	sy
 800a6b2:	60bb      	str	r3, [r7, #8]
}
 800a6b4:	bf00      	nop
 800a6b6:	e7fe      	b.n	800a6b6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800a6b8:	f000 f88a 	bl	800a7d0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800a6bc:	2100      	movs	r1, #0
 800a6be:	6878      	ldr	r0, [r7, #4]
 800a6c0:	f000 fe0c 	bl	800b2dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800a6c4:	f000 f892 	bl	800a7ec <xTaskResumeAll>
 800a6c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	2b00      	cmp	r3, #0
 800a6ce:	d107      	bne.n	800a6e0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800a6d0:	4b06      	ldr	r3, [pc, #24]	; (800a6ec <vTaskDelay+0x64>)
 800a6d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a6d6:	601a      	str	r2, [r3, #0]
 800a6d8:	f3bf 8f4f 	dsb	sy
 800a6dc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800a6e0:	bf00      	nop
 800a6e2:	3710      	adds	r7, #16
 800a6e4:	46bd      	mov	sp, r7
 800a6e6:	bd80      	pop	{r7, pc}
 800a6e8:	20001034 	.word	0x20001034
 800a6ec:	e000ed04 	.word	0xe000ed04

0800a6f0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800a6f0:	b580      	push	{r7, lr}
 800a6f2:	b08a      	sub	sp, #40	; 0x28
 800a6f4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800a6f6:	2300      	movs	r3, #0
 800a6f8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800a6fe:	463a      	mov	r2, r7
 800a700:	1d39      	adds	r1, r7, #4
 800a702:	f107 0308 	add.w	r3, r7, #8
 800a706:	4618      	mov	r0, r3
 800a708:	f7fe fda0 	bl	800924c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800a70c:	6839      	ldr	r1, [r7, #0]
 800a70e:	687b      	ldr	r3, [r7, #4]
 800a710:	68ba      	ldr	r2, [r7, #8]
 800a712:	9202      	str	r2, [sp, #8]
 800a714:	9301      	str	r3, [sp, #4]
 800a716:	2300      	movs	r3, #0
 800a718:	9300      	str	r3, [sp, #0]
 800a71a:	2300      	movs	r3, #0
 800a71c:	460a      	mov	r2, r1
 800a71e:	4924      	ldr	r1, [pc, #144]	; (800a7b0 <vTaskStartScheduler+0xc0>)
 800a720:	4824      	ldr	r0, [pc, #144]	; (800a7b4 <vTaskStartScheduler+0xc4>)
 800a722:	f7ff fd7b 	bl	800a21c <xTaskCreateStatic>
 800a726:	4603      	mov	r3, r0
 800a728:	4a23      	ldr	r2, [pc, #140]	; (800a7b8 <vTaskStartScheduler+0xc8>)
 800a72a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800a72c:	4b22      	ldr	r3, [pc, #136]	; (800a7b8 <vTaskStartScheduler+0xc8>)
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	2b00      	cmp	r3, #0
 800a732:	d002      	beq.n	800a73a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800a734:	2301      	movs	r3, #1
 800a736:	617b      	str	r3, [r7, #20]
 800a738:	e001      	b.n	800a73e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800a73a:	2300      	movs	r3, #0
 800a73c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800a73e:	697b      	ldr	r3, [r7, #20]
 800a740:	2b01      	cmp	r3, #1
 800a742:	d102      	bne.n	800a74a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800a744:	f000 fe1e 	bl	800b384 <xTimerCreateTimerTask>
 800a748:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800a74a:	697b      	ldr	r3, [r7, #20]
 800a74c:	2b01      	cmp	r3, #1
 800a74e:	d11b      	bne.n	800a788 <vTaskStartScheduler+0x98>
	__asm volatile
 800a750:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a754:	f383 8811 	msr	BASEPRI, r3
 800a758:	f3bf 8f6f 	isb	sy
 800a75c:	f3bf 8f4f 	dsb	sy
 800a760:	613b      	str	r3, [r7, #16]
}
 800a762:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800a764:	4b15      	ldr	r3, [pc, #84]	; (800a7bc <vTaskStartScheduler+0xcc>)
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	3354      	adds	r3, #84	; 0x54
 800a76a:	4a15      	ldr	r2, [pc, #84]	; (800a7c0 <vTaskStartScheduler+0xd0>)
 800a76c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800a76e:	4b15      	ldr	r3, [pc, #84]	; (800a7c4 <vTaskStartScheduler+0xd4>)
 800a770:	f04f 32ff 	mov.w	r2, #4294967295
 800a774:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800a776:	4b14      	ldr	r3, [pc, #80]	; (800a7c8 <vTaskStartScheduler+0xd8>)
 800a778:	2201      	movs	r2, #1
 800a77a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800a77c:	4b13      	ldr	r3, [pc, #76]	; (800a7cc <vTaskStartScheduler+0xdc>)
 800a77e:	2200      	movs	r2, #0
 800a780:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800a782:	f001 f9d5 	bl	800bb30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800a786:	e00e      	b.n	800a7a6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800a788:	697b      	ldr	r3, [r7, #20]
 800a78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a78e:	d10a      	bne.n	800a7a6 <vTaskStartScheduler+0xb6>
	__asm volatile
 800a790:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a794:	f383 8811 	msr	BASEPRI, r3
 800a798:	f3bf 8f6f 	isb	sy
 800a79c:	f3bf 8f4f 	dsb	sy
 800a7a0:	60fb      	str	r3, [r7, #12]
}
 800a7a2:	bf00      	nop
 800a7a4:	e7fe      	b.n	800a7a4 <vTaskStartScheduler+0xb4>
}
 800a7a6:	bf00      	nop
 800a7a8:	3718      	adds	r7, #24
 800a7aa:	46bd      	mov	sp, r7
 800a7ac:	bd80      	pop	{r7, pc}
 800a7ae:	bf00      	nop
 800a7b0:	0800e364 	.word	0x0800e364
 800a7b4:	0800adf5 	.word	0x0800adf5
 800a7b8:	20001030 	.word	0x20001030
 800a7bc:	20000b38 	.word	0x20000b38
 800a7c0:	20000044 	.word	0x20000044
 800a7c4:	2000102c 	.word	0x2000102c
 800a7c8:	20001018 	.word	0x20001018
 800a7cc:	20001010 	.word	0x20001010

0800a7d0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800a7d0:	b480      	push	{r7}
 800a7d2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a7d4:	4b04      	ldr	r3, [pc, #16]	; (800a7e8 <vTaskSuspendAll+0x18>)
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	3301      	adds	r3, #1
 800a7da:	4a03      	ldr	r2, [pc, #12]	; (800a7e8 <vTaskSuspendAll+0x18>)
 800a7dc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a7de:	bf00      	nop
 800a7e0:	46bd      	mov	sp, r7
 800a7e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7e6:	4770      	bx	lr
 800a7e8:	20001034 	.word	0x20001034

0800a7ec <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a7ec:	b580      	push	{r7, lr}
 800a7ee:	b084      	sub	sp, #16
 800a7f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a7f6:	2300      	movs	r3, #0
 800a7f8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a7fa:	4b42      	ldr	r3, [pc, #264]	; (800a904 <xTaskResumeAll+0x118>)
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	d10a      	bne.n	800a818 <xTaskResumeAll+0x2c>
	__asm volatile
 800a802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a806:	f383 8811 	msr	BASEPRI, r3
 800a80a:	f3bf 8f6f 	isb	sy
 800a80e:	f3bf 8f4f 	dsb	sy
 800a812:	603b      	str	r3, [r7, #0]
}
 800a814:	bf00      	nop
 800a816:	e7fe      	b.n	800a816 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a818:	f001 fa2c 	bl	800bc74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a81c:	4b39      	ldr	r3, [pc, #228]	; (800a904 <xTaskResumeAll+0x118>)
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	3b01      	subs	r3, #1
 800a822:	4a38      	ldr	r2, [pc, #224]	; (800a904 <xTaskResumeAll+0x118>)
 800a824:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a826:	4b37      	ldr	r3, [pc, #220]	; (800a904 <xTaskResumeAll+0x118>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	2b00      	cmp	r3, #0
 800a82c:	d162      	bne.n	800a8f4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a82e:	4b36      	ldr	r3, [pc, #216]	; (800a908 <xTaskResumeAll+0x11c>)
 800a830:	681b      	ldr	r3, [r3, #0]
 800a832:	2b00      	cmp	r3, #0
 800a834:	d05e      	beq.n	800a8f4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a836:	e02f      	b.n	800a898 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a838:	4b34      	ldr	r3, [pc, #208]	; (800a90c <xTaskResumeAll+0x120>)
 800a83a:	68db      	ldr	r3, [r3, #12]
 800a83c:	68db      	ldr	r3, [r3, #12]
 800a83e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a840:	68fb      	ldr	r3, [r7, #12]
 800a842:	3318      	adds	r3, #24
 800a844:	4618      	mov	r0, r3
 800a846:	f7fe fdbf 	bl	80093c8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a84a:	68fb      	ldr	r3, [r7, #12]
 800a84c:	3304      	adds	r3, #4
 800a84e:	4618      	mov	r0, r3
 800a850:	f7fe fdba 	bl	80093c8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a858:	4b2d      	ldr	r3, [pc, #180]	; (800a910 <xTaskResumeAll+0x124>)
 800a85a:	681b      	ldr	r3, [r3, #0]
 800a85c:	429a      	cmp	r2, r3
 800a85e:	d903      	bls.n	800a868 <xTaskResumeAll+0x7c>
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a864:	4a2a      	ldr	r2, [pc, #168]	; (800a910 <xTaskResumeAll+0x124>)
 800a866:	6013      	str	r3, [r2, #0]
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a86c:	4613      	mov	r3, r2
 800a86e:	009b      	lsls	r3, r3, #2
 800a870:	4413      	add	r3, r2
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	4a27      	ldr	r2, [pc, #156]	; (800a914 <xTaskResumeAll+0x128>)
 800a876:	441a      	add	r2, r3
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	3304      	adds	r3, #4
 800a87c:	4619      	mov	r1, r3
 800a87e:	4610      	mov	r0, r2
 800a880:	f7fe fd45 	bl	800930e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a884:	68fb      	ldr	r3, [r7, #12]
 800a886:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a888:	4b23      	ldr	r3, [pc, #140]	; (800a918 <xTaskResumeAll+0x12c>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a88e:	429a      	cmp	r2, r3
 800a890:	d302      	bcc.n	800a898 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a892:	4b22      	ldr	r3, [pc, #136]	; (800a91c <xTaskResumeAll+0x130>)
 800a894:	2201      	movs	r2, #1
 800a896:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a898:	4b1c      	ldr	r3, [pc, #112]	; (800a90c <xTaskResumeAll+0x120>)
 800a89a:	681b      	ldr	r3, [r3, #0]
 800a89c:	2b00      	cmp	r3, #0
 800a89e:	d1cb      	bne.n	800a838 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a8a0:	68fb      	ldr	r3, [r7, #12]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d001      	beq.n	800a8aa <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a8a6:	f000 fb5f 	bl	800af68 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a8aa:	4b1d      	ldr	r3, [pc, #116]	; (800a920 <xTaskResumeAll+0x134>)
 800a8ac:	681b      	ldr	r3, [r3, #0]
 800a8ae:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	d010      	beq.n	800a8d8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a8b6:	f000 f847 	bl	800a948 <xTaskIncrementTick>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d002      	beq.n	800a8c6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a8c0:	4b16      	ldr	r3, [pc, #88]	; (800a91c <xTaskResumeAll+0x130>)
 800a8c2:	2201      	movs	r2, #1
 800a8c4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	3b01      	subs	r3, #1
 800a8ca:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a8cc:	687b      	ldr	r3, [r7, #4]
 800a8ce:	2b00      	cmp	r3, #0
 800a8d0:	d1f1      	bne.n	800a8b6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a8d2:	4b13      	ldr	r3, [pc, #76]	; (800a920 <xTaskResumeAll+0x134>)
 800a8d4:	2200      	movs	r2, #0
 800a8d6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a8d8:	4b10      	ldr	r3, [pc, #64]	; (800a91c <xTaskResumeAll+0x130>)
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	2b00      	cmp	r3, #0
 800a8de:	d009      	beq.n	800a8f4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a8e0:	2301      	movs	r3, #1
 800a8e2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a8e4:	4b0f      	ldr	r3, [pc, #60]	; (800a924 <xTaskResumeAll+0x138>)
 800a8e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a8ea:	601a      	str	r2, [r3, #0]
 800a8ec:	f3bf 8f4f 	dsb	sy
 800a8f0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a8f4:	f001 f9ee 	bl	800bcd4 <vPortExitCritical>

	return xAlreadyYielded;
 800a8f8:	68bb      	ldr	r3, [r7, #8]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	20001034 	.word	0x20001034
 800a908:	2000100c 	.word	0x2000100c
 800a90c:	20000fcc 	.word	0x20000fcc
 800a910:	20001014 	.word	0x20001014
 800a914:	20000b3c 	.word	0x20000b3c
 800a918:	20000b38 	.word	0x20000b38
 800a91c:	20001020 	.word	0x20001020
 800a920:	2000101c 	.word	0x2000101c
 800a924:	e000ed04 	.word	0xe000ed04

0800a928 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800a928:	b480      	push	{r7}
 800a92a:	b083      	sub	sp, #12
 800a92c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800a92e:	4b05      	ldr	r3, [pc, #20]	; (800a944 <xTaskGetTickCount+0x1c>)
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800a934:	687b      	ldr	r3, [r7, #4]
}
 800a936:	4618      	mov	r0, r3
 800a938:	370c      	adds	r7, #12
 800a93a:	46bd      	mov	sp, r7
 800a93c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a940:	4770      	bx	lr
 800a942:	bf00      	nop
 800a944:	20001010 	.word	0x20001010

0800a948 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a948:	b580      	push	{r7, lr}
 800a94a:	b086      	sub	sp, #24
 800a94c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a94e:	2300      	movs	r3, #0
 800a950:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a952:	4b4f      	ldr	r3, [pc, #316]	; (800aa90 <xTaskIncrementTick+0x148>)
 800a954:	681b      	ldr	r3, [r3, #0]
 800a956:	2b00      	cmp	r3, #0
 800a958:	f040 808f 	bne.w	800aa7a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a95c:	4b4d      	ldr	r3, [pc, #308]	; (800aa94 <xTaskIncrementTick+0x14c>)
 800a95e:	681b      	ldr	r3, [r3, #0]
 800a960:	3301      	adds	r3, #1
 800a962:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a964:	4a4b      	ldr	r2, [pc, #300]	; (800aa94 <xTaskIncrementTick+0x14c>)
 800a966:	693b      	ldr	r3, [r7, #16]
 800a968:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a96a:	693b      	ldr	r3, [r7, #16]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d120      	bne.n	800a9b2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800a970:	4b49      	ldr	r3, [pc, #292]	; (800aa98 <xTaskIncrementTick+0x150>)
 800a972:	681b      	ldr	r3, [r3, #0]
 800a974:	681b      	ldr	r3, [r3, #0]
 800a976:	2b00      	cmp	r3, #0
 800a978:	d00a      	beq.n	800a990 <xTaskIncrementTick+0x48>
	__asm volatile
 800a97a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a97e:	f383 8811 	msr	BASEPRI, r3
 800a982:	f3bf 8f6f 	isb	sy
 800a986:	f3bf 8f4f 	dsb	sy
 800a98a:	603b      	str	r3, [r7, #0]
}
 800a98c:	bf00      	nop
 800a98e:	e7fe      	b.n	800a98e <xTaskIncrementTick+0x46>
 800a990:	4b41      	ldr	r3, [pc, #260]	; (800aa98 <xTaskIncrementTick+0x150>)
 800a992:	681b      	ldr	r3, [r3, #0]
 800a994:	60fb      	str	r3, [r7, #12]
 800a996:	4b41      	ldr	r3, [pc, #260]	; (800aa9c <xTaskIncrementTick+0x154>)
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	4a3f      	ldr	r2, [pc, #252]	; (800aa98 <xTaskIncrementTick+0x150>)
 800a99c:	6013      	str	r3, [r2, #0]
 800a99e:	4a3f      	ldr	r2, [pc, #252]	; (800aa9c <xTaskIncrementTick+0x154>)
 800a9a0:	68fb      	ldr	r3, [r7, #12]
 800a9a2:	6013      	str	r3, [r2, #0]
 800a9a4:	4b3e      	ldr	r3, [pc, #248]	; (800aaa0 <xTaskIncrementTick+0x158>)
 800a9a6:	681b      	ldr	r3, [r3, #0]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	4a3d      	ldr	r2, [pc, #244]	; (800aaa0 <xTaskIncrementTick+0x158>)
 800a9ac:	6013      	str	r3, [r2, #0]
 800a9ae:	f000 fadb 	bl	800af68 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a9b2:	4b3c      	ldr	r3, [pc, #240]	; (800aaa4 <xTaskIncrementTick+0x15c>)
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	693a      	ldr	r2, [r7, #16]
 800a9b8:	429a      	cmp	r2, r3
 800a9ba:	d349      	bcc.n	800aa50 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a9bc:	4b36      	ldr	r3, [pc, #216]	; (800aa98 <xTaskIncrementTick+0x150>)
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	681b      	ldr	r3, [r3, #0]
 800a9c2:	2b00      	cmp	r3, #0
 800a9c4:	d104      	bne.n	800a9d0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a9c6:	4b37      	ldr	r3, [pc, #220]	; (800aaa4 <xTaskIncrementTick+0x15c>)
 800a9c8:	f04f 32ff 	mov.w	r2, #4294967295
 800a9cc:	601a      	str	r2, [r3, #0]
					break;
 800a9ce:	e03f      	b.n	800aa50 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a9d0:	4b31      	ldr	r3, [pc, #196]	; (800aa98 <xTaskIncrementTick+0x150>)
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	68db      	ldr	r3, [r3, #12]
 800a9d6:	68db      	ldr	r3, [r3, #12]
 800a9d8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a9da:	68bb      	ldr	r3, [r7, #8]
 800a9dc:	685b      	ldr	r3, [r3, #4]
 800a9de:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a9e0:	693a      	ldr	r2, [r7, #16]
 800a9e2:	687b      	ldr	r3, [r7, #4]
 800a9e4:	429a      	cmp	r2, r3
 800a9e6:	d203      	bcs.n	800a9f0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a9e8:	4a2e      	ldr	r2, [pc, #184]	; (800aaa4 <xTaskIncrementTick+0x15c>)
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a9ee:	e02f      	b.n	800aa50 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a9f0:	68bb      	ldr	r3, [r7, #8]
 800a9f2:	3304      	adds	r3, #4
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	f7fe fce7 	bl	80093c8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a9fa:	68bb      	ldr	r3, [r7, #8]
 800a9fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a9fe:	2b00      	cmp	r3, #0
 800aa00:	d004      	beq.n	800aa0c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800aa02:	68bb      	ldr	r3, [r7, #8]
 800aa04:	3318      	adds	r3, #24
 800aa06:	4618      	mov	r0, r3
 800aa08:	f7fe fcde 	bl	80093c8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800aa0c:	68bb      	ldr	r3, [r7, #8]
 800aa0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa10:	4b25      	ldr	r3, [pc, #148]	; (800aaa8 <xTaskIncrementTick+0x160>)
 800aa12:	681b      	ldr	r3, [r3, #0]
 800aa14:	429a      	cmp	r2, r3
 800aa16:	d903      	bls.n	800aa20 <xTaskIncrementTick+0xd8>
 800aa18:	68bb      	ldr	r3, [r7, #8]
 800aa1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa1c:	4a22      	ldr	r2, [pc, #136]	; (800aaa8 <xTaskIncrementTick+0x160>)
 800aa1e:	6013      	str	r3, [r2, #0]
 800aa20:	68bb      	ldr	r3, [r7, #8]
 800aa22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa24:	4613      	mov	r3, r2
 800aa26:	009b      	lsls	r3, r3, #2
 800aa28:	4413      	add	r3, r2
 800aa2a:	009b      	lsls	r3, r3, #2
 800aa2c:	4a1f      	ldr	r2, [pc, #124]	; (800aaac <xTaskIncrementTick+0x164>)
 800aa2e:	441a      	add	r2, r3
 800aa30:	68bb      	ldr	r3, [r7, #8]
 800aa32:	3304      	adds	r3, #4
 800aa34:	4619      	mov	r1, r3
 800aa36:	4610      	mov	r0, r2
 800aa38:	f7fe fc69 	bl	800930e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800aa3c:	68bb      	ldr	r3, [r7, #8]
 800aa3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa40:	4b1b      	ldr	r3, [pc, #108]	; (800aab0 <xTaskIncrementTick+0x168>)
 800aa42:	681b      	ldr	r3, [r3, #0]
 800aa44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800aa46:	429a      	cmp	r2, r3
 800aa48:	d3b8      	bcc.n	800a9bc <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800aa4a:	2301      	movs	r3, #1
 800aa4c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800aa4e:	e7b5      	b.n	800a9bc <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800aa50:	4b17      	ldr	r3, [pc, #92]	; (800aab0 <xTaskIncrementTick+0x168>)
 800aa52:	681b      	ldr	r3, [r3, #0]
 800aa54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa56:	4915      	ldr	r1, [pc, #84]	; (800aaac <xTaskIncrementTick+0x164>)
 800aa58:	4613      	mov	r3, r2
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	4413      	add	r3, r2
 800aa5e:	009b      	lsls	r3, r3, #2
 800aa60:	440b      	add	r3, r1
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	2b01      	cmp	r3, #1
 800aa66:	d901      	bls.n	800aa6c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800aa68:	2301      	movs	r3, #1
 800aa6a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800aa6c:	4b11      	ldr	r3, [pc, #68]	; (800aab4 <xTaskIncrementTick+0x16c>)
 800aa6e:	681b      	ldr	r3, [r3, #0]
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d007      	beq.n	800aa84 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800aa74:	2301      	movs	r3, #1
 800aa76:	617b      	str	r3, [r7, #20]
 800aa78:	e004      	b.n	800aa84 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800aa7a:	4b0f      	ldr	r3, [pc, #60]	; (800aab8 <xTaskIncrementTick+0x170>)
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	3301      	adds	r3, #1
 800aa80:	4a0d      	ldr	r2, [pc, #52]	; (800aab8 <xTaskIncrementTick+0x170>)
 800aa82:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800aa84:	697b      	ldr	r3, [r7, #20]
}
 800aa86:	4618      	mov	r0, r3
 800aa88:	3718      	adds	r7, #24
 800aa8a:	46bd      	mov	sp, r7
 800aa8c:	bd80      	pop	{r7, pc}
 800aa8e:	bf00      	nop
 800aa90:	20001034 	.word	0x20001034
 800aa94:	20001010 	.word	0x20001010
 800aa98:	20000fc4 	.word	0x20000fc4
 800aa9c:	20000fc8 	.word	0x20000fc8
 800aaa0:	20001024 	.word	0x20001024
 800aaa4:	2000102c 	.word	0x2000102c
 800aaa8:	20001014 	.word	0x20001014
 800aaac:	20000b3c 	.word	0x20000b3c
 800aab0:	20000b38 	.word	0x20000b38
 800aab4:	20001020 	.word	0x20001020
 800aab8:	2000101c 	.word	0x2000101c

0800aabc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800aabc:	b480      	push	{r7}
 800aabe:	b085      	sub	sp, #20
 800aac0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800aac2:	4b2a      	ldr	r3, [pc, #168]	; (800ab6c <vTaskSwitchContext+0xb0>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	2b00      	cmp	r3, #0
 800aac8:	d003      	beq.n	800aad2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800aaca:	4b29      	ldr	r3, [pc, #164]	; (800ab70 <vTaskSwitchContext+0xb4>)
 800aacc:	2201      	movs	r2, #1
 800aace:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800aad0:	e046      	b.n	800ab60 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800aad2:	4b27      	ldr	r3, [pc, #156]	; (800ab70 <vTaskSwitchContext+0xb4>)
 800aad4:	2200      	movs	r2, #0
 800aad6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aad8:	4b26      	ldr	r3, [pc, #152]	; (800ab74 <vTaskSwitchContext+0xb8>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	60fb      	str	r3, [r7, #12]
 800aade:	e010      	b.n	800ab02 <vTaskSwitchContext+0x46>
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	2b00      	cmp	r3, #0
 800aae4:	d10a      	bne.n	800aafc <vTaskSwitchContext+0x40>
	__asm volatile
 800aae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aaea:	f383 8811 	msr	BASEPRI, r3
 800aaee:	f3bf 8f6f 	isb	sy
 800aaf2:	f3bf 8f4f 	dsb	sy
 800aaf6:	607b      	str	r3, [r7, #4]
}
 800aaf8:	bf00      	nop
 800aafa:	e7fe      	b.n	800aafa <vTaskSwitchContext+0x3e>
 800aafc:	68fb      	ldr	r3, [r7, #12]
 800aafe:	3b01      	subs	r3, #1
 800ab00:	60fb      	str	r3, [r7, #12]
 800ab02:	491d      	ldr	r1, [pc, #116]	; (800ab78 <vTaskSwitchContext+0xbc>)
 800ab04:	68fa      	ldr	r2, [r7, #12]
 800ab06:	4613      	mov	r3, r2
 800ab08:	009b      	lsls	r3, r3, #2
 800ab0a:	4413      	add	r3, r2
 800ab0c:	009b      	lsls	r3, r3, #2
 800ab0e:	440b      	add	r3, r1
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	2b00      	cmp	r3, #0
 800ab14:	d0e4      	beq.n	800aae0 <vTaskSwitchContext+0x24>
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	4613      	mov	r3, r2
 800ab1a:	009b      	lsls	r3, r3, #2
 800ab1c:	4413      	add	r3, r2
 800ab1e:	009b      	lsls	r3, r3, #2
 800ab20:	4a15      	ldr	r2, [pc, #84]	; (800ab78 <vTaskSwitchContext+0xbc>)
 800ab22:	4413      	add	r3, r2
 800ab24:	60bb      	str	r3, [r7, #8]
 800ab26:	68bb      	ldr	r3, [r7, #8]
 800ab28:	685b      	ldr	r3, [r3, #4]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	68bb      	ldr	r3, [r7, #8]
 800ab2e:	605a      	str	r2, [r3, #4]
 800ab30:	68bb      	ldr	r3, [r7, #8]
 800ab32:	685a      	ldr	r2, [r3, #4]
 800ab34:	68bb      	ldr	r3, [r7, #8]
 800ab36:	3308      	adds	r3, #8
 800ab38:	429a      	cmp	r2, r3
 800ab3a:	d104      	bne.n	800ab46 <vTaskSwitchContext+0x8a>
 800ab3c:	68bb      	ldr	r3, [r7, #8]
 800ab3e:	685b      	ldr	r3, [r3, #4]
 800ab40:	685a      	ldr	r2, [r3, #4]
 800ab42:	68bb      	ldr	r3, [r7, #8]
 800ab44:	605a      	str	r2, [r3, #4]
 800ab46:	68bb      	ldr	r3, [r7, #8]
 800ab48:	685b      	ldr	r3, [r3, #4]
 800ab4a:	68db      	ldr	r3, [r3, #12]
 800ab4c:	4a0b      	ldr	r2, [pc, #44]	; (800ab7c <vTaskSwitchContext+0xc0>)
 800ab4e:	6013      	str	r3, [r2, #0]
 800ab50:	4a08      	ldr	r2, [pc, #32]	; (800ab74 <vTaskSwitchContext+0xb8>)
 800ab52:	68fb      	ldr	r3, [r7, #12]
 800ab54:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800ab56:	4b09      	ldr	r3, [pc, #36]	; (800ab7c <vTaskSwitchContext+0xc0>)
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	3354      	adds	r3, #84	; 0x54
 800ab5c:	4a08      	ldr	r2, [pc, #32]	; (800ab80 <vTaskSwitchContext+0xc4>)
 800ab5e:	6013      	str	r3, [r2, #0]
}
 800ab60:	bf00      	nop
 800ab62:	3714      	adds	r7, #20
 800ab64:	46bd      	mov	sp, r7
 800ab66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab6a:	4770      	bx	lr
 800ab6c:	20001034 	.word	0x20001034
 800ab70:	20001020 	.word	0x20001020
 800ab74:	20001014 	.word	0x20001014
 800ab78:	20000b3c 	.word	0x20000b3c
 800ab7c:	20000b38 	.word	0x20000b38
 800ab80:	20000044 	.word	0x20000044

0800ab84 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
 800ab8c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ab8e:	687b      	ldr	r3, [r7, #4]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d10a      	bne.n	800abaa <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800ab94:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ab98:	f383 8811 	msr	BASEPRI, r3
 800ab9c:	f3bf 8f6f 	isb	sy
 800aba0:	f3bf 8f4f 	dsb	sy
 800aba4:	60fb      	str	r3, [r7, #12]
}
 800aba6:	bf00      	nop
 800aba8:	e7fe      	b.n	800aba8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abaa:	4b07      	ldr	r3, [pc, #28]	; (800abc8 <vTaskPlaceOnEventList+0x44>)
 800abac:	681b      	ldr	r3, [r3, #0]
 800abae:	3318      	adds	r3, #24
 800abb0:	4619      	mov	r1, r3
 800abb2:	6878      	ldr	r0, [r7, #4]
 800abb4:	f7fe fbcf 	bl	8009356 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800abb8:	2101      	movs	r1, #1
 800abba:	6838      	ldr	r0, [r7, #0]
 800abbc:	f000 fb8e 	bl	800b2dc <prvAddCurrentTaskToDelayedList>
}
 800abc0:	bf00      	nop
 800abc2:	3710      	adds	r7, #16
 800abc4:	46bd      	mov	sp, r7
 800abc6:	bd80      	pop	{r7, pc}
 800abc8:	20000b38 	.word	0x20000b38

0800abcc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800abcc:	b580      	push	{r7, lr}
 800abce:	b086      	sub	sp, #24
 800abd0:	af00      	add	r7, sp, #0
 800abd2:	60f8      	str	r0, [r7, #12]
 800abd4:	60b9      	str	r1, [r7, #8]
 800abd6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800abd8:	68fb      	ldr	r3, [r7, #12]
 800abda:	2b00      	cmp	r3, #0
 800abdc:	d10a      	bne.n	800abf4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800abde:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abe2:	f383 8811 	msr	BASEPRI, r3
 800abe6:	f3bf 8f6f 	isb	sy
 800abea:	f3bf 8f4f 	dsb	sy
 800abee:	617b      	str	r3, [r7, #20]
}
 800abf0:	bf00      	nop
 800abf2:	e7fe      	b.n	800abf2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800abf4:	4b0a      	ldr	r3, [pc, #40]	; (800ac20 <vTaskPlaceOnEventListRestricted+0x54>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	3318      	adds	r3, #24
 800abfa:	4619      	mov	r1, r3
 800abfc:	68f8      	ldr	r0, [r7, #12]
 800abfe:	f7fe fb86 	bl	800930e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800ac02:	687b      	ldr	r3, [r7, #4]
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d002      	beq.n	800ac0e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800ac08:	f04f 33ff 	mov.w	r3, #4294967295
 800ac0c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800ac0e:	6879      	ldr	r1, [r7, #4]
 800ac10:	68b8      	ldr	r0, [r7, #8]
 800ac12:	f000 fb63 	bl	800b2dc <prvAddCurrentTaskToDelayedList>
	}
 800ac16:	bf00      	nop
 800ac18:	3718      	adds	r7, #24
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	bd80      	pop	{r7, pc}
 800ac1e:	bf00      	nop
 800ac20:	20000b38 	.word	0x20000b38

0800ac24 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800ac24:	b580      	push	{r7, lr}
 800ac26:	b086      	sub	sp, #24
 800ac28:	af00      	add	r7, sp, #0
 800ac2a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	68db      	ldr	r3, [r3, #12]
 800ac30:	68db      	ldr	r3, [r3, #12]
 800ac32:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800ac34:	693b      	ldr	r3, [r7, #16]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10a      	bne.n	800ac50 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800ac3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ac3e:	f383 8811 	msr	BASEPRI, r3
 800ac42:	f3bf 8f6f 	isb	sy
 800ac46:	f3bf 8f4f 	dsb	sy
 800ac4a:	60fb      	str	r3, [r7, #12]
}
 800ac4c:	bf00      	nop
 800ac4e:	e7fe      	b.n	800ac4e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800ac50:	693b      	ldr	r3, [r7, #16]
 800ac52:	3318      	adds	r3, #24
 800ac54:	4618      	mov	r0, r3
 800ac56:	f7fe fbb7 	bl	80093c8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ac5a:	4b1e      	ldr	r3, [pc, #120]	; (800acd4 <xTaskRemoveFromEventList+0xb0>)
 800ac5c:	681b      	ldr	r3, [r3, #0]
 800ac5e:	2b00      	cmp	r3, #0
 800ac60:	d11d      	bne.n	800ac9e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800ac62:	693b      	ldr	r3, [r7, #16]
 800ac64:	3304      	adds	r3, #4
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fe fbae 	bl	80093c8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800ac6c:	693b      	ldr	r3, [r7, #16]
 800ac6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac70:	4b19      	ldr	r3, [pc, #100]	; (800acd8 <xTaskRemoveFromEventList+0xb4>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	429a      	cmp	r2, r3
 800ac76:	d903      	bls.n	800ac80 <xTaskRemoveFromEventList+0x5c>
 800ac78:	693b      	ldr	r3, [r7, #16]
 800ac7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ac7c:	4a16      	ldr	r2, [pc, #88]	; (800acd8 <xTaskRemoveFromEventList+0xb4>)
 800ac7e:	6013      	str	r3, [r2, #0]
 800ac80:	693b      	ldr	r3, [r7, #16]
 800ac82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ac84:	4613      	mov	r3, r2
 800ac86:	009b      	lsls	r3, r3, #2
 800ac88:	4413      	add	r3, r2
 800ac8a:	009b      	lsls	r3, r3, #2
 800ac8c:	4a13      	ldr	r2, [pc, #76]	; (800acdc <xTaskRemoveFromEventList+0xb8>)
 800ac8e:	441a      	add	r2, r3
 800ac90:	693b      	ldr	r3, [r7, #16]
 800ac92:	3304      	adds	r3, #4
 800ac94:	4619      	mov	r1, r3
 800ac96:	4610      	mov	r0, r2
 800ac98:	f7fe fb39 	bl	800930e <vListInsertEnd>
 800ac9c:	e005      	b.n	800acaa <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800ac9e:	693b      	ldr	r3, [r7, #16]
 800aca0:	3318      	adds	r3, #24
 800aca2:	4619      	mov	r1, r3
 800aca4:	480e      	ldr	r0, [pc, #56]	; (800ace0 <xTaskRemoveFromEventList+0xbc>)
 800aca6:	f7fe fb32 	bl	800930e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800acaa:	693b      	ldr	r3, [r7, #16]
 800acac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800acae:	4b0d      	ldr	r3, [pc, #52]	; (800ace4 <xTaskRemoveFromEventList+0xc0>)
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800acb4:	429a      	cmp	r2, r3
 800acb6:	d905      	bls.n	800acc4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800acb8:	2301      	movs	r3, #1
 800acba:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800acbc:	4b0a      	ldr	r3, [pc, #40]	; (800ace8 <xTaskRemoveFromEventList+0xc4>)
 800acbe:	2201      	movs	r2, #1
 800acc0:	601a      	str	r2, [r3, #0]
 800acc2:	e001      	b.n	800acc8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800acc4:	2300      	movs	r3, #0
 800acc6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800acc8:	697b      	ldr	r3, [r7, #20]
}
 800acca:	4618      	mov	r0, r3
 800accc:	3718      	adds	r7, #24
 800acce:	46bd      	mov	sp, r7
 800acd0:	bd80      	pop	{r7, pc}
 800acd2:	bf00      	nop
 800acd4:	20001034 	.word	0x20001034
 800acd8:	20001014 	.word	0x20001014
 800acdc:	20000b3c 	.word	0x20000b3c
 800ace0:	20000fcc 	.word	0x20000fcc
 800ace4:	20000b38 	.word	0x20000b38
 800ace8:	20001020 	.word	0x20001020

0800acec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800acec:	b480      	push	{r7}
 800acee:	b083      	sub	sp, #12
 800acf0:	af00      	add	r7, sp, #0
 800acf2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800acf4:	4b06      	ldr	r3, [pc, #24]	; (800ad10 <vTaskInternalSetTimeOutState+0x24>)
 800acf6:	681a      	ldr	r2, [r3, #0]
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800acfc:	4b05      	ldr	r3, [pc, #20]	; (800ad14 <vTaskInternalSetTimeOutState+0x28>)
 800acfe:	681a      	ldr	r2, [r3, #0]
 800ad00:	687b      	ldr	r3, [r7, #4]
 800ad02:	605a      	str	r2, [r3, #4]
}
 800ad04:	bf00      	nop
 800ad06:	370c      	adds	r7, #12
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad0e:	4770      	bx	lr
 800ad10:	20001024 	.word	0x20001024
 800ad14:	20001010 	.word	0x20001010

0800ad18 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800ad18:	b580      	push	{r7, lr}
 800ad1a:	b088      	sub	sp, #32
 800ad1c:	af00      	add	r7, sp, #0
 800ad1e:	6078      	str	r0, [r7, #4]
 800ad20:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800ad22:	687b      	ldr	r3, [r7, #4]
 800ad24:	2b00      	cmp	r3, #0
 800ad26:	d10a      	bne.n	800ad3e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800ad28:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2c:	f383 8811 	msr	BASEPRI, r3
 800ad30:	f3bf 8f6f 	isb	sy
 800ad34:	f3bf 8f4f 	dsb	sy
 800ad38:	613b      	str	r3, [r7, #16]
}
 800ad3a:	bf00      	nop
 800ad3c:	e7fe      	b.n	800ad3c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800ad3e:	683b      	ldr	r3, [r7, #0]
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	d10a      	bne.n	800ad5a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800ad44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad48:	f383 8811 	msr	BASEPRI, r3
 800ad4c:	f3bf 8f6f 	isb	sy
 800ad50:	f3bf 8f4f 	dsb	sy
 800ad54:	60fb      	str	r3, [r7, #12]
}
 800ad56:	bf00      	nop
 800ad58:	e7fe      	b.n	800ad58 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800ad5a:	f000 ff8b 	bl	800bc74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800ad5e:	4b1d      	ldr	r3, [pc, #116]	; (800add4 <xTaskCheckForTimeOut+0xbc>)
 800ad60:	681b      	ldr	r3, [r3, #0]
 800ad62:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	685b      	ldr	r3, [r3, #4]
 800ad68:	69ba      	ldr	r2, [r7, #24]
 800ad6a:	1ad3      	subs	r3, r2, r3
 800ad6c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	681b      	ldr	r3, [r3, #0]
 800ad72:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad76:	d102      	bne.n	800ad7e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800ad78:	2300      	movs	r3, #0
 800ad7a:	61fb      	str	r3, [r7, #28]
 800ad7c:	e023      	b.n	800adc6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800ad7e:	687b      	ldr	r3, [r7, #4]
 800ad80:	681a      	ldr	r2, [r3, #0]
 800ad82:	4b15      	ldr	r3, [pc, #84]	; (800add8 <xTaskCheckForTimeOut+0xc0>)
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	429a      	cmp	r2, r3
 800ad88:	d007      	beq.n	800ad9a <xTaskCheckForTimeOut+0x82>
 800ad8a:	687b      	ldr	r3, [r7, #4]
 800ad8c:	685b      	ldr	r3, [r3, #4]
 800ad8e:	69ba      	ldr	r2, [r7, #24]
 800ad90:	429a      	cmp	r2, r3
 800ad92:	d302      	bcc.n	800ad9a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800ad94:	2301      	movs	r3, #1
 800ad96:	61fb      	str	r3, [r7, #28]
 800ad98:	e015      	b.n	800adc6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800ad9a:	683b      	ldr	r3, [r7, #0]
 800ad9c:	681b      	ldr	r3, [r3, #0]
 800ad9e:	697a      	ldr	r2, [r7, #20]
 800ada0:	429a      	cmp	r2, r3
 800ada2:	d20b      	bcs.n	800adbc <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800ada4:	683b      	ldr	r3, [r7, #0]
 800ada6:	681a      	ldr	r2, [r3, #0]
 800ada8:	697b      	ldr	r3, [r7, #20]
 800adaa:	1ad2      	subs	r2, r2, r3
 800adac:	683b      	ldr	r3, [r7, #0]
 800adae:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800adb0:	6878      	ldr	r0, [r7, #4]
 800adb2:	f7ff ff9b 	bl	800acec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800adb6:	2300      	movs	r3, #0
 800adb8:	61fb      	str	r3, [r7, #28]
 800adba:	e004      	b.n	800adc6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800adbc:	683b      	ldr	r3, [r7, #0]
 800adbe:	2200      	movs	r2, #0
 800adc0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800adc2:	2301      	movs	r3, #1
 800adc4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800adc6:	f000 ff85 	bl	800bcd4 <vPortExitCritical>

	return xReturn;
 800adca:	69fb      	ldr	r3, [r7, #28]
}
 800adcc:	4618      	mov	r0, r3
 800adce:	3720      	adds	r7, #32
 800add0:	46bd      	mov	sp, r7
 800add2:	bd80      	pop	{r7, pc}
 800add4:	20001010 	.word	0x20001010
 800add8:	20001024 	.word	0x20001024

0800addc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800addc:	b480      	push	{r7}
 800adde:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800ade0:	4b03      	ldr	r3, [pc, #12]	; (800adf0 <vTaskMissedYield+0x14>)
 800ade2:	2201      	movs	r2, #1
 800ade4:	601a      	str	r2, [r3, #0]
}
 800ade6:	bf00      	nop
 800ade8:	46bd      	mov	sp, r7
 800adea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adee:	4770      	bx	lr
 800adf0:	20001020 	.word	0x20001020

0800adf4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800adf4:	b580      	push	{r7, lr}
 800adf6:	b082      	sub	sp, #8
 800adf8:	af00      	add	r7, sp, #0
 800adfa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800adfc:	f000 f852 	bl	800aea4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800ae00:	4b06      	ldr	r3, [pc, #24]	; (800ae1c <prvIdleTask+0x28>)
 800ae02:	681b      	ldr	r3, [r3, #0]
 800ae04:	2b01      	cmp	r3, #1
 800ae06:	d9f9      	bls.n	800adfc <prvIdleTask+0x8>
			{
				taskYIELD();
 800ae08:	4b05      	ldr	r3, [pc, #20]	; (800ae20 <prvIdleTask+0x2c>)
 800ae0a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ae0e:	601a      	str	r2, [r3, #0]
 800ae10:	f3bf 8f4f 	dsb	sy
 800ae14:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800ae18:	e7f0      	b.n	800adfc <prvIdleTask+0x8>
 800ae1a:	bf00      	nop
 800ae1c:	20000b3c 	.word	0x20000b3c
 800ae20:	e000ed04 	.word	0xe000ed04

0800ae24 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800ae24:	b580      	push	{r7, lr}
 800ae26:	b082      	sub	sp, #8
 800ae28:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	607b      	str	r3, [r7, #4]
 800ae2e:	e00c      	b.n	800ae4a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ae30:	687a      	ldr	r2, [r7, #4]
 800ae32:	4613      	mov	r3, r2
 800ae34:	009b      	lsls	r3, r3, #2
 800ae36:	4413      	add	r3, r2
 800ae38:	009b      	lsls	r3, r3, #2
 800ae3a:	4a12      	ldr	r2, [pc, #72]	; (800ae84 <prvInitialiseTaskLists+0x60>)
 800ae3c:	4413      	add	r3, r2
 800ae3e:	4618      	mov	r0, r3
 800ae40:	f7fe fa38 	bl	80092b4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	3301      	adds	r3, #1
 800ae48:	607b      	str	r3, [r7, #4]
 800ae4a:	687b      	ldr	r3, [r7, #4]
 800ae4c:	2b37      	cmp	r3, #55	; 0x37
 800ae4e:	d9ef      	bls.n	800ae30 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ae50:	480d      	ldr	r0, [pc, #52]	; (800ae88 <prvInitialiseTaskLists+0x64>)
 800ae52:	f7fe fa2f 	bl	80092b4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ae56:	480d      	ldr	r0, [pc, #52]	; (800ae8c <prvInitialiseTaskLists+0x68>)
 800ae58:	f7fe fa2c 	bl	80092b4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ae5c:	480c      	ldr	r0, [pc, #48]	; (800ae90 <prvInitialiseTaskLists+0x6c>)
 800ae5e:	f7fe fa29 	bl	80092b4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ae62:	480c      	ldr	r0, [pc, #48]	; (800ae94 <prvInitialiseTaskLists+0x70>)
 800ae64:	f7fe fa26 	bl	80092b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ae68:	480b      	ldr	r0, [pc, #44]	; (800ae98 <prvInitialiseTaskLists+0x74>)
 800ae6a:	f7fe fa23 	bl	80092b4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ae6e:	4b0b      	ldr	r3, [pc, #44]	; (800ae9c <prvInitialiseTaskLists+0x78>)
 800ae70:	4a05      	ldr	r2, [pc, #20]	; (800ae88 <prvInitialiseTaskLists+0x64>)
 800ae72:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ae74:	4b0a      	ldr	r3, [pc, #40]	; (800aea0 <prvInitialiseTaskLists+0x7c>)
 800ae76:	4a05      	ldr	r2, [pc, #20]	; (800ae8c <prvInitialiseTaskLists+0x68>)
 800ae78:	601a      	str	r2, [r3, #0]
}
 800ae7a:	bf00      	nop
 800ae7c:	3708      	adds	r7, #8
 800ae7e:	46bd      	mov	sp, r7
 800ae80:	bd80      	pop	{r7, pc}
 800ae82:	bf00      	nop
 800ae84:	20000b3c 	.word	0x20000b3c
 800ae88:	20000f9c 	.word	0x20000f9c
 800ae8c:	20000fb0 	.word	0x20000fb0
 800ae90:	20000fcc 	.word	0x20000fcc
 800ae94:	20000fe0 	.word	0x20000fe0
 800ae98:	20000ff8 	.word	0x20000ff8
 800ae9c:	20000fc4 	.word	0x20000fc4
 800aea0:	20000fc8 	.word	0x20000fc8

0800aea4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800aea4:	b580      	push	{r7, lr}
 800aea6:	b082      	sub	sp, #8
 800aea8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aeaa:	e019      	b.n	800aee0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800aeac:	f000 fee2 	bl	800bc74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800aeb0:	4b10      	ldr	r3, [pc, #64]	; (800aef4 <prvCheckTasksWaitingTermination+0x50>)
 800aeb2:	68db      	ldr	r3, [r3, #12]
 800aeb4:	68db      	ldr	r3, [r3, #12]
 800aeb6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800aeb8:	687b      	ldr	r3, [r7, #4]
 800aeba:	3304      	adds	r3, #4
 800aebc:	4618      	mov	r0, r3
 800aebe:	f7fe fa83 	bl	80093c8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800aec2:	4b0d      	ldr	r3, [pc, #52]	; (800aef8 <prvCheckTasksWaitingTermination+0x54>)
 800aec4:	681b      	ldr	r3, [r3, #0]
 800aec6:	3b01      	subs	r3, #1
 800aec8:	4a0b      	ldr	r2, [pc, #44]	; (800aef8 <prvCheckTasksWaitingTermination+0x54>)
 800aeca:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800aecc:	4b0b      	ldr	r3, [pc, #44]	; (800aefc <prvCheckTasksWaitingTermination+0x58>)
 800aece:	681b      	ldr	r3, [r3, #0]
 800aed0:	3b01      	subs	r3, #1
 800aed2:	4a0a      	ldr	r2, [pc, #40]	; (800aefc <prvCheckTasksWaitingTermination+0x58>)
 800aed4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800aed6:	f000 fefd 	bl	800bcd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800aeda:	6878      	ldr	r0, [r7, #4]
 800aedc:	f000 f810 	bl	800af00 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800aee0:	4b06      	ldr	r3, [pc, #24]	; (800aefc <prvCheckTasksWaitingTermination+0x58>)
 800aee2:	681b      	ldr	r3, [r3, #0]
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	d1e1      	bne.n	800aeac <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800aee8:	bf00      	nop
 800aeea:	bf00      	nop
 800aeec:	3708      	adds	r7, #8
 800aeee:	46bd      	mov	sp, r7
 800aef0:	bd80      	pop	{r7, pc}
 800aef2:	bf00      	nop
 800aef4:	20000fe0 	.word	0x20000fe0
 800aef8:	2000100c 	.word	0x2000100c
 800aefc:	20000ff4 	.word	0x20000ff4

0800af00 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800af00:	b580      	push	{r7, lr}
 800af02:	b084      	sub	sp, #16
 800af04:	af00      	add	r7, sp, #0
 800af06:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	3354      	adds	r3, #84	; 0x54
 800af0c:	4618      	mov	r0, r3
 800af0e:	f001 fa0d 	bl	800c32c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800af18:	2b00      	cmp	r3, #0
 800af1a:	d108      	bne.n	800af2e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800af1c:	687b      	ldr	r3, [r7, #4]
 800af1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af20:	4618      	mov	r0, r3
 800af22:	f001 f895 	bl	800c050 <vPortFree>
				vPortFree( pxTCB );
 800af26:	6878      	ldr	r0, [r7, #4]
 800af28:	f001 f892 	bl	800c050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800af2c:	e018      	b.n	800af60 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800af2e:	687b      	ldr	r3, [r7, #4]
 800af30:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800af34:	2b01      	cmp	r3, #1
 800af36:	d103      	bne.n	800af40 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800af38:	6878      	ldr	r0, [r7, #4]
 800af3a:	f001 f889 	bl	800c050 <vPortFree>
	}
 800af3e:	e00f      	b.n	800af60 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800af40:	687b      	ldr	r3, [r7, #4]
 800af42:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800af46:	2b02      	cmp	r3, #2
 800af48:	d00a      	beq.n	800af60 <prvDeleteTCB+0x60>
	__asm volatile
 800af4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af4e:	f383 8811 	msr	BASEPRI, r3
 800af52:	f3bf 8f6f 	isb	sy
 800af56:	f3bf 8f4f 	dsb	sy
 800af5a:	60fb      	str	r3, [r7, #12]
}
 800af5c:	bf00      	nop
 800af5e:	e7fe      	b.n	800af5e <prvDeleteTCB+0x5e>
	}
 800af60:	bf00      	nop
 800af62:	3710      	adds	r7, #16
 800af64:	46bd      	mov	sp, r7
 800af66:	bd80      	pop	{r7, pc}

0800af68 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800af6e:	4b0c      	ldr	r3, [pc, #48]	; (800afa0 <prvResetNextTaskUnblockTime+0x38>)
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	2b00      	cmp	r3, #0
 800af76:	d104      	bne.n	800af82 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800af78:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <prvResetNextTaskUnblockTime+0x3c>)
 800af7a:	f04f 32ff 	mov.w	r2, #4294967295
 800af7e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800af80:	e008      	b.n	800af94 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800af82:	4b07      	ldr	r3, [pc, #28]	; (800afa0 <prvResetNextTaskUnblockTime+0x38>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	68db      	ldr	r3, [r3, #12]
 800af88:	68db      	ldr	r3, [r3, #12]
 800af8a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	685b      	ldr	r3, [r3, #4]
 800af90:	4a04      	ldr	r2, [pc, #16]	; (800afa4 <prvResetNextTaskUnblockTime+0x3c>)
 800af92:	6013      	str	r3, [r2, #0]
}
 800af94:	bf00      	nop
 800af96:	370c      	adds	r7, #12
 800af98:	46bd      	mov	sp, r7
 800af9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af9e:	4770      	bx	lr
 800afa0:	20000fc4 	.word	0x20000fc4
 800afa4:	2000102c 	.word	0x2000102c

0800afa8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800afa8:	b480      	push	{r7}
 800afaa:	b083      	sub	sp, #12
 800afac:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800afae:	4b05      	ldr	r3, [pc, #20]	; (800afc4 <xTaskGetCurrentTaskHandle+0x1c>)
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	607b      	str	r3, [r7, #4]

		return xReturn;
 800afb4:	687b      	ldr	r3, [r7, #4]
	}
 800afb6:	4618      	mov	r0, r3
 800afb8:	370c      	adds	r7, #12
 800afba:	46bd      	mov	sp, r7
 800afbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afc0:	4770      	bx	lr
 800afc2:	bf00      	nop
 800afc4:	20000b38 	.word	0x20000b38

0800afc8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800afc8:	b480      	push	{r7}
 800afca:	b083      	sub	sp, #12
 800afcc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800afce:	4b0b      	ldr	r3, [pc, #44]	; (800affc <xTaskGetSchedulerState+0x34>)
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	2b00      	cmp	r3, #0
 800afd4:	d102      	bne.n	800afdc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800afd6:	2301      	movs	r3, #1
 800afd8:	607b      	str	r3, [r7, #4]
 800afda:	e008      	b.n	800afee <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800afdc:	4b08      	ldr	r3, [pc, #32]	; (800b000 <xTaskGetSchedulerState+0x38>)
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d102      	bne.n	800afea <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800afe4:	2302      	movs	r3, #2
 800afe6:	607b      	str	r3, [r7, #4]
 800afe8:	e001      	b.n	800afee <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800afea:	2300      	movs	r3, #0
 800afec:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800afee:	687b      	ldr	r3, [r7, #4]
	}
 800aff0:	4618      	mov	r0, r3
 800aff2:	370c      	adds	r7, #12
 800aff4:	46bd      	mov	sp, r7
 800aff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800affa:	4770      	bx	lr
 800affc:	20001018 	.word	0x20001018
 800b000:	20001034 	.word	0x20001034

0800b004 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b004:	b580      	push	{r7, lr}
 800b006:	b084      	sub	sp, #16
 800b008:	af00      	add	r7, sp, #0
 800b00a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b00c:	687b      	ldr	r3, [r7, #4]
 800b00e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b010:	2300      	movs	r3, #0
 800b012:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b014:	687b      	ldr	r3, [r7, #4]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d051      	beq.n	800b0be <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b01e:	4b2a      	ldr	r3, [pc, #168]	; (800b0c8 <xTaskPriorityInherit+0xc4>)
 800b020:	681b      	ldr	r3, [r3, #0]
 800b022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b024:	429a      	cmp	r2, r3
 800b026:	d241      	bcs.n	800b0ac <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b028:	68bb      	ldr	r3, [r7, #8]
 800b02a:	699b      	ldr	r3, [r3, #24]
 800b02c:	2b00      	cmp	r3, #0
 800b02e:	db06      	blt.n	800b03e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b030:	4b25      	ldr	r3, [pc, #148]	; (800b0c8 <xTaskPriorityInherit+0xc4>)
 800b032:	681b      	ldr	r3, [r3, #0]
 800b034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b036:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b03a:	68bb      	ldr	r3, [r7, #8]
 800b03c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b03e:	68bb      	ldr	r3, [r7, #8]
 800b040:	6959      	ldr	r1, [r3, #20]
 800b042:	68bb      	ldr	r3, [r7, #8]
 800b044:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b046:	4613      	mov	r3, r2
 800b048:	009b      	lsls	r3, r3, #2
 800b04a:	4413      	add	r3, r2
 800b04c:	009b      	lsls	r3, r3, #2
 800b04e:	4a1f      	ldr	r2, [pc, #124]	; (800b0cc <xTaskPriorityInherit+0xc8>)
 800b050:	4413      	add	r3, r2
 800b052:	4299      	cmp	r1, r3
 800b054:	d122      	bne.n	800b09c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b056:	68bb      	ldr	r3, [r7, #8]
 800b058:	3304      	adds	r3, #4
 800b05a:	4618      	mov	r0, r3
 800b05c:	f7fe f9b4 	bl	80093c8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b060:	4b19      	ldr	r3, [pc, #100]	; (800b0c8 <xTaskPriorityInherit+0xc4>)
 800b062:	681b      	ldr	r3, [r3, #0]
 800b064:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b066:	68bb      	ldr	r3, [r7, #8]
 800b068:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b06a:	68bb      	ldr	r3, [r7, #8]
 800b06c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b06e:	4b18      	ldr	r3, [pc, #96]	; (800b0d0 <xTaskPriorityInherit+0xcc>)
 800b070:	681b      	ldr	r3, [r3, #0]
 800b072:	429a      	cmp	r2, r3
 800b074:	d903      	bls.n	800b07e <xTaskPriorityInherit+0x7a>
 800b076:	68bb      	ldr	r3, [r7, #8]
 800b078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b07a:	4a15      	ldr	r2, [pc, #84]	; (800b0d0 <xTaskPriorityInherit+0xcc>)
 800b07c:	6013      	str	r3, [r2, #0]
 800b07e:	68bb      	ldr	r3, [r7, #8]
 800b080:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b082:	4613      	mov	r3, r2
 800b084:	009b      	lsls	r3, r3, #2
 800b086:	4413      	add	r3, r2
 800b088:	009b      	lsls	r3, r3, #2
 800b08a:	4a10      	ldr	r2, [pc, #64]	; (800b0cc <xTaskPriorityInherit+0xc8>)
 800b08c:	441a      	add	r2, r3
 800b08e:	68bb      	ldr	r3, [r7, #8]
 800b090:	3304      	adds	r3, #4
 800b092:	4619      	mov	r1, r3
 800b094:	4610      	mov	r0, r2
 800b096:	f7fe f93a 	bl	800930e <vListInsertEnd>
 800b09a:	e004      	b.n	800b0a6 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b09c:	4b0a      	ldr	r3, [pc, #40]	; (800b0c8 <xTaskPriorityInherit+0xc4>)
 800b09e:	681b      	ldr	r3, [r3, #0]
 800b0a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b0a2:	68bb      	ldr	r3, [r7, #8]
 800b0a4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b0a6:	2301      	movs	r3, #1
 800b0a8:	60fb      	str	r3, [r7, #12]
 800b0aa:	e008      	b.n	800b0be <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800b0ac:	68bb      	ldr	r3, [r7, #8]
 800b0ae:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b0b0:	4b05      	ldr	r3, [pc, #20]	; (800b0c8 <xTaskPriorityInherit+0xc4>)
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b0b6:	429a      	cmp	r2, r3
 800b0b8:	d201      	bcs.n	800b0be <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800b0ba:	2301      	movs	r3, #1
 800b0bc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b0be:	68fb      	ldr	r3, [r7, #12]
	}
 800b0c0:	4618      	mov	r0, r3
 800b0c2:	3710      	adds	r7, #16
 800b0c4:	46bd      	mov	sp, r7
 800b0c6:	bd80      	pop	{r7, pc}
 800b0c8:	20000b38 	.word	0x20000b38
 800b0cc:	20000b3c 	.word	0x20000b3c
 800b0d0:	20001014 	.word	0x20001014

0800b0d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800b0d4:	b580      	push	{r7, lr}
 800b0d6:	b086      	sub	sp, #24
 800b0d8:	af00      	add	r7, sp, #0
 800b0da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800b0dc:	687b      	ldr	r3, [r7, #4]
 800b0de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800b0e0:	2300      	movs	r3, #0
 800b0e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	2b00      	cmp	r3, #0
 800b0e8:	d056      	beq.n	800b198 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800b0ea:	4b2e      	ldr	r3, [pc, #184]	; (800b1a4 <xTaskPriorityDisinherit+0xd0>)
 800b0ec:	681b      	ldr	r3, [r3, #0]
 800b0ee:	693a      	ldr	r2, [r7, #16]
 800b0f0:	429a      	cmp	r2, r3
 800b0f2:	d00a      	beq.n	800b10a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800b0f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0f8:	f383 8811 	msr	BASEPRI, r3
 800b0fc:	f3bf 8f6f 	isb	sy
 800b100:	f3bf 8f4f 	dsb	sy
 800b104:	60fb      	str	r3, [r7, #12]
}
 800b106:	bf00      	nop
 800b108:	e7fe      	b.n	800b108 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800b10a:	693b      	ldr	r3, [r7, #16]
 800b10c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d10a      	bne.n	800b128 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800b112:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b116:	f383 8811 	msr	BASEPRI, r3
 800b11a:	f3bf 8f6f 	isb	sy
 800b11e:	f3bf 8f4f 	dsb	sy
 800b122:	60bb      	str	r3, [r7, #8]
}
 800b124:	bf00      	nop
 800b126:	e7fe      	b.n	800b126 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800b128:	693b      	ldr	r3, [r7, #16]
 800b12a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b12c:	1e5a      	subs	r2, r3, #1
 800b12e:	693b      	ldr	r3, [r7, #16]
 800b130:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800b132:	693b      	ldr	r3, [r7, #16]
 800b134:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b136:	693b      	ldr	r3, [r7, #16]
 800b138:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b13a:	429a      	cmp	r2, r3
 800b13c:	d02c      	beq.n	800b198 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800b13e:	693b      	ldr	r3, [r7, #16]
 800b140:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b142:	2b00      	cmp	r3, #0
 800b144:	d128      	bne.n	800b198 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b146:	693b      	ldr	r3, [r7, #16]
 800b148:	3304      	adds	r3, #4
 800b14a:	4618      	mov	r0, r3
 800b14c:	f7fe f93c 	bl	80093c8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800b150:	693b      	ldr	r3, [r7, #16]
 800b152:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800b154:	693b      	ldr	r3, [r7, #16]
 800b156:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b158:	693b      	ldr	r3, [r7, #16]
 800b15a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b15c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b160:	693b      	ldr	r3, [r7, #16]
 800b162:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800b164:	693b      	ldr	r3, [r7, #16]
 800b166:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b168:	4b0f      	ldr	r3, [pc, #60]	; (800b1a8 <xTaskPriorityDisinherit+0xd4>)
 800b16a:	681b      	ldr	r3, [r3, #0]
 800b16c:	429a      	cmp	r2, r3
 800b16e:	d903      	bls.n	800b178 <xTaskPriorityDisinherit+0xa4>
 800b170:	693b      	ldr	r3, [r7, #16]
 800b172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b174:	4a0c      	ldr	r2, [pc, #48]	; (800b1a8 <xTaskPriorityDisinherit+0xd4>)
 800b176:	6013      	str	r3, [r2, #0]
 800b178:	693b      	ldr	r3, [r7, #16]
 800b17a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b17c:	4613      	mov	r3, r2
 800b17e:	009b      	lsls	r3, r3, #2
 800b180:	4413      	add	r3, r2
 800b182:	009b      	lsls	r3, r3, #2
 800b184:	4a09      	ldr	r2, [pc, #36]	; (800b1ac <xTaskPriorityDisinherit+0xd8>)
 800b186:	441a      	add	r2, r3
 800b188:	693b      	ldr	r3, [r7, #16]
 800b18a:	3304      	adds	r3, #4
 800b18c:	4619      	mov	r1, r3
 800b18e:	4610      	mov	r0, r2
 800b190:	f7fe f8bd 	bl	800930e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800b194:	2301      	movs	r3, #1
 800b196:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800b198:	697b      	ldr	r3, [r7, #20]
	}
 800b19a:	4618      	mov	r0, r3
 800b19c:	3718      	adds	r7, #24
 800b19e:	46bd      	mov	sp, r7
 800b1a0:	bd80      	pop	{r7, pc}
 800b1a2:	bf00      	nop
 800b1a4:	20000b38 	.word	0x20000b38
 800b1a8:	20001014 	.word	0x20001014
 800b1ac:	20000b3c 	.word	0x20000b3c

0800b1b0 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800b1b0:	b580      	push	{r7, lr}
 800b1b2:	b088      	sub	sp, #32
 800b1b4:	af00      	add	r7, sp, #0
 800b1b6:	6078      	str	r0, [r7, #4]
 800b1b8:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800b1be:	2301      	movs	r3, #1
 800b1c0:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800b1c2:	687b      	ldr	r3, [r7, #4]
 800b1c4:	2b00      	cmp	r3, #0
 800b1c6:	d06a      	beq.n	800b29e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800b1c8:	69bb      	ldr	r3, [r7, #24]
 800b1ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b1cc:	2b00      	cmp	r3, #0
 800b1ce:	d10a      	bne.n	800b1e6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800b1d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b1d4:	f383 8811 	msr	BASEPRI, r3
 800b1d8:	f3bf 8f6f 	isb	sy
 800b1dc:	f3bf 8f4f 	dsb	sy
 800b1e0:	60fb      	str	r3, [r7, #12]
}
 800b1e2:	bf00      	nop
 800b1e4:	e7fe      	b.n	800b1e4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800b1e6:	69bb      	ldr	r3, [r7, #24]
 800b1e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1ea:	683a      	ldr	r2, [r7, #0]
 800b1ec:	429a      	cmp	r2, r3
 800b1ee:	d902      	bls.n	800b1f6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800b1f0:	683b      	ldr	r3, [r7, #0]
 800b1f2:	61fb      	str	r3, [r7, #28]
 800b1f4:	e002      	b.n	800b1fc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800b1f6:	69bb      	ldr	r3, [r7, #24]
 800b1f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800b1fa:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800b1fc:	69bb      	ldr	r3, [r7, #24]
 800b1fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b200:	69fa      	ldr	r2, [r7, #28]
 800b202:	429a      	cmp	r2, r3
 800b204:	d04b      	beq.n	800b29e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800b206:	69bb      	ldr	r3, [r7, #24]
 800b208:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b20a:	697a      	ldr	r2, [r7, #20]
 800b20c:	429a      	cmp	r2, r3
 800b20e:	d146      	bne.n	800b29e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800b210:	4b25      	ldr	r3, [pc, #148]	; (800b2a8 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	69ba      	ldr	r2, [r7, #24]
 800b216:	429a      	cmp	r2, r3
 800b218:	d10a      	bne.n	800b230 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	60bb      	str	r3, [r7, #8]
}
 800b22c:	bf00      	nop
 800b22e:	e7fe      	b.n	800b22e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800b230:	69bb      	ldr	r3, [r7, #24]
 800b232:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b234:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800b236:	69bb      	ldr	r3, [r7, #24]
 800b238:	69fa      	ldr	r2, [r7, #28]
 800b23a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b23c:	69bb      	ldr	r3, [r7, #24]
 800b23e:	699b      	ldr	r3, [r3, #24]
 800b240:	2b00      	cmp	r3, #0
 800b242:	db04      	blt.n	800b24e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b244:	69fb      	ldr	r3, [r7, #28]
 800b246:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800b24a:	69bb      	ldr	r3, [r7, #24]
 800b24c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800b24e:	69bb      	ldr	r3, [r7, #24]
 800b250:	6959      	ldr	r1, [r3, #20]
 800b252:	693a      	ldr	r2, [r7, #16]
 800b254:	4613      	mov	r3, r2
 800b256:	009b      	lsls	r3, r3, #2
 800b258:	4413      	add	r3, r2
 800b25a:	009b      	lsls	r3, r3, #2
 800b25c:	4a13      	ldr	r2, [pc, #76]	; (800b2ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b25e:	4413      	add	r3, r2
 800b260:	4299      	cmp	r1, r3
 800b262:	d11c      	bne.n	800b29e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b264:	69bb      	ldr	r3, [r7, #24]
 800b266:	3304      	adds	r3, #4
 800b268:	4618      	mov	r0, r3
 800b26a:	f7fe f8ad 	bl	80093c8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800b26e:	69bb      	ldr	r3, [r7, #24]
 800b270:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b272:	4b0f      	ldr	r3, [pc, #60]	; (800b2b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b274:	681b      	ldr	r3, [r3, #0]
 800b276:	429a      	cmp	r2, r3
 800b278:	d903      	bls.n	800b282 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800b27a:	69bb      	ldr	r3, [r7, #24]
 800b27c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800b27e:	4a0c      	ldr	r2, [pc, #48]	; (800b2b0 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800b280:	6013      	str	r3, [r2, #0]
 800b282:	69bb      	ldr	r3, [r7, #24]
 800b284:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800b286:	4613      	mov	r3, r2
 800b288:	009b      	lsls	r3, r3, #2
 800b28a:	4413      	add	r3, r2
 800b28c:	009b      	lsls	r3, r3, #2
 800b28e:	4a07      	ldr	r2, [pc, #28]	; (800b2ac <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800b290:	441a      	add	r2, r3
 800b292:	69bb      	ldr	r3, [r7, #24]
 800b294:	3304      	adds	r3, #4
 800b296:	4619      	mov	r1, r3
 800b298:	4610      	mov	r0, r2
 800b29a:	f7fe f838 	bl	800930e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b29e:	bf00      	nop
 800b2a0:	3720      	adds	r7, #32
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	bd80      	pop	{r7, pc}
 800b2a6:	bf00      	nop
 800b2a8:	20000b38 	.word	0x20000b38
 800b2ac:	20000b3c 	.word	0x20000b3c
 800b2b0:	20001014 	.word	0x20001014

0800b2b4 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800b2b4:	b480      	push	{r7}
 800b2b6:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800b2b8:	4b07      	ldr	r3, [pc, #28]	; (800b2d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2ba:	681b      	ldr	r3, [r3, #0]
 800b2bc:	2b00      	cmp	r3, #0
 800b2be:	d004      	beq.n	800b2ca <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800b2c0:	4b05      	ldr	r3, [pc, #20]	; (800b2d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2c2:	681b      	ldr	r3, [r3, #0]
 800b2c4:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800b2c6:	3201      	adds	r2, #1
 800b2c8:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800b2ca:	4b03      	ldr	r3, [pc, #12]	; (800b2d8 <pvTaskIncrementMutexHeldCount+0x24>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
	}
 800b2ce:	4618      	mov	r0, r3
 800b2d0:	46bd      	mov	sp, r7
 800b2d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2d6:	4770      	bx	lr
 800b2d8:	20000b38 	.word	0x20000b38

0800b2dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800b2dc:	b580      	push	{r7, lr}
 800b2de:	b084      	sub	sp, #16
 800b2e0:	af00      	add	r7, sp, #0
 800b2e2:	6078      	str	r0, [r7, #4]
 800b2e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800b2e6:	4b21      	ldr	r3, [pc, #132]	; (800b36c <prvAddCurrentTaskToDelayedList+0x90>)
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b2ec:	4b20      	ldr	r3, [pc, #128]	; (800b370 <prvAddCurrentTaskToDelayedList+0x94>)
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	3304      	adds	r3, #4
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fe f868 	bl	80093c8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800b2f8:	687b      	ldr	r3, [r7, #4]
 800b2fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2fe:	d10a      	bne.n	800b316 <prvAddCurrentTaskToDelayedList+0x3a>
 800b300:	683b      	ldr	r3, [r7, #0]
 800b302:	2b00      	cmp	r3, #0
 800b304:	d007      	beq.n	800b316 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b306:	4b1a      	ldr	r3, [pc, #104]	; (800b370 <prvAddCurrentTaskToDelayedList+0x94>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	3304      	adds	r3, #4
 800b30c:	4619      	mov	r1, r3
 800b30e:	4819      	ldr	r0, [pc, #100]	; (800b374 <prvAddCurrentTaskToDelayedList+0x98>)
 800b310:	f7fd fffd 	bl	800930e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800b314:	e026      	b.n	800b364 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800b316:	68fa      	ldr	r2, [r7, #12]
 800b318:	687b      	ldr	r3, [r7, #4]
 800b31a:	4413      	add	r3, r2
 800b31c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800b31e:	4b14      	ldr	r3, [pc, #80]	; (800b370 <prvAddCurrentTaskToDelayedList+0x94>)
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	68ba      	ldr	r2, [r7, #8]
 800b324:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800b326:	68ba      	ldr	r2, [r7, #8]
 800b328:	68fb      	ldr	r3, [r7, #12]
 800b32a:	429a      	cmp	r2, r3
 800b32c:	d209      	bcs.n	800b342 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b32e:	4b12      	ldr	r3, [pc, #72]	; (800b378 <prvAddCurrentTaskToDelayedList+0x9c>)
 800b330:	681a      	ldr	r2, [r3, #0]
 800b332:	4b0f      	ldr	r3, [pc, #60]	; (800b370 <prvAddCurrentTaskToDelayedList+0x94>)
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	3304      	adds	r3, #4
 800b338:	4619      	mov	r1, r3
 800b33a:	4610      	mov	r0, r2
 800b33c:	f7fe f80b 	bl	8009356 <vListInsert>
}
 800b340:	e010      	b.n	800b364 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800b342:	4b0e      	ldr	r3, [pc, #56]	; (800b37c <prvAddCurrentTaskToDelayedList+0xa0>)
 800b344:	681a      	ldr	r2, [r3, #0]
 800b346:	4b0a      	ldr	r3, [pc, #40]	; (800b370 <prvAddCurrentTaskToDelayedList+0x94>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	3304      	adds	r3, #4
 800b34c:	4619      	mov	r1, r3
 800b34e:	4610      	mov	r0, r2
 800b350:	f7fe f801 	bl	8009356 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800b354:	4b0a      	ldr	r3, [pc, #40]	; (800b380 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b356:	681b      	ldr	r3, [r3, #0]
 800b358:	68ba      	ldr	r2, [r7, #8]
 800b35a:	429a      	cmp	r2, r3
 800b35c:	d202      	bcs.n	800b364 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800b35e:	4a08      	ldr	r2, [pc, #32]	; (800b380 <prvAddCurrentTaskToDelayedList+0xa4>)
 800b360:	68bb      	ldr	r3, [r7, #8]
 800b362:	6013      	str	r3, [r2, #0]
}
 800b364:	bf00      	nop
 800b366:	3710      	adds	r7, #16
 800b368:	46bd      	mov	sp, r7
 800b36a:	bd80      	pop	{r7, pc}
 800b36c:	20001010 	.word	0x20001010
 800b370:	20000b38 	.word	0x20000b38
 800b374:	20000ff8 	.word	0x20000ff8
 800b378:	20000fc8 	.word	0x20000fc8
 800b37c:	20000fc4 	.word	0x20000fc4
 800b380:	2000102c 	.word	0x2000102c

0800b384 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800b384:	b580      	push	{r7, lr}
 800b386:	b08a      	sub	sp, #40	; 0x28
 800b388:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800b38a:	2300      	movs	r3, #0
 800b38c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800b38e:	f000 fb07 	bl	800b9a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800b392:	4b1c      	ldr	r3, [pc, #112]	; (800b404 <xTimerCreateTimerTask+0x80>)
 800b394:	681b      	ldr	r3, [r3, #0]
 800b396:	2b00      	cmp	r3, #0
 800b398:	d021      	beq.n	800b3de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800b39a:	2300      	movs	r3, #0
 800b39c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800b39e:	2300      	movs	r3, #0
 800b3a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800b3a2:	1d3a      	adds	r2, r7, #4
 800b3a4:	f107 0108 	add.w	r1, r7, #8
 800b3a8:	f107 030c 	add.w	r3, r7, #12
 800b3ac:	4618      	mov	r0, r3
 800b3ae:	f7fd ff67 	bl	8009280 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800b3b2:	6879      	ldr	r1, [r7, #4]
 800b3b4:	68bb      	ldr	r3, [r7, #8]
 800b3b6:	68fa      	ldr	r2, [r7, #12]
 800b3b8:	9202      	str	r2, [sp, #8]
 800b3ba:	9301      	str	r3, [sp, #4]
 800b3bc:	2302      	movs	r3, #2
 800b3be:	9300      	str	r3, [sp, #0]
 800b3c0:	2300      	movs	r3, #0
 800b3c2:	460a      	mov	r2, r1
 800b3c4:	4910      	ldr	r1, [pc, #64]	; (800b408 <xTimerCreateTimerTask+0x84>)
 800b3c6:	4811      	ldr	r0, [pc, #68]	; (800b40c <xTimerCreateTimerTask+0x88>)
 800b3c8:	f7fe ff28 	bl	800a21c <xTaskCreateStatic>
 800b3cc:	4603      	mov	r3, r0
 800b3ce:	4a10      	ldr	r2, [pc, #64]	; (800b410 <xTimerCreateTimerTask+0x8c>)
 800b3d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800b3d2:	4b0f      	ldr	r3, [pc, #60]	; (800b410 <xTimerCreateTimerTask+0x8c>)
 800b3d4:	681b      	ldr	r3, [r3, #0]
 800b3d6:	2b00      	cmp	r3, #0
 800b3d8:	d001      	beq.n	800b3de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800b3da:	2301      	movs	r3, #1
 800b3dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	2b00      	cmp	r3, #0
 800b3e2:	d10a      	bne.n	800b3fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 800b3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b3e8:	f383 8811 	msr	BASEPRI, r3
 800b3ec:	f3bf 8f6f 	isb	sy
 800b3f0:	f3bf 8f4f 	dsb	sy
 800b3f4:	613b      	str	r3, [r7, #16]
}
 800b3f6:	bf00      	nop
 800b3f8:	e7fe      	b.n	800b3f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800b3fa:	697b      	ldr	r3, [r7, #20]
}
 800b3fc:	4618      	mov	r0, r3
 800b3fe:	3718      	adds	r7, #24
 800b400:	46bd      	mov	sp, r7
 800b402:	bd80      	pop	{r7, pc}
 800b404:	20001068 	.word	0x20001068
 800b408:	0800e36c 	.word	0x0800e36c
 800b40c:	0800b549 	.word	0x0800b549
 800b410:	2000106c 	.word	0x2000106c

0800b414 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800b414:	b580      	push	{r7, lr}
 800b416:	b08a      	sub	sp, #40	; 0x28
 800b418:	af00      	add	r7, sp, #0
 800b41a:	60f8      	str	r0, [r7, #12]
 800b41c:	60b9      	str	r1, [r7, #8]
 800b41e:	607a      	str	r2, [r7, #4]
 800b420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800b422:	2300      	movs	r3, #0
 800b424:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800b426:	68fb      	ldr	r3, [r7, #12]
 800b428:	2b00      	cmp	r3, #0
 800b42a:	d10a      	bne.n	800b442 <xTimerGenericCommand+0x2e>
	__asm volatile
 800b42c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b430:	f383 8811 	msr	BASEPRI, r3
 800b434:	f3bf 8f6f 	isb	sy
 800b438:	f3bf 8f4f 	dsb	sy
 800b43c:	623b      	str	r3, [r7, #32]
}
 800b43e:	bf00      	nop
 800b440:	e7fe      	b.n	800b440 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800b442:	4b1a      	ldr	r3, [pc, #104]	; (800b4ac <xTimerGenericCommand+0x98>)
 800b444:	681b      	ldr	r3, [r3, #0]
 800b446:	2b00      	cmp	r3, #0
 800b448:	d02a      	beq.n	800b4a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800b44a:	68bb      	ldr	r3, [r7, #8]
 800b44c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800b452:	68fb      	ldr	r3, [r7, #12]
 800b454:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800b456:	68bb      	ldr	r3, [r7, #8]
 800b458:	2b05      	cmp	r3, #5
 800b45a:	dc18      	bgt.n	800b48e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800b45c:	f7ff fdb4 	bl	800afc8 <xTaskGetSchedulerState>
 800b460:	4603      	mov	r3, r0
 800b462:	2b02      	cmp	r3, #2
 800b464:	d109      	bne.n	800b47a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800b466:	4b11      	ldr	r3, [pc, #68]	; (800b4ac <xTimerGenericCommand+0x98>)
 800b468:	6818      	ldr	r0, [r3, #0]
 800b46a:	f107 0110 	add.w	r1, r7, #16
 800b46e:	2300      	movs	r3, #0
 800b470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800b472:	f7fe f9c7 	bl	8009804 <xQueueGenericSend>
 800b476:	6278      	str	r0, [r7, #36]	; 0x24
 800b478:	e012      	b.n	800b4a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800b47a:	4b0c      	ldr	r3, [pc, #48]	; (800b4ac <xTimerGenericCommand+0x98>)
 800b47c:	6818      	ldr	r0, [r3, #0]
 800b47e:	f107 0110 	add.w	r1, r7, #16
 800b482:	2300      	movs	r3, #0
 800b484:	2200      	movs	r2, #0
 800b486:	f7fe f9bd 	bl	8009804 <xQueueGenericSend>
 800b48a:	6278      	str	r0, [r7, #36]	; 0x24
 800b48c:	e008      	b.n	800b4a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800b48e:	4b07      	ldr	r3, [pc, #28]	; (800b4ac <xTimerGenericCommand+0x98>)
 800b490:	6818      	ldr	r0, [r3, #0]
 800b492:	f107 0110 	add.w	r1, r7, #16
 800b496:	2300      	movs	r3, #0
 800b498:	683a      	ldr	r2, [r7, #0]
 800b49a:	f7fe fab1 	bl	8009a00 <xQueueGenericSendFromISR>
 800b49e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800b4a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	3728      	adds	r7, #40	; 0x28
 800b4a6:	46bd      	mov	sp, r7
 800b4a8:	bd80      	pop	{r7, pc}
 800b4aa:	bf00      	nop
 800b4ac:	20001068 	.word	0x20001068

0800b4b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800b4b0:	b580      	push	{r7, lr}
 800b4b2:	b088      	sub	sp, #32
 800b4b4:	af02      	add	r7, sp, #8
 800b4b6:	6078      	str	r0, [r7, #4]
 800b4b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b4ba:	4b22      	ldr	r3, [pc, #136]	; (800b544 <prvProcessExpiredTimer+0x94>)
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	68db      	ldr	r3, [r3, #12]
 800b4c0:	68db      	ldr	r3, [r3, #12]
 800b4c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b4c4:	697b      	ldr	r3, [r7, #20]
 800b4c6:	3304      	adds	r3, #4
 800b4c8:	4618      	mov	r0, r3
 800b4ca:	f7fd ff7d 	bl	80093c8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b4ce:	697b      	ldr	r3, [r7, #20]
 800b4d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b4d4:	f003 0304 	and.w	r3, r3, #4
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	d022      	beq.n	800b522 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800b4dc:	697b      	ldr	r3, [r7, #20]
 800b4de:	699a      	ldr	r2, [r3, #24]
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	18d1      	adds	r1, r2, r3
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	683a      	ldr	r2, [r7, #0]
 800b4e8:	6978      	ldr	r0, [r7, #20]
 800b4ea:	f000 f8d1 	bl	800b690 <prvInsertTimerInActiveList>
 800b4ee:	4603      	mov	r3, r0
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	d01f      	beq.n	800b534 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b4f4:	2300      	movs	r3, #0
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	2300      	movs	r3, #0
 800b4fa:	687a      	ldr	r2, [r7, #4]
 800b4fc:	2100      	movs	r1, #0
 800b4fe:	6978      	ldr	r0, [r7, #20]
 800b500:	f7ff ff88 	bl	800b414 <xTimerGenericCommand>
 800b504:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800b506:	693b      	ldr	r3, [r7, #16]
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d113      	bne.n	800b534 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800b50c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b510:	f383 8811 	msr	BASEPRI, r3
 800b514:	f3bf 8f6f 	isb	sy
 800b518:	f3bf 8f4f 	dsb	sy
 800b51c:	60fb      	str	r3, [r7, #12]
}
 800b51e:	bf00      	nop
 800b520:	e7fe      	b.n	800b520 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b522:	697b      	ldr	r3, [r7, #20]
 800b524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b528:	f023 0301 	bic.w	r3, r3, #1
 800b52c:	b2da      	uxtb	r2, r3
 800b52e:	697b      	ldr	r3, [r7, #20]
 800b530:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b534:	697b      	ldr	r3, [r7, #20]
 800b536:	6a1b      	ldr	r3, [r3, #32]
 800b538:	6978      	ldr	r0, [r7, #20]
 800b53a:	4798      	blx	r3
}
 800b53c:	bf00      	nop
 800b53e:	3718      	adds	r7, #24
 800b540:	46bd      	mov	sp, r7
 800b542:	bd80      	pop	{r7, pc}
 800b544:	20001060 	.word	0x20001060

0800b548 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800b548:	b580      	push	{r7, lr}
 800b54a:	b084      	sub	sp, #16
 800b54c:	af00      	add	r7, sp, #0
 800b54e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b550:	f107 0308 	add.w	r3, r7, #8
 800b554:	4618      	mov	r0, r3
 800b556:	f000 f857 	bl	800b608 <prvGetNextExpireTime>
 800b55a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800b55c:	68bb      	ldr	r3, [r7, #8]
 800b55e:	4619      	mov	r1, r3
 800b560:	68f8      	ldr	r0, [r7, #12]
 800b562:	f000 f803 	bl	800b56c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800b566:	f000 f8d5 	bl	800b714 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800b56a:	e7f1      	b.n	800b550 <prvTimerTask+0x8>

0800b56c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800b56c:	b580      	push	{r7, lr}
 800b56e:	b084      	sub	sp, #16
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
 800b574:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800b576:	f7ff f92b 	bl	800a7d0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b57a:	f107 0308 	add.w	r3, r7, #8
 800b57e:	4618      	mov	r0, r3
 800b580:	f000 f866 	bl	800b650 <prvSampleTimeNow>
 800b584:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800b586:	68bb      	ldr	r3, [r7, #8]
 800b588:	2b00      	cmp	r3, #0
 800b58a:	d130      	bne.n	800b5ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800b58c:	683b      	ldr	r3, [r7, #0]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10a      	bne.n	800b5a8 <prvProcessTimerOrBlockTask+0x3c>
 800b592:	687a      	ldr	r2, [r7, #4]
 800b594:	68fb      	ldr	r3, [r7, #12]
 800b596:	429a      	cmp	r2, r3
 800b598:	d806      	bhi.n	800b5a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800b59a:	f7ff f927 	bl	800a7ec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800b59e:	68f9      	ldr	r1, [r7, #12]
 800b5a0:	6878      	ldr	r0, [r7, #4]
 800b5a2:	f7ff ff85 	bl	800b4b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800b5a6:	e024      	b.n	800b5f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800b5a8:	683b      	ldr	r3, [r7, #0]
 800b5aa:	2b00      	cmp	r3, #0
 800b5ac:	d008      	beq.n	800b5c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800b5ae:	4b13      	ldr	r3, [pc, #76]	; (800b5fc <prvProcessTimerOrBlockTask+0x90>)
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	681b      	ldr	r3, [r3, #0]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d101      	bne.n	800b5bc <prvProcessTimerOrBlockTask+0x50>
 800b5b8:	2301      	movs	r3, #1
 800b5ba:	e000      	b.n	800b5be <prvProcessTimerOrBlockTask+0x52>
 800b5bc:	2300      	movs	r3, #0
 800b5be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800b5c0:	4b0f      	ldr	r3, [pc, #60]	; (800b600 <prvProcessTimerOrBlockTask+0x94>)
 800b5c2:	6818      	ldr	r0, [r3, #0]
 800b5c4:	687a      	ldr	r2, [r7, #4]
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	1ad3      	subs	r3, r2, r3
 800b5ca:	683a      	ldr	r2, [r7, #0]
 800b5cc:	4619      	mov	r1, r3
 800b5ce:	f7fe fdf1 	bl	800a1b4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800b5d2:	f7ff f90b 	bl	800a7ec <xTaskResumeAll>
 800b5d6:	4603      	mov	r3, r0
 800b5d8:	2b00      	cmp	r3, #0
 800b5da:	d10a      	bne.n	800b5f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800b5dc:	4b09      	ldr	r3, [pc, #36]	; (800b604 <prvProcessTimerOrBlockTask+0x98>)
 800b5de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b5e2:	601a      	str	r2, [r3, #0]
 800b5e4:	f3bf 8f4f 	dsb	sy
 800b5e8:	f3bf 8f6f 	isb	sy
}
 800b5ec:	e001      	b.n	800b5f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800b5ee:	f7ff f8fd 	bl	800a7ec <xTaskResumeAll>
}
 800b5f2:	bf00      	nop
 800b5f4:	3710      	adds	r7, #16
 800b5f6:	46bd      	mov	sp, r7
 800b5f8:	bd80      	pop	{r7, pc}
 800b5fa:	bf00      	nop
 800b5fc:	20001064 	.word	0x20001064
 800b600:	20001068 	.word	0x20001068
 800b604:	e000ed04 	.word	0xe000ed04

0800b608 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800b608:	b480      	push	{r7}
 800b60a:	b085      	sub	sp, #20
 800b60c:	af00      	add	r7, sp, #0
 800b60e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800b610:	4b0e      	ldr	r3, [pc, #56]	; (800b64c <prvGetNextExpireTime+0x44>)
 800b612:	681b      	ldr	r3, [r3, #0]
 800b614:	681b      	ldr	r3, [r3, #0]
 800b616:	2b00      	cmp	r3, #0
 800b618:	d101      	bne.n	800b61e <prvGetNextExpireTime+0x16>
 800b61a:	2201      	movs	r2, #1
 800b61c:	e000      	b.n	800b620 <prvGetNextExpireTime+0x18>
 800b61e:	2200      	movs	r2, #0
 800b620:	687b      	ldr	r3, [r7, #4]
 800b622:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	681b      	ldr	r3, [r3, #0]
 800b628:	2b00      	cmp	r3, #0
 800b62a:	d105      	bne.n	800b638 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b62c:	4b07      	ldr	r3, [pc, #28]	; (800b64c <prvGetNextExpireTime+0x44>)
 800b62e:	681b      	ldr	r3, [r3, #0]
 800b630:	68db      	ldr	r3, [r3, #12]
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	60fb      	str	r3, [r7, #12]
 800b636:	e001      	b.n	800b63c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800b638:	2300      	movs	r3, #0
 800b63a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800b63c:	68fb      	ldr	r3, [r7, #12]
}
 800b63e:	4618      	mov	r0, r3
 800b640:	3714      	adds	r7, #20
 800b642:	46bd      	mov	sp, r7
 800b644:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b648:	4770      	bx	lr
 800b64a:	bf00      	nop
 800b64c:	20001060 	.word	0x20001060

0800b650 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800b650:	b580      	push	{r7, lr}
 800b652:	b084      	sub	sp, #16
 800b654:	af00      	add	r7, sp, #0
 800b656:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800b658:	f7ff f966 	bl	800a928 <xTaskGetTickCount>
 800b65c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800b65e:	4b0b      	ldr	r3, [pc, #44]	; (800b68c <prvSampleTimeNow+0x3c>)
 800b660:	681b      	ldr	r3, [r3, #0]
 800b662:	68fa      	ldr	r2, [r7, #12]
 800b664:	429a      	cmp	r2, r3
 800b666:	d205      	bcs.n	800b674 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800b668:	f000 f936 	bl	800b8d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	2201      	movs	r2, #1
 800b670:	601a      	str	r2, [r3, #0]
 800b672:	e002      	b.n	800b67a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800b674:	687b      	ldr	r3, [r7, #4]
 800b676:	2200      	movs	r2, #0
 800b678:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800b67a:	4a04      	ldr	r2, [pc, #16]	; (800b68c <prvSampleTimeNow+0x3c>)
 800b67c:	68fb      	ldr	r3, [r7, #12]
 800b67e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800b680:	68fb      	ldr	r3, [r7, #12]
}
 800b682:	4618      	mov	r0, r3
 800b684:	3710      	adds	r7, #16
 800b686:	46bd      	mov	sp, r7
 800b688:	bd80      	pop	{r7, pc}
 800b68a:	bf00      	nop
 800b68c:	20001070 	.word	0x20001070

0800b690 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b086      	sub	sp, #24
 800b694:	af00      	add	r7, sp, #0
 800b696:	60f8      	str	r0, [r7, #12]
 800b698:	60b9      	str	r1, [r7, #8]
 800b69a:	607a      	str	r2, [r7, #4]
 800b69c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800b69e:	2300      	movs	r3, #0
 800b6a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	68ba      	ldr	r2, [r7, #8]
 800b6a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	68fa      	ldr	r2, [r7, #12]
 800b6ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800b6ae:	68ba      	ldr	r2, [r7, #8]
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	429a      	cmp	r2, r3
 800b6b4:	d812      	bhi.n	800b6dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b6b6:	687a      	ldr	r2, [r7, #4]
 800b6b8:	683b      	ldr	r3, [r7, #0]
 800b6ba:	1ad2      	subs	r2, r2, r3
 800b6bc:	68fb      	ldr	r3, [r7, #12]
 800b6be:	699b      	ldr	r3, [r3, #24]
 800b6c0:	429a      	cmp	r2, r3
 800b6c2:	d302      	bcc.n	800b6ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800b6c4:	2301      	movs	r3, #1
 800b6c6:	617b      	str	r3, [r7, #20]
 800b6c8:	e01b      	b.n	800b702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800b6ca:	4b10      	ldr	r3, [pc, #64]	; (800b70c <prvInsertTimerInActiveList+0x7c>)
 800b6cc:	681a      	ldr	r2, [r3, #0]
 800b6ce:	68fb      	ldr	r3, [r7, #12]
 800b6d0:	3304      	adds	r3, #4
 800b6d2:	4619      	mov	r1, r3
 800b6d4:	4610      	mov	r0, r2
 800b6d6:	f7fd fe3e 	bl	8009356 <vListInsert>
 800b6da:	e012      	b.n	800b702 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800b6dc:	687a      	ldr	r2, [r7, #4]
 800b6de:	683b      	ldr	r3, [r7, #0]
 800b6e0:	429a      	cmp	r2, r3
 800b6e2:	d206      	bcs.n	800b6f2 <prvInsertTimerInActiveList+0x62>
 800b6e4:	68ba      	ldr	r2, [r7, #8]
 800b6e6:	683b      	ldr	r3, [r7, #0]
 800b6e8:	429a      	cmp	r2, r3
 800b6ea:	d302      	bcc.n	800b6f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800b6ec:	2301      	movs	r3, #1
 800b6ee:	617b      	str	r3, [r7, #20]
 800b6f0:	e007      	b.n	800b702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b6f2:	4b07      	ldr	r3, [pc, #28]	; (800b710 <prvInsertTimerInActiveList+0x80>)
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	68fb      	ldr	r3, [r7, #12]
 800b6f8:	3304      	adds	r3, #4
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	4610      	mov	r0, r2
 800b6fe:	f7fd fe2a 	bl	8009356 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800b702:	697b      	ldr	r3, [r7, #20]
}
 800b704:	4618      	mov	r0, r3
 800b706:	3718      	adds	r7, #24
 800b708:	46bd      	mov	sp, r7
 800b70a:	bd80      	pop	{r7, pc}
 800b70c:	20001064 	.word	0x20001064
 800b710:	20001060 	.word	0x20001060

0800b714 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800b714:	b580      	push	{r7, lr}
 800b716:	b08e      	sub	sp, #56	; 0x38
 800b718:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b71a:	e0ca      	b.n	800b8b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	2b00      	cmp	r3, #0
 800b720:	da18      	bge.n	800b754 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800b722:	1d3b      	adds	r3, r7, #4
 800b724:	3304      	adds	r3, #4
 800b726:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800b728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b72a:	2b00      	cmp	r3, #0
 800b72c:	d10a      	bne.n	800b744 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800b72e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b732:	f383 8811 	msr	BASEPRI, r3
 800b736:	f3bf 8f6f 	isb	sy
 800b73a:	f3bf 8f4f 	dsb	sy
 800b73e:	61fb      	str	r3, [r7, #28]
}
 800b740:	bf00      	nop
 800b742:	e7fe      	b.n	800b742 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800b744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b746:	681b      	ldr	r3, [r3, #0]
 800b748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b74a:	6850      	ldr	r0, [r2, #4]
 800b74c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800b74e:	6892      	ldr	r2, [r2, #8]
 800b750:	4611      	mov	r1, r2
 800b752:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	2b00      	cmp	r3, #0
 800b758:	f2c0 80aa 	blt.w	800b8b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800b75c:	68fb      	ldr	r3, [r7, #12]
 800b75e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800b760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b762:	695b      	ldr	r3, [r3, #20]
 800b764:	2b00      	cmp	r3, #0
 800b766:	d004      	beq.n	800b772 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b76a:	3304      	adds	r3, #4
 800b76c:	4618      	mov	r0, r3
 800b76e:	f7fd fe2b 	bl	80093c8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800b772:	463b      	mov	r3, r7
 800b774:	4618      	mov	r0, r3
 800b776:	f7ff ff6b 	bl	800b650 <prvSampleTimeNow>
 800b77a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800b77c:	687b      	ldr	r3, [r7, #4]
 800b77e:	2b09      	cmp	r3, #9
 800b780:	f200 8097 	bhi.w	800b8b2 <prvProcessReceivedCommands+0x19e>
 800b784:	a201      	add	r2, pc, #4	; (adr r2, 800b78c <prvProcessReceivedCommands+0x78>)
 800b786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b78a:	bf00      	nop
 800b78c:	0800b7b5 	.word	0x0800b7b5
 800b790:	0800b7b5 	.word	0x0800b7b5
 800b794:	0800b7b5 	.word	0x0800b7b5
 800b798:	0800b829 	.word	0x0800b829
 800b79c:	0800b83d 	.word	0x0800b83d
 800b7a0:	0800b887 	.word	0x0800b887
 800b7a4:	0800b7b5 	.word	0x0800b7b5
 800b7a8:	0800b7b5 	.word	0x0800b7b5
 800b7ac:	0800b829 	.word	0x0800b829
 800b7b0:	0800b83d 	.word	0x0800b83d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b7b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7ba:	f043 0301 	orr.w	r3, r3, #1
 800b7be:	b2da      	uxtb	r2, r3
 800b7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800b7c6:	68ba      	ldr	r2, [r7, #8]
 800b7c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7ca:	699b      	ldr	r3, [r3, #24]
 800b7cc:	18d1      	adds	r1, r2, r3
 800b7ce:	68bb      	ldr	r3, [r7, #8]
 800b7d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b7d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7d4:	f7ff ff5c 	bl	800b690 <prvInsertTimerInActiveList>
 800b7d8:	4603      	mov	r3, r0
 800b7da:	2b00      	cmp	r3, #0
 800b7dc:	d069      	beq.n	800b8b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b7de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e0:	6a1b      	ldr	r3, [r3, #32]
 800b7e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b7e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b7e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b7ec:	f003 0304 	and.w	r3, r3, #4
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d05e      	beq.n	800b8b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800b7f4:	68ba      	ldr	r2, [r7, #8]
 800b7f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b7f8:	699b      	ldr	r3, [r3, #24]
 800b7fa:	441a      	add	r2, r3
 800b7fc:	2300      	movs	r3, #0
 800b7fe:	9300      	str	r3, [sp, #0]
 800b800:	2300      	movs	r3, #0
 800b802:	2100      	movs	r1, #0
 800b804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b806:	f7ff fe05 	bl	800b414 <xTimerGenericCommand>
 800b80a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800b80c:	6a3b      	ldr	r3, [r7, #32]
 800b80e:	2b00      	cmp	r3, #0
 800b810:	d14f      	bne.n	800b8b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800b812:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b816:	f383 8811 	msr	BASEPRI, r3
 800b81a:	f3bf 8f6f 	isb	sy
 800b81e:	f3bf 8f4f 	dsb	sy
 800b822:	61bb      	str	r3, [r7, #24]
}
 800b824:	bf00      	nop
 800b826:	e7fe      	b.n	800b826 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b82a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b82e:	f023 0301 	bic.w	r3, r3, #1
 800b832:	b2da      	uxtb	r2, r3
 800b834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800b83a:	e03a      	b.n	800b8b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800b83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b83e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b842:	f043 0301 	orr.w	r3, r3, #1
 800b846:	b2da      	uxtb	r2, r3
 800b848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b84a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800b84e:	68ba      	ldr	r2, [r7, #8]
 800b850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b852:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800b854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b856:	699b      	ldr	r3, [r3, #24]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d10a      	bne.n	800b872 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800b85c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b860:	f383 8811 	msr	BASEPRI, r3
 800b864:	f3bf 8f6f 	isb	sy
 800b868:	f3bf 8f4f 	dsb	sy
 800b86c:	617b      	str	r3, [r7, #20]
}
 800b86e:	bf00      	nop
 800b870:	e7fe      	b.n	800b870 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800b872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b874:	699a      	ldr	r2, [r3, #24]
 800b876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b878:	18d1      	adds	r1, r2, r3
 800b87a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b87c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b87e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b880:	f7ff ff06 	bl	800b690 <prvInsertTimerInActiveList>
					break;
 800b884:	e015      	b.n	800b8b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800b886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b88c:	f003 0302 	and.w	r3, r3, #2
 800b890:	2b00      	cmp	r3, #0
 800b892:	d103      	bne.n	800b89c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800b894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800b896:	f000 fbdb 	bl	800c050 <vPortFree>
 800b89a:	e00a      	b.n	800b8b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800b89c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b89e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b8a2:	f023 0301 	bic.w	r3, r3, #1
 800b8a6:	b2da      	uxtb	r2, r3
 800b8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b8aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800b8ae:	e000      	b.n	800b8b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800b8b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800b8b2:	4b08      	ldr	r3, [pc, #32]	; (800b8d4 <prvProcessReceivedCommands+0x1c0>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	1d39      	adds	r1, r7, #4
 800b8b8:	2200      	movs	r2, #0
 800b8ba:	4618      	mov	r0, r3
 800b8bc:	f7fe f93c 	bl	8009b38 <xQueueReceive>
 800b8c0:	4603      	mov	r3, r0
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	f47f af2a 	bne.w	800b71c <prvProcessReceivedCommands+0x8>
	}
}
 800b8c8:	bf00      	nop
 800b8ca:	bf00      	nop
 800b8cc:	3730      	adds	r7, #48	; 0x30
 800b8ce:	46bd      	mov	sp, r7
 800b8d0:	bd80      	pop	{r7, pc}
 800b8d2:	bf00      	nop
 800b8d4:	20001068 	.word	0x20001068

0800b8d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800b8d8:	b580      	push	{r7, lr}
 800b8da:	b088      	sub	sp, #32
 800b8dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b8de:	e048      	b.n	800b972 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800b8e0:	4b2d      	ldr	r3, [pc, #180]	; (800b998 <prvSwitchTimerLists+0xc0>)
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	68db      	ldr	r3, [r3, #12]
 800b8e6:	681b      	ldr	r3, [r3, #0]
 800b8e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8ea:	4b2b      	ldr	r3, [pc, #172]	; (800b998 <prvSwitchTimerLists+0xc0>)
 800b8ec:	681b      	ldr	r3, [r3, #0]
 800b8ee:	68db      	ldr	r3, [r3, #12]
 800b8f0:	68db      	ldr	r3, [r3, #12]
 800b8f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	3304      	adds	r3, #4
 800b8f8:	4618      	mov	r0, r3
 800b8fa:	f7fd fd65 	bl	80093c8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800b8fe:	68fb      	ldr	r3, [r7, #12]
 800b900:	6a1b      	ldr	r3, [r3, #32]
 800b902:	68f8      	ldr	r0, [r7, #12]
 800b904:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800b906:	68fb      	ldr	r3, [r7, #12]
 800b908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800b90c:	f003 0304 	and.w	r3, r3, #4
 800b910:	2b00      	cmp	r3, #0
 800b912:	d02e      	beq.n	800b972 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	699b      	ldr	r3, [r3, #24]
 800b918:	693a      	ldr	r2, [r7, #16]
 800b91a:	4413      	add	r3, r2
 800b91c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800b91e:	68ba      	ldr	r2, [r7, #8]
 800b920:	693b      	ldr	r3, [r7, #16]
 800b922:	429a      	cmp	r2, r3
 800b924:	d90e      	bls.n	800b944 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800b926:	68fb      	ldr	r3, [r7, #12]
 800b928:	68ba      	ldr	r2, [r7, #8]
 800b92a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	68fa      	ldr	r2, [r7, #12]
 800b930:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800b932:	4b19      	ldr	r3, [pc, #100]	; (800b998 <prvSwitchTimerLists+0xc0>)
 800b934:	681a      	ldr	r2, [r3, #0]
 800b936:	68fb      	ldr	r3, [r7, #12]
 800b938:	3304      	adds	r3, #4
 800b93a:	4619      	mov	r1, r3
 800b93c:	4610      	mov	r0, r2
 800b93e:	f7fd fd0a 	bl	8009356 <vListInsert>
 800b942:	e016      	b.n	800b972 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800b944:	2300      	movs	r3, #0
 800b946:	9300      	str	r3, [sp, #0]
 800b948:	2300      	movs	r3, #0
 800b94a:	693a      	ldr	r2, [r7, #16]
 800b94c:	2100      	movs	r1, #0
 800b94e:	68f8      	ldr	r0, [r7, #12]
 800b950:	f7ff fd60 	bl	800b414 <xTimerGenericCommand>
 800b954:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800b956:	687b      	ldr	r3, [r7, #4]
 800b958:	2b00      	cmp	r3, #0
 800b95a:	d10a      	bne.n	800b972 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800b95c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b960:	f383 8811 	msr	BASEPRI, r3
 800b964:	f3bf 8f6f 	isb	sy
 800b968:	f3bf 8f4f 	dsb	sy
 800b96c:	603b      	str	r3, [r7, #0]
}
 800b96e:	bf00      	nop
 800b970:	e7fe      	b.n	800b970 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800b972:	4b09      	ldr	r3, [pc, #36]	; (800b998 <prvSwitchTimerLists+0xc0>)
 800b974:	681b      	ldr	r3, [r3, #0]
 800b976:	681b      	ldr	r3, [r3, #0]
 800b978:	2b00      	cmp	r3, #0
 800b97a:	d1b1      	bne.n	800b8e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800b97c:	4b06      	ldr	r3, [pc, #24]	; (800b998 <prvSwitchTimerLists+0xc0>)
 800b97e:	681b      	ldr	r3, [r3, #0]
 800b980:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800b982:	4b06      	ldr	r3, [pc, #24]	; (800b99c <prvSwitchTimerLists+0xc4>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	4a04      	ldr	r2, [pc, #16]	; (800b998 <prvSwitchTimerLists+0xc0>)
 800b988:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800b98a:	4a04      	ldr	r2, [pc, #16]	; (800b99c <prvSwitchTimerLists+0xc4>)
 800b98c:	697b      	ldr	r3, [r7, #20]
 800b98e:	6013      	str	r3, [r2, #0]
}
 800b990:	bf00      	nop
 800b992:	3718      	adds	r7, #24
 800b994:	46bd      	mov	sp, r7
 800b996:	bd80      	pop	{r7, pc}
 800b998:	20001060 	.word	0x20001060
 800b99c:	20001064 	.word	0x20001064

0800b9a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800b9a0:	b580      	push	{r7, lr}
 800b9a2:	b082      	sub	sp, #8
 800b9a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800b9a6:	f000 f965 	bl	800bc74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800b9aa:	4b15      	ldr	r3, [pc, #84]	; (800ba00 <prvCheckForValidListAndQueue+0x60>)
 800b9ac:	681b      	ldr	r3, [r3, #0]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d120      	bne.n	800b9f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800b9b2:	4814      	ldr	r0, [pc, #80]	; (800ba04 <prvCheckForValidListAndQueue+0x64>)
 800b9b4:	f7fd fc7e 	bl	80092b4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800b9b8:	4813      	ldr	r0, [pc, #76]	; (800ba08 <prvCheckForValidListAndQueue+0x68>)
 800b9ba:	f7fd fc7b 	bl	80092b4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800b9be:	4b13      	ldr	r3, [pc, #76]	; (800ba0c <prvCheckForValidListAndQueue+0x6c>)
 800b9c0:	4a10      	ldr	r2, [pc, #64]	; (800ba04 <prvCheckForValidListAndQueue+0x64>)
 800b9c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800b9c4:	4b12      	ldr	r3, [pc, #72]	; (800ba10 <prvCheckForValidListAndQueue+0x70>)
 800b9c6:	4a10      	ldr	r2, [pc, #64]	; (800ba08 <prvCheckForValidListAndQueue+0x68>)
 800b9c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800b9ca:	2300      	movs	r3, #0
 800b9cc:	9300      	str	r3, [sp, #0]
 800b9ce:	4b11      	ldr	r3, [pc, #68]	; (800ba14 <prvCheckForValidListAndQueue+0x74>)
 800b9d0:	4a11      	ldr	r2, [pc, #68]	; (800ba18 <prvCheckForValidListAndQueue+0x78>)
 800b9d2:	2110      	movs	r1, #16
 800b9d4:	200a      	movs	r0, #10
 800b9d6:	f7fd fd89 	bl	80094ec <xQueueGenericCreateStatic>
 800b9da:	4603      	mov	r3, r0
 800b9dc:	4a08      	ldr	r2, [pc, #32]	; (800ba00 <prvCheckForValidListAndQueue+0x60>)
 800b9de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800b9e0:	4b07      	ldr	r3, [pc, #28]	; (800ba00 <prvCheckForValidListAndQueue+0x60>)
 800b9e2:	681b      	ldr	r3, [r3, #0]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d005      	beq.n	800b9f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800b9e8:	4b05      	ldr	r3, [pc, #20]	; (800ba00 <prvCheckForValidListAndQueue+0x60>)
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	490b      	ldr	r1, [pc, #44]	; (800ba1c <prvCheckForValidListAndQueue+0x7c>)
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f7fe fbb6 	bl	800a160 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b9f4:	f000 f96e 	bl	800bcd4 <vPortExitCritical>
}
 800b9f8:	bf00      	nop
 800b9fa:	46bd      	mov	sp, r7
 800b9fc:	bd80      	pop	{r7, pc}
 800b9fe:	bf00      	nop
 800ba00:	20001068 	.word	0x20001068
 800ba04:	20001038 	.word	0x20001038
 800ba08:	2000104c 	.word	0x2000104c
 800ba0c:	20001060 	.word	0x20001060
 800ba10:	20001064 	.word	0x20001064
 800ba14:	20001114 	.word	0x20001114
 800ba18:	20001074 	.word	0x20001074
 800ba1c:	0800e374 	.word	0x0800e374

0800ba20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ba20:	b480      	push	{r7}
 800ba22:	b085      	sub	sp, #20
 800ba24:	af00      	add	r7, sp, #0
 800ba26:	60f8      	str	r0, [r7, #12]
 800ba28:	60b9      	str	r1, [r7, #8]
 800ba2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	3b04      	subs	r3, #4
 800ba30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800ba38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	3b04      	subs	r3, #4
 800ba3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800ba40:	68bb      	ldr	r3, [r7, #8]
 800ba42:	f023 0201 	bic.w	r2, r3, #1
 800ba46:	68fb      	ldr	r3, [r7, #12]
 800ba48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800ba4a:	68fb      	ldr	r3, [r7, #12]
 800ba4c:	3b04      	subs	r3, #4
 800ba4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800ba50:	4a0c      	ldr	r2, [pc, #48]	; (800ba84 <pxPortInitialiseStack+0x64>)
 800ba52:	68fb      	ldr	r3, [r7, #12]
 800ba54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800ba56:	68fb      	ldr	r3, [r7, #12]
 800ba58:	3b14      	subs	r3, #20
 800ba5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800ba5c:	687a      	ldr	r2, [r7, #4]
 800ba5e:	68fb      	ldr	r3, [r7, #12]
 800ba60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800ba62:	68fb      	ldr	r3, [r7, #12]
 800ba64:	3b04      	subs	r3, #4
 800ba66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ba68:	68fb      	ldr	r3, [r7, #12]
 800ba6a:	f06f 0202 	mvn.w	r2, #2
 800ba6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ba70:	68fb      	ldr	r3, [r7, #12]
 800ba72:	3b20      	subs	r3, #32
 800ba74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800ba76:	68fb      	ldr	r3, [r7, #12]
}
 800ba78:	4618      	mov	r0, r3
 800ba7a:	3714      	adds	r7, #20
 800ba7c:	46bd      	mov	sp, r7
 800ba7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba82:	4770      	bx	lr
 800ba84:	0800ba89 	.word	0x0800ba89

0800ba88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ba88:	b480      	push	{r7}
 800ba8a:	b085      	sub	sp, #20
 800ba8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ba8e:	2300      	movs	r3, #0
 800ba90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ba92:	4b12      	ldr	r3, [pc, #72]	; (800badc <prvTaskExitError+0x54>)
 800ba94:	681b      	ldr	r3, [r3, #0]
 800ba96:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ba9a:	d00a      	beq.n	800bab2 <prvTaskExitError+0x2a>
	__asm volatile
 800ba9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800baa0:	f383 8811 	msr	BASEPRI, r3
 800baa4:	f3bf 8f6f 	isb	sy
 800baa8:	f3bf 8f4f 	dsb	sy
 800baac:	60fb      	str	r3, [r7, #12]
}
 800baae:	bf00      	nop
 800bab0:	e7fe      	b.n	800bab0 <prvTaskExitError+0x28>
	__asm volatile
 800bab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bab6:	f383 8811 	msr	BASEPRI, r3
 800baba:	f3bf 8f6f 	isb	sy
 800babe:	f3bf 8f4f 	dsb	sy
 800bac2:	60bb      	str	r3, [r7, #8]
}
 800bac4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800bac6:	bf00      	nop
 800bac8:	687b      	ldr	r3, [r7, #4]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	d0fc      	beq.n	800bac8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800bace:	bf00      	nop
 800bad0:	bf00      	nop
 800bad2:	3714      	adds	r7, #20
 800bad4:	46bd      	mov	sp, r7
 800bad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bada:	4770      	bx	lr
 800badc:	20000040 	.word	0x20000040

0800bae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800bae0:	4b07      	ldr	r3, [pc, #28]	; (800bb00 <pxCurrentTCBConst2>)
 800bae2:	6819      	ldr	r1, [r3, #0]
 800bae4:	6808      	ldr	r0, [r1, #0]
 800bae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baea:	f380 8809 	msr	PSP, r0
 800baee:	f3bf 8f6f 	isb	sy
 800baf2:	f04f 0000 	mov.w	r0, #0
 800baf6:	f380 8811 	msr	BASEPRI, r0
 800bafa:	4770      	bx	lr
 800bafc:	f3af 8000 	nop.w

0800bb00 <pxCurrentTCBConst2>:
 800bb00:	20000b38 	.word	0x20000b38
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800bb04:	bf00      	nop
 800bb06:	bf00      	nop

0800bb08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800bb08:	4808      	ldr	r0, [pc, #32]	; (800bb2c <prvPortStartFirstTask+0x24>)
 800bb0a:	6800      	ldr	r0, [r0, #0]
 800bb0c:	6800      	ldr	r0, [r0, #0]
 800bb0e:	f380 8808 	msr	MSP, r0
 800bb12:	f04f 0000 	mov.w	r0, #0
 800bb16:	f380 8814 	msr	CONTROL, r0
 800bb1a:	b662      	cpsie	i
 800bb1c:	b661      	cpsie	f
 800bb1e:	f3bf 8f4f 	dsb	sy
 800bb22:	f3bf 8f6f 	isb	sy
 800bb26:	df00      	svc	0
 800bb28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800bb2a:	bf00      	nop
 800bb2c:	e000ed08 	.word	0xe000ed08

0800bb30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800bb30:	b580      	push	{r7, lr}
 800bb32:	b086      	sub	sp, #24
 800bb34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800bb36:	4b46      	ldr	r3, [pc, #280]	; (800bc50 <xPortStartScheduler+0x120>)
 800bb38:	681b      	ldr	r3, [r3, #0]
 800bb3a:	4a46      	ldr	r2, [pc, #280]	; (800bc54 <xPortStartScheduler+0x124>)
 800bb3c:	4293      	cmp	r3, r2
 800bb3e:	d10a      	bne.n	800bb56 <xPortStartScheduler+0x26>
	__asm volatile
 800bb40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb44:	f383 8811 	msr	BASEPRI, r3
 800bb48:	f3bf 8f6f 	isb	sy
 800bb4c:	f3bf 8f4f 	dsb	sy
 800bb50:	613b      	str	r3, [r7, #16]
}
 800bb52:	bf00      	nop
 800bb54:	e7fe      	b.n	800bb54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800bb56:	4b3e      	ldr	r3, [pc, #248]	; (800bc50 <xPortStartScheduler+0x120>)
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a3f      	ldr	r2, [pc, #252]	; (800bc58 <xPortStartScheduler+0x128>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d10a      	bne.n	800bb76 <xPortStartScheduler+0x46>
	__asm volatile
 800bb60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb64:	f383 8811 	msr	BASEPRI, r3
 800bb68:	f3bf 8f6f 	isb	sy
 800bb6c:	f3bf 8f4f 	dsb	sy
 800bb70:	60fb      	str	r3, [r7, #12]
}
 800bb72:	bf00      	nop
 800bb74:	e7fe      	b.n	800bb74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800bb76:	4b39      	ldr	r3, [pc, #228]	; (800bc5c <xPortStartScheduler+0x12c>)
 800bb78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800bb7a:	697b      	ldr	r3, [r7, #20]
 800bb7c:	781b      	ldrb	r3, [r3, #0]
 800bb7e:	b2db      	uxtb	r3, r3
 800bb80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800bb82:	697b      	ldr	r3, [r7, #20]
 800bb84:	22ff      	movs	r2, #255	; 0xff
 800bb86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800bb88:	697b      	ldr	r3, [r7, #20]
 800bb8a:	781b      	ldrb	r3, [r3, #0]
 800bb8c:	b2db      	uxtb	r3, r3
 800bb8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800bb90:	78fb      	ldrb	r3, [r7, #3]
 800bb92:	b2db      	uxtb	r3, r3
 800bb94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800bb98:	b2da      	uxtb	r2, r3
 800bb9a:	4b31      	ldr	r3, [pc, #196]	; (800bc60 <xPortStartScheduler+0x130>)
 800bb9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800bb9e:	4b31      	ldr	r3, [pc, #196]	; (800bc64 <xPortStartScheduler+0x134>)
 800bba0:	2207      	movs	r2, #7
 800bba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bba4:	e009      	b.n	800bbba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800bba6:	4b2f      	ldr	r3, [pc, #188]	; (800bc64 <xPortStartScheduler+0x134>)
 800bba8:	681b      	ldr	r3, [r3, #0]
 800bbaa:	3b01      	subs	r3, #1
 800bbac:	4a2d      	ldr	r2, [pc, #180]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800bbb0:	78fb      	ldrb	r3, [r7, #3]
 800bbb2:	b2db      	uxtb	r3, r3
 800bbb4:	005b      	lsls	r3, r3, #1
 800bbb6:	b2db      	uxtb	r3, r3
 800bbb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800bbba:	78fb      	ldrb	r3, [r7, #3]
 800bbbc:	b2db      	uxtb	r3, r3
 800bbbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bbc2:	2b80      	cmp	r3, #128	; 0x80
 800bbc4:	d0ef      	beq.n	800bba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800bbc6:	4b27      	ldr	r3, [pc, #156]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbc8:	681b      	ldr	r3, [r3, #0]
 800bbca:	f1c3 0307 	rsb	r3, r3, #7
 800bbce:	2b04      	cmp	r3, #4
 800bbd0:	d00a      	beq.n	800bbe8 <xPortStartScheduler+0xb8>
	__asm volatile
 800bbd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbd6:	f383 8811 	msr	BASEPRI, r3
 800bbda:	f3bf 8f6f 	isb	sy
 800bbde:	f3bf 8f4f 	dsb	sy
 800bbe2:	60bb      	str	r3, [r7, #8]
}
 800bbe4:	bf00      	nop
 800bbe6:	e7fe      	b.n	800bbe6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800bbe8:	4b1e      	ldr	r3, [pc, #120]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	021b      	lsls	r3, r3, #8
 800bbee:	4a1d      	ldr	r2, [pc, #116]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800bbf2:	4b1c      	ldr	r3, [pc, #112]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbf4:	681b      	ldr	r3, [r3, #0]
 800bbf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800bbfa:	4a1a      	ldr	r2, [pc, #104]	; (800bc64 <xPortStartScheduler+0x134>)
 800bbfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	b2da      	uxtb	r2, r3
 800bc02:	697b      	ldr	r3, [r7, #20]
 800bc04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800bc06:	4b18      	ldr	r3, [pc, #96]	; (800bc68 <xPortStartScheduler+0x138>)
 800bc08:	681b      	ldr	r3, [r3, #0]
 800bc0a:	4a17      	ldr	r2, [pc, #92]	; (800bc68 <xPortStartScheduler+0x138>)
 800bc0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800bc10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800bc12:	4b15      	ldr	r3, [pc, #84]	; (800bc68 <xPortStartScheduler+0x138>)
 800bc14:	681b      	ldr	r3, [r3, #0]
 800bc16:	4a14      	ldr	r2, [pc, #80]	; (800bc68 <xPortStartScheduler+0x138>)
 800bc18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800bc1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800bc1e:	f000 f8dd 	bl	800bddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800bc22:	4b12      	ldr	r3, [pc, #72]	; (800bc6c <xPortStartScheduler+0x13c>)
 800bc24:	2200      	movs	r2, #0
 800bc26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800bc28:	f000 f8fc 	bl	800be24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800bc2c:	4b10      	ldr	r3, [pc, #64]	; (800bc70 <xPortStartScheduler+0x140>)
 800bc2e:	681b      	ldr	r3, [r3, #0]
 800bc30:	4a0f      	ldr	r2, [pc, #60]	; (800bc70 <xPortStartScheduler+0x140>)
 800bc32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800bc36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800bc38:	f7ff ff66 	bl	800bb08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800bc3c:	f7fe ff3e 	bl	800aabc <vTaskSwitchContext>
	prvTaskExitError();
 800bc40:	f7ff ff22 	bl	800ba88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800bc44:	2300      	movs	r3, #0
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3718      	adds	r7, #24
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	bd80      	pop	{r7, pc}
 800bc4e:	bf00      	nop
 800bc50:	e000ed00 	.word	0xe000ed00
 800bc54:	410fc271 	.word	0x410fc271
 800bc58:	410fc270 	.word	0x410fc270
 800bc5c:	e000e400 	.word	0xe000e400
 800bc60:	20001164 	.word	0x20001164
 800bc64:	20001168 	.word	0x20001168
 800bc68:	e000ed20 	.word	0xe000ed20
 800bc6c:	20000040 	.word	0x20000040
 800bc70:	e000ef34 	.word	0xe000ef34

0800bc74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800bc74:	b480      	push	{r7}
 800bc76:	b083      	sub	sp, #12
 800bc78:	af00      	add	r7, sp, #0
	__asm volatile
 800bc7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc7e:	f383 8811 	msr	BASEPRI, r3
 800bc82:	f3bf 8f6f 	isb	sy
 800bc86:	f3bf 8f4f 	dsb	sy
 800bc8a:	607b      	str	r3, [r7, #4]
}
 800bc8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800bc8e:	4b0f      	ldr	r3, [pc, #60]	; (800bccc <vPortEnterCritical+0x58>)
 800bc90:	681b      	ldr	r3, [r3, #0]
 800bc92:	3301      	adds	r3, #1
 800bc94:	4a0d      	ldr	r2, [pc, #52]	; (800bccc <vPortEnterCritical+0x58>)
 800bc96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800bc98:	4b0c      	ldr	r3, [pc, #48]	; (800bccc <vPortEnterCritical+0x58>)
 800bc9a:	681b      	ldr	r3, [r3, #0]
 800bc9c:	2b01      	cmp	r3, #1
 800bc9e:	d10f      	bne.n	800bcc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800bca0:	4b0b      	ldr	r3, [pc, #44]	; (800bcd0 <vPortEnterCritical+0x5c>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	b2db      	uxtb	r3, r3
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d00a      	beq.n	800bcc0 <vPortEnterCritical+0x4c>
	__asm volatile
 800bcaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcae:	f383 8811 	msr	BASEPRI, r3
 800bcb2:	f3bf 8f6f 	isb	sy
 800bcb6:	f3bf 8f4f 	dsb	sy
 800bcba:	603b      	str	r3, [r7, #0]
}
 800bcbc:	bf00      	nop
 800bcbe:	e7fe      	b.n	800bcbe <vPortEnterCritical+0x4a>
	}
}
 800bcc0:	bf00      	nop
 800bcc2:	370c      	adds	r7, #12
 800bcc4:	46bd      	mov	sp, r7
 800bcc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcca:	4770      	bx	lr
 800bccc:	20000040 	.word	0x20000040
 800bcd0:	e000ed04 	.word	0xe000ed04

0800bcd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800bcd4:	b480      	push	{r7}
 800bcd6:	b083      	sub	sp, #12
 800bcd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800bcda:	4b12      	ldr	r3, [pc, #72]	; (800bd24 <vPortExitCritical+0x50>)
 800bcdc:	681b      	ldr	r3, [r3, #0]
 800bcde:	2b00      	cmp	r3, #0
 800bce0:	d10a      	bne.n	800bcf8 <vPortExitCritical+0x24>
	__asm volatile
 800bce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bce6:	f383 8811 	msr	BASEPRI, r3
 800bcea:	f3bf 8f6f 	isb	sy
 800bcee:	f3bf 8f4f 	dsb	sy
 800bcf2:	607b      	str	r3, [r7, #4]
}
 800bcf4:	bf00      	nop
 800bcf6:	e7fe      	b.n	800bcf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800bcf8:	4b0a      	ldr	r3, [pc, #40]	; (800bd24 <vPortExitCritical+0x50>)
 800bcfa:	681b      	ldr	r3, [r3, #0]
 800bcfc:	3b01      	subs	r3, #1
 800bcfe:	4a09      	ldr	r2, [pc, #36]	; (800bd24 <vPortExitCritical+0x50>)
 800bd00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800bd02:	4b08      	ldr	r3, [pc, #32]	; (800bd24 <vPortExitCritical+0x50>)
 800bd04:	681b      	ldr	r3, [r3, #0]
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d105      	bne.n	800bd16 <vPortExitCritical+0x42>
 800bd0a:	2300      	movs	r3, #0
 800bd0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bd0e:	683b      	ldr	r3, [r7, #0]
 800bd10:	f383 8811 	msr	BASEPRI, r3
}
 800bd14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800bd16:	bf00      	nop
 800bd18:	370c      	adds	r7, #12
 800bd1a:	46bd      	mov	sp, r7
 800bd1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd20:	4770      	bx	lr
 800bd22:	bf00      	nop
 800bd24:	20000040 	.word	0x20000040
	...

0800bd30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800bd30:	f3ef 8009 	mrs	r0, PSP
 800bd34:	f3bf 8f6f 	isb	sy
 800bd38:	4b15      	ldr	r3, [pc, #84]	; (800bd90 <pxCurrentTCBConst>)
 800bd3a:	681a      	ldr	r2, [r3, #0]
 800bd3c:	f01e 0f10 	tst.w	lr, #16
 800bd40:	bf08      	it	eq
 800bd42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800bd46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd4a:	6010      	str	r0, [r2, #0]
 800bd4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800bd50:	f04f 0050 	mov.w	r0, #80	; 0x50
 800bd54:	f380 8811 	msr	BASEPRI, r0
 800bd58:	f3bf 8f4f 	dsb	sy
 800bd5c:	f3bf 8f6f 	isb	sy
 800bd60:	f7fe feac 	bl	800aabc <vTaskSwitchContext>
 800bd64:	f04f 0000 	mov.w	r0, #0
 800bd68:	f380 8811 	msr	BASEPRI, r0
 800bd6c:	bc09      	pop	{r0, r3}
 800bd6e:	6819      	ldr	r1, [r3, #0]
 800bd70:	6808      	ldr	r0, [r1, #0]
 800bd72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd76:	f01e 0f10 	tst.w	lr, #16
 800bd7a:	bf08      	it	eq
 800bd7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800bd80:	f380 8809 	msr	PSP, r0
 800bd84:	f3bf 8f6f 	isb	sy
 800bd88:	4770      	bx	lr
 800bd8a:	bf00      	nop
 800bd8c:	f3af 8000 	nop.w

0800bd90 <pxCurrentTCBConst>:
 800bd90:	20000b38 	.word	0x20000b38
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800bd94:	bf00      	nop
 800bd96:	bf00      	nop

0800bd98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800bd98:	b580      	push	{r7, lr}
 800bd9a:	b082      	sub	sp, #8
 800bd9c:	af00      	add	r7, sp, #0
	__asm volatile
 800bd9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bda2:	f383 8811 	msr	BASEPRI, r3
 800bda6:	f3bf 8f6f 	isb	sy
 800bdaa:	f3bf 8f4f 	dsb	sy
 800bdae:	607b      	str	r3, [r7, #4]
}
 800bdb0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800bdb2:	f7fe fdc9 	bl	800a948 <xTaskIncrementTick>
 800bdb6:	4603      	mov	r3, r0
 800bdb8:	2b00      	cmp	r3, #0
 800bdba:	d003      	beq.n	800bdc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800bdbc:	4b06      	ldr	r3, [pc, #24]	; (800bdd8 <xPortSysTickHandler+0x40>)
 800bdbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bdc2:	601a      	str	r2, [r3, #0]
 800bdc4:	2300      	movs	r3, #0
 800bdc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	f383 8811 	msr	BASEPRI, r3
}
 800bdce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800bdd0:	bf00      	nop
 800bdd2:	3708      	adds	r7, #8
 800bdd4:	46bd      	mov	sp, r7
 800bdd6:	bd80      	pop	{r7, pc}
 800bdd8:	e000ed04 	.word	0xe000ed04

0800bddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800bddc:	b480      	push	{r7}
 800bdde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800bde0:	4b0b      	ldr	r3, [pc, #44]	; (800be10 <vPortSetupTimerInterrupt+0x34>)
 800bde2:	2200      	movs	r2, #0
 800bde4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800bde6:	4b0b      	ldr	r3, [pc, #44]	; (800be14 <vPortSetupTimerInterrupt+0x38>)
 800bde8:	2200      	movs	r2, #0
 800bdea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800bdec:	4b0a      	ldr	r3, [pc, #40]	; (800be18 <vPortSetupTimerInterrupt+0x3c>)
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a0a      	ldr	r2, [pc, #40]	; (800be1c <vPortSetupTimerInterrupt+0x40>)
 800bdf2:	fba2 2303 	umull	r2, r3, r2, r3
 800bdf6:	099b      	lsrs	r3, r3, #6
 800bdf8:	4a09      	ldr	r2, [pc, #36]	; (800be20 <vPortSetupTimerInterrupt+0x44>)
 800bdfa:	3b01      	subs	r3, #1
 800bdfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800bdfe:	4b04      	ldr	r3, [pc, #16]	; (800be10 <vPortSetupTimerInterrupt+0x34>)
 800be00:	2207      	movs	r2, #7
 800be02:	601a      	str	r2, [r3, #0]
}
 800be04:	bf00      	nop
 800be06:	46bd      	mov	sp, r7
 800be08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be0c:	4770      	bx	lr
 800be0e:	bf00      	nop
 800be10:	e000e010 	.word	0xe000e010
 800be14:	e000e018 	.word	0xe000e018
 800be18:	20000034 	.word	0x20000034
 800be1c:	10624dd3 	.word	0x10624dd3
 800be20:	e000e014 	.word	0xe000e014

0800be24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800be24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800be34 <vPortEnableVFP+0x10>
 800be28:	6801      	ldr	r1, [r0, #0]
 800be2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800be2e:	6001      	str	r1, [r0, #0]
 800be30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800be32:	bf00      	nop
 800be34:	e000ed88 	.word	0xe000ed88

0800be38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800be38:	b480      	push	{r7}
 800be3a:	b085      	sub	sp, #20
 800be3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800be3e:	f3ef 8305 	mrs	r3, IPSR
 800be42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800be44:	68fb      	ldr	r3, [r7, #12]
 800be46:	2b0f      	cmp	r3, #15
 800be48:	d914      	bls.n	800be74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800be4a:	4a17      	ldr	r2, [pc, #92]	; (800bea8 <vPortValidateInterruptPriority+0x70>)
 800be4c:	68fb      	ldr	r3, [r7, #12]
 800be4e:	4413      	add	r3, r2
 800be50:	781b      	ldrb	r3, [r3, #0]
 800be52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800be54:	4b15      	ldr	r3, [pc, #84]	; (800beac <vPortValidateInterruptPriority+0x74>)
 800be56:	781b      	ldrb	r3, [r3, #0]
 800be58:	7afa      	ldrb	r2, [r7, #11]
 800be5a:	429a      	cmp	r2, r3
 800be5c:	d20a      	bcs.n	800be74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800be5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be62:	f383 8811 	msr	BASEPRI, r3
 800be66:	f3bf 8f6f 	isb	sy
 800be6a:	f3bf 8f4f 	dsb	sy
 800be6e:	607b      	str	r3, [r7, #4]
}
 800be70:	bf00      	nop
 800be72:	e7fe      	b.n	800be72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800be74:	4b0e      	ldr	r3, [pc, #56]	; (800beb0 <vPortValidateInterruptPriority+0x78>)
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800be7c:	4b0d      	ldr	r3, [pc, #52]	; (800beb4 <vPortValidateInterruptPriority+0x7c>)
 800be7e:	681b      	ldr	r3, [r3, #0]
 800be80:	429a      	cmp	r2, r3
 800be82:	d90a      	bls.n	800be9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800be84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be88:	f383 8811 	msr	BASEPRI, r3
 800be8c:	f3bf 8f6f 	isb	sy
 800be90:	f3bf 8f4f 	dsb	sy
 800be94:	603b      	str	r3, [r7, #0]
}
 800be96:	bf00      	nop
 800be98:	e7fe      	b.n	800be98 <vPortValidateInterruptPriority+0x60>
	}
 800be9a:	bf00      	nop
 800be9c:	3714      	adds	r7, #20
 800be9e:	46bd      	mov	sp, r7
 800bea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bea4:	4770      	bx	lr
 800bea6:	bf00      	nop
 800bea8:	e000e3f0 	.word	0xe000e3f0
 800beac:	20001164 	.word	0x20001164
 800beb0:	e000ed0c 	.word	0xe000ed0c
 800beb4:	20001168 	.word	0x20001168

0800beb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800beb8:	b580      	push	{r7, lr}
 800beba:	b08a      	sub	sp, #40	; 0x28
 800bebc:	af00      	add	r7, sp, #0
 800bebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800bec0:	2300      	movs	r3, #0
 800bec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800bec4:	f7fe fc84 	bl	800a7d0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800bec8:	4b5b      	ldr	r3, [pc, #364]	; (800c038 <pvPortMalloc+0x180>)
 800beca:	681b      	ldr	r3, [r3, #0]
 800becc:	2b00      	cmp	r3, #0
 800bece:	d101      	bne.n	800bed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800bed0:	f000 f920 	bl	800c114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800bed4:	4b59      	ldr	r3, [pc, #356]	; (800c03c <pvPortMalloc+0x184>)
 800bed6:	681a      	ldr	r2, [r3, #0]
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	4013      	ands	r3, r2
 800bedc:	2b00      	cmp	r3, #0
 800bede:	f040 8093 	bne.w	800c008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800bee2:	687b      	ldr	r3, [r7, #4]
 800bee4:	2b00      	cmp	r3, #0
 800bee6:	d01d      	beq.n	800bf24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800bee8:	2208      	movs	r2, #8
 800beea:	687b      	ldr	r3, [r7, #4]
 800beec:	4413      	add	r3, r2
 800beee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	f003 0307 	and.w	r3, r3, #7
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d014      	beq.n	800bf24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800befa:	687b      	ldr	r3, [r7, #4]
 800befc:	f023 0307 	bic.w	r3, r3, #7
 800bf00:	3308      	adds	r3, #8
 800bf02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf04:	687b      	ldr	r3, [r7, #4]
 800bf06:	f003 0307 	and.w	r3, r3, #7
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d00a      	beq.n	800bf24 <pvPortMalloc+0x6c>
	__asm volatile
 800bf0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf12:	f383 8811 	msr	BASEPRI, r3
 800bf16:	f3bf 8f6f 	isb	sy
 800bf1a:	f3bf 8f4f 	dsb	sy
 800bf1e:	617b      	str	r3, [r7, #20]
}
 800bf20:	bf00      	nop
 800bf22:	e7fe      	b.n	800bf22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800bf24:	687b      	ldr	r3, [r7, #4]
 800bf26:	2b00      	cmp	r3, #0
 800bf28:	d06e      	beq.n	800c008 <pvPortMalloc+0x150>
 800bf2a:	4b45      	ldr	r3, [pc, #276]	; (800c040 <pvPortMalloc+0x188>)
 800bf2c:	681b      	ldr	r3, [r3, #0]
 800bf2e:	687a      	ldr	r2, [r7, #4]
 800bf30:	429a      	cmp	r2, r3
 800bf32:	d869      	bhi.n	800c008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800bf34:	4b43      	ldr	r3, [pc, #268]	; (800c044 <pvPortMalloc+0x18c>)
 800bf36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800bf38:	4b42      	ldr	r3, [pc, #264]	; (800c044 <pvPortMalloc+0x18c>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf3e:	e004      	b.n	800bf4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800bf40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800bf44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf46:	681b      	ldr	r3, [r3, #0]
 800bf48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800bf4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4c:	685b      	ldr	r3, [r3, #4]
 800bf4e:	687a      	ldr	r2, [r7, #4]
 800bf50:	429a      	cmp	r2, r3
 800bf52:	d903      	bls.n	800bf5c <pvPortMalloc+0xa4>
 800bf54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf56:	681b      	ldr	r3, [r3, #0]
 800bf58:	2b00      	cmp	r3, #0
 800bf5a:	d1f1      	bne.n	800bf40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800bf5c:	4b36      	ldr	r3, [pc, #216]	; (800c038 <pvPortMalloc+0x180>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf62:	429a      	cmp	r2, r3
 800bf64:	d050      	beq.n	800c008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800bf66:	6a3b      	ldr	r3, [r7, #32]
 800bf68:	681b      	ldr	r3, [r3, #0]
 800bf6a:	2208      	movs	r2, #8
 800bf6c:	4413      	add	r3, r2
 800bf6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800bf70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf72:	681a      	ldr	r2, [r3, #0]
 800bf74:	6a3b      	ldr	r3, [r7, #32]
 800bf76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800bf78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf7a:	685a      	ldr	r2, [r3, #4]
 800bf7c:	687b      	ldr	r3, [r7, #4]
 800bf7e:	1ad2      	subs	r2, r2, r3
 800bf80:	2308      	movs	r3, #8
 800bf82:	005b      	lsls	r3, r3, #1
 800bf84:	429a      	cmp	r2, r3
 800bf86:	d91f      	bls.n	800bfc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800bf88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	4413      	add	r3, r2
 800bf8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800bf90:	69bb      	ldr	r3, [r7, #24]
 800bf92:	f003 0307 	and.w	r3, r3, #7
 800bf96:	2b00      	cmp	r3, #0
 800bf98:	d00a      	beq.n	800bfb0 <pvPortMalloc+0xf8>
	__asm volatile
 800bf9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf9e:	f383 8811 	msr	BASEPRI, r3
 800bfa2:	f3bf 8f6f 	isb	sy
 800bfa6:	f3bf 8f4f 	dsb	sy
 800bfaa:	613b      	str	r3, [r7, #16]
}
 800bfac:	bf00      	nop
 800bfae:	e7fe      	b.n	800bfae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800bfb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfb2:	685a      	ldr	r2, [r3, #4]
 800bfb4:	687b      	ldr	r3, [r7, #4]
 800bfb6:	1ad2      	subs	r2, r2, r3
 800bfb8:	69bb      	ldr	r3, [r7, #24]
 800bfba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800bfbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfbe:	687a      	ldr	r2, [r7, #4]
 800bfc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800bfc2:	69b8      	ldr	r0, [r7, #24]
 800bfc4:	f000 f908 	bl	800c1d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800bfc8:	4b1d      	ldr	r3, [pc, #116]	; (800c040 <pvPortMalloc+0x188>)
 800bfca:	681a      	ldr	r2, [r3, #0]
 800bfcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfce:	685b      	ldr	r3, [r3, #4]
 800bfd0:	1ad3      	subs	r3, r2, r3
 800bfd2:	4a1b      	ldr	r2, [pc, #108]	; (800c040 <pvPortMalloc+0x188>)
 800bfd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800bfd6:	4b1a      	ldr	r3, [pc, #104]	; (800c040 <pvPortMalloc+0x188>)
 800bfd8:	681a      	ldr	r2, [r3, #0]
 800bfda:	4b1b      	ldr	r3, [pc, #108]	; (800c048 <pvPortMalloc+0x190>)
 800bfdc:	681b      	ldr	r3, [r3, #0]
 800bfde:	429a      	cmp	r2, r3
 800bfe0:	d203      	bcs.n	800bfea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800bfe2:	4b17      	ldr	r3, [pc, #92]	; (800c040 <pvPortMalloc+0x188>)
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a18      	ldr	r2, [pc, #96]	; (800c048 <pvPortMalloc+0x190>)
 800bfe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800bfea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	4b13      	ldr	r3, [pc, #76]	; (800c03c <pvPortMalloc+0x184>)
 800bff0:	681b      	ldr	r3, [r3, #0]
 800bff2:	431a      	orrs	r2, r3
 800bff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800bff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bffa:	2200      	movs	r2, #0
 800bffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800bffe:	4b13      	ldr	r3, [pc, #76]	; (800c04c <pvPortMalloc+0x194>)
 800c000:	681b      	ldr	r3, [r3, #0]
 800c002:	3301      	adds	r3, #1
 800c004:	4a11      	ldr	r2, [pc, #68]	; (800c04c <pvPortMalloc+0x194>)
 800c006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c008:	f7fe fbf0 	bl	800a7ec <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c00c:	69fb      	ldr	r3, [r7, #28]
 800c00e:	f003 0307 	and.w	r3, r3, #7
 800c012:	2b00      	cmp	r3, #0
 800c014:	d00a      	beq.n	800c02c <pvPortMalloc+0x174>
	__asm volatile
 800c016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c01a:	f383 8811 	msr	BASEPRI, r3
 800c01e:	f3bf 8f6f 	isb	sy
 800c022:	f3bf 8f4f 	dsb	sy
 800c026:	60fb      	str	r3, [r7, #12]
}
 800c028:	bf00      	nop
 800c02a:	e7fe      	b.n	800c02a <pvPortMalloc+0x172>
	return pvReturn;
 800c02c:	69fb      	ldr	r3, [r7, #28]
}
 800c02e:	4618      	mov	r0, r3
 800c030:	3728      	adds	r7, #40	; 0x28
 800c032:	46bd      	mov	sp, r7
 800c034:	bd80      	pop	{r7, pc}
 800c036:	bf00      	nop
 800c038:	20001d2c 	.word	0x20001d2c
 800c03c:	20001d40 	.word	0x20001d40
 800c040:	20001d30 	.word	0x20001d30
 800c044:	20001d24 	.word	0x20001d24
 800c048:	20001d34 	.word	0x20001d34
 800c04c:	20001d38 	.word	0x20001d38

0800c050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c050:	b580      	push	{r7, lr}
 800c052:	b086      	sub	sp, #24
 800c054:	af00      	add	r7, sp, #0
 800c056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d04d      	beq.n	800c0fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c062:	2308      	movs	r3, #8
 800c064:	425b      	negs	r3, r3
 800c066:	697a      	ldr	r2, [r7, #20]
 800c068:	4413      	add	r3, r2
 800c06a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c06c:	697b      	ldr	r3, [r7, #20]
 800c06e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c070:	693b      	ldr	r3, [r7, #16]
 800c072:	685a      	ldr	r2, [r3, #4]
 800c074:	4b24      	ldr	r3, [pc, #144]	; (800c108 <vPortFree+0xb8>)
 800c076:	681b      	ldr	r3, [r3, #0]
 800c078:	4013      	ands	r3, r2
 800c07a:	2b00      	cmp	r3, #0
 800c07c:	d10a      	bne.n	800c094 <vPortFree+0x44>
	__asm volatile
 800c07e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c082:	f383 8811 	msr	BASEPRI, r3
 800c086:	f3bf 8f6f 	isb	sy
 800c08a:	f3bf 8f4f 	dsb	sy
 800c08e:	60fb      	str	r3, [r7, #12]
}
 800c090:	bf00      	nop
 800c092:	e7fe      	b.n	800c092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c094:	693b      	ldr	r3, [r7, #16]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d00a      	beq.n	800c0b2 <vPortFree+0x62>
	__asm volatile
 800c09c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0a0:	f383 8811 	msr	BASEPRI, r3
 800c0a4:	f3bf 8f6f 	isb	sy
 800c0a8:	f3bf 8f4f 	dsb	sy
 800c0ac:	60bb      	str	r3, [r7, #8]
}
 800c0ae:	bf00      	nop
 800c0b0:	e7fe      	b.n	800c0b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800c0b2:	693b      	ldr	r3, [r7, #16]
 800c0b4:	685a      	ldr	r2, [r3, #4]
 800c0b6:	4b14      	ldr	r3, [pc, #80]	; (800c108 <vPortFree+0xb8>)
 800c0b8:	681b      	ldr	r3, [r3, #0]
 800c0ba:	4013      	ands	r3, r2
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	d01e      	beq.n	800c0fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800c0c0:	693b      	ldr	r3, [r7, #16]
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	d11a      	bne.n	800c0fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c0c8:	693b      	ldr	r3, [r7, #16]
 800c0ca:	685a      	ldr	r2, [r3, #4]
 800c0cc:	4b0e      	ldr	r3, [pc, #56]	; (800c108 <vPortFree+0xb8>)
 800c0ce:	681b      	ldr	r3, [r3, #0]
 800c0d0:	43db      	mvns	r3, r3
 800c0d2:	401a      	ands	r2, r3
 800c0d4:	693b      	ldr	r3, [r7, #16]
 800c0d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800c0d8:	f7fe fb7a 	bl	800a7d0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c0dc:	693b      	ldr	r3, [r7, #16]
 800c0de:	685a      	ldr	r2, [r3, #4]
 800c0e0:	4b0a      	ldr	r3, [pc, #40]	; (800c10c <vPortFree+0xbc>)
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	4413      	add	r3, r2
 800c0e6:	4a09      	ldr	r2, [pc, #36]	; (800c10c <vPortFree+0xbc>)
 800c0e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c0ea:	6938      	ldr	r0, [r7, #16]
 800c0ec:	f000 f874 	bl	800c1d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c0f0:	4b07      	ldr	r3, [pc, #28]	; (800c110 <vPortFree+0xc0>)
 800c0f2:	681b      	ldr	r3, [r3, #0]
 800c0f4:	3301      	adds	r3, #1
 800c0f6:	4a06      	ldr	r2, [pc, #24]	; (800c110 <vPortFree+0xc0>)
 800c0f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800c0fa:	f7fe fb77 	bl	800a7ec <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800c0fe:	bf00      	nop
 800c100:	3718      	adds	r7, #24
 800c102:	46bd      	mov	sp, r7
 800c104:	bd80      	pop	{r7, pc}
 800c106:	bf00      	nop
 800c108:	20001d40 	.word	0x20001d40
 800c10c:	20001d30 	.word	0x20001d30
 800c110:	20001d3c 	.word	0x20001d3c

0800c114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c11a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800c11e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800c120:	4b27      	ldr	r3, [pc, #156]	; (800c1c0 <prvHeapInit+0xac>)
 800c122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c124:	68fb      	ldr	r3, [r7, #12]
 800c126:	f003 0307 	and.w	r3, r3, #7
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00c      	beq.n	800c148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c12e:	68fb      	ldr	r3, [r7, #12]
 800c130:	3307      	adds	r3, #7
 800c132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c134:	68fb      	ldr	r3, [r7, #12]
 800c136:	f023 0307 	bic.w	r3, r3, #7
 800c13a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c13c:	68ba      	ldr	r2, [r7, #8]
 800c13e:	68fb      	ldr	r3, [r7, #12]
 800c140:	1ad3      	subs	r3, r2, r3
 800c142:	4a1f      	ldr	r2, [pc, #124]	; (800c1c0 <prvHeapInit+0xac>)
 800c144:	4413      	add	r3, r2
 800c146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800c148:	68fb      	ldr	r3, [r7, #12]
 800c14a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c14c:	4a1d      	ldr	r2, [pc, #116]	; (800c1c4 <prvHeapInit+0xb0>)
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800c152:	4b1c      	ldr	r3, [pc, #112]	; (800c1c4 <prvHeapInit+0xb0>)
 800c154:	2200      	movs	r2, #0
 800c156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c158:	687b      	ldr	r3, [r7, #4]
 800c15a:	68ba      	ldr	r2, [r7, #8]
 800c15c:	4413      	add	r3, r2
 800c15e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800c160:	2208      	movs	r2, #8
 800c162:	68fb      	ldr	r3, [r7, #12]
 800c164:	1a9b      	subs	r3, r3, r2
 800c166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	f023 0307 	bic.w	r3, r3, #7
 800c16e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	4a15      	ldr	r2, [pc, #84]	; (800c1c8 <prvHeapInit+0xb4>)
 800c174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800c176:	4b14      	ldr	r3, [pc, #80]	; (800c1c8 <prvHeapInit+0xb4>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	2200      	movs	r2, #0
 800c17c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800c17e:	4b12      	ldr	r3, [pc, #72]	; (800c1c8 <prvHeapInit+0xb4>)
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2200      	movs	r2, #0
 800c184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800c186:	687b      	ldr	r3, [r7, #4]
 800c188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c18a:	683b      	ldr	r3, [r7, #0]
 800c18c:	68fa      	ldr	r2, [r7, #12]
 800c18e:	1ad2      	subs	r2, r2, r3
 800c190:	683b      	ldr	r3, [r7, #0]
 800c192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c194:	4b0c      	ldr	r3, [pc, #48]	; (800c1c8 <prvHeapInit+0xb4>)
 800c196:	681a      	ldr	r2, [r3, #0]
 800c198:	683b      	ldr	r3, [r7, #0]
 800c19a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c19c:	683b      	ldr	r3, [r7, #0]
 800c19e:	685b      	ldr	r3, [r3, #4]
 800c1a0:	4a0a      	ldr	r2, [pc, #40]	; (800c1cc <prvHeapInit+0xb8>)
 800c1a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c1a4:	683b      	ldr	r3, [r7, #0]
 800c1a6:	685b      	ldr	r3, [r3, #4]
 800c1a8:	4a09      	ldr	r2, [pc, #36]	; (800c1d0 <prvHeapInit+0xbc>)
 800c1aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c1ac:	4b09      	ldr	r3, [pc, #36]	; (800c1d4 <prvHeapInit+0xc0>)
 800c1ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800c1b2:	601a      	str	r2, [r3, #0]
}
 800c1b4:	bf00      	nop
 800c1b6:	3714      	adds	r7, #20
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1be:	4770      	bx	lr
 800c1c0:	2000116c 	.word	0x2000116c
 800c1c4:	20001d24 	.word	0x20001d24
 800c1c8:	20001d2c 	.word	0x20001d2c
 800c1cc:	20001d34 	.word	0x20001d34
 800c1d0:	20001d30 	.word	0x20001d30
 800c1d4:	20001d40 	.word	0x20001d40

0800c1d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800c1d8:	b480      	push	{r7}
 800c1da:	b085      	sub	sp, #20
 800c1dc:	af00      	add	r7, sp, #0
 800c1de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c1e0:	4b28      	ldr	r3, [pc, #160]	; (800c284 <prvInsertBlockIntoFreeList+0xac>)
 800c1e2:	60fb      	str	r3, [r7, #12]
 800c1e4:	e002      	b.n	800c1ec <prvInsertBlockIntoFreeList+0x14>
 800c1e6:	68fb      	ldr	r3, [r7, #12]
 800c1e8:	681b      	ldr	r3, [r3, #0]
 800c1ea:	60fb      	str	r3, [r7, #12]
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	681b      	ldr	r3, [r3, #0]
 800c1f0:	687a      	ldr	r2, [r7, #4]
 800c1f2:	429a      	cmp	r2, r3
 800c1f4:	d8f7      	bhi.n	800c1e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800c1f6:	68fb      	ldr	r3, [r7, #12]
 800c1f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c1fa:	68fb      	ldr	r3, [r7, #12]
 800c1fc:	685b      	ldr	r3, [r3, #4]
 800c1fe:	68ba      	ldr	r2, [r7, #8]
 800c200:	4413      	add	r3, r2
 800c202:	687a      	ldr	r2, [r7, #4]
 800c204:	429a      	cmp	r2, r3
 800c206:	d108      	bne.n	800c21a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	685a      	ldr	r2, [r3, #4]
 800c20c:	687b      	ldr	r3, [r7, #4]
 800c20e:	685b      	ldr	r3, [r3, #4]
 800c210:	441a      	add	r2, r3
 800c212:	68fb      	ldr	r3, [r7, #12]
 800c214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800c216:	68fb      	ldr	r3, [r7, #12]
 800c218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800c21a:	687b      	ldr	r3, [r7, #4]
 800c21c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c21e:	687b      	ldr	r3, [r7, #4]
 800c220:	685b      	ldr	r3, [r3, #4]
 800c222:	68ba      	ldr	r2, [r7, #8]
 800c224:	441a      	add	r2, r3
 800c226:	68fb      	ldr	r3, [r7, #12]
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	429a      	cmp	r2, r3
 800c22c:	d118      	bne.n	800c260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c22e:	68fb      	ldr	r3, [r7, #12]
 800c230:	681a      	ldr	r2, [r3, #0]
 800c232:	4b15      	ldr	r3, [pc, #84]	; (800c288 <prvInsertBlockIntoFreeList+0xb0>)
 800c234:	681b      	ldr	r3, [r3, #0]
 800c236:	429a      	cmp	r2, r3
 800c238:	d00d      	beq.n	800c256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	685a      	ldr	r2, [r3, #4]
 800c23e:	68fb      	ldr	r3, [r7, #12]
 800c240:	681b      	ldr	r3, [r3, #0]
 800c242:	685b      	ldr	r3, [r3, #4]
 800c244:	441a      	add	r2, r3
 800c246:	687b      	ldr	r3, [r7, #4]
 800c248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c24a:	68fb      	ldr	r3, [r7, #12]
 800c24c:	681b      	ldr	r3, [r3, #0]
 800c24e:	681a      	ldr	r2, [r3, #0]
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	601a      	str	r2, [r3, #0]
 800c254:	e008      	b.n	800c268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c256:	4b0c      	ldr	r3, [pc, #48]	; (800c288 <prvInsertBlockIntoFreeList+0xb0>)
 800c258:	681a      	ldr	r2, [r3, #0]
 800c25a:	687b      	ldr	r3, [r7, #4]
 800c25c:	601a      	str	r2, [r3, #0]
 800c25e:	e003      	b.n	800c268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800c260:	68fb      	ldr	r3, [r7, #12]
 800c262:	681a      	ldr	r2, [r3, #0]
 800c264:	687b      	ldr	r3, [r7, #4]
 800c266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c268:	68fa      	ldr	r2, [r7, #12]
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	429a      	cmp	r2, r3
 800c26e:	d002      	beq.n	800c276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c270:	68fb      	ldr	r3, [r7, #12]
 800c272:	687a      	ldr	r2, [r7, #4]
 800c274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c276:	bf00      	nop
 800c278:	3714      	adds	r7, #20
 800c27a:	46bd      	mov	sp, r7
 800c27c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c280:	4770      	bx	lr
 800c282:	bf00      	nop
 800c284:	20001d24 	.word	0x20001d24
 800c288:	20001d2c 	.word	0x20001d2c

0800c28c <__errno>:
 800c28c:	4b01      	ldr	r3, [pc, #4]	; (800c294 <__errno+0x8>)
 800c28e:	6818      	ldr	r0, [r3, #0]
 800c290:	4770      	bx	lr
 800c292:	bf00      	nop
 800c294:	20000044 	.word	0x20000044

0800c298 <__libc_init_array>:
 800c298:	b570      	push	{r4, r5, r6, lr}
 800c29a:	4d0d      	ldr	r5, [pc, #52]	; (800c2d0 <__libc_init_array+0x38>)
 800c29c:	4c0d      	ldr	r4, [pc, #52]	; (800c2d4 <__libc_init_array+0x3c>)
 800c29e:	1b64      	subs	r4, r4, r5
 800c2a0:	10a4      	asrs	r4, r4, #2
 800c2a2:	2600      	movs	r6, #0
 800c2a4:	42a6      	cmp	r6, r4
 800c2a6:	d109      	bne.n	800c2bc <__libc_init_array+0x24>
 800c2a8:	4d0b      	ldr	r5, [pc, #44]	; (800c2d8 <__libc_init_array+0x40>)
 800c2aa:	4c0c      	ldr	r4, [pc, #48]	; (800c2dc <__libc_init_array+0x44>)
 800c2ac:	f002 f822 	bl	800e2f4 <_init>
 800c2b0:	1b64      	subs	r4, r4, r5
 800c2b2:	10a4      	asrs	r4, r4, #2
 800c2b4:	2600      	movs	r6, #0
 800c2b6:	42a6      	cmp	r6, r4
 800c2b8:	d105      	bne.n	800c2c6 <__libc_init_array+0x2e>
 800c2ba:	bd70      	pop	{r4, r5, r6, pc}
 800c2bc:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2c0:	4798      	blx	r3
 800c2c2:	3601      	adds	r6, #1
 800c2c4:	e7ee      	b.n	800c2a4 <__libc_init_array+0xc>
 800c2c6:	f855 3b04 	ldr.w	r3, [r5], #4
 800c2ca:	4798      	blx	r3
 800c2cc:	3601      	adds	r6, #1
 800c2ce:	e7f2      	b.n	800c2b6 <__libc_init_array+0x1e>
 800c2d0:	0800ebc0 	.word	0x0800ebc0
 800c2d4:	0800ebc0 	.word	0x0800ebc0
 800c2d8:	0800ebc0 	.word	0x0800ebc0
 800c2dc:	0800ebc4 	.word	0x0800ebc4

0800c2e0 <__retarget_lock_acquire_recursive>:
 800c2e0:	4770      	bx	lr

0800c2e2 <__retarget_lock_release_recursive>:
 800c2e2:	4770      	bx	lr

0800c2e4 <memcpy>:
 800c2e4:	440a      	add	r2, r1
 800c2e6:	4291      	cmp	r1, r2
 800c2e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2ec:	d100      	bne.n	800c2f0 <memcpy+0xc>
 800c2ee:	4770      	bx	lr
 800c2f0:	b510      	push	{r4, lr}
 800c2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2fa:	4291      	cmp	r1, r2
 800c2fc:	d1f9      	bne.n	800c2f2 <memcpy+0xe>
 800c2fe:	bd10      	pop	{r4, pc}

0800c300 <memset>:
 800c300:	4402      	add	r2, r0
 800c302:	4603      	mov	r3, r0
 800c304:	4293      	cmp	r3, r2
 800c306:	d100      	bne.n	800c30a <memset+0xa>
 800c308:	4770      	bx	lr
 800c30a:	f803 1b01 	strb.w	r1, [r3], #1
 800c30e:	e7f9      	b.n	800c304 <memset+0x4>

0800c310 <cleanup_glue>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	460c      	mov	r4, r1
 800c314:	6809      	ldr	r1, [r1, #0]
 800c316:	4605      	mov	r5, r0
 800c318:	b109      	cbz	r1, 800c31e <cleanup_glue+0xe>
 800c31a:	f7ff fff9 	bl	800c310 <cleanup_glue>
 800c31e:	4621      	mov	r1, r4
 800c320:	4628      	mov	r0, r5
 800c322:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c326:	f000 b869 	b.w	800c3fc <_free_r>
	...

0800c32c <_reclaim_reent>:
 800c32c:	4b2c      	ldr	r3, [pc, #176]	; (800c3e0 <_reclaim_reent+0xb4>)
 800c32e:	681b      	ldr	r3, [r3, #0]
 800c330:	4283      	cmp	r3, r0
 800c332:	b570      	push	{r4, r5, r6, lr}
 800c334:	4604      	mov	r4, r0
 800c336:	d051      	beq.n	800c3dc <_reclaim_reent+0xb0>
 800c338:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c33a:	b143      	cbz	r3, 800c34e <_reclaim_reent+0x22>
 800c33c:	68db      	ldr	r3, [r3, #12]
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d14a      	bne.n	800c3d8 <_reclaim_reent+0xac>
 800c342:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c344:	6819      	ldr	r1, [r3, #0]
 800c346:	b111      	cbz	r1, 800c34e <_reclaim_reent+0x22>
 800c348:	4620      	mov	r0, r4
 800c34a:	f000 f857 	bl	800c3fc <_free_r>
 800c34e:	6961      	ldr	r1, [r4, #20]
 800c350:	b111      	cbz	r1, 800c358 <_reclaim_reent+0x2c>
 800c352:	4620      	mov	r0, r4
 800c354:	f000 f852 	bl	800c3fc <_free_r>
 800c358:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c35a:	b111      	cbz	r1, 800c362 <_reclaim_reent+0x36>
 800c35c:	4620      	mov	r0, r4
 800c35e:	f000 f84d 	bl	800c3fc <_free_r>
 800c362:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c364:	b111      	cbz	r1, 800c36c <_reclaim_reent+0x40>
 800c366:	4620      	mov	r0, r4
 800c368:	f000 f848 	bl	800c3fc <_free_r>
 800c36c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c36e:	b111      	cbz	r1, 800c376 <_reclaim_reent+0x4a>
 800c370:	4620      	mov	r0, r4
 800c372:	f000 f843 	bl	800c3fc <_free_r>
 800c376:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c378:	b111      	cbz	r1, 800c380 <_reclaim_reent+0x54>
 800c37a:	4620      	mov	r0, r4
 800c37c:	f000 f83e 	bl	800c3fc <_free_r>
 800c380:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c382:	b111      	cbz	r1, 800c38a <_reclaim_reent+0x5e>
 800c384:	4620      	mov	r0, r4
 800c386:	f000 f839 	bl	800c3fc <_free_r>
 800c38a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c38c:	b111      	cbz	r1, 800c394 <_reclaim_reent+0x68>
 800c38e:	4620      	mov	r0, r4
 800c390:	f000 f834 	bl	800c3fc <_free_r>
 800c394:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c396:	b111      	cbz	r1, 800c39e <_reclaim_reent+0x72>
 800c398:	4620      	mov	r0, r4
 800c39a:	f000 f82f 	bl	800c3fc <_free_r>
 800c39e:	69a3      	ldr	r3, [r4, #24]
 800c3a0:	b1e3      	cbz	r3, 800c3dc <_reclaim_reent+0xb0>
 800c3a2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c3a4:	4620      	mov	r0, r4
 800c3a6:	4798      	blx	r3
 800c3a8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c3aa:	b1b9      	cbz	r1, 800c3dc <_reclaim_reent+0xb0>
 800c3ac:	4620      	mov	r0, r4
 800c3ae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c3b2:	f7ff bfad 	b.w	800c310 <cleanup_glue>
 800c3b6:	5949      	ldr	r1, [r1, r5]
 800c3b8:	b941      	cbnz	r1, 800c3cc <_reclaim_reent+0xa0>
 800c3ba:	3504      	adds	r5, #4
 800c3bc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c3be:	2d80      	cmp	r5, #128	; 0x80
 800c3c0:	68d9      	ldr	r1, [r3, #12]
 800c3c2:	d1f8      	bne.n	800c3b6 <_reclaim_reent+0x8a>
 800c3c4:	4620      	mov	r0, r4
 800c3c6:	f000 f819 	bl	800c3fc <_free_r>
 800c3ca:	e7ba      	b.n	800c342 <_reclaim_reent+0x16>
 800c3cc:	680e      	ldr	r6, [r1, #0]
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f000 f814 	bl	800c3fc <_free_r>
 800c3d4:	4631      	mov	r1, r6
 800c3d6:	e7ef      	b.n	800c3b8 <_reclaim_reent+0x8c>
 800c3d8:	2500      	movs	r5, #0
 800c3da:	e7ef      	b.n	800c3bc <_reclaim_reent+0x90>
 800c3dc:	bd70      	pop	{r4, r5, r6, pc}
 800c3de:	bf00      	nop
 800c3e0:	20000044 	.word	0x20000044

0800c3e4 <__malloc_lock>:
 800c3e4:	4801      	ldr	r0, [pc, #4]	; (800c3ec <__malloc_lock+0x8>)
 800c3e6:	f7ff bf7b 	b.w	800c2e0 <__retarget_lock_acquire_recursive>
 800c3ea:	bf00      	nop
 800c3ec:	20001d44 	.word	0x20001d44

0800c3f0 <__malloc_unlock>:
 800c3f0:	4801      	ldr	r0, [pc, #4]	; (800c3f8 <__malloc_unlock+0x8>)
 800c3f2:	f7ff bf76 	b.w	800c2e2 <__retarget_lock_release_recursive>
 800c3f6:	bf00      	nop
 800c3f8:	20001d44 	.word	0x20001d44

0800c3fc <_free_r>:
 800c3fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c3fe:	2900      	cmp	r1, #0
 800c400:	d044      	beq.n	800c48c <_free_r+0x90>
 800c402:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c406:	9001      	str	r0, [sp, #4]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f1a1 0404 	sub.w	r4, r1, #4
 800c40e:	bfb8      	it	lt
 800c410:	18e4      	addlt	r4, r4, r3
 800c412:	f7ff ffe7 	bl	800c3e4 <__malloc_lock>
 800c416:	4a1e      	ldr	r2, [pc, #120]	; (800c490 <_free_r+0x94>)
 800c418:	9801      	ldr	r0, [sp, #4]
 800c41a:	6813      	ldr	r3, [r2, #0]
 800c41c:	b933      	cbnz	r3, 800c42c <_free_r+0x30>
 800c41e:	6063      	str	r3, [r4, #4]
 800c420:	6014      	str	r4, [r2, #0]
 800c422:	b003      	add	sp, #12
 800c424:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800c428:	f7ff bfe2 	b.w	800c3f0 <__malloc_unlock>
 800c42c:	42a3      	cmp	r3, r4
 800c42e:	d908      	bls.n	800c442 <_free_r+0x46>
 800c430:	6825      	ldr	r5, [r4, #0]
 800c432:	1961      	adds	r1, r4, r5
 800c434:	428b      	cmp	r3, r1
 800c436:	bf01      	itttt	eq
 800c438:	6819      	ldreq	r1, [r3, #0]
 800c43a:	685b      	ldreq	r3, [r3, #4]
 800c43c:	1949      	addeq	r1, r1, r5
 800c43e:	6021      	streq	r1, [r4, #0]
 800c440:	e7ed      	b.n	800c41e <_free_r+0x22>
 800c442:	461a      	mov	r2, r3
 800c444:	685b      	ldr	r3, [r3, #4]
 800c446:	b10b      	cbz	r3, 800c44c <_free_r+0x50>
 800c448:	42a3      	cmp	r3, r4
 800c44a:	d9fa      	bls.n	800c442 <_free_r+0x46>
 800c44c:	6811      	ldr	r1, [r2, #0]
 800c44e:	1855      	adds	r5, r2, r1
 800c450:	42a5      	cmp	r5, r4
 800c452:	d10b      	bne.n	800c46c <_free_r+0x70>
 800c454:	6824      	ldr	r4, [r4, #0]
 800c456:	4421      	add	r1, r4
 800c458:	1854      	adds	r4, r2, r1
 800c45a:	42a3      	cmp	r3, r4
 800c45c:	6011      	str	r1, [r2, #0]
 800c45e:	d1e0      	bne.n	800c422 <_free_r+0x26>
 800c460:	681c      	ldr	r4, [r3, #0]
 800c462:	685b      	ldr	r3, [r3, #4]
 800c464:	6053      	str	r3, [r2, #4]
 800c466:	4421      	add	r1, r4
 800c468:	6011      	str	r1, [r2, #0]
 800c46a:	e7da      	b.n	800c422 <_free_r+0x26>
 800c46c:	d902      	bls.n	800c474 <_free_r+0x78>
 800c46e:	230c      	movs	r3, #12
 800c470:	6003      	str	r3, [r0, #0]
 800c472:	e7d6      	b.n	800c422 <_free_r+0x26>
 800c474:	6825      	ldr	r5, [r4, #0]
 800c476:	1961      	adds	r1, r4, r5
 800c478:	428b      	cmp	r3, r1
 800c47a:	bf04      	itt	eq
 800c47c:	6819      	ldreq	r1, [r3, #0]
 800c47e:	685b      	ldreq	r3, [r3, #4]
 800c480:	6063      	str	r3, [r4, #4]
 800c482:	bf04      	itt	eq
 800c484:	1949      	addeq	r1, r1, r5
 800c486:	6021      	streq	r1, [r4, #0]
 800c488:	6054      	str	r4, [r2, #4]
 800c48a:	e7ca      	b.n	800c422 <_free_r+0x26>
 800c48c:	b003      	add	sp, #12
 800c48e:	bd30      	pop	{r4, r5, pc}
 800c490:	20001d48 	.word	0x20001d48
 800c494:	00000000 	.word	0x00000000

0800c498 <cos>:
 800c498:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c49a:	ec53 2b10 	vmov	r2, r3, d0
 800c49e:	4826      	ldr	r0, [pc, #152]	; (800c538 <cos+0xa0>)
 800c4a0:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c4a4:	4281      	cmp	r1, r0
 800c4a6:	dc06      	bgt.n	800c4b6 <cos+0x1e>
 800c4a8:	ed9f 1b21 	vldr	d1, [pc, #132]	; 800c530 <cos+0x98>
 800c4ac:	b005      	add	sp, #20
 800c4ae:	f85d eb04 	ldr.w	lr, [sp], #4
 800c4b2:	f001 b8fd 	b.w	800d6b0 <__kernel_cos>
 800c4b6:	4821      	ldr	r0, [pc, #132]	; (800c53c <cos+0xa4>)
 800c4b8:	4281      	cmp	r1, r0
 800c4ba:	dd09      	ble.n	800c4d0 <cos+0x38>
 800c4bc:	ee10 0a10 	vmov	r0, s0
 800c4c0:	4619      	mov	r1, r3
 800c4c2:	f7f3 fe91 	bl	80001e8 <__aeabi_dsub>
 800c4c6:	ec41 0b10 	vmov	d0, r0, r1
 800c4ca:	b005      	add	sp, #20
 800c4cc:	f85d fb04 	ldr.w	pc, [sp], #4
 800c4d0:	4668      	mov	r0, sp
 800c4d2:	f000 fe2d 	bl	800d130 <__ieee754_rem_pio2>
 800c4d6:	f000 0003 	and.w	r0, r0, #3
 800c4da:	2801      	cmp	r0, #1
 800c4dc:	d00b      	beq.n	800c4f6 <cos+0x5e>
 800c4de:	2802      	cmp	r0, #2
 800c4e0:	d016      	beq.n	800c510 <cos+0x78>
 800c4e2:	b9e0      	cbnz	r0, 800c51e <cos+0x86>
 800c4e4:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4e8:	ed9d 0b00 	vldr	d0, [sp]
 800c4ec:	f001 f8e0 	bl	800d6b0 <__kernel_cos>
 800c4f0:	ec51 0b10 	vmov	r0, r1, d0
 800c4f4:	e7e7      	b.n	800c4c6 <cos+0x2e>
 800c4f6:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c4fa:	ed9d 0b00 	vldr	d0, [sp]
 800c4fe:	f001 fcef 	bl	800dee0 <__kernel_sin>
 800c502:	ec53 2b10 	vmov	r2, r3, d0
 800c506:	ee10 0a10 	vmov	r0, s0
 800c50a:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c50e:	e7da      	b.n	800c4c6 <cos+0x2e>
 800c510:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c514:	ed9d 0b00 	vldr	d0, [sp]
 800c518:	f001 f8ca 	bl	800d6b0 <__kernel_cos>
 800c51c:	e7f1      	b.n	800c502 <cos+0x6a>
 800c51e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c522:	ed9d 0b00 	vldr	d0, [sp]
 800c526:	2001      	movs	r0, #1
 800c528:	f001 fcda 	bl	800dee0 <__kernel_sin>
 800c52c:	e7e0      	b.n	800c4f0 <cos+0x58>
 800c52e:	bf00      	nop
	...
 800c538:	3fe921fb 	.word	0x3fe921fb
 800c53c:	7fefffff 	.word	0x7fefffff

0800c540 <sin>:
 800c540:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c542:	ec53 2b10 	vmov	r2, r3, d0
 800c546:	4828      	ldr	r0, [pc, #160]	; (800c5e8 <sin+0xa8>)
 800c548:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800c54c:	4281      	cmp	r1, r0
 800c54e:	dc07      	bgt.n	800c560 <sin+0x20>
 800c550:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800c5e0 <sin+0xa0>
 800c554:	2000      	movs	r0, #0
 800c556:	b005      	add	sp, #20
 800c558:	f85d eb04 	ldr.w	lr, [sp], #4
 800c55c:	f001 bcc0 	b.w	800dee0 <__kernel_sin>
 800c560:	4822      	ldr	r0, [pc, #136]	; (800c5ec <sin+0xac>)
 800c562:	4281      	cmp	r1, r0
 800c564:	dd09      	ble.n	800c57a <sin+0x3a>
 800c566:	ee10 0a10 	vmov	r0, s0
 800c56a:	4619      	mov	r1, r3
 800c56c:	f7f3 fe3c 	bl	80001e8 <__aeabi_dsub>
 800c570:	ec41 0b10 	vmov	d0, r0, r1
 800c574:	b005      	add	sp, #20
 800c576:	f85d fb04 	ldr.w	pc, [sp], #4
 800c57a:	4668      	mov	r0, sp
 800c57c:	f000 fdd8 	bl	800d130 <__ieee754_rem_pio2>
 800c580:	f000 0003 	and.w	r0, r0, #3
 800c584:	2801      	cmp	r0, #1
 800c586:	d00c      	beq.n	800c5a2 <sin+0x62>
 800c588:	2802      	cmp	r0, #2
 800c58a:	d011      	beq.n	800c5b0 <sin+0x70>
 800c58c:	b9f0      	cbnz	r0, 800c5cc <sin+0x8c>
 800c58e:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c592:	ed9d 0b00 	vldr	d0, [sp]
 800c596:	2001      	movs	r0, #1
 800c598:	f001 fca2 	bl	800dee0 <__kernel_sin>
 800c59c:	ec51 0b10 	vmov	r0, r1, d0
 800c5a0:	e7e6      	b.n	800c570 <sin+0x30>
 800c5a2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c5a6:	ed9d 0b00 	vldr	d0, [sp]
 800c5aa:	f001 f881 	bl	800d6b0 <__kernel_cos>
 800c5ae:	e7f5      	b.n	800c59c <sin+0x5c>
 800c5b0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c5b4:	ed9d 0b00 	vldr	d0, [sp]
 800c5b8:	2001      	movs	r0, #1
 800c5ba:	f001 fc91 	bl	800dee0 <__kernel_sin>
 800c5be:	ec53 2b10 	vmov	r2, r3, d0
 800c5c2:	ee10 0a10 	vmov	r0, s0
 800c5c6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c5ca:	e7d1      	b.n	800c570 <sin+0x30>
 800c5cc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800c5d0:	ed9d 0b00 	vldr	d0, [sp]
 800c5d4:	f001 f86c 	bl	800d6b0 <__kernel_cos>
 800c5d8:	e7f1      	b.n	800c5be <sin+0x7e>
 800c5da:	bf00      	nop
 800c5dc:	f3af 8000 	nop.w
	...
 800c5e8:	3fe921fb 	.word	0x3fe921fb
 800c5ec:	7fefffff 	.word	0x7fefffff

0800c5f0 <pow>:
 800c5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5f2:	ed2d 8b02 	vpush	{d8}
 800c5f6:	eeb0 8a40 	vmov.f32	s16, s0
 800c5fa:	eef0 8a60 	vmov.f32	s17, s1
 800c5fe:	ec55 4b11 	vmov	r4, r5, d1
 800c602:	f000 f865 	bl	800c6d0 <__ieee754_pow>
 800c606:	4622      	mov	r2, r4
 800c608:	462b      	mov	r3, r5
 800c60a:	4620      	mov	r0, r4
 800c60c:	4629      	mov	r1, r5
 800c60e:	ec57 6b10 	vmov	r6, r7, d0
 800c612:	f7f4 fa3b 	bl	8000a8c <__aeabi_dcmpun>
 800c616:	2800      	cmp	r0, #0
 800c618:	d13b      	bne.n	800c692 <pow+0xa2>
 800c61a:	ec51 0b18 	vmov	r0, r1, d8
 800c61e:	2200      	movs	r2, #0
 800c620:	2300      	movs	r3, #0
 800c622:	f7f4 fa01 	bl	8000a28 <__aeabi_dcmpeq>
 800c626:	b1b8      	cbz	r0, 800c658 <pow+0x68>
 800c628:	2200      	movs	r2, #0
 800c62a:	2300      	movs	r3, #0
 800c62c:	4620      	mov	r0, r4
 800c62e:	4629      	mov	r1, r5
 800c630:	f7f4 f9fa 	bl	8000a28 <__aeabi_dcmpeq>
 800c634:	2800      	cmp	r0, #0
 800c636:	d146      	bne.n	800c6c6 <pow+0xd6>
 800c638:	ec45 4b10 	vmov	d0, r4, r5
 800c63c:	f001 fd47 	bl	800e0ce <finite>
 800c640:	b338      	cbz	r0, 800c692 <pow+0xa2>
 800c642:	2200      	movs	r2, #0
 800c644:	2300      	movs	r3, #0
 800c646:	4620      	mov	r0, r4
 800c648:	4629      	mov	r1, r5
 800c64a:	f7f4 f9f7 	bl	8000a3c <__aeabi_dcmplt>
 800c64e:	b300      	cbz	r0, 800c692 <pow+0xa2>
 800c650:	f7ff fe1c 	bl	800c28c <__errno>
 800c654:	2322      	movs	r3, #34	; 0x22
 800c656:	e01b      	b.n	800c690 <pow+0xa0>
 800c658:	ec47 6b10 	vmov	d0, r6, r7
 800c65c:	f001 fd37 	bl	800e0ce <finite>
 800c660:	b9e0      	cbnz	r0, 800c69c <pow+0xac>
 800c662:	eeb0 0a48 	vmov.f32	s0, s16
 800c666:	eef0 0a68 	vmov.f32	s1, s17
 800c66a:	f001 fd30 	bl	800e0ce <finite>
 800c66e:	b1a8      	cbz	r0, 800c69c <pow+0xac>
 800c670:	ec45 4b10 	vmov	d0, r4, r5
 800c674:	f001 fd2b 	bl	800e0ce <finite>
 800c678:	b180      	cbz	r0, 800c69c <pow+0xac>
 800c67a:	4632      	mov	r2, r6
 800c67c:	463b      	mov	r3, r7
 800c67e:	4630      	mov	r0, r6
 800c680:	4639      	mov	r1, r7
 800c682:	f7f4 fa03 	bl	8000a8c <__aeabi_dcmpun>
 800c686:	2800      	cmp	r0, #0
 800c688:	d0e2      	beq.n	800c650 <pow+0x60>
 800c68a:	f7ff fdff 	bl	800c28c <__errno>
 800c68e:	2321      	movs	r3, #33	; 0x21
 800c690:	6003      	str	r3, [r0, #0]
 800c692:	ecbd 8b02 	vpop	{d8}
 800c696:	ec47 6b10 	vmov	d0, r6, r7
 800c69a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c69c:	2200      	movs	r2, #0
 800c69e:	2300      	movs	r3, #0
 800c6a0:	4630      	mov	r0, r6
 800c6a2:	4639      	mov	r1, r7
 800c6a4:	f7f4 f9c0 	bl	8000a28 <__aeabi_dcmpeq>
 800c6a8:	2800      	cmp	r0, #0
 800c6aa:	d0f2      	beq.n	800c692 <pow+0xa2>
 800c6ac:	eeb0 0a48 	vmov.f32	s0, s16
 800c6b0:	eef0 0a68 	vmov.f32	s1, s17
 800c6b4:	f001 fd0b 	bl	800e0ce <finite>
 800c6b8:	2800      	cmp	r0, #0
 800c6ba:	d0ea      	beq.n	800c692 <pow+0xa2>
 800c6bc:	ec45 4b10 	vmov	d0, r4, r5
 800c6c0:	f001 fd05 	bl	800e0ce <finite>
 800c6c4:	e7c3      	b.n	800c64e <pow+0x5e>
 800c6c6:	4f01      	ldr	r7, [pc, #4]	; (800c6cc <pow+0xdc>)
 800c6c8:	2600      	movs	r6, #0
 800c6ca:	e7e2      	b.n	800c692 <pow+0xa2>
 800c6cc:	3ff00000 	.word	0x3ff00000

0800c6d0 <__ieee754_pow>:
 800c6d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6d4:	ed2d 8b06 	vpush	{d8-d10}
 800c6d8:	b089      	sub	sp, #36	; 0x24
 800c6da:	ed8d 1b00 	vstr	d1, [sp]
 800c6de:	e9dd 2900 	ldrd	r2, r9, [sp]
 800c6e2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800c6e6:	ea58 0102 	orrs.w	r1, r8, r2
 800c6ea:	ec57 6b10 	vmov	r6, r7, d0
 800c6ee:	d115      	bne.n	800c71c <__ieee754_pow+0x4c>
 800c6f0:	19b3      	adds	r3, r6, r6
 800c6f2:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800c6f6:	4152      	adcs	r2, r2
 800c6f8:	4299      	cmp	r1, r3
 800c6fa:	4b89      	ldr	r3, [pc, #548]	; (800c920 <__ieee754_pow+0x250>)
 800c6fc:	4193      	sbcs	r3, r2
 800c6fe:	f080 84d2 	bcs.w	800d0a6 <__ieee754_pow+0x9d6>
 800c702:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c706:	4630      	mov	r0, r6
 800c708:	4639      	mov	r1, r7
 800c70a:	f7f3 fd6f 	bl	80001ec <__adddf3>
 800c70e:	ec41 0b10 	vmov	d0, r0, r1
 800c712:	b009      	add	sp, #36	; 0x24
 800c714:	ecbd 8b06 	vpop	{d8-d10}
 800c718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c71c:	4b81      	ldr	r3, [pc, #516]	; (800c924 <__ieee754_pow+0x254>)
 800c71e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800c722:	429c      	cmp	r4, r3
 800c724:	ee10 aa10 	vmov	sl, s0
 800c728:	463d      	mov	r5, r7
 800c72a:	dc06      	bgt.n	800c73a <__ieee754_pow+0x6a>
 800c72c:	d101      	bne.n	800c732 <__ieee754_pow+0x62>
 800c72e:	2e00      	cmp	r6, #0
 800c730:	d1e7      	bne.n	800c702 <__ieee754_pow+0x32>
 800c732:	4598      	cmp	r8, r3
 800c734:	dc01      	bgt.n	800c73a <__ieee754_pow+0x6a>
 800c736:	d10f      	bne.n	800c758 <__ieee754_pow+0x88>
 800c738:	b172      	cbz	r2, 800c758 <__ieee754_pow+0x88>
 800c73a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800c73e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800c742:	ea55 050a 	orrs.w	r5, r5, sl
 800c746:	d1dc      	bne.n	800c702 <__ieee754_pow+0x32>
 800c748:	e9dd 3200 	ldrd	r3, r2, [sp]
 800c74c:	18db      	adds	r3, r3, r3
 800c74e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800c752:	4152      	adcs	r2, r2
 800c754:	429d      	cmp	r5, r3
 800c756:	e7d0      	b.n	800c6fa <__ieee754_pow+0x2a>
 800c758:	2d00      	cmp	r5, #0
 800c75a:	da3b      	bge.n	800c7d4 <__ieee754_pow+0x104>
 800c75c:	4b72      	ldr	r3, [pc, #456]	; (800c928 <__ieee754_pow+0x258>)
 800c75e:	4598      	cmp	r8, r3
 800c760:	dc51      	bgt.n	800c806 <__ieee754_pow+0x136>
 800c762:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800c766:	4598      	cmp	r8, r3
 800c768:	f340 84ac 	ble.w	800d0c4 <__ieee754_pow+0x9f4>
 800c76c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800c770:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800c774:	2b14      	cmp	r3, #20
 800c776:	dd0f      	ble.n	800c798 <__ieee754_pow+0xc8>
 800c778:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800c77c:	fa22 f103 	lsr.w	r1, r2, r3
 800c780:	fa01 f303 	lsl.w	r3, r1, r3
 800c784:	4293      	cmp	r3, r2
 800c786:	f040 849d 	bne.w	800d0c4 <__ieee754_pow+0x9f4>
 800c78a:	f001 0101 	and.w	r1, r1, #1
 800c78e:	f1c1 0302 	rsb	r3, r1, #2
 800c792:	9304      	str	r3, [sp, #16]
 800c794:	b182      	cbz	r2, 800c7b8 <__ieee754_pow+0xe8>
 800c796:	e05f      	b.n	800c858 <__ieee754_pow+0x188>
 800c798:	2a00      	cmp	r2, #0
 800c79a:	d15b      	bne.n	800c854 <__ieee754_pow+0x184>
 800c79c:	f1c3 0314 	rsb	r3, r3, #20
 800c7a0:	fa48 f103 	asr.w	r1, r8, r3
 800c7a4:	fa01 f303 	lsl.w	r3, r1, r3
 800c7a8:	4543      	cmp	r3, r8
 800c7aa:	f040 8488 	bne.w	800d0be <__ieee754_pow+0x9ee>
 800c7ae:	f001 0101 	and.w	r1, r1, #1
 800c7b2:	f1c1 0302 	rsb	r3, r1, #2
 800c7b6:	9304      	str	r3, [sp, #16]
 800c7b8:	4b5c      	ldr	r3, [pc, #368]	; (800c92c <__ieee754_pow+0x25c>)
 800c7ba:	4598      	cmp	r8, r3
 800c7bc:	d132      	bne.n	800c824 <__ieee754_pow+0x154>
 800c7be:	f1b9 0f00 	cmp.w	r9, #0
 800c7c2:	f280 8478 	bge.w	800d0b6 <__ieee754_pow+0x9e6>
 800c7c6:	4959      	ldr	r1, [pc, #356]	; (800c92c <__ieee754_pow+0x25c>)
 800c7c8:	4632      	mov	r2, r6
 800c7ca:	463b      	mov	r3, r7
 800c7cc:	2000      	movs	r0, #0
 800c7ce:	f7f3 ffed 	bl	80007ac <__aeabi_ddiv>
 800c7d2:	e79c      	b.n	800c70e <__ieee754_pow+0x3e>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	9304      	str	r3, [sp, #16]
 800c7d8:	2a00      	cmp	r2, #0
 800c7da:	d13d      	bne.n	800c858 <__ieee754_pow+0x188>
 800c7dc:	4b51      	ldr	r3, [pc, #324]	; (800c924 <__ieee754_pow+0x254>)
 800c7de:	4598      	cmp	r8, r3
 800c7e0:	d1ea      	bne.n	800c7b8 <__ieee754_pow+0xe8>
 800c7e2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800c7e6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800c7ea:	ea53 030a 	orrs.w	r3, r3, sl
 800c7ee:	f000 845a 	beq.w	800d0a6 <__ieee754_pow+0x9d6>
 800c7f2:	4b4f      	ldr	r3, [pc, #316]	; (800c930 <__ieee754_pow+0x260>)
 800c7f4:	429c      	cmp	r4, r3
 800c7f6:	dd08      	ble.n	800c80a <__ieee754_pow+0x13a>
 800c7f8:	f1b9 0f00 	cmp.w	r9, #0
 800c7fc:	f2c0 8457 	blt.w	800d0ae <__ieee754_pow+0x9de>
 800c800:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c804:	e783      	b.n	800c70e <__ieee754_pow+0x3e>
 800c806:	2302      	movs	r3, #2
 800c808:	e7e5      	b.n	800c7d6 <__ieee754_pow+0x106>
 800c80a:	f1b9 0f00 	cmp.w	r9, #0
 800c80e:	f04f 0000 	mov.w	r0, #0
 800c812:	f04f 0100 	mov.w	r1, #0
 800c816:	f6bf af7a 	bge.w	800c70e <__ieee754_pow+0x3e>
 800c81a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800c81e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800c822:	e774      	b.n	800c70e <__ieee754_pow+0x3e>
 800c824:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800c828:	d106      	bne.n	800c838 <__ieee754_pow+0x168>
 800c82a:	4632      	mov	r2, r6
 800c82c:	463b      	mov	r3, r7
 800c82e:	4630      	mov	r0, r6
 800c830:	4639      	mov	r1, r7
 800c832:	f7f3 fe91 	bl	8000558 <__aeabi_dmul>
 800c836:	e76a      	b.n	800c70e <__ieee754_pow+0x3e>
 800c838:	4b3e      	ldr	r3, [pc, #248]	; (800c934 <__ieee754_pow+0x264>)
 800c83a:	4599      	cmp	r9, r3
 800c83c:	d10c      	bne.n	800c858 <__ieee754_pow+0x188>
 800c83e:	2d00      	cmp	r5, #0
 800c840:	db0a      	blt.n	800c858 <__ieee754_pow+0x188>
 800c842:	ec47 6b10 	vmov	d0, r6, r7
 800c846:	b009      	add	sp, #36	; 0x24
 800c848:	ecbd 8b06 	vpop	{d8-d10}
 800c84c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c850:	f000 be7a 	b.w	800d548 <__ieee754_sqrt>
 800c854:	2300      	movs	r3, #0
 800c856:	9304      	str	r3, [sp, #16]
 800c858:	ec47 6b10 	vmov	d0, r6, r7
 800c85c:	f001 fc2e 	bl	800e0bc <fabs>
 800c860:	ec51 0b10 	vmov	r0, r1, d0
 800c864:	f1ba 0f00 	cmp.w	sl, #0
 800c868:	d129      	bne.n	800c8be <__ieee754_pow+0x1ee>
 800c86a:	b124      	cbz	r4, 800c876 <__ieee754_pow+0x1a6>
 800c86c:	4b2f      	ldr	r3, [pc, #188]	; (800c92c <__ieee754_pow+0x25c>)
 800c86e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800c872:	429a      	cmp	r2, r3
 800c874:	d123      	bne.n	800c8be <__ieee754_pow+0x1ee>
 800c876:	f1b9 0f00 	cmp.w	r9, #0
 800c87a:	da05      	bge.n	800c888 <__ieee754_pow+0x1b8>
 800c87c:	4602      	mov	r2, r0
 800c87e:	460b      	mov	r3, r1
 800c880:	2000      	movs	r0, #0
 800c882:	492a      	ldr	r1, [pc, #168]	; (800c92c <__ieee754_pow+0x25c>)
 800c884:	f7f3 ff92 	bl	80007ac <__aeabi_ddiv>
 800c888:	2d00      	cmp	r5, #0
 800c88a:	f6bf af40 	bge.w	800c70e <__ieee754_pow+0x3e>
 800c88e:	9b04      	ldr	r3, [sp, #16]
 800c890:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800c894:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800c898:	4323      	orrs	r3, r4
 800c89a:	d108      	bne.n	800c8ae <__ieee754_pow+0x1de>
 800c89c:	4602      	mov	r2, r0
 800c89e:	460b      	mov	r3, r1
 800c8a0:	4610      	mov	r0, r2
 800c8a2:	4619      	mov	r1, r3
 800c8a4:	f7f3 fca0 	bl	80001e8 <__aeabi_dsub>
 800c8a8:	4602      	mov	r2, r0
 800c8aa:	460b      	mov	r3, r1
 800c8ac:	e78f      	b.n	800c7ce <__ieee754_pow+0xfe>
 800c8ae:	9b04      	ldr	r3, [sp, #16]
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	f47f af2c 	bne.w	800c70e <__ieee754_pow+0x3e>
 800c8b6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c8ba:	4619      	mov	r1, r3
 800c8bc:	e727      	b.n	800c70e <__ieee754_pow+0x3e>
 800c8be:	0feb      	lsrs	r3, r5, #31
 800c8c0:	3b01      	subs	r3, #1
 800c8c2:	9306      	str	r3, [sp, #24]
 800c8c4:	9a06      	ldr	r2, [sp, #24]
 800c8c6:	9b04      	ldr	r3, [sp, #16]
 800c8c8:	4313      	orrs	r3, r2
 800c8ca:	d102      	bne.n	800c8d2 <__ieee754_pow+0x202>
 800c8cc:	4632      	mov	r2, r6
 800c8ce:	463b      	mov	r3, r7
 800c8d0:	e7e6      	b.n	800c8a0 <__ieee754_pow+0x1d0>
 800c8d2:	4b19      	ldr	r3, [pc, #100]	; (800c938 <__ieee754_pow+0x268>)
 800c8d4:	4598      	cmp	r8, r3
 800c8d6:	f340 80fb 	ble.w	800cad0 <__ieee754_pow+0x400>
 800c8da:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800c8de:	4598      	cmp	r8, r3
 800c8e0:	4b13      	ldr	r3, [pc, #76]	; (800c930 <__ieee754_pow+0x260>)
 800c8e2:	dd0c      	ble.n	800c8fe <__ieee754_pow+0x22e>
 800c8e4:	429c      	cmp	r4, r3
 800c8e6:	dc0f      	bgt.n	800c908 <__ieee754_pow+0x238>
 800c8e8:	f1b9 0f00 	cmp.w	r9, #0
 800c8ec:	da0f      	bge.n	800c90e <__ieee754_pow+0x23e>
 800c8ee:	2000      	movs	r0, #0
 800c8f0:	b009      	add	sp, #36	; 0x24
 800c8f2:	ecbd 8b06 	vpop	{d8-d10}
 800c8f6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8fa:	f001 bbd6 	b.w	800e0aa <__math_oflow>
 800c8fe:	429c      	cmp	r4, r3
 800c900:	dbf2      	blt.n	800c8e8 <__ieee754_pow+0x218>
 800c902:	4b0a      	ldr	r3, [pc, #40]	; (800c92c <__ieee754_pow+0x25c>)
 800c904:	429c      	cmp	r4, r3
 800c906:	dd19      	ble.n	800c93c <__ieee754_pow+0x26c>
 800c908:	f1b9 0f00 	cmp.w	r9, #0
 800c90c:	dcef      	bgt.n	800c8ee <__ieee754_pow+0x21e>
 800c90e:	2000      	movs	r0, #0
 800c910:	b009      	add	sp, #36	; 0x24
 800c912:	ecbd 8b06 	vpop	{d8-d10}
 800c916:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c91a:	f001 bbbd 	b.w	800e098 <__math_uflow>
 800c91e:	bf00      	nop
 800c920:	fff00000 	.word	0xfff00000
 800c924:	7ff00000 	.word	0x7ff00000
 800c928:	433fffff 	.word	0x433fffff
 800c92c:	3ff00000 	.word	0x3ff00000
 800c930:	3fefffff 	.word	0x3fefffff
 800c934:	3fe00000 	.word	0x3fe00000
 800c938:	41e00000 	.word	0x41e00000
 800c93c:	4b60      	ldr	r3, [pc, #384]	; (800cac0 <__ieee754_pow+0x3f0>)
 800c93e:	2200      	movs	r2, #0
 800c940:	f7f3 fc52 	bl	80001e8 <__aeabi_dsub>
 800c944:	a354      	add	r3, pc, #336	; (adr r3, 800ca98 <__ieee754_pow+0x3c8>)
 800c946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c94a:	4604      	mov	r4, r0
 800c94c:	460d      	mov	r5, r1
 800c94e:	f7f3 fe03 	bl	8000558 <__aeabi_dmul>
 800c952:	a353      	add	r3, pc, #332	; (adr r3, 800caa0 <__ieee754_pow+0x3d0>)
 800c954:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c958:	4606      	mov	r6, r0
 800c95a:	460f      	mov	r7, r1
 800c95c:	4620      	mov	r0, r4
 800c95e:	4629      	mov	r1, r5
 800c960:	f7f3 fdfa 	bl	8000558 <__aeabi_dmul>
 800c964:	4b57      	ldr	r3, [pc, #348]	; (800cac4 <__ieee754_pow+0x3f4>)
 800c966:	4682      	mov	sl, r0
 800c968:	468b      	mov	fp, r1
 800c96a:	2200      	movs	r2, #0
 800c96c:	4620      	mov	r0, r4
 800c96e:	4629      	mov	r1, r5
 800c970:	f7f3 fdf2 	bl	8000558 <__aeabi_dmul>
 800c974:	4602      	mov	r2, r0
 800c976:	460b      	mov	r3, r1
 800c978:	a14b      	add	r1, pc, #300	; (adr r1, 800caa8 <__ieee754_pow+0x3d8>)
 800c97a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c97e:	f7f3 fc33 	bl	80001e8 <__aeabi_dsub>
 800c982:	4622      	mov	r2, r4
 800c984:	462b      	mov	r3, r5
 800c986:	f7f3 fde7 	bl	8000558 <__aeabi_dmul>
 800c98a:	4602      	mov	r2, r0
 800c98c:	460b      	mov	r3, r1
 800c98e:	2000      	movs	r0, #0
 800c990:	494d      	ldr	r1, [pc, #308]	; (800cac8 <__ieee754_pow+0x3f8>)
 800c992:	f7f3 fc29 	bl	80001e8 <__aeabi_dsub>
 800c996:	4622      	mov	r2, r4
 800c998:	4680      	mov	r8, r0
 800c99a:	4689      	mov	r9, r1
 800c99c:	462b      	mov	r3, r5
 800c99e:	4620      	mov	r0, r4
 800c9a0:	4629      	mov	r1, r5
 800c9a2:	f7f3 fdd9 	bl	8000558 <__aeabi_dmul>
 800c9a6:	4602      	mov	r2, r0
 800c9a8:	460b      	mov	r3, r1
 800c9aa:	4640      	mov	r0, r8
 800c9ac:	4649      	mov	r1, r9
 800c9ae:	f7f3 fdd3 	bl	8000558 <__aeabi_dmul>
 800c9b2:	a33f      	add	r3, pc, #252	; (adr r3, 800cab0 <__ieee754_pow+0x3e0>)
 800c9b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c9b8:	f7f3 fdce 	bl	8000558 <__aeabi_dmul>
 800c9bc:	4602      	mov	r2, r0
 800c9be:	460b      	mov	r3, r1
 800c9c0:	4650      	mov	r0, sl
 800c9c2:	4659      	mov	r1, fp
 800c9c4:	f7f3 fc10 	bl	80001e8 <__aeabi_dsub>
 800c9c8:	4602      	mov	r2, r0
 800c9ca:	460b      	mov	r3, r1
 800c9cc:	4680      	mov	r8, r0
 800c9ce:	4689      	mov	r9, r1
 800c9d0:	4630      	mov	r0, r6
 800c9d2:	4639      	mov	r1, r7
 800c9d4:	f7f3 fc0a 	bl	80001ec <__adddf3>
 800c9d8:	2000      	movs	r0, #0
 800c9da:	4632      	mov	r2, r6
 800c9dc:	463b      	mov	r3, r7
 800c9de:	4604      	mov	r4, r0
 800c9e0:	460d      	mov	r5, r1
 800c9e2:	f7f3 fc01 	bl	80001e8 <__aeabi_dsub>
 800c9e6:	4602      	mov	r2, r0
 800c9e8:	460b      	mov	r3, r1
 800c9ea:	4640      	mov	r0, r8
 800c9ec:	4649      	mov	r1, r9
 800c9ee:	f7f3 fbfb 	bl	80001e8 <__aeabi_dsub>
 800c9f2:	9b04      	ldr	r3, [sp, #16]
 800c9f4:	9a06      	ldr	r2, [sp, #24]
 800c9f6:	3b01      	subs	r3, #1
 800c9f8:	4313      	orrs	r3, r2
 800c9fa:	4682      	mov	sl, r0
 800c9fc:	468b      	mov	fp, r1
 800c9fe:	f040 81e7 	bne.w	800cdd0 <__ieee754_pow+0x700>
 800ca02:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800cab8 <__ieee754_pow+0x3e8>
 800ca06:	eeb0 8a47 	vmov.f32	s16, s14
 800ca0a:	eef0 8a67 	vmov.f32	s17, s15
 800ca0e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ca12:	2600      	movs	r6, #0
 800ca14:	4632      	mov	r2, r6
 800ca16:	463b      	mov	r3, r7
 800ca18:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ca1c:	f7f3 fbe4 	bl	80001e8 <__aeabi_dsub>
 800ca20:	4622      	mov	r2, r4
 800ca22:	462b      	mov	r3, r5
 800ca24:	f7f3 fd98 	bl	8000558 <__aeabi_dmul>
 800ca28:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ca2c:	4680      	mov	r8, r0
 800ca2e:	4689      	mov	r9, r1
 800ca30:	4650      	mov	r0, sl
 800ca32:	4659      	mov	r1, fp
 800ca34:	f7f3 fd90 	bl	8000558 <__aeabi_dmul>
 800ca38:	4602      	mov	r2, r0
 800ca3a:	460b      	mov	r3, r1
 800ca3c:	4640      	mov	r0, r8
 800ca3e:	4649      	mov	r1, r9
 800ca40:	f7f3 fbd4 	bl	80001ec <__adddf3>
 800ca44:	4632      	mov	r2, r6
 800ca46:	463b      	mov	r3, r7
 800ca48:	4680      	mov	r8, r0
 800ca4a:	4689      	mov	r9, r1
 800ca4c:	4620      	mov	r0, r4
 800ca4e:	4629      	mov	r1, r5
 800ca50:	f7f3 fd82 	bl	8000558 <__aeabi_dmul>
 800ca54:	460b      	mov	r3, r1
 800ca56:	4604      	mov	r4, r0
 800ca58:	460d      	mov	r5, r1
 800ca5a:	4602      	mov	r2, r0
 800ca5c:	4649      	mov	r1, r9
 800ca5e:	4640      	mov	r0, r8
 800ca60:	f7f3 fbc4 	bl	80001ec <__adddf3>
 800ca64:	4b19      	ldr	r3, [pc, #100]	; (800cacc <__ieee754_pow+0x3fc>)
 800ca66:	4299      	cmp	r1, r3
 800ca68:	ec45 4b19 	vmov	d9, r4, r5
 800ca6c:	4606      	mov	r6, r0
 800ca6e:	460f      	mov	r7, r1
 800ca70:	468b      	mov	fp, r1
 800ca72:	f340 82f1 	ble.w	800d058 <__ieee754_pow+0x988>
 800ca76:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ca7a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ca7e:	4303      	orrs	r3, r0
 800ca80:	f000 81e4 	beq.w	800ce4c <__ieee754_pow+0x77c>
 800ca84:	ec51 0b18 	vmov	r0, r1, d8
 800ca88:	2200      	movs	r2, #0
 800ca8a:	2300      	movs	r3, #0
 800ca8c:	f7f3 ffd6 	bl	8000a3c <__aeabi_dcmplt>
 800ca90:	3800      	subs	r0, #0
 800ca92:	bf18      	it	ne
 800ca94:	2001      	movne	r0, #1
 800ca96:	e72b      	b.n	800c8f0 <__ieee754_pow+0x220>
 800ca98:	60000000 	.word	0x60000000
 800ca9c:	3ff71547 	.word	0x3ff71547
 800caa0:	f85ddf44 	.word	0xf85ddf44
 800caa4:	3e54ae0b 	.word	0x3e54ae0b
 800caa8:	55555555 	.word	0x55555555
 800caac:	3fd55555 	.word	0x3fd55555
 800cab0:	652b82fe 	.word	0x652b82fe
 800cab4:	3ff71547 	.word	0x3ff71547
 800cab8:	00000000 	.word	0x00000000
 800cabc:	bff00000 	.word	0xbff00000
 800cac0:	3ff00000 	.word	0x3ff00000
 800cac4:	3fd00000 	.word	0x3fd00000
 800cac8:	3fe00000 	.word	0x3fe00000
 800cacc:	408fffff 	.word	0x408fffff
 800cad0:	4bd5      	ldr	r3, [pc, #852]	; (800ce28 <__ieee754_pow+0x758>)
 800cad2:	402b      	ands	r3, r5
 800cad4:	2200      	movs	r2, #0
 800cad6:	b92b      	cbnz	r3, 800cae4 <__ieee754_pow+0x414>
 800cad8:	4bd4      	ldr	r3, [pc, #848]	; (800ce2c <__ieee754_pow+0x75c>)
 800cada:	f7f3 fd3d 	bl	8000558 <__aeabi_dmul>
 800cade:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800cae2:	460c      	mov	r4, r1
 800cae4:	1523      	asrs	r3, r4, #20
 800cae6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800caea:	4413      	add	r3, r2
 800caec:	9305      	str	r3, [sp, #20]
 800caee:	4bd0      	ldr	r3, [pc, #832]	; (800ce30 <__ieee754_pow+0x760>)
 800caf0:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800caf4:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800caf8:	429c      	cmp	r4, r3
 800cafa:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800cafe:	dd08      	ble.n	800cb12 <__ieee754_pow+0x442>
 800cb00:	4bcc      	ldr	r3, [pc, #816]	; (800ce34 <__ieee754_pow+0x764>)
 800cb02:	429c      	cmp	r4, r3
 800cb04:	f340 8162 	ble.w	800cdcc <__ieee754_pow+0x6fc>
 800cb08:	9b05      	ldr	r3, [sp, #20]
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	9305      	str	r3, [sp, #20]
 800cb0e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800cb12:	2400      	movs	r4, #0
 800cb14:	00e3      	lsls	r3, r4, #3
 800cb16:	9307      	str	r3, [sp, #28]
 800cb18:	4bc7      	ldr	r3, [pc, #796]	; (800ce38 <__ieee754_pow+0x768>)
 800cb1a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800cb1e:	ed93 7b00 	vldr	d7, [r3]
 800cb22:	4629      	mov	r1, r5
 800cb24:	ec53 2b17 	vmov	r2, r3, d7
 800cb28:	eeb0 9a47 	vmov.f32	s18, s14
 800cb2c:	eef0 9a67 	vmov.f32	s19, s15
 800cb30:	4682      	mov	sl, r0
 800cb32:	f7f3 fb59 	bl	80001e8 <__aeabi_dsub>
 800cb36:	4652      	mov	r2, sl
 800cb38:	4606      	mov	r6, r0
 800cb3a:	460f      	mov	r7, r1
 800cb3c:	462b      	mov	r3, r5
 800cb3e:	ec51 0b19 	vmov	r0, r1, d9
 800cb42:	f7f3 fb53 	bl	80001ec <__adddf3>
 800cb46:	4602      	mov	r2, r0
 800cb48:	460b      	mov	r3, r1
 800cb4a:	2000      	movs	r0, #0
 800cb4c:	49bb      	ldr	r1, [pc, #748]	; (800ce3c <__ieee754_pow+0x76c>)
 800cb4e:	f7f3 fe2d 	bl	80007ac <__aeabi_ddiv>
 800cb52:	ec41 0b1a 	vmov	d10, r0, r1
 800cb56:	4602      	mov	r2, r0
 800cb58:	460b      	mov	r3, r1
 800cb5a:	4630      	mov	r0, r6
 800cb5c:	4639      	mov	r1, r7
 800cb5e:	f7f3 fcfb 	bl	8000558 <__aeabi_dmul>
 800cb62:	2300      	movs	r3, #0
 800cb64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800cb68:	9302      	str	r3, [sp, #8]
 800cb6a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800cb6e:	46ab      	mov	fp, r5
 800cb70:	106d      	asrs	r5, r5, #1
 800cb72:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800cb76:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800cb7a:	ec41 0b18 	vmov	d8, r0, r1
 800cb7e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800cb82:	2200      	movs	r2, #0
 800cb84:	4640      	mov	r0, r8
 800cb86:	4649      	mov	r1, r9
 800cb88:	4614      	mov	r4, r2
 800cb8a:	461d      	mov	r5, r3
 800cb8c:	f7f3 fce4 	bl	8000558 <__aeabi_dmul>
 800cb90:	4602      	mov	r2, r0
 800cb92:	460b      	mov	r3, r1
 800cb94:	4630      	mov	r0, r6
 800cb96:	4639      	mov	r1, r7
 800cb98:	f7f3 fb26 	bl	80001e8 <__aeabi_dsub>
 800cb9c:	ec53 2b19 	vmov	r2, r3, d9
 800cba0:	4606      	mov	r6, r0
 800cba2:	460f      	mov	r7, r1
 800cba4:	4620      	mov	r0, r4
 800cba6:	4629      	mov	r1, r5
 800cba8:	f7f3 fb1e 	bl	80001e8 <__aeabi_dsub>
 800cbac:	4602      	mov	r2, r0
 800cbae:	460b      	mov	r3, r1
 800cbb0:	4650      	mov	r0, sl
 800cbb2:	4659      	mov	r1, fp
 800cbb4:	f7f3 fb18 	bl	80001e8 <__aeabi_dsub>
 800cbb8:	4642      	mov	r2, r8
 800cbba:	464b      	mov	r3, r9
 800cbbc:	f7f3 fccc 	bl	8000558 <__aeabi_dmul>
 800cbc0:	4602      	mov	r2, r0
 800cbc2:	460b      	mov	r3, r1
 800cbc4:	4630      	mov	r0, r6
 800cbc6:	4639      	mov	r1, r7
 800cbc8:	f7f3 fb0e 	bl	80001e8 <__aeabi_dsub>
 800cbcc:	ec53 2b1a 	vmov	r2, r3, d10
 800cbd0:	f7f3 fcc2 	bl	8000558 <__aeabi_dmul>
 800cbd4:	ec53 2b18 	vmov	r2, r3, d8
 800cbd8:	ec41 0b19 	vmov	d9, r0, r1
 800cbdc:	ec51 0b18 	vmov	r0, r1, d8
 800cbe0:	f7f3 fcba 	bl	8000558 <__aeabi_dmul>
 800cbe4:	a37c      	add	r3, pc, #496	; (adr r3, 800cdd8 <__ieee754_pow+0x708>)
 800cbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbea:	4604      	mov	r4, r0
 800cbec:	460d      	mov	r5, r1
 800cbee:	f7f3 fcb3 	bl	8000558 <__aeabi_dmul>
 800cbf2:	a37b      	add	r3, pc, #492	; (adr r3, 800cde0 <__ieee754_pow+0x710>)
 800cbf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbf8:	f7f3 faf8 	bl	80001ec <__adddf3>
 800cbfc:	4622      	mov	r2, r4
 800cbfe:	462b      	mov	r3, r5
 800cc00:	f7f3 fcaa 	bl	8000558 <__aeabi_dmul>
 800cc04:	a378      	add	r3, pc, #480	; (adr r3, 800cde8 <__ieee754_pow+0x718>)
 800cc06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc0a:	f7f3 faef 	bl	80001ec <__adddf3>
 800cc0e:	4622      	mov	r2, r4
 800cc10:	462b      	mov	r3, r5
 800cc12:	f7f3 fca1 	bl	8000558 <__aeabi_dmul>
 800cc16:	a376      	add	r3, pc, #472	; (adr r3, 800cdf0 <__ieee754_pow+0x720>)
 800cc18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc1c:	f7f3 fae6 	bl	80001ec <__adddf3>
 800cc20:	4622      	mov	r2, r4
 800cc22:	462b      	mov	r3, r5
 800cc24:	f7f3 fc98 	bl	8000558 <__aeabi_dmul>
 800cc28:	a373      	add	r3, pc, #460	; (adr r3, 800cdf8 <__ieee754_pow+0x728>)
 800cc2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc2e:	f7f3 fadd 	bl	80001ec <__adddf3>
 800cc32:	4622      	mov	r2, r4
 800cc34:	462b      	mov	r3, r5
 800cc36:	f7f3 fc8f 	bl	8000558 <__aeabi_dmul>
 800cc3a:	a371      	add	r3, pc, #452	; (adr r3, 800ce00 <__ieee754_pow+0x730>)
 800cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc40:	f7f3 fad4 	bl	80001ec <__adddf3>
 800cc44:	4622      	mov	r2, r4
 800cc46:	4606      	mov	r6, r0
 800cc48:	460f      	mov	r7, r1
 800cc4a:	462b      	mov	r3, r5
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	4629      	mov	r1, r5
 800cc50:	f7f3 fc82 	bl	8000558 <__aeabi_dmul>
 800cc54:	4602      	mov	r2, r0
 800cc56:	460b      	mov	r3, r1
 800cc58:	4630      	mov	r0, r6
 800cc5a:	4639      	mov	r1, r7
 800cc5c:	f7f3 fc7c 	bl	8000558 <__aeabi_dmul>
 800cc60:	4642      	mov	r2, r8
 800cc62:	4604      	mov	r4, r0
 800cc64:	460d      	mov	r5, r1
 800cc66:	464b      	mov	r3, r9
 800cc68:	ec51 0b18 	vmov	r0, r1, d8
 800cc6c:	f7f3 fabe 	bl	80001ec <__adddf3>
 800cc70:	ec53 2b19 	vmov	r2, r3, d9
 800cc74:	f7f3 fc70 	bl	8000558 <__aeabi_dmul>
 800cc78:	4622      	mov	r2, r4
 800cc7a:	462b      	mov	r3, r5
 800cc7c:	f7f3 fab6 	bl	80001ec <__adddf3>
 800cc80:	4642      	mov	r2, r8
 800cc82:	4682      	mov	sl, r0
 800cc84:	468b      	mov	fp, r1
 800cc86:	464b      	mov	r3, r9
 800cc88:	4640      	mov	r0, r8
 800cc8a:	4649      	mov	r1, r9
 800cc8c:	f7f3 fc64 	bl	8000558 <__aeabi_dmul>
 800cc90:	4b6b      	ldr	r3, [pc, #428]	; (800ce40 <__ieee754_pow+0x770>)
 800cc92:	2200      	movs	r2, #0
 800cc94:	4606      	mov	r6, r0
 800cc96:	460f      	mov	r7, r1
 800cc98:	f7f3 faa8 	bl	80001ec <__adddf3>
 800cc9c:	4652      	mov	r2, sl
 800cc9e:	465b      	mov	r3, fp
 800cca0:	f7f3 faa4 	bl	80001ec <__adddf3>
 800cca4:	2000      	movs	r0, #0
 800cca6:	4604      	mov	r4, r0
 800cca8:	460d      	mov	r5, r1
 800ccaa:	4602      	mov	r2, r0
 800ccac:	460b      	mov	r3, r1
 800ccae:	4640      	mov	r0, r8
 800ccb0:	4649      	mov	r1, r9
 800ccb2:	f7f3 fc51 	bl	8000558 <__aeabi_dmul>
 800ccb6:	4b62      	ldr	r3, [pc, #392]	; (800ce40 <__ieee754_pow+0x770>)
 800ccb8:	4680      	mov	r8, r0
 800ccba:	4689      	mov	r9, r1
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	4620      	mov	r0, r4
 800ccc0:	4629      	mov	r1, r5
 800ccc2:	f7f3 fa91 	bl	80001e8 <__aeabi_dsub>
 800ccc6:	4632      	mov	r2, r6
 800ccc8:	463b      	mov	r3, r7
 800ccca:	f7f3 fa8d 	bl	80001e8 <__aeabi_dsub>
 800ccce:	4602      	mov	r2, r0
 800ccd0:	460b      	mov	r3, r1
 800ccd2:	4650      	mov	r0, sl
 800ccd4:	4659      	mov	r1, fp
 800ccd6:	f7f3 fa87 	bl	80001e8 <__aeabi_dsub>
 800ccda:	ec53 2b18 	vmov	r2, r3, d8
 800ccde:	f7f3 fc3b 	bl	8000558 <__aeabi_dmul>
 800cce2:	4622      	mov	r2, r4
 800cce4:	4606      	mov	r6, r0
 800cce6:	460f      	mov	r7, r1
 800cce8:	462b      	mov	r3, r5
 800ccea:	ec51 0b19 	vmov	r0, r1, d9
 800ccee:	f7f3 fc33 	bl	8000558 <__aeabi_dmul>
 800ccf2:	4602      	mov	r2, r0
 800ccf4:	460b      	mov	r3, r1
 800ccf6:	4630      	mov	r0, r6
 800ccf8:	4639      	mov	r1, r7
 800ccfa:	f7f3 fa77 	bl	80001ec <__adddf3>
 800ccfe:	4606      	mov	r6, r0
 800cd00:	460f      	mov	r7, r1
 800cd02:	4602      	mov	r2, r0
 800cd04:	460b      	mov	r3, r1
 800cd06:	4640      	mov	r0, r8
 800cd08:	4649      	mov	r1, r9
 800cd0a:	f7f3 fa6f 	bl	80001ec <__adddf3>
 800cd0e:	a33e      	add	r3, pc, #248	; (adr r3, 800ce08 <__ieee754_pow+0x738>)
 800cd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd14:	2000      	movs	r0, #0
 800cd16:	4604      	mov	r4, r0
 800cd18:	460d      	mov	r5, r1
 800cd1a:	f7f3 fc1d 	bl	8000558 <__aeabi_dmul>
 800cd1e:	4642      	mov	r2, r8
 800cd20:	ec41 0b18 	vmov	d8, r0, r1
 800cd24:	464b      	mov	r3, r9
 800cd26:	4620      	mov	r0, r4
 800cd28:	4629      	mov	r1, r5
 800cd2a:	f7f3 fa5d 	bl	80001e8 <__aeabi_dsub>
 800cd2e:	4602      	mov	r2, r0
 800cd30:	460b      	mov	r3, r1
 800cd32:	4630      	mov	r0, r6
 800cd34:	4639      	mov	r1, r7
 800cd36:	f7f3 fa57 	bl	80001e8 <__aeabi_dsub>
 800cd3a:	a335      	add	r3, pc, #212	; (adr r3, 800ce10 <__ieee754_pow+0x740>)
 800cd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd40:	f7f3 fc0a 	bl	8000558 <__aeabi_dmul>
 800cd44:	a334      	add	r3, pc, #208	; (adr r3, 800ce18 <__ieee754_pow+0x748>)
 800cd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd4a:	4606      	mov	r6, r0
 800cd4c:	460f      	mov	r7, r1
 800cd4e:	4620      	mov	r0, r4
 800cd50:	4629      	mov	r1, r5
 800cd52:	f7f3 fc01 	bl	8000558 <__aeabi_dmul>
 800cd56:	4602      	mov	r2, r0
 800cd58:	460b      	mov	r3, r1
 800cd5a:	4630      	mov	r0, r6
 800cd5c:	4639      	mov	r1, r7
 800cd5e:	f7f3 fa45 	bl	80001ec <__adddf3>
 800cd62:	9a07      	ldr	r2, [sp, #28]
 800cd64:	4b37      	ldr	r3, [pc, #220]	; (800ce44 <__ieee754_pow+0x774>)
 800cd66:	4413      	add	r3, r2
 800cd68:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd6c:	f7f3 fa3e 	bl	80001ec <__adddf3>
 800cd70:	4682      	mov	sl, r0
 800cd72:	9805      	ldr	r0, [sp, #20]
 800cd74:	468b      	mov	fp, r1
 800cd76:	f7f3 fb85 	bl	8000484 <__aeabi_i2d>
 800cd7a:	9a07      	ldr	r2, [sp, #28]
 800cd7c:	4b32      	ldr	r3, [pc, #200]	; (800ce48 <__ieee754_pow+0x778>)
 800cd7e:	4413      	add	r3, r2
 800cd80:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd84:	4606      	mov	r6, r0
 800cd86:	460f      	mov	r7, r1
 800cd88:	4652      	mov	r2, sl
 800cd8a:	465b      	mov	r3, fp
 800cd8c:	ec51 0b18 	vmov	r0, r1, d8
 800cd90:	f7f3 fa2c 	bl	80001ec <__adddf3>
 800cd94:	4642      	mov	r2, r8
 800cd96:	464b      	mov	r3, r9
 800cd98:	f7f3 fa28 	bl	80001ec <__adddf3>
 800cd9c:	4632      	mov	r2, r6
 800cd9e:	463b      	mov	r3, r7
 800cda0:	f7f3 fa24 	bl	80001ec <__adddf3>
 800cda4:	2000      	movs	r0, #0
 800cda6:	4632      	mov	r2, r6
 800cda8:	463b      	mov	r3, r7
 800cdaa:	4604      	mov	r4, r0
 800cdac:	460d      	mov	r5, r1
 800cdae:	f7f3 fa1b 	bl	80001e8 <__aeabi_dsub>
 800cdb2:	4642      	mov	r2, r8
 800cdb4:	464b      	mov	r3, r9
 800cdb6:	f7f3 fa17 	bl	80001e8 <__aeabi_dsub>
 800cdba:	ec53 2b18 	vmov	r2, r3, d8
 800cdbe:	f7f3 fa13 	bl	80001e8 <__aeabi_dsub>
 800cdc2:	4602      	mov	r2, r0
 800cdc4:	460b      	mov	r3, r1
 800cdc6:	4650      	mov	r0, sl
 800cdc8:	4659      	mov	r1, fp
 800cdca:	e610      	b.n	800c9ee <__ieee754_pow+0x31e>
 800cdcc:	2401      	movs	r4, #1
 800cdce:	e6a1      	b.n	800cb14 <__ieee754_pow+0x444>
 800cdd0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800ce20 <__ieee754_pow+0x750>
 800cdd4:	e617      	b.n	800ca06 <__ieee754_pow+0x336>
 800cdd6:	bf00      	nop
 800cdd8:	4a454eef 	.word	0x4a454eef
 800cddc:	3fca7e28 	.word	0x3fca7e28
 800cde0:	93c9db65 	.word	0x93c9db65
 800cde4:	3fcd864a 	.word	0x3fcd864a
 800cde8:	a91d4101 	.word	0xa91d4101
 800cdec:	3fd17460 	.word	0x3fd17460
 800cdf0:	518f264d 	.word	0x518f264d
 800cdf4:	3fd55555 	.word	0x3fd55555
 800cdf8:	db6fabff 	.word	0xdb6fabff
 800cdfc:	3fdb6db6 	.word	0x3fdb6db6
 800ce00:	33333303 	.word	0x33333303
 800ce04:	3fe33333 	.word	0x3fe33333
 800ce08:	e0000000 	.word	0xe0000000
 800ce0c:	3feec709 	.word	0x3feec709
 800ce10:	dc3a03fd 	.word	0xdc3a03fd
 800ce14:	3feec709 	.word	0x3feec709
 800ce18:	145b01f5 	.word	0x145b01f5
 800ce1c:	be3e2fe0 	.word	0xbe3e2fe0
 800ce20:	00000000 	.word	0x00000000
 800ce24:	3ff00000 	.word	0x3ff00000
 800ce28:	7ff00000 	.word	0x7ff00000
 800ce2c:	43400000 	.word	0x43400000
 800ce30:	0003988e 	.word	0x0003988e
 800ce34:	000bb679 	.word	0x000bb679
 800ce38:	0800e9b0 	.word	0x0800e9b0
 800ce3c:	3ff00000 	.word	0x3ff00000
 800ce40:	40080000 	.word	0x40080000
 800ce44:	0800e9d0 	.word	0x0800e9d0
 800ce48:	0800e9c0 	.word	0x0800e9c0
 800ce4c:	a3b5      	add	r3, pc, #724	; (adr r3, 800d124 <__ieee754_pow+0xa54>)
 800ce4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce52:	4640      	mov	r0, r8
 800ce54:	4649      	mov	r1, r9
 800ce56:	f7f3 f9c9 	bl	80001ec <__adddf3>
 800ce5a:	4622      	mov	r2, r4
 800ce5c:	ec41 0b1a 	vmov	d10, r0, r1
 800ce60:	462b      	mov	r3, r5
 800ce62:	4630      	mov	r0, r6
 800ce64:	4639      	mov	r1, r7
 800ce66:	f7f3 f9bf 	bl	80001e8 <__aeabi_dsub>
 800ce6a:	4602      	mov	r2, r0
 800ce6c:	460b      	mov	r3, r1
 800ce6e:	ec51 0b1a 	vmov	r0, r1, d10
 800ce72:	f7f3 fe01 	bl	8000a78 <__aeabi_dcmpgt>
 800ce76:	2800      	cmp	r0, #0
 800ce78:	f47f ae04 	bne.w	800ca84 <__ieee754_pow+0x3b4>
 800ce7c:	4aa4      	ldr	r2, [pc, #656]	; (800d110 <__ieee754_pow+0xa40>)
 800ce7e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ce82:	4293      	cmp	r3, r2
 800ce84:	f340 8108 	ble.w	800d098 <__ieee754_pow+0x9c8>
 800ce88:	151b      	asrs	r3, r3, #20
 800ce8a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800ce8e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800ce92:	fa4a f303 	asr.w	r3, sl, r3
 800ce96:	445b      	add	r3, fp
 800ce98:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800ce9c:	4e9d      	ldr	r6, [pc, #628]	; (800d114 <__ieee754_pow+0xa44>)
 800ce9e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800cea2:	4116      	asrs	r6, r2
 800cea4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800cea8:	2000      	movs	r0, #0
 800ceaa:	ea23 0106 	bic.w	r1, r3, r6
 800ceae:	f1c2 0214 	rsb	r2, r2, #20
 800ceb2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800ceb6:	fa4a fa02 	asr.w	sl, sl, r2
 800ceba:	f1bb 0f00 	cmp.w	fp, #0
 800cebe:	4602      	mov	r2, r0
 800cec0:	460b      	mov	r3, r1
 800cec2:	4620      	mov	r0, r4
 800cec4:	4629      	mov	r1, r5
 800cec6:	bfb8      	it	lt
 800cec8:	f1ca 0a00 	rsblt	sl, sl, #0
 800cecc:	f7f3 f98c 	bl	80001e8 <__aeabi_dsub>
 800ced0:	ec41 0b19 	vmov	d9, r0, r1
 800ced4:	4642      	mov	r2, r8
 800ced6:	464b      	mov	r3, r9
 800ced8:	ec51 0b19 	vmov	r0, r1, d9
 800cedc:	f7f3 f986 	bl	80001ec <__adddf3>
 800cee0:	a37b      	add	r3, pc, #492	; (adr r3, 800d0d0 <__ieee754_pow+0xa00>)
 800cee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cee6:	2000      	movs	r0, #0
 800cee8:	4604      	mov	r4, r0
 800ceea:	460d      	mov	r5, r1
 800ceec:	f7f3 fb34 	bl	8000558 <__aeabi_dmul>
 800cef0:	ec53 2b19 	vmov	r2, r3, d9
 800cef4:	4606      	mov	r6, r0
 800cef6:	460f      	mov	r7, r1
 800cef8:	4620      	mov	r0, r4
 800cefa:	4629      	mov	r1, r5
 800cefc:	f7f3 f974 	bl	80001e8 <__aeabi_dsub>
 800cf00:	4602      	mov	r2, r0
 800cf02:	460b      	mov	r3, r1
 800cf04:	4640      	mov	r0, r8
 800cf06:	4649      	mov	r1, r9
 800cf08:	f7f3 f96e 	bl	80001e8 <__aeabi_dsub>
 800cf0c:	a372      	add	r3, pc, #456	; (adr r3, 800d0d8 <__ieee754_pow+0xa08>)
 800cf0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf12:	f7f3 fb21 	bl	8000558 <__aeabi_dmul>
 800cf16:	a372      	add	r3, pc, #456	; (adr r3, 800d0e0 <__ieee754_pow+0xa10>)
 800cf18:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf1c:	4680      	mov	r8, r0
 800cf1e:	4689      	mov	r9, r1
 800cf20:	4620      	mov	r0, r4
 800cf22:	4629      	mov	r1, r5
 800cf24:	f7f3 fb18 	bl	8000558 <__aeabi_dmul>
 800cf28:	4602      	mov	r2, r0
 800cf2a:	460b      	mov	r3, r1
 800cf2c:	4640      	mov	r0, r8
 800cf2e:	4649      	mov	r1, r9
 800cf30:	f7f3 f95c 	bl	80001ec <__adddf3>
 800cf34:	4604      	mov	r4, r0
 800cf36:	460d      	mov	r5, r1
 800cf38:	4602      	mov	r2, r0
 800cf3a:	460b      	mov	r3, r1
 800cf3c:	4630      	mov	r0, r6
 800cf3e:	4639      	mov	r1, r7
 800cf40:	f7f3 f954 	bl	80001ec <__adddf3>
 800cf44:	4632      	mov	r2, r6
 800cf46:	463b      	mov	r3, r7
 800cf48:	4680      	mov	r8, r0
 800cf4a:	4689      	mov	r9, r1
 800cf4c:	f7f3 f94c 	bl	80001e8 <__aeabi_dsub>
 800cf50:	4602      	mov	r2, r0
 800cf52:	460b      	mov	r3, r1
 800cf54:	4620      	mov	r0, r4
 800cf56:	4629      	mov	r1, r5
 800cf58:	f7f3 f946 	bl	80001e8 <__aeabi_dsub>
 800cf5c:	4642      	mov	r2, r8
 800cf5e:	4606      	mov	r6, r0
 800cf60:	460f      	mov	r7, r1
 800cf62:	464b      	mov	r3, r9
 800cf64:	4640      	mov	r0, r8
 800cf66:	4649      	mov	r1, r9
 800cf68:	f7f3 faf6 	bl	8000558 <__aeabi_dmul>
 800cf6c:	a35e      	add	r3, pc, #376	; (adr r3, 800d0e8 <__ieee754_pow+0xa18>)
 800cf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf72:	4604      	mov	r4, r0
 800cf74:	460d      	mov	r5, r1
 800cf76:	f7f3 faef 	bl	8000558 <__aeabi_dmul>
 800cf7a:	a35d      	add	r3, pc, #372	; (adr r3, 800d0f0 <__ieee754_pow+0xa20>)
 800cf7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf80:	f7f3 f932 	bl	80001e8 <__aeabi_dsub>
 800cf84:	4622      	mov	r2, r4
 800cf86:	462b      	mov	r3, r5
 800cf88:	f7f3 fae6 	bl	8000558 <__aeabi_dmul>
 800cf8c:	a35a      	add	r3, pc, #360	; (adr r3, 800d0f8 <__ieee754_pow+0xa28>)
 800cf8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf92:	f7f3 f92b 	bl	80001ec <__adddf3>
 800cf96:	4622      	mov	r2, r4
 800cf98:	462b      	mov	r3, r5
 800cf9a:	f7f3 fadd 	bl	8000558 <__aeabi_dmul>
 800cf9e:	a358      	add	r3, pc, #352	; (adr r3, 800d100 <__ieee754_pow+0xa30>)
 800cfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfa4:	f7f3 f920 	bl	80001e8 <__aeabi_dsub>
 800cfa8:	4622      	mov	r2, r4
 800cfaa:	462b      	mov	r3, r5
 800cfac:	f7f3 fad4 	bl	8000558 <__aeabi_dmul>
 800cfb0:	a355      	add	r3, pc, #340	; (adr r3, 800d108 <__ieee754_pow+0xa38>)
 800cfb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfb6:	f7f3 f919 	bl	80001ec <__adddf3>
 800cfba:	4622      	mov	r2, r4
 800cfbc:	462b      	mov	r3, r5
 800cfbe:	f7f3 facb 	bl	8000558 <__aeabi_dmul>
 800cfc2:	4602      	mov	r2, r0
 800cfc4:	460b      	mov	r3, r1
 800cfc6:	4640      	mov	r0, r8
 800cfc8:	4649      	mov	r1, r9
 800cfca:	f7f3 f90d 	bl	80001e8 <__aeabi_dsub>
 800cfce:	4604      	mov	r4, r0
 800cfd0:	460d      	mov	r5, r1
 800cfd2:	4602      	mov	r2, r0
 800cfd4:	460b      	mov	r3, r1
 800cfd6:	4640      	mov	r0, r8
 800cfd8:	4649      	mov	r1, r9
 800cfda:	f7f3 fabd 	bl	8000558 <__aeabi_dmul>
 800cfde:	2200      	movs	r2, #0
 800cfe0:	ec41 0b19 	vmov	d9, r0, r1
 800cfe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800cfe8:	4620      	mov	r0, r4
 800cfea:	4629      	mov	r1, r5
 800cfec:	f7f3 f8fc 	bl	80001e8 <__aeabi_dsub>
 800cff0:	4602      	mov	r2, r0
 800cff2:	460b      	mov	r3, r1
 800cff4:	ec51 0b19 	vmov	r0, r1, d9
 800cff8:	f7f3 fbd8 	bl	80007ac <__aeabi_ddiv>
 800cffc:	4632      	mov	r2, r6
 800cffe:	4604      	mov	r4, r0
 800d000:	460d      	mov	r5, r1
 800d002:	463b      	mov	r3, r7
 800d004:	4640      	mov	r0, r8
 800d006:	4649      	mov	r1, r9
 800d008:	f7f3 faa6 	bl	8000558 <__aeabi_dmul>
 800d00c:	4632      	mov	r2, r6
 800d00e:	463b      	mov	r3, r7
 800d010:	f7f3 f8ec 	bl	80001ec <__adddf3>
 800d014:	4602      	mov	r2, r0
 800d016:	460b      	mov	r3, r1
 800d018:	4620      	mov	r0, r4
 800d01a:	4629      	mov	r1, r5
 800d01c:	f7f3 f8e4 	bl	80001e8 <__aeabi_dsub>
 800d020:	4642      	mov	r2, r8
 800d022:	464b      	mov	r3, r9
 800d024:	f7f3 f8e0 	bl	80001e8 <__aeabi_dsub>
 800d028:	460b      	mov	r3, r1
 800d02a:	4602      	mov	r2, r0
 800d02c:	493a      	ldr	r1, [pc, #232]	; (800d118 <__ieee754_pow+0xa48>)
 800d02e:	2000      	movs	r0, #0
 800d030:	f7f3 f8da 	bl	80001e8 <__aeabi_dsub>
 800d034:	ec41 0b10 	vmov	d0, r0, r1
 800d038:	ee10 3a90 	vmov	r3, s1
 800d03c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800d040:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d044:	da2b      	bge.n	800d09e <__ieee754_pow+0x9ce>
 800d046:	4650      	mov	r0, sl
 800d048:	f001 f8ce 	bl	800e1e8 <scalbn>
 800d04c:	ec51 0b10 	vmov	r0, r1, d0
 800d050:	ec53 2b18 	vmov	r2, r3, d8
 800d054:	f7ff bbed 	b.w	800c832 <__ieee754_pow+0x162>
 800d058:	4b30      	ldr	r3, [pc, #192]	; (800d11c <__ieee754_pow+0xa4c>)
 800d05a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800d05e:	429e      	cmp	r6, r3
 800d060:	f77f af0c 	ble.w	800ce7c <__ieee754_pow+0x7ac>
 800d064:	4b2e      	ldr	r3, [pc, #184]	; (800d120 <__ieee754_pow+0xa50>)
 800d066:	440b      	add	r3, r1
 800d068:	4303      	orrs	r3, r0
 800d06a:	d009      	beq.n	800d080 <__ieee754_pow+0x9b0>
 800d06c:	ec51 0b18 	vmov	r0, r1, d8
 800d070:	2200      	movs	r2, #0
 800d072:	2300      	movs	r3, #0
 800d074:	f7f3 fce2 	bl	8000a3c <__aeabi_dcmplt>
 800d078:	3800      	subs	r0, #0
 800d07a:	bf18      	it	ne
 800d07c:	2001      	movne	r0, #1
 800d07e:	e447      	b.n	800c910 <__ieee754_pow+0x240>
 800d080:	4622      	mov	r2, r4
 800d082:	462b      	mov	r3, r5
 800d084:	f7f3 f8b0 	bl	80001e8 <__aeabi_dsub>
 800d088:	4642      	mov	r2, r8
 800d08a:	464b      	mov	r3, r9
 800d08c:	f7f3 fcea 	bl	8000a64 <__aeabi_dcmpge>
 800d090:	2800      	cmp	r0, #0
 800d092:	f43f aef3 	beq.w	800ce7c <__ieee754_pow+0x7ac>
 800d096:	e7e9      	b.n	800d06c <__ieee754_pow+0x99c>
 800d098:	f04f 0a00 	mov.w	sl, #0
 800d09c:	e71a      	b.n	800ced4 <__ieee754_pow+0x804>
 800d09e:	ec51 0b10 	vmov	r0, r1, d0
 800d0a2:	4619      	mov	r1, r3
 800d0a4:	e7d4      	b.n	800d050 <__ieee754_pow+0x980>
 800d0a6:	491c      	ldr	r1, [pc, #112]	; (800d118 <__ieee754_pow+0xa48>)
 800d0a8:	2000      	movs	r0, #0
 800d0aa:	f7ff bb30 	b.w	800c70e <__ieee754_pow+0x3e>
 800d0ae:	2000      	movs	r0, #0
 800d0b0:	2100      	movs	r1, #0
 800d0b2:	f7ff bb2c 	b.w	800c70e <__ieee754_pow+0x3e>
 800d0b6:	4630      	mov	r0, r6
 800d0b8:	4639      	mov	r1, r7
 800d0ba:	f7ff bb28 	b.w	800c70e <__ieee754_pow+0x3e>
 800d0be:	9204      	str	r2, [sp, #16]
 800d0c0:	f7ff bb7a 	b.w	800c7b8 <__ieee754_pow+0xe8>
 800d0c4:	2300      	movs	r3, #0
 800d0c6:	f7ff bb64 	b.w	800c792 <__ieee754_pow+0xc2>
 800d0ca:	bf00      	nop
 800d0cc:	f3af 8000 	nop.w
 800d0d0:	00000000 	.word	0x00000000
 800d0d4:	3fe62e43 	.word	0x3fe62e43
 800d0d8:	fefa39ef 	.word	0xfefa39ef
 800d0dc:	3fe62e42 	.word	0x3fe62e42
 800d0e0:	0ca86c39 	.word	0x0ca86c39
 800d0e4:	be205c61 	.word	0xbe205c61
 800d0e8:	72bea4d0 	.word	0x72bea4d0
 800d0ec:	3e663769 	.word	0x3e663769
 800d0f0:	c5d26bf1 	.word	0xc5d26bf1
 800d0f4:	3ebbbd41 	.word	0x3ebbbd41
 800d0f8:	af25de2c 	.word	0xaf25de2c
 800d0fc:	3f11566a 	.word	0x3f11566a
 800d100:	16bebd93 	.word	0x16bebd93
 800d104:	3f66c16c 	.word	0x3f66c16c
 800d108:	5555553e 	.word	0x5555553e
 800d10c:	3fc55555 	.word	0x3fc55555
 800d110:	3fe00000 	.word	0x3fe00000
 800d114:	000fffff 	.word	0x000fffff
 800d118:	3ff00000 	.word	0x3ff00000
 800d11c:	4090cbff 	.word	0x4090cbff
 800d120:	3f6f3400 	.word	0x3f6f3400
 800d124:	652b82fe 	.word	0x652b82fe
 800d128:	3c971547 	.word	0x3c971547
 800d12c:	00000000 	.word	0x00000000

0800d130 <__ieee754_rem_pio2>:
 800d130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d134:	ed2d 8b02 	vpush	{d8}
 800d138:	ec55 4b10 	vmov	r4, r5, d0
 800d13c:	4bca      	ldr	r3, [pc, #808]	; (800d468 <__ieee754_rem_pio2+0x338>)
 800d13e:	b08b      	sub	sp, #44	; 0x2c
 800d140:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800d144:	4598      	cmp	r8, r3
 800d146:	4682      	mov	sl, r0
 800d148:	9502      	str	r5, [sp, #8]
 800d14a:	dc08      	bgt.n	800d15e <__ieee754_rem_pio2+0x2e>
 800d14c:	2200      	movs	r2, #0
 800d14e:	2300      	movs	r3, #0
 800d150:	ed80 0b00 	vstr	d0, [r0]
 800d154:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800d158:	f04f 0b00 	mov.w	fp, #0
 800d15c:	e028      	b.n	800d1b0 <__ieee754_rem_pio2+0x80>
 800d15e:	4bc3      	ldr	r3, [pc, #780]	; (800d46c <__ieee754_rem_pio2+0x33c>)
 800d160:	4598      	cmp	r8, r3
 800d162:	dc78      	bgt.n	800d256 <__ieee754_rem_pio2+0x126>
 800d164:	9b02      	ldr	r3, [sp, #8]
 800d166:	4ec2      	ldr	r6, [pc, #776]	; (800d470 <__ieee754_rem_pio2+0x340>)
 800d168:	2b00      	cmp	r3, #0
 800d16a:	ee10 0a10 	vmov	r0, s0
 800d16e:	a3b0      	add	r3, pc, #704	; (adr r3, 800d430 <__ieee754_rem_pio2+0x300>)
 800d170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d174:	4629      	mov	r1, r5
 800d176:	dd39      	ble.n	800d1ec <__ieee754_rem_pio2+0xbc>
 800d178:	f7f3 f836 	bl	80001e8 <__aeabi_dsub>
 800d17c:	45b0      	cmp	r8, r6
 800d17e:	4604      	mov	r4, r0
 800d180:	460d      	mov	r5, r1
 800d182:	d01b      	beq.n	800d1bc <__ieee754_rem_pio2+0x8c>
 800d184:	a3ac      	add	r3, pc, #688	; (adr r3, 800d438 <__ieee754_rem_pio2+0x308>)
 800d186:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d18a:	f7f3 f82d 	bl	80001e8 <__aeabi_dsub>
 800d18e:	4602      	mov	r2, r0
 800d190:	460b      	mov	r3, r1
 800d192:	e9ca 2300 	strd	r2, r3, [sl]
 800d196:	4620      	mov	r0, r4
 800d198:	4629      	mov	r1, r5
 800d19a:	f7f3 f825 	bl	80001e8 <__aeabi_dsub>
 800d19e:	a3a6      	add	r3, pc, #664	; (adr r3, 800d438 <__ieee754_rem_pio2+0x308>)
 800d1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1a4:	f7f3 f820 	bl	80001e8 <__aeabi_dsub>
 800d1a8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d1ac:	f04f 0b01 	mov.w	fp, #1
 800d1b0:	4658      	mov	r0, fp
 800d1b2:	b00b      	add	sp, #44	; 0x2c
 800d1b4:	ecbd 8b02 	vpop	{d8}
 800d1b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1bc:	a3a0      	add	r3, pc, #640	; (adr r3, 800d440 <__ieee754_rem_pio2+0x310>)
 800d1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1c2:	f7f3 f811 	bl	80001e8 <__aeabi_dsub>
 800d1c6:	a3a0      	add	r3, pc, #640	; (adr r3, 800d448 <__ieee754_rem_pio2+0x318>)
 800d1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1cc:	4604      	mov	r4, r0
 800d1ce:	460d      	mov	r5, r1
 800d1d0:	f7f3 f80a 	bl	80001e8 <__aeabi_dsub>
 800d1d4:	4602      	mov	r2, r0
 800d1d6:	460b      	mov	r3, r1
 800d1d8:	e9ca 2300 	strd	r2, r3, [sl]
 800d1dc:	4620      	mov	r0, r4
 800d1de:	4629      	mov	r1, r5
 800d1e0:	f7f3 f802 	bl	80001e8 <__aeabi_dsub>
 800d1e4:	a398      	add	r3, pc, #608	; (adr r3, 800d448 <__ieee754_rem_pio2+0x318>)
 800d1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1ea:	e7db      	b.n	800d1a4 <__ieee754_rem_pio2+0x74>
 800d1ec:	f7f2 fffe 	bl	80001ec <__adddf3>
 800d1f0:	45b0      	cmp	r8, r6
 800d1f2:	4604      	mov	r4, r0
 800d1f4:	460d      	mov	r5, r1
 800d1f6:	d016      	beq.n	800d226 <__ieee754_rem_pio2+0xf6>
 800d1f8:	a38f      	add	r3, pc, #572	; (adr r3, 800d438 <__ieee754_rem_pio2+0x308>)
 800d1fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fe:	f7f2 fff5 	bl	80001ec <__adddf3>
 800d202:	4602      	mov	r2, r0
 800d204:	460b      	mov	r3, r1
 800d206:	e9ca 2300 	strd	r2, r3, [sl]
 800d20a:	4620      	mov	r0, r4
 800d20c:	4629      	mov	r1, r5
 800d20e:	f7f2 ffeb 	bl	80001e8 <__aeabi_dsub>
 800d212:	a389      	add	r3, pc, #548	; (adr r3, 800d438 <__ieee754_rem_pio2+0x308>)
 800d214:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d218:	f7f2 ffe8 	bl	80001ec <__adddf3>
 800d21c:	f04f 3bff 	mov.w	fp, #4294967295
 800d220:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d224:	e7c4      	b.n	800d1b0 <__ieee754_rem_pio2+0x80>
 800d226:	a386      	add	r3, pc, #536	; (adr r3, 800d440 <__ieee754_rem_pio2+0x310>)
 800d228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d22c:	f7f2 ffde 	bl	80001ec <__adddf3>
 800d230:	a385      	add	r3, pc, #532	; (adr r3, 800d448 <__ieee754_rem_pio2+0x318>)
 800d232:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d236:	4604      	mov	r4, r0
 800d238:	460d      	mov	r5, r1
 800d23a:	f7f2 ffd7 	bl	80001ec <__adddf3>
 800d23e:	4602      	mov	r2, r0
 800d240:	460b      	mov	r3, r1
 800d242:	e9ca 2300 	strd	r2, r3, [sl]
 800d246:	4620      	mov	r0, r4
 800d248:	4629      	mov	r1, r5
 800d24a:	f7f2 ffcd 	bl	80001e8 <__aeabi_dsub>
 800d24e:	a37e      	add	r3, pc, #504	; (adr r3, 800d448 <__ieee754_rem_pio2+0x318>)
 800d250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d254:	e7e0      	b.n	800d218 <__ieee754_rem_pio2+0xe8>
 800d256:	4b87      	ldr	r3, [pc, #540]	; (800d474 <__ieee754_rem_pio2+0x344>)
 800d258:	4598      	cmp	r8, r3
 800d25a:	f300 80d9 	bgt.w	800d410 <__ieee754_rem_pio2+0x2e0>
 800d25e:	f000 ff2d 	bl	800e0bc <fabs>
 800d262:	ec55 4b10 	vmov	r4, r5, d0
 800d266:	ee10 0a10 	vmov	r0, s0
 800d26a:	a379      	add	r3, pc, #484	; (adr r3, 800d450 <__ieee754_rem_pio2+0x320>)
 800d26c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d270:	4629      	mov	r1, r5
 800d272:	f7f3 f971 	bl	8000558 <__aeabi_dmul>
 800d276:	4b80      	ldr	r3, [pc, #512]	; (800d478 <__ieee754_rem_pio2+0x348>)
 800d278:	2200      	movs	r2, #0
 800d27a:	f7f2 ffb7 	bl	80001ec <__adddf3>
 800d27e:	f7f3 fc1b 	bl	8000ab8 <__aeabi_d2iz>
 800d282:	4683      	mov	fp, r0
 800d284:	f7f3 f8fe 	bl	8000484 <__aeabi_i2d>
 800d288:	4602      	mov	r2, r0
 800d28a:	460b      	mov	r3, r1
 800d28c:	ec43 2b18 	vmov	d8, r2, r3
 800d290:	a367      	add	r3, pc, #412	; (adr r3, 800d430 <__ieee754_rem_pio2+0x300>)
 800d292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d296:	f7f3 f95f 	bl	8000558 <__aeabi_dmul>
 800d29a:	4602      	mov	r2, r0
 800d29c:	460b      	mov	r3, r1
 800d29e:	4620      	mov	r0, r4
 800d2a0:	4629      	mov	r1, r5
 800d2a2:	f7f2 ffa1 	bl	80001e8 <__aeabi_dsub>
 800d2a6:	a364      	add	r3, pc, #400	; (adr r3, 800d438 <__ieee754_rem_pio2+0x308>)
 800d2a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2ac:	4606      	mov	r6, r0
 800d2ae:	460f      	mov	r7, r1
 800d2b0:	ec51 0b18 	vmov	r0, r1, d8
 800d2b4:	f7f3 f950 	bl	8000558 <__aeabi_dmul>
 800d2b8:	f1bb 0f1f 	cmp.w	fp, #31
 800d2bc:	4604      	mov	r4, r0
 800d2be:	460d      	mov	r5, r1
 800d2c0:	dc0d      	bgt.n	800d2de <__ieee754_rem_pio2+0x1ae>
 800d2c2:	4b6e      	ldr	r3, [pc, #440]	; (800d47c <__ieee754_rem_pio2+0x34c>)
 800d2c4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800d2c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d2cc:	4543      	cmp	r3, r8
 800d2ce:	d006      	beq.n	800d2de <__ieee754_rem_pio2+0x1ae>
 800d2d0:	4622      	mov	r2, r4
 800d2d2:	462b      	mov	r3, r5
 800d2d4:	4630      	mov	r0, r6
 800d2d6:	4639      	mov	r1, r7
 800d2d8:	f7f2 ff86 	bl	80001e8 <__aeabi_dsub>
 800d2dc:	e00f      	b.n	800d2fe <__ieee754_rem_pio2+0x1ce>
 800d2de:	462b      	mov	r3, r5
 800d2e0:	4622      	mov	r2, r4
 800d2e2:	4630      	mov	r0, r6
 800d2e4:	4639      	mov	r1, r7
 800d2e6:	f7f2 ff7f 	bl	80001e8 <__aeabi_dsub>
 800d2ea:	ea4f 5328 	mov.w	r3, r8, asr #20
 800d2ee:	9303      	str	r3, [sp, #12]
 800d2f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d2f4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800d2f8:	f1b8 0f10 	cmp.w	r8, #16
 800d2fc:	dc02      	bgt.n	800d304 <__ieee754_rem_pio2+0x1d4>
 800d2fe:	e9ca 0100 	strd	r0, r1, [sl]
 800d302:	e039      	b.n	800d378 <__ieee754_rem_pio2+0x248>
 800d304:	a34e      	add	r3, pc, #312	; (adr r3, 800d440 <__ieee754_rem_pio2+0x310>)
 800d306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d30a:	ec51 0b18 	vmov	r0, r1, d8
 800d30e:	f7f3 f923 	bl	8000558 <__aeabi_dmul>
 800d312:	4604      	mov	r4, r0
 800d314:	460d      	mov	r5, r1
 800d316:	4602      	mov	r2, r0
 800d318:	460b      	mov	r3, r1
 800d31a:	4630      	mov	r0, r6
 800d31c:	4639      	mov	r1, r7
 800d31e:	f7f2 ff63 	bl	80001e8 <__aeabi_dsub>
 800d322:	4602      	mov	r2, r0
 800d324:	460b      	mov	r3, r1
 800d326:	4680      	mov	r8, r0
 800d328:	4689      	mov	r9, r1
 800d32a:	4630      	mov	r0, r6
 800d32c:	4639      	mov	r1, r7
 800d32e:	f7f2 ff5b 	bl	80001e8 <__aeabi_dsub>
 800d332:	4622      	mov	r2, r4
 800d334:	462b      	mov	r3, r5
 800d336:	f7f2 ff57 	bl	80001e8 <__aeabi_dsub>
 800d33a:	a343      	add	r3, pc, #268	; (adr r3, 800d448 <__ieee754_rem_pio2+0x318>)
 800d33c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d340:	4604      	mov	r4, r0
 800d342:	460d      	mov	r5, r1
 800d344:	ec51 0b18 	vmov	r0, r1, d8
 800d348:	f7f3 f906 	bl	8000558 <__aeabi_dmul>
 800d34c:	4622      	mov	r2, r4
 800d34e:	462b      	mov	r3, r5
 800d350:	f7f2 ff4a 	bl	80001e8 <__aeabi_dsub>
 800d354:	4602      	mov	r2, r0
 800d356:	460b      	mov	r3, r1
 800d358:	4604      	mov	r4, r0
 800d35a:	460d      	mov	r5, r1
 800d35c:	4640      	mov	r0, r8
 800d35e:	4649      	mov	r1, r9
 800d360:	f7f2 ff42 	bl	80001e8 <__aeabi_dsub>
 800d364:	9a03      	ldr	r2, [sp, #12]
 800d366:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800d36a:	1ad3      	subs	r3, r2, r3
 800d36c:	2b31      	cmp	r3, #49	; 0x31
 800d36e:	dc24      	bgt.n	800d3ba <__ieee754_rem_pio2+0x28a>
 800d370:	e9ca 0100 	strd	r0, r1, [sl]
 800d374:	4646      	mov	r6, r8
 800d376:	464f      	mov	r7, r9
 800d378:	e9da 8900 	ldrd	r8, r9, [sl]
 800d37c:	4630      	mov	r0, r6
 800d37e:	4642      	mov	r2, r8
 800d380:	464b      	mov	r3, r9
 800d382:	4639      	mov	r1, r7
 800d384:	f7f2 ff30 	bl	80001e8 <__aeabi_dsub>
 800d388:	462b      	mov	r3, r5
 800d38a:	4622      	mov	r2, r4
 800d38c:	f7f2 ff2c 	bl	80001e8 <__aeabi_dsub>
 800d390:	9b02      	ldr	r3, [sp, #8]
 800d392:	2b00      	cmp	r3, #0
 800d394:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d398:	f6bf af0a 	bge.w	800d1b0 <__ieee754_rem_pio2+0x80>
 800d39c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800d3a0:	f8ca 3004 	str.w	r3, [sl, #4]
 800d3a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d3a8:	f8ca 8000 	str.w	r8, [sl]
 800d3ac:	f8ca 0008 	str.w	r0, [sl, #8]
 800d3b0:	f8ca 300c 	str.w	r3, [sl, #12]
 800d3b4:	f1cb 0b00 	rsb	fp, fp, #0
 800d3b8:	e6fa      	b.n	800d1b0 <__ieee754_rem_pio2+0x80>
 800d3ba:	a327      	add	r3, pc, #156	; (adr r3, 800d458 <__ieee754_rem_pio2+0x328>)
 800d3bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3c0:	ec51 0b18 	vmov	r0, r1, d8
 800d3c4:	f7f3 f8c8 	bl	8000558 <__aeabi_dmul>
 800d3c8:	4604      	mov	r4, r0
 800d3ca:	460d      	mov	r5, r1
 800d3cc:	4602      	mov	r2, r0
 800d3ce:	460b      	mov	r3, r1
 800d3d0:	4640      	mov	r0, r8
 800d3d2:	4649      	mov	r1, r9
 800d3d4:	f7f2 ff08 	bl	80001e8 <__aeabi_dsub>
 800d3d8:	4602      	mov	r2, r0
 800d3da:	460b      	mov	r3, r1
 800d3dc:	4606      	mov	r6, r0
 800d3de:	460f      	mov	r7, r1
 800d3e0:	4640      	mov	r0, r8
 800d3e2:	4649      	mov	r1, r9
 800d3e4:	f7f2 ff00 	bl	80001e8 <__aeabi_dsub>
 800d3e8:	4622      	mov	r2, r4
 800d3ea:	462b      	mov	r3, r5
 800d3ec:	f7f2 fefc 	bl	80001e8 <__aeabi_dsub>
 800d3f0:	a31b      	add	r3, pc, #108	; (adr r3, 800d460 <__ieee754_rem_pio2+0x330>)
 800d3f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	460d      	mov	r5, r1
 800d3fa:	ec51 0b18 	vmov	r0, r1, d8
 800d3fe:	f7f3 f8ab 	bl	8000558 <__aeabi_dmul>
 800d402:	4622      	mov	r2, r4
 800d404:	462b      	mov	r3, r5
 800d406:	f7f2 feef 	bl	80001e8 <__aeabi_dsub>
 800d40a:	4604      	mov	r4, r0
 800d40c:	460d      	mov	r5, r1
 800d40e:	e75f      	b.n	800d2d0 <__ieee754_rem_pio2+0x1a0>
 800d410:	4b1b      	ldr	r3, [pc, #108]	; (800d480 <__ieee754_rem_pio2+0x350>)
 800d412:	4598      	cmp	r8, r3
 800d414:	dd36      	ble.n	800d484 <__ieee754_rem_pio2+0x354>
 800d416:	ee10 2a10 	vmov	r2, s0
 800d41a:	462b      	mov	r3, r5
 800d41c:	4620      	mov	r0, r4
 800d41e:	4629      	mov	r1, r5
 800d420:	f7f2 fee2 	bl	80001e8 <__aeabi_dsub>
 800d424:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800d428:	e9ca 0100 	strd	r0, r1, [sl]
 800d42c:	e694      	b.n	800d158 <__ieee754_rem_pio2+0x28>
 800d42e:	bf00      	nop
 800d430:	54400000 	.word	0x54400000
 800d434:	3ff921fb 	.word	0x3ff921fb
 800d438:	1a626331 	.word	0x1a626331
 800d43c:	3dd0b461 	.word	0x3dd0b461
 800d440:	1a600000 	.word	0x1a600000
 800d444:	3dd0b461 	.word	0x3dd0b461
 800d448:	2e037073 	.word	0x2e037073
 800d44c:	3ba3198a 	.word	0x3ba3198a
 800d450:	6dc9c883 	.word	0x6dc9c883
 800d454:	3fe45f30 	.word	0x3fe45f30
 800d458:	2e000000 	.word	0x2e000000
 800d45c:	3ba3198a 	.word	0x3ba3198a
 800d460:	252049c1 	.word	0x252049c1
 800d464:	397b839a 	.word	0x397b839a
 800d468:	3fe921fb 	.word	0x3fe921fb
 800d46c:	4002d97b 	.word	0x4002d97b
 800d470:	3ff921fb 	.word	0x3ff921fb
 800d474:	413921fb 	.word	0x413921fb
 800d478:	3fe00000 	.word	0x3fe00000
 800d47c:	0800e9e0 	.word	0x0800e9e0
 800d480:	7fefffff 	.word	0x7fefffff
 800d484:	ea4f 5428 	mov.w	r4, r8, asr #20
 800d488:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800d48c:	ee10 0a10 	vmov	r0, s0
 800d490:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800d494:	ee10 6a10 	vmov	r6, s0
 800d498:	460f      	mov	r7, r1
 800d49a:	f7f3 fb0d 	bl	8000ab8 <__aeabi_d2iz>
 800d49e:	f7f2 fff1 	bl	8000484 <__aeabi_i2d>
 800d4a2:	4602      	mov	r2, r0
 800d4a4:	460b      	mov	r3, r1
 800d4a6:	4630      	mov	r0, r6
 800d4a8:	4639      	mov	r1, r7
 800d4aa:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800d4ae:	f7f2 fe9b 	bl	80001e8 <__aeabi_dsub>
 800d4b2:	4b23      	ldr	r3, [pc, #140]	; (800d540 <__ieee754_rem_pio2+0x410>)
 800d4b4:	2200      	movs	r2, #0
 800d4b6:	f7f3 f84f 	bl	8000558 <__aeabi_dmul>
 800d4ba:	460f      	mov	r7, r1
 800d4bc:	4606      	mov	r6, r0
 800d4be:	f7f3 fafb 	bl	8000ab8 <__aeabi_d2iz>
 800d4c2:	f7f2 ffdf 	bl	8000484 <__aeabi_i2d>
 800d4c6:	4602      	mov	r2, r0
 800d4c8:	460b      	mov	r3, r1
 800d4ca:	4630      	mov	r0, r6
 800d4cc:	4639      	mov	r1, r7
 800d4ce:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800d4d2:	f7f2 fe89 	bl	80001e8 <__aeabi_dsub>
 800d4d6:	4b1a      	ldr	r3, [pc, #104]	; (800d540 <__ieee754_rem_pio2+0x410>)
 800d4d8:	2200      	movs	r2, #0
 800d4da:	f7f3 f83d 	bl	8000558 <__aeabi_dmul>
 800d4de:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800d4e2:	ad04      	add	r5, sp, #16
 800d4e4:	f04f 0803 	mov.w	r8, #3
 800d4e8:	46a9      	mov	r9, r5
 800d4ea:	2600      	movs	r6, #0
 800d4ec:	2700      	movs	r7, #0
 800d4ee:	4632      	mov	r2, r6
 800d4f0:	463b      	mov	r3, r7
 800d4f2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800d4f6:	46c3      	mov	fp, r8
 800d4f8:	3d08      	subs	r5, #8
 800d4fa:	f108 38ff 	add.w	r8, r8, #4294967295
 800d4fe:	f7f3 fa93 	bl	8000a28 <__aeabi_dcmpeq>
 800d502:	2800      	cmp	r0, #0
 800d504:	d1f3      	bne.n	800d4ee <__ieee754_rem_pio2+0x3be>
 800d506:	4b0f      	ldr	r3, [pc, #60]	; (800d544 <__ieee754_rem_pio2+0x414>)
 800d508:	9301      	str	r3, [sp, #4]
 800d50a:	2302      	movs	r3, #2
 800d50c:	9300      	str	r3, [sp, #0]
 800d50e:	4622      	mov	r2, r4
 800d510:	465b      	mov	r3, fp
 800d512:	4651      	mov	r1, sl
 800d514:	4648      	mov	r0, r9
 800d516:	f000 f993 	bl	800d840 <__kernel_rem_pio2>
 800d51a:	9b02      	ldr	r3, [sp, #8]
 800d51c:	2b00      	cmp	r3, #0
 800d51e:	4683      	mov	fp, r0
 800d520:	f6bf ae46 	bge.w	800d1b0 <__ieee754_rem_pio2+0x80>
 800d524:	e9da 2100 	ldrd	r2, r1, [sl]
 800d528:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d52c:	e9ca 2300 	strd	r2, r3, [sl]
 800d530:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800d534:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800d538:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800d53c:	e73a      	b.n	800d3b4 <__ieee754_rem_pio2+0x284>
 800d53e:	bf00      	nop
 800d540:	41700000 	.word	0x41700000
 800d544:	0800ea60 	.word	0x0800ea60

0800d548 <__ieee754_sqrt>:
 800d548:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d54c:	ec55 4b10 	vmov	r4, r5, d0
 800d550:	4e55      	ldr	r6, [pc, #340]	; (800d6a8 <__ieee754_sqrt+0x160>)
 800d552:	43ae      	bics	r6, r5
 800d554:	ee10 0a10 	vmov	r0, s0
 800d558:	ee10 3a10 	vmov	r3, s0
 800d55c:	462a      	mov	r2, r5
 800d55e:	4629      	mov	r1, r5
 800d560:	d110      	bne.n	800d584 <__ieee754_sqrt+0x3c>
 800d562:	ee10 2a10 	vmov	r2, s0
 800d566:	462b      	mov	r3, r5
 800d568:	f7f2 fff6 	bl	8000558 <__aeabi_dmul>
 800d56c:	4602      	mov	r2, r0
 800d56e:	460b      	mov	r3, r1
 800d570:	4620      	mov	r0, r4
 800d572:	4629      	mov	r1, r5
 800d574:	f7f2 fe3a 	bl	80001ec <__adddf3>
 800d578:	4604      	mov	r4, r0
 800d57a:	460d      	mov	r5, r1
 800d57c:	ec45 4b10 	vmov	d0, r4, r5
 800d580:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d584:	2d00      	cmp	r5, #0
 800d586:	dc10      	bgt.n	800d5aa <__ieee754_sqrt+0x62>
 800d588:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800d58c:	4330      	orrs	r0, r6
 800d58e:	d0f5      	beq.n	800d57c <__ieee754_sqrt+0x34>
 800d590:	b15d      	cbz	r5, 800d5aa <__ieee754_sqrt+0x62>
 800d592:	ee10 2a10 	vmov	r2, s0
 800d596:	462b      	mov	r3, r5
 800d598:	ee10 0a10 	vmov	r0, s0
 800d59c:	f7f2 fe24 	bl	80001e8 <__aeabi_dsub>
 800d5a0:	4602      	mov	r2, r0
 800d5a2:	460b      	mov	r3, r1
 800d5a4:	f7f3 f902 	bl	80007ac <__aeabi_ddiv>
 800d5a8:	e7e6      	b.n	800d578 <__ieee754_sqrt+0x30>
 800d5aa:	1512      	asrs	r2, r2, #20
 800d5ac:	d074      	beq.n	800d698 <__ieee754_sqrt+0x150>
 800d5ae:	07d4      	lsls	r4, r2, #31
 800d5b0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800d5b4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800d5b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800d5bc:	bf5e      	ittt	pl
 800d5be:	0fda      	lsrpl	r2, r3, #31
 800d5c0:	005b      	lslpl	r3, r3, #1
 800d5c2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800d5c6:	2400      	movs	r4, #0
 800d5c8:	0fda      	lsrs	r2, r3, #31
 800d5ca:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800d5ce:	107f      	asrs	r7, r7, #1
 800d5d0:	005b      	lsls	r3, r3, #1
 800d5d2:	2516      	movs	r5, #22
 800d5d4:	4620      	mov	r0, r4
 800d5d6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800d5da:	1886      	adds	r6, r0, r2
 800d5dc:	428e      	cmp	r6, r1
 800d5de:	bfde      	ittt	le
 800d5e0:	1b89      	suble	r1, r1, r6
 800d5e2:	18b0      	addle	r0, r6, r2
 800d5e4:	18a4      	addle	r4, r4, r2
 800d5e6:	0049      	lsls	r1, r1, #1
 800d5e8:	3d01      	subs	r5, #1
 800d5ea:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800d5ee:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800d5f2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d5f6:	d1f0      	bne.n	800d5da <__ieee754_sqrt+0x92>
 800d5f8:	462a      	mov	r2, r5
 800d5fa:	f04f 0e20 	mov.w	lr, #32
 800d5fe:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800d602:	4281      	cmp	r1, r0
 800d604:	eb06 0c05 	add.w	ip, r6, r5
 800d608:	dc02      	bgt.n	800d610 <__ieee754_sqrt+0xc8>
 800d60a:	d113      	bne.n	800d634 <__ieee754_sqrt+0xec>
 800d60c:	459c      	cmp	ip, r3
 800d60e:	d811      	bhi.n	800d634 <__ieee754_sqrt+0xec>
 800d610:	f1bc 0f00 	cmp.w	ip, #0
 800d614:	eb0c 0506 	add.w	r5, ip, r6
 800d618:	da43      	bge.n	800d6a2 <__ieee754_sqrt+0x15a>
 800d61a:	2d00      	cmp	r5, #0
 800d61c:	db41      	blt.n	800d6a2 <__ieee754_sqrt+0x15a>
 800d61e:	f100 0801 	add.w	r8, r0, #1
 800d622:	1a09      	subs	r1, r1, r0
 800d624:	459c      	cmp	ip, r3
 800d626:	bf88      	it	hi
 800d628:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800d62c:	eba3 030c 	sub.w	r3, r3, ip
 800d630:	4432      	add	r2, r6
 800d632:	4640      	mov	r0, r8
 800d634:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800d638:	f1be 0e01 	subs.w	lr, lr, #1
 800d63c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800d640:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800d644:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800d648:	d1db      	bne.n	800d602 <__ieee754_sqrt+0xba>
 800d64a:	430b      	orrs	r3, r1
 800d64c:	d006      	beq.n	800d65c <__ieee754_sqrt+0x114>
 800d64e:	1c50      	adds	r0, r2, #1
 800d650:	bf13      	iteet	ne
 800d652:	3201      	addne	r2, #1
 800d654:	3401      	addeq	r4, #1
 800d656:	4672      	moveq	r2, lr
 800d658:	f022 0201 	bicne.w	r2, r2, #1
 800d65c:	1063      	asrs	r3, r4, #1
 800d65e:	0852      	lsrs	r2, r2, #1
 800d660:	07e1      	lsls	r1, r4, #31
 800d662:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800d666:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800d66a:	bf48      	it	mi
 800d66c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800d670:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800d674:	4614      	mov	r4, r2
 800d676:	e781      	b.n	800d57c <__ieee754_sqrt+0x34>
 800d678:	0ad9      	lsrs	r1, r3, #11
 800d67a:	3815      	subs	r0, #21
 800d67c:	055b      	lsls	r3, r3, #21
 800d67e:	2900      	cmp	r1, #0
 800d680:	d0fa      	beq.n	800d678 <__ieee754_sqrt+0x130>
 800d682:	02cd      	lsls	r5, r1, #11
 800d684:	d50a      	bpl.n	800d69c <__ieee754_sqrt+0x154>
 800d686:	f1c2 0420 	rsb	r4, r2, #32
 800d68a:	fa23 f404 	lsr.w	r4, r3, r4
 800d68e:	1e55      	subs	r5, r2, #1
 800d690:	4093      	lsls	r3, r2
 800d692:	4321      	orrs	r1, r4
 800d694:	1b42      	subs	r2, r0, r5
 800d696:	e78a      	b.n	800d5ae <__ieee754_sqrt+0x66>
 800d698:	4610      	mov	r0, r2
 800d69a:	e7f0      	b.n	800d67e <__ieee754_sqrt+0x136>
 800d69c:	0049      	lsls	r1, r1, #1
 800d69e:	3201      	adds	r2, #1
 800d6a0:	e7ef      	b.n	800d682 <__ieee754_sqrt+0x13a>
 800d6a2:	4680      	mov	r8, r0
 800d6a4:	e7bd      	b.n	800d622 <__ieee754_sqrt+0xda>
 800d6a6:	bf00      	nop
 800d6a8:	7ff00000 	.word	0x7ff00000
 800d6ac:	00000000 	.word	0x00000000

0800d6b0 <__kernel_cos>:
 800d6b0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d6b4:	ec57 6b10 	vmov	r6, r7, d0
 800d6b8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800d6bc:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800d6c0:	ed8d 1b00 	vstr	d1, [sp]
 800d6c4:	da07      	bge.n	800d6d6 <__kernel_cos+0x26>
 800d6c6:	ee10 0a10 	vmov	r0, s0
 800d6ca:	4639      	mov	r1, r7
 800d6cc:	f7f3 f9f4 	bl	8000ab8 <__aeabi_d2iz>
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	f000 8088 	beq.w	800d7e6 <__kernel_cos+0x136>
 800d6d6:	4632      	mov	r2, r6
 800d6d8:	463b      	mov	r3, r7
 800d6da:	4630      	mov	r0, r6
 800d6dc:	4639      	mov	r1, r7
 800d6de:	f7f2 ff3b 	bl	8000558 <__aeabi_dmul>
 800d6e2:	4b51      	ldr	r3, [pc, #324]	; (800d828 <__kernel_cos+0x178>)
 800d6e4:	2200      	movs	r2, #0
 800d6e6:	4604      	mov	r4, r0
 800d6e8:	460d      	mov	r5, r1
 800d6ea:	f7f2 ff35 	bl	8000558 <__aeabi_dmul>
 800d6ee:	a340      	add	r3, pc, #256	; (adr r3, 800d7f0 <__kernel_cos+0x140>)
 800d6f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6f4:	4682      	mov	sl, r0
 800d6f6:	468b      	mov	fp, r1
 800d6f8:	4620      	mov	r0, r4
 800d6fa:	4629      	mov	r1, r5
 800d6fc:	f7f2 ff2c 	bl	8000558 <__aeabi_dmul>
 800d700:	a33d      	add	r3, pc, #244	; (adr r3, 800d7f8 <__kernel_cos+0x148>)
 800d702:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d706:	f7f2 fd71 	bl	80001ec <__adddf3>
 800d70a:	4622      	mov	r2, r4
 800d70c:	462b      	mov	r3, r5
 800d70e:	f7f2 ff23 	bl	8000558 <__aeabi_dmul>
 800d712:	a33b      	add	r3, pc, #236	; (adr r3, 800d800 <__kernel_cos+0x150>)
 800d714:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d718:	f7f2 fd66 	bl	80001e8 <__aeabi_dsub>
 800d71c:	4622      	mov	r2, r4
 800d71e:	462b      	mov	r3, r5
 800d720:	f7f2 ff1a 	bl	8000558 <__aeabi_dmul>
 800d724:	a338      	add	r3, pc, #224	; (adr r3, 800d808 <__kernel_cos+0x158>)
 800d726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d72a:	f7f2 fd5f 	bl	80001ec <__adddf3>
 800d72e:	4622      	mov	r2, r4
 800d730:	462b      	mov	r3, r5
 800d732:	f7f2 ff11 	bl	8000558 <__aeabi_dmul>
 800d736:	a336      	add	r3, pc, #216	; (adr r3, 800d810 <__kernel_cos+0x160>)
 800d738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d73c:	f7f2 fd54 	bl	80001e8 <__aeabi_dsub>
 800d740:	4622      	mov	r2, r4
 800d742:	462b      	mov	r3, r5
 800d744:	f7f2 ff08 	bl	8000558 <__aeabi_dmul>
 800d748:	a333      	add	r3, pc, #204	; (adr r3, 800d818 <__kernel_cos+0x168>)
 800d74a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d74e:	f7f2 fd4d 	bl	80001ec <__adddf3>
 800d752:	4622      	mov	r2, r4
 800d754:	462b      	mov	r3, r5
 800d756:	f7f2 feff 	bl	8000558 <__aeabi_dmul>
 800d75a:	4622      	mov	r2, r4
 800d75c:	462b      	mov	r3, r5
 800d75e:	f7f2 fefb 	bl	8000558 <__aeabi_dmul>
 800d762:	e9dd 2300 	ldrd	r2, r3, [sp]
 800d766:	4604      	mov	r4, r0
 800d768:	460d      	mov	r5, r1
 800d76a:	4630      	mov	r0, r6
 800d76c:	4639      	mov	r1, r7
 800d76e:	f7f2 fef3 	bl	8000558 <__aeabi_dmul>
 800d772:	460b      	mov	r3, r1
 800d774:	4602      	mov	r2, r0
 800d776:	4629      	mov	r1, r5
 800d778:	4620      	mov	r0, r4
 800d77a:	f7f2 fd35 	bl	80001e8 <__aeabi_dsub>
 800d77e:	4b2b      	ldr	r3, [pc, #172]	; (800d82c <__kernel_cos+0x17c>)
 800d780:	4598      	cmp	r8, r3
 800d782:	4606      	mov	r6, r0
 800d784:	460f      	mov	r7, r1
 800d786:	dc10      	bgt.n	800d7aa <__kernel_cos+0xfa>
 800d788:	4602      	mov	r2, r0
 800d78a:	460b      	mov	r3, r1
 800d78c:	4650      	mov	r0, sl
 800d78e:	4659      	mov	r1, fp
 800d790:	f7f2 fd2a 	bl	80001e8 <__aeabi_dsub>
 800d794:	460b      	mov	r3, r1
 800d796:	4926      	ldr	r1, [pc, #152]	; (800d830 <__kernel_cos+0x180>)
 800d798:	4602      	mov	r2, r0
 800d79a:	2000      	movs	r0, #0
 800d79c:	f7f2 fd24 	bl	80001e8 <__aeabi_dsub>
 800d7a0:	ec41 0b10 	vmov	d0, r0, r1
 800d7a4:	b003      	add	sp, #12
 800d7a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7aa:	4b22      	ldr	r3, [pc, #136]	; (800d834 <__kernel_cos+0x184>)
 800d7ac:	4920      	ldr	r1, [pc, #128]	; (800d830 <__kernel_cos+0x180>)
 800d7ae:	4598      	cmp	r8, r3
 800d7b0:	bfcc      	ite	gt
 800d7b2:	4d21      	ldrgt	r5, [pc, #132]	; (800d838 <__kernel_cos+0x188>)
 800d7b4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800d7b8:	2400      	movs	r4, #0
 800d7ba:	4622      	mov	r2, r4
 800d7bc:	462b      	mov	r3, r5
 800d7be:	2000      	movs	r0, #0
 800d7c0:	f7f2 fd12 	bl	80001e8 <__aeabi_dsub>
 800d7c4:	4622      	mov	r2, r4
 800d7c6:	4680      	mov	r8, r0
 800d7c8:	4689      	mov	r9, r1
 800d7ca:	462b      	mov	r3, r5
 800d7cc:	4650      	mov	r0, sl
 800d7ce:	4659      	mov	r1, fp
 800d7d0:	f7f2 fd0a 	bl	80001e8 <__aeabi_dsub>
 800d7d4:	4632      	mov	r2, r6
 800d7d6:	463b      	mov	r3, r7
 800d7d8:	f7f2 fd06 	bl	80001e8 <__aeabi_dsub>
 800d7dc:	4602      	mov	r2, r0
 800d7de:	460b      	mov	r3, r1
 800d7e0:	4640      	mov	r0, r8
 800d7e2:	4649      	mov	r1, r9
 800d7e4:	e7da      	b.n	800d79c <__kernel_cos+0xec>
 800d7e6:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800d820 <__kernel_cos+0x170>
 800d7ea:	e7db      	b.n	800d7a4 <__kernel_cos+0xf4>
 800d7ec:	f3af 8000 	nop.w
 800d7f0:	be8838d4 	.word	0xbe8838d4
 800d7f4:	bda8fae9 	.word	0xbda8fae9
 800d7f8:	bdb4b1c4 	.word	0xbdb4b1c4
 800d7fc:	3e21ee9e 	.word	0x3e21ee9e
 800d800:	809c52ad 	.word	0x809c52ad
 800d804:	3e927e4f 	.word	0x3e927e4f
 800d808:	19cb1590 	.word	0x19cb1590
 800d80c:	3efa01a0 	.word	0x3efa01a0
 800d810:	16c15177 	.word	0x16c15177
 800d814:	3f56c16c 	.word	0x3f56c16c
 800d818:	5555554c 	.word	0x5555554c
 800d81c:	3fa55555 	.word	0x3fa55555
 800d820:	00000000 	.word	0x00000000
 800d824:	3ff00000 	.word	0x3ff00000
 800d828:	3fe00000 	.word	0x3fe00000
 800d82c:	3fd33332 	.word	0x3fd33332
 800d830:	3ff00000 	.word	0x3ff00000
 800d834:	3fe90000 	.word	0x3fe90000
 800d838:	3fd20000 	.word	0x3fd20000
 800d83c:	00000000 	.word	0x00000000

0800d840 <__kernel_rem_pio2>:
 800d840:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d844:	ed2d 8b02 	vpush	{d8}
 800d848:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800d84c:	f112 0f14 	cmn.w	r2, #20
 800d850:	9308      	str	r3, [sp, #32]
 800d852:	9101      	str	r1, [sp, #4]
 800d854:	4bc4      	ldr	r3, [pc, #784]	; (800db68 <__kernel_rem_pio2+0x328>)
 800d856:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800d858:	900b      	str	r0, [sp, #44]	; 0x2c
 800d85a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800d85e:	9302      	str	r3, [sp, #8]
 800d860:	9b08      	ldr	r3, [sp, #32]
 800d862:	f103 33ff 	add.w	r3, r3, #4294967295
 800d866:	bfa8      	it	ge
 800d868:	1ed4      	subge	r4, r2, #3
 800d86a:	9306      	str	r3, [sp, #24]
 800d86c:	bfb2      	itee	lt
 800d86e:	2400      	movlt	r4, #0
 800d870:	2318      	movge	r3, #24
 800d872:	fb94 f4f3 	sdivge	r4, r4, r3
 800d876:	f06f 0317 	mvn.w	r3, #23
 800d87a:	fb04 3303 	mla	r3, r4, r3, r3
 800d87e:	eb03 0a02 	add.w	sl, r3, r2
 800d882:	9b02      	ldr	r3, [sp, #8]
 800d884:	9a06      	ldr	r2, [sp, #24]
 800d886:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800db58 <__kernel_rem_pio2+0x318>
 800d88a:	eb03 0802 	add.w	r8, r3, r2
 800d88e:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d890:	1aa7      	subs	r7, r4, r2
 800d892:	ae22      	add	r6, sp, #136	; 0x88
 800d894:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800d898:	2500      	movs	r5, #0
 800d89a:	4545      	cmp	r5, r8
 800d89c:	dd13      	ble.n	800d8c6 <__kernel_rem_pio2+0x86>
 800d89e:	9b08      	ldr	r3, [sp, #32]
 800d8a0:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800db58 <__kernel_rem_pio2+0x318>
 800d8a4:	aa22      	add	r2, sp, #136	; 0x88
 800d8a6:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800d8aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800d8ae:	f04f 0800 	mov.w	r8, #0
 800d8b2:	9b02      	ldr	r3, [sp, #8]
 800d8b4:	4598      	cmp	r8, r3
 800d8b6:	dc2f      	bgt.n	800d918 <__kernel_rem_pio2+0xd8>
 800d8b8:	ed8d 8b04 	vstr	d8, [sp, #16]
 800d8bc:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800d8c0:	462f      	mov	r7, r5
 800d8c2:	2600      	movs	r6, #0
 800d8c4:	e01b      	b.n	800d8fe <__kernel_rem_pio2+0xbe>
 800d8c6:	42ef      	cmn	r7, r5
 800d8c8:	d407      	bmi.n	800d8da <__kernel_rem_pio2+0x9a>
 800d8ca:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800d8ce:	f7f2 fdd9 	bl	8000484 <__aeabi_i2d>
 800d8d2:	e8e6 0102 	strd	r0, r1, [r6], #8
 800d8d6:	3501      	adds	r5, #1
 800d8d8:	e7df      	b.n	800d89a <__kernel_rem_pio2+0x5a>
 800d8da:	ec51 0b18 	vmov	r0, r1, d8
 800d8de:	e7f8      	b.n	800d8d2 <__kernel_rem_pio2+0x92>
 800d8e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800d8e4:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800d8e8:	f7f2 fe36 	bl	8000558 <__aeabi_dmul>
 800d8ec:	4602      	mov	r2, r0
 800d8ee:	460b      	mov	r3, r1
 800d8f0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800d8f4:	f7f2 fc7a 	bl	80001ec <__adddf3>
 800d8f8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800d8fc:	3601      	adds	r6, #1
 800d8fe:	9b06      	ldr	r3, [sp, #24]
 800d900:	429e      	cmp	r6, r3
 800d902:	f1a7 0708 	sub.w	r7, r7, #8
 800d906:	ddeb      	ble.n	800d8e0 <__kernel_rem_pio2+0xa0>
 800d908:	ed9d 7b04 	vldr	d7, [sp, #16]
 800d90c:	f108 0801 	add.w	r8, r8, #1
 800d910:	ecab 7b02 	vstmia	fp!, {d7}
 800d914:	3508      	adds	r5, #8
 800d916:	e7cc      	b.n	800d8b2 <__kernel_rem_pio2+0x72>
 800d918:	9b02      	ldr	r3, [sp, #8]
 800d91a:	aa0e      	add	r2, sp, #56	; 0x38
 800d91c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d920:	930d      	str	r3, [sp, #52]	; 0x34
 800d922:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800d924:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800d928:	9c02      	ldr	r4, [sp, #8]
 800d92a:	930c      	str	r3, [sp, #48]	; 0x30
 800d92c:	00e3      	lsls	r3, r4, #3
 800d92e:	930a      	str	r3, [sp, #40]	; 0x28
 800d930:	ab9a      	add	r3, sp, #616	; 0x268
 800d932:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800d936:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800d93a:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800d93e:	ab72      	add	r3, sp, #456	; 0x1c8
 800d940:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800d944:	46c3      	mov	fp, r8
 800d946:	46a1      	mov	r9, r4
 800d948:	f1b9 0f00 	cmp.w	r9, #0
 800d94c:	f1a5 0508 	sub.w	r5, r5, #8
 800d950:	dc77      	bgt.n	800da42 <__kernel_rem_pio2+0x202>
 800d952:	ec47 6b10 	vmov	d0, r6, r7
 800d956:	4650      	mov	r0, sl
 800d958:	f000 fc46 	bl	800e1e8 <scalbn>
 800d95c:	ec57 6b10 	vmov	r6, r7, d0
 800d960:	2200      	movs	r2, #0
 800d962:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800d966:	ee10 0a10 	vmov	r0, s0
 800d96a:	4639      	mov	r1, r7
 800d96c:	f7f2 fdf4 	bl	8000558 <__aeabi_dmul>
 800d970:	ec41 0b10 	vmov	d0, r0, r1
 800d974:	f000 fbb8 	bl	800e0e8 <floor>
 800d978:	4b7c      	ldr	r3, [pc, #496]	; (800db6c <__kernel_rem_pio2+0x32c>)
 800d97a:	ec51 0b10 	vmov	r0, r1, d0
 800d97e:	2200      	movs	r2, #0
 800d980:	f7f2 fdea 	bl	8000558 <__aeabi_dmul>
 800d984:	4602      	mov	r2, r0
 800d986:	460b      	mov	r3, r1
 800d988:	4630      	mov	r0, r6
 800d98a:	4639      	mov	r1, r7
 800d98c:	f7f2 fc2c 	bl	80001e8 <__aeabi_dsub>
 800d990:	460f      	mov	r7, r1
 800d992:	4606      	mov	r6, r0
 800d994:	f7f3 f890 	bl	8000ab8 <__aeabi_d2iz>
 800d998:	9004      	str	r0, [sp, #16]
 800d99a:	f7f2 fd73 	bl	8000484 <__aeabi_i2d>
 800d99e:	4602      	mov	r2, r0
 800d9a0:	460b      	mov	r3, r1
 800d9a2:	4630      	mov	r0, r6
 800d9a4:	4639      	mov	r1, r7
 800d9a6:	f7f2 fc1f 	bl	80001e8 <__aeabi_dsub>
 800d9aa:	f1ba 0f00 	cmp.w	sl, #0
 800d9ae:	4606      	mov	r6, r0
 800d9b0:	460f      	mov	r7, r1
 800d9b2:	dd6d      	ble.n	800da90 <__kernel_rem_pio2+0x250>
 800d9b4:	1e62      	subs	r2, r4, #1
 800d9b6:	ab0e      	add	r3, sp, #56	; 0x38
 800d9b8:	9d04      	ldr	r5, [sp, #16]
 800d9ba:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800d9be:	f1ca 0118 	rsb	r1, sl, #24
 800d9c2:	fa40 f301 	asr.w	r3, r0, r1
 800d9c6:	441d      	add	r5, r3
 800d9c8:	408b      	lsls	r3, r1
 800d9ca:	1ac0      	subs	r0, r0, r3
 800d9cc:	ab0e      	add	r3, sp, #56	; 0x38
 800d9ce:	9504      	str	r5, [sp, #16]
 800d9d0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800d9d4:	f1ca 0317 	rsb	r3, sl, #23
 800d9d8:	fa40 fb03 	asr.w	fp, r0, r3
 800d9dc:	f1bb 0f00 	cmp.w	fp, #0
 800d9e0:	dd65      	ble.n	800daae <__kernel_rem_pio2+0x26e>
 800d9e2:	9b04      	ldr	r3, [sp, #16]
 800d9e4:	2200      	movs	r2, #0
 800d9e6:	3301      	adds	r3, #1
 800d9e8:	9304      	str	r3, [sp, #16]
 800d9ea:	4615      	mov	r5, r2
 800d9ec:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800d9f0:	4294      	cmp	r4, r2
 800d9f2:	f300 809c 	bgt.w	800db2e <__kernel_rem_pio2+0x2ee>
 800d9f6:	f1ba 0f00 	cmp.w	sl, #0
 800d9fa:	dd07      	ble.n	800da0c <__kernel_rem_pio2+0x1cc>
 800d9fc:	f1ba 0f01 	cmp.w	sl, #1
 800da00:	f000 80c0 	beq.w	800db84 <__kernel_rem_pio2+0x344>
 800da04:	f1ba 0f02 	cmp.w	sl, #2
 800da08:	f000 80c6 	beq.w	800db98 <__kernel_rem_pio2+0x358>
 800da0c:	f1bb 0f02 	cmp.w	fp, #2
 800da10:	d14d      	bne.n	800daae <__kernel_rem_pio2+0x26e>
 800da12:	4632      	mov	r2, r6
 800da14:	463b      	mov	r3, r7
 800da16:	4956      	ldr	r1, [pc, #344]	; (800db70 <__kernel_rem_pio2+0x330>)
 800da18:	2000      	movs	r0, #0
 800da1a:	f7f2 fbe5 	bl	80001e8 <__aeabi_dsub>
 800da1e:	4606      	mov	r6, r0
 800da20:	460f      	mov	r7, r1
 800da22:	2d00      	cmp	r5, #0
 800da24:	d043      	beq.n	800daae <__kernel_rem_pio2+0x26e>
 800da26:	4650      	mov	r0, sl
 800da28:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800db60 <__kernel_rem_pio2+0x320>
 800da2c:	f000 fbdc 	bl	800e1e8 <scalbn>
 800da30:	4630      	mov	r0, r6
 800da32:	4639      	mov	r1, r7
 800da34:	ec53 2b10 	vmov	r2, r3, d0
 800da38:	f7f2 fbd6 	bl	80001e8 <__aeabi_dsub>
 800da3c:	4606      	mov	r6, r0
 800da3e:	460f      	mov	r7, r1
 800da40:	e035      	b.n	800daae <__kernel_rem_pio2+0x26e>
 800da42:	4b4c      	ldr	r3, [pc, #304]	; (800db74 <__kernel_rem_pio2+0x334>)
 800da44:	2200      	movs	r2, #0
 800da46:	4630      	mov	r0, r6
 800da48:	4639      	mov	r1, r7
 800da4a:	f7f2 fd85 	bl	8000558 <__aeabi_dmul>
 800da4e:	f7f3 f833 	bl	8000ab8 <__aeabi_d2iz>
 800da52:	f7f2 fd17 	bl	8000484 <__aeabi_i2d>
 800da56:	4602      	mov	r2, r0
 800da58:	460b      	mov	r3, r1
 800da5a:	ec43 2b18 	vmov	d8, r2, r3
 800da5e:	4b46      	ldr	r3, [pc, #280]	; (800db78 <__kernel_rem_pio2+0x338>)
 800da60:	2200      	movs	r2, #0
 800da62:	f7f2 fd79 	bl	8000558 <__aeabi_dmul>
 800da66:	4602      	mov	r2, r0
 800da68:	460b      	mov	r3, r1
 800da6a:	4630      	mov	r0, r6
 800da6c:	4639      	mov	r1, r7
 800da6e:	f7f2 fbbb 	bl	80001e8 <__aeabi_dsub>
 800da72:	f7f3 f821 	bl	8000ab8 <__aeabi_d2iz>
 800da76:	e9d5 2300 	ldrd	r2, r3, [r5]
 800da7a:	f84b 0b04 	str.w	r0, [fp], #4
 800da7e:	ec51 0b18 	vmov	r0, r1, d8
 800da82:	f7f2 fbb3 	bl	80001ec <__adddf3>
 800da86:	f109 39ff 	add.w	r9, r9, #4294967295
 800da8a:	4606      	mov	r6, r0
 800da8c:	460f      	mov	r7, r1
 800da8e:	e75b      	b.n	800d948 <__kernel_rem_pio2+0x108>
 800da90:	d106      	bne.n	800daa0 <__kernel_rem_pio2+0x260>
 800da92:	1e63      	subs	r3, r4, #1
 800da94:	aa0e      	add	r2, sp, #56	; 0x38
 800da96:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800da9a:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800da9e:	e79d      	b.n	800d9dc <__kernel_rem_pio2+0x19c>
 800daa0:	4b36      	ldr	r3, [pc, #216]	; (800db7c <__kernel_rem_pio2+0x33c>)
 800daa2:	2200      	movs	r2, #0
 800daa4:	f7f2 ffde 	bl	8000a64 <__aeabi_dcmpge>
 800daa8:	2800      	cmp	r0, #0
 800daaa:	d13d      	bne.n	800db28 <__kernel_rem_pio2+0x2e8>
 800daac:	4683      	mov	fp, r0
 800daae:	2200      	movs	r2, #0
 800dab0:	2300      	movs	r3, #0
 800dab2:	4630      	mov	r0, r6
 800dab4:	4639      	mov	r1, r7
 800dab6:	f7f2 ffb7 	bl	8000a28 <__aeabi_dcmpeq>
 800daba:	2800      	cmp	r0, #0
 800dabc:	f000 80c0 	beq.w	800dc40 <__kernel_rem_pio2+0x400>
 800dac0:	1e65      	subs	r5, r4, #1
 800dac2:	462b      	mov	r3, r5
 800dac4:	2200      	movs	r2, #0
 800dac6:	9902      	ldr	r1, [sp, #8]
 800dac8:	428b      	cmp	r3, r1
 800daca:	da6c      	bge.n	800dba6 <__kernel_rem_pio2+0x366>
 800dacc:	2a00      	cmp	r2, #0
 800dace:	f000 8089 	beq.w	800dbe4 <__kernel_rem_pio2+0x3a4>
 800dad2:	ab0e      	add	r3, sp, #56	; 0x38
 800dad4:	f1aa 0a18 	sub.w	sl, sl, #24
 800dad8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800dadc:	2b00      	cmp	r3, #0
 800dade:	f000 80ad 	beq.w	800dc3c <__kernel_rem_pio2+0x3fc>
 800dae2:	4650      	mov	r0, sl
 800dae4:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800db60 <__kernel_rem_pio2+0x320>
 800dae8:	f000 fb7e 	bl	800e1e8 <scalbn>
 800daec:	ab9a      	add	r3, sp, #616	; 0x268
 800daee:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800daf2:	ec57 6b10 	vmov	r6, r7, d0
 800daf6:	00ec      	lsls	r4, r5, #3
 800daf8:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800dafc:	46aa      	mov	sl, r5
 800dafe:	f1ba 0f00 	cmp.w	sl, #0
 800db02:	f280 80d6 	bge.w	800dcb2 <__kernel_rem_pio2+0x472>
 800db06:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800db58 <__kernel_rem_pio2+0x318>
 800db0a:	462e      	mov	r6, r5
 800db0c:	2e00      	cmp	r6, #0
 800db0e:	f2c0 8104 	blt.w	800dd1a <__kernel_rem_pio2+0x4da>
 800db12:	ab72      	add	r3, sp, #456	; 0x1c8
 800db14:	ed8d 8b06 	vstr	d8, [sp, #24]
 800db18:	f8df a064 	ldr.w	sl, [pc, #100]	; 800db80 <__kernel_rem_pio2+0x340>
 800db1c:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800db20:	f04f 0800 	mov.w	r8, #0
 800db24:	1baf      	subs	r7, r5, r6
 800db26:	e0ea      	b.n	800dcfe <__kernel_rem_pio2+0x4be>
 800db28:	f04f 0b02 	mov.w	fp, #2
 800db2c:	e759      	b.n	800d9e2 <__kernel_rem_pio2+0x1a2>
 800db2e:	f8d8 3000 	ldr.w	r3, [r8]
 800db32:	b955      	cbnz	r5, 800db4a <__kernel_rem_pio2+0x30a>
 800db34:	b123      	cbz	r3, 800db40 <__kernel_rem_pio2+0x300>
 800db36:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800db3a:	f8c8 3000 	str.w	r3, [r8]
 800db3e:	2301      	movs	r3, #1
 800db40:	3201      	adds	r2, #1
 800db42:	f108 0804 	add.w	r8, r8, #4
 800db46:	461d      	mov	r5, r3
 800db48:	e752      	b.n	800d9f0 <__kernel_rem_pio2+0x1b0>
 800db4a:	1acb      	subs	r3, r1, r3
 800db4c:	f8c8 3000 	str.w	r3, [r8]
 800db50:	462b      	mov	r3, r5
 800db52:	e7f5      	b.n	800db40 <__kernel_rem_pio2+0x300>
 800db54:	f3af 8000 	nop.w
	...
 800db64:	3ff00000 	.word	0x3ff00000
 800db68:	0800eba8 	.word	0x0800eba8
 800db6c:	40200000 	.word	0x40200000
 800db70:	3ff00000 	.word	0x3ff00000
 800db74:	3e700000 	.word	0x3e700000
 800db78:	41700000 	.word	0x41700000
 800db7c:	3fe00000 	.word	0x3fe00000
 800db80:	0800eb68 	.word	0x0800eb68
 800db84:	1e62      	subs	r2, r4, #1
 800db86:	ab0e      	add	r3, sp, #56	; 0x38
 800db88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800db8c:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800db90:	a90e      	add	r1, sp, #56	; 0x38
 800db92:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800db96:	e739      	b.n	800da0c <__kernel_rem_pio2+0x1cc>
 800db98:	1e62      	subs	r2, r4, #1
 800db9a:	ab0e      	add	r3, sp, #56	; 0x38
 800db9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800dba0:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800dba4:	e7f4      	b.n	800db90 <__kernel_rem_pio2+0x350>
 800dba6:	a90e      	add	r1, sp, #56	; 0x38
 800dba8:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800dbac:	3b01      	subs	r3, #1
 800dbae:	430a      	orrs	r2, r1
 800dbb0:	e789      	b.n	800dac6 <__kernel_rem_pio2+0x286>
 800dbb2:	3301      	adds	r3, #1
 800dbb4:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800dbb8:	2900      	cmp	r1, #0
 800dbba:	d0fa      	beq.n	800dbb2 <__kernel_rem_pio2+0x372>
 800dbbc:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800dbbe:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800dbc2:	446a      	add	r2, sp
 800dbc4:	3a98      	subs	r2, #152	; 0x98
 800dbc6:	920a      	str	r2, [sp, #40]	; 0x28
 800dbc8:	9a08      	ldr	r2, [sp, #32]
 800dbca:	18e3      	adds	r3, r4, r3
 800dbcc:	18a5      	adds	r5, r4, r2
 800dbce:	aa22      	add	r2, sp, #136	; 0x88
 800dbd0:	f104 0801 	add.w	r8, r4, #1
 800dbd4:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800dbd8:	9304      	str	r3, [sp, #16]
 800dbda:	9b04      	ldr	r3, [sp, #16]
 800dbdc:	4543      	cmp	r3, r8
 800dbde:	da04      	bge.n	800dbea <__kernel_rem_pio2+0x3aa>
 800dbe0:	461c      	mov	r4, r3
 800dbe2:	e6a3      	b.n	800d92c <__kernel_rem_pio2+0xec>
 800dbe4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800dbe6:	2301      	movs	r3, #1
 800dbe8:	e7e4      	b.n	800dbb4 <__kernel_rem_pio2+0x374>
 800dbea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800dbec:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800dbf0:	f7f2 fc48 	bl	8000484 <__aeabi_i2d>
 800dbf4:	e8e5 0102 	strd	r0, r1, [r5], #8
 800dbf8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800dbfa:	46ab      	mov	fp, r5
 800dbfc:	461c      	mov	r4, r3
 800dbfe:	f04f 0900 	mov.w	r9, #0
 800dc02:	2600      	movs	r6, #0
 800dc04:	2700      	movs	r7, #0
 800dc06:	9b06      	ldr	r3, [sp, #24]
 800dc08:	4599      	cmp	r9, r3
 800dc0a:	dd06      	ble.n	800dc1a <__kernel_rem_pio2+0x3da>
 800dc0c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800dc0e:	e8e3 6702 	strd	r6, r7, [r3], #8
 800dc12:	f108 0801 	add.w	r8, r8, #1
 800dc16:	930a      	str	r3, [sp, #40]	; 0x28
 800dc18:	e7df      	b.n	800dbda <__kernel_rem_pio2+0x39a>
 800dc1a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800dc1e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800dc22:	f7f2 fc99 	bl	8000558 <__aeabi_dmul>
 800dc26:	4602      	mov	r2, r0
 800dc28:	460b      	mov	r3, r1
 800dc2a:	4630      	mov	r0, r6
 800dc2c:	4639      	mov	r1, r7
 800dc2e:	f7f2 fadd 	bl	80001ec <__adddf3>
 800dc32:	f109 0901 	add.w	r9, r9, #1
 800dc36:	4606      	mov	r6, r0
 800dc38:	460f      	mov	r7, r1
 800dc3a:	e7e4      	b.n	800dc06 <__kernel_rem_pio2+0x3c6>
 800dc3c:	3d01      	subs	r5, #1
 800dc3e:	e748      	b.n	800dad2 <__kernel_rem_pio2+0x292>
 800dc40:	ec47 6b10 	vmov	d0, r6, r7
 800dc44:	f1ca 0000 	rsb	r0, sl, #0
 800dc48:	f000 face 	bl	800e1e8 <scalbn>
 800dc4c:	ec57 6b10 	vmov	r6, r7, d0
 800dc50:	4ba0      	ldr	r3, [pc, #640]	; (800ded4 <__kernel_rem_pio2+0x694>)
 800dc52:	ee10 0a10 	vmov	r0, s0
 800dc56:	2200      	movs	r2, #0
 800dc58:	4639      	mov	r1, r7
 800dc5a:	f7f2 ff03 	bl	8000a64 <__aeabi_dcmpge>
 800dc5e:	b1f8      	cbz	r0, 800dca0 <__kernel_rem_pio2+0x460>
 800dc60:	4b9d      	ldr	r3, [pc, #628]	; (800ded8 <__kernel_rem_pio2+0x698>)
 800dc62:	2200      	movs	r2, #0
 800dc64:	4630      	mov	r0, r6
 800dc66:	4639      	mov	r1, r7
 800dc68:	f7f2 fc76 	bl	8000558 <__aeabi_dmul>
 800dc6c:	f7f2 ff24 	bl	8000ab8 <__aeabi_d2iz>
 800dc70:	4680      	mov	r8, r0
 800dc72:	f7f2 fc07 	bl	8000484 <__aeabi_i2d>
 800dc76:	4b97      	ldr	r3, [pc, #604]	; (800ded4 <__kernel_rem_pio2+0x694>)
 800dc78:	2200      	movs	r2, #0
 800dc7a:	f7f2 fc6d 	bl	8000558 <__aeabi_dmul>
 800dc7e:	460b      	mov	r3, r1
 800dc80:	4602      	mov	r2, r0
 800dc82:	4639      	mov	r1, r7
 800dc84:	4630      	mov	r0, r6
 800dc86:	f7f2 faaf 	bl	80001e8 <__aeabi_dsub>
 800dc8a:	f7f2 ff15 	bl	8000ab8 <__aeabi_d2iz>
 800dc8e:	1c65      	adds	r5, r4, #1
 800dc90:	ab0e      	add	r3, sp, #56	; 0x38
 800dc92:	f10a 0a18 	add.w	sl, sl, #24
 800dc96:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dc9a:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800dc9e:	e720      	b.n	800dae2 <__kernel_rem_pio2+0x2a2>
 800dca0:	4630      	mov	r0, r6
 800dca2:	4639      	mov	r1, r7
 800dca4:	f7f2 ff08 	bl	8000ab8 <__aeabi_d2iz>
 800dca8:	ab0e      	add	r3, sp, #56	; 0x38
 800dcaa:	4625      	mov	r5, r4
 800dcac:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800dcb0:	e717      	b.n	800dae2 <__kernel_rem_pio2+0x2a2>
 800dcb2:	ab0e      	add	r3, sp, #56	; 0x38
 800dcb4:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800dcb8:	f7f2 fbe4 	bl	8000484 <__aeabi_i2d>
 800dcbc:	4632      	mov	r2, r6
 800dcbe:	463b      	mov	r3, r7
 800dcc0:	f7f2 fc4a 	bl	8000558 <__aeabi_dmul>
 800dcc4:	4b84      	ldr	r3, [pc, #528]	; (800ded8 <__kernel_rem_pio2+0x698>)
 800dcc6:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800dcca:	2200      	movs	r2, #0
 800dccc:	4630      	mov	r0, r6
 800dcce:	4639      	mov	r1, r7
 800dcd0:	f7f2 fc42 	bl	8000558 <__aeabi_dmul>
 800dcd4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dcd8:	4606      	mov	r6, r0
 800dcda:	460f      	mov	r7, r1
 800dcdc:	e70f      	b.n	800dafe <__kernel_rem_pio2+0x2be>
 800dcde:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800dce2:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800dce6:	f7f2 fc37 	bl	8000558 <__aeabi_dmul>
 800dcea:	4602      	mov	r2, r0
 800dcec:	460b      	mov	r3, r1
 800dcee:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800dcf2:	f7f2 fa7b 	bl	80001ec <__adddf3>
 800dcf6:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800dcfa:	f108 0801 	add.w	r8, r8, #1
 800dcfe:	9b02      	ldr	r3, [sp, #8]
 800dd00:	4598      	cmp	r8, r3
 800dd02:	dc01      	bgt.n	800dd08 <__kernel_rem_pio2+0x4c8>
 800dd04:	45b8      	cmp	r8, r7
 800dd06:	ddea      	ble.n	800dcde <__kernel_rem_pio2+0x49e>
 800dd08:	ed9d 7b06 	vldr	d7, [sp, #24]
 800dd0c:	ab4a      	add	r3, sp, #296	; 0x128
 800dd0e:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800dd12:	ed87 7b00 	vstr	d7, [r7]
 800dd16:	3e01      	subs	r6, #1
 800dd18:	e6f8      	b.n	800db0c <__kernel_rem_pio2+0x2cc>
 800dd1a:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dd1c:	2b02      	cmp	r3, #2
 800dd1e:	dc0b      	bgt.n	800dd38 <__kernel_rem_pio2+0x4f8>
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	dc35      	bgt.n	800dd90 <__kernel_rem_pio2+0x550>
 800dd24:	d059      	beq.n	800ddda <__kernel_rem_pio2+0x59a>
 800dd26:	9b04      	ldr	r3, [sp, #16]
 800dd28:	f003 0007 	and.w	r0, r3, #7
 800dd2c:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800dd30:	ecbd 8b02 	vpop	{d8}
 800dd34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd38:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800dd3a:	2b03      	cmp	r3, #3
 800dd3c:	d1f3      	bne.n	800dd26 <__kernel_rem_pio2+0x4e6>
 800dd3e:	ab4a      	add	r3, sp, #296	; 0x128
 800dd40:	4423      	add	r3, r4
 800dd42:	9306      	str	r3, [sp, #24]
 800dd44:	461c      	mov	r4, r3
 800dd46:	469a      	mov	sl, r3
 800dd48:	9502      	str	r5, [sp, #8]
 800dd4a:	9b02      	ldr	r3, [sp, #8]
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	f1aa 0a08 	sub.w	sl, sl, #8
 800dd52:	dc6b      	bgt.n	800de2c <__kernel_rem_pio2+0x5ec>
 800dd54:	46aa      	mov	sl, r5
 800dd56:	f1ba 0f01 	cmp.w	sl, #1
 800dd5a:	f1a4 0408 	sub.w	r4, r4, #8
 800dd5e:	f300 8085 	bgt.w	800de6c <__kernel_rem_pio2+0x62c>
 800dd62:	9c06      	ldr	r4, [sp, #24]
 800dd64:	2000      	movs	r0, #0
 800dd66:	3408      	adds	r4, #8
 800dd68:	2100      	movs	r1, #0
 800dd6a:	2d01      	cmp	r5, #1
 800dd6c:	f300 809d 	bgt.w	800deaa <__kernel_rem_pio2+0x66a>
 800dd70:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800dd74:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 800dd78:	f1bb 0f00 	cmp.w	fp, #0
 800dd7c:	f040 809b 	bne.w	800deb6 <__kernel_rem_pio2+0x676>
 800dd80:	9b01      	ldr	r3, [sp, #4]
 800dd82:	e9c3 5600 	strd	r5, r6, [r3]
 800dd86:	e9c3 7802 	strd	r7, r8, [r3, #8]
 800dd8a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 800dd8e:	e7ca      	b.n	800dd26 <__kernel_rem_pio2+0x4e6>
 800dd90:	3408      	adds	r4, #8
 800dd92:	ab4a      	add	r3, sp, #296	; 0x128
 800dd94:	441c      	add	r4, r3
 800dd96:	462e      	mov	r6, r5
 800dd98:	2000      	movs	r0, #0
 800dd9a:	2100      	movs	r1, #0
 800dd9c:	2e00      	cmp	r6, #0
 800dd9e:	da36      	bge.n	800de0e <__kernel_rem_pio2+0x5ce>
 800dda0:	f1bb 0f00 	cmp.w	fp, #0
 800dda4:	d039      	beq.n	800de1a <__kernel_rem_pio2+0x5da>
 800dda6:	4602      	mov	r2, r0
 800dda8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddac:	9c01      	ldr	r4, [sp, #4]
 800ddae:	e9c4 2300 	strd	r2, r3, [r4]
 800ddb2:	4602      	mov	r2, r0
 800ddb4:	460b      	mov	r3, r1
 800ddb6:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 800ddba:	f7f2 fa15 	bl	80001e8 <__aeabi_dsub>
 800ddbe:	ae4c      	add	r6, sp, #304	; 0x130
 800ddc0:	2401      	movs	r4, #1
 800ddc2:	42a5      	cmp	r5, r4
 800ddc4:	da2c      	bge.n	800de20 <__kernel_rem_pio2+0x5e0>
 800ddc6:	f1bb 0f00 	cmp.w	fp, #0
 800ddca:	d002      	beq.n	800ddd2 <__kernel_rem_pio2+0x592>
 800ddcc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddd0:	4619      	mov	r1, r3
 800ddd2:	9b01      	ldr	r3, [sp, #4]
 800ddd4:	e9c3 0102 	strd	r0, r1, [r3, #8]
 800ddd8:	e7a5      	b.n	800dd26 <__kernel_rem_pio2+0x4e6>
 800ddda:	f504 731a 	add.w	r3, r4, #616	; 0x268
 800ddde:	eb0d 0403 	add.w	r4, sp, r3
 800dde2:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 800dde6:	2000      	movs	r0, #0
 800dde8:	2100      	movs	r1, #0
 800ddea:	2d00      	cmp	r5, #0
 800ddec:	da09      	bge.n	800de02 <__kernel_rem_pio2+0x5c2>
 800ddee:	f1bb 0f00 	cmp.w	fp, #0
 800ddf2:	d002      	beq.n	800ddfa <__kernel_rem_pio2+0x5ba>
 800ddf4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ddf8:	4619      	mov	r1, r3
 800ddfa:	9b01      	ldr	r3, [sp, #4]
 800ddfc:	e9c3 0100 	strd	r0, r1, [r3]
 800de00:	e791      	b.n	800dd26 <__kernel_rem_pio2+0x4e6>
 800de02:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800de06:	f7f2 f9f1 	bl	80001ec <__adddf3>
 800de0a:	3d01      	subs	r5, #1
 800de0c:	e7ed      	b.n	800ddea <__kernel_rem_pio2+0x5aa>
 800de0e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800de12:	f7f2 f9eb 	bl	80001ec <__adddf3>
 800de16:	3e01      	subs	r6, #1
 800de18:	e7c0      	b.n	800dd9c <__kernel_rem_pio2+0x55c>
 800de1a:	4602      	mov	r2, r0
 800de1c:	460b      	mov	r3, r1
 800de1e:	e7c5      	b.n	800ddac <__kernel_rem_pio2+0x56c>
 800de20:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 800de24:	f7f2 f9e2 	bl	80001ec <__adddf3>
 800de28:	3401      	adds	r4, #1
 800de2a:	e7ca      	b.n	800ddc2 <__kernel_rem_pio2+0x582>
 800de2c:	e9da 8900 	ldrd	r8, r9, [sl]
 800de30:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 800de34:	9b02      	ldr	r3, [sp, #8]
 800de36:	3b01      	subs	r3, #1
 800de38:	9302      	str	r3, [sp, #8]
 800de3a:	4632      	mov	r2, r6
 800de3c:	463b      	mov	r3, r7
 800de3e:	4640      	mov	r0, r8
 800de40:	4649      	mov	r1, r9
 800de42:	f7f2 f9d3 	bl	80001ec <__adddf3>
 800de46:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800de4a:	4602      	mov	r2, r0
 800de4c:	460b      	mov	r3, r1
 800de4e:	4640      	mov	r0, r8
 800de50:	4649      	mov	r1, r9
 800de52:	f7f2 f9c9 	bl	80001e8 <__aeabi_dsub>
 800de56:	4632      	mov	r2, r6
 800de58:	463b      	mov	r3, r7
 800de5a:	f7f2 f9c7 	bl	80001ec <__adddf3>
 800de5e:	ed9d 7b08 	vldr	d7, [sp, #32]
 800de62:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800de66:	ed8a 7b00 	vstr	d7, [sl]
 800de6a:	e76e      	b.n	800dd4a <__kernel_rem_pio2+0x50a>
 800de6c:	e9d4 8900 	ldrd	r8, r9, [r4]
 800de70:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 800de74:	4640      	mov	r0, r8
 800de76:	4632      	mov	r2, r6
 800de78:	463b      	mov	r3, r7
 800de7a:	4649      	mov	r1, r9
 800de7c:	f7f2 f9b6 	bl	80001ec <__adddf3>
 800de80:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800de84:	4602      	mov	r2, r0
 800de86:	460b      	mov	r3, r1
 800de88:	4640      	mov	r0, r8
 800de8a:	4649      	mov	r1, r9
 800de8c:	f7f2 f9ac 	bl	80001e8 <__aeabi_dsub>
 800de90:	4632      	mov	r2, r6
 800de92:	463b      	mov	r3, r7
 800de94:	f7f2 f9aa 	bl	80001ec <__adddf3>
 800de98:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de9c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800dea0:	ed84 7b00 	vstr	d7, [r4]
 800dea4:	f10a 3aff 	add.w	sl, sl, #4294967295
 800dea8:	e755      	b.n	800dd56 <__kernel_rem_pio2+0x516>
 800deaa:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 800deae:	f7f2 f99d 	bl	80001ec <__adddf3>
 800deb2:	3d01      	subs	r5, #1
 800deb4:	e759      	b.n	800dd6a <__kernel_rem_pio2+0x52a>
 800deb6:	9b01      	ldr	r3, [sp, #4]
 800deb8:	9a01      	ldr	r2, [sp, #4]
 800deba:	601d      	str	r5, [r3, #0]
 800debc:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 800dec0:	605c      	str	r4, [r3, #4]
 800dec2:	609f      	str	r7, [r3, #8]
 800dec4:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 800dec8:	60d3      	str	r3, [r2, #12]
 800deca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800dece:	6110      	str	r0, [r2, #16]
 800ded0:	6153      	str	r3, [r2, #20]
 800ded2:	e728      	b.n	800dd26 <__kernel_rem_pio2+0x4e6>
 800ded4:	41700000 	.word	0x41700000
 800ded8:	3e700000 	.word	0x3e700000
 800dedc:	00000000 	.word	0x00000000

0800dee0 <__kernel_sin>:
 800dee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dee4:	ed2d 8b04 	vpush	{d8-d9}
 800dee8:	eeb0 8a41 	vmov.f32	s16, s2
 800deec:	eef0 8a61 	vmov.f32	s17, s3
 800def0:	ec55 4b10 	vmov	r4, r5, d0
 800def4:	b083      	sub	sp, #12
 800def6:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800defa:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 800defe:	9001      	str	r0, [sp, #4]
 800df00:	da06      	bge.n	800df10 <__kernel_sin+0x30>
 800df02:	ee10 0a10 	vmov	r0, s0
 800df06:	4629      	mov	r1, r5
 800df08:	f7f2 fdd6 	bl	8000ab8 <__aeabi_d2iz>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d051      	beq.n	800dfb4 <__kernel_sin+0xd4>
 800df10:	4622      	mov	r2, r4
 800df12:	462b      	mov	r3, r5
 800df14:	4620      	mov	r0, r4
 800df16:	4629      	mov	r1, r5
 800df18:	f7f2 fb1e 	bl	8000558 <__aeabi_dmul>
 800df1c:	4682      	mov	sl, r0
 800df1e:	468b      	mov	fp, r1
 800df20:	4602      	mov	r2, r0
 800df22:	460b      	mov	r3, r1
 800df24:	4620      	mov	r0, r4
 800df26:	4629      	mov	r1, r5
 800df28:	f7f2 fb16 	bl	8000558 <__aeabi_dmul>
 800df2c:	a341      	add	r3, pc, #260	; (adr r3, 800e034 <__kernel_sin+0x154>)
 800df2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df32:	4680      	mov	r8, r0
 800df34:	4689      	mov	r9, r1
 800df36:	4650      	mov	r0, sl
 800df38:	4659      	mov	r1, fp
 800df3a:	f7f2 fb0d 	bl	8000558 <__aeabi_dmul>
 800df3e:	a33f      	add	r3, pc, #252	; (adr r3, 800e03c <__kernel_sin+0x15c>)
 800df40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df44:	f7f2 f950 	bl	80001e8 <__aeabi_dsub>
 800df48:	4652      	mov	r2, sl
 800df4a:	465b      	mov	r3, fp
 800df4c:	f7f2 fb04 	bl	8000558 <__aeabi_dmul>
 800df50:	a33c      	add	r3, pc, #240	; (adr r3, 800e044 <__kernel_sin+0x164>)
 800df52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df56:	f7f2 f949 	bl	80001ec <__adddf3>
 800df5a:	4652      	mov	r2, sl
 800df5c:	465b      	mov	r3, fp
 800df5e:	f7f2 fafb 	bl	8000558 <__aeabi_dmul>
 800df62:	a33a      	add	r3, pc, #232	; (adr r3, 800e04c <__kernel_sin+0x16c>)
 800df64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df68:	f7f2 f93e 	bl	80001e8 <__aeabi_dsub>
 800df6c:	4652      	mov	r2, sl
 800df6e:	465b      	mov	r3, fp
 800df70:	f7f2 faf2 	bl	8000558 <__aeabi_dmul>
 800df74:	a337      	add	r3, pc, #220	; (adr r3, 800e054 <__kernel_sin+0x174>)
 800df76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df7a:	f7f2 f937 	bl	80001ec <__adddf3>
 800df7e:	9b01      	ldr	r3, [sp, #4]
 800df80:	4606      	mov	r6, r0
 800df82:	460f      	mov	r7, r1
 800df84:	b9eb      	cbnz	r3, 800dfc2 <__kernel_sin+0xe2>
 800df86:	4602      	mov	r2, r0
 800df88:	460b      	mov	r3, r1
 800df8a:	4650      	mov	r0, sl
 800df8c:	4659      	mov	r1, fp
 800df8e:	f7f2 fae3 	bl	8000558 <__aeabi_dmul>
 800df92:	a325      	add	r3, pc, #148	; (adr r3, 800e028 <__kernel_sin+0x148>)
 800df94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df98:	f7f2 f926 	bl	80001e8 <__aeabi_dsub>
 800df9c:	4642      	mov	r2, r8
 800df9e:	464b      	mov	r3, r9
 800dfa0:	f7f2 fada 	bl	8000558 <__aeabi_dmul>
 800dfa4:	4602      	mov	r2, r0
 800dfa6:	460b      	mov	r3, r1
 800dfa8:	4620      	mov	r0, r4
 800dfaa:	4629      	mov	r1, r5
 800dfac:	f7f2 f91e 	bl	80001ec <__adddf3>
 800dfb0:	4604      	mov	r4, r0
 800dfb2:	460d      	mov	r5, r1
 800dfb4:	ec45 4b10 	vmov	d0, r4, r5
 800dfb8:	b003      	add	sp, #12
 800dfba:	ecbd 8b04 	vpop	{d8-d9}
 800dfbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfc2:	4b1b      	ldr	r3, [pc, #108]	; (800e030 <__kernel_sin+0x150>)
 800dfc4:	ec51 0b18 	vmov	r0, r1, d8
 800dfc8:	2200      	movs	r2, #0
 800dfca:	f7f2 fac5 	bl	8000558 <__aeabi_dmul>
 800dfce:	4632      	mov	r2, r6
 800dfd0:	ec41 0b19 	vmov	d9, r0, r1
 800dfd4:	463b      	mov	r3, r7
 800dfd6:	4640      	mov	r0, r8
 800dfd8:	4649      	mov	r1, r9
 800dfda:	f7f2 fabd 	bl	8000558 <__aeabi_dmul>
 800dfde:	4602      	mov	r2, r0
 800dfe0:	460b      	mov	r3, r1
 800dfe2:	ec51 0b19 	vmov	r0, r1, d9
 800dfe6:	f7f2 f8ff 	bl	80001e8 <__aeabi_dsub>
 800dfea:	4652      	mov	r2, sl
 800dfec:	465b      	mov	r3, fp
 800dfee:	f7f2 fab3 	bl	8000558 <__aeabi_dmul>
 800dff2:	ec53 2b18 	vmov	r2, r3, d8
 800dff6:	f7f2 f8f7 	bl	80001e8 <__aeabi_dsub>
 800dffa:	a30b      	add	r3, pc, #44	; (adr r3, 800e028 <__kernel_sin+0x148>)
 800dffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e000:	4606      	mov	r6, r0
 800e002:	460f      	mov	r7, r1
 800e004:	4640      	mov	r0, r8
 800e006:	4649      	mov	r1, r9
 800e008:	f7f2 faa6 	bl	8000558 <__aeabi_dmul>
 800e00c:	4602      	mov	r2, r0
 800e00e:	460b      	mov	r3, r1
 800e010:	4630      	mov	r0, r6
 800e012:	4639      	mov	r1, r7
 800e014:	f7f2 f8ea 	bl	80001ec <__adddf3>
 800e018:	4602      	mov	r2, r0
 800e01a:	460b      	mov	r3, r1
 800e01c:	4620      	mov	r0, r4
 800e01e:	4629      	mov	r1, r5
 800e020:	f7f2 f8e2 	bl	80001e8 <__aeabi_dsub>
 800e024:	e7c4      	b.n	800dfb0 <__kernel_sin+0xd0>
 800e026:	bf00      	nop
 800e028:	55555549 	.word	0x55555549
 800e02c:	3fc55555 	.word	0x3fc55555
 800e030:	3fe00000 	.word	0x3fe00000
 800e034:	5acfd57c 	.word	0x5acfd57c
 800e038:	3de5d93a 	.word	0x3de5d93a
 800e03c:	8a2b9ceb 	.word	0x8a2b9ceb
 800e040:	3e5ae5e6 	.word	0x3e5ae5e6
 800e044:	57b1fe7d 	.word	0x57b1fe7d
 800e048:	3ec71de3 	.word	0x3ec71de3
 800e04c:	19c161d5 	.word	0x19c161d5
 800e050:	3f2a01a0 	.word	0x3f2a01a0
 800e054:	1110f8a6 	.word	0x1110f8a6
 800e058:	3f811111 	.word	0x3f811111

0800e05c <with_errno>:
 800e05c:	b570      	push	{r4, r5, r6, lr}
 800e05e:	4604      	mov	r4, r0
 800e060:	460d      	mov	r5, r1
 800e062:	4616      	mov	r6, r2
 800e064:	f7fe f912 	bl	800c28c <__errno>
 800e068:	4629      	mov	r1, r5
 800e06a:	6006      	str	r6, [r0, #0]
 800e06c:	4620      	mov	r0, r4
 800e06e:	bd70      	pop	{r4, r5, r6, pc}

0800e070 <xflow>:
 800e070:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e072:	4614      	mov	r4, r2
 800e074:	461d      	mov	r5, r3
 800e076:	b108      	cbz	r0, 800e07c <xflow+0xc>
 800e078:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800e07c:	e9cd 2300 	strd	r2, r3, [sp]
 800e080:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e084:	4620      	mov	r0, r4
 800e086:	4629      	mov	r1, r5
 800e088:	f7f2 fa66 	bl	8000558 <__aeabi_dmul>
 800e08c:	2222      	movs	r2, #34	; 0x22
 800e08e:	b003      	add	sp, #12
 800e090:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e094:	f7ff bfe2 	b.w	800e05c <with_errno>

0800e098 <__math_uflow>:
 800e098:	b508      	push	{r3, lr}
 800e09a:	2200      	movs	r2, #0
 800e09c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800e0a0:	f7ff ffe6 	bl	800e070 <xflow>
 800e0a4:	ec41 0b10 	vmov	d0, r0, r1
 800e0a8:	bd08      	pop	{r3, pc}

0800e0aa <__math_oflow>:
 800e0aa:	b508      	push	{r3, lr}
 800e0ac:	2200      	movs	r2, #0
 800e0ae:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800e0b2:	f7ff ffdd 	bl	800e070 <xflow>
 800e0b6:	ec41 0b10 	vmov	d0, r0, r1
 800e0ba:	bd08      	pop	{r3, pc}

0800e0bc <fabs>:
 800e0bc:	ec51 0b10 	vmov	r0, r1, d0
 800e0c0:	ee10 2a10 	vmov	r2, s0
 800e0c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e0c8:	ec43 2b10 	vmov	d0, r2, r3
 800e0cc:	4770      	bx	lr

0800e0ce <finite>:
 800e0ce:	b082      	sub	sp, #8
 800e0d0:	ed8d 0b00 	vstr	d0, [sp]
 800e0d4:	9801      	ldr	r0, [sp, #4]
 800e0d6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800e0da:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800e0de:	0fc0      	lsrs	r0, r0, #31
 800e0e0:	b002      	add	sp, #8
 800e0e2:	4770      	bx	lr
 800e0e4:	0000      	movs	r0, r0
	...

0800e0e8 <floor>:
 800e0e8:	ec51 0b10 	vmov	r0, r1, d0
 800e0ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e0f0:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800e0f4:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 800e0f8:	2e13      	cmp	r6, #19
 800e0fa:	ee10 5a10 	vmov	r5, s0
 800e0fe:	ee10 8a10 	vmov	r8, s0
 800e102:	460c      	mov	r4, r1
 800e104:	dc32      	bgt.n	800e16c <floor+0x84>
 800e106:	2e00      	cmp	r6, #0
 800e108:	da14      	bge.n	800e134 <floor+0x4c>
 800e10a:	a333      	add	r3, pc, #204	; (adr r3, 800e1d8 <floor+0xf0>)
 800e10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e110:	f7f2 f86c 	bl	80001ec <__adddf3>
 800e114:	2200      	movs	r2, #0
 800e116:	2300      	movs	r3, #0
 800e118:	f7f2 fcae 	bl	8000a78 <__aeabi_dcmpgt>
 800e11c:	b138      	cbz	r0, 800e12e <floor+0x46>
 800e11e:	2c00      	cmp	r4, #0
 800e120:	da57      	bge.n	800e1d2 <floor+0xea>
 800e122:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800e126:	431d      	orrs	r5, r3
 800e128:	d001      	beq.n	800e12e <floor+0x46>
 800e12a:	4c2d      	ldr	r4, [pc, #180]	; (800e1e0 <floor+0xf8>)
 800e12c:	2500      	movs	r5, #0
 800e12e:	4621      	mov	r1, r4
 800e130:	4628      	mov	r0, r5
 800e132:	e025      	b.n	800e180 <floor+0x98>
 800e134:	4f2b      	ldr	r7, [pc, #172]	; (800e1e4 <floor+0xfc>)
 800e136:	4137      	asrs	r7, r6
 800e138:	ea01 0307 	and.w	r3, r1, r7
 800e13c:	4303      	orrs	r3, r0
 800e13e:	d01f      	beq.n	800e180 <floor+0x98>
 800e140:	a325      	add	r3, pc, #148	; (adr r3, 800e1d8 <floor+0xf0>)
 800e142:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e146:	f7f2 f851 	bl	80001ec <__adddf3>
 800e14a:	2200      	movs	r2, #0
 800e14c:	2300      	movs	r3, #0
 800e14e:	f7f2 fc93 	bl	8000a78 <__aeabi_dcmpgt>
 800e152:	2800      	cmp	r0, #0
 800e154:	d0eb      	beq.n	800e12e <floor+0x46>
 800e156:	2c00      	cmp	r4, #0
 800e158:	bfbe      	ittt	lt
 800e15a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800e15e:	fa43 f606 	asrlt.w	r6, r3, r6
 800e162:	19a4      	addlt	r4, r4, r6
 800e164:	ea24 0407 	bic.w	r4, r4, r7
 800e168:	2500      	movs	r5, #0
 800e16a:	e7e0      	b.n	800e12e <floor+0x46>
 800e16c:	2e33      	cmp	r6, #51	; 0x33
 800e16e:	dd0b      	ble.n	800e188 <floor+0xa0>
 800e170:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800e174:	d104      	bne.n	800e180 <floor+0x98>
 800e176:	ee10 2a10 	vmov	r2, s0
 800e17a:	460b      	mov	r3, r1
 800e17c:	f7f2 f836 	bl	80001ec <__adddf3>
 800e180:	ec41 0b10 	vmov	d0, r0, r1
 800e184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e188:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800e18c:	f04f 33ff 	mov.w	r3, #4294967295
 800e190:	fa23 f707 	lsr.w	r7, r3, r7
 800e194:	4207      	tst	r7, r0
 800e196:	d0f3      	beq.n	800e180 <floor+0x98>
 800e198:	a30f      	add	r3, pc, #60	; (adr r3, 800e1d8 <floor+0xf0>)
 800e19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e19e:	f7f2 f825 	bl	80001ec <__adddf3>
 800e1a2:	2200      	movs	r2, #0
 800e1a4:	2300      	movs	r3, #0
 800e1a6:	f7f2 fc67 	bl	8000a78 <__aeabi_dcmpgt>
 800e1aa:	2800      	cmp	r0, #0
 800e1ac:	d0bf      	beq.n	800e12e <floor+0x46>
 800e1ae:	2c00      	cmp	r4, #0
 800e1b0:	da02      	bge.n	800e1b8 <floor+0xd0>
 800e1b2:	2e14      	cmp	r6, #20
 800e1b4:	d103      	bne.n	800e1be <floor+0xd6>
 800e1b6:	3401      	adds	r4, #1
 800e1b8:	ea25 0507 	bic.w	r5, r5, r7
 800e1bc:	e7b7      	b.n	800e12e <floor+0x46>
 800e1be:	2301      	movs	r3, #1
 800e1c0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800e1c4:	fa03 f606 	lsl.w	r6, r3, r6
 800e1c8:	4435      	add	r5, r6
 800e1ca:	4545      	cmp	r5, r8
 800e1cc:	bf38      	it	cc
 800e1ce:	18e4      	addcc	r4, r4, r3
 800e1d0:	e7f2      	b.n	800e1b8 <floor+0xd0>
 800e1d2:	2500      	movs	r5, #0
 800e1d4:	462c      	mov	r4, r5
 800e1d6:	e7aa      	b.n	800e12e <floor+0x46>
 800e1d8:	8800759c 	.word	0x8800759c
 800e1dc:	7e37e43c 	.word	0x7e37e43c
 800e1e0:	bff00000 	.word	0xbff00000
 800e1e4:	000fffff 	.word	0x000fffff

0800e1e8 <scalbn>:
 800e1e8:	b570      	push	{r4, r5, r6, lr}
 800e1ea:	ec55 4b10 	vmov	r4, r5, d0
 800e1ee:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800e1f2:	4606      	mov	r6, r0
 800e1f4:	462b      	mov	r3, r5
 800e1f6:	b99a      	cbnz	r2, 800e220 <scalbn+0x38>
 800e1f8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800e1fc:	4323      	orrs	r3, r4
 800e1fe:	d036      	beq.n	800e26e <scalbn+0x86>
 800e200:	4b39      	ldr	r3, [pc, #228]	; (800e2e8 <scalbn+0x100>)
 800e202:	4629      	mov	r1, r5
 800e204:	ee10 0a10 	vmov	r0, s0
 800e208:	2200      	movs	r2, #0
 800e20a:	f7f2 f9a5 	bl	8000558 <__aeabi_dmul>
 800e20e:	4b37      	ldr	r3, [pc, #220]	; (800e2ec <scalbn+0x104>)
 800e210:	429e      	cmp	r6, r3
 800e212:	4604      	mov	r4, r0
 800e214:	460d      	mov	r5, r1
 800e216:	da10      	bge.n	800e23a <scalbn+0x52>
 800e218:	a32b      	add	r3, pc, #172	; (adr r3, 800e2c8 <scalbn+0xe0>)
 800e21a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21e:	e03a      	b.n	800e296 <scalbn+0xae>
 800e220:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800e224:	428a      	cmp	r2, r1
 800e226:	d10c      	bne.n	800e242 <scalbn+0x5a>
 800e228:	ee10 2a10 	vmov	r2, s0
 800e22c:	4620      	mov	r0, r4
 800e22e:	4629      	mov	r1, r5
 800e230:	f7f1 ffdc 	bl	80001ec <__adddf3>
 800e234:	4604      	mov	r4, r0
 800e236:	460d      	mov	r5, r1
 800e238:	e019      	b.n	800e26e <scalbn+0x86>
 800e23a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800e23e:	460b      	mov	r3, r1
 800e240:	3a36      	subs	r2, #54	; 0x36
 800e242:	4432      	add	r2, r6
 800e244:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800e248:	428a      	cmp	r2, r1
 800e24a:	dd08      	ble.n	800e25e <scalbn+0x76>
 800e24c:	2d00      	cmp	r5, #0
 800e24e:	a120      	add	r1, pc, #128	; (adr r1, 800e2d0 <scalbn+0xe8>)
 800e250:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e254:	da1c      	bge.n	800e290 <scalbn+0xa8>
 800e256:	a120      	add	r1, pc, #128	; (adr r1, 800e2d8 <scalbn+0xf0>)
 800e258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e25c:	e018      	b.n	800e290 <scalbn+0xa8>
 800e25e:	2a00      	cmp	r2, #0
 800e260:	dd08      	ble.n	800e274 <scalbn+0x8c>
 800e262:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e266:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e26a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800e26e:	ec45 4b10 	vmov	d0, r4, r5
 800e272:	bd70      	pop	{r4, r5, r6, pc}
 800e274:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800e278:	da19      	bge.n	800e2ae <scalbn+0xc6>
 800e27a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e27e:	429e      	cmp	r6, r3
 800e280:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800e284:	dd0a      	ble.n	800e29c <scalbn+0xb4>
 800e286:	a112      	add	r1, pc, #72	; (adr r1, 800e2d0 <scalbn+0xe8>)
 800e288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e28c:	2b00      	cmp	r3, #0
 800e28e:	d1e2      	bne.n	800e256 <scalbn+0x6e>
 800e290:	a30f      	add	r3, pc, #60	; (adr r3, 800e2d0 <scalbn+0xe8>)
 800e292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e296:	f7f2 f95f 	bl	8000558 <__aeabi_dmul>
 800e29a:	e7cb      	b.n	800e234 <scalbn+0x4c>
 800e29c:	a10a      	add	r1, pc, #40	; (adr r1, 800e2c8 <scalbn+0xe0>)
 800e29e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2a2:	2b00      	cmp	r3, #0
 800e2a4:	d0b8      	beq.n	800e218 <scalbn+0x30>
 800e2a6:	a10e      	add	r1, pc, #56	; (adr r1, 800e2e0 <scalbn+0xf8>)
 800e2a8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2ac:	e7b4      	b.n	800e218 <scalbn+0x30>
 800e2ae:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800e2b2:	3236      	adds	r2, #54	; 0x36
 800e2b4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800e2b8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800e2bc:	4620      	mov	r0, r4
 800e2be:	4b0c      	ldr	r3, [pc, #48]	; (800e2f0 <scalbn+0x108>)
 800e2c0:	2200      	movs	r2, #0
 800e2c2:	e7e8      	b.n	800e296 <scalbn+0xae>
 800e2c4:	f3af 8000 	nop.w
 800e2c8:	c2f8f359 	.word	0xc2f8f359
 800e2cc:	01a56e1f 	.word	0x01a56e1f
 800e2d0:	8800759c 	.word	0x8800759c
 800e2d4:	7e37e43c 	.word	0x7e37e43c
 800e2d8:	8800759c 	.word	0x8800759c
 800e2dc:	fe37e43c 	.word	0xfe37e43c
 800e2e0:	c2f8f359 	.word	0xc2f8f359
 800e2e4:	81a56e1f 	.word	0x81a56e1f
 800e2e8:	43500000 	.word	0x43500000
 800e2ec:	ffff3cb0 	.word	0xffff3cb0
 800e2f0:	3c900000 	.word	0x3c900000

0800e2f4 <_init>:
 800e2f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e2f6:	bf00      	nop
 800e2f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e2fa:	bc08      	pop	{r3}
 800e2fc:	469e      	mov	lr, r3
 800e2fe:	4770      	bx	lr

0800e300 <_fini>:
 800e300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e302:	bf00      	nop
 800e304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e306:	bc08      	pop	{r3}
 800e308:	469e      	mov	lr, r3
 800e30a:	4770      	bx	lr
