
charIOT-Key-C.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001038c  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000d2e0  08010520  08010520  00020520  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801d800  0801d800  00030110  2**0
                  CONTENTS
  4 .ARM          00000008  0801d800  0801d800  0002d800  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801d808  0801d808  00030110  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801d808  0801d808  0002d808  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801d80c  0801d80c  0002d80c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000110  20000000  0801d810  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b44  20000110  0801d920  00030110  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004c54  0801d920  00034c54  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00030110  2**0
                  CONTENTS, READONLY
 12 .debug_info   0006b620  00000000  00000000  00030140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000065e8  00000000  00000000  0009b760  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00004928  00000000  00000000  000a1d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00004650  00000000  00000000  000a6670  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000640d  00000000  00000000  000aacc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00034bc2  00000000  00000000  000b10cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00105f84  00000000  00000000  000e5c8f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001ebc13  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00014920  00000000  00000000  001ebc64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000110 	.word	0x20000110
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010504 	.word	0x08010504

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000114 	.word	0x20000114
 80001cc:	08010504 	.word	0x08010504

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_d2iz>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b34:	d215      	bcs.n	8000b62 <__aeabi_d2iz+0x36>
 8000b36:	d511      	bpl.n	8000b5c <__aeabi_d2iz+0x30>
 8000b38:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b3c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b40:	d912      	bls.n	8000b68 <__aeabi_d2iz+0x3c>
 8000b42:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b46:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b4a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b52:	fa23 f002 	lsr.w	r0, r3, r2
 8000b56:	bf18      	it	ne
 8000b58:	4240      	negne	r0, r0
 8000b5a:	4770      	bx	lr
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b66:	d105      	bne.n	8000b74 <__aeabi_d2iz+0x48>
 8000b68:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	bf08      	it	eq
 8000b6e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b72:	4770      	bx	lr
 8000b74:	f04f 0000 	mov.w	r0, #0
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <__aeabi_d2f>:
 8000b7c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b80:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b84:	bf24      	itt	cs
 8000b86:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b8a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b8e:	d90d      	bls.n	8000bac <__aeabi_d2f+0x30>
 8000b90:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b94:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b98:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b9c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ba0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ba4:	bf08      	it	eq
 8000ba6:	f020 0001 	biceq.w	r0, r0, #1
 8000baa:	4770      	bx	lr
 8000bac:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bb0:	d121      	bne.n	8000bf6 <__aeabi_d2f+0x7a>
 8000bb2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000bb6:	bfbc      	itt	lt
 8000bb8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000bbc:	4770      	bxlt	lr
 8000bbe:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bc2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bc6:	f1c2 0218 	rsb	r2, r2, #24
 8000bca:	f1c2 0c20 	rsb	ip, r2, #32
 8000bce:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bd2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bd6:	bf18      	it	ne
 8000bd8:	f040 0001 	orrne.w	r0, r0, #1
 8000bdc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000be4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000be8:	ea40 000c 	orr.w	r0, r0, ip
 8000bec:	fa23 f302 	lsr.w	r3, r3, r2
 8000bf0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bf4:	e7cc      	b.n	8000b90 <__aeabi_d2f+0x14>
 8000bf6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bfa:	d107      	bne.n	8000c0c <__aeabi_d2f+0x90>
 8000bfc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c00:	bf1e      	ittt	ne
 8000c02:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c06:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c0a:	4770      	bxne	lr
 8000c0c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c10:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c14:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c18:	4770      	bx	lr
 8000c1a:	bf00      	nop

08000c1c <__aeabi_uldivmod>:
 8000c1c:	b953      	cbnz	r3, 8000c34 <__aeabi_uldivmod+0x18>
 8000c1e:	b94a      	cbnz	r2, 8000c34 <__aeabi_uldivmod+0x18>
 8000c20:	2900      	cmp	r1, #0
 8000c22:	bf08      	it	eq
 8000c24:	2800      	cmpeq	r0, #0
 8000c26:	bf1c      	itt	ne
 8000c28:	f04f 31ff 	movne.w	r1, #4294967295
 8000c2c:	f04f 30ff 	movne.w	r0, #4294967295
 8000c30:	f000 b974 	b.w	8000f1c <__aeabi_idiv0>
 8000c34:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c38:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c3c:	f000 f806 	bl	8000c4c <__udivmoddi4>
 8000c40:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c44:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c48:	b004      	add	sp, #16
 8000c4a:	4770      	bx	lr

08000c4c <__udivmoddi4>:
 8000c4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c50:	9d08      	ldr	r5, [sp, #32]
 8000c52:	4604      	mov	r4, r0
 8000c54:	468e      	mov	lr, r1
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d14d      	bne.n	8000cf6 <__udivmoddi4+0xaa>
 8000c5a:	428a      	cmp	r2, r1
 8000c5c:	4694      	mov	ip, r2
 8000c5e:	d969      	bls.n	8000d34 <__udivmoddi4+0xe8>
 8000c60:	fab2 f282 	clz	r2, r2
 8000c64:	b152      	cbz	r2, 8000c7c <__udivmoddi4+0x30>
 8000c66:	fa01 f302 	lsl.w	r3, r1, r2
 8000c6a:	f1c2 0120 	rsb	r1, r2, #32
 8000c6e:	fa20 f101 	lsr.w	r1, r0, r1
 8000c72:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c76:	ea41 0e03 	orr.w	lr, r1, r3
 8000c7a:	4094      	lsls	r4, r2
 8000c7c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c80:	0c21      	lsrs	r1, r4, #16
 8000c82:	fbbe f6f8 	udiv	r6, lr, r8
 8000c86:	fa1f f78c 	uxth.w	r7, ip
 8000c8a:	fb08 e316 	mls	r3, r8, r6, lr
 8000c8e:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c92:	fb06 f107 	mul.w	r1, r6, r7
 8000c96:	4299      	cmp	r1, r3
 8000c98:	d90a      	bls.n	8000cb0 <__udivmoddi4+0x64>
 8000c9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000c9e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000ca2:	f080 811f 	bcs.w	8000ee4 <__udivmoddi4+0x298>
 8000ca6:	4299      	cmp	r1, r3
 8000ca8:	f240 811c 	bls.w	8000ee4 <__udivmoddi4+0x298>
 8000cac:	3e02      	subs	r6, #2
 8000cae:	4463      	add	r3, ip
 8000cb0:	1a5b      	subs	r3, r3, r1
 8000cb2:	b2a4      	uxth	r4, r4
 8000cb4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cb8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cbc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cc0:	fb00 f707 	mul.w	r7, r0, r7
 8000cc4:	42a7      	cmp	r7, r4
 8000cc6:	d90a      	bls.n	8000cde <__udivmoddi4+0x92>
 8000cc8:	eb1c 0404 	adds.w	r4, ip, r4
 8000ccc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cd0:	f080 810a 	bcs.w	8000ee8 <__udivmoddi4+0x29c>
 8000cd4:	42a7      	cmp	r7, r4
 8000cd6:	f240 8107 	bls.w	8000ee8 <__udivmoddi4+0x29c>
 8000cda:	4464      	add	r4, ip
 8000cdc:	3802      	subs	r0, #2
 8000cde:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000ce2:	1be4      	subs	r4, r4, r7
 8000ce4:	2600      	movs	r6, #0
 8000ce6:	b11d      	cbz	r5, 8000cf0 <__udivmoddi4+0xa4>
 8000ce8:	40d4      	lsrs	r4, r2
 8000cea:	2300      	movs	r3, #0
 8000cec:	e9c5 4300 	strd	r4, r3, [r5]
 8000cf0:	4631      	mov	r1, r6
 8000cf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cf6:	428b      	cmp	r3, r1
 8000cf8:	d909      	bls.n	8000d0e <__udivmoddi4+0xc2>
 8000cfa:	2d00      	cmp	r5, #0
 8000cfc:	f000 80ef 	beq.w	8000ede <__udivmoddi4+0x292>
 8000d00:	2600      	movs	r6, #0
 8000d02:	e9c5 0100 	strd	r0, r1, [r5]
 8000d06:	4630      	mov	r0, r6
 8000d08:	4631      	mov	r1, r6
 8000d0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d0e:	fab3 f683 	clz	r6, r3
 8000d12:	2e00      	cmp	r6, #0
 8000d14:	d14a      	bne.n	8000dac <__udivmoddi4+0x160>
 8000d16:	428b      	cmp	r3, r1
 8000d18:	d302      	bcc.n	8000d20 <__udivmoddi4+0xd4>
 8000d1a:	4282      	cmp	r2, r0
 8000d1c:	f200 80f9 	bhi.w	8000f12 <__udivmoddi4+0x2c6>
 8000d20:	1a84      	subs	r4, r0, r2
 8000d22:	eb61 0303 	sbc.w	r3, r1, r3
 8000d26:	2001      	movs	r0, #1
 8000d28:	469e      	mov	lr, r3
 8000d2a:	2d00      	cmp	r5, #0
 8000d2c:	d0e0      	beq.n	8000cf0 <__udivmoddi4+0xa4>
 8000d2e:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d32:	e7dd      	b.n	8000cf0 <__udivmoddi4+0xa4>
 8000d34:	b902      	cbnz	r2, 8000d38 <__udivmoddi4+0xec>
 8000d36:	deff      	udf	#255	; 0xff
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	2a00      	cmp	r2, #0
 8000d3e:	f040 8092 	bne.w	8000e66 <__udivmoddi4+0x21a>
 8000d42:	eba1 010c 	sub.w	r1, r1, ip
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f fe8c 	uxth.w	lr, ip
 8000d4e:	2601      	movs	r6, #1
 8000d50:	0c20      	lsrs	r0, r4, #16
 8000d52:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d56:	fb07 1113 	mls	r1, r7, r3, r1
 8000d5a:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d5e:	fb0e f003 	mul.w	r0, lr, r3
 8000d62:	4288      	cmp	r0, r1
 8000d64:	d908      	bls.n	8000d78 <__udivmoddi4+0x12c>
 8000d66:	eb1c 0101 	adds.w	r1, ip, r1
 8000d6a:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x12a>
 8000d70:	4288      	cmp	r0, r1
 8000d72:	f200 80cb 	bhi.w	8000f0c <__udivmoddi4+0x2c0>
 8000d76:	4643      	mov	r3, r8
 8000d78:	1a09      	subs	r1, r1, r0
 8000d7a:	b2a4      	uxth	r4, r4
 8000d7c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d80:	fb07 1110 	mls	r1, r7, r0, r1
 8000d84:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d88:	fb0e fe00 	mul.w	lr, lr, r0
 8000d8c:	45a6      	cmp	lr, r4
 8000d8e:	d908      	bls.n	8000da2 <__udivmoddi4+0x156>
 8000d90:	eb1c 0404 	adds.w	r4, ip, r4
 8000d94:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d98:	d202      	bcs.n	8000da0 <__udivmoddi4+0x154>
 8000d9a:	45a6      	cmp	lr, r4
 8000d9c:	f200 80bb 	bhi.w	8000f16 <__udivmoddi4+0x2ca>
 8000da0:	4608      	mov	r0, r1
 8000da2:	eba4 040e 	sub.w	r4, r4, lr
 8000da6:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000daa:	e79c      	b.n	8000ce6 <__udivmoddi4+0x9a>
 8000dac:	f1c6 0720 	rsb	r7, r6, #32
 8000db0:	40b3      	lsls	r3, r6
 8000db2:	fa22 fc07 	lsr.w	ip, r2, r7
 8000db6:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dba:	fa20 f407 	lsr.w	r4, r0, r7
 8000dbe:	fa01 f306 	lsl.w	r3, r1, r6
 8000dc2:	431c      	orrs	r4, r3
 8000dc4:	40f9      	lsrs	r1, r7
 8000dc6:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dca:	fa00 f306 	lsl.w	r3, r0, r6
 8000dce:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dd2:	0c20      	lsrs	r0, r4, #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fb09 1118 	mls	r1, r9, r8, r1
 8000ddc:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000de0:	fb08 f00e 	mul.w	r0, r8, lr
 8000de4:	4288      	cmp	r0, r1
 8000de6:	fa02 f206 	lsl.w	r2, r2, r6
 8000dea:	d90b      	bls.n	8000e04 <__udivmoddi4+0x1b8>
 8000dec:	eb1c 0101 	adds.w	r1, ip, r1
 8000df0:	f108 3aff 	add.w	sl, r8, #4294967295
 8000df4:	f080 8088 	bcs.w	8000f08 <__udivmoddi4+0x2bc>
 8000df8:	4288      	cmp	r0, r1
 8000dfa:	f240 8085 	bls.w	8000f08 <__udivmoddi4+0x2bc>
 8000dfe:	f1a8 0802 	sub.w	r8, r8, #2
 8000e02:	4461      	add	r1, ip
 8000e04:	1a09      	subs	r1, r1, r0
 8000e06:	b2a4      	uxth	r4, r4
 8000e08:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e0c:	fb09 1110 	mls	r1, r9, r0, r1
 8000e10:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e14:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e18:	458e      	cmp	lr, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x1e2>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e24:	d26c      	bcs.n	8000f00 <__udivmoddi4+0x2b4>
 8000e26:	458e      	cmp	lr, r1
 8000e28:	d96a      	bls.n	8000f00 <__udivmoddi4+0x2b4>
 8000e2a:	3802      	subs	r0, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e32:	fba0 9402 	umull	r9, r4, r0, r2
 8000e36:	eba1 010e 	sub.w	r1, r1, lr
 8000e3a:	42a1      	cmp	r1, r4
 8000e3c:	46c8      	mov	r8, r9
 8000e3e:	46a6      	mov	lr, r4
 8000e40:	d356      	bcc.n	8000ef0 <__udivmoddi4+0x2a4>
 8000e42:	d053      	beq.n	8000eec <__udivmoddi4+0x2a0>
 8000e44:	b15d      	cbz	r5, 8000e5e <__udivmoddi4+0x212>
 8000e46:	ebb3 0208 	subs.w	r2, r3, r8
 8000e4a:	eb61 010e 	sbc.w	r1, r1, lr
 8000e4e:	fa01 f707 	lsl.w	r7, r1, r7
 8000e52:	fa22 f306 	lsr.w	r3, r2, r6
 8000e56:	40f1      	lsrs	r1, r6
 8000e58:	431f      	orrs	r7, r3
 8000e5a:	e9c5 7100 	strd	r7, r1, [r5]
 8000e5e:	2600      	movs	r6, #0
 8000e60:	4631      	mov	r1, r6
 8000e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e66:	f1c2 0320 	rsb	r3, r2, #32
 8000e6a:	40d8      	lsrs	r0, r3
 8000e6c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e70:	fa21 f303 	lsr.w	r3, r1, r3
 8000e74:	4091      	lsls	r1, r2
 8000e76:	4301      	orrs	r1, r0
 8000e78:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e7c:	fa1f fe8c 	uxth.w	lr, ip
 8000e80:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e84:	fb07 3610 	mls	r6, r7, r0, r3
 8000e88:	0c0b      	lsrs	r3, r1, #16
 8000e8a:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e8e:	fb00 f60e 	mul.w	r6, r0, lr
 8000e92:	429e      	cmp	r6, r3
 8000e94:	fa04 f402 	lsl.w	r4, r4, r2
 8000e98:	d908      	bls.n	8000eac <__udivmoddi4+0x260>
 8000e9a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e9e:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ea2:	d22f      	bcs.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea4:	429e      	cmp	r6, r3
 8000ea6:	d92d      	bls.n	8000f04 <__udivmoddi4+0x2b8>
 8000ea8:	3802      	subs	r0, #2
 8000eaa:	4463      	add	r3, ip
 8000eac:	1b9b      	subs	r3, r3, r6
 8000eae:	b289      	uxth	r1, r1
 8000eb0:	fbb3 f6f7 	udiv	r6, r3, r7
 8000eb4:	fb07 3316 	mls	r3, r7, r6, r3
 8000eb8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ebc:	fb06 f30e 	mul.w	r3, r6, lr
 8000ec0:	428b      	cmp	r3, r1
 8000ec2:	d908      	bls.n	8000ed6 <__udivmoddi4+0x28a>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ecc:	d216      	bcs.n	8000efc <__udivmoddi4+0x2b0>
 8000ece:	428b      	cmp	r3, r1
 8000ed0:	d914      	bls.n	8000efc <__udivmoddi4+0x2b0>
 8000ed2:	3e02      	subs	r6, #2
 8000ed4:	4461      	add	r1, ip
 8000ed6:	1ac9      	subs	r1, r1, r3
 8000ed8:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000edc:	e738      	b.n	8000d50 <__udivmoddi4+0x104>
 8000ede:	462e      	mov	r6, r5
 8000ee0:	4628      	mov	r0, r5
 8000ee2:	e705      	b.n	8000cf0 <__udivmoddi4+0xa4>
 8000ee4:	4606      	mov	r6, r0
 8000ee6:	e6e3      	b.n	8000cb0 <__udivmoddi4+0x64>
 8000ee8:	4618      	mov	r0, r3
 8000eea:	e6f8      	b.n	8000cde <__udivmoddi4+0x92>
 8000eec:	454b      	cmp	r3, r9
 8000eee:	d2a9      	bcs.n	8000e44 <__udivmoddi4+0x1f8>
 8000ef0:	ebb9 0802 	subs.w	r8, r9, r2
 8000ef4:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ef8:	3801      	subs	r0, #1
 8000efa:	e7a3      	b.n	8000e44 <__udivmoddi4+0x1f8>
 8000efc:	4646      	mov	r6, r8
 8000efe:	e7ea      	b.n	8000ed6 <__udivmoddi4+0x28a>
 8000f00:	4620      	mov	r0, r4
 8000f02:	e794      	b.n	8000e2e <__udivmoddi4+0x1e2>
 8000f04:	4640      	mov	r0, r8
 8000f06:	e7d1      	b.n	8000eac <__udivmoddi4+0x260>
 8000f08:	46d0      	mov	r8, sl
 8000f0a:	e77b      	b.n	8000e04 <__udivmoddi4+0x1b8>
 8000f0c:	3b02      	subs	r3, #2
 8000f0e:	4461      	add	r1, ip
 8000f10:	e732      	b.n	8000d78 <__udivmoddi4+0x12c>
 8000f12:	4630      	mov	r0, r6
 8000f14:	e709      	b.n	8000d2a <__udivmoddi4+0xde>
 8000f16:	4464      	add	r4, ip
 8000f18:	3802      	subs	r0, #2
 8000f1a:	e742      	b.n	8000da2 <__udivmoddi4+0x156>

08000f1c <__aeabi_idiv0>:
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop

08000f20 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b086      	sub	sp, #24
 8000f24:	af02      	add	r7, sp, #8
 8000f26:	60f8      	str	r0, [r7, #12]
 8000f28:	4608      	mov	r0, r1
 8000f2a:	4611      	mov	r1, r2
 8000f2c:	461a      	mov	r2, r3
 8000f2e:	4603      	mov	r3, r0
 8000f30:	817b      	strh	r3, [r7, #10]
 8000f32:	460b      	mov	r3, r1
 8000f34:	813b      	strh	r3, [r7, #8]
 8000f36:	4613      	mov	r3, r2
 8000f38:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000f3a:	897a      	ldrh	r2, [r7, #10]
 8000f3c:	88fb      	ldrh	r3, [r7, #6]
 8000f3e:	4413      	add	r3, r2
 8000f40:	b298      	uxth	r0, r3
 8000f42:	893a      	ldrh	r2, [r7, #8]
 8000f44:	8b3b      	ldrh	r3, [r7, #24]
 8000f46:	4413      	add	r3, r2
 8000f48:	b29b      	uxth	r3, r3
 8000f4a:	893a      	ldrh	r2, [r7, #8]
 8000f4c:	8979      	ldrh	r1, [r7, #10]
 8000f4e:	9300      	str	r3, [sp, #0]
 8000f50:	4603      	mov	r3, r0
 8000f52:	68f8      	ldr	r0, [r7, #12]
 8000f54:	f001 faf0 	bl	8002538 <u8g2_IsIntersection>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d012      	beq.n	8000f84 <u8g2_DrawBox+0x64>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
 8000f5e:	e00d      	b.n	8000f7c <u8g2_DrawBox+0x5c>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000f60:	88fb      	ldrh	r3, [r7, #6]
 8000f62:	893a      	ldrh	r2, [r7, #8]
 8000f64:	8979      	ldrh	r1, [r7, #10]
 8000f66:	2000      	movs	r0, #0
 8000f68:	9000      	str	r0, [sp, #0]
 8000f6a:	68f8      	ldr	r0, [r7, #12]
 8000f6c:	f001 f9dd 	bl	800232a <u8g2_DrawHVLine>
    y++;    
 8000f70:	893b      	ldrh	r3, [r7, #8]
 8000f72:	3301      	adds	r3, #1
 8000f74:	813b      	strh	r3, [r7, #8]
    h--;
 8000f76:	8b3b      	ldrh	r3, [r7, #24]
 8000f78:	3b01      	subs	r3, #1
 8000f7a:	833b      	strh	r3, [r7, #24]
  while( h != 0 )
 8000f7c:	8b3b      	ldrh	r3, [r7, #24]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d1ee      	bne.n	8000f60 <u8g2_DrawBox+0x40>
 8000f82:	e000      	b.n	8000f86 <u8g2_DrawBox+0x66>
    return;
 8000f84:	bf00      	nop
  }
}
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af02      	add	r7, sp, #8
 8000f92:	60f8      	str	r0, [r7, #12]
 8000f94:	4608      	mov	r0, r1
 8000f96:	4611      	mov	r1, r2
 8000f98:	461a      	mov	r2, r3
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	817b      	strh	r3, [r7, #10]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	813b      	strh	r3, [r7, #8]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t xtmp = x;
 8000fa6:	897b      	ldrh	r3, [r7, #10]
 8000fa8:	82fb      	strh	r3, [r7, #22]
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
 8000faa:	897a      	ldrh	r2, [r7, #10]
 8000fac:	88fb      	ldrh	r3, [r7, #6]
 8000fae:	4413      	add	r3, r2
 8000fb0:	b298      	uxth	r0, r3
 8000fb2:	893a      	ldrh	r2, [r7, #8]
 8000fb4:	8c3b      	ldrh	r3, [r7, #32]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	b29b      	uxth	r3, r3
 8000fba:	893a      	ldrh	r2, [r7, #8]
 8000fbc:	8979      	ldrh	r1, [r7, #10]
 8000fbe:	9300      	str	r3, [sp, #0]
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	68f8      	ldr	r0, [r7, #12]
 8000fc4:	f001 fab8 	bl	8002538 <u8g2_IsIntersection>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d037      	beq.n	800103e <u8g2_DrawFrame+0xb2>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
 8000fce:	88fb      	ldrh	r3, [r7, #6]
 8000fd0:	893a      	ldrh	r2, [r7, #8]
 8000fd2:	8979      	ldrh	r1, [r7, #10]
 8000fd4:	2000      	movs	r0, #0
 8000fd6:	9000      	str	r0, [sp, #0]
 8000fd8:	68f8      	ldr	r0, [r7, #12]
 8000fda:	f001 f9a6 	bl	800232a <u8g2_DrawHVLine>
  if (h >= 2) {
 8000fde:	8c3b      	ldrh	r3, [r7, #32]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d92d      	bls.n	8001040 <u8g2_DrawFrame+0xb4>
    h-=2;
 8000fe4:	8c3b      	ldrh	r3, [r7, #32]
 8000fe6:	3b02      	subs	r3, #2
 8000fe8:	843b      	strh	r3, [r7, #32]
    y++;
 8000fea:	893b      	ldrh	r3, [r7, #8]
 8000fec:	3301      	adds	r3, #1
 8000fee:	813b      	strh	r3, [r7, #8]
    if (h > 0) {
 8000ff0:	8c3b      	ldrh	r3, [r7, #32]
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d01a      	beq.n	800102c <u8g2_DrawFrame+0xa0>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8000ff6:	8c3b      	ldrh	r3, [r7, #32]
 8000ff8:	893a      	ldrh	r2, [r7, #8]
 8000ffa:	8979      	ldrh	r1, [r7, #10]
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	9000      	str	r0, [sp, #0]
 8001000:	68f8      	ldr	r0, [r7, #12]
 8001002:	f001 f992 	bl	800232a <u8g2_DrawHVLine>
      x+=w;
 8001006:	897a      	ldrh	r2, [r7, #10]
 8001008:	88fb      	ldrh	r3, [r7, #6]
 800100a:	4413      	add	r3, r2
 800100c:	817b      	strh	r3, [r7, #10]
      x--;
 800100e:	897b      	ldrh	r3, [r7, #10]
 8001010:	3b01      	subs	r3, #1
 8001012:	817b      	strh	r3, [r7, #10]
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
 8001014:	8c3b      	ldrh	r3, [r7, #32]
 8001016:	893a      	ldrh	r2, [r7, #8]
 8001018:	8979      	ldrh	r1, [r7, #10]
 800101a:	2001      	movs	r0, #1
 800101c:	9000      	str	r0, [sp, #0]
 800101e:	68f8      	ldr	r0, [r7, #12]
 8001020:	f001 f983 	bl	800232a <u8g2_DrawHVLine>
      y+=h;
 8001024:	893a      	ldrh	r2, [r7, #8]
 8001026:	8c3b      	ldrh	r3, [r7, #32]
 8001028:	4413      	add	r3, r2
 800102a:	813b      	strh	r3, [r7, #8]
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
 800102c:	88fb      	ldrh	r3, [r7, #6]
 800102e:	893a      	ldrh	r2, [r7, #8]
 8001030:	8af9      	ldrh	r1, [r7, #22]
 8001032:	2000      	movs	r0, #0
 8001034:	9000      	str	r0, [sp, #0]
 8001036:	68f8      	ldr	r0, [r7, #12]
 8001038:	f001 f977 	bl	800232a <u8g2_DrawHVLine>
 800103c:	e000      	b.n	8001040 <u8g2_DrawFrame+0xb4>
    return;
 800103e:	bf00      	nop
  }
}
 8001040:	3718      	adds	r7, #24
 8001042:	46bd      	mov	sp, r7
 8001044:	bd80      	pop	{r7, pc}

08001046 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
 8001046:	b580      	push	{r7, lr}
 8001048:	b084      	sub	sp, #16
 800104a:	af00      	add	r7, sp, #0
 800104c:	6078      	str	r0, [r7, #4]
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	7c1b      	ldrb	r3, [r3, #16]
 8001054:	60fb      	str	r3, [r7, #12]
  cnt *= u8g2->tile_buf_height;
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800105c:	461a      	mov	r2, r3
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	fb02 f303 	mul.w	r3, r2, r3
 8001064:	60fb      	str	r3, [r7, #12]
  cnt *= 8;
 8001066:	68fb      	ldr	r3, [r7, #12]
 8001068:	00db      	lsls	r3, r3, #3
 800106a:	60fb      	str	r3, [r7, #12]
  memset(u8g2->tile_buf_ptr, 0, cnt);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001070:	68fa      	ldr	r2, [r7, #12]
 8001072:	2100      	movs	r1, #0
 8001074:	4618      	mov	r0, r3
 8001076:	f00d fd2b 	bl	800ead0 <memset>
}
 800107a:	bf00      	nop
 800107c:	3710      	adds	r7, #16
 800107e:	46bd      	mov	sp, r7
 8001080:	bd80      	pop	{r7, pc}

08001082 <u8g2_send_tile_row>:

/*============================================*/

static void u8g2_send_tile_row(u8g2_t *u8g2, uint8_t src_tile_row, uint8_t dest_tile_row)
{
 8001082:	b580      	push	{r7, lr}
 8001084:	b086      	sub	sp, #24
 8001086:	af02      	add	r7, sp, #8
 8001088:	6078      	str	r0, [r7, #4]
 800108a:	460b      	mov	r3, r1
 800108c:	70fb      	strb	r3, [r7, #3]
 800108e:	4613      	mov	r3, r2
 8001090:	70bb      	strb	r3, [r7, #2]
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	7c1b      	ldrb	r3, [r3, #16]
 8001098:	73fb      	strb	r3, [r7, #15]
  offset = src_tile_row;
 800109a:	78fb      	ldrb	r3, [r7, #3]
 800109c:	81bb      	strh	r3, [r7, #12]
  ptr = u8g2->tile_buf_ptr;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a2:	60bb      	str	r3, [r7, #8]
  offset *= w;
 80010a4:	7bfb      	ldrb	r3, [r7, #15]
 80010a6:	b29b      	uxth	r3, r3
 80010a8:	89ba      	ldrh	r2, [r7, #12]
 80010aa:	fb12 f303 	smulbb	r3, r2, r3
 80010ae:	81bb      	strh	r3, [r7, #12]
  offset *= 8;
 80010b0:	89bb      	ldrh	r3, [r7, #12]
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	81bb      	strh	r3, [r7, #12]
  ptr += offset;
 80010b6:	89bb      	ldrh	r3, [r7, #12]
 80010b8:	68ba      	ldr	r2, [r7, #8]
 80010ba:	4413      	add	r3, r2
 80010bc:	60bb      	str	r3, [r7, #8]
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
 80010be:	7bf9      	ldrb	r1, [r7, #15]
 80010c0:	78ba      	ldrb	r2, [r7, #2]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	9300      	str	r3, [sp, #0]
 80010c6:	460b      	mov	r3, r1
 80010c8:	2100      	movs	r1, #0
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f001 ff9d 	bl	800300a <u8x8_DrawTile>
}
 80010d0:	bf00      	nop
 80010d2:	3710      	adds	r7, #16
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b084      	sub	sp, #16
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	73fb      	strb	r3, [r7, #15]
  src_max = u8g2->tile_buf_height;
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80010ea:	737b      	strb	r3, [r7, #13]
  dest_row = u8g2->tile_curr_row;
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80010f2:	73bb      	strb	r3, [r7, #14]
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	7c5b      	ldrb	r3, [r3, #17]
 80010fa:	733b      	strb	r3, [r7, #12]
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
 80010fc:	7bba      	ldrb	r2, [r7, #14]
 80010fe:	7bfb      	ldrb	r3, [r7, #15]
 8001100:	4619      	mov	r1, r3
 8001102:	6878      	ldr	r0, [r7, #4]
 8001104:	f7ff ffbd 	bl	8001082 <u8g2_send_tile_row>
    src_row++;
 8001108:	7bfb      	ldrb	r3, [r7, #15]
 800110a:	3301      	adds	r3, #1
 800110c:	73fb      	strb	r3, [r7, #15]
    dest_row++;
 800110e:	7bbb      	ldrb	r3, [r7, #14]
 8001110:	3301      	adds	r3, #1
 8001112:	73bb      	strb	r3, [r7, #14]
  } while( src_row < src_max && dest_row < dest_max );
 8001114:	7bfa      	ldrb	r2, [r7, #15]
 8001116:	7b7b      	ldrb	r3, [r7, #13]
 8001118:	429a      	cmp	r2, r3
 800111a:	d203      	bcs.n	8001124 <u8g2_send_buffer+0x4c>
 800111c:	7bba      	ldrb	r2, [r7, #14]
 800111e:	7b3b      	ldrb	r3, [r7, #12]
 8001120:	429a      	cmp	r2, r3
 8001122:	d3eb      	bcc.n	80010fc <u8g2_send_buffer+0x24>
}
 8001124:	bf00      	nop
 8001126:	3710      	adds	r7, #16
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}

0800112c <u8g2_SendBuffer>:

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
  u8g2_send_buffer(u8g2);
 8001134:	6878      	ldr	r0, [r7, #4]
 8001136:	f7ff ffcf 	bl	80010d8 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f001 ffb6 	bl	80030ac <u8x8_RefreshDisplay>
}
 8001140:	bf00      	nop
 8001142:	3708      	adds	r7, #8
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}

08001148 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
 8001148:	b580      	push	{r7, lr}
 800114a:	b082      	sub	sp, #8
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	460b      	mov	r3, r1
 8001152:	70fb      	strb	r3, [r7, #3]
  u8g2->tile_curr_row = row;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	78fa      	ldrb	r2, [r7, #3]
 8001158:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  u8g2->cb->update_dimension(u8g2);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	6878      	ldr	r0, [r7, #4]
 8001164:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116a:	685b      	ldr	r3, [r3, #4]
 800116c:	6878      	ldr	r0, [r7, #4]
 800116e:	4798      	blx	r3
}
 8001170:	bf00      	nop
 8001172:	3708      	adds	r7, #8
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <u8g2_FirstPage>:

void u8g2_FirstPage(u8g2_t *u8g2)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b082      	sub	sp, #8
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if ( u8g2->is_auto_page_clear )
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 8001186:	2b00      	cmp	r3, #0
 8001188:	d002      	beq.n	8001190 <u8g2_FirstPage+0x18>
  {
    u8g2_ClearBuffer(u8g2);
 800118a:	6878      	ldr	r0, [r7, #4]
 800118c:	f7ff ff5b 	bl	8001046 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
 8001190:	2100      	movs	r1, #0
 8001192:	6878      	ldr	r0, [r7, #4]
 8001194:	f7ff ffd8 	bl	8001148 <u8g2_SetBufferCurrTileRow>
}
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <u8g2_NextPage>:

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	b084      	sub	sp, #16
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	6078      	str	r0, [r7, #4]
  uint8_t row;
  u8g2_send_buffer(u8g2);
 80011a8:	6878      	ldr	r0, [r7, #4]
 80011aa:	f7ff ff95 	bl	80010d8 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80011b4:	73fb      	strb	r3, [r7, #15]
  row += u8g2->tile_buf_height;
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
 80011bc:	7bfb      	ldrb	r3, [r7, #15]
 80011be:	4413      	add	r3, r2
 80011c0:	73fb      	strb	r3, [r7, #15]
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	7c5b      	ldrb	r3, [r3, #17]
 80011c8:	7bfa      	ldrb	r2, [r7, #15]
 80011ca:	429a      	cmp	r2, r3
 80011cc:	d304      	bcc.n	80011d8 <u8g2_NextPage+0x38>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
 80011ce:	6878      	ldr	r0, [r7, #4]
 80011d0:	f001 ff6c 	bl	80030ac <u8x8_RefreshDisplay>
    return 0;
 80011d4:	2300      	movs	r3, #0
 80011d6:	e00d      	b.n	80011f4 <u8g2_NextPage+0x54>
  }
  if ( u8g2->is_auto_page_clear )
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d002      	beq.n	80011e8 <u8g2_NextPage+0x48>
  {
    u8g2_ClearBuffer(u8g2);
 80011e2:	6878      	ldr	r0, [r7, #4]
 80011e4:	f7ff ff2f 	bl	8001046 <u8g2_ClearBuffer>
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	4619      	mov	r1, r3
 80011ec:	6878      	ldr	r0, [r7, #4]
 80011ee:	f7ff ffab 	bl	8001148 <u8g2_SetBufferCurrTileRow>
  return 1;
 80011f2:	2301      	movs	r3, #1
}
 80011f4:	4618      	mov	r0, r3
 80011f6:	3710      	adds	r7, #16
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}

080011fc <u8g2_DrawButtonFrame>:
  U8G2_BTN_XFRAME:
    draw another one pixel frame with one pixel gap, will not look good with shadow
*/

void u8g2_DrawButtonFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t text_width, u8g2_uint_t padding_h, u8g2_uint_t padding_v)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08c      	sub	sp, #48	; 0x30
 8001200:	af02      	add	r7, sp, #8
 8001202:	60f8      	str	r0, [r7, #12]
 8001204:	4608      	mov	r0, r1
 8001206:	4611      	mov	r1, r2
 8001208:	461a      	mov	r2, r3
 800120a:	4603      	mov	r3, r0
 800120c:	817b      	strh	r3, [r7, #10]
 800120e:	460b      	mov	r3, r1
 8001210:	813b      	strh	r3, [r7, #8]
 8001212:	4613      	mov	r3, r2
 8001214:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = text_width;
 8001216:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001218:	843b      	strh	r3, [r7, #32]
  
  u8g2_uint_t xx, yy, ww, hh;
  
  u8g2_uint_t gap_frame = U8G2_BTN_BW_MASK+1;
 800121a:	2308      	movs	r3, #8
 800121c:	84fb      	strh	r3, [r7, #38]	; 0x26
    
  u8g2_uint_t border_width = flags & U8G2_BTN_BW_MASK;
 800121e:	88fb      	ldrh	r3, [r7, #6]
 8001220:	f003 0307 	and.w	r3, r3, #7
 8001224:	84bb      	strh	r3, [r7, #36]	; 0x24

  int8_t a = u8g2_GetAscent(u8g2);
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	f893 308e 	ldrb.w	r3, [r3, #142]	; 0x8e
 800122c:	77fb      	strb	r3, [r7, #31]
  int8_t d = u8g2_GetDescent(u8g2);
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	f893 308f 	ldrb.w	r3, [r3, #143]	; 0x8f
 8001234:	77bb      	strb	r3, [r7, #30]
  
  uint8_t color_backup = u8g2->draw_color;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 800123c:	777b      	strb	r3, [r7, #29]
  
  
  if ( flags & U8G2_BTN_XFRAME )
 800123e:	88fb      	ldrh	r3, [r7, #6]
 8001240:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001244:	2b00      	cmp	r3, #0
 8001246:	d007      	beq.n	8001258 <u8g2_DrawButtonFrame+0x5c>
  {
    border_width++;
 8001248:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800124a:	3301      	adds	r3, #1
 800124c:	84bb      	strh	r3, [r7, #36]	; 0x24
    gap_frame = border_width;
 800124e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001250:	84fb      	strh	r3, [r7, #38]	; 0x26
    border_width++;
 8001252:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001254:	3301      	adds	r3, #1
 8001256:	84bb      	strh	r3, [r7, #36]	; 0x24

  
  for(;;)
  {

    xx = x;
 8001258:	897b      	ldrh	r3, [r7, #10]
 800125a:	837b      	strh	r3, [r7, #26]
    xx -= padding_h;
 800125c:	8b7a      	ldrh	r2, [r7, #26]
 800125e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001260:	1ad3      	subs	r3, r2, r3
 8001262:	837b      	strh	r3, [r7, #26]
    xx -= border_width;
 8001264:	8b7a      	ldrh	r2, [r7, #26]
 8001266:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	837b      	strh	r3, [r7, #26]
    ww = w+2*padding_h+2*border_width;
 800126c:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 800126e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001270:	4413      	add	r3, r2
 8001272:	b29b      	uxth	r3, r3
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	b29a      	uxth	r2, r3
 8001278:	8c3b      	ldrh	r3, [r7, #32]
 800127a:	4413      	add	r3, r2
 800127c:	833b      	strh	r3, [r7, #24]
    
    yy = y;
 800127e:	893b      	ldrh	r3, [r7, #8]
 8001280:	82fb      	strh	r3, [r7, #22]
    yy += u8g2->font_calc_vref(u8g2);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001286:	68f8      	ldr	r0, [r7, #12]
 8001288:	4798      	blx	r3
 800128a:	4603      	mov	r3, r0
 800128c:	461a      	mov	r2, r3
 800128e:	8afb      	ldrh	r3, [r7, #22]
 8001290:	4413      	add	r3, r2
 8001292:	82fb      	strh	r3, [r7, #22]
    yy -= a;
 8001294:	f997 301f 	ldrsb.w	r3, [r7, #31]
 8001298:	b29b      	uxth	r3, r3
 800129a:	8afa      	ldrh	r2, [r7, #22]
 800129c:	1ad3      	subs	r3, r2, r3
 800129e:	82fb      	strh	r3, [r7, #22]
    yy -= padding_v;
 80012a0:	8afa      	ldrh	r2, [r7, #22]
 80012a2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80012a4:	1ad3      	subs	r3, r2, r3
 80012a6:	82fb      	strh	r3, [r7, #22]
    yy -= border_width;
 80012a8:	8afa      	ldrh	r2, [r7, #22]
 80012aa:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012ac:	1ad3      	subs	r3, r2, r3
 80012ae:	82fb      	strh	r3, [r7, #22]
    hh = a-d+2*padding_v+2*border_width;
 80012b0:	f997 301f 	ldrsb.w	r3, [r7, #31]
 80012b4:	b21a      	sxth	r2, r3
 80012b6:	f997 301e 	ldrsb.w	r3, [r7, #30]
 80012ba:	b21b      	sxth	r3, r3
 80012bc:	1ad3      	subs	r3, r2, r3
 80012be:	b21b      	sxth	r3, r3
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	8cb9      	ldrh	r1, [r7, #36]	; 0x24
 80012c4:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80012c6:	440b      	add	r3, r1
 80012c8:	b29b      	uxth	r3, r3
 80012ca:	005b      	lsls	r3, r3, #1
 80012cc:	b29b      	uxth	r3, r3
 80012ce:	4413      	add	r3, r2
 80012d0:	82bb      	strh	r3, [r7, #20]
    if ( border_width == 0 )
 80012d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d067      	beq.n	80013a8 <u8g2_DrawButtonFrame+0x1ac>
      break;
    if ( border_width == gap_frame )
 80012d8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80012da:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80012dc:	429a      	cmp	r2, r3
 80012de:	d109      	bne.n	80012f4 <u8g2_DrawButtonFrame+0xf8>
    {
      u8g2_SetDrawColor(u8g2, color_backup == 0 ? 1 : 0);
 80012e0:	7f7b      	ldrb	r3, [r7, #29]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	bf0c      	ite	eq
 80012e6:	2301      	moveq	r3, #1
 80012e8:	2300      	movne	r3, #0
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	4619      	mov	r1, r3
 80012ee:	68f8      	ldr	r0, [r7, #12]
 80012f0:	f001 f8d8 	bl	80024a4 <u8g2_SetDrawColor>
    }
    u8g2_DrawFrame(u8g2, xx, yy, ww, hh);
 80012f4:	8b38      	ldrh	r0, [r7, #24]
 80012f6:	8afa      	ldrh	r2, [r7, #22]
 80012f8:	8b79      	ldrh	r1, [r7, #26]
 80012fa:	8abb      	ldrh	r3, [r7, #20]
 80012fc:	9300      	str	r3, [sp, #0]
 80012fe:	4603      	mov	r3, r0
 8001300:	68f8      	ldr	r0, [r7, #12]
 8001302:	f7ff fe43 	bl	8000f8c <u8g2_DrawFrame>
    u8g2_SetDrawColor(u8g2, color_backup);
 8001306:	7f7b      	ldrb	r3, [r7, #29]
 8001308:	4619      	mov	r1, r3
 800130a:	68f8      	ldr	r0, [r7, #12]
 800130c:	f001 f8ca 	bl	80024a4 <u8g2_SetDrawColor>
    
    if ( flags & U8G2_BTN_SHADOW_MASK )
 8001310:	88fb      	ldrh	r3, [r7, #6]
 8001312:	f003 0318 	and.w	r3, r3, #24
 8001316:	2b00      	cmp	r3, #0
 8001318:	d042      	beq.n	80013a0 <u8g2_DrawButtonFrame+0x1a4>
    {
      if ( border_width == (flags & U8G2_BTN_BW_MASK) )
 800131a:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 800131c:	88fb      	ldrh	r3, [r7, #6]
 800131e:	f003 0307 	and.w	r3, r3, #7
 8001322:	429a      	cmp	r2, r3
 8001324:	d13c      	bne.n	80013a0 <u8g2_DrawButtonFrame+0x1a4>
      {
        u8g2_uint_t i;
        u8g2_uint_t shadow_gap = (flags & U8G2_BTN_SHADOW_MASK) >> U8G2_BTN_SHADOW_POS;
 8001326:	88fb      	ldrh	r3, [r7, #6]
 8001328:	10db      	asrs	r3, r3, #3
 800132a:	b29b      	uxth	r3, r3
 800132c:	f003 0303 	and.w	r3, r3, #3
 8001330:	827b      	strh	r3, [r7, #18]
        shadow_gap--;
 8001332:	8a7b      	ldrh	r3, [r7, #18]
 8001334:	3b01      	subs	r3, #1
 8001336:	827b      	strh	r3, [r7, #18]
        for( i = 0; i < border_width; i++ )
 8001338:	2300      	movs	r3, #0
 800133a:	847b      	strh	r3, [r7, #34]	; 0x22
 800133c:	e02c      	b.n	8001398 <u8g2_DrawButtonFrame+0x19c>
        {
          u8g2_DrawHLine(u8g2, xx+border_width+shadow_gap,yy+hh+i+shadow_gap,ww);
 800133e:	8b7a      	ldrh	r2, [r7, #26]
 8001340:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001342:	4413      	add	r3, r2
 8001344:	b29a      	uxth	r2, r3
 8001346:	8a7b      	ldrh	r3, [r7, #18]
 8001348:	4413      	add	r3, r2
 800134a:	b299      	uxth	r1, r3
 800134c:	8afa      	ldrh	r2, [r7, #22]
 800134e:	8abb      	ldrh	r3, [r7, #20]
 8001350:	4413      	add	r3, r2
 8001352:	b29a      	uxth	r2, r3
 8001354:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001356:	4413      	add	r3, r2
 8001358:	b29a      	uxth	r2, r3
 800135a:	8a7b      	ldrh	r3, [r7, #18]
 800135c:	4413      	add	r3, r2
 800135e:	b29a      	uxth	r2, r3
 8001360:	8b3b      	ldrh	r3, [r7, #24]
 8001362:	68f8      	ldr	r0, [r7, #12]
 8001364:	f001 f86c 	bl	8002440 <u8g2_DrawHLine>
          u8g2_DrawVLine(u8g2, xx+ww+i+shadow_gap,yy+border_width+shadow_gap,hh);
 8001368:	8b7a      	ldrh	r2, [r7, #26]
 800136a:	8b3b      	ldrh	r3, [r7, #24]
 800136c:	4413      	add	r3, r2
 800136e:	b29a      	uxth	r2, r3
 8001370:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001372:	4413      	add	r3, r2
 8001374:	b29a      	uxth	r2, r3
 8001376:	8a7b      	ldrh	r3, [r7, #18]
 8001378:	4413      	add	r3, r2
 800137a:	b299      	uxth	r1, r3
 800137c:	8afa      	ldrh	r2, [r7, #22]
 800137e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001380:	4413      	add	r3, r2
 8001382:	b29a      	uxth	r2, r3
 8001384:	8a7b      	ldrh	r3, [r7, #18]
 8001386:	4413      	add	r3, r2
 8001388:	b29a      	uxth	r2, r3
 800138a:	8abb      	ldrh	r3, [r7, #20]
 800138c:	68f8      	ldr	r0, [r7, #12]
 800138e:	f001 f870 	bl	8002472 <u8g2_DrawVLine>
        for( i = 0; i < border_width; i++ )
 8001392:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8001394:	3301      	adds	r3, #1
 8001396:	847b      	strh	r3, [r7, #34]	; 0x22
 8001398:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800139a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800139c:	429a      	cmp	r2, r3
 800139e:	d3ce      	bcc.n	800133e <u8g2_DrawButtonFrame+0x142>
        }
      }
    }
    border_width--;
 80013a0:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80013a2:	3b01      	subs	r3, #1
 80013a4:	84bb      	strh	r3, [r7, #36]	; 0x24
    xx = x;
 80013a6:	e757      	b.n	8001258 <u8g2_DrawButtonFrame+0x5c>
      break;
 80013a8:	bf00      	nop
  } /* for */
  
  if ( flags & U8G2_BTN_INV )
 80013aa:	88fb      	ldrh	r3, [r7, #6]
 80013ac:	f003 0320 	and.w	r3, r3, #32
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d011      	beq.n	80013d8 <u8g2_DrawButtonFrame+0x1dc>
  {
    u8g2_SetDrawColor(u8g2, 2);         /* XOR */
 80013b4:	2102      	movs	r1, #2
 80013b6:	68f8      	ldr	r0, [r7, #12]
 80013b8:	f001 f874 	bl	80024a4 <u8g2_SetDrawColor>
    u8g2_DrawBox(u8g2, xx, yy, ww, hh);
 80013bc:	8b38      	ldrh	r0, [r7, #24]
 80013be:	8afa      	ldrh	r2, [r7, #22]
 80013c0:	8b79      	ldrh	r1, [r7, #26]
 80013c2:	8abb      	ldrh	r3, [r7, #20]
 80013c4:	9300      	str	r3, [sp, #0]
 80013c6:	4603      	mov	r3, r0
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f7ff fda9 	bl	8000f20 <u8g2_DrawBox>
    u8g2_SetDrawColor(u8g2, color_backup);
 80013ce:	7f7b      	ldrb	r3, [r7, #29]
 80013d0:	4619      	mov	r1, r3
 80013d2:	68f8      	ldr	r0, [r7, #12]
 80013d4:	f001 f866 	bl	80024a4 <u8g2_SetDrawColor>
  }
}
 80013d8:	bf00      	nop
 80013da:	3728      	adds	r7, #40	; 0x28
 80013dc:	46bd      	mov	sp, r7
 80013de:	bd80      	pop	{r7, pc}

080013e0 <u8g2_DrawButtonUTF8>:

void u8g2_DrawButtonUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t flags, u8g2_uint_t width, u8g2_uint_t padding_h, u8g2_uint_t padding_v, const char *text)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af04      	add	r7, sp, #16
 80013e6:	60f8      	str	r0, [r7, #12]
 80013e8:	4608      	mov	r0, r1
 80013ea:	4611      	mov	r1, r2
 80013ec:	461a      	mov	r2, r3
 80013ee:	4603      	mov	r3, r0
 80013f0:	817b      	strh	r3, [r7, #10]
 80013f2:	460b      	mov	r3, r1
 80013f4:	813b      	strh	r3, [r7, #8]
 80013f6:	4613      	mov	r3, r2
 80013f8:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t w = u8g2_GetUTF8Width(u8g2, text);
 80013fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80013fc:	68f8      	ldr	r0, [r7, #12]
 80013fe:	f000 ff11 	bl	8002224 <u8g2_GetUTF8Width>
 8001402:	4603      	mov	r3, r0
 8001404:	82fb      	strh	r3, [r7, #22]
  
  u8g2_uint_t text_x_offset = 0; 
 8001406:	2300      	movs	r3, #0
 8001408:	82bb      	strh	r3, [r7, #20]

  if ( flags & U8G2_BTN_HCENTER )
 800140a:	88fb      	ldrh	r3, [r7, #6]
 800140c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001410:	2b00      	cmp	r3, #0
 8001412:	d009      	beq.n	8001428 <u8g2_DrawButtonUTF8+0x48>
    x -= (w+1)/2;
 8001414:	8afb      	ldrh	r3, [r7, #22]
 8001416:	3301      	adds	r3, #1
 8001418:	0fda      	lsrs	r2, r3, #31
 800141a:	4413      	add	r3, r2
 800141c:	105b      	asrs	r3, r3, #1
 800141e:	425b      	negs	r3, r3
 8001420:	b29a      	uxth	r2, r3
 8001422:	897b      	ldrh	r3, [r7, #10]
 8001424:	4413      	add	r3, r2
 8001426:	817b      	strh	r3, [r7, #10]

  if ( w < width )
 8001428:	8afa      	ldrh	r2, [r7, #22]
 800142a:	8c3b      	ldrh	r3, [r7, #32]
 800142c:	429a      	cmp	r2, r3
 800142e:	d20d      	bcs.n	800144c <u8g2_DrawButtonUTF8+0x6c>
  {
    if ( flags & U8G2_BTN_HCENTER )
 8001430:	88fb      	ldrh	r3, [r7, #6]
 8001432:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001436:	2b00      	cmp	r3, #0
 8001438:	d006      	beq.n	8001448 <u8g2_DrawButtonUTF8+0x68>
    {
      text_x_offset = (width-w)/2;
 800143a:	8c3a      	ldrh	r2, [r7, #32]
 800143c:	8afb      	ldrh	r3, [r7, #22]
 800143e:	1ad3      	subs	r3, r2, r3
 8001440:	0fda      	lsrs	r2, r3, #31
 8001442:	4413      	add	r3, r2
 8001444:	105b      	asrs	r3, r3, #1
 8001446:	82bb      	strh	r3, [r7, #20]
    }
    w = width;
 8001448:	8c3b      	ldrh	r3, [r7, #32]
 800144a:	82fb      	strh	r3, [r7, #22]
  }
  
  u8g2_SetFontMode(u8g2, 1);    
 800144c:	2101      	movs	r1, #1
 800144e:	68f8      	ldr	r0, [r7, #12]
 8001450:	f000 fcdc 	bl	8001e0c <u8g2_SetFontMode>
  u8g2_DrawUTF8(u8g2, x,y, text);
 8001454:	893a      	ldrh	r2, [r7, #8]
 8001456:	8979      	ldrh	r1, [r7, #10]
 8001458:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800145a:	68f8      	ldr	r0, [r7, #12]
 800145c:	f000 fdae 	bl	8001fbc <u8g2_DrawUTF8>
  u8g2_DrawButtonFrame(u8g2, x-text_x_offset, y, flags, w, padding_h, padding_v);
 8001460:	897a      	ldrh	r2, [r7, #10]
 8001462:	8abb      	ldrh	r3, [r7, #20]
 8001464:	1ad3      	subs	r3, r2, r3
 8001466:	b299      	uxth	r1, r3
 8001468:	88f8      	ldrh	r0, [r7, #6]
 800146a:	893a      	ldrh	r2, [r7, #8]
 800146c:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800146e:	9302      	str	r3, [sp, #8]
 8001470:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	8afb      	ldrh	r3, [r7, #22]
 8001476:	9300      	str	r3, [sp, #0]
 8001478:	4603      	mov	r3, r0
 800147a:	68f8      	ldr	r0, [r7, #12]
 800147c:	f7ff febe 	bl	80011fc <u8g2_DrawButtonFrame>
  
}
 8001480:	bf00      	nop
 8001482:	3718      	adds	r7, #24
 8001484:	46bd      	mov	sp, r7
 8001486:	bd80      	pop	{r7, pc}

08001488 <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
  u8g2_FirstPage(u8g2);
 8001490:	6878      	ldr	r0, [r7, #4]
 8001492:	f7ff fe71 	bl	8001178 <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
 8001496:	6878      	ldr	r0, [r7, #4]
 8001498:	f7ff fe82 	bl	80011a0 <u8g2_NextPage>
 800149c:	4603      	mov	r3, r0
 800149e:	2b00      	cmp	r3, #0
 80014a0:	d1f9      	bne.n	8001496 <u8g2_ClearDisplay+0xe>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
 80014a2:	2100      	movs	r1, #0
 80014a4:	6878      	ldr	r0, [r7, #4]
 80014a6:	f7ff fe4f 	bl	8001148 <u8g2_SetBufferCurrTileRow>
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
	...

080014b4 <u8g2_m_16_4_f>:
  *page_cnt = 2;
  return buf;
  #endif
}
uint8_t *u8g2_m_16_4_f(uint8_t *page_cnt)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 4;
  return 0;
  #else
  static uint8_t buf[512];
  *page_cnt = 4;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	2204      	movs	r2, #4
 80014c0:	701a      	strb	r2, [r3, #0]
  return buf;
 80014c2:	4b03      	ldr	r3, [pc, #12]	; (80014d0 <u8g2_m_16_4_f+0x1c>)
  #endif
}
 80014c4:	4618      	mov	r0, r3
 80014c6:	370c      	adds	r7, #12
 80014c8:	46bd      	mov	sp, r7
 80014ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ce:	4770      	bx	lr
 80014d0:	2000012c 	.word	0x2000012c

080014d4 <u8g2_Setup_ssd1305_i2c_128x32_noname_f>:
  buf = u8g2_m_16_4_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1305 f */
void u8g2_Setup_ssd1305_i2c_128x32_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	b088      	sub	sp, #32
 80014d8:	af02      	add	r7, sp, #8
 80014da:	60f8      	str	r0, [r7, #12]
 80014dc:	60b9      	str	r1, [r7, #8]
 80014de:	607a      	str	r2, [r7, #4]
 80014e0:	603b      	str	r3, [r7, #0]
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1305_128x32_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	9300      	str	r3, [sp, #0]
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	4a0b      	ldr	r2, [pc, #44]	; (8001518 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x44>)
 80014ea:	490c      	ldr	r1, [pc, #48]	; (800151c <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x48>)
 80014ec:	68f8      	ldr	r0, [r7, #12]
 80014ee:	f001 fe3d 	bl	800316c <u8x8_Setup>
  buf = u8g2_m_16_4_f(&tile_buf_height);
 80014f2:	f107 0313 	add.w	r3, r7, #19
 80014f6:	4618      	mov	r0, r3
 80014f8:	f7ff ffdc 	bl	80014b4 <u8g2_m_16_4_f>
 80014fc:	6178      	str	r0, [r7, #20]
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
 80014fe:	7cfa      	ldrb	r2, [r7, #19]
 8001500:	68bb      	ldr	r3, [r7, #8]
 8001502:	9300      	str	r3, [sp, #0]
 8001504:	4b06      	ldr	r3, [pc, #24]	; (8001520 <u8g2_Setup_ssd1305_i2c_128x32_noname_f+0x4c>)
 8001506:	6979      	ldr	r1, [r7, #20]
 8001508:	68f8      	ldr	r0, [r7, #12]
 800150a:	f001 f8ff 	bl	800270c <u8g2_SetupBuffer>
}
 800150e:	bf00      	nop
 8001510:	3718      	adds	r7, #24
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	08002d01 	.word	0x08002d01
 800151c:	08002ec1 	.word	0x08002ec1
 8001520:	0800258f 	.word	0x0800258f

08001524 <u8g2_font_get_byte>:
/* low level byte and word access */

/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
 8001524:	b480      	push	{r7}
 8001526:	b083      	sub	sp, #12
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	70fb      	strb	r3, [r7, #3]
  font += offset;
 8001530:	78fb      	ldrb	r3, [r7, #3]
 8001532:	687a      	ldr	r2, [r7, #4]
 8001534:	4413      	add	r3, r2
 8001536:	607b      	str	r3, [r7, #4]
  return u8x8_pgm_read( font );  
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	781b      	ldrb	r3, [r3, #0]
}
 800153c:	4618      	mov	r0, r3
 800153e:	370c      	adds	r7, #12
 8001540:	46bd      	mov	sp, r7
 8001542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001546:	4770      	bx	lr

08001548 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
 8001548:	b480      	push	{r7}
 800154a:	b085      	sub	sp, #20
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
 8001550:	460b      	mov	r3, r1
 8001552:	70fb      	strb	r3, [r7, #3]
    uint16_t pos;
    font += offset;
 8001554:	78fb      	ldrb	r3, [r7, #3]
 8001556:	687a      	ldr	r2, [r7, #4]
 8001558:	4413      	add	r3, r2
 800155a:	607b      	str	r3, [r7, #4]
    pos = u8x8_pgm_read( font );
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	81fb      	strh	r3, [r7, #14]
    font++;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	3301      	adds	r3, #1
 8001566:	607b      	str	r3, [r7, #4]
    pos <<= 8;
 8001568:	89fb      	ldrh	r3, [r7, #14]
 800156a:	021b      	lsls	r3, r3, #8
 800156c:	81fb      	strh	r3, [r7, #14]
    pos += u8x8_pgm_read( font);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	b29a      	uxth	r2, r3
 8001574:	89fb      	ldrh	r3, [r7, #14]
 8001576:	4413      	add	r3, r2
 8001578:	81fb      	strh	r3, [r7, #14]
    return pos;
 800157a:	89fb      	ldrh	r3, [r7, #14]
}
 800157c:	4618      	mov	r0, r3
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001586:	4770      	bx	lr

08001588 <u8g2_read_font_info>:

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
 8001590:	6039      	str	r1, [r7, #0]
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
 8001592:	2100      	movs	r1, #0
 8001594:	6838      	ldr	r0, [r7, #0]
 8001596:	f7ff ffc5 	bl	8001524 <u8g2_font_get_byte>
 800159a:	4603      	mov	r3, r0
 800159c:	461a      	mov	r2, r3
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	701a      	strb	r2, [r3, #0]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
 80015a2:	2101      	movs	r1, #1
 80015a4:	6838      	ldr	r0, [r7, #0]
 80015a6:	f7ff ffbd 	bl	8001524 <u8g2_font_get_byte>
 80015aa:	4603      	mov	r3, r0
 80015ac:	461a      	mov	r2, r3
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	705a      	strb	r2, [r3, #1]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
 80015b2:	2102      	movs	r1, #2
 80015b4:	6838      	ldr	r0, [r7, #0]
 80015b6:	f7ff ffb5 	bl	8001524 <u8g2_font_get_byte>
 80015ba:	4603      	mov	r3, r0
 80015bc:	461a      	mov	r2, r3
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	709a      	strb	r2, [r3, #2]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
 80015c2:	2103      	movs	r1, #3
 80015c4:	6838      	ldr	r0, [r7, #0]
 80015c6:	f7ff ffad 	bl	8001524 <u8g2_font_get_byte>
 80015ca:	4603      	mov	r3, r0
 80015cc:	461a      	mov	r2, r3
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	70da      	strb	r2, [r3, #3]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
 80015d2:	2104      	movs	r1, #4
 80015d4:	6838      	ldr	r0, [r7, #0]
 80015d6:	f7ff ffa5 	bl	8001524 <u8g2_font_get_byte>
 80015da:	4603      	mov	r3, r0
 80015dc:	461a      	mov	r2, r3
 80015de:	687b      	ldr	r3, [r7, #4]
 80015e0:	711a      	strb	r2, [r3, #4]
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
 80015e2:	2105      	movs	r1, #5
 80015e4:	6838      	ldr	r0, [r7, #0]
 80015e6:	f7ff ff9d 	bl	8001524 <u8g2_font_get_byte>
 80015ea:	4603      	mov	r3, r0
 80015ec:	461a      	mov	r2, r3
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	715a      	strb	r2, [r3, #5]
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
 80015f2:	2106      	movs	r1, #6
 80015f4:	6838      	ldr	r0, [r7, #0]
 80015f6:	f7ff ff95 	bl	8001524 <u8g2_font_get_byte>
 80015fa:	4603      	mov	r3, r0
 80015fc:	461a      	mov	r2, r3
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	719a      	strb	r2, [r3, #6]
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
 8001602:	2107      	movs	r1, #7
 8001604:	6838      	ldr	r0, [r7, #0]
 8001606:	f7ff ff8d 	bl	8001524 <u8g2_font_get_byte>
 800160a:	4603      	mov	r3, r0
 800160c:	461a      	mov	r2, r3
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	71da      	strb	r2, [r3, #7]
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
 8001612:	2108      	movs	r1, #8
 8001614:	6838      	ldr	r0, [r7, #0]
 8001616:	f7ff ff85 	bl	8001524 <u8g2_font_get_byte>
 800161a:	4603      	mov	r3, r0
 800161c:	461a      	mov	r2, r3
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	721a      	strb	r2, [r3, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
 8001622:	2109      	movs	r1, #9
 8001624:	6838      	ldr	r0, [r7, #0]
 8001626:	f7ff ff7d 	bl	8001524 <u8g2_font_get_byte>
 800162a:	4603      	mov	r3, r0
 800162c:	b25a      	sxtb	r2, r3
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	725a      	strb	r2, [r3, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
 8001632:	210a      	movs	r1, #10
 8001634:	6838      	ldr	r0, [r7, #0]
 8001636:	f7ff ff75 	bl	8001524 <u8g2_font_get_byte>
 800163a:	4603      	mov	r3, r0
 800163c:	b25a      	sxtb	r2, r3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	729a      	strb	r2, [r3, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
 8001642:	210b      	movs	r1, #11
 8001644:	6838      	ldr	r0, [r7, #0]
 8001646:	f7ff ff6d 	bl	8001524 <u8g2_font_get_byte>
 800164a:	4603      	mov	r3, r0
 800164c:	b25a      	sxtb	r2, r3
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	72da      	strb	r2, [r3, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
 8001652:	210c      	movs	r1, #12
 8001654:	6838      	ldr	r0, [r7, #0]
 8001656:	f7ff ff65 	bl	8001524 <u8g2_font_get_byte>
 800165a:	4603      	mov	r3, r0
 800165c:	b25a      	sxtb	r2, r3
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	731a      	strb	r2, [r3, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
 8001662:	210d      	movs	r1, #13
 8001664:	6838      	ldr	r0, [r7, #0]
 8001666:	f7ff ff5d 	bl	8001524 <u8g2_font_get_byte>
 800166a:	4603      	mov	r3, r0
 800166c:	b25a      	sxtb	r2, r3
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	735a      	strb	r2, [r3, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
 8001672:	210e      	movs	r1, #14
 8001674:	6838      	ldr	r0, [r7, #0]
 8001676:	f7ff ff55 	bl	8001524 <u8g2_font_get_byte>
 800167a:	4603      	mov	r3, r0
 800167c:	b25a      	sxtb	r2, r3
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	739a      	strb	r2, [r3, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
 8001682:	210f      	movs	r1, #15
 8001684:	6838      	ldr	r0, [r7, #0]
 8001686:	f7ff ff4d 	bl	8001524 <u8g2_font_get_byte>
 800168a:	4603      	mov	r3, r0
 800168c:	b25a      	sxtb	r2, r3
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	73da      	strb	r2, [r3, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
 8001692:	2110      	movs	r1, #16
 8001694:	6838      	ldr	r0, [r7, #0]
 8001696:	f7ff ff45 	bl	8001524 <u8g2_font_get_byte>
 800169a:	4603      	mov	r3, r0
 800169c:	b25a      	sxtb	r2, r3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	741a      	strb	r2, [r3, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
 80016a2:	2111      	movs	r1, #17
 80016a4:	6838      	ldr	r0, [r7, #0]
 80016a6:	f7ff ff4f 	bl	8001548 <u8g2_font_get_word>
 80016aa:	4603      	mov	r3, r0
 80016ac:	461a      	mov	r2, r3
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	825a      	strh	r2, [r3, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
 80016b2:	2113      	movs	r1, #19
 80016b4:	6838      	ldr	r0, [r7, #0]
 80016b6:	f7ff ff47 	bl	8001548 <u8g2_font_get_word>
 80016ba:	4603      	mov	r3, r0
 80016bc:	461a      	mov	r2, r3
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	829a      	strh	r2, [r3, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
 80016c2:	2115      	movs	r1, #21
 80016c4:	6838      	ldr	r0, [r7, #0]
 80016c6:	f7ff ff3f 	bl	8001548 <u8g2_font_get_word>
 80016ca:	4603      	mov	r3, r0
 80016cc:	461a      	mov	r2, r3
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	82da      	strh	r2, [r3, #22]
#endif
}
 80016d2:	bf00      	nop
 80016d4:	3708      	adds	r7, #8
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}

080016da <u8g2_font_decode_get_unsigned_bits>:
/*========================================================================*/
/* glyph handling */

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
 80016da:	b480      	push	{r7}
 80016dc:	b085      	sub	sp, #20
 80016de:	af00      	add	r7, sp, #0
 80016e0:	6078      	str	r0, [r7, #4]
 80016e2:	460b      	mov	r3, r1
 80016e4:	70fb      	strb	r3, [r7, #3]
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	7b1b      	ldrb	r3, [r3, #12]
 80016ea:	737b      	strb	r3, [r7, #13]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	73fb      	strb	r3, [r7, #15]
  
  val >>= bit_pos;
 80016f4:	7bfa      	ldrb	r2, [r7, #15]
 80016f6:	7b7b      	ldrb	r3, [r7, #13]
 80016f8:	fa42 f303 	asr.w	r3, r2, r3
 80016fc:	73fb      	strb	r3, [r7, #15]
  bit_pos_plus_cnt = bit_pos;
 80016fe:	7b7b      	ldrb	r3, [r7, #13]
 8001700:	73bb      	strb	r3, [r7, #14]
  bit_pos_plus_cnt += cnt;
 8001702:	7bba      	ldrb	r2, [r7, #14]
 8001704:	78fb      	ldrb	r3, [r7, #3]
 8001706:	4413      	add	r3, r2
 8001708:	73bb      	strb	r3, [r7, #14]
  if ( bit_pos_plus_cnt >= 8 )
 800170a:	7bbb      	ldrb	r3, [r7, #14]
 800170c:	2b07      	cmp	r3, #7
 800170e:	d91a      	bls.n	8001746 <u8g2_font_decode_get_unsigned_bits+0x6c>
  {
    uint8_t s = 8;
 8001710:	2308      	movs	r3, #8
 8001712:	733b      	strb	r3, [r7, #12]
    s -= bit_pos;
 8001714:	7b3a      	ldrb	r2, [r7, #12]
 8001716:	7b7b      	ldrb	r3, [r7, #13]
 8001718:	1ad3      	subs	r3, r2, r3
 800171a:	733b      	strb	r3, [r7, #12]
    f->decode_ptr++;
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	1c5a      	adds	r2, r3, #1
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	601a      	str	r2, [r3, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	461a      	mov	r2, r3
 800172e:	7b3b      	ldrb	r3, [r7, #12]
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	b25a      	sxtb	r2, r3
 8001736:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800173a:	4313      	orrs	r3, r2
 800173c:	b25b      	sxtb	r3, r3
 800173e:	73fb      	strb	r3, [r7, #15]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
 8001740:	7bbb      	ldrb	r3, [r7, #14]
 8001742:	3b08      	subs	r3, #8
 8001744:	73bb      	strb	r3, [r7, #14]
  }
  val &= (1U<<cnt)-1;
 8001746:	78fb      	ldrb	r3, [r7, #3]
 8001748:	f04f 32ff 	mov.w	r2, #4294967295
 800174c:	fa02 f303 	lsl.w	r3, r2, r3
 8001750:	b2db      	uxtb	r3, r3
 8001752:	43db      	mvns	r3, r3
 8001754:	b2da      	uxtb	r2, r3
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	4013      	ands	r3, r2
 800175a:	73fb      	strb	r3, [r7, #15]
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	7bba      	ldrb	r2, [r7, #14]
 8001760:	731a      	strb	r2, [r3, #12]
  return val;
 8001762:	7bfb      	ldrb	r3, [r7, #15]
}
 8001764:	4618      	mov	r0, r3
 8001766:	3714      	adds	r7, #20
 8001768:	46bd      	mov	sp, r7
 800176a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800176e:	4770      	bx	lr

08001770 <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	460b      	mov	r3, r1
 800177a:	70fb      	strb	r3, [r7, #3]
  int8_t v, d;
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
 800177c:	78fb      	ldrb	r3, [r7, #3]
 800177e:	4619      	mov	r1, r3
 8001780:	6878      	ldr	r0, [r7, #4]
 8001782:	f7ff ffaa 	bl	80016da <u8g2_font_decode_get_unsigned_bits>
 8001786:	4603      	mov	r3, r0
 8001788:	73fb      	strb	r3, [r7, #15]
  d = 1;
 800178a:	2301      	movs	r3, #1
 800178c:	73bb      	strb	r3, [r7, #14]
  cnt--;
 800178e:	78fb      	ldrb	r3, [r7, #3]
 8001790:	3b01      	subs	r3, #1
 8001792:	70fb      	strb	r3, [r7, #3]
  d <<= cnt;
 8001794:	f997 200e 	ldrsb.w	r2, [r7, #14]
 8001798:	78fb      	ldrb	r3, [r7, #3]
 800179a:	fa02 f303 	lsl.w	r3, r2, r3
 800179e:	73bb      	strb	r3, [r7, #14]
  v -= d;
 80017a0:	7bfa      	ldrb	r2, [r7, #15]
 80017a2:	7bbb      	ldrb	r3, [r7, #14]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	b2db      	uxtb	r3, r3
 80017a8:	73fb      	strb	r3, [r7, #15]
  return v;
 80017aa:	f997 300f 	ldrsb.w	r3, [r7, #15]
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
 80017ae:	4618      	mov	r0, r3
 80017b0:	3710      	adds	r7, #16
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}

080017b6 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
 80017b6:	b490      	push	{r4, r7}
 80017b8:	b082      	sub	sp, #8
 80017ba:	af00      	add	r7, sp, #0
 80017bc:	4604      	mov	r4, r0
 80017be:	4608      	mov	r0, r1
 80017c0:	4611      	mov	r1, r2
 80017c2:	461a      	mov	r2, r3
 80017c4:	4623      	mov	r3, r4
 80017c6:	80fb      	strh	r3, [r7, #6]
 80017c8:	4603      	mov	r3, r0
 80017ca:	717b      	strb	r3, [r7, #5]
 80017cc:	460b      	mov	r3, r1
 80017ce:	713b      	strb	r3, [r7, #4]
 80017d0:	4613      	mov	r3, r2
 80017d2:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 80017d4:	78fb      	ldrb	r3, [r7, #3]
 80017d6:	2b02      	cmp	r3, #2
 80017d8:	d014      	beq.n	8001804 <u8g2_add_vector_y+0x4e>
 80017da:	2b02      	cmp	r3, #2
 80017dc:	dc19      	bgt.n	8001812 <u8g2_add_vector_y+0x5c>
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d002      	beq.n	80017e8 <u8g2_add_vector_y+0x32>
 80017e2:	2b01      	cmp	r3, #1
 80017e4:	d007      	beq.n	80017f6 <u8g2_add_vector_y+0x40>
 80017e6:	e014      	b.n	8001812 <u8g2_add_vector_y+0x5c>
  {
    case 0:
      dy += y;
 80017e8:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80017ec:	b29a      	uxth	r2, r3
 80017ee:	88fb      	ldrh	r3, [r7, #6]
 80017f0:	4413      	add	r3, r2
 80017f2:	80fb      	strh	r3, [r7, #6]
      break;
 80017f4:	e014      	b.n	8001820 <u8g2_add_vector_y+0x6a>
    case 1:
      dy += x;
 80017f6:	f997 3005 	ldrsb.w	r3, [r7, #5]
 80017fa:	b29a      	uxth	r2, r3
 80017fc:	88fb      	ldrh	r3, [r7, #6]
 80017fe:	4413      	add	r3, r2
 8001800:	80fb      	strh	r3, [r7, #6]
      break;
 8001802:	e00d      	b.n	8001820 <u8g2_add_vector_y+0x6a>
    case 2:
      dy -= y;
 8001804:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001808:	b29b      	uxth	r3, r3
 800180a:	88fa      	ldrh	r2, [r7, #6]
 800180c:	1ad3      	subs	r3, r2, r3
 800180e:	80fb      	strh	r3, [r7, #6]
      break;
 8001810:	e006      	b.n	8001820 <u8g2_add_vector_y+0x6a>
    default:
      dy -= x;
 8001812:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001816:	b29b      	uxth	r3, r3
 8001818:	88fa      	ldrh	r2, [r7, #6]
 800181a:	1ad3      	subs	r3, r2, r3
 800181c:	80fb      	strh	r3, [r7, #6]
      break;      
 800181e:	bf00      	nop
  }
  return dy;
 8001820:	88fb      	ldrh	r3, [r7, #6]
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bc90      	pop	{r4, r7}
 800182a:	4770      	bx	lr

0800182c <u8g2_add_vector_x>:

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
 800182c:	b490      	push	{r4, r7}
 800182e:	b082      	sub	sp, #8
 8001830:	af00      	add	r7, sp, #0
 8001832:	4604      	mov	r4, r0
 8001834:	4608      	mov	r0, r1
 8001836:	4611      	mov	r1, r2
 8001838:	461a      	mov	r2, r3
 800183a:	4623      	mov	r3, r4
 800183c:	80fb      	strh	r3, [r7, #6]
 800183e:	4603      	mov	r3, r0
 8001840:	717b      	strb	r3, [r7, #5]
 8001842:	460b      	mov	r3, r1
 8001844:	713b      	strb	r3, [r7, #4]
 8001846:	4613      	mov	r3, r2
 8001848:	70fb      	strb	r3, [r7, #3]
  switch(dir)
 800184a:	78fb      	ldrb	r3, [r7, #3]
 800184c:	2b02      	cmp	r3, #2
 800184e:	d014      	beq.n	800187a <u8g2_add_vector_x+0x4e>
 8001850:	2b02      	cmp	r3, #2
 8001852:	dc19      	bgt.n	8001888 <u8g2_add_vector_x+0x5c>
 8001854:	2b00      	cmp	r3, #0
 8001856:	d002      	beq.n	800185e <u8g2_add_vector_x+0x32>
 8001858:	2b01      	cmp	r3, #1
 800185a:	d007      	beq.n	800186c <u8g2_add_vector_x+0x40>
 800185c:	e014      	b.n	8001888 <u8g2_add_vector_x+0x5c>
  {
    case 0:
      dx += x;
 800185e:	f997 3005 	ldrsb.w	r3, [r7, #5]
 8001862:	b29a      	uxth	r2, r3
 8001864:	88fb      	ldrh	r3, [r7, #6]
 8001866:	4413      	add	r3, r2
 8001868:	80fb      	strh	r3, [r7, #6]
      break;
 800186a:	e014      	b.n	8001896 <u8g2_add_vector_x+0x6a>
    case 1:
      dx -= y;
 800186c:	f997 3004 	ldrsb.w	r3, [r7, #4]
 8001870:	b29b      	uxth	r3, r3
 8001872:	88fa      	ldrh	r2, [r7, #6]
 8001874:	1ad3      	subs	r3, r2, r3
 8001876:	80fb      	strh	r3, [r7, #6]
      break;
 8001878:	e00d      	b.n	8001896 <u8g2_add_vector_x+0x6a>
    case 2:
      dx -= x;
 800187a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 800187e:	b29b      	uxth	r3, r3
 8001880:	88fa      	ldrh	r2, [r7, #6]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	80fb      	strh	r3, [r7, #6]
      break;
 8001886:	e006      	b.n	8001896 <u8g2_add_vector_x+0x6a>
    default:
      dx += y;
 8001888:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800188c:	b29a      	uxth	r2, r3
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	4413      	add	r3, r2
 8001892:	80fb      	strh	r3, [r7, #6]
      break;      
 8001894:	bf00      	nop
  }
  return dx;
 8001896:	88fb      	ldrh	r3, [r7, #6]
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bc90      	pop	{r4, r7}
 80018a0:	4770      	bx	lr

080018a2 <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b088      	sub	sp, #32
 80018a6:	af02      	add	r7, sp, #8
 80018a8:	6078      	str	r0, [r7, #4]
 80018aa:	460b      	mov	r3, r1
 80018ac:	70fb      	strb	r3, [r7, #3]
 80018ae:	4613      	mov	r3, r2
 80018b0:	70bb      	strb	r3, [r7, #2]
  uint8_t lx,ly;
  
  /* target position on the screen */
  u8g2_uint_t x, y;
  
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	3360      	adds	r3, #96	; 0x60
 80018b6:	613b      	str	r3, [r7, #16]
  
  cnt = len;
 80018b8:	78fb      	ldrb	r3, [r7, #3]
 80018ba:	75fb      	strb	r3, [r7, #23]
  
  /* get the local position */
  lx = decode->x;
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	f993 3008 	ldrsb.w	r3, [r3, #8]
 80018c2:	757b      	strb	r3, [r7, #21]
  ly = decode->y;
 80018c4:	693b      	ldr	r3, [r7, #16]
 80018c6:	f993 3009 	ldrsb.w	r3, [r3, #9]
 80018ca:	753b      	strb	r3, [r7, #20]
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	f993 300a 	ldrsb.w	r3, [r3, #10]
 80018d2:	73fb      	strb	r3, [r7, #15]
    rem -= lx;
 80018d4:	7bfa      	ldrb	r2, [r7, #15]
 80018d6:	7d7b      	ldrb	r3, [r7, #21]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	73fb      	strb	r3, [r7, #15]
    
    /* calculate how many pixel to draw. This is either to the right edge */
    /* or lesser, if not enough pixel are left */
    current = rem;
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	75bb      	strb	r3, [r7, #22]
    if ( cnt < rem )
 80018e0:	7dfa      	ldrb	r2, [r7, #23]
 80018e2:	7bfb      	ldrb	r3, [r7, #15]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d201      	bcs.n	80018ec <u8g2_font_decode_len+0x4a>
      current = cnt;
 80018e8:	7dfb      	ldrb	r3, [r7, #23]
 80018ea:	75bb      	strb	r3, [r7, #22]
    
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
 80018ec:	693b      	ldr	r3, [r7, #16]
 80018ee:	889b      	ldrh	r3, [r3, #4]
 80018f0:	81bb      	strh	r3, [r7, #12]
    y = decode->target_y;
 80018f2:	693b      	ldr	r3, [r7, #16]
 80018f4:	88db      	ldrh	r3, [r3, #6]
 80018f6:	817b      	strh	r3, [r7, #10]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
 80018f8:	f997 1015 	ldrsb.w	r1, [r7, #21]
 80018fc:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001900:	693b      	ldr	r3, [r7, #16]
 8001902:	7c1b      	ldrb	r3, [r3, #16]
 8001904:	89b8      	ldrh	r0, [r7, #12]
 8001906:	f7ff ff91 	bl	800182c <u8g2_add_vector_x>
 800190a:	4603      	mov	r3, r0
 800190c:	81bb      	strh	r3, [r7, #12]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
 800190e:	f997 1015 	ldrsb.w	r1, [r7, #21]
 8001912:	f997 2014 	ldrsb.w	r2, [r7, #20]
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	7c1b      	ldrb	r3, [r3, #16]
 800191a:	8978      	ldrh	r0, [r7, #10]
 800191c:	f7ff ff4b 	bl	80017b6 <u8g2_add_vector_y>
 8001920:	4603      	mov	r3, r0
 8001922:	817b      	strh	r3, [r7, #10]
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
 8001924:	78bb      	ldrb	r3, [r7, #2]
 8001926:	2b00      	cmp	r3, #0
 8001928:	d010      	beq.n	800194c <u8g2_font_decode_len+0xaa>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
 800192a:	693b      	ldr	r3, [r7, #16]
 800192c:	7b9a      	ldrb	r2, [r3, #14]
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 8001934:	7dbb      	ldrb	r3, [r7, #22]
 8001936:	b298      	uxth	r0, r3
 8001938:	693b      	ldr	r3, [r7, #16]
 800193a:	7c1b      	ldrb	r3, [r3, #16]
 800193c:	897a      	ldrh	r2, [r7, #10]
 800193e:	89b9      	ldrh	r1, [r7, #12]
 8001940:	9300      	str	r3, [sp, #0]
 8001942:	4603      	mov	r3, r0
 8001944:	6878      	ldr	r0, [r7, #4]
 8001946:	f000 fcf0 	bl	800232a <u8g2_DrawHVLine>
 800194a:	e013      	b.n	8001974 <u8g2_font_decode_len+0xd2>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	7b5b      	ldrb	r3, [r3, #13]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d10f      	bne.n	8001974 <u8g2_font_decode_len+0xd2>
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	7bda      	ldrb	r2, [r3, #15]
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
      u8g2_DrawHVLine(u8g2, 
 800195e:	7dbb      	ldrb	r3, [r7, #22]
 8001960:	b298      	uxth	r0, r3
 8001962:	693b      	ldr	r3, [r7, #16]
 8001964:	7c1b      	ldrb	r3, [r3, #16]
 8001966:	897a      	ldrh	r2, [r7, #10]
 8001968:	89b9      	ldrh	r1, [r7, #12]
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	4603      	mov	r3, r0
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fcdb 	bl	800232a <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
 8001974:	7dfa      	ldrb	r2, [r7, #23]
 8001976:	7bfb      	ldrb	r3, [r7, #15]
 8001978:	429a      	cmp	r2, r3
 800197a:	d309      	bcc.n	8001990 <u8g2_font_decode_len+0xee>
      break;
    cnt -= rem;
 800197c:	7dfa      	ldrb	r2, [r7, #23]
 800197e:	7bfb      	ldrb	r3, [r7, #15]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	75fb      	strb	r3, [r7, #23]
    lx = 0;
 8001984:	2300      	movs	r3, #0
 8001986:	757b      	strb	r3, [r7, #21]
    ly++;
 8001988:	7d3b      	ldrb	r3, [r7, #20]
 800198a:	3301      	adds	r3, #1
 800198c:	753b      	strb	r3, [r7, #20]
    rem = decode->glyph_width;
 800198e:	e79d      	b.n	80018cc <u8g2_font_decode_len+0x2a>
      break;
 8001990:	bf00      	nop
  }
  lx += cnt;
 8001992:	7d7a      	ldrb	r2, [r7, #21]
 8001994:	7dfb      	ldrb	r3, [r7, #23]
 8001996:	4413      	add	r3, r2
 8001998:	757b      	strb	r3, [r7, #21]
  
  decode->x = lx;
 800199a:	f997 2015 	ldrsb.w	r2, [r7, #21]
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	721a      	strb	r2, [r3, #8]
  decode->y = ly;  
 80019a2:	f997 2014 	ldrsb.w	r2, [r7, #20]
 80019a6:	693b      	ldr	r3, [r7, #16]
 80019a8:	725a      	strb	r2, [r3, #9]
}
 80019aa:	bf00      	nop
 80019ac:	3718      	adds	r7, #24
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <u8g2_font_setup_decode>:
  
}


static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b084      	sub	sp, #16
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	6078      	str	r0, [r7, #4]
 80019ba:	6039      	str	r1, [r7, #0]
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	3360      	adds	r3, #96	; 0x60
 80019c0:	60fb      	str	r3, [r7, #12]
  decode->decode_ptr = glyph_data;
 80019c2:	68fb      	ldr	r3, [r7, #12]
 80019c4:	683a      	ldr	r2, [r7, #0]
 80019c6:	601a      	str	r2, [r3, #0]
  decode->decode_bit_pos = 0;
 80019c8:	68fb      	ldr	r3, [r7, #12]
 80019ca:	2200      	movs	r2, #0
 80019cc:	731a      	strb	r2, [r3, #12]
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
 80019d4:	4619      	mov	r1, r3
 80019d6:	68f8      	ldr	r0, [r7, #12]
 80019d8:	f7ff fe7f 	bl	80016da <u8g2_font_decode_get_unsigned_bits>
 80019dc:	4603      	mov	r3, r0
 80019de:	b25a      	sxtb	r2, r3
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	729a      	strb	r2, [r3, #10]
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
 80019ea:	4619      	mov	r1, r3
 80019ec:	68f8      	ldr	r0, [r7, #12]
 80019ee:	f7ff fe74 	bl	80016da <u8g2_font_decode_get_unsigned_bits>
 80019f2:	4603      	mov	r3, r0
 80019f4:	b25a      	sxtb	r2, r3
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	72da      	strb	r2, [r3, #11]
  
  decode->fg_color = u8g2->draw_color;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	f893 2092 	ldrb.w	r2, [r3, #146]	; 0x92
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	739a      	strb	r2, [r3, #14]
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	7b9b      	ldrb	r3, [r3, #14]
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	bf0c      	ite	eq
 8001a0c:	2301      	moveq	r3, #1
 8001a0e:	2300      	movne	r3, #0
 8001a10:	b2db      	uxtb	r3, r3
 8001a12:	461a      	mov	r2, r3
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	73da      	strb	r2, [r3, #15]
}
 8001a18:	bf00      	nop
 8001a1a:	3710      	adds	r7, #16
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	bd80      	pop	{r7, pc}

08001a20 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
 8001a20:	b580      	push	{r7, lr}
 8001a22:	b08a      	sub	sp, #40	; 0x28
 8001a24:	af02      	add	r7, sp, #8
 8001a26:	6078      	str	r0, [r7, #4]
 8001a28:	6039      	str	r1, [r7, #0]
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	3360      	adds	r3, #96	; 0x60
 8001a2e:	617b      	str	r3, [r7, #20]
    
  u8g2_font_setup_decode(u8g2, glyph_data);     /* set values in u8g2->font_decode data structure */
 8001a30:	6839      	ldr	r1, [r7, #0]
 8001a32:	6878      	ldr	r0, [r7, #4]
 8001a34:	f7ff ffbd 	bl	80019b2 <u8g2_font_setup_decode>
  h = u8g2->font_decode.glyph_height;
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f893 306b 	ldrb.w	r3, [r3, #107]	; 0x6b
 8001a3e:	74fb      	strb	r3, [r7, #19]
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001a46:	4619      	mov	r1, r3
 8001a48:	6978      	ldr	r0, [r7, #20]
 8001a4a:	f7ff fe91 	bl	8001770 <u8g2_font_decode_get_signed_bits>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	74bb      	strb	r3, [r7, #18]
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001a58:	4619      	mov	r1, r3
 8001a5a:	6978      	ldr	r0, [r7, #20]
 8001a5c:	f7ff fe88 	bl	8001770 <u8g2_font_decode_get_signed_bits>
 8001a60:	4603      	mov	r3, r0
 8001a62:	747b      	strb	r3, [r7, #17]
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	6978      	ldr	r0, [r7, #20]
 8001a6e:	f7ff fe7f 	bl	8001770 <u8g2_font_decode_get_signed_bits>
 8001a72:	4603      	mov	r3, r0
 8001a74:	743b      	strb	r3, [r7, #16]
  
  if ( decode->glyph_width > 0 )
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f340 80d7 	ble.w	8001c30 <u8g2_font_decode_glyph+0x210>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
 8001a82:	697b      	ldr	r3, [r7, #20]
 8001a84:	8898      	ldrh	r0, [r3, #4]
 8001a86:	7cfa      	ldrb	r2, [r7, #19]
 8001a88:	7c7b      	ldrb	r3, [r7, #17]
 8001a8a:	4413      	add	r3, r2
 8001a8c:	b2db      	uxtb	r3, r3
 8001a8e:	425b      	negs	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	b25a      	sxtb	r2, r3
 8001a94:	697b      	ldr	r3, [r7, #20]
 8001a96:	7c1b      	ldrb	r3, [r3, #16]
 8001a98:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001a9c:	f7ff fec6 	bl	800182c <u8g2_add_vector_x>
 8001aa0:	4603      	mov	r3, r0
 8001aa2:	461a      	mov	r2, r3
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	809a      	strh	r2, [r3, #4]
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
 8001aa8:	697b      	ldr	r3, [r7, #20]
 8001aaa:	88d8      	ldrh	r0, [r3, #6]
 8001aac:	7cfa      	ldrb	r2, [r7, #19]
 8001aae:	7c7b      	ldrb	r3, [r7, #17]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	425b      	negs	r3, r3
 8001ab6:	b2db      	uxtb	r3, r3
 8001ab8:	b25a      	sxtb	r2, r3
 8001aba:	697b      	ldr	r3, [r7, #20]
 8001abc:	7c1b      	ldrb	r3, [r3, #16]
 8001abe:	f997 1012 	ldrsb.w	r1, [r7, #18]
 8001ac2:	f7ff fe78 	bl	80017b6 <u8g2_add_vector_y>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	461a      	mov	r2, r3
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	80da      	strh	r2, [r3, #6]
    //u8g2_add_vector(&(decode->target_x), &(decode->target_y), x, -(h+y), decode->dir);

#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
 8001ace:	697b      	ldr	r3, [r7, #20]
 8001ad0:	889b      	ldrh	r3, [r3, #4]
 8001ad2:	83fb      	strh	r3, [r7, #30]
      y0 = decode->target_y;
 8001ad4:	697b      	ldr	r3, [r7, #20]
 8001ad6:	88db      	ldrh	r3, [r3, #6]
 8001ad8:	837b      	strh	r3, [r7, #26]
      x1 = x0;
 8001ada:	8bfb      	ldrh	r3, [r7, #30]
 8001adc:	83bb      	strh	r3, [r7, #28]
      y1 = y0;
 8001ade:	8b7b      	ldrh	r3, [r7, #26]
 8001ae0:	833b      	strh	r3, [r7, #24]
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	7c1b      	ldrb	r3, [r3, #16]
 8001ae6:	2b03      	cmp	r3, #3
 8001ae8:	d85a      	bhi.n	8001ba0 <u8g2_font_decode_glyph+0x180>
 8001aea:	a201      	add	r2, pc, #4	; (adr r2, 8001af0 <u8g2_font_decode_glyph+0xd0>)
 8001aec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001af0:	08001b01 	.word	0x08001b01
 8001af4:	08001b1d 	.word	0x08001b1d
 8001af8:	08001b45 	.word	0x08001b45
 8001afc:	08001b79 	.word	0x08001b79
      {
	case 0:
	    x1 += decode->glyph_width;
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b06:	b29a      	uxth	r2, r3
 8001b08:	8bbb      	ldrh	r3, [r7, #28]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	83bb      	strh	r3, [r7, #28]
	    y1 += h;
 8001b0e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b12:	b29a      	uxth	r2, r3
 8001b14:	8b3b      	ldrh	r3, [r7, #24]
 8001b16:	4413      	add	r3, r2
 8001b18:	833b      	strh	r3, [r7, #24]
	    break;
 8001b1a:	e041      	b.n	8001ba0 <u8g2_font_decode_glyph+0x180>
	case 1:
	    x0 -= h;
 8001b1c:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b20:	b29b      	uxth	r3, r3
 8001b22:	8bfa      	ldrh	r2, [r7, #30]
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b28:	8bfb      	ldrh	r3, [r7, #30]
 8001b2a:	3301      	adds	r3, #1
 8001b2c:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001b2e:	8bbb      	ldrh	r3, [r7, #28]
 8001b30:	3301      	adds	r3, #1
 8001b32:	83bb      	strh	r3, [r7, #28]
	    y1 += decode->glyph_width;
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	8b3b      	ldrh	r3, [r7, #24]
 8001b3e:	4413      	add	r3, r2
 8001b40:	833b      	strh	r3, [r7, #24]
	    break;
 8001b42:	e02d      	b.n	8001ba0 <u8g2_font_decode_glyph+0x180>
	case 2:
	    x0 -= decode->glyph_width;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b4a:	b29b      	uxth	r3, r3
 8001b4c:	8bfa      	ldrh	r2, [r7, #30]
 8001b4e:	1ad3      	subs	r3, r2, r3
 8001b50:	83fb      	strh	r3, [r7, #30]
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b52:	8bfb      	ldrh	r3, [r7, #30]
 8001b54:	3301      	adds	r3, #1
 8001b56:	83fb      	strh	r3, [r7, #30]
	    x1++;
 8001b58:	8bbb      	ldrh	r3, [r7, #28]
 8001b5a:	3301      	adds	r3, #1
 8001b5c:	83bb      	strh	r3, [r7, #28]
	    y0 -= h;
 8001b5e:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b62:	b29b      	uxth	r3, r3
 8001b64:	8b7a      	ldrh	r2, [r7, #26]
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b6a:	8b7b      	ldrh	r3, [r7, #26]
 8001b6c:	3301      	adds	r3, #1
 8001b6e:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001b70:	8b3b      	ldrh	r3, [r7, #24]
 8001b72:	3301      	adds	r3, #1
 8001b74:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001b76:	e013      	b.n	8001ba0 <u8g2_font_decode_glyph+0x180>
	case 3:
	    x1 += h;
 8001b78:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	8bbb      	ldrh	r3, [r7, #28]
 8001b80:	4413      	add	r3, r2
 8001b82:	83bb      	strh	r3, [r7, #28]
	    y0 -= decode->glyph_width;
 8001b84:	697b      	ldr	r3, [r7, #20]
 8001b86:	f993 300a 	ldrsb.w	r3, [r3, #10]
 8001b8a:	b29b      	uxth	r3, r3
 8001b8c:	8b7a      	ldrh	r2, [r7, #26]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	837b      	strh	r3, [r7, #26]
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
 8001b92:	8b7b      	ldrh	r3, [r7, #26]
 8001b94:	3301      	adds	r3, #1
 8001b96:	837b      	strh	r3, [r7, #26]
	    y1++;
 8001b98:	8b3b      	ldrh	r3, [r7, #24]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	833b      	strh	r3, [r7, #24]
	    break;	  
 8001b9e:	bf00      	nop
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
 8001ba0:	8bb8      	ldrh	r0, [r7, #28]
 8001ba2:	8b7a      	ldrh	r2, [r7, #26]
 8001ba4:	8bf9      	ldrh	r1, [r7, #30]
 8001ba6:	8b3b      	ldrh	r3, [r7, #24]
 8001ba8:	9300      	str	r3, [sp, #0]
 8001baa:	4603      	mov	r3, r0
 8001bac:	6878      	ldr	r0, [r7, #4]
 8001bae:	f000 fcc3 	bl	8002538 <u8g2_IsIntersection>
 8001bb2:	4603      	mov	r3, r0
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d102      	bne.n	8001bbe <u8g2_font_decode_glyph+0x19e>
	return d;
 8001bb8:	f997 3010 	ldrsb.w	r3, [r7, #16]
 8001bbc:	e03a      	b.n	8001c34 <u8g2_font_decode_glyph+0x214>
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	721a      	strb	r2, [r3, #8]
    decode->y = 0;
 8001bc4:	697b      	ldr	r3, [r7, #20]
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	725a      	strb	r2, [r3, #9]
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	f893 3076 	ldrb.w	r3, [r3, #118]	; 0x76
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	6978      	ldr	r0, [r7, #20]
 8001bd4:	f7ff fd81 	bl	80016da <u8g2_font_decode_get_unsigned_bits>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	73fb      	strb	r3, [r7, #15]
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	f893 3077 	ldrb.w	r3, [r3, #119]	; 0x77
 8001be2:	4619      	mov	r1, r3
 8001be4:	6978      	ldr	r0, [r7, #20]
 8001be6:	f7ff fd78 	bl	80016da <u8g2_font_decode_get_unsigned_bits>
 8001bea:	4603      	mov	r3, r0
 8001bec:	73bb      	strb	r3, [r7, #14]
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
 8001bee:	7bfb      	ldrb	r3, [r7, #15]
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f7ff fe54 	bl	80018a2 <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
 8001bfa:	7bbb      	ldrb	r3, [r7, #14]
 8001bfc:	2201      	movs	r2, #1
 8001bfe:	4619      	mov	r1, r3
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f7ff fe4e 	bl	80018a2 <u8g2_font_decode_len>
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
 8001c06:	2101      	movs	r1, #1
 8001c08:	6978      	ldr	r0, [r7, #20]
 8001c0a:	f7ff fd66 	bl	80016da <u8g2_font_decode_get_unsigned_bits>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d1ec      	bne.n	8001bee <u8g2_font_decode_glyph+0x1ce>

      if ( decode->y >= h )
 8001c14:	697b      	ldr	r3, [r7, #20]
 8001c16:	f993 3009 	ldrsb.w	r3, [r3, #9]
 8001c1a:	f997 2013 	ldrsb.w	r2, [r7, #19]
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dd00      	ble.n	8001c24 <u8g2_font_decode_glyph+0x204>
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
 8001c22:	e7d2      	b.n	8001bca <u8g2_font_decode_glyph+0x1aa>
	break;
 8001c24:	bf00      	nop
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	7b9a      	ldrb	r2, [r3, #14]
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  }
  return d;
 8001c30:	f997 3010 	ldrsb.w	r3, [r7, #16]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	3720      	adds	r7, #32
 8001c38:	46bd      	mov	sp, r7
 8001c3a:	bd80      	pop	{r7, pc}

08001c3c <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
 8001c3c:	b580      	push	{r7, lr}
 8001c3e:	b086      	sub	sp, #24
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	460b      	mov	r3, r1
 8001c46:	807b      	strh	r3, [r7, #2]
  const uint8_t *font = u8g2->font;
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4c:	617b      	str	r3, [r7, #20]
  font += U8G2_FONT_DATA_STRUCT_SIZE;
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	3317      	adds	r3, #23
 8001c52:	617b      	str	r3, [r7, #20]

  
  if ( encoding <= 255 )
 8001c54:	887b      	ldrh	r3, [r7, #2]
 8001c56:	2bff      	cmp	r3, #255	; 0xff
 8001c58:	d82a      	bhi.n	8001cb0 <u8g2_font_get_glyph_data+0x74>
  {
    if ( encoding >= 'a' )
 8001c5a:	887b      	ldrh	r3, [r7, #2]
 8001c5c:	2b60      	cmp	r3, #96	; 0x60
 8001c5e:	d907      	bls.n	8001c70 <u8g2_font_get_glyph_data+0x34>
    {
      font += u8g2->font_info.start_pos_lower_a;
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
 8001c66:	461a      	mov	r2, r3
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	617b      	str	r3, [r7, #20]
 8001c6e:	e009      	b.n	8001c84 <u8g2_font_get_glyph_data+0x48>
    }
    else if ( encoding >= 'A' )
 8001c70:	887b      	ldrh	r3, [r7, #2]
 8001c72:	2b40      	cmp	r3, #64	; 0x40
 8001c74:	d906      	bls.n	8001c84 <u8g2_font_get_glyph_data+0x48>
    {
      font += u8g2->font_info.start_pos_upper_A;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f8b3 3086 	ldrh.w	r3, [r3, #134]	; 0x86
 8001c7c:	461a      	mov	r2, r3
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	4413      	add	r3, r2
 8001c82:	617b      	str	r3, [r7, #20]
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	3301      	adds	r3, #1
 8001c88:	781b      	ldrb	r3, [r3, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d04e      	beq.n	8001d2c <u8g2_font_get_glyph_data+0xf0>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
 8001c8e:	697b      	ldr	r3, [r7, #20]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b29b      	uxth	r3, r3
 8001c94:	887a      	ldrh	r2, [r7, #2]
 8001c96:	429a      	cmp	r2, r3
 8001c98:	d102      	bne.n	8001ca0 <u8g2_font_get_glyph_data+0x64>
      {
	return font+2;	/* skip encoding and glyph size */
 8001c9a:	697b      	ldr	r3, [r7, #20]
 8001c9c:	3302      	adds	r3, #2
 8001c9e:	e049      	b.n	8001d34 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 1 );
 8001ca0:	697b      	ldr	r3, [r7, #20]
 8001ca2:	3301      	adds	r3, #1
 8001ca4:	781b      	ldrb	r3, [r3, #0]
 8001ca6:	461a      	mov	r2, r3
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	4413      	add	r3, r2
 8001cac:	617b      	str	r3, [r7, #20]
      if ( u8x8_pgm_read( font + 1 ) == 0 )
 8001cae:	e7e9      	b.n	8001c84 <u8g2_font_get_glyph_data+0x48>
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f8b3 308a 	ldrh.w	r3, [r3, #138]	; 0x8a
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	697b      	ldr	r3, [r7, #20]
 8001cba:	4413      	add	r3, r2
 8001cbc:	617b      	str	r3, [r7, #20]
    unicode_lookup_table = font; 
 8001cbe:	697b      	ldr	r3, [r7, #20]
 8001cc0:	613b      	str	r3, [r7, #16]
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
 8001cc2:	2100      	movs	r1, #0
 8001cc4:	6938      	ldr	r0, [r7, #16]
 8001cc6:	f7ff fc3f 	bl	8001548 <u8g2_font_get_word>
 8001cca:	4603      	mov	r3, r0
 8001ccc:	461a      	mov	r2, r3
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
      e = u8g2_font_get_word(unicode_lookup_table, 2);
 8001cd4:	2102      	movs	r1, #2
 8001cd6:	6938      	ldr	r0, [r7, #16]
 8001cd8:	f7ff fc36 	bl	8001548 <u8g2_font_get_word>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	81fb      	strh	r3, [r7, #14]
      unicode_lookup_table+=4;
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	3304      	adds	r3, #4
 8001ce4:	613b      	str	r3, [r7, #16]
    } while( e < encoding );
 8001ce6:	89fa      	ldrh	r2, [r7, #14]
 8001ce8:	887b      	ldrh	r3, [r7, #2]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d3e9      	bcc.n	8001cc2 <u8g2_font_get_glyph_data+0x86>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
 8001cee:	697b      	ldr	r3, [r7, #20]
 8001cf0:	781b      	ldrb	r3, [r3, #0]
 8001cf2:	81fb      	strh	r3, [r7, #14]
      e <<= 8;
 8001cf4:	89fb      	ldrh	r3, [r7, #14]
 8001cf6:	021b      	lsls	r3, r3, #8
 8001cf8:	81fb      	strh	r3, [r7, #14]
      e |= u8x8_pgm_read( font + 1 );
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	b29a      	uxth	r2, r3
 8001d02:	89fb      	ldrh	r3, [r7, #14]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	81fb      	strh	r3, [r7, #14]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
 8001d08:	89fb      	ldrh	r3, [r7, #14]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d010      	beq.n	8001d30 <u8g2_font_get_glyph_data+0xf4>
	break;
  
      if ( e == encoding )
 8001d0e:	89fa      	ldrh	r2, [r7, #14]
 8001d10:	887b      	ldrh	r3, [r7, #2]
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d102      	bne.n	8001d1c <u8g2_font_get_glyph_data+0xe0>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	3303      	adds	r3, #3
 8001d1a:	e00b      	b.n	8001d34 <u8g2_font_get_glyph_data+0xf8>
      }
      font += u8x8_pgm_read( font + 2 );
 8001d1c:	697b      	ldr	r3, [r7, #20]
 8001d1e:	3302      	adds	r3, #2
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	4413      	add	r3, r2
 8001d28:	617b      	str	r3, [r7, #20]
      e = u8x8_pgm_read( font );
 8001d2a:	e7e0      	b.n	8001cee <u8g2_font_get_glyph_data+0xb2>
	break;
 8001d2c:	bf00      	nop
 8001d2e:	e000      	b.n	8001d32 <u8g2_font_get_glyph_data+0xf6>
	break;
 8001d30:	bf00      	nop
    }  
  }
#endif
  
  return NULL;
 8001d32:	2300      	movs	r3, #0
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}

08001d3c <u8g2_font_draw_glyph>:

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001d3c:	b580      	push	{r7, lr}
 8001d3e:	b086      	sub	sp, #24
 8001d40:	af00      	add	r7, sp, #0
 8001d42:	60f8      	str	r0, [r7, #12]
 8001d44:	4608      	mov	r0, r1
 8001d46:	4611      	mov	r1, r2
 8001d48:	461a      	mov	r2, r3
 8001d4a:	4603      	mov	r3, r0
 8001d4c:	817b      	strh	r3, [r7, #10]
 8001d4e:	460b      	mov	r3, r1
 8001d50:	813b      	strh	r3, [r7, #8]
 8001d52:	4613      	mov	r3, r2
 8001d54:	80fb      	strh	r3, [r7, #6]
  u8g2_uint_t dx = 0;
 8001d56:	2300      	movs	r3, #0
 8001d58:	82fb      	strh	r3, [r7, #22]
  u8g2->font_decode.target_x = x;
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	897a      	ldrh	r2, [r7, #10]
 8001d5e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  u8g2->font_decode.target_y = y;
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	893a      	ldrh	r2, [r7, #8]
 8001d66:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
 8001d6a:	88fb      	ldrh	r3, [r7, #6]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	68f8      	ldr	r0, [r7, #12]
 8001d70:	f7ff ff64 	bl	8001c3c <u8g2_font_get_glyph_data>
 8001d74:	6138      	str	r0, [r7, #16]
  if ( glyph_data != NULL )
 8001d76:	693b      	ldr	r3, [r7, #16]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d005      	beq.n	8001d88 <u8g2_font_draw_glyph+0x4c>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
 8001d7c:	6939      	ldr	r1, [r7, #16]
 8001d7e:	68f8      	ldr	r0, [r7, #12]
 8001d80:	f7ff fe4e 	bl	8001a20 <u8g2_font_decode_glyph>
 8001d84:	4603      	mov	r3, r0
 8001d86:	82fb      	strh	r3, [r7, #22]
  }
  return dx;
 8001d88:	8afb      	ldrh	r3, [r7, #22]
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3718      	adds	r7, #24
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}

08001d92 <u8g2_GetGlyphWidth>:
  return 0;
}

/* side effect: updates u8g2->font_decode and u8g2->glyph_x_offset */
int8_t u8g2_GetGlyphWidth(u8g2_t *u8g2, uint16_t requested_encoding)
{
 8001d92:	b580      	push	{r7, lr}
 8001d94:	b084      	sub	sp, #16
 8001d96:	af00      	add	r7, sp, #0
 8001d98:	6078      	str	r0, [r7, #4]
 8001d9a:	460b      	mov	r3, r1
 8001d9c:	807b      	strh	r3, [r7, #2]
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, requested_encoding);
 8001d9e:	887b      	ldrh	r3, [r7, #2]
 8001da0:	4619      	mov	r1, r3
 8001da2:	6878      	ldr	r0, [r7, #4]
 8001da4:	f7ff ff4a 	bl	8001c3c <u8g2_font_get_glyph_data>
 8001da8:	60f8      	str	r0, [r7, #12]
  if ( glyph_data == NULL )
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d101      	bne.n	8001db4 <u8g2_GetGlyphWidth+0x22>
    return 0; 
 8001db0:	2300      	movs	r3, #0
 8001db2:	e027      	b.n	8001e04 <u8g2_GetGlyphWidth+0x72>
  
  u8g2_font_setup_decode(u8g2, glyph_data);
 8001db4:	68f9      	ldr	r1, [r7, #12]
 8001db6:	6878      	ldr	r0, [r7, #4]
 8001db8:	f7ff fdfb 	bl	80019b2 <u8g2_font_setup_decode>
  u8g2->glyph_x_offset = u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_x);
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	f893 307a 	ldrb.w	r3, [r3, #122]	; 0x7a
 8001dc8:	4619      	mov	r1, r3
 8001dca:	4610      	mov	r0, r2
 8001dcc:	f7ff fcd0 	bl	8001770 <u8g2_font_decode_get_signed_bits>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	461a      	mov	r2, r3
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	f883 2090 	strb.w	r2, [r3, #144]	; 0x90
  u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_char_y);
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f893 307b 	ldrb.w	r3, [r3, #123]	; 0x7b
 8001de6:	4619      	mov	r1, r3
 8001de8:	4610      	mov	r0, r2
 8001dea:	f7ff fcc1 	bl	8001770 <u8g2_font_decode_get_signed_bits>
  
  /* glyph width is here: u8g2->font_decode.glyph_width */

  return u8g2_font_decode_get_signed_bits(&(u8g2->font_decode), u8g2->font_info.bits_per_delta_x);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	f103 0260 	add.w	r2, r3, #96	; 0x60
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	4610      	mov	r0, r2
 8001dfe:	f7ff fcb7 	bl	8001770 <u8g2_font_decode_get_signed_bits>
 8001e02:	4603      	mov	r3, r0
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3710      	adds	r7, #16
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bd80      	pop	{r7, pc}

08001e0c <u8g2_SetFontMode>:
    U8G2_FONT_MODE_SOLID
    U8G2_FONT_MODE_NONE
  This has been changed for the new font procedures  
*/
void u8g2_SetFontMode(u8g2_t *u8g2, uint8_t is_transparent)
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	b083      	sub	sp, #12
 8001e10:	af00      	add	r7, sp, #0
 8001e12:	6078      	str	r0, [r7, #4]
 8001e14:	460b      	mov	r3, r1
 8001e16:	70fb      	strb	r3, [r7, #3]
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	78fa      	ldrb	r2, [r7, #3]
 8001e1c:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <u8g2_DrawGlyph>:

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	b084      	sub	sp, #16
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	60f8      	str	r0, [r7, #12]
 8001e34:	4608      	mov	r0, r1
 8001e36:	4611      	mov	r1, r2
 8001e38:	461a      	mov	r2, r3
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	817b      	strh	r3, [r7, #10]
 8001e3e:	460b      	mov	r3, r1
 8001e40:	813b      	strh	r3, [r7, #8]
 8001e42:	4613      	mov	r3, r2
 8001e44:	80fb      	strh	r3, [r7, #6]
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001e4c:	2b03      	cmp	r3, #3
 8001e4e:	d833      	bhi.n	8001eb8 <u8g2_DrawGlyph+0x8c>
 8001e50:	a201      	add	r2, pc, #4	; (adr r2, 8001e58 <u8g2_DrawGlyph+0x2c>)
 8001e52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e56:	bf00      	nop
 8001e58:	08001e69 	.word	0x08001e69
 8001e5c:	08001e7d 	.word	0x08001e7d
 8001e60:	08001e91 	.word	0x08001e91
 8001e64:	08001ea5 	.word	0x08001ea5
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e6c:	68f8      	ldr	r0, [r7, #12]
 8001e6e:	4798      	blx	r3
 8001e70:	4603      	mov	r3, r0
 8001e72:	461a      	mov	r2, r3
 8001e74:	893b      	ldrh	r3, [r7, #8]
 8001e76:	4413      	add	r3, r2
 8001e78:	813b      	strh	r3, [r7, #8]
      break;
 8001e7a:	e01d      	b.n	8001eb8 <u8g2_DrawGlyph+0x8c>
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	4798      	blx	r3
 8001e84:	4603      	mov	r3, r0
 8001e86:	461a      	mov	r2, r3
 8001e88:	897b      	ldrh	r3, [r7, #10]
 8001e8a:	1a9b      	subs	r3, r3, r2
 8001e8c:	817b      	strh	r3, [r7, #10]
      break;
 8001e8e:	e013      	b.n	8001eb8 <u8g2_DrawGlyph+0x8c>
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	4798      	blx	r3
 8001e98:	4603      	mov	r3, r0
 8001e9a:	461a      	mov	r2, r3
 8001e9c:	893b      	ldrh	r3, [r7, #8]
 8001e9e:	1a9b      	subs	r3, r3, r2
 8001ea0:	813b      	strh	r3, [r7, #8]
      break;
 8001ea2:	e009      	b.n	8001eb8 <u8g2_DrawGlyph+0x8c>
    case 3:
      x += u8g2->font_calc_vref(u8g2);
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea8:	68f8      	ldr	r0, [r7, #12]
 8001eaa:	4798      	blx	r3
 8001eac:	4603      	mov	r3, r0
 8001eae:	461a      	mov	r2, r3
 8001eb0:	897b      	ldrh	r3, [r7, #10]
 8001eb2:	4413      	add	r3, r2
 8001eb4:	817b      	strh	r3, [r7, #10]
      break;
 8001eb6:	bf00      	nop
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	893a      	ldrh	r2, [r7, #8]
 8001ebc:	8979      	ldrh	r1, [r7, #10]
 8001ebe:	68f8      	ldr	r0, [r7, #12]
 8001ec0:	f7ff ff3c 	bl	8001d3c <u8g2_font_draw_glyph>
 8001ec4:	4603      	mov	r3, r0
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3710      	adds	r7, #16
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
 8001ece:	bf00      	nop

08001ed0 <u8g2_draw_string>:
  return u8g2_font_2x_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b086      	sub	sp, #24
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	607b      	str	r3, [r7, #4]
 8001eda:	460b      	mov	r3, r1
 8001edc:	817b      	strh	r3, [r7, #10]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	813b      	strh	r3, [r7, #8]
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	f000 fd59 	bl	800299a <u8x8_utf8_init>
  sum = 0;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	82fb      	strh	r3, [r7, #22]
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	685b      	ldr	r3, [r3, #4]
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	7812      	ldrb	r2, [r2, #0]
 8001ef4:	4611      	mov	r1, r2
 8001ef6:	68f8      	ldr	r0, [r7, #12]
 8001ef8:	4798      	blx	r3
 8001efa:	4603      	mov	r3, r0
 8001efc:	82bb      	strh	r3, [r7, #20]
    if ( e == 0x0ffff )
 8001efe:	8abb      	ldrh	r3, [r7, #20]
 8001f00:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001f04:	4293      	cmp	r3, r2
 8001f06:	d038      	beq.n	8001f7a <u8g2_draw_string+0xaa>
      break;
    str++;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	3301      	adds	r3, #1
 8001f0c:	607b      	str	r3, [r7, #4]
    if ( e != 0x0fffe )
 8001f0e:	8abb      	ldrh	r3, [r7, #20]
 8001f10:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001f14:	4293      	cmp	r3, r2
 8001f16:	d0e9      	beq.n	8001eec <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
 8001f18:	8abb      	ldrh	r3, [r7, #20]
 8001f1a:	893a      	ldrh	r2, [r7, #8]
 8001f1c:	8979      	ldrh	r1, [r7, #10]
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f7ff ff84 	bl	8001e2c <u8g2_DrawGlyph>
 8001f24:	4603      	mov	r3, r0
 8001f26:	827b      	strh	r3, [r7, #18]
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
 8001f28:	68fb      	ldr	r3, [r7, #12]
 8001f2a:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8001f2e:	2b03      	cmp	r3, #3
 8001f30:	d81e      	bhi.n	8001f70 <u8g2_draw_string+0xa0>
 8001f32:	a201      	add	r2, pc, #4	; (adr r2, 8001f38 <u8g2_draw_string+0x68>)
 8001f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001f38:	08001f49 	.word	0x08001f49
 8001f3c:	08001f53 	.word	0x08001f53
 8001f40:	08001f5d 	.word	0x08001f5d
 8001f44:	08001f67 	.word	0x08001f67
      {
	case 0:
	  x += delta;
 8001f48:	897a      	ldrh	r2, [r7, #10]
 8001f4a:	8a7b      	ldrh	r3, [r7, #18]
 8001f4c:	4413      	add	r3, r2
 8001f4e:	817b      	strh	r3, [r7, #10]
	  break;
 8001f50:	e00e      	b.n	8001f70 <u8g2_draw_string+0xa0>
	case 1:
	  y += delta;
 8001f52:	893a      	ldrh	r2, [r7, #8]
 8001f54:	8a7b      	ldrh	r3, [r7, #18]
 8001f56:	4413      	add	r3, r2
 8001f58:	813b      	strh	r3, [r7, #8]
	  break;
 8001f5a:	e009      	b.n	8001f70 <u8g2_draw_string+0xa0>
	case 2:
	  x -= delta;
 8001f5c:	897a      	ldrh	r2, [r7, #10]
 8001f5e:	8a7b      	ldrh	r3, [r7, #18]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	817b      	strh	r3, [r7, #10]
	  break;
 8001f64:	e004      	b.n	8001f70 <u8g2_draw_string+0xa0>
	case 3:
	  y -= delta;
 8001f66:	893a      	ldrh	r2, [r7, #8]
 8001f68:	8a7b      	ldrh	r3, [r7, #18]
 8001f6a:	1ad3      	subs	r3, r2, r3
 8001f6c:	813b      	strh	r3, [r7, #8]
	  break;
 8001f6e:	bf00      	nop

#else
      x += delta;
#endif

      sum += delta;    
 8001f70:	8afa      	ldrh	r2, [r7, #22]
 8001f72:	8a7b      	ldrh	r3, [r7, #18]
 8001f74:	4413      	add	r3, r2
 8001f76:	82fb      	strh	r3, [r7, #22]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8001f78:	e7b8      	b.n	8001eec <u8g2_draw_string+0x1c>
      break;
 8001f7a:	bf00      	nop
    }
  }
  return sum;
 8001f7c:	8afb      	ldrh	r3, [r7, #22]
}
 8001f7e:	4618      	mov	r0, r3
 8001f80:	3718      	adds	r7, #24
 8001f82:	46bd      	mov	sp, r7
 8001f84:	bd80      	pop	{r7, pc}
 8001f86:	bf00      	nop

08001f88 <u8g2_DrawStr>:
  }
  return sum;
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b084      	sub	sp, #16
 8001f8c:	af00      	add	r7, sp, #0
 8001f8e:	60f8      	str	r0, [r7, #12]
 8001f90:	607b      	str	r3, [r7, #4]
 8001f92:	460b      	mov	r3, r1
 8001f94:	817b      	strh	r3, [r7, #10]
 8001f96:	4613      	mov	r3, r2
 8001f98:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8001f9a:	68fb      	ldr	r3, [r7, #12]
 8001f9c:	4a06      	ldr	r2, [pc, #24]	; (8001fb8 <u8g2_DrawStr+0x30>)
 8001f9e:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001fa0:	893a      	ldrh	r2, [r7, #8]
 8001fa2:	8979      	ldrh	r1, [r7, #10]
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	68f8      	ldr	r0, [r7, #12]
 8001fa8:	f7ff ff92 	bl	8001ed0 <u8g2_draw_string>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	080029b7 	.word	0x080029b7

08001fbc <u8g2_DrawUTF8>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_DrawUTF8(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b084      	sub	sp, #16
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	607b      	str	r3, [r7, #4]
 8001fc6:	460b      	mov	r3, r1
 8001fc8:	817b      	strh	r3, [r7, #10]
 8001fca:	4613      	mov	r3, r2
 8001fcc:	813b      	strh	r3, [r7, #8]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	4a06      	ldr	r2, [pc, #24]	; (8001fec <u8g2_DrawUTF8+0x30>)
 8001fd2:	605a      	str	r2, [r3, #4]
  return u8g2_draw_string(u8g2, x, y, str);
 8001fd4:	893a      	ldrh	r2, [r7, #8]
 8001fd6:	8979      	ldrh	r1, [r7, #10]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68f8      	ldr	r0, [r7, #12]
 8001fdc:	f7ff ff78 	bl	8001ed0 <u8g2_draw_string>
 8001fe0:	4603      	mov	r3, r0
}
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	3710      	adds	r7, #16
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bd80      	pop	{r7, pc}
 8001fea:	bf00      	nop
 8001fec:	080029e5 	.word	0x080029e5

08001ff0 <u8g2_UpdateRefHeight>:
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  if ( u8g2->font == NULL )
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d05d      	beq.n	80020bc <u8g2_UpdateRefHeight+0xcc>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	f993 2081 	ldrsb.w	r2, [r3, #129]	; 0x81
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	f993 2082 	ldrsb.w	r2, [r3, #130]	; 0x82
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 800201e:	2b00      	cmp	r3, #0
 8002020:	d04d      	beq.n	80020be <u8g2_UpdateRefHeight+0xce>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	f893 308d 	ldrb.w	r3, [r3, #141]	; 0x8d
 8002028:	2b01      	cmp	r3, #1
 800202a:	d11c      	bne.n	8002066 <u8g2_UpdateRefHeight+0x76>
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	f993 208e 	ldrsb.w	r2, [r3, #142]	; 0x8e
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	f993 3083 	ldrsb.w	r3, [r3, #131]	; 0x83
 8002038:	429a      	cmp	r2, r3
 800203a:	da05      	bge.n	8002048 <u8g2_UpdateRefHeight+0x58>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f993 2083 	ldrsb.w	r2, [r3, #131]	; 0x83
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	f993 3084 	ldrsb.w	r3, [r3, #132]	; 0x84
 8002054:	429a      	cmp	r2, r3
 8002056:	dd32      	ble.n	80020be <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f993 2084 	ldrsb.w	r2, [r3, #132]	; 0x84
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 8002064:	e02b      	b.n	80020be <u8g2_UpdateRefHeight+0xce>
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	f993 308e 	ldrsb.w	r3, [r3, #142]	; 0x8e
 800206c:	461a      	mov	r2, r3
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002074:	4619      	mov	r1, r3
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 800207c:	440b      	add	r3, r1
 800207e:	429a      	cmp	r2, r3
 8002080:	da0d      	bge.n	800209e <u8g2_UpdateRefHeight+0xae>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	f993 307e 	ldrsb.w	r3, [r3, #126]	; 0x7e
 8002088:	b2da      	uxtb	r2, r3
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 8002090:	b2db      	uxtb	r3, r3
 8002092:	4413      	add	r3, r2
 8002094:	b2db      	uxtb	r3, r3
 8002096:	b25a      	sxtb	r2, r3
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f883 208e 	strb.w	r2, [r3, #142]	; 0x8e
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	f993 208f 	ldrsb.w	r2, [r3, #143]	; 0x8f
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	f993 3080 	ldrsb.w	r3, [r3, #128]	; 0x80
 80020aa:	429a      	cmp	r2, r3
 80020ac:	dd07      	ble.n	80020be <u8g2_UpdateRefHeight+0xce>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	f993 2080 	ldrsb.w	r2, [r3, #128]	; 0x80
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	f883 208f 	strb.w	r2, [r3, #143]	; 0x8f
 80020ba:	e000      	b.n	80020be <u8g2_UpdateRefHeight+0xce>
    return;
 80020bc:	bf00      	nop
  }  
}
 80020be:	370c      	adds	r7, #12
 80020c0:	46bd      	mov	sp, r7
 80020c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c6:	4770      	bx	lr

080020c8 <u8g2_font_calc_vref_font>:

/*===============================================*/
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
 80020c8:	b480      	push	{r7}
 80020ca:	b083      	sub	sp, #12
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	6078      	str	r0, [r7, #4]
  return 0;
 80020d0:	2300      	movs	r3, #0
}
 80020d2:	4618      	mov	r0, r3
 80020d4:	370c      	adds	r7, #12
 80020d6:	46bd      	mov	sp, r7
 80020d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020dc:	4770      	bx	lr
	...

080020e0 <u8g2_SetFontPosBaseline>:

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
 80020e0:	b480      	push	{r7}
 80020e2:	b083      	sub	sp, #12
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	4a04      	ldr	r2, [pc, #16]	; (80020fc <u8g2_SetFontPosBaseline+0x1c>)
 80020ec:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80020ee:	bf00      	nop
 80020f0:	370c      	adds	r7, #12
 80020f2:	46bd      	mov	sp, r7
 80020f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f8:	4770      	bx	lr
 80020fa:	bf00      	nop
 80020fc:	080020c9 	.word	0x080020c9

08002100 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  if ( u8g2->font != font )
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210e:	683a      	ldr	r2, [r7, #0]
 8002110:	429a      	cmp	r2, r3
 8002112:	d00b      	beq.n	800212c <u8g2_SetFont+0x2c>
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	683a      	ldr	r2, [r7, #0]
 8002118:	659a      	str	r2, [r3, #88]	; 0x58
    u8g2_read_font_info(&(u8g2->font_info), font);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	3374      	adds	r3, #116	; 0x74
 800211e:	6839      	ldr	r1, [r7, #0]
 8002120:	4618      	mov	r0, r3
 8002122:	f7ff fa31 	bl	8001588 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f7ff ff62 	bl	8001ff0 <u8g2_UpdateRefHeight>
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
 800212c:	bf00      	nop
 800212e:	3708      	adds	r7, #8
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <u8g2_string_width>:


/* string calculation is stilll not 100% perfect as it addes the initial string offset to the overall size */
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_string_width(u8g2_t *u8g2, const char *str)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  uint16_t e;
  u8g2_uint_t  w, dx;
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
  int8_t initial_x_offset = -64;
 800213e:	23c0      	movs	r3, #192	; 0xc0
 8002140:	72fb      	strb	r3, [r7, #11]
#endif 
  
  u8g2->font_decode.glyph_width = 0;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2200      	movs	r2, #0
 8002146:	f883 206a 	strb.w	r2, [r3, #106]	; 0x6a
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fc25 	bl	800299a <u8x8_utf8_init>
  
  /* reset the total width to zero, this will be expanded during calculation */
  w = 0;
 8002150:	2300      	movs	r3, #0
 8002152:	81fb      	strh	r3, [r7, #14]
  dx = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	81bb      	strh	r3, [r7, #12]

  // printf("str=<%s>\n", str);
	
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	685b      	ldr	r3, [r3, #4]
 800215c:	683a      	ldr	r2, [r7, #0]
 800215e:	7812      	ldrb	r2, [r2, #0]
 8002160:	4611      	mov	r1, r2
 8002162:	6878      	ldr	r0, [r7, #4]
 8002164:	4798      	blx	r3
 8002166:	4603      	mov	r3, r0
 8002168:	813b      	strh	r3, [r7, #8]
    if ( e == 0x0ffff )
 800216a:	893b      	ldrh	r3, [r7, #8]
 800216c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8002170:	4293      	cmp	r3, r2
 8002172:	d01c      	beq.n	80021ae <u8g2_string_width+0x7a>
      break;
    str++;
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	3301      	adds	r3, #1
 8002178:	603b      	str	r3, [r7, #0]
    if ( e != 0x0fffe )
 800217a:	893b      	ldrh	r3, [r7, #8]
 800217c:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8002180:	4293      	cmp	r3, r2
 8002182:	d0e9      	beq.n	8002158 <u8g2_string_width+0x24>
    {
      dx = u8g2_GetGlyphWidth(u8g2, e);		/* delta x value of the glyph */
 8002184:	893b      	ldrh	r3, [r7, #8]
 8002186:	4619      	mov	r1, r3
 8002188:	6878      	ldr	r0, [r7, #4]
 800218a:	f7ff fe02 	bl	8001d92 <u8g2_GetGlyphWidth>
 800218e:	4603      	mov	r3, r0
 8002190:	81bb      	strh	r3, [r7, #12]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
      if ( initial_x_offset == -64 )
 8002192:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8002196:	f113 0f40 	cmn.w	r3, #64	; 0x40
 800219a:	d103      	bne.n	80021a4 <u8g2_string_width+0x70>
        initial_x_offset = u8g2->glyph_x_offset;
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	f893 3090 	ldrb.w	r3, [r3, #144]	; 0x90
 80021a2:	72fb      	strb	r3, [r7, #11]
#endif 
      //printf("'%c' x=%d dx=%d w=%d io=%d ", e, u8g2->glyph_x_offset, dx, u8g2->font_decode.glyph_width, initial_x_offset);
      w += dx;
 80021a4:	89fa      	ldrh	r2, [r7, #14]
 80021a6:	89bb      	ldrh	r3, [r7, #12]
 80021a8:	4413      	add	r3, r2
 80021aa:	81fb      	strh	r3, [r7, #14]
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
 80021ac:	e7d4      	b.n	8002158 <u8g2_string_width+0x24>
      break;
 80021ae:	bf00      	nop
    }
  }
  //printf("\n");
  
  /* adjust the last glyph, check for issue #16: do not adjust if width is 0 */
  if ( u8g2->font_decode.glyph_width != 0 )
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d01b      	beq.n	80021f2 <u8g2_string_width+0xbe>
  {
    //printf("string width adjust dx=%d glyph_width=%d x-offset=%d\n", dx, u8g2->font_decode.glyph_width, u8g2->glyph_x_offset);
    w -= dx;
 80021ba:	89fa      	ldrh	r2, [r7, #14]
 80021bc:	89bb      	ldrh	r3, [r7, #12]
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	81fb      	strh	r3, [r7, #14]
    w += u8g2->font_decode.glyph_width;  /* the real pixel width of the glyph, sideeffect of GetGlyphWidth */
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	f993 306a 	ldrsb.w	r3, [r3, #106]	; 0x6a
 80021c8:	b29a      	uxth	r2, r3
 80021ca:	89fb      	ldrh	r3, [r7, #14]
 80021cc:	4413      	add	r3, r2
 80021ce:	81fb      	strh	r3, [r7, #14]
    /* issue #46: we have to add the x offset also */
    w += u8g2->glyph_x_offset;	/* this value is set as a side effect of u8g2_GetGlyphWidth() */
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	f993 3090 	ldrsb.w	r3, [r3, #144]	; 0x90
 80021d6:	b29a      	uxth	r2, r3
 80021d8:	89fb      	ldrh	r3, [r7, #14]
 80021da:	4413      	add	r3, r2
 80021dc:	81fb      	strh	r3, [r7, #14]
#ifdef U8G2_BALANCED_STR_WIDTH_CALCULATION
    /* https://github.com/olikraus/u8g2/issues/1561 */
    if ( initial_x_offset > 0 )
 80021de:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	dd05      	ble.n	80021f2 <u8g2_string_width+0xbe>
      w+=initial_x_offset;
 80021e6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80021ea:	b29a      	uxth	r2, r3
 80021ec:	89fb      	ldrh	r3, [r7, #14]
 80021ee:	4413      	add	r3, r2
 80021f0:	81fb      	strh	r3, [r7, #14]
#endif 
  }
  // printf("w=%d \n", w);
  
  return w;  
 80021f2:	89fb      	ldrh	r3, [r7, #14]
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	3710      	adds	r7, #16
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}

080021fc <u8g2_GetStrWidth>:




u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b082      	sub	sp, #8
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_ascii_next;
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	4a05      	ldr	r2, [pc, #20]	; (8002220 <u8g2_GetStrWidth+0x24>)
 800220a:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, s);
 800220c:	6839      	ldr	r1, [r7, #0]
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f7ff ff90 	bl	8002134 <u8g2_string_width>
 8002214:	4603      	mov	r3, r0
}
 8002216:	4618      	mov	r0, r3
 8002218:	3708      	adds	r7, #8
 800221a:	46bd      	mov	sp, r7
 800221c:	bd80      	pop	{r7, pc}
 800221e:	bf00      	nop
 8002220:	080029b7 	.word	0x080029b7

08002224 <u8g2_GetUTF8Width>:
21 	U+10000 	U+1FFFFF 	4 		11110xxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
26 	U+200000 	U+3FFFFFF 	5 		111110xx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx
31 	U+4000000 	U+7FFFFFFF 	6 		1111110x 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx 	10xxxxxx  
*/
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	b082      	sub	sp, #8
 8002228:	af00      	add	r7, sp, #0
 800222a:	6078      	str	r0, [r7, #4]
 800222c:	6039      	str	r1, [r7, #0]
  u8g2->u8x8.next_cb = u8x8_utf8_next;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	4a05      	ldr	r2, [pc, #20]	; (8002248 <u8g2_GetUTF8Width+0x24>)
 8002232:	605a      	str	r2, [r3, #4]
  return u8g2_string_width(u8g2, str);
 8002234:	6839      	ldr	r1, [r7, #0]
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff ff7c 	bl	8002134 <u8g2_string_width>
 800223c:	4603      	mov	r3, r0
}
 800223e:	4618      	mov	r0, r3
 8002240:	3708      	adds	r7, #8
 8002242:	46bd      	mov	sp, r7
 8002244:	bd80      	pop	{r7, pc}
 8002246:	bf00      	nop
 8002248:	080029e5 	.word	0x080029e5

0800224c <u8g2_clip_intersection2>:
  will return 0 if there is no intersection and if a > b

*/

static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
 800224c:	b480      	push	{r7}
 800224e:	b087      	sub	sp, #28
 8002250:	af00      	add	r7, sp, #0
 8002252:	60f8      	str	r0, [r7, #12]
 8002254:	60b9      	str	r1, [r7, #8]
 8002256:	4611      	mov	r1, r2
 8002258:	461a      	mov	r2, r3
 800225a:	460b      	mov	r3, r1
 800225c:	80fb      	strh	r3, [r7, #6]
 800225e:	4613      	mov	r3, r2
 8002260:	80bb      	strh	r3, [r7, #4]
  u8g2_uint_t a = *ap;
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	881b      	ldrh	r3, [r3, #0]
 8002266:	82fb      	strh	r3, [r7, #22]
  u8g2_uint_t b;
  b  = a;
 8002268:	8afb      	ldrh	r3, [r7, #22]
 800226a:	82bb      	strh	r3, [r7, #20]
  b += *len;
 800226c:	68bb      	ldr	r3, [r7, #8]
 800226e:	881a      	ldrh	r2, [r3, #0]
 8002270:	8abb      	ldrh	r3, [r7, #20]
 8002272:	4413      	add	r3, r2
 8002274:	82bb      	strh	r3, [r7, #20]
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
 8002276:	8afa      	ldrh	r2, [r7, #22]
 8002278:	8abb      	ldrh	r3, [r7, #20]
 800227a:	429a      	cmp	r2, r3
 800227c:	d90b      	bls.n	8002296 <u8g2_clip_intersection2+0x4a>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
 800227e:	8afa      	ldrh	r2, [r7, #22]
 8002280:	88bb      	ldrh	r3, [r7, #4]
 8002282:	429a      	cmp	r2, r3
 8002284:	d205      	bcs.n	8002292 <u8g2_clip_intersection2+0x46>
    {
      b = d;
 8002286:	88bb      	ldrh	r3, [r7, #4]
 8002288:	82bb      	strh	r3, [r7, #20]
      b--;
 800228a:	8abb      	ldrh	r3, [r7, #20]
 800228c:	3b01      	subs	r3, #1
 800228e:	82bb      	strh	r3, [r7, #20]
 8002290:	e001      	b.n	8002296 <u8g2_clip_intersection2+0x4a>
    }
    else
    {
      a = c;
 8002292:	88fb      	ldrh	r3, [r7, #6]
 8002294:	82fb      	strh	r3, [r7, #22]
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
 8002296:	8afa      	ldrh	r2, [r7, #22]
 8002298:	88bb      	ldrh	r3, [r7, #4]
 800229a:	429a      	cmp	r2, r3
 800229c:	d301      	bcc.n	80022a2 <u8g2_clip_intersection2+0x56>
    return 0;
 800229e:	2300      	movs	r3, #0
 80022a0:	e01c      	b.n	80022dc <u8g2_clip_intersection2+0x90>
  if ( b <= c )
 80022a2:	8aba      	ldrh	r2, [r7, #20]
 80022a4:	88fb      	ldrh	r3, [r7, #6]
 80022a6:	429a      	cmp	r2, r3
 80022a8:	d801      	bhi.n	80022ae <u8g2_clip_intersection2+0x62>
    return 0;
 80022aa:	2300      	movs	r3, #0
 80022ac:	e016      	b.n	80022dc <u8g2_clip_intersection2+0x90>
  if ( a < c )		
 80022ae:	8afa      	ldrh	r2, [r7, #22]
 80022b0:	88fb      	ldrh	r3, [r7, #6]
 80022b2:	429a      	cmp	r2, r3
 80022b4:	d201      	bcs.n	80022ba <u8g2_clip_intersection2+0x6e>
    a = c;
 80022b6:	88fb      	ldrh	r3, [r7, #6]
 80022b8:	82fb      	strh	r3, [r7, #22]
  if ( b > d )
 80022ba:	8aba      	ldrh	r2, [r7, #20]
 80022bc:	88bb      	ldrh	r3, [r7, #4]
 80022be:	429a      	cmp	r2, r3
 80022c0:	d901      	bls.n	80022c6 <u8g2_clip_intersection2+0x7a>
    b = d;
 80022c2:	88bb      	ldrh	r3, [r7, #4]
 80022c4:	82bb      	strh	r3, [r7, #20]
  
  *ap = a;
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	8afa      	ldrh	r2, [r7, #22]
 80022ca:	801a      	strh	r2, [r3, #0]
  b -= a;
 80022cc:	8aba      	ldrh	r2, [r7, #20]
 80022ce:	8afb      	ldrh	r3, [r7, #22]
 80022d0:	1ad3      	subs	r3, r2, r3
 80022d2:	82bb      	strh	r3, [r7, #20]
  *len = b;
 80022d4:	68bb      	ldr	r3, [r7, #8]
 80022d6:	8aba      	ldrh	r2, [r7, #20]
 80022d8:	801a      	strh	r2, [r3, #0]
  return 1;
 80022da:	2301      	movs	r3, #1
}
 80022dc:	4618      	mov	r0, r3
 80022de:	371c      	adds	r7, #28
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 80022e8:	b590      	push	{r4, r7, lr}
 80022ea:	b087      	sub	sp, #28
 80022ec:	af02      	add	r7, sp, #8
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	4608      	mov	r0, r1
 80022f2:	4611      	mov	r1, r2
 80022f4:	461a      	mov	r2, r3
 80022f6:	4603      	mov	r3, r0
 80022f8:	817b      	strh	r3, [r7, #10]
 80022fa:	460b      	mov	r3, r1
 80022fc:	813b      	strh	r3, [r7, #8]
 80022fe:	4613      	mov	r3, r2
 8002300:	80fb      	strh	r3, [r7, #6]

  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002306:	893a      	ldrh	r2, [r7, #8]
 8002308:	1ad3      	subs	r3, r2, r3
 800230a:	813b      	strh	r3, [r7, #8]
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	6adc      	ldr	r4, [r3, #44]	; 0x2c
 8002310:	88f8      	ldrh	r0, [r7, #6]
 8002312:	893a      	ldrh	r2, [r7, #8]
 8002314:	8979      	ldrh	r1, [r7, #10]
 8002316:	f897 3020 	ldrb.w	r3, [r7, #32]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	4603      	mov	r3, r0
 800231e:	68f8      	ldr	r0, [r7, #12]
 8002320:	47a0      	blx	r4
}
 8002322:	bf00      	nop
 8002324:	3714      	adds	r7, #20
 8002326:	46bd      	mov	sp, r7
 8002328:	bd90      	pop	{r4, r7, pc}

0800232a <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800232a:	b590      	push	{r4, r7, lr}
 800232c:	b087      	sub	sp, #28
 800232e:	af02      	add	r7, sp, #8
 8002330:	60f8      	str	r0, [r7, #12]
 8002332:	4608      	mov	r0, r1
 8002334:	4611      	mov	r1, r2
 8002336:	461a      	mov	r2, r3
 8002338:	4603      	mov	r3, r0
 800233a:	817b      	strh	r3, [r7, #10]
 800233c:	460b      	mov	r3, r1
 800233e:	813b      	strh	r3, [r7, #8]
 8002340:	4613      	mov	r3, r2
 8002342:	80fb      	strh	r3, [r7, #6]
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	f893 308c 	ldrb.w	r3, [r3, #140]	; 0x8c
 800234a:	2b00      	cmp	r3, #0
 800234c:	d075      	beq.n	800243a <u8g2_DrawHVLine+0x110>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
 800234e:	88fb      	ldrh	r3, [r7, #6]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d072      	beq.n	800243a <u8g2_DrawHVLine+0x110>
    {
    
      /* convert to two directions */    
      if ( len > 1 )
 8002354:	88fb      	ldrh	r3, [r7, #6]
 8002356:	2b01      	cmp	r3, #1
 8002358:	d91a      	bls.n	8002390 <u8g2_DrawHVLine+0x66>
      {
	if ( dir == 2 )
 800235a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800235e:	2b02      	cmp	r3, #2
 8002360:	d109      	bne.n	8002376 <u8g2_DrawHVLine+0x4c>
	{
	  x -= len;
 8002362:	897a      	ldrh	r2, [r7, #10]
 8002364:	88fb      	ldrh	r3, [r7, #6]
 8002366:	1ad3      	subs	r3, r2, r3
 8002368:	b29b      	uxth	r3, r3
 800236a:	817b      	strh	r3, [r7, #10]
	  x++;
 800236c:	897b      	ldrh	r3, [r7, #10]
 800236e:	3301      	adds	r3, #1
 8002370:	b29b      	uxth	r3, r3
 8002372:	817b      	strh	r3, [r7, #10]
 8002374:	e00c      	b.n	8002390 <u8g2_DrawHVLine+0x66>
	}
	else if ( dir == 3 )
 8002376:	f897 3020 	ldrb.w	r3, [r7, #32]
 800237a:	2b03      	cmp	r3, #3
 800237c:	d108      	bne.n	8002390 <u8g2_DrawHVLine+0x66>
	{
	  y -= len;
 800237e:	893a      	ldrh	r2, [r7, #8]
 8002380:	88fb      	ldrh	r3, [r7, #6]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	b29b      	uxth	r3, r3
 8002386:	813b      	strh	r3, [r7, #8]
	  y++;
 8002388:	893b      	ldrh	r3, [r7, #8]
 800238a:	3301      	adds	r3, #1
 800238c:	b29b      	uxth	r3, r3
 800238e:	813b      	strh	r3, [r7, #8]
	}
      }
      dir &= 1;  
 8002390:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002394:	f003 0301 	and.w	r3, r3, #1
 8002398:	f887 3020 	strb.w	r3, [r7, #32]
      
      /* clip against the user window */
      if ( dir == 0 )
 800239c:	f897 3020 	ldrb.w	r3, [r7, #32]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d11a      	bne.n	80023da <u8g2_DrawHVLine+0xb0>
      {
	if ( y < u8g2->user_y0 )
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80023aa:	893b      	ldrh	r3, [r7, #8]
 80023ac:	429a      	cmp	r2, r3
 80023ae:	d83b      	bhi.n	8002428 <u8g2_DrawHVLine+0xfe>
	  return;
	if ( y >= u8g2->user_y1 )
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80023b6:	893b      	ldrh	r3, [r7, #8]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	d937      	bls.n	800242c <u8g2_DrawHVLine+0x102>
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80023c8:	1db9      	adds	r1, r7, #6
 80023ca:	f107 000a 	add.w	r0, r7, #10
 80023ce:	f7ff ff3d 	bl	800224c <u8g2_clip_intersection2>
 80023d2:	4603      	mov	r3, r0
 80023d4:	2b00      	cmp	r3, #0
 80023d6:	d11a      	bne.n	800240e <u8g2_DrawHVLine+0xe4>
	  return;
 80023d8:	e02f      	b.n	800243a <u8g2_DrawHVLine+0x110>
      }
      else
      {
	if ( x < u8g2->user_x0 )
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80023e0:	897b      	ldrh	r3, [r7, #10]
 80023e2:	429a      	cmp	r2, r3
 80023e4:	d824      	bhi.n	8002430 <u8g2_DrawHVLine+0x106>
	  return;
	if ( x >= u8g2->user_x1 )
 80023e6:	68fb      	ldr	r3, [r7, #12]
 80023e8:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80023ec:	897b      	ldrh	r3, [r7, #10]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d920      	bls.n	8002434 <u8g2_DrawHVLine+0x10a>
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	f8b3 304e 	ldrh.w	r3, [r3, #78]	; 0x4e
 80023fe:	1db9      	adds	r1, r7, #6
 8002400:	f107 0008 	add.w	r0, r7, #8
 8002404:	f7ff ff22 	bl	800224c <u8g2_clip_intersection2>
 8002408:	4603      	mov	r3, r0
 800240a:	2b00      	cmp	r3, #0
 800240c:	d014      	beq.n	8002438 <u8g2_DrawHVLine+0x10e>
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002412:	689c      	ldr	r4, [r3, #8]
 8002414:	8979      	ldrh	r1, [r7, #10]
 8002416:	893a      	ldrh	r2, [r7, #8]
 8002418:	88f8      	ldrh	r0, [r7, #6]
 800241a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800241e:	9300      	str	r3, [sp, #0]
 8002420:	4603      	mov	r3, r0
 8002422:	68f8      	ldr	r0, [r7, #12]
 8002424:	47a0      	blx	r4
 8002426:	e008      	b.n	800243a <u8g2_DrawHVLine+0x110>
	  return;
 8002428:	bf00      	nop
 800242a:	e006      	b.n	800243a <u8g2_DrawHVLine+0x110>
	  return;
 800242c:	bf00      	nop
 800242e:	e004      	b.n	800243a <u8g2_DrawHVLine+0x110>
	  return;
 8002430:	bf00      	nop
 8002432:	e002      	b.n	800243a <u8g2_DrawHVLine+0x110>
	  return;
 8002434:	bf00      	nop
 8002436:	e000      	b.n	800243a <u8g2_DrawHVLine+0x110>
	  return;
 8002438:	bf00      	nop
    }
}
 800243a:	3714      	adds	r7, #20
 800243c:	46bd      	mov	sp, r7
 800243e:	bd90      	pop	{r4, r7, pc}

08002440 <u8g2_DrawHLine>:

void u8g2_DrawHLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af02      	add	r7, sp, #8
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	4608      	mov	r0, r1
 800244a:	4611      	mov	r1, r2
 800244c:	461a      	mov	r2, r3
 800244e:	4603      	mov	r3, r0
 8002450:	817b      	strh	r3, [r7, #10]
 8002452:	460b      	mov	r3, r1
 8002454:	813b      	strh	r3, [r7, #8]
 8002456:	4613      	mov	r3, r2
 8002458:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+len, y+1) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 0);
 800245a:	88fb      	ldrh	r3, [r7, #6]
 800245c:	893a      	ldrh	r2, [r7, #8]
 800245e:	8979      	ldrh	r1, [r7, #10]
 8002460:	2000      	movs	r0, #0
 8002462:	9000      	str	r0, [sp, #0]
 8002464:	68f8      	ldr	r0, [r7, #12]
 8002466:	f7ff ff60 	bl	800232a <u8g2_DrawHVLine>
}
 800246a:	bf00      	nop
 800246c:	3710      	adds	r7, #16
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <u8g2_DrawVLine>:

void u8g2_DrawVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b086      	sub	sp, #24
 8002476:	af02      	add	r7, sp, #8
 8002478:	60f8      	str	r0, [r7, #12]
 800247a:	4608      	mov	r0, r1
 800247c:	4611      	mov	r1, r2
 800247e:	461a      	mov	r2, r3
 8002480:	4603      	mov	r3, r0
 8002482:	817b      	strh	r3, [r7, #10]
 8002484:	460b      	mov	r3, r1
 8002486:	813b      	strh	r3, [r7, #8]
 8002488:	4613      	mov	r3, r2
 800248a:	80fb      	strh	r3, [r7, #6]
// #ifdef U8G2_WITH_INTERSECTION
//   if ( u8g2_IsIntersection(u8g2, x, y, x+1, y+len) == 0 ) 
//     return;
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
 800248c:	88fb      	ldrh	r3, [r7, #6]
 800248e:	893a      	ldrh	r2, [r7, #8]
 8002490:	8979      	ldrh	r1, [r7, #10]
 8002492:	2001      	movs	r0, #1
 8002494:	9000      	str	r0, [sp, #0]
 8002496:	68f8      	ldr	r0, [r7, #12]
 8002498:	f7ff ff47 	bl	800232a <u8g2_DrawHVLine>
}
 800249c:	bf00      	nop
 800249e:	3710      	adds	r7, #16
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <u8g2_SetDrawColor>:

  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b083      	sub	sp, #12
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
 80024ac:	460b      	mov	r3, r1
 80024ae:	70fb      	strb	r3, [r7, #3]
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	78fa      	ldrb	r2, [r7, #3]
 80024b4:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  if ( color >= 3 )
 80024b8:	78fb      	ldrb	r3, [r7, #3]
 80024ba:	2b02      	cmp	r3, #2
 80024bc:	d903      	bls.n	80024c6 <u8g2_SetDrawColor+0x22>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	2201      	movs	r2, #1
 80024c2:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
}
 80024c6:	bf00      	nop
 80024c8:	370c      	adds	r7, #12
 80024ca:	46bd      	mov	sp, r7
 80024cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d0:	4770      	bx	lr

080024d2 <u8g2_is_intersection_decision_tree>:
  version with asymetric boundaries.
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
 80024d2:	b490      	push	{r4, r7}
 80024d4:	b082      	sub	sp, #8
 80024d6:	af00      	add	r7, sp, #0
 80024d8:	4604      	mov	r4, r0
 80024da:	4608      	mov	r0, r1
 80024dc:	4611      	mov	r1, r2
 80024de:	461a      	mov	r2, r3
 80024e0:	4623      	mov	r3, r4
 80024e2:	80fb      	strh	r3, [r7, #6]
 80024e4:	4603      	mov	r3, r0
 80024e6:	80bb      	strh	r3, [r7, #4]
 80024e8:	460b      	mov	r3, r1
 80024ea:	807b      	strh	r3, [r7, #2]
 80024ec:	4613      	mov	r3, r2
 80024ee:	803b      	strh	r3, [r7, #0]
  if ( v0 < a1 )		// v0 <= a1
 80024f0:	887a      	ldrh	r2, [r7, #2]
 80024f2:	88bb      	ldrh	r3, [r7, #4]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d20d      	bcs.n	8002514 <u8g2_is_intersection_decision_tree+0x42>
  {
    if ( v1 > a0 )	// v1 >= a0
 80024f8:	883a      	ldrh	r2, [r7, #0]
 80024fa:	88fb      	ldrh	r3, [r7, #6]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d901      	bls.n	8002504 <u8g2_is_intersection_decision_tree+0x32>
    {
      return 1;
 8002500:	2301      	movs	r3, #1
 8002502:	e014      	b.n	800252e <u8g2_is_intersection_decision_tree+0x5c>
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
 8002504:	887a      	ldrh	r2, [r7, #2]
 8002506:	883b      	ldrh	r3, [r7, #0]
 8002508:	429a      	cmp	r2, r3
 800250a:	d901      	bls.n	8002510 <u8g2_is_intersection_decision_tree+0x3e>
      {
	return 1;
 800250c:	2301      	movs	r3, #1
 800250e:	e00e      	b.n	800252e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002510:	2300      	movs	r3, #0
 8002512:	e00c      	b.n	800252e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
 8002514:	883a      	ldrh	r2, [r7, #0]
 8002516:	88fb      	ldrh	r3, [r7, #6]
 8002518:	429a      	cmp	r2, r3
 800251a:	d907      	bls.n	800252c <u8g2_is_intersection_decision_tree+0x5a>
    {
      if ( v0 > v1 )	// v0 > v1
 800251c:	887a      	ldrh	r2, [r7, #2]
 800251e:	883b      	ldrh	r3, [r7, #0]
 8002520:	429a      	cmp	r2, r3
 8002522:	d901      	bls.n	8002528 <u8g2_is_intersection_decision_tree+0x56>
      {
	return 1;
 8002524:	2301      	movs	r3, #1
 8002526:	e002      	b.n	800252e <u8g2_is_intersection_decision_tree+0x5c>
      }
      else
      {
	return 0;
 8002528:	2300      	movs	r3, #0
 800252a:	e000      	b.n	800252e <u8g2_is_intersection_decision_tree+0x5c>
      }
    }
    else
    {
      return 0;
 800252c:	2300      	movs	r3, #0
    }
  }
}
 800252e:	4618      	mov	r0, r3
 8002530:	3708      	adds	r7, #8
 8002532:	46bd      	mov	sp, r7
 8002534:	bc90      	pop	{r4, r7}
 8002536:	4770      	bx	lr

08002538 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b084      	sub	sp, #16
 800253c:	af00      	add	r7, sp, #0
 800253e:	60f8      	str	r0, [r7, #12]
 8002540:	4608      	mov	r0, r1
 8002542:	4611      	mov	r1, r2
 8002544:	461a      	mov	r2, r3
 8002546:	4603      	mov	r3, r0
 8002548:	817b      	strh	r3, [r7, #10]
 800254a:	460b      	mov	r3, r1
 800254c:	813b      	strh	r3, [r7, #8]
 800254e:	4613      	mov	r3, r2
 8002550:	80fb      	strh	r3, [r7, #6]
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	f8b3 004c 	ldrh.w	r0, [r3, #76]	; 0x4c
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	f8b3 104e 	ldrh.w	r1, [r3, #78]	; 0x4e
 800255e:	8b3b      	ldrh	r3, [r7, #24]
 8002560:	893a      	ldrh	r2, [r7, #8]
 8002562:	f7ff ffb6 	bl	80024d2 <u8g2_is_intersection_decision_tree>
 8002566:	4603      	mov	r3, r0
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <u8g2_IsIntersection+0x38>
    return 0; 
 800256c:	2300      	movs	r3, #0
 800256e:	e00a      	b.n	8002586 <u8g2_IsIntersection+0x4e>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	f8b3 0048 	ldrh.w	r0, [r3, #72]	; 0x48
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f8b3 104a 	ldrh.w	r1, [r3, #74]	; 0x4a
 800257c:	88fb      	ldrh	r3, [r7, #6]
 800257e:	897a      	ldrh	r2, [r7, #10]
 8002580:	f7ff ffa7 	bl	80024d2 <u8g2_is_intersection_decision_tree>
 8002584:	4603      	mov	r3, r0
}
 8002586:	4618      	mov	r0, r3
 8002588:	3710      	adds	r7, #16
 800258a:	46bd      	mov	sp, r7
 800258c:	bd80      	pop	{r7, pc}

0800258e <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 800258e:	b480      	push	{r7}
 8002590:	b089      	sub	sp, #36	; 0x24
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	4608      	mov	r0, r1
 8002598:	4611      	mov	r1, r2
 800259a:	461a      	mov	r2, r3
 800259c:	4603      	mov	r3, r0
 800259e:	817b      	strh	r3, [r7, #10]
 80025a0:	460b      	mov	r3, r1
 80025a2:	813b      	strh	r3, [r7, #8]
 80025a4:	4613      	mov	r3, r2
 80025a6:	80fb      	strh	r3, [r7, #6]
  //assert(x < u8g2_GetU8x8(u8g2)->display_info->tile_width*8);
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
 80025a8:	893b      	ldrh	r3, [r7, #8]
 80025aa:	76fb      	strb	r3, [r7, #27]
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
 80025ac:	7efb      	ldrb	r3, [r7, #27]
 80025ae:	f003 0307 	and.w	r3, r3, #7
 80025b2:	76fb      	strb	r3, [r7, #27]
  mask = 1;
 80025b4:	2301      	movs	r3, #1
 80025b6:	763b      	strb	r3, [r7, #24]
  mask <<= bit_pos;
 80025b8:	7e3a      	ldrb	r2, [r7, #24]
 80025ba:	7efb      	ldrb	r3, [r7, #27]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	763b      	strb	r3, [r7, #24]

  or_mask = 0;
 80025c2:	2300      	movs	r3, #0
 80025c4:	76bb      	strb	r3, [r7, #26]
  xor_mask = 0;
 80025c6:	2300      	movs	r3, #0
 80025c8:	767b      	strb	r3, [r7, #25]
  if ( u8g2->draw_color <= 1 )
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80025d0:	2b01      	cmp	r3, #1
 80025d2:	d801      	bhi.n	80025d8 <u8g2_ll_hvline_vertical_top_lsb+0x4a>
    or_mask  = mask;
 80025d4:	7e3b      	ldrb	r3, [r7, #24]
 80025d6:	76bb      	strb	r3, [r7, #26]
  if ( u8g2->draw_color != 1 )
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d001      	beq.n	80025e6 <u8g2_ll_hvline_vertical_top_lsb+0x58>
    xor_mask = mask;
 80025e2:	7e3b      	ldrb	r3, [r7, #24]
 80025e4:	767b      	strb	r3, [r7, #25]


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
 80025e6:	893b      	ldrh	r3, [r7, #8]
 80025e8:	82fb      	strh	r3, [r7, #22]
  offset &= ~7;
 80025ea:	8afb      	ldrh	r3, [r7, #22]
 80025ec:	f023 0307 	bic.w	r3, r3, #7
 80025f0:	82fb      	strh	r3, [r7, #22]
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	7c1b      	ldrb	r3, [r3, #16]
 80025f8:	b29b      	uxth	r3, r3
 80025fa:	8afa      	ldrh	r2, [r7, #22]
 80025fc:	fb12 f303 	smulbb	r3, r2, r3
 8002600:	82fb      	strh	r3, [r7, #22]
  ptr = u8g2->tile_buf_ptr;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002606:	61fb      	str	r3, [r7, #28]
  ptr += offset;
 8002608:	8afb      	ldrh	r3, [r7, #22]
 800260a:	69fa      	ldr	r2, [r7, #28]
 800260c:	4413      	add	r3, r2
 800260e:	61fb      	str	r3, [r7, #28]
  ptr += x;
 8002610:	897b      	ldrh	r3, [r7, #10]
 8002612:	69fa      	ldr	r2, [r7, #28]
 8002614:	4413      	add	r3, r2
 8002616:	61fb      	str	r3, [r7, #28]
  
  if ( dir == 0 )
 8002618:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	d117      	bne.n	8002650 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
      do
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
 8002620:	69fb      	ldr	r3, [r7, #28]
 8002622:	781a      	ldrb	r2, [r3, #0]
 8002624:	7ebb      	ldrb	r3, [r7, #26]
 8002626:	4313      	orrs	r3, r2
 8002628:	b2da      	uxtb	r2, r3
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	701a      	strb	r2, [r3, #0]
	*ptr ^= xor_mask;
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	781a      	ldrb	r2, [r3, #0]
 8002632:	7e7b      	ldrb	r3, [r7, #25]
 8002634:	4053      	eors	r3, r2
 8002636:	b2da      	uxtb	r2, r3
 8002638:	69fb      	ldr	r3, [r7, #28]
 800263a:	701a      	strb	r2, [r3, #0]
	ptr++;
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	3301      	adds	r3, #1
 8002640:	61fb      	str	r3, [r7, #28]
	len--;
 8002642:	88fb      	ldrh	r3, [r7, #6]
 8002644:	3b01      	subs	r3, #1
 8002646:	80fb      	strh	r3, [r7, #6]
      } while( len != 0 );
 8002648:	88fb      	ldrh	r3, [r7, #6]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d1e8      	bne.n	8002620 <u8g2_ll_hvline_vertical_top_lsb+0x92>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
 800264e:	e038      	b.n	80026c2 <u8g2_ll_hvline_vertical_top_lsb+0x134>
      *ptr |= or_mask;
 8002650:	69fb      	ldr	r3, [r7, #28]
 8002652:	781a      	ldrb	r2, [r3, #0]
 8002654:	7ebb      	ldrb	r3, [r7, #26]
 8002656:	4313      	orrs	r3, r2
 8002658:	b2da      	uxtb	r2, r3
 800265a:	69fb      	ldr	r3, [r7, #28]
 800265c:	701a      	strb	r2, [r3, #0]
      *ptr ^= xor_mask;
 800265e:	69fb      	ldr	r3, [r7, #28]
 8002660:	781a      	ldrb	r2, [r3, #0]
 8002662:	7e7b      	ldrb	r3, [r7, #25]
 8002664:	4053      	eors	r3, r2
 8002666:	b2da      	uxtb	r2, r3
 8002668:	69fb      	ldr	r3, [r7, #28]
 800266a:	701a      	strb	r2, [r3, #0]
      bit_pos++;
 800266c:	7efb      	ldrb	r3, [r7, #27]
 800266e:	3301      	adds	r3, #1
 8002670:	76fb      	strb	r3, [r7, #27]
      bit_pos &= 7;
 8002672:	7efb      	ldrb	r3, [r7, #27]
 8002674:	f003 0307 	and.w	r3, r3, #7
 8002678:	76fb      	strb	r3, [r7, #27]
      len--;
 800267a:	88fb      	ldrh	r3, [r7, #6]
 800267c:	3b01      	subs	r3, #1
 800267e:	80fb      	strh	r3, [r7, #6]
      if ( bit_pos == 0 )
 8002680:	7efb      	ldrb	r3, [r7, #27]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d114      	bne.n	80026b0 <u8g2_ll_hvline_vertical_top_lsb+0x122>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	8f5b      	ldrh	r3, [r3, #58]	; 0x3a
 800268a:	461a      	mov	r2, r3
 800268c:	69fb      	ldr	r3, [r7, #28]
 800268e:	4413      	add	r3, r2
 8002690:	61fb      	str	r3, [r7, #28]
	if ( u8g2->draw_color <= 1 )
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 8002698:	2b01      	cmp	r3, #1
 800269a:	d801      	bhi.n	80026a0 <u8g2_ll_hvline_vertical_top_lsb+0x112>
	  or_mask  = 1;
 800269c:	2301      	movs	r3, #1
 800269e:	76bb      	strb	r3, [r7, #26]
	if ( u8g2->draw_color != 1 )
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	f893 3092 	ldrb.w	r3, [r3, #146]	; 0x92
 80026a6:	2b01      	cmp	r3, #1
 80026a8:	d008      	beq.n	80026bc <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	  xor_mask = 1;
 80026aa:	2301      	movs	r3, #1
 80026ac:	767b      	strb	r3, [r7, #25]
 80026ae:	e005      	b.n	80026bc <u8g2_ll_hvline_vertical_top_lsb+0x12e>
	or_mask <<= 1;
 80026b0:	7ebb      	ldrb	r3, [r7, #26]
 80026b2:	005b      	lsls	r3, r3, #1
 80026b4:	76bb      	strb	r3, [r7, #26]
	xor_mask <<= 1;
 80026b6:	7e7b      	ldrb	r3, [r7, #25]
 80026b8:	005b      	lsls	r3, r3, #1
 80026ba:	767b      	strb	r3, [r7, #25]
    } while( len != 0 );
 80026bc:	88fb      	ldrh	r3, [r7, #6]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d1c6      	bne.n	8002650 <u8g2_ll_hvline_vertical_top_lsb+0xc2>
}
 80026c2:	bf00      	nop
 80026c4:	3724      	adds	r7, #36	; 0x24
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr

080026ce <u8g2_SetMaxClipWindow>:


#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b082      	sub	sp, #8
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
  u8g2->clip_x0 = 0;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2200      	movs	r2, #0
 80026da:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
  u8g2->clip_y0 = 0;
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	2200      	movs	r2, #0
 80026e2:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026ec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80026f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
  
  u8g2->cb->update_page_win(u8g2);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fe:	685b      	ldr	r3, [r3, #4]
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	4798      	blx	r3
}
 8002704:	bf00      	nop
 8002706:	3708      	adds	r7, #8
 8002708:	46bd      	mov	sp, r7
 800270a:	bd80      	pop	{r7, pc}

0800270c <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b084      	sub	sp, #16
 8002710:	af00      	add	r7, sp, #0
 8002712:	60f8      	str	r0, [r7, #12]
 8002714:	60b9      	str	r1, [r7, #8]
 8002716:	603b      	str	r3, [r7, #0]
 8002718:	4613      	mov	r3, r2
 800271a:	71fb      	strb	r3, [r7, #7]
  u8g2->font = NULL;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	659a      	str	r2, [r3, #88]	; 0x58
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	62da      	str	r2, [r3, #44]	; 0x2c
  
  u8g2->tile_buf_ptr = buf;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	68ba      	ldr	r2, [r7, #8]
 800272c:	635a      	str	r2, [r3, #52]	; 0x34
  u8g2->tile_buf_height = tile_buf_height;
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	79fa      	ldrb	r2, [r7, #7]
 8002732:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  
  u8g2->tile_curr_row = 0;
 8002736:	68fb      	ldr	r3, [r7, #12]
 8002738:	2200      	movs	r2, #0
 800273a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	2200      	movs	r2, #0
 8002742:	f883 206d 	strb.w	r2, [r3, #109]	; 0x6d
  u8g2->bitmap_transparency = 0;
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	2200      	movs	r2, #0
 800274a:	f883 2091 	strb.w	r2, [r3, #145]	; 0x91
  
  u8g2->font_height_mode = 0; /* issue 2046 */
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2200      	movs	r2, #0
 8002752:	f883 208d 	strb.w	r2, [r3, #141]	; 0x8d
  u8g2->draw_color = 1;
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	2201      	movs	r2, #1
 800275a:	f883 2092 	strb.w	r2, [r3, #146]	; 0x92
  u8g2->is_auto_page_clear = 1;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 2093 	strb.w	r2, [r3, #147]	; 0x93
  
  u8g2->cb = u8g2_cb;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	69ba      	ldr	r2, [r7, #24]
 800276a:	631a      	str	r2, [r3, #48]	; 0x30
  u8g2->cb->update_dimension(u8g2);
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	68f8      	ldr	r0, [r7, #12]
 8002774:	4798      	blx	r3
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
 8002776:	68f8      	ldr	r0, [r7, #12]
 8002778:	f7ff ffa9 	bl	80026ce <u8g2_SetMaxClipWindow>
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
 800277c:	68f8      	ldr	r0, [r7, #12]
 800277e:	f7ff fcaf 	bl	80020e0 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2200      	movs	r2, #0
 8002786:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
#endif
}
 800278a:	bf00      	nop
 800278c:	3710      	adds	r7, #16
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}

08002792 <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
 8002792:	b480      	push	{r7}
 8002794:	b085      	sub	sp, #20
 8002796:	af00      	add	r7, sp, #0
 8002798:	6078      	str	r0, [r7, #4]
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	60bb      	str	r3, [r7, #8]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027a6:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80027a8:	89fb      	ldrh	r3, [r7, #14]
 80027aa:	00db      	lsls	r3, r3, #3
 80027ac:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_height = t;
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	89fa      	ldrh	r2, [r7, #14]
 80027b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  
  t = display_info->tile_width;
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	7c1b      	ldrb	r3, [r3, #16]
 80027b8:	81fb      	strh	r3, [r7, #14]
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
 80027ba:	89fb      	ldrh	r3, [r7, #14]
 80027bc:	00db      	lsls	r3, r3, #3
 80027be:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_buf_width = t;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	89fa      	ldrh	r2, [r7, #14]
 80027c4:	875a      	strh	r2, [r3, #58]	; 0x3a
  
  t = u8g2->tile_curr_row;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80027cc:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 80027ce:	89fb      	ldrh	r3, [r7, #14]
 80027d0:	00db      	lsls	r3, r3, #3
 80027d2:	81fb      	strh	r3, [r7, #14]
  u8g2->pixel_curr_row = t;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	89fa      	ldrh	r2, [r7, #14]
 80027d8:	87da      	strh	r2, [r3, #62]	; 0x3e
  
  t = u8g2->tile_buf_height;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80027e0:	81fb      	strh	r3, [r7, #14]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
 80027e2:	89fb      	ldrh	r3, [r7, #14]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	f892 2039 	ldrb.w	r2, [r2, #57]	; 0x39
 80027ea:	4413      	add	r3, r2
 80027ec:	68ba      	ldr	r2, [r7, #8]
 80027ee:	7c52      	ldrb	r2, [r2, #17]
 80027f0:	4293      	cmp	r3, r2
 80027f2:	dd08      	ble.n	8002806 <u8g2_update_dimension_common+0x74>
    t = display_info->tile_height - u8g2->tile_curr_row;
 80027f4:	68bb      	ldr	r3, [r7, #8]
 80027f6:	7c5b      	ldrb	r3, [r3, #17]
 80027f8:	b29a      	uxth	r2, r3
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8002800:	b29b      	uxth	r3, r3
 8002802:	1ad3      	subs	r3, r2, r3
 8002804:	81fb      	strh	r3, [r7, #14]
  t *= 8;
 8002806:	89fb      	ldrh	r3, [r7, #14]
 8002808:	00db      	lsls	r3, r3, #3
 800280a:	81fb      	strh	r3, [r7, #14]
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
  u8g2->buf_y1 = u8g2->buf_y0;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
  u8g2->buf_y1 += t;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002828:	89fb      	ldrh	r3, [r7, #14]
 800282a:	4413      	add	r3, r2
 800282c:	b29a      	uxth	r2, r3
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	8a9a      	ldrh	r2, [r3, #20]
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  u8g2->height = display_info->pixel_height;
 800283e:	68bb      	ldr	r3, [r7, #8]
 8002840:	8ada      	ldrh	r2, [r3, #22]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
 8002848:	bf00      	nop
 800284a:	3714      	adds	r7, #20
 800284c:	46bd      	mov	sp, r7
 800284e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002852:	4770      	bx	lr

08002854 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b084      	sub	sp, #16
 8002858:	af02      	add	r7, sp, #8
 800285a:	6078      	str	r0, [r7, #4]
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	f8b3 1050 	ldrh.w	r1, [r3, #80]	; 0x50
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f8b3 0052 	ldrh.w	r0, [r3, #82]	; 0x52
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002874:	9300      	str	r3, [sp, #0]
 8002876:	4603      	mov	r3, r0
 8002878:	6878      	ldr	r0, [r7, #4]
 800287a:	f7ff fe5d 	bl	8002538 <u8g2_IsIntersection>
 800287e:	4603      	mov	r3, r0
 8002880:	2b00      	cmp	r3, #0
 8002882:	d104      	bne.n	800288e <u8g2_apply_clip_window+0x3a>
  {
    u8g2->is_page_clip_window_intersection = 0;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	2200      	movs	r2, #0
 8002888:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
 800288c:	e03b      	b.n	8002906 <u8g2_apply_clip_window+0xb2>
    u8g2->is_page_clip_window_intersection = 1;
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2201      	movs	r2, #1
 8002892:	f883 208c 	strb.w	r2, [r3, #140]	; 0x8c
    if ( u8g2->user_x0 < u8g2->clip_x0 )
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	f8b3 3050 	ldrh.w	r3, [r3, #80]	; 0x50
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d205      	bcs.n	80028b2 <u8g2_apply_clip_window+0x5e>
      u8g2->user_x0 = u8g2->clip_x0;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    if ( u8g2->user_x1 > u8g2->clip_x1 )
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80028be:	429a      	cmp	r2, r3
 80028c0:	d905      	bls.n	80028ce <u8g2_apply_clip_window+0x7a>
      u8g2->user_x1 = u8g2->clip_x1;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	f8b3 2052 	ldrh.w	r2, [r3, #82]	; 0x52
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
    if ( u8g2->user_y0 < u8g2->clip_y0 )
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f8b3 204c 	ldrh.w	r2, [r3, #76]	; 0x4c
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80028da:	429a      	cmp	r2, r3
 80028dc:	d205      	bcs.n	80028ea <u8g2_apply_clip_window+0x96>
      u8g2->user_y0 = u8g2->clip_y0;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
    if ( u8g2->user_y1 > u8g2->clip_y1 )
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f8b3 204e 	ldrh.w	r2, [r3, #78]	; 0x4e
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80028f6:	429a      	cmp	r2, r3
 80028f8:	d905      	bls.n	8002906 <u8g2_apply_clip_window+0xb2>
      u8g2->user_y1 = u8g2->clip_y1;
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	f8b3 2056 	ldrh.w	r2, [r3, #86]	; 0x56
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}

0800290e <u8g2_update_dimension_r0>:

/*==========================================================*/


void u8g2_update_dimension_r0(u8g2_t *u8g2)
{
 800290e:	b580      	push	{r7, lr}
 8002910:	b082      	sub	sp, #8
 8002912:	af00      	add	r7, sp, #0
 8002914:	6078      	str	r0, [r7, #4]
  u8g2_update_dimension_common(u8g2);  
 8002916:	6878      	ldr	r0, [r7, #4]
 8002918:	f7ff ff3b 	bl	8002792 <u8g2_update_dimension_common>
}
 800291c:	bf00      	nop
 800291e:	3708      	adds	r7, #8
 8002920:	46bd      	mov	sp, r7
 8002922:	bd80      	pop	{r7, pc}

08002924 <u8g2_update_page_win_r0>:

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
 8002924:	b580      	push	{r7, lr}
 8002926:	b082      	sub	sp, #8
 8002928:	af00      	add	r7, sp, #0
 800292a:	6078      	str	r0, [r7, #4]
  u8g2->user_x0 = 0;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2200      	movs	r2, #0
 8002930:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
  
  u8g2->user_y0 = u8g2->buf_y0;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
  u8g2->user_y1 = u8g2->buf_y1;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	f8a3 204e 	strh.w	r2, [r3, #78]	; 0x4e
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
 8002958:	6878      	ldr	r0, [r7, #4]
 800295a:	f7ff ff7b 	bl	8002854 <u8g2_apply_clip_window>
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
 800295e:	bf00      	nop
 8002960:	3708      	adds	r7, #8
 8002962:	46bd      	mov	sp, r7
 8002964:	bd80      	pop	{r7, pc}

08002966 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
 8002966:	b580      	push	{r7, lr}
 8002968:	b086      	sub	sp, #24
 800296a:	af02      	add	r7, sp, #8
 800296c:	60f8      	str	r0, [r7, #12]
 800296e:	4608      	mov	r0, r1
 8002970:	4611      	mov	r1, r2
 8002972:	461a      	mov	r2, r3
 8002974:	4603      	mov	r3, r0
 8002976:	817b      	strh	r3, [r7, #10]
 8002978:	460b      	mov	r3, r1
 800297a:	813b      	strh	r3, [r7, #8]
 800297c:	4613      	mov	r3, r2
 800297e:	80fb      	strh	r3, [r7, #6]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
 8002980:	88f8      	ldrh	r0, [r7, #6]
 8002982:	893a      	ldrh	r2, [r7, #8]
 8002984:	8979      	ldrh	r1, [r7, #10]
 8002986:	7e3b      	ldrb	r3, [r7, #24]
 8002988:	9300      	str	r3, [sp, #0]
 800298a:	4603      	mov	r3, r0
 800298c:	68f8      	ldr	r0, [r7, #12]
 800298e:	f7ff fcab 	bl	80022e8 <u8g2_draw_hv_line_2dir>
}
 8002992:	bf00      	nop
 8002994:	3710      	adds	r7, #16
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <u8x8_utf8_init>:

*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
 800299a:	b480      	push	{r7}
 800299c:	b083      	sub	sp, #12
 800299e:	af00      	add	r7, sp, #0
 80029a0:	6078      	str	r0, [r7, #4]
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
}
 80029aa:	bf00      	nop
 80029ac:	370c      	adds	r7, #12
 80029ae:	46bd      	mov	sp, r7
 80029b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b4:	4770      	bx	lr

080029b6 <u8x8_ascii_next>:

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
 80029be:	460b      	mov	r3, r1
 80029c0:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
 80029c2:	78fb      	ldrb	r3, [r7, #3]
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d002      	beq.n	80029ce <u8x8_ascii_next+0x18>
 80029c8:	78fb      	ldrb	r3, [r7, #3]
 80029ca:	2b0a      	cmp	r3, #10
 80029cc:	d102      	bne.n	80029d4 <u8x8_ascii_next+0x1e>
    return 0x0ffff;	/* end of string detected*/
 80029ce:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80029d2:	e001      	b.n	80029d8 <u8x8_ascii_next+0x22>
  return b;
 80029d4:	78fb      	ldrb	r3, [r7, #3]
 80029d6:	b29b      	uxth	r3, r3
}
 80029d8:	4618      	mov	r0, r3
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr

080029e4 <u8x8_utf8_next>:
    0x0fffe: no glyph, just continue
    0x0ffff: end of string
    anything else: The decoded encoding
*/
uint16_t u8x8_utf8_next(u8x8_t *u8x8, uint8_t b)
{
 80029e4:	b480      	push	{r7}
 80029e6:	b083      	sub	sp, #12
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
 80029ec:	460b      	mov	r3, r1
 80029ee:	70fb      	strb	r3, [r7, #3]
  if ( b == 0 || b == '\n' )	/* '\n' terminates the string to support the string list procedures */
 80029f0:	78fb      	ldrb	r3, [r7, #3]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d002      	beq.n	80029fc <u8x8_utf8_next+0x18>
 80029f6:	78fb      	ldrb	r3, [r7, #3]
 80029f8:	2b0a      	cmp	r3, #10
 80029fa:	d102      	bne.n	8002a02 <u8x8_utf8_next+0x1e>
    return 0x0ffff;	/* end of string detected, pending UTF8 is discarded */
 80029fc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002a00:	e06e      	b.n	8002ae0 <u8x8_utf8_next+0xfc>
  if ( u8x8->utf8_state == 0 )
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d145      	bne.n	8002a98 <u8x8_utf8_next+0xb4>
  {
    if ( b >= 0xfc )	/* 6 byte sequence */
 8002a0c:	78fb      	ldrb	r3, [r7, #3]
 8002a0e:	2bfb      	cmp	r3, #251	; 0xfb
 8002a10:	d908      	bls.n	8002a24 <u8x8_utf8_next+0x40>
    {
      u8x8->utf8_state = 5;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2205      	movs	r2, #5
 8002a16:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 1;
 8002a1a:	78fb      	ldrb	r3, [r7, #3]
 8002a1c:	f003 0301 	and.w	r3, r3, #1
 8002a20:	70fb      	strb	r3, [r7, #3]
 8002a22:	e032      	b.n	8002a8a <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf8 )
 8002a24:	78fb      	ldrb	r3, [r7, #3]
 8002a26:	2bf7      	cmp	r3, #247	; 0xf7
 8002a28:	d908      	bls.n	8002a3c <u8x8_utf8_next+0x58>
    {
      u8x8->utf8_state = 4;
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2204      	movs	r2, #4
 8002a2e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 3;
 8002a32:	78fb      	ldrb	r3, [r7, #3]
 8002a34:	f003 0303 	and.w	r3, r3, #3
 8002a38:	70fb      	strb	r3, [r7, #3]
 8002a3a:	e026      	b.n	8002a8a <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xf0 )
 8002a3c:	78fb      	ldrb	r3, [r7, #3]
 8002a3e:	2bef      	cmp	r3, #239	; 0xef
 8002a40:	d908      	bls.n	8002a54 <u8x8_utf8_next+0x70>
    {
      u8x8->utf8_state = 3;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2203      	movs	r2, #3
 8002a46:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 7;      
 8002a4a:	78fb      	ldrb	r3, [r7, #3]
 8002a4c:	f003 0307 	and.w	r3, r3, #7
 8002a50:	70fb      	strb	r3, [r7, #3]
 8002a52:	e01a      	b.n	8002a8a <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xe0 )
 8002a54:	78fb      	ldrb	r3, [r7, #3]
 8002a56:	2bdf      	cmp	r3, #223	; 0xdf
 8002a58:	d908      	bls.n	8002a6c <u8x8_utf8_next+0x88>
    {
      u8x8->utf8_state = 2;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 15;
 8002a62:	78fb      	ldrb	r3, [r7, #3]
 8002a64:	f003 030f 	and.w	r3, r3, #15
 8002a68:	70fb      	strb	r3, [r7, #3]
 8002a6a:	e00e      	b.n	8002a8a <u8x8_utf8_next+0xa6>
    }
    else if ( b >= 0xc0 )
 8002a6c:	78fb      	ldrb	r3, [r7, #3]
 8002a6e:	2bbf      	cmp	r3, #191	; 0xbf
 8002a70:	d908      	bls.n	8002a84 <u8x8_utf8_next+0xa0>
    {
      u8x8->utf8_state = 1;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2201      	movs	r2, #1
 8002a76:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
      b &= 0x01f;
 8002a7a:	78fb      	ldrb	r3, [r7, #3]
 8002a7c:	f003 031f 	and.w	r3, r3, #31
 8002a80:	70fb      	strb	r3, [r7, #3]
 8002a82:	e002      	b.n	8002a8a <u8x8_utf8_next+0xa6>
    }
    else
    {
      /* do nothing, just use the value as encoding */
      return b;
 8002a84:	78fb      	ldrb	r3, [r7, #3]
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	e02a      	b.n	8002ae0 <u8x8_utf8_next+0xfc>
    }
    u8x8->encoding = b;
 8002a8a:	78fb      	ldrb	r3, [r7, #3]
 8002a8c:	b29a      	uxth	r2, r3
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	841a      	strh	r2, [r3, #32]
    return 0x0fffe;
 8002a92:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002a96:	e023      	b.n	8002ae0 <u8x8_utf8_next+0xfc>
  }
  else
  {
    u8x8->utf8_state--;
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002a9e:	3b01      	subs	r3, #1
 8002aa0:	b2da      	uxtb	r2, r3
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    /* The case b < 0x080 (an illegal UTF8 encoding) is not checked here. */
    u8x8->encoding<<=6;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	8c1b      	ldrh	r3, [r3, #32]
 8002aac:	019b      	lsls	r3, r3, #6
 8002aae:	b29a      	uxth	r2, r3
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	841a      	strh	r2, [r3, #32]
    b &= 0x03f;
 8002ab4:	78fb      	ldrb	r3, [r7, #3]
 8002ab6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002aba:	70fb      	strb	r3, [r7, #3]
    u8x8->encoding |= b;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	8c1a      	ldrh	r2, [r3, #32]
 8002ac0:	78fb      	ldrb	r3, [r7, #3]
 8002ac2:	b29b      	uxth	r3, r3
 8002ac4:	4313      	orrs	r3, r2
 8002ac6:	b29a      	uxth	r2, r3
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	841a      	strh	r2, [r3, #32]
    if ( u8x8->utf8_state != 0 )
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d002      	beq.n	8002adc <u8x8_utf8_next+0xf8>
      return 0x0fffe;	/* nothing to do yet */
 8002ad6:	f64f 73fe 	movw	r3, #65534	; 0xfffe
 8002ada:	e001      	b.n	8002ae0 <u8x8_utf8_next+0xfc>
  }
  return u8x8->encoding;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	8c1b      	ldrh	r3, [r3, #32]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	370c      	adds	r7, #12
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aea:	4770      	bx	lr

08002aec <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002aec:	b590      	push	{r4, r7, lr}
 8002aee:	b085      	sub	sp, #20
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	60f8      	str	r0, [r7, #12]
 8002af4:	460b      	mov	r3, r1
 8002af6:	607a      	str	r2, [r7, #4]
 8002af8:	72fb      	strb	r3, [r7, #11]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	691c      	ldr	r4, [r3, #16]
 8002afe:	7afa      	ldrb	r2, [r7, #11]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2117      	movs	r1, #23
 8002b04:	68f8      	ldr	r0, [r7, #12]
 8002b06:	47a0      	blx	r4
 8002b08:	4603      	mov	r3, r0
}
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	3714      	adds	r7, #20
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bd90      	pop	{r4, r7, pc}

08002b12 <u8x8_byte_SendByte>:

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
 8002b12:	b580      	push	{r7, lr}
 8002b14:	b082      	sub	sp, #8
 8002b16:	af00      	add	r7, sp, #0
 8002b18:	6078      	str	r0, [r7, #4]
 8002b1a:	460b      	mov	r3, r1
 8002b1c:	70fb      	strb	r3, [r7, #3]
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
 8002b1e:	1cfb      	adds	r3, r7, #3
 8002b20:	461a      	mov	r2, r3
 8002b22:	2101      	movs	r1, #1
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff ffe1 	bl	8002aec <u8x8_byte_SendBytes>
 8002b2a:	4603      	mov	r3, r0
}
 8002b2c:	4618      	mov	r0, r3
 8002b2e:	3708      	adds	r7, #8
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}

08002b34 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
 8002b34:	b590      	push	{r4, r7, lr}
 8002b36:	b083      	sub	sp, #12
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691c      	ldr	r4, [r3, #16]
 8002b40:	2300      	movs	r3, #0
 8002b42:	2200      	movs	r2, #0
 8002b44:	2118      	movs	r1, #24
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	47a0      	blx	r4
 8002b4a:	4603      	mov	r3, r0
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	370c      	adds	r7, #12
 8002b50:	46bd      	mov	sp, r7
 8002b52:	bd90      	pop	{r4, r7, pc}

08002b54 <u8x8_byte_EndTransfer>:

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
 8002b54:	b590      	push	{r4, r7, lr}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	691c      	ldr	r4, [r3, #16]
 8002b60:	2300      	movs	r3, #0
 8002b62:	2200      	movs	r2, #0
 8002b64:	2119      	movs	r1, #25
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	47a0      	blx	r4
 8002b6a:	4603      	mov	r3, r0
}
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	370c      	adds	r7, #12
 8002b70:	46bd      	mov	sp, r7
 8002b72:	bd90      	pop	{r4, r7, pc}

08002b74 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
 8002b74:	b590      	push	{r4, r7, lr}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
 8002b7c:	460b      	mov	r3, r1
 8002b7e:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	68dc      	ldr	r4, [r3, #12]
 8002b84:	78fa      	ldrb	r2, [r7, #3]
 8002b86:	2300      	movs	r3, #0
 8002b88:	2115      	movs	r1, #21
 8002b8a:	6878      	ldr	r0, [r7, #4]
 8002b8c:	47a0      	blx	r4
 8002b8e:	4603      	mov	r3, r0
}
 8002b90:	4618      	mov	r0, r3
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	bd90      	pop	{r4, r7, pc}

08002b98 <u8x8_cad_SendArg>:

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
 8002b98:	b590      	push	{r4, r7, lr}
 8002b9a:	b083      	sub	sp, #12
 8002b9c:	af00      	add	r7, sp, #0
 8002b9e:	6078      	str	r0, [r7, #4]
 8002ba0:	460b      	mov	r3, r1
 8002ba2:	70fb      	strb	r3, [r7, #3]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	68dc      	ldr	r4, [r3, #12]
 8002ba8:	78fa      	ldrb	r2, [r7, #3]
 8002baa:	2300      	movs	r3, #0
 8002bac:	2116      	movs	r1, #22
 8002bae:	6878      	ldr	r0, [r7, #4]
 8002bb0:	47a0      	blx	r4
 8002bb2:	4603      	mov	r3, r0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	370c      	adds	r7, #12
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd90      	pop	{r4, r7, pc}

08002bbc <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
 8002bbc:	b590      	push	{r4, r7, lr}
 8002bbe:	b085      	sub	sp, #20
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	60f8      	str	r0, [r7, #12]
 8002bc4:	460b      	mov	r3, r1
 8002bc6:	607a      	str	r2, [r7, #4]
 8002bc8:	72fb      	strb	r3, [r7, #11]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	68dc      	ldr	r4, [r3, #12]
 8002bce:	7afa      	ldrb	r2, [r7, #11]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2117      	movs	r1, #23
 8002bd4:	68f8      	ldr	r0, [r7, #12]
 8002bd6:	47a0      	blx	r4
 8002bd8:	4603      	mov	r3, r0
}
 8002bda:	4618      	mov	r0, r3
 8002bdc:	3714      	adds	r7, #20
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd90      	pop	{r4, r7, pc}

08002be2 <u8x8_cad_StartTransfer>:

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
 8002be2:	b590      	push	{r4, r7, lr}
 8002be4:	b083      	sub	sp, #12
 8002be6:	af00      	add	r7, sp, #0
 8002be8:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	68dc      	ldr	r4, [r3, #12]
 8002bee:	2300      	movs	r3, #0
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	2118      	movs	r1, #24
 8002bf4:	6878      	ldr	r0, [r7, #4]
 8002bf6:	47a0      	blx	r4
 8002bf8:	4603      	mov	r3, r0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd90      	pop	{r4, r7, pc}

08002c02 <u8x8_cad_EndTransfer>:

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
 8002c02:	b590      	push	{r4, r7, lr}
 8002c04:	b083      	sub	sp, #12
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	68dc      	ldr	r4, [r3, #12]
 8002c0e:	2300      	movs	r3, #0
 8002c10:	2200      	movs	r2, #0
 8002c12:	2119      	movs	r1, #25
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	47a0      	blx	r4
 8002c18:	4603      	mov	r3, r0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd90      	pop	{r4, r7, pc}

08002c22 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
 8002c22:	b590      	push	{r4, r7, lr}
 8002c24:	b085      	sub	sp, #20
 8002c26:	af00      	add	r7, sp, #0
 8002c28:	6078      	str	r0, [r7, #4]
 8002c2a:	6039      	str	r1, [r7, #0]
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	781b      	ldrb	r3, [r3, #0]
 8002c30:	73fb      	strb	r3, [r7, #15]
    data++;
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	3301      	adds	r3, #1
 8002c36:	603b      	str	r3, [r7, #0]
    switch( cmd )
 8002c38:	7bfb      	ldrb	r3, [r7, #15]
 8002c3a:	2bfe      	cmp	r3, #254	; 0xfe
 8002c3c:	d031      	beq.n	8002ca2 <u8x8_cad_SendSequence+0x80>
 8002c3e:	2bfe      	cmp	r3, #254	; 0xfe
 8002c40:	dc3d      	bgt.n	8002cbe <u8x8_cad_SendSequence+0x9c>
 8002c42:	2b19      	cmp	r3, #25
 8002c44:	dc3b      	bgt.n	8002cbe <u8x8_cad_SendSequence+0x9c>
 8002c46:	2b18      	cmp	r3, #24
 8002c48:	da23      	bge.n	8002c92 <u8x8_cad_SendSequence+0x70>
 8002c4a:	2b16      	cmp	r3, #22
 8002c4c:	dc02      	bgt.n	8002c54 <u8x8_cad_SendSequence+0x32>
 8002c4e:	2b15      	cmp	r3, #21
 8002c50:	da03      	bge.n	8002c5a <u8x8_cad_SendSequence+0x38>
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
	  break;
      default:
	return;
 8002c52:	e034      	b.n	8002cbe <u8x8_cad_SendSequence+0x9c>
    switch( cmd )
 8002c54:	2b17      	cmp	r3, #23
 8002c56:	d00e      	beq.n	8002c76 <u8x8_cad_SendSequence+0x54>
	return;
 8002c58:	e031      	b.n	8002cbe <u8x8_cad_SendSequence+0x9c>
	  v = *data;
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	781b      	ldrb	r3, [r3, #0]
 8002c5e:	73bb      	strb	r3, [r7, #14]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	68dc      	ldr	r4, [r3, #12]
 8002c64:	7bba      	ldrb	r2, [r7, #14]
 8002c66:	7bf9      	ldrb	r1, [r7, #15]
 8002c68:	2300      	movs	r3, #0
 8002c6a:	6878      	ldr	r0, [r7, #4]
 8002c6c:	47a0      	blx	r4
	  data++;
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	3301      	adds	r3, #1
 8002c72:	603b      	str	r3, [r7, #0]
	  break;
 8002c74:	e022      	b.n	8002cbc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	781b      	ldrb	r3, [r3, #0]
 8002c7a:	73bb      	strb	r3, [r7, #14]
	  u8x8_cad_SendData(u8x8, 1, &v);
 8002c7c:	f107 030e 	add.w	r3, r7, #14
 8002c80:	461a      	mov	r2, r3
 8002c82:	2101      	movs	r1, #1
 8002c84:	6878      	ldr	r0, [r7, #4]
 8002c86:	f7ff ff99 	bl	8002bbc <u8x8_cad_SendData>
	  data++;
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	3301      	adds	r3, #1
 8002c8e:	603b      	str	r3, [r7, #0]
	  break;
 8002c90:	e014      	b.n	8002cbc <u8x8_cad_SendSequence+0x9a>
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	68dc      	ldr	r4, [r3, #12]
 8002c96:	7bf9      	ldrb	r1, [r7, #15]
 8002c98:	2300      	movs	r3, #0
 8002c9a:	2200      	movs	r2, #0
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	47a0      	blx	r4
	  break;
 8002ca0:	e00c      	b.n	8002cbc <u8x8_cad_SendSequence+0x9a>
	  v = *data;
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	781b      	ldrb	r3, [r3, #0]
 8002ca6:	73bb      	strb	r3, [r7, #14]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
 8002ca8:	7bbb      	ldrb	r3, [r7, #14]
 8002caa:	461a      	mov	r2, r3
 8002cac:	2129      	movs	r1, #41	; 0x29
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa0b 	bl	80030ca <u8x8_gpio_call>
	  data++;
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	3301      	adds	r3, #1
 8002cb8:	603b      	str	r3, [r7, #0]
	  break;
 8002cba:	bf00      	nop
    cmd = *data;
 8002cbc:	e7b6      	b.n	8002c2c <u8x8_cad_SendSequence+0xa>
	return;
 8002cbe:	bf00      	nop
    }
  }
}
 8002cc0:	3714      	adds	r7, #20
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	bd90      	pop	{r4, r7, pc}

08002cc6 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
 8002cc6:	b590      	push	{r4, r7, lr}
 8002cc8:	b085      	sub	sp, #20
 8002cca:	af00      	add	r7, sp, #0
 8002ccc:	60f8      	str	r0, [r7, #12]
 8002cce:	460b      	mov	r3, r1
 8002cd0:	607a      	str	r2, [r7, #4]
 8002cd2:	72fb      	strb	r3, [r7, #11]
    u8x8_byte_StartTransfer(u8x8);    
 8002cd4:	68f8      	ldr	r0, [r7, #12]
 8002cd6:	f7ff ff2d 	bl	8002b34 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
 8002cda:	2140      	movs	r1, #64	; 0x40
 8002cdc:	68f8      	ldr	r0, [r7, #12]
 8002cde:	f7ff ff18 	bl	8002b12 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	691c      	ldr	r4, [r3, #16]
 8002ce6:	7afa      	ldrb	r2, [r7, #11]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	2117      	movs	r1, #23
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	47a0      	blx	r4
    u8x8_byte_EndTransfer(u8x8);
 8002cf0:	68f8      	ldr	r0, [r7, #12]
 8002cf2:	f7ff ff2f 	bl	8002b54 <u8x8_byte_EndTransfer>
}
 8002cf6:	bf00      	nop
 8002cf8:	3714      	adds	r7, #20
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd90      	pop	{r4, r7, pc}
	...

08002d00 <u8x8_cad_ssd13xx_i2c>:

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002d00:	b590      	push	{r4, r7, lr}
 8002d02:	b087      	sub	sp, #28
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	60f8      	str	r0, [r7, #12]
 8002d08:	607b      	str	r3, [r7, #4]
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	72fb      	strb	r3, [r7, #11]
 8002d0e:	4613      	mov	r3, r2
 8002d10:	72bb      	strb	r3, [r7, #10]
  uint8_t *p;
  switch(msg)
 8002d12:	7afb      	ldrb	r3, [r7, #11]
 8002d14:	3b14      	subs	r3, #20
 8002d16:	2b05      	cmp	r3, #5
 8002d18:	d848      	bhi.n	8002dac <u8x8_cad_ssd13xx_i2c+0xac>
 8002d1a:	a201      	add	r2, pc, #4	; (adr r2, 8002d20 <u8x8_cad_ssd13xx_i2c+0x20>)
 8002d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d20:	08002d89 	.word	0x08002d89
 8002d24:	08002d39 	.word	0x08002d39
 8002d28:	08002d39 	.word	0x08002d39
 8002d2c:	08002d59 	.word	0x08002d59
 8002d30:	08002db1 	.word	0x08002db1
 8002d34:	08002db1 	.word	0x08002db1
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
 8002d38:	68f8      	ldr	r0, [r7, #12]
 8002d3a:	f7ff fefb 	bl	8002b34 <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
 8002d3e:	2100      	movs	r1, #0
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f7ff fee6 	bl	8002b12 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
 8002d46:	7abb      	ldrb	r3, [r7, #10]
 8002d48:	4619      	mov	r1, r3
 8002d4a:	68f8      	ldr	r0, [r7, #12]
 8002d4c:	f7ff fee1 	bl	8002b12 <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
 8002d50:	68f8      	ldr	r0, [r7, #12]
 8002d52:	f7ff feff 	bl	8002b54 <u8x8_byte_EndTransfer>
      break;
 8002d56:	e02c      	b.n	8002db2 <u8x8_cad_ssd13xx_i2c+0xb2>
      /* smaller streams, 32 seems to be the limit... */
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002d5c:	e00a      	b.n	8002d74 <u8x8_cad_ssd13xx_i2c+0x74>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
 8002d5e:	697a      	ldr	r2, [r7, #20]
 8002d60:	2118      	movs	r1, #24
 8002d62:	68f8      	ldr	r0, [r7, #12]
 8002d64:	f7ff ffaf 	bl	8002cc6 <u8x8_i2c_data_transfer>
	arg_int-=24;
 8002d68:	7abb      	ldrb	r3, [r7, #10]
 8002d6a:	3b18      	subs	r3, #24
 8002d6c:	72bb      	strb	r3, [r7, #10]
	p+=24;
 8002d6e:	697b      	ldr	r3, [r7, #20]
 8002d70:	3318      	adds	r3, #24
 8002d72:	617b      	str	r3, [r7, #20]
       while( arg_int > 24 )
 8002d74:	7abb      	ldrb	r3, [r7, #10]
 8002d76:	2b18      	cmp	r3, #24
 8002d78:	d8f1      	bhi.n	8002d5e <u8x8_cad_ssd13xx_i2c+0x5e>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
 8002d7a:	7abb      	ldrb	r3, [r7, #10]
 8002d7c:	697a      	ldr	r2, [r7, #20]
 8002d7e:	4619      	mov	r1, r3
 8002d80:	68f8      	ldr	r0, [r7, #12]
 8002d82:	f7ff ffa0 	bl	8002cc6 <u8x8_i2c_data_transfer>
      break;
 8002d86:	e014      	b.n	8002db2 <u8x8_cad_ssd13xx_i2c+0xb2>
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d8e:	2bff      	cmp	r3, #255	; 0xff
 8002d90:	d103      	bne.n	8002d9a <u8x8_cad_ssd13xx_i2c+0x9a>
	u8x8->i2c_address = 0x078;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	2278      	movs	r2, #120	; 0x78
 8002d96:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	691c      	ldr	r4, [r3, #16]
 8002d9e:	7aba      	ldrb	r2, [r7, #10]
 8002da0:	7af9      	ldrb	r1, [r7, #11]
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	68f8      	ldr	r0, [r7, #12]
 8002da6:	47a0      	blx	r4
 8002da8:	4603      	mov	r3, r0
 8002daa:	e003      	b.n	8002db4 <u8x8_cad_ssd13xx_i2c+0xb4>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
 8002dac:	2300      	movs	r3, #0
 8002dae:	e001      	b.n	8002db4 <u8x8_cad_ssd13xx_i2c+0xb4>
      break;
 8002db0:	bf00      	nop
  }
  return 1;
 8002db2:	2301      	movs	r3, #1
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd90      	pop	{r4, r7, pc}

08002dbc <u8x8_d_ssd1305_generic>:
};



static uint8_t u8x8_d_ssd1305_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	b086      	sub	sp, #24
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	607b      	str	r3, [r7, #4]
 8002dc6:	460b      	mov	r3, r1
 8002dc8:	72fb      	strb	r3, [r7, #11]
 8002dca:	4613      	mov	r3, r2
 8002dcc:	72bb      	strb	r3, [r7, #10]
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
 8002dce:	7afb      	ldrb	r3, [r7, #11]
 8002dd0:	2b0f      	cmp	r3, #15
 8002dd2:	d006      	beq.n	8002de2 <u8x8_d_ssd1305_generic+0x26>
 8002dd4:	2b0f      	cmp	r3, #15
 8002dd6:	dc67      	bgt.n	8002ea8 <u8x8_d_ssd1305_generic+0xec>
 8002dd8:	2b0b      	cmp	r3, #11
 8002dda:	d048      	beq.n	8002e6e <u8x8_d_ssd1305_generic+0xb2>
 8002ddc:	2b0e      	cmp	r3, #14
 8002dde:	d053      	beq.n	8002e88 <u8x8_d_ssd1305_generic+0xcc>
 8002de0:	e062      	b.n	8002ea8 <u8x8_d_ssd1305_generic+0xec>
  {
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
 8002de2:	68f8      	ldr	r0, [r7, #12]
 8002de4:	f7ff fefd 	bl	8002be2 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	795b      	ldrb	r3, [r3, #5]
 8002dec:	75fb      	strb	r3, [r7, #23]
      x *= 8;
 8002dee:	7dfb      	ldrb	r3, [r7, #23]
 8002df0:	00db      	lsls	r3, r3, #3
 8002df2:	75fb      	strb	r3, [r7, #23]
      x += u8x8->x_offset;
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	f893 2022 	ldrb.w	r2, [r3, #34]	; 0x22
 8002dfa:	7dfb      	ldrb	r3, [r7, #23]
 8002dfc:	4413      	add	r3, r2
 8002dfe:	75fb      	strb	r3, [r7, #23]
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
 8002e00:	2140      	movs	r1, #64	; 0x40
 8002e02:	68f8      	ldr	r0, [r7, #12]
 8002e04:	f7ff feb6 	bl	8002b74 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
 8002e08:	7dfb      	ldrb	r3, [r7, #23]
 8002e0a:	091b      	lsrs	r3, r3, #4
 8002e0c:	b2db      	uxtb	r3, r3
 8002e0e:	f043 0310 	orr.w	r3, r3, #16
 8002e12:	b2db      	uxtb	r3, r3
 8002e14:	4619      	mov	r1, r3
 8002e16:	68f8      	ldr	r0, [r7, #12]
 8002e18:	f7ff feac 	bl	8002b74 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));
 8002e1c:	7dfb      	ldrb	r3, [r7, #23]
 8002e1e:	f003 030f 	and.w	r3, r3, #15
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	4619      	mov	r1, r3
 8002e26:	68f8      	ldr	r0, [r7, #12]
 8002e28:	f7ff feb6 	bl	8002b98 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos)   );
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	799b      	ldrb	r3, [r3, #6]
 8002e30:	f063 034f 	orn	r3, r3, #79	; 0x4f
 8002e34:	b2db      	uxtb	r3, r3
 8002e36:	4619      	mov	r1, r3
 8002e38:	68f8      	ldr	r0, [r7, #12]
 8002e3a:	f7ff fead 	bl	8002b98 <u8x8_cad_SendArg>

    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	791b      	ldrb	r3, [r3, #4]
 8002e42:	75bb      	strb	r3, [r7, #22]
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	613b      	str	r3, [r7, #16]
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
 8002e4a:	7dbb      	ldrb	r3, [r7, #22]
 8002e4c:	00db      	lsls	r3, r3, #3
 8002e4e:	b2db      	uxtb	r3, r3
 8002e50:	693a      	ldr	r2, [r7, #16]
 8002e52:	4619      	mov	r1, r3
 8002e54:	68f8      	ldr	r0, [r7, #12]
 8002e56:	f7ff feb1 	bl	8002bbc <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
 8002e5a:	7abb      	ldrb	r3, [r7, #10]
 8002e5c:	3b01      	subs	r3, #1
 8002e5e:	72bb      	strb	r3, [r7, #10]
      } while( arg_int > 0 );
 8002e60:	7abb      	ldrb	r3, [r7, #10]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1eb      	bne.n	8002e3e <u8x8_d_ssd1305_generic+0x82>
      
      u8x8_cad_EndTransfer(u8x8);
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff fecb 	bl	8002c02 <u8x8_cad_EndTransfer>
      break;
 8002e6c:	e01e      	b.n	8002eac <u8x8_d_ssd1305_generic+0xf0>
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
 8002e6e:	7abb      	ldrb	r3, [r7, #10]
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d104      	bne.n	8002e7e <u8x8_d_ssd1305_generic+0xc2>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave0_seq);
 8002e74:	4910      	ldr	r1, [pc, #64]	; (8002eb8 <u8x8_d_ssd1305_generic+0xfc>)
 8002e76:	68f8      	ldr	r0, [r7, #12]
 8002e78:	f7ff fed3 	bl	8002c22 <u8x8_cad_SendSequence>
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
      break;
 8002e7c:	e016      	b.n	8002eac <u8x8_d_ssd1305_generic+0xf0>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_powersave1_seq);
 8002e7e:	490f      	ldr	r1, [pc, #60]	; (8002ebc <u8x8_d_ssd1305_generic+0x100>)
 8002e80:	68f8      	ldr	r0, [r7, #12]
 8002e82:	f7ff fece 	bl	8002c22 <u8x8_cad_SendSequence>
      break;
 8002e86:	e011      	b.n	8002eac <u8x8_d_ssd1305_generic+0xf0>
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
 8002e88:	68f8      	ldr	r0, [r7, #12]
 8002e8a:	f7ff feaa 	bl	8002be2 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
 8002e8e:	2181      	movs	r1, #129	; 0x81
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	f7ff fe6f 	bl	8002b74 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1305 has range from 0 to 255 */
 8002e96:	7abb      	ldrb	r3, [r7, #10]
 8002e98:	4619      	mov	r1, r3
 8002e9a:	68f8      	ldr	r0, [r7, #12]
 8002e9c:	f7ff fe7c 	bl	8002b98 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
 8002ea0:	68f8      	ldr	r0, [r7, #12]
 8002ea2:	f7ff feae 	bl	8002c02 <u8x8_cad_EndTransfer>
      break;
 8002ea6:	e001      	b.n	8002eac <u8x8_d_ssd1305_generic+0xf0>
#endif
    default:
      return 0;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	e000      	b.n	8002eae <u8x8_d_ssd1305_generic+0xf2>
  }
  return 1;
 8002eac:	2301      	movs	r3, #1
}
 8002eae:	4618      	mov	r0, r3
 8002eb0:	3718      	adds	r7, #24
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}
 8002eb6:	bf00      	nop
 8002eb8:	0801d394 	.word	0x0801d394
 8002ebc:	0801d39c 	.word	0x0801d39c

08002ec0 <u8x8_d_ssd1305_128x32_noname>:
  U8X8_END()             			/* end of sequence */
};


uint8_t u8x8_d_ssd1305_128x32_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	60f8      	str	r0, [r7, #12]
 8002ec8:	607b      	str	r3, [r7, #4]
 8002eca:	460b      	mov	r3, r1
 8002ecc:	72fb      	strb	r3, [r7, #11]
 8002ece:	4613      	mov	r3, r2
 8002ed0:	72bb      	strb	r3, [r7, #10]
    
  if ( u8x8_d_ssd1305_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
 8002ed2:	7aba      	ldrb	r2, [r7, #10]
 8002ed4:	7af9      	ldrb	r1, [r7, #11]
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	68f8      	ldr	r0, [r7, #12]
 8002eda:	f7ff ff6f 	bl	8002dbc <u8x8_d_ssd1305_generic>
 8002ede:	4603      	mov	r3, r0
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	d001      	beq.n	8002ee8 <u8x8_d_ssd1305_128x32_noname+0x28>
    return 1;
 8002ee4:	2301      	movs	r3, #1
 8002ee6:	e032      	b.n	8002f4e <u8x8_d_ssd1305_128x32_noname+0x8e>
  
  switch(msg)
 8002ee8:	7afb      	ldrb	r3, [r7, #11]
 8002eea:	2b0d      	cmp	r3, #13
 8002eec:	d006      	beq.n	8002efc <u8x8_d_ssd1305_128x32_noname+0x3c>
 8002eee:	2b0d      	cmp	r3, #13
 8002ef0:	dc2a      	bgt.n	8002f48 <u8x8_d_ssd1305_128x32_noname+0x88>
 8002ef2:	2b09      	cmp	r3, #9
 8002ef4:	d023      	beq.n	8002f3e <u8x8_d_ssd1305_128x32_noname+0x7e>
 8002ef6:	2b0a      	cmp	r3, #10
 8002ef8:	d019      	beq.n	8002f2e <u8x8_d_ssd1305_128x32_noname+0x6e>
 8002efa:	e025      	b.n	8002f48 <u8x8_d_ssd1305_128x32_noname+0x88>
  {
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
 8002efc:	7abb      	ldrb	r3, [r7, #10]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d10a      	bne.n	8002f18 <u8x8_d_ssd1305_128x32_noname+0x58>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip0_seq);
 8002f02:	4915      	ldr	r1, [pc, #84]	; (8002f58 <u8x8_d_ssd1305_128x32_noname+0x98>)
 8002f04:	68f8      	ldr	r0, [r7, #12]
 8002f06:	f7ff fe8c 	bl	8002c22 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	7c9a      	ldrb	r2, [r3, #18]
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
 8002f16:	e019      	b.n	8002f4c <u8x8_d_ssd1305_128x32_noname+0x8c>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_flip1_seq);
 8002f18:	4910      	ldr	r1, [pc, #64]	; (8002f5c <u8x8_d_ssd1305_128x32_noname+0x9c>)
 8002f1a:	68f8      	ldr	r0, [r7, #12]
 8002f1c:	f7ff fe81 	bl	8002c22 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	7cda      	ldrb	r2, [r3, #19]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
      break;
 8002f2c:	e00e      	b.n	8002f4c <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
 8002f2e:	68f8      	ldr	r0, [r7, #12]
 8002f30:	f000 f82e 	bl	8002f90 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1305_128x32_noname_init_seq);    
 8002f34:	490a      	ldr	r1, [pc, #40]	; (8002f60 <u8x8_d_ssd1305_128x32_noname+0xa0>)
 8002f36:	68f8      	ldr	r0, [r7, #12]
 8002f38:	f7ff fe73 	bl	8002c22 <u8x8_cad_SendSequence>
      break;
 8002f3c:	e006      	b.n	8002f4c <u8x8_d_ssd1305_128x32_noname+0x8c>
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1305_128x32_noname_display_info);
 8002f3e:	4909      	ldr	r1, [pc, #36]	; (8002f64 <u8x8_d_ssd1305_128x32_noname+0xa4>)
 8002f40:	68f8      	ldr	r0, [r7, #12]
 8002f42:	f000 f811 	bl	8002f68 <u8x8_d_helper_display_setup_memory>
      break;
 8002f46:	e001      	b.n	8002f4c <u8x8_d_ssd1305_128x32_noname+0x8c>
    default:
      return 0;
 8002f48:	2300      	movs	r3, #0
 8002f4a:	e000      	b.n	8002f4e <u8x8_d_ssd1305_128x32_noname+0x8e>
  }
  return 1;
 8002f4c:	2301      	movs	r3, #1
}
 8002f4e:	4618      	mov	r0, r3
 8002f50:	3710      	adds	r7, #16
 8002f52:	46bd      	mov	sp, r7
 8002f54:	bd80      	pop	{r7, pc}
 8002f56:	bf00      	nop
 8002f58:	0801d3a4 	.word	0x0801d3a4
 8002f5c:	0801d3b0 	.word	0x0801d3b0
 8002f60:	0801d3d4 	.word	0x0801d3d4
 8002f64:	0801d3bc 	.word	0x0801d3bc

08002f68 <u8x8_d_helper_display_setup_memory>:
  this is a helper function for the U8X8_MSG_DISPLAY_SETUP_MEMORY function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b083      	sub	sp, #12
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
      /* 1) set display info struct */
      u8x8->display_info = display_info;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	683a      	ldr	r2, [r7, #0]
 8002f76:	601a      	str	r2, [r3, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	7c9a      	ldrb	r2, [r3, #18]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
}
 8002f84:	bf00      	nop
 8002f86:	370c      	adds	r7, #12
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8e:	4770      	bx	lr

08002f90 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
 8002f90:	b590      	push	{r4, r7, lr}
 8002f92:	b083      	sub	sp, #12
 8002f94:	af00      	add	r7, sp, #0
 8002f96:	6078      	str	r0, [r7, #4]
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	695c      	ldr	r4, [r3, #20]
 8002f9c:	2300      	movs	r3, #0
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	2128      	movs	r1, #40	; 0x28
 8002fa2:	6878      	ldr	r0, [r7, #4]
 8002fa4:	47a0      	blx	r4
      u8x8_cad_Init(u8x8);              /* this will also call U8X8_MSG_BYTE_INIT, byte init will NOT call GPIO_INIT */
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	68dc      	ldr	r4, [r3, #12]
 8002faa:	2300      	movs	r3, #0
 8002fac:	2200      	movs	r2, #0
 8002fae:	2114      	movs	r1, #20
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	47a0      	blx	r4

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	214b      	movs	r1, #75	; 0x4b
 8002fb8:	6878      	ldr	r0, [r7, #4]
 8002fba:	f000 f886 	bl	80030ca <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	791b      	ldrb	r3, [r3, #4]
 8002fc4:	461a      	mov	r2, r3
 8002fc6:	2129      	movs	r1, #41	; 0x29
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 f87e 	bl	80030ca <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
 8002fce:	2200      	movs	r2, #0
 8002fd0:	214b      	movs	r1, #75	; 0x4b
 8002fd2:	6878      	ldr	r0, [r7, #4]
 8002fd4:	f000 f879 	bl	80030ca <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	791b      	ldrb	r3, [r3, #4]
 8002fde:	461a      	mov	r2, r3
 8002fe0:	2129      	movs	r1, #41	; 0x29
 8002fe2:	6878      	ldr	r0, [r7, #4]
 8002fe4:	f000 f871 	bl	80030ca <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
 8002fe8:	2201      	movs	r2, #1
 8002fea:	214b      	movs	r1, #75	; 0x4b
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f000 f86c 	bl	80030ca <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	795b      	ldrb	r3, [r3, #5]
 8002ff8:	461a      	mov	r2, r3
 8002ffa:	2129      	movs	r1, #41	; 0x29
 8002ffc:	6878      	ldr	r0, [r7, #4]
 8002ffe:	f000 f864 	bl	80030ca <u8x8_gpio_call>
}    
 8003002:	bf00      	nop
 8003004:	370c      	adds	r7, #12
 8003006:	46bd      	mov	sp, r7
 8003008:	bd90      	pop	{r4, r7, pc}

0800300a <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
 800300a:	b590      	push	{r4, r7, lr}
 800300c:	b085      	sub	sp, #20
 800300e:	af00      	add	r7, sp, #0
 8003010:	6078      	str	r0, [r7, #4]
 8003012:	4608      	mov	r0, r1
 8003014:	4611      	mov	r1, r2
 8003016:	461a      	mov	r2, r3
 8003018:	4603      	mov	r3, r0
 800301a:	70fb      	strb	r3, [r7, #3]
 800301c:	460b      	mov	r3, r1
 800301e:	70bb      	strb	r3, [r7, #2]
 8003020:	4613      	mov	r3, r2
 8003022:	707b      	strb	r3, [r7, #1]
  u8x8_tile_t tile;
  tile.x_pos = x;
 8003024:	78fb      	ldrb	r3, [r7, #3]
 8003026:	737b      	strb	r3, [r7, #13]
  tile.y_pos = y;
 8003028:	78bb      	ldrb	r3, [r7, #2]
 800302a:	73bb      	strb	r3, [r7, #14]
  tile.cnt = cnt;
 800302c:	787b      	ldrb	r3, [r7, #1]
 800302e:	733b      	strb	r3, [r7, #12]
  tile.tile_ptr = tile_ptr;
 8003030:	6a3b      	ldr	r3, [r7, #32]
 8003032:	60bb      	str	r3, [r7, #8]
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	689c      	ldr	r4, [r3, #8]
 8003038:	f107 0308 	add.w	r3, r7, #8
 800303c:	2201      	movs	r2, #1
 800303e:	210f      	movs	r1, #15
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	47a0      	blx	r4
 8003044:	4603      	mov	r3, r0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3714      	adds	r7, #20
 800304a:	46bd      	mov	sp, r7
 800304c:	bd90      	pop	{r4, r7, pc}

0800304e <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
 800304e:	b590      	push	{r4, r7, lr}
 8003050:	b083      	sub	sp, #12
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	689c      	ldr	r4, [r3, #8]
 800305a:	2300      	movs	r3, #0
 800305c:	2200      	movs	r2, #0
 800305e:	2109      	movs	r1, #9
 8003060:	6878      	ldr	r0, [r7, #4]
 8003062:	47a0      	blx	r4
}
 8003064:	bf00      	nop
 8003066:	370c      	adds	r7, #12
 8003068:	46bd      	mov	sp, r7
 800306a:	bd90      	pop	{r4, r7, pc}

0800306c <u8x8_InitDisplay>:
  In some cases it is not required to init the display (for example if the display is already running, but the controller comes out of deep sleep mode).
  Then InitDisplay can be skipped, but u8x8_InitInterface()  (== u8x8_gpio_Init() and u8x8_cad_Init()) need to be executed.

*/
void u8x8_InitDisplay(u8x8_t *u8x8)
{
 800306c:	b590      	push	{r4, r7, lr}
 800306e:	b083      	sub	sp, #12
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);       /* this will call u8x8_d_helper_display_init() and send the init seqence to the display */
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	689c      	ldr	r4, [r3, #8]
 8003078:	2300      	movs	r3, #0
 800307a:	2200      	movs	r2, #0
 800307c:	210a      	movs	r1, #10
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	47a0      	blx	r4
  /* u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, 0, NULL);  */ /* It would make sense to call flip mode 0 here after U8X8_MSG_DISPLAY_INIT */
}
 8003082:	bf00      	nop
 8003084:	370c      	adds	r7, #12
 8003086:	46bd      	mov	sp, r7
 8003088:	bd90      	pop	{r4, r7, pc}

0800308a <u8x8_SetPowerSave>:

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
 800308a:	b590      	push	{r4, r7, lr}
 800308c:	b083      	sub	sp, #12
 800308e:	af00      	add	r7, sp, #0
 8003090:	6078      	str	r0, [r7, #4]
 8003092:	460b      	mov	r3, r1
 8003094:	70fb      	strb	r3, [r7, #3]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	689c      	ldr	r4, [r3, #8]
 800309a:	78fa      	ldrb	r2, [r7, #3]
 800309c:	2300      	movs	r3, #0
 800309e:	210b      	movs	r1, #11
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	47a0      	blx	r4
}
 80030a4:	bf00      	nop
 80030a6:	370c      	adds	r7, #12
 80030a8:	46bd      	mov	sp, r7
 80030aa:	bd90      	pop	{r4, r7, pc}

080030ac <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
 80030ac:	b590      	push	{r4, r7, lr}
 80030ae:	b083      	sub	sp, #12
 80030b0:	af00      	add	r7, sp, #0
 80030b2:	6078      	str	r0, [r7, #4]
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689c      	ldr	r4, [r3, #8]
 80030b8:	2300      	movs	r3, #0
 80030ba:	2200      	movs	r2, #0
 80030bc:	2110      	movs	r1, #16
 80030be:	6878      	ldr	r0, [r7, #4]
 80030c0:	47a0      	blx	r4
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	bd90      	pop	{r4, r7, pc}

080030ca <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
 80030ca:	b590      	push	{r4, r7, lr}
 80030cc:	b083      	sub	sp, #12
 80030ce:	af00      	add	r7, sp, #0
 80030d0:	6078      	str	r0, [r7, #4]
 80030d2:	460b      	mov	r3, r1
 80030d4:	70fb      	strb	r3, [r7, #3]
 80030d6:	4613      	mov	r3, r2
 80030d8:	70bb      	strb	r3, [r7, #2]
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	695c      	ldr	r4, [r3, #20]
 80030de:	78ba      	ldrb	r2, [r7, #2]
 80030e0:	78f9      	ldrb	r1, [r7, #3]
 80030e2:	2300      	movs	r3, #0
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	47a0      	blx	r4
}
 80030e8:	bf00      	nop
 80030ea:	370c      	adds	r7, #12
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd90      	pop	{r4, r7, pc}

080030f0 <u8x8_dummy_cb>:

#include "u8x8.h"

/* universal dummy callback, which will be default for all callbacks */
uint8_t u8x8_dummy_cb(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b085      	sub	sp, #20
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	60f8      	str	r0, [r7, #12]
 80030f8:	607b      	str	r3, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	72fb      	strb	r3, [r7, #11]
 80030fe:	4613      	mov	r3, r2
 8003100:	72bb      	strb	r3, [r7, #10]
  /* the dummy callback will not handle any message and will fail for all messages */
  return 0;
 8003102:	2300      	movs	r3, #0
}
 8003104:	4618      	mov	r0, r3
 8003106:	3714      	adds	r7, #20
 8003108:	46bd      	mov	sp, r7
 800310a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800310e:	4770      	bx	lr

08003110 <u8x8_SetupDefaults>:
    Setup u8x8
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
 8003110:	b480      	push	{r7}
 8003112:	b083      	sub	sp, #12
 8003114:	af00      	add	r7, sp, #0
 8003116:	6078      	str	r0, [r7, #4]
    u8x8->display_info = NULL;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	601a      	str	r2, [r3, #0]
    u8x8->display_cb = u8x8_dummy_cb;
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a11      	ldr	r2, [pc, #68]	; (8003168 <u8x8_SetupDefaults+0x58>)
 8003122:	609a      	str	r2, [r3, #8]
    u8x8->cad_cb = u8x8_dummy_cb;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a10      	ldr	r2, [pc, #64]	; (8003168 <u8x8_SetupDefaults+0x58>)
 8003128:	60da      	str	r2, [r3, #12]
    u8x8->byte_cb = u8x8_dummy_cb;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a0e      	ldr	r2, [pc, #56]	; (8003168 <u8x8_SetupDefaults+0x58>)
 800312e:	611a      	str	r2, [r3, #16]
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	4a0d      	ldr	r2, [pc, #52]	; (8003168 <u8x8_SetupDefaults+0x58>)
 8003134:	615a      	str	r2, [r3, #20]
    u8x8->is_font_inverse_mode = 0;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	2200      	movs	r2, #0
 800313a:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2200      	movs	r2, #0
 800314a:	619a      	str	r2, [r3, #24]
    u8x8->i2c_address = 255;
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	22ff      	movs	r2, #255	; 0xff
 8003150:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	22ff      	movs	r2, #255	; 0xff
 8003158:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
  }
#endif
}
 800315c:	bf00      	nop
 800315e:	370c      	adds	r7, #12
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr
 8003168:	080030f1 	.word	0x080030f1

0800316c <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	60f8      	str	r0, [r7, #12]
 8003174:	60b9      	str	r1, [r7, #8]
 8003176:	607a      	str	r2, [r7, #4]
 8003178:	603b      	str	r3, [r7, #0]
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);
 800317a:	68f8      	ldr	r0, [r7, #12]
 800317c:	f7ff ffc8 	bl	8003110 <u8x8_SetupDefaults>

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	68ba      	ldr	r2, [r7, #8]
 8003184:	609a      	str	r2, [r3, #8]
  u8x8->cad_cb = cad_cb;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	60da      	str	r2, [r3, #12]
  u8x8->byte_cb = byte_cb;
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	611a      	str	r2, [r3, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	69ba      	ldr	r2, [r7, #24]
 8003196:	615a      	str	r2, [r3, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
 8003198:	68f8      	ldr	r0, [r7, #12]
 800319a:	f7ff ff58 	bl	800304e <u8x8_SetupMemory>
}
 800319e:	bf00      	nop
 80031a0:	3710      	adds	r7, #16
 80031a2:	46bd      	mov	sp, r7
 80031a4:	bd80      	pop	{r7, pc}
	...

080031a8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b08a      	sub	sp, #40	; 0x28
 80031ac:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80031ae:	f002 f970 	bl	8005492 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80031b2:	f000 f92f 	bl	8003414 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80031b6:	f000 fbb7 	bl	8003928 <MX_GPIO_Init>
  MX_DMA_Init();
 80031ba:	f000 fb97 	bl	80038ec <MX_DMA_Init>
  MX_USART2_UART_Init();
 80031be:	f000 fb65 	bl	800388c <MX_USART2_UART_Init>
  MX_CAN1_Init();
 80031c2:	f000 f9ed 	bl	80035a0 <MX_CAN1_Init>
  MX_I2C1_Init();
 80031c6:	f000 fa63 	bl	8003690 <MX_I2C1_Init>
  MX_ADC1_Init();
 80031ca:	f000 f985 	bl	80034d8 <MX_ADC1_Init>
  MX_DAC1_Init();
 80031ce:	f000 fa1f 	bl	8003610 <MX_DAC1_Init>
  MX_TIM6_Init();
 80031d2:	f000 faef 	bl	80037b4 <MX_TIM6_Init>
  MX_TIM7_Init();
 80031d6:	f000 fb23 	bl	8003820 <MX_TIM7_Init>
  MX_TIM2_Init();
 80031da:	f000 fa9d 	bl	8003718 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start(&htim2);
 80031de:	4866      	ldr	r0, [pc, #408]	; (8003378 <main+0x1d0>)
 80031e0:	f006 fcce 	bl	8009b80 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start(&htim7);
 80031e4:	4865      	ldr	r0, [pc, #404]	; (800337c <main+0x1d4>)
 80031e6:	f006 fccb 	bl	8009b80 <HAL_TIM_Base_Start>
	HAL_TIM_Base_Start_IT(&htim6);
 80031ea:	4865      	ldr	r0, [pc, #404]	; (8003380 <main+0x1d8>)
 80031ec:	f006 fd14 	bl	8009c18 <HAL_TIM_Base_Start_IT>

	HAL_DAC_Start_DMA(&hdac1, DAC_CHANNEL_1, (uint32_t*)output_LUT, OUTPUT_SAMPLES, DAC_ALIGN_12B_R);
 80031f0:	2300      	movs	r3, #0
 80031f2:	9300      	str	r3, [sp, #0]
 80031f4:	f240 1351 	movw	r3, #337	; 0x151
 80031f8:	4a62      	ldr	r2, [pc, #392]	; (8003384 <main+0x1dc>)
 80031fa:	2100      	movs	r1, #0
 80031fc:	4862      	ldr	r0, [pc, #392]	; (8003388 <main+0x1e0>)
 80031fe:	f003 ffdd 	bl	80071bc <HAL_DAC_Start_DMA>
//	HAL_DAC_Start(&hdac1, DAC_CHANNEL_1);
//	HAL_DAC_Start(&hdac1, DAC_CHANNEL_2);

	setOutMuxBit(DRST_BIT, GPIO_PIN_RESET);
 8003202:	2304      	movs	r3, #4
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2100      	movs	r1, #0
 8003208:	4618      	mov	r0, r3
 800320a:	f000 fd7f 	bl	8003d0c <setOutMuxBit>
	delayMicro(2);
 800320e:	2002      	movs	r0, #2
 8003210:	f000 fc16 	bl	8003a40 <delayMicro>
	setOutMuxBit(DRST_BIT, GPIO_PIN_SET);
 8003214:	2304      	movs	r3, #4
 8003216:	b2db      	uxtb	r3, r3
 8003218:	2101      	movs	r1, #1
 800321a:	4618      	mov	r0, r3
 800321c:	f000 fd76 	bl	8003d0c <setOutMuxBit>
	u8g2_Setup_ssd1305_i2c_128x32_noname_f(&u8g2, U8G2_R0, u8x8_byte_i2c,
 8003220:	4b5a      	ldr	r3, [pc, #360]	; (800338c <main+0x1e4>)
 8003222:	4a5b      	ldr	r2, [pc, #364]	; (8003390 <main+0x1e8>)
 8003224:	495b      	ldr	r1, [pc, #364]	; (8003394 <main+0x1ec>)
 8003226:	485c      	ldr	r0, [pc, #368]	; (8003398 <main+0x1f0>)
 8003228:	f7fe f954 	bl	80014d4 <u8g2_Setup_ssd1305_i2c_128x32_noname_f>
			u8x8_gpio_and_delay);
	u8g2_InitDisplay(&u8g2);
 800322c:	485a      	ldr	r0, [pc, #360]	; (8003398 <main+0x1f0>)
 800322e:	f7ff ff1d 	bl	800306c <u8x8_InitDisplay>
	u8g2_ClearDisplay(&u8g2);
 8003232:	4859      	ldr	r0, [pc, #356]	; (8003398 <main+0x1f0>)
 8003234:	f7fe f928 	bl	8001488 <u8g2_ClearDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
 8003238:	2100      	movs	r1, #0
 800323a:	4857      	ldr	r0, [pc, #348]	; (8003398 <main+0x1f0>)
 800323c:	f7ff ff25 	bl	800308a <u8x8_SetPowerSave>
	setOutMuxBit(DEN_BIT, GPIO_PIN_SET);
 8003240:	2303      	movs	r3, #3
 8003242:	b2db      	uxtb	r3, r3
 8003244:	2101      	movs	r1, #1
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fd60 	bl	8003d0c <setOutMuxBit>

	setCANFilter(IDin, 0x7ff, 0);
 800324c:	f240 1323 	movw	r3, #291	; 0x123
 8003250:	2200      	movs	r2, #0
 8003252:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8003256:	4618      	mov	r0, r3
 8003258:	f000 fcd2 	bl	8003c00 <setCANFilter>
	HAL_CAN_Start(&hcan1);
 800325c:	484f      	ldr	r0, [pc, #316]	; (800339c <main+0x1f4>)
 800325e:	f003 f9ee 	bl	800663e <HAL_CAN_Start>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8003262:	2102      	movs	r1, #2
 8003264:	484d      	ldr	r0, [pc, #308]	; (800339c <main+0x1f4>)
 8003266:	f003 fc6d 	bl	8006b44 <HAL_CAN_ActivateNotification>
	HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 800326a:	2101      	movs	r1, #1
 800326c:	484b      	ldr	r0, [pc, #300]	; (800339c <main+0x1f4>)
 800326e:	f003 fc69 	bl	8006b44 <HAL_CAN_ActivateNotification>

	serialPrintln("charIOT-Key-C");
 8003272:	484b      	ldr	r0, [pc, #300]	; (80033a0 <main+0x1f8>)
 8003274:	f000 fbc6 	bl	8003a04 <serialPrintln>

        //Generate initial wave tables

        char buf [20];
        for (int t = 0; t < 12; t++) {
 8003278:	2300      	movs	r3, #0
 800327a:	61fb      	str	r3, [r7, #28]
 800327c:	e014      	b.n	80032a8 <main+0x100>

            uint32_t samples =  wavetable_sizes[t];
 800327e:	4a49      	ldr	r2, [pc, #292]	; (80033a4 <main+0x1fc>)
 8003280:	69fb      	ldr	r3, [r7, #28]
 8003282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003286:	61bb      	str	r3, [r7, #24]

            sprintf(buf, "\n\n Lut: %i------", t);
 8003288:	1d3b      	adds	r3, r7, #4
 800328a:	69fa      	ldr	r2, [r7, #28]
 800328c:	4946      	ldr	r1, [pc, #280]	; (80033a8 <main+0x200>)
 800328e:	4618      	mov	r0, r3
 8003290:	f00b fd34 	bl	800ecfc <siprintf>
            //serialPrintln(buf);

            choose_wave_gen(wave_form, t, samples); // 0 - sawtooth; 1 - sine; 2 - square; 3 - triangle; 4 - special; other/default - sawtooth
 8003294:	4b45      	ldr	r3, [pc, #276]	; (80033ac <main+0x204>)
 8003296:	781b      	ldrb	r3, [r3, #0]
 8003298:	69ba      	ldr	r2, [r7, #24]
 800329a:	69f9      	ldr	r1, [r7, #28]
 800329c:	4618      	mov	r0, r3
 800329e:	f000 ffcb 	bl	8004238 <choose_wave_gen>
        for (int t = 0; t < 12; t++) {
 80032a2:	69fb      	ldr	r3, [r7, #28]
 80032a4:	3301      	adds	r3, #1
 80032a6:	61fb      	str	r3, [r7, #28]
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	2b0b      	cmp	r3, #11
 80032ac:	dde7      	ble.n	800327e <main+0xd6>
        }

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80032ae:	f007 fd9b 	bl	800ade8 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of keysMutex */
  keysMutexHandle = osMutexNew(&keysMutex_attributes);
 80032b2:	483f      	ldr	r0, [pc, #252]	; (80033b0 <main+0x208>)
 80032b4:	f007 fe8f 	bl	800afd6 <osMutexNew>
 80032b8:	4603      	mov	r3, r0
 80032ba:	4a3e      	ldr	r2, [pc, #248]	; (80033b4 <main+0x20c>)
 80032bc:	6013      	str	r3, [r2, #0]

  /* creation of knobsMutex */
  knobsMutexHandle = osMutexNew(&knobsMutex_attributes);
 80032be:	483e      	ldr	r0, [pc, #248]	; (80033b8 <main+0x210>)
 80032c0:	f007 fe89 	bl	800afd6 <osMutexNew>
 80032c4:	4603      	mov	r3, r0
 80032c6:	4a3d      	ldr	r2, [pc, #244]	; (80033bc <main+0x214>)
 80032c8:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_MUTEX */
	/* add mutexes, ... */
	osMutexRelease(keysMutexHandle);
 80032ca:	4b3a      	ldr	r3, [pc, #232]	; (80033b4 <main+0x20c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f007 ff52 	bl	800b178 <osMutexRelease>
	osMutexRelease(knobsMutexHandle);
 80032d4:	4b39      	ldr	r3, [pc, #228]	; (80033bc <main+0x214>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4618      	mov	r0, r3
 80032da:	f007 ff4d 	bl	800b178 <osMutexRelease>
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of CAN_TX_Semaphore */
  CAN_TX_SemaphoreHandle = osSemaphoreNew(3, 3, &CAN_TX_Semaphore_attributes);
 80032de:	4a38      	ldr	r2, [pc, #224]	; (80033c0 <main+0x218>)
 80032e0:	2103      	movs	r1, #3
 80032e2:	2003      	movs	r0, #3
 80032e4:	f007 ff85 	bl	800b1f2 <osSemaphoreNew>
 80032e8:	4603      	mov	r3, r0
 80032ea:	4a36      	ldr	r2, [pc, #216]	; (80033c4 <main+0x21c>)
 80032ec:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_SEMAPHORES */
	/* add semaphores, ... */
	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80032ee:	4b35      	ldr	r3, [pc, #212]	; (80033c4 <main+0x21c>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4618      	mov	r0, r3
 80032f4:	f008 f858 	bl	800b3a8 <osSemaphoreRelease>
	/* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of msgInQ */
  msgInQHandle = osMessageQueueNew (36, sizeof(CAN_MSG_t), &msgInQ_attributes);
 80032f8:	4a33      	ldr	r2, [pc, #204]	; (80033c8 <main+0x220>)
 80032fa:	210c      	movs	r1, #12
 80032fc:	2024      	movs	r0, #36	; 0x24
 80032fe:	f008 f897 	bl	800b430 <osMessageQueueNew>
 8003302:	4603      	mov	r3, r0
 8003304:	4a31      	ldr	r2, [pc, #196]	; (80033cc <main+0x224>)
 8003306:	6013      	str	r3, [r2, #0]

  /* creation of msgOutQ */
  msgOutQHandle = osMessageQueueNew (36, sizeof(CAN_MSG_t), &msgOutQ_attributes);
 8003308:	4a31      	ldr	r2, [pc, #196]	; (80033d0 <main+0x228>)
 800330a:	210c      	movs	r1, #12
 800330c:	2024      	movs	r0, #36	; 0x24
 800330e:	f008 f88f 	bl	800b430 <osMessageQueueNew>
 8003312:	4603      	mov	r3, r0
 8003314:	4a2f      	ldr	r2, [pc, #188]	; (80033d4 <main+0x22c>)
 8003316:	6013      	str	r3, [r2, #0]
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8003318:	4a2f      	ldr	r2, [pc, #188]	; (80033d8 <main+0x230>)
 800331a:	2100      	movs	r1, #0
 800331c:	482f      	ldr	r0, [pc, #188]	; (80033dc <main+0x234>)
 800331e:	f007 fdad 	bl	800ae7c <osThreadNew>
 8003322:	4603      	mov	r3, r0
 8003324:	4a2e      	ldr	r2, [pc, #184]	; (80033e0 <main+0x238>)
 8003326:	6013      	str	r3, [r2, #0]

  /* creation of scanKeys */
  scanKeysHandle = osThreadNew(scanKeysTask, NULL, &scanKeys_attributes);
 8003328:	4a2e      	ldr	r2, [pc, #184]	; (80033e4 <main+0x23c>)
 800332a:	2100      	movs	r1, #0
 800332c:	482e      	ldr	r0, [pc, #184]	; (80033e8 <main+0x240>)
 800332e:	f007 fda5 	bl	800ae7c <osThreadNew>
 8003332:	4603      	mov	r3, r0
 8003334:	4a2d      	ldr	r2, [pc, #180]	; (80033ec <main+0x244>)
 8003336:	6013      	str	r3, [r2, #0]

  /* creation of displayUpdate */
  displayUpdateHandle = osThreadNew(displayUpdateTask, NULL, &displayUpdate_attributes);
 8003338:	4a2d      	ldr	r2, [pc, #180]	; (80033f0 <main+0x248>)
 800333a:	2100      	movs	r1, #0
 800333c:	482d      	ldr	r0, [pc, #180]	; (80033f4 <main+0x24c>)
 800333e:	f007 fd9d 	bl	800ae7c <osThreadNew>
 8003342:	4603      	mov	r3, r0
 8003344:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <main+0x250>)
 8003346:	6013      	str	r3, [r2, #0]

  /* creation of decodeTask */
  decodeTaskHandle = osThreadNew(decode, NULL, &decodeTask_attributes);
 8003348:	4a2c      	ldr	r2, [pc, #176]	; (80033fc <main+0x254>)
 800334a:	2100      	movs	r1, #0
 800334c:	482c      	ldr	r0, [pc, #176]	; (8003400 <main+0x258>)
 800334e:	f007 fd95 	bl	800ae7c <osThreadNew>
 8003352:	4603      	mov	r3, r0
 8003354:	4a2b      	ldr	r2, [pc, #172]	; (8003404 <main+0x25c>)
 8003356:	6013      	str	r3, [r2, #0]

  /* creation of CAN_TX_TaskName */
  CAN_TX_TaskNameHandle = osThreadNew(CAN_Transmit, NULL, &CAN_TX_TaskName_attributes);
 8003358:	4a2b      	ldr	r2, [pc, #172]	; (8003408 <main+0x260>)
 800335a:	2100      	movs	r1, #0
 800335c:	482b      	ldr	r0, [pc, #172]	; (800340c <main+0x264>)
 800335e:	f007 fd8d 	bl	800ae7c <osThreadNew>
 8003362:	4603      	mov	r3, r0
 8003364:	4a2a      	ldr	r2, [pc, #168]	; (8003410 <main+0x268>)
 8003366:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
	/* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8003368:	f007 fd62 	bl	800ae30 <osKernelStart>
 800336c:	2300      	movs	r3, #0
  /* USER CODE BEGIN WHILE */
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  /* USER CODE END 3 */
}
 800336e:	4618      	mov	r0, r3
 8003370:	3720      	adds	r7, #32
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	20000468 	.word	0x20000468
 800337c:	20000500 	.word	0x20000500
 8003380:	200004b4 	.word	0x200004b4
 8003384:	200005f8 	.word	0x200005f8
 8003388:	200003b8 	.word	0x200003b8
 800338c:	08003d95 	.word	0x08003d95
 8003390:	08003db5 	.word	0x08003db5
 8003394:	0801d388 	.word	0x0801d388
 8003398:	2000201c 	.word	0x2000201c
 800339c:	20000390 	.word	0x20000390
 80033a0:	080105d4 	.word	0x080105d4
 80033a4:	0801d51c 	.word	0x0801d51c
 80033a8:	080105e4 	.word	0x080105e4
 80033ac:	200020bc 	.word	0x200020bc
 80033b0:	0801d4ec 	.word	0x0801d4ec
 80033b4:	200005ec 	.word	0x200005ec
 80033b8:	0801d4fc 	.word	0x0801d4fc
 80033bc:	200005f0 	.word	0x200005f0
 80033c0:	0801d50c 	.word	0x0801d50c
 80033c4:	200005f4 	.word	0x200005f4
 80033c8:	0801d4bc 	.word	0x0801d4bc
 80033cc:	200005e4 	.word	0x200005e4
 80033d0:	0801d4d4 	.word	0x0801d4d4
 80033d4:	200005e8 	.word	0x200005e8
 80033d8:	0801d408 	.word	0x0801d408
 80033dc:	080048fd 	.word	0x080048fd
 80033e0:	200005d0 	.word	0x200005d0
 80033e4:	0801d42c 	.word	0x0801d42c
 80033e8:	0800490d 	.word	0x0800490d
 80033ec:	200005d4 	.word	0x200005d4
 80033f0:	0801d450 	.word	0x0801d450
 80033f4:	08004a29 	.word	0x08004a29
 80033f8:	200005d8 	.word	0x200005d8
 80033fc:	0801d474 	.word	0x0801d474
 8003400:	08004ca5 	.word	0x08004ca5
 8003404:	200005dc 	.word	0x200005dc
 8003408:	0801d498 	.word	0x0801d498
 800340c:	08004ce1 	.word	0x08004ce1
 8003410:	200005e0 	.word	0x200005e0

08003414 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b096      	sub	sp, #88	; 0x58
 8003418:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800341a:	f107 0314 	add.w	r3, r7, #20
 800341e:	2244      	movs	r2, #68	; 0x44
 8003420:	2100      	movs	r1, #0
 8003422:	4618      	mov	r0, r3
 8003424:	f00b fb54 	bl	800ead0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003428:	463b      	mov	r3, r7
 800342a:	2200      	movs	r2, #0
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	605a      	str	r2, [r3, #4]
 8003430:	609a      	str	r2, [r3, #8]
 8003432:	60da      	str	r2, [r3, #12]
 8003434:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003436:	f44f 7000 	mov.w	r0, #512	; 0x200
 800343a:	f005 f991 	bl	8008760 <HAL_PWREx_ControlVoltageScaling>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d001      	beq.n	8003448 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8003444:	f001 fc7e 	bl	8004d44 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8003448:	f005 f96c 	bl	8008724 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800344c:	4b21      	ldr	r3, [pc, #132]	; (80034d4 <SystemClock_Config+0xc0>)
 800344e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003452:	4a20      	ldr	r2, [pc, #128]	; (80034d4 <SystemClock_Config+0xc0>)
 8003454:	f023 0318 	bic.w	r3, r3, #24
 8003458:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 800345c:	2314      	movs	r3, #20
 800345e:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003460:	2301      	movs	r3, #1
 8003462:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003464:	2301      	movs	r3, #1
 8003466:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003468:	2300      	movs	r3, #0
 800346a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 800346c:	2360      	movs	r3, #96	; 0x60
 800346e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003470:	2302      	movs	r3, #2
 8003472:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003474:	2301      	movs	r3, #1
 8003476:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003478:	2301      	movs	r3, #1
 800347a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 40;
 800347c:	2328      	movs	r3, #40	; 0x28
 800347e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003480:	2307      	movs	r3, #7
 8003482:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003484:	2302      	movs	r3, #2
 8003486:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003488:	2302      	movs	r3, #2
 800348a:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800348c:	f107 0314 	add.w	r3, r7, #20
 8003490:	4618      	mov	r0, r3
 8003492:	f005 f9bb 	bl	800880c <HAL_RCC_OscConfig>
 8003496:	4603      	mov	r3, r0
 8003498:	2b00      	cmp	r3, #0
 800349a:	d001      	beq.n	80034a0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 800349c:	f001 fc52 	bl	8004d44 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80034a0:	230f      	movs	r3, #15
 80034a2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80034a4:	2303      	movs	r3, #3
 80034a6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80034ac:	2300      	movs	r3, #0
 80034ae:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80034b0:	2300      	movs	r3, #0
 80034b2:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80034b4:	463b      	mov	r3, r7
 80034b6:	2104      	movs	r1, #4
 80034b8:	4618      	mov	r0, r3
 80034ba:	f005 fdbb 	bl	8009034 <HAL_RCC_ClockConfig>
 80034be:	4603      	mov	r3, r0
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d001      	beq.n	80034c8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80034c4:	f001 fc3e 	bl	8004d44 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80034c8:	f006 fa00 	bl	80098cc <HAL_RCCEx_EnableMSIPLLMode>
}
 80034cc:	bf00      	nop
 80034ce:	3758      	adds	r7, #88	; 0x58
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}
 80034d4:	40021000 	.word	0x40021000

080034d8 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80034d8:	b580      	push	{r7, lr}
 80034da:	b086      	sub	sp, #24
 80034dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80034de:	463b      	mov	r3, r7
 80034e0:	2200      	movs	r2, #0
 80034e2:	601a      	str	r2, [r3, #0]
 80034e4:	605a      	str	r2, [r3, #4]
 80034e6:	609a      	str	r2, [r3, #8]
 80034e8:	60da      	str	r2, [r3, #12]
 80034ea:	611a      	str	r2, [r3, #16]
 80034ec:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80034ee:	4b29      	ldr	r3, [pc, #164]	; (8003594 <MX_ADC1_Init+0xbc>)
 80034f0:	4a29      	ldr	r2, [pc, #164]	; (8003598 <MX_ADC1_Init+0xc0>)
 80034f2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 80034f4:	4b27      	ldr	r3, [pc, #156]	; (8003594 <MX_ADC1_Init+0xbc>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80034fa:	4b26      	ldr	r3, [pc, #152]	; (8003594 <MX_ADC1_Init+0xbc>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8003500:	4b24      	ldr	r3, [pc, #144]	; (8003594 <MX_ADC1_Init+0xbc>)
 8003502:	2200      	movs	r2, #0
 8003504:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8003506:	4b23      	ldr	r3, [pc, #140]	; (8003594 <MX_ADC1_Init+0xbc>)
 8003508:	2200      	movs	r2, #0
 800350a:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800350c:	4b21      	ldr	r3, [pc, #132]	; (8003594 <MX_ADC1_Init+0xbc>)
 800350e:	2204      	movs	r2, #4
 8003510:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8003512:	4b20      	ldr	r3, [pc, #128]	; (8003594 <MX_ADC1_Init+0xbc>)
 8003514:	2200      	movs	r2, #0
 8003516:	761a      	strb	r2, [r3, #24]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8003518:	4b1e      	ldr	r3, [pc, #120]	; (8003594 <MX_ADC1_Init+0xbc>)
 800351a:	2200      	movs	r2, #0
 800351c:	765a      	strb	r2, [r3, #25]
  hadc1.Init.NbrOfConversion = 1;
 800351e:	4b1d      	ldr	r3, [pc, #116]	; (8003594 <MX_ADC1_Init+0xbc>)
 8003520:	2201      	movs	r2, #1
 8003522:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8003524:	4b1b      	ldr	r3, [pc, #108]	; (8003594 <MX_ADC1_Init+0xbc>)
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800352c:	4b19      	ldr	r3, [pc, #100]	; (8003594 <MX_ADC1_Init+0xbc>)
 800352e:	2200      	movs	r2, #0
 8003530:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8003532:	4b18      	ldr	r3, [pc, #96]	; (8003594 <MX_ADC1_Init+0xbc>)
 8003534:	2200      	movs	r2, #0
 8003536:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8003538:	4b16      	ldr	r3, [pc, #88]	; (8003594 <MX_ADC1_Init+0xbc>)
 800353a:	2200      	movs	r2, #0
 800353c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8003540:	4b14      	ldr	r3, [pc, #80]	; (8003594 <MX_ADC1_Init+0xbc>)
 8003542:	2200      	movs	r2, #0
 8003544:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8003546:	4b13      	ldr	r3, [pc, #76]	; (8003594 <MX_ADC1_Init+0xbc>)
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800354e:	4811      	ldr	r0, [pc, #68]	; (8003594 <MX_ADC1_Init+0xbc>)
 8003550:	f002 f988 	bl	8005864 <HAL_ADC_Init>
 8003554:	4603      	mov	r3, r0
 8003556:	2b00      	cmp	r3, #0
 8003558:	d001      	beq.n	800355e <MX_ADC1_Init+0x86>
  {
    Error_Handler();
 800355a:	f001 fbf3 	bl	8004d44 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 800355e:	4b0f      	ldr	r3, [pc, #60]	; (800359c <MX_ADC1_Init+0xc4>)
 8003560:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8003562:	2306      	movs	r3, #6
 8003564:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8003566:	2300      	movs	r3, #0
 8003568:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 800356a:	237f      	movs	r3, #127	; 0x7f
 800356c:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800356e:	2304      	movs	r3, #4
 8003570:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8003572:	2300      	movs	r3, #0
 8003574:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8003576:	463b      	mov	r3, r7
 8003578:	4619      	mov	r1, r3
 800357a:	4806      	ldr	r0, [pc, #24]	; (8003594 <MX_ADC1_Init+0xbc>)
 800357c:	f002 faba 	bl	8005af4 <HAL_ADC_ConfigChannel>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8003586:	f001 fbdd 	bl	8004d44 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800358a:	bf00      	nop
 800358c:	3718      	adds	r7, #24
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	2000032c 	.word	0x2000032c
 8003598:	50040000 	.word	0x50040000
 800359c:	14f00020 	.word	0x14f00020

080035a0 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80035a4:	4b18      	ldr	r3, [pc, #96]	; (8003608 <MX_CAN1_Init+0x68>)
 80035a6:	4a19      	ldr	r2, [pc, #100]	; (800360c <MX_CAN1_Init+0x6c>)
 80035a8:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 40;
 80035aa:	4b17      	ldr	r3, [pc, #92]	; (8003608 <MX_CAN1_Init+0x68>)
 80035ac:	2228      	movs	r2, #40	; 0x28
 80035ae:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80035b0:	4b15      	ldr	r3, [pc, #84]	; (8003608 <MX_CAN1_Init+0x68>)
 80035b2:	2200      	movs	r2, #0
 80035b4:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_2TQ;
 80035b6:	4b14      	ldr	r3, [pc, #80]	; (8003608 <MX_CAN1_Init+0x68>)
 80035b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80035bc:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_13TQ;
 80035be:	4b12      	ldr	r3, [pc, #72]	; (8003608 <MX_CAN1_Init+0x68>)
 80035c0:	f44f 2240 	mov.w	r2, #786432	; 0xc0000
 80035c4:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80035c6:	4b10      	ldr	r3, [pc, #64]	; (8003608 <MX_CAN1_Init+0x68>)
 80035c8:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80035cc:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80035ce:	4b0e      	ldr	r3, [pc, #56]	; (8003608 <MX_CAN1_Init+0x68>)
 80035d0:	2200      	movs	r2, #0
 80035d2:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80035d4:	4b0c      	ldr	r3, [pc, #48]	; (8003608 <MX_CAN1_Init+0x68>)
 80035d6:	2200      	movs	r2, #0
 80035d8:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = ENABLE;
 80035da:	4b0b      	ldr	r3, [pc, #44]	; (8003608 <MX_CAN1_Init+0x68>)
 80035dc:	2201      	movs	r2, #1
 80035de:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = ENABLE;
 80035e0:	4b09      	ldr	r3, [pc, #36]	; (8003608 <MX_CAN1_Init+0x68>)
 80035e2:	2201      	movs	r2, #1
 80035e4:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80035e6:	4b08      	ldr	r3, [pc, #32]	; (8003608 <MX_CAN1_Init+0x68>)
 80035e8:	2200      	movs	r2, #0
 80035ea:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = ENABLE;
 80035ec:	4b06      	ldr	r3, [pc, #24]	; (8003608 <MX_CAN1_Init+0x68>)
 80035ee:	2201      	movs	r2, #1
 80035f0:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80035f2:	4805      	ldr	r0, [pc, #20]	; (8003608 <MX_CAN1_Init+0x68>)
 80035f4:	f002 fe5e 	bl	80062b4 <HAL_CAN_Init>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d001      	beq.n	8003602 <MX_CAN1_Init+0x62>
  {
    Error_Handler();
 80035fe:	f001 fba1 	bl	8004d44 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8003602:	bf00      	nop
 8003604:	bd80      	pop	{r7, pc}
 8003606:	bf00      	nop
 8003608:	20000390 	.word	0x20000390
 800360c:	40006400 	.word	0x40006400

08003610 <MX_DAC1_Init>:
  * @brief DAC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC1_Init(void)
{
 8003610:	b580      	push	{r7, lr}
 8003612:	b08a      	sub	sp, #40	; 0x28
 8003614:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8003616:	1d3b      	adds	r3, r7, #4
 8003618:	2224      	movs	r2, #36	; 0x24
 800361a:	2100      	movs	r1, #0
 800361c:	4618      	mov	r0, r3
 800361e:	f00b fa57 	bl	800ead0 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8003622:	4b19      	ldr	r3, [pc, #100]	; (8003688 <MX_DAC1_Init+0x78>)
 8003624:	4a19      	ldr	r2, [pc, #100]	; (800368c <MX_DAC1_Init+0x7c>)
 8003626:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8003628:	4817      	ldr	r0, [pc, #92]	; (8003688 <MX_DAC1_Init+0x78>)
 800362a:	f003 fda5 	bl	8007178 <HAL_DAC_Init>
 800362e:	4603      	mov	r3, r0
 8003630:	2b00      	cmp	r3, #0
 8003632:	d001      	beq.n	8003638 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8003634:	f001 fb86 	bl	8004d44 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8003638:	2300      	movs	r3, #0
 800363a:	607b      	str	r3, [r7, #4]
  sConfig.DAC_Trigger = DAC_TRIGGER_T2_TRGO;
 800363c:	2324      	movs	r3, #36	; 0x24
 800363e:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8003640:	2300      	movs	r3, #0
 8003642:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_DISABLE;
 8003644:	2300      	movs	r3, #0
 8003646:	613b      	str	r3, [r7, #16]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8003648:	2300      	movs	r3, #0
 800364a:	617b      	str	r3, [r7, #20]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800364c:	1d3b      	adds	r3, r7, #4
 800364e:	2200      	movs	r2, #0
 8003650:	4619      	mov	r1, r3
 8003652:	480d      	ldr	r0, [pc, #52]	; (8003688 <MX_DAC1_Init+0x78>)
 8003654:	f003 feec 	bl	8007430 <HAL_DAC_ConfigChannel>
 8003658:	4603      	mov	r3, r0
 800365a:	2b00      	cmp	r3, #0
 800365c:	d001      	beq.n	8003662 <MX_DAC1_Init+0x52>
  {
    Error_Handler();
 800365e:	f001 fb71 	bl	8004d44 <Error_Handler>
  }

  /** DAC channel OUT2 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T6_TRGO;
 8003662:	2304      	movs	r3, #4
 8003664:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_ENABLE;
 8003666:	2301      	movs	r3, #1
 8003668:	613b      	str	r3, [r7, #16]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_2) != HAL_OK)
 800366a:	1d3b      	adds	r3, r7, #4
 800366c:	2210      	movs	r2, #16
 800366e:	4619      	mov	r1, r3
 8003670:	4805      	ldr	r0, [pc, #20]	; (8003688 <MX_DAC1_Init+0x78>)
 8003672:	f003 fedd 	bl	8007430 <HAL_DAC_ConfigChannel>
 8003676:	4603      	mov	r3, r0
 8003678:	2b00      	cmp	r3, #0
 800367a:	d001      	beq.n	8003680 <MX_DAC1_Init+0x70>
  {
    Error_Handler();
 800367c:	f001 fb62 	bl	8004d44 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8003680:	bf00      	nop
 8003682:	3728      	adds	r7, #40	; 0x28
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}
 8003688:	200003b8 	.word	0x200003b8
 800368c:	40007400 	.word	0x40007400

08003690 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003690:	b580      	push	{r7, lr}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003694:	4b1d      	ldr	r3, [pc, #116]	; (800370c <MX_I2C1_Init+0x7c>)
 8003696:	4a1e      	ldr	r2, [pc, #120]	; (8003710 <MX_I2C1_Init+0x80>)
 8003698:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00300F33;
 800369a:	4b1c      	ldr	r3, [pc, #112]	; (800370c <MX_I2C1_Init+0x7c>)
 800369c:	4a1d      	ldr	r2, [pc, #116]	; (8003714 <MX_I2C1_Init+0x84>)
 800369e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80036a0:	4b1a      	ldr	r3, [pc, #104]	; (800370c <MX_I2C1_Init+0x7c>)
 80036a2:	2200      	movs	r2, #0
 80036a4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80036a6:	4b19      	ldr	r3, [pc, #100]	; (800370c <MX_I2C1_Init+0x7c>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80036ac:	4b17      	ldr	r3, [pc, #92]	; (800370c <MX_I2C1_Init+0x7c>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80036b2:	4b16      	ldr	r3, [pc, #88]	; (800370c <MX_I2C1_Init+0x7c>)
 80036b4:	2200      	movs	r2, #0
 80036b6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80036b8:	4b14      	ldr	r3, [pc, #80]	; (800370c <MX_I2C1_Init+0x7c>)
 80036ba:	2200      	movs	r2, #0
 80036bc:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80036be:	4b13      	ldr	r3, [pc, #76]	; (800370c <MX_I2C1_Init+0x7c>)
 80036c0:	2200      	movs	r2, #0
 80036c2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80036c4:	4b11      	ldr	r3, [pc, #68]	; (800370c <MX_I2C1_Init+0x7c>)
 80036c6:	2200      	movs	r2, #0
 80036c8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80036ca:	4810      	ldr	r0, [pc, #64]	; (800370c <MX_I2C1_Init+0x7c>)
 80036cc:	f004 fbf0 	bl	8007eb0 <HAL_I2C_Init>
 80036d0:	4603      	mov	r3, r0
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d001      	beq.n	80036da <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80036d6:	f001 fb35 	bl	8004d44 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80036da:	2100      	movs	r1, #0
 80036dc:	480b      	ldr	r0, [pc, #44]	; (800370c <MX_I2C1_Init+0x7c>)
 80036de:	f004 ff69 	bl	80085b4 <HAL_I2CEx_ConfigAnalogFilter>
 80036e2:	4603      	mov	r3, r0
 80036e4:	2b00      	cmp	r3, #0
 80036e6:	d001      	beq.n	80036ec <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80036e8:	f001 fb2c 	bl	8004d44 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80036ec:	2100      	movs	r1, #0
 80036ee:	4807      	ldr	r0, [pc, #28]	; (800370c <MX_I2C1_Init+0x7c>)
 80036f0:	f004 ffab 	bl	800864a <HAL_I2CEx_ConfigDigitalFilter>
 80036f4:	4603      	mov	r3, r0
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d001      	beq.n	80036fe <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80036fa:	f001 fb23 	bl	8004d44 <Error_Handler>
  }

  /** I2C Fast mode Plus enable
  */
  HAL_I2CEx_EnableFastModePlus(I2C_FASTMODEPLUS_I2C1);
 80036fe:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8003702:	f004 ffef 	bl	80086e4 <HAL_I2CEx_EnableFastModePlus>
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003706:	bf00      	nop
 8003708:	bd80      	pop	{r7, pc}
 800370a:	bf00      	nop
 800370c:	20000414 	.word	0x20000414
 8003710:	40005400 	.word	0x40005400
 8003714:	00300f33 	.word	0x00300f33

08003718 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b088      	sub	sp, #32
 800371c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800371e:	f107 0310 	add.w	r3, r7, #16
 8003722:	2200      	movs	r2, #0
 8003724:	601a      	str	r2, [r3, #0]
 8003726:	605a      	str	r2, [r3, #4]
 8003728:	609a      	str	r2, [r3, #8]
 800372a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800372c:	1d3b      	adds	r3, r7, #4
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]
 8003732:	605a      	str	r2, [r3, #4]
 8003734:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003736:	4b1e      	ldr	r3, [pc, #120]	; (80037b0 <MX_TIM2_Init+0x98>)
 8003738:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800373c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800373e:	4b1c      	ldr	r3, [pc, #112]	; (80037b0 <MX_TIM2_Init+0x98>)
 8003740:	2200      	movs	r2, #0
 8003742:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003744:	4b1a      	ldr	r3, [pc, #104]	; (80037b0 <MX_TIM2_Init+0x98>)
 8003746:	2200      	movs	r2, #0
 8003748:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1814;
 800374a:	4b19      	ldr	r3, [pc, #100]	; (80037b0 <MX_TIM2_Init+0x98>)
 800374c:	f240 7216 	movw	r2, #1814	; 0x716
 8003750:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003752:	4b17      	ldr	r3, [pc, #92]	; (80037b0 <MX_TIM2_Init+0x98>)
 8003754:	2200      	movs	r2, #0
 8003756:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003758:	4b15      	ldr	r3, [pc, #84]	; (80037b0 <MX_TIM2_Init+0x98>)
 800375a:	2200      	movs	r2, #0
 800375c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800375e:	4814      	ldr	r0, [pc, #80]	; (80037b0 <MX_TIM2_Init+0x98>)
 8003760:	f006 f9b6 	bl	8009ad0 <HAL_TIM_Base_Init>
 8003764:	4603      	mov	r3, r0
 8003766:	2b00      	cmp	r3, #0
 8003768:	d001      	beq.n	800376e <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800376a:	f001 faeb 	bl	8004d44 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800376e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003772:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8003774:	f107 0310 	add.w	r3, r7, #16
 8003778:	4619      	mov	r1, r3
 800377a:	480d      	ldr	r0, [pc, #52]	; (80037b0 <MX_TIM2_Init+0x98>)
 800377c:	f006 fbbf 	bl	8009efe <HAL_TIM_ConfigClockSource>
 8003780:	4603      	mov	r3, r0
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8003786:	f001 fadd 	bl	8004d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800378a:	2320      	movs	r3, #32
 800378c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800378e:	2300      	movs	r3, #0
 8003790:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8003792:	1d3b      	adds	r3, r7, #4
 8003794:	4619      	mov	r1, r3
 8003796:	4806      	ldr	r0, [pc, #24]	; (80037b0 <MX_TIM2_Init+0x98>)
 8003798:	f006 fda0 	bl	800a2dc <HAL_TIMEx_MasterConfigSynchronization>
 800379c:	4603      	mov	r3, r0
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d001      	beq.n	80037a6 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80037a2:	f001 facf 	bl	8004d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80037a6:	bf00      	nop
 80037a8:	3720      	adds	r7, #32
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	20000468 	.word	0x20000468

080037b4 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b084      	sub	sp, #16
 80037b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80037ba:	1d3b      	adds	r3, r7, #4
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]
 80037c0:	605a      	str	r2, [r3, #4]
 80037c2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80037c4:	4b14      	ldr	r3, [pc, #80]	; (8003818 <MX_TIM6_Init+0x64>)
 80037c6:	4a15      	ldr	r2, [pc, #84]	; (800381c <MX_TIM6_Init+0x68>)
 80037c8:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 0;
 80037ca:	4b13      	ldr	r3, [pc, #76]	; (8003818 <MX_TIM6_Init+0x64>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80037d0:	4b11      	ldr	r3, [pc, #68]	; (8003818 <MX_TIM6_Init+0x64>)
 80037d2:	2200      	movs	r2, #0
 80037d4:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 3636-1;
 80037d6:	4b10      	ldr	r3, [pc, #64]	; (8003818 <MX_TIM6_Init+0x64>)
 80037d8:	f640 6233 	movw	r2, #3635	; 0xe33
 80037dc:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80037de:	4b0e      	ldr	r3, [pc, #56]	; (8003818 <MX_TIM6_Init+0x64>)
 80037e0:	2200      	movs	r2, #0
 80037e2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80037e4:	480c      	ldr	r0, [pc, #48]	; (8003818 <MX_TIM6_Init+0x64>)
 80037e6:	f006 f973 	bl	8009ad0 <HAL_TIM_Base_Init>
 80037ea:	4603      	mov	r3, r0
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d001      	beq.n	80037f4 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80037f0:	f001 faa8 	bl	8004d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80037f4:	2320      	movs	r3, #32
 80037f6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80037f8:	2300      	movs	r3, #0
 80037fa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80037fc:	1d3b      	adds	r3, r7, #4
 80037fe:	4619      	mov	r1, r3
 8003800:	4805      	ldr	r0, [pc, #20]	; (8003818 <MX_TIM6_Init+0x64>)
 8003802:	f006 fd6b 	bl	800a2dc <HAL_TIMEx_MasterConfigSynchronization>
 8003806:	4603      	mov	r3, r0
 8003808:	2b00      	cmp	r3, #0
 800380a:	d001      	beq.n	8003810 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 800380c:	f001 fa9a 	bl	8004d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8003810:	bf00      	nop
 8003812:	3710      	adds	r7, #16
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	200004b4 	.word	0x200004b4
 800381c:	40001000 	.word	0x40001000

08003820 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	b084      	sub	sp, #16
 8003824:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003826:	1d3b      	adds	r3, r7, #4
 8003828:	2200      	movs	r2, #0
 800382a:	601a      	str	r2, [r3, #0]
 800382c:	605a      	str	r2, [r3, #4]
 800382e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8003830:	4b14      	ldr	r3, [pc, #80]	; (8003884 <MX_TIM7_Init+0x64>)
 8003832:	4a15      	ldr	r2, [pc, #84]	; (8003888 <MX_TIM7_Init+0x68>)
 8003834:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 80-1;
 8003836:	4b13      	ldr	r3, [pc, #76]	; (8003884 <MX_TIM7_Init+0x64>)
 8003838:	224f      	movs	r2, #79	; 0x4f
 800383a:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 800383c:	4b11      	ldr	r3, [pc, #68]	; (8003884 <MX_TIM7_Init+0x64>)
 800383e:	2200      	movs	r2, #0
 8003840:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8003842:	4b10      	ldr	r3, [pc, #64]	; (8003884 <MX_TIM7_Init+0x64>)
 8003844:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003848:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800384a:	4b0e      	ldr	r3, [pc, #56]	; (8003884 <MX_TIM7_Init+0x64>)
 800384c:	2200      	movs	r2, #0
 800384e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8003850:	480c      	ldr	r0, [pc, #48]	; (8003884 <MX_TIM7_Init+0x64>)
 8003852:	f006 f93d 	bl	8009ad0 <HAL_TIM_Base_Init>
 8003856:	4603      	mov	r3, r0
 8003858:	2b00      	cmp	r3, #0
 800385a:	d001      	beq.n	8003860 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 800385c:	f001 fa72 	bl	8004d44 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003860:	2300      	movs	r3, #0
 8003862:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003864:	2300      	movs	r3, #0
 8003866:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8003868:	1d3b      	adds	r3, r7, #4
 800386a:	4619      	mov	r1, r3
 800386c:	4805      	ldr	r0, [pc, #20]	; (8003884 <MX_TIM7_Init+0x64>)
 800386e:	f006 fd35 	bl	800a2dc <HAL_TIMEx_MasterConfigSynchronization>
 8003872:	4603      	mov	r3, r0
 8003874:	2b00      	cmp	r3, #0
 8003876:	d001      	beq.n	800387c <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8003878:	f001 fa64 	bl	8004d44 <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 800387c:	bf00      	nop
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20000500 	.word	0x20000500
 8003888:	40001400 	.word	0x40001400

0800388c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003890:	4b14      	ldr	r3, [pc, #80]	; (80038e4 <MX_USART2_UART_Init+0x58>)
 8003892:	4a15      	ldr	r2, [pc, #84]	; (80038e8 <MX_USART2_UART_Init+0x5c>)
 8003894:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003896:	4b13      	ldr	r3, [pc, #76]	; (80038e4 <MX_USART2_UART_Init+0x58>)
 8003898:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800389c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800389e:	4b11      	ldr	r3, [pc, #68]	; (80038e4 <MX_USART2_UART_Init+0x58>)
 80038a0:	2200      	movs	r2, #0
 80038a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80038a4:	4b0f      	ldr	r3, [pc, #60]	; (80038e4 <MX_USART2_UART_Init+0x58>)
 80038a6:	2200      	movs	r2, #0
 80038a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80038aa:	4b0e      	ldr	r3, [pc, #56]	; (80038e4 <MX_USART2_UART_Init+0x58>)
 80038ac:	2200      	movs	r2, #0
 80038ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80038b0:	4b0c      	ldr	r3, [pc, #48]	; (80038e4 <MX_USART2_UART_Init+0x58>)
 80038b2:	220c      	movs	r2, #12
 80038b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038b6:	4b0b      	ldr	r3, [pc, #44]	; (80038e4 <MX_USART2_UART_Init+0x58>)
 80038b8:	2200      	movs	r2, #0
 80038ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80038bc:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <MX_USART2_UART_Init+0x58>)
 80038be:	2200      	movs	r2, #0
 80038c0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80038c2:	4b08      	ldr	r3, [pc, #32]	; (80038e4 <MX_USART2_UART_Init+0x58>)
 80038c4:	2200      	movs	r2, #0
 80038c6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038c8:	4b06      	ldr	r3, [pc, #24]	; (80038e4 <MX_USART2_UART_Init+0x58>)
 80038ca:	2200      	movs	r2, #0
 80038cc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80038ce:	4805      	ldr	r0, [pc, #20]	; (80038e4 <MX_USART2_UART_Init+0x58>)
 80038d0:	f006 fd88 	bl	800a3e4 <HAL_UART_Init>
 80038d4:	4603      	mov	r3, r0
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d001      	beq.n	80038de <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80038da:	f001 fa33 	bl	8004d44 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80038de:	bf00      	nop
 80038e0:	bd80      	pop	{r7, pc}
 80038e2:	bf00      	nop
 80038e4:	2000054c 	.word	0x2000054c
 80038e8:	40004400 	.word	0x40004400

080038ec <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80038ec:	b580      	push	{r7, lr}
 80038ee:	b082      	sub	sp, #8
 80038f0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80038f2:	4b0c      	ldr	r3, [pc, #48]	; (8003924 <MX_DMA_Init+0x38>)
 80038f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038f6:	4a0b      	ldr	r2, [pc, #44]	; (8003924 <MX_DMA_Init+0x38>)
 80038f8:	f043 0301 	orr.w	r3, r3, #1
 80038fc:	6493      	str	r3, [r2, #72]	; 0x48
 80038fe:	4b09      	ldr	r3, [pc, #36]	; (8003924 <MX_DMA_Init+0x38>)
 8003900:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003902:	f003 0301 	and.w	r3, r3, #1
 8003906:	607b      	str	r3, [r7, #4]
 8003908:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel3_IRQn, 5, 0);
 800390a:	2200      	movs	r2, #0
 800390c:	2105      	movs	r1, #5
 800390e:	200d      	movs	r0, #13
 8003910:	f003 fc08 	bl	8007124 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel3_IRQn);
 8003914:	200d      	movs	r0, #13
 8003916:	f003 fc21 	bl	800715c <HAL_NVIC_EnableIRQ>

}
 800391a:	bf00      	nop
 800391c:	3708      	adds	r7, #8
 800391e:	46bd      	mov	sp, r7
 8003920:	bd80      	pop	{r7, pc}
 8003922:	bf00      	nop
 8003924:	40021000 	.word	0x40021000

08003928 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003928:	b580      	push	{r7, lr}
 800392a:	b088      	sub	sp, #32
 800392c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800392e:	f107 030c 	add.w	r3, r7, #12
 8003932:	2200      	movs	r2, #0
 8003934:	601a      	str	r2, [r3, #0]
 8003936:	605a      	str	r2, [r3, #4]
 8003938:	609a      	str	r2, [r3, #8]
 800393a:	60da      	str	r2, [r3, #12]
 800393c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800393e:	4b2f      	ldr	r3, [pc, #188]	; (80039fc <MX_GPIO_Init+0xd4>)
 8003940:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003942:	4a2e      	ldr	r2, [pc, #184]	; (80039fc <MX_GPIO_Init+0xd4>)
 8003944:	f043 0304 	orr.w	r3, r3, #4
 8003948:	64d3      	str	r3, [r2, #76]	; 0x4c
 800394a:	4b2c      	ldr	r3, [pc, #176]	; (80039fc <MX_GPIO_Init+0xd4>)
 800394c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800394e:	f003 0304 	and.w	r3, r3, #4
 8003952:	60bb      	str	r3, [r7, #8]
 8003954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003956:	4b29      	ldr	r3, [pc, #164]	; (80039fc <MX_GPIO_Init+0xd4>)
 8003958:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800395a:	4a28      	ldr	r2, [pc, #160]	; (80039fc <MX_GPIO_Init+0xd4>)
 800395c:	f043 0301 	orr.w	r3, r3, #1
 8003960:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003962:	4b26      	ldr	r3, [pc, #152]	; (80039fc <MX_GPIO_Init+0xd4>)
 8003964:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	607b      	str	r3, [r7, #4]
 800396c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800396e:	4b23      	ldr	r3, [pc, #140]	; (80039fc <MX_GPIO_Init+0xd4>)
 8003970:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003972:	4a22      	ldr	r2, [pc, #136]	; (80039fc <MX_GPIO_Init+0xd4>)
 8003974:	f043 0302 	orr.w	r3, r3, #2
 8003978:	64d3      	str	r3, [r2, #76]	; 0x4c
 800397a:	4b20      	ldr	r3, [pc, #128]	; (80039fc <MX_GPIO_Init+0xd4>)
 800397c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800397e:	f003 0302 	and.w	r3, r3, #2
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003986:	2200      	movs	r2, #0
 8003988:	2140      	movs	r1, #64	; 0x40
 800398a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800398e:	f004 fa77 	bl	8007e80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RA0_Pin|RA1_Pin|LED_BUILTIN_Pin|RA2_Pin
 8003992:	2200      	movs	r2, #0
 8003994:	213b      	movs	r1, #59	; 0x3b
 8003996:	481a      	ldr	r0, [pc, #104]	; (8003a00 <MX_GPIO_Init+0xd8>)
 8003998:	f004 fa72 	bl	8007e80 <HAL_GPIO_WritePin>
                          |OUT_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pins : C0_Pin C2_Pin C1_Pin C3_Pin */
  GPIO_InitStruct.Pin = C0_Pin|C2_Pin|C1_Pin|C3_Pin;
 800399c:	f44f 7362 	mov.w	r3, #904	; 0x388
 80039a0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039a2:	2300      	movs	r3, #0
 80039a4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039aa:	f107 030c 	add.w	r3, r7, #12
 80039ae:	4619      	mov	r1, r3
 80039b0:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039b4:	f004 f8e2 	bl	8007b7c <HAL_GPIO_Init>

  /*Configure GPIO pin : REN_Pin */
  GPIO_InitStruct.Pin = REN_Pin;
 80039b8:	2340      	movs	r3, #64	; 0x40
 80039ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039bc:	2301      	movs	r3, #1
 80039be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c0:	2300      	movs	r3, #0
 80039c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039c4:	2300      	movs	r3, #0
 80039c6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(REN_GPIO_Port, &GPIO_InitStruct);
 80039c8:	f107 030c 	add.w	r3, r7, #12
 80039cc:	4619      	mov	r1, r3
 80039ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80039d2:	f004 f8d3 	bl	8007b7c <HAL_GPIO_Init>

  /*Configure GPIO pins : RA0_Pin RA1_Pin LED_BUILTIN_Pin RA2_Pin
                           OUT_Pin */
  GPIO_InitStruct.Pin = RA0_Pin|RA1_Pin|LED_BUILTIN_Pin|RA2_Pin
 80039d6:	233b      	movs	r3, #59	; 0x3b
 80039d8:	60fb      	str	r3, [r7, #12]
                          |OUT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039da:	2301      	movs	r3, #1
 80039dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039e2:	2300      	movs	r3, #0
 80039e4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80039e6:	f107 030c 	add.w	r3, r7, #12
 80039ea:	4619      	mov	r1, r3
 80039ec:	4804      	ldr	r0, [pc, #16]	; (8003a00 <MX_GPIO_Init+0xd8>)
 80039ee:	f004 f8c5 	bl	8007b7c <HAL_GPIO_Init>

}
 80039f2:	bf00      	nop
 80039f4:	3720      	adds	r7, #32
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bd80      	pop	{r7, pc}
 80039fa:	bf00      	nop
 80039fc:	40021000 	.word	0x40021000
 8003a00:	48000400 	.word	0x48000400

08003a04 <serialPrintln>:

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);

}

void serialPrintln(char val[]) {
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b084      	sub	sp, #16
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]

	HAL_UART_Transmit(&huart2, (uint8_t*) val, strlen(val), 10);
 8003a0c:	6878      	ldr	r0, [r7, #4]
 8003a0e:	f7fc fbdf 	bl	80001d0 <strlen>
 8003a12:	4603      	mov	r3, r0
 8003a14:	b29a      	uxth	r2, r3
 8003a16:	230a      	movs	r3, #10
 8003a18:	6879      	ldr	r1, [r7, #4]
 8003a1a:	4808      	ldr	r0, [pc, #32]	; (8003a3c <serialPrintln+0x38>)
 8003a1c:	f006 fd30 	bl	800a480 <HAL_UART_Transmit>
	char rn[2] = "\r\n";
 8003a20:	f640 230d 	movw	r3, #2573	; 0xa0d
 8003a24:	81bb      	strh	r3, [r7, #12]
	HAL_UART_Transmit(&huart2, (uint8_t*) rn, 2, 10);
 8003a26:	f107 010c 	add.w	r1, r7, #12
 8003a2a:	230a      	movs	r3, #10
 8003a2c:	2202      	movs	r2, #2
 8003a2e:	4803      	ldr	r0, [pc, #12]	; (8003a3c <serialPrintln+0x38>)
 8003a30:	f006 fd26 	bl	800a480 <HAL_UART_Transmit>

}
 8003a34:	bf00      	nop
 8003a36:	3710      	adds	r7, #16
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	2000054c 	.word	0x2000054c

08003a40 <delayMicro>:

void delayMicro(uint16_t us) {
 8003a40:	b480      	push	{r7}
 8003a42:	b083      	sub	sp, #12
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	4603      	mov	r3, r0
 8003a48:	80fb      	strh	r3, [r7, #6]

	htim7.Instance->CNT = 0;
 8003a4a:	4b09      	ldr	r3, [pc, #36]	; (8003a70 <delayMicro+0x30>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	2200      	movs	r2, #0
 8003a50:	625a      	str	r2, [r3, #36]	; 0x24
	while (htim7.Instance->CNT < us)
 8003a52:	bf00      	nop
 8003a54:	4b06      	ldr	r3, [pc, #24]	; (8003a70 <delayMicro+0x30>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003a5a:	88fb      	ldrh	r3, [r7, #6]
 8003a5c:	429a      	cmp	r2, r3
 8003a5e:	d3f9      	bcc.n	8003a54 <delayMicro+0x14>
		;

}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	370c      	adds	r7, #12
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	20000500 	.word	0x20000500

08003a74 <synthesize_waves>:

inline void synthesize_waves(int index){
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b086      	sub	sp, #24
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]

    int32_t out = 0;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	617b      	str	r3, [r7, #20]
    uint8_t keys_pressed = 0;
 8003a80:	2300      	movs	r3, #0
 8003a82:	74fb      	strb	r3, [r7, #19]
    int8_t step_octave = (octave >= default_octave) ? 2*(octave - default_octave) : -1; // default octave is 3
 8003a84:	4b3a      	ldr	r3, [pc, #232]	; (8003b70 <synthesize_waves+0xfc>)
 8003a86:	881a      	ldrh	r2, [r3, #0]
 8003a88:	4b3a      	ldr	r3, [pc, #232]	; (8003b74 <synthesize_waves+0x100>)
 8003a8a:	881b      	ldrh	r3, [r3, #0]
 8003a8c:	429a      	cmp	r2, r3
 8003a8e:	d30a      	bcc.n	8003aa6 <synthesize_waves+0x32>
 8003a90:	4b37      	ldr	r3, [pc, #220]	; (8003b70 <synthesize_waves+0xfc>)
 8003a92:	881b      	ldrh	r3, [r3, #0]
 8003a94:	461a      	mov	r2, r3
 8003a96:	4b37      	ldr	r3, [pc, #220]	; (8003b74 <synthesize_waves+0x100>)
 8003a98:	881b      	ldrh	r3, [r3, #0]
 8003a9a:	1ad3      	subs	r3, r2, r3
 8003a9c:	b2db      	uxtb	r3, r3
 8003a9e:	005b      	lsls	r3, r3, #1
 8003aa0:	b2db      	uxtb	r3, r3
 8003aa2:	b25b      	sxtb	r3, r3
 8003aa4:	e001      	b.n	8003aaa <synthesize_waves+0x36>
 8003aa6:	f04f 33ff 	mov.w	r3, #4294967295
 8003aaa:	72fb      	strb	r3, [r7, #11]

    HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_SET);
 8003aac:	2201      	movs	r2, #1
 8003aae:	2108      	movs	r1, #8
 8003ab0:	4831      	ldr	r0, [pc, #196]	; (8003b78 <synthesize_waves+0x104>)
 8003ab2:	f004 f9e5 	bl	8007e80 <HAL_GPIO_WritePin>
    
    for (int t = 0; t < 12; t++){
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e03d      	b.n	8003b38 <synthesize_waves+0xc4>
        bool pressed = ~DMAkeys & ( 1 << (t));
 8003abc:	4b2f      	ldr	r3, [pc, #188]	; (8003b7c <synthesize_waves+0x108>)
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	43db      	mvns	r3, r3
 8003ac2:	2101      	movs	r1, #1
 8003ac4:	68fa      	ldr	r2, [r7, #12]
 8003ac6:	fa01 f202 	lsl.w	r2, r1, r2
 8003aca:	4013      	ands	r3, r2
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	bf14      	ite	ne
 8003ad0:	2301      	movne	r3, #1
 8003ad2:	2300      	moveq	r3, #0
 8003ad4:	72bb      	strb	r3, [r7, #10]

        if (pressed) {
 8003ad6:	7abb      	ldrb	r3, [r7, #10]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d02a      	beq.n	8003b32 <synthesize_waves+0xbe>
            lookup_indices[t] = (lookup_indices[t] + (2+step_octave)) % wavetable_sizes[t];
 8003adc:	4a28      	ldr	r2, [pc, #160]	; (8003b80 <synthesize_waves+0x10c>)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003ae4:	461a      	mov	r2, r3
 8003ae6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8003aea:	3302      	adds	r3, #2
 8003aec:	4413      	add	r3, r2
 8003aee:	461a      	mov	r2, r3
 8003af0:	4924      	ldr	r1, [pc, #144]	; (8003b84 <synthesize_waves+0x110>)
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8003af8:	fbb2 f1f3 	udiv	r1, r2, r3
 8003afc:	fb01 f303 	mul.w	r3, r1, r3
 8003b00:	1ad3      	subs	r3, r2, r3
 8003b02:	b299      	uxth	r1, r3
 8003b04:	4a1e      	ldr	r2, [pc, #120]	; (8003b80 <synthesize_waves+0x10c>)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
            keys_pressed += 1;
 8003b0c:	7cfb      	ldrb	r3, [r7, #19]
 8003b0e:	3301      	adds	r3, #1
 8003b10:	74fb      	strb	r3, [r7, #19]
            out += lookup_tables[t][lookup_indices[t]];
 8003b12:	4a1d      	ldr	r2, [pc, #116]	; (8003b88 <synthesize_waves+0x114>)
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8003b1a:	4919      	ldr	r1, [pc, #100]	; (8003b80 <synthesize_waves+0x10c>)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8003b22:	005b      	lsls	r3, r3, #1
 8003b24:	4413      	add	r3, r2
 8003b26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003b2a:	461a      	mov	r2, r3
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	4413      	add	r3, r2
 8003b30:	617b      	str	r3, [r7, #20]
    for (int t = 0; t < 12; t++){
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	3301      	adds	r3, #1
 8003b36:	60fb      	str	r3, [r7, #12]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	2b0b      	cmp	r3, #11
 8003b3c:	ddbe      	ble.n	8003abc <synthesize_waves+0x48>
//            out += lookup_tables[t][lookup_indices[t]];
//        }
//    }

//    output_LUT[index] = ((uint16_t)(out / (1 + keys_pressed))) + 2048; // VOLUME to be added here
    output_LUT[index] = ((uint16_t)(out >> (12 - volume))) + 2048; // VOLUME to be added here
 8003b3e:	4b13      	ldr	r3, [pc, #76]	; (8003b8c <synthesize_waves+0x118>)
 8003b40:	881b      	ldrh	r3, [r3, #0]
 8003b42:	f1c3 030c 	rsb	r3, r3, #12
 8003b46:	697a      	ldr	r2, [r7, #20]
 8003b48:	fa42 f303 	asr.w	r3, r2, r3
 8003b4c:	b29b      	uxth	r3, r3
 8003b4e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b52:	b299      	uxth	r1, r3
 8003b54:	4a0e      	ldr	r2, [pc, #56]	; (8003b90 <synthesize_waves+0x11c>)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]

    HAL_GPIO_WritePin(LED_BUILTIN_GPIO_Port, LED_BUILTIN_Pin, GPIO_PIN_RESET);
 8003b5c:	2200      	movs	r2, #0
 8003b5e:	2108      	movs	r1, #8
 8003b60:	4805      	ldr	r0, [pc, #20]	; (8003b78 <synthesize_waves+0x104>)
 8003b62:	f004 f98d 	bl	8007e80 <HAL_GPIO_WritePin>
}
 8003b66:	bf00      	nop
 8003b68:	3718      	adds	r7, #24
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000038 	.word	0x20000038
 8003b74:	2000003a 	.word	0x2000003a
 8003b78:	48000400 	.word	0x48000400
 8003b7c:	20002014 	.word	0x20002014
 8003b80:	20001ffc 	.word	0x20001ffc
 8003b84:	0801d51c 	.word	0x0801d51c
 8003b88:	20000000 	.word	0x20000000
 8003b8c:	20000036 	.word	0x20000036
 8003b90:	200005f8 	.word	0x200005f8

08003b94 <HAL_DAC_ConvHalfCpltCallbackCh1>:


void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac){
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b084      	sub	sp, #16
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]

    //serialPrintln("half");
    DMAkeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	; (8003bcc <HAL_DAC_ConvHalfCpltCallbackCh1+0x38>)
 8003b9e:	881b      	ldrh	r3, [r3, #0]
 8003ba0:	b29b      	uxth	r3, r3
 8003ba2:	461a      	mov	r2, r3
 8003ba4:	4b0a      	ldr	r3, [pc, #40]	; (8003bd0 <HAL_DAC_ConvHalfCpltCallbackCh1+0x3c>)
 8003ba6:	601a      	str	r2, [r3, #0]
    

    for (int i = 0; i < OUTPUT_SAMPLES/2; i++) {
 8003ba8:	2300      	movs	r3, #0
 8003baa:	60fb      	str	r3, [r7, #12]
 8003bac:	e005      	b.n	8003bba <HAL_DAC_ConvHalfCpltCallbackCh1+0x26>
        synthesize_waves(i);
 8003bae:	68f8      	ldr	r0, [r7, #12]
 8003bb0:	f7ff ff60 	bl	8003a74 <synthesize_waves>
    for (int i = 0; i < OUTPUT_SAMPLES/2; i++) {
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	3301      	adds	r3, #1
 8003bb8:	60fb      	str	r3, [r7, #12]
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2ba7      	cmp	r3, #167	; 0xa7
 8003bbe:	ddf6      	ble.n	8003bae <HAL_DAC_ConvHalfCpltCallbackCh1+0x1a>
    }
}
 8003bc0:	bf00      	nop
 8003bc2:	bf00      	nop
 8003bc4:	3710      	adds	r7, #16
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	20000030 	.word	0x20000030
 8003bd0:	20002014 	.word	0x20002014

08003bd4 <HAL_DAC_ConvCpltCallbackCh1>:

void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac) {
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
    
    for (int i = OUTPUT_SAMPLES/2; i < OUTPUT_SAMPLES; i++) {
 8003bdc:	23a8      	movs	r3, #168	; 0xa8
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	e005      	b.n	8003bee <HAL_DAC_ConvCpltCallbackCh1+0x1a>
        synthesize_waves(i);
 8003be2:	68f8      	ldr	r0, [r7, #12]
 8003be4:	f7ff ff46 	bl	8003a74 <synthesize_waves>
    for (int i = OUTPUT_SAMPLES/2; i < OUTPUT_SAMPLES; i++) {
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	3301      	adds	r3, #1
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f5b3 7fa8 	cmp.w	r3, #336	; 0x150
 8003bf4:	ddf5      	ble.n	8003be2 <HAL_DAC_ConvCpltCallbackCh1+0xe>
    }
}
 8003bf6:	bf00      	nop
 8003bf8:	bf00      	nop
 8003bfa:	3710      	adds	r7, #16
 8003bfc:	46bd      	mov	sp, r7
 8003bfe:	bd80      	pop	{r7, pc}

08003c00 <setCANFilter>:

uint32_t setCANFilter(uint32_t filterID, uint32_t maskID, uint32_t filterBank) {
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b08e      	sub	sp, #56	; 0x38
 8003c04:	af00      	add	r7, sp, #0
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	60b9      	str	r1, [r7, #8]
 8003c0a:	607a      	str	r2, [r7, #4]

	CAN_FilterTypeDef filterInfo = { 0 };
 8003c0c:	f107 0310 	add.w	r3, r7, #16
 8003c10:	2228      	movs	r2, #40	; 0x28
 8003c12:	2100      	movs	r1, #0
 8003c14:	4618      	mov	r0, r3
 8003c16:	f00a ff5b 	bl	800ead0 <memset>

	filterInfo.FilterIdHigh = (filterID << 5) & 0xffe0;
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	015b      	lsls	r3, r3, #5
 8003c1e:	b29b      	uxth	r3, r3
 8003c20:	613b      	str	r3, [r7, #16]
	filterInfo.FilterIdLow = 0;
 8003c22:	2300      	movs	r3, #0
 8003c24:	617b      	str	r3, [r7, #20]
	filterInfo.FilterMaskIdHigh = (maskID << 5) & 0xffe0;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	015b      	lsls	r3, r3, #5
 8003c2a:	b29b      	uxth	r3, r3
 8003c2c:	61bb      	str	r3, [r7, #24]
	filterInfo.FilterMaskIdLow = 0;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	61fb      	str	r3, [r7, #28]
	filterInfo.FilterFIFOAssignment = 0;
 8003c32:	2300      	movs	r3, #0
 8003c34:	623b      	str	r3, [r7, #32]
	filterInfo.FilterBank = filterBank & 0xf;
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f003 030f 	and.w	r3, r3, #15
 8003c3c:	627b      	str	r3, [r7, #36]	; 0x24
	filterInfo.FilterMode = CAN_FILTERMODE_IDMASK;
 8003c3e:	2300      	movs	r3, #0
 8003c40:	62bb      	str	r3, [r7, #40]	; 0x28
	filterInfo.FilterScale = CAN_FILTERSCALE_32BIT;
 8003c42:	2301      	movs	r3, #1
 8003c44:	62fb      	str	r3, [r7, #44]	; 0x2c
	filterInfo.FilterActivation = CAN_FILTER_ENABLE;
 8003c46:	2301      	movs	r3, #1
 8003c48:	633b      	str	r3, [r7, #48]	; 0x30
	filterInfo.SlaveStartFilterBank = 0;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	637b      	str	r3, [r7, #52]	; 0x34

	return (uint32_t) HAL_CAN_ConfigFilter(&hcan1, &filterInfo);
 8003c4e:	f107 0310 	add.w	r3, r7, #16
 8003c52:	4619      	mov	r1, r3
 8003c54:	4803      	ldr	r0, [pc, #12]	; (8003c64 <setCANFilter+0x64>)
 8003c56:	f002 fc28 	bl	80064aa <HAL_CAN_ConfigFilter>
 8003c5a:	4603      	mov	r3, r0

}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	3738      	adds	r7, #56	; 0x38
 8003c60:	46bd      	mov	sp, r7
 8003c62:	bd80      	pop	{r7, pc}
 8003c64:	20000390 	.word	0x20000390

08003c68 <CAN_TX>:

uint32_t CAN_TX(uint32_t ID, uint8_t data[8]) {
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b088      	sub	sp, #32
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
 8003c70:	6039      	str	r1, [r7, #0]

	CAN_TxHeaderTypeDef txHeader = { 0 };
 8003c72:	f107 0308 	add.w	r3, r7, #8
 8003c76:	2200      	movs	r2, #0
 8003c78:	601a      	str	r2, [r3, #0]
 8003c7a:	605a      	str	r2, [r3, #4]
 8003c7c:	609a      	str	r2, [r3, #8]
 8003c7e:	60da      	str	r2, [r3, #12]
 8003c80:	611a      	str	r2, [r3, #16]
 8003c82:	615a      	str	r2, [r3, #20]

	txHeader.StdId = ID & 0x7ff;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8003c8a:	60bb      	str	r3, [r7, #8]
	txHeader.ExtId = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	60fb      	str	r3, [r7, #12]
	txHeader.IDE = CAN_ID_STD;
 8003c90:	2300      	movs	r3, #0
 8003c92:	613b      	str	r3, [r7, #16]
	txHeader.RTR = CAN_RTR_DATA;
 8003c94:	2300      	movs	r3, #0
 8003c96:	617b      	str	r3, [r7, #20]
	txHeader.DLC = 8;
 8003c98:	2308      	movs	r3, #8
 8003c9a:	61bb      	str	r3, [r7, #24]
	txHeader.TransmitGlobalTime = DISABLE;
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	773b      	strb	r3, [r7, #28]

	while (!HAL_CAN_GetTxMailboxesFreeLevel(&hcan1))
 8003ca0:	bf00      	nop
 8003ca2:	4809      	ldr	r0, [pc, #36]	; (8003cc8 <CAN_TX+0x60>)
 8003ca4:	f002 fddf 	bl	8006866 <HAL_CAN_GetTxMailboxesFreeLevel>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d0f9      	beq.n	8003ca2 <CAN_TX+0x3a>
		;

	return (uint32_t) HAL_CAN_AddTxMessage(&hcan1, &txHeader, data, NULL);
 8003cae:	f107 0108 	add.w	r1, r7, #8
 8003cb2:	2300      	movs	r3, #0
 8003cb4:	683a      	ldr	r2, [r7, #0]
 8003cb6:	4804      	ldr	r0, [pc, #16]	; (8003cc8 <CAN_TX+0x60>)
 8003cb8:	f002 fd05 	bl	80066c6 <HAL_CAN_AddTxMessage>
 8003cbc:	4603      	mov	r3, r0

}
 8003cbe:	4618      	mov	r0, r3
 8003cc0:	3720      	adds	r7, #32
 8003cc2:	46bd      	mov	sp, r7
 8003cc4:	bd80      	pop	{r7, pc}
 8003cc6:	bf00      	nop
 8003cc8:	20000390 	.word	0x20000390

08003ccc <CAN_RX>:

	return HAL_CAN_GetRxFifoFillLevel(&hcan1, 0);

}

uint32_t CAN_RX(uint32_t *ID, uint8_t data[8]) {
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b08a      	sub	sp, #40	; 0x28
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
 8003cd4:	6039      	str	r1, [r7, #0]

	CAN_RxHeaderTypeDef rxHeader;

	while (!HAL_CAN_GetRxFifoFillLevel(&hcan1, 0))
 8003cd6:	bf00      	nop
 8003cd8:	2100      	movs	r1, #0
 8003cda:	480b      	ldr	r0, [pc, #44]	; (8003d08 <CAN_RX+0x3c>)
 8003cdc:	f002 ff0a 	bl	8006af4 <HAL_CAN_GetRxFifoFillLevel>
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d0f8      	beq.n	8003cd8 <CAN_RX+0xc>
		;

	uint32_t result = (uint32_t) HAL_CAN_GetRxMessage(&hcan1, 0, &rxHeader,
 8003ce6:	f107 0208 	add.w	r2, r7, #8
 8003cea:	683b      	ldr	r3, [r7, #0]
 8003cec:	2100      	movs	r1, #0
 8003cee:	4806      	ldr	r0, [pc, #24]	; (8003d08 <CAN_RX+0x3c>)
 8003cf0:	f002 fdee 	bl	80068d0 <HAL_CAN_GetRxMessage>
 8003cf4:	4603      	mov	r3, r0
 8003cf6:	627b      	str	r3, [r7, #36]	; 0x24
			data);

	*ID = rxHeader.StdId;
 8003cf8:	68ba      	ldr	r2, [r7, #8]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	601a      	str	r2, [r3, #0]

	return result;
 8003cfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24

}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3728      	adds	r7, #40	; 0x28
 8003d04:	46bd      	mov	sp, r7
 8003d06:	bd80      	pop	{r7, pc}
 8003d08:	20000390 	.word	0x20000390

08003d0c <setOutMuxBit>:

void setOutMuxBit(const uint8_t bitIdx, const bool value) {
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b082      	sub	sp, #8
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	4603      	mov	r3, r0
 8003d14:	460a      	mov	r2, r1
 8003d16:	71fb      	strb	r3, [r7, #7]
 8003d18:	4613      	mov	r3, r2
 8003d1a:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	2140      	movs	r1, #64	; 0x40
 8003d20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d24:	f004 f8ac 	bl	8007e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, bitIdx & 0x01);
 8003d28:	79fb      	ldrb	r3, [r7, #7]
 8003d2a:	f003 0301 	and.w	r3, r3, #1
 8003d2e:	b2db      	uxtb	r3, r3
 8003d30:	461a      	mov	r2, r3
 8003d32:	2101      	movs	r1, #1
 8003d34:	4816      	ldr	r0, [pc, #88]	; (8003d90 <setOutMuxBit+0x84>)
 8003d36:	f004 f8a3 	bl	8007e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, bitIdx & 0x02);
 8003d3a:	79fb      	ldrb	r3, [r7, #7]
 8003d3c:	f003 0302 	and.w	r3, r3, #2
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	461a      	mov	r2, r3
 8003d44:	2102      	movs	r1, #2
 8003d46:	4812      	ldr	r0, [pc, #72]	; (8003d90 <setOutMuxBit+0x84>)
 8003d48:	f004 f89a 	bl	8007e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, bitIdx & 0x04);
 8003d4c:	79fb      	ldrb	r3, [r7, #7]
 8003d4e:	f003 0304 	and.w	r3, r3, #4
 8003d52:	b2db      	uxtb	r3, r3
 8003d54:	461a      	mov	r2, r3
 8003d56:	2110      	movs	r1, #16
 8003d58:	480d      	ldr	r0, [pc, #52]	; (8003d90 <setOutMuxBit+0x84>)
 8003d5a:	f004 f891 	bl	8007e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(OUT_GPIO_Port, OUT_Pin, value);
 8003d5e:	79bb      	ldrb	r3, [r7, #6]
 8003d60:	461a      	mov	r2, r3
 8003d62:	2120      	movs	r1, #32
 8003d64:	480a      	ldr	r0, [pc, #40]	; (8003d90 <setOutMuxBit+0x84>)
 8003d66:	f004 f88b 	bl	8007e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 8003d6a:	2201      	movs	r2, #1
 8003d6c:	2140      	movs	r1, #64	; 0x40
 8003d6e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d72:	f004 f885 	bl	8007e80 <HAL_GPIO_WritePin>
	delayMicro(2);
 8003d76:	2002      	movs	r0, #2
 8003d78:	f7ff fe62 	bl	8003a40 <delayMicro>
	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	2140      	movs	r1, #64	; 0x40
 8003d80:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003d84:	f004 f87c 	bl	8007e80 <HAL_GPIO_WritePin>

}
 8003d88:	bf00      	nop
 8003d8a:	3708      	adds	r7, #8
 8003d8c:	46bd      	mov	sp, r7
 8003d8e:	bd80      	pop	{r7, pc}
 8003d90:	48000400 	.word	0x48000400

08003d94 <u8x8_gpio_and_delay>:

uint8_t u8x8_gpio_and_delay(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int,
		void *arg_ptr) {
 8003d94:	b480      	push	{r7}
 8003d96:	b085      	sub	sp, #20
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	607b      	str	r3, [r7, #4]
 8003d9e:	460b      	mov	r3, r1
 8003da0:	72fb      	strb	r3, [r7, #11]
 8003da2:	4613      	mov	r3, r2
 8003da4:	72bb      	strb	r3, [r7, #10]

	return 1;
 8003da6:	2301      	movs	r3, #1

}
 8003da8:	4618      	mov	r0, r3
 8003daa:	3714      	adds	r7, #20
 8003dac:	46bd      	mov	sp, r7
 8003dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db2:	4770      	bx	lr

08003db4 <u8x8_byte_i2c>:

uint8_t u8x8_byte_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
 8003db4:	b580      	push	{r7, lr}
 8003db6:	b088      	sub	sp, #32
 8003db8:	af02      	add	r7, sp, #8
 8003dba:	60f8      	str	r0, [r7, #12]
 8003dbc:	607b      	str	r3, [r7, #4]
 8003dbe:	460b      	mov	r3, r1
 8003dc0:	72fb      	strb	r3, [r7, #11]
 8003dc2:	4613      	mov	r3, r2
 8003dc4:	72bb      	strb	r3, [r7, #10]

	static uint8_t buffer[32];
	static uint8_t buf_idx;
	uint8_t *data;

	switch (msg) {
 8003dc6:	7afb      	ldrb	r3, [r7, #11]
 8003dc8:	3b14      	subs	r3, #20
 8003dca:	2b0c      	cmp	r3, #12
 8003dcc:	d847      	bhi.n	8003e5e <u8x8_byte_i2c+0xaa>
 8003dce:	a201      	add	r2, pc, #4	; (adr r2, 8003dd4 <u8x8_byte_i2c+0x20>)
 8003dd0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dd4:	08003e63 	.word	0x08003e63
 8003dd8:	08003e5f 	.word	0x08003e5f
 8003ddc:	08003e5f 	.word	0x08003e5f
 8003de0:	08003e09 	.word	0x08003e09
 8003de4:	08003e39 	.word	0x08003e39
 8003de8:	08003e41 	.word	0x08003e41
 8003dec:	08003e5f 	.word	0x08003e5f
 8003df0:	08003e5f 	.word	0x08003e5f
 8003df4:	08003e5f 	.word	0x08003e5f
 8003df8:	08003e5f 	.word	0x08003e5f
 8003dfc:	08003e5f 	.word	0x08003e5f
 8003e00:	08003e5f 	.word	0x08003e5f
 8003e04:	08003e63 	.word	0x08003e63
	case U8X8_MSG_BYTE_SEND:
		data = (uint8_t*) arg_ptr;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	617b      	str	r3, [r7, #20]
		while (arg_int > 0) {
 8003e0c:	e010      	b.n	8003e30 <u8x8_byte_i2c+0x7c>
			buffer[buf_idx++] = *data;
 8003e0e:	4b18      	ldr	r3, [pc, #96]	; (8003e70 <u8x8_byte_i2c+0xbc>)
 8003e10:	781b      	ldrb	r3, [r3, #0]
 8003e12:	1c5a      	adds	r2, r3, #1
 8003e14:	b2d1      	uxtb	r1, r2
 8003e16:	4a16      	ldr	r2, [pc, #88]	; (8003e70 <u8x8_byte_i2c+0xbc>)
 8003e18:	7011      	strb	r1, [r2, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	697b      	ldr	r3, [r7, #20]
 8003e1e:	7819      	ldrb	r1, [r3, #0]
 8003e20:	4b14      	ldr	r3, [pc, #80]	; (8003e74 <u8x8_byte_i2c+0xc0>)
 8003e22:	5499      	strb	r1, [r3, r2]
			data++;
 8003e24:	697b      	ldr	r3, [r7, #20]
 8003e26:	3301      	adds	r3, #1
 8003e28:	617b      	str	r3, [r7, #20]
			arg_int--;
 8003e2a:	7abb      	ldrb	r3, [r7, #10]
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	72bb      	strb	r3, [r7, #10]
		while (arg_int > 0) {
 8003e30:	7abb      	ldrb	r3, [r7, #10]
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1eb      	bne.n	8003e0e <u8x8_byte_i2c+0x5a>
		}
		break;
 8003e36:	e015      	b.n	8003e64 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_INIT:
		break;
	case U8X8_MSG_BYTE_SET_DC:
		break;
	case U8X8_MSG_BYTE_START_TRANSFER:
		buf_idx = 0;
 8003e38:	4b0d      	ldr	r3, [pc, #52]	; (8003e70 <u8x8_byte_i2c+0xbc>)
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	701a      	strb	r2, [r3, #0]
		break;
 8003e3e:	e011      	b.n	8003e64 <u8x8_byte_i2c+0xb0>
	case U8X8_MSG_BYTE_END_TRANSFER:
		HAL_I2C_Master_Transmit(&hi2c1, u8x8_GetI2CAddress(u8x8),
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003e46:	b299      	uxth	r1, r3
 8003e48:	4b09      	ldr	r3, [pc, #36]	; (8003e70 <u8x8_byte_i2c+0xbc>)
 8003e4a:	781b      	ldrb	r3, [r3, #0]
 8003e4c:	b29b      	uxth	r3, r3
 8003e4e:	f04f 32ff 	mov.w	r2, #4294967295
 8003e52:	9200      	str	r2, [sp, #0]
 8003e54:	4a07      	ldr	r2, [pc, #28]	; (8003e74 <u8x8_byte_i2c+0xc0>)
 8003e56:	4808      	ldr	r0, [pc, #32]	; (8003e78 <u8x8_byte_i2c+0xc4>)
 8003e58:	f004 f8ba 	bl	8007fd0 <HAL_I2C_Master_Transmit>
				(uint8_t*) buffer, buf_idx, HAL_MAX_DELAY);
		break;
 8003e5c:	e002      	b.n	8003e64 <u8x8_byte_i2c+0xb0>
	default:
		return 0;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	e001      	b.n	8003e66 <u8x8_byte_i2c+0xb2>
		break;
 8003e62:	bf00      	nop
	}

	return 1;
 8003e64:	2301      	movs	r3, #1

}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3718      	adds	r7, #24
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}
 8003e6e:	bf00      	nop
 8003e70:	200020bd 	.word	0x200020bd
 8003e74:	200020c0 	.word	0x200020c0
 8003e78:	20000414 	.word	0x20000414

08003e7c <setRow>:

void setRow(uint8_t rowIdx) {
 8003e7c:	b580      	push	{r7, lr}
 8003e7e:	b082      	sub	sp, #8
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	71fb      	strb	r3, [r7, #7]

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_RESET);
 8003e86:	2200      	movs	r2, #0
 8003e88:	2140      	movs	r1, #64	; 0x40
 8003e8a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003e8e:	f003 fff7 	bl	8007e80 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(RA0_GPIO_Port, RA0_Pin, rowIdx & 0x01);
 8003e92:	79fb      	ldrb	r3, [r7, #7]
 8003e94:	f003 0301 	and.w	r3, r3, #1
 8003e98:	b2db      	uxtb	r3, r3
 8003e9a:	461a      	mov	r2, r3
 8003e9c:	2101      	movs	r1, #1
 8003e9e:	480f      	ldr	r0, [pc, #60]	; (8003edc <setRow+0x60>)
 8003ea0:	f003 ffee 	bl	8007e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA1_GPIO_Port, RA1_Pin, rowIdx & 0x02);
 8003ea4:	79fb      	ldrb	r3, [r7, #7]
 8003ea6:	f003 0302 	and.w	r3, r3, #2
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	461a      	mov	r2, r3
 8003eae:	2102      	movs	r1, #2
 8003eb0:	480a      	ldr	r0, [pc, #40]	; (8003edc <setRow+0x60>)
 8003eb2:	f003 ffe5 	bl	8007e80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(RA2_GPIO_Port, RA2_Pin, rowIdx & 0x04);
 8003eb6:	79fb      	ldrb	r3, [r7, #7]
 8003eb8:	f003 0304 	and.w	r3, r3, #4
 8003ebc:	b2db      	uxtb	r3, r3
 8003ebe:	461a      	mov	r2, r3
 8003ec0:	2110      	movs	r1, #16
 8003ec2:	4806      	ldr	r0, [pc, #24]	; (8003edc <setRow+0x60>)
 8003ec4:	f003 ffdc 	bl	8007e80 <HAL_GPIO_WritePin>

	HAL_GPIO_WritePin(REN_GPIO_Port, REN_Pin, GPIO_PIN_SET);
 8003ec8:	2201      	movs	r2, #1
 8003eca:	2140      	movs	r1, #64	; 0x40
 8003ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ed0:	f003 ffd6 	bl	8007e80 <HAL_GPIO_WritePin>

}
 8003ed4:	bf00      	nop
 8003ed6:	3708      	adds	r7, #8
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	48000400 	.word	0x48000400

08003ee0 <readCols>:

uint8_t readCols() {
 8003ee0:	b580      	push	{r7, lr}
 8003ee2:	b082      	sub	sp, #8
 8003ee4:	af00      	add	r7, sp, #0

	uint8_t C0_val = HAL_GPIO_ReadPin(C0_GPIO_Port, C0_Pin);
 8003ee6:	2108      	movs	r1, #8
 8003ee8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003eec:	f003 ffb0 	bl	8007e50 <HAL_GPIO_ReadPin>
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	71fb      	strb	r3, [r7, #7]
	uint8_t C1_val = HAL_GPIO_ReadPin(C1_GPIO_Port, C1_Pin);
 8003ef4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8003ef8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003efc:	f003 ffa8 	bl	8007e50 <HAL_GPIO_ReadPin>
 8003f00:	4603      	mov	r3, r0
 8003f02:	71bb      	strb	r3, [r7, #6]
	uint8_t C2_val = HAL_GPIO_ReadPin(C2_GPIO_Port, C2_Pin);
 8003f04:	2180      	movs	r1, #128	; 0x80
 8003f06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f0a:	f003 ffa1 	bl	8007e50 <HAL_GPIO_ReadPin>
 8003f0e:	4603      	mov	r3, r0
 8003f10:	717b      	strb	r3, [r7, #5]
	uint8_t C3_val = HAL_GPIO_ReadPin(C3_GPIO_Port, C3_Pin);
 8003f12:	f44f 7100 	mov.w	r1, #512	; 0x200
 8003f16:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003f1a:	f003 ff99 	bl	8007e50 <HAL_GPIO_ReadPin>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	713b      	strb	r3, [r7, #4]

	return (C3_val << 3) | (C2_val << 2) | (C1_val << 1) | C0_val;
 8003f22:	793b      	ldrb	r3, [r7, #4]
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	b25a      	sxtb	r2, r3
 8003f28:	797b      	ldrb	r3, [r7, #5]
 8003f2a:	009b      	lsls	r3, r3, #2
 8003f2c:	b25b      	sxtb	r3, r3
 8003f2e:	4313      	orrs	r3, r2
 8003f30:	b25a      	sxtb	r2, r3
 8003f32:	79bb      	ldrb	r3, [r7, #6]
 8003f34:	005b      	lsls	r3, r3, #1
 8003f36:	b25b      	sxtb	r3, r3
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	b25a      	sxtb	r2, r3
 8003f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	b25b      	sxtb	r3, r3
 8003f44:	b2db      	uxtb	r3, r3

}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}

08003f4e <readKeys>:

uint16_t readKeys() {
 8003f4e:	b580      	push	{r7, lr}
 8003f50:	b082      	sub	sp, #8
 8003f52:	af00      	add	r7, sp, #0

	uint16_t keysRead = 0;
 8003f54:	2300      	movs	r3, #0
 8003f56:	80fb      	strh	r3, [r7, #6]

	for (int i = 0; i <= 2; i++) {
 8003f58:	2300      	movs	r3, #0
 8003f5a:	603b      	str	r3, [r7, #0]
 8003f5c:	e018      	b.n	8003f90 <readKeys+0x42>

		setRow(i);
 8003f5e:	683b      	ldr	r3, [r7, #0]
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	4618      	mov	r0, r3
 8003f64:	f7ff ff8a 	bl	8003e7c <setRow>
		delayMicro(5);
 8003f68:	2005      	movs	r0, #5
 8003f6a:	f7ff fd69 	bl	8003a40 <delayMicro>
		keysRead |= readCols() << (4 * i);
 8003f6e:	f7ff ffb7 	bl	8003ee0 <readCols>
 8003f72:	4603      	mov	r3, r0
 8003f74:	461a      	mov	r2, r3
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	009b      	lsls	r3, r3, #2
 8003f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8003f7e:	b21a      	sxth	r2, r3
 8003f80:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003f84:	4313      	orrs	r3, r2
 8003f86:	b21b      	sxth	r3, r3
 8003f88:	80fb      	strh	r3, [r7, #6]
	for (int i = 0; i <= 2; i++) {
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	3301      	adds	r3, #1
 8003f8e:	603b      	str	r3, [r7, #0]
 8003f90:	683b      	ldr	r3, [r7, #0]
 8003f92:	2b02      	cmp	r3, #2
 8003f94:	dde3      	ble.n	8003f5e <readKeys+0x10>

	}

	return keysRead;
 8003f96:	88fb      	ldrh	r3, [r7, #6]

}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <readKnobs>:

uint16_t readKnobs() {
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b082      	sub	sp, #8
 8003fa4:	af00      	add	r7, sp, #0

	uint16_t knobsRead = 0;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	80fb      	strh	r3, [r7, #6]

	for (int i = 3; i <= 4; i++) {
 8003faa:	2303      	movs	r3, #3
 8003fac:	603b      	str	r3, [r7, #0]
 8003fae:	e019      	b.n	8003fe4 <readKnobs+0x44>

		setRow(i);
 8003fb0:	683b      	ldr	r3, [r7, #0]
 8003fb2:	b2db      	uxtb	r3, r3
 8003fb4:	4618      	mov	r0, r3
 8003fb6:	f7ff ff61 	bl	8003e7c <setRow>
		delayMicro(5);
 8003fba:	2005      	movs	r0, #5
 8003fbc:	f7ff fd40 	bl	8003a40 <delayMicro>
		knobsRead |= readCols() << (4 * (i-3));
 8003fc0:	f7ff ff8e 	bl	8003ee0 <readCols>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	461a      	mov	r2, r3
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	3b03      	subs	r3, #3
 8003fcc:	009b      	lsls	r3, r3, #2
 8003fce:	fa02 f303 	lsl.w	r3, r2, r3
 8003fd2:	b21a      	sxth	r2, r3
 8003fd4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	b21b      	sxth	r3, r3
 8003fdc:	80fb      	strh	r3, [r7, #6]
	for (int i = 3; i <= 4; i++) {
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	3301      	adds	r3, #1
 8003fe2:	603b      	str	r3, [r7, #0]
 8003fe4:	683b      	ldr	r3, [r7, #0]
 8003fe6:	2b04      	cmp	r3, #4
 8003fe8:	dde2      	ble.n	8003fb0 <readKnobs+0x10>

	}

	return knobsRead;
 8003fea:	88fb      	ldrh	r3, [r7, #6]

}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3708      	adds	r7, #8
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <changeKnobState>:

int16_t changeKnobState(uint8_t knob_state, uint8_t previousKnobState, uint16_t knobRotation, int8_t top_limit, int8_t bottom_limit){
 8003ff4:	b490      	push	{r4, r7}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	4604      	mov	r4, r0
 8003ffc:	4608      	mov	r0, r1
 8003ffe:	4611      	mov	r1, r2
 8004000:	461a      	mov	r2, r3
 8004002:	4623      	mov	r3, r4
 8004004:	71fb      	strb	r3, [r7, #7]
 8004006:	4603      	mov	r3, r0
 8004008:	71bb      	strb	r3, [r7, #6]
 800400a:	460b      	mov	r3, r1
 800400c:	80bb      	strh	r3, [r7, #4]
 800400e:	4613      	mov	r3, r2
 8004010:	70fb      	strb	r3, [r7, #3]
	int16_t rotation = 0;
 8004012:	2300      	movs	r3, #0
 8004014:	82fb      	strh	r3, [r7, #22]
	int current_knob = knob_state;
 8004016:	79fb      	ldrb	r3, [r7, #7]
 8004018:	613b      	str	r3, [r7, #16]
	int prev_knob = previousKnobState;
 800401a:	79bb      	ldrb	r3, [r7, #6]
 800401c:	60fb      	str	r3, [r7, #12]

	// upper and bottom levels for knob
	if ((((prev_knob == 0b11) && (current_knob == 0b10)) ||
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	2b03      	cmp	r3, #3
 8004022:	d102      	bne.n	800402a <changeKnobState+0x36>
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	2b02      	cmp	r3, #2
 8004028:	d005      	beq.n	8004036 <changeKnobState+0x42>
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	2b00      	cmp	r3, #0
 800402e:	d10e      	bne.n	800404e <changeKnobState+0x5a>
	  ((prev_knob == 0b00) && (current_knob == 0b01))) &&
 8004030:	693b      	ldr	r3, [r7, #16]
 8004032:	2b01      	cmp	r3, #1
 8004034:	d10b      	bne.n	800404e <changeKnobState+0x5a>
		knobRotation < top_limit
 8004036:	88ba      	ldrh	r2, [r7, #4]
 8004038:	f997 3003 	ldrsb.w	r3, [r7, #3]
	  ((prev_knob == 0b00) && (current_knob == 0b01))) &&
 800403c:	429a      	cmp	r2, r3
 800403e:	da06      	bge.n	800404e <changeKnobState+0x5a>
	){
	rotation ++;
 8004040:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004044:	b29b      	uxth	r3, r3
 8004046:	3301      	adds	r3, #1
 8004048:	b29b      	uxth	r3, r3
 800404a:	82fb      	strh	r3, [r7, #22]
 800404c:	e016      	b.n	800407c <changeKnobState+0x88>
	} else
	if ((((prev_knob == 0b01) && (current_knob == 0b00)) ||
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	2b01      	cmp	r3, #1
 8004052:	d102      	bne.n	800405a <changeKnobState+0x66>
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	2b00      	cmp	r3, #0
 8004058:	d005      	beq.n	8004066 <changeKnobState+0x72>
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	2b02      	cmp	r3, #2
 800405e:	d10d      	bne.n	800407c <changeKnobState+0x88>
	   ((prev_knob == 0b10) && (current_knob == 0b11))) &&
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	2b03      	cmp	r3, #3
 8004064:	d10a      	bne.n	800407c <changeKnobState+0x88>
		 knobRotation > bottom_limit
 8004066:	88ba      	ldrh	r2, [r7, #4]
 8004068:	f997 3020 	ldrsb.w	r3, [r7, #32]
	   ((prev_knob == 0b10) && (current_knob == 0b11))) &&
 800406c:	429a      	cmp	r2, r3
 800406e:	dd05      	ble.n	800407c <changeKnobState+0x88>
	) {
	rotation --;
 8004070:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8004074:	b29b      	uxth	r3, r3
 8004076:	3b01      	subs	r3, #1
 8004078:	b29b      	uxth	r3, r3
 800407a:	82fb      	strh	r3, [r7, #22]
	}

	return rotation;
 800407c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
}
 8004080:	4618      	mov	r0, r3
 8004082:	3718      	adds	r7, #24
 8004084:	46bd      	mov	sp, r7
 8004086:	bc90      	pop	{r4, r7}
 8004088:	4770      	bx	lr
	...

0800408c <scanKnob>:

void scanKnob(uint16_t localKnobs, uint16_t prevKnobs, uint8_t knob_index, char type ) {
 800408c:	b590      	push	{r4, r7, lr}
 800408e:	b08b      	sub	sp, #44	; 0x2c
 8004090:	af02      	add	r7, sp, #8
 8004092:	4604      	mov	r4, r0
 8004094:	4608      	mov	r0, r1
 8004096:	4611      	mov	r1, r2
 8004098:	461a      	mov	r2, r3
 800409a:	4623      	mov	r3, r4
 800409c:	80fb      	strh	r3, [r7, #6]
 800409e:	4603      	mov	r3, r0
 80040a0:	80bb      	strh	r3, [r7, #4]
 80040a2:	460b      	mov	r3, r1
 80040a4:	70fb      	strb	r3, [r7, #3]
 80040a6:	4613      	mov	r3, r2
 80040a8:	70bb      	strb	r3, [r7, #2]
	uint8_t shift_row = (knob_index >= 2) ? 0 : 4;
 80040aa:	78fb      	ldrb	r3, [r7, #3]
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d901      	bls.n	80040b4 <scanKnob+0x28>
 80040b0:	2300      	movs	r3, #0
 80040b2:	e000      	b.n	80040b6 <scanKnob+0x2a>
 80040b4:	2304      	movs	r3, #4
 80040b6:	76fb      	strb	r3, [r7, #27]
	uint8_t row = 0xF;
 80040b8:	230f      	movs	r3, #15
 80040ba:	76bb      	strb	r3, [r7, #26]
	uint8_t knob_on_row = 1 - knob_index % 2;
 80040bc:	78fb      	ldrb	r3, [r7, #3]
 80040be:	f003 0301 	and.w	r3, r3, #1
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	bf0c      	ite	eq
 80040c6:	2301      	moveq	r3, #1
 80040c8:	2300      	movne	r3, #0
 80040ca:	b2db      	uxtb	r3, r3
 80040cc:	767b      	strb	r3, [r7, #25]

	uint8_t rowKnobStates 	  = (localKnobs 	 >> shift_row) & row;
 80040ce:	88fa      	ldrh	r2, [r7, #6]
 80040d0:	7efb      	ldrb	r3, [r7, #27]
 80040d2:	fa42 f303 	asr.w	r3, r2, r3
 80040d6:	b25a      	sxtb	r2, r3
 80040d8:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80040dc:	4013      	ands	r3, r2
 80040de:	b25b      	sxtb	r3, r3
 80040e0:	763b      	strb	r3, [r7, #24]
	uint8_t rowPrevKnobStates = (prevKnobs >> shift_row) & row;
 80040e2:	88ba      	ldrh	r2, [r7, #4]
 80040e4:	7efb      	ldrb	r3, [r7, #27]
 80040e6:	fa42 f303 	asr.w	r3, r2, r3
 80040ea:	b25a      	sxtb	r2, r3
 80040ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80040f0:	4013      	ands	r3, r2
 80040f2:	b25b      	sxtb	r3, r3
 80040f4:	75fb      	strb	r3, [r7, #23]

//	char s[32];
//	sprintf(s, "rowKnobStates:%x", rowKnobStates);
//	serialPrintln(s);

	uint8_t knobState		  = (rowKnobStates 	   >> knob_on_row*2) & 0b11;
 80040f6:	7e3a      	ldrb	r2, [r7, #24]
 80040f8:	7e7b      	ldrb	r3, [r7, #25]
 80040fa:	005b      	lsls	r3, r3, #1
 80040fc:	fa42 f303 	asr.w	r3, r2, r3
 8004100:	b2db      	uxtb	r3, r3
 8004102:	f003 0303 	and.w	r3, r3, #3
 8004106:	75bb      	strb	r3, [r7, #22]
	uint8_t previousKnobState = (rowPrevKnobStates >> knob_on_row*2) & 0b11;
 8004108:	7dfa      	ldrb	r2, [r7, #23]
 800410a:	7e7b      	ldrb	r3, [r7, #25]
 800410c:	005b      	lsls	r3, r3, #1
 800410e:	fa42 f303 	asr.w	r3, r2, r3
 8004112:	b2db      	uxtb	r3, r3
 8004114:	f003 0303 	and.w	r3, r3, #3
 8004118:	757b      	strb	r3, [r7, #21]


//	UPDATE GLOBAL VARIABLES
	osMutexAcquire(knobsMutexHandle, osWaitForever);
 800411a:	4b3f      	ldr	r3, [pc, #252]	; (8004218 <scanKnob+0x18c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f04f 31ff 	mov.w	r1, #4294967295
 8004122:	4618      	mov	r0, r3
 8004124:	f006 ffdd 	bl	800b0e2 <osMutexAcquire>
	__atomic_store_n(&knobs, localKnobs, __ATOMIC_RELAXED);
 8004128:	4a3c      	ldr	r2, [pc, #240]	; (800421c <scanKnob+0x190>)
 800412a:	88fb      	ldrh	r3, [r7, #6]
 800412c:	8013      	strh	r3, [r2, #0]
	osMutexRelease(knobsMutexHandle);
 800412e:	4b3a      	ldr	r3, [pc, #232]	; (8004218 <scanKnob+0x18c>)
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4618      	mov	r0, r3
 8004134:	f007 f820 	bl	800b178 <osMutexRelease>

	if (previousKnobState != knobState) {
 8004138:	7d7a      	ldrb	r2, [r7, #21]
 800413a:	7dbb      	ldrb	r3, [r7, #22]
 800413c:	429a      	cmp	r2, r3
 800413e:	d066      	beq.n	800420e <scanKnob+0x182>
		osMutexAcquire(knobsMutexHandle, osWaitForever);
 8004140:	4b35      	ldr	r3, [pc, #212]	; (8004218 <scanKnob+0x18c>)
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	f04f 31ff 	mov.w	r1, #4294967295
 8004148:	4618      	mov	r0, r3
 800414a:	f006 ffca 	bl	800b0e2 <osMutexAcquire>
		__atomic_store_n(&prev_knobs, localKnobs, __ATOMIC_RELAXED);
 800414e:	4a34      	ldr	r2, [pc, #208]	; (8004220 <scanKnob+0x194>)
 8004150:	88fb      	ldrh	r3, [r7, #6]
 8004152:	8013      	strh	r3, [r2, #0]
		osMutexRelease(knobsMutexHandle);
 8004154:	4b30      	ldr	r3, [pc, #192]	; (8004218 <scanKnob+0x18c>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	4618      	mov	r0, r3
 800415a:	f007 f80d 	bl	800b178 <osMutexRelease>

		if (type == 'v'){
 800415e:	78bb      	ldrb	r3, [r7, #2]
 8004160:	2b76      	cmp	r3, #118	; 0x76
 8004162:	d112      	bne.n	800418a <scanKnob+0xfe>
			int16_t change_volume = changeKnobState(knobState, previousKnobState, volume, 12, 0);
 8004164:	4b2f      	ldr	r3, [pc, #188]	; (8004224 <scanKnob+0x198>)
 8004166:	881a      	ldrh	r2, [r3, #0]
 8004168:	7d79      	ldrb	r1, [r7, #21]
 800416a:	7db8      	ldrb	r0, [r7, #22]
 800416c:	2300      	movs	r3, #0
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	230c      	movs	r3, #12
 8004172:	f7ff ff3f 	bl	8003ff4 <changeKnobState>
 8004176:	4603      	mov	r3, r0
 8004178:	813b      	strh	r3, [r7, #8]
			volume = volume + change_volume;
 800417a:	4b2a      	ldr	r3, [pc, #168]	; (8004224 <scanKnob+0x198>)
 800417c:	881a      	ldrh	r2, [r3, #0]
 800417e:	893b      	ldrh	r3, [r7, #8]
 8004180:	4413      	add	r3, r2
 8004182:	b29a      	uxth	r2, r3
 8004184:	4b27      	ldr	r3, [pc, #156]	; (8004224 <scanKnob+0x198>)
 8004186:	801a      	strh	r2, [r3, #0]
				choose_wave_gen(wave_form, t, samples); // 0 - sawtooth; 1 - sine; 2 - square; 3 - triangle; 4 - special; other/default - sawtooth
			}
		}
	}

}
 8004188:	e041      	b.n	800420e <scanKnob+0x182>
		} else if (type == 'o'){
 800418a:	78bb      	ldrb	r3, [r7, #2]
 800418c:	2b6f      	cmp	r3, #111	; 0x6f
 800418e:	d112      	bne.n	80041b6 <scanKnob+0x12a>
			int16_t change_octave = changeKnobState(knobState, previousKnobState, octave, 8, 2); // can only go one lower than the default octave
 8004190:	4b25      	ldr	r3, [pc, #148]	; (8004228 <scanKnob+0x19c>)
 8004192:	881a      	ldrh	r2, [r3, #0]
 8004194:	7d79      	ldrb	r1, [r7, #21]
 8004196:	7db8      	ldrb	r0, [r7, #22]
 8004198:	2302      	movs	r3, #2
 800419a:	9300      	str	r3, [sp, #0]
 800419c:	2308      	movs	r3, #8
 800419e:	f7ff ff29 	bl	8003ff4 <changeKnobState>
 80041a2:	4603      	mov	r3, r0
 80041a4:	817b      	strh	r3, [r7, #10]
			octave = octave + change_octave;
 80041a6:	4b20      	ldr	r3, [pc, #128]	; (8004228 <scanKnob+0x19c>)
 80041a8:	881a      	ldrh	r2, [r3, #0]
 80041aa:	897b      	ldrh	r3, [r7, #10]
 80041ac:	4413      	add	r3, r2
 80041ae:	b29a      	uxth	r2, r3
 80041b0:	4b1d      	ldr	r3, [pc, #116]	; (8004228 <scanKnob+0x19c>)
 80041b2:	801a      	strh	r2, [r3, #0]
}
 80041b4:	e02b      	b.n	800420e <scanKnob+0x182>
		} else if (type == 'w'){
 80041b6:	78bb      	ldrb	r3, [r7, #2]
 80041b8:	2b77      	cmp	r3, #119	; 0x77
 80041ba:	d128      	bne.n	800420e <scanKnob+0x182>
			int16_t change_wave = changeKnobState(knobState, previousKnobState, wave_form, 4, 0);
 80041bc:	4b1b      	ldr	r3, [pc, #108]	; (800422c <scanKnob+0x1a0>)
 80041be:	781b      	ldrb	r3, [r3, #0]
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	7d79      	ldrb	r1, [r7, #21]
 80041c4:	7db8      	ldrb	r0, [r7, #22]
 80041c6:	2300      	movs	r3, #0
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	2304      	movs	r3, #4
 80041cc:	f7ff ff12 	bl	8003ff4 <changeKnobState>
 80041d0:	4603      	mov	r3, r0
 80041d2:	827b      	strh	r3, [r7, #18]
			wave_form = wave_form + change_wave;
 80041d4:	8a7b      	ldrh	r3, [r7, #18]
 80041d6:	b2da      	uxtb	r2, r3
 80041d8:	4b14      	ldr	r3, [pc, #80]	; (800422c <scanKnob+0x1a0>)
 80041da:	781b      	ldrb	r3, [r3, #0]
 80041dc:	4413      	add	r3, r2
 80041de:	b2da      	uxtb	r2, r3
 80041e0:	4b12      	ldr	r3, [pc, #72]	; (800422c <scanKnob+0x1a0>)
 80041e2:	701a      	strb	r2, [r3, #0]
			for (int t = 0; t < 12; t++) {
 80041e4:	2300      	movs	r3, #0
 80041e6:	61fb      	str	r3, [r7, #28]
 80041e8:	e00e      	b.n	8004208 <scanKnob+0x17c>
				uint32_t samples =  wavetable_sizes[t];
 80041ea:	4a11      	ldr	r2, [pc, #68]	; (8004230 <scanKnob+0x1a4>)
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041f2:	60fb      	str	r3, [r7, #12]
				choose_wave_gen(wave_form, t, samples); // 0 - sawtooth; 1 - sine; 2 - square; 3 - triangle; 4 - special; other/default - sawtooth
 80041f4:	4b0d      	ldr	r3, [pc, #52]	; (800422c <scanKnob+0x1a0>)
 80041f6:	781b      	ldrb	r3, [r3, #0]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	69f9      	ldr	r1, [r7, #28]
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 f81b 	bl	8004238 <choose_wave_gen>
			for (int t = 0; t < 12; t++) {
 8004202:	69fb      	ldr	r3, [r7, #28]
 8004204:	3301      	adds	r3, #1
 8004206:	61fb      	str	r3, [r7, #28]
 8004208:	69fb      	ldr	r3, [r7, #28]
 800420a:	2b0b      	cmp	r3, #11
 800420c:	dded      	ble.n	80041ea <scanKnob+0x15e>
}
 800420e:	bf00      	nop
 8004210:	3724      	adds	r7, #36	; 0x24
 8004212:	46bd      	mov	sp, r7
 8004214:	bd90      	pop	{r4, r7, pc}
 8004216:	bf00      	nop
 8004218:	200005f0 	.word	0x200005f0
 800421c:	20000032 	.word	0x20000032
 8004220:	20000034 	.word	0x20000034
 8004224:	20000036 	.word	0x20000036
 8004228:	20000038 	.word	0x20000038
 800422c:	200020bc 	.word	0x200020bc
 8004230:	0801d51c 	.word	0x0801d51c
 8004234:	00000000 	.word	0x00000000

08004238 <choose_wave_gen>:

void choose_wave_gen(uint8_t wave, int t, uint32_t samples){
 8004238:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800423c:	b092      	sub	sp, #72	; 0x48
 800423e:	af00      	add	r7, sp, #0
 8004240:	4603      	mov	r3, r0
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
 8004246:	73fb      	strb	r3, [r7, #15]
	if(wave == 0){
 8004248:	7bfb      	ldrb	r3, [r7, #15]
 800424a:	2b00      	cmp	r3, #0
 800424c:	d12c      	bne.n	80042a8 <choose_wave_gen+0x70>
		//      SAWTOOTH WAVES
		int half_samples = samples / 2;
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	085b      	lsrs	r3, r3, #1
 8004252:	617b      	str	r3, [r7, #20]
		for (int i = 0; i < samples; i++) {
 8004254:	2300      	movs	r3, #0
 8004256:	647b      	str	r3, [r7, #68]	; 0x44
 8004258:	e021      	b.n	800429e <choose_wave_gen+0x66>
			lookup_tables[t][i] = (i <= half_samples) ? 2048 * ((float)(i-half_samples) / (float) samples) : 2048 * ((float)(i-half_samples) / (float) samples);
 800425a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	ee07 3a90 	vmov	s15, r3
 8004264:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	ee07 3a90 	vmov	s15, r3
 800426e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004272:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004276:	ed9f 7a82 	vldr	s14, [pc, #520]	; 8004480 <choose_wave_gen+0x248>
 800427a:	ee67 7a87 	vmul.f32	s15, s15, s14
 800427e:	4a81      	ldr	r2, [pc, #516]	; (8004484 <choose_wave_gen+0x24c>)
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004286:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004288:	005b      	lsls	r3, r3, #1
 800428a:	4413      	add	r3, r2
 800428c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004290:	ee17 2a90 	vmov	r2, s15
 8004294:	b212      	sxth	r2, r2
 8004296:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < samples; i++) {
 8004298:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800429a:	3301      	adds	r3, #1
 800429c:	647b      	str	r3, [r7, #68]	; 0x44
 800429e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042a0:	687a      	ldr	r2, [r7, #4]
 80042a2:	429a      	cmp	r2, r3
 80042a4:	d8d9      	bhi.n	800425a <choose_wave_gen+0x22>
		int half_samples = samples / 2;
		for (int i = 0; i < samples; i++) {
			lookup_tables[t][i] = (i <= half_samples) ? 2048 * ((float)(i-half_samples) / (float) samples) : 2048 * ((float)(i-half_samples) / (float) samples);
		}
	}
}
 80042a6:	e258      	b.n	800475a <choose_wave_gen+0x522>
	} else if(wave == 1){
 80042a8:	7bfb      	ldrb	r3, [r7, #15]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d14c      	bne.n	8004348 <choose_wave_gen+0x110>
		for (int i = 0; i < samples; i++) {
 80042ae:	2300      	movs	r3, #0
 80042b0:	643b      	str	r3, [r7, #64]	; 0x40
 80042b2:	e044      	b.n	800433e <choose_wave_gen+0x106>
			lookup_tables[t][i] = 2048 * sin(2.0 * PI * (float)i / (float) samples);
 80042b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b6:	ee07 3a90 	vmov	s15, r3
 80042ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80042be:	ee17 0a90 	vmov	r0, s15
 80042c2:	f7fc f941 	bl	8000548 <__aeabi_f2d>
 80042c6:	a36c      	add	r3, pc, #432	; (adr r3, 8004478 <choose_wave_gen+0x240>)
 80042c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042cc:	f7fc f994 	bl	80005f8 <__aeabi_dmul>
 80042d0:	4602      	mov	r2, r0
 80042d2:	460b      	mov	r3, r1
 80042d4:	4614      	mov	r4, r2
 80042d6:	461d      	mov	r5, r3
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	ee07 3a90 	vmov	s15, r3
 80042de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042e2:	ee17 0a90 	vmov	r0, s15
 80042e6:	f7fc f92f 	bl	8000548 <__aeabi_f2d>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4620      	mov	r0, r4
 80042f0:	4629      	mov	r1, r5
 80042f2:	f7fc faab 	bl	800084c <__aeabi_ddiv>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	ec43 2b17 	vmov	d7, r2, r3
 80042fe:	eeb0 0a47 	vmov.f32	s0, s14
 8004302:	eef0 0a67 	vmov.f32	s1, s15
 8004306:	f00b f8b3 	bl	800f470 <sin>
 800430a:	ec51 0b10 	vmov	r0, r1, d0
 800430e:	f04f 0200 	mov.w	r2, #0
 8004312:	4b5d      	ldr	r3, [pc, #372]	; (8004488 <choose_wave_gen+0x250>)
 8004314:	f7fc f970 	bl	80005f8 <__aeabi_dmul>
 8004318:	4602      	mov	r2, r0
 800431a:	460b      	mov	r3, r1
 800431c:	4610      	mov	r0, r2
 800431e:	4619      	mov	r1, r3
 8004320:	4a58      	ldr	r2, [pc, #352]	; (8004484 <choose_wave_gen+0x24c>)
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004328:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800432a:	005b      	lsls	r3, r3, #1
 800432c:	18d4      	adds	r4, r2, r3
 800432e:	f7fc fbfd 	bl	8000b2c <__aeabi_d2iz>
 8004332:	4603      	mov	r3, r0
 8004334:	b21b      	sxth	r3, r3
 8004336:	8023      	strh	r3, [r4, #0]
		for (int i = 0; i < samples; i++) {
 8004338:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800433a:	3301      	adds	r3, #1
 800433c:	643b      	str	r3, [r7, #64]	; 0x40
 800433e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	429a      	cmp	r2, r3
 8004344:	d8b6      	bhi.n	80042b4 <choose_wave_gen+0x7c>
}
 8004346:	e208      	b.n	800475a <choose_wave_gen+0x522>
	} else if(wave == 2){
 8004348:	7bfb      	ldrb	r3, [r7, #15]
 800434a:	2b02      	cmp	r3, #2
 800434c:	d11e      	bne.n	800438c <choose_wave_gen+0x154>
		int half_samples = samples / 2;
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	085b      	lsrs	r3, r3, #1
 8004352:	61bb      	str	r3, [r7, #24]
		for (int i = 0; i < samples; i++) {
 8004354:	2300      	movs	r3, #0
 8004356:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004358:	e013      	b.n	8004382 <choose_wave_gen+0x14a>
			lookup_tables[t][i] = (i <= half_samples) ? 2048 * (1.0) : 2048 * (-1.0);
 800435a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800435c:	69bb      	ldr	r3, [r7, #24]
 800435e:	429a      	cmp	r2, r3
 8004360:	dc02      	bgt.n	8004368 <choose_wave_gen+0x130>
 8004362:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8004366:	e000      	b.n	800436a <choose_wave_gen+0x132>
 8004368:	4948      	ldr	r1, [pc, #288]	; (800448c <choose_wave_gen+0x254>)
 800436a:	4a46      	ldr	r2, [pc, #280]	; (8004484 <choose_wave_gen+0x24c>)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8004372:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004374:	005b      	lsls	r3, r3, #1
 8004376:	4413      	add	r3, r2
 8004378:	460a      	mov	r2, r1
 800437a:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < samples; i++) {
 800437c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800437e:	3301      	adds	r3, #1
 8004380:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004382:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004384:	687a      	ldr	r2, [r7, #4]
 8004386:	429a      	cmp	r2, r3
 8004388:	d8e7      	bhi.n	800435a <choose_wave_gen+0x122>
}
 800438a:	e1e6      	b.n	800475a <choose_wave_gen+0x522>
	} else if(wave == 3){
 800438c:	7bfb      	ldrb	r3, [r7, #15]
 800438e:	2b03      	cmp	r3, #3
 8004390:	d16a      	bne.n	8004468 <choose_wave_gen+0x230>
		int half_samples = samples / 2;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	085b      	lsrs	r3, r3, #1
 8004396:	627b      	str	r3, [r7, #36]	; 0x24
		int first_fourth = samples / 4;
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	089b      	lsrs	r3, r3, #2
 800439c:	623b      	str	r3, [r7, #32]
		int third_fourth = half_samples + first_fourth;
 800439e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80043a0:	6a3b      	ldr	r3, [r7, #32]
 80043a2:	4413      	add	r3, r2
 80043a4:	61fb      	str	r3, [r7, #28]
		for (int i = 0; i < samples; i++) {
 80043a6:	2300      	movs	r3, #0
 80043a8:	63bb      	str	r3, [r7, #56]	; 0x38
 80043aa:	e058      	b.n	800445e <choose_wave_gen+0x226>
			lookup_tables[t][i] = (i <= first_fourth) ?
 80043ac:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	dc16      	bgt.n	80043e2 <choose_wave_gen+0x1aa>
									2048 * ((float)(-i) / (float) samples)
 80043b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b6:	425b      	negs	r3, r3
 80043b8:	ee07 3a90 	vmov	s15, r3
 80043bc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	ee07 3a90 	vmov	s15, r3
 80043c6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80043ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80043ce:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8004480 <choose_wave_gen+0x248>
 80043d2:	ee67 7a87 	vmul.f32	s15, s15, s14
			lookup_tables[t][i] = (i <= first_fourth) ?
 80043d6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043da:	ee17 3a90 	vmov	r3, s15
 80043de:	b21b      	sxth	r3, r3
 80043e0:	e032      	b.n	8004448 <choose_wave_gen+0x210>
 80043e2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043e4:	69fb      	ldr	r3, [r7, #28]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	dc17      	bgt.n	800441a <choose_wave_gen+0x1e2>
									(i <= third_fourth) ? 2048 * ((float)(i-half_samples) / (float) samples) : 2048 * ((float)(samples-i) / (float) samples);
 80043ea:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80043ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ee:	1ad3      	subs	r3, r2, r3
 80043f0:	ee07 3a90 	vmov	s15, r3
 80043f4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	ee07 3a90 	vmov	s15, r3
 80043fe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004402:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004406:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8004480 <choose_wave_gen+0x248>
 800440a:	ee67 7a87 	vmul.f32	s15, s15, s14
			lookup_tables[t][i] = (i <= first_fourth) ?
 800440e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004412:	ee17 3a90 	vmov	r3, s15
 8004416:	b21b      	sxth	r3, r3
 8004418:	e016      	b.n	8004448 <choose_wave_gen+0x210>
									(i <= third_fourth) ? 2048 * ((float)(i-half_samples) / (float) samples) : 2048 * ((float)(samples-i) / (float) samples);
 800441a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800441c:	687a      	ldr	r2, [r7, #4]
 800441e:	1ad3      	subs	r3, r2, r3
 8004420:	ee07 3a90 	vmov	s15, r3
 8004424:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	ee07 3a90 	vmov	s15, r3
 800442e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004436:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8004480 <choose_wave_gen+0x248>
 800443a:	ee67 7a87 	vmul.f32	s15, s15, s14
			lookup_tables[t][i] = (i <= first_fourth) ?
 800443e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004442:	ee17 3a90 	vmov	r3, s15
 8004446:	b21b      	sxth	r3, r3
 8004448:	490e      	ldr	r1, [pc, #56]	; (8004484 <choose_wave_gen+0x24c>)
 800444a:	68ba      	ldr	r2, [r7, #8]
 800444c:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8004450:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004452:	0052      	lsls	r2, r2, #1
 8004454:	440a      	add	r2, r1
 8004456:	8013      	strh	r3, [r2, #0]
		for (int i = 0; i < samples; i++) {
 8004458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800445a:	3301      	adds	r3, #1
 800445c:	63bb      	str	r3, [r7, #56]	; 0x38
 800445e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004460:	687a      	ldr	r2, [r7, #4]
 8004462:	429a      	cmp	r2, r3
 8004464:	d8a2      	bhi.n	80043ac <choose_wave_gen+0x174>
}
 8004466:	e178      	b.n	800475a <choose_wave_gen+0x522>
	} else if(wave == 4){
 8004468:	7bfb      	ldrb	r3, [r7, #15]
 800446a:	2b04      	cmp	r3, #4
 800446c:	f040 8149 	bne.w	8004702 <choose_wave_gen+0x4ca>
		for (int i = 0; i < samples; i++) {
 8004470:	2300      	movs	r3, #0
 8004472:	637b      	str	r3, [r7, #52]	; 0x34
 8004474:	e13f      	b.n	80046f6 <choose_wave_gen+0x4be>
 8004476:	bf00      	nop
 8004478:	54442eea 	.word	0x54442eea
 800447c:	401921fb 	.word	0x401921fb
 8004480:	45000000 	.word	0x45000000
 8004484:	20000000 	.word	0x20000000
 8004488:	40a00000 	.word	0x40a00000
 800448c:	fffff800 	.word	0xfffff800
			float harmonic_sample =  sin(2.0 * PI * (float)i / ((float) samples));
 8004490:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004492:	ee07 3a90 	vmov	s15, r3
 8004496:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800449a:	ee17 0a90 	vmov	r0, s15
 800449e:	f7fc f853 	bl	8000548 <__aeabi_f2d>
 80044a2:	a3b1      	add	r3, pc, #708	; (adr r3, 8004768 <choose_wave_gen+0x530>)
 80044a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80044a8:	f7fc f8a6 	bl	80005f8 <__aeabi_dmul>
 80044ac:	4602      	mov	r2, r0
 80044ae:	460b      	mov	r3, r1
 80044b0:	4614      	mov	r4, r2
 80044b2:	461d      	mov	r5, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	ee07 3a90 	vmov	s15, r3
 80044ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044be:	ee17 0a90 	vmov	r0, s15
 80044c2:	f7fc f841 	bl	8000548 <__aeabi_f2d>
 80044c6:	4602      	mov	r2, r0
 80044c8:	460b      	mov	r3, r1
 80044ca:	4620      	mov	r0, r4
 80044cc:	4629      	mov	r1, r5
 80044ce:	f7fc f9bd 	bl	800084c <__aeabi_ddiv>
 80044d2:	4602      	mov	r2, r0
 80044d4:	460b      	mov	r3, r1
 80044d6:	ec43 2b17 	vmov	d7, r2, r3
 80044da:	eeb0 0a47 	vmov.f32	s0, s14
 80044de:	eef0 0a67 	vmov.f32	s1, s15
 80044e2:	f00a ffc5 	bl	800f470 <sin>
 80044e6:	ec53 2b10 	vmov	r2, r3, d0
 80044ea:	4610      	mov	r0, r2
 80044ec:	4619      	mov	r1, r3
 80044ee:	f7fc fb45 	bl	8000b7c <__aeabi_d2f>
 80044f2:	4603      	mov	r3, r0
 80044f4:	62bb      	str	r3, [r7, #40]	; 0x28
			harmonic_sample += sin(2.0 * PI * (float)i * 3 / ((float) samples)) / 3;
 80044f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044f8:	f7fc f826 	bl	8000548 <__aeabi_f2d>
 80044fc:	4604      	mov	r4, r0
 80044fe:	460d      	mov	r5, r1
 8004500:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004502:	ee07 3a90 	vmov	s15, r3
 8004506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800450a:	ee17 0a90 	vmov	r0, s15
 800450e:	f7fc f81b 	bl	8000548 <__aeabi_f2d>
 8004512:	a395      	add	r3, pc, #596	; (adr r3, 8004768 <choose_wave_gen+0x530>)
 8004514:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004518:	f7fc f86e 	bl	80005f8 <__aeabi_dmul>
 800451c:	4602      	mov	r2, r0
 800451e:	460b      	mov	r3, r1
 8004520:	4610      	mov	r0, r2
 8004522:	4619      	mov	r1, r3
 8004524:	f04f 0200 	mov.w	r2, #0
 8004528:	4b91      	ldr	r3, [pc, #580]	; (8004770 <choose_wave_gen+0x538>)
 800452a:	f7fc f865 	bl	80005f8 <__aeabi_dmul>
 800452e:	4602      	mov	r2, r0
 8004530:	460b      	mov	r3, r1
 8004532:	4690      	mov	r8, r2
 8004534:	4699      	mov	r9, r3
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	ee07 3a90 	vmov	s15, r3
 800453c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004540:	ee17 0a90 	vmov	r0, s15
 8004544:	f7fc f800 	bl	8000548 <__aeabi_f2d>
 8004548:	4602      	mov	r2, r0
 800454a:	460b      	mov	r3, r1
 800454c:	4640      	mov	r0, r8
 800454e:	4649      	mov	r1, r9
 8004550:	f7fc f97c 	bl	800084c <__aeabi_ddiv>
 8004554:	4602      	mov	r2, r0
 8004556:	460b      	mov	r3, r1
 8004558:	ec43 2b17 	vmov	d7, r2, r3
 800455c:	eeb0 0a47 	vmov.f32	s0, s14
 8004560:	eef0 0a67 	vmov.f32	s1, s15
 8004564:	f00a ff84 	bl	800f470 <sin>
 8004568:	ec51 0b10 	vmov	r0, r1, d0
 800456c:	f04f 0200 	mov.w	r2, #0
 8004570:	4b7f      	ldr	r3, [pc, #508]	; (8004770 <choose_wave_gen+0x538>)
 8004572:	f7fc f96b 	bl	800084c <__aeabi_ddiv>
 8004576:	4602      	mov	r2, r0
 8004578:	460b      	mov	r3, r1
 800457a:	4620      	mov	r0, r4
 800457c:	4629      	mov	r1, r5
 800457e:	f7fb fe85 	bl	800028c <__adddf3>
 8004582:	4602      	mov	r2, r0
 8004584:	460b      	mov	r3, r1
 8004586:	4610      	mov	r0, r2
 8004588:	4619      	mov	r1, r3
 800458a:	f7fc faf7 	bl	8000b7c <__aeabi_d2f>
 800458e:	4603      	mov	r3, r0
 8004590:	62bb      	str	r3, [r7, #40]	; 0x28
			harmonic_sample += sin(2.0 * PI * (float)i * 7 / ((float) samples)) / 7;
 8004592:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004594:	f7fb ffd8 	bl	8000548 <__aeabi_f2d>
 8004598:	4604      	mov	r4, r0
 800459a:	460d      	mov	r5, r1
 800459c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800459e:	ee07 3a90 	vmov	s15, r3
 80045a2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80045a6:	ee17 0a90 	vmov	r0, s15
 80045aa:	f7fb ffcd 	bl	8000548 <__aeabi_f2d>
 80045ae:	a36e      	add	r3, pc, #440	; (adr r3, 8004768 <choose_wave_gen+0x530>)
 80045b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045b4:	f7fc f820 	bl	80005f8 <__aeabi_dmul>
 80045b8:	4602      	mov	r2, r0
 80045ba:	460b      	mov	r3, r1
 80045bc:	4610      	mov	r0, r2
 80045be:	4619      	mov	r1, r3
 80045c0:	f04f 0200 	mov.w	r2, #0
 80045c4:	4b6b      	ldr	r3, [pc, #428]	; (8004774 <choose_wave_gen+0x53c>)
 80045c6:	f7fc f817 	bl	80005f8 <__aeabi_dmul>
 80045ca:	4602      	mov	r2, r0
 80045cc:	460b      	mov	r3, r1
 80045ce:	4690      	mov	r8, r2
 80045d0:	4699      	mov	r9, r3
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	ee07 3a90 	vmov	s15, r3
 80045d8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80045dc:	ee17 0a90 	vmov	r0, s15
 80045e0:	f7fb ffb2 	bl	8000548 <__aeabi_f2d>
 80045e4:	4602      	mov	r2, r0
 80045e6:	460b      	mov	r3, r1
 80045e8:	4640      	mov	r0, r8
 80045ea:	4649      	mov	r1, r9
 80045ec:	f7fc f92e 	bl	800084c <__aeabi_ddiv>
 80045f0:	4602      	mov	r2, r0
 80045f2:	460b      	mov	r3, r1
 80045f4:	ec43 2b17 	vmov	d7, r2, r3
 80045f8:	eeb0 0a47 	vmov.f32	s0, s14
 80045fc:	eef0 0a67 	vmov.f32	s1, s15
 8004600:	f00a ff36 	bl	800f470 <sin>
 8004604:	ec51 0b10 	vmov	r0, r1, d0
 8004608:	f04f 0200 	mov.w	r2, #0
 800460c:	4b59      	ldr	r3, [pc, #356]	; (8004774 <choose_wave_gen+0x53c>)
 800460e:	f7fc f91d 	bl	800084c <__aeabi_ddiv>
 8004612:	4602      	mov	r2, r0
 8004614:	460b      	mov	r3, r1
 8004616:	4620      	mov	r0, r4
 8004618:	4629      	mov	r1, r5
 800461a:	f7fb fe37 	bl	800028c <__adddf3>
 800461e:	4602      	mov	r2, r0
 8004620:	460b      	mov	r3, r1
 8004622:	4610      	mov	r0, r2
 8004624:	4619      	mov	r1, r3
 8004626:	f7fc faa9 	bl	8000b7c <__aeabi_d2f>
 800462a:	4603      	mov	r3, r0
 800462c:	62bb      	str	r3, [r7, #40]	; 0x28
			harmonic_sample += sin(2.0 * PI * (float)i * 8 / ((float) samples)) / 8;
 800462e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004630:	f7fb ff8a 	bl	8000548 <__aeabi_f2d>
 8004634:	4604      	mov	r4, r0
 8004636:	460d      	mov	r5, r1
 8004638:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800463a:	ee07 3a90 	vmov	s15, r3
 800463e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8004642:	ee17 0a90 	vmov	r0, s15
 8004646:	f7fb ff7f 	bl	8000548 <__aeabi_f2d>
 800464a:	a347      	add	r3, pc, #284	; (adr r3, 8004768 <choose_wave_gen+0x530>)
 800464c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004650:	f7fb ffd2 	bl	80005f8 <__aeabi_dmul>
 8004654:	4602      	mov	r2, r0
 8004656:	460b      	mov	r3, r1
 8004658:	4610      	mov	r0, r2
 800465a:	4619      	mov	r1, r3
 800465c:	f04f 0200 	mov.w	r2, #0
 8004660:	4b45      	ldr	r3, [pc, #276]	; (8004778 <choose_wave_gen+0x540>)
 8004662:	f7fb ffc9 	bl	80005f8 <__aeabi_dmul>
 8004666:	4602      	mov	r2, r0
 8004668:	460b      	mov	r3, r1
 800466a:	4690      	mov	r8, r2
 800466c:	4699      	mov	r9, r3
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	ee07 3a90 	vmov	s15, r3
 8004674:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004678:	ee17 0a90 	vmov	r0, s15
 800467c:	f7fb ff64 	bl	8000548 <__aeabi_f2d>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	4640      	mov	r0, r8
 8004686:	4649      	mov	r1, r9
 8004688:	f7fc f8e0 	bl	800084c <__aeabi_ddiv>
 800468c:	4602      	mov	r2, r0
 800468e:	460b      	mov	r3, r1
 8004690:	ec43 2b17 	vmov	d7, r2, r3
 8004694:	eeb0 0a47 	vmov.f32	s0, s14
 8004698:	eef0 0a67 	vmov.f32	s1, s15
 800469c:	f00a fee8 	bl	800f470 <sin>
 80046a0:	ec51 0b10 	vmov	r0, r1, d0
 80046a4:	f04f 0200 	mov.w	r2, #0
 80046a8:	4b33      	ldr	r3, [pc, #204]	; (8004778 <choose_wave_gen+0x540>)
 80046aa:	f7fc f8cf 	bl	800084c <__aeabi_ddiv>
 80046ae:	4602      	mov	r2, r0
 80046b0:	460b      	mov	r3, r1
 80046b2:	4620      	mov	r0, r4
 80046b4:	4629      	mov	r1, r5
 80046b6:	f7fb fde9 	bl	800028c <__adddf3>
 80046ba:	4602      	mov	r2, r0
 80046bc:	460b      	mov	r3, r1
 80046be:	4610      	mov	r0, r2
 80046c0:	4619      	mov	r1, r3
 80046c2:	f7fc fa5b 	bl	8000b7c <__aeabi_d2f>
 80046c6:	4603      	mov	r3, r0
 80046c8:	62bb      	str	r3, [r7, #40]	; 0x28
			lookup_tables[t][i] = (2048 * harmonic_sample);
 80046ca:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80046ce:	ed9f 7a2b 	vldr	s14, [pc, #172]	; 800477c <choose_wave_gen+0x544>
 80046d2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80046d6:	4a2a      	ldr	r2, [pc, #168]	; (8004780 <choose_wave_gen+0x548>)
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80046de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	4413      	add	r3, r2
 80046e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80046e8:	ee17 2a90 	vmov	r2, s15
 80046ec:	b212      	sxth	r2, r2
 80046ee:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < samples; i++) {
 80046f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f2:	3301      	adds	r3, #1
 80046f4:	637b      	str	r3, [r7, #52]	; 0x34
 80046f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f8:	687a      	ldr	r2, [r7, #4]
 80046fa:	429a      	cmp	r2, r3
 80046fc:	f63f aec8 	bhi.w	8004490 <choose_wave_gen+0x258>
}
 8004700:	e02b      	b.n	800475a <choose_wave_gen+0x522>
		int half_samples = samples / 2;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	085b      	lsrs	r3, r3, #1
 8004706:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (int i = 0; i < samples; i++) {
 8004708:	2300      	movs	r3, #0
 800470a:	633b      	str	r3, [r7, #48]	; 0x30
 800470c:	e021      	b.n	8004752 <choose_wave_gen+0x51a>
			lookup_tables[t][i] = (i <= half_samples) ? 2048 * ((float)(i-half_samples) / (float) samples) : 2048 * ((float)(i-half_samples) / (float) samples);
 800470e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004710:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004712:	1ad3      	subs	r3, r2, r3
 8004714:	ee07 3a90 	vmov	s15, r3
 8004718:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	ee07 3a90 	vmov	s15, r3
 8004722:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004726:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800472a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 800477c <choose_wave_gen+0x544>
 800472e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8004732:	4a13      	ldr	r2, [pc, #76]	; (8004780 <choose_wave_gen+0x548>)
 8004734:	68bb      	ldr	r3, [r7, #8]
 8004736:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800473a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473c:	005b      	lsls	r3, r3, #1
 800473e:	4413      	add	r3, r2
 8004740:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004744:	ee17 2a90 	vmov	r2, s15
 8004748:	b212      	sxth	r2, r2
 800474a:	801a      	strh	r2, [r3, #0]
		for (int i = 0; i < samples; i++) {
 800474c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800474e:	3301      	adds	r3, #1
 8004750:	633b      	str	r3, [r7, #48]	; 0x30
 8004752:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004754:	687a      	ldr	r2, [r7, #4]
 8004756:	429a      	cmp	r2, r3
 8004758:	d8d9      	bhi.n	800470e <choose_wave_gen+0x4d6>
}
 800475a:	bf00      	nop
 800475c:	3748      	adds	r7, #72	; 0x48
 800475e:	46bd      	mov	sp, r7
 8004760:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8004764:	f3af 8000 	nop.w
 8004768:	54442eea 	.word	0x54442eea
 800476c:	401921fb 	.word	0x401921fb
 8004770:	40080000 	.word	0x40080000
 8004774:	401c0000 	.word	0x401c0000
 8004778:	40200000 	.word	0x40200000
 800477c:	45000000 	.word	0x45000000
 8004780:	20000000 	.word	0x20000000

08004784 <display_wave>:

void display_wave(uint16_t x, uint16_t y){
 8004784:	b580      	push	{r7, lr}
 8004786:	b082      	sub	sp, #8
 8004788:	af00      	add	r7, sp, #0
 800478a:	4603      	mov	r3, r0
 800478c:	460a      	mov	r2, r1
 800478e:	80fb      	strh	r3, [r7, #6]
 8004790:	4613      	mov	r3, r2
 8004792:	80bb      	strh	r3, [r7, #4]
	switch(wave_form){
 8004794:	4b2b      	ldr	r3, [pc, #172]	; (8004844 <display_wave+0xc0>)
 8004796:	781b      	ldrb	r3, [r3, #0]
 8004798:	2b04      	cmp	r3, #4
 800479a:	d844      	bhi.n	8004826 <display_wave+0xa2>
 800479c:	a201      	add	r2, pc, #4	; (adr r2, 80047a4 <display_wave+0x20>)
 800479e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047a2:	bf00      	nop
 80047a4:	080047b9 	.word	0x080047b9
 80047a8:	080047cf 	.word	0x080047cf
 80047ac:	080047e5 	.word	0x080047e5
 80047b0:	080047fb 	.word	0x080047fb
 80047b4:	08004811 	.word	0x08004811
		case 0: //SAWTOOTH
			u8g2_SetFont(&u8g2, u8g2_font_7x13_t_symbols);
 80047b8:	4923      	ldr	r1, [pc, #140]	; (8004848 <display_wave+0xc4>)
 80047ba:	4824      	ldr	r0, [pc, #144]	; (800484c <display_wave+0xc8>)
 80047bc:	f7fd fca0 	bl	8002100 <u8g2_SetFont>
			u8g2_DrawUTF8(&u8g2, x, y, "//");
 80047c0:	88ba      	ldrh	r2, [r7, #4]
 80047c2:	88f9      	ldrh	r1, [r7, #6]
 80047c4:	4b22      	ldr	r3, [pc, #136]	; (8004850 <display_wave+0xcc>)
 80047c6:	4821      	ldr	r0, [pc, #132]	; (800484c <display_wave+0xc8>)
 80047c8:	f7fd fbf8 	bl	8001fbc <u8g2_DrawUTF8>
			break;
 80047cc:	e036      	b.n	800483c <display_wave+0xb8>
		case 1: //SINE
			u8g2_SetFont(&u8g2, u8g2_font_7x13_t_symbols);
 80047ce:	491e      	ldr	r1, [pc, #120]	; (8004848 <display_wave+0xc4>)
 80047d0:	481e      	ldr	r0, [pc, #120]	; (800484c <display_wave+0xc8>)
 80047d2:	f7fd fc95 	bl	8002100 <u8g2_SetFont>
			u8g2_DrawUTF8(&u8g2, x, y, "◠◡");
 80047d6:	88ba      	ldrh	r2, [r7, #4]
 80047d8:	88f9      	ldrh	r1, [r7, #6]
 80047da:	4b1e      	ldr	r3, [pc, #120]	; (8004854 <display_wave+0xd0>)
 80047dc:	481b      	ldr	r0, [pc, #108]	; (800484c <display_wave+0xc8>)
 80047de:	f7fd fbed 	bl	8001fbc <u8g2_DrawUTF8>
			break;
 80047e2:	e02b      	b.n	800483c <display_wave+0xb8>
		case 2: //SQUARE
			u8g2_SetFont(&u8g2, u8g2_font_7x13_t_symbols);
 80047e4:	4918      	ldr	r1, [pc, #96]	; (8004848 <display_wave+0xc4>)
 80047e6:	4819      	ldr	r0, [pc, #100]	; (800484c <display_wave+0xc8>)
 80047e8:	f7fd fc8a 	bl	8002100 <u8g2_SetFont>
			u8g2_DrawUTF8(&u8g2, x, y, " \u25a0");
 80047ec:	88ba      	ldrh	r2, [r7, #4]
 80047ee:	88f9      	ldrh	r1, [r7, #6]
 80047f0:	4b19      	ldr	r3, [pc, #100]	; (8004858 <display_wave+0xd4>)
 80047f2:	4816      	ldr	r0, [pc, #88]	; (800484c <display_wave+0xc8>)
 80047f4:	f7fd fbe2 	bl	8001fbc <u8g2_DrawUTF8>
			break;
 80047f8:	e020      	b.n	800483c <display_wave+0xb8>
		case 3: //TRIANGLE
			u8g2_SetFont(&u8g2, u8g2_font_7x13_t_symbols);
 80047fa:	4913      	ldr	r1, [pc, #76]	; (8004848 <display_wave+0xc4>)
 80047fc:	4813      	ldr	r0, [pc, #76]	; (800484c <display_wave+0xc8>)
 80047fe:	f7fd fc7f 	bl	8002100 <u8g2_SetFont>
			u8g2_DrawUTF8(&u8g2, x, y, " \u25b2");
 8004802:	88ba      	ldrh	r2, [r7, #4]
 8004804:	88f9      	ldrh	r1, [r7, #6]
 8004806:	4b15      	ldr	r3, [pc, #84]	; (800485c <display_wave+0xd8>)
 8004808:	4810      	ldr	r0, [pc, #64]	; (800484c <display_wave+0xc8>)
 800480a:	f7fd fbd7 	bl	8001fbc <u8g2_DrawUTF8>
			break;
 800480e:	e015      	b.n	800483c <display_wave+0xb8>
		case 4: //special
			u8g2_SetFont(&u8g2, u8g2_font_7x13_t_symbols);
 8004810:	490d      	ldr	r1, [pc, #52]	; (8004848 <display_wave+0xc4>)
 8004812:	480e      	ldr	r0, [pc, #56]	; (800484c <display_wave+0xc8>)
 8004814:	f7fd fc74 	bl	8002100 <u8g2_SetFont>
			u8g2_DrawUTF8(&u8g2, x, y, " \u265b");
 8004818:	88ba      	ldrh	r2, [r7, #4]
 800481a:	88f9      	ldrh	r1, [r7, #6]
 800481c:	4b10      	ldr	r3, [pc, #64]	; (8004860 <display_wave+0xdc>)
 800481e:	480b      	ldr	r0, [pc, #44]	; (800484c <display_wave+0xc8>)
 8004820:	f7fd fbcc 	bl	8001fbc <u8g2_DrawUTF8>
			break;
 8004824:	e00a      	b.n	800483c <display_wave+0xb8>
		default://SAWTOOTH
			u8g2_SetFont(&u8g2, u8g2_font_7x13_t_symbols);
 8004826:	4908      	ldr	r1, [pc, #32]	; (8004848 <display_wave+0xc4>)
 8004828:	4808      	ldr	r0, [pc, #32]	; (800484c <display_wave+0xc8>)
 800482a:	f7fd fc69 	bl	8002100 <u8g2_SetFont>
			u8g2_DrawUTF8(&u8g2, x, y, "//");
 800482e:	88ba      	ldrh	r2, [r7, #4]
 8004830:	88f9      	ldrh	r1, [r7, #6]
 8004832:	4b07      	ldr	r3, [pc, #28]	; (8004850 <display_wave+0xcc>)
 8004834:	4805      	ldr	r0, [pc, #20]	; (800484c <display_wave+0xc8>)
 8004836:	f7fd fbc1 	bl	8001fbc <u8g2_DrawUTF8>
			break;
 800483a:	bf00      	nop
	}

}
 800483c:	bf00      	nop
 800483e:	3708      	adds	r7, #8
 8004840:	46bd      	mov	sp, r7
 8004842:	bd80      	pop	{r7, pc}
 8004844:	200020bc 	.word	0x200020bc
 8004848:	08010668 	.word	0x08010668
 800484c:	2000201c 	.word	0x2000201c
 8004850:	080105f8 	.word	0x080105f8
 8004854:	080105fc 	.word	0x080105fc
 8004858:	08010604 	.word	0x08010604
 800485c:	0801060c 	.word	0x0801060c
 8004860:	08010614 	.word	0x08010614

08004864 <HAL_CAN_RxFifo0MsgPendingCallback>:
//
//	}
//
//}

void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan) {
 8004864:	b580      	push	{r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]

	CAN_MSG_t RX;
	CAN_RX(&RX.ID, RX.Message);
 800486c:	f107 020c 	add.w	r2, r7, #12
 8004870:	f107 030c 	add.w	r3, r7, #12
 8004874:	3308      	adds	r3, #8
 8004876:	4611      	mov	r1, r2
 8004878:	4618      	mov	r0, r3
 800487a:	f7ff fa27 	bl	8003ccc <CAN_RX>
	osMessageQueuePut(msgInQHandle, &RX.Message, 0, 0);
 800487e:	4b06      	ldr	r3, [pc, #24]	; (8004898 <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8004880:	6818      	ldr	r0, [r3, #0]
 8004882:	f107 010c 	add.w	r1, r7, #12
 8004886:	2300      	movs	r3, #0
 8004888:	2200      	movs	r2, #0
 800488a:	f006 fe45 	bl	800b518 <osMessageQueuePut>

}
 800488e:	bf00      	nop
 8004890:	3718      	adds	r7, #24
 8004892:	46bd      	mov	sp, r7
 8004894:	bd80      	pop	{r7, pc}
 8004896:	bf00      	nop
 8004898:	200005e4 	.word	0x200005e4

0800489c <HAL_CAN_TxMailbox0CompleteCallback>:

void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan) {
 800489c:	b580      	push	{r7, lr}
 800489e:	b082      	sub	sp, #8
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]

	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80048a4:	4b04      	ldr	r3, [pc, #16]	; (80048b8 <HAL_CAN_TxMailbox0CompleteCallback+0x1c>)
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f006 fd7d 	bl	800b3a8 <osSemaphoreRelease>

}
 80048ae:	bf00      	nop
 80048b0:	3708      	adds	r7, #8
 80048b2:	46bd      	mov	sp, r7
 80048b4:	bd80      	pop	{r7, pc}
 80048b6:	bf00      	nop
 80048b8:	200005f4 	.word	0x200005f4

080048bc <HAL_CAN_TxMailbox1CompleteCallback>:

void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan) {
 80048bc:	b580      	push	{r7, lr}
 80048be:	b082      	sub	sp, #8
 80048c0:	af00      	add	r7, sp, #0
 80048c2:	6078      	str	r0, [r7, #4]

	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80048c4:	4b04      	ldr	r3, [pc, #16]	; (80048d8 <HAL_CAN_TxMailbox1CompleteCallback+0x1c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	4618      	mov	r0, r3
 80048ca:	f006 fd6d 	bl	800b3a8 <osSemaphoreRelease>

}
 80048ce:	bf00      	nop
 80048d0:	3708      	adds	r7, #8
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bd80      	pop	{r7, pc}
 80048d6:	bf00      	nop
 80048d8:	200005f4 	.word	0x200005f4

080048dc <HAL_CAN_TxMailbox2CompleteCallback>:

void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan) {
 80048dc:	b580      	push	{r7, lr}
 80048de:	b082      	sub	sp, #8
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]

	osSemaphoreRelease(CAN_TX_SemaphoreHandle);
 80048e4:	4b04      	ldr	r3, [pc, #16]	; (80048f8 <HAL_CAN_TxMailbox2CompleteCallback+0x1c>)
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f006 fd5d 	bl	800b3a8 <osSemaphoreRelease>

}
 80048ee:	bf00      	nop
 80048f0:	3708      	adds	r7, #8
 80048f2:	46bd      	mov	sp, r7
 80048f4:	bd80      	pop	{r7, pc}
 80048f6:	bf00      	nop
 80048f8:	200005f4 	.word	0x200005f4

080048fc <StartDefaultTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80048fc:	b580      	push	{r7, lr}
 80048fe:	b082      	sub	sp, #8
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		osDelay(1);
 8004904:	2001      	movs	r0, #1
 8004906:	f006 fb4b 	bl	800afa0 <osDelay>
 800490a:	e7fb      	b.n	8004904 <StartDefaultTask+0x8>

0800490c <scanKeysTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_scanKeysTask */
void scanKeysTask(void *argument)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08c      	sub	sp, #48	; 0x30
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN scanKeysTask */

	const TickType_t xFrequency = 50 / portTICK_PERIOD_MS;
 8004914:	2332      	movs	r3, #50	; 0x32
 8004916:	627b      	str	r3, [r7, #36]	; 0x24
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8004918:	f008 fbee 	bl	800d0f8 <xTaskGetTickCount>
 800491c:	4603      	mov	r3, r0
 800491e:	61bb      	str	r3, [r7, #24]

	/* Infinite loop */
	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8004920:	f107 0318 	add.w	r3, r7, #24
 8004924:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004926:	4618      	mov	r0, r3
 8004928:	f008 fa18 	bl	800cd5c <vTaskDelayUntil>


		uint16_t localKeys = readKeys();
 800492c:	f7ff fb0f 	bl	8003f4e <readKeys>
 8004930:	4603      	mov	r3, r0
 8004932:	847b      	strh	r3, [r7, #34]	; 0x22
		uint16_t localKnobs = readKnobs();
 8004934:	f7ff fb34 	bl	8003fa0 <readKnobs>
 8004938:	4603      	mov	r3, r0
 800493a:	843b      	strh	r3, [r7, #32]
//
//		serialPrint("keys: ");
//		serialPrintln(key_s);
//		serialPrint("knobs: ");
//		serialPrintln(knobs_s);
		uint8_t keys_pressed = 0;
 800493c:	2300      	movs	r3, #0
 800493e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
		for (int t = 0; t < 12; t++){
 8004942:	2300      	movs	r3, #0
 8004944:	62bb      	str	r3, [r7, #40]	; 0x28
 8004946:	e024      	b.n	8004992 <scanKeysTask+0x86>
			bool pressed = ~localKeys & ( 1 << (t));
 8004948:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800494a:	43da      	mvns	r2, r3
 800494c:	2101      	movs	r1, #1
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	fa01 f303 	lsl.w	r3, r1, r3
 8004954:	4013      	ands	r3, r2
 8004956:	2b00      	cmp	r3, #0
 8004958:	bf14      	ite	ne
 800495a:	2301      	movne	r3, #1
 800495c:	2300      	moveq	r3, #0
 800495e:	77fb      	strb	r3, [r7, #31]

			if (pressed) {
 8004960:	7ffb      	ldrb	r3, [r7, #31]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d00d      	beq.n	8004982 <scanKeysTask+0x76>
				notesPressed[t] = keyNotes[t];
 8004966:	4a2a      	ldr	r2, [pc, #168]	; (8004a10 <scanKeysTask+0x104>)
 8004968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800496e:	4929      	ldr	r1, [pc, #164]	; (8004a14 <scanKeysTask+0x108>)
 8004970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004972:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				keys_pressed += 1;
 8004976:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 800497a:	3301      	adds	r3, #1
 800497c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8004980:	e004      	b.n	800498c <scanKeysTask+0x80>
			} else {
				notesPressed[t] = '-';
 8004982:	4a24      	ldr	r2, [pc, #144]	; (8004a14 <scanKeysTask+0x108>)
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	212d      	movs	r1, #45	; 0x2d
 8004988:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		for (int t = 0; t < 12; t++){
 800498c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498e:	3301      	adds	r3, #1
 8004990:	62bb      	str	r3, [r7, #40]	; 0x28
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	2b0b      	cmp	r3, #11
 8004996:	ddd7      	ble.n	8004948 <scanKeysTask+0x3c>
			}
		}

		scanKnob(localKnobs, (uint16_t) prev_knobs, 3, 'v');
 8004998:	4b1f      	ldr	r3, [pc, #124]	; (8004a18 <scanKeysTask+0x10c>)
 800499a:	881b      	ldrh	r3, [r3, #0]
 800499c:	b299      	uxth	r1, r3
 800499e:	8c38      	ldrh	r0, [r7, #32]
 80049a0:	2376      	movs	r3, #118	; 0x76
 80049a2:	2203      	movs	r2, #3
 80049a4:	f7ff fb72 	bl	800408c <scanKnob>
		scanKnob(localKnobs, (uint16_t) prev_knobs, 2, 'o');
 80049a8:	4b1b      	ldr	r3, [pc, #108]	; (8004a18 <scanKeysTask+0x10c>)
 80049aa:	881b      	ldrh	r3, [r3, #0]
 80049ac:	b299      	uxth	r1, r3
 80049ae:	8c38      	ldrh	r0, [r7, #32]
 80049b0:	236f      	movs	r3, #111	; 0x6f
 80049b2:	2202      	movs	r2, #2
 80049b4:	f7ff fb6a 	bl	800408c <scanKnob>
		scanKnob(localKnobs, (uint16_t) prev_knobs, 1, 'w');
 80049b8:	4b17      	ldr	r3, [pc, #92]	; (8004a18 <scanKeysTask+0x10c>)
 80049ba:	881b      	ldrh	r3, [r3, #0]
 80049bc:	b299      	uxth	r1, r3
 80049be:	8c38      	ldrh	r0, [r7, #32]
 80049c0:	2377      	movs	r3, #119	; 0x77
 80049c2:	2201      	movs	r2, #1
 80049c4:	f7ff fb62 	bl	800408c <scanKnob>

		osMutexAcquire(keysMutexHandle, osWaitForever);
 80049c8:	4b14      	ldr	r3, [pc, #80]	; (8004a1c <scanKeysTask+0x110>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	f04f 31ff 	mov.w	r1, #4294967295
 80049d0:	4618      	mov	r0, r3
 80049d2:	f006 fb86 	bl	800b0e2 <osMutexAcquire>
		__atomic_store_n(&keys, localKeys, __ATOMIC_RELAXED);
 80049d6:	4a12      	ldr	r2, [pc, #72]	; (8004a20 <scanKeysTask+0x114>)
 80049d8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049da:	8013      	strh	r3, [r2, #0]
		osMutexRelease(keysMutexHandle);
 80049dc:	4b0f      	ldr	r3, [pc, #60]	; (8004a1c <scanKeysTask+0x110>)
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	4618      	mov	r0, r3
 80049e2:	f006 fbc9 	bl	800b178 <osMutexRelease>

//		---------------------------- SEND OVER CAN
		CAN_MSG_t TX;
		TX.ID = IDout;
 80049e6:	f240 1323 	movw	r3, #291	; 0x123
 80049ea:	617b      	str	r3, [r7, #20]
		char *msg = "AliBest!"; // just remember to stick to size of TX.Message, if it is bigger, it gets cut off
		for (int i = 0; i < sizeof(TX.Message); i++){
			TX.Message[i] = msg[i];
		}*/

                TX.Message[0] = localKeys & 0x0FF;
 80049ec:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	733b      	strb	r3, [r7, #12]
                TX.Message[1] = localKeys >> 8;
 80049f2:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80049f4:	0a1b      	lsrs	r3, r3, #8
 80049f6:	b29b      	uxth	r3, r3
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	737b      	strb	r3, [r7, #13]

		osMessageQueuePut(msgOutQHandle, &TX, 0, 0);
 80049fc:	4b09      	ldr	r3, [pc, #36]	; (8004a24 <scanKeysTask+0x118>)
 80049fe:	6818      	ldr	r0, [r3, #0]
 8004a00:	f107 010c 	add.w	r1, r7, #12
 8004a04:	2300      	movs	r3, #0
 8004a06:	2200      	movs	r2, #0
 8004a08:	f006 fd86 	bl	800b518 <osMessageQueuePut>
	for (;;) {
 8004a0c:	e788      	b.n	8004920 <scanKeysTask+0x14>
 8004a0e:	bf00      	nop
 8004a10:	2000003c 	.word	0x2000003c
 8004a14:	2000006c 	.word	0x2000006c
 8004a18:	20000034 	.word	0x20000034
 8004a1c:	200005ec 	.word	0x200005ec
 8004a20:	20000030 	.word	0x20000030
 8004a24:	200005e8 	.word	0x200005e8

08004a28 <displayUpdateTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_displayUpdateTask */
void displayUpdateTask(void *argument)
{
 8004a28:	b580      	push	{r7, lr}
 8004a2a:	b0a0      	sub	sp, #128	; 0x80
 8004a2c:	af04      	add	r7, sp, #16
 8004a2e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN displayUpdateTask */

	const TickType_t xFrequency = 100 / portTICK_PERIOD_MS;
 8004a30:	2364      	movs	r3, #100	; 0x64
 8004a32:	667b      	str	r3, [r7, #100]	; 0x64
	TickType_t xLastWakeTime = xTaskGetTickCount();
 8004a34:	f008 fb60 	bl	800d0f8 <xTaskGetTickCount>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	65fb      	str	r3, [r7, #92]	; 0x5c

	/* Infinite loop */
	for (;;) {

		vTaskDelayUntil(&xLastWakeTime, xFrequency);
 8004a3c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8004a40:	6e79      	ldr	r1, [r7, #100]	; 0x64
 8004a42:	4618      	mov	r0, r3
 8004a44:	f008 f98a 	bl	800cd5c <vTaskDelayUntil>

		osMutexAcquire(keysMutexHandle, osWaitForever);
 8004a48:	4b80      	ldr	r3, [pc, #512]	; (8004c4c <displayUpdateTask+0x224>)
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f04f 31ff 	mov.w	r1, #4294967295
 8004a50:	4618      	mov	r0, r3
 8004a52:	f006 fb46 	bl	800b0e2 <osMutexAcquire>

		uint16_t localKeys = __atomic_load_n(&keys, __ATOMIC_RELAXED);
 8004a56:	4b7e      	ldr	r3, [pc, #504]	; (8004c50 <displayUpdateTask+0x228>)
 8004a58:	881b      	ldrh	r3, [r3, #0]
 8004a5a:	f8a7 3062 	strh.w	r3, [r7, #98]	; 0x62

		osMutexRelease(keysMutexHandle);
 8004a5e:	4b7b      	ldr	r3, [pc, #492]	; (8004c4c <displayUpdateTask+0x224>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4618      	mov	r0, r3
 8004a64:	f006 fb88 	bl	800b178 <osMutexRelease>
		osMutexRelease(knobsMutexHandle);
 8004a68:	4b7a      	ldr	r3, [pc, #488]	; (8004c54 <displayUpdateTask+0x22c>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4618      	mov	r0, r3
 8004a6e:	f006 fb83 	bl	800b178 <osMutexRelease>

		u8g2_ClearBuffer(&u8g2);
 8004a72:	4879      	ldr	r0, [pc, #484]	; (8004c58 <displayUpdateTask+0x230>)
 8004a74:	f7fc fae7 	bl	8001046 <u8g2_ClearBuffer>
		u8g2_SetFont(&u8g2, u8g2_font_new3x9pixelfont_tr);
 8004a78:	4978      	ldr	r1, [pc, #480]	; (8004c5c <displayUpdateTask+0x234>)
 8004a7a:	4877      	ldr	r0, [pc, #476]	; (8004c58 <displayUpdateTask+0x230>)
 8004a7c:	f7fd fb40 	bl	8002100 <u8g2_SetFont>

//		PRINTING THE NOTES PRESSED
		uint8_t string_size = 2;
 8004a80:	2302      	movs	r3, #2
 8004a82:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		uint8_t space = 3;
 8004a86:	2303      	movs	r3, #3
 8004a88:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
		char o_s[16];
		sprintf(o_s, "|%x|", octave);
 8004a8c:	4b74      	ldr	r3, [pc, #464]	; (8004c60 <displayUpdateTask+0x238>)
 8004a8e:	881b      	ldrh	r3, [r3, #0]
 8004a90:	461a      	mov	r2, r3
 8004a92:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004a96:	4973      	ldr	r1, [pc, #460]	; (8004c64 <displayUpdateTask+0x23c>)
 8004a98:	4618      	mov	r0, r3
 8004a9a:	f00a f92f 	bl	800ecfc <siprintf>
		u8g2_DrawStr(&u8g2, string_size, 7, o_s);
 8004a9e:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004aa2:	b299      	uxth	r1, r3
 8004aa4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8004aa8:	2207      	movs	r2, #7
 8004aaa:	486b      	ldr	r0, [pc, #428]	; (8004c58 <displayUpdateTask+0x230>)
 8004aac:	f7fd fa6c 	bl	8001f88 <u8g2_DrawStr>
		string_size += 10;
 8004ab0:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ab4:	330a      	adds	r3, #10
 8004ab6:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		for (int t = 0; t < 12; t++){
 8004aba:	2300      	movs	r3, #0
 8004abc:	66bb      	str	r3, [r7, #104]	; 0x68
 8004abe:	e029      	b.n	8004b14 <displayUpdateTask+0xec>
			if (notesPressed[t] != '-') {
 8004ac0:	4a69      	ldr	r2, [pc, #420]	; (8004c68 <displayUpdateTask+0x240>)
 8004ac2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ac4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ac8:	2b2d      	cmp	r3, #45	; 0x2d
 8004aca:	d020      	beq.n	8004b0e <displayUpdateTask+0xe6>
				uint8_t w = u8g2_GetStrWidth(&u8g2, keyNotes[t]);
 8004acc:	4a67      	ldr	r2, [pc, #412]	; (8004c6c <displayUpdateTask+0x244>)
 8004ace:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ad0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ad4:	4619      	mov	r1, r3
 8004ad6:	4860      	ldr	r0, [pc, #384]	; (8004c58 <displayUpdateTask+0x230>)
 8004ad8:	f7fd fb90 	bl	80021fc <u8g2_GetStrWidth>
 8004adc:	4603      	mov	r3, r0
 8004ade:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
				u8g2_DrawStr(&u8g2, string_size, 7, notesPressed[t]);
 8004ae2:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004ae6:	b299      	uxth	r1, r3
 8004ae8:	4a5f      	ldr	r2, [pc, #380]	; (8004c68 <displayUpdateTask+0x240>)
 8004aea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004aec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004af0:	2207      	movs	r2, #7
 8004af2:	4859      	ldr	r0, [pc, #356]	; (8004c58 <displayUpdateTask+0x230>)
 8004af4:	f7fd fa48 	bl	8001f88 <u8g2_DrawStr>
				string_size += w + space;
 8004af8:	f897 2060 	ldrb.w	r2, [r7, #96]	; 0x60
 8004afc:	f897 3061 	ldrb.w	r3, [r7, #97]	; 0x61
 8004b00:	4413      	add	r3, r2
 8004b02:	b2da      	uxtb	r2, r3
 8004b04:	f897 306f 	ldrb.w	r3, [r7, #111]	; 0x6f
 8004b08:	4413      	add	r3, r2
 8004b0a:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
		for (int t = 0; t < 12; t++){
 8004b0e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b10:	3301      	adds	r3, #1
 8004b12:	66bb      	str	r3, [r7, #104]	; 0x68
 8004b14:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004b16:	2b0b      	cmp	r3, #11
 8004b18:	ddd2      	ble.n	8004ac0 <displayUpdateTask+0x98>
			}
		}
//                uint32_t localDMAkeys2 = __atomic_load_n(&DMAkeys2, __ATOMIC_RELAXED);

				char buf[20];
				sprintf(buf, "%x", RX.Message[1]);
 8004b1a:	4b55      	ldr	r3, [pc, #340]	; (8004c70 <displayUpdateTask+0x248>)
 8004b1c:	785b      	ldrb	r3, [r3, #1]
 8004b1e:	461a      	mov	r2, r3
 8004b20:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b24:	4953      	ldr	r1, [pc, #332]	; (8004c74 <displayUpdateTask+0x24c>)
 8004b26:	4618      	mov	r0, r3
 8004b28:	f00a f8e8 	bl	800ecfc <siprintf>
				serialPrintln(buf);
 8004b2c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8004b30:	4618      	mov	r0, r3
 8004b32:	f7fe ff67 	bl	8003a04 <serialPrintln>

//		PRINTING VOLUME
		u8g2_DrawButtonUTF8(&u8g2, 105, 30, U8G2_BTN_BW1, 18,  4,  2, "Vol:");
 8004b36:	4b50      	ldr	r3, [pc, #320]	; (8004c78 <displayUpdateTask+0x250>)
 8004b38:	9303      	str	r3, [sp, #12]
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	9302      	str	r3, [sp, #8]
 8004b3e:	2304      	movs	r3, #4
 8004b40:	9301      	str	r3, [sp, #4]
 8004b42:	2312      	movs	r3, #18
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	2301      	movs	r3, #1
 8004b48:	221e      	movs	r2, #30
 8004b4a:	2169      	movs	r1, #105	; 0x69
 8004b4c:	4842      	ldr	r0, [pc, #264]	; (8004c58 <displayUpdateTask+0x230>)
 8004b4e:	f7fc fc47 	bl	80013e0 <u8g2_DrawButtonUTF8>
		char volume_s[16];
		sprintf(volume_s, "%x", volume);
 8004b52:	4b4a      	ldr	r3, [pc, #296]	; (8004c7c <displayUpdateTask+0x254>)
 8004b54:	881b      	ldrh	r3, [r3, #0]
 8004b56:	461a      	mov	r2, r3
 8004b58:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b5c:	4945      	ldr	r1, [pc, #276]	; (8004c74 <displayUpdateTask+0x24c>)
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f00a f8cc 	bl	800ecfc <siprintf>
		u8g2_DrawStr(&u8g2, 118, 30, volume_s);
 8004b64:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004b68:	221e      	movs	r2, #30
 8004b6a:	2176      	movs	r1, #118	; 0x76
 8004b6c:	483a      	ldr	r0, [pc, #232]	; (8004c58 <displayUpdateTask+0x230>)
 8004b6e:	f7fd fa0b 	bl	8001f88 <u8g2_DrawStr>

//		PRINTING Octave
		u8g2_DrawButtonUTF8(&u8g2, 75, 30, U8G2_BTN_BW1, 18,  4,  2, "Oct:");
 8004b72:	4b43      	ldr	r3, [pc, #268]	; (8004c80 <displayUpdateTask+0x258>)
 8004b74:	9303      	str	r3, [sp, #12]
 8004b76:	2302      	movs	r3, #2
 8004b78:	9302      	str	r3, [sp, #8]
 8004b7a:	2304      	movs	r3, #4
 8004b7c:	9301      	str	r3, [sp, #4]
 8004b7e:	2312      	movs	r3, #18
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	2301      	movs	r3, #1
 8004b84:	221e      	movs	r2, #30
 8004b86:	214b      	movs	r1, #75	; 0x4b
 8004b88:	4833      	ldr	r0, [pc, #204]	; (8004c58 <displayUpdateTask+0x230>)
 8004b8a:	f7fc fc29 	bl	80013e0 <u8g2_DrawButtonUTF8>
		char s[16];
		sprintf(s, "%x", octave);
 8004b8e:	4b34      	ldr	r3, [pc, #208]	; (8004c60 <displayUpdateTask+0x238>)
 8004b90:	881b      	ldrh	r3, [r3, #0]
 8004b92:	461a      	mov	r2, r3
 8004b94:	f107 0318 	add.w	r3, r7, #24
 8004b98:	4936      	ldr	r1, [pc, #216]	; (8004c74 <displayUpdateTask+0x24c>)
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f00a f8ae 	bl	800ecfc <siprintf>
		u8g2_DrawStr(&u8g2, 89, 30, s);
 8004ba0:	f107 0318 	add.w	r3, r7, #24
 8004ba4:	221e      	movs	r2, #30
 8004ba6:	2159      	movs	r1, #89	; 0x59
 8004ba8:	482b      	ldr	r0, [pc, #172]	; (8004c58 <displayUpdateTask+0x230>)
 8004baa:	f7fd f9ed 	bl	8001f88 <u8g2_DrawStr>

//		PRINTING WAVE_FORM
		u8g2_DrawButtonUTF8(&u8g2, 33, 30, 0, 30,  4,  3, "Wave:");
 8004bae:	4b35      	ldr	r3, [pc, #212]	; (8004c84 <displayUpdateTask+0x25c>)
 8004bb0:	9303      	str	r3, [sp, #12]
 8004bb2:	2303      	movs	r3, #3
 8004bb4:	9302      	str	r3, [sp, #8]
 8004bb6:	2304      	movs	r3, #4
 8004bb8:	9301      	str	r3, [sp, #4]
 8004bba:	231e      	movs	r3, #30
 8004bbc:	9300      	str	r3, [sp, #0]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	221e      	movs	r2, #30
 8004bc2:	2121      	movs	r1, #33	; 0x21
 8004bc4:	4824      	ldr	r0, [pc, #144]	; (8004c58 <displayUpdateTask+0x230>)
 8004bc6:	f7fc fc0b 	bl	80013e0 <u8g2_DrawButtonUTF8>
		char wave_s[16];
		sprintf(wave_s, "%x", wave_form);
 8004bca:	4b2f      	ldr	r3, [pc, #188]	; (8004c88 <displayUpdateTask+0x260>)
 8004bcc:	781b      	ldrb	r3, [r3, #0]
 8004bce:	461a      	mov	r2, r3
 8004bd0:	f107 0308 	add.w	r3, r7, #8
 8004bd4:	4927      	ldr	r1, [pc, #156]	; (8004c74 <displayUpdateTask+0x24c>)
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f00a f890 	bl	800ecfc <siprintf>
//		u8g2_DrawStr(&u8g2, 61, 30, wave_s);
		display_wave(51, 30);
 8004bdc:	211e      	movs	r1, #30
 8004bde:	2033      	movs	r0, #51	; 0x33
 8004be0:	f7ff fdd0 	bl	8004784 <display_wave>

//		PRINTING PET
		u8g2_SetFont(&u8g2, u8g2_font_ncenB08_tr);
 8004be4:	4929      	ldr	r1, [pc, #164]	; (8004c8c <displayUpdateTask+0x264>)
 8004be6:	481c      	ldr	r0, [pc, #112]	; (8004c58 <displayUpdateTask+0x230>)
 8004be8:	f7fd fa8a 	bl	8002100 <u8g2_SetFont>
		if (localKeys == 0x0FFF) {
 8004bec:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
 8004bf0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8004bf4:	4293      	cmp	r3, r2
 8004bf6:	d10a      	bne.n	8004c0e <displayUpdateTask+0x1e6>

//			u8g2_DrawStr(&u8g2, 70, 10, "- ^_^ -");
			u8g2_SetFont(&u8g2, u8g2_font_streamline_all_t);
 8004bf8:	4925      	ldr	r1, [pc, #148]	; (8004c90 <displayUpdateTask+0x268>)
 8004bfa:	4817      	ldr	r0, [pc, #92]	; (8004c58 <displayUpdateTask+0x230>)
 8004bfc:	f7fd fa80 	bl	8002100 <u8g2_SetFont>
			u8g2_DrawUTF8(&u8g2, 2, 30, " \u029a");
 8004c00:	4b24      	ldr	r3, [pc, #144]	; (8004c94 <displayUpdateTask+0x26c>)
 8004c02:	221e      	movs	r2, #30
 8004c04:	2102      	movs	r1, #2
 8004c06:	4814      	ldr	r0, [pc, #80]	; (8004c58 <displayUpdateTask+0x230>)
 8004c08:	f7fd f9d8 	bl	8001fbc <u8g2_DrawUTF8>
 8004c0c:	e019      	b.n	8004c42 <displayUpdateTask+0x21a>

		} else {

//			u8g2_DrawStr(&u8g2, 70, 10, "- ^0^ -");
			u8g2_SetFont(&u8g2, u8g2_font_streamline_all_t); //21x21
 8004c0e:	4920      	ldr	r1, [pc, #128]	; (8004c90 <displayUpdateTask+0x268>)
 8004c10:	4811      	ldr	r0, [pc, #68]	; (8004c58 <displayUpdateTask+0x230>)
 8004c12:	f7fd fa75 	bl	8002100 <u8g2_SetFont>
			u8g2_DrawUTF8(&u8g2, 2, 30, " \u0299");
 8004c16:	4b20      	ldr	r3, [pc, #128]	; (8004c98 <displayUpdateTask+0x270>)
 8004c18:	221e      	movs	r2, #30
 8004c1a:	2102      	movs	r1, #2
 8004c1c:	480e      	ldr	r0, [pc, #56]	; (8004c58 <displayUpdateTask+0x230>)
 8004c1e:	f7fd f9cd 	bl	8001fbc <u8g2_DrawUTF8>
			u8g2_SetFont(&u8g2, u8g2_font_unifont_t_0_76); //16x16
 8004c22:	491e      	ldr	r1, [pc, #120]	; (8004c9c <displayUpdateTask+0x274>)
 8004c24:	480c      	ldr	r0, [pc, #48]	; (8004c58 <displayUpdateTask+0x230>)
 8004c26:	f7fd fa6b 	bl	8002100 <u8g2_SetFont>
			u8g2_DrawUTF8(&u8g2, 16, 27, " \u266a");
 8004c2a:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <displayUpdateTask+0x278>)
 8004c2c:	221b      	movs	r2, #27
 8004c2e:	2110      	movs	r1, #16
 8004c30:	4809      	ldr	r0, [pc, #36]	; (8004c58 <displayUpdateTask+0x230>)
 8004c32:	f7fd f9c3 	bl	8001fbc <u8g2_DrawUTF8>
			u8g2_DrawUTF8(&u8g2, 13, 19, " \u266a");
 8004c36:	4b1a      	ldr	r3, [pc, #104]	; (8004ca0 <displayUpdateTask+0x278>)
 8004c38:	2213      	movs	r2, #19
 8004c3a:	210d      	movs	r1, #13
 8004c3c:	4806      	ldr	r0, [pc, #24]	; (8004c58 <displayUpdateTask+0x230>)
 8004c3e:	f7fd f9bd 	bl	8001fbc <u8g2_DrawUTF8>

		}

		u8g2_SendBuffer(&u8g2);
 8004c42:	4805      	ldr	r0, [pc, #20]	; (8004c58 <displayUpdateTask+0x230>)
 8004c44:	f7fc fa72 	bl	800112c <u8g2_SendBuffer>
	for (;;) {
 8004c48:	e6f8      	b.n	8004a3c <displayUpdateTask+0x14>
 8004c4a:	bf00      	nop
 8004c4c:	200005ec 	.word	0x200005ec
 8004c50:	20000030 	.word	0x20000030
 8004c54:	200005f0 	.word	0x200005f0
 8004c58:	2000201c 	.word	0x2000201c
 8004c5c:	0801bc10 	.word	0x0801bc10
 8004c60:	20000038 	.word	0x20000038
 8004c64:	0801061c 	.word	0x0801061c
 8004c68:	2000006c 	.word	0x2000006c
 8004c6c:	2000003c 	.word	0x2000003c
 8004c70:	200020b0 	.word	0x200020b0
 8004c74:	08010624 	.word	0x08010624
 8004c78:	08010628 	.word	0x08010628
 8004c7c:	20000036 	.word	0x20000036
 8004c80:	08010630 	.word	0x08010630
 8004c84:	08010638 	.word	0x08010638
 8004c88:	200020bc 	.word	0x200020bc
 8004c8c:	0801cef8 	.word	0x0801cef8
 8004c90:	08011c70 	.word	0x08011c70
 8004c94:	08010640 	.word	0x08010640
 8004c98:	08010644 	.word	0x08010644
 8004c9c:	0801bf1c 	.word	0x0801bf1c
 8004ca0:	08010648 	.word	0x08010648

08004ca4 <decode>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_decode */
void decode(void *argument)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN decode */
    /* Infinite loop */
    for (;;) {
        osMessageQueueGet(msgInQHandle, &RX, NULL, osWaitForever);
 8004cac:	4b09      	ldr	r3, [pc, #36]	; (8004cd4 <decode+0x30>)
 8004cae:	6818      	ldr	r0, [r3, #0]
 8004cb0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cb4:	2200      	movs	r2, #0
 8004cb6:	4908      	ldr	r1, [pc, #32]	; (8004cd8 <decode+0x34>)
 8004cb8:	f006 fc8e 	bl	800b5d8 <osMessageQueueGet>
        
        __atomic_store_n(&DMAkeys2, RX.Message[0] | (RX.Message[1] << 8), __ATOMIC_RELAXED);
 8004cbc:	4b06      	ldr	r3, [pc, #24]	; (8004cd8 <decode+0x34>)
 8004cbe:	781b      	ldrb	r3, [r3, #0]
 8004cc0:	461a      	mov	r2, r3
 8004cc2:	4b05      	ldr	r3, [pc, #20]	; (8004cd8 <decode+0x34>)
 8004cc4:	785b      	ldrb	r3, [r3, #1]
 8004cc6:	021b      	lsls	r3, r3, #8
 8004cc8:	4313      	orrs	r3, r2
 8004cca:	461a      	mov	r2, r3
 8004ccc:	4b03      	ldr	r3, [pc, #12]	; (8004cdc <decode+0x38>)
 8004cce:	601a      	str	r2, [r3, #0]
        osMessageQueueGet(msgInQHandle, &RX, NULL, osWaitForever);
 8004cd0:	e7ec      	b.n	8004cac <decode+0x8>
 8004cd2:	bf00      	nop
 8004cd4:	200005e4 	.word	0x200005e4
 8004cd8:	200020b0 	.word	0x200020b0
 8004cdc:	20002018 	.word	0x20002018

08004ce0 <CAN_Transmit>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CAN_Transmit */
void CAN_Transmit(void *argument)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
 8004ce6:	6078      	str	r0, [r7, #4]

	CAN_MSG_t TX;

	for (;;) {

		osMessageQueueGet(msgOutQHandle, &TX, NULL, osWaitForever);
 8004ce8:	4b0b      	ldr	r3, [pc, #44]	; (8004d18 <CAN_Transmit+0x38>)
 8004cea:	6818      	ldr	r0, [r3, #0]
 8004cec:	f107 010c 	add.w	r1, r7, #12
 8004cf0:	f04f 33ff 	mov.w	r3, #4294967295
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f006 fc6f 	bl	800b5d8 <osMessageQueueGet>
		osSemaphoreAcquire(CAN_TX_SemaphoreHandle, osWaitForever);
 8004cfa:	4b08      	ldr	r3, [pc, #32]	; (8004d1c <CAN_Transmit+0x3c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	f04f 31ff 	mov.w	r1, #4294967295
 8004d02:	4618      	mov	r0, r3
 8004d04:	f006 fafe 	bl	800b304 <osSemaphoreAcquire>
		CAN_TX(TX.ID, TX.Message);
 8004d08:	697b      	ldr	r3, [r7, #20]
 8004d0a:	f107 020c 	add.w	r2, r7, #12
 8004d0e:	4611      	mov	r1, r2
 8004d10:	4618      	mov	r0, r3
 8004d12:	f7fe ffa9 	bl	8003c68 <CAN_TX>
		osMessageQueueGet(msgOutQHandle, &TX, NULL, osWaitForever);
 8004d16:	e7e7      	b.n	8004ce8 <CAN_Transmit+0x8>
 8004d18:	200005e8 	.word	0x200005e8
 8004d1c:	200005f4 	.word	0x200005f4

08004d20 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b082      	sub	sp, #8
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
	/* USER CODE BEGIN Callback 0 */

	/* USER CODE END Callback 0 */
	if (htim->Instance == TIM16) {
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a04      	ldr	r2, [pc, #16]	; (8004d40 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d101      	bne.n	8004d36 <HAL_TIM_PeriodElapsedCallback+0x16>
		HAL_IncTick();
 8004d32:	f000 fbc7 	bl	80054c4 <HAL_IncTick>
	}
	/* USER CODE BEGIN Callback 1 */

	/* USER CODE END Callback 1 */
}
 8004d36:	bf00      	nop
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40014400 	.word	0x40014400

08004d44 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004d44:	b480      	push	{r7}
 8004d46:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004d48:	b672      	cpsid	i
}
 8004d4a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8004d4c:	e7fe      	b.n	8004d4c <Error_Handler+0x8>
	...

08004d50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b082      	sub	sp, #8
 8004d54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004d56:	4b11      	ldr	r3, [pc, #68]	; (8004d9c <HAL_MspInit+0x4c>)
 8004d58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d5a:	4a10      	ldr	r2, [pc, #64]	; (8004d9c <HAL_MspInit+0x4c>)
 8004d5c:	f043 0301 	orr.w	r3, r3, #1
 8004d60:	6613      	str	r3, [r2, #96]	; 0x60
 8004d62:	4b0e      	ldr	r3, [pc, #56]	; (8004d9c <HAL_MspInit+0x4c>)
 8004d64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004d66:	f003 0301 	and.w	r3, r3, #1
 8004d6a:	607b      	str	r3, [r7, #4]
 8004d6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004d6e:	4b0b      	ldr	r3, [pc, #44]	; (8004d9c <HAL_MspInit+0x4c>)
 8004d70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d72:	4a0a      	ldr	r2, [pc, #40]	; (8004d9c <HAL_MspInit+0x4c>)
 8004d74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d78:	6593      	str	r3, [r2, #88]	; 0x58
 8004d7a:	4b08      	ldr	r3, [pc, #32]	; (8004d9c <HAL_MspInit+0x4c>)
 8004d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d82:	603b      	str	r3, [r7, #0]
 8004d84:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004d86:	2200      	movs	r2, #0
 8004d88:	210f      	movs	r1, #15
 8004d8a:	f06f 0001 	mvn.w	r0, #1
 8004d8e:	f002 f9c9 	bl	8007124 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004d92:	bf00      	nop
 8004d94:	3708      	adds	r7, #8
 8004d96:	46bd      	mov	sp, r7
 8004d98:	bd80      	pop	{r7, pc}
 8004d9a:	bf00      	nop
 8004d9c:	40021000 	.word	0x40021000

08004da0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b09e      	sub	sp, #120	; 0x78
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004da8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004dac:	2200      	movs	r2, #0
 8004dae:	601a      	str	r2, [r3, #0]
 8004db0:	605a      	str	r2, [r3, #4]
 8004db2:	609a      	str	r2, [r3, #8]
 8004db4:	60da      	str	r2, [r3, #12]
 8004db6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8004db8:	f107 0310 	add.w	r3, r7, #16
 8004dbc:	2254      	movs	r2, #84	; 0x54
 8004dbe:	2100      	movs	r1, #0
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f009 fe85 	bl	800ead0 <memset>
  if(hadc->Instance==ADC1)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	4a25      	ldr	r2, [pc, #148]	; (8004e60 <HAL_ADC_MspInit+0xc0>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d143      	bne.n	8004e58 <HAL_ADC_MspInit+0xb8>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004dd0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004dd4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_PLLSAI1;
 8004dd6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8004dda:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	617b      	str	r3, [r7, #20]
    PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8004de0:	2301      	movs	r3, #1
 8004de2:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.PLLSAI1.PLLSAI1N = 16;
 8004de4:	2310      	movs	r3, #16
 8004de6:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8004de8:	2307      	movs	r3, #7
 8004dea:	623b      	str	r3, [r7, #32]
    PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8004dec:	2302      	movs	r3, #2
 8004dee:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8004df0:	2302      	movs	r3, #2
 8004df2:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_ADC1CLK;
 8004df4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8004df8:	62fb      	str	r3, [r7, #44]	; 0x2c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8004dfa:	f107 0310 	add.w	r3, r7, #16
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f004 fb6e 	bl	80094e0 <HAL_RCCEx_PeriphCLKConfig>
 8004e04:	4603      	mov	r3, r0
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d001      	beq.n	8004e0e <HAL_ADC_MspInit+0x6e>
    {
      Error_Handler();
 8004e0a:	f7ff ff9b 	bl	8004d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8004e0e:	4b15      	ldr	r3, [pc, #84]	; (8004e64 <HAL_ADC_MspInit+0xc4>)
 8004e10:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e12:	4a14      	ldr	r2, [pc, #80]	; (8004e64 <HAL_ADC_MspInit+0xc4>)
 8004e14:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004e18:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e1a:	4b12      	ldr	r3, [pc, #72]	; (8004e64 <HAL_ADC_MspInit+0xc4>)
 8004e1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e1e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004e22:	60fb      	str	r3, [r7, #12]
 8004e24:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004e26:	4b0f      	ldr	r3, [pc, #60]	; (8004e64 <HAL_ADC_MspInit+0xc4>)
 8004e28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e2a:	4a0e      	ldr	r2, [pc, #56]	; (8004e64 <HAL_ADC_MspInit+0xc4>)
 8004e2c:	f043 0301 	orr.w	r3, r3, #1
 8004e30:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004e32:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <HAL_ADC_MspInit+0xc4>)
 8004e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004e36:	f003 0301 	and.w	r3, r3, #1
 8004e3a:	60bb      	str	r3, [r7, #8]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN5
    PA1     ------> ADC1_IN6
    */
    GPIO_InitStruct.Pin = JOYY_Pin|JOYX_Pin;
 8004e3e:	2303      	movs	r3, #3
 8004e40:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8004e42:	230b      	movs	r3, #11
 8004e44:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004e46:	2300      	movs	r3, #0
 8004e48:	66fb      	str	r3, [r7, #108]	; 0x6c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004e4a:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004e4e:	4619      	mov	r1, r3
 8004e50:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004e54:	f002 fe92 	bl	8007b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8004e58:	bf00      	nop
 8004e5a:	3778      	adds	r7, #120	; 0x78
 8004e5c:	46bd      	mov	sp, r7
 8004e5e:	bd80      	pop	{r7, pc}
 8004e60:	50040000 	.word	0x50040000
 8004e64:	40021000 	.word	0x40021000

08004e68 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b08a      	sub	sp, #40	; 0x28
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004e70:	f107 0314 	add.w	r3, r7, #20
 8004e74:	2200      	movs	r2, #0
 8004e76:	601a      	str	r2, [r3, #0]
 8004e78:	605a      	str	r2, [r3, #4]
 8004e7a:	609a      	str	r2, [r3, #8]
 8004e7c:	60da      	str	r2, [r3, #12]
 8004e7e:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	4a29      	ldr	r2, [pc, #164]	; (8004f2c <HAL_CAN_MspInit+0xc4>)
 8004e86:	4293      	cmp	r3, r2
 8004e88:	d14b      	bne.n	8004f22 <HAL_CAN_MspInit+0xba>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8004e8a:	4b29      	ldr	r3, [pc, #164]	; (8004f30 <HAL_CAN_MspInit+0xc8>)
 8004e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e8e:	4a28      	ldr	r2, [pc, #160]	; (8004f30 <HAL_CAN_MspInit+0xc8>)
 8004e90:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8004e94:	6593      	str	r3, [r2, #88]	; 0x58
 8004e96:	4b26      	ldr	r3, [pc, #152]	; (8004f30 <HAL_CAN_MspInit+0xc8>)
 8004e98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004e9e:	613b      	str	r3, [r7, #16]
 8004ea0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ea2:	4b23      	ldr	r3, [pc, #140]	; (8004f30 <HAL_CAN_MspInit+0xc8>)
 8004ea4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004ea6:	4a22      	ldr	r2, [pc, #136]	; (8004f30 <HAL_CAN_MspInit+0xc8>)
 8004ea8:	f043 0301 	orr.w	r3, r3, #1
 8004eac:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004eae:	4b20      	ldr	r3, [pc, #128]	; (8004f30 <HAL_CAN_MspInit+0xc8>)
 8004eb0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004eb2:	f003 0301 	and.w	r3, r3, #1
 8004eb6:	60fb      	str	r3, [r7, #12]
 8004eb8:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8004eba:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ec0:	2302      	movs	r3, #2
 8004ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004ec8:	2301      	movs	r3, #1
 8004eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004ecc:	2309      	movs	r3, #9
 8004ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ed0:	f107 0314 	add.w	r3, r7, #20
 8004ed4:	4619      	mov	r1, r3
 8004ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004eda:	f002 fe4f 	bl	8007b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8004ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004ee2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ee4:	2302      	movs	r3, #2
 8004ee6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8004eec:	2301      	movs	r3, #1
 8004eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8004ef0:	2309      	movs	r3, #9
 8004ef2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004ef4:	f107 0314 	add.w	r3, r7, #20
 8004ef8:	4619      	mov	r1, r3
 8004efa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004efe:	f002 fe3d 	bl	8007b7c <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 8004f02:	2200      	movs	r2, #0
 8004f04:	2106      	movs	r1, #6
 8004f06:	2013      	movs	r0, #19
 8004f08:	f002 f90c 	bl	8007124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8004f0c:	2013      	movs	r0, #19
 8004f0e:	f002 f925 	bl	800715c <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 6, 0);
 8004f12:	2200      	movs	r2, #0
 8004f14:	2106      	movs	r1, #6
 8004f16:	2014      	movs	r0, #20
 8004f18:	f002 f904 	bl	8007124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8004f1c:	2014      	movs	r0, #20
 8004f1e:	f002 f91d 	bl	800715c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8004f22:	bf00      	nop
 8004f24:	3728      	adds	r7, #40	; 0x28
 8004f26:	46bd      	mov	sp, r7
 8004f28:	bd80      	pop	{r7, pc}
 8004f2a:	bf00      	nop
 8004f2c:	40006400 	.word	0x40006400
 8004f30:	40021000 	.word	0x40021000

08004f34 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	; 0x28
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f3c:	f107 0314 	add.w	r3, r7, #20
 8004f40:	2200      	movs	r2, #0
 8004f42:	601a      	str	r2, [r3, #0]
 8004f44:	605a      	str	r2, [r3, #4]
 8004f46:	609a      	str	r2, [r3, #8]
 8004f48:	60da      	str	r2, [r3, #12]
 8004f4a:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC1)
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a2f      	ldr	r2, [pc, #188]	; (8005010 <HAL_DAC_MspInit+0xdc>)
 8004f52:	4293      	cmp	r3, r2
 8004f54:	d158      	bne.n	8005008 <HAL_DAC_MspInit+0xd4>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8004f56:	4b2f      	ldr	r3, [pc, #188]	; (8005014 <HAL_DAC_MspInit+0xe0>)
 8004f58:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f5a:	4a2e      	ldr	r2, [pc, #184]	; (8005014 <HAL_DAC_MspInit+0xe0>)
 8004f5c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f60:	6593      	str	r3, [r2, #88]	; 0x58
 8004f62:	4b2c      	ldr	r3, [pc, #176]	; (8005014 <HAL_DAC_MspInit+0xe0>)
 8004f64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f66:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004f6a:	613b      	str	r3, [r7, #16]
 8004f6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f6e:	4b29      	ldr	r3, [pc, #164]	; (8005014 <HAL_DAC_MspInit+0xe0>)
 8004f70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f72:	4a28      	ldr	r2, [pc, #160]	; (8005014 <HAL_DAC_MspInit+0xe0>)
 8004f74:	f043 0301 	orr.w	r3, r3, #1
 8004f78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004f7a:	4b26      	ldr	r3, [pc, #152]	; (8005014 <HAL_DAC_MspInit+0xe0>)
 8004f7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004f7e:	f003 0301 	and.w	r3, r3, #1
 8004f82:	60fb      	str	r3, [r7, #12]
 8004f84:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    PA5     ------> DAC1_OUT2
    */
    GPIO_InitStruct.Pin = OUTR_Pin|OUTL_Pin;
 8004f86:	2330      	movs	r3, #48	; 0x30
 8004f88:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8004f8a:	2303      	movs	r3, #3
 8004f8c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f8e:	2300      	movs	r3, #0
 8004f90:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004f92:	f107 0314 	add.w	r3, r7, #20
 8004f96:	4619      	mov	r1, r3
 8004f98:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004f9c:	f002 fdee 	bl	8007b7c <HAL_GPIO_Init>

    /* DAC1 DMA Init */
    /* DAC_CH1 Init */
    hdma_dac_ch1.Instance = DMA1_Channel3;
 8004fa0:	4b1d      	ldr	r3, [pc, #116]	; (8005018 <HAL_DAC_MspInit+0xe4>)
 8004fa2:	4a1e      	ldr	r2, [pc, #120]	; (800501c <HAL_DAC_MspInit+0xe8>)
 8004fa4:	601a      	str	r2, [r3, #0]
    hdma_dac_ch1.Init.Request = DMA_REQUEST_6;
 8004fa6:	4b1c      	ldr	r3, [pc, #112]	; (8005018 <HAL_DAC_MspInit+0xe4>)
 8004fa8:	2206      	movs	r2, #6
 8004faa:	605a      	str	r2, [r3, #4]
    hdma_dac_ch1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004fac:	4b1a      	ldr	r3, [pc, #104]	; (8005018 <HAL_DAC_MspInit+0xe4>)
 8004fae:	2210      	movs	r2, #16
 8004fb0:	609a      	str	r2, [r3, #8]
    hdma_dac_ch1.Init.PeriphInc = DMA_PINC_DISABLE;
 8004fb2:	4b19      	ldr	r3, [pc, #100]	; (8005018 <HAL_DAC_MspInit+0xe4>)
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	60da      	str	r2, [r3, #12]
    hdma_dac_ch1.Init.MemInc = DMA_MINC_ENABLE;
 8004fb8:	4b17      	ldr	r3, [pc, #92]	; (8005018 <HAL_DAC_MspInit+0xe4>)
 8004fba:	2280      	movs	r2, #128	; 0x80
 8004fbc:	611a      	str	r2, [r3, #16]
    hdma_dac_ch1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004fbe:	4b16      	ldr	r3, [pc, #88]	; (8005018 <HAL_DAC_MspInit+0xe4>)
 8004fc0:	f44f 7280 	mov.w	r2, #256	; 0x100
 8004fc4:	615a      	str	r2, [r3, #20]
    hdma_dac_ch1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8004fc6:	4b14      	ldr	r3, [pc, #80]	; (8005018 <HAL_DAC_MspInit+0xe4>)
 8004fc8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004fcc:	619a      	str	r2, [r3, #24]
    hdma_dac_ch1.Init.Mode = DMA_CIRCULAR;
 8004fce:	4b12      	ldr	r3, [pc, #72]	; (8005018 <HAL_DAC_MspInit+0xe4>)
 8004fd0:	2220      	movs	r2, #32
 8004fd2:	61da      	str	r2, [r3, #28]
    hdma_dac_ch1.Init.Priority = DMA_PRIORITY_HIGH;
 8004fd4:	4b10      	ldr	r3, [pc, #64]	; (8005018 <HAL_DAC_MspInit+0xe4>)
 8004fd6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004fda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_dac_ch1) != HAL_OK)
 8004fdc:	480e      	ldr	r0, [pc, #56]	; (8005018 <HAL_DAC_MspInit+0xe4>)
 8004fde:	f002 fbd5 	bl	800778c <HAL_DMA_Init>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_DAC_MspInit+0xb8>
    {
      Error_Handler();
 8004fe8:	f7ff feac 	bl	8004d44 <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac_ch1);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a0a      	ldr	r2, [pc, #40]	; (8005018 <HAL_DAC_MspInit+0xe4>)
 8004ff0:	609a      	str	r2, [r3, #8]
 8004ff2:	4a09      	ldr	r2, [pc, #36]	; (8005018 <HAL_DAC_MspInit+0xe4>)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	6293      	str	r3, [r2, #40]	; 0x28

    /* DAC1 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2105      	movs	r1, #5
 8004ffc:	2036      	movs	r0, #54	; 0x36
 8004ffe:	f002 f891 	bl	8007124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005002:	2036      	movs	r0, #54	; 0x36
 8005004:	f002 f8aa 	bl	800715c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }

}
 8005008:	bf00      	nop
 800500a:	3728      	adds	r7, #40	; 0x28
 800500c:	46bd      	mov	sp, r7
 800500e:	bd80      	pop	{r7, pc}
 8005010:	40007400 	.word	0x40007400
 8005014:	40021000 	.word	0x40021000
 8005018:	200003cc 	.word	0x200003cc
 800501c:	40020030 	.word	0x40020030

08005020 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8005020:	b580      	push	{r7, lr}
 8005022:	b09e      	sub	sp, #120	; 0x78
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005028:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800502c:	2200      	movs	r2, #0
 800502e:	601a      	str	r2, [r3, #0]
 8005030:	605a      	str	r2, [r3, #4]
 8005032:	609a      	str	r2, [r3, #8]
 8005034:	60da      	str	r2, [r3, #12]
 8005036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005038:	f107 0310 	add.w	r3, r7, #16
 800503c:	2254      	movs	r2, #84	; 0x54
 800503e:	2100      	movs	r1, #0
 8005040:	4618      	mov	r0, r3
 8005042:	f009 fd45 	bl	800ead0 <memset>
  if(hi2c->Instance==I2C1)
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a1e      	ldr	r2, [pc, #120]	; (80050c4 <HAL_I2C_MspInit+0xa4>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d135      	bne.n	80050bc <HAL_I2C_MspInit+0x9c>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8005050:	2340      	movs	r3, #64	; 0x40
 8005052:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8005054:	2300      	movs	r3, #0
 8005056:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8005058:	f107 0310 	add.w	r3, r7, #16
 800505c:	4618      	mov	r0, r3
 800505e:	f004 fa3f 	bl	80094e0 <HAL_RCCEx_PeriphCLKConfig>
 8005062:	4603      	mov	r3, r0
 8005064:	2b00      	cmp	r3, #0
 8005066:	d001      	beq.n	800506c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8005068:	f7ff fe6c 	bl	8004d44 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800506c:	4b16      	ldr	r3, [pc, #88]	; (80050c8 <HAL_I2C_MspInit+0xa8>)
 800506e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005070:	4a15      	ldr	r2, [pc, #84]	; (80050c8 <HAL_I2C_MspInit+0xa8>)
 8005072:	f043 0302 	orr.w	r3, r3, #2
 8005076:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005078:	4b13      	ldr	r3, [pc, #76]	; (80050c8 <HAL_I2C_MspInit+0xa8>)
 800507a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800507c:	f003 0302 	and.w	r3, r3, #2
 8005080:	60fb      	str	r3, [r7, #12]
 8005082:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005084:	23c0      	movs	r3, #192	; 0xc0
 8005086:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005088:	2312      	movs	r3, #18
 800508a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800508c:	2300      	movs	r3, #0
 800508e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005090:	2303      	movs	r3, #3
 8005092:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005094:	2304      	movs	r3, #4
 8005096:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005098:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800509c:	4619      	mov	r1, r3
 800509e:	480b      	ldr	r0, [pc, #44]	; (80050cc <HAL_I2C_MspInit+0xac>)
 80050a0:	f002 fd6c 	bl	8007b7c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80050a4:	4b08      	ldr	r3, [pc, #32]	; (80050c8 <HAL_I2C_MspInit+0xa8>)
 80050a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050a8:	4a07      	ldr	r2, [pc, #28]	; (80050c8 <HAL_I2C_MspInit+0xa8>)
 80050aa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80050ae:	6593      	str	r3, [r2, #88]	; 0x58
 80050b0:	4b05      	ldr	r3, [pc, #20]	; (80050c8 <HAL_I2C_MspInit+0xa8>)
 80050b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050b8:	60bb      	str	r3, [r7, #8]
 80050ba:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80050bc:	bf00      	nop
 80050be:	3778      	adds	r7, #120	; 0x78
 80050c0:	46bd      	mov	sp, r7
 80050c2:	bd80      	pop	{r7, pc}
 80050c4:	40005400 	.word	0x40005400
 80050c8:	40021000 	.word	0x40021000
 80050cc:	48000400 	.word	0x48000400

080050d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b086      	sub	sp, #24
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050e0:	d10c      	bne.n	80050fc <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80050e2:	4b1e      	ldr	r3, [pc, #120]	; (800515c <HAL_TIM_Base_MspInit+0x8c>)
 80050e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050e6:	4a1d      	ldr	r2, [pc, #116]	; (800515c <HAL_TIM_Base_MspInit+0x8c>)
 80050e8:	f043 0301 	orr.w	r3, r3, #1
 80050ec:	6593      	str	r3, [r2, #88]	; 0x58
 80050ee:	4b1b      	ldr	r3, [pc, #108]	; (800515c <HAL_TIM_Base_MspInit+0x8c>)
 80050f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	617b      	str	r3, [r7, #20]
 80050f8:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80050fa:	e02a      	b.n	8005152 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM6)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	4a17      	ldr	r2, [pc, #92]	; (8005160 <HAL_TIM_Base_MspInit+0x90>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d114      	bne.n	8005130 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8005106:	4b15      	ldr	r3, [pc, #84]	; (800515c <HAL_TIM_Base_MspInit+0x8c>)
 8005108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800510a:	4a14      	ldr	r2, [pc, #80]	; (800515c <HAL_TIM_Base_MspInit+0x8c>)
 800510c:	f043 0310 	orr.w	r3, r3, #16
 8005110:	6593      	str	r3, [r2, #88]	; 0x58
 8005112:	4b12      	ldr	r3, [pc, #72]	; (800515c <HAL_TIM_Base_MspInit+0x8c>)
 8005114:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005116:	f003 0310 	and.w	r3, r3, #16
 800511a:	613b      	str	r3, [r7, #16]
 800511c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 5, 0);
 800511e:	2200      	movs	r2, #0
 8005120:	2105      	movs	r1, #5
 8005122:	2036      	movs	r0, #54	; 0x36
 8005124:	f001 fffe 	bl	8007124 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8005128:	2036      	movs	r0, #54	; 0x36
 800512a:	f002 f817 	bl	800715c <HAL_NVIC_EnableIRQ>
}
 800512e:	e010      	b.n	8005152 <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM7)
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	4a0b      	ldr	r2, [pc, #44]	; (8005164 <HAL_TIM_Base_MspInit+0x94>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d10b      	bne.n	8005152 <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM7_CLK_ENABLE();
 800513a:	4b08      	ldr	r3, [pc, #32]	; (800515c <HAL_TIM_Base_MspInit+0x8c>)
 800513c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800513e:	4a07      	ldr	r2, [pc, #28]	; (800515c <HAL_TIM_Base_MspInit+0x8c>)
 8005140:	f043 0320 	orr.w	r3, r3, #32
 8005144:	6593      	str	r3, [r2, #88]	; 0x58
 8005146:	4b05      	ldr	r3, [pc, #20]	; (800515c <HAL_TIM_Base_MspInit+0x8c>)
 8005148:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514a:	f003 0320 	and.w	r3, r3, #32
 800514e:	60fb      	str	r3, [r7, #12]
 8005150:	68fb      	ldr	r3, [r7, #12]
}
 8005152:	bf00      	nop
 8005154:	3718      	adds	r7, #24
 8005156:	46bd      	mov	sp, r7
 8005158:	bd80      	pop	{r7, pc}
 800515a:	bf00      	nop
 800515c:	40021000 	.word	0x40021000
 8005160:	40001000 	.word	0x40001000
 8005164:	40001400 	.word	0x40001400

08005168 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b09e      	sub	sp, #120	; 0x78
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005170:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005174:	2200      	movs	r2, #0
 8005176:	601a      	str	r2, [r3, #0]
 8005178:	605a      	str	r2, [r3, #4]
 800517a:	609a      	str	r2, [r3, #8]
 800517c:	60da      	str	r2, [r3, #12]
 800517e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8005180:	f107 0310 	add.w	r3, r7, #16
 8005184:	2254      	movs	r2, #84	; 0x54
 8005186:	2100      	movs	r1, #0
 8005188:	4618      	mov	r0, r3
 800518a:	f009 fca1 	bl	800ead0 <memset>
  if(huart->Instance==USART2)
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	4a28      	ldr	r2, [pc, #160]	; (8005234 <HAL_UART_MspInit+0xcc>)
 8005194:	4293      	cmp	r3, r2
 8005196:	d148      	bne.n	800522a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8005198:	2302      	movs	r3, #2
 800519a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800519c:	2300      	movs	r3, #0
 800519e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80051a0:	f107 0310 	add.w	r3, r7, #16
 80051a4:	4618      	mov	r0, r3
 80051a6:	f004 f99b 	bl	80094e0 <HAL_RCCEx_PeriphCLKConfig>
 80051aa:	4603      	mov	r3, r0
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d001      	beq.n	80051b4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80051b0:	f7ff fdc8 	bl	8004d44 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80051b4:	4b20      	ldr	r3, [pc, #128]	; (8005238 <HAL_UART_MspInit+0xd0>)
 80051b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051b8:	4a1f      	ldr	r2, [pc, #124]	; (8005238 <HAL_UART_MspInit+0xd0>)
 80051ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80051be:	6593      	str	r3, [r2, #88]	; 0x58
 80051c0:	4b1d      	ldr	r3, [pc, #116]	; (8005238 <HAL_UART_MspInit+0xd0>)
 80051c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80051c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80051c8:	60fb      	str	r3, [r7, #12]
 80051ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80051cc:	4b1a      	ldr	r3, [pc, #104]	; (8005238 <HAL_UART_MspInit+0xd0>)
 80051ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051d0:	4a19      	ldr	r2, [pc, #100]	; (8005238 <HAL_UART_MspInit+0xd0>)
 80051d2:	f043 0301 	orr.w	r3, r3, #1
 80051d6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80051d8:	4b17      	ldr	r3, [pc, #92]	; (8005238 <HAL_UART_MspInit+0xd0>)
 80051da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80051dc:	f003 0301 	and.w	r3, r3, #1
 80051e0:	60bb      	str	r3, [r7, #8]
 80051e2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80051e4:	2304      	movs	r3, #4
 80051e6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80051e8:	2302      	movs	r3, #2
 80051ea:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80051ec:	2300      	movs	r3, #0
 80051ee:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80051f0:	2303      	movs	r3, #3
 80051f2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80051f4:	2307      	movs	r3, #7
 80051f6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80051f8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80051fc:	4619      	mov	r1, r3
 80051fe:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005202:	f002 fcbb 	bl	8007b7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8005206:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800520a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800520c:	2302      	movs	r3, #2
 800520e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005210:	2300      	movs	r3, #0
 8005212:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005214:	2303      	movs	r3, #3
 8005216:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8005218:	2303      	movs	r3, #3
 800521a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800521c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8005220:	4619      	mov	r1, r3
 8005222:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8005226:	f002 fca9 	bl	8007b7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800522a:	bf00      	nop
 800522c:	3778      	adds	r7, #120	; 0x78
 800522e:	46bd      	mov	sp, r7
 8005230:	bd80      	pop	{r7, pc}
 8005232:	bf00      	nop
 8005234:	40004400 	.word	0x40004400
 8005238:	40021000 	.word	0x40021000

0800523c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08c      	sub	sp, #48	; 0x30
 8005240:	af00      	add	r7, sp, #0
 8005242:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8005244:	2300      	movs	r3, #0
 8005246:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f

  /* Enable TIM16 clock */
  __HAL_RCC_TIM16_CLK_ENABLE();
 800524a:	4b2e      	ldr	r3, [pc, #184]	; (8005304 <HAL_InitTick+0xc8>)
 800524c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800524e:	4a2d      	ldr	r2, [pc, #180]	; (8005304 <HAL_InitTick+0xc8>)
 8005250:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005254:	6613      	str	r3, [r2, #96]	; 0x60
 8005256:	4b2b      	ldr	r3, [pc, #172]	; (8005304 <HAL_InitTick+0xc8>)
 8005258:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800525a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8005262:	f107 020c 	add.w	r2, r7, #12
 8005266:	f107 0310 	add.w	r3, r7, #16
 800526a:	4611      	mov	r1, r2
 800526c:	4618      	mov	r0, r3
 800526e:	f004 f8a5 	bl	80093bc <HAL_RCC_GetClockConfig>

  /* Compute TIM16 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8005272:	f004 f88d 	bl	8009390 <HAL_RCC_GetPCLK2Freq>
 8005276:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM16 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8005278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800527a:	4a23      	ldr	r2, [pc, #140]	; (8005308 <HAL_InitTick+0xcc>)
 800527c:	fba2 2303 	umull	r2, r3, r2, r3
 8005280:	0c9b      	lsrs	r3, r3, #18
 8005282:	3b01      	subs	r3, #1
 8005284:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM16 */
  htim16.Instance = TIM16;
 8005286:	4b21      	ldr	r3, [pc, #132]	; (800530c <HAL_InitTick+0xd0>)
 8005288:	4a21      	ldr	r2, [pc, #132]	; (8005310 <HAL_InitTick+0xd4>)
 800528a:	601a      	str	r2, [r3, #0]
  + Period = [(TIM16CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim16.Init.Period = (1000000U / 1000U) - 1U;
 800528c:	4b1f      	ldr	r3, [pc, #124]	; (800530c <HAL_InitTick+0xd0>)
 800528e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8005292:	60da      	str	r2, [r3, #12]
  htim16.Init.Prescaler = uwPrescalerValue;
 8005294:	4a1d      	ldr	r2, [pc, #116]	; (800530c <HAL_InitTick+0xd0>)
 8005296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005298:	6053      	str	r3, [r2, #4]
  htim16.Init.ClockDivision = 0;
 800529a:	4b1c      	ldr	r3, [pc, #112]	; (800530c <HAL_InitTick+0xd0>)
 800529c:	2200      	movs	r2, #0
 800529e:	611a      	str	r2, [r3, #16]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 80052a0:	4b1a      	ldr	r3, [pc, #104]	; (800530c <HAL_InitTick+0xd0>)
 80052a2:	2200      	movs	r2, #0
 80052a4:	609a      	str	r2, [r3, #8]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80052a6:	4b19      	ldr	r3, [pc, #100]	; (800530c <HAL_InitTick+0xd0>)
 80052a8:	2200      	movs	r2, #0
 80052aa:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim16);
 80052ac:	4817      	ldr	r0, [pc, #92]	; (800530c <HAL_InitTick+0xd0>)
 80052ae:	f004 fc0f 	bl	8009ad0 <HAL_TIM_Base_Init>
 80052b2:	4603      	mov	r3, r0
 80052b4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80052b8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d11b      	bne.n	80052f8 <HAL_InitTick+0xbc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim16);
 80052c0:	4812      	ldr	r0, [pc, #72]	; (800530c <HAL_InitTick+0xd0>)
 80052c2:	f004 fca9 	bl	8009c18 <HAL_TIM_Base_Start_IT>
 80052c6:	4603      	mov	r3, r0
 80052c8:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80052cc:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d111      	bne.n	80052f8 <HAL_InitTick+0xbc>
    {
    /* Enable the TIM16 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80052d4:	2019      	movs	r0, #25
 80052d6:	f001 ff41 	bl	800715c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	2b0f      	cmp	r3, #15
 80052de:	d808      	bhi.n	80052f2 <HAL_InitTick+0xb6>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80052e0:	2200      	movs	r2, #0
 80052e2:	6879      	ldr	r1, [r7, #4]
 80052e4:	2019      	movs	r0, #25
 80052e6:	f001 ff1d 	bl	8007124 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80052ea:	4a0a      	ldr	r2, [pc, #40]	; (8005314 <HAL_InitTick+0xd8>)
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	e002      	b.n	80052f8 <HAL_InitTick+0xbc>
      }
      else
      {
        status = HAL_ERROR;
 80052f2:	2301      	movs	r3, #1
 80052f4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80052f8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3730      	adds	r7, #48	; 0x30
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}
 8005304:	40021000 	.word	0x40021000
 8005308:	431bde83 	.word	0x431bde83
 800530c:	200020e0 	.word	0x200020e0
 8005310:	40014400 	.word	0x40014400
 8005314:	200000a0 	.word	0x200000a0

08005318 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005318:	b480      	push	{r7}
 800531a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800531c:	e7fe      	b.n	800531c <NMI_Handler+0x4>

0800531e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800531e:	b480      	push	{r7}
 8005320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005322:	e7fe      	b.n	8005322 <HardFault_Handler+0x4>

08005324 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005324:	b480      	push	{r7}
 8005326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005328:	e7fe      	b.n	8005328 <MemManage_Handler+0x4>

0800532a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800532a:	b480      	push	{r7}
 800532c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800532e:	e7fe      	b.n	800532e <BusFault_Handler+0x4>

08005330 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005330:	b480      	push	{r7}
 8005332:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005334:	e7fe      	b.n	8005334 <UsageFault_Handler+0x4>

08005336 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005336:	b480      	push	{r7}
 8005338:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800533a:	bf00      	nop
 800533c:	46bd      	mov	sp, r7
 800533e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005342:	4770      	bx	lr

08005344 <DMA1_Channel3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel3 global interrupt.
  */
void DMA1_Channel3_IRQHandler(void)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel3_IRQn 0 */

  /* USER CODE END DMA1_Channel3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac_ch1);
 8005348:	4802      	ldr	r0, [pc, #8]	; (8005354 <DMA1_Channel3_IRQHandler+0x10>)
 800534a:	f002 fb37 	bl	80079bc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel3_IRQn 1 */

  /* USER CODE END DMA1_Channel3_IRQn 1 */
}
 800534e:	bf00      	nop
 8005350:	bd80      	pop	{r7, pc}
 8005352:	bf00      	nop
 8005354:	200003cc 	.word	0x200003cc

08005358 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupt.
  */
void CAN1_TX_IRQHandler(void)
{
 8005358:	b580      	push	{r7, lr}
 800535a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800535c:	4802      	ldr	r0, [pc, #8]	; (8005368 <CAN1_TX_IRQHandler+0x10>)
 800535e:	f001 fc17 	bl	8006b90 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8005362:	bf00      	nop
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	20000390 	.word	0x20000390

0800536c <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupt.
  */
void CAN1_RX0_IRQHandler(void)
{
 800536c:	b580      	push	{r7, lr}
 800536e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8005370:	4802      	ldr	r0, [pc, #8]	; (800537c <CAN1_RX0_IRQHandler+0x10>)
 8005372:	f001 fc0d 	bl	8006b90 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8005376:	bf00      	nop
 8005378:	bd80      	pop	{r7, pc}
 800537a:	bf00      	nop
 800537c:	20000390 	.word	0x20000390

08005380 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim16);
 8005384:	4802      	ldr	r0, [pc, #8]	; (8005390 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8005386:	f004 fc9b 	bl	8009cc0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800538a:	bf00      	nop
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	200020e0 	.word	0x200020e0

08005394 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8005398:	4803      	ldr	r0, [pc, #12]	; (80053a8 <TIM6_DAC_IRQHandler+0x14>)
 800539a:	f004 fc91 	bl	8009cc0 <HAL_TIM_IRQHandler>
  HAL_DAC_IRQHandler(&hdac1);
 800539e:	4803      	ldr	r0, [pc, #12]	; (80053ac <TIM6_DAC_IRQHandler+0x18>)
 80053a0:	f001 ffd8 	bl	8007354 <HAL_DAC_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80053a4:	bf00      	nop
 80053a6:	bd80      	pop	{r7, pc}
 80053a8:	200004b4 	.word	0x200004b4
 80053ac:	200003b8 	.word	0x200003b8

080053b0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80053b8:	4a14      	ldr	r2, [pc, #80]	; (800540c <_sbrk+0x5c>)
 80053ba:	4b15      	ldr	r3, [pc, #84]	; (8005410 <_sbrk+0x60>)
 80053bc:	1ad3      	subs	r3, r2, r3
 80053be:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80053c0:	697b      	ldr	r3, [r7, #20]
 80053c2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80053c4:	4b13      	ldr	r3, [pc, #76]	; (8005414 <_sbrk+0x64>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d102      	bne.n	80053d2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80053cc:	4b11      	ldr	r3, [pc, #68]	; (8005414 <_sbrk+0x64>)
 80053ce:	4a12      	ldr	r2, [pc, #72]	; (8005418 <_sbrk+0x68>)
 80053d0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80053d2:	4b10      	ldr	r3, [pc, #64]	; (8005414 <_sbrk+0x64>)
 80053d4:	681a      	ldr	r2, [r3, #0]
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	4413      	add	r3, r2
 80053da:	693a      	ldr	r2, [r7, #16]
 80053dc:	429a      	cmp	r2, r3
 80053de:	d207      	bcs.n	80053f0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053e0:	f009 fb3c 	bl	800ea5c <__errno>
 80053e4:	4603      	mov	r3, r0
 80053e6:	220c      	movs	r2, #12
 80053e8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053ea:	f04f 33ff 	mov.w	r3, #4294967295
 80053ee:	e009      	b.n	8005404 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053f0:	4b08      	ldr	r3, [pc, #32]	; (8005414 <_sbrk+0x64>)
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053f6:	4b07      	ldr	r3, [pc, #28]	; (8005414 <_sbrk+0x64>)
 80053f8:	681a      	ldr	r2, [r3, #0]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	4413      	add	r3, r2
 80053fe:	4a05      	ldr	r2, [pc, #20]	; (8005414 <_sbrk+0x64>)
 8005400:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005402:	68fb      	ldr	r3, [r7, #12]
}
 8005404:	4618      	mov	r0, r3
 8005406:	3718      	adds	r7, #24
 8005408:	46bd      	mov	sp, r7
 800540a:	bd80      	pop	{r7, pc}
 800540c:	20010000 	.word	0x20010000
 8005410:	00000400 	.word	0x00000400
 8005414:	2000212c 	.word	0x2000212c
 8005418:	20004c58 	.word	0x20004c58

0800541c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 800541c:	b480      	push	{r7}
 800541e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8005420:	4b06      	ldr	r3, [pc, #24]	; (800543c <SystemInit+0x20>)
 8005422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005426:	4a05      	ldr	r2, [pc, #20]	; (800543c <SystemInit+0x20>)
 8005428:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800542c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8005430:	bf00      	nop
 8005432:	46bd      	mov	sp, r7
 8005434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005438:	4770      	bx	lr
 800543a:	bf00      	nop
 800543c:	e000ed00 	.word	0xe000ed00

08005440 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8005440:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005478 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8005444:	f7ff ffea 	bl	800541c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005448:	480c      	ldr	r0, [pc, #48]	; (800547c <LoopForever+0x6>)
  ldr r1, =_edata
 800544a:	490d      	ldr	r1, [pc, #52]	; (8005480 <LoopForever+0xa>)
  ldr r2, =_sidata
 800544c:	4a0d      	ldr	r2, [pc, #52]	; (8005484 <LoopForever+0xe>)
  movs r3, #0
 800544e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005450:	e002      	b.n	8005458 <LoopCopyDataInit>

08005452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005456:	3304      	adds	r3, #4

08005458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800545a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800545c:	d3f9      	bcc.n	8005452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800545e:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <LoopForever+0x12>)
  ldr r4, =_ebss
 8005460:	4c0a      	ldr	r4, [pc, #40]	; (800548c <LoopForever+0x16>)
  movs r3, #0
 8005462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005464:	e001      	b.n	800546a <LoopFillZerobss>

08005466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005468:	3204      	adds	r2, #4

0800546a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800546a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800546c:	d3fb      	bcc.n	8005466 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800546e:	f009 fafb 	bl	800ea68 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8005472:	f7fd fe99 	bl	80031a8 <main>

08005476 <LoopForever>:

LoopForever:
    b LoopForever
 8005476:	e7fe      	b.n	8005476 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8005478:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800547c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005480:	20000110 	.word	0x20000110
  ldr r2, =_sidata
 8005484:	0801d810 	.word	0x0801d810
  ldr r2, =_sbss
 8005488:	20000110 	.word	0x20000110
  ldr r4, =_ebss
 800548c:	20004c54 	.word	0x20004c54

08005490 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8005490:	e7fe      	b.n	8005490 <ADC1_IRQHandler>

08005492 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8005492:	b580      	push	{r7, lr}
 8005494:	b082      	sub	sp, #8
 8005496:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8005498:	2300      	movs	r3, #0
 800549a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800549c:	2003      	movs	r0, #3
 800549e:	f001 fe36 	bl	800710e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80054a2:	200f      	movs	r0, #15
 80054a4:	f7ff feca 	bl	800523c <HAL_InitTick>
 80054a8:	4603      	mov	r3, r0
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d002      	beq.n	80054b4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80054ae:	2301      	movs	r3, #1
 80054b0:	71fb      	strb	r3, [r7, #7]
 80054b2:	e001      	b.n	80054b8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80054b4:	f7ff fc4c 	bl	8004d50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80054b8:	79fb      	ldrb	r3, [r7, #7]
}
 80054ba:	4618      	mov	r0, r3
 80054bc:	3708      	adds	r7, #8
 80054be:	46bd      	mov	sp, r7
 80054c0:	bd80      	pop	{r7, pc}
	...

080054c4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80054c4:	b480      	push	{r7}
 80054c6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80054c8:	4b06      	ldr	r3, [pc, #24]	; (80054e4 <HAL_IncTick+0x20>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	461a      	mov	r2, r3
 80054ce:	4b06      	ldr	r3, [pc, #24]	; (80054e8 <HAL_IncTick+0x24>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	4413      	add	r3, r2
 80054d4:	4a04      	ldr	r2, [pc, #16]	; (80054e8 <HAL_IncTick+0x24>)
 80054d6:	6013      	str	r3, [r2, #0]
}
 80054d8:	bf00      	nop
 80054da:	46bd      	mov	sp, r7
 80054dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054e0:	4770      	bx	lr
 80054e2:	bf00      	nop
 80054e4:	200000a4 	.word	0x200000a4
 80054e8:	20002130 	.word	0x20002130

080054ec <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80054ec:	b480      	push	{r7}
 80054ee:	af00      	add	r7, sp, #0
  return uwTick;
 80054f0:	4b03      	ldr	r3, [pc, #12]	; (8005500 <HAL_GetTick+0x14>)
 80054f2:	681b      	ldr	r3, [r3, #0]
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	46bd      	mov	sp, r7
 80054f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fc:	4770      	bx	lr
 80054fe:	bf00      	nop
 8005500:	20002130 	.word	0x20002130

08005504 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b084      	sub	sp, #16
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800550c:	f7ff ffee 	bl	80054ec <HAL_GetTick>
 8005510:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f1b3 3fff 	cmp.w	r3, #4294967295
 800551c:	d005      	beq.n	800552a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800551e:	4b0a      	ldr	r3, [pc, #40]	; (8005548 <HAL_Delay+0x44>)
 8005520:	781b      	ldrb	r3, [r3, #0]
 8005522:	461a      	mov	r2, r3
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	4413      	add	r3, r2
 8005528:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800552a:	bf00      	nop
 800552c:	f7ff ffde 	bl	80054ec <HAL_GetTick>
 8005530:	4602      	mov	r2, r0
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	1ad3      	subs	r3, r2, r3
 8005536:	68fa      	ldr	r2, [r7, #12]
 8005538:	429a      	cmp	r2, r3
 800553a:	d8f7      	bhi.n	800552c <HAL_Delay+0x28>
  {
  }
}
 800553c:	bf00      	nop
 800553e:	bf00      	nop
 8005540:	3710      	adds	r7, #16
 8005542:	46bd      	mov	sp, r7
 8005544:	bd80      	pop	{r7, pc}
 8005546:	bf00      	nop
 8005548:	200000a4 	.word	0x200000a4

0800554c <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 800554c:	b480      	push	{r7}
 800554e:	b083      	sub	sp, #12
 8005550:	af00      	add	r7, sp, #0
 8005552:	6078      	str	r0, [r7, #4]
 8005554:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	689b      	ldr	r3, [r3, #8]
 800555a:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800555e:	683b      	ldr	r3, [r7, #0]
 8005560:	431a      	orrs	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	609a      	str	r2, [r3, #8]
}
 8005566:	bf00      	nop
 8005568:	370c      	adds	r7, #12
 800556a:	46bd      	mov	sp, r7
 800556c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005570:	4770      	bx	lr

08005572 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8005572:	b480      	push	{r7}
 8005574:	b083      	sub	sp, #12
 8005576:	af00      	add	r7, sp, #0
 8005578:	6078      	str	r0, [r7, #4]
 800557a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8005584:	683b      	ldr	r3, [r7, #0]
 8005586:	431a      	orrs	r2, r3
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	609a      	str	r2, [r3, #8]
}
 800558c:	bf00      	nop
 800558e:	370c      	adds	r7, #12
 8005590:	46bd      	mov	sp, r7
 8005592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005596:	4770      	bx	lr

08005598 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	689b      	ldr	r3, [r3, #8]
 80055a4:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80055a8:	4618      	mov	r0, r3
 80055aa:	370c      	adds	r7, #12
 80055ac:	46bd      	mov	sp, r7
 80055ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b2:	4770      	bx	lr

080055b4 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80055b4:	b480      	push	{r7}
 80055b6:	b087      	sub	sp, #28
 80055b8:	af00      	add	r7, sp, #0
 80055ba:	60f8      	str	r0, [r7, #12]
 80055bc:	60b9      	str	r1, [r7, #8]
 80055be:	607a      	str	r2, [r7, #4]
 80055c0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3360      	adds	r3, #96	; 0x60
 80055c6:	461a      	mov	r2, r3
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	009b      	lsls	r3, r3, #2
 80055cc:	4413      	add	r3, r2
 80055ce:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80055d0:	697b      	ldr	r3, [r7, #20]
 80055d2:	681a      	ldr	r2, [r3, #0]
 80055d4:	4b08      	ldr	r3, [pc, #32]	; (80055f8 <LL_ADC_SetOffset+0x44>)
 80055d6:	4013      	ands	r3, r2
 80055d8:	687a      	ldr	r2, [r7, #4]
 80055da:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80055de:	683a      	ldr	r2, [r7, #0]
 80055e0:	430a      	orrs	r2, r1
 80055e2:	4313      	orrs	r3, r2
 80055e4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80055e8:	697b      	ldr	r3, [r7, #20]
 80055ea:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80055ec:	bf00      	nop
 80055ee:	371c      	adds	r7, #28
 80055f0:	46bd      	mov	sp, r7
 80055f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f6:	4770      	bx	lr
 80055f8:	03fff000 	.word	0x03fff000

080055fc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80055fc:	b480      	push	{r7}
 80055fe:	b085      	sub	sp, #20
 8005600:	af00      	add	r7, sp, #0
 8005602:	6078      	str	r0, [r7, #4]
 8005604:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	3360      	adds	r3, #96	; 0x60
 800560a:	461a      	mov	r2, r3
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 800561c:	4618      	mov	r0, r3
 800561e:	3714      	adds	r7, #20
 8005620:	46bd      	mov	sp, r7
 8005622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005626:	4770      	bx	lr

08005628 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8005628:	b480      	push	{r7}
 800562a:	b087      	sub	sp, #28
 800562c:	af00      	add	r7, sp, #0
 800562e:	60f8      	str	r0, [r7, #12]
 8005630:	60b9      	str	r1, [r7, #8]
 8005632:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	3360      	adds	r3, #96	; 0x60
 8005638:	461a      	mov	r2, r3
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	009b      	lsls	r3, r3, #2
 800563e:	4413      	add	r3, r2
 8005640:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	431a      	orrs	r2, r3
 800564e:	697b      	ldr	r3, [r7, #20]
 8005650:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8005652:	bf00      	nop
 8005654:	371c      	adds	r7, #28
 8005656:	46bd      	mov	sp, r7
 8005658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565c:	4770      	bx	lr

0800565e <LL_ADC_REG_SetSequencerRanks>:
  *         (7) On STM32L4, fast channel (0.188 us for 12-bit resolution (ADC conversion rate up to 5.33 Ms/s)).
  *             Other channels are slow channels (0.238 us for 12-bit resolution (ADC conversion rate up to 4.21 Ms/s)).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800565e:	b480      	push	{r7}
 8005660:	b087      	sub	sp, #28
 8005662:	af00      	add	r7, sp, #0
 8005664:	60f8      	str	r0, [r7, #12]
 8005666:	60b9      	str	r1, [r7, #8]
 8005668:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3330      	adds	r3, #48	; 0x30
 800566e:	461a      	mov	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	0a1b      	lsrs	r3, r3, #8
 8005674:	009b      	lsls	r3, r3, #2
 8005676:	f003 030c 	and.w	r3, r3, #12
 800567a:	4413      	add	r3, r2
 800567c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	681a      	ldr	r2, [r3, #0]
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f003 031f 	and.w	r3, r3, #31
 8005688:	211f      	movs	r1, #31
 800568a:	fa01 f303 	lsl.w	r3, r1, r3
 800568e:	43db      	mvns	r3, r3
 8005690:	401a      	ands	r2, r3
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	0e9b      	lsrs	r3, r3, #26
 8005696:	f003 011f 	and.w	r1, r3, #31
 800569a:	68bb      	ldr	r3, [r7, #8]
 800569c:	f003 031f 	and.w	r3, r3, #31
 80056a0:	fa01 f303 	lsl.w	r3, r1, r3
 80056a4:	431a      	orrs	r2, r3
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80056aa:	bf00      	nop
 80056ac:	371c      	adds	r7, #28
 80056ae:	46bd      	mov	sp, r7
 80056b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056b4:	4770      	bx	lr

080056b6 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80056b6:	b480      	push	{r7}
 80056b8:	b087      	sub	sp, #28
 80056ba:	af00      	add	r7, sp, #0
 80056bc:	60f8      	str	r0, [r7, #12]
 80056be:	60b9      	str	r1, [r7, #8]
 80056c0:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	3314      	adds	r3, #20
 80056c6:	461a      	mov	r2, r3
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	0e5b      	lsrs	r3, r3, #25
 80056cc:	009b      	lsls	r3, r3, #2
 80056ce:	f003 0304 	and.w	r3, r3, #4
 80056d2:	4413      	add	r3, r2
 80056d4:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	681a      	ldr	r2, [r3, #0]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	0d1b      	lsrs	r3, r3, #20
 80056de:	f003 031f 	and.w	r3, r3, #31
 80056e2:	2107      	movs	r1, #7
 80056e4:	fa01 f303 	lsl.w	r3, r1, r3
 80056e8:	43db      	mvns	r3, r3
 80056ea:	401a      	ands	r2, r3
 80056ec:	68bb      	ldr	r3, [r7, #8]
 80056ee:	0d1b      	lsrs	r3, r3, #20
 80056f0:	f003 031f 	and.w	r3, r3, #31
 80056f4:	6879      	ldr	r1, [r7, #4]
 80056f6:	fa01 f303 	lsl.w	r3, r1, r3
 80056fa:	431a      	orrs	r2, r3
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8005700:	bf00      	nop
 8005702:	371c      	adds	r7, #28
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 800570c:	b480      	push	{r7}
 800570e:	b085      	sub	sp, #20
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005724:	43db      	mvns	r3, r3
 8005726:	401a      	ands	r2, r3
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	f003 0318 	and.w	r3, r3, #24
 800572e:	4908      	ldr	r1, [pc, #32]	; (8005750 <LL_ADC_SetChannelSingleDiff+0x44>)
 8005730:	40d9      	lsrs	r1, r3
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	400b      	ands	r3, r1
 8005736:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800573a:	431a      	orrs	r2, r3
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8005742:	bf00      	nop
 8005744:	3714      	adds	r7, #20
 8005746:	46bd      	mov	sp, r7
 8005748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574c:	4770      	bx	lr
 800574e:	bf00      	nop
 8005750:	0007ffff 	.word	0x0007ffff

08005754 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8005754:	b480      	push	{r7}
 8005756:	b083      	sub	sp, #12
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8005764:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005768:	687a      	ldr	r2, [r7, #4]
 800576a:	6093      	str	r3, [r2, #8]
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	689b      	ldr	r3, [r3, #8]
 8005784:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005788:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800578c:	d101      	bne.n	8005792 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800578e:	2301      	movs	r3, #1
 8005790:	e000      	b.n	8005794 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	370c      	adds	r7, #12
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b083      	sub	sp, #12
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	689b      	ldr	r3, [r3, #8]
 80057ac:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80057b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80057b4:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80057bc:	bf00      	nop
 80057be:	370c      	adds	r7, #12
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b083      	sub	sp, #12
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80057dc:	d101      	bne.n	80057e2 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 80057de:	2301      	movs	r3, #1
 80057e0:	e000      	b.n	80057e4 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 80057e2:	2300      	movs	r3, #0
}
 80057e4:	4618      	mov	r0, r3
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80057f0:	b480      	push	{r7}
 80057f2:	b083      	sub	sp, #12
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	689b      	ldr	r3, [r3, #8]
 80057fc:	f003 0301 	and.w	r3, r3, #1
 8005800:	2b01      	cmp	r3, #1
 8005802:	d101      	bne.n	8005808 <LL_ADC_IsEnabled+0x18>
 8005804:	2301      	movs	r3, #1
 8005806:	e000      	b.n	800580a <LL_ADC_IsEnabled+0x1a>
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	370c      	adds	r7, #12
 800580e:	46bd      	mov	sp, r7
 8005810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005814:	4770      	bx	lr

08005816 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8005816:	b480      	push	{r7}
 8005818:	b083      	sub	sp, #12
 800581a:	af00      	add	r7, sp, #0
 800581c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	689b      	ldr	r3, [r3, #8]
 8005822:	f003 0304 	and.w	r3, r3, #4
 8005826:	2b04      	cmp	r3, #4
 8005828:	d101      	bne.n	800582e <LL_ADC_REG_IsConversionOngoing+0x18>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800582e:	2300      	movs	r3, #0
}
 8005830:	4618      	mov	r0, r3
 8005832:	370c      	adds	r7, #12
 8005834:	46bd      	mov	sp, r7
 8005836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583a:	4770      	bx	lr

0800583c <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800583c:	b480      	push	{r7}
 800583e:	b083      	sub	sp, #12
 8005840:	af00      	add	r7, sp, #0
 8005842:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f003 0308 	and.w	r3, r3, #8
 800584c:	2b08      	cmp	r3, #8
 800584e:	d101      	bne.n	8005854 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8005850:	2301      	movs	r3, #1
 8005852:	e000      	b.n	8005856 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8005854:	2300      	movs	r3, #0
}
 8005856:	4618      	mov	r0, r3
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr
	...

08005864 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8005864:	b580      	push	{r7, lr}
 8005866:	b088      	sub	sp, #32
 8005868:	af00      	add	r7, sp, #0
 800586a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800586c:	2300      	movs	r3, #0
 800586e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8005870:	2300      	movs	r3, #0
 8005872:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2b00      	cmp	r3, #0
 8005878:	d101      	bne.n	800587e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800587a:	2301      	movs	r3, #1
 800587c:	e12c      	b.n	8005ad8 <HAL_ADC_Init+0x274>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	691b      	ldr	r3, [r3, #16]
 8005882:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005888:	2b00      	cmp	r3, #0
 800588a:	d109      	bne.n	80058a0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f7ff fa87 	bl	8004da0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	2200      	movs	r2, #0
 8005896:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	2200      	movs	r2, #0
 800589c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	4618      	mov	r0, r3
 80058a6:	f7ff ff67 	bl	8005778 <LL_ADC_IsDeepPowerDownEnabled>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d004      	beq.n	80058ba <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4618      	mov	r0, r3
 80058b6:	f7ff ff4d 	bl	8005754 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f7ff ff82 	bl	80057c8 <LL_ADC_IsInternalRegulatorEnabled>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d115      	bne.n	80058f6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	4618      	mov	r0, r3
 80058d0:	f7ff ff66 	bl	80057a0 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80058d4:	4b82      	ldr	r3, [pc, #520]	; (8005ae0 <HAL_ADC_Init+0x27c>)
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	099b      	lsrs	r3, r3, #6
 80058da:	4a82      	ldr	r2, [pc, #520]	; (8005ae4 <HAL_ADC_Init+0x280>)
 80058dc:	fba2 2303 	umull	r2, r3, r2, r3
 80058e0:	099b      	lsrs	r3, r3, #6
 80058e2:	3301      	adds	r3, #1
 80058e4:	005b      	lsls	r3, r3, #1
 80058e6:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80058e8:	e002      	b.n	80058f0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80058ea:	68bb      	ldr	r3, [r7, #8]
 80058ec:	3b01      	subs	r3, #1
 80058ee:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d1f9      	bne.n	80058ea <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4618      	mov	r0, r3
 80058fc:	f7ff ff64 	bl	80057c8 <LL_ADC_IsInternalRegulatorEnabled>
 8005900:	4603      	mov	r3, r0
 8005902:	2b00      	cmp	r3, #0
 8005904:	d10d      	bne.n	8005922 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800590a:	f043 0210 	orr.w	r2, r3, #16
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005916:	f043 0201 	orr.w	r2, r3, #1
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800591e:	2301      	movs	r3, #1
 8005920:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	681b      	ldr	r3, [r3, #0]
 8005926:	4618      	mov	r0, r3
 8005928:	f7ff ff75 	bl	8005816 <LL_ADC_REG_IsConversionOngoing>
 800592c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005932:	f003 0310 	and.w	r3, r3, #16
 8005936:	2b00      	cmp	r3, #0
 8005938:	f040 80c5 	bne.w	8005ac6 <HAL_ADC_Init+0x262>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	2b00      	cmp	r3, #0
 8005940:	f040 80c1 	bne.w	8005ac6 <HAL_ADC_Init+0x262>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005948:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800594c:	f043 0202 	orr.w	r2, r3, #2
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	4618      	mov	r0, r3
 800595a:	f7ff ff49 	bl	80057f0 <LL_ADC_IsEnabled>
 800595e:	4603      	mov	r3, r0
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10b      	bne.n	800597c <HAL_ADC_Init+0x118>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8005964:	4860      	ldr	r0, [pc, #384]	; (8005ae8 <HAL_ADC_Init+0x284>)
 8005966:	f7ff ff43 	bl	80057f0 <LL_ADC_IsEnabled>
 800596a:	4603      	mov	r3, r0
 800596c:	2b00      	cmp	r3, #0
 800596e:	d105      	bne.n	800597c <HAL_ADC_Init+0x118>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	685b      	ldr	r3, [r3, #4]
 8005974:	4619      	mov	r1, r3
 8005976:	485d      	ldr	r0, [pc, #372]	; (8005aec <HAL_ADC_Init+0x288>)
 8005978:	f7ff fde8 	bl	800554c <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	7e5b      	ldrb	r3, [r3, #25]
 8005980:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8005986:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 800598c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8005992:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	f893 3020 	ldrb.w	r3, [r3, #32]
 800599a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 800599c:	4313      	orrs	r3, r2
 800599e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80059a6:	2b01      	cmp	r3, #1
 80059a8:	d106      	bne.n	80059b8 <HAL_ADC_Init+0x154>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	3b01      	subs	r3, #1
 80059b0:	045b      	lsls	r3, r3, #17
 80059b2:	69ba      	ldr	r2, [r7, #24]
 80059b4:	4313      	orrs	r3, r2
 80059b6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d009      	beq.n	80059d4 <HAL_ADC_Init+0x170>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80059c4:	f403 7270 	and.w	r2, r3, #960	; 0x3c0
                  | hadc->Init.ExternalTrigConvEdge
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059cc:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80059ce:	69ba      	ldr	r2, [r7, #24]
 80059d0:	4313      	orrs	r3, r2
 80059d2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	4b45      	ldr	r3, [pc, #276]	; (8005af0 <HAL_ADC_Init+0x28c>)
 80059dc:	4013      	ands	r3, r2
 80059de:	687a      	ldr	r2, [r7, #4]
 80059e0:	6812      	ldr	r2, [r2, #0]
 80059e2:	69b9      	ldr	r1, [r7, #24]
 80059e4:	430b      	orrs	r3, r1
 80059e6:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff ff12 	bl	8005816 <LL_ADC_REG_IsConversionOngoing>
 80059f2:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	4618      	mov	r0, r3
 80059fa:	f7ff ff1f 	bl	800583c <LL_ADC_INJ_IsConversionOngoing>
 80059fe:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005a00:	693b      	ldr	r3, [r7, #16]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d13d      	bne.n	8005a82 <HAL_ADC_Init+0x21e>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d13a      	bne.n	8005a82 <HAL_ADC_Init+0x21e>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	7e1b      	ldrb	r3, [r3, #24]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a10:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8005a18:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8005a1a:	4313      	orrs	r3, r2
 8005a1c:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005a28:	f023 0302 	bic.w	r3, r3, #2
 8005a2c:	687a      	ldr	r2, [r7, #4]
 8005a2e:	6812      	ldr	r2, [r2, #0]
 8005a30:	69b9      	ldr	r1, [r7, #24]
 8005a32:	430b      	orrs	r3, r1
 8005a34:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d118      	bne.n	8005a72 <HAL_ADC_Init+0x20e>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	691b      	ldr	r3, [r3, #16]
 8005a46:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005a4a:	f023 0304 	bic.w	r3, r3, #4
 8005a4e:	687a      	ldr	r2, [r7, #4]
 8005a50:	6bd1      	ldr	r1, [r2, #60]	; 0x3c
 8005a52:	687a      	ldr	r2, [r7, #4]
 8005a54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8005a56:	4311      	orrs	r1, r2
 8005a58:	687a      	ldr	r2, [r7, #4]
 8005a5a:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8005a5c:	4311      	orrs	r1, r2
 8005a5e:	687a      	ldr	r2, [r7, #4]
 8005a60:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8005a62:	430a      	orrs	r2, r1
 8005a64:	431a      	orrs	r2, r3
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	611a      	str	r2, [r3, #16]
 8005a70:	e007      	b.n	8005a82 <HAL_ADC_Init+0x21e>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	691a      	ldr	r2, [r3, #16]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	f022 0201 	bic.w	r2, r2, #1
 8005a80:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b01      	cmp	r3, #1
 8005a88:	d10c      	bne.n	8005aa4 <HAL_ADC_Init+0x240>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a90:	f023 010f 	bic.w	r1, r3, #15
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	1e5a      	subs	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	430a      	orrs	r2, r1
 8005aa0:	631a      	str	r2, [r3, #48]	; 0x30
 8005aa2:	e007      	b.n	8005ab4 <HAL_ADC_Init+0x250>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	f022 020f 	bic.w	r2, r2, #15
 8005ab2:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005ab8:	f023 0303 	bic.w	r3, r3, #3
 8005abc:	f043 0201 	orr.w	r2, r3, #1
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	655a      	str	r2, [r3, #84]	; 0x54
 8005ac4:	e007      	b.n	8005ad6 <HAL_ADC_Init+0x272>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005aca:	f043 0210 	orr.w	r2, r3, #16
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8005ad6:	7ffb      	ldrb	r3, [r7, #31]
}
 8005ad8:	4618      	mov	r0, r3
 8005ada:	3720      	adds	r7, #32
 8005adc:	46bd      	mov	sp, r7
 8005ade:	bd80      	pop	{r7, pc}
 8005ae0:	2000009c 	.word	0x2000009c
 8005ae4:	053e2d63 	.word	0x053e2d63
 8005ae8:	50040000 	.word	0x50040000
 8005aec:	50040300 	.word	0x50040300
 8005af0:	fff0c007 	.word	0xfff0c007

08005af4 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8005af4:	b580      	push	{r7, lr}
 8005af6:	b0b6      	sub	sp, #216	; 0xd8
 8005af8:	af00      	add	r7, sp, #0
 8005afa:	6078      	str	r0, [r7, #4]
 8005afc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8005afe:	2300      	movs	r3, #0
 8005b00:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8005b04:	2300      	movs	r3, #0
 8005b06:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005b0e:	2b01      	cmp	r3, #1
 8005b10:	d101      	bne.n	8005b16 <HAL_ADC_ConfigChannel+0x22>
 8005b12:	2302      	movs	r3, #2
 8005b14:	e3b9      	b.n	800628a <HAL_ADC_ConfigChannel+0x796>
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	4618      	mov	r0, r3
 8005b24:	f7ff fe77 	bl	8005816 <LL_ADC_REG_IsConversionOngoing>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f040 839e 	bne.w	800626c <HAL_ADC_ConfigChannel+0x778>
    /* Correspondence for compatibility with legacy definition of             */
    /* sequencer ranks in direct number format. This correspondence can       */
    /* be done only on ranks 1 to 5 due to literal values.                    */
    /* Note: Sequencer ranks in direct number format are no more used         */
    /*       and are detected by activating USE_FULL_ASSERT feature.          */
    if (sConfig->Rank <= 5U)
 8005b30:	683b      	ldr	r3, [r7, #0]
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2b05      	cmp	r3, #5
 8005b36:	d824      	bhi.n	8005b82 <HAL_ADC_ConfigChannel+0x8e>
    {
      switch (sConfig->Rank)
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	685b      	ldr	r3, [r3, #4]
 8005b3c:	3b02      	subs	r3, #2
 8005b3e:	2b03      	cmp	r3, #3
 8005b40:	d81b      	bhi.n	8005b7a <HAL_ADC_ConfigChannel+0x86>
 8005b42:	a201      	add	r2, pc, #4	; (adr r2, 8005b48 <HAL_ADC_ConfigChannel+0x54>)
 8005b44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b48:	08005b59 	.word	0x08005b59
 8005b4c:	08005b61 	.word	0x08005b61
 8005b50:	08005b69 	.word	0x08005b69
 8005b54:	08005b71 	.word	0x08005b71
      {
        case 2U:
          sConfig->Rank = ADC_REGULAR_RANK_2;
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	220c      	movs	r2, #12
 8005b5c:	605a      	str	r2, [r3, #4]
          break;
 8005b5e:	e011      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x90>
        case 3U:
          sConfig->Rank = ADC_REGULAR_RANK_3;
 8005b60:	683b      	ldr	r3, [r7, #0]
 8005b62:	2212      	movs	r2, #18
 8005b64:	605a      	str	r2, [r3, #4]
          break;
 8005b66:	e00d      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x90>
        case 4U:
          sConfig->Rank = ADC_REGULAR_RANK_4;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2218      	movs	r2, #24
 8005b6c:	605a      	str	r2, [r3, #4]
          break;
 8005b6e:	e009      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x90>
        case 5U:
          sConfig->Rank = ADC_REGULAR_RANK_5;
 8005b70:	683b      	ldr	r3, [r7, #0]
 8005b72:	f44f 7280 	mov.w	r2, #256	; 0x100
 8005b76:	605a      	str	r2, [r3, #4]
          break;
 8005b78:	e004      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x90>
        /* case 1U */
        default:
          sConfig->Rank = ADC_REGULAR_RANK_1;
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	2206      	movs	r2, #6
 8005b7e:	605a      	str	r2, [r3, #4]
          break;
 8005b80:	e000      	b.n	8005b84 <HAL_ADC_ConfigChannel+0x90>
      }
    }
 8005b82:	bf00      	nop
#endif

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6818      	ldr	r0, [r3, #0]
 8005b88:	683b      	ldr	r3, [r7, #0]
 8005b8a:	6859      	ldr	r1, [r3, #4]
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	461a      	mov	r2, r3
 8005b92:	f7ff fd64 	bl	800565e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	f7ff fe3b 	bl	8005816 <LL_ADC_REG_IsConversionOngoing>
 8005ba0:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	4618      	mov	r0, r3
 8005baa:	f7ff fe47 	bl	800583c <LL_ADC_INJ_IsConversionOngoing>
 8005bae:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8005bb2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	f040 81a6 	bne.w	8005f08 <HAL_ADC_ConfigChannel+0x414>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8005bbc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	f040 81a1 	bne.w	8005f08 <HAL_ADC_ConfigChannel+0x414>
        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
      }
#else
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6818      	ldr	r0, [r3, #0]
 8005bca:	683b      	ldr	r3, [r7, #0]
 8005bcc:	6819      	ldr	r1, [r3, #0]
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	461a      	mov	r2, r3
 8005bd4:	f7ff fd6f 	bl	80056b6 <LL_ADC_SetChannelSamplingTime>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8005bd8:	683b      	ldr	r3, [r7, #0]
 8005bda:	695a      	ldr	r2, [r3, #20]
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	68db      	ldr	r3, [r3, #12]
 8005be2:	08db      	lsrs	r3, r3, #3
 8005be4:	f003 0303 	and.w	r3, r3, #3
 8005be8:	005b      	lsls	r3, r3, #1
 8005bea:	fa02 f303 	lsl.w	r3, r2, r3
 8005bee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	2b04      	cmp	r3, #4
 8005bf8:	d00a      	beq.n	8005c10 <HAL_ADC_ConfigChannel+0x11c>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6818      	ldr	r0, [r3, #0]
 8005bfe:	683b      	ldr	r3, [r7, #0]
 8005c00:	6919      	ldr	r1, [r3, #16]
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8005c0a:	f7ff fcd3 	bl	80055b4 <LL_ADC_SetOffset>
 8005c0e:	e17b      	b.n	8005f08 <HAL_ADC_ConfigChannel+0x414>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	2100      	movs	r1, #0
 8005c16:	4618      	mov	r0, r3
 8005c18:	f7ff fcf0 	bl	80055fc <LL_ADC_GetOffsetChannel>
 8005c1c:	4603      	mov	r3, r0
 8005c1e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c22:	2b00      	cmp	r3, #0
 8005c24:	d10a      	bne.n	8005c3c <HAL_ADC_ConfigChannel+0x148>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2100      	movs	r1, #0
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	f7ff fce5 	bl	80055fc <LL_ADC_GetOffsetChannel>
 8005c32:	4603      	mov	r3, r0
 8005c34:	0e9b      	lsrs	r3, r3, #26
 8005c36:	f003 021f 	and.w	r2, r3, #31
 8005c3a:	e01e      	b.n	8005c7a <HAL_ADC_ConfigChannel+0x186>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	2100      	movs	r1, #0
 8005c42:	4618      	mov	r0, r3
 8005c44:	f7ff fcda 	bl	80055fc <LL_ADC_GetOffsetChannel>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c4e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 8005c52:	fa93 f3a3 	rbit	r3, r3
 8005c56:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005c5a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8005c5e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005c62:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	d101      	bne.n	8005c6e <HAL_ADC_ConfigChannel+0x17a>
  {
    return 32U;
 8005c6a:	2320      	movs	r3, #32
 8005c6c:	e004      	b.n	8005c78 <HAL_ADC_ConfigChannel+0x184>
  }
  return __builtin_clz(value);
 8005c6e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8005c72:	fab3 f383 	clz	r3, r3
 8005c76:	b2db      	uxtb	r3, r3
 8005c78:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005c7a:	683b      	ldr	r3, [r7, #0]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d105      	bne.n	8005c92 <HAL_ADC_ConfigChannel+0x19e>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	0e9b      	lsrs	r3, r3, #26
 8005c8c:	f003 031f 	and.w	r3, r3, #31
 8005c90:	e018      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0x1d0>
 8005c92:	683b      	ldr	r3, [r7, #0]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005c9a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8005c9e:	fa93 f3a3 	rbit	r3, r3
 8005ca2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8005ca6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8005caa:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8005cae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d101      	bne.n	8005cba <HAL_ADC_ConfigChannel+0x1c6>
    return 32U;
 8005cb6:	2320      	movs	r3, #32
 8005cb8:	e004      	b.n	8005cc4 <HAL_ADC_ConfigChannel+0x1d0>
  return __builtin_clz(value);
 8005cba:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8005cbe:	fab3 f383 	clz	r3, r3
 8005cc2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d106      	bne.n	8005cd6 <HAL_ADC_ConfigChannel+0x1e2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2200      	movs	r2, #0
 8005cce:	2100      	movs	r1, #0
 8005cd0:	4618      	mov	r0, r3
 8005cd2:	f7ff fca9 	bl	8005628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	2101      	movs	r1, #1
 8005cdc:	4618      	mov	r0, r3
 8005cde:	f7ff fc8d 	bl	80055fc <LL_ADC_GetOffsetChannel>
 8005ce2:	4603      	mov	r3, r0
 8005ce4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d10a      	bne.n	8005d02 <HAL_ADC_ConfigChannel+0x20e>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2101      	movs	r1, #1
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f7ff fc82 	bl	80055fc <LL_ADC_GetOffsetChannel>
 8005cf8:	4603      	mov	r3, r0
 8005cfa:	0e9b      	lsrs	r3, r3, #26
 8005cfc:	f003 021f 	and.w	r2, r3, #31
 8005d00:	e01e      	b.n	8005d40 <HAL_ADC_ConfigChannel+0x24c>
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2101      	movs	r1, #1
 8005d08:	4618      	mov	r0, r3
 8005d0a:	f7ff fc77 	bl	80055fc <LL_ADC_GetOffsetChannel>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d14:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8005d18:	fa93 f3a3 	rbit	r3, r3
 8005d1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8005d20:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005d24:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8005d28:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d2c:	2b00      	cmp	r3, #0
 8005d2e:	d101      	bne.n	8005d34 <HAL_ADC_ConfigChannel+0x240>
    return 32U;
 8005d30:	2320      	movs	r3, #32
 8005d32:	e004      	b.n	8005d3e <HAL_ADC_ConfigChannel+0x24a>
  return __builtin_clz(value);
 8005d34:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8005d38:	fab3 f383 	clz	r3, r3
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005d40:	683b      	ldr	r3, [r7, #0]
 8005d42:	681b      	ldr	r3, [r3, #0]
 8005d44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	d105      	bne.n	8005d58 <HAL_ADC_ConfigChannel+0x264>
 8005d4c:	683b      	ldr	r3, [r7, #0]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	0e9b      	lsrs	r3, r3, #26
 8005d52:	f003 031f 	and.w	r3, r3, #31
 8005d56:	e018      	b.n	8005d8a <HAL_ADC_ConfigChannel+0x296>
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005d60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005d64:	fa93 f3a3 	rbit	r3, r3
 8005d68:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8005d6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8005d70:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8005d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d101      	bne.n	8005d80 <HAL_ADC_ConfigChannel+0x28c>
    return 32U;
 8005d7c:	2320      	movs	r3, #32
 8005d7e:	e004      	b.n	8005d8a <HAL_ADC_ConfigChannel+0x296>
  return __builtin_clz(value);
 8005d80:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005d84:	fab3 f383 	clz	r3, r3
 8005d88:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8005d8a:	429a      	cmp	r2, r3
 8005d8c:	d106      	bne.n	8005d9c <HAL_ADC_ConfigChannel+0x2a8>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	2200      	movs	r2, #0
 8005d94:	2101      	movs	r1, #1
 8005d96:	4618      	mov	r0, r3
 8005d98:	f7ff fc46 	bl	8005628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	2102      	movs	r1, #2
 8005da2:	4618      	mov	r0, r3
 8005da4:	f7ff fc2a 	bl	80055fc <LL_ADC_GetOffsetChannel>
 8005da8:	4603      	mov	r3, r0
 8005daa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d10a      	bne.n	8005dc8 <HAL_ADC_ConfigChannel+0x2d4>
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	681b      	ldr	r3, [r3, #0]
 8005db6:	2102      	movs	r1, #2
 8005db8:	4618      	mov	r0, r3
 8005dba:	f7ff fc1f 	bl	80055fc <LL_ADC_GetOffsetChannel>
 8005dbe:	4603      	mov	r3, r0
 8005dc0:	0e9b      	lsrs	r3, r3, #26
 8005dc2:	f003 021f 	and.w	r2, r3, #31
 8005dc6:	e01e      	b.n	8005e06 <HAL_ADC_ConfigChannel+0x312>
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	2102      	movs	r1, #2
 8005dce:	4618      	mov	r0, r3
 8005dd0:	f7ff fc14 	bl	80055fc <LL_ADC_GetOffsetChannel>
 8005dd4:	4603      	mov	r3, r0
 8005dd6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005dda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8005dde:	fa93 f3a3 	rbit	r3, r3
 8005de2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8005de6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005dea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8005dee:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d101      	bne.n	8005dfa <HAL_ADC_ConfigChannel+0x306>
    return 32U;
 8005df6:	2320      	movs	r3, #32
 8005df8:	e004      	b.n	8005e04 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8005dfa:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8005dfe:	fab3 f383 	clz	r3, r3
 8005e02:	b2db      	uxtb	r3, r3
 8005e04:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d105      	bne.n	8005e1e <HAL_ADC_ConfigChannel+0x32a>
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	0e9b      	lsrs	r3, r3, #26
 8005e18:	f003 031f 	and.w	r3, r3, #31
 8005e1c:	e016      	b.n	8005e4c <HAL_ADC_ConfigChannel+0x358>
 8005e1e:	683b      	ldr	r3, [r7, #0]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e26:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005e2a:	fa93 f3a3 	rbit	r3, r3
 8005e2e:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8005e30:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8005e32:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8005e36:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d101      	bne.n	8005e42 <HAL_ADC_ConfigChannel+0x34e>
    return 32U;
 8005e3e:	2320      	movs	r3, #32
 8005e40:	e004      	b.n	8005e4c <HAL_ADC_ConfigChannel+0x358>
  return __builtin_clz(value);
 8005e42:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005e46:	fab3 f383 	clz	r3, r3
 8005e4a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8005e4c:	429a      	cmp	r2, r3
 8005e4e:	d106      	bne.n	8005e5e <HAL_ADC_ConfigChannel+0x36a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2200      	movs	r2, #0
 8005e56:	2102      	movs	r1, #2
 8005e58:	4618      	mov	r0, r3
 8005e5a:	f7ff fbe5 	bl	8005628 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	2103      	movs	r1, #3
 8005e64:	4618      	mov	r0, r3
 8005e66:	f7ff fbc9 	bl	80055fc <LL_ADC_GetOffsetChannel>
 8005e6a:	4603      	mov	r3, r0
 8005e6c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005e70:	2b00      	cmp	r3, #0
 8005e72:	d10a      	bne.n	8005e8a <HAL_ADC_ConfigChannel+0x396>
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	2103      	movs	r1, #3
 8005e7a:	4618      	mov	r0, r3
 8005e7c:	f7ff fbbe 	bl	80055fc <LL_ADC_GetOffsetChannel>
 8005e80:	4603      	mov	r3, r0
 8005e82:	0e9b      	lsrs	r3, r3, #26
 8005e84:	f003 021f 	and.w	r2, r3, #31
 8005e88:	e017      	b.n	8005eba <HAL_ADC_ConfigChannel+0x3c6>
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2103      	movs	r1, #3
 8005e90:	4618      	mov	r0, r3
 8005e92:	f7ff fbb3 	bl	80055fc <LL_ADC_GetOffsetChannel>
 8005e96:	4603      	mov	r3, r0
 8005e98:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005e9a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005e9c:	fa93 f3a3 	rbit	r3, r3
 8005ea0:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8005ea2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005ea4:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8005ea6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <HAL_ADC_ConfigChannel+0x3bc>
    return 32U;
 8005eac:	2320      	movs	r3, #32
 8005eae:	e003      	b.n	8005eb8 <HAL_ADC_ConfigChannel+0x3c4>
  return __builtin_clz(value);
 8005eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005eb2:	fab3 f383 	clz	r3, r3
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d105      	bne.n	8005ed2 <HAL_ADC_ConfigChannel+0x3de>
 8005ec6:	683b      	ldr	r3, [r7, #0]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	0e9b      	lsrs	r3, r3, #26
 8005ecc:	f003 031f 	and.w	r3, r3, #31
 8005ed0:	e011      	b.n	8005ef6 <HAL_ADC_ConfigChannel+0x402>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005ed8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eda:	fa93 f3a3 	rbit	r3, r3
 8005ede:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8005ee0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005ee2:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8005ee4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d101      	bne.n	8005eee <HAL_ADC_ConfigChannel+0x3fa>
    return 32U;
 8005eea:	2320      	movs	r3, #32
 8005eec:	e003      	b.n	8005ef6 <HAL_ADC_ConfigChannel+0x402>
  return __builtin_clz(value);
 8005eee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005ef0:	fab3 f383 	clz	r3, r3
 8005ef4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d106      	bne.n	8005f08 <HAL_ADC_ConfigChannel+0x414>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	2200      	movs	r2, #0
 8005f00:	2103      	movs	r1, #3
 8005f02:	4618      	mov	r0, r3
 8005f04:	f7ff fb90 	bl	8005628 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	4618      	mov	r0, r3
 8005f0e:	f7ff fc6f 	bl	80057f0 <LL_ADC_IsEnabled>
 8005f12:	4603      	mov	r3, r0
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	f040 813f 	bne.w	8006198 <HAL_ADC_ConfigChannel+0x6a4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	6818      	ldr	r0, [r3, #0]
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	6819      	ldr	r1, [r3, #0]
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	68db      	ldr	r3, [r3, #12]
 8005f26:	461a      	mov	r2, r3
 8005f28:	f7ff fbf0 	bl	800570c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8005f2c:	683b      	ldr	r3, [r7, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	4a8e      	ldr	r2, [pc, #568]	; (800616c <HAL_ADC_ConfigChannel+0x678>)
 8005f32:	4293      	cmp	r3, r2
 8005f34:	f040 8130 	bne.w	8006198 <HAL_ADC_ConfigChannel+0x6a4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f3c:	683b      	ldr	r3, [r7, #0]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005f44:	2b00      	cmp	r3, #0
 8005f46:	d10b      	bne.n	8005f60 <HAL_ADC_ConfigChannel+0x46c>
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	0e9b      	lsrs	r3, r3, #26
 8005f4e:	3301      	adds	r3, #1
 8005f50:	f003 031f 	and.w	r3, r3, #31
 8005f54:	2b09      	cmp	r3, #9
 8005f56:	bf94      	ite	ls
 8005f58:	2301      	movls	r3, #1
 8005f5a:	2300      	movhi	r3, #0
 8005f5c:	b2db      	uxtb	r3, r3
 8005f5e:	e019      	b.n	8005f94 <HAL_ADC_ConfigChannel+0x4a0>
 8005f60:	683b      	ldr	r3, [r7, #0]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005f68:	fa93 f3a3 	rbit	r3, r3
 8005f6c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8005f6e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f70:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8005f72:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d101      	bne.n	8005f7c <HAL_ADC_ConfigChannel+0x488>
    return 32U;
 8005f78:	2320      	movs	r3, #32
 8005f7a:	e003      	b.n	8005f84 <HAL_ADC_ConfigChannel+0x490>
  return __builtin_clz(value);
 8005f7c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005f7e:	fab3 f383 	clz	r3, r3
 8005f82:	b2db      	uxtb	r3, r3
 8005f84:	3301      	adds	r3, #1
 8005f86:	f003 031f 	and.w	r3, r3, #31
 8005f8a:	2b09      	cmp	r3, #9
 8005f8c:	bf94      	ite	ls
 8005f8e:	2301      	movls	r3, #1
 8005f90:	2300      	movhi	r3, #0
 8005f92:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d079      	beq.n	800608c <HAL_ADC_ConfigChannel+0x598>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d107      	bne.n	8005fb4 <HAL_ADC_ConfigChannel+0x4c0>
 8005fa4:	683b      	ldr	r3, [r7, #0]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	0e9b      	lsrs	r3, r3, #26
 8005faa:	3301      	adds	r3, #1
 8005fac:	069b      	lsls	r3, r3, #26
 8005fae:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005fb2:	e015      	b.n	8005fe0 <HAL_ADC_ConfigChannel+0x4ec>
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005fba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fbc:	fa93 f3a3 	rbit	r3, r3
 8005fc0:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8005fc2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fc4:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8005fc6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d101      	bne.n	8005fd0 <HAL_ADC_ConfigChannel+0x4dc>
    return 32U;
 8005fcc:	2320      	movs	r3, #32
 8005fce:	e003      	b.n	8005fd8 <HAL_ADC_ConfigChannel+0x4e4>
  return __builtin_clz(value);
 8005fd0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fd2:	fab3 f383 	clz	r3, r3
 8005fd6:	b2db      	uxtb	r3, r3
 8005fd8:	3301      	adds	r3, #1
 8005fda:	069b      	lsls	r3, r3, #26
 8005fdc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d109      	bne.n	8006000 <HAL_ADC_ConfigChannel+0x50c>
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	0e9b      	lsrs	r3, r3, #26
 8005ff2:	3301      	adds	r3, #1
 8005ff4:	f003 031f 	and.w	r3, r3, #31
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8005ffe:	e017      	b.n	8006030 <HAL_ADC_ConfigChannel+0x53c>
 8006000:	683b      	ldr	r3, [r7, #0]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006006:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006008:	fa93 f3a3 	rbit	r3, r3
 800600c:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800600e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006010:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8006012:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006014:	2b00      	cmp	r3, #0
 8006016:	d101      	bne.n	800601c <HAL_ADC_ConfigChannel+0x528>
    return 32U;
 8006018:	2320      	movs	r3, #32
 800601a:	e003      	b.n	8006024 <HAL_ADC_ConfigChannel+0x530>
  return __builtin_clz(value);
 800601c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800601e:	fab3 f383 	clz	r3, r3
 8006022:	b2db      	uxtb	r3, r3
 8006024:	3301      	adds	r3, #1
 8006026:	f003 031f 	and.w	r3, r3, #31
 800602a:	2101      	movs	r1, #1
 800602c:	fa01 f303 	lsl.w	r3, r1, r3
 8006030:	ea42 0103 	orr.w	r1, r2, r3
 8006034:	683b      	ldr	r3, [r7, #0]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800603c:	2b00      	cmp	r3, #0
 800603e:	d10a      	bne.n	8006056 <HAL_ADC_ConfigChannel+0x562>
 8006040:	683b      	ldr	r3, [r7, #0]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	0e9b      	lsrs	r3, r3, #26
 8006046:	3301      	adds	r3, #1
 8006048:	f003 021f 	and.w	r2, r3, #31
 800604c:	4613      	mov	r3, r2
 800604e:	005b      	lsls	r3, r3, #1
 8006050:	4413      	add	r3, r2
 8006052:	051b      	lsls	r3, r3, #20
 8006054:	e018      	b.n	8006088 <HAL_ADC_ConfigChannel+0x594>
 8006056:	683b      	ldr	r3, [r7, #0]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800605c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800605e:	fa93 f3a3 	rbit	r3, r3
 8006062:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8006064:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006066:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8006068:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800606a:	2b00      	cmp	r3, #0
 800606c:	d101      	bne.n	8006072 <HAL_ADC_ConfigChannel+0x57e>
    return 32U;
 800606e:	2320      	movs	r3, #32
 8006070:	e003      	b.n	800607a <HAL_ADC_ConfigChannel+0x586>
  return __builtin_clz(value);
 8006072:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006074:	fab3 f383 	clz	r3, r3
 8006078:	b2db      	uxtb	r3, r3
 800607a:	3301      	adds	r3, #1
 800607c:	f003 021f 	and.w	r2, r3, #31
 8006080:	4613      	mov	r3, r2
 8006082:	005b      	lsls	r3, r3, #1
 8006084:	4413      	add	r3, r2
 8006086:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8006088:	430b      	orrs	r3, r1
 800608a:	e080      	b.n	800618e <HAL_ADC_ConfigChannel+0x69a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800608c:	683b      	ldr	r3, [r7, #0]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006094:	2b00      	cmp	r3, #0
 8006096:	d107      	bne.n	80060a8 <HAL_ADC_ConfigChannel+0x5b4>
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	0e9b      	lsrs	r3, r3, #26
 800609e:	3301      	adds	r3, #1
 80060a0:	069b      	lsls	r3, r3, #26
 80060a2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060a6:	e015      	b.n	80060d4 <HAL_ADC_ConfigChannel+0x5e0>
 80060a8:	683b      	ldr	r3, [r7, #0]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060b0:	fa93 f3a3 	rbit	r3, r3
 80060b4:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80060b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060b8:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80060ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d101      	bne.n	80060c4 <HAL_ADC_ConfigChannel+0x5d0>
    return 32U;
 80060c0:	2320      	movs	r3, #32
 80060c2:	e003      	b.n	80060cc <HAL_ADC_ConfigChannel+0x5d8>
  return __builtin_clz(value);
 80060c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c6:	fab3 f383 	clz	r3, r3
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	3301      	adds	r3, #1
 80060ce:	069b      	lsls	r3, r3, #26
 80060d0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d109      	bne.n	80060f4 <HAL_ADC_ConfigChannel+0x600>
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	0e9b      	lsrs	r3, r3, #26
 80060e6:	3301      	adds	r3, #1
 80060e8:	f003 031f 	and.w	r3, r3, #31
 80060ec:	2101      	movs	r1, #1
 80060ee:	fa01 f303 	lsl.w	r3, r1, r3
 80060f2:	e017      	b.n	8006124 <HAL_ADC_ConfigChannel+0x630>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80060fa:	6a3b      	ldr	r3, [r7, #32]
 80060fc:	fa93 f3a3 	rbit	r3, r3
 8006100:	61fb      	str	r3, [r7, #28]
  return result;
 8006102:	69fb      	ldr	r3, [r7, #28]
 8006104:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8006106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006108:	2b00      	cmp	r3, #0
 800610a:	d101      	bne.n	8006110 <HAL_ADC_ConfigChannel+0x61c>
    return 32U;
 800610c:	2320      	movs	r3, #32
 800610e:	e003      	b.n	8006118 <HAL_ADC_ConfigChannel+0x624>
  return __builtin_clz(value);
 8006110:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006112:	fab3 f383 	clz	r3, r3
 8006116:	b2db      	uxtb	r3, r3
 8006118:	3301      	adds	r3, #1
 800611a:	f003 031f 	and.w	r3, r3, #31
 800611e:	2101      	movs	r1, #1
 8006120:	fa01 f303 	lsl.w	r3, r1, r3
 8006124:	ea42 0103 	orr.w	r1, r2, r3
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10d      	bne.n	8006150 <HAL_ADC_ConfigChannel+0x65c>
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	0e9b      	lsrs	r3, r3, #26
 800613a:	3301      	adds	r3, #1
 800613c:	f003 021f 	and.w	r2, r3, #31
 8006140:	4613      	mov	r3, r2
 8006142:	005b      	lsls	r3, r3, #1
 8006144:	4413      	add	r3, r2
 8006146:	3b1e      	subs	r3, #30
 8006148:	051b      	lsls	r3, r3, #20
 800614a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800614e:	e01d      	b.n	800618c <HAL_ADC_ConfigChannel+0x698>
 8006150:	683b      	ldr	r3, [r7, #0]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006156:	697b      	ldr	r3, [r7, #20]
 8006158:	fa93 f3a3 	rbit	r3, r3
 800615c:	613b      	str	r3, [r7, #16]
  return result;
 800615e:	693b      	ldr	r3, [r7, #16]
 8006160:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8006162:	69bb      	ldr	r3, [r7, #24]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d103      	bne.n	8006170 <HAL_ADC_ConfigChannel+0x67c>
    return 32U;
 8006168:	2320      	movs	r3, #32
 800616a:	e005      	b.n	8006178 <HAL_ADC_ConfigChannel+0x684>
 800616c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8006170:	69bb      	ldr	r3, [r7, #24]
 8006172:	fab3 f383 	clz	r3, r3
 8006176:	b2db      	uxtb	r3, r3
 8006178:	3301      	adds	r3, #1
 800617a:	f003 021f 	and.w	r2, r3, #31
 800617e:	4613      	mov	r3, r2
 8006180:	005b      	lsls	r3, r3, #1
 8006182:	4413      	add	r3, r2
 8006184:	3b1e      	subs	r3, #30
 8006186:	051b      	lsls	r3, r3, #20
 8006188:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800618c:	430b      	orrs	r3, r1
 800618e:	683a      	ldr	r2, [r7, #0]
 8006190:	6892      	ldr	r2, [r2, #8]
 8006192:	4619      	mov	r1, r3
 8006194:	f7ff fa8f 	bl	80056b6 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	681a      	ldr	r2, [r3, #0]
 800619c:	4b3d      	ldr	r3, [pc, #244]	; (8006294 <HAL_ADC_ConfigChannel+0x7a0>)
 800619e:	4013      	ands	r3, r2
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d06c      	beq.n	800627e <HAL_ADC_ConfigChannel+0x78a>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80061a4:	483c      	ldr	r0, [pc, #240]	; (8006298 <HAL_ADC_ConfigChannel+0x7a4>)
 80061a6:	f7ff f9f7 	bl	8005598 <LL_ADC_GetCommonPathInternalCh>
 80061aa:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80061ae:	683b      	ldr	r3, [r7, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	4a3a      	ldr	r2, [pc, #232]	; (800629c <HAL_ADC_ConfigChannel+0x7a8>)
 80061b4:	4293      	cmp	r3, r2
 80061b6:	d127      	bne.n	8006208 <HAL_ADC_ConfigChannel+0x714>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80061b8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d121      	bne.n	8006208 <HAL_ADC_ConfigChannel+0x714>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a35      	ldr	r2, [pc, #212]	; (80062a0 <HAL_ADC_ConfigChannel+0x7ac>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d157      	bne.n	800627e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80061ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80061d2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80061d6:	4619      	mov	r1, r3
 80061d8:	482f      	ldr	r0, [pc, #188]	; (8006298 <HAL_ADC_ConfigChannel+0x7a4>)
 80061da:	f7ff f9ca 	bl	8005572 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80061de:	4b31      	ldr	r3, [pc, #196]	; (80062a4 <HAL_ADC_ConfigChannel+0x7b0>)
 80061e0:	681b      	ldr	r3, [r3, #0]
 80061e2:	099b      	lsrs	r3, r3, #6
 80061e4:	4a30      	ldr	r2, [pc, #192]	; (80062a8 <HAL_ADC_ConfigChannel+0x7b4>)
 80061e6:	fba2 2303 	umull	r2, r3, r2, r3
 80061ea:	099b      	lsrs	r3, r3, #6
 80061ec:	1c5a      	adds	r2, r3, #1
 80061ee:	4613      	mov	r3, r2
 80061f0:	005b      	lsls	r3, r3, #1
 80061f2:	4413      	add	r3, r2
 80061f4:	009b      	lsls	r3, r3, #2
 80061f6:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80061f8:	e002      	b.n	8006200 <HAL_ADC_ConfigChannel+0x70c>
          {
            wait_loop_index--;
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	3b01      	subs	r3, #1
 80061fe:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8006200:	68fb      	ldr	r3, [r7, #12]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1f9      	bne.n	80061fa <HAL_ADC_ConfigChannel+0x706>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8006206:	e03a      	b.n	800627e <HAL_ADC_ConfigChannel+0x78a>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8006208:	683b      	ldr	r3, [r7, #0]
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	4a27      	ldr	r2, [pc, #156]	; (80062ac <HAL_ADC_ConfigChannel+0x7b8>)
 800620e:	4293      	cmp	r3, r2
 8006210:	d113      	bne.n	800623a <HAL_ADC_ConfigChannel+0x746>
 8006212:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006216:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800621a:	2b00      	cmp	r3, #0
 800621c:	d10d      	bne.n	800623a <HAL_ADC_ConfigChannel+0x746>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	4a1f      	ldr	r2, [pc, #124]	; (80062a0 <HAL_ADC_ConfigChannel+0x7ac>)
 8006224:	4293      	cmp	r3, r2
 8006226:	d12a      	bne.n	800627e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8006228:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800622c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006230:	4619      	mov	r1, r3
 8006232:	4819      	ldr	r0, [pc, #100]	; (8006298 <HAL_ADC_ConfigChannel+0x7a4>)
 8006234:	f7ff f99d 	bl	8005572 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8006238:	e021      	b.n	800627e <HAL_ADC_ConfigChannel+0x78a>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 800623a:	683b      	ldr	r3, [r7, #0]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	4a1c      	ldr	r2, [pc, #112]	; (80062b0 <HAL_ADC_ConfigChannel+0x7bc>)
 8006240:	4293      	cmp	r3, r2
 8006242:	d11c      	bne.n	800627e <HAL_ADC_ConfigChannel+0x78a>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8006244:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8006248:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800624c:	2b00      	cmp	r3, #0
 800624e:	d116      	bne.n	800627e <HAL_ADC_ConfigChannel+0x78a>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	4a12      	ldr	r2, [pc, #72]	; (80062a0 <HAL_ADC_ConfigChannel+0x7ac>)
 8006256:	4293      	cmp	r3, r2
 8006258:	d111      	bne.n	800627e <HAL_ADC_ConfigChannel+0x78a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800625a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800625e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006262:	4619      	mov	r1, r3
 8006264:	480c      	ldr	r0, [pc, #48]	; (8006298 <HAL_ADC_ConfigChannel+0x7a4>)
 8006266:	f7ff f984 	bl	8005572 <LL_ADC_SetCommonPathInternalCh>
 800626a:	e008      	b.n	800627e <HAL_ADC_ConfigChannel+0x78a>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006270:	f043 0220 	orr.w	r2, r3, #32
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8006278:	2301      	movs	r3, #1
 800627a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	2200      	movs	r2, #0
 8006282:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8006286:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800628a:	4618      	mov	r0, r3
 800628c:	37d8      	adds	r7, #216	; 0xd8
 800628e:	46bd      	mov	sp, r7
 8006290:	bd80      	pop	{r7, pc}
 8006292:	bf00      	nop
 8006294:	80080000 	.word	0x80080000
 8006298:	50040300 	.word	0x50040300
 800629c:	c7520000 	.word	0xc7520000
 80062a0:	50040000 	.word	0x50040000
 80062a4:	2000009c 	.word	0x2000009c
 80062a8:	053e2d63 	.word	0x053e2d63
 80062ac:	cb840000 	.word	0xcb840000
 80062b0:	80000001 	.word	0x80000001

080062b4 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d101      	bne.n	80062c6 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	e0ed      	b.n	80064a2 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80062cc:	b2db      	uxtb	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d102      	bne.n	80062d8 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80062d2:	6878      	ldr	r0, [r7, #4]
 80062d4:	f7fe fdc8 	bl	8004e68 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	681a      	ldr	r2, [r3, #0]
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	f042 0201 	orr.w	r2, r2, #1
 80062e6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80062e8:	f7ff f900 	bl	80054ec <HAL_GetTick>
 80062ec:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80062ee:	e012      	b.n	8006316 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80062f0:	f7ff f8fc 	bl	80054ec <HAL_GetTick>
 80062f4:	4602      	mov	r2, r0
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	1ad3      	subs	r3, r2, r3
 80062fa:	2b0a      	cmp	r3, #10
 80062fc:	d90b      	bls.n	8006316 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006302:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	2205      	movs	r2, #5
 800630e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8006312:	2301      	movs	r3, #1
 8006314:	e0c5      	b.n	80064a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	685b      	ldr	r3, [r3, #4]
 800631c:	f003 0301 	and.w	r3, r3, #1
 8006320:	2b00      	cmp	r3, #0
 8006322:	d0e5      	beq.n	80062f0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	681a      	ldr	r2, [r3, #0]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f022 0202 	bic.w	r2, r2, #2
 8006332:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8006334:	f7ff f8da 	bl	80054ec <HAL_GetTick>
 8006338:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800633a:	e012      	b.n	8006362 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800633c:	f7ff f8d6 	bl	80054ec <HAL_GetTick>
 8006340:	4602      	mov	r2, r0
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	1ad3      	subs	r3, r2, r3
 8006346:	2b0a      	cmp	r3, #10
 8006348:	d90b      	bls.n	8006362 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800634e:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	2205      	movs	r2, #5
 800635a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800635e:	2301      	movs	r3, #1
 8006360:	e09f      	b.n	80064a2 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	f003 0302 	and.w	r3, r3, #2
 800636c:	2b00      	cmp	r3, #0
 800636e:	d1e5      	bne.n	800633c <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	7e1b      	ldrb	r3, [r3, #24]
 8006374:	2b01      	cmp	r3, #1
 8006376:	d108      	bne.n	800638a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	681a      	ldr	r2, [r3, #0]
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006386:	601a      	str	r2, [r3, #0]
 8006388:	e007      	b.n	800639a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	681b      	ldr	r3, [r3, #0]
 800638e:	681a      	ldr	r2, [r3, #0]
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006398:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	7e5b      	ldrb	r3, [r3, #25]
 800639e:	2b01      	cmp	r3, #1
 80063a0:	d108      	bne.n	80063b4 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	681a      	ldr	r2, [r3, #0]
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	681b      	ldr	r3, [r3, #0]
 80063ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80063b0:	601a      	str	r2, [r3, #0]
 80063b2:	e007      	b.n	80063c4 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	681a      	ldr	r2, [r3, #0]
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80063c2:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	7e9b      	ldrb	r3, [r3, #26]
 80063c8:	2b01      	cmp	r3, #1
 80063ca:	d108      	bne.n	80063de <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	681a      	ldr	r2, [r3, #0]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f042 0220 	orr.w	r2, r2, #32
 80063da:	601a      	str	r2, [r3, #0]
 80063dc:	e007      	b.n	80063ee <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	681a      	ldr	r2, [r3, #0]
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	f022 0220 	bic.w	r2, r2, #32
 80063ec:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	7edb      	ldrb	r3, [r3, #27]
 80063f2:	2b01      	cmp	r3, #1
 80063f4:	d108      	bne.n	8006408 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	681a      	ldr	r2, [r3, #0]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	f022 0210 	bic.w	r2, r2, #16
 8006404:	601a      	str	r2, [r3, #0]
 8006406:	e007      	b.n	8006418 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	681a      	ldr	r2, [r3, #0]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f042 0210 	orr.w	r2, r2, #16
 8006416:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	7f1b      	ldrb	r3, [r3, #28]
 800641c:	2b01      	cmp	r3, #1
 800641e:	d108      	bne.n	8006432 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	681b      	ldr	r3, [r3, #0]
 8006424:	681a      	ldr	r2, [r3, #0]
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	f042 0208 	orr.w	r2, r2, #8
 800642e:	601a      	str	r2, [r3, #0]
 8006430:	e007      	b.n	8006442 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f022 0208 	bic.w	r2, r2, #8
 8006440:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	7f5b      	ldrb	r3, [r3, #29]
 8006446:	2b01      	cmp	r3, #1
 8006448:	d108      	bne.n	800645c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	681a      	ldr	r2, [r3, #0]
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	681b      	ldr	r3, [r3, #0]
 8006454:	f042 0204 	orr.w	r2, r2, #4
 8006458:	601a      	str	r2, [r3, #0]
 800645a:	e007      	b.n	800646c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	681a      	ldr	r2, [r3, #0]
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	681b      	ldr	r3, [r3, #0]
 8006466:	f022 0204 	bic.w	r2, r2, #4
 800646a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	689a      	ldr	r2, [r3, #8]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	68db      	ldr	r3, [r3, #12]
 8006474:	431a      	orrs	r2, r3
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	691b      	ldr	r3, [r3, #16]
 800647a:	431a      	orrs	r2, r3
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	695b      	ldr	r3, [r3, #20]
 8006480:	ea42 0103 	orr.w	r1, r2, r3
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	685b      	ldr	r3, [r3, #4]
 8006488:	1e5a      	subs	r2, r3, #1
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	681b      	ldr	r3, [r3, #0]
 800648e:	430a      	orrs	r2, r1
 8006490:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2200      	movs	r2, #0
 8006496:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 80064a0:	2300      	movs	r3, #0
}
 80064a2:	4618      	mov	r0, r3
 80064a4:	3710      	adds	r7, #16
 80064a6:	46bd      	mov	sp, r7
 80064a8:	bd80      	pop	{r7, pc}

080064aa <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 80064aa:	b480      	push	{r7}
 80064ac:	b087      	sub	sp, #28
 80064ae:	af00      	add	r7, sp, #0
 80064b0:	6078      	str	r0, [r7, #4]
 80064b2:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	f893 3020 	ldrb.w	r3, [r3, #32]
 80064c0:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80064c2:	7cfb      	ldrb	r3, [r7, #19]
 80064c4:	2b01      	cmp	r3, #1
 80064c6:	d003      	beq.n	80064d0 <HAL_CAN_ConfigFilter+0x26>
 80064c8:	7cfb      	ldrb	r3, [r7, #19]
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	f040 80aa 	bne.w	8006624 <HAL_CAN_ConfigFilter+0x17a>
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80064d6:	f043 0201 	orr.w	r2, r3, #1
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	695b      	ldr	r3, [r3, #20]
 80064e4:	f003 031f 	and.w	r3, r3, #31
 80064e8:	2201      	movs	r2, #1
 80064ea:	fa02 f303 	lsl.w	r3, r2, r3
 80064ee:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80064f0:	697b      	ldr	r3, [r7, #20]
 80064f2:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	43db      	mvns	r3, r3
 80064fa:	401a      	ands	r2, r3
 80064fc:	697b      	ldr	r3, [r7, #20]
 80064fe:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8006502:	683b      	ldr	r3, [r7, #0]
 8006504:	69db      	ldr	r3, [r3, #28]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d123      	bne.n	8006552 <HAL_CAN_ConfigFilter+0xa8>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	43db      	mvns	r3, r3
 8006514:	401a      	ands	r2, r3
 8006516:	697b      	ldr	r3, [r7, #20]
 8006518:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800651c:	683b      	ldr	r3, [r7, #0]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	685b      	ldr	r3, [r3, #4]
 8006526:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006528:	683a      	ldr	r2, [r7, #0]
 800652a:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800652c:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	3248      	adds	r2, #72	; 0x48
 8006532:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006536:	683b      	ldr	r3, [r7, #0]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006546:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006548:	6979      	ldr	r1, [r7, #20]
 800654a:	3348      	adds	r3, #72	; 0x48
 800654c:	00db      	lsls	r3, r3, #3
 800654e:	440b      	add	r3, r1
 8006550:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	69db      	ldr	r3, [r3, #28]
 8006556:	2b01      	cmp	r3, #1
 8006558:	d122      	bne.n	80065a0 <HAL_CAN_ConfigFilter+0xf6>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 800655a:	697b      	ldr	r3, [r7, #20]
 800655c:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	431a      	orrs	r2, r3
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800656a:	683b      	ldr	r3, [r7, #0]
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8006576:	683a      	ldr	r2, [r7, #0]
 8006578:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 800657a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	3248      	adds	r2, #72	; 0x48
 8006580:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006584:	683b      	ldr	r3, [r7, #0]
 8006586:	689b      	ldr	r3, [r3, #8]
 8006588:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	68db      	ldr	r3, [r3, #12]
 800658e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006590:	683b      	ldr	r3, [r7, #0]
 8006592:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8006594:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8006596:	6979      	ldr	r1, [r7, #20]
 8006598:	3348      	adds	r3, #72	; 0x48
 800659a:	00db      	lsls	r3, r3, #3
 800659c:	440b      	add	r3, r1
 800659e:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	699b      	ldr	r3, [r3, #24]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d109      	bne.n	80065bc <HAL_CAN_ConfigFilter+0x112>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	43db      	mvns	r3, r3
 80065b2:	401a      	ands	r2, r3
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80065ba:	e007      	b.n	80065cc <HAL_CAN_ConfigFilter+0x122>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80065bc:	697b      	ldr	r3, [r7, #20]
 80065be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	431a      	orrs	r2, r3
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80065cc:	683b      	ldr	r3, [r7, #0]
 80065ce:	691b      	ldr	r3, [r3, #16]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	d109      	bne.n	80065e8 <HAL_CAN_ConfigFilter+0x13e>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80065d4:	697b      	ldr	r3, [r7, #20]
 80065d6:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	43db      	mvns	r3, r3
 80065de:	401a      	ands	r2, r3
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80065e6:	e007      	b.n	80065f8 <HAL_CAN_ConfigFilter+0x14e>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	431a      	orrs	r2, r3
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	6a1b      	ldr	r3, [r3, #32]
 80065fc:	2b01      	cmp	r3, #1
 80065fe:	d107      	bne.n	8006610 <HAL_CAN_ConfigFilter+0x166>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	431a      	orrs	r2, r3
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8006610:	697b      	ldr	r3, [r7, #20]
 8006612:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8006616:	f023 0201 	bic.w	r2, r3, #1
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 8006620:	2300      	movs	r3, #0
 8006622:	e006      	b.n	8006632 <HAL_CAN_ConfigFilter+0x188>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006628:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006630:	2301      	movs	r3, #1
  }
}
 8006632:	4618      	mov	r0, r3
 8006634:	371c      	adds	r7, #28
 8006636:	46bd      	mov	sp, r7
 8006638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663c:	4770      	bx	lr

0800663e <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 800663e:	b580      	push	{r7, lr}
 8006640:	b084      	sub	sp, #16
 8006642:	af00      	add	r7, sp, #0
 8006644:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	f893 3020 	ldrb.w	r3, [r3, #32]
 800664c:	b2db      	uxtb	r3, r3
 800664e:	2b01      	cmp	r3, #1
 8006650:	d12e      	bne.n	80066b0 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	2202      	movs	r2, #2
 8006656:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f022 0201 	bic.w	r2, r2, #1
 8006668:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800666a:	f7fe ff3f 	bl	80054ec <HAL_GetTick>
 800666e:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006670:	e012      	b.n	8006698 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8006672:	f7fe ff3b 	bl	80054ec <HAL_GetTick>
 8006676:	4602      	mov	r2, r0
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	1ad3      	subs	r3, r2, r3
 800667c:	2b0a      	cmp	r3, #10
 800667e:	d90b      	bls.n	8006698 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006684:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	2205      	movs	r2, #5
 8006690:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8006694:	2301      	movs	r3, #1
 8006696:	e012      	b.n	80066be <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	685b      	ldr	r3, [r3, #4]
 800669e:	f003 0301 	and.w	r3, r3, #1
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e5      	bne.n	8006672 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	2200      	movs	r2, #0
 80066aa:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80066ac:	2300      	movs	r3, #0
 80066ae:	e006      	b.n	80066be <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066b4:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80066bc:	2301      	movs	r3, #1
  }
}
 80066be:	4618      	mov	r0, r3
 80066c0:	3710      	adds	r7, #16
 80066c2:	46bd      	mov	sp, r7
 80066c4:	bd80      	pop	{r7, pc}

080066c6 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80066c6:	b480      	push	{r7}
 80066c8:	b089      	sub	sp, #36	; 0x24
 80066ca:	af00      	add	r7, sp, #0
 80066cc:	60f8      	str	r0, [r7, #12]
 80066ce:	60b9      	str	r1, [r7, #8]
 80066d0:	607a      	str	r2, [r7, #4]
 80066d2:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80066da:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	689b      	ldr	r3, [r3, #8]
 80066e2:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80066e4:	7ffb      	ldrb	r3, [r7, #31]
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d003      	beq.n	80066f2 <HAL_CAN_AddTxMessage+0x2c>
 80066ea:	7ffb      	ldrb	r3, [r7, #31]
 80066ec:	2b02      	cmp	r3, #2
 80066ee:	f040 80ad 	bne.w	800684c <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10a      	bne.n	8006712 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80066fc:	69bb      	ldr	r3, [r7, #24]
 80066fe:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8006702:	2b00      	cmp	r3, #0
 8006704:	d105      	bne.n	8006712 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8006706:	69bb      	ldr	r3, [r7, #24]
 8006708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800670c:	2b00      	cmp	r3, #0
 800670e:	f000 8095 	beq.w	800683c <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	0e1b      	lsrs	r3, r3, #24
 8006716:	f003 0303 	and.w	r3, r3, #3
 800671a:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 800671c:	2201      	movs	r2, #1
 800671e:	697b      	ldr	r3, [r7, #20]
 8006720:	409a      	lsls	r2, r3
 8006722:	683b      	ldr	r3, [r7, #0]
 8006724:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8006726:	68bb      	ldr	r3, [r7, #8]
 8006728:	689b      	ldr	r3, [r3, #8]
 800672a:	2b00      	cmp	r3, #0
 800672c:	d10d      	bne.n	800674a <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 800672e:	68bb      	ldr	r3, [r7, #8]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8006734:	68bb      	ldr	r3, [r7, #8]
 8006736:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8006738:	68f9      	ldr	r1, [r7, #12]
 800673a:	6809      	ldr	r1, [r1, #0]
 800673c:	431a      	orrs	r2, r3
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	3318      	adds	r3, #24
 8006742:	011b      	lsls	r3, r3, #4
 8006744:	440b      	add	r3, r1
 8006746:	601a      	str	r2, [r3, #0]
 8006748:	e00f      	b.n	800676a <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800674a:	68bb      	ldr	r3, [r7, #8]
 800674c:	685b      	ldr	r3, [r3, #4]
 800674e:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8006750:	68bb      	ldr	r3, [r7, #8]
 8006752:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006754:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8006756:	68bb      	ldr	r3, [r7, #8]
 8006758:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800675a:	68f9      	ldr	r1, [r7, #12]
 800675c:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 800675e:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	3318      	adds	r3, #24
 8006764:	011b      	lsls	r3, r3, #4
 8006766:	440b      	add	r3, r1
 8006768:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	6819      	ldr	r1, [r3, #0]
 800676e:	68bb      	ldr	r3, [r7, #8]
 8006770:	691a      	ldr	r2, [r3, #16]
 8006772:	697b      	ldr	r3, [r7, #20]
 8006774:	3318      	adds	r3, #24
 8006776:	011b      	lsls	r3, r3, #4
 8006778:	440b      	add	r3, r1
 800677a:	3304      	adds	r3, #4
 800677c:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 800677e:	68bb      	ldr	r3, [r7, #8]
 8006780:	7d1b      	ldrb	r3, [r3, #20]
 8006782:	2b01      	cmp	r3, #1
 8006784:	d111      	bne.n	80067aa <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8006786:	68fb      	ldr	r3, [r7, #12]
 8006788:	681a      	ldr	r2, [r3, #0]
 800678a:	697b      	ldr	r3, [r7, #20]
 800678c:	3318      	adds	r3, #24
 800678e:	011b      	lsls	r3, r3, #4
 8006790:	4413      	add	r3, r2
 8006792:	3304      	adds	r3, #4
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	6811      	ldr	r1, [r2, #0]
 800679a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800679e:	697b      	ldr	r3, [r7, #20]
 80067a0:	3318      	adds	r3, #24
 80067a2:	011b      	lsls	r3, r3, #4
 80067a4:	440b      	add	r3, r1
 80067a6:	3304      	adds	r3, #4
 80067a8:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	3307      	adds	r3, #7
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	061a      	lsls	r2, r3, #24
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	3306      	adds	r3, #6
 80067b6:	781b      	ldrb	r3, [r3, #0]
 80067b8:	041b      	lsls	r3, r3, #16
 80067ba:	431a      	orrs	r2, r3
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	3305      	adds	r3, #5
 80067c0:	781b      	ldrb	r3, [r3, #0]
 80067c2:	021b      	lsls	r3, r3, #8
 80067c4:	4313      	orrs	r3, r2
 80067c6:	687a      	ldr	r2, [r7, #4]
 80067c8:	3204      	adds	r2, #4
 80067ca:	7812      	ldrb	r2, [r2, #0]
 80067cc:	4610      	mov	r0, r2
 80067ce:	68fa      	ldr	r2, [r7, #12]
 80067d0:	6811      	ldr	r1, [r2, #0]
 80067d2:	ea43 0200 	orr.w	r2, r3, r0
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	011b      	lsls	r3, r3, #4
 80067da:	440b      	add	r3, r1
 80067dc:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80067e0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	3303      	adds	r3, #3
 80067e6:	781b      	ldrb	r3, [r3, #0]
 80067e8:	061a      	lsls	r2, r3, #24
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	3302      	adds	r3, #2
 80067ee:	781b      	ldrb	r3, [r3, #0]
 80067f0:	041b      	lsls	r3, r3, #16
 80067f2:	431a      	orrs	r2, r3
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	3301      	adds	r3, #1
 80067f8:	781b      	ldrb	r3, [r3, #0]
 80067fa:	021b      	lsls	r3, r3, #8
 80067fc:	4313      	orrs	r3, r2
 80067fe:	687a      	ldr	r2, [r7, #4]
 8006800:	7812      	ldrb	r2, [r2, #0]
 8006802:	4610      	mov	r0, r2
 8006804:	68fa      	ldr	r2, [r7, #12]
 8006806:	6811      	ldr	r1, [r2, #0]
 8006808:	ea43 0200 	orr.w	r2, r3, r0
 800680c:	697b      	ldr	r3, [r7, #20]
 800680e:	011b      	lsls	r3, r3, #4
 8006810:	440b      	add	r3, r1
 8006812:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8006816:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	681a      	ldr	r2, [r3, #0]
 800681c:	697b      	ldr	r3, [r7, #20]
 800681e:	3318      	adds	r3, #24
 8006820:	011b      	lsls	r3, r3, #4
 8006822:	4413      	add	r3, r2
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	68fa      	ldr	r2, [r7, #12]
 8006828:	6811      	ldr	r1, [r2, #0]
 800682a:	f043 0201 	orr.w	r2, r3, #1
 800682e:	697b      	ldr	r3, [r7, #20]
 8006830:	3318      	adds	r3, #24
 8006832:	011b      	lsls	r3, r3, #4
 8006834:	440b      	add	r3, r1
 8006836:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8006838:	2300      	movs	r3, #0
 800683a:	e00e      	b.n	800685a <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800683c:	68fb      	ldr	r3, [r7, #12]
 800683e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006840:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006844:	68fb      	ldr	r3, [r7, #12]
 8006846:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	e006      	b.n	800685a <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006850:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006858:	2301      	movs	r3, #1
  }
}
 800685a:	4618      	mov	r0, r3
 800685c:	3724      	adds	r7, #36	; 0x24
 800685e:	46bd      	mov	sp, r7
 8006860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006864:	4770      	bx	lr

08006866 <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(const CAN_HandleTypeDef *hcan)
{
 8006866:	b480      	push	{r7}
 8006868:	b085      	sub	sp, #20
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 800686e:	2300      	movs	r3, #0
 8006870:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006878:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 800687a:	7afb      	ldrb	r3, [r7, #11]
 800687c:	2b01      	cmp	r3, #1
 800687e:	d002      	beq.n	8006886 <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8006880:	7afb      	ldrb	r3, [r7, #11]
 8006882:	2b02      	cmp	r3, #2
 8006884:	d11d      	bne.n	80068c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	689b      	ldr	r3, [r3, #8]
 800688c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8006894:	68fb      	ldr	r3, [r7, #12]
 8006896:	3301      	adds	r3, #1
 8006898:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	689b      	ldr	r3, [r3, #8]
 80068a0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d002      	beq.n	80068ae <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 80068a8:	68fb      	ldr	r3, [r7, #12]
 80068aa:	3301      	adds	r3, #1
 80068ac:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 80068ae:	687b      	ldr	r3, [r7, #4]
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	689b      	ldr	r3, [r3, #8]
 80068b4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068b8:	2b00      	cmp	r3, #0
 80068ba:	d002      	beq.n	80068c2 <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	3301      	adds	r3, #1
 80068c0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 80068c2:	68fb      	ldr	r3, [r7, #12]
}
 80068c4:	4618      	mov	r0, r3
 80068c6:	3714      	adds	r7, #20
 80068c8:	46bd      	mov	sp, r7
 80068ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ce:	4770      	bx	lr

080068d0 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 80068d0:	b480      	push	{r7}
 80068d2:	b087      	sub	sp, #28
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	60f8      	str	r0, [r7, #12]
 80068d8:	60b9      	str	r1, [r7, #8]
 80068da:	607a      	str	r2, [r7, #4]
 80068dc:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 80068de:	68fb      	ldr	r3, [r7, #12]
 80068e0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80068e4:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 80068e6:	7dfb      	ldrb	r3, [r7, #23]
 80068e8:	2b01      	cmp	r3, #1
 80068ea:	d003      	beq.n	80068f4 <HAL_CAN_GetRxMessage+0x24>
 80068ec:	7dfb      	ldrb	r3, [r7, #23]
 80068ee:	2b02      	cmp	r3, #2
 80068f0:	f040 80f3 	bne.w	8006ada <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 80068f4:	68bb      	ldr	r3, [r7, #8]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d10e      	bne.n	8006918 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	68db      	ldr	r3, [r3, #12]
 8006900:	f003 0303 	and.w	r3, r3, #3
 8006904:	2b00      	cmp	r3, #0
 8006906:	d116      	bne.n	8006936 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800690c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8006910:	68fb      	ldr	r3, [r7, #12]
 8006912:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006914:	2301      	movs	r3, #1
 8006916:	e0e7      	b.n	8006ae8 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	f003 0303 	and.w	r3, r3, #3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d107      	bne.n	8006936 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800692a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800692e:	68fb      	ldr	r3, [r7, #12]
 8006930:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8006932:	2301      	movs	r3, #1
 8006934:	e0d8      	b.n	8006ae8 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	681a      	ldr	r2, [r3, #0]
 800693a:	68bb      	ldr	r3, [r7, #8]
 800693c:	331b      	adds	r3, #27
 800693e:	011b      	lsls	r3, r3, #4
 8006940:	4413      	add	r3, r2
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f003 0204 	and.w	r2, r3, #4
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	689b      	ldr	r3, [r3, #8]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d10c      	bne.n	800696e <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	68bb      	ldr	r3, [r7, #8]
 800695a:	331b      	adds	r3, #27
 800695c:	011b      	lsls	r3, r3, #4
 800695e:	4413      	add	r3, r2
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	0d5b      	lsrs	r3, r3, #21
 8006964:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	e00b      	b.n	8006986 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 800696e:	68fb      	ldr	r3, [r7, #12]
 8006970:	681a      	ldr	r2, [r3, #0]
 8006972:	68bb      	ldr	r3, [r7, #8]
 8006974:	331b      	adds	r3, #27
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	4413      	add	r3, r2
 800697a:	681b      	ldr	r3, [r3, #0]
 800697c:	08db      	lsrs	r3, r3, #3
 800697e:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8006986:	68fb      	ldr	r3, [r7, #12]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	331b      	adds	r3, #27
 800698e:	011b      	lsls	r3, r3, #4
 8006990:	4413      	add	r3, r2
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	f003 0202 	and.w	r2, r3, #2
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800699c:	68fb      	ldr	r3, [r7, #12]
 800699e:	681a      	ldr	r2, [r3, #0]
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	331b      	adds	r3, #27
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	4413      	add	r3, r2
 80069a8:	3304      	adds	r3, #4
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	f003 020f 	and.w	r2, r3, #15
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681a      	ldr	r2, [r3, #0]
 80069b8:	68bb      	ldr	r3, [r7, #8]
 80069ba:	331b      	adds	r3, #27
 80069bc:	011b      	lsls	r3, r3, #4
 80069be:	4413      	add	r3, r2
 80069c0:	3304      	adds	r3, #4
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	0a1b      	lsrs	r3, r3, #8
 80069c6:	b2da      	uxtb	r2, r3
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 80069cc:	68fb      	ldr	r3, [r7, #12]
 80069ce:	681a      	ldr	r2, [r3, #0]
 80069d0:	68bb      	ldr	r3, [r7, #8]
 80069d2:	331b      	adds	r3, #27
 80069d4:	011b      	lsls	r3, r3, #4
 80069d6:	4413      	add	r3, r2
 80069d8:	3304      	adds	r3, #4
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	0c1b      	lsrs	r3, r3, #16
 80069de:	b29a      	uxth	r2, r3
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	681a      	ldr	r2, [r3, #0]
 80069e8:	68bb      	ldr	r3, [r7, #8]
 80069ea:	011b      	lsls	r3, r3, #4
 80069ec:	4413      	add	r3, r2
 80069ee:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	683b      	ldr	r3, [r7, #0]
 80069f8:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681a      	ldr	r2, [r3, #0]
 80069fe:	68bb      	ldr	r3, [r7, #8]
 8006a00:	011b      	lsls	r3, r3, #4
 8006a02:	4413      	add	r3, r2
 8006a04:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	0a1a      	lsrs	r2, r3, #8
 8006a0c:	683b      	ldr	r3, [r7, #0]
 8006a0e:	3301      	adds	r3, #1
 8006a10:	b2d2      	uxtb	r2, r2
 8006a12:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681a      	ldr	r2, [r3, #0]
 8006a18:	68bb      	ldr	r3, [r7, #8]
 8006a1a:	011b      	lsls	r3, r3, #4
 8006a1c:	4413      	add	r3, r2
 8006a1e:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	0c1a      	lsrs	r2, r3, #16
 8006a26:	683b      	ldr	r3, [r7, #0]
 8006a28:	3302      	adds	r3, #2
 8006a2a:	b2d2      	uxtb	r2, r2
 8006a2c:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	681a      	ldr	r2, [r3, #0]
 8006a32:	68bb      	ldr	r3, [r7, #8]
 8006a34:	011b      	lsls	r3, r3, #4
 8006a36:	4413      	add	r3, r2
 8006a38:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	0e1a      	lsrs	r2, r3, #24
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	3303      	adds	r3, #3
 8006a44:	b2d2      	uxtb	r2, r2
 8006a46:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	011b      	lsls	r3, r3, #4
 8006a50:	4413      	add	r3, r2
 8006a52:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006a56:	681a      	ldr	r2, [r3, #0]
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	3304      	adds	r3, #4
 8006a5c:	b2d2      	uxtb	r2, r2
 8006a5e:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681a      	ldr	r2, [r3, #0]
 8006a64:	68bb      	ldr	r3, [r7, #8]
 8006a66:	011b      	lsls	r3, r3, #4
 8006a68:	4413      	add	r3, r2
 8006a6a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	0a1a      	lsrs	r2, r3, #8
 8006a72:	683b      	ldr	r3, [r7, #0]
 8006a74:	3305      	adds	r3, #5
 8006a76:	b2d2      	uxtb	r2, r2
 8006a78:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8006a7a:	68fb      	ldr	r3, [r7, #12]
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68bb      	ldr	r3, [r7, #8]
 8006a80:	011b      	lsls	r3, r3, #4
 8006a82:	4413      	add	r3, r2
 8006a84:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	0c1a      	lsrs	r2, r3, #16
 8006a8c:	683b      	ldr	r3, [r7, #0]
 8006a8e:	3306      	adds	r3, #6
 8006a90:	b2d2      	uxtb	r2, r2
 8006a92:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	681a      	ldr	r2, [r3, #0]
 8006a98:	68bb      	ldr	r3, [r7, #8]
 8006a9a:	011b      	lsls	r3, r3, #4
 8006a9c:	4413      	add	r3, r2
 8006a9e:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	0e1a      	lsrs	r2, r3, #24
 8006aa6:	683b      	ldr	r3, [r7, #0]
 8006aa8:	3307      	adds	r3, #7
 8006aaa:	b2d2      	uxtb	r2, r2
 8006aac:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8006aae:	68bb      	ldr	r3, [r7, #8]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d108      	bne.n	8006ac6 <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8006ab4:	68fb      	ldr	r3, [r7, #12]
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	68da      	ldr	r2, [r3, #12]
 8006aba:	68fb      	ldr	r3, [r7, #12]
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	f042 0220 	orr.w	r2, r2, #32
 8006ac2:	60da      	str	r2, [r3, #12]
 8006ac4:	e007      	b.n	8006ad6 <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8006ac6:	68fb      	ldr	r3, [r7, #12]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	691a      	ldr	r2, [r3, #16]
 8006acc:	68fb      	ldr	r3, [r7, #12]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	f042 0220 	orr.w	r2, r2, #32
 8006ad4:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8006ad6:	2300      	movs	r3, #0
 8006ad8:	e006      	b.n	8006ae8 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ade:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006ae6:	2301      	movs	r3, #1
  }
}
 8006ae8:	4618      	mov	r0, r3
 8006aea:	371c      	adds	r7, #28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr

08006af4 <HAL_CAN_GetRxFifoFillLevel>:
  * @param  RxFifo Rx FIFO.
  *         This parameter can be a value of @arg CAN_receive_FIFO_number.
  * @retval Number of messages available in Rx FIFO.
  */
uint32_t HAL_CAN_GetRxFifoFillLevel(const CAN_HandleTypeDef *hcan, uint32_t RxFifo)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b085      	sub	sp, #20
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	6078      	str	r0, [r7, #4]
 8006afc:	6039      	str	r1, [r7, #0]
  uint32_t filllevel = 0U;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b08:	72fb      	strb	r3, [r7, #11]

  /* Check function parameters */
  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8006b0a:	7afb      	ldrb	r3, [r7, #11]
 8006b0c:	2b01      	cmp	r3, #1
 8006b0e:	d002      	beq.n	8006b16 <HAL_CAN_GetRxFifoFillLevel+0x22>
 8006b10:	7afb      	ldrb	r3, [r7, #11]
 8006b12:	2b02      	cmp	r3, #2
 8006b14:	d10f      	bne.n	8006b36 <HAL_CAN_GetRxFifoFillLevel+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    if (RxFifo == CAN_RX_FIFO0)
 8006b16:	683b      	ldr	r3, [r7, #0]
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d106      	bne.n	8006b2a <HAL_CAN_GetRxFifoFillLevel+0x36>
    {
      filllevel = hcan->Instance->RF0R & CAN_RF0R_FMP0;
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	68db      	ldr	r3, [r3, #12]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	60fb      	str	r3, [r7, #12]
 8006b28:	e005      	b.n	8006b36 <HAL_CAN_GetRxFifoFillLevel+0x42>
    }
    else /* RxFifo == CAN_RX_FIFO1 */
    {
      filllevel = hcan->Instance->RF1R & CAN_RF1R_FMP1;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	691b      	ldr	r3, [r3, #16]
 8006b30:	f003 0303 	and.w	r3, r3, #3
 8006b34:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Rx FIFO fill level */
  return filllevel;
 8006b36:	68fb      	ldr	r3, [r7, #12]
}
 8006b38:	4618      	mov	r0, r3
 8006b3a:	3714      	adds	r7, #20
 8006b3c:	46bd      	mov	sp, r7
 8006b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b42:	4770      	bx	lr

08006b44 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8006b44:	b480      	push	{r7}
 8006b46:	b085      	sub	sp, #20
 8006b48:	af00      	add	r7, sp, #0
 8006b4a:	6078      	str	r0, [r7, #4]
 8006b4c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	f893 3020 	ldrb.w	r3, [r3, #32]
 8006b54:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8006b56:	7bfb      	ldrb	r3, [r7, #15]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d002      	beq.n	8006b62 <HAL_CAN_ActivateNotification+0x1e>
 8006b5c:	7bfb      	ldrb	r3, [r7, #15]
 8006b5e:	2b02      	cmp	r3, #2
 8006b60:	d109      	bne.n	8006b76 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	6959      	ldr	r1, [r3, #20]
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	430a      	orrs	r2, r1
 8006b70:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8006b72:	2300      	movs	r3, #0
 8006b74:	e006      	b.n	8006b84 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7a:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8006b82:	2301      	movs	r3, #1
  }
}
 8006b84:	4618      	mov	r0, r3
 8006b86:	3714      	adds	r7, #20
 8006b88:	46bd      	mov	sp, r7
 8006b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8e:	4770      	bx	lr

08006b90 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8006b90:	b580      	push	{r7, lr}
 8006b92:	b08a      	sub	sp, #40	; 0x28
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8006b98:	2300      	movs	r3, #0
 8006b9a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	695b      	ldr	r3, [r3, #20]
 8006ba2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	68db      	ldr	r3, [r3, #12]
 8006bba:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	691b      	ldr	r3, [r3, #16]
 8006bc2:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	699b      	ldr	r3, [r3, #24]
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8006bcc:	6a3b      	ldr	r3, [r7, #32]
 8006bce:	f003 0301 	and.w	r3, r3, #1
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d07c      	beq.n	8006cd0 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8006bd6:	69bb      	ldr	r3, [r7, #24]
 8006bd8:	f003 0301 	and.w	r3, r3, #1
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d023      	beq.n	8006c28 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	2201      	movs	r2, #1
 8006be6:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	f003 0302 	and.w	r3, r3, #2
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d003      	beq.n	8006bfa <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fd fe52 	bl	800489c <HAL_CAN_TxMailbox0CompleteCallback>
 8006bf8:	e016      	b.n	8006c28 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8006bfa:	69bb      	ldr	r3, [r7, #24]
 8006bfc:	f003 0304 	and.w	r3, r3, #4
 8006c00:	2b00      	cmp	r3, #0
 8006c02:	d004      	beq.n	8006c0e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8006c04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c06:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c0a:	627b      	str	r3, [r7, #36]	; 0x24
 8006c0c:	e00c      	b.n	8006c28 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8006c0e:	69bb      	ldr	r3, [r7, #24]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d004      	beq.n	8006c22 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8006c18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006c1e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c20:	e002      	b.n	8006c28 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8006c22:	6878      	ldr	r0, [r7, #4]
 8006c24:	f000 f96b 	bl	8006efe <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8006c28:	69bb      	ldr	r3, [r7, #24]
 8006c2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d024      	beq.n	8006c7c <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006c3a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8006c3c:	69bb      	ldr	r3, [r7, #24]
 8006c3e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c42:	2b00      	cmp	r3, #0
 8006c44:	d003      	beq.n	8006c4e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8006c46:	6878      	ldr	r0, [r7, #4]
 8006c48:	f7fd fe38 	bl	80048bc <HAL_CAN_TxMailbox1CompleteCallback>
 8006c4c:	e016      	b.n	8006c7c <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8006c4e:	69bb      	ldr	r3, [r7, #24]
 8006c50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d004      	beq.n	8006c62 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8006c58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8006c5e:	627b      	str	r3, [r7, #36]	; 0x24
 8006c60:	e00c      	b.n	8006c7c <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d004      	beq.n	8006c76 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8006c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006c72:	627b      	str	r3, [r7, #36]	; 0x24
 8006c74:	e002      	b.n	8006c7c <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 f94b 	bl	8006f12 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8006c7c:	69bb      	ldr	r3, [r7, #24]
 8006c7e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d024      	beq.n	8006cd0 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8006c8e:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8006c90:	69bb      	ldr	r3, [r7, #24]
 8006c92:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d003      	beq.n	8006ca2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f7fd fe1e 	bl	80048dc <HAL_CAN_TxMailbox2CompleteCallback>
 8006ca0:	e016      	b.n	8006cd0 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8006ca2:	69bb      	ldr	r3, [r7, #24]
 8006ca4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d004      	beq.n	8006cb6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
 8006cb4:	e00c      	b.n	8006cd0 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8006cb6:	69bb      	ldr	r3, [r7, #24]
 8006cb8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	d004      	beq.n	8006cca <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006cc6:	627b      	str	r3, [r7, #36]	; 0x24
 8006cc8:	e002      	b.n	8006cd0 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 f92b 	bl	8006f26 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8006cd0:	6a3b      	ldr	r3, [r7, #32]
 8006cd2:	f003 0308 	and.w	r3, r3, #8
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00c      	beq.n	8006cf4 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8006cda:	697b      	ldr	r3, [r7, #20]
 8006cdc:	f003 0310 	and.w	r3, r3, #16
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d007      	beq.n	8006cf4 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006cea:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	2210      	movs	r2, #16
 8006cf2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8006cf4:	6a3b      	ldr	r3, [r7, #32]
 8006cf6:	f003 0304 	and.w	r3, r3, #4
 8006cfa:	2b00      	cmp	r3, #0
 8006cfc:	d00b      	beq.n	8006d16 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8006cfe:	697b      	ldr	r3, [r7, #20]
 8006d00:	f003 0308 	and.w	r3, r3, #8
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d006      	beq.n	8006d16 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2208      	movs	r2, #8
 8006d0e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f000 f912 	bl	8006f3a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8006d16:	6a3b      	ldr	r3, [r7, #32]
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d009      	beq.n	8006d34 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	f003 0303 	and.w	r3, r3, #3
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d002      	beq.n	8006d34 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8006d2e:	6878      	ldr	r0, [r7, #4]
 8006d30:	f7fd fd98 	bl	8004864 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8006d34:	6a3b      	ldr	r3, [r7, #32]
 8006d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	d00c      	beq.n	8006d58 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	f003 0310 	and.w	r3, r3, #16
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d007      	beq.n	8006d58 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8006d48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d4a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006d4e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	2210      	movs	r2, #16
 8006d56:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8006d58:	6a3b      	ldr	r3, [r7, #32]
 8006d5a:	f003 0320 	and.w	r3, r3, #32
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d00b      	beq.n	8006d7a <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d006      	beq.n	8006d7a <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2208      	movs	r2, #8
 8006d72:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8006d74:	6878      	ldr	r0, [r7, #4]
 8006d76:	f000 f8f4 	bl	8006f62 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8006d7a:	6a3b      	ldr	r3, [r7, #32]
 8006d7c:	f003 0310 	and.w	r3, r3, #16
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d009      	beq.n	8006d98 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0303 	and.w	r3, r3, #3
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d002      	beq.n	8006d98 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f000 f8db 	bl	8006f4e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8006d98:	6a3b      	ldr	r3, [r7, #32]
 8006d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d00b      	beq.n	8006dba <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8006da2:	69fb      	ldr	r3, [r7, #28]
 8006da4:	f003 0310 	and.w	r3, r3, #16
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d006      	beq.n	8006dba <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	2210      	movs	r2, #16
 8006db2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 f8de 	bl	8006f76 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8006dba:	6a3b      	ldr	r3, [r7, #32]
 8006dbc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d00b      	beq.n	8006ddc <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8006dc4:	69fb      	ldr	r3, [r7, #28]
 8006dc6:	f003 0308 	and.w	r3, r3, #8
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d006      	beq.n	8006ddc <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2208      	movs	r2, #8
 8006dd4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 f8d7 	bl	8006f8a <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8006ddc:	6a3b      	ldr	r3, [r7, #32]
 8006dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d07b      	beq.n	8006ede <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8006de6:	69fb      	ldr	r3, [r7, #28]
 8006de8:	f003 0304 	and.w	r3, r3, #4
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d072      	beq.n	8006ed6 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006df0:	6a3b      	ldr	r3, [r7, #32]
 8006df2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006df6:	2b00      	cmp	r3, #0
 8006df8:	d008      	beq.n	8006e0c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d003      	beq.n	8006e0c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8006e04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e06:	f043 0301 	orr.w	r3, r3, #1
 8006e0a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006e0c:	6a3b      	ldr	r3, [r7, #32]
 8006e0e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006e12:	2b00      	cmp	r3, #0
 8006e14:	d008      	beq.n	8006e28 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d003      	beq.n	8006e28 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8006e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e22:	f043 0302 	orr.w	r3, r3, #2
 8006e26:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006e28:	6a3b      	ldr	r3, [r7, #32]
 8006e2a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d008      	beq.n	8006e44 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8006e32:	68fb      	ldr	r3, [r7, #12]
 8006e34:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d003      	beq.n	8006e44 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8006e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e3e:	f043 0304 	orr.w	r3, r3, #4
 8006e42:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006e44:	6a3b      	ldr	r3, [r7, #32]
 8006e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	d043      	beq.n	8006ed6 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	d03e      	beq.n	8006ed6 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8006e5e:	2b60      	cmp	r3, #96	; 0x60
 8006e60:	d02b      	beq.n	8006eba <HAL_CAN_IRQHandler+0x32a>
 8006e62:	2b60      	cmp	r3, #96	; 0x60
 8006e64:	d82e      	bhi.n	8006ec4 <HAL_CAN_IRQHandler+0x334>
 8006e66:	2b50      	cmp	r3, #80	; 0x50
 8006e68:	d022      	beq.n	8006eb0 <HAL_CAN_IRQHandler+0x320>
 8006e6a:	2b50      	cmp	r3, #80	; 0x50
 8006e6c:	d82a      	bhi.n	8006ec4 <HAL_CAN_IRQHandler+0x334>
 8006e6e:	2b40      	cmp	r3, #64	; 0x40
 8006e70:	d019      	beq.n	8006ea6 <HAL_CAN_IRQHandler+0x316>
 8006e72:	2b40      	cmp	r3, #64	; 0x40
 8006e74:	d826      	bhi.n	8006ec4 <HAL_CAN_IRQHandler+0x334>
 8006e76:	2b30      	cmp	r3, #48	; 0x30
 8006e78:	d010      	beq.n	8006e9c <HAL_CAN_IRQHandler+0x30c>
 8006e7a:	2b30      	cmp	r3, #48	; 0x30
 8006e7c:	d822      	bhi.n	8006ec4 <HAL_CAN_IRQHandler+0x334>
 8006e7e:	2b10      	cmp	r3, #16
 8006e80:	d002      	beq.n	8006e88 <HAL_CAN_IRQHandler+0x2f8>
 8006e82:	2b20      	cmp	r3, #32
 8006e84:	d005      	beq.n	8006e92 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8006e86:	e01d      	b.n	8006ec4 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8006e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e8a:	f043 0308 	orr.w	r3, r3, #8
 8006e8e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e90:	e019      	b.n	8006ec6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8006e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e94:	f043 0310 	orr.w	r3, r3, #16
 8006e98:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006e9a:	e014      	b.n	8006ec6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8006e9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e9e:	f043 0320 	orr.w	r3, r3, #32
 8006ea2:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006ea4:	e00f      	b.n	8006ec6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8006ea6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ea8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eac:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006eae:	e00a      	b.n	8006ec6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8006eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006eb6:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006eb8:	e005      	b.n	8006ec6 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8006eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ebc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006ec0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8006ec2:	e000      	b.n	8006ec6 <HAL_CAN_IRQHandler+0x336>
            break;
 8006ec4:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	699a      	ldr	r2, [r3, #24]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8006ed4:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	2204      	movs	r2, #4
 8006edc:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8006ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d008      	beq.n	8006ef6 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8006ee4:	687b      	ldr	r3, [r7, #4]
 8006ee6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ee8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eea:	431a      	orrs	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f854 	bl	8006f9e <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8006ef6:	bf00      	nop
 8006ef8:	3728      	adds	r7, #40	; 0x28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	bd80      	pop	{r7, pc}

08006efe <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006efe:	b480      	push	{r7}
 8006f00:	b083      	sub	sp, #12
 8006f02:	af00      	add	r7, sp, #0
 8006f04:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8006f06:	bf00      	nop
 8006f08:	370c      	adds	r7, #12
 8006f0a:	46bd      	mov	sp, r7
 8006f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f10:	4770      	bx	lr

08006f12 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006f12:	b480      	push	{r7}
 8006f14:	b083      	sub	sp, #12
 8006f16:	af00      	add	r7, sp, #0
 8006f18:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8006f1a:	bf00      	nop
 8006f1c:	370c      	adds	r7, #12
 8006f1e:	46bd      	mov	sp, r7
 8006f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f24:	4770      	bx	lr

08006f26 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8006f26:	b480      	push	{r7}
 8006f28:	b083      	sub	sp, #12
 8006f2a:	af00      	add	r7, sp, #0
 8006f2c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8006f2e:	bf00      	nop
 8006f30:	370c      	adds	r7, #12
 8006f32:	46bd      	mov	sp, r7
 8006f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f38:	4770      	bx	lr

08006f3a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8006f3a:	b480      	push	{r7}
 8006f3c:	b083      	sub	sp, #12
 8006f3e:	af00      	add	r7, sp, #0
 8006f40:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8006f42:	bf00      	nop
 8006f44:	370c      	adds	r7, #12
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr

08006f4e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8006f4e:	b480      	push	{r7}
 8006f50:	b083      	sub	sp, #12
 8006f52:	af00      	add	r7, sp, #0
 8006f54:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8006f56:	bf00      	nop
 8006f58:	370c      	adds	r7, #12
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f60:	4770      	bx	lr

08006f62 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8006f62:	b480      	push	{r7}
 8006f64:	b083      	sub	sp, #12
 8006f66:	af00      	add	r7, sp, #0
 8006f68:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8006f6a:	bf00      	nop
 8006f6c:	370c      	adds	r7, #12
 8006f6e:	46bd      	mov	sp, r7
 8006f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f74:	4770      	bx	lr

08006f76 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8006f76:	b480      	push	{r7}
 8006f78:	b083      	sub	sp, #12
 8006f7a:	af00      	add	r7, sp, #0
 8006f7c:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8006f7e:	bf00      	nop
 8006f80:	370c      	adds	r7, #12
 8006f82:	46bd      	mov	sp, r7
 8006f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f88:	4770      	bx	lr

08006f8a <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8006f8a:	b480      	push	{r7}
 8006f8c:	b083      	sub	sp, #12
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8006f92:	bf00      	nop
 8006f94:	370c      	adds	r7, #12
 8006f96:	46bd      	mov	sp, r7
 8006f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9c:	4770      	bx	lr

08006f9e <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8006f9e:	b480      	push	{r7}
 8006fa0:	b083      	sub	sp, #12
 8006fa2:	af00      	add	r7, sp, #0
 8006fa4:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr
	...

08006fb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b085      	sub	sp, #20
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	f003 0307 	and.w	r3, r3, #7
 8006fc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006fc4:	4b0c      	ldr	r3, [pc, #48]	; (8006ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006fca:	68ba      	ldr	r2, [r7, #8]
 8006fcc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006fd0:	4013      	ands	r3, r2
 8006fd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006fd8:	68bb      	ldr	r3, [r7, #8]
 8006fda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006fdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006fe0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006fe4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006fe6:	4a04      	ldr	r2, [pc, #16]	; (8006ff8 <__NVIC_SetPriorityGrouping+0x44>)
 8006fe8:	68bb      	ldr	r3, [r7, #8]
 8006fea:	60d3      	str	r3, [r2, #12]
}
 8006fec:	bf00      	nop
 8006fee:	3714      	adds	r7, #20
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	e000ed00 	.word	0xe000ed00

08006ffc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007000:	4b04      	ldr	r3, [pc, #16]	; (8007014 <__NVIC_GetPriorityGrouping+0x18>)
 8007002:	68db      	ldr	r3, [r3, #12]
 8007004:	0a1b      	lsrs	r3, r3, #8
 8007006:	f003 0307 	and.w	r3, r3, #7
}
 800700a:	4618      	mov	r0, r3
 800700c:	46bd      	mov	sp, r7
 800700e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007012:	4770      	bx	lr
 8007014:	e000ed00 	.word	0xe000ed00

08007018 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007018:	b480      	push	{r7}
 800701a:	b083      	sub	sp, #12
 800701c:	af00      	add	r7, sp, #0
 800701e:	4603      	mov	r3, r0
 8007020:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007026:	2b00      	cmp	r3, #0
 8007028:	db0b      	blt.n	8007042 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800702a:	79fb      	ldrb	r3, [r7, #7]
 800702c:	f003 021f 	and.w	r2, r3, #31
 8007030:	4907      	ldr	r1, [pc, #28]	; (8007050 <__NVIC_EnableIRQ+0x38>)
 8007032:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007036:	095b      	lsrs	r3, r3, #5
 8007038:	2001      	movs	r0, #1
 800703a:	fa00 f202 	lsl.w	r2, r0, r2
 800703e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8007042:	bf00      	nop
 8007044:	370c      	adds	r7, #12
 8007046:	46bd      	mov	sp, r7
 8007048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800704c:	4770      	bx	lr
 800704e:	bf00      	nop
 8007050:	e000e100 	.word	0xe000e100

08007054 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007054:	b480      	push	{r7}
 8007056:	b083      	sub	sp, #12
 8007058:	af00      	add	r7, sp, #0
 800705a:	4603      	mov	r3, r0
 800705c:	6039      	str	r1, [r7, #0]
 800705e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007060:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007064:	2b00      	cmp	r3, #0
 8007066:	db0a      	blt.n	800707e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007068:	683b      	ldr	r3, [r7, #0]
 800706a:	b2da      	uxtb	r2, r3
 800706c:	490c      	ldr	r1, [pc, #48]	; (80070a0 <__NVIC_SetPriority+0x4c>)
 800706e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007072:	0112      	lsls	r2, r2, #4
 8007074:	b2d2      	uxtb	r2, r2
 8007076:	440b      	add	r3, r1
 8007078:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800707c:	e00a      	b.n	8007094 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800707e:	683b      	ldr	r3, [r7, #0]
 8007080:	b2da      	uxtb	r2, r3
 8007082:	4908      	ldr	r1, [pc, #32]	; (80070a4 <__NVIC_SetPriority+0x50>)
 8007084:	79fb      	ldrb	r3, [r7, #7]
 8007086:	f003 030f 	and.w	r3, r3, #15
 800708a:	3b04      	subs	r3, #4
 800708c:	0112      	lsls	r2, r2, #4
 800708e:	b2d2      	uxtb	r2, r2
 8007090:	440b      	add	r3, r1
 8007092:	761a      	strb	r2, [r3, #24]
}
 8007094:	bf00      	nop
 8007096:	370c      	adds	r7, #12
 8007098:	46bd      	mov	sp, r7
 800709a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800709e:	4770      	bx	lr
 80070a0:	e000e100 	.word	0xe000e100
 80070a4:	e000ed00 	.word	0xe000ed00

080070a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b089      	sub	sp, #36	; 0x24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80070b4:	68fb      	ldr	r3, [r7, #12]
 80070b6:	f003 0307 	and.w	r3, r3, #7
 80070ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80070bc:	69fb      	ldr	r3, [r7, #28]
 80070be:	f1c3 0307 	rsb	r3, r3, #7
 80070c2:	2b04      	cmp	r3, #4
 80070c4:	bf28      	it	cs
 80070c6:	2304      	movcs	r3, #4
 80070c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80070ca:	69fb      	ldr	r3, [r7, #28]
 80070cc:	3304      	adds	r3, #4
 80070ce:	2b06      	cmp	r3, #6
 80070d0:	d902      	bls.n	80070d8 <NVIC_EncodePriority+0x30>
 80070d2:	69fb      	ldr	r3, [r7, #28]
 80070d4:	3b03      	subs	r3, #3
 80070d6:	e000      	b.n	80070da <NVIC_EncodePriority+0x32>
 80070d8:	2300      	movs	r3, #0
 80070da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80070dc:	f04f 32ff 	mov.w	r2, #4294967295
 80070e0:	69bb      	ldr	r3, [r7, #24]
 80070e2:	fa02 f303 	lsl.w	r3, r2, r3
 80070e6:	43da      	mvns	r2, r3
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	401a      	ands	r2, r3
 80070ec:	697b      	ldr	r3, [r7, #20]
 80070ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80070f0:	f04f 31ff 	mov.w	r1, #4294967295
 80070f4:	697b      	ldr	r3, [r7, #20]
 80070f6:	fa01 f303 	lsl.w	r3, r1, r3
 80070fa:	43d9      	mvns	r1, r3
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007100:	4313      	orrs	r3, r2
         );
}
 8007102:	4618      	mov	r0, r3
 8007104:	3724      	adds	r7, #36	; 0x24
 8007106:	46bd      	mov	sp, r7
 8007108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710c:	4770      	bx	lr

0800710e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800710e:	b580      	push	{r7, lr}
 8007110:	b082      	sub	sp, #8
 8007112:	af00      	add	r7, sp, #0
 8007114:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f7ff ff4c 	bl	8006fb4 <__NVIC_SetPriorityGrouping>
}
 800711c:	bf00      	nop
 800711e:	3708      	adds	r7, #8
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}

08007124 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007124:	b580      	push	{r7, lr}
 8007126:	b086      	sub	sp, #24
 8007128:	af00      	add	r7, sp, #0
 800712a:	4603      	mov	r3, r0
 800712c:	60b9      	str	r1, [r7, #8]
 800712e:	607a      	str	r2, [r7, #4]
 8007130:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007132:	2300      	movs	r3, #0
 8007134:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007136:	f7ff ff61 	bl	8006ffc <__NVIC_GetPriorityGrouping>
 800713a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800713c:	687a      	ldr	r2, [r7, #4]
 800713e:	68b9      	ldr	r1, [r7, #8]
 8007140:	6978      	ldr	r0, [r7, #20]
 8007142:	f7ff ffb1 	bl	80070a8 <NVIC_EncodePriority>
 8007146:	4602      	mov	r2, r0
 8007148:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800714c:	4611      	mov	r1, r2
 800714e:	4618      	mov	r0, r3
 8007150:	f7ff ff80 	bl	8007054 <__NVIC_SetPriority>
}
 8007154:	bf00      	nop
 8007156:	3718      	adds	r7, #24
 8007158:	46bd      	mov	sp, r7
 800715a:	bd80      	pop	{r7, pc}

0800715c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	b082      	sub	sp, #8
 8007160:	af00      	add	r7, sp, #0
 8007162:	4603      	mov	r3, r0
 8007164:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007166:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800716a:	4618      	mov	r0, r3
 800716c:	f7ff ff54 	bl	8007018 <__NVIC_EnableIRQ>
}
 8007170:	bf00      	nop
 8007172:	3708      	adds	r7, #8
 8007174:	46bd      	mov	sp, r7
 8007176:	bd80      	pop	{r7, pc}

08007178 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d101      	bne.n	800718a <HAL_DAC_Init+0x12>
  {
     return HAL_ERROR;
 8007186:	2301      	movs	r3, #1
 8007188:	e014      	b.n	80071b4 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	791b      	ldrb	r3, [r3, #4]
 800718e:	b2db      	uxtb	r3, r3
 8007190:	2b00      	cmp	r3, #0
 8007192:	d105      	bne.n	80071a0 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	2200      	movs	r2, #0
 8007198:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f7fd feca 	bl	8004f34 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	2202      	movs	r2, #2
 80071a4:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	2200      	movs	r2, #0
 80071aa:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	2201      	movs	r2, #1
 80071b0:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 80071b2:	2300      	movs	r3, #0
}
 80071b4:	4618      	mov	r0, r3
 80071b6:	3708      	adds	r7, #8
 80071b8:	46bd      	mov	sp, r7
 80071ba:	bd80      	pop	{r7, pc}

080071bc <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b086      	sub	sp, #24
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	60f8      	str	r0, [r7, #12]
 80071c4:	60b9      	str	r1, [r7, #8]
 80071c6:	607a      	str	r2, [r7, #4]
 80071c8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tmpreg = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	795b      	ldrb	r3, [r3, #5]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_DAC_Start_DMA+0x1e>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e0ab      	b.n	8007332 <HAL_DAC_Start_DMA+0x176>
 80071da:	68fb      	ldr	r3, [r7, #12]
 80071dc:	2201      	movs	r2, #1
 80071de:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 80071e0:	68fb      	ldr	r3, [r7, #12]
 80071e2:	2202      	movs	r2, #2
 80071e4:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 80071e6:	68bb      	ldr	r3, [r7, #8]
 80071e8:	2b00      	cmp	r3, #0
 80071ea:	d12f      	bne.n	800724c <HAL_DAC_Start_DMA+0x90>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 80071ec:	68fb      	ldr	r3, [r7, #12]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	4a52      	ldr	r2, [pc, #328]	; (800733c <HAL_DAC_Start_DMA+0x180>)
 80071f2:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 80071f4:	68fb      	ldr	r3, [r7, #12]
 80071f6:	689b      	ldr	r3, [r3, #8]
 80071f8:	4a51      	ldr	r2, [pc, #324]	; (8007340 <HAL_DAC_Start_DMA+0x184>)
 80071fa:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	689b      	ldr	r3, [r3, #8]
 8007200:	4a50      	ldr	r2, [pc, #320]	; (8007344 <HAL_DAC_Start_DMA+0x188>)
 8007202:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8007212:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8007214:	6a3b      	ldr	r3, [r7, #32]
 8007216:	2b08      	cmp	r3, #8
 8007218:	d013      	beq.n	8007242 <HAL_DAC_Start_DMA+0x86>
 800721a:	6a3b      	ldr	r3, [r7, #32]
 800721c:	2b08      	cmp	r3, #8
 800721e:	d845      	bhi.n	80072ac <HAL_DAC_Start_DMA+0xf0>
 8007220:	6a3b      	ldr	r3, [r7, #32]
 8007222:	2b00      	cmp	r3, #0
 8007224:	d003      	beq.n	800722e <HAL_DAC_Start_DMA+0x72>
 8007226:	6a3b      	ldr	r3, [r7, #32]
 8007228:	2b04      	cmp	r3, #4
 800722a:	d005      	beq.n	8007238 <HAL_DAC_Start_DMA+0x7c>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 800722c:	e03e      	b.n	80072ac <HAL_DAC_Start_DMA+0xf0>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 800722e:	68fb      	ldr	r3, [r7, #12]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	3308      	adds	r3, #8
 8007234:	613b      	str	r3, [r7, #16]
        break;
 8007236:	e03c      	b.n	80072b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8007238:	68fb      	ldr	r3, [r7, #12]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	330c      	adds	r3, #12
 800723e:	613b      	str	r3, [r7, #16]
        break;
 8007240:	e037      	b.n	80072b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8007242:	68fb      	ldr	r3, [r7, #12]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3310      	adds	r3, #16
 8007248:	613b      	str	r3, [r7, #16]
        break;
 800724a:	e032      	b.n	80072b2 <HAL_DAC_Start_DMA+0xf6>
    }
  }
  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	4a3d      	ldr	r2, [pc, #244]	; (8007348 <HAL_DAC_Start_DMA+0x18c>)
 8007252:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	68db      	ldr	r3, [r3, #12]
 8007258:	4a3c      	ldr	r2, [pc, #240]	; (800734c <HAL_DAC_Start_DMA+0x190>)
 800725a:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	68db      	ldr	r3, [r3, #12]
 8007260:	4a3b      	ldr	r2, [pc, #236]	; (8007350 <HAL_DAC_Start_DMA+0x194>)
 8007262:	635a      	str	r2, [r3, #52]	; 0x34

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	681a      	ldr	r2, [r3, #0]
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007272:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8007274:	6a3b      	ldr	r3, [r7, #32]
 8007276:	2b08      	cmp	r3, #8
 8007278:	d013      	beq.n	80072a2 <HAL_DAC_Start_DMA+0xe6>
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	2b08      	cmp	r3, #8
 800727e:	d817      	bhi.n	80072b0 <HAL_DAC_Start_DMA+0xf4>
 8007280:	6a3b      	ldr	r3, [r7, #32]
 8007282:	2b00      	cmp	r3, #0
 8007284:	d003      	beq.n	800728e <HAL_DAC_Start_DMA+0xd2>
 8007286:	6a3b      	ldr	r3, [r7, #32]
 8007288:	2b04      	cmp	r3, #4
 800728a:	d005      	beq.n	8007298 <HAL_DAC_Start_DMA+0xdc>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 800728c:	e010      	b.n	80072b0 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3314      	adds	r3, #20
 8007294:	613b      	str	r3, [r7, #16]
        break;
 8007296:	e00c      	b.n	80072b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8007298:	68fb      	ldr	r3, [r7, #12]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	3318      	adds	r3, #24
 800729e:	613b      	str	r3, [r7, #16]
        break;
 80072a0:	e007      	b.n	80072b2 <HAL_DAC_Start_DMA+0xf6>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	331c      	adds	r3, #28
 80072a8:	613b      	str	r3, [r7, #16]
        break;
 80072aa:	e002      	b.n	80072b2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80072ac:	bf00      	nop
 80072ae:	e000      	b.n	80072b2 <HAL_DAC_Start_DMA+0xf6>
        break;
 80072b0:	bf00      	nop
    }
  }

  /* Enable the DMA channel */
  if (Channel == DAC_CHANNEL_1)
 80072b2:	68bb      	ldr	r3, [r7, #8]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d111      	bne.n	80072dc <HAL_DAC_Start_DMA+0x120>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	681b      	ldr	r3, [r3, #0]
 80072bc:	681a      	ldr	r2, [r3, #0]
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	681b      	ldr	r3, [r3, #0]
 80072c2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072c6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	6898      	ldr	r0, [r3, #8]
 80072cc:	6879      	ldr	r1, [r7, #4]
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	693a      	ldr	r2, [r7, #16]
 80072d2:	f000 fb13 	bl	80078fc <HAL_DMA_Start_IT>
 80072d6:	4603      	mov	r3, r0
 80072d8:	75fb      	strb	r3, [r7, #23]
 80072da:	e010      	b.n	80072fe <HAL_DAC_Start_DMA+0x142>
  }
  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	681a      	ldr	r2, [r3, #0]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 80072ea:	601a      	str	r2, [r3, #0]

    /* Enable the DMA channel */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	68d8      	ldr	r0, [r3, #12]
 80072f0:	6879      	ldr	r1, [r7, #4]
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	693a      	ldr	r2, [r7, #16]
 80072f6:	f000 fb01 	bl	80078fc <HAL_DMA_Start_IT>
 80072fa:	4603      	mov	r3, r0
 80072fc:	75fb      	strb	r3, [r7, #23]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 80072fe:	68fb      	ldr	r3, [r7, #12]
 8007300:	2200      	movs	r2, #0
 8007302:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8007304:	7dfb      	ldrb	r3, [r7, #23]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d10c      	bne.n	8007324 <HAL_DAC_Start_DMA+0x168>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	6819      	ldr	r1, [r3, #0]
 8007310:	68bb      	ldr	r3, [r7, #8]
 8007312:	f003 0310 	and.w	r3, r3, #16
 8007316:	2201      	movs	r2, #1
 8007318:	409a      	lsls	r2, r3
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	430a      	orrs	r2, r1
 8007320:	601a      	str	r2, [r3, #0]
 8007322:	e005      	b.n	8007330 <HAL_DAC_Start_DMA+0x174>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8007324:	68fb      	ldr	r3, [r7, #12]
 8007326:	691b      	ldr	r3, [r3, #16]
 8007328:	f043 0204 	orr.w	r2, r3, #4
 800732c:	68fb      	ldr	r3, [r7, #12]
 800732e:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8007330:	7dfb      	ldrb	r3, [r7, #23]
}
 8007332:	4618      	mov	r0, r3
 8007334:	3718      	adds	r7, #24
 8007336:	46bd      	mov	sp, r7
 8007338:	bd80      	pop	{r7, pc}
 800733a:	bf00      	nop
 800733c:	08007665 	.word	0x08007665
 8007340:	08007687 	.word	0x08007687
 8007344:	080076a3 	.word	0x080076a3
 8007348:	08007721 	.word	0x08007721
 800734c:	08007743 	.word	0x08007743
 8007350:	0800775f 	.word	0x0800775f

08007354 <HAL_DAC_IRQHandler>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
void HAL_DAC_IRQHandler(DAC_HandleTypeDef *hdac)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b082      	sub	sp, #8
 8007358:	af00      	add	r7, sp, #0
 800735a:	6078      	str	r0, [r7, #4]
  if (__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR1))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007366:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800736a:	d120      	bne.n	80073ae <HAL_DAC_IRQHandler+0x5a>
  {
    /* Check underrun flag of DAC channel 1 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR1))
 800736c:	687b      	ldr	r3, [r7, #4]
 800736e:	681b      	ldr	r3, [r3, #0]
 8007370:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007372:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8007376:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800737a:	d118      	bne.n	80073ae <HAL_DAC_IRQHandler+0x5a>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2204      	movs	r2, #4
 8007380:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to chanel1 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH1);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	f043 0201 	orr.w	r2, r3, #1
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR1);
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8007396:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel1 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	681a      	ldr	r2, [r3, #0]
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80073a6:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh1(hdac);
#else
      HAL_DAC_DMAUnderrunCallbackCh1(hdac);
 80073a8:	6878      	ldr	r0, [r7, #4]
 80073aa:	f000 f837 	bl	800741c <HAL_DAC_DMAUnderrunCallbackCh1>
  }
#if defined (STM32L431xx) || defined (STM32L432xx) || defined (STM32L433xx) || defined (STM32L442xx) || defined (STM32L443xx) || \
    defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined(STM32L4S9xx)
  if(__HAL_DAC_GET_IT_SOURCE(hdac, DAC_IT_DMAUDR2))
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681b      	ldr	r3, [r3, #0]
 80073b4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073b8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073bc:	d120      	bne.n	8007400 <HAL_DAC_IRQHandler+0xac>
  {
    /* Check underrun flag of DAC channel 2 */
    if (__HAL_DAC_GET_FLAG(hdac, DAC_FLAG_DMAUDR2))
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073c4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80073c8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80073cc:	d118      	bne.n	8007400 <HAL_DAC_IRQHandler+0xac>
    {
      /* Change DAC state to error state */
      hdac->State = HAL_DAC_STATE_ERROR;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	2204      	movs	r2, #4
 80073d2:	711a      	strb	r2, [r3, #4]

      /* Set DAC error code to channel2 DMA underrun error */
      SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_DMAUNDERRUNCH2);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	691b      	ldr	r3, [r3, #16]
 80073d8:	f043 0202 	orr.w	r2, r3, #2
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	611a      	str	r2, [r3, #16]

      /* Clear the underrun flag */
      __HAL_DAC_CLEAR_FLAG(hdac, DAC_FLAG_DMAUDR2);
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	681b      	ldr	r3, [r3, #0]
 80073e4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80073e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Disable the selected DAC channel2 DMA request */
      CLEAR_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	681a      	ldr	r2, [r3, #0]
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80073f8:	601a      	str	r2, [r3, #0]

      /* Error callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
      hdac->DMAUnderrunCallbackCh2(hdac);
#else
      HAL_DACEx_DMAUnderrunCallbackCh2(hdac);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f986 	bl	800770c <HAL_DACEx_DMAUnderrunCallbackCh2>
  }
#endif  /* STM32L431xx STM32L432xx STM32L433xx STM32L442xx STM32L443xx                         */
        /* STM32L471xx STM32L475xx STM32L476xx STM32L485xx STM32L486xx STM32L496xx STM32L4A6xx */
        /* STM32L4P5xx STM32L4Q5xx                                                             */
        /* STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx             */
}
 8007400:	bf00      	nop
 8007402:	3708      	adds	r7, #8
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}

08007408 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8007408:	b480      	push	{r7}
 800740a:	b083      	sub	sp, #12
 800740c:	af00      	add	r7, sp, #0
 800740e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8007410:	bf00      	nop
 8007412:	370c      	adds	r7, #12
 8007414:	46bd      	mov	sp, r7
 8007416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800741a:	4770      	bx	lr

0800741c <HAL_DAC_DMAUnderrunCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_DMAUnderrunCallbackCh1(DAC_HandleTypeDef *hdac)
{
 800741c:	b480      	push	{r7}
 800741e:	b083      	sub	sp, #12
 8007420:	af00      	add	r7, sp, #0
 8007422:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_DMAUnderrunCallbackCh1 could be implemented in the user file
   */
}
 8007424:	bf00      	nop
 8007426:	370c      	adds	r7, #12
 8007428:	46bd      	mov	sp, r7
 800742a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742e:	4770      	bx	lr

08007430 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected (Whenever present)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8007430:	b580      	push	{r7, lr}
 8007432:	b088      	sub	sp, #32
 8007434:	af00      	add	r7, sp, #0
 8007436:	60f8      	str	r0, [r7, #12]
 8007438:	60b9      	str	r1, [r7, #8]
 800743a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg1;
  uint32_t tmpreg2;
  uint32_t tickstart = 0U;
 800743c:	2300      	movs	r3, #0
 800743e:	61fb      	str	r3, [r7, #28]
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
  }
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	795b      	ldrb	r3, [r3, #5]
 8007444:	2b01      	cmp	r3, #1
 8007446:	d101      	bne.n	800744c <HAL_DAC_ConfigChannel+0x1c>
 8007448:	2302      	movs	r3, #2
 800744a:	e107      	b.n	800765c <HAL_DAC_ConfigChannel+0x22c>
 800744c:	68fb      	ldr	r3, [r7, #12]
 800744e:	2201      	movs	r2, #1
 8007450:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8007452:	68fb      	ldr	r3, [r7, #12]
 8007454:	2202      	movs	r2, #2
 8007456:	711a      	strb	r2, [r3, #4]

  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8007458:	68bb      	ldr	r3, [r7, #8]
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	2b04      	cmp	r3, #4
 800745e:	d174      	bne.n	800754a <HAL_DAC_ConfigChannel+0x11a>
  /* Sample on old configuration */
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8007460:	f7fe f844 	bl	80054ec <HAL_GetTick>
 8007464:	61f8      	str	r0, [r7, #28]

    if (Channel == DAC_CHANNEL_1)
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d134      	bne.n	80074d6 <HAL_DAC_ConfigChannel+0xa6>
    {

      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 800746c:	e011      	b.n	8007492 <HAL_DAC_ConfigChannel+0x62>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 800746e:	f7fe f83d 	bl	80054ec <HAL_GetTick>
 8007472:	4602      	mov	r2, r0
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	1ad3      	subs	r3, r2, r3
 8007478:	2b01      	cmp	r3, #1
 800747a:	d90a      	bls.n	8007492 <HAL_DAC_ConfigChannel+0x62>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	f043 0208 	orr.w	r2, r3, #8
 8007484:	68fb      	ldr	r3, [r7, #12]
 8007486:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	2203      	movs	r2, #3
 800748c:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 800748e:	2303      	movs	r3, #3
 8007490:	e0e4      	b.n	800765c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8007492:	68fb      	ldr	r3, [r7, #12]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007498:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d1e6      	bne.n	800746e <HAL_DAC_ConfigChannel+0x3e>
        }
      }
      HAL_Delay(1);
 80074a0:	2001      	movs	r0, #1
 80074a2:	f7fe f82f 	bl	8005504 <HAL_Delay>
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68ba      	ldr	r2, [r7, #8]
 80074ac:	6992      	ldr	r2, [r2, #24]
 80074ae:	641a      	str	r2, [r3, #64]	; 0x40
 80074b0:	e01e      	b.n	80074f0 <HAL_DAC_ConfigChannel+0xc0>
      /* SHSR2 can be written when BWST2 is cleared */

      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 80074b2:	f7fe f81b 	bl	80054ec <HAL_GetTick>
 80074b6:	4602      	mov	r2, r0
 80074b8:	69fb      	ldr	r3, [r7, #28]
 80074ba:	1ad3      	subs	r3, r2, r3
 80074bc:	2b01      	cmp	r3, #1
 80074be:	d90a      	bls.n	80074d6 <HAL_DAC_ConfigChannel+0xa6>
        {
          /* Update error code */
          SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	691b      	ldr	r3, [r3, #16]
 80074c4:	f043 0208 	orr.w	r2, r3, #8
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	611a      	str	r2, [r3, #16]

          /* Change the DMA state */
          hdac->State = HAL_DAC_STATE_TIMEOUT;
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	2203      	movs	r2, #3
 80074d0:	711a      	strb	r2, [r3, #4]

          return HAL_TIMEOUT;
 80074d2:	2303      	movs	r3, #3
 80074d4:	e0c2      	b.n	800765c <HAL_DAC_ConfigChannel+0x22c>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80074dc:	2b00      	cmp	r3, #0
 80074de:	dbe8      	blt.n	80074b2 <HAL_DAC_ConfigChannel+0x82>
        }
      }
      HAL_Delay(1U);
 80074e0:	2001      	movs	r0, #1
 80074e2:	f7fe f80f 	bl	8005504 <HAL_Delay>
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 80074e6:	68fb      	ldr	r3, [r7, #12]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	6992      	ldr	r2, [r2, #24]
 80074ee:	645a      	str	r2, [r3, #68]	; 0x44
    }
#endif /* STM32L451xx STM32L452xx STM32L462xx */

    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
 80074f0:	68fb      	ldr	r3, [r7, #12]
 80074f2:	681b      	ldr	r3, [r3, #0]
 80074f4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	f003 0310 	and.w	r3, r3, #16
 80074fc:	f240 31ff 	movw	r1, #1023	; 0x3ff
 8007500:	fa01 f303 	lsl.w	r3, r1, r3
 8007504:	43db      	mvns	r3, r3
 8007506:	ea02 0103 	and.w	r1, r2, r3
 800750a:	68bb      	ldr	r3, [r7, #8]
 800750c:	69da      	ldr	r2, [r3, #28]
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f003 0310 	and.w	r3, r3, #16
 8007514:	409a      	lsls	r2, r3
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	430a      	orrs	r2, r1
 800751c:	649a      	str	r2, [r3, #72]	; 0x48
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL), (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	f003 0310 	and.w	r3, r3, #16
 800752a:	21ff      	movs	r1, #255	; 0xff
 800752c:	fa01 f303 	lsl.w	r3, r1, r3
 8007530:	43db      	mvns	r3, r3
 8007532:	ea02 0103 	and.w	r1, r2, r3
 8007536:	68bb      	ldr	r3, [r7, #8]
 8007538:	6a1a      	ldr	r2, [r3, #32]
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f003 0310 	and.w	r3, r3, #16
 8007540:	409a      	lsls	r2, r3
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	430a      	orrs	r2, r1
 8007548:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	691b      	ldr	r3, [r3, #16]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d11d      	bne.n	800758e <HAL_DAC_ConfigChannel+0x15e>
  /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007558:	61bb      	str	r3, [r7, #24]
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	f003 0310 	and.w	r3, r3, #16
 8007560:	221f      	movs	r2, #31
 8007562:	fa02 f303 	lsl.w	r3, r2, r3
 8007566:	43db      	mvns	r3, r3
 8007568:	69ba      	ldr	r2, [r7, #24]
 800756a:	4013      	ands	r3, r2
 800756c:	61bb      	str	r3, [r7, #24]
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 800756e:	68bb      	ldr	r3, [r7, #8]
 8007570:	695b      	ldr	r3, [r3, #20]
 8007572:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007574:	687b      	ldr	r3, [r7, #4]
 8007576:	f003 0310 	and.w	r3, r3, #16
 800757a:	697a      	ldr	r2, [r7, #20]
 800757c:	fa02 f303 	lsl.w	r3, r2, r3
 8007580:	69ba      	ldr	r2, [r7, #24]
 8007582:	4313      	orrs	r3, r2
 8007584:	61bb      	str	r3, [r7, #24]
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	69ba      	ldr	r2, [r7, #24]
 800758c:	639a      	str	r2, [r3, #56]	; 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007594:	61bb      	str	r3, [r7, #24]
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	f003 0310 	and.w	r3, r3, #16
 800759c:	2207      	movs	r2, #7
 800759e:	fa02 f303 	lsl.w	r3, r2, r3
 80075a2:	43db      	mvns	r3, r3
 80075a4:	69ba      	ldr	r2, [r7, #24]
 80075a6:	4013      	ands	r3, r2
 80075a8:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | sConfig->DAC_ConnectOnChipPeripheral);
 80075aa:	68bb      	ldr	r3, [r7, #8]
 80075ac:	681a      	ldr	r2, [r3, #0]
 80075ae:	68bb      	ldr	r3, [r7, #8]
 80075b0:	689b      	ldr	r3, [r3, #8]
 80075b2:	431a      	orrs	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	68db      	ldr	r3, [r3, #12]
 80075b8:	4313      	orrs	r3, r2
 80075ba:	617b      	str	r3, [r7, #20]
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	f003 0310 	and.w	r3, r3, #16
 80075c2:	697a      	ldr	r2, [r7, #20]
 80075c4:	fa02 f303 	lsl.w	r3, r2, r3
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	4313      	orrs	r3, r2
 80075cc:	61bb      	str	r3, [r7, #24]
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	69ba      	ldr	r2, [r7, #24]
 80075d4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	6819      	ldr	r1, [r3, #0]
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f003 0310 	and.w	r3, r3, #16
 80075e2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80075e6:	fa02 f303 	lsl.w	r3, r2, r3
 80075ea:	43da      	mvns	r2, r3
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	681b      	ldr	r3, [r3, #0]
 80075f0:	400a      	ands	r2, r1
 80075f2:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	681b      	ldr	r3, [r3, #0]
 80075f8:	681b      	ldr	r3, [r3, #0]
 80075fa:	61bb      	str	r3, [r7, #24]
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	f003 0310 	and.w	r3, r3, #16
 8007602:	f640 72fc 	movw	r2, #4092	; 0xffc
 8007606:	fa02 f303 	lsl.w	r3, r2, r3
 800760a:	43db      	mvns	r3, r3
 800760c:	69ba      	ldr	r2, [r7, #24]
 800760e:	4013      	ands	r3, r2
 8007610:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	685b      	ldr	r3, [r3, #4]
 8007616:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	f003 0310 	and.w	r3, r3, #16
 800761e:	697a      	ldr	r2, [r7, #20]
 8007620:	fa02 f303 	lsl.w	r3, r2, r3
 8007624:	69ba      	ldr	r2, [r7, #24]
 8007626:	4313      	orrs	r3, r2
 8007628:	61bb      	str	r3, [r7, #24]
  }

#endif /* STM32L4P5xx STM32L4Q5xx STM32L4R5xx STM32L4R7xx STM32L4R9xx STM32L4S5xx STM32L4S7xx STM32L4S9xx */

  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 800762a:	68fb      	ldr	r3, [r7, #12]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	69ba      	ldr	r2, [r7, #24]
 8007630:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  hdac->Instance->CR &= ~(DAC_CR_WAVE1 << (Channel & 0x10UL));
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	681b      	ldr	r3, [r3, #0]
 8007636:	6819      	ldr	r1, [r3, #0]
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f003 0310 	and.w	r3, r3, #16
 800763e:	22c0      	movs	r2, #192	; 0xc0
 8007640:	fa02 f303 	lsl.w	r3, r2, r3
 8007644:	43da      	mvns	r2, r3
 8007646:	68fb      	ldr	r3, [r7, #12]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	400a      	ands	r2, r1
 800764c:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	2201      	movs	r2, #1
 8007652:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	2200      	movs	r2, #0
 8007658:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 800765a:	2300      	movs	r3, #0
}
 800765c:	4618      	mov	r0, r3
 800765e:	3720      	adds	r7, #32
 8007660:	46bd      	mov	sp, r7
 8007662:	bd80      	pop	{r7, pc}

08007664 <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007670:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8007672:	68f8      	ldr	r0, [r7, #12]
 8007674:	f7fc faae 	bl	8003bd4 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	2201      	movs	r2, #1
 800767c:	711a      	strb	r2, [r3, #4]
}
 800767e:	bf00      	nop
 8007680:	3710      	adds	r7, #16
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b084      	sub	sp, #16
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007692:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8007694:	68f8      	ldr	r0, [r7, #12]
 8007696:	f7fc fa7d 	bl	8003b94 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 800769a:	bf00      	nop
 800769c:	3710      	adds	r7, #16
 800769e:	46bd      	mov	sp, r7
 80076a0:	bd80      	pop	{r7, pc}

080076a2 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 80076a2:	b580      	push	{r7, lr}
 80076a4:	b084      	sub	sp, #16
 80076a6:	af00      	add	r7, sp, #0
 80076a8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80076ae:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	691b      	ldr	r3, [r3, #16]
 80076b4:	f043 0204 	orr.w	r2, r3, #4
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 80076bc:	68f8      	ldr	r0, [r7, #12]
 80076be:	f7ff fea3 	bl	8007408 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 80076c2:	68fb      	ldr	r3, [r7, #12]
 80076c4:	2201      	movs	r2, #1
 80076c6:	711a      	strb	r2, [r3, #4]
}
 80076c8:	bf00      	nop
 80076ca:	3710      	adds	r7, #16
 80076cc:	46bd      	mov	sp, r7
 80076ce:	bd80      	pop	{r7, pc}

080076d0 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b083      	sub	sp, #12
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8007700:	bf00      	nop
 8007702:	370c      	adds	r7, #12
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <HAL_DACEx_DMAUnderrunCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_DMAUnderrunCallbackCh2(DAC_HandleTypeDef *hdac)
{
 800770c:	b480      	push	{r7}
 800770e:	b083      	sub	sp, #12
 8007710:	af00      	add	r7, sp, #0
 8007712:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_DMAUnderrunCallbackCh2 could be implemented in the user file
   */
}
 8007714:	bf00      	nop
 8007716:	370c      	adds	r7, #12
 8007718:	46bd      	mov	sp, r7
 800771a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800771e:	4770      	bx	lr

08007720 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800772c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 800772e:	68f8      	ldr	r0, [r7, #12]
 8007730:	f7ff ffce 	bl	80076d0 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8007734:	68fb      	ldr	r3, [r7, #12]
 8007736:	2201      	movs	r2, #1
 8007738:	711a      	strb	r2, [r3, #4]
}
 800773a:	bf00      	nop
 800773c:	3710      	adds	r7, #16
 800773e:	46bd      	mov	sp, r7
 8007740:	bd80      	pop	{r7, pc}

08007742 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b084      	sub	sp, #16
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800774e:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f7ff ffc7 	bl	80076e4 <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8007756:	bf00      	nop
 8007758:	3710      	adds	r7, #16
 800775a:	46bd      	mov	sp, r7
 800775c:	bd80      	pop	{r7, pc}

0800775e <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 800775e:	b580      	push	{r7, lr}
 8007760:	b084      	sub	sp, #16
 8007762:	af00      	add	r7, sp, #0
 8007764:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800776a:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	691b      	ldr	r3, [r3, #16]
 8007770:	f043 0204 	orr.w	r2, r3, #4
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8007778:	68f8      	ldr	r0, [r7, #12]
 800777a:	f7ff ffbd 	bl	80076f8 <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	2201      	movs	r2, #1
 8007782:	711a      	strb	r2, [r3, #4]
}
 8007784:	bf00      	nop
 8007786:	3710      	adds	r7, #16
 8007788:	46bd      	mov	sp, r7
 800778a:	bd80      	pop	{r7, pc}

0800778c <HAL_DMA_Init>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800778c:	b480      	push	{r7}
 800778e:	b085      	sub	sp, #20
 8007790:	af00      	add	r7, sp, #0
 8007792:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2b00      	cmp	r3, #0
 8007798:	d101      	bne.n	800779e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800779a:	2301      	movs	r3, #1
 800779c:	e098      	b.n	80078d0 <HAL_DMA_Init+0x144>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	461a      	mov	r2, r3
 80077a4:	4b4d      	ldr	r3, [pc, #308]	; (80078dc <HAL_DMA_Init+0x150>)
 80077a6:	429a      	cmp	r2, r3
 80077a8:	d80f      	bhi.n	80077ca <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2U;
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	461a      	mov	r2, r3
 80077b0:	4b4b      	ldr	r3, [pc, #300]	; (80078e0 <HAL_DMA_Init+0x154>)
 80077b2:	4413      	add	r3, r2
 80077b4:	4a4b      	ldr	r2, [pc, #300]	; (80078e4 <HAL_DMA_Init+0x158>)
 80077b6:	fba2 2303 	umull	r2, r3, r2, r3
 80077ba:	091b      	lsrs	r3, r3, #4
 80077bc:	009a      	lsls	r2, r3, #2
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	4a48      	ldr	r2, [pc, #288]	; (80078e8 <HAL_DMA_Init+0x15c>)
 80077c6:	641a      	str	r2, [r3, #64]	; 0x40
 80077c8:	e00e      	b.n	80077e8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2U;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	461a      	mov	r2, r3
 80077d0:	4b46      	ldr	r3, [pc, #280]	; (80078ec <HAL_DMA_Init+0x160>)
 80077d2:	4413      	add	r3, r2
 80077d4:	4a43      	ldr	r2, [pc, #268]	; (80078e4 <HAL_DMA_Init+0x158>)
 80077d6:	fba2 2303 	umull	r2, r3, r2, r3
 80077da:	091b      	lsrs	r3, r3, #4
 80077dc:	009a      	lsls	r2, r3, #2
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	4a42      	ldr	r2, [pc, #264]	; (80078f0 <HAL_DMA_Init+0x164>)
 80077e6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	2202      	movs	r2, #2
 80077ec:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80077fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007802:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800780c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800780e:	687b      	ldr	r3, [r7, #4]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007818:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	699b      	ldr	r3, [r3, #24]
 800781e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007824:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	6a1b      	ldr	r3, [r3, #32]
 800782a:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800782c:	68fa      	ldr	r2, [r7, #12]
 800782e:	4313      	orrs	r3, r2
 8007830:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	68fa      	ldr	r2, [r7, #12]
 8007838:	601a      	str	r2, [r3, #0]
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	689b      	ldr	r3, [r3, #8]
 800783e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007842:	d039      	beq.n	80078b8 <HAL_DMA_Init+0x12c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007848:	4a27      	ldr	r2, [pc, #156]	; (80078e8 <HAL_DMA_Init+0x15c>)
 800784a:	4293      	cmp	r3, r2
 800784c:	d11a      	bne.n	8007884 <HAL_DMA_Init+0xf8>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800784e:	4b29      	ldr	r3, [pc, #164]	; (80078f4 <HAL_DMA_Init+0x168>)
 8007850:	681a      	ldr	r2, [r3, #0]
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007856:	f003 031c 	and.w	r3, r3, #28
 800785a:	210f      	movs	r1, #15
 800785c:	fa01 f303 	lsl.w	r3, r1, r3
 8007860:	43db      	mvns	r3, r3
 8007862:	4924      	ldr	r1, [pc, #144]	; (80078f4 <HAL_DMA_Init+0x168>)
 8007864:	4013      	ands	r3, r2
 8007866:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 8007868:	4b22      	ldr	r3, [pc, #136]	; (80078f4 <HAL_DMA_Init+0x168>)
 800786a:	681a      	ldr	r2, [r3, #0]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	6859      	ldr	r1, [r3, #4]
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007874:	f003 031c 	and.w	r3, r3, #28
 8007878:	fa01 f303 	lsl.w	r3, r1, r3
 800787c:	491d      	ldr	r1, [pc, #116]	; (80078f4 <HAL_DMA_Init+0x168>)
 800787e:	4313      	orrs	r3, r2
 8007880:	600b      	str	r3, [r1, #0]
 8007882:	e019      	b.n	80078b8 <HAL_DMA_Init+0x12c>
    }
    else /* DMA2 */
    {
      /* Reset request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 8007884:	4b1c      	ldr	r3, [pc, #112]	; (80078f8 <HAL_DMA_Init+0x16c>)
 8007886:	681a      	ldr	r2, [r3, #0]
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800788c:	f003 031c 	and.w	r3, r3, #28
 8007890:	210f      	movs	r1, #15
 8007892:	fa01 f303 	lsl.w	r3, r1, r3
 8007896:	43db      	mvns	r3, r3
 8007898:	4917      	ldr	r1, [pc, #92]	; (80078f8 <HAL_DMA_Init+0x16c>)
 800789a:	4013      	ands	r3, r2
 800789c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA2 Channelx */
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800789e:	4b16      	ldr	r3, [pc, #88]	; (80078f8 <HAL_DMA_Init+0x16c>)
 80078a0:	681a      	ldr	r2, [r3, #0]
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	6859      	ldr	r1, [r3, #4]
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078aa:	f003 031c 	and.w	r3, r3, #28
 80078ae:	fa01 f303 	lsl.w	r3, r1, r3
 80078b2:	4911      	ldr	r1, [pc, #68]	; (80078f8 <HAL_DMA_Init+0x16c>)
 80078b4:	4313      	orrs	r3, r2
 80078b6:	600b      	str	r3, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	2200      	movs	r2, #0
 80078bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2201      	movs	r2, #1
 80078c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	2200      	movs	r2, #0
 80078ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80078ce:	2300      	movs	r3, #0
}
 80078d0:	4618      	mov	r0, r3
 80078d2:	3714      	adds	r7, #20
 80078d4:	46bd      	mov	sp, r7
 80078d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078da:	4770      	bx	lr
 80078dc:	40020407 	.word	0x40020407
 80078e0:	bffdfff8 	.word	0xbffdfff8
 80078e4:	cccccccd 	.word	0xcccccccd
 80078e8:	40020000 	.word	0x40020000
 80078ec:	bffdfbf8 	.word	0xbffdfbf8
 80078f0:	40020400 	.word	0x40020400
 80078f4:	400200a8 	.word	0x400200a8
 80078f8:	400204a8 	.word	0x400204a8

080078fc <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80078fc:	b580      	push	{r7, lr}
 80078fe:	b086      	sub	sp, #24
 8007900:	af00      	add	r7, sp, #0
 8007902:	60f8      	str	r0, [r7, #12]
 8007904:	60b9      	str	r1, [r7, #8]
 8007906:	607a      	str	r2, [r7, #4]
 8007908:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8007914:	2b01      	cmp	r3, #1
 8007916:	d101      	bne.n	800791c <HAL_DMA_Start_IT+0x20>
 8007918:	2302      	movs	r3, #2
 800791a:	e04b      	b.n	80079b4 <HAL_DMA_Start_IT+0xb8>
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if(HAL_DMA_STATE_READY == hdma->State)
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800792a:	b2db      	uxtb	r3, r3
 800792c:	2b01      	cmp	r3, #1
 800792e:	d13a      	bne.n	80079a6 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	2202      	movs	r2, #2
 8007934:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	2200      	movs	r2, #0
 800793c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800793e:	68fb      	ldr	r3, [r7, #12]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 0201 	bic.w	r2, r2, #1
 800794c:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800794e:	683b      	ldr	r3, [r7, #0]
 8007950:	687a      	ldr	r2, [r7, #4]
 8007952:	68b9      	ldr	r1, [r7, #8]
 8007954:	68f8      	ldr	r0, [r7, #12]
 8007956:	f000 f8e0 	bl	8007b1a <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800795e:	2b00      	cmp	r3, #0
 8007960:	d008      	beq.n	8007974 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	681b      	ldr	r3, [r3, #0]
 8007966:	681a      	ldr	r2, [r3, #0]
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	f042 020e 	orr.w	r2, r2, #14
 8007970:	601a      	str	r2, [r3, #0]
 8007972:	e00f      	b.n	8007994 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681a      	ldr	r2, [r3, #0]
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	f022 0204 	bic.w	r2, r2, #4
 8007982:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8007984:	68fb      	ldr	r3, [r7, #12]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	681a      	ldr	r2, [r3, #0]
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	f042 020a 	orr.w	r2, r2, #10
 8007992:	601a      	str	r2, [r3, #0]
    }

#endif /* DMAMUX1 */

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	681a      	ldr	r2, [r3, #0]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	f042 0201 	orr.w	r2, r2, #1
 80079a2:	601a      	str	r2, [r3, #0]
 80079a4:	e005      	b.n	80079b2 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	2200      	movs	r2, #0
 80079aa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80079ae:	2302      	movs	r3, #2
 80079b0:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80079b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3718      	adds	r7, #24
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b084      	sub	sp, #16
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_HT) != 0U))
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80079d8:	f003 031c 	and.w	r3, r3, #28
 80079dc:	2204      	movs	r2, #4
 80079de:	409a      	lsls	r2, r3
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	4013      	ands	r3, r2
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d026      	beq.n	8007a36 <HAL_DMA_IRQHandler+0x7a>
 80079e8:	68bb      	ldr	r3, [r7, #8]
 80079ea:	f003 0304 	and.w	r3, r3, #4
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d021      	beq.n	8007a36 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	681b      	ldr	r3, [r3, #0]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	f003 0320 	and.w	r3, r3, #32
 80079fc:	2b00      	cmp	r3, #0
 80079fe:	d107      	bne.n	8007a10 <HAL_DMA_IRQHandler+0x54>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f022 0204 	bic.w	r2, r2, #4
 8007a0e:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1CU);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a14:	f003 021c 	and.w	r2, r3, #28
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a1c:	2104      	movs	r1, #4
 8007a1e:	fa01 f202 	lsl.w	r2, r1, r2
 8007a22:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

      if(hdma->XferHalfCpltCallback != NULL)
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d071      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x154>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a30:	6878      	ldr	r0, [r7, #4]
 8007a32:	4798      	blx	r3
      if(hdma->XferHalfCpltCallback != NULL)
 8007a34:	e06c      	b.n	8007b10 <HAL_DMA_IRQHandler+0x154>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TC) != 0U))
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a3a:	f003 031c 	and.w	r3, r3, #28
 8007a3e:	2202      	movs	r2, #2
 8007a40:	409a      	lsls	r2, r3
 8007a42:	68fb      	ldr	r3, [r7, #12]
 8007a44:	4013      	ands	r3, r2
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d02e      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0xec>
 8007a4a:	68bb      	ldr	r3, [r7, #8]
 8007a4c:	f003 0302 	and.w	r3, r3, #2
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d029      	beq.n	8007aa8 <HAL_DMA_IRQHandler+0xec>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f003 0320 	and.w	r3, r3, #32
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d10b      	bne.n	8007a7a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      /* Disable the transfer complete and error interrupt */
      /* if the DMA mode is not CIRCULAR  */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	681a      	ldr	r2, [r3, #0]
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	f022 020a 	bic.w	r2, r2, #10
 8007a70:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	2201      	movs	r2, #1
 8007a76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1CU));
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a7e:	f003 021c 	and.w	r2, r3, #28
 8007a82:	687b      	ldr	r3, [r7, #4]
 8007a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a86:	2102      	movs	r1, #2
 8007a88:	fa01 f202 	lsl.w	r2, r1, r2
 8007a8c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a8e:	687b      	ldr	r3, [r7, #4]
 8007a90:	2200      	movs	r2, #0
 8007a92:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if(hdma->XferCpltCallback != NULL)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d038      	beq.n	8007b10 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007aa2:	6878      	ldr	r0, [r7, #4]
 8007aa4:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8007aa6:	e033      	b.n	8007b10 <HAL_DMA_IRQHandler+0x154>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (((flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1CU))) != 0U) && ((source_it & DMA_IT_TE) !=  0U))
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007aac:	f003 031c 	and.w	r3, r3, #28
 8007ab0:	2208      	movs	r2, #8
 8007ab2:	409a      	lsls	r2, r3
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	4013      	ands	r3, r2
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d02a      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x156>
 8007abc:	68bb      	ldr	r3, [r7, #8]
 8007abe:	f003 0308 	and.w	r3, r3, #8
 8007ac2:	2b00      	cmp	r3, #0
 8007ac4:	d025      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	681a      	ldr	r2, [r3, #0]
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	f022 020e 	bic.w	r2, r2, #14
 8007ad4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007ad6:	687b      	ldr	r3, [r7, #4]
 8007ad8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ada:	f003 021c 	and.w	r2, r3, #28
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ae2:	2101      	movs	r1, #1
 8007ae4:	fa01 f202 	lsl.w	r2, r1, r2
 8007ae8:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	2201      	movs	r2, #1
 8007af4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	2200      	movs	r2, #0
 8007afc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d004      	beq.n	8007b12 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b0c:	6878      	ldr	r0, [r7, #4]
 8007b0e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8007b10:	bf00      	nop
 8007b12:	bf00      	nop
}
 8007b14:	3710      	adds	r7, #16
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}

08007b1a <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007b1a:	b480      	push	{r7}
 8007b1c:	b085      	sub	sp, #20
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	60f8      	str	r0, [r7, #12]
 8007b22:	60b9      	str	r1, [r7, #8]
 8007b24:	607a      	str	r2, [r7, #4]
 8007b26:	603b      	str	r3, [r7, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b2c:	f003 021c 	and.w	r2, r3, #28
 8007b30:	68fb      	ldr	r3, [r7, #12]
 8007b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b34:	2101      	movs	r1, #1
 8007b36:	fa01 f202 	lsl.w	r2, r1, r2
 8007b3a:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8007b3c:	68fb      	ldr	r3, [r7, #12]
 8007b3e:	681b      	ldr	r3, [r3, #0]
 8007b40:	683a      	ldr	r2, [r7, #0]
 8007b42:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	689b      	ldr	r3, [r3, #8]
 8007b48:	2b10      	cmp	r3, #16
 8007b4a:	d108      	bne.n	8007b5e <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	68ba      	ldr	r2, [r7, #8]
 8007b5a:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8007b5c:	e007      	b.n	8007b6e <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	68ba      	ldr	r2, [r7, #8]
 8007b64:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	687a      	ldr	r2, [r7, #4]
 8007b6c:	60da      	str	r2, [r3, #12]
}
 8007b6e:	bf00      	nop
 8007b70:	3714      	adds	r7, #20
 8007b72:	46bd      	mov	sp, r7
 8007b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b78:	4770      	bx	lr
	...

08007b7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007b7c:	b480      	push	{r7}
 8007b7e:	b087      	sub	sp, #28
 8007b80:	af00      	add	r7, sp, #0
 8007b82:	6078      	str	r0, [r7, #4]
 8007b84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8007b86:	2300      	movs	r3, #0
 8007b88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007b8a:	e148      	b.n	8007e1e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8007b8c:	683b      	ldr	r3, [r7, #0]
 8007b8e:	681a      	ldr	r2, [r3, #0]
 8007b90:	2101      	movs	r1, #1
 8007b92:	697b      	ldr	r3, [r7, #20]
 8007b94:	fa01 f303 	lsl.w	r3, r1, r3
 8007b98:	4013      	ands	r3, r2
 8007b9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	f000 813a 	beq.w	8007e18 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007ba4:	683b      	ldr	r3, [r7, #0]
 8007ba6:	685b      	ldr	r3, [r3, #4]
 8007ba8:	f003 0303 	and.w	r3, r3, #3
 8007bac:	2b01      	cmp	r3, #1
 8007bae:	d005      	beq.n	8007bbc <HAL_GPIO_Init+0x40>
 8007bb0:	683b      	ldr	r3, [r7, #0]
 8007bb2:	685b      	ldr	r3, [r3, #4]
 8007bb4:	f003 0303 	and.w	r3, r3, #3
 8007bb8:	2b02      	cmp	r3, #2
 8007bba:	d130      	bne.n	8007c1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	689b      	ldr	r3, [r3, #8]
 8007bc0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	005b      	lsls	r3, r3, #1
 8007bc6:	2203      	movs	r2, #3
 8007bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8007bcc:	43db      	mvns	r3, r3
 8007bce:	693a      	ldr	r2, [r7, #16]
 8007bd0:	4013      	ands	r3, r2
 8007bd2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8007bd4:	683b      	ldr	r3, [r7, #0]
 8007bd6:	68da      	ldr	r2, [r3, #12]
 8007bd8:	697b      	ldr	r3, [r7, #20]
 8007bda:	005b      	lsls	r3, r3, #1
 8007bdc:	fa02 f303 	lsl.w	r3, r2, r3
 8007be0:	693a      	ldr	r2, [r7, #16]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	693a      	ldr	r2, [r7, #16]
 8007bea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007bf2:	2201      	movs	r2, #1
 8007bf4:	697b      	ldr	r3, [r7, #20]
 8007bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8007bfa:	43db      	mvns	r3, r3
 8007bfc:	693a      	ldr	r2, [r7, #16]
 8007bfe:	4013      	ands	r3, r2
 8007c00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007c02:	683b      	ldr	r3, [r7, #0]
 8007c04:	685b      	ldr	r3, [r3, #4]
 8007c06:	091b      	lsrs	r3, r3, #4
 8007c08:	f003 0201 	and.w	r2, r3, #1
 8007c0c:	697b      	ldr	r3, [r7, #20]
 8007c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c12:	693a      	ldr	r2, [r7, #16]
 8007c14:	4313      	orrs	r3, r2
 8007c16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	693a      	ldr	r2, [r7, #16]
 8007c1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8007c1e:	683b      	ldr	r3, [r7, #0]
 8007c20:	685b      	ldr	r3, [r3, #4]
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b03      	cmp	r3, #3
 8007c28:	d017      	beq.n	8007c5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	68db      	ldr	r3, [r3, #12]
 8007c2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007c30:	697b      	ldr	r3, [r7, #20]
 8007c32:	005b      	lsls	r3, r3, #1
 8007c34:	2203      	movs	r2, #3
 8007c36:	fa02 f303 	lsl.w	r3, r2, r3
 8007c3a:	43db      	mvns	r3, r3
 8007c3c:	693a      	ldr	r2, [r7, #16]
 8007c3e:	4013      	ands	r3, r2
 8007c40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007c42:	683b      	ldr	r3, [r7, #0]
 8007c44:	689a      	ldr	r2, [r3, #8]
 8007c46:	697b      	ldr	r3, [r7, #20]
 8007c48:	005b      	lsls	r3, r3, #1
 8007c4a:	fa02 f303 	lsl.w	r3, r2, r3
 8007c4e:	693a      	ldr	r2, [r7, #16]
 8007c50:	4313      	orrs	r3, r2
 8007c52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8007c54:	687b      	ldr	r3, [r7, #4]
 8007c56:	693a      	ldr	r2, [r7, #16]
 8007c58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007c5a:	683b      	ldr	r3, [r7, #0]
 8007c5c:	685b      	ldr	r3, [r3, #4]
 8007c5e:	f003 0303 	and.w	r3, r3, #3
 8007c62:	2b02      	cmp	r3, #2
 8007c64:	d123      	bne.n	8007cae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	08da      	lsrs	r2, r3, #3
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	3208      	adds	r2, #8
 8007c6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007c72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8007c74:	697b      	ldr	r3, [r7, #20]
 8007c76:	f003 0307 	and.w	r3, r3, #7
 8007c7a:	009b      	lsls	r3, r3, #2
 8007c7c:	220f      	movs	r2, #15
 8007c7e:	fa02 f303 	lsl.w	r3, r2, r3
 8007c82:	43db      	mvns	r3, r3
 8007c84:	693a      	ldr	r2, [r7, #16]
 8007c86:	4013      	ands	r3, r2
 8007c88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8007c8a:	683b      	ldr	r3, [r7, #0]
 8007c8c:	691a      	ldr	r2, [r3, #16]
 8007c8e:	697b      	ldr	r3, [r7, #20]
 8007c90:	f003 0307 	and.w	r3, r3, #7
 8007c94:	009b      	lsls	r3, r3, #2
 8007c96:	fa02 f303 	lsl.w	r3, r2, r3
 8007c9a:	693a      	ldr	r2, [r7, #16]
 8007c9c:	4313      	orrs	r3, r2
 8007c9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8007ca0:	697b      	ldr	r3, [r7, #20]
 8007ca2:	08da      	lsrs	r2, r3, #3
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	3208      	adds	r2, #8
 8007ca8:	6939      	ldr	r1, [r7, #16]
 8007caa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	681b      	ldr	r3, [r3, #0]
 8007cb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8007cb4:	697b      	ldr	r3, [r7, #20]
 8007cb6:	005b      	lsls	r3, r3, #1
 8007cb8:	2203      	movs	r2, #3
 8007cba:	fa02 f303 	lsl.w	r3, r2, r3
 8007cbe:	43db      	mvns	r3, r3
 8007cc0:	693a      	ldr	r2, [r7, #16]
 8007cc2:	4013      	ands	r3, r2
 8007cc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	685b      	ldr	r3, [r3, #4]
 8007cca:	f003 0203 	and.w	r2, r3, #3
 8007cce:	697b      	ldr	r3, [r7, #20]
 8007cd0:	005b      	lsls	r3, r3, #1
 8007cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8007cd6:	693a      	ldr	r2, [r7, #16]
 8007cd8:	4313      	orrs	r3, r2
 8007cda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	693a      	ldr	r2, [r7, #16]
 8007ce0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	685b      	ldr	r3, [r3, #4]
 8007ce6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f000 8094 	beq.w	8007e18 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007cf0:	4b52      	ldr	r3, [pc, #328]	; (8007e3c <HAL_GPIO_Init+0x2c0>)
 8007cf2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007cf4:	4a51      	ldr	r2, [pc, #324]	; (8007e3c <HAL_GPIO_Init+0x2c0>)
 8007cf6:	f043 0301 	orr.w	r3, r3, #1
 8007cfa:	6613      	str	r3, [r2, #96]	; 0x60
 8007cfc:	4b4f      	ldr	r3, [pc, #316]	; (8007e3c <HAL_GPIO_Init+0x2c0>)
 8007cfe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007d00:	f003 0301 	and.w	r3, r3, #1
 8007d04:	60bb      	str	r3, [r7, #8]
 8007d06:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8007d08:	4a4d      	ldr	r2, [pc, #308]	; (8007e40 <HAL_GPIO_Init+0x2c4>)
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	089b      	lsrs	r3, r3, #2
 8007d0e:	3302      	adds	r3, #2
 8007d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007d14:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8007d16:	697b      	ldr	r3, [r7, #20]
 8007d18:	f003 0303 	and.w	r3, r3, #3
 8007d1c:	009b      	lsls	r3, r3, #2
 8007d1e:	220f      	movs	r2, #15
 8007d20:	fa02 f303 	lsl.w	r3, r2, r3
 8007d24:	43db      	mvns	r3, r3
 8007d26:	693a      	ldr	r2, [r7, #16]
 8007d28:	4013      	ands	r3, r2
 8007d2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8007d32:	d00d      	beq.n	8007d50 <HAL_GPIO_Init+0x1d4>
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	4a43      	ldr	r2, [pc, #268]	; (8007e44 <HAL_GPIO_Init+0x2c8>)
 8007d38:	4293      	cmp	r3, r2
 8007d3a:	d007      	beq.n	8007d4c <HAL_GPIO_Init+0x1d0>
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	4a42      	ldr	r2, [pc, #264]	; (8007e48 <HAL_GPIO_Init+0x2cc>)
 8007d40:	4293      	cmp	r3, r2
 8007d42:	d101      	bne.n	8007d48 <HAL_GPIO_Init+0x1cc>
 8007d44:	2302      	movs	r3, #2
 8007d46:	e004      	b.n	8007d52 <HAL_GPIO_Init+0x1d6>
 8007d48:	2307      	movs	r3, #7
 8007d4a:	e002      	b.n	8007d52 <HAL_GPIO_Init+0x1d6>
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	e000      	b.n	8007d52 <HAL_GPIO_Init+0x1d6>
 8007d50:	2300      	movs	r3, #0
 8007d52:	697a      	ldr	r2, [r7, #20]
 8007d54:	f002 0203 	and.w	r2, r2, #3
 8007d58:	0092      	lsls	r2, r2, #2
 8007d5a:	4093      	lsls	r3, r2
 8007d5c:	693a      	ldr	r2, [r7, #16]
 8007d5e:	4313      	orrs	r3, r2
 8007d60:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8007d62:	4937      	ldr	r1, [pc, #220]	; (8007e40 <HAL_GPIO_Init+0x2c4>)
 8007d64:	697b      	ldr	r3, [r7, #20]
 8007d66:	089b      	lsrs	r3, r3, #2
 8007d68:	3302      	adds	r3, #2
 8007d6a:	693a      	ldr	r2, [r7, #16]
 8007d6c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8007d70:	4b36      	ldr	r3, [pc, #216]	; (8007e4c <HAL_GPIO_Init+0x2d0>)
 8007d72:	689b      	ldr	r3, [r3, #8]
 8007d74:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	43db      	mvns	r3, r3
 8007d7a:	693a      	ldr	r2, [r7, #16]
 8007d7c:	4013      	ands	r3, r2
 8007d7e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8007d80:	683b      	ldr	r3, [r7, #0]
 8007d82:	685b      	ldr	r3, [r3, #4]
 8007d84:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d003      	beq.n	8007d94 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8007d8c:	693a      	ldr	r2, [r7, #16]
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	4313      	orrs	r3, r2
 8007d92:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8007d94:	4a2d      	ldr	r2, [pc, #180]	; (8007e4c <HAL_GPIO_Init+0x2d0>)
 8007d96:	693b      	ldr	r3, [r7, #16]
 8007d98:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8007d9a:	4b2c      	ldr	r3, [pc, #176]	; (8007e4c <HAL_GPIO_Init+0x2d0>)
 8007d9c:	68db      	ldr	r3, [r3, #12]
 8007d9e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007da0:	68fb      	ldr	r3, [r7, #12]
 8007da2:	43db      	mvns	r3, r3
 8007da4:	693a      	ldr	r2, [r7, #16]
 8007da6:	4013      	ands	r3, r2
 8007da8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8007daa:	683b      	ldr	r3, [r7, #0]
 8007dac:	685b      	ldr	r3, [r3, #4]
 8007dae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d003      	beq.n	8007dbe <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8007db6:	693a      	ldr	r2, [r7, #16]
 8007db8:	68fb      	ldr	r3, [r7, #12]
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8007dbe:	4a23      	ldr	r2, [pc, #140]	; (8007e4c <HAL_GPIO_Init+0x2d0>)
 8007dc0:	693b      	ldr	r3, [r7, #16]
 8007dc2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8007dc4:	4b21      	ldr	r3, [pc, #132]	; (8007e4c <HAL_GPIO_Init+0x2d0>)
 8007dc6:	685b      	ldr	r3, [r3, #4]
 8007dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007dca:	68fb      	ldr	r3, [r7, #12]
 8007dcc:	43db      	mvns	r3, r3
 8007dce:	693a      	ldr	r2, [r7, #16]
 8007dd0:	4013      	ands	r3, r2
 8007dd2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	685b      	ldr	r3, [r3, #4]
 8007dd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	d003      	beq.n	8007de8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8007de0:	693a      	ldr	r2, [r7, #16]
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	4313      	orrs	r3, r2
 8007de6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8007de8:	4a18      	ldr	r2, [pc, #96]	; (8007e4c <HAL_GPIO_Init+0x2d0>)
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8007dee:	4b17      	ldr	r3, [pc, #92]	; (8007e4c <HAL_GPIO_Init+0x2d0>)
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8007df4:	68fb      	ldr	r3, [r7, #12]
 8007df6:	43db      	mvns	r3, r3
 8007df8:	693a      	ldr	r2, [r7, #16]
 8007dfa:	4013      	ands	r3, r2
 8007dfc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8007dfe:	683b      	ldr	r3, [r7, #0]
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d003      	beq.n	8007e12 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8007e0a:	693a      	ldr	r2, [r7, #16]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	4313      	orrs	r3, r2
 8007e10:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8007e12:	4a0e      	ldr	r2, [pc, #56]	; (8007e4c <HAL_GPIO_Init+0x2d0>)
 8007e14:	693b      	ldr	r3, [r7, #16]
 8007e16:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8007e18:	697b      	ldr	r3, [r7, #20]
 8007e1a:	3301      	adds	r3, #1
 8007e1c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8007e1e:	683b      	ldr	r3, [r7, #0]
 8007e20:	681a      	ldr	r2, [r3, #0]
 8007e22:	697b      	ldr	r3, [r7, #20]
 8007e24:	fa22 f303 	lsr.w	r3, r2, r3
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	f47f aeaf 	bne.w	8007b8c <HAL_GPIO_Init+0x10>
  }
}
 8007e2e:	bf00      	nop
 8007e30:	bf00      	nop
 8007e32:	371c      	adds	r7, #28
 8007e34:	46bd      	mov	sp, r7
 8007e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e3a:	4770      	bx	lr
 8007e3c:	40021000 	.word	0x40021000
 8007e40:	40010000 	.word	0x40010000
 8007e44:	48000400 	.word	0x48000400
 8007e48:	48000800 	.word	0x48000800
 8007e4c:	40010400 	.word	0x40010400

08007e50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_Pin_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007e50:	b480      	push	{r7}
 8007e52:	b085      	sub	sp, #20
 8007e54:	af00      	add	r7, sp, #0
 8007e56:	6078      	str	r0, [r7, #4]
 8007e58:	460b      	mov	r3, r1
 8007e5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00u)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	691a      	ldr	r2, [r3, #16]
 8007e60:	887b      	ldrh	r3, [r7, #2]
 8007e62:	4013      	ands	r3, r2
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d002      	beq.n	8007e6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007e68:	2301      	movs	r3, #1
 8007e6a:	73fb      	strb	r3, [r7, #15]
 8007e6c:	e001      	b.n	8007e72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007e6e:	2300      	movs	r3, #0
 8007e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8007e74:	4618      	mov	r0, r3
 8007e76:	3714      	adds	r7, #20
 8007e78:	46bd      	mov	sp, r7
 8007e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7e:	4770      	bx	lr

08007e80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007e80:	b480      	push	{r7}
 8007e82:	b083      	sub	sp, #12
 8007e84:	af00      	add	r7, sp, #0
 8007e86:	6078      	str	r0, [r7, #4]
 8007e88:	460b      	mov	r3, r1
 8007e8a:	807b      	strh	r3, [r7, #2]
 8007e8c:	4613      	mov	r3, r2
 8007e8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007e90:	787b      	ldrb	r3, [r7, #1]
 8007e92:	2b00      	cmp	r3, #0
 8007e94:	d003      	beq.n	8007e9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8007e96:	887a      	ldrh	r2, [r7, #2]
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8007e9c:	e002      	b.n	8007ea4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8007e9e:	887a      	ldrh	r2, [r7, #2]
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	629a      	str	r2, [r3, #40]	; 0x28
}
 8007ea4:	bf00      	nop
 8007ea6:	370c      	adds	r7, #12
 8007ea8:	46bd      	mov	sp, r7
 8007eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007eae:	4770      	bx	lr

08007eb0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8007eb0:	b580      	push	{r7, lr}
 8007eb2:	b082      	sub	sp, #8
 8007eb4:	af00      	add	r7, sp, #0
 8007eb6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d101      	bne.n	8007ec2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8007ebe:	2301      	movs	r3, #1
 8007ec0:	e081      	b.n	8007fc6 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007ec8:	b2db      	uxtb	r3, r3
 8007eca:	2b00      	cmp	r3, #0
 8007ecc:	d106      	bne.n	8007edc <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8007ece:	687b      	ldr	r3, [r7, #4]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8007ed6:	6878      	ldr	r0, [r7, #4]
 8007ed8:	f7fd f8a2 	bl	8005020 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	2224      	movs	r2, #36	; 0x24
 8007ee0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	681b      	ldr	r3, [r3, #0]
 8007ee8:	681a      	ldr	r2, [r3, #0]
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	f022 0201 	bic.w	r2, r2, #1
 8007ef2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	685a      	ldr	r2, [r3, #4]
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	681b      	ldr	r3, [r3, #0]
 8007efc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8007f00:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	689a      	ldr	r2, [r3, #8]
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f10:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	68db      	ldr	r3, [r3, #12]
 8007f16:	2b01      	cmp	r3, #1
 8007f18:	d107      	bne.n	8007f2a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	689a      	ldr	r2, [r3, #8]
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007f26:	609a      	str	r2, [r3, #8]
 8007f28:	e006      	b.n	8007f38 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	689a      	ldr	r2, [r3, #8]
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8007f36:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	68db      	ldr	r3, [r3, #12]
 8007f3c:	2b02      	cmp	r3, #2
 8007f3e:	d104      	bne.n	8007f4a <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007f48:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	681b      	ldr	r3, [r3, #0]
 8007f4e:	685b      	ldr	r3, [r3, #4]
 8007f50:	687a      	ldr	r2, [r7, #4]
 8007f52:	6812      	ldr	r2, [r2, #0]
 8007f54:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8007f58:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8007f5c:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	68da      	ldr	r2, [r3, #12]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007f6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	691a      	ldr	r2, [r3, #16]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	695b      	ldr	r3, [r3, #20]
 8007f76:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	699b      	ldr	r3, [r3, #24]
 8007f7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	681b      	ldr	r3, [r3, #0]
 8007f84:	430a      	orrs	r2, r1
 8007f86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	69d9      	ldr	r1, [r3, #28]
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	6a1a      	ldr	r2, [r3, #32]
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	681b      	ldr	r3, [r3, #0]
 8007f94:	430a      	orrs	r2, r1
 8007f96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	681b      	ldr	r3, [r3, #0]
 8007f9c:	681a      	ldr	r2, [r3, #0]
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	f042 0201 	orr.w	r2, r2, #1
 8007fa6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2200      	movs	r2, #0
 8007fac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2220      	movs	r2, #32
 8007fb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007fb6:	687b      	ldr	r3, [r7, #4]
 8007fb8:	2200      	movs	r2, #0
 8007fba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	2200      	movs	r2, #0
 8007fc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8007fc4:	2300      	movs	r3, #0
}
 8007fc6:	4618      	mov	r0, r3
 8007fc8:	3708      	adds	r7, #8
 8007fca:	46bd      	mov	sp, r7
 8007fcc:	bd80      	pop	{r7, pc}
	...

08007fd0 <HAL_I2C_Master_Transmit>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                          uint16_t Size, uint32_t Timeout)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	b088      	sub	sp, #32
 8007fd4:	af02      	add	r7, sp, #8
 8007fd6:	60f8      	str	r0, [r7, #12]
 8007fd8:	607a      	str	r2, [r7, #4]
 8007fda:	461a      	mov	r2, r3
 8007fdc:	460b      	mov	r3, r1
 8007fde:	817b      	strh	r3, [r7, #10]
 8007fe0:	4613      	mov	r3, r2
 8007fe2:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b20      	cmp	r3, #32
 8007fee:	f040 80da 	bne.w	80081a6 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007ff8:	2b01      	cmp	r3, #1
 8007ffa:	d101      	bne.n	8008000 <HAL_I2C_Master_Transmit+0x30>
 8007ffc:	2302      	movs	r3, #2
 8007ffe:	e0d3      	b.n	80081a8 <HAL_I2C_Master_Transmit+0x1d8>
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	2201      	movs	r2, #1
 8008004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8008008:	f7fd fa70 	bl	80054ec <HAL_GetTick>
 800800c:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800800e:	697b      	ldr	r3, [r7, #20]
 8008010:	9300      	str	r3, [sp, #0]
 8008012:	2319      	movs	r3, #25
 8008014:	2201      	movs	r2, #1
 8008016:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f8f0 	bl	8008200 <I2C_WaitOnFlagUntilTimeout>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d001      	beq.n	800802a <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8008026:	2301      	movs	r3, #1
 8008028:	e0be      	b.n	80081a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	2221      	movs	r2, #33	; 0x21
 800802e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8008032:	68fb      	ldr	r3, [r7, #12]
 8008034:	2210      	movs	r2, #16
 8008036:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800803a:	68fb      	ldr	r3, [r7, #12]
 800803c:	2200      	movs	r2, #0
 800803e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	687a      	ldr	r2, [r7, #4]
 8008044:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	893a      	ldrh	r2, [r7, #8]
 800804a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	2200      	movs	r2, #0
 8008050:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008052:	68fb      	ldr	r3, [r7, #12]
 8008054:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008056:	b29b      	uxth	r3, r3
 8008058:	2bff      	cmp	r3, #255	; 0xff
 800805a:	d90e      	bls.n	800807a <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800805c:	68fb      	ldr	r3, [r7, #12]
 800805e:	22ff      	movs	r2, #255	; 0xff
 8008060:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008062:	68fb      	ldr	r3, [r7, #12]
 8008064:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008066:	b2da      	uxtb	r2, r3
 8008068:	8979      	ldrh	r1, [r7, #10]
 800806a:	4b51      	ldr	r3, [pc, #324]	; (80081b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800806c:	9300      	str	r3, [sp, #0]
 800806e:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8008072:	68f8      	ldr	r0, [r7, #12]
 8008074:	f000 fa6c 	bl	8008550 <I2C_TransferConfig>
 8008078:	e06c      	b.n	8008154 <HAL_I2C_Master_Transmit+0x184>
                         I2C_GENERATE_START_WRITE);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800807a:	68fb      	ldr	r3, [r7, #12]
 800807c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800807e:	b29a      	uxth	r2, r3
 8008080:	68fb      	ldr	r3, [r7, #12]
 8008082:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008088:	b2da      	uxtb	r2, r3
 800808a:	8979      	ldrh	r1, [r7, #10]
 800808c:	4b48      	ldr	r3, [pc, #288]	; (80081b0 <HAL_I2C_Master_Transmit+0x1e0>)
 800808e:	9300      	str	r3, [sp, #0]
 8008090:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8008094:	68f8      	ldr	r0, [r7, #12]
 8008096:	f000 fa5b 	bl	8008550 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);
    }

    while (hi2c->XferCount > 0U)
 800809a:	e05b      	b.n	8008154 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800809c:	697a      	ldr	r2, [r7, #20]
 800809e:	6a39      	ldr	r1, [r7, #32]
 80080a0:	68f8      	ldr	r0, [r7, #12]
 80080a2:	f000 f8ed 	bl	8008280 <I2C_WaitOnTXISFlagUntilTimeout>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	d001      	beq.n	80080b0 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e07b      	b.n	80081a8 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080b4:	781a      	ldrb	r2, [r3, #0]
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80080bc:	68fb      	ldr	r3, [r7, #12]
 80080be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080c0:	1c5a      	adds	r2, r3, #1
 80080c2:	68fb      	ldr	r3, [r7, #12]
 80080c4:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080ca:	b29b      	uxth	r3, r3
 80080cc:	3b01      	subs	r3, #1
 80080ce:	b29a      	uxth	r2, r3
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80080d4:	68fb      	ldr	r3, [r7, #12]
 80080d6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080d8:	3b01      	subs	r3, #1
 80080da:	b29a      	uxth	r2, r3
 80080dc:	68fb      	ldr	r3, [r7, #12]
 80080de:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80080e0:	68fb      	ldr	r3, [r7, #12]
 80080e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80080e4:	b29b      	uxth	r3, r3
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d034      	beq.n	8008154 <HAL_I2C_Master_Transmit+0x184>
 80080ea:	68fb      	ldr	r3, [r7, #12]
 80080ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d130      	bne.n	8008154 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80080f2:	697b      	ldr	r3, [r7, #20]
 80080f4:	9300      	str	r3, [sp, #0]
 80080f6:	6a3b      	ldr	r3, [r7, #32]
 80080f8:	2200      	movs	r2, #0
 80080fa:	2180      	movs	r1, #128	; 0x80
 80080fc:	68f8      	ldr	r0, [r7, #12]
 80080fe:	f000 f87f 	bl	8008200 <I2C_WaitOnFlagUntilTimeout>
 8008102:	4603      	mov	r3, r0
 8008104:	2b00      	cmp	r3, #0
 8008106:	d001      	beq.n	800810c <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8008108:	2301      	movs	r3, #1
 800810a:	e04d      	b.n	80081a8 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008110:	b29b      	uxth	r3, r3
 8008112:	2bff      	cmp	r3, #255	; 0xff
 8008114:	d90e      	bls.n	8008134 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	22ff      	movs	r2, #255	; 0xff
 800811a:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008120:	b2da      	uxtb	r2, r3
 8008122:	8979      	ldrh	r1, [r7, #10]
 8008124:	2300      	movs	r3, #0
 8008126:	9300      	str	r3, [sp, #0]
 8008128:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800812c:	68f8      	ldr	r0, [r7, #12]
 800812e:	f000 fa0f 	bl	8008550 <I2C_TransferConfig>
 8008132:	e00f      	b.n	8008154 <HAL_I2C_Master_Transmit+0x184>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008138:	b29a      	uxth	r2, r3
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008142:	b2da      	uxtb	r2, r3
 8008144:	8979      	ldrh	r1, [r7, #10]
 8008146:	2300      	movs	r3, #0
 8008148:	9300      	str	r3, [sp, #0]
 800814a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800814e:	68f8      	ldr	r0, [r7, #12]
 8008150:	f000 f9fe 	bl	8008550 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8008154:	68fb      	ldr	r3, [r7, #12]
 8008156:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008158:	b29b      	uxth	r3, r3
 800815a:	2b00      	cmp	r3, #0
 800815c:	d19e      	bne.n	800809c <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800815e:	697a      	ldr	r2, [r7, #20]
 8008160:	6a39      	ldr	r1, [r7, #32]
 8008162:	68f8      	ldr	r0, [r7, #12]
 8008164:	f000 f8cc 	bl	8008300 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008168:	4603      	mov	r3, r0
 800816a:	2b00      	cmp	r3, #0
 800816c:	d001      	beq.n	8008172 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800816e:	2301      	movs	r3, #1
 8008170:	e01a      	b.n	80081a8 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008172:	68fb      	ldr	r3, [r7, #12]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	2220      	movs	r2, #32
 8008178:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800817a:	68fb      	ldr	r3, [r7, #12]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	6859      	ldr	r1, [r3, #4]
 8008180:	68fb      	ldr	r3, [r7, #12]
 8008182:	681a      	ldr	r2, [r3, #0]
 8008184:	4b0b      	ldr	r3, [pc, #44]	; (80081b4 <HAL_I2C_Master_Transmit+0x1e4>)
 8008186:	400b      	ands	r3, r1
 8008188:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	2220      	movs	r2, #32
 800818e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008192:	68fb      	ldr	r3, [r7, #12]
 8008194:	2200      	movs	r2, #0
 8008196:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800819a:	68fb      	ldr	r3, [r7, #12]
 800819c:	2200      	movs	r2, #0
 800819e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80081a2:	2300      	movs	r3, #0
 80081a4:	e000      	b.n	80081a8 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80081a6:	2302      	movs	r3, #2
  }
}
 80081a8:	4618      	mov	r0, r3
 80081aa:	3718      	adds	r7, #24
 80081ac:	46bd      	mov	sp, r7
 80081ae:	bd80      	pop	{r7, pc}
 80081b0:	80002000 	.word	0x80002000
 80081b4:	fe00e800 	.word	0xfe00e800

080081b8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	681b      	ldr	r3, [r3, #0]
 80081c4:	699b      	ldr	r3, [r3, #24]
 80081c6:	f003 0302 	and.w	r3, r3, #2
 80081ca:	2b02      	cmp	r3, #2
 80081cc:	d103      	bne.n	80081d6 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80081ce:	687b      	ldr	r3, [r7, #4]
 80081d0:	681b      	ldr	r3, [r3, #0]
 80081d2:	2200      	movs	r2, #0
 80081d4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80081d6:	687b      	ldr	r3, [r7, #4]
 80081d8:	681b      	ldr	r3, [r3, #0]
 80081da:	699b      	ldr	r3, [r3, #24]
 80081dc:	f003 0301 	and.w	r3, r3, #1
 80081e0:	2b01      	cmp	r3, #1
 80081e2:	d007      	beq.n	80081f4 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	681b      	ldr	r3, [r3, #0]
 80081e8:	699a      	ldr	r2, [r3, #24]
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	681b      	ldr	r3, [r3, #0]
 80081ee:	f042 0201 	orr.w	r2, r2, #1
 80081f2:	619a      	str	r2, [r3, #24]
  }
}
 80081f4:	bf00      	nop
 80081f6:	370c      	adds	r7, #12
 80081f8:	46bd      	mov	sp, r7
 80081fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081fe:	4770      	bx	lr

08008200 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8008200:	b580      	push	{r7, lr}
 8008202:	b084      	sub	sp, #16
 8008204:	af00      	add	r7, sp, #0
 8008206:	60f8      	str	r0, [r7, #12]
 8008208:	60b9      	str	r1, [r7, #8]
 800820a:	603b      	str	r3, [r7, #0]
 800820c:	4613      	mov	r3, r2
 800820e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008210:	e022      	b.n	8008258 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008212:	683b      	ldr	r3, [r7, #0]
 8008214:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008218:	d01e      	beq.n	8008258 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800821a:	f7fd f967 	bl	80054ec <HAL_GetTick>
 800821e:	4602      	mov	r2, r0
 8008220:	69bb      	ldr	r3, [r7, #24]
 8008222:	1ad3      	subs	r3, r2, r3
 8008224:	683a      	ldr	r2, [r7, #0]
 8008226:	429a      	cmp	r2, r3
 8008228:	d302      	bcc.n	8008230 <I2C_WaitOnFlagUntilTimeout+0x30>
 800822a:	683b      	ldr	r3, [r7, #0]
 800822c:	2b00      	cmp	r3, #0
 800822e:	d113      	bne.n	8008258 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008234:	f043 0220 	orr.w	r2, r3, #32
 8008238:	68fb      	ldr	r3, [r7, #12]
 800823a:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2220      	movs	r2, #32
 8008240:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2200      	movs	r2, #0
 8008250:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8008254:	2301      	movs	r3, #1
 8008256:	e00f      	b.n	8008278 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008258:	68fb      	ldr	r3, [r7, #12]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	699a      	ldr	r2, [r3, #24]
 800825e:	68bb      	ldr	r3, [r7, #8]
 8008260:	4013      	ands	r3, r2
 8008262:	68ba      	ldr	r2, [r7, #8]
 8008264:	429a      	cmp	r2, r3
 8008266:	bf0c      	ite	eq
 8008268:	2301      	moveq	r3, #1
 800826a:	2300      	movne	r3, #0
 800826c:	b2db      	uxtb	r3, r3
 800826e:	461a      	mov	r2, r3
 8008270:	79fb      	ldrb	r3, [r7, #7]
 8008272:	429a      	cmp	r2, r3
 8008274:	d0cd      	beq.n	8008212 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008276:	2300      	movs	r3, #0
}
 8008278:	4618      	mov	r0, r3
 800827a:	3710      	adds	r7, #16
 800827c:	46bd      	mov	sp, r7
 800827e:	bd80      	pop	{r7, pc}

08008280 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	60f8      	str	r0, [r7, #12]
 8008288:	60b9      	str	r1, [r7, #8]
 800828a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800828c:	e02c      	b.n	80082e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800828e:	687a      	ldr	r2, [r7, #4]
 8008290:	68b9      	ldr	r1, [r7, #8]
 8008292:	68f8      	ldr	r0, [r7, #12]
 8008294:	f000 f870 	bl	8008378 <I2C_IsErrorOccurred>
 8008298:	4603      	mov	r3, r0
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800829e:	2301      	movs	r3, #1
 80082a0:	e02a      	b.n	80082f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80082a2:	68bb      	ldr	r3, [r7, #8]
 80082a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082a8:	d01e      	beq.n	80082e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80082aa:	f7fd f91f 	bl	80054ec <HAL_GetTick>
 80082ae:	4602      	mov	r2, r0
 80082b0:	687b      	ldr	r3, [r7, #4]
 80082b2:	1ad3      	subs	r3, r2, r3
 80082b4:	68ba      	ldr	r2, [r7, #8]
 80082b6:	429a      	cmp	r2, r3
 80082b8:	d302      	bcc.n	80082c0 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80082ba:	68bb      	ldr	r3, [r7, #8]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d113      	bne.n	80082e8 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082c4:	f043 0220 	orr.w	r2, r3, #32
 80082c8:	68fb      	ldr	r3, [r7, #12]
 80082ca:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80082d4:	68fb      	ldr	r3, [r7, #12]
 80082d6:	2200      	movs	r2, #0
 80082d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	2200      	movs	r2, #0
 80082e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80082e4:	2301      	movs	r3, #1
 80082e6:	e007      	b.n	80082f8 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	699b      	ldr	r3, [r3, #24]
 80082ee:	f003 0302 	and.w	r3, r3, #2
 80082f2:	2b02      	cmp	r3, #2
 80082f4:	d1cb      	bne.n	800828e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80082f6:	2300      	movs	r3, #0
}
 80082f8:	4618      	mov	r0, r3
 80082fa:	3710      	adds	r7, #16
 80082fc:	46bd      	mov	sp, r7
 80082fe:	bd80      	pop	{r7, pc}

08008300 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8008300:	b580      	push	{r7, lr}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	60b9      	str	r1, [r7, #8]
 800830a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800830c:	e028      	b.n	8008360 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800830e:	687a      	ldr	r2, [r7, #4]
 8008310:	68b9      	ldr	r1, [r7, #8]
 8008312:	68f8      	ldr	r0, [r7, #12]
 8008314:	f000 f830 	bl	8008378 <I2C_IsErrorOccurred>
 8008318:	4603      	mov	r3, r0
 800831a:	2b00      	cmp	r3, #0
 800831c:	d001      	beq.n	8008322 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800831e:	2301      	movs	r3, #1
 8008320:	e026      	b.n	8008370 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008322:	f7fd f8e3 	bl	80054ec <HAL_GetTick>
 8008326:	4602      	mov	r2, r0
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	1ad3      	subs	r3, r2, r3
 800832c:	68ba      	ldr	r2, [r7, #8]
 800832e:	429a      	cmp	r2, r3
 8008330:	d302      	bcc.n	8008338 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8008332:	68bb      	ldr	r3, [r7, #8]
 8008334:	2b00      	cmp	r3, #0
 8008336:	d113      	bne.n	8008360 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800833c:	f043 0220 	orr.w	r2, r3, #32
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	2220      	movs	r2, #32
 8008348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	2200      	movs	r2, #0
 8008350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	2200      	movs	r2, #0
 8008358:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800835c:	2301      	movs	r3, #1
 800835e:	e007      	b.n	8008370 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008360:	68fb      	ldr	r3, [r7, #12]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	699b      	ldr	r3, [r3, #24]
 8008366:	f003 0320 	and.w	r3, r3, #32
 800836a:	2b20      	cmp	r3, #32
 800836c:	d1cf      	bne.n	800830e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800836e:	2300      	movs	r3, #0
}
 8008370:	4618      	mov	r0, r3
 8008372:	3710      	adds	r7, #16
 8008374:	46bd      	mov	sp, r7
 8008376:	bd80      	pop	{r7, pc}

08008378 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8008378:	b580      	push	{r7, lr}
 800837a:	b08a      	sub	sp, #40	; 0x28
 800837c:	af00      	add	r7, sp, #0
 800837e:	60f8      	str	r0, [r7, #12]
 8008380:	60b9      	str	r1, [r7, #8]
 8008382:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008384:	2300      	movs	r3, #0
 8008386:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	699b      	ldr	r3, [r3, #24]
 8008390:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8008392:	2300      	movs	r3, #0
 8008394:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800839a:	69bb      	ldr	r3, [r7, #24]
 800839c:	f003 0310 	and.w	r3, r3, #16
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d075      	beq.n	8008490 <I2C_IsErrorOccurred+0x118>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	2210      	movs	r2, #16
 80083aa:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80083ac:	e056      	b.n	800845c <I2C_IsErrorOccurred+0xe4>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80083b4:	d052      	beq.n	800845c <I2C_IsErrorOccurred+0xe4>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80083b6:	f7fd f899 	bl	80054ec <HAL_GetTick>
 80083ba:	4602      	mov	r2, r0
 80083bc:	69fb      	ldr	r3, [r7, #28]
 80083be:	1ad3      	subs	r3, r2, r3
 80083c0:	68ba      	ldr	r2, [r7, #8]
 80083c2:	429a      	cmp	r2, r3
 80083c4:	d302      	bcc.n	80083cc <I2C_IsErrorOccurred+0x54>
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d147      	bne.n	800845c <I2C_IsErrorOccurred+0xe4>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80083d6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 80083d8:	68fb      	ldr	r3, [r7, #12]
 80083da:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80083de:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 80083e0:	68fb      	ldr	r3, [r7, #12]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	699b      	ldr	r3, [r3, #24]
 80083e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80083ea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083ee:	d12e      	bne.n	800844e <I2C_IsErrorOccurred+0xd6>
 80083f0:	697b      	ldr	r3, [r7, #20]
 80083f2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80083f6:	d02a      	beq.n	800844e <I2C_IsErrorOccurred+0xd6>
              (tmp1 != I2C_CR2_STOP) && \
 80083f8:	7cfb      	ldrb	r3, [r7, #19]
 80083fa:	2b20      	cmp	r3, #32
 80083fc:	d027      	beq.n	800844e <I2C_IsErrorOccurred+0xd6>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	681b      	ldr	r3, [r3, #0]
 8008402:	685a      	ldr	r2, [r3, #4]
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800840c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800840e:	f7fd f86d 	bl	80054ec <HAL_GetTick>
 8008412:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008414:	e01b      	b.n	800844e <I2C_IsErrorOccurred+0xd6>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008416:	f7fd f869 	bl	80054ec <HAL_GetTick>
 800841a:	4602      	mov	r2, r0
 800841c:	69fb      	ldr	r3, [r7, #28]
 800841e:	1ad3      	subs	r3, r2, r3
 8008420:	2b19      	cmp	r3, #25
 8008422:	d914      	bls.n	800844e <I2C_IsErrorOccurred+0xd6>
            {
              hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008428:	f043 0220 	orr.w	r2, r3, #32
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	645a      	str	r2, [r3, #68]	; 0x44
              hi2c->State = HAL_I2C_STATE_READY;
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	2220      	movs	r2, #32
 8008434:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
              hi2c->Mode = HAL_I2C_MODE_NONE;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2200      	movs	r2, #0
 800843c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

              /* Process Unlocked */
              __HAL_UNLOCK(hi2c);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	2200      	movs	r2, #0
 8008444:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

              status = HAL_ERROR;
 8008448:	2301      	movs	r3, #1
 800844a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800844e:	68fb      	ldr	r3, [r7, #12]
 8008450:	681b      	ldr	r3, [r3, #0]
 8008452:	699b      	ldr	r3, [r3, #24]
 8008454:	f003 0320 	and.w	r3, r3, #32
 8008458:	2b20      	cmp	r3, #32
 800845a:	d1dc      	bne.n	8008416 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800845c:	68fb      	ldr	r3, [r7, #12]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	699b      	ldr	r3, [r3, #24]
 8008462:	f003 0320 	and.w	r3, r3, #32
 8008466:	2b20      	cmp	r3, #32
 8008468:	d003      	beq.n	8008472 <I2C_IsErrorOccurred+0xfa>
 800846a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800846e:	2b00      	cmp	r3, #0
 8008470:	d09d      	beq.n	80083ae <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8008472:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008476:	2b00      	cmp	r3, #0
 8008478:	d103      	bne.n	8008482 <I2C_IsErrorOccurred+0x10a>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800847a:	68fb      	ldr	r3, [r7, #12]
 800847c:	681b      	ldr	r3, [r3, #0]
 800847e:	2220      	movs	r2, #32
 8008480:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8008482:	6a3b      	ldr	r3, [r7, #32]
 8008484:	f043 0304 	orr.w	r3, r3, #4
 8008488:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800848a:	2301      	movs	r3, #1
 800848c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	681b      	ldr	r3, [r3, #0]
 8008494:	699b      	ldr	r3, [r3, #24]
 8008496:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008498:	69bb      	ldr	r3, [r7, #24]
 800849a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d00b      	beq.n	80084ba <I2C_IsErrorOccurred+0x142>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80084a2:	6a3b      	ldr	r3, [r7, #32]
 80084a4:	f043 0301 	orr.w	r3, r3, #1
 80084a8:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084b2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80084b4:	2301      	movs	r3, #1
 80084b6:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80084ba:	69bb      	ldr	r3, [r7, #24]
 80084bc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d00b      	beq.n	80084dc <I2C_IsErrorOccurred+0x164>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80084c4:	6a3b      	ldr	r3, [r7, #32]
 80084c6:	f043 0308 	orr.w	r3, r3, #8
 80084ca:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80084cc:	68fb      	ldr	r3, [r7, #12]
 80084ce:	681b      	ldr	r3, [r3, #0]
 80084d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80084d4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80084d6:	2301      	movs	r3, #1
 80084d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 80084dc:	69bb      	ldr	r3, [r7, #24]
 80084de:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00b      	beq.n	80084fe <I2C_IsErrorOccurred+0x186>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	f043 0302 	orr.w	r3, r3, #2
 80084ec:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80084ee:	68fb      	ldr	r3, [r7, #12]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80084f6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80084f8:	2301      	movs	r3, #1
 80084fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  }

  if (status != HAL_OK)
 80084fe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8008502:	2b00      	cmp	r3, #0
 8008504:	d01c      	beq.n	8008540 <I2C_IsErrorOccurred+0x1c8>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8008506:	68f8      	ldr	r0, [r7, #12]
 8008508:	f7ff fe56 	bl	80081b8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800850c:	68fb      	ldr	r3, [r7, #12]
 800850e:	681b      	ldr	r3, [r3, #0]
 8008510:	6859      	ldr	r1, [r3, #4]
 8008512:	68fb      	ldr	r3, [r7, #12]
 8008514:	681a      	ldr	r2, [r3, #0]
 8008516:	4b0d      	ldr	r3, [pc, #52]	; (800854c <I2C_IsErrorOccurred+0x1d4>)
 8008518:	400b      	ands	r3, r1
 800851a:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008520:	6a3b      	ldr	r3, [r7, #32]
 8008522:	431a      	orrs	r2, r3
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008528:	68fb      	ldr	r3, [r7, #12]
 800852a:	2220      	movs	r2, #32
 800852c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2200      	movs	r2, #0
 8008534:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	2200      	movs	r2, #0
 800853c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  }

  return status;
 8008540:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
}
 8008544:	4618      	mov	r0, r3
 8008546:	3728      	adds	r7, #40	; 0x28
 8008548:	46bd      	mov	sp, r7
 800854a:	bd80      	pop	{r7, pc}
 800854c:	fe00e800 	.word	0xfe00e800

08008550 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008550:	b480      	push	{r7}
 8008552:	b087      	sub	sp, #28
 8008554:	af00      	add	r7, sp, #0
 8008556:	60f8      	str	r0, [r7, #12]
 8008558:	607b      	str	r3, [r7, #4]
 800855a:	460b      	mov	r3, r1
 800855c:	817b      	strh	r3, [r7, #10]
 800855e:	4613      	mov	r3, r2
 8008560:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008562:	897b      	ldrh	r3, [r7, #10]
 8008564:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008568:	7a7b      	ldrb	r3, [r7, #9]
 800856a:	041b      	lsls	r3, r3, #16
 800856c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008570:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008572:	687b      	ldr	r3, [r7, #4]
 8008574:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008576:	6a3b      	ldr	r3, [r7, #32]
 8008578:	4313      	orrs	r3, r2
 800857a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800857e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	685a      	ldr	r2, [r3, #4]
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	0d5b      	lsrs	r3, r3, #21
 800858a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800858e:	4b08      	ldr	r3, [pc, #32]	; (80085b0 <I2C_TransferConfig+0x60>)
 8008590:	430b      	orrs	r3, r1
 8008592:	43db      	mvns	r3, r3
 8008594:	ea02 0103 	and.w	r1, r2, r3
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	697a      	ldr	r2, [r7, #20]
 800859e:	430a      	orrs	r2, r1
 80085a0:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80085a2:	bf00      	nop
 80085a4:	371c      	adds	r7, #28
 80085a6:	46bd      	mov	sp, r7
 80085a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085ac:	4770      	bx	lr
 80085ae:	bf00      	nop
 80085b0:	03ff63ff 	.word	0x03ff63ff

080085b4 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80085b4:	b480      	push	{r7}
 80085b6:	b083      	sub	sp, #12
 80085b8:	af00      	add	r7, sp, #0
 80085ba:	6078      	str	r0, [r7, #4]
 80085bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b20      	cmp	r3, #32
 80085c8:	d138      	bne.n	800863c <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80085d0:	2b01      	cmp	r3, #1
 80085d2:	d101      	bne.n	80085d8 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 80085d4:	2302      	movs	r3, #2
 80085d6:	e032      	b.n	800863e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	2201      	movs	r2, #1
 80085dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80085e0:	687b      	ldr	r3, [r7, #4]
 80085e2:	2224      	movs	r2, #36	; 0x24
 80085e4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	681a      	ldr	r2, [r3, #0]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	f022 0201 	bic.w	r2, r2, #1
 80085f6:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	681a      	ldr	r2, [r3, #0]
 80085fe:	687b      	ldr	r3, [r7, #4]
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008606:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	6819      	ldr	r1, [r3, #0]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	683a      	ldr	r2, [r7, #0]
 8008614:	430a      	orrs	r2, r1
 8008616:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681a      	ldr	r2, [r3, #0]
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	f042 0201 	orr.w	r2, r2, #1
 8008626:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	2220      	movs	r2, #32
 800862c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	2200      	movs	r2, #0
 8008634:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008638:	2300      	movs	r3, #0
 800863a:	e000      	b.n	800863e <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800863c:	2302      	movs	r3, #2
  }
}
 800863e:	4618      	mov	r0, r3
 8008640:	370c      	adds	r7, #12
 8008642:	46bd      	mov	sp, r7
 8008644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008648:	4770      	bx	lr

0800864a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800864a:	b480      	push	{r7}
 800864c:	b085      	sub	sp, #20
 800864e:	af00      	add	r7, sp, #0
 8008650:	6078      	str	r0, [r7, #4]
 8008652:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800865a:	b2db      	uxtb	r3, r3
 800865c:	2b20      	cmp	r3, #32
 800865e:	d139      	bne.n	80086d4 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008666:	2b01      	cmp	r3, #1
 8008668:	d101      	bne.n	800866e <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800866a:	2302      	movs	r3, #2
 800866c:	e033      	b.n	80086d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2201      	movs	r2, #1
 8008672:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2224      	movs	r2, #36	; 0x24
 800867a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	681a      	ldr	r2, [r3, #0]
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	f022 0201 	bic.w	r2, r2, #1
 800868c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008696:	68fb      	ldr	r3, [r7, #12]
 8008698:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800869c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800869e:	683b      	ldr	r3, [r7, #0]
 80086a0:	021b      	lsls	r3, r3, #8
 80086a2:	68fa      	ldr	r2, [r7, #12]
 80086a4:	4313      	orrs	r3, r2
 80086a6:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	68fa      	ldr	r2, [r7, #12]
 80086ae:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	681b      	ldr	r3, [r3, #0]
 80086b4:	681a      	ldr	r2, [r3, #0]
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	f042 0201 	orr.w	r2, r2, #1
 80086be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2200      	movs	r2, #0
 80086cc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80086d0:	2300      	movs	r3, #0
 80086d2:	e000      	b.n	80086d6 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80086d4:	2302      	movs	r3, #2
  }
}
 80086d6:	4618      	mov	r0, r3
 80086d8:	3714      	adds	r7, #20
 80086da:	46bd      	mov	sp, r7
 80086dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e0:	4770      	bx	lr
	...

080086e4 <HAL_I2CEx_EnableFastModePlus>:
  * @note  For all I2C4 pins fast mode plus driving capability can be enabled
  *        only by using I2C_FASTMODEPLUS_I2C4 parameter.
  * @retval None
  */
void HAL_I2CEx_EnableFastModePlus(uint32_t ConfigFastModePlus)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b085      	sub	sp, #20
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_I2C_FASTMODEPLUS(ConfigFastModePlus));

  /* Enable SYSCFG clock */
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80086ec:	4b0b      	ldr	r3, [pc, #44]	; (800871c <HAL_I2CEx_EnableFastModePlus+0x38>)
 80086ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086f0:	4a0a      	ldr	r2, [pc, #40]	; (800871c <HAL_I2CEx_EnableFastModePlus+0x38>)
 80086f2:	f043 0301 	orr.w	r3, r3, #1
 80086f6:	6613      	str	r3, [r2, #96]	; 0x60
 80086f8:	4b08      	ldr	r3, [pc, #32]	; (800871c <HAL_I2CEx_EnableFastModePlus+0x38>)
 80086fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80086fc:	f003 0301 	and.w	r3, r3, #1
 8008700:	60fb      	str	r3, [r7, #12]
 8008702:	68fb      	ldr	r3, [r7, #12]

  /* Enable fast mode plus driving capability for selected pin */
  SET_BIT(SYSCFG->CFGR1, (uint32_t)ConfigFastModePlus);
 8008704:	4b06      	ldr	r3, [pc, #24]	; (8008720 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 8008706:	685a      	ldr	r2, [r3, #4]
 8008708:	4905      	ldr	r1, [pc, #20]	; (8008720 <HAL_I2CEx_EnableFastModePlus+0x3c>)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	4313      	orrs	r3, r2
 800870e:	604b      	str	r3, [r1, #4]
}
 8008710:	bf00      	nop
 8008712:	3714      	adds	r7, #20
 8008714:	46bd      	mov	sp, r7
 8008716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800871a:	4770      	bx	lr
 800871c:	40021000 	.word	0x40021000
 8008720:	40010000 	.word	0x40010000

08008724 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008724:	b480      	push	{r7}
 8008726:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008728:	4b05      	ldr	r3, [pc, #20]	; (8008740 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	4a04      	ldr	r2, [pc, #16]	; (8008740 <HAL_PWR_EnableBkUpAccess+0x1c>)
 800872e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008732:	6013      	str	r3, [r2, #0]
}
 8008734:	bf00      	nop
 8008736:	46bd      	mov	sp, r7
 8008738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800873c:	4770      	bx	lr
 800873e:	bf00      	nop
 8008740:	40007000 	.word	0x40007000

08008744 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8008744:	b480      	push	{r7}
 8008746:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008748:	4b04      	ldr	r3, [pc, #16]	; (800875c <HAL_PWREx_GetVoltageRange+0x18>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008750:	4618      	mov	r0, r3
 8008752:	46bd      	mov	sp, r7
 8008754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008758:	4770      	bx	lr
 800875a:	bf00      	nop
 800875c:	40007000 	.word	0x40007000

08008760 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008760:	b480      	push	{r7}
 8008762:	b085      	sub	sp, #20
 8008764:	af00      	add	r7, sp, #0
 8008766:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800876e:	d130      	bne.n	80087d2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008770:	4b23      	ldr	r3, [pc, #140]	; (8008800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008778:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800877c:	d038      	beq.n	80087f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800877e:	4b20      	ldr	r3, [pc, #128]	; (8008800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8008786:	4a1e      	ldr	r2, [pc, #120]	; (8008800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008788:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800878c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800878e:	4b1d      	ldr	r3, [pc, #116]	; (8008804 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	2232      	movs	r2, #50	; 0x32
 8008794:	fb02 f303 	mul.w	r3, r2, r3
 8008798:	4a1b      	ldr	r2, [pc, #108]	; (8008808 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800879a:	fba2 2303 	umull	r2, r3, r2, r3
 800879e:	0c9b      	lsrs	r3, r3, #18
 80087a0:	3301      	adds	r3, #1
 80087a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087a4:	e002      	b.n	80087ac <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	3b01      	subs	r3, #1
 80087aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80087ac:	4b14      	ldr	r3, [pc, #80]	; (8008800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80087ae:	695b      	ldr	r3, [r3, #20]
 80087b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087b8:	d102      	bne.n	80087c0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80087ba:	68fb      	ldr	r3, [r7, #12]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1f2      	bne.n	80087a6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80087c0:	4b0f      	ldr	r3, [pc, #60]	; (8008800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80087c2:	695b      	ldr	r3, [r3, #20]
 80087c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80087c8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087cc:	d110      	bne.n	80087f0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80087ce:	2303      	movs	r3, #3
 80087d0:	e00f      	b.n	80087f2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80087d2:	4b0b      	ldr	r3, [pc, #44]	; (8008800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80087da:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80087de:	d007      	beq.n	80087f0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80087e0:	4b07      	ldr	r3, [pc, #28]	; (8008800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80087e8:	4a05      	ldr	r2, [pc, #20]	; (8008800 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80087ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80087ee:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80087f0:	2300      	movs	r3, #0
}
 80087f2:	4618      	mov	r0, r3
 80087f4:	3714      	adds	r7, #20
 80087f6:	46bd      	mov	sp, r7
 80087f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087fc:	4770      	bx	lr
 80087fe:	bf00      	nop
 8008800:	40007000 	.word	0x40007000
 8008804:	2000009c 	.word	0x2000009c
 8008808:	431bde83 	.word	0x431bde83

0800880c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	2b00      	cmp	r3, #0
 8008818:	d102      	bne.n	8008820 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800881a:	2301      	movs	r3, #1
 800881c:	f000 bc02 	b.w	8009024 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008820:	4b96      	ldr	r3, [pc, #600]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008822:	689b      	ldr	r3, [r3, #8]
 8008824:	f003 030c 	and.w	r3, r3, #12
 8008828:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800882a:	4b94      	ldr	r3, [pc, #592]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 800882c:	68db      	ldr	r3, [r3, #12]
 800882e:	f003 0303 	and.w	r3, r3, #3
 8008832:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8008834:	687b      	ldr	r3, [r7, #4]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	f003 0310 	and.w	r3, r3, #16
 800883c:	2b00      	cmp	r3, #0
 800883e:	f000 80e4 	beq.w	8008a0a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008842:	69bb      	ldr	r3, [r7, #24]
 8008844:	2b00      	cmp	r3, #0
 8008846:	d007      	beq.n	8008858 <HAL_RCC_OscConfig+0x4c>
 8008848:	69bb      	ldr	r3, [r7, #24]
 800884a:	2b0c      	cmp	r3, #12
 800884c:	f040 808b 	bne.w	8008966 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	2b01      	cmp	r3, #1
 8008854:	f040 8087 	bne.w	8008966 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008858:	4b88      	ldr	r3, [pc, #544]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f003 0302 	and.w	r3, r3, #2
 8008860:	2b00      	cmp	r3, #0
 8008862:	d005      	beq.n	8008870 <HAL_RCC_OscConfig+0x64>
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	699b      	ldr	r3, [r3, #24]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d101      	bne.n	8008870 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800886c:	2301      	movs	r3, #1
 800886e:	e3d9      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	6a1a      	ldr	r2, [r3, #32]
 8008874:	4b81      	ldr	r3, [pc, #516]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	f003 0308 	and.w	r3, r3, #8
 800887c:	2b00      	cmp	r3, #0
 800887e:	d004      	beq.n	800888a <HAL_RCC_OscConfig+0x7e>
 8008880:	4b7e      	ldr	r3, [pc, #504]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008888:	e005      	b.n	8008896 <HAL_RCC_OscConfig+0x8a>
 800888a:	4b7c      	ldr	r3, [pc, #496]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 800888c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008890:	091b      	lsrs	r3, r3, #4
 8008892:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008896:	4293      	cmp	r3, r2
 8008898:	d223      	bcs.n	80088e2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	6a1b      	ldr	r3, [r3, #32]
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 fdbe 	bl	8009420 <RCC_SetFlashLatencyFromMSIRange>
 80088a4:	4603      	mov	r3, r0
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d001      	beq.n	80088ae <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80088aa:	2301      	movs	r3, #1
 80088ac:	e3ba      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80088ae:	4b73      	ldr	r3, [pc, #460]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	4a72      	ldr	r2, [pc, #456]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80088b4:	f043 0308 	orr.w	r3, r3, #8
 80088b8:	6013      	str	r3, [r2, #0]
 80088ba:	4b70      	ldr	r3, [pc, #448]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	6a1b      	ldr	r3, [r3, #32]
 80088c6:	496d      	ldr	r1, [pc, #436]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80088c8:	4313      	orrs	r3, r2
 80088ca:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80088cc:	4b6b      	ldr	r3, [pc, #428]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80088ce:	685b      	ldr	r3, [r3, #4]
 80088d0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	69db      	ldr	r3, [r3, #28]
 80088d8:	021b      	lsls	r3, r3, #8
 80088da:	4968      	ldr	r1, [pc, #416]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80088dc:	4313      	orrs	r3, r2
 80088de:	604b      	str	r3, [r1, #4]
 80088e0:	e025      	b.n	800892e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80088e2:	4b66      	ldr	r3, [pc, #408]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	4a65      	ldr	r2, [pc, #404]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80088e8:	f043 0308 	orr.w	r3, r3, #8
 80088ec:	6013      	str	r3, [r2, #0]
 80088ee:	4b63      	ldr	r3, [pc, #396]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	6a1b      	ldr	r3, [r3, #32]
 80088fa:	4960      	ldr	r1, [pc, #384]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80088fc:	4313      	orrs	r3, r2
 80088fe:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008900:	4b5e      	ldr	r3, [pc, #376]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008902:	685b      	ldr	r3, [r3, #4]
 8008904:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	69db      	ldr	r3, [r3, #28]
 800890c:	021b      	lsls	r3, r3, #8
 800890e:	495b      	ldr	r1, [pc, #364]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008910:	4313      	orrs	r3, r2
 8008912:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008914:	69bb      	ldr	r3, [r7, #24]
 8008916:	2b00      	cmp	r3, #0
 8008918:	d109      	bne.n	800892e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800891a:	687b      	ldr	r3, [r7, #4]
 800891c:	6a1b      	ldr	r3, [r3, #32]
 800891e:	4618      	mov	r0, r3
 8008920:	f000 fd7e 	bl	8009420 <RCC_SetFlashLatencyFromMSIRange>
 8008924:	4603      	mov	r3, r0
 8008926:	2b00      	cmp	r3, #0
 8008928:	d001      	beq.n	800892e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800892a:	2301      	movs	r3, #1
 800892c:	e37a      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800892e:	f000 fc81 	bl	8009234 <HAL_RCC_GetSysClockFreq>
 8008932:	4602      	mov	r2, r0
 8008934:	4b51      	ldr	r3, [pc, #324]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008936:	689b      	ldr	r3, [r3, #8]
 8008938:	091b      	lsrs	r3, r3, #4
 800893a:	f003 030f 	and.w	r3, r3, #15
 800893e:	4950      	ldr	r1, [pc, #320]	; (8008a80 <HAL_RCC_OscConfig+0x274>)
 8008940:	5ccb      	ldrb	r3, [r1, r3]
 8008942:	f003 031f 	and.w	r3, r3, #31
 8008946:	fa22 f303 	lsr.w	r3, r2, r3
 800894a:	4a4e      	ldr	r2, [pc, #312]	; (8008a84 <HAL_RCC_OscConfig+0x278>)
 800894c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800894e:	4b4e      	ldr	r3, [pc, #312]	; (8008a88 <HAL_RCC_OscConfig+0x27c>)
 8008950:	681b      	ldr	r3, [r3, #0]
 8008952:	4618      	mov	r0, r3
 8008954:	f7fc fc72 	bl	800523c <HAL_InitTick>
 8008958:	4603      	mov	r3, r0
 800895a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800895c:	7bfb      	ldrb	r3, [r7, #15]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d052      	beq.n	8008a08 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8008962:	7bfb      	ldrb	r3, [r7, #15]
 8008964:	e35e      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8008966:	687b      	ldr	r3, [r7, #4]
 8008968:	699b      	ldr	r3, [r3, #24]
 800896a:	2b00      	cmp	r3, #0
 800896c:	d032      	beq.n	80089d4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800896e:	4b43      	ldr	r3, [pc, #268]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	4a42      	ldr	r2, [pc, #264]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008974:	f043 0301 	orr.w	r3, r3, #1
 8008978:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800897a:	f7fc fdb7 	bl	80054ec <HAL_GetTick>
 800897e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008980:	e008      	b.n	8008994 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008982:	f7fc fdb3 	bl	80054ec <HAL_GetTick>
 8008986:	4602      	mov	r2, r0
 8008988:	693b      	ldr	r3, [r7, #16]
 800898a:	1ad3      	subs	r3, r2, r3
 800898c:	2b02      	cmp	r3, #2
 800898e:	d901      	bls.n	8008994 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8008990:	2303      	movs	r3, #3
 8008992:	e347      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008994:	4b39      	ldr	r3, [pc, #228]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f003 0302 	and.w	r3, r3, #2
 800899c:	2b00      	cmp	r3, #0
 800899e:	d0f0      	beq.n	8008982 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80089a0:	4b36      	ldr	r3, [pc, #216]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a35      	ldr	r2, [pc, #212]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80089a6:	f043 0308 	orr.w	r3, r3, #8
 80089aa:	6013      	str	r3, [r2, #0]
 80089ac:	4b33      	ldr	r3, [pc, #204]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80089b4:	687b      	ldr	r3, [r7, #4]
 80089b6:	6a1b      	ldr	r3, [r3, #32]
 80089b8:	4930      	ldr	r1, [pc, #192]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80089ba:	4313      	orrs	r3, r2
 80089bc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80089be:	4b2f      	ldr	r3, [pc, #188]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80089c0:	685b      	ldr	r3, [r3, #4]
 80089c2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	69db      	ldr	r3, [r3, #28]
 80089ca:	021b      	lsls	r3, r3, #8
 80089cc:	492b      	ldr	r1, [pc, #172]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80089ce:	4313      	orrs	r3, r2
 80089d0:	604b      	str	r3, [r1, #4]
 80089d2:	e01a      	b.n	8008a0a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80089d4:	4b29      	ldr	r3, [pc, #164]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80089d6:	681b      	ldr	r3, [r3, #0]
 80089d8:	4a28      	ldr	r2, [pc, #160]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80089da:	f023 0301 	bic.w	r3, r3, #1
 80089de:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80089e0:	f7fc fd84 	bl	80054ec <HAL_GetTick>
 80089e4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80089e6:	e008      	b.n	80089fa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80089e8:	f7fc fd80 	bl	80054ec <HAL_GetTick>
 80089ec:	4602      	mov	r2, r0
 80089ee:	693b      	ldr	r3, [r7, #16]
 80089f0:	1ad3      	subs	r3, r2, r3
 80089f2:	2b02      	cmp	r3, #2
 80089f4:	d901      	bls.n	80089fa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80089f6:	2303      	movs	r3, #3
 80089f8:	e314      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80089fa:	4b20      	ldr	r3, [pc, #128]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	f003 0302 	and.w	r3, r3, #2
 8008a02:	2b00      	cmp	r3, #0
 8008a04:	d1f0      	bne.n	80089e8 <HAL_RCC_OscConfig+0x1dc>
 8008a06:	e000      	b.n	8008a0a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8008a08:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	681b      	ldr	r3, [r3, #0]
 8008a0e:	f003 0301 	and.w	r3, r3, #1
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d073      	beq.n	8008afe <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8008a16:	69bb      	ldr	r3, [r7, #24]
 8008a18:	2b08      	cmp	r3, #8
 8008a1a:	d005      	beq.n	8008a28 <HAL_RCC_OscConfig+0x21c>
 8008a1c:	69bb      	ldr	r3, [r7, #24]
 8008a1e:	2b0c      	cmp	r3, #12
 8008a20:	d10e      	bne.n	8008a40 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008a22:	697b      	ldr	r3, [r7, #20]
 8008a24:	2b03      	cmp	r3, #3
 8008a26:	d10b      	bne.n	8008a40 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008a28:	4b14      	ldr	r3, [pc, #80]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008a2a:	681b      	ldr	r3, [r3, #0]
 8008a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008a30:	2b00      	cmp	r3, #0
 8008a32:	d063      	beq.n	8008afc <HAL_RCC_OscConfig+0x2f0>
 8008a34:	687b      	ldr	r3, [r7, #4]
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	2b00      	cmp	r3, #0
 8008a3a:	d15f      	bne.n	8008afc <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008a3c:	2301      	movs	r3, #1
 8008a3e:	e2f1      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a48:	d106      	bne.n	8008a58 <HAL_RCC_OscConfig+0x24c>
 8008a4a:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	4a0b      	ldr	r2, [pc, #44]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008a50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a54:	6013      	str	r3, [r2, #0]
 8008a56:	e025      	b.n	8008aa4 <HAL_RCC_OscConfig+0x298>
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	685b      	ldr	r3, [r3, #4]
 8008a5c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008a60:	d114      	bne.n	8008a8c <HAL_RCC_OscConfig+0x280>
 8008a62:	4b06      	ldr	r3, [pc, #24]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	4a05      	ldr	r2, [pc, #20]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008a68:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008a6c:	6013      	str	r3, [r2, #0]
 8008a6e:	4b03      	ldr	r3, [pc, #12]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008a70:	681b      	ldr	r3, [r3, #0]
 8008a72:	4a02      	ldr	r2, [pc, #8]	; (8008a7c <HAL_RCC_OscConfig+0x270>)
 8008a74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008a78:	6013      	str	r3, [r2, #0]
 8008a7a:	e013      	b.n	8008aa4 <HAL_RCC_OscConfig+0x298>
 8008a7c:	40021000 	.word	0x40021000
 8008a80:	0801d54c 	.word	0x0801d54c
 8008a84:	2000009c 	.word	0x2000009c
 8008a88:	200000a0 	.word	0x200000a0
 8008a8c:	4ba0      	ldr	r3, [pc, #640]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008a8e:	681b      	ldr	r3, [r3, #0]
 8008a90:	4a9f      	ldr	r2, [pc, #636]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008a92:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008a96:	6013      	str	r3, [r2, #0]
 8008a98:	4b9d      	ldr	r3, [pc, #628]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	4a9c      	ldr	r2, [pc, #624]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008a9e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008aa4:	687b      	ldr	r3, [r7, #4]
 8008aa6:	685b      	ldr	r3, [r3, #4]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	d013      	beq.n	8008ad4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008aac:	f7fc fd1e 	bl	80054ec <HAL_GetTick>
 8008ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ab2:	e008      	b.n	8008ac6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008ab4:	f7fc fd1a 	bl	80054ec <HAL_GetTick>
 8008ab8:	4602      	mov	r2, r0
 8008aba:	693b      	ldr	r3, [r7, #16]
 8008abc:	1ad3      	subs	r3, r2, r3
 8008abe:	2b64      	cmp	r3, #100	; 0x64
 8008ac0:	d901      	bls.n	8008ac6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8008ac2:	2303      	movs	r3, #3
 8008ac4:	e2ae      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008ac6:	4b92      	ldr	r3, [pc, #584]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d0f0      	beq.n	8008ab4 <HAL_RCC_OscConfig+0x2a8>
 8008ad2:	e014      	b.n	8008afe <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ad4:	f7fc fd0a 	bl	80054ec <HAL_GetTick>
 8008ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008ada:	e008      	b.n	8008aee <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008adc:	f7fc fd06 	bl	80054ec <HAL_GetTick>
 8008ae0:	4602      	mov	r2, r0
 8008ae2:	693b      	ldr	r3, [r7, #16]
 8008ae4:	1ad3      	subs	r3, r2, r3
 8008ae6:	2b64      	cmp	r3, #100	; 0x64
 8008ae8:	d901      	bls.n	8008aee <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8008aea:	2303      	movs	r3, #3
 8008aec:	e29a      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8008aee:	4b88      	ldr	r3, [pc, #544]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d1f0      	bne.n	8008adc <HAL_RCC_OscConfig+0x2d0>
 8008afa:	e000      	b.n	8008afe <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d060      	beq.n	8008bcc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008b0a:	69bb      	ldr	r3, [r7, #24]
 8008b0c:	2b04      	cmp	r3, #4
 8008b0e:	d005      	beq.n	8008b1c <HAL_RCC_OscConfig+0x310>
 8008b10:	69bb      	ldr	r3, [r7, #24]
 8008b12:	2b0c      	cmp	r3, #12
 8008b14:	d119      	bne.n	8008b4a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	2b02      	cmp	r3, #2
 8008b1a:	d116      	bne.n	8008b4a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b1c:	4b7c      	ldr	r3, [pc, #496]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008b1e:	681b      	ldr	r3, [r3, #0]
 8008b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b24:	2b00      	cmp	r3, #0
 8008b26:	d005      	beq.n	8008b34 <HAL_RCC_OscConfig+0x328>
 8008b28:	687b      	ldr	r3, [r7, #4]
 8008b2a:	68db      	ldr	r3, [r3, #12]
 8008b2c:	2b00      	cmp	r3, #0
 8008b2e:	d101      	bne.n	8008b34 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008b30:	2301      	movs	r3, #1
 8008b32:	e277      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b34:	4b76      	ldr	r3, [pc, #472]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008b36:	685b      	ldr	r3, [r3, #4]
 8008b38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008b3c:	687b      	ldr	r3, [r7, #4]
 8008b3e:	691b      	ldr	r3, [r3, #16]
 8008b40:	061b      	lsls	r3, r3, #24
 8008b42:	4973      	ldr	r1, [pc, #460]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008b48:	e040      	b.n	8008bcc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008b4a:	687b      	ldr	r3, [r7, #4]
 8008b4c:	68db      	ldr	r3, [r3, #12]
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d023      	beq.n	8008b9a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008b52:	4b6f      	ldr	r3, [pc, #444]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008b54:	681b      	ldr	r3, [r3, #0]
 8008b56:	4a6e      	ldr	r2, [pc, #440]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008b58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008b5c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008b5e:	f7fc fcc5 	bl	80054ec <HAL_GetTick>
 8008b62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b64:	e008      	b.n	8008b78 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008b66:	f7fc fcc1 	bl	80054ec <HAL_GetTick>
 8008b6a:	4602      	mov	r2, r0
 8008b6c:	693b      	ldr	r3, [r7, #16]
 8008b6e:	1ad3      	subs	r3, r2, r3
 8008b70:	2b02      	cmp	r3, #2
 8008b72:	d901      	bls.n	8008b78 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8008b74:	2303      	movs	r3, #3
 8008b76:	e255      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008b78:	4b65      	ldr	r3, [pc, #404]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d0f0      	beq.n	8008b66 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008b84:	4b62      	ldr	r3, [pc, #392]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008b86:	685b      	ldr	r3, [r3, #4]
 8008b88:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	691b      	ldr	r3, [r3, #16]
 8008b90:	061b      	lsls	r3, r3, #24
 8008b92:	495f      	ldr	r1, [pc, #380]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008b94:	4313      	orrs	r3, r2
 8008b96:	604b      	str	r3, [r1, #4]
 8008b98:	e018      	b.n	8008bcc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008b9a:	4b5d      	ldr	r3, [pc, #372]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	4a5c      	ldr	r2, [pc, #368]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008ba0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008ba4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ba6:	f7fc fca1 	bl	80054ec <HAL_GetTick>
 8008baa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008bac:	e008      	b.n	8008bc0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008bae:	f7fc fc9d 	bl	80054ec <HAL_GetTick>
 8008bb2:	4602      	mov	r2, r0
 8008bb4:	693b      	ldr	r3, [r7, #16]
 8008bb6:	1ad3      	subs	r3, r2, r3
 8008bb8:	2b02      	cmp	r3, #2
 8008bba:	d901      	bls.n	8008bc0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8008bbc:	2303      	movs	r3, #3
 8008bbe:	e231      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8008bc0:	4b53      	ldr	r3, [pc, #332]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008bc2:	681b      	ldr	r3, [r3, #0]
 8008bc4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d1f0      	bne.n	8008bae <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	f003 0308 	and.w	r3, r3, #8
 8008bd4:	2b00      	cmp	r3, #0
 8008bd6:	d03c      	beq.n	8008c52 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	695b      	ldr	r3, [r3, #20]
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d01c      	beq.n	8008c1a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008be0:	4b4b      	ldr	r3, [pc, #300]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008be2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008be6:	4a4a      	ldr	r2, [pc, #296]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008be8:	f043 0301 	orr.w	r3, r3, #1
 8008bec:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008bf0:	f7fc fc7c 	bl	80054ec <HAL_GetTick>
 8008bf4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008bf6:	e008      	b.n	8008c0a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008bf8:	f7fc fc78 	bl	80054ec <HAL_GetTick>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d901      	bls.n	8008c0a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e20c      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008c0a:	4b41      	ldr	r3, [pc, #260]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008c0c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c10:	f003 0302 	and.w	r3, r3, #2
 8008c14:	2b00      	cmp	r3, #0
 8008c16:	d0ef      	beq.n	8008bf8 <HAL_RCC_OscConfig+0x3ec>
 8008c18:	e01b      	b.n	8008c52 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008c1a:	4b3d      	ldr	r3, [pc, #244]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008c1c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c20:	4a3b      	ldr	r2, [pc, #236]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008c22:	f023 0301 	bic.w	r3, r3, #1
 8008c26:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008c2a:	f7fc fc5f 	bl	80054ec <HAL_GetTick>
 8008c2e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c30:	e008      	b.n	8008c44 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008c32:	f7fc fc5b 	bl	80054ec <HAL_GetTick>
 8008c36:	4602      	mov	r2, r0
 8008c38:	693b      	ldr	r3, [r7, #16]
 8008c3a:	1ad3      	subs	r3, r2, r3
 8008c3c:	2b02      	cmp	r3, #2
 8008c3e:	d901      	bls.n	8008c44 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008c40:	2303      	movs	r3, #3
 8008c42:	e1ef      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008c44:	4b32      	ldr	r3, [pc, #200]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008c46:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008c4a:	f003 0302 	and.w	r3, r3, #2
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1ef      	bne.n	8008c32 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	f003 0304 	and.w	r3, r3, #4
 8008c5a:	2b00      	cmp	r3, #0
 8008c5c:	f000 80a6 	beq.w	8008dac <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008c60:	2300      	movs	r3, #0
 8008c62:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8008c64:	4b2a      	ldr	r3, [pc, #168]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008c66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c6c:	2b00      	cmp	r3, #0
 8008c6e:	d10d      	bne.n	8008c8c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008c70:	4b27      	ldr	r3, [pc, #156]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008c72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c74:	4a26      	ldr	r2, [pc, #152]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008c76:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c7a:	6593      	str	r3, [r2, #88]	; 0x58
 8008c7c:	4b24      	ldr	r3, [pc, #144]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008c7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008c80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c84:	60bb      	str	r3, [r7, #8]
 8008c86:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008c88:	2301      	movs	r3, #1
 8008c8a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008c8c:	4b21      	ldr	r3, [pc, #132]	; (8008d14 <HAL_RCC_OscConfig+0x508>)
 8008c8e:	681b      	ldr	r3, [r3, #0]
 8008c90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008c94:	2b00      	cmp	r3, #0
 8008c96:	d118      	bne.n	8008cca <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c98:	4b1e      	ldr	r3, [pc, #120]	; (8008d14 <HAL_RCC_OscConfig+0x508>)
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	4a1d      	ldr	r2, [pc, #116]	; (8008d14 <HAL_RCC_OscConfig+0x508>)
 8008c9e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ca2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008ca4:	f7fc fc22 	bl	80054ec <HAL_GetTick>
 8008ca8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008caa:	e008      	b.n	8008cbe <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008cac:	f7fc fc1e 	bl	80054ec <HAL_GetTick>
 8008cb0:	4602      	mov	r2, r0
 8008cb2:	693b      	ldr	r3, [r7, #16]
 8008cb4:	1ad3      	subs	r3, r2, r3
 8008cb6:	2b02      	cmp	r3, #2
 8008cb8:	d901      	bls.n	8008cbe <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8008cba:	2303      	movs	r3, #3
 8008cbc:	e1b2      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008cbe:	4b15      	ldr	r3, [pc, #84]	; (8008d14 <HAL_RCC_OscConfig+0x508>)
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	d0f0      	beq.n	8008cac <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	689b      	ldr	r3, [r3, #8]
 8008cce:	2b01      	cmp	r3, #1
 8008cd0:	d108      	bne.n	8008ce4 <HAL_RCC_OscConfig+0x4d8>
 8008cd2:	4b0f      	ldr	r3, [pc, #60]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008cd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cd8:	4a0d      	ldr	r2, [pc, #52]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008cda:	f043 0301 	orr.w	r3, r3, #1
 8008cde:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008ce2:	e029      	b.n	8008d38 <HAL_RCC_OscConfig+0x52c>
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	2b05      	cmp	r3, #5
 8008cea:	d115      	bne.n	8008d18 <HAL_RCC_OscConfig+0x50c>
 8008cec:	4b08      	ldr	r3, [pc, #32]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008cee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008cf2:	4a07      	ldr	r2, [pc, #28]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008cf4:	f043 0304 	orr.w	r3, r3, #4
 8008cf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008cfc:	4b04      	ldr	r3, [pc, #16]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008cfe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d02:	4a03      	ldr	r2, [pc, #12]	; (8008d10 <HAL_RCC_OscConfig+0x504>)
 8008d04:	f043 0301 	orr.w	r3, r3, #1
 8008d08:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d0c:	e014      	b.n	8008d38 <HAL_RCC_OscConfig+0x52c>
 8008d0e:	bf00      	nop
 8008d10:	40021000 	.word	0x40021000
 8008d14:	40007000 	.word	0x40007000
 8008d18:	4b9a      	ldr	r3, [pc, #616]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d1e:	4a99      	ldr	r2, [pc, #612]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008d20:	f023 0301 	bic.w	r3, r3, #1
 8008d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008d28:	4b96      	ldr	r3, [pc, #600]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d2e:	4a95      	ldr	r2, [pc, #596]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008d30:	f023 0304 	bic.w	r3, r3, #4
 8008d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	689b      	ldr	r3, [r3, #8]
 8008d3c:	2b00      	cmp	r3, #0
 8008d3e:	d016      	beq.n	8008d6e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d40:	f7fc fbd4 	bl	80054ec <HAL_GetTick>
 8008d44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d46:	e00a      	b.n	8008d5e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d48:	f7fc fbd0 	bl	80054ec <HAL_GetTick>
 8008d4c:	4602      	mov	r2, r0
 8008d4e:	693b      	ldr	r3, [r7, #16]
 8008d50:	1ad3      	subs	r3, r2, r3
 8008d52:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d901      	bls.n	8008d5e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8008d5a:	2303      	movs	r3, #3
 8008d5c:	e162      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008d5e:	4b89      	ldr	r3, [pc, #548]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d64:	f003 0302 	and.w	r3, r3, #2
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0ed      	beq.n	8008d48 <HAL_RCC_OscConfig+0x53c>
 8008d6c:	e015      	b.n	8008d9a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008d6e:	f7fc fbbd 	bl	80054ec <HAL_GetTick>
 8008d72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008d74:	e00a      	b.n	8008d8c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008d76:	f7fc fbb9 	bl	80054ec <HAL_GetTick>
 8008d7a:	4602      	mov	r2, r0
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	1ad3      	subs	r3, r2, r3
 8008d80:	f241 3288 	movw	r2, #5000	; 0x1388
 8008d84:	4293      	cmp	r3, r2
 8008d86:	d901      	bls.n	8008d8c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008d88:	2303      	movs	r3, #3
 8008d8a:	e14b      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008d8c:	4b7d      	ldr	r3, [pc, #500]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008d8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008d92:	f003 0302 	and.w	r3, r3, #2
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d1ed      	bne.n	8008d76 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008d9a:	7ffb      	ldrb	r3, [r7, #31]
 8008d9c:	2b01      	cmp	r3, #1
 8008d9e:	d105      	bne.n	8008dac <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008da0:	4b78      	ldr	r3, [pc, #480]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008da2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008da4:	4a77      	ldr	r2, [pc, #476]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008da6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008daa:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	f003 0320 	and.w	r3, r3, #32
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	d03c      	beq.n	8008e32 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d01c      	beq.n	8008dfa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8008dc0:	4b70      	ldr	r3, [pc, #448]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008dc2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008dc6:	4a6f      	ldr	r2, [pc, #444]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008dc8:	f043 0301 	orr.w	r3, r3, #1
 8008dcc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008dd0:	f7fc fb8c 	bl	80054ec <HAL_GetTick>
 8008dd4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008dd6:	e008      	b.n	8008dea <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008dd8:	f7fc fb88 	bl	80054ec <HAL_GetTick>
 8008ddc:	4602      	mov	r2, r0
 8008dde:	693b      	ldr	r3, [r7, #16]
 8008de0:	1ad3      	subs	r3, r2, r3
 8008de2:	2b02      	cmp	r3, #2
 8008de4:	d901      	bls.n	8008dea <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8008de6:	2303      	movs	r3, #3
 8008de8:	e11c      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8008dea:	4b66      	ldr	r3, [pc, #408]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008dec:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008df0:	f003 0302 	and.w	r3, r3, #2
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	d0ef      	beq.n	8008dd8 <HAL_RCC_OscConfig+0x5cc>
 8008df8:	e01b      	b.n	8008e32 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8008dfa:	4b62      	ldr	r3, [pc, #392]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008dfc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e00:	4a60      	ldr	r2, [pc, #384]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008e02:	f023 0301 	bic.w	r3, r3, #1
 8008e06:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008e0a:	f7fc fb6f 	bl	80054ec <HAL_GetTick>
 8008e0e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e10:	e008      	b.n	8008e24 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8008e12:	f7fc fb6b 	bl	80054ec <HAL_GetTick>
 8008e16:	4602      	mov	r2, r0
 8008e18:	693b      	ldr	r3, [r7, #16]
 8008e1a:	1ad3      	subs	r3, r2, r3
 8008e1c:	2b02      	cmp	r3, #2
 8008e1e:	d901      	bls.n	8008e24 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8008e20:	2303      	movs	r3, #3
 8008e22:	e0ff      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8008e24:	4b57      	ldr	r3, [pc, #348]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008e26:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8008e2a:	f003 0302 	and.w	r3, r3, #2
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d1ef      	bne.n	8008e12 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	f000 80f3 	beq.w	8009022 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e40:	2b02      	cmp	r3, #2
 8008e42:	f040 80c9 	bne.w	8008fd8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008e46:	4b4f      	ldr	r3, [pc, #316]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008e48:	68db      	ldr	r3, [r3, #12]
 8008e4a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e4c:	697b      	ldr	r3, [r7, #20]
 8008e4e:	f003 0203 	and.w	r2, r3, #3
 8008e52:	687b      	ldr	r3, [r7, #4]
 8008e54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008e56:	429a      	cmp	r2, r3
 8008e58:	d12c      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e5a:	697b      	ldr	r3, [r7, #20]
 8008e5c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008e64:	3b01      	subs	r3, #1
 8008e66:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008e68:	429a      	cmp	r2, r3
 8008e6a:	d123      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e6c:	697b      	ldr	r3, [r7, #20]
 8008e6e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008e72:	687b      	ldr	r3, [r7, #4]
 8008e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008e76:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d11b      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e7c:	697b      	ldr	r3, [r7, #20]
 8008e7e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e86:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008e88:	429a      	cmp	r2, r3
 8008e8a:	d113      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008e8c:	697b      	ldr	r3, [r7, #20]
 8008e8e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008e92:	687b      	ldr	r3, [r7, #4]
 8008e94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e96:	085b      	lsrs	r3, r3, #1
 8008e98:	3b01      	subs	r3, #1
 8008e9a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8008e9c:	429a      	cmp	r2, r3
 8008e9e:	d109      	bne.n	8008eb4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008ea0:	697b      	ldr	r3, [r7, #20]
 8008ea2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008eaa:	085b      	lsrs	r3, r3, #1
 8008eac:	3b01      	subs	r3, #1
 8008eae:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008eb0:	429a      	cmp	r2, r3
 8008eb2:	d06b      	beq.n	8008f8c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008eb4:	69bb      	ldr	r3, [r7, #24]
 8008eb6:	2b0c      	cmp	r3, #12
 8008eb8:	d062      	beq.n	8008f80 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008eba:	4b32      	ldr	r3, [pc, #200]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008ebc:	681b      	ldr	r3, [r3, #0]
 8008ebe:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d001      	beq.n	8008eca <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8008ec6:	2301      	movs	r3, #1
 8008ec8:	e0ac      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008eca:	4b2e      	ldr	r3, [pc, #184]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a2d      	ldr	r2, [pc, #180]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008ed0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008ed4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008ed6:	f7fc fb09 	bl	80054ec <HAL_GetTick>
 8008eda:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008edc:	e008      	b.n	8008ef0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ede:	f7fc fb05 	bl	80054ec <HAL_GetTick>
 8008ee2:	4602      	mov	r2, r0
 8008ee4:	693b      	ldr	r3, [r7, #16]
 8008ee6:	1ad3      	subs	r3, r2, r3
 8008ee8:	2b02      	cmp	r3, #2
 8008eea:	d901      	bls.n	8008ef0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8008eec:	2303      	movs	r3, #3
 8008eee:	e099      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ef0:	4b24      	ldr	r3, [pc, #144]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ef8:	2b00      	cmp	r3, #0
 8008efa:	d1f0      	bne.n	8008ede <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008efc:	4b21      	ldr	r3, [pc, #132]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008efe:	68da      	ldr	r2, [r3, #12]
 8008f00:	4b21      	ldr	r3, [pc, #132]	; (8008f88 <HAL_RCC_OscConfig+0x77c>)
 8008f02:	4013      	ands	r3, r2
 8008f04:	687a      	ldr	r2, [r7, #4]
 8008f06:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008f08:	687a      	ldr	r2, [r7, #4]
 8008f0a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008f0c:	3a01      	subs	r2, #1
 8008f0e:	0112      	lsls	r2, r2, #4
 8008f10:	4311      	orrs	r1, r2
 8008f12:	687a      	ldr	r2, [r7, #4]
 8008f14:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008f16:	0212      	lsls	r2, r2, #8
 8008f18:	4311      	orrs	r1, r2
 8008f1a:	687a      	ldr	r2, [r7, #4]
 8008f1c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008f1e:	0852      	lsrs	r2, r2, #1
 8008f20:	3a01      	subs	r2, #1
 8008f22:	0552      	lsls	r2, r2, #21
 8008f24:	4311      	orrs	r1, r2
 8008f26:	687a      	ldr	r2, [r7, #4]
 8008f28:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008f2a:	0852      	lsrs	r2, r2, #1
 8008f2c:	3a01      	subs	r2, #1
 8008f2e:	0652      	lsls	r2, r2, #25
 8008f30:	4311      	orrs	r1, r2
 8008f32:	687a      	ldr	r2, [r7, #4]
 8008f34:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008f36:	06d2      	lsls	r2, r2, #27
 8008f38:	430a      	orrs	r2, r1
 8008f3a:	4912      	ldr	r1, [pc, #72]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008f3c:	4313      	orrs	r3, r2
 8008f3e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008f40:	4b10      	ldr	r3, [pc, #64]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	4a0f      	ldr	r2, [pc, #60]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008f46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f4a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008f4c:	4b0d      	ldr	r3, [pc, #52]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008f4e:	68db      	ldr	r3, [r3, #12]
 8008f50:	4a0c      	ldr	r2, [pc, #48]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008f52:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008f56:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008f58:	f7fc fac8 	bl	80054ec <HAL_GetTick>
 8008f5c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f5e:	e008      	b.n	8008f72 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008f60:	f7fc fac4 	bl	80054ec <HAL_GetTick>
 8008f64:	4602      	mov	r2, r0
 8008f66:	693b      	ldr	r3, [r7, #16]
 8008f68:	1ad3      	subs	r3, r2, r3
 8008f6a:	2b02      	cmp	r3, #2
 8008f6c:	d901      	bls.n	8008f72 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8008f6e:	2303      	movs	r3, #3
 8008f70:	e058      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f72:	4b04      	ldr	r3, [pc, #16]	; (8008f84 <HAL_RCC_OscConfig+0x778>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f7a:	2b00      	cmp	r3, #0
 8008f7c:	d0f0      	beq.n	8008f60 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008f7e:	e050      	b.n	8009022 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008f80:	2301      	movs	r3, #1
 8008f82:	e04f      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
 8008f84:	40021000 	.word	0x40021000
 8008f88:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008f8c:	4b27      	ldr	r3, [pc, #156]	; (800902c <HAL_RCC_OscConfig+0x820>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d144      	bne.n	8009022 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008f98:	4b24      	ldr	r3, [pc, #144]	; (800902c <HAL_RCC_OscConfig+0x820>)
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	4a23      	ldr	r2, [pc, #140]	; (800902c <HAL_RCC_OscConfig+0x820>)
 8008f9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fa2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008fa4:	4b21      	ldr	r3, [pc, #132]	; (800902c <HAL_RCC_OscConfig+0x820>)
 8008fa6:	68db      	ldr	r3, [r3, #12]
 8008fa8:	4a20      	ldr	r2, [pc, #128]	; (800902c <HAL_RCC_OscConfig+0x820>)
 8008faa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008fae:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008fb0:	f7fc fa9c 	bl	80054ec <HAL_GetTick>
 8008fb4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fb6:	e008      	b.n	8008fca <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008fb8:	f7fc fa98 	bl	80054ec <HAL_GetTick>
 8008fbc:	4602      	mov	r2, r0
 8008fbe:	693b      	ldr	r3, [r7, #16]
 8008fc0:	1ad3      	subs	r3, r2, r3
 8008fc2:	2b02      	cmp	r3, #2
 8008fc4:	d901      	bls.n	8008fca <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8008fc6:	2303      	movs	r3, #3
 8008fc8:	e02c      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008fca:	4b18      	ldr	r3, [pc, #96]	; (800902c <HAL_RCC_OscConfig+0x820>)
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d0f0      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x7ac>
 8008fd6:	e024      	b.n	8009022 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008fd8:	69bb      	ldr	r3, [r7, #24]
 8008fda:	2b0c      	cmp	r3, #12
 8008fdc:	d01f      	beq.n	800901e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008fde:	4b13      	ldr	r3, [pc, #76]	; (800902c <HAL_RCC_OscConfig+0x820>)
 8008fe0:	681b      	ldr	r3, [r3, #0]
 8008fe2:	4a12      	ldr	r2, [pc, #72]	; (800902c <HAL_RCC_OscConfig+0x820>)
 8008fe4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008fe8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fea:	f7fc fa7f 	bl	80054ec <HAL_GetTick>
 8008fee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ff0:	e008      	b.n	8009004 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008ff2:	f7fc fa7b 	bl	80054ec <HAL_GetTick>
 8008ff6:	4602      	mov	r2, r0
 8008ff8:	693b      	ldr	r3, [r7, #16]
 8008ffa:	1ad3      	subs	r3, r2, r3
 8008ffc:	2b02      	cmp	r3, #2
 8008ffe:	d901      	bls.n	8009004 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8009000:	2303      	movs	r3, #3
 8009002:	e00f      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8009004:	4b09      	ldr	r3, [pc, #36]	; (800902c <HAL_RCC_OscConfig+0x820>)
 8009006:	681b      	ldr	r3, [r3, #0]
 8009008:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800900c:	2b00      	cmp	r3, #0
 800900e:	d1f0      	bne.n	8008ff2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8009010:	4b06      	ldr	r3, [pc, #24]	; (800902c <HAL_RCC_OscConfig+0x820>)
 8009012:	68da      	ldr	r2, [r3, #12]
 8009014:	4905      	ldr	r1, [pc, #20]	; (800902c <HAL_RCC_OscConfig+0x820>)
 8009016:	4b06      	ldr	r3, [pc, #24]	; (8009030 <HAL_RCC_OscConfig+0x824>)
 8009018:	4013      	ands	r3, r2
 800901a:	60cb      	str	r3, [r1, #12]
 800901c:	e001      	b.n	8009022 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800901e:	2301      	movs	r3, #1
 8009020:	e000      	b.n	8009024 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8009022:	2300      	movs	r3, #0
}
 8009024:	4618      	mov	r0, r3
 8009026:	3720      	adds	r7, #32
 8009028:	46bd      	mov	sp, r7
 800902a:	bd80      	pop	{r7, pc}
 800902c:	40021000 	.word	0x40021000
 8009030:	feeefffc 	.word	0xfeeefffc

08009034 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009034:	b580      	push	{r7, lr}
 8009036:	b084      	sub	sp, #16
 8009038:	af00      	add	r7, sp, #0
 800903a:	6078      	str	r0, [r7, #4]
 800903c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800903e:	687b      	ldr	r3, [r7, #4]
 8009040:	2b00      	cmp	r3, #0
 8009042:	d101      	bne.n	8009048 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8009044:	2301      	movs	r3, #1
 8009046:	e0e7      	b.n	8009218 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8009048:	4b75      	ldr	r3, [pc, #468]	; (8009220 <HAL_RCC_ClockConfig+0x1ec>)
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	f003 0307 	and.w	r3, r3, #7
 8009050:	683a      	ldr	r2, [r7, #0]
 8009052:	429a      	cmp	r2, r3
 8009054:	d910      	bls.n	8009078 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009056:	4b72      	ldr	r3, [pc, #456]	; (8009220 <HAL_RCC_ClockConfig+0x1ec>)
 8009058:	681b      	ldr	r3, [r3, #0]
 800905a:	f023 0207 	bic.w	r2, r3, #7
 800905e:	4970      	ldr	r1, [pc, #448]	; (8009220 <HAL_RCC_ClockConfig+0x1ec>)
 8009060:	683b      	ldr	r3, [r7, #0]
 8009062:	4313      	orrs	r3, r2
 8009064:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009066:	4b6e      	ldr	r3, [pc, #440]	; (8009220 <HAL_RCC_ClockConfig+0x1ec>)
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f003 0307 	and.w	r3, r3, #7
 800906e:	683a      	ldr	r2, [r7, #0]
 8009070:	429a      	cmp	r2, r3
 8009072:	d001      	beq.n	8009078 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8009074:	2301      	movs	r3, #1
 8009076:	e0cf      	b.n	8009218 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	f003 0302 	and.w	r3, r3, #2
 8009080:	2b00      	cmp	r3, #0
 8009082:	d010      	beq.n	80090a6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	689a      	ldr	r2, [r3, #8]
 8009088:	4b66      	ldr	r3, [pc, #408]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 800908a:	689b      	ldr	r3, [r3, #8]
 800908c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009090:	429a      	cmp	r2, r3
 8009092:	d908      	bls.n	80090a6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009094:	4b63      	ldr	r3, [pc, #396]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 8009096:	689b      	ldr	r3, [r3, #8]
 8009098:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800909c:	687b      	ldr	r3, [r7, #4]
 800909e:	689b      	ldr	r3, [r3, #8]
 80090a0:	4960      	ldr	r1, [pc, #384]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 80090a2:	4313      	orrs	r3, r2
 80090a4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	f003 0301 	and.w	r3, r3, #1
 80090ae:	2b00      	cmp	r3, #0
 80090b0:	d04c      	beq.n	800914c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80090b2:	687b      	ldr	r3, [r7, #4]
 80090b4:	685b      	ldr	r3, [r3, #4]
 80090b6:	2b03      	cmp	r3, #3
 80090b8:	d107      	bne.n	80090ca <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80090ba:	4b5a      	ldr	r3, [pc, #360]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d121      	bne.n	800910a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80090c6:	2301      	movs	r3, #1
 80090c8:	e0a6      	b.n	8009218 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	685b      	ldr	r3, [r3, #4]
 80090ce:	2b02      	cmp	r3, #2
 80090d0:	d107      	bne.n	80090e2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80090d2:	4b54      	ldr	r3, [pc, #336]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 80090d4:	681b      	ldr	r3, [r3, #0]
 80090d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80090da:	2b00      	cmp	r3, #0
 80090dc:	d115      	bne.n	800910a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80090de:	2301      	movs	r3, #1
 80090e0:	e09a      	b.n	8009218 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	685b      	ldr	r3, [r3, #4]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d107      	bne.n	80090fa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80090ea:	4b4e      	ldr	r3, [pc, #312]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	f003 0302 	and.w	r3, r3, #2
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d109      	bne.n	800910a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80090f6:	2301      	movs	r3, #1
 80090f8:	e08e      	b.n	8009218 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80090fa:	4b4a      	ldr	r3, [pc, #296]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009102:	2b00      	cmp	r3, #0
 8009104:	d101      	bne.n	800910a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8009106:	2301      	movs	r3, #1
 8009108:	e086      	b.n	8009218 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800910a:	4b46      	ldr	r3, [pc, #280]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 800910c:	689b      	ldr	r3, [r3, #8]
 800910e:	f023 0203 	bic.w	r2, r3, #3
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	4943      	ldr	r1, [pc, #268]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 8009118:	4313      	orrs	r3, r2
 800911a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800911c:	f7fc f9e6 	bl	80054ec <HAL_GetTick>
 8009120:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009122:	e00a      	b.n	800913a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009124:	f7fc f9e2 	bl	80054ec <HAL_GetTick>
 8009128:	4602      	mov	r2, r0
 800912a:	68fb      	ldr	r3, [r7, #12]
 800912c:	1ad3      	subs	r3, r2, r3
 800912e:	f241 3288 	movw	r2, #5000	; 0x1388
 8009132:	4293      	cmp	r3, r2
 8009134:	d901      	bls.n	800913a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8009136:	2303      	movs	r3, #3
 8009138:	e06e      	b.n	8009218 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800913a:	4b3a      	ldr	r3, [pc, #232]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 800913c:	689b      	ldr	r3, [r3, #8]
 800913e:	f003 020c 	and.w	r2, r3, #12
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	685b      	ldr	r3, [r3, #4]
 8009146:	009b      	lsls	r3, r3, #2
 8009148:	429a      	cmp	r2, r3
 800914a:	d1eb      	bne.n	8009124 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f003 0302 	and.w	r3, r3, #2
 8009154:	2b00      	cmp	r3, #0
 8009156:	d010      	beq.n	800917a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8009158:	687b      	ldr	r3, [r7, #4]
 800915a:	689a      	ldr	r2, [r3, #8]
 800915c:	4b31      	ldr	r3, [pc, #196]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 800915e:	689b      	ldr	r3, [r3, #8]
 8009160:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009164:	429a      	cmp	r2, r3
 8009166:	d208      	bcs.n	800917a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8009168:	4b2e      	ldr	r3, [pc, #184]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 800916a:	689b      	ldr	r3, [r3, #8]
 800916c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	689b      	ldr	r3, [r3, #8]
 8009174:	492b      	ldr	r1, [pc, #172]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 8009176:	4313      	orrs	r3, r2
 8009178:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800917a:	4b29      	ldr	r3, [pc, #164]	; (8009220 <HAL_RCC_ClockConfig+0x1ec>)
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f003 0307 	and.w	r3, r3, #7
 8009182:	683a      	ldr	r2, [r7, #0]
 8009184:	429a      	cmp	r2, r3
 8009186:	d210      	bcs.n	80091aa <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009188:	4b25      	ldr	r3, [pc, #148]	; (8009220 <HAL_RCC_ClockConfig+0x1ec>)
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	f023 0207 	bic.w	r2, r3, #7
 8009190:	4923      	ldr	r1, [pc, #140]	; (8009220 <HAL_RCC_ClockConfig+0x1ec>)
 8009192:	683b      	ldr	r3, [r7, #0]
 8009194:	4313      	orrs	r3, r2
 8009196:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8009198:	4b21      	ldr	r3, [pc, #132]	; (8009220 <HAL_RCC_ClockConfig+0x1ec>)
 800919a:	681b      	ldr	r3, [r3, #0]
 800919c:	f003 0307 	and.w	r3, r3, #7
 80091a0:	683a      	ldr	r2, [r7, #0]
 80091a2:	429a      	cmp	r2, r3
 80091a4:	d001      	beq.n	80091aa <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80091a6:	2301      	movs	r3, #1
 80091a8:	e036      	b.n	8009218 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 0304 	and.w	r3, r3, #4
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d008      	beq.n	80091c8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80091b6:	4b1b      	ldr	r3, [pc, #108]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 80091b8:	689b      	ldr	r3, [r3, #8]
 80091ba:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	68db      	ldr	r3, [r3, #12]
 80091c2:	4918      	ldr	r1, [pc, #96]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 80091c4:	4313      	orrs	r3, r2
 80091c6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80091c8:	687b      	ldr	r3, [r7, #4]
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	f003 0308 	and.w	r3, r3, #8
 80091d0:	2b00      	cmp	r3, #0
 80091d2:	d009      	beq.n	80091e8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80091d4:	4b13      	ldr	r3, [pc, #76]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 80091d6:	689b      	ldr	r3, [r3, #8]
 80091d8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	691b      	ldr	r3, [r3, #16]
 80091e0:	00db      	lsls	r3, r3, #3
 80091e2:	4910      	ldr	r1, [pc, #64]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 80091e4:	4313      	orrs	r3, r2
 80091e6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80091e8:	f000 f824 	bl	8009234 <HAL_RCC_GetSysClockFreq>
 80091ec:	4602      	mov	r2, r0
 80091ee:	4b0d      	ldr	r3, [pc, #52]	; (8009224 <HAL_RCC_ClockConfig+0x1f0>)
 80091f0:	689b      	ldr	r3, [r3, #8]
 80091f2:	091b      	lsrs	r3, r3, #4
 80091f4:	f003 030f 	and.w	r3, r3, #15
 80091f8:	490b      	ldr	r1, [pc, #44]	; (8009228 <HAL_RCC_ClockConfig+0x1f4>)
 80091fa:	5ccb      	ldrb	r3, [r1, r3]
 80091fc:	f003 031f 	and.w	r3, r3, #31
 8009200:	fa22 f303 	lsr.w	r3, r2, r3
 8009204:	4a09      	ldr	r2, [pc, #36]	; (800922c <HAL_RCC_ClockConfig+0x1f8>)
 8009206:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8009208:	4b09      	ldr	r3, [pc, #36]	; (8009230 <HAL_RCC_ClockConfig+0x1fc>)
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4618      	mov	r0, r3
 800920e:	f7fc f815 	bl	800523c <HAL_InitTick>
 8009212:	4603      	mov	r3, r0
 8009214:	72fb      	strb	r3, [r7, #11]

  return status;
 8009216:	7afb      	ldrb	r3, [r7, #11]
}
 8009218:	4618      	mov	r0, r3
 800921a:	3710      	adds	r7, #16
 800921c:	46bd      	mov	sp, r7
 800921e:	bd80      	pop	{r7, pc}
 8009220:	40022000 	.word	0x40022000
 8009224:	40021000 	.word	0x40021000
 8009228:	0801d54c 	.word	0x0801d54c
 800922c:	2000009c 	.word	0x2000009c
 8009230:	200000a0 	.word	0x200000a0

08009234 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009234:	b480      	push	{r7}
 8009236:	b089      	sub	sp, #36	; 0x24
 8009238:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800923a:	2300      	movs	r3, #0
 800923c:	61fb      	str	r3, [r7, #28]
 800923e:	2300      	movs	r3, #0
 8009240:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009242:	4b3e      	ldr	r3, [pc, #248]	; (800933c <HAL_RCC_GetSysClockFreq+0x108>)
 8009244:	689b      	ldr	r3, [r3, #8]
 8009246:	f003 030c 	and.w	r3, r3, #12
 800924a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800924c:	4b3b      	ldr	r3, [pc, #236]	; (800933c <HAL_RCC_GetSysClockFreq+0x108>)
 800924e:	68db      	ldr	r3, [r3, #12]
 8009250:	f003 0303 	and.w	r3, r3, #3
 8009254:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	2b00      	cmp	r3, #0
 800925a:	d005      	beq.n	8009268 <HAL_RCC_GetSysClockFreq+0x34>
 800925c:	693b      	ldr	r3, [r7, #16]
 800925e:	2b0c      	cmp	r3, #12
 8009260:	d121      	bne.n	80092a6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8009262:	68fb      	ldr	r3, [r7, #12]
 8009264:	2b01      	cmp	r3, #1
 8009266:	d11e      	bne.n	80092a6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8009268:	4b34      	ldr	r3, [pc, #208]	; (800933c <HAL_RCC_GetSysClockFreq+0x108>)
 800926a:	681b      	ldr	r3, [r3, #0]
 800926c:	f003 0308 	and.w	r3, r3, #8
 8009270:	2b00      	cmp	r3, #0
 8009272:	d107      	bne.n	8009284 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8009274:	4b31      	ldr	r3, [pc, #196]	; (800933c <HAL_RCC_GetSysClockFreq+0x108>)
 8009276:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800927a:	0a1b      	lsrs	r3, r3, #8
 800927c:	f003 030f 	and.w	r3, r3, #15
 8009280:	61fb      	str	r3, [r7, #28]
 8009282:	e005      	b.n	8009290 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8009284:	4b2d      	ldr	r3, [pc, #180]	; (800933c <HAL_RCC_GetSysClockFreq+0x108>)
 8009286:	681b      	ldr	r3, [r3, #0]
 8009288:	091b      	lsrs	r3, r3, #4
 800928a:	f003 030f 	and.w	r3, r3, #15
 800928e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8009290:	4a2b      	ldr	r2, [pc, #172]	; (8009340 <HAL_RCC_GetSysClockFreq+0x10c>)
 8009292:	69fb      	ldr	r3, [r7, #28]
 8009294:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8009298:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800929a:	693b      	ldr	r3, [r7, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d10d      	bne.n	80092bc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80092a0:	69fb      	ldr	r3, [r7, #28]
 80092a2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80092a4:	e00a      	b.n	80092bc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80092a6:	693b      	ldr	r3, [r7, #16]
 80092a8:	2b04      	cmp	r3, #4
 80092aa:	d102      	bne.n	80092b2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80092ac:	4b25      	ldr	r3, [pc, #148]	; (8009344 <HAL_RCC_GetSysClockFreq+0x110>)
 80092ae:	61bb      	str	r3, [r7, #24]
 80092b0:	e004      	b.n	80092bc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80092b2:	693b      	ldr	r3, [r7, #16]
 80092b4:	2b08      	cmp	r3, #8
 80092b6:	d101      	bne.n	80092bc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80092b8:	4b23      	ldr	r3, [pc, #140]	; (8009348 <HAL_RCC_GetSysClockFreq+0x114>)
 80092ba:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80092bc:	693b      	ldr	r3, [r7, #16]
 80092be:	2b0c      	cmp	r3, #12
 80092c0:	d134      	bne.n	800932c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80092c2:	4b1e      	ldr	r3, [pc, #120]	; (800933c <HAL_RCC_GetSysClockFreq+0x108>)
 80092c4:	68db      	ldr	r3, [r3, #12]
 80092c6:	f003 0303 	and.w	r3, r3, #3
 80092ca:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80092cc:	68bb      	ldr	r3, [r7, #8]
 80092ce:	2b02      	cmp	r3, #2
 80092d0:	d003      	beq.n	80092da <HAL_RCC_GetSysClockFreq+0xa6>
 80092d2:	68bb      	ldr	r3, [r7, #8]
 80092d4:	2b03      	cmp	r3, #3
 80092d6:	d003      	beq.n	80092e0 <HAL_RCC_GetSysClockFreq+0xac>
 80092d8:	e005      	b.n	80092e6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80092da:	4b1a      	ldr	r3, [pc, #104]	; (8009344 <HAL_RCC_GetSysClockFreq+0x110>)
 80092dc:	617b      	str	r3, [r7, #20]
      break;
 80092de:	e005      	b.n	80092ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80092e0:	4b19      	ldr	r3, [pc, #100]	; (8009348 <HAL_RCC_GetSysClockFreq+0x114>)
 80092e2:	617b      	str	r3, [r7, #20]
      break;
 80092e4:	e002      	b.n	80092ec <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80092e6:	69fb      	ldr	r3, [r7, #28]
 80092e8:	617b      	str	r3, [r7, #20]
      break;
 80092ea:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80092ec:	4b13      	ldr	r3, [pc, #76]	; (800933c <HAL_RCC_GetSysClockFreq+0x108>)
 80092ee:	68db      	ldr	r3, [r3, #12]
 80092f0:	091b      	lsrs	r3, r3, #4
 80092f2:	f003 0307 	and.w	r3, r3, #7
 80092f6:	3301      	adds	r3, #1
 80092f8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80092fa:	4b10      	ldr	r3, [pc, #64]	; (800933c <HAL_RCC_GetSysClockFreq+0x108>)
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	0a1b      	lsrs	r3, r3, #8
 8009300:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009304:	697a      	ldr	r2, [r7, #20]
 8009306:	fb03 f202 	mul.w	r2, r3, r2
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009310:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8009312:	4b0a      	ldr	r3, [pc, #40]	; (800933c <HAL_RCC_GetSysClockFreq+0x108>)
 8009314:	68db      	ldr	r3, [r3, #12]
 8009316:	0e5b      	lsrs	r3, r3, #25
 8009318:	f003 0303 	and.w	r3, r3, #3
 800931c:	3301      	adds	r3, #1
 800931e:	005b      	lsls	r3, r3, #1
 8009320:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8009322:	697a      	ldr	r2, [r7, #20]
 8009324:	683b      	ldr	r3, [r7, #0]
 8009326:	fbb2 f3f3 	udiv	r3, r2, r3
 800932a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800932c:	69bb      	ldr	r3, [r7, #24]
}
 800932e:	4618      	mov	r0, r3
 8009330:	3724      	adds	r7, #36	; 0x24
 8009332:	46bd      	mov	sp, r7
 8009334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009338:	4770      	bx	lr
 800933a:	bf00      	nop
 800933c:	40021000 	.word	0x40021000
 8009340:	0801d564 	.word	0x0801d564
 8009344:	00f42400 	.word	0x00f42400
 8009348:	007a1200 	.word	0x007a1200

0800934c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800934c:	b480      	push	{r7}
 800934e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009350:	4b03      	ldr	r3, [pc, #12]	; (8009360 <HAL_RCC_GetHCLKFreq+0x14>)
 8009352:	681b      	ldr	r3, [r3, #0]
}
 8009354:	4618      	mov	r0, r3
 8009356:	46bd      	mov	sp, r7
 8009358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800935c:	4770      	bx	lr
 800935e:	bf00      	nop
 8009360:	2000009c 	.word	0x2000009c

08009364 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8009368:	f7ff fff0 	bl	800934c <HAL_RCC_GetHCLKFreq>
 800936c:	4602      	mov	r2, r0
 800936e:	4b06      	ldr	r3, [pc, #24]	; (8009388 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009370:	689b      	ldr	r3, [r3, #8]
 8009372:	0a1b      	lsrs	r3, r3, #8
 8009374:	f003 0307 	and.w	r3, r3, #7
 8009378:	4904      	ldr	r1, [pc, #16]	; (800938c <HAL_RCC_GetPCLK1Freq+0x28>)
 800937a:	5ccb      	ldrb	r3, [r1, r3]
 800937c:	f003 031f 	and.w	r3, r3, #31
 8009380:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009384:	4618      	mov	r0, r3
 8009386:	bd80      	pop	{r7, pc}
 8009388:	40021000 	.word	0x40021000
 800938c:	0801d55c 	.word	0x0801d55c

08009390 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009390:	b580      	push	{r7, lr}
 8009392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009394:	f7ff ffda 	bl	800934c <HAL_RCC_GetHCLKFreq>
 8009398:	4602      	mov	r2, r0
 800939a:	4b06      	ldr	r3, [pc, #24]	; (80093b4 <HAL_RCC_GetPCLK2Freq+0x24>)
 800939c:	689b      	ldr	r3, [r3, #8]
 800939e:	0adb      	lsrs	r3, r3, #11
 80093a0:	f003 0307 	and.w	r3, r3, #7
 80093a4:	4904      	ldr	r1, [pc, #16]	; (80093b8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80093a6:	5ccb      	ldrb	r3, [r1, r3]
 80093a8:	f003 031f 	and.w	r3, r3, #31
 80093ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80093b0:	4618      	mov	r0, r3
 80093b2:	bd80      	pop	{r7, pc}
 80093b4:	40021000 	.word	0x40021000
 80093b8:	0801d55c 	.word	0x0801d55c

080093bc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80093bc:	b480      	push	{r7}
 80093be:	b083      	sub	sp, #12
 80093c0:	af00      	add	r7, sp, #0
 80093c2:	6078      	str	r0, [r7, #4]
 80093c4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80093c6:	687b      	ldr	r3, [r7, #4]
 80093c8:	220f      	movs	r2, #15
 80093ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80093cc:	4b12      	ldr	r3, [pc, #72]	; (8009418 <HAL_RCC_GetClockConfig+0x5c>)
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	f003 0203 	and.w	r2, r3, #3
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80093d8:	4b0f      	ldr	r3, [pc, #60]	; (8009418 <HAL_RCC_GetClockConfig+0x5c>)
 80093da:	689b      	ldr	r3, [r3, #8]
 80093dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80093e4:	4b0c      	ldr	r3, [pc, #48]	; (8009418 <HAL_RCC_GetClockConfig+0x5c>)
 80093e6:	689b      	ldr	r3, [r3, #8]
 80093e8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80093f0:	4b09      	ldr	r3, [pc, #36]	; (8009418 <HAL_RCC_GetClockConfig+0x5c>)
 80093f2:	689b      	ldr	r3, [r3, #8]
 80093f4:	08db      	lsrs	r3, r3, #3
 80093f6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80093fe:	4b07      	ldr	r3, [pc, #28]	; (800941c <HAL_RCC_GetClockConfig+0x60>)
 8009400:	681b      	ldr	r3, [r3, #0]
 8009402:	f003 0207 	and.w	r2, r3, #7
 8009406:	683b      	ldr	r3, [r7, #0]
 8009408:	601a      	str	r2, [r3, #0]
}
 800940a:	bf00      	nop
 800940c:	370c      	adds	r7, #12
 800940e:	46bd      	mov	sp, r7
 8009410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009414:	4770      	bx	lr
 8009416:	bf00      	nop
 8009418:	40021000 	.word	0x40021000
 800941c:	40022000 	.word	0x40022000

08009420 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009420:	b580      	push	{r7, lr}
 8009422:	b086      	sub	sp, #24
 8009424:	af00      	add	r7, sp, #0
 8009426:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009428:	2300      	movs	r3, #0
 800942a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800942c:	4b2a      	ldr	r3, [pc, #168]	; (80094d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800942e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009430:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009434:	2b00      	cmp	r3, #0
 8009436:	d003      	beq.n	8009440 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009438:	f7ff f984 	bl	8008744 <HAL_PWREx_GetVoltageRange>
 800943c:	6178      	str	r0, [r7, #20]
 800943e:	e014      	b.n	800946a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009440:	4b25      	ldr	r3, [pc, #148]	; (80094d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009442:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009444:	4a24      	ldr	r2, [pc, #144]	; (80094d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009446:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800944a:	6593      	str	r3, [r2, #88]	; 0x58
 800944c:	4b22      	ldr	r3, [pc, #136]	; (80094d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800944e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009450:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009454:	60fb      	str	r3, [r7, #12]
 8009456:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009458:	f7ff f974 	bl	8008744 <HAL_PWREx_GetVoltageRange>
 800945c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800945e:	4b1e      	ldr	r3, [pc, #120]	; (80094d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009460:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009462:	4a1d      	ldr	r2, [pc, #116]	; (80094d8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009464:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009468:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800946a:	697b      	ldr	r3, [r7, #20]
 800946c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009470:	d10b      	bne.n	800948a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8009472:	687b      	ldr	r3, [r7, #4]
 8009474:	2b80      	cmp	r3, #128	; 0x80
 8009476:	d919      	bls.n	80094ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	2ba0      	cmp	r3, #160	; 0xa0
 800947c:	d902      	bls.n	8009484 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800947e:	2302      	movs	r3, #2
 8009480:	613b      	str	r3, [r7, #16]
 8009482:	e013      	b.n	80094ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8009484:	2301      	movs	r3, #1
 8009486:	613b      	str	r3, [r7, #16]
 8009488:	e010      	b.n	80094ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800948a:	687b      	ldr	r3, [r7, #4]
 800948c:	2b80      	cmp	r3, #128	; 0x80
 800948e:	d902      	bls.n	8009496 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009490:	2303      	movs	r3, #3
 8009492:	613b      	str	r3, [r7, #16]
 8009494:	e00a      	b.n	80094ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8009496:	687b      	ldr	r3, [r7, #4]
 8009498:	2b80      	cmp	r3, #128	; 0x80
 800949a:	d102      	bne.n	80094a2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800949c:	2302      	movs	r3, #2
 800949e:	613b      	str	r3, [r7, #16]
 80094a0:	e004      	b.n	80094ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2b70      	cmp	r3, #112	; 0x70
 80094a6:	d101      	bne.n	80094ac <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80094a8:	2301      	movs	r3, #1
 80094aa:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80094ac:	4b0b      	ldr	r3, [pc, #44]	; (80094dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	f023 0207 	bic.w	r2, r3, #7
 80094b4:	4909      	ldr	r1, [pc, #36]	; (80094dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80094b6:	693b      	ldr	r3, [r7, #16]
 80094b8:	4313      	orrs	r3, r2
 80094ba:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80094bc:	4b07      	ldr	r3, [pc, #28]	; (80094dc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	f003 0307 	and.w	r3, r3, #7
 80094c4:	693a      	ldr	r2, [r7, #16]
 80094c6:	429a      	cmp	r2, r3
 80094c8:	d001      	beq.n	80094ce <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80094ca:	2301      	movs	r3, #1
 80094cc:	e000      	b.n	80094d0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80094ce:	2300      	movs	r3, #0
}
 80094d0:	4618      	mov	r0, r3
 80094d2:	3718      	adds	r7, #24
 80094d4:	46bd      	mov	sp, r7
 80094d6:	bd80      	pop	{r7, pc}
 80094d8:	40021000 	.word	0x40021000
 80094dc:	40022000 	.word	0x40022000

080094e0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80094e0:	b580      	push	{r7, lr}
 80094e2:	b086      	sub	sp, #24
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80094e8:	2300      	movs	r3, #0
 80094ea:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80094ec:	2300      	movs	r3, #0
 80094ee:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	681b      	ldr	r3, [r3, #0]
 80094f4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d031      	beq.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009500:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009504:	d01a      	beq.n	800953c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8009506:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800950a:	d814      	bhi.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800950c:	2b00      	cmp	r3, #0
 800950e:	d009      	beq.n	8009524 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8009510:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8009514:	d10f      	bne.n	8009536 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8009516:	4b5d      	ldr	r3, [pc, #372]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009518:	68db      	ldr	r3, [r3, #12]
 800951a:	4a5c      	ldr	r2, [pc, #368]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800951c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009520:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009522:	e00c      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009524:	687b      	ldr	r3, [r7, #4]
 8009526:	3304      	adds	r3, #4
 8009528:	2100      	movs	r1, #0
 800952a:	4618      	mov	r0, r3
 800952c:	f000 f9de 	bl	80098ec <RCCEx_PLLSAI1_Config>
 8009530:	4603      	mov	r3, r0
 8009532:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009534:	e003      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8009536:	2301      	movs	r3, #1
 8009538:	74fb      	strb	r3, [r7, #19]
      break;
 800953a:	e000      	b.n	800953e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 800953c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800953e:	7cfb      	ldrb	r3, [r7, #19]
 8009540:	2b00      	cmp	r3, #0
 8009542:	d10b      	bne.n	800955c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009544:	4b51      	ldr	r3, [pc, #324]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009546:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800954a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800954e:	687b      	ldr	r3, [r7, #4]
 8009550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009552:	494e      	ldr	r1, [pc, #312]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009554:	4313      	orrs	r3, r2
 8009556:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800955a:	e001      	b.n	8009560 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800955c:	7cfb      	ldrb	r3, [r7, #19]
 800955e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009568:	2b00      	cmp	r3, #0
 800956a:	f000 809e 	beq.w	80096aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800956e:	2300      	movs	r3, #0
 8009570:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009572:	4b46      	ldr	r3, [pc, #280]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009574:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d101      	bne.n	8009582 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800957e:	2301      	movs	r3, #1
 8009580:	e000      	b.n	8009584 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8009582:	2300      	movs	r3, #0
 8009584:	2b00      	cmp	r3, #0
 8009586:	d00d      	beq.n	80095a4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009588:	4b40      	ldr	r3, [pc, #256]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800958a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800958c:	4a3f      	ldr	r2, [pc, #252]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800958e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009592:	6593      	str	r3, [r2, #88]	; 0x58
 8009594:	4b3d      	ldr	r3, [pc, #244]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009596:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009598:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800959c:	60bb      	str	r3, [r7, #8]
 800959e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80095a0:	2301      	movs	r3, #1
 80095a2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80095a4:	4b3a      	ldr	r3, [pc, #232]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80095a6:	681b      	ldr	r3, [r3, #0]
 80095a8:	4a39      	ldr	r2, [pc, #228]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80095aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80095ae:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80095b0:	f7fb ff9c 	bl	80054ec <HAL_GetTick>
 80095b4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80095b6:	e009      	b.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80095b8:	f7fb ff98 	bl	80054ec <HAL_GetTick>
 80095bc:	4602      	mov	r2, r0
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	1ad3      	subs	r3, r2, r3
 80095c2:	2b02      	cmp	r3, #2
 80095c4:	d902      	bls.n	80095cc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	74fb      	strb	r3, [r7, #19]
        break;
 80095ca:	e005      	b.n	80095d8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80095cc:	4b30      	ldr	r3, [pc, #192]	; (8009690 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095d4:	2b00      	cmp	r3, #0
 80095d6:	d0ef      	beq.n	80095b8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80095d8:	7cfb      	ldrb	r3, [r7, #19]
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d15a      	bne.n	8009694 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80095de:	4b2b      	ldr	r3, [pc, #172]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80095e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80095e4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80095e8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80095ea:	697b      	ldr	r3, [r7, #20]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d01e      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80095f4:	697a      	ldr	r2, [r7, #20]
 80095f6:	429a      	cmp	r2, r3
 80095f8:	d019      	beq.n	800962e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80095fa:	4b24      	ldr	r3, [pc, #144]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80095fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009600:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009604:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8009606:	4b21      	ldr	r3, [pc, #132]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009608:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800960c:	4a1f      	ldr	r2, [pc, #124]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800960e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009612:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8009616:	4b1d      	ldr	r3, [pc, #116]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009618:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800961c:	4a1b      	ldr	r2, [pc, #108]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800961e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009622:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8009626:	4a19      	ldr	r2, [pc, #100]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8009628:	697b      	ldr	r3, [r7, #20]
 800962a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800962e:	697b      	ldr	r3, [r7, #20]
 8009630:	f003 0301 	and.w	r3, r3, #1
 8009634:	2b00      	cmp	r3, #0
 8009636:	d016      	beq.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009638:	f7fb ff58 	bl	80054ec <HAL_GetTick>
 800963c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800963e:	e00b      	b.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009640:	f7fb ff54 	bl	80054ec <HAL_GetTick>
 8009644:	4602      	mov	r2, r0
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	1ad3      	subs	r3, r2, r3
 800964a:	f241 3288 	movw	r2, #5000	; 0x1388
 800964e:	4293      	cmp	r3, r2
 8009650:	d902      	bls.n	8009658 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8009652:	2303      	movs	r3, #3
 8009654:	74fb      	strb	r3, [r7, #19]
            break;
 8009656:	e006      	b.n	8009666 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8009658:	4b0c      	ldr	r3, [pc, #48]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800965a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800965e:	f003 0302 	and.w	r3, r3, #2
 8009662:	2b00      	cmp	r3, #0
 8009664:	d0ec      	beq.n	8009640 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8009666:	7cfb      	ldrb	r3, [r7, #19]
 8009668:	2b00      	cmp	r3, #0
 800966a:	d10b      	bne.n	8009684 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800966c:	4b07      	ldr	r3, [pc, #28]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800966e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009672:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800967a:	4904      	ldr	r1, [pc, #16]	; (800968c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800967c:	4313      	orrs	r3, r2
 800967e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009682:	e009      	b.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009684:	7cfb      	ldrb	r3, [r7, #19]
 8009686:	74bb      	strb	r3, [r7, #18]
 8009688:	e006      	b.n	8009698 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800968a:	bf00      	nop
 800968c:	40021000 	.word	0x40021000
 8009690:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009694:	7cfb      	ldrb	r3, [r7, #19]
 8009696:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8009698:	7c7b      	ldrb	r3, [r7, #17]
 800969a:	2b01      	cmp	r3, #1
 800969c:	d105      	bne.n	80096aa <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800969e:	4b8a      	ldr	r3, [pc, #552]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80096a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80096a2:	4a89      	ldr	r2, [pc, #548]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80096a4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096a8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	f003 0301 	and.w	r3, r3, #1
 80096b2:	2b00      	cmp	r3, #0
 80096b4:	d00a      	beq.n	80096cc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80096b6:	4b84      	ldr	r3, [pc, #528]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80096b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096bc:	f023 0203 	bic.w	r2, r3, #3
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6a1b      	ldr	r3, [r3, #32]
 80096c4:	4980      	ldr	r1, [pc, #512]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80096c6:	4313      	orrs	r3, r2
 80096c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	f003 0302 	and.w	r3, r3, #2
 80096d4:	2b00      	cmp	r3, #0
 80096d6:	d00a      	beq.n	80096ee <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80096d8:	4b7b      	ldr	r3, [pc, #492]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80096da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80096de:	f023 020c 	bic.w	r2, r3, #12
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e6:	4978      	ldr	r1, [pc, #480]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80096e8:	4313      	orrs	r3, r2
 80096ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	681b      	ldr	r3, [r3, #0]
 80096f2:	f003 0320 	and.w	r3, r3, #32
 80096f6:	2b00      	cmp	r3, #0
 80096f8:	d00a      	beq.n	8009710 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80096fa:	4b73      	ldr	r3, [pc, #460]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80096fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009700:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009708:	496f      	ldr	r1, [pc, #444]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800970a:	4313      	orrs	r3, r2
 800970c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009718:	2b00      	cmp	r3, #0
 800971a:	d00a      	beq.n	8009732 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800971c:	4b6a      	ldr	r3, [pc, #424]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800971e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009722:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800972a:	4967      	ldr	r1, [pc, #412]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800972c:	4313      	orrs	r3, r2
 800972e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800973a:	2b00      	cmp	r3, #0
 800973c:	d00a      	beq.n	8009754 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800973e:	4b62      	ldr	r3, [pc, #392]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009740:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009748:	687b      	ldr	r3, [r7, #4]
 800974a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800974c:	495e      	ldr	r1, [pc, #376]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800974e:	4313      	orrs	r3, r2
 8009750:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	681b      	ldr	r3, [r3, #0]
 8009758:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800975c:	2b00      	cmp	r3, #0
 800975e:	d00a      	beq.n	8009776 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009760:	4b59      	ldr	r3, [pc, #356]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009762:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009766:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800976e:	4956      	ldr	r1, [pc, #344]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009770:	4313      	orrs	r3, r2
 8009772:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009776:	687b      	ldr	r3, [r7, #4]
 8009778:	681b      	ldr	r3, [r3, #0]
 800977a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800977e:	2b00      	cmp	r3, #0
 8009780:	d00a      	beq.n	8009798 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009782:	4b51      	ldr	r3, [pc, #324]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009784:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009788:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009790:	494d      	ldr	r1, [pc, #308]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009792:	4313      	orrs	r3, r2
 8009794:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	681b      	ldr	r3, [r3, #0]
 800979c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d028      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80097a4:	4b48      	ldr	r3, [pc, #288]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80097a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80097aa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097b2:	4945      	ldr	r1, [pc, #276]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80097b4:	4313      	orrs	r3, r2
 80097b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097be:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80097c2:	d106      	bne.n	80097d2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80097c4:	4b40      	ldr	r3, [pc, #256]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80097c6:	68db      	ldr	r3, [r3, #12]
 80097c8:	4a3f      	ldr	r2, [pc, #252]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80097ca:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80097ce:	60d3      	str	r3, [r2, #12]
 80097d0:	e011      	b.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80097da:	d10c      	bne.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80097dc:	687b      	ldr	r3, [r7, #4]
 80097de:	3304      	adds	r3, #4
 80097e0:	2101      	movs	r1, #1
 80097e2:	4618      	mov	r0, r3
 80097e4:	f000 f882 	bl	80098ec <RCCEx_PLLSAI1_Config>
 80097e8:	4603      	mov	r3, r0
 80097ea:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80097ec:	7cfb      	ldrb	r3, [r7, #19]
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80097f2:	7cfb      	ldrb	r3, [r7, #19]
 80097f4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80097fe:	2b00      	cmp	r3, #0
 8009800:	d028      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8009802:	4b31      	ldr	r3, [pc, #196]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009804:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009808:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009810:	492d      	ldr	r1, [pc, #180]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009812:	4313      	orrs	r3, r2
 8009814:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800981c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009820:	d106      	bne.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009822:	4b29      	ldr	r3, [pc, #164]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009824:	68db      	ldr	r3, [r3, #12]
 8009826:	4a28      	ldr	r2, [pc, #160]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009828:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800982c:	60d3      	str	r3, [r2, #12]
 800982e:	e011      	b.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009834:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009838:	d10c      	bne.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	3304      	adds	r3, #4
 800983e:	2101      	movs	r1, #1
 8009840:	4618      	mov	r0, r3
 8009842:	f000 f853 	bl	80098ec <RCCEx_PLLSAI1_Config>
 8009846:	4603      	mov	r3, r0
 8009848:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800984a:	7cfb      	ldrb	r3, [r7, #19]
 800984c:	2b00      	cmp	r3, #0
 800984e:	d001      	beq.n	8009854 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8009850:	7cfb      	ldrb	r3, [r7, #19]
 8009852:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800985c:	2b00      	cmp	r3, #0
 800985e:	d01c      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009860:	4b19      	ldr	r3, [pc, #100]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009862:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009866:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800986a:	687b      	ldr	r3, [r7, #4]
 800986c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800986e:	4916      	ldr	r1, [pc, #88]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8009870:	4313      	orrs	r3, r2
 8009872:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800987a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800987e:	d10c      	bne.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	3304      	adds	r3, #4
 8009884:	2102      	movs	r1, #2
 8009886:	4618      	mov	r0, r3
 8009888:	f000 f830 	bl	80098ec <RCCEx_PLLSAI1_Config>
 800988c:	4603      	mov	r3, r0
 800988e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009890:	7cfb      	ldrb	r3, [r7, #19]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d001      	beq.n	800989a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8009896:	7cfb      	ldrb	r3, [r7, #19]
 8009898:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80098a2:	2b00      	cmp	r3, #0
 80098a4:	d00a      	beq.n	80098bc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80098a6:	4b08      	ldr	r3, [pc, #32]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80098a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80098ac:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80098b0:	687b      	ldr	r3, [r7, #4]
 80098b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098b4:	4904      	ldr	r1, [pc, #16]	; (80098c8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80098b6:	4313      	orrs	r3, r2
 80098b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80098bc:	7cbb      	ldrb	r3, [r7, #18]
}
 80098be:	4618      	mov	r0, r3
 80098c0:	3718      	adds	r7, #24
 80098c2:	46bd      	mov	sp, r7
 80098c4:	bd80      	pop	{r7, pc}
 80098c6:	bf00      	nop
 80098c8:	40021000 	.word	0x40021000

080098cc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80098cc:	b480      	push	{r7}
 80098ce:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80098d0:	4b05      	ldr	r3, [pc, #20]	; (80098e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80098d2:	681b      	ldr	r3, [r3, #0]
 80098d4:	4a04      	ldr	r2, [pc, #16]	; (80098e8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80098d6:	f043 0304 	orr.w	r3, r3, #4
 80098da:	6013      	str	r3, [r2, #0]
}
 80098dc:	bf00      	nop
 80098de:	46bd      	mov	sp, r7
 80098e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098e4:	4770      	bx	lr
 80098e6:	bf00      	nop
 80098e8:	40021000 	.word	0x40021000

080098ec <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80098ec:	b580      	push	{r7, lr}
 80098ee:	b084      	sub	sp, #16
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
 80098f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80098f6:	2300      	movs	r3, #0
 80098f8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80098fa:	4b74      	ldr	r3, [pc, #464]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 80098fc:	68db      	ldr	r3, [r3, #12]
 80098fe:	f003 0303 	and.w	r3, r3, #3
 8009902:	2b00      	cmp	r3, #0
 8009904:	d018      	beq.n	8009938 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8009906:	4b71      	ldr	r3, [pc, #452]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009908:	68db      	ldr	r3, [r3, #12]
 800990a:	f003 0203 	and.w	r2, r3, #3
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	681b      	ldr	r3, [r3, #0]
 8009912:	429a      	cmp	r2, r3
 8009914:	d10d      	bne.n	8009932 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	681b      	ldr	r3, [r3, #0]
       ||
 800991a:	2b00      	cmp	r3, #0
 800991c:	d009      	beq.n	8009932 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800991e:	4b6b      	ldr	r3, [pc, #428]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009920:	68db      	ldr	r3, [r3, #12]
 8009922:	091b      	lsrs	r3, r3, #4
 8009924:	f003 0307 	and.w	r3, r3, #7
 8009928:	1c5a      	adds	r2, r3, #1
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
       ||
 800992e:	429a      	cmp	r2, r3
 8009930:	d047      	beq.n	80099c2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	73fb      	strb	r3, [r7, #15]
 8009936:	e044      	b.n	80099c2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	681b      	ldr	r3, [r3, #0]
 800993c:	2b03      	cmp	r3, #3
 800993e:	d018      	beq.n	8009972 <RCCEx_PLLSAI1_Config+0x86>
 8009940:	2b03      	cmp	r3, #3
 8009942:	d825      	bhi.n	8009990 <RCCEx_PLLSAI1_Config+0xa4>
 8009944:	2b01      	cmp	r3, #1
 8009946:	d002      	beq.n	800994e <RCCEx_PLLSAI1_Config+0x62>
 8009948:	2b02      	cmp	r3, #2
 800994a:	d009      	beq.n	8009960 <RCCEx_PLLSAI1_Config+0x74>
 800994c:	e020      	b.n	8009990 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800994e:	4b5f      	ldr	r3, [pc, #380]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	f003 0302 	and.w	r3, r3, #2
 8009956:	2b00      	cmp	r3, #0
 8009958:	d11d      	bne.n	8009996 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800995a:	2301      	movs	r3, #1
 800995c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800995e:	e01a      	b.n	8009996 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009960:	4b5a      	ldr	r3, [pc, #360]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009968:	2b00      	cmp	r3, #0
 800996a:	d116      	bne.n	800999a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800996c:	2301      	movs	r3, #1
 800996e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009970:	e013      	b.n	800999a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009972:	4b56      	ldr	r3, [pc, #344]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800997a:	2b00      	cmp	r3, #0
 800997c:	d10f      	bne.n	800999e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800997e:	4b53      	ldr	r3, [pc, #332]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009986:	2b00      	cmp	r3, #0
 8009988:	d109      	bne.n	800999e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800998a:	2301      	movs	r3, #1
 800998c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800998e:	e006      	b.n	800999e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8009990:	2301      	movs	r3, #1
 8009992:	73fb      	strb	r3, [r7, #15]
      break;
 8009994:	e004      	b.n	80099a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8009996:	bf00      	nop
 8009998:	e002      	b.n	80099a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800999a:	bf00      	nop
 800999c:	e000      	b.n	80099a0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800999e:	bf00      	nop
    }

    if(status == HAL_OK)
 80099a0:	7bfb      	ldrb	r3, [r7, #15]
 80099a2:	2b00      	cmp	r3, #0
 80099a4:	d10d      	bne.n	80099c2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80099a6:	4b49      	ldr	r3, [pc, #292]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 80099a8:	68db      	ldr	r3, [r3, #12]
 80099aa:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	6819      	ldr	r1, [r3, #0]
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	685b      	ldr	r3, [r3, #4]
 80099b6:	3b01      	subs	r3, #1
 80099b8:	011b      	lsls	r3, r3, #4
 80099ba:	430b      	orrs	r3, r1
 80099bc:	4943      	ldr	r1, [pc, #268]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 80099be:	4313      	orrs	r3, r2
 80099c0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80099c2:	7bfb      	ldrb	r3, [r7, #15]
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d17c      	bne.n	8009ac2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80099c8:	4b40      	ldr	r3, [pc, #256]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 80099ca:	681b      	ldr	r3, [r3, #0]
 80099cc:	4a3f      	ldr	r2, [pc, #252]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 80099ce:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80099d2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80099d4:	f7fb fd8a 	bl	80054ec <HAL_GetTick>
 80099d8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80099da:	e009      	b.n	80099f0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80099dc:	f7fb fd86 	bl	80054ec <HAL_GetTick>
 80099e0:	4602      	mov	r2, r0
 80099e2:	68bb      	ldr	r3, [r7, #8]
 80099e4:	1ad3      	subs	r3, r2, r3
 80099e6:	2b02      	cmp	r3, #2
 80099e8:	d902      	bls.n	80099f0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80099ea:	2303      	movs	r3, #3
 80099ec:	73fb      	strb	r3, [r7, #15]
        break;
 80099ee:	e005      	b.n	80099fc <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80099f0:	4b36      	ldr	r3, [pc, #216]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	d1ef      	bne.n	80099dc <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80099fc:	7bfb      	ldrb	r3, [r7, #15]
 80099fe:	2b00      	cmp	r3, #0
 8009a00:	d15f      	bne.n	8009ac2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8009a02:	683b      	ldr	r3, [r7, #0]
 8009a04:	2b00      	cmp	r3, #0
 8009a06:	d110      	bne.n	8009a2a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009a08:	4b30      	ldr	r3, [pc, #192]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a0a:	691b      	ldr	r3, [r3, #16]
 8009a0c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8009a10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009a14:	687a      	ldr	r2, [r7, #4]
 8009a16:	6892      	ldr	r2, [r2, #8]
 8009a18:	0211      	lsls	r1, r2, #8
 8009a1a:	687a      	ldr	r2, [r7, #4]
 8009a1c:	68d2      	ldr	r2, [r2, #12]
 8009a1e:	06d2      	lsls	r2, r2, #27
 8009a20:	430a      	orrs	r2, r1
 8009a22:	492a      	ldr	r1, [pc, #168]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a24:	4313      	orrs	r3, r2
 8009a26:	610b      	str	r3, [r1, #16]
 8009a28:	e027      	b.n	8009a7a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8009a2a:	683b      	ldr	r3, [r7, #0]
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d112      	bne.n	8009a56 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009a30:	4b26      	ldr	r3, [pc, #152]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8009a38:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009a3c:	687a      	ldr	r2, [r7, #4]
 8009a3e:	6892      	ldr	r2, [r2, #8]
 8009a40:	0211      	lsls	r1, r2, #8
 8009a42:	687a      	ldr	r2, [r7, #4]
 8009a44:	6912      	ldr	r2, [r2, #16]
 8009a46:	0852      	lsrs	r2, r2, #1
 8009a48:	3a01      	subs	r2, #1
 8009a4a:	0552      	lsls	r2, r2, #21
 8009a4c:	430a      	orrs	r2, r1
 8009a4e:	491f      	ldr	r1, [pc, #124]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a50:	4313      	orrs	r3, r2
 8009a52:	610b      	str	r3, [r1, #16]
 8009a54:	e011      	b.n	8009a7a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8009a56:	4b1d      	ldr	r3, [pc, #116]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a58:	691b      	ldr	r3, [r3, #16]
 8009a5a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009a5e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009a62:	687a      	ldr	r2, [r7, #4]
 8009a64:	6892      	ldr	r2, [r2, #8]
 8009a66:	0211      	lsls	r1, r2, #8
 8009a68:	687a      	ldr	r2, [r7, #4]
 8009a6a:	6952      	ldr	r2, [r2, #20]
 8009a6c:	0852      	lsrs	r2, r2, #1
 8009a6e:	3a01      	subs	r2, #1
 8009a70:	0652      	lsls	r2, r2, #25
 8009a72:	430a      	orrs	r2, r1
 8009a74:	4915      	ldr	r1, [pc, #84]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8009a7a:	4b14      	ldr	r3, [pc, #80]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	4a13      	ldr	r2, [pc, #76]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009a80:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009a84:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009a86:	f7fb fd31 	bl	80054ec <HAL_GetTick>
 8009a8a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009a8c:	e009      	b.n	8009aa2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009a8e:	f7fb fd2d 	bl	80054ec <HAL_GetTick>
 8009a92:	4602      	mov	r2, r0
 8009a94:	68bb      	ldr	r3, [r7, #8]
 8009a96:	1ad3      	subs	r3, r2, r3
 8009a98:	2b02      	cmp	r3, #2
 8009a9a:	d902      	bls.n	8009aa2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8009a9c:	2303      	movs	r3, #3
 8009a9e:	73fb      	strb	r3, [r7, #15]
          break;
 8009aa0:	e005      	b.n	8009aae <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009aa2:	4b0a      	ldr	r3, [pc, #40]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009aa4:	681b      	ldr	r3, [r3, #0]
 8009aa6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009aaa:	2b00      	cmp	r3, #0
 8009aac:	d0ef      	beq.n	8009a8e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8009aae:	7bfb      	ldrb	r3, [r7, #15]
 8009ab0:	2b00      	cmp	r3, #0
 8009ab2:	d106      	bne.n	8009ac2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009ab4:	4b05      	ldr	r3, [pc, #20]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009ab6:	691a      	ldr	r2, [r3, #16]
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	699b      	ldr	r3, [r3, #24]
 8009abc:	4903      	ldr	r1, [pc, #12]	; (8009acc <RCCEx_PLLSAI1_Config+0x1e0>)
 8009abe:	4313      	orrs	r3, r2
 8009ac0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009ac2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009ac4:	4618      	mov	r0, r3
 8009ac6:	3710      	adds	r7, #16
 8009ac8:	46bd      	mov	sp, r7
 8009aca:	bd80      	pop	{r7, pc}
 8009acc:	40021000 	.word	0x40021000

08009ad0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009ad0:	b580      	push	{r7, lr}
 8009ad2:	b082      	sub	sp, #8
 8009ad4:	af00      	add	r7, sp, #0
 8009ad6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	d101      	bne.n	8009ae2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009ade:	2301      	movs	r3, #1
 8009ae0:	e049      	b.n	8009b76 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ae8:	b2db      	uxtb	r3, r3
 8009aea:	2b00      	cmp	r3, #0
 8009aec:	d106      	bne.n	8009afc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009aee:	687b      	ldr	r3, [r7, #4]
 8009af0:	2200      	movs	r2, #0
 8009af2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009af6:	6878      	ldr	r0, [r7, #4]
 8009af8:	f7fb faea 	bl	80050d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	2202      	movs	r2, #2
 8009b00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	681a      	ldr	r2, [r3, #0]
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	3304      	adds	r3, #4
 8009b0c:	4619      	mov	r1, r3
 8009b0e:	4610      	mov	r0, r2
 8009b10:	f000 fae6 	bl	800a0e0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	2201      	movs	r2, #1
 8009b18:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b1c:	687b      	ldr	r3, [r7, #4]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	2201      	movs	r2, #1
 8009b28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2201      	movs	r2, #1
 8009b38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009b44:	687b      	ldr	r3, [r7, #4]
 8009b46:	2201      	movs	r2, #1
 8009b48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	2201      	movs	r2, #1
 8009b50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009b54:	687b      	ldr	r3, [r7, #4]
 8009b56:	2201      	movs	r2, #1
 8009b58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009b5c:	687b      	ldr	r3, [r7, #4]
 8009b5e:	2201      	movs	r2, #1
 8009b60:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	2201      	movs	r2, #1
 8009b68:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2201      	movs	r2, #1
 8009b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009b74:	2300      	movs	r3, #0
}
 8009b76:	4618      	mov	r0, r3
 8009b78:	3708      	adds	r7, #8
 8009b7a:	46bd      	mov	sp, r7
 8009b7c:	bd80      	pop	{r7, pc}
	...

08009b80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b8e:	b2db      	uxtb	r3, r3
 8009b90:	2b01      	cmp	r3, #1
 8009b92:	d001      	beq.n	8009b98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8009b94:	2301      	movs	r3, #1
 8009b96:	e033      	b.n	8009c00 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2202      	movs	r2, #2
 8009b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a19      	ldr	r2, [pc, #100]	; (8009c0c <HAL_TIM_Base_Start+0x8c>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d009      	beq.n	8009bbe <HAL_TIM_Base_Start+0x3e>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009bb2:	d004      	beq.n	8009bbe <HAL_TIM_Base_Start+0x3e>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a15      	ldr	r2, [pc, #84]	; (8009c10 <HAL_TIM_Base_Start+0x90>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d115      	bne.n	8009bea <HAL_TIM_Base_Start+0x6a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	689a      	ldr	r2, [r3, #8]
 8009bc4:	4b13      	ldr	r3, [pc, #76]	; (8009c14 <HAL_TIM_Base_Start+0x94>)
 8009bc6:	4013      	ands	r3, r2
 8009bc8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	2b06      	cmp	r3, #6
 8009bce:	d015      	beq.n	8009bfc <HAL_TIM_Base_Start+0x7c>
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009bd6:	d011      	beq.n	8009bfc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	681a      	ldr	r2, [r3, #0]
 8009bde:	687b      	ldr	r3, [r7, #4]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	f042 0201 	orr.w	r2, r2, #1
 8009be6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009be8:	e008      	b.n	8009bfc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	681a      	ldr	r2, [r3, #0]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f042 0201 	orr.w	r2, r2, #1
 8009bf8:	601a      	str	r2, [r3, #0]
 8009bfa:	e000      	b.n	8009bfe <HAL_TIM_Base_Start+0x7e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009bfc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009bfe:	2300      	movs	r3, #0
}
 8009c00:	4618      	mov	r0, r3
 8009c02:	3714      	adds	r7, #20
 8009c04:	46bd      	mov	sp, r7
 8009c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c0a:	4770      	bx	lr
 8009c0c:	40012c00 	.word	0x40012c00
 8009c10:	40014000 	.word	0x40014000
 8009c14:	00010007 	.word	0x00010007

08009c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009c18:	b480      	push	{r7}
 8009c1a:	b085      	sub	sp, #20
 8009c1c:	af00      	add	r7, sp, #0
 8009c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c26:	b2db      	uxtb	r3, r3
 8009c28:	2b01      	cmp	r3, #1
 8009c2a:	d001      	beq.n	8009c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	e03b      	b.n	8009ca8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	2202      	movs	r2, #2
 8009c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009c38:	687b      	ldr	r3, [r7, #4]
 8009c3a:	681b      	ldr	r3, [r3, #0]
 8009c3c:	68da      	ldr	r2, [r3, #12]
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	f042 0201 	orr.w	r2, r2, #1
 8009c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a19      	ldr	r2, [pc, #100]	; (8009cb4 <HAL_TIM_Base_Start_IT+0x9c>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d009      	beq.n	8009c66 <HAL_TIM_Base_Start_IT+0x4e>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009c5a:	d004      	beq.n	8009c66 <HAL_TIM_Base_Start_IT+0x4e>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a15      	ldr	r2, [pc, #84]	; (8009cb8 <HAL_TIM_Base_Start_IT+0xa0>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d115      	bne.n	8009c92 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	689a      	ldr	r2, [r3, #8]
 8009c6c:	4b13      	ldr	r3, [pc, #76]	; (8009cbc <HAL_TIM_Base_Start_IT+0xa4>)
 8009c6e:	4013      	ands	r3, r2
 8009c70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	2b06      	cmp	r3, #6
 8009c76:	d015      	beq.n	8009ca4 <HAL_TIM_Base_Start_IT+0x8c>
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8009c7e:	d011      	beq.n	8009ca4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	681b      	ldr	r3, [r3, #0]
 8009c84:	681a      	ldr	r2, [r3, #0]
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	681b      	ldr	r3, [r3, #0]
 8009c8a:	f042 0201 	orr.w	r2, r2, #1
 8009c8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009c90:	e008      	b.n	8009ca4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8009c92:	687b      	ldr	r3, [r7, #4]
 8009c94:	681b      	ldr	r3, [r3, #0]
 8009c96:	681a      	ldr	r2, [r3, #0]
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	f042 0201 	orr.w	r2, r2, #1
 8009ca0:	601a      	str	r2, [r3, #0]
 8009ca2:	e000      	b.n	8009ca6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ca4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8009ca6:	2300      	movs	r3, #0
}
 8009ca8:	4618      	mov	r0, r3
 8009caa:	3714      	adds	r7, #20
 8009cac:	46bd      	mov	sp, r7
 8009cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cb2:	4770      	bx	lr
 8009cb4:	40012c00 	.word	0x40012c00
 8009cb8:	40014000 	.word	0x40014000
 8009cbc:	00010007 	.word	0x00010007

08009cc0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b082      	sub	sp, #8
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	681b      	ldr	r3, [r3, #0]
 8009ccc:	691b      	ldr	r3, [r3, #16]
 8009cce:	f003 0302 	and.w	r3, r3, #2
 8009cd2:	2b02      	cmp	r3, #2
 8009cd4:	d122      	bne.n	8009d1c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009cd6:	687b      	ldr	r3, [r7, #4]
 8009cd8:	681b      	ldr	r3, [r3, #0]
 8009cda:	68db      	ldr	r3, [r3, #12]
 8009cdc:	f003 0302 	and.w	r3, r3, #2
 8009ce0:	2b02      	cmp	r3, #2
 8009ce2:	d11b      	bne.n	8009d1c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f06f 0202 	mvn.w	r2, #2
 8009cec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009cee:	687b      	ldr	r3, [r7, #4]
 8009cf0:	2201      	movs	r2, #1
 8009cf2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	681b      	ldr	r3, [r3, #0]
 8009cf8:	699b      	ldr	r3, [r3, #24]
 8009cfa:	f003 0303 	and.w	r3, r3, #3
 8009cfe:	2b00      	cmp	r3, #0
 8009d00:	d003      	beq.n	8009d0a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8009d02:	6878      	ldr	r0, [r7, #4]
 8009d04:	f000 f9ce 	bl	800a0a4 <HAL_TIM_IC_CaptureCallback>
 8009d08:	e005      	b.n	8009d16 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d0a:	6878      	ldr	r0, [r7, #4]
 8009d0c:	f000 f9c0 	bl	800a090 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d10:	6878      	ldr	r0, [r7, #4]
 8009d12:	f000 f9d1 	bl	800a0b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d16:	687b      	ldr	r3, [r7, #4]
 8009d18:	2200      	movs	r2, #0
 8009d1a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8009d1c:	687b      	ldr	r3, [r7, #4]
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	691b      	ldr	r3, [r3, #16]
 8009d22:	f003 0304 	and.w	r3, r3, #4
 8009d26:	2b04      	cmp	r3, #4
 8009d28:	d122      	bne.n	8009d70 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8009d2a:	687b      	ldr	r3, [r7, #4]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	68db      	ldr	r3, [r3, #12]
 8009d30:	f003 0304 	and.w	r3, r3, #4
 8009d34:	2b04      	cmp	r3, #4
 8009d36:	d11b      	bne.n	8009d70 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8009d38:	687b      	ldr	r3, [r7, #4]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	f06f 0204 	mvn.w	r2, #4
 8009d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009d42:	687b      	ldr	r3, [r7, #4]
 8009d44:	2202      	movs	r2, #2
 8009d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	681b      	ldr	r3, [r3, #0]
 8009d4c:	699b      	ldr	r3, [r3, #24]
 8009d4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d003      	beq.n	8009d5e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009d56:	6878      	ldr	r0, [r7, #4]
 8009d58:	f000 f9a4 	bl	800a0a4 <HAL_TIM_IC_CaptureCallback>
 8009d5c:	e005      	b.n	8009d6a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009d5e:	6878      	ldr	r0, [r7, #4]
 8009d60:	f000 f996 	bl	800a090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009d64:	6878      	ldr	r0, [r7, #4]
 8009d66:	f000 f9a7 	bl	800a0b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009d6a:	687b      	ldr	r3, [r7, #4]
 8009d6c:	2200      	movs	r2, #0
 8009d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009d70:	687b      	ldr	r3, [r7, #4]
 8009d72:	681b      	ldr	r3, [r3, #0]
 8009d74:	691b      	ldr	r3, [r3, #16]
 8009d76:	f003 0308 	and.w	r3, r3, #8
 8009d7a:	2b08      	cmp	r3, #8
 8009d7c:	d122      	bne.n	8009dc4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009d7e:	687b      	ldr	r3, [r7, #4]
 8009d80:	681b      	ldr	r3, [r3, #0]
 8009d82:	68db      	ldr	r3, [r3, #12]
 8009d84:	f003 0308 	and.w	r3, r3, #8
 8009d88:	2b08      	cmp	r3, #8
 8009d8a:	d11b      	bne.n	8009dc4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009d8c:	687b      	ldr	r3, [r7, #4]
 8009d8e:	681b      	ldr	r3, [r3, #0]
 8009d90:	f06f 0208 	mvn.w	r2, #8
 8009d94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009d96:	687b      	ldr	r3, [r7, #4]
 8009d98:	2204      	movs	r2, #4
 8009d9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009d9c:	687b      	ldr	r3, [r7, #4]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	69db      	ldr	r3, [r3, #28]
 8009da2:	f003 0303 	and.w	r3, r3, #3
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d003      	beq.n	8009db2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009daa:	6878      	ldr	r0, [r7, #4]
 8009dac:	f000 f97a 	bl	800a0a4 <HAL_TIM_IC_CaptureCallback>
 8009db0:	e005      	b.n	8009dbe <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009db2:	6878      	ldr	r0, [r7, #4]
 8009db4:	f000 f96c 	bl	800a090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009db8:	6878      	ldr	r0, [r7, #4]
 8009dba:	f000 f97d 	bl	800a0b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	2200      	movs	r2, #0
 8009dc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	681b      	ldr	r3, [r3, #0]
 8009dc8:	691b      	ldr	r3, [r3, #16]
 8009dca:	f003 0310 	and.w	r3, r3, #16
 8009dce:	2b10      	cmp	r3, #16
 8009dd0:	d122      	bne.n	8009e18 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	68db      	ldr	r3, [r3, #12]
 8009dd8:	f003 0310 	and.w	r3, r3, #16
 8009ddc:	2b10      	cmp	r3, #16
 8009dde:	d11b      	bne.n	8009e18 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	681b      	ldr	r3, [r3, #0]
 8009de4:	f06f 0210 	mvn.w	r2, #16
 8009de8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	2208      	movs	r2, #8
 8009dee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	69db      	ldr	r3, [r3, #28]
 8009df6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009dfa:	2b00      	cmp	r3, #0
 8009dfc:	d003      	beq.n	8009e06 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009dfe:	6878      	ldr	r0, [r7, #4]
 8009e00:	f000 f950 	bl	800a0a4 <HAL_TIM_IC_CaptureCallback>
 8009e04:	e005      	b.n	8009e12 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009e06:	6878      	ldr	r0, [r7, #4]
 8009e08:	f000 f942 	bl	800a090 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009e0c:	6878      	ldr	r0, [r7, #4]
 8009e0e:	f000 f953 	bl	800a0b8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009e12:	687b      	ldr	r3, [r7, #4]
 8009e14:	2200      	movs	r2, #0
 8009e16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	681b      	ldr	r3, [r3, #0]
 8009e1c:	691b      	ldr	r3, [r3, #16]
 8009e1e:	f003 0301 	and.w	r3, r3, #1
 8009e22:	2b01      	cmp	r3, #1
 8009e24:	d10e      	bne.n	8009e44 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8009e26:	687b      	ldr	r3, [r7, #4]
 8009e28:	681b      	ldr	r3, [r3, #0]
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	f003 0301 	and.w	r3, r3, #1
 8009e30:	2b01      	cmp	r3, #1
 8009e32:	d107      	bne.n	8009e44 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8009e34:	687b      	ldr	r3, [r7, #4]
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	f06f 0201 	mvn.w	r2, #1
 8009e3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8009e3e:	6878      	ldr	r0, [r7, #4]
 8009e40:	f7fa ff6e 	bl	8004d20 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	681b      	ldr	r3, [r3, #0]
 8009e48:	691b      	ldr	r3, [r3, #16]
 8009e4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e4e:	2b80      	cmp	r3, #128	; 0x80
 8009e50:	d10e      	bne.n	8009e70 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	68db      	ldr	r3, [r3, #12]
 8009e58:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e5c:	2b80      	cmp	r3, #128	; 0x80
 8009e5e:	d107      	bne.n	8009e70 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009e6a:	6878      	ldr	r0, [r7, #4]
 8009e6c:	f000 faa6 	bl	800a3bc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8009e70:	687b      	ldr	r3, [r7, #4]
 8009e72:	681b      	ldr	r3, [r3, #0]
 8009e74:	691b      	ldr	r3, [r3, #16]
 8009e76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e7a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009e7e:	d10e      	bne.n	8009e9e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	681b      	ldr	r3, [r3, #0]
 8009e84:	68db      	ldr	r3, [r3, #12]
 8009e86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e8a:	2b80      	cmp	r3, #128	; 0x80
 8009e8c:	d107      	bne.n	8009e9e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8009e8e:	687b      	ldr	r3, [r7, #4]
 8009e90:	681b      	ldr	r3, [r3, #0]
 8009e92:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8009e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8009e98:	6878      	ldr	r0, [r7, #4]
 8009e9a:	f000 fa99 	bl	800a3d0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009e9e:	687b      	ldr	r3, [r7, #4]
 8009ea0:	681b      	ldr	r3, [r3, #0]
 8009ea2:	691b      	ldr	r3, [r3, #16]
 8009ea4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ea8:	2b40      	cmp	r3, #64	; 0x40
 8009eaa:	d10e      	bne.n	8009eca <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	68db      	ldr	r3, [r3, #12]
 8009eb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009eb6:	2b40      	cmp	r3, #64	; 0x40
 8009eb8:	d107      	bne.n	8009eca <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009ec2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009ec4:	6878      	ldr	r0, [r7, #4]
 8009ec6:	f000 f901 	bl	800a0cc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	691b      	ldr	r3, [r3, #16]
 8009ed0:	f003 0320 	and.w	r3, r3, #32
 8009ed4:	2b20      	cmp	r3, #32
 8009ed6:	d10e      	bne.n	8009ef6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	68db      	ldr	r3, [r3, #12]
 8009ede:	f003 0320 	and.w	r3, r3, #32
 8009ee2:	2b20      	cmp	r3, #32
 8009ee4:	d107      	bne.n	8009ef6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009ee6:	687b      	ldr	r3, [r7, #4]
 8009ee8:	681b      	ldr	r3, [r3, #0]
 8009eea:	f06f 0220 	mvn.w	r2, #32
 8009eee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009ef0:	6878      	ldr	r0, [r7, #4]
 8009ef2:	f000 fa59 	bl	800a3a8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009ef6:	bf00      	nop
 8009ef8:	3708      	adds	r7, #8
 8009efa:	46bd      	mov	sp, r7
 8009efc:	bd80      	pop	{r7, pc}

08009efe <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8009efe:	b580      	push	{r7, lr}
 8009f00:	b084      	sub	sp, #16
 8009f02:	af00      	add	r7, sp, #0
 8009f04:	6078      	str	r0, [r7, #4]
 8009f06:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8009f08:	2300      	movs	r3, #0
 8009f0a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8009f0c:	687b      	ldr	r3, [r7, #4]
 8009f0e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009f12:	2b01      	cmp	r3, #1
 8009f14:	d101      	bne.n	8009f1a <HAL_TIM_ConfigClockSource+0x1c>
 8009f16:	2302      	movs	r3, #2
 8009f18:	e0b6      	b.n	800a088 <HAL_TIM_ConfigClockSource+0x18a>
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2201      	movs	r2, #1
 8009f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8009f22:	687b      	ldr	r3, [r7, #4]
 8009f24:	2202      	movs	r2, #2
 8009f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	681b      	ldr	r3, [r3, #0]
 8009f2e:	689b      	ldr	r3, [r3, #8]
 8009f30:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8009f32:	68bb      	ldr	r3, [r7, #8]
 8009f34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009f38:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009f3c:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009f3e:	68bb      	ldr	r3, [r7, #8]
 8009f40:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009f44:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8009f46:	687b      	ldr	r3, [r7, #4]
 8009f48:	681b      	ldr	r3, [r3, #0]
 8009f4a:	68ba      	ldr	r2, [r7, #8]
 8009f4c:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009f4e:	683b      	ldr	r3, [r7, #0]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f56:	d03e      	beq.n	8009fd6 <HAL_TIM_ConfigClockSource+0xd8>
 8009f58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f5c:	f200 8087 	bhi.w	800a06e <HAL_TIM_ConfigClockSource+0x170>
 8009f60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f64:	f000 8086 	beq.w	800a074 <HAL_TIM_ConfigClockSource+0x176>
 8009f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f6c:	d87f      	bhi.n	800a06e <HAL_TIM_ConfigClockSource+0x170>
 8009f6e:	2b70      	cmp	r3, #112	; 0x70
 8009f70:	d01a      	beq.n	8009fa8 <HAL_TIM_ConfigClockSource+0xaa>
 8009f72:	2b70      	cmp	r3, #112	; 0x70
 8009f74:	d87b      	bhi.n	800a06e <HAL_TIM_ConfigClockSource+0x170>
 8009f76:	2b60      	cmp	r3, #96	; 0x60
 8009f78:	d050      	beq.n	800a01c <HAL_TIM_ConfigClockSource+0x11e>
 8009f7a:	2b60      	cmp	r3, #96	; 0x60
 8009f7c:	d877      	bhi.n	800a06e <HAL_TIM_ConfigClockSource+0x170>
 8009f7e:	2b50      	cmp	r3, #80	; 0x50
 8009f80:	d03c      	beq.n	8009ffc <HAL_TIM_ConfigClockSource+0xfe>
 8009f82:	2b50      	cmp	r3, #80	; 0x50
 8009f84:	d873      	bhi.n	800a06e <HAL_TIM_ConfigClockSource+0x170>
 8009f86:	2b40      	cmp	r3, #64	; 0x40
 8009f88:	d058      	beq.n	800a03c <HAL_TIM_ConfigClockSource+0x13e>
 8009f8a:	2b40      	cmp	r3, #64	; 0x40
 8009f8c:	d86f      	bhi.n	800a06e <HAL_TIM_ConfigClockSource+0x170>
 8009f8e:	2b30      	cmp	r3, #48	; 0x30
 8009f90:	d064      	beq.n	800a05c <HAL_TIM_ConfigClockSource+0x15e>
 8009f92:	2b30      	cmp	r3, #48	; 0x30
 8009f94:	d86b      	bhi.n	800a06e <HAL_TIM_ConfigClockSource+0x170>
 8009f96:	2b20      	cmp	r3, #32
 8009f98:	d060      	beq.n	800a05c <HAL_TIM_ConfigClockSource+0x15e>
 8009f9a:	2b20      	cmp	r3, #32
 8009f9c:	d867      	bhi.n	800a06e <HAL_TIM_ConfigClockSource+0x170>
 8009f9e:	2b00      	cmp	r3, #0
 8009fa0:	d05c      	beq.n	800a05c <HAL_TIM_ConfigClockSource+0x15e>
 8009fa2:	2b10      	cmp	r3, #16
 8009fa4:	d05a      	beq.n	800a05c <HAL_TIM_ConfigClockSource+0x15e>
 8009fa6:	e062      	b.n	800a06e <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	6818      	ldr	r0, [r3, #0]
 8009fac:	683b      	ldr	r3, [r7, #0]
 8009fae:	6899      	ldr	r1, [r3, #8]
 8009fb0:	683b      	ldr	r3, [r7, #0]
 8009fb2:	685a      	ldr	r2, [r3, #4]
 8009fb4:	683b      	ldr	r3, [r7, #0]
 8009fb6:	68db      	ldr	r3, [r3, #12]
 8009fb8:	f000 f970 	bl	800a29c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	681b      	ldr	r3, [r3, #0]
 8009fc0:	689b      	ldr	r3, [r3, #8]
 8009fc2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009fca:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009fcc:	687b      	ldr	r3, [r7, #4]
 8009fce:	681b      	ldr	r3, [r3, #0]
 8009fd0:	68ba      	ldr	r2, [r7, #8]
 8009fd2:	609a      	str	r2, [r3, #8]
      break;
 8009fd4:	e04f      	b.n	800a076 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009fd6:	687b      	ldr	r3, [r7, #4]
 8009fd8:	6818      	ldr	r0, [r3, #0]
 8009fda:	683b      	ldr	r3, [r7, #0]
 8009fdc:	6899      	ldr	r1, [r3, #8]
 8009fde:	683b      	ldr	r3, [r7, #0]
 8009fe0:	685a      	ldr	r2, [r3, #4]
 8009fe2:	683b      	ldr	r3, [r7, #0]
 8009fe4:	68db      	ldr	r3, [r3, #12]
 8009fe6:	f000 f959 	bl	800a29c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009fea:	687b      	ldr	r3, [r7, #4]
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	689a      	ldr	r2, [r3, #8]
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009ff8:	609a      	str	r2, [r3, #8]
      break;
 8009ffa:	e03c      	b.n	800a076 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	6818      	ldr	r0, [r3, #0]
 800a000:	683b      	ldr	r3, [r7, #0]
 800a002:	6859      	ldr	r1, [r3, #4]
 800a004:	683b      	ldr	r3, [r7, #0]
 800a006:	68db      	ldr	r3, [r3, #12]
 800a008:	461a      	mov	r2, r3
 800a00a:	f000 f8cd 	bl	800a1a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2150      	movs	r1, #80	; 0x50
 800a014:	4618      	mov	r0, r3
 800a016:	f000 f926 	bl	800a266 <TIM_ITRx_SetConfig>
      break;
 800a01a:	e02c      	b.n	800a076 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800a01c:	687b      	ldr	r3, [r7, #4]
 800a01e:	6818      	ldr	r0, [r3, #0]
 800a020:	683b      	ldr	r3, [r7, #0]
 800a022:	6859      	ldr	r1, [r3, #4]
 800a024:	683b      	ldr	r3, [r7, #0]
 800a026:	68db      	ldr	r3, [r3, #12]
 800a028:	461a      	mov	r2, r3
 800a02a:	f000 f8ec 	bl	800a206 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	2160      	movs	r1, #96	; 0x60
 800a034:	4618      	mov	r0, r3
 800a036:	f000 f916 	bl	800a266 <TIM_ITRx_SetConfig>
      break;
 800a03a:	e01c      	b.n	800a076 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800a03c:	687b      	ldr	r3, [r7, #4]
 800a03e:	6818      	ldr	r0, [r3, #0]
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	6859      	ldr	r1, [r3, #4]
 800a044:	683b      	ldr	r3, [r7, #0]
 800a046:	68db      	ldr	r3, [r3, #12]
 800a048:	461a      	mov	r2, r3
 800a04a:	f000 f8ad 	bl	800a1a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	2140      	movs	r1, #64	; 0x40
 800a054:	4618      	mov	r0, r3
 800a056:	f000 f906 	bl	800a266 <TIM_ITRx_SetConfig>
      break;
 800a05a:	e00c      	b.n	800a076 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681a      	ldr	r2, [r3, #0]
 800a060:	683b      	ldr	r3, [r7, #0]
 800a062:	681b      	ldr	r3, [r3, #0]
 800a064:	4619      	mov	r1, r3
 800a066:	4610      	mov	r0, r2
 800a068:	f000 f8fd 	bl	800a266 <TIM_ITRx_SetConfig>
      break;
 800a06c:	e003      	b.n	800a076 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800a06e:	2301      	movs	r3, #1
 800a070:	73fb      	strb	r3, [r7, #15]
      break;
 800a072:	e000      	b.n	800a076 <HAL_TIM_ConfigClockSource+0x178>
      break;
 800a074:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2201      	movs	r2, #1
 800a07a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a07e:	687b      	ldr	r3, [r7, #4]
 800a080:	2200      	movs	r2, #0
 800a082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800a086:	7bfb      	ldrb	r3, [r7, #15]
}
 800a088:	4618      	mov	r0, r3
 800a08a:	3710      	adds	r7, #16
 800a08c:	46bd      	mov	sp, r7
 800a08e:	bd80      	pop	{r7, pc}

0800a090 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a090:	b480      	push	{r7}
 800a092:	b083      	sub	sp, #12
 800a094:	af00      	add	r7, sp, #0
 800a096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a098:	bf00      	nop
 800a09a:	370c      	adds	r7, #12
 800a09c:	46bd      	mov	sp, r7
 800a09e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0a2:	4770      	bx	lr

0800a0a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a0a4:	b480      	push	{r7}
 800a0a6:	b083      	sub	sp, #12
 800a0a8:	af00      	add	r7, sp, #0
 800a0aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a0ac:	bf00      	nop
 800a0ae:	370c      	adds	r7, #12
 800a0b0:	46bd      	mov	sp, r7
 800a0b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0b6:	4770      	bx	lr

0800a0b8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a0b8:	b480      	push	{r7}
 800a0ba:	b083      	sub	sp, #12
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a0c0:	bf00      	nop
 800a0c2:	370c      	adds	r7, #12
 800a0c4:	46bd      	mov	sp, r7
 800a0c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0ca:	4770      	bx	lr

0800a0cc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a0cc:	b480      	push	{r7}
 800a0ce:	b083      	sub	sp, #12
 800a0d0:	af00      	add	r7, sp, #0
 800a0d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a0d4:	bf00      	nop
 800a0d6:	370c      	adds	r7, #12
 800a0d8:	46bd      	mov	sp, r7
 800a0da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0de:	4770      	bx	lr

0800a0e0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800a0e0:	b480      	push	{r7}
 800a0e2:	b085      	sub	sp, #20
 800a0e4:	af00      	add	r7, sp, #0
 800a0e6:	6078      	str	r0, [r7, #4]
 800a0e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a0f0:	687b      	ldr	r3, [r7, #4]
 800a0f2:	4a2a      	ldr	r2, [pc, #168]	; (800a19c <TIM_Base_SetConfig+0xbc>)
 800a0f4:	4293      	cmp	r3, r2
 800a0f6:	d003      	beq.n	800a100 <TIM_Base_SetConfig+0x20>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a0fe:	d108      	bne.n	800a112 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a106:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a108:	683b      	ldr	r3, [r7, #0]
 800a10a:	685b      	ldr	r3, [r3, #4]
 800a10c:	68fa      	ldr	r2, [r7, #12]
 800a10e:	4313      	orrs	r3, r2
 800a110:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a112:	687b      	ldr	r3, [r7, #4]
 800a114:	4a21      	ldr	r2, [pc, #132]	; (800a19c <TIM_Base_SetConfig+0xbc>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d00b      	beq.n	800a132 <TIM_Base_SetConfig+0x52>
 800a11a:	687b      	ldr	r3, [r7, #4]
 800a11c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a120:	d007      	beq.n	800a132 <TIM_Base_SetConfig+0x52>
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	4a1e      	ldr	r2, [pc, #120]	; (800a1a0 <TIM_Base_SetConfig+0xc0>)
 800a126:	4293      	cmp	r3, r2
 800a128:	d003      	beq.n	800a132 <TIM_Base_SetConfig+0x52>
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	4a1d      	ldr	r2, [pc, #116]	; (800a1a4 <TIM_Base_SetConfig+0xc4>)
 800a12e:	4293      	cmp	r3, r2
 800a130:	d108      	bne.n	800a144 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a138:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	68db      	ldr	r3, [r3, #12]
 800a13e:	68fa      	ldr	r2, [r7, #12]
 800a140:	4313      	orrs	r3, r2
 800a142:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	695b      	ldr	r3, [r3, #20]
 800a14e:	4313      	orrs	r3, r2
 800a150:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	68fa      	ldr	r2, [r7, #12]
 800a156:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a158:	683b      	ldr	r3, [r7, #0]
 800a15a:	689a      	ldr	r2, [r3, #8]
 800a15c:	687b      	ldr	r3, [r7, #4]
 800a15e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a160:	683b      	ldr	r3, [r7, #0]
 800a162:	681a      	ldr	r2, [r3, #0]
 800a164:	687b      	ldr	r3, [r7, #4]
 800a166:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	4a0c      	ldr	r2, [pc, #48]	; (800a19c <TIM_Base_SetConfig+0xbc>)
 800a16c:	4293      	cmp	r3, r2
 800a16e:	d007      	beq.n	800a180 <TIM_Base_SetConfig+0xa0>
 800a170:	687b      	ldr	r3, [r7, #4]
 800a172:	4a0b      	ldr	r2, [pc, #44]	; (800a1a0 <TIM_Base_SetConfig+0xc0>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d003      	beq.n	800a180 <TIM_Base_SetConfig+0xa0>
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	4a0a      	ldr	r2, [pc, #40]	; (800a1a4 <TIM_Base_SetConfig+0xc4>)
 800a17c:	4293      	cmp	r3, r2
 800a17e:	d103      	bne.n	800a188 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a180:	683b      	ldr	r3, [r7, #0]
 800a182:	691a      	ldr	r2, [r3, #16]
 800a184:	687b      	ldr	r3, [r7, #4]
 800a186:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a188:	687b      	ldr	r3, [r7, #4]
 800a18a:	2201      	movs	r2, #1
 800a18c:	615a      	str	r2, [r3, #20]
}
 800a18e:	bf00      	nop
 800a190:	3714      	adds	r7, #20
 800a192:	46bd      	mov	sp, r7
 800a194:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a198:	4770      	bx	lr
 800a19a:	bf00      	nop
 800a19c:	40012c00 	.word	0x40012c00
 800a1a0:	40014000 	.word	0x40014000
 800a1a4:	40014400 	.word	0x40014400

0800a1a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a1a8:	b480      	push	{r7}
 800a1aa:	b087      	sub	sp, #28
 800a1ac:	af00      	add	r7, sp, #0
 800a1ae:	60f8      	str	r0, [r7, #12]
 800a1b0:	60b9      	str	r1, [r7, #8]
 800a1b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	6a1b      	ldr	r3, [r3, #32]
 800a1b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a1ba:	68fb      	ldr	r3, [r7, #12]
 800a1bc:	6a1b      	ldr	r3, [r3, #32]
 800a1be:	f023 0201 	bic.w	r2, r3, #1
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a1c6:	68fb      	ldr	r3, [r7, #12]
 800a1c8:	699b      	ldr	r3, [r3, #24]
 800a1ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a1cc:	693b      	ldr	r3, [r7, #16]
 800a1ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a1d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a1d4:	687b      	ldr	r3, [r7, #4]
 800a1d6:	011b      	lsls	r3, r3, #4
 800a1d8:	693a      	ldr	r2, [r7, #16]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a1de:	697b      	ldr	r3, [r7, #20]
 800a1e0:	f023 030a 	bic.w	r3, r3, #10
 800a1e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800a1e6:	697a      	ldr	r2, [r7, #20]
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	4313      	orrs	r3, r2
 800a1ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	693a      	ldr	r2, [r7, #16]
 800a1f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	697a      	ldr	r2, [r7, #20]
 800a1f8:	621a      	str	r2, [r3, #32]
}
 800a1fa:	bf00      	nop
 800a1fc:	371c      	adds	r7, #28
 800a1fe:	46bd      	mov	sp, r7
 800a200:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a204:	4770      	bx	lr

0800a206 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a206:	b480      	push	{r7}
 800a208:	b087      	sub	sp, #28
 800a20a:	af00      	add	r7, sp, #0
 800a20c:	60f8      	str	r0, [r7, #12]
 800a20e:	60b9      	str	r1, [r7, #8]
 800a210:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	f023 0210 	bic.w	r2, r3, #16
 800a21a:	68fb      	ldr	r3, [r7, #12]
 800a21c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	699b      	ldr	r3, [r3, #24]
 800a222:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6a1b      	ldr	r3, [r3, #32]
 800a228:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800a22a:	697b      	ldr	r3, [r7, #20]
 800a22c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800a230:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	031b      	lsls	r3, r3, #12
 800a236:	697a      	ldr	r2, [r7, #20]
 800a238:	4313      	orrs	r3, r2
 800a23a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800a242:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800a244:	68bb      	ldr	r3, [r7, #8]
 800a246:	011b      	lsls	r3, r3, #4
 800a248:	693a      	ldr	r2, [r7, #16]
 800a24a:	4313      	orrs	r3, r2
 800a24c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800a24e:	68fb      	ldr	r3, [r7, #12]
 800a250:	697a      	ldr	r2, [r7, #20]
 800a252:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	693a      	ldr	r2, [r7, #16]
 800a258:	621a      	str	r2, [r3, #32]
}
 800a25a:	bf00      	nop
 800a25c:	371c      	adds	r7, #28
 800a25e:	46bd      	mov	sp, r7
 800a260:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a264:	4770      	bx	lr

0800a266 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800a266:	b480      	push	{r7}
 800a268:	b085      	sub	sp, #20
 800a26a:	af00      	add	r7, sp, #0
 800a26c:	6078      	str	r0, [r7, #4]
 800a26e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800a270:	687b      	ldr	r3, [r7, #4]
 800a272:	689b      	ldr	r3, [r3, #8]
 800a274:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a27c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800a27e:	683a      	ldr	r2, [r7, #0]
 800a280:	68fb      	ldr	r3, [r7, #12]
 800a282:	4313      	orrs	r3, r2
 800a284:	f043 0307 	orr.w	r3, r3, #7
 800a288:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a28a:	687b      	ldr	r3, [r7, #4]
 800a28c:	68fa      	ldr	r2, [r7, #12]
 800a28e:	609a      	str	r2, [r3, #8]
}
 800a290:	bf00      	nop
 800a292:	3714      	adds	r7, #20
 800a294:	46bd      	mov	sp, r7
 800a296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a29a:	4770      	bx	lr

0800a29c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800a29c:	b480      	push	{r7}
 800a29e:	b087      	sub	sp, #28
 800a2a0:	af00      	add	r7, sp, #0
 800a2a2:	60f8      	str	r0, [r7, #12]
 800a2a4:	60b9      	str	r1, [r7, #8]
 800a2a6:	607a      	str	r2, [r7, #4]
 800a2a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	689b      	ldr	r3, [r3, #8]
 800a2ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a2b0:	697b      	ldr	r3, [r7, #20]
 800a2b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a2b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800a2b8:	683b      	ldr	r3, [r7, #0]
 800a2ba:	021a      	lsls	r2, r3, #8
 800a2bc:	687b      	ldr	r3, [r7, #4]
 800a2be:	431a      	orrs	r2, r3
 800a2c0:	68bb      	ldr	r3, [r7, #8]
 800a2c2:	4313      	orrs	r3, r2
 800a2c4:	697a      	ldr	r2, [r7, #20]
 800a2c6:	4313      	orrs	r3, r2
 800a2c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	697a      	ldr	r2, [r7, #20]
 800a2ce:	609a      	str	r2, [r3, #8]
}
 800a2d0:	bf00      	nop
 800a2d2:	371c      	adds	r7, #28
 800a2d4:	46bd      	mov	sp, r7
 800a2d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2da:	4770      	bx	lr

0800a2dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800a2dc:	b480      	push	{r7}
 800a2de:	b085      	sub	sp, #20
 800a2e0:	af00      	add	r7, sp, #0
 800a2e2:	6078      	str	r0, [r7, #4]
 800a2e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a2ec:	2b01      	cmp	r3, #1
 800a2ee:	d101      	bne.n	800a2f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	e04f      	b.n	800a394 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	2201      	movs	r2, #1
 800a2f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800a2fc:	687b      	ldr	r3, [r7, #4]
 800a2fe:	2202      	movs	r2, #2
 800a300:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800a304:	687b      	ldr	r3, [r7, #4]
 800a306:	681b      	ldr	r3, [r3, #0]
 800a308:	685b      	ldr	r3, [r3, #4]
 800a30a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800a30c:	687b      	ldr	r3, [r7, #4]
 800a30e:	681b      	ldr	r3, [r3, #0]
 800a310:	689b      	ldr	r3, [r3, #8]
 800a312:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	4a21      	ldr	r2, [pc, #132]	; (800a3a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a31a:	4293      	cmp	r3, r2
 800a31c:	d108      	bne.n	800a330 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800a324:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800a326:	683b      	ldr	r3, [r7, #0]
 800a328:	685b      	ldr	r3, [r3, #4]
 800a32a:	68fa      	ldr	r2, [r7, #12]
 800a32c:	4313      	orrs	r3, r2
 800a32e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800a330:	68fb      	ldr	r3, [r7, #12]
 800a332:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a336:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800a338:	683b      	ldr	r3, [r7, #0]
 800a33a:	681b      	ldr	r3, [r3, #0]
 800a33c:	68fa      	ldr	r2, [r7, #12]
 800a33e:	4313      	orrs	r3, r2
 800a340:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800a342:	687b      	ldr	r3, [r7, #4]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	68fa      	ldr	r2, [r7, #12]
 800a348:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800a34a:	687b      	ldr	r3, [r7, #4]
 800a34c:	681b      	ldr	r3, [r3, #0]
 800a34e:	4a14      	ldr	r2, [pc, #80]	; (800a3a0 <HAL_TIMEx_MasterConfigSynchronization+0xc4>)
 800a350:	4293      	cmp	r3, r2
 800a352:	d009      	beq.n	800a368 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a354:	687b      	ldr	r3, [r7, #4]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a35c:	d004      	beq.n	800a368 <HAL_TIMEx_MasterConfigSynchronization+0x8c>
 800a35e:	687b      	ldr	r3, [r7, #4]
 800a360:	681b      	ldr	r3, [r3, #0]
 800a362:	4a10      	ldr	r2, [pc, #64]	; (800a3a4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800a364:	4293      	cmp	r3, r2
 800a366:	d10c      	bne.n	800a382 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800a368:	68bb      	ldr	r3, [r7, #8]
 800a36a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a36e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800a370:	683b      	ldr	r3, [r7, #0]
 800a372:	689b      	ldr	r3, [r3, #8]
 800a374:	68ba      	ldr	r2, [r7, #8]
 800a376:	4313      	orrs	r3, r2
 800a378:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	681b      	ldr	r3, [r3, #0]
 800a37e:	68ba      	ldr	r2, [r7, #8]
 800a380:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800a382:	687b      	ldr	r3, [r7, #4]
 800a384:	2201      	movs	r2, #1
 800a386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a38a:	687b      	ldr	r3, [r7, #4]
 800a38c:	2200      	movs	r2, #0
 800a38e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a392:	2300      	movs	r3, #0
}
 800a394:	4618      	mov	r0, r3
 800a396:	3714      	adds	r7, #20
 800a398:	46bd      	mov	sp, r7
 800a39a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a39e:	4770      	bx	lr
 800a3a0:	40012c00 	.word	0x40012c00
 800a3a4:	40014000 	.word	0x40014000

0800a3a8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800a3a8:	b480      	push	{r7}
 800a3aa:	b083      	sub	sp, #12
 800a3ac:	af00      	add	r7, sp, #0
 800a3ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800a3b0:	bf00      	nop
 800a3b2:	370c      	adds	r7, #12
 800a3b4:	46bd      	mov	sp, r7
 800a3b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ba:	4770      	bx	lr

0800a3bc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800a3bc:	b480      	push	{r7}
 800a3be:	b083      	sub	sp, #12
 800a3c0:	af00      	add	r7, sp, #0
 800a3c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800a3c4:	bf00      	nop
 800a3c6:	370c      	adds	r7, #12
 800a3c8:	46bd      	mov	sp, r7
 800a3ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3ce:	4770      	bx	lr

0800a3d0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800a3d0:	b480      	push	{r7}
 800a3d2:	b083      	sub	sp, #12
 800a3d4:	af00      	add	r7, sp, #0
 800a3d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800a3d8:	bf00      	nop
 800a3da:	370c      	adds	r7, #12
 800a3dc:	46bd      	mov	sp, r7
 800a3de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3e2:	4770      	bx	lr

0800a3e4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800a3e4:	b580      	push	{r7, lr}
 800a3e6:	b082      	sub	sp, #8
 800a3e8:	af00      	add	r7, sp, #0
 800a3ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800a3ec:	687b      	ldr	r3, [r7, #4]
 800a3ee:	2b00      	cmp	r3, #0
 800a3f0:	d101      	bne.n	800a3f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800a3f2:	2301      	movs	r3, #1
 800a3f4:	e040      	b.n	800a478 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800a3f6:	687b      	ldr	r3, [r7, #4]
 800a3f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d106      	bne.n	800a40c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	2200      	movs	r2, #0
 800a402:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800a406:	6878      	ldr	r0, [r7, #4]
 800a408:	f7fa feae 	bl	8005168 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800a40c:	687b      	ldr	r3, [r7, #4]
 800a40e:	2224      	movs	r2, #36	; 0x24
 800a410:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800a412:	687b      	ldr	r3, [r7, #4]
 800a414:	681b      	ldr	r3, [r3, #0]
 800a416:	681a      	ldr	r2, [r3, #0]
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	f022 0201 	bic.w	r2, r2, #1
 800a420:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800a422:	6878      	ldr	r0, [r7, #4]
 800a424:	f000 f8c0 	bl	800a5a8 <UART_SetConfig>
 800a428:	4603      	mov	r3, r0
 800a42a:	2b01      	cmp	r3, #1
 800a42c:	d101      	bne.n	800a432 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800a42e:	2301      	movs	r3, #1
 800a430:	e022      	b.n	800a478 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a436:	2b00      	cmp	r3, #0
 800a438:	d002      	beq.n	800a440 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800a43a:	6878      	ldr	r0, [r7, #4]
 800a43c:	f000 fae0 	bl	800aa00 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800a440:	687b      	ldr	r3, [r7, #4]
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	685a      	ldr	r2, [r3, #4]
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800a44e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800a450:	687b      	ldr	r3, [r7, #4]
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	689a      	ldr	r2, [r3, #8]
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800a45e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800a460:	687b      	ldr	r3, [r7, #4]
 800a462:	681b      	ldr	r3, [r3, #0]
 800a464:	681a      	ldr	r2, [r3, #0]
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	681b      	ldr	r3, [r3, #0]
 800a46a:	f042 0201 	orr.w	r2, r2, #1
 800a46e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800a470:	6878      	ldr	r0, [r7, #4]
 800a472:	f000 fb67 	bl	800ab44 <UART_CheckIdleState>
 800a476:	4603      	mov	r3, r0
}
 800a478:	4618      	mov	r0, r3
 800a47a:	3708      	adds	r7, #8
 800a47c:	46bd      	mov	sp, r7
 800a47e:	bd80      	pop	{r7, pc}

0800a480 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800a480:	b580      	push	{r7, lr}
 800a482:	b08a      	sub	sp, #40	; 0x28
 800a484:	af02      	add	r7, sp, #8
 800a486:	60f8      	str	r0, [r7, #12]
 800a488:	60b9      	str	r1, [r7, #8]
 800a48a:	603b      	str	r3, [r7, #0]
 800a48c:	4613      	mov	r3, r2
 800a48e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800a490:	68fb      	ldr	r3, [r7, #12]
 800a492:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800a494:	2b20      	cmp	r3, #32
 800a496:	f040 8082 	bne.w	800a59e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 800a49a:	68bb      	ldr	r3, [r7, #8]
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d002      	beq.n	800a4a6 <HAL_UART_Transmit+0x26>
 800a4a0:	88fb      	ldrh	r3, [r7, #6]
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d101      	bne.n	800a4aa <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e07a      	b.n	800a5a0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 800a4aa:	68fb      	ldr	r3, [r7, #12]
 800a4ac:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d101      	bne.n	800a4b8 <HAL_UART_Transmit+0x38>
 800a4b4:	2302      	movs	r3, #2
 800a4b6:	e073      	b.n	800a5a0 <HAL_UART_Transmit+0x120>
 800a4b8:	68fb      	ldr	r3, [r7, #12]
 800a4ba:	2201      	movs	r2, #1
 800a4bc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	2200      	movs	r2, #0
 800a4c4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800a4c8:	68fb      	ldr	r3, [r7, #12]
 800a4ca:	2221      	movs	r2, #33	; 0x21
 800a4cc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800a4ce:	f7fb f80d 	bl	80054ec <HAL_GetTick>
 800a4d2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800a4d4:	68fb      	ldr	r3, [r7, #12]
 800a4d6:	88fa      	ldrh	r2, [r7, #6]
 800a4d8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800a4dc:	68fb      	ldr	r3, [r7, #12]
 800a4de:	88fa      	ldrh	r2, [r7, #6]
 800a4e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	689b      	ldr	r3, [r3, #8]
 800a4e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a4ec:	d108      	bne.n	800a500 <HAL_UART_Transmit+0x80>
 800a4ee:	68fb      	ldr	r3, [r7, #12]
 800a4f0:	691b      	ldr	r3, [r3, #16]
 800a4f2:	2b00      	cmp	r3, #0
 800a4f4:	d104      	bne.n	800a500 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800a4f6:	2300      	movs	r3, #0
 800a4f8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800a4fa:	68bb      	ldr	r3, [r7, #8]
 800a4fc:	61bb      	str	r3, [r7, #24]
 800a4fe:	e003      	b.n	800a508 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800a500:	68bb      	ldr	r3, [r7, #8]
 800a502:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800a504:	2300      	movs	r3, #0
 800a506:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800a508:	68fb      	ldr	r3, [r7, #12]
 800a50a:	2200      	movs	r2, #0
 800a50c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800a510:	e02d      	b.n	800a56e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800a512:	683b      	ldr	r3, [r7, #0]
 800a514:	9300      	str	r3, [sp, #0]
 800a516:	697b      	ldr	r3, [r7, #20]
 800a518:	2200      	movs	r2, #0
 800a51a:	2180      	movs	r1, #128	; 0x80
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f000 fb5a 	bl	800abd6 <UART_WaitOnFlagUntilTimeout>
 800a522:	4603      	mov	r3, r0
 800a524:	2b00      	cmp	r3, #0
 800a526:	d001      	beq.n	800a52c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 800a528:	2303      	movs	r3, #3
 800a52a:	e039      	b.n	800a5a0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800a52c:	69fb      	ldr	r3, [r7, #28]
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d10b      	bne.n	800a54a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800a532:	69bb      	ldr	r3, [r7, #24]
 800a534:	881a      	ldrh	r2, [r3, #0]
 800a536:	68fb      	ldr	r3, [r7, #12]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a53e:	b292      	uxth	r2, r2
 800a540:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800a542:	69bb      	ldr	r3, [r7, #24]
 800a544:	3302      	adds	r3, #2
 800a546:	61bb      	str	r3, [r7, #24]
 800a548:	e008      	b.n	800a55c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800a54a:	69fb      	ldr	r3, [r7, #28]
 800a54c:	781a      	ldrb	r2, [r3, #0]
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	681b      	ldr	r3, [r3, #0]
 800a552:	b292      	uxth	r2, r2
 800a554:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800a556:	69fb      	ldr	r3, [r7, #28]
 800a558:	3301      	adds	r3, #1
 800a55a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a562:	b29b      	uxth	r3, r3
 800a564:	3b01      	subs	r3, #1
 800a566:	b29a      	uxth	r2, r3
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800a574:	b29b      	uxth	r3, r3
 800a576:	2b00      	cmp	r3, #0
 800a578:	d1cb      	bne.n	800a512 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800a57a:	683b      	ldr	r3, [r7, #0]
 800a57c:	9300      	str	r3, [sp, #0]
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	2200      	movs	r2, #0
 800a582:	2140      	movs	r1, #64	; 0x40
 800a584:	68f8      	ldr	r0, [r7, #12]
 800a586:	f000 fb26 	bl	800abd6 <UART_WaitOnFlagUntilTimeout>
 800a58a:	4603      	mov	r3, r0
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d001      	beq.n	800a594 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800a590:	2303      	movs	r3, #3
 800a592:	e005      	b.n	800a5a0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800a594:	68fb      	ldr	r3, [r7, #12]
 800a596:	2220      	movs	r2, #32
 800a598:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 800a59a:	2300      	movs	r3, #0
 800a59c:	e000      	b.n	800a5a0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800a59e:	2302      	movs	r3, #2
  }
}
 800a5a0:	4618      	mov	r0, r3
 800a5a2:	3720      	adds	r7, #32
 800a5a4:	46bd      	mov	sp, r7
 800a5a6:	bd80      	pop	{r7, pc}

0800a5a8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a5a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a5ac:	b08a      	sub	sp, #40	; 0x28
 800a5ae:	af00      	add	r7, sp, #0
 800a5b0:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	689a      	ldr	r2, [r3, #8]
 800a5bc:	68fb      	ldr	r3, [r7, #12]
 800a5be:	691b      	ldr	r3, [r3, #16]
 800a5c0:	431a      	orrs	r2, r3
 800a5c2:	68fb      	ldr	r3, [r7, #12]
 800a5c4:	695b      	ldr	r3, [r3, #20]
 800a5c6:	431a      	orrs	r2, r3
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	69db      	ldr	r3, [r3, #28]
 800a5cc:	4313      	orrs	r3, r2
 800a5ce:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800a5d0:	68fb      	ldr	r3, [r7, #12]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	681a      	ldr	r2, [r3, #0]
 800a5d6:	4bb4      	ldr	r3, [pc, #720]	; (800a8a8 <UART_SetConfig+0x300>)
 800a5d8:	4013      	ands	r3, r2
 800a5da:	68fa      	ldr	r2, [r7, #12]
 800a5dc:	6812      	ldr	r2, [r2, #0]
 800a5de:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800a5e0:	430b      	orrs	r3, r1
 800a5e2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a5e4:	68fb      	ldr	r3, [r7, #12]
 800a5e6:	681b      	ldr	r3, [r3, #0]
 800a5e8:	685b      	ldr	r3, [r3, #4]
 800a5ea:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	68da      	ldr	r2, [r3, #12]
 800a5f2:	68fb      	ldr	r3, [r7, #12]
 800a5f4:	681b      	ldr	r3, [r3, #0]
 800a5f6:	430a      	orrs	r2, r1
 800a5f8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	699b      	ldr	r3, [r3, #24]
 800a5fe:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	4aa9      	ldr	r2, [pc, #676]	; (800a8ac <UART_SetConfig+0x304>)
 800a606:	4293      	cmp	r3, r2
 800a608:	d004      	beq.n	800a614 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800a60a:	68fb      	ldr	r3, [r7, #12]
 800a60c:	6a1b      	ldr	r3, [r3, #32]
 800a60e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a610:	4313      	orrs	r3, r2
 800a612:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a614:	68fb      	ldr	r3, [r7, #12]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	689b      	ldr	r3, [r3, #8]
 800a61a:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a61e:	68fb      	ldr	r3, [r7, #12]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a624:	430a      	orrs	r2, r1
 800a626:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a628:	68fb      	ldr	r3, [r7, #12]
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	4aa0      	ldr	r2, [pc, #640]	; (800a8b0 <UART_SetConfig+0x308>)
 800a62e:	4293      	cmp	r3, r2
 800a630:	d126      	bne.n	800a680 <UART_SetConfig+0xd8>
 800a632:	4ba0      	ldr	r3, [pc, #640]	; (800a8b4 <UART_SetConfig+0x30c>)
 800a634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a638:	f003 0303 	and.w	r3, r3, #3
 800a63c:	2b03      	cmp	r3, #3
 800a63e:	d81b      	bhi.n	800a678 <UART_SetConfig+0xd0>
 800a640:	a201      	add	r2, pc, #4	; (adr r2, 800a648 <UART_SetConfig+0xa0>)
 800a642:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a646:	bf00      	nop
 800a648:	0800a659 	.word	0x0800a659
 800a64c:	0800a669 	.word	0x0800a669
 800a650:	0800a661 	.word	0x0800a661
 800a654:	0800a671 	.word	0x0800a671
 800a658:	2301      	movs	r3, #1
 800a65a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a65e:	e080      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a660:	2302      	movs	r3, #2
 800a662:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a666:	e07c      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a668:	2304      	movs	r3, #4
 800a66a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a66e:	e078      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a670:	2308      	movs	r3, #8
 800a672:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a676:	e074      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a678:	2310      	movs	r3, #16
 800a67a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a67e:	e070      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	681b      	ldr	r3, [r3, #0]
 800a684:	4a8c      	ldr	r2, [pc, #560]	; (800a8b8 <UART_SetConfig+0x310>)
 800a686:	4293      	cmp	r3, r2
 800a688:	d138      	bne.n	800a6fc <UART_SetConfig+0x154>
 800a68a:	4b8a      	ldr	r3, [pc, #552]	; (800a8b4 <UART_SetConfig+0x30c>)
 800a68c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a690:	f003 030c 	and.w	r3, r3, #12
 800a694:	2b0c      	cmp	r3, #12
 800a696:	d82d      	bhi.n	800a6f4 <UART_SetConfig+0x14c>
 800a698:	a201      	add	r2, pc, #4	; (adr r2, 800a6a0 <UART_SetConfig+0xf8>)
 800a69a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a69e:	bf00      	nop
 800a6a0:	0800a6d5 	.word	0x0800a6d5
 800a6a4:	0800a6f5 	.word	0x0800a6f5
 800a6a8:	0800a6f5 	.word	0x0800a6f5
 800a6ac:	0800a6f5 	.word	0x0800a6f5
 800a6b0:	0800a6e5 	.word	0x0800a6e5
 800a6b4:	0800a6f5 	.word	0x0800a6f5
 800a6b8:	0800a6f5 	.word	0x0800a6f5
 800a6bc:	0800a6f5 	.word	0x0800a6f5
 800a6c0:	0800a6dd 	.word	0x0800a6dd
 800a6c4:	0800a6f5 	.word	0x0800a6f5
 800a6c8:	0800a6f5 	.word	0x0800a6f5
 800a6cc:	0800a6f5 	.word	0x0800a6f5
 800a6d0:	0800a6ed 	.word	0x0800a6ed
 800a6d4:	2300      	movs	r3, #0
 800a6d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6da:	e042      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a6dc:	2302      	movs	r3, #2
 800a6de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6e2:	e03e      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a6e4:	2304      	movs	r3, #4
 800a6e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6ea:	e03a      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a6ec:	2308      	movs	r3, #8
 800a6ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6f2:	e036      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a6f4:	2310      	movs	r3, #16
 800a6f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a6fa:	e032      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	4a6a      	ldr	r2, [pc, #424]	; (800a8ac <UART_SetConfig+0x304>)
 800a702:	4293      	cmp	r3, r2
 800a704:	d12a      	bne.n	800a75c <UART_SetConfig+0x1b4>
 800a706:	4b6b      	ldr	r3, [pc, #428]	; (800a8b4 <UART_SetConfig+0x30c>)
 800a708:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a70c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a710:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a714:	d01a      	beq.n	800a74c <UART_SetConfig+0x1a4>
 800a716:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a71a:	d81b      	bhi.n	800a754 <UART_SetConfig+0x1ac>
 800a71c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a720:	d00c      	beq.n	800a73c <UART_SetConfig+0x194>
 800a722:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a726:	d815      	bhi.n	800a754 <UART_SetConfig+0x1ac>
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d003      	beq.n	800a734 <UART_SetConfig+0x18c>
 800a72c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a730:	d008      	beq.n	800a744 <UART_SetConfig+0x19c>
 800a732:	e00f      	b.n	800a754 <UART_SetConfig+0x1ac>
 800a734:	2300      	movs	r3, #0
 800a736:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a73a:	e012      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a73c:	2302      	movs	r3, #2
 800a73e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a742:	e00e      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a744:	2304      	movs	r3, #4
 800a746:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a74a:	e00a      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a74c:	2308      	movs	r3, #8
 800a74e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a752:	e006      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a754:	2310      	movs	r3, #16
 800a756:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a75a:	e002      	b.n	800a762 <UART_SetConfig+0x1ba>
 800a75c:	2310      	movs	r3, #16
 800a75e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a762:	68fb      	ldr	r3, [r7, #12]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a51      	ldr	r2, [pc, #324]	; (800a8ac <UART_SetConfig+0x304>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d17a      	bne.n	800a862 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a76c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a770:	2b08      	cmp	r3, #8
 800a772:	d824      	bhi.n	800a7be <UART_SetConfig+0x216>
 800a774:	a201      	add	r2, pc, #4	; (adr r2, 800a77c <UART_SetConfig+0x1d4>)
 800a776:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a77a:	bf00      	nop
 800a77c:	0800a7a1 	.word	0x0800a7a1
 800a780:	0800a7bf 	.word	0x0800a7bf
 800a784:	0800a7a9 	.word	0x0800a7a9
 800a788:	0800a7bf 	.word	0x0800a7bf
 800a78c:	0800a7af 	.word	0x0800a7af
 800a790:	0800a7bf 	.word	0x0800a7bf
 800a794:	0800a7bf 	.word	0x0800a7bf
 800a798:	0800a7bf 	.word	0x0800a7bf
 800a79c:	0800a7b7 	.word	0x0800a7b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a7a0:	f7fe fde0 	bl	8009364 <HAL_RCC_GetPCLK1Freq>
 800a7a4:	61f8      	str	r0, [r7, #28]
        break;
 800a7a6:	e010      	b.n	800a7ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a7a8:	4b44      	ldr	r3, [pc, #272]	; (800a8bc <UART_SetConfig+0x314>)
 800a7aa:	61fb      	str	r3, [r7, #28]
        break;
 800a7ac:	e00d      	b.n	800a7ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a7ae:	f7fe fd41 	bl	8009234 <HAL_RCC_GetSysClockFreq>
 800a7b2:	61f8      	str	r0, [r7, #28]
        break;
 800a7b4:	e009      	b.n	800a7ca <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a7b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a7ba:	61fb      	str	r3, [r7, #28]
        break;
 800a7bc:	e005      	b.n	800a7ca <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800a7be:	2300      	movs	r3, #0
 800a7c0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a7c2:	2301      	movs	r3, #1
 800a7c4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a7c8:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800a7ca:	69fb      	ldr	r3, [r7, #28]
 800a7cc:	2b00      	cmp	r3, #0
 800a7ce:	f000 8107 	beq.w	800a9e0 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a7d2:	68fb      	ldr	r3, [r7, #12]
 800a7d4:	685a      	ldr	r2, [r3, #4]
 800a7d6:	4613      	mov	r3, r2
 800a7d8:	005b      	lsls	r3, r3, #1
 800a7da:	4413      	add	r3, r2
 800a7dc:	69fa      	ldr	r2, [r7, #28]
 800a7de:	429a      	cmp	r2, r3
 800a7e0:	d305      	bcc.n	800a7ee <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	685b      	ldr	r3, [r3, #4]
 800a7e6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800a7e8:	69fa      	ldr	r2, [r7, #28]
 800a7ea:	429a      	cmp	r2, r3
 800a7ec:	d903      	bls.n	800a7f6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 800a7ee:	2301      	movs	r3, #1
 800a7f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a7f4:	e0f4      	b.n	800a9e0 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a7f6:	69fb      	ldr	r3, [r7, #28]
 800a7f8:	2200      	movs	r2, #0
 800a7fa:	461c      	mov	r4, r3
 800a7fc:	4615      	mov	r5, r2
 800a7fe:	f04f 0200 	mov.w	r2, #0
 800a802:	f04f 0300 	mov.w	r3, #0
 800a806:	022b      	lsls	r3, r5, #8
 800a808:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 800a80c:	0222      	lsls	r2, r4, #8
 800a80e:	68f9      	ldr	r1, [r7, #12]
 800a810:	6849      	ldr	r1, [r1, #4]
 800a812:	0849      	lsrs	r1, r1, #1
 800a814:	2000      	movs	r0, #0
 800a816:	4688      	mov	r8, r1
 800a818:	4681      	mov	r9, r0
 800a81a:	eb12 0a08 	adds.w	sl, r2, r8
 800a81e:	eb43 0b09 	adc.w	fp, r3, r9
 800a822:	68fb      	ldr	r3, [r7, #12]
 800a824:	685b      	ldr	r3, [r3, #4]
 800a826:	2200      	movs	r2, #0
 800a828:	603b      	str	r3, [r7, #0]
 800a82a:	607a      	str	r2, [r7, #4]
 800a82c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800a830:	4650      	mov	r0, sl
 800a832:	4659      	mov	r1, fp
 800a834:	f7f6 f9f2 	bl	8000c1c <__aeabi_uldivmod>
 800a838:	4602      	mov	r2, r0
 800a83a:	460b      	mov	r3, r1
 800a83c:	4613      	mov	r3, r2
 800a83e:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a840:	69bb      	ldr	r3, [r7, #24]
 800a842:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a846:	d308      	bcc.n	800a85a <UART_SetConfig+0x2b2>
 800a848:	69bb      	ldr	r3, [r7, #24]
 800a84a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a84e:	d204      	bcs.n	800a85a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800a850:	68fb      	ldr	r3, [r7, #12]
 800a852:	681b      	ldr	r3, [r3, #0]
 800a854:	69ba      	ldr	r2, [r7, #24]
 800a856:	60da      	str	r2, [r3, #12]
 800a858:	e0c2      	b.n	800a9e0 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800a85a:	2301      	movs	r3, #1
 800a85c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a860:	e0be      	b.n	800a9e0 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a862:	68fb      	ldr	r3, [r7, #12]
 800a864:	69db      	ldr	r3, [r3, #28]
 800a866:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a86a:	d16a      	bne.n	800a942 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 800a86c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a870:	2b08      	cmp	r3, #8
 800a872:	d834      	bhi.n	800a8de <UART_SetConfig+0x336>
 800a874:	a201      	add	r2, pc, #4	; (adr r2, 800a87c <UART_SetConfig+0x2d4>)
 800a876:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a87a:	bf00      	nop
 800a87c:	0800a8a1 	.word	0x0800a8a1
 800a880:	0800a8c1 	.word	0x0800a8c1
 800a884:	0800a8c9 	.word	0x0800a8c9
 800a888:	0800a8df 	.word	0x0800a8df
 800a88c:	0800a8cf 	.word	0x0800a8cf
 800a890:	0800a8df 	.word	0x0800a8df
 800a894:	0800a8df 	.word	0x0800a8df
 800a898:	0800a8df 	.word	0x0800a8df
 800a89c:	0800a8d7 	.word	0x0800a8d7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a8a0:	f7fe fd60 	bl	8009364 <HAL_RCC_GetPCLK1Freq>
 800a8a4:	61f8      	str	r0, [r7, #28]
        break;
 800a8a6:	e020      	b.n	800a8ea <UART_SetConfig+0x342>
 800a8a8:	efff69f3 	.word	0xefff69f3
 800a8ac:	40008000 	.word	0x40008000
 800a8b0:	40013800 	.word	0x40013800
 800a8b4:	40021000 	.word	0x40021000
 800a8b8:	40004400 	.word	0x40004400
 800a8bc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a8c0:	f7fe fd66 	bl	8009390 <HAL_RCC_GetPCLK2Freq>
 800a8c4:	61f8      	str	r0, [r7, #28]
        break;
 800a8c6:	e010      	b.n	800a8ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a8c8:	4b4c      	ldr	r3, [pc, #304]	; (800a9fc <UART_SetConfig+0x454>)
 800a8ca:	61fb      	str	r3, [r7, #28]
        break;
 800a8cc:	e00d      	b.n	800a8ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a8ce:	f7fe fcb1 	bl	8009234 <HAL_RCC_GetSysClockFreq>
 800a8d2:	61f8      	str	r0, [r7, #28]
        break;
 800a8d4:	e009      	b.n	800a8ea <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a8d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a8da:	61fb      	str	r3, [r7, #28]
        break;
 800a8dc:	e005      	b.n	800a8ea <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 800a8de:	2300      	movs	r3, #0
 800a8e0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a8e2:	2301      	movs	r3, #1
 800a8e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a8e8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800a8ea:	69fb      	ldr	r3, [r7, #28]
 800a8ec:	2b00      	cmp	r3, #0
 800a8ee:	d077      	beq.n	800a9e0 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a8f0:	69fb      	ldr	r3, [r7, #28]
 800a8f2:	005a      	lsls	r2, r3, #1
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	685b      	ldr	r3, [r3, #4]
 800a8f8:	085b      	lsrs	r3, r3, #1
 800a8fa:	441a      	add	r2, r3
 800a8fc:	68fb      	ldr	r3, [r7, #12]
 800a8fe:	685b      	ldr	r3, [r3, #4]
 800a900:	fbb2 f3f3 	udiv	r3, r2, r3
 800a904:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a906:	69bb      	ldr	r3, [r7, #24]
 800a908:	2b0f      	cmp	r3, #15
 800a90a:	d916      	bls.n	800a93a <UART_SetConfig+0x392>
 800a90c:	69bb      	ldr	r3, [r7, #24]
 800a90e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a912:	d212      	bcs.n	800a93a <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a914:	69bb      	ldr	r3, [r7, #24]
 800a916:	b29b      	uxth	r3, r3
 800a918:	f023 030f 	bic.w	r3, r3, #15
 800a91c:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a91e:	69bb      	ldr	r3, [r7, #24]
 800a920:	085b      	lsrs	r3, r3, #1
 800a922:	b29b      	uxth	r3, r3
 800a924:	f003 0307 	and.w	r3, r3, #7
 800a928:	b29a      	uxth	r2, r3
 800a92a:	8afb      	ldrh	r3, [r7, #22]
 800a92c:	4313      	orrs	r3, r2
 800a92e:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	8afa      	ldrh	r2, [r7, #22]
 800a936:	60da      	str	r2, [r3, #12]
 800a938:	e052      	b.n	800a9e0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800a93a:	2301      	movs	r3, #1
 800a93c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800a940:	e04e      	b.n	800a9e0 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800a942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a946:	2b08      	cmp	r3, #8
 800a948:	d827      	bhi.n	800a99a <UART_SetConfig+0x3f2>
 800a94a:	a201      	add	r2, pc, #4	; (adr r2, 800a950 <UART_SetConfig+0x3a8>)
 800a94c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a950:	0800a975 	.word	0x0800a975
 800a954:	0800a97d 	.word	0x0800a97d
 800a958:	0800a985 	.word	0x0800a985
 800a95c:	0800a99b 	.word	0x0800a99b
 800a960:	0800a98b 	.word	0x0800a98b
 800a964:	0800a99b 	.word	0x0800a99b
 800a968:	0800a99b 	.word	0x0800a99b
 800a96c:	0800a99b 	.word	0x0800a99b
 800a970:	0800a993 	.word	0x0800a993
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a974:	f7fe fcf6 	bl	8009364 <HAL_RCC_GetPCLK1Freq>
 800a978:	61f8      	str	r0, [r7, #28]
        break;
 800a97a:	e014      	b.n	800a9a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a97c:	f7fe fd08 	bl	8009390 <HAL_RCC_GetPCLK2Freq>
 800a980:	61f8      	str	r0, [r7, #28]
        break;
 800a982:	e010      	b.n	800a9a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800a984:	4b1d      	ldr	r3, [pc, #116]	; (800a9fc <UART_SetConfig+0x454>)
 800a986:	61fb      	str	r3, [r7, #28]
        break;
 800a988:	e00d      	b.n	800a9a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a98a:	f7fe fc53 	bl	8009234 <HAL_RCC_GetSysClockFreq>
 800a98e:	61f8      	str	r0, [r7, #28]
        break;
 800a990:	e009      	b.n	800a9a6 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800a992:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a996:	61fb      	str	r3, [r7, #28]
        break;
 800a998:	e005      	b.n	800a9a6 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800a99a:	2300      	movs	r3, #0
 800a99c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800a99e:	2301      	movs	r3, #1
 800a9a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800a9a4:	bf00      	nop
    }

    if (pclk != 0U)
 800a9a6:	69fb      	ldr	r3, [r7, #28]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d019      	beq.n	800a9e0 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	085a      	lsrs	r2, r3, #1
 800a9b2:	69fb      	ldr	r3, [r7, #28]
 800a9b4:	441a      	add	r2, r3
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	685b      	ldr	r3, [r3, #4]
 800a9ba:	fbb2 f3f3 	udiv	r3, r2, r3
 800a9be:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	2b0f      	cmp	r3, #15
 800a9c4:	d909      	bls.n	800a9da <UART_SetConfig+0x432>
 800a9c6:	69bb      	ldr	r3, [r7, #24]
 800a9c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a9cc:	d205      	bcs.n	800a9da <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800a9ce:	69bb      	ldr	r3, [r7, #24]
 800a9d0:	b29a      	uxth	r2, r3
 800a9d2:	68fb      	ldr	r3, [r7, #12]
 800a9d4:	681b      	ldr	r3, [r3, #0]
 800a9d6:	60da      	str	r2, [r3, #12]
 800a9d8:	e002      	b.n	800a9e0 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800a9da:	2301      	movs	r3, #1
 800a9dc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a9e0:	68fb      	ldr	r3, [r7, #12]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800a9ec:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800a9f0:	4618      	mov	r0, r3
 800a9f2:	3728      	adds	r7, #40	; 0x28
 800a9f4:	46bd      	mov	sp, r7
 800a9f6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800a9fa:	bf00      	nop
 800a9fc:	00f42400 	.word	0x00f42400

0800aa00 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800aa00:	b480      	push	{r7}
 800aa02:	b083      	sub	sp, #12
 800aa04:	af00      	add	r7, sp, #0
 800aa06:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800aa08:	687b      	ldr	r3, [r7, #4]
 800aa0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa0c:	f003 0301 	and.w	r3, r3, #1
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d00a      	beq.n	800aa2a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800aa14:	687b      	ldr	r3, [r7, #4]
 800aa16:	681b      	ldr	r3, [r3, #0]
 800aa18:	685b      	ldr	r3, [r3, #4]
 800aa1a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800aa1e:	687b      	ldr	r3, [r7, #4]
 800aa20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800aa22:	687b      	ldr	r3, [r7, #4]
 800aa24:	681b      	ldr	r3, [r3, #0]
 800aa26:	430a      	orrs	r2, r1
 800aa28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800aa2a:	687b      	ldr	r3, [r7, #4]
 800aa2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa2e:	f003 0302 	and.w	r3, r3, #2
 800aa32:	2b00      	cmp	r3, #0
 800aa34:	d00a      	beq.n	800aa4c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800aa36:	687b      	ldr	r3, [r7, #4]
 800aa38:	681b      	ldr	r3, [r3, #0]
 800aa3a:	685b      	ldr	r3, [r3, #4]
 800aa3c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800aa40:	687b      	ldr	r3, [r7, #4]
 800aa42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	430a      	orrs	r2, r1
 800aa4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800aa4c:	687b      	ldr	r3, [r7, #4]
 800aa4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa50:	f003 0304 	and.w	r3, r3, #4
 800aa54:	2b00      	cmp	r3, #0
 800aa56:	d00a      	beq.n	800aa6e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	685b      	ldr	r3, [r3, #4]
 800aa5e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800aa62:	687b      	ldr	r3, [r7, #4]
 800aa64:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	430a      	orrs	r2, r1
 800aa6c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800aa6e:	687b      	ldr	r3, [r7, #4]
 800aa70:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa72:	f003 0308 	and.w	r3, r3, #8
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d00a      	beq.n	800aa90 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	685b      	ldr	r3, [r3, #4]
 800aa80:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	430a      	orrs	r2, r1
 800aa8e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa94:	f003 0310 	and.w	r3, r3, #16
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d00a      	beq.n	800aab2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	681b      	ldr	r3, [r3, #0]
 800aaa0:	689b      	ldr	r3, [r3, #8]
 800aaa2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	681b      	ldr	r3, [r3, #0]
 800aaae:	430a      	orrs	r2, r1
 800aab0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800aab2:	687b      	ldr	r3, [r7, #4]
 800aab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab6:	f003 0320 	and.w	r3, r3, #32
 800aaba:	2b00      	cmp	r3, #0
 800aabc:	d00a      	beq.n	800aad4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800aabe:	687b      	ldr	r3, [r7, #4]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800aac8:	687b      	ldr	r3, [r7, #4]
 800aaca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800aacc:	687b      	ldr	r3, [r7, #4]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	430a      	orrs	r2, r1
 800aad2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aad8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aadc:	2b00      	cmp	r3, #0
 800aade:	d01a      	beq.n	800ab16 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800aae0:	687b      	ldr	r3, [r7, #4]
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	685b      	ldr	r3, [r3, #4]
 800aae6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800aaea:	687b      	ldr	r3, [r7, #4]
 800aaec:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800aaee:	687b      	ldr	r3, [r7, #4]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	430a      	orrs	r2, r1
 800aaf4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800aaf6:	687b      	ldr	r3, [r7, #4]
 800aaf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aafa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800aafe:	d10a      	bne.n	800ab16 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800ab00:	687b      	ldr	r3, [r7, #4]
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	685b      	ldr	r3, [r3, #4]
 800ab06:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800ab0e:	687b      	ldr	r3, [r7, #4]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	430a      	orrs	r2, r1
 800ab14:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800ab16:	687b      	ldr	r3, [r7, #4]
 800ab18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ab1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d00a      	beq.n	800ab38 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800ab22:	687b      	ldr	r3, [r7, #4]
 800ab24:	681b      	ldr	r3, [r3, #0]
 800ab26:	685b      	ldr	r3, [r3, #4]
 800ab28:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800ab2c:	687b      	ldr	r3, [r7, #4]
 800ab2e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800ab30:	687b      	ldr	r3, [r7, #4]
 800ab32:	681b      	ldr	r3, [r3, #0]
 800ab34:	430a      	orrs	r2, r1
 800ab36:	605a      	str	r2, [r3, #4]
  }
}
 800ab38:	bf00      	nop
 800ab3a:	370c      	adds	r7, #12
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab42:	4770      	bx	lr

0800ab44 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800ab44:	b580      	push	{r7, lr}
 800ab46:	b086      	sub	sp, #24
 800ab48:	af02      	add	r7, sp, #8
 800ab4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	2200      	movs	r2, #0
 800ab50:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800ab54:	f7fa fcca 	bl	80054ec <HAL_GetTick>
 800ab58:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	681b      	ldr	r3, [r3, #0]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f003 0308 	and.w	r3, r3, #8
 800ab64:	2b08      	cmp	r3, #8
 800ab66:	d10e      	bne.n	800ab86 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab68:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab6c:	9300      	str	r3, [sp, #0]
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	2200      	movs	r2, #0
 800ab72:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800ab76:	6878      	ldr	r0, [r7, #4]
 800ab78:	f000 f82d 	bl	800abd6 <UART_WaitOnFlagUntilTimeout>
 800ab7c:	4603      	mov	r3, r0
 800ab7e:	2b00      	cmp	r3, #0
 800ab80:	d001      	beq.n	800ab86 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ab82:	2303      	movs	r3, #3
 800ab84:	e023      	b.n	800abce <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800ab86:	687b      	ldr	r3, [r7, #4]
 800ab88:	681b      	ldr	r3, [r3, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	f003 0304 	and.w	r3, r3, #4
 800ab90:	2b04      	cmp	r3, #4
 800ab92:	d10e      	bne.n	800abb2 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800ab94:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800ab98:	9300      	str	r3, [sp, #0]
 800ab9a:	68fb      	ldr	r3, [r7, #12]
 800ab9c:	2200      	movs	r2, #0
 800ab9e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800aba2:	6878      	ldr	r0, [r7, #4]
 800aba4:	f000 f817 	bl	800abd6 <UART_WaitOnFlagUntilTimeout>
 800aba8:	4603      	mov	r3, r0
 800abaa:	2b00      	cmp	r3, #0
 800abac:	d001      	beq.n	800abb2 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800abae:	2303      	movs	r3, #3
 800abb0:	e00d      	b.n	800abce <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800abb2:	687b      	ldr	r3, [r7, #4]
 800abb4:	2220      	movs	r2, #32
 800abb6:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	2220      	movs	r2, #32
 800abbc:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	2200      	movs	r2, #0
 800abc2:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800abc4:	687b      	ldr	r3, [r7, #4]
 800abc6:	2200      	movs	r2, #0
 800abc8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800abcc:	2300      	movs	r3, #0
}
 800abce:	4618      	mov	r0, r3
 800abd0:	3710      	adds	r7, #16
 800abd2:	46bd      	mov	sp, r7
 800abd4:	bd80      	pop	{r7, pc}

0800abd6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800abd6:	b580      	push	{r7, lr}
 800abd8:	b09c      	sub	sp, #112	; 0x70
 800abda:	af00      	add	r7, sp, #0
 800abdc:	60f8      	str	r0, [r7, #12]
 800abde:	60b9      	str	r1, [r7, #8]
 800abe0:	603b      	str	r3, [r7, #0]
 800abe2:	4613      	mov	r3, r2
 800abe4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800abe6:	e0a5      	b.n	800ad34 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800abe8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800abea:	f1b3 3fff 	cmp.w	r3, #4294967295
 800abee:	f000 80a1 	beq.w	800ad34 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800abf2:	f7fa fc7b 	bl	80054ec <HAL_GetTick>
 800abf6:	4602      	mov	r2, r0
 800abf8:	683b      	ldr	r3, [r7, #0]
 800abfa:	1ad3      	subs	r3, r2, r3
 800abfc:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d302      	bcc.n	800ac08 <UART_WaitOnFlagUntilTimeout+0x32>
 800ac02:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800ac04:	2b00      	cmp	r3, #0
 800ac06:	d13e      	bne.n	800ac86 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800ac08:	68fb      	ldr	r3, [r7, #12]
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac0e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800ac10:	e853 3f00 	ldrex	r3, [r3]
 800ac14:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800ac16:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800ac18:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800ac1c:	667b      	str	r3, [r7, #100]	; 0x64
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	461a      	mov	r2, r3
 800ac24:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800ac26:	65fb      	str	r3, [r7, #92]	; 0x5c
 800ac28:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac2a:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800ac2c:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800ac2e:	e841 2300 	strex	r3, r2, [r1]
 800ac32:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800ac34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1e6      	bne.n	800ac08 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	3308      	adds	r3, #8
 800ac40:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ac42:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ac44:	e853 3f00 	ldrex	r3, [r3]
 800ac48:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800ac4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ac4c:	f023 0301 	bic.w	r3, r3, #1
 800ac50:	663b      	str	r3, [r7, #96]	; 0x60
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	3308      	adds	r3, #8
 800ac58:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800ac5a:	64ba      	str	r2, [r7, #72]	; 0x48
 800ac5c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ac5e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800ac60:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800ac62:	e841 2300 	strex	r3, r2, [r1]
 800ac66:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800ac68:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ac6a:	2b00      	cmp	r3, #0
 800ac6c:	d1e5      	bne.n	800ac3a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800ac6e:	68fb      	ldr	r3, [r7, #12]
 800ac70:	2220      	movs	r2, #32
 800ac72:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800ac74:	68fb      	ldr	r3, [r7, #12]
 800ac76:	2220      	movs	r2, #32
 800ac78:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	2200      	movs	r2, #0
 800ac7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800ac82:	2303      	movs	r3, #3
 800ac84:	e067      	b.n	800ad56 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800ac86:	68fb      	ldr	r3, [r7, #12]
 800ac88:	681b      	ldr	r3, [r3, #0]
 800ac8a:	681b      	ldr	r3, [r3, #0]
 800ac8c:	f003 0304 	and.w	r3, r3, #4
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	d04f      	beq.n	800ad34 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800ac94:	68fb      	ldr	r3, [r7, #12]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	69db      	ldr	r3, [r3, #28]
 800ac9a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800ac9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800aca2:	d147      	bne.n	800ad34 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	681b      	ldr	r3, [r3, #0]
 800aca8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800acac:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800acae:	68fb      	ldr	r3, [r7, #12]
 800acb0:	681b      	ldr	r3, [r3, #0]
 800acb2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800acb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800acb6:	e853 3f00 	ldrex	r3, [r3]
 800acba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800acbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800acbe:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800acc2:	66fb      	str	r3, [r7, #108]	; 0x6c
 800acc4:	68fb      	ldr	r3, [r7, #12]
 800acc6:	681b      	ldr	r3, [r3, #0]
 800acc8:	461a      	mov	r2, r3
 800acca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800accc:	637b      	str	r3, [r7, #52]	; 0x34
 800acce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800acd0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800acd2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800acd4:	e841 2300 	strex	r3, r2, [r1]
 800acd8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800acda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d1e6      	bne.n	800acae <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	681b      	ldr	r3, [r3, #0]
 800ace4:	3308      	adds	r3, #8
 800ace6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ace8:	697b      	ldr	r3, [r7, #20]
 800acea:	e853 3f00 	ldrex	r3, [r3]
 800acee:	613b      	str	r3, [r7, #16]
   return(result);
 800acf0:	693b      	ldr	r3, [r7, #16]
 800acf2:	f023 0301 	bic.w	r3, r3, #1
 800acf6:	66bb      	str	r3, [r7, #104]	; 0x68
 800acf8:	68fb      	ldr	r3, [r7, #12]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	3308      	adds	r3, #8
 800acfe:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800ad00:	623a      	str	r2, [r7, #32]
 800ad02:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ad04:	69f9      	ldr	r1, [r7, #28]
 800ad06:	6a3a      	ldr	r2, [r7, #32]
 800ad08:	e841 2300 	strex	r3, r2, [r1]
 800ad0c:	61bb      	str	r3, [r7, #24]
   return(result);
 800ad0e:	69bb      	ldr	r3, [r7, #24]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d1e5      	bne.n	800ace0 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800ad14:	68fb      	ldr	r3, [r7, #12]
 800ad16:	2220      	movs	r2, #32
 800ad18:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 800ad1a:	68fb      	ldr	r3, [r7, #12]
 800ad1c:	2220      	movs	r2, #32
 800ad1e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2220      	movs	r2, #32
 800ad24:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800ad28:	68fb      	ldr	r3, [r7, #12]
 800ad2a:	2200      	movs	r2, #0
 800ad2c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800ad30:	2303      	movs	r3, #3
 800ad32:	e010      	b.n	800ad56 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	69da      	ldr	r2, [r3, #28]
 800ad3a:	68bb      	ldr	r3, [r7, #8]
 800ad3c:	4013      	ands	r3, r2
 800ad3e:	68ba      	ldr	r2, [r7, #8]
 800ad40:	429a      	cmp	r2, r3
 800ad42:	bf0c      	ite	eq
 800ad44:	2301      	moveq	r3, #1
 800ad46:	2300      	movne	r3, #0
 800ad48:	b2db      	uxtb	r3, r3
 800ad4a:	461a      	mov	r2, r3
 800ad4c:	79fb      	ldrb	r3, [r7, #7]
 800ad4e:	429a      	cmp	r2, r3
 800ad50:	f43f af4a 	beq.w	800abe8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800ad54:	2300      	movs	r3, #0
}
 800ad56:	4618      	mov	r0, r3
 800ad58:	3770      	adds	r7, #112	; 0x70
 800ad5a:	46bd      	mov	sp, r7
 800ad5c:	bd80      	pop	{r7, pc}
	...

0800ad60 <__NVIC_SetPriority>:
{
 800ad60:	b480      	push	{r7}
 800ad62:	b083      	sub	sp, #12
 800ad64:	af00      	add	r7, sp, #0
 800ad66:	4603      	mov	r3, r0
 800ad68:	6039      	str	r1, [r7, #0]
 800ad6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800ad6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad70:	2b00      	cmp	r3, #0
 800ad72:	db0a      	blt.n	800ad8a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad74:	683b      	ldr	r3, [r7, #0]
 800ad76:	b2da      	uxtb	r2, r3
 800ad78:	490c      	ldr	r1, [pc, #48]	; (800adac <__NVIC_SetPriority+0x4c>)
 800ad7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ad7e:	0112      	lsls	r2, r2, #4
 800ad80:	b2d2      	uxtb	r2, r2
 800ad82:	440b      	add	r3, r1
 800ad84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 800ad88:	e00a      	b.n	800ada0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800ad8a:	683b      	ldr	r3, [r7, #0]
 800ad8c:	b2da      	uxtb	r2, r3
 800ad8e:	4908      	ldr	r1, [pc, #32]	; (800adb0 <__NVIC_SetPriority+0x50>)
 800ad90:	79fb      	ldrb	r3, [r7, #7]
 800ad92:	f003 030f 	and.w	r3, r3, #15
 800ad96:	3b04      	subs	r3, #4
 800ad98:	0112      	lsls	r2, r2, #4
 800ad9a:	b2d2      	uxtb	r2, r2
 800ad9c:	440b      	add	r3, r1
 800ad9e:	761a      	strb	r2, [r3, #24]
}
 800ada0:	bf00      	nop
 800ada2:	370c      	adds	r7, #12
 800ada4:	46bd      	mov	sp, r7
 800ada6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800adaa:	4770      	bx	lr
 800adac:	e000e100 	.word	0xe000e100
 800adb0:	e000ed00 	.word	0xe000ed00

0800adb4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800adb4:	b580      	push	{r7, lr}
 800adb6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800adb8:	4b05      	ldr	r3, [pc, #20]	; (800add0 <SysTick_Handler+0x1c>)
 800adba:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800adbc:	f002 fcec 	bl	800d798 <xTaskGetSchedulerState>
 800adc0:	4603      	mov	r3, r0
 800adc2:	2b01      	cmp	r3, #1
 800adc4:	d001      	beq.n	800adca <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800adc6:	f003 fbcf 	bl	800e568 <xPortSysTickHandler>
  }
}
 800adca:	bf00      	nop
 800adcc:	bd80      	pop	{r7, pc}
 800adce:	bf00      	nop
 800add0:	e000e010 	.word	0xe000e010

0800add4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800add4:	b580      	push	{r7, lr}
 800add6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800add8:	2100      	movs	r1, #0
 800adda:	f06f 0004 	mvn.w	r0, #4
 800adde:	f7ff ffbf 	bl	800ad60 <__NVIC_SetPriority>
#endif
}
 800ade2:	bf00      	nop
 800ade4:	bd80      	pop	{r7, pc}
	...

0800ade8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ade8:	b480      	push	{r7}
 800adea:	b083      	sub	sp, #12
 800adec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800adee:	f3ef 8305 	mrs	r3, IPSR
 800adf2:	603b      	str	r3, [r7, #0]
  return(result);
 800adf4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800adf6:	2b00      	cmp	r3, #0
 800adf8:	d003      	beq.n	800ae02 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800adfa:	f06f 0305 	mvn.w	r3, #5
 800adfe:	607b      	str	r3, [r7, #4]
 800ae00:	e00c      	b.n	800ae1c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ae02:	4b0a      	ldr	r3, [pc, #40]	; (800ae2c <osKernelInitialize+0x44>)
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	2b00      	cmp	r3, #0
 800ae08:	d105      	bne.n	800ae16 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ae0a:	4b08      	ldr	r3, [pc, #32]	; (800ae2c <osKernelInitialize+0x44>)
 800ae0c:	2201      	movs	r2, #1
 800ae0e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ae10:	2300      	movs	r3, #0
 800ae12:	607b      	str	r3, [r7, #4]
 800ae14:	e002      	b.n	800ae1c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800ae16:	f04f 33ff 	mov.w	r3, #4294967295
 800ae1a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae1c:	687b      	ldr	r3, [r7, #4]
}
 800ae1e:	4618      	mov	r0, r3
 800ae20:	370c      	adds	r7, #12
 800ae22:	46bd      	mov	sp, r7
 800ae24:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ae28:	4770      	bx	lr
 800ae2a:	bf00      	nop
 800ae2c:	20002134 	.word	0x20002134

0800ae30 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ae30:	b580      	push	{r7, lr}
 800ae32:	b082      	sub	sp, #8
 800ae34:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae36:	f3ef 8305 	mrs	r3, IPSR
 800ae3a:	603b      	str	r3, [r7, #0]
  return(result);
 800ae3c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d003      	beq.n	800ae4a <osKernelStart+0x1a>
    stat = osErrorISR;
 800ae42:	f06f 0305 	mvn.w	r3, #5
 800ae46:	607b      	str	r3, [r7, #4]
 800ae48:	e010      	b.n	800ae6c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ae4a:	4b0b      	ldr	r3, [pc, #44]	; (800ae78 <osKernelStart+0x48>)
 800ae4c:	681b      	ldr	r3, [r3, #0]
 800ae4e:	2b01      	cmp	r3, #1
 800ae50:	d109      	bne.n	800ae66 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ae52:	f7ff ffbf 	bl	800add4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ae56:	4b08      	ldr	r3, [pc, #32]	; (800ae78 <osKernelStart+0x48>)
 800ae58:	2202      	movs	r2, #2
 800ae5a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800ae5c:	f002 f830 	bl	800cec0 <vTaskStartScheduler>
      stat = osOK;
 800ae60:	2300      	movs	r3, #0
 800ae62:	607b      	str	r3, [r7, #4]
 800ae64:	e002      	b.n	800ae6c <osKernelStart+0x3c>
    } else {
      stat = osError;
 800ae66:	f04f 33ff 	mov.w	r3, #4294967295
 800ae6a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800ae6c:	687b      	ldr	r3, [r7, #4]
}
 800ae6e:	4618      	mov	r0, r3
 800ae70:	3708      	adds	r7, #8
 800ae72:	46bd      	mov	sp, r7
 800ae74:	bd80      	pop	{r7, pc}
 800ae76:	bf00      	nop
 800ae78:	20002134 	.word	0x20002134

0800ae7c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800ae7c:	b580      	push	{r7, lr}
 800ae7e:	b08e      	sub	sp, #56	; 0x38
 800ae80:	af04      	add	r7, sp, #16
 800ae82:	60f8      	str	r0, [r7, #12]
 800ae84:	60b9      	str	r1, [r7, #8]
 800ae86:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800ae88:	2300      	movs	r3, #0
 800ae8a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ae8c:	f3ef 8305 	mrs	r3, IPSR
 800ae90:	617b      	str	r3, [r7, #20]
  return(result);
 800ae92:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800ae94:	2b00      	cmp	r3, #0
 800ae96:	d17e      	bne.n	800af96 <osThreadNew+0x11a>
 800ae98:	68fb      	ldr	r3, [r7, #12]
 800ae9a:	2b00      	cmp	r3, #0
 800ae9c:	d07b      	beq.n	800af96 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800ae9e:	2340      	movs	r3, #64	; 0x40
 800aea0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800aea2:	2318      	movs	r3, #24
 800aea4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800aea6:	2300      	movs	r3, #0
 800aea8:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800aeaa:	f04f 33ff 	mov.w	r3, #4294967295
 800aeae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	2b00      	cmp	r3, #0
 800aeb4:	d045      	beq.n	800af42 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800aeb6:	687b      	ldr	r3, [r7, #4]
 800aeb8:	681b      	ldr	r3, [r3, #0]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d002      	beq.n	800aec4 <osThreadNew+0x48>
        name = attr->name;
 800aebe:	687b      	ldr	r3, [r7, #4]
 800aec0:	681b      	ldr	r3, [r3, #0]
 800aec2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	699b      	ldr	r3, [r3, #24]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d002      	beq.n	800aed2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	699b      	ldr	r3, [r3, #24]
 800aed0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800aed2:	69fb      	ldr	r3, [r7, #28]
 800aed4:	2b00      	cmp	r3, #0
 800aed6:	d008      	beq.n	800aeea <osThreadNew+0x6e>
 800aed8:	69fb      	ldr	r3, [r7, #28]
 800aeda:	2b38      	cmp	r3, #56	; 0x38
 800aedc:	d805      	bhi.n	800aeea <osThreadNew+0x6e>
 800aede:	687b      	ldr	r3, [r7, #4]
 800aee0:	685b      	ldr	r3, [r3, #4]
 800aee2:	f003 0301 	and.w	r3, r3, #1
 800aee6:	2b00      	cmp	r3, #0
 800aee8:	d001      	beq.n	800aeee <osThreadNew+0x72>
        return (NULL);
 800aeea:	2300      	movs	r3, #0
 800aeec:	e054      	b.n	800af98 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800aeee:	687b      	ldr	r3, [r7, #4]
 800aef0:	695b      	ldr	r3, [r3, #20]
 800aef2:	2b00      	cmp	r3, #0
 800aef4:	d003      	beq.n	800aefe <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	695b      	ldr	r3, [r3, #20]
 800aefa:	089b      	lsrs	r3, r3, #2
 800aefc:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	689b      	ldr	r3, [r3, #8]
 800af02:	2b00      	cmp	r3, #0
 800af04:	d00e      	beq.n	800af24 <osThreadNew+0xa8>
 800af06:	687b      	ldr	r3, [r7, #4]
 800af08:	68db      	ldr	r3, [r3, #12]
 800af0a:	2bbb      	cmp	r3, #187	; 0xbb
 800af0c:	d90a      	bls.n	800af24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af0e:	687b      	ldr	r3, [r7, #4]
 800af10:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800af12:	2b00      	cmp	r3, #0
 800af14:	d006      	beq.n	800af24 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800af16:	687b      	ldr	r3, [r7, #4]
 800af18:	695b      	ldr	r3, [r3, #20]
 800af1a:	2b00      	cmp	r3, #0
 800af1c:	d002      	beq.n	800af24 <osThreadNew+0xa8>
        mem = 1;
 800af1e:	2301      	movs	r3, #1
 800af20:	61bb      	str	r3, [r7, #24]
 800af22:	e010      	b.n	800af46 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800af24:	687b      	ldr	r3, [r7, #4]
 800af26:	689b      	ldr	r3, [r3, #8]
 800af28:	2b00      	cmp	r3, #0
 800af2a:	d10c      	bne.n	800af46 <osThreadNew+0xca>
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	68db      	ldr	r3, [r3, #12]
 800af30:	2b00      	cmp	r3, #0
 800af32:	d108      	bne.n	800af46 <osThreadNew+0xca>
 800af34:	687b      	ldr	r3, [r7, #4]
 800af36:	691b      	ldr	r3, [r3, #16]
 800af38:	2b00      	cmp	r3, #0
 800af3a:	d104      	bne.n	800af46 <osThreadNew+0xca>
          mem = 0;
 800af3c:	2300      	movs	r3, #0
 800af3e:	61bb      	str	r3, [r7, #24]
 800af40:	e001      	b.n	800af46 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800af42:	2300      	movs	r3, #0
 800af44:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	2b01      	cmp	r3, #1
 800af4a:	d110      	bne.n	800af6e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800af50:	687a      	ldr	r2, [r7, #4]
 800af52:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800af54:	9202      	str	r2, [sp, #8]
 800af56:	9301      	str	r3, [sp, #4]
 800af58:	69fb      	ldr	r3, [r7, #28]
 800af5a:	9300      	str	r3, [sp, #0]
 800af5c:	68bb      	ldr	r3, [r7, #8]
 800af5e:	6a3a      	ldr	r2, [r7, #32]
 800af60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af62:	68f8      	ldr	r0, [r7, #12]
 800af64:	f001 fd42 	bl	800c9ec <xTaskCreateStatic>
 800af68:	4603      	mov	r3, r0
 800af6a:	613b      	str	r3, [r7, #16]
 800af6c:	e013      	b.n	800af96 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800af6e:	69bb      	ldr	r3, [r7, #24]
 800af70:	2b00      	cmp	r3, #0
 800af72:	d110      	bne.n	800af96 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800af74:	6a3b      	ldr	r3, [r7, #32]
 800af76:	b29a      	uxth	r2, r3
 800af78:	f107 0310 	add.w	r3, r7, #16
 800af7c:	9301      	str	r3, [sp, #4]
 800af7e:	69fb      	ldr	r3, [r7, #28]
 800af80:	9300      	str	r3, [sp, #0]
 800af82:	68bb      	ldr	r3, [r7, #8]
 800af84:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800af86:	68f8      	ldr	r0, [r7, #12]
 800af88:	f001 fd8d 	bl	800caa6 <xTaskCreate>
 800af8c:	4603      	mov	r3, r0
 800af8e:	2b01      	cmp	r3, #1
 800af90:	d001      	beq.n	800af96 <osThreadNew+0x11a>
            hTask = NULL;
 800af92:	2300      	movs	r3, #0
 800af94:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800af96:	693b      	ldr	r3, [r7, #16]
}
 800af98:	4618      	mov	r0, r3
 800af9a:	3728      	adds	r7, #40	; 0x28
 800af9c:	46bd      	mov	sp, r7
 800af9e:	bd80      	pop	{r7, pc}

0800afa0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800afa0:	b580      	push	{r7, lr}
 800afa2:	b084      	sub	sp, #16
 800afa4:	af00      	add	r7, sp, #0
 800afa6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afa8:	f3ef 8305 	mrs	r3, IPSR
 800afac:	60bb      	str	r3, [r7, #8]
  return(result);
 800afae:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800afb0:	2b00      	cmp	r3, #0
 800afb2:	d003      	beq.n	800afbc <osDelay+0x1c>
    stat = osErrorISR;
 800afb4:	f06f 0305 	mvn.w	r3, #5
 800afb8:	60fb      	str	r3, [r7, #12]
 800afba:	e007      	b.n	800afcc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800afbc:	2300      	movs	r3, #0
 800afbe:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800afc0:	687b      	ldr	r3, [r7, #4]
 800afc2:	2b00      	cmp	r3, #0
 800afc4:	d002      	beq.n	800afcc <osDelay+0x2c>
      vTaskDelay(ticks);
 800afc6:	6878      	ldr	r0, [r7, #4]
 800afc8:	f001 ff46 	bl	800ce58 <vTaskDelay>
    }
  }

  return (stat);
 800afcc:	68fb      	ldr	r3, [r7, #12]
}
 800afce:	4618      	mov	r0, r3
 800afd0:	3710      	adds	r7, #16
 800afd2:	46bd      	mov	sp, r7
 800afd4:	bd80      	pop	{r7, pc}

0800afd6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800afd6:	b580      	push	{r7, lr}
 800afd8:	b088      	sub	sp, #32
 800afda:	af00      	add	r7, sp, #0
 800afdc:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 800afde:	2300      	movs	r3, #0
 800afe0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800afe2:	f3ef 8305 	mrs	r3, IPSR
 800afe6:	60bb      	str	r3, [r7, #8]
  return(result);
 800afe8:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 800afea:	2b00      	cmp	r3, #0
 800afec:	d174      	bne.n	800b0d8 <osMutexNew+0x102>
    if (attr != NULL) {
 800afee:	687b      	ldr	r3, [r7, #4]
 800aff0:	2b00      	cmp	r3, #0
 800aff2:	d003      	beq.n	800affc <osMutexNew+0x26>
      type = attr->attr_bits;
 800aff4:	687b      	ldr	r3, [r7, #4]
 800aff6:	685b      	ldr	r3, [r3, #4]
 800aff8:	61bb      	str	r3, [r7, #24]
 800affa:	e001      	b.n	800b000 <osMutexNew+0x2a>
    } else {
      type = 0U;
 800affc:	2300      	movs	r3, #0
 800affe:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 800b000:	69bb      	ldr	r3, [r7, #24]
 800b002:	f003 0301 	and.w	r3, r3, #1
 800b006:	2b00      	cmp	r3, #0
 800b008:	d002      	beq.n	800b010 <osMutexNew+0x3a>
      rmtx = 1U;
 800b00a:	2301      	movs	r3, #1
 800b00c:	617b      	str	r3, [r7, #20]
 800b00e:	e001      	b.n	800b014 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 800b010:	2300      	movs	r3, #0
 800b012:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 800b014:	69bb      	ldr	r3, [r7, #24]
 800b016:	f003 0308 	and.w	r3, r3, #8
 800b01a:	2b00      	cmp	r3, #0
 800b01c:	d15c      	bne.n	800b0d8 <osMutexNew+0x102>
      mem = -1;
 800b01e:	f04f 33ff 	mov.w	r3, #4294967295
 800b022:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 800b024:	687b      	ldr	r3, [r7, #4]
 800b026:	2b00      	cmp	r3, #0
 800b028:	d015      	beq.n	800b056 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b02a:	687b      	ldr	r3, [r7, #4]
 800b02c:	689b      	ldr	r3, [r3, #8]
 800b02e:	2b00      	cmp	r3, #0
 800b030:	d006      	beq.n	800b040 <osMutexNew+0x6a>
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	68db      	ldr	r3, [r3, #12]
 800b036:	2b4f      	cmp	r3, #79	; 0x4f
 800b038:	d902      	bls.n	800b040 <osMutexNew+0x6a>
          mem = 1;
 800b03a:	2301      	movs	r3, #1
 800b03c:	613b      	str	r3, [r7, #16]
 800b03e:	e00c      	b.n	800b05a <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	689b      	ldr	r3, [r3, #8]
 800b044:	2b00      	cmp	r3, #0
 800b046:	d108      	bne.n	800b05a <osMutexNew+0x84>
 800b048:	687b      	ldr	r3, [r7, #4]
 800b04a:	68db      	ldr	r3, [r3, #12]
 800b04c:	2b00      	cmp	r3, #0
 800b04e:	d104      	bne.n	800b05a <osMutexNew+0x84>
            mem = 0;
 800b050:	2300      	movs	r3, #0
 800b052:	613b      	str	r3, [r7, #16]
 800b054:	e001      	b.n	800b05a <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 800b056:	2300      	movs	r3, #0
 800b058:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	2b01      	cmp	r3, #1
 800b05e:	d112      	bne.n	800b086 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 800b060:	697b      	ldr	r3, [r7, #20]
 800b062:	2b00      	cmp	r3, #0
 800b064:	d007      	beq.n	800b076 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800b066:	687b      	ldr	r3, [r7, #4]
 800b068:	689b      	ldr	r3, [r3, #8]
 800b06a:	4619      	mov	r1, r3
 800b06c:	2004      	movs	r0, #4
 800b06e:	f000 fd68 	bl	800bb42 <xQueueCreateMutexStatic>
 800b072:	61f8      	str	r0, [r7, #28]
 800b074:	e016      	b.n	800b0a4 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	689b      	ldr	r3, [r3, #8]
 800b07a:	4619      	mov	r1, r3
 800b07c:	2001      	movs	r0, #1
 800b07e:	f000 fd60 	bl	800bb42 <xQueueCreateMutexStatic>
 800b082:	61f8      	str	r0, [r7, #28]
 800b084:	e00e      	b.n	800b0a4 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 800b086:	693b      	ldr	r3, [r7, #16]
 800b088:	2b00      	cmp	r3, #0
 800b08a:	d10b      	bne.n	800b0a4 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 800b08c:	697b      	ldr	r3, [r7, #20]
 800b08e:	2b00      	cmp	r3, #0
 800b090:	d004      	beq.n	800b09c <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800b092:	2004      	movs	r0, #4
 800b094:	f000 fd3d 	bl	800bb12 <xQueueCreateMutex>
 800b098:	61f8      	str	r0, [r7, #28]
 800b09a:	e003      	b.n	800b0a4 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 800b09c:	2001      	movs	r0, #1
 800b09e:	f000 fd38 	bl	800bb12 <xQueueCreateMutex>
 800b0a2:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 800b0a4:	69fb      	ldr	r3, [r7, #28]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d00c      	beq.n	800b0c4 <osMutexNew+0xee>
        if (attr != NULL) {
 800b0aa:	687b      	ldr	r3, [r7, #4]
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	d003      	beq.n	800b0b8 <osMutexNew+0xe2>
          name = attr->name;
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	681b      	ldr	r3, [r3, #0]
 800b0b4:	60fb      	str	r3, [r7, #12]
 800b0b6:	e001      	b.n	800b0bc <osMutexNew+0xe6>
        } else {
          name = NULL;
 800b0b8:	2300      	movs	r3, #0
 800b0ba:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 800b0bc:	68f9      	ldr	r1, [r7, #12]
 800b0be:	69f8      	ldr	r0, [r7, #28]
 800b0c0:	f001 fc0c 	bl	800c8dc <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 800b0c4:	69fb      	ldr	r3, [r7, #28]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d006      	beq.n	800b0d8 <osMutexNew+0x102>
 800b0ca:	697b      	ldr	r3, [r7, #20]
 800b0cc:	2b00      	cmp	r3, #0
 800b0ce:	d003      	beq.n	800b0d8 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800b0d0:	69fb      	ldr	r3, [r7, #28]
 800b0d2:	f043 0301 	orr.w	r3, r3, #1
 800b0d6:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 800b0d8:	69fb      	ldr	r3, [r7, #28]
}
 800b0da:	4618      	mov	r0, r3
 800b0dc:	3720      	adds	r7, #32
 800b0de:	46bd      	mov	sp, r7
 800b0e0:	bd80      	pop	{r7, pc}

0800b0e2 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800b0e2:	b580      	push	{r7, lr}
 800b0e4:	b086      	sub	sp, #24
 800b0e6:	af00      	add	r7, sp, #0
 800b0e8:	6078      	str	r0, [r7, #4]
 800b0ea:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b0ec:	687b      	ldr	r3, [r7, #4]
 800b0ee:	f023 0301 	bic.w	r3, r3, #1
 800b0f2:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b0f4:	687b      	ldr	r3, [r7, #4]
 800b0f6:	f003 0301 	and.w	r3, r3, #1
 800b0fa:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b0fc:	2300      	movs	r3, #0
 800b0fe:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b100:	f3ef 8305 	mrs	r3, IPSR
 800b104:	60bb      	str	r3, [r7, #8]
  return(result);
 800b106:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d003      	beq.n	800b114 <osMutexAcquire+0x32>
    stat = osErrorISR;
 800b10c:	f06f 0305 	mvn.w	r3, #5
 800b110:	617b      	str	r3, [r7, #20]
 800b112:	e02c      	b.n	800b16e <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 800b114:	693b      	ldr	r3, [r7, #16]
 800b116:	2b00      	cmp	r3, #0
 800b118:	d103      	bne.n	800b122 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 800b11a:	f06f 0303 	mvn.w	r3, #3
 800b11e:	617b      	str	r3, [r7, #20]
 800b120:	e025      	b.n	800b16e <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 800b122:	68fb      	ldr	r3, [r7, #12]
 800b124:	2b00      	cmp	r3, #0
 800b126:	d011      	beq.n	800b14c <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800b128:	6839      	ldr	r1, [r7, #0]
 800b12a:	6938      	ldr	r0, [r7, #16]
 800b12c:	f000 fd58 	bl	800bbe0 <xQueueTakeMutexRecursive>
 800b130:	4603      	mov	r3, r0
 800b132:	2b01      	cmp	r3, #1
 800b134:	d01b      	beq.n	800b16e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b136:	683b      	ldr	r3, [r7, #0]
 800b138:	2b00      	cmp	r3, #0
 800b13a:	d003      	beq.n	800b144 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 800b13c:	f06f 0301 	mvn.w	r3, #1
 800b140:	617b      	str	r3, [r7, #20]
 800b142:	e014      	b.n	800b16e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b144:	f06f 0302 	mvn.w	r3, #2
 800b148:	617b      	str	r3, [r7, #20]
 800b14a:	e010      	b.n	800b16e <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800b14c:	6839      	ldr	r1, [r7, #0]
 800b14e:	6938      	ldr	r0, [r7, #16]
 800b150:	f001 f8ec 	bl	800c32c <xQueueSemaphoreTake>
 800b154:	4603      	mov	r3, r0
 800b156:	2b01      	cmp	r3, #1
 800b158:	d009      	beq.n	800b16e <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 800b15a:	683b      	ldr	r3, [r7, #0]
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	d003      	beq.n	800b168 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 800b160:	f06f 0301 	mvn.w	r3, #1
 800b164:	617b      	str	r3, [r7, #20]
 800b166:	e002      	b.n	800b16e <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 800b168:	f06f 0302 	mvn.w	r3, #2
 800b16c:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 800b16e:	697b      	ldr	r3, [r7, #20]
}
 800b170:	4618      	mov	r0, r3
 800b172:	3718      	adds	r7, #24
 800b174:	46bd      	mov	sp, r7
 800b176:	bd80      	pop	{r7, pc}

0800b178 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800b178:	b580      	push	{r7, lr}
 800b17a:	b086      	sub	sp, #24
 800b17c:	af00      	add	r7, sp, #0
 800b17e:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	f023 0301 	bic.w	r3, r3, #1
 800b186:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	f003 0301 	and.w	r3, r3, #1
 800b18e:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 800b190:	2300      	movs	r3, #0
 800b192:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b194:	f3ef 8305 	mrs	r3, IPSR
 800b198:	60bb      	str	r3, [r7, #8]
  return(result);
 800b19a:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d003      	beq.n	800b1a8 <osMutexRelease+0x30>
    stat = osErrorISR;
 800b1a0:	f06f 0305 	mvn.w	r3, #5
 800b1a4:	617b      	str	r3, [r7, #20]
 800b1a6:	e01f      	b.n	800b1e8 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 800b1a8:	693b      	ldr	r3, [r7, #16]
 800b1aa:	2b00      	cmp	r3, #0
 800b1ac:	d103      	bne.n	800b1b6 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 800b1ae:	f06f 0303 	mvn.w	r3, #3
 800b1b2:	617b      	str	r3, [r7, #20]
 800b1b4:	e018      	b.n	800b1e8 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 800b1b6:	68fb      	ldr	r3, [r7, #12]
 800b1b8:	2b00      	cmp	r3, #0
 800b1ba:	d009      	beq.n	800b1d0 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800b1bc:	6938      	ldr	r0, [r7, #16]
 800b1be:	f000 fcdb 	bl	800bb78 <xQueueGiveMutexRecursive>
 800b1c2:	4603      	mov	r3, r0
 800b1c4:	2b01      	cmp	r3, #1
 800b1c6:	d00f      	beq.n	800b1e8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b1c8:	f06f 0302 	mvn.w	r3, #2
 800b1cc:	617b      	str	r3, [r7, #20]
 800b1ce:	e00b      	b.n	800b1e8 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800b1d0:	2300      	movs	r3, #0
 800b1d2:	2200      	movs	r2, #0
 800b1d4:	2100      	movs	r1, #0
 800b1d6:	6938      	ldr	r0, [r7, #16]
 800b1d8:	f000 fda2 	bl	800bd20 <xQueueGenericSend>
 800b1dc:	4603      	mov	r3, r0
 800b1de:	2b01      	cmp	r3, #1
 800b1e0:	d002      	beq.n	800b1e8 <osMutexRelease+0x70>
        stat = osErrorResource;
 800b1e2:	f06f 0302 	mvn.w	r3, #2
 800b1e6:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b1e8:	697b      	ldr	r3, [r7, #20]
}
 800b1ea:	4618      	mov	r0, r3
 800b1ec:	3718      	adds	r7, #24
 800b1ee:	46bd      	mov	sp, r7
 800b1f0:	bd80      	pop	{r7, pc}

0800b1f2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800b1f2:	b580      	push	{r7, lr}
 800b1f4:	b08a      	sub	sp, #40	; 0x28
 800b1f6:	af02      	add	r7, sp, #8
 800b1f8:	60f8      	str	r0, [r7, #12]
 800b1fa:	60b9      	str	r1, [r7, #8]
 800b1fc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 800b1fe:	2300      	movs	r3, #0
 800b200:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b202:	f3ef 8305 	mrs	r3, IPSR
 800b206:	613b      	str	r3, [r7, #16]
  return(result);
 800b208:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800b20a:	2b00      	cmp	r3, #0
 800b20c:	d175      	bne.n	800b2fa <osSemaphoreNew+0x108>
 800b20e:	68fb      	ldr	r3, [r7, #12]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d072      	beq.n	800b2fa <osSemaphoreNew+0x108>
 800b214:	68ba      	ldr	r2, [r7, #8]
 800b216:	68fb      	ldr	r3, [r7, #12]
 800b218:	429a      	cmp	r2, r3
 800b21a:	d86e      	bhi.n	800b2fa <osSemaphoreNew+0x108>
    mem = -1;
 800b21c:	f04f 33ff 	mov.w	r3, #4294967295
 800b220:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b222:	687b      	ldr	r3, [r7, #4]
 800b224:	2b00      	cmp	r3, #0
 800b226:	d015      	beq.n	800b254 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800b228:	687b      	ldr	r3, [r7, #4]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d006      	beq.n	800b23e <osSemaphoreNew+0x4c>
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	68db      	ldr	r3, [r3, #12]
 800b234:	2b4f      	cmp	r3, #79	; 0x4f
 800b236:	d902      	bls.n	800b23e <osSemaphoreNew+0x4c>
        mem = 1;
 800b238:	2301      	movs	r3, #1
 800b23a:	61bb      	str	r3, [r7, #24]
 800b23c:	e00c      	b.n	800b258 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	689b      	ldr	r3, [r3, #8]
 800b242:	2b00      	cmp	r3, #0
 800b244:	d108      	bne.n	800b258 <osSemaphoreNew+0x66>
 800b246:	687b      	ldr	r3, [r7, #4]
 800b248:	68db      	ldr	r3, [r3, #12]
 800b24a:	2b00      	cmp	r3, #0
 800b24c:	d104      	bne.n	800b258 <osSemaphoreNew+0x66>
          mem = 0;
 800b24e:	2300      	movs	r3, #0
 800b250:	61bb      	str	r3, [r7, #24]
 800b252:	e001      	b.n	800b258 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800b254:	2300      	movs	r3, #0
 800b256:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800b258:	69bb      	ldr	r3, [r7, #24]
 800b25a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b25e:	d04c      	beq.n	800b2fa <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	2b01      	cmp	r3, #1
 800b264:	d128      	bne.n	800b2b8 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800b266:	69bb      	ldr	r3, [r7, #24]
 800b268:	2b01      	cmp	r3, #1
 800b26a:	d10a      	bne.n	800b282 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	689b      	ldr	r3, [r3, #8]
 800b270:	2203      	movs	r2, #3
 800b272:	9200      	str	r2, [sp, #0]
 800b274:	2200      	movs	r2, #0
 800b276:	2100      	movs	r1, #0
 800b278:	2001      	movs	r0, #1
 800b27a:	f000 fb5b 	bl	800b934 <xQueueGenericCreateStatic>
 800b27e:	61f8      	str	r0, [r7, #28]
 800b280:	e005      	b.n	800b28e <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800b282:	2203      	movs	r2, #3
 800b284:	2100      	movs	r1, #0
 800b286:	2001      	movs	r0, #1
 800b288:	f000 fbcc 	bl	800ba24 <xQueueGenericCreate>
 800b28c:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800b28e:	69fb      	ldr	r3, [r7, #28]
 800b290:	2b00      	cmp	r3, #0
 800b292:	d022      	beq.n	800b2da <osSemaphoreNew+0xe8>
 800b294:	68bb      	ldr	r3, [r7, #8]
 800b296:	2b00      	cmp	r3, #0
 800b298:	d01f      	beq.n	800b2da <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b29a:	2300      	movs	r3, #0
 800b29c:	2200      	movs	r2, #0
 800b29e:	2100      	movs	r1, #0
 800b2a0:	69f8      	ldr	r0, [r7, #28]
 800b2a2:	f000 fd3d 	bl	800bd20 <xQueueGenericSend>
 800b2a6:	4603      	mov	r3, r0
 800b2a8:	2b01      	cmp	r3, #1
 800b2aa:	d016      	beq.n	800b2da <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800b2ac:	69f8      	ldr	r0, [r7, #28]
 800b2ae:	f001 f9c9 	bl	800c644 <vQueueDelete>
            hSemaphore = NULL;
 800b2b2:	2300      	movs	r3, #0
 800b2b4:	61fb      	str	r3, [r7, #28]
 800b2b6:	e010      	b.n	800b2da <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800b2b8:	69bb      	ldr	r3, [r7, #24]
 800b2ba:	2b01      	cmp	r3, #1
 800b2bc:	d108      	bne.n	800b2d0 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	689b      	ldr	r3, [r3, #8]
 800b2c2:	461a      	mov	r2, r3
 800b2c4:	68b9      	ldr	r1, [r7, #8]
 800b2c6:	68f8      	ldr	r0, [r7, #12]
 800b2c8:	f000 fcc0 	bl	800bc4c <xQueueCreateCountingSemaphoreStatic>
 800b2cc:	61f8      	str	r0, [r7, #28]
 800b2ce:	e004      	b.n	800b2da <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800b2d0:	68b9      	ldr	r1, [r7, #8]
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f000 fcf1 	bl	800bcba <xQueueCreateCountingSemaphore>
 800b2d8:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 800b2da:	69fb      	ldr	r3, [r7, #28]
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	d00c      	beq.n	800b2fa <osSemaphoreNew+0x108>
        if (attr != NULL) {
 800b2e0:	687b      	ldr	r3, [r7, #4]
 800b2e2:	2b00      	cmp	r3, #0
 800b2e4:	d003      	beq.n	800b2ee <osSemaphoreNew+0xfc>
          name = attr->name;
 800b2e6:	687b      	ldr	r3, [r7, #4]
 800b2e8:	681b      	ldr	r3, [r3, #0]
 800b2ea:	617b      	str	r3, [r7, #20]
 800b2ec:	e001      	b.n	800b2f2 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 800b2f2:	6979      	ldr	r1, [r7, #20]
 800b2f4:	69f8      	ldr	r0, [r7, #28]
 800b2f6:	f001 faf1 	bl	800c8dc <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800b2fa:	69fb      	ldr	r3, [r7, #28]
}
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	3720      	adds	r7, #32
 800b300:	46bd      	mov	sp, r7
 800b302:	bd80      	pop	{r7, pc}

0800b304 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800b304:	b580      	push	{r7, lr}
 800b306:	b086      	sub	sp, #24
 800b308:	af00      	add	r7, sp, #0
 800b30a:	6078      	str	r0, [r7, #4]
 800b30c:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b30e:	687b      	ldr	r3, [r7, #4]
 800b310:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b312:	2300      	movs	r3, #0
 800b314:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b316:	693b      	ldr	r3, [r7, #16]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d103      	bne.n	800b324 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 800b31c:	f06f 0303 	mvn.w	r3, #3
 800b320:	617b      	str	r3, [r7, #20]
 800b322:	e039      	b.n	800b398 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b324:	f3ef 8305 	mrs	r3, IPSR
 800b328:	60fb      	str	r3, [r7, #12]
  return(result);
 800b32a:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d022      	beq.n	800b376 <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 800b330:	683b      	ldr	r3, [r7, #0]
 800b332:	2b00      	cmp	r3, #0
 800b334:	d003      	beq.n	800b33e <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800b336:	f06f 0303 	mvn.w	r3, #3
 800b33a:	617b      	str	r3, [r7, #20]
 800b33c:	e02c      	b.n	800b398 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 800b33e:	2300      	movs	r3, #0
 800b340:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800b342:	f107 0308 	add.w	r3, r7, #8
 800b346:	461a      	mov	r2, r3
 800b348:	2100      	movs	r1, #0
 800b34a:	6938      	ldr	r0, [r7, #16]
 800b34c:	f001 f8fa 	bl	800c544 <xQueueReceiveFromISR>
 800b350:	4603      	mov	r3, r0
 800b352:	2b01      	cmp	r3, #1
 800b354:	d003      	beq.n	800b35e <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800b356:	f06f 0302 	mvn.w	r3, #2
 800b35a:	617b      	str	r3, [r7, #20]
 800b35c:	e01c      	b.n	800b398 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 800b35e:	68bb      	ldr	r3, [r7, #8]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d019      	beq.n	800b398 <osSemaphoreAcquire+0x94>
 800b364:	4b0f      	ldr	r3, [pc, #60]	; (800b3a4 <osSemaphoreAcquire+0xa0>)
 800b366:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b36a:	601a      	str	r2, [r3, #0]
 800b36c:	f3bf 8f4f 	dsb	sy
 800b370:	f3bf 8f6f 	isb	sy
 800b374:	e010      	b.n	800b398 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800b376:	6839      	ldr	r1, [r7, #0]
 800b378:	6938      	ldr	r0, [r7, #16]
 800b37a:	f000 ffd7 	bl	800c32c <xQueueSemaphoreTake>
 800b37e:	4603      	mov	r3, r0
 800b380:	2b01      	cmp	r3, #1
 800b382:	d009      	beq.n	800b398 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800b384:	683b      	ldr	r3, [r7, #0]
 800b386:	2b00      	cmp	r3, #0
 800b388:	d003      	beq.n	800b392 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800b38a:	f06f 0301 	mvn.w	r3, #1
 800b38e:	617b      	str	r3, [r7, #20]
 800b390:	e002      	b.n	800b398 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800b392:	f06f 0302 	mvn.w	r3, #2
 800b396:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800b398:	697b      	ldr	r3, [r7, #20]
}
 800b39a:	4618      	mov	r0, r3
 800b39c:	3718      	adds	r7, #24
 800b39e:	46bd      	mov	sp, r7
 800b3a0:	bd80      	pop	{r7, pc}
 800b3a2:	bf00      	nop
 800b3a4:	e000ed04 	.word	0xe000ed04

0800b3a8 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800b3a8:	b580      	push	{r7, lr}
 800b3aa:	b086      	sub	sp, #24
 800b3ac:	af00      	add	r7, sp, #0
 800b3ae:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 800b3b0:	687b      	ldr	r3, [r7, #4]
 800b3b2:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800b3b4:	2300      	movs	r3, #0
 800b3b6:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800b3b8:	693b      	ldr	r3, [r7, #16]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	d103      	bne.n	800b3c6 <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 800b3be:	f06f 0303 	mvn.w	r3, #3
 800b3c2:	617b      	str	r3, [r7, #20]
 800b3c4:	e02c      	b.n	800b420 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b3c6:	f3ef 8305 	mrs	r3, IPSR
 800b3ca:	60fb      	str	r3, [r7, #12]
  return(result);
 800b3cc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	d01a      	beq.n	800b408 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800b3d6:	f107 0308 	add.w	r3, r7, #8
 800b3da:	4619      	mov	r1, r3
 800b3dc:	6938      	ldr	r0, [r7, #16]
 800b3de:	f000 fe38 	bl	800c052 <xQueueGiveFromISR>
 800b3e2:	4603      	mov	r3, r0
 800b3e4:	2b01      	cmp	r3, #1
 800b3e6:	d003      	beq.n	800b3f0 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800b3e8:	f06f 0302 	mvn.w	r3, #2
 800b3ec:	617b      	str	r3, [r7, #20]
 800b3ee:	e017      	b.n	800b420 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 800b3f0:	68bb      	ldr	r3, [r7, #8]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d014      	beq.n	800b420 <osSemaphoreRelease+0x78>
 800b3f6:	4b0d      	ldr	r3, [pc, #52]	; (800b42c <osSemaphoreRelease+0x84>)
 800b3f8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b3fc:	601a      	str	r2, [r3, #0]
 800b3fe:	f3bf 8f4f 	dsb	sy
 800b402:	f3bf 8f6f 	isb	sy
 800b406:	e00b      	b.n	800b420 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800b408:	2300      	movs	r3, #0
 800b40a:	2200      	movs	r2, #0
 800b40c:	2100      	movs	r1, #0
 800b40e:	6938      	ldr	r0, [r7, #16]
 800b410:	f000 fc86 	bl	800bd20 <xQueueGenericSend>
 800b414:	4603      	mov	r3, r0
 800b416:	2b01      	cmp	r3, #1
 800b418:	d002      	beq.n	800b420 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800b41a:	f06f 0302 	mvn.w	r3, #2
 800b41e:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 800b420:	697b      	ldr	r3, [r7, #20]
}
 800b422:	4618      	mov	r0, r3
 800b424:	3718      	adds	r7, #24
 800b426:	46bd      	mov	sp, r7
 800b428:	bd80      	pop	{r7, pc}
 800b42a:	bf00      	nop
 800b42c:	e000ed04 	.word	0xe000ed04

0800b430 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800b430:	b580      	push	{r7, lr}
 800b432:	b08a      	sub	sp, #40	; 0x28
 800b434:	af02      	add	r7, sp, #8
 800b436:	60f8      	str	r0, [r7, #12]
 800b438:	60b9      	str	r1, [r7, #8]
 800b43a:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800b43c:	2300      	movs	r3, #0
 800b43e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b440:	f3ef 8305 	mrs	r3, IPSR
 800b444:	613b      	str	r3, [r7, #16]
  return(result);
 800b446:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800b448:	2b00      	cmp	r3, #0
 800b44a:	d15f      	bne.n	800b50c <osMessageQueueNew+0xdc>
 800b44c:	68fb      	ldr	r3, [r7, #12]
 800b44e:	2b00      	cmp	r3, #0
 800b450:	d05c      	beq.n	800b50c <osMessageQueueNew+0xdc>
 800b452:	68bb      	ldr	r3, [r7, #8]
 800b454:	2b00      	cmp	r3, #0
 800b456:	d059      	beq.n	800b50c <osMessageQueueNew+0xdc>
    mem = -1;
 800b458:	f04f 33ff 	mov.w	r3, #4294967295
 800b45c:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800b45e:	687b      	ldr	r3, [r7, #4]
 800b460:	2b00      	cmp	r3, #0
 800b462:	d029      	beq.n	800b4b8 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b464:	687b      	ldr	r3, [r7, #4]
 800b466:	689b      	ldr	r3, [r3, #8]
 800b468:	2b00      	cmp	r3, #0
 800b46a:	d012      	beq.n	800b492 <osMessageQueueNew+0x62>
 800b46c:	687b      	ldr	r3, [r7, #4]
 800b46e:	68db      	ldr	r3, [r3, #12]
 800b470:	2b4f      	cmp	r3, #79	; 0x4f
 800b472:	d90e      	bls.n	800b492 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800b478:	2b00      	cmp	r3, #0
 800b47a:	d00a      	beq.n	800b492 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800b47c:	687b      	ldr	r3, [r7, #4]
 800b47e:	695a      	ldr	r2, [r3, #20]
 800b480:	68fb      	ldr	r3, [r7, #12]
 800b482:	68b9      	ldr	r1, [r7, #8]
 800b484:	fb01 f303 	mul.w	r3, r1, r3
 800b488:	429a      	cmp	r2, r3
 800b48a:	d302      	bcc.n	800b492 <osMessageQueueNew+0x62>
        mem = 1;
 800b48c:	2301      	movs	r3, #1
 800b48e:	61bb      	str	r3, [r7, #24]
 800b490:	e014      	b.n	800b4bc <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b492:	687b      	ldr	r3, [r7, #4]
 800b494:	689b      	ldr	r3, [r3, #8]
 800b496:	2b00      	cmp	r3, #0
 800b498:	d110      	bne.n	800b4bc <osMessageQueueNew+0x8c>
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	68db      	ldr	r3, [r3, #12]
 800b49e:	2b00      	cmp	r3, #0
 800b4a0:	d10c      	bne.n	800b4bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b4a2:	687b      	ldr	r3, [r7, #4]
 800b4a4:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800b4a6:	2b00      	cmp	r3, #0
 800b4a8:	d108      	bne.n	800b4bc <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800b4aa:	687b      	ldr	r3, [r7, #4]
 800b4ac:	695b      	ldr	r3, [r3, #20]
 800b4ae:	2b00      	cmp	r3, #0
 800b4b0:	d104      	bne.n	800b4bc <osMessageQueueNew+0x8c>
          mem = 0;
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	61bb      	str	r3, [r7, #24]
 800b4b6:	e001      	b.n	800b4bc <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800b4b8:	2300      	movs	r3, #0
 800b4ba:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800b4bc:	69bb      	ldr	r3, [r7, #24]
 800b4be:	2b01      	cmp	r3, #1
 800b4c0:	d10b      	bne.n	800b4da <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	691a      	ldr	r2, [r3, #16]
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	689b      	ldr	r3, [r3, #8]
 800b4ca:	2100      	movs	r1, #0
 800b4cc:	9100      	str	r1, [sp, #0]
 800b4ce:	68b9      	ldr	r1, [r7, #8]
 800b4d0:	68f8      	ldr	r0, [r7, #12]
 800b4d2:	f000 fa2f 	bl	800b934 <xQueueGenericCreateStatic>
 800b4d6:	61f8      	str	r0, [r7, #28]
 800b4d8:	e008      	b.n	800b4ec <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800b4da:	69bb      	ldr	r3, [r7, #24]
 800b4dc:	2b00      	cmp	r3, #0
 800b4de:	d105      	bne.n	800b4ec <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800b4e0:	2200      	movs	r2, #0
 800b4e2:	68b9      	ldr	r1, [r7, #8]
 800b4e4:	68f8      	ldr	r0, [r7, #12]
 800b4e6:	f000 fa9d 	bl	800ba24 <xQueueGenericCreate>
 800b4ea:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800b4ec:	69fb      	ldr	r3, [r7, #28]
 800b4ee:	2b00      	cmp	r3, #0
 800b4f0:	d00c      	beq.n	800b50c <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800b4f2:	687b      	ldr	r3, [r7, #4]
 800b4f4:	2b00      	cmp	r3, #0
 800b4f6:	d003      	beq.n	800b500 <osMessageQueueNew+0xd0>
        name = attr->name;
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	617b      	str	r3, [r7, #20]
 800b4fe:	e001      	b.n	800b504 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800b500:	2300      	movs	r3, #0
 800b502:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800b504:	6979      	ldr	r1, [r7, #20]
 800b506:	69f8      	ldr	r0, [r7, #28]
 800b508:	f001 f9e8 	bl	800c8dc <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800b50c:	69fb      	ldr	r3, [r7, #28]
}
 800b50e:	4618      	mov	r0, r3
 800b510:	3720      	adds	r7, #32
 800b512:	46bd      	mov	sp, r7
 800b514:	bd80      	pop	{r7, pc}
	...

0800b518 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800b518:	b580      	push	{r7, lr}
 800b51a:	b088      	sub	sp, #32
 800b51c:	af00      	add	r7, sp, #0
 800b51e:	60f8      	str	r0, [r7, #12]
 800b520:	60b9      	str	r1, [r7, #8]
 800b522:	603b      	str	r3, [r7, #0]
 800b524:	4613      	mov	r3, r2
 800b526:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b528:	68fb      	ldr	r3, [r7, #12]
 800b52a:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b52c:	2300      	movs	r3, #0
 800b52e:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b530:	f3ef 8305 	mrs	r3, IPSR
 800b534:	617b      	str	r3, [r7, #20]
  return(result);
 800b536:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b538:	2b00      	cmp	r3, #0
 800b53a:	d028      	beq.n	800b58e <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b53c:	69bb      	ldr	r3, [r7, #24]
 800b53e:	2b00      	cmp	r3, #0
 800b540:	d005      	beq.n	800b54e <osMessageQueuePut+0x36>
 800b542:	68bb      	ldr	r3, [r7, #8]
 800b544:	2b00      	cmp	r3, #0
 800b546:	d002      	beq.n	800b54e <osMessageQueuePut+0x36>
 800b548:	683b      	ldr	r3, [r7, #0]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d003      	beq.n	800b556 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800b54e:	f06f 0303 	mvn.w	r3, #3
 800b552:	61fb      	str	r3, [r7, #28]
 800b554:	e038      	b.n	800b5c8 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800b556:	2300      	movs	r3, #0
 800b558:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800b55a:	f107 0210 	add.w	r2, r7, #16
 800b55e:	2300      	movs	r3, #0
 800b560:	68b9      	ldr	r1, [r7, #8]
 800b562:	69b8      	ldr	r0, [r7, #24]
 800b564:	f000 fcda 	bl	800bf1c <xQueueGenericSendFromISR>
 800b568:	4603      	mov	r3, r0
 800b56a:	2b01      	cmp	r3, #1
 800b56c:	d003      	beq.n	800b576 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 800b56e:	f06f 0302 	mvn.w	r3, #2
 800b572:	61fb      	str	r3, [r7, #28]
 800b574:	e028      	b.n	800b5c8 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800b576:	693b      	ldr	r3, [r7, #16]
 800b578:	2b00      	cmp	r3, #0
 800b57a:	d025      	beq.n	800b5c8 <osMessageQueuePut+0xb0>
 800b57c:	4b15      	ldr	r3, [pc, #84]	; (800b5d4 <osMessageQueuePut+0xbc>)
 800b57e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b582:	601a      	str	r2, [r3, #0]
 800b584:	f3bf 8f4f 	dsb	sy
 800b588:	f3bf 8f6f 	isb	sy
 800b58c:	e01c      	b.n	800b5c8 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b58e:	69bb      	ldr	r3, [r7, #24]
 800b590:	2b00      	cmp	r3, #0
 800b592:	d002      	beq.n	800b59a <osMessageQueuePut+0x82>
 800b594:	68bb      	ldr	r3, [r7, #8]
 800b596:	2b00      	cmp	r3, #0
 800b598:	d103      	bne.n	800b5a2 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800b59a:	f06f 0303 	mvn.w	r3, #3
 800b59e:	61fb      	str	r3, [r7, #28]
 800b5a0:	e012      	b.n	800b5c8 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	683a      	ldr	r2, [r7, #0]
 800b5a6:	68b9      	ldr	r1, [r7, #8]
 800b5a8:	69b8      	ldr	r0, [r7, #24]
 800b5aa:	f000 fbb9 	bl	800bd20 <xQueueGenericSend>
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	2b01      	cmp	r3, #1
 800b5b2:	d009      	beq.n	800b5c8 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 800b5b4:	683b      	ldr	r3, [r7, #0]
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	d003      	beq.n	800b5c2 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800b5ba:	f06f 0301 	mvn.w	r3, #1
 800b5be:	61fb      	str	r3, [r7, #28]
 800b5c0:	e002      	b.n	800b5c8 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 800b5c2:	f06f 0302 	mvn.w	r3, #2
 800b5c6:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b5c8:	69fb      	ldr	r3, [r7, #28]
}
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	3720      	adds	r7, #32
 800b5ce:	46bd      	mov	sp, r7
 800b5d0:	bd80      	pop	{r7, pc}
 800b5d2:	bf00      	nop
 800b5d4:	e000ed04 	.word	0xe000ed04

0800b5d8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800b5d8:	b580      	push	{r7, lr}
 800b5da:	b088      	sub	sp, #32
 800b5dc:	af00      	add	r7, sp, #0
 800b5de:	60f8      	str	r0, [r7, #12]
 800b5e0:	60b9      	str	r1, [r7, #8]
 800b5e2:	607a      	str	r2, [r7, #4]
 800b5e4:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800b5e6:	68fb      	ldr	r3, [r7, #12]
 800b5e8:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800b5ea:	2300      	movs	r3, #0
 800b5ec:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b5ee:	f3ef 8305 	mrs	r3, IPSR
 800b5f2:	617b      	str	r3, [r7, #20]
  return(result);
 800b5f4:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 800b5f6:	2b00      	cmp	r3, #0
 800b5f8:	d028      	beq.n	800b64c <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800b5fa:	69bb      	ldr	r3, [r7, #24]
 800b5fc:	2b00      	cmp	r3, #0
 800b5fe:	d005      	beq.n	800b60c <osMessageQueueGet+0x34>
 800b600:	68bb      	ldr	r3, [r7, #8]
 800b602:	2b00      	cmp	r3, #0
 800b604:	d002      	beq.n	800b60c <osMessageQueueGet+0x34>
 800b606:	683b      	ldr	r3, [r7, #0]
 800b608:	2b00      	cmp	r3, #0
 800b60a:	d003      	beq.n	800b614 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 800b60c:	f06f 0303 	mvn.w	r3, #3
 800b610:	61fb      	str	r3, [r7, #28]
 800b612:	e037      	b.n	800b684 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 800b614:	2300      	movs	r3, #0
 800b616:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800b618:	f107 0310 	add.w	r3, r7, #16
 800b61c:	461a      	mov	r2, r3
 800b61e:	68b9      	ldr	r1, [r7, #8]
 800b620:	69b8      	ldr	r0, [r7, #24]
 800b622:	f000 ff8f 	bl	800c544 <xQueueReceiveFromISR>
 800b626:	4603      	mov	r3, r0
 800b628:	2b01      	cmp	r3, #1
 800b62a:	d003      	beq.n	800b634 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 800b62c:	f06f 0302 	mvn.w	r3, #2
 800b630:	61fb      	str	r3, [r7, #28]
 800b632:	e027      	b.n	800b684 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 800b634:	693b      	ldr	r3, [r7, #16]
 800b636:	2b00      	cmp	r3, #0
 800b638:	d024      	beq.n	800b684 <osMessageQueueGet+0xac>
 800b63a:	4b15      	ldr	r3, [pc, #84]	; (800b690 <osMessageQueueGet+0xb8>)
 800b63c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b640:	601a      	str	r2, [r3, #0]
 800b642:	f3bf 8f4f 	dsb	sy
 800b646:	f3bf 8f6f 	isb	sy
 800b64a:	e01b      	b.n	800b684 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800b64c:	69bb      	ldr	r3, [r7, #24]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	d002      	beq.n	800b658 <osMessageQueueGet+0x80>
 800b652:	68bb      	ldr	r3, [r7, #8]
 800b654:	2b00      	cmp	r3, #0
 800b656:	d103      	bne.n	800b660 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800b658:	f06f 0303 	mvn.w	r3, #3
 800b65c:	61fb      	str	r3, [r7, #28]
 800b65e:	e011      	b.n	800b684 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800b660:	683a      	ldr	r2, [r7, #0]
 800b662:	68b9      	ldr	r1, [r7, #8]
 800b664:	69b8      	ldr	r0, [r7, #24]
 800b666:	f000 fd81 	bl	800c16c <xQueueReceive>
 800b66a:	4603      	mov	r3, r0
 800b66c:	2b01      	cmp	r3, #1
 800b66e:	d009      	beq.n	800b684 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800b670:	683b      	ldr	r3, [r7, #0]
 800b672:	2b00      	cmp	r3, #0
 800b674:	d003      	beq.n	800b67e <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800b676:	f06f 0301 	mvn.w	r3, #1
 800b67a:	61fb      	str	r3, [r7, #28]
 800b67c:	e002      	b.n	800b684 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800b67e:	f06f 0302 	mvn.w	r3, #2
 800b682:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800b684:	69fb      	ldr	r3, [r7, #28]
}
 800b686:	4618      	mov	r0, r3
 800b688:	3720      	adds	r7, #32
 800b68a:	46bd      	mov	sp, r7
 800b68c:	bd80      	pop	{r7, pc}
 800b68e:	bf00      	nop
 800b690:	e000ed04 	.word	0xe000ed04

0800b694 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800b694:	b480      	push	{r7}
 800b696:	b085      	sub	sp, #20
 800b698:	af00      	add	r7, sp, #0
 800b69a:	60f8      	str	r0, [r7, #12]
 800b69c:	60b9      	str	r1, [r7, #8]
 800b69e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800b6a0:	68fb      	ldr	r3, [r7, #12]
 800b6a2:	4a07      	ldr	r2, [pc, #28]	; (800b6c0 <vApplicationGetIdleTaskMemory+0x2c>)
 800b6a4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800b6a6:	68bb      	ldr	r3, [r7, #8]
 800b6a8:	4a06      	ldr	r2, [pc, #24]	; (800b6c4 <vApplicationGetIdleTaskMemory+0x30>)
 800b6aa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	2240      	movs	r2, #64	; 0x40
 800b6b0:	601a      	str	r2, [r3, #0]
}
 800b6b2:	bf00      	nop
 800b6b4:	3714      	adds	r7, #20
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6bc:	4770      	bx	lr
 800b6be:	bf00      	nop
 800b6c0:	20002138 	.word	0x20002138
 800b6c4:	200021f4 	.word	0x200021f4

0800b6c8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800b6c8:	b480      	push	{r7}
 800b6ca:	b085      	sub	sp, #20
 800b6cc:	af00      	add	r7, sp, #0
 800b6ce:	60f8      	str	r0, [r7, #12]
 800b6d0:	60b9      	str	r1, [r7, #8]
 800b6d2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
 800b6d6:	4a07      	ldr	r2, [pc, #28]	; (800b6f4 <vApplicationGetTimerTaskMemory+0x2c>)
 800b6d8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800b6da:	68bb      	ldr	r3, [r7, #8]
 800b6dc:	4a06      	ldr	r2, [pc, #24]	; (800b6f8 <vApplicationGetTimerTaskMemory+0x30>)
 800b6de:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	2280      	movs	r2, #128	; 0x80
 800b6e4:	601a      	str	r2, [r3, #0]
}
 800b6e6:	bf00      	nop
 800b6e8:	3714      	adds	r7, #20
 800b6ea:	46bd      	mov	sp, r7
 800b6ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b6f0:	4770      	bx	lr
 800b6f2:	bf00      	nop
 800b6f4:	200022f4 	.word	0x200022f4
 800b6f8:	200023b0 	.word	0x200023b0

0800b6fc <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800b6fc:	b480      	push	{r7}
 800b6fe:	b083      	sub	sp, #12
 800b700:	af00      	add	r7, sp, #0
 800b702:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	f103 0208 	add.w	r2, r3, #8
 800b70a:	687b      	ldr	r3, [r7, #4]
 800b70c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	f04f 32ff 	mov.w	r2, #4294967295
 800b714:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b716:	687b      	ldr	r3, [r7, #4]
 800b718:	f103 0208 	add.w	r2, r3, #8
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800b720:	687b      	ldr	r3, [r7, #4]
 800b722:	f103 0208 	add.w	r2, r3, #8
 800b726:	687b      	ldr	r3, [r7, #4]
 800b728:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800b72a:	687b      	ldr	r3, [r7, #4]
 800b72c:	2200      	movs	r2, #0
 800b72e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800b730:	bf00      	nop
 800b732:	370c      	adds	r7, #12
 800b734:	46bd      	mov	sp, r7
 800b736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b73a:	4770      	bx	lr

0800b73c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800b73c:	b480      	push	{r7}
 800b73e:	b083      	sub	sp, #12
 800b740:	af00      	add	r7, sp, #0
 800b742:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800b744:	687b      	ldr	r3, [r7, #4]
 800b746:	2200      	movs	r2, #0
 800b748:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800b74a:	bf00      	nop
 800b74c:	370c      	adds	r7, #12
 800b74e:	46bd      	mov	sp, r7
 800b750:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b754:	4770      	bx	lr

0800b756 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b756:	b480      	push	{r7}
 800b758:	b085      	sub	sp, #20
 800b75a:	af00      	add	r7, sp, #0
 800b75c:	6078      	str	r0, [r7, #4]
 800b75e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800b760:	687b      	ldr	r3, [r7, #4]
 800b762:	685b      	ldr	r3, [r3, #4]
 800b764:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800b766:	683b      	ldr	r3, [r7, #0]
 800b768:	68fa      	ldr	r2, [r7, #12]
 800b76a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800b76c:	68fb      	ldr	r3, [r7, #12]
 800b76e:	689a      	ldr	r2, [r3, #8]
 800b770:	683b      	ldr	r3, [r7, #0]
 800b772:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800b774:	68fb      	ldr	r3, [r7, #12]
 800b776:	689b      	ldr	r3, [r3, #8]
 800b778:	683a      	ldr	r2, [r7, #0]
 800b77a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	683a      	ldr	r2, [r7, #0]
 800b780:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800b782:	683b      	ldr	r3, [r7, #0]
 800b784:	687a      	ldr	r2, [r7, #4]
 800b786:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b788:	687b      	ldr	r3, [r7, #4]
 800b78a:	681b      	ldr	r3, [r3, #0]
 800b78c:	1c5a      	adds	r2, r3, #1
 800b78e:	687b      	ldr	r3, [r7, #4]
 800b790:	601a      	str	r2, [r3, #0]
}
 800b792:	bf00      	nop
 800b794:	3714      	adds	r7, #20
 800b796:	46bd      	mov	sp, r7
 800b798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b79c:	4770      	bx	lr

0800b79e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800b79e:	b480      	push	{r7}
 800b7a0:	b085      	sub	sp, #20
 800b7a2:	af00      	add	r7, sp, #0
 800b7a4:	6078      	str	r0, [r7, #4]
 800b7a6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800b7a8:	683b      	ldr	r3, [r7, #0]
 800b7aa:	681b      	ldr	r3, [r3, #0]
 800b7ac:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800b7ae:	68bb      	ldr	r3, [r7, #8]
 800b7b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b7b4:	d103      	bne.n	800b7be <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	691b      	ldr	r3, [r3, #16]
 800b7ba:	60fb      	str	r3, [r7, #12]
 800b7bc:	e00c      	b.n	800b7d8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	3308      	adds	r3, #8
 800b7c2:	60fb      	str	r3, [r7, #12]
 800b7c4:	e002      	b.n	800b7cc <vListInsert+0x2e>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	685b      	ldr	r3, [r3, #4]
 800b7ca:	60fb      	str	r3, [r7, #12]
 800b7cc:	68fb      	ldr	r3, [r7, #12]
 800b7ce:	685b      	ldr	r3, [r3, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	68ba      	ldr	r2, [r7, #8]
 800b7d4:	429a      	cmp	r2, r3
 800b7d6:	d2f6      	bcs.n	800b7c6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800b7d8:	68fb      	ldr	r3, [r7, #12]
 800b7da:	685a      	ldr	r2, [r3, #4]
 800b7dc:	683b      	ldr	r3, [r7, #0]
 800b7de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800b7e0:	683b      	ldr	r3, [r7, #0]
 800b7e2:	685b      	ldr	r3, [r3, #4]
 800b7e4:	683a      	ldr	r2, [r7, #0]
 800b7e6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800b7e8:	683b      	ldr	r3, [r7, #0]
 800b7ea:	68fa      	ldr	r2, [r7, #12]
 800b7ec:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800b7ee:	68fb      	ldr	r3, [r7, #12]
 800b7f0:	683a      	ldr	r2, [r7, #0]
 800b7f2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	687a      	ldr	r2, [r7, #4]
 800b7f8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	1c5a      	adds	r2, r3, #1
 800b800:	687b      	ldr	r3, [r7, #4]
 800b802:	601a      	str	r2, [r3, #0]
}
 800b804:	bf00      	nop
 800b806:	3714      	adds	r7, #20
 800b808:	46bd      	mov	sp, r7
 800b80a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b80e:	4770      	bx	lr

0800b810 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800b810:	b480      	push	{r7}
 800b812:	b085      	sub	sp, #20
 800b814:	af00      	add	r7, sp, #0
 800b816:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800b818:	687b      	ldr	r3, [r7, #4]
 800b81a:	691b      	ldr	r3, [r3, #16]
 800b81c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	685b      	ldr	r3, [r3, #4]
 800b822:	687a      	ldr	r2, [r7, #4]
 800b824:	6892      	ldr	r2, [r2, #8]
 800b826:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	687a      	ldr	r2, [r7, #4]
 800b82e:	6852      	ldr	r2, [r2, #4]
 800b830:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800b832:	68fb      	ldr	r3, [r7, #12]
 800b834:	685b      	ldr	r3, [r3, #4]
 800b836:	687a      	ldr	r2, [r7, #4]
 800b838:	429a      	cmp	r2, r3
 800b83a:	d103      	bne.n	800b844 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800b83c:	687b      	ldr	r3, [r7, #4]
 800b83e:	689a      	ldr	r2, [r3, #8]
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800b844:	687b      	ldr	r3, [r7, #4]
 800b846:	2200      	movs	r2, #0
 800b848:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800b84a:	68fb      	ldr	r3, [r7, #12]
 800b84c:	681b      	ldr	r3, [r3, #0]
 800b84e:	1e5a      	subs	r2, r3, #1
 800b850:	68fb      	ldr	r3, [r7, #12]
 800b852:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
}
 800b858:	4618      	mov	r0, r3
 800b85a:	3714      	adds	r7, #20
 800b85c:	46bd      	mov	sp, r7
 800b85e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b862:	4770      	bx	lr

0800b864 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800b864:	b580      	push	{r7, lr}
 800b866:	b084      	sub	sp, #16
 800b868:	af00      	add	r7, sp, #0
 800b86a:	6078      	str	r0, [r7, #4]
 800b86c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800b86e:	687b      	ldr	r3, [r7, #4]
 800b870:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800b872:	68fb      	ldr	r3, [r7, #12]
 800b874:	2b00      	cmp	r3, #0
 800b876:	d10a      	bne.n	800b88e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800b878:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b87c:	f383 8811 	msr	BASEPRI, r3
 800b880:	f3bf 8f6f 	isb	sy
 800b884:	f3bf 8f4f 	dsb	sy
 800b888:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800b88a:	bf00      	nop
 800b88c:	e7fe      	b.n	800b88c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800b88e:	f002 fdd9 	bl	800e444 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	681a      	ldr	r2, [r3, #0]
 800b896:	68fb      	ldr	r3, [r7, #12]
 800b898:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b89a:	68f9      	ldr	r1, [r7, #12]
 800b89c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b89e:	fb01 f303 	mul.w	r3, r1, r3
 800b8a2:	441a      	add	r2, r3
 800b8a4:	68fb      	ldr	r3, [r7, #12]
 800b8a6:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800b8a8:	68fb      	ldr	r3, [r7, #12]
 800b8aa:	2200      	movs	r2, #0
 800b8ac:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800b8ae:	68fb      	ldr	r3, [r7, #12]
 800b8b0:	681a      	ldr	r2, [r3, #0]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800b8b6:	68fb      	ldr	r3, [r7, #12]
 800b8b8:	681a      	ldr	r2, [r3, #0]
 800b8ba:	68fb      	ldr	r3, [r7, #12]
 800b8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b8be:	3b01      	subs	r3, #1
 800b8c0:	68f9      	ldr	r1, [r7, #12]
 800b8c2:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800b8c4:	fb01 f303 	mul.w	r3, r1, r3
 800b8c8:	441a      	add	r2, r3
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800b8ce:	68fb      	ldr	r3, [r7, #12]
 800b8d0:	22ff      	movs	r2, #255	; 0xff
 800b8d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800b8d6:	68fb      	ldr	r3, [r7, #12]
 800b8d8:	22ff      	movs	r2, #255	; 0xff
 800b8da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800b8de:	683b      	ldr	r3, [r7, #0]
 800b8e0:	2b00      	cmp	r3, #0
 800b8e2:	d114      	bne.n	800b90e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800b8e4:	68fb      	ldr	r3, [r7, #12]
 800b8e6:	691b      	ldr	r3, [r3, #16]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	d01a      	beq.n	800b922 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800b8ec:	68fb      	ldr	r3, [r7, #12]
 800b8ee:	3310      	adds	r3, #16
 800b8f0:	4618      	mov	r0, r3
 800b8f2:	f001 fd7f 	bl	800d3f4 <xTaskRemoveFromEventList>
 800b8f6:	4603      	mov	r3, r0
 800b8f8:	2b00      	cmp	r3, #0
 800b8fa:	d012      	beq.n	800b922 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800b8fc:	4b0c      	ldr	r3, [pc, #48]	; (800b930 <xQueueGenericReset+0xcc>)
 800b8fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b902:	601a      	str	r2, [r3, #0]
 800b904:	f3bf 8f4f 	dsb	sy
 800b908:	f3bf 8f6f 	isb	sy
 800b90c:	e009      	b.n	800b922 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	3310      	adds	r3, #16
 800b912:	4618      	mov	r0, r3
 800b914:	f7ff fef2 	bl	800b6fc <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800b918:	68fb      	ldr	r3, [r7, #12]
 800b91a:	3324      	adds	r3, #36	; 0x24
 800b91c:	4618      	mov	r0, r3
 800b91e:	f7ff feed 	bl	800b6fc <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800b922:	f002 fdbf 	bl	800e4a4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800b926:	2301      	movs	r3, #1
}
 800b928:	4618      	mov	r0, r3
 800b92a:	3710      	adds	r7, #16
 800b92c:	46bd      	mov	sp, r7
 800b92e:	bd80      	pop	{r7, pc}
 800b930:	e000ed04 	.word	0xe000ed04

0800b934 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800b934:	b580      	push	{r7, lr}
 800b936:	b08e      	sub	sp, #56	; 0x38
 800b938:	af02      	add	r7, sp, #8
 800b93a:	60f8      	str	r0, [r7, #12]
 800b93c:	60b9      	str	r1, [r7, #8]
 800b93e:	607a      	str	r2, [r7, #4]
 800b940:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800b942:	68fb      	ldr	r3, [r7, #12]
 800b944:	2b00      	cmp	r3, #0
 800b946:	d10a      	bne.n	800b95e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800b948:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b94c:	f383 8811 	msr	BASEPRI, r3
 800b950:	f3bf 8f6f 	isb	sy
 800b954:	f3bf 8f4f 	dsb	sy
 800b958:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800b95a:	bf00      	nop
 800b95c:	e7fe      	b.n	800b95c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800b95e:	683b      	ldr	r3, [r7, #0]
 800b960:	2b00      	cmp	r3, #0
 800b962:	d10a      	bne.n	800b97a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800b964:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b968:	f383 8811 	msr	BASEPRI, r3
 800b96c:	f3bf 8f6f 	isb	sy
 800b970:	f3bf 8f4f 	dsb	sy
 800b974:	627b      	str	r3, [r7, #36]	; 0x24
}
 800b976:	bf00      	nop
 800b978:	e7fe      	b.n	800b978 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800b97a:	687b      	ldr	r3, [r7, #4]
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d002      	beq.n	800b986 <xQueueGenericCreateStatic+0x52>
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	2b00      	cmp	r3, #0
 800b984:	d001      	beq.n	800b98a <xQueueGenericCreateStatic+0x56>
 800b986:	2301      	movs	r3, #1
 800b988:	e000      	b.n	800b98c <xQueueGenericCreateStatic+0x58>
 800b98a:	2300      	movs	r3, #0
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d10a      	bne.n	800b9a6 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800b990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b994:	f383 8811 	msr	BASEPRI, r3
 800b998:	f3bf 8f6f 	isb	sy
 800b99c:	f3bf 8f4f 	dsb	sy
 800b9a0:	623b      	str	r3, [r7, #32]
}
 800b9a2:	bf00      	nop
 800b9a4:	e7fe      	b.n	800b9a4 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800b9a6:	687b      	ldr	r3, [r7, #4]
 800b9a8:	2b00      	cmp	r3, #0
 800b9aa:	d102      	bne.n	800b9b2 <xQueueGenericCreateStatic+0x7e>
 800b9ac:	68bb      	ldr	r3, [r7, #8]
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d101      	bne.n	800b9b6 <xQueueGenericCreateStatic+0x82>
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	e000      	b.n	800b9b8 <xQueueGenericCreateStatic+0x84>
 800b9b6:	2300      	movs	r3, #0
 800b9b8:	2b00      	cmp	r3, #0
 800b9ba:	d10a      	bne.n	800b9d2 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800b9bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9c0:	f383 8811 	msr	BASEPRI, r3
 800b9c4:	f3bf 8f6f 	isb	sy
 800b9c8:	f3bf 8f4f 	dsb	sy
 800b9cc:	61fb      	str	r3, [r7, #28]
}
 800b9ce:	bf00      	nop
 800b9d0:	e7fe      	b.n	800b9d0 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800b9d2:	2350      	movs	r3, #80	; 0x50
 800b9d4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800b9d6:	697b      	ldr	r3, [r7, #20]
 800b9d8:	2b50      	cmp	r3, #80	; 0x50
 800b9da:	d00a      	beq.n	800b9f2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800b9dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b9e0:	f383 8811 	msr	BASEPRI, r3
 800b9e4:	f3bf 8f6f 	isb	sy
 800b9e8:	f3bf 8f4f 	dsb	sy
 800b9ec:	61bb      	str	r3, [r7, #24]
}
 800b9ee:	bf00      	nop
 800b9f0:	e7fe      	b.n	800b9f0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800b9f2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800b9f4:	683b      	ldr	r3, [r7, #0]
 800b9f6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800b9f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b9fa:	2b00      	cmp	r3, #0
 800b9fc:	d00d      	beq.n	800ba1a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800b9fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba00:	2201      	movs	r2, #1
 800ba02:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba06:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800ba0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ba0c:	9300      	str	r3, [sp, #0]
 800ba0e:	4613      	mov	r3, r2
 800ba10:	687a      	ldr	r2, [r7, #4]
 800ba12:	68b9      	ldr	r1, [r7, #8]
 800ba14:	68f8      	ldr	r0, [r7, #12]
 800ba16:	f000 f83f 	bl	800ba98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800ba1c:	4618      	mov	r0, r3
 800ba1e:	3730      	adds	r7, #48	; 0x30
 800ba20:	46bd      	mov	sp, r7
 800ba22:	bd80      	pop	{r7, pc}

0800ba24 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800ba24:	b580      	push	{r7, lr}
 800ba26:	b08a      	sub	sp, #40	; 0x28
 800ba28:	af02      	add	r7, sp, #8
 800ba2a:	60f8      	str	r0, [r7, #12]
 800ba2c:	60b9      	str	r1, [r7, #8]
 800ba2e:	4613      	mov	r3, r2
 800ba30:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800ba32:	68fb      	ldr	r3, [r7, #12]
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	d10a      	bne.n	800ba4e <xQueueGenericCreate+0x2a>
	__asm volatile
 800ba38:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ba3c:	f383 8811 	msr	BASEPRI, r3
 800ba40:	f3bf 8f6f 	isb	sy
 800ba44:	f3bf 8f4f 	dsb	sy
 800ba48:	613b      	str	r3, [r7, #16]
}
 800ba4a:	bf00      	nop
 800ba4c:	e7fe      	b.n	800ba4c <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ba4e:	68fb      	ldr	r3, [r7, #12]
 800ba50:	68ba      	ldr	r2, [r7, #8]
 800ba52:	fb02 f303 	mul.w	r3, r2, r3
 800ba56:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800ba58:	69fb      	ldr	r3, [r7, #28]
 800ba5a:	3350      	adds	r3, #80	; 0x50
 800ba5c:	4618      	mov	r0, r3
 800ba5e:	f002 fe13 	bl	800e688 <pvPortMalloc>
 800ba62:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800ba64:	69bb      	ldr	r3, [r7, #24]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d011      	beq.n	800ba8e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800ba6a:	69bb      	ldr	r3, [r7, #24]
 800ba6c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800ba6e:	697b      	ldr	r3, [r7, #20]
 800ba70:	3350      	adds	r3, #80	; 0x50
 800ba72:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800ba74:	69bb      	ldr	r3, [r7, #24]
 800ba76:	2200      	movs	r2, #0
 800ba78:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800ba7c:	79fa      	ldrb	r2, [r7, #7]
 800ba7e:	69bb      	ldr	r3, [r7, #24]
 800ba80:	9300      	str	r3, [sp, #0]
 800ba82:	4613      	mov	r3, r2
 800ba84:	697a      	ldr	r2, [r7, #20]
 800ba86:	68b9      	ldr	r1, [r7, #8]
 800ba88:	68f8      	ldr	r0, [r7, #12]
 800ba8a:	f000 f805 	bl	800ba98 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800ba8e:	69bb      	ldr	r3, [r7, #24]
	}
 800ba90:	4618      	mov	r0, r3
 800ba92:	3720      	adds	r7, #32
 800ba94:	46bd      	mov	sp, r7
 800ba96:	bd80      	pop	{r7, pc}

0800ba98 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b084      	sub	sp, #16
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	60f8      	str	r0, [r7, #12]
 800baa0:	60b9      	str	r1, [r7, #8]
 800baa2:	607a      	str	r2, [r7, #4]
 800baa4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800baa6:	68bb      	ldr	r3, [r7, #8]
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d103      	bne.n	800bab4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800baac:	69bb      	ldr	r3, [r7, #24]
 800baae:	69ba      	ldr	r2, [r7, #24]
 800bab0:	601a      	str	r2, [r3, #0]
 800bab2:	e002      	b.n	800baba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800bab4:	69bb      	ldr	r3, [r7, #24]
 800bab6:	687a      	ldr	r2, [r7, #4]
 800bab8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800baba:	69bb      	ldr	r3, [r7, #24]
 800babc:	68fa      	ldr	r2, [r7, #12]
 800babe:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bac0:	69bb      	ldr	r3, [r7, #24]
 800bac2:	68ba      	ldr	r2, [r7, #8]
 800bac4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bac6:	2101      	movs	r1, #1
 800bac8:	69b8      	ldr	r0, [r7, #24]
 800baca:	f7ff fecb 	bl	800b864 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800bace:	69bb      	ldr	r3, [r7, #24]
 800bad0:	78fa      	ldrb	r2, [r7, #3]
 800bad2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800bad6:	bf00      	nop
 800bad8:	3710      	adds	r7, #16
 800bada:	46bd      	mov	sp, r7
 800badc:	bd80      	pop	{r7, pc}

0800bade <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800bade:	b580      	push	{r7, lr}
 800bae0:	b082      	sub	sp, #8
 800bae2:	af00      	add	r7, sp, #0
 800bae4:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	2b00      	cmp	r3, #0
 800baea:	d00e      	beq.n	800bb0a <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800baec:	687b      	ldr	r3, [r7, #4]
 800baee:	2200      	movs	r2, #0
 800baf0:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2200      	movs	r2, #0
 800baf6:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	2200      	movs	r2, #0
 800bafc:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800bafe:	2300      	movs	r3, #0
 800bb00:	2200      	movs	r2, #0
 800bb02:	2100      	movs	r1, #0
 800bb04:	6878      	ldr	r0, [r7, #4]
 800bb06:	f000 f90b 	bl	800bd20 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800bb0a:	bf00      	nop
 800bb0c:	3708      	adds	r7, #8
 800bb0e:	46bd      	mov	sp, r7
 800bb10:	bd80      	pop	{r7, pc}

0800bb12 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800bb12:	b580      	push	{r7, lr}
 800bb14:	b086      	sub	sp, #24
 800bb16:	af00      	add	r7, sp, #0
 800bb18:	4603      	mov	r3, r0
 800bb1a:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb1c:	2301      	movs	r3, #1
 800bb1e:	617b      	str	r3, [r7, #20]
 800bb20:	2300      	movs	r3, #0
 800bb22:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800bb24:	79fb      	ldrb	r3, [r7, #7]
 800bb26:	461a      	mov	r2, r3
 800bb28:	6939      	ldr	r1, [r7, #16]
 800bb2a:	6978      	ldr	r0, [r7, #20]
 800bb2c:	f7ff ff7a 	bl	800ba24 <xQueueGenericCreate>
 800bb30:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb32:	68f8      	ldr	r0, [r7, #12]
 800bb34:	f7ff ffd3 	bl	800bade <prvInitialiseMutex>

		return xNewQueue;
 800bb38:	68fb      	ldr	r3, [r7, #12]
	}
 800bb3a:	4618      	mov	r0, r3
 800bb3c:	3718      	adds	r7, #24
 800bb3e:	46bd      	mov	sp, r7
 800bb40:	bd80      	pop	{r7, pc}

0800bb42 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800bb42:	b580      	push	{r7, lr}
 800bb44:	b088      	sub	sp, #32
 800bb46:	af02      	add	r7, sp, #8
 800bb48:	4603      	mov	r3, r0
 800bb4a:	6039      	str	r1, [r7, #0]
 800bb4c:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800bb4e:	2301      	movs	r3, #1
 800bb50:	617b      	str	r3, [r7, #20]
 800bb52:	2300      	movs	r3, #0
 800bb54:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800bb56:	79fb      	ldrb	r3, [r7, #7]
 800bb58:	9300      	str	r3, [sp, #0]
 800bb5a:	683b      	ldr	r3, [r7, #0]
 800bb5c:	2200      	movs	r2, #0
 800bb5e:	6939      	ldr	r1, [r7, #16]
 800bb60:	6978      	ldr	r0, [r7, #20]
 800bb62:	f7ff fee7 	bl	800b934 <xQueueGenericCreateStatic>
 800bb66:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800bb68:	68f8      	ldr	r0, [r7, #12]
 800bb6a:	f7ff ffb8 	bl	800bade <prvInitialiseMutex>

		return xNewQueue;
 800bb6e:	68fb      	ldr	r3, [r7, #12]
	}
 800bb70:	4618      	mov	r0, r3
 800bb72:	3718      	adds	r7, #24
 800bb74:	46bd      	mov	sp, r7
 800bb76:	bd80      	pop	{r7, pc}

0800bb78 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800bb78:	b590      	push	{r4, r7, lr}
 800bb7a:	b087      	sub	sp, #28
 800bb7c:	af00      	add	r7, sp, #0
 800bb7e:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bb84:	693b      	ldr	r3, [r7, #16]
 800bb86:	2b00      	cmp	r3, #0
 800bb88:	d10a      	bne.n	800bba0 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800bb8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bb8e:	f383 8811 	msr	BASEPRI, r3
 800bb92:	f3bf 8f6f 	isb	sy
 800bb96:	f3bf 8f4f 	dsb	sy
 800bb9a:	60fb      	str	r3, [r7, #12]
}
 800bb9c:	bf00      	nop
 800bb9e:	e7fe      	b.n	800bb9e <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bba0:	693b      	ldr	r3, [r7, #16]
 800bba2:	689c      	ldr	r4, [r3, #8]
 800bba4:	f001 fde8 	bl	800d778 <xTaskGetCurrentTaskHandle>
 800bba8:	4603      	mov	r3, r0
 800bbaa:	429c      	cmp	r4, r3
 800bbac:	d111      	bne.n	800bbd2 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800bbae:	693b      	ldr	r3, [r7, #16]
 800bbb0:	68db      	ldr	r3, [r3, #12]
 800bbb2:	1e5a      	subs	r2, r3, #1
 800bbb4:	693b      	ldr	r3, [r7, #16]
 800bbb6:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800bbb8:	693b      	ldr	r3, [r7, #16]
 800bbba:	68db      	ldr	r3, [r3, #12]
 800bbbc:	2b00      	cmp	r3, #0
 800bbbe:	d105      	bne.n	800bbcc <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800bbc0:	2300      	movs	r3, #0
 800bbc2:	2200      	movs	r2, #0
 800bbc4:	2100      	movs	r1, #0
 800bbc6:	6938      	ldr	r0, [r7, #16]
 800bbc8:	f000 f8aa 	bl	800bd20 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 800bbcc:	2301      	movs	r3, #1
 800bbce:	617b      	str	r3, [r7, #20]
 800bbd0:	e001      	b.n	800bbd6 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800bbd6:	697b      	ldr	r3, [r7, #20]
	}
 800bbd8:	4618      	mov	r0, r3
 800bbda:	371c      	adds	r7, #28
 800bbdc:	46bd      	mov	sp, r7
 800bbde:	bd90      	pop	{r4, r7, pc}

0800bbe0 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800bbe0:	b590      	push	{r4, r7, lr}
 800bbe2:	b087      	sub	sp, #28
 800bbe4:	af00      	add	r7, sp, #0
 800bbe6:	6078      	str	r0, [r7, #4]
 800bbe8:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800bbee:	693b      	ldr	r3, [r7, #16]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	d10a      	bne.n	800bc0a <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 800bbf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bbf8:	f383 8811 	msr	BASEPRI, r3
 800bbfc:	f3bf 8f6f 	isb	sy
 800bc00:	f3bf 8f4f 	dsb	sy
 800bc04:	60fb      	str	r3, [r7, #12]
}
 800bc06:	bf00      	nop
 800bc08:	e7fe      	b.n	800bc08 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800bc0a:	693b      	ldr	r3, [r7, #16]
 800bc0c:	689c      	ldr	r4, [r3, #8]
 800bc0e:	f001 fdb3 	bl	800d778 <xTaskGetCurrentTaskHandle>
 800bc12:	4603      	mov	r3, r0
 800bc14:	429c      	cmp	r4, r3
 800bc16:	d107      	bne.n	800bc28 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	68db      	ldr	r3, [r3, #12]
 800bc1c:	1c5a      	adds	r2, r3, #1
 800bc1e:	693b      	ldr	r3, [r7, #16]
 800bc20:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800bc22:	2301      	movs	r3, #1
 800bc24:	617b      	str	r3, [r7, #20]
 800bc26:	e00c      	b.n	800bc42 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800bc28:	6839      	ldr	r1, [r7, #0]
 800bc2a:	6938      	ldr	r0, [r7, #16]
 800bc2c:	f000 fb7e 	bl	800c32c <xQueueSemaphoreTake>
 800bc30:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800bc32:	697b      	ldr	r3, [r7, #20]
 800bc34:	2b00      	cmp	r3, #0
 800bc36:	d004      	beq.n	800bc42 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800bc38:	693b      	ldr	r3, [r7, #16]
 800bc3a:	68db      	ldr	r3, [r3, #12]
 800bc3c:	1c5a      	adds	r2, r3, #1
 800bc3e:	693b      	ldr	r3, [r7, #16]
 800bc40:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800bc42:	697b      	ldr	r3, [r7, #20]
	}
 800bc44:	4618      	mov	r0, r3
 800bc46:	371c      	adds	r7, #28
 800bc48:	46bd      	mov	sp, r7
 800bc4a:	bd90      	pop	{r4, r7, pc}

0800bc4c <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 800bc4c:	b580      	push	{r7, lr}
 800bc4e:	b08a      	sub	sp, #40	; 0x28
 800bc50:	af02      	add	r7, sp, #8
 800bc52:	60f8      	str	r0, [r7, #12]
 800bc54:	60b9      	str	r1, [r7, #8]
 800bc56:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bc58:	68fb      	ldr	r3, [r7, #12]
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d10a      	bne.n	800bc74 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 800bc5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc62:	f383 8811 	msr	BASEPRI, r3
 800bc66:	f3bf 8f6f 	isb	sy
 800bc6a:	f3bf 8f4f 	dsb	sy
 800bc6e:	61bb      	str	r3, [r7, #24]
}
 800bc70:	bf00      	nop
 800bc72:	e7fe      	b.n	800bc72 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bc74:	68ba      	ldr	r2, [r7, #8]
 800bc76:	68fb      	ldr	r3, [r7, #12]
 800bc78:	429a      	cmp	r2, r3
 800bc7a:	d90a      	bls.n	800bc92 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 800bc7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bc80:	f383 8811 	msr	BASEPRI, r3
 800bc84:	f3bf 8f6f 	isb	sy
 800bc88:	f3bf 8f4f 	dsb	sy
 800bc8c:	617b      	str	r3, [r7, #20]
}
 800bc8e:	bf00      	nop
 800bc90:	e7fe      	b.n	800bc90 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bc92:	2302      	movs	r3, #2
 800bc94:	9300      	str	r3, [sp, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	2200      	movs	r2, #0
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	68f8      	ldr	r0, [r7, #12]
 800bc9e:	f7ff fe49 	bl	800b934 <xQueueGenericCreateStatic>
 800bca2:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800bca4:	69fb      	ldr	r3, [r7, #28]
 800bca6:	2b00      	cmp	r3, #0
 800bca8:	d002      	beq.n	800bcb0 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bcaa:	69fb      	ldr	r3, [r7, #28]
 800bcac:	68ba      	ldr	r2, [r7, #8]
 800bcae:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bcb0:	69fb      	ldr	r3, [r7, #28]
	}
 800bcb2:	4618      	mov	r0, r3
 800bcb4:	3720      	adds	r7, #32
 800bcb6:	46bd      	mov	sp, r7
 800bcb8:	bd80      	pop	{r7, pc}

0800bcba <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800bcba:	b580      	push	{r7, lr}
 800bcbc:	b086      	sub	sp, #24
 800bcbe:	af00      	add	r7, sp, #0
 800bcc0:	6078      	str	r0, [r7, #4]
 800bcc2:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d10a      	bne.n	800bce0 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800bcca:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcce:	f383 8811 	msr	BASEPRI, r3
 800bcd2:	f3bf 8f6f 	isb	sy
 800bcd6:	f3bf 8f4f 	dsb	sy
 800bcda:	613b      	str	r3, [r7, #16]
}
 800bcdc:	bf00      	nop
 800bcde:	e7fe      	b.n	800bcde <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800bce0:	683a      	ldr	r2, [r7, #0]
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	429a      	cmp	r2, r3
 800bce6:	d90a      	bls.n	800bcfe <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 800bce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcec:	f383 8811 	msr	BASEPRI, r3
 800bcf0:	f3bf 8f6f 	isb	sy
 800bcf4:	f3bf 8f4f 	dsb	sy
 800bcf8:	60fb      	str	r3, [r7, #12]
}
 800bcfa:	bf00      	nop
 800bcfc:	e7fe      	b.n	800bcfc <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800bcfe:	2202      	movs	r2, #2
 800bd00:	2100      	movs	r1, #0
 800bd02:	6878      	ldr	r0, [r7, #4]
 800bd04:	f7ff fe8e 	bl	800ba24 <xQueueGenericCreate>
 800bd08:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800bd0a:	697b      	ldr	r3, [r7, #20]
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d002      	beq.n	800bd16 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800bd10:	697b      	ldr	r3, [r7, #20]
 800bd12:	683a      	ldr	r2, [r7, #0]
 800bd14:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800bd16:	697b      	ldr	r3, [r7, #20]
	}
 800bd18:	4618      	mov	r0, r3
 800bd1a:	3718      	adds	r7, #24
 800bd1c:	46bd      	mov	sp, r7
 800bd1e:	bd80      	pop	{r7, pc}

0800bd20 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bd20:	b580      	push	{r7, lr}
 800bd22:	b08e      	sub	sp, #56	; 0x38
 800bd24:	af00      	add	r7, sp, #0
 800bd26:	60f8      	str	r0, [r7, #12]
 800bd28:	60b9      	str	r1, [r7, #8]
 800bd2a:	607a      	str	r2, [r7, #4]
 800bd2c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bd2e:	2300      	movs	r3, #0
 800bd30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bd32:	68fb      	ldr	r3, [r7, #12]
 800bd34:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bd36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d10a      	bne.n	800bd52 <xQueueGenericSend+0x32>
	__asm volatile
 800bd3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd40:	f383 8811 	msr	BASEPRI, r3
 800bd44:	f3bf 8f6f 	isb	sy
 800bd48:	f3bf 8f4f 	dsb	sy
 800bd4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bd4e:	bf00      	nop
 800bd50:	e7fe      	b.n	800bd50 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bd52:	68bb      	ldr	r3, [r7, #8]
 800bd54:	2b00      	cmp	r3, #0
 800bd56:	d103      	bne.n	800bd60 <xQueueGenericSend+0x40>
 800bd58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bd5c:	2b00      	cmp	r3, #0
 800bd5e:	d101      	bne.n	800bd64 <xQueueGenericSend+0x44>
 800bd60:	2301      	movs	r3, #1
 800bd62:	e000      	b.n	800bd66 <xQueueGenericSend+0x46>
 800bd64:	2300      	movs	r3, #0
 800bd66:	2b00      	cmp	r3, #0
 800bd68:	d10a      	bne.n	800bd80 <xQueueGenericSend+0x60>
	__asm volatile
 800bd6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd6e:	f383 8811 	msr	BASEPRI, r3
 800bd72:	f3bf 8f6f 	isb	sy
 800bd76:	f3bf 8f4f 	dsb	sy
 800bd7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bd7c:	bf00      	nop
 800bd7e:	e7fe      	b.n	800bd7e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bd80:	683b      	ldr	r3, [r7, #0]
 800bd82:	2b02      	cmp	r3, #2
 800bd84:	d103      	bne.n	800bd8e <xQueueGenericSend+0x6e>
 800bd86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bd88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd8a:	2b01      	cmp	r3, #1
 800bd8c:	d101      	bne.n	800bd92 <xQueueGenericSend+0x72>
 800bd8e:	2301      	movs	r3, #1
 800bd90:	e000      	b.n	800bd94 <xQueueGenericSend+0x74>
 800bd92:	2300      	movs	r3, #0
 800bd94:	2b00      	cmp	r3, #0
 800bd96:	d10a      	bne.n	800bdae <xQueueGenericSend+0x8e>
	__asm volatile
 800bd98:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bd9c:	f383 8811 	msr	BASEPRI, r3
 800bda0:	f3bf 8f6f 	isb	sy
 800bda4:	f3bf 8f4f 	dsb	sy
 800bda8:	623b      	str	r3, [r7, #32]
}
 800bdaa:	bf00      	nop
 800bdac:	e7fe      	b.n	800bdac <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bdae:	f001 fcf3 	bl	800d798 <xTaskGetSchedulerState>
 800bdb2:	4603      	mov	r3, r0
 800bdb4:	2b00      	cmp	r3, #0
 800bdb6:	d102      	bne.n	800bdbe <xQueueGenericSend+0x9e>
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	d101      	bne.n	800bdc2 <xQueueGenericSend+0xa2>
 800bdbe:	2301      	movs	r3, #1
 800bdc0:	e000      	b.n	800bdc4 <xQueueGenericSend+0xa4>
 800bdc2:	2300      	movs	r3, #0
 800bdc4:	2b00      	cmp	r3, #0
 800bdc6:	d10a      	bne.n	800bdde <xQueueGenericSend+0xbe>
	__asm volatile
 800bdc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdcc:	f383 8811 	msr	BASEPRI, r3
 800bdd0:	f3bf 8f6f 	isb	sy
 800bdd4:	f3bf 8f4f 	dsb	sy
 800bdd8:	61fb      	str	r3, [r7, #28]
}
 800bdda:	bf00      	nop
 800bddc:	e7fe      	b.n	800bddc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bdde:	f002 fb31 	bl	800e444 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bde2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bde6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bde8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bdea:	429a      	cmp	r2, r3
 800bdec:	d302      	bcc.n	800bdf4 <xQueueGenericSend+0xd4>
 800bdee:	683b      	ldr	r3, [r7, #0]
 800bdf0:	2b02      	cmp	r3, #2
 800bdf2:	d129      	bne.n	800be48 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bdf4:	683a      	ldr	r2, [r7, #0]
 800bdf6:	68b9      	ldr	r1, [r7, #8]
 800bdf8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bdfa:	f000 fc5e 	bl	800c6ba <prvCopyDataToQueue>
 800bdfe:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800be00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800be04:	2b00      	cmp	r3, #0
 800be06:	d010      	beq.n	800be2a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800be08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be0a:	3324      	adds	r3, #36	; 0x24
 800be0c:	4618      	mov	r0, r3
 800be0e:	f001 faf1 	bl	800d3f4 <xTaskRemoveFromEventList>
 800be12:	4603      	mov	r3, r0
 800be14:	2b00      	cmp	r3, #0
 800be16:	d013      	beq.n	800be40 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800be18:	4b3f      	ldr	r3, [pc, #252]	; (800bf18 <xQueueGenericSend+0x1f8>)
 800be1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be1e:	601a      	str	r2, [r3, #0]
 800be20:	f3bf 8f4f 	dsb	sy
 800be24:	f3bf 8f6f 	isb	sy
 800be28:	e00a      	b.n	800be40 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800be2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be2c:	2b00      	cmp	r3, #0
 800be2e:	d007      	beq.n	800be40 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800be30:	4b39      	ldr	r3, [pc, #228]	; (800bf18 <xQueueGenericSend+0x1f8>)
 800be32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800be36:	601a      	str	r2, [r3, #0]
 800be38:	f3bf 8f4f 	dsb	sy
 800be3c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800be40:	f002 fb30 	bl	800e4a4 <vPortExitCritical>
				return pdPASS;
 800be44:	2301      	movs	r3, #1
 800be46:	e063      	b.n	800bf10 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	d103      	bne.n	800be56 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800be4e:	f002 fb29 	bl	800e4a4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800be52:	2300      	movs	r3, #0
 800be54:	e05c      	b.n	800bf10 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800be56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800be58:	2b00      	cmp	r3, #0
 800be5a:	d106      	bne.n	800be6a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800be5c:	f107 0314 	add.w	r3, r7, #20
 800be60:	4618      	mov	r0, r3
 800be62:	f001 fb2b 	bl	800d4bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800be66:	2301      	movs	r3, #1
 800be68:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800be6a:	f002 fb1b 	bl	800e4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800be6e:	f001 f897 	bl	800cfa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800be72:	f002 fae7 	bl	800e444 <vPortEnterCritical>
 800be76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be78:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800be7c:	b25b      	sxtb	r3, r3
 800be7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be82:	d103      	bne.n	800be8c <xQueueGenericSend+0x16c>
 800be84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be86:	2200      	movs	r2, #0
 800be88:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800be8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be8e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800be92:	b25b      	sxtb	r3, r3
 800be94:	f1b3 3fff 	cmp.w	r3, #4294967295
 800be98:	d103      	bne.n	800bea2 <xQueueGenericSend+0x182>
 800be9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800be9c:	2200      	movs	r2, #0
 800be9e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bea2:	f002 faff 	bl	800e4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800bea6:	1d3a      	adds	r2, r7, #4
 800bea8:	f107 0314 	add.w	r3, r7, #20
 800beac:	4611      	mov	r1, r2
 800beae:	4618      	mov	r0, r3
 800beb0:	f001 fb1a 	bl	800d4e8 <xTaskCheckForTimeOut>
 800beb4:	4603      	mov	r3, r0
 800beb6:	2b00      	cmp	r3, #0
 800beb8:	d124      	bne.n	800bf04 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800beba:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bebc:	f000 fcf5 	bl	800c8aa <prvIsQueueFull>
 800bec0:	4603      	mov	r3, r0
 800bec2:	2b00      	cmp	r3, #0
 800bec4:	d018      	beq.n	800bef8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800bec6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bec8:	3310      	adds	r3, #16
 800beca:	687a      	ldr	r2, [r7, #4]
 800becc:	4611      	mov	r1, r2
 800bece:	4618      	mov	r0, r3
 800bed0:	f001 fa40 	bl	800d354 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800bed4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bed6:	f000 fc80 	bl	800c7da <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800beda:	f001 f86f 	bl	800cfbc <xTaskResumeAll>
 800bede:	4603      	mov	r3, r0
 800bee0:	2b00      	cmp	r3, #0
 800bee2:	f47f af7c 	bne.w	800bdde <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800bee6:	4b0c      	ldr	r3, [pc, #48]	; (800bf18 <xQueueGenericSend+0x1f8>)
 800bee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800beec:	601a      	str	r2, [r3, #0]
 800beee:	f3bf 8f4f 	dsb	sy
 800bef2:	f3bf 8f6f 	isb	sy
 800bef6:	e772      	b.n	800bdde <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800bef8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800befa:	f000 fc6e 	bl	800c7da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800befe:	f001 f85d 	bl	800cfbc <xTaskResumeAll>
 800bf02:	e76c      	b.n	800bdde <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800bf04:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf06:	f000 fc68 	bl	800c7da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800bf0a:	f001 f857 	bl	800cfbc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800bf0e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800bf10:	4618      	mov	r0, r3
 800bf12:	3738      	adds	r7, #56	; 0x38
 800bf14:	46bd      	mov	sp, r7
 800bf16:	bd80      	pop	{r7, pc}
 800bf18:	e000ed04 	.word	0xe000ed04

0800bf1c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800bf1c:	b580      	push	{r7, lr}
 800bf1e:	b090      	sub	sp, #64	; 0x40
 800bf20:	af00      	add	r7, sp, #0
 800bf22:	60f8      	str	r0, [r7, #12]
 800bf24:	60b9      	str	r1, [r7, #8]
 800bf26:	607a      	str	r2, [r7, #4]
 800bf28:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800bf2a:	68fb      	ldr	r3, [r7, #12]
 800bf2c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800bf2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d10a      	bne.n	800bf4a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800bf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf38:	f383 8811 	msr	BASEPRI, r3
 800bf3c:	f3bf 8f6f 	isb	sy
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800bf46:	bf00      	nop
 800bf48:	e7fe      	b.n	800bf48 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bf4a:	68bb      	ldr	r3, [r7, #8]
 800bf4c:	2b00      	cmp	r3, #0
 800bf4e:	d103      	bne.n	800bf58 <xQueueGenericSendFromISR+0x3c>
 800bf50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <xQueueGenericSendFromISR+0x40>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e000      	b.n	800bf5e <xQueueGenericSendFromISR+0x42>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d10a      	bne.n	800bf78 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800bf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	627b      	str	r3, [r7, #36]	; 0x24
}
 800bf74:	bf00      	nop
 800bf76:	e7fe      	b.n	800bf76 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf78:	683b      	ldr	r3, [r7, #0]
 800bf7a:	2b02      	cmp	r3, #2
 800bf7c:	d103      	bne.n	800bf86 <xQueueGenericSendFromISR+0x6a>
 800bf7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bf80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf82:	2b01      	cmp	r3, #1
 800bf84:	d101      	bne.n	800bf8a <xQueueGenericSendFromISR+0x6e>
 800bf86:	2301      	movs	r3, #1
 800bf88:	e000      	b.n	800bf8c <xQueueGenericSendFromISR+0x70>
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	2b00      	cmp	r3, #0
 800bf8e:	d10a      	bne.n	800bfa6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800bf90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf94:	f383 8811 	msr	BASEPRI, r3
 800bf98:	f3bf 8f6f 	isb	sy
 800bf9c:	f3bf 8f4f 	dsb	sy
 800bfa0:	623b      	str	r3, [r7, #32]
}
 800bfa2:	bf00      	nop
 800bfa4:	e7fe      	b.n	800bfa4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800bfa6:	f002 fb2f 	bl	800e608 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800bfaa:	f3ef 8211 	mrs	r2, BASEPRI
 800bfae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bfb2:	f383 8811 	msr	BASEPRI, r3
 800bfb6:	f3bf 8f6f 	isb	sy
 800bfba:	f3bf 8f4f 	dsb	sy
 800bfbe:	61fa      	str	r2, [r7, #28]
 800bfc0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800bfc2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800bfc4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bfc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfc8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bfca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfcc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bfce:	429a      	cmp	r2, r3
 800bfd0:	d302      	bcc.n	800bfd8 <xQueueGenericSendFromISR+0xbc>
 800bfd2:	683b      	ldr	r3, [r7, #0]
 800bfd4:	2b02      	cmp	r3, #2
 800bfd6:	d12f      	bne.n	800c038 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800bfd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfda:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800bfde:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800bfe2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bfe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800bfe6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bfe8:	683a      	ldr	r2, [r7, #0]
 800bfea:	68b9      	ldr	r1, [r7, #8]
 800bfec:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800bfee:	f000 fb64 	bl	800c6ba <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800bff2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800bff6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800bffa:	d112      	bne.n	800c022 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bffc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800bffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c000:	2b00      	cmp	r3, #0
 800c002:	d016      	beq.n	800c032 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c004:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c006:	3324      	adds	r3, #36	; 0x24
 800c008:	4618      	mov	r0, r3
 800c00a:	f001 f9f3 	bl	800d3f4 <xTaskRemoveFromEventList>
 800c00e:	4603      	mov	r3, r0
 800c010:	2b00      	cmp	r3, #0
 800c012:	d00e      	beq.n	800c032 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c014:	687b      	ldr	r3, [r7, #4]
 800c016:	2b00      	cmp	r3, #0
 800c018:	d00b      	beq.n	800c032 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c01a:	687b      	ldr	r3, [r7, #4]
 800c01c:	2201      	movs	r2, #1
 800c01e:	601a      	str	r2, [r3, #0]
 800c020:	e007      	b.n	800c032 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c022:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800c026:	3301      	adds	r3, #1
 800c028:	b2db      	uxtb	r3, r3
 800c02a:	b25a      	sxtb	r2, r3
 800c02c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c02e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c032:	2301      	movs	r3, #1
 800c034:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800c036:	e001      	b.n	800c03c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c038:	2300      	movs	r3, #0
 800c03a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800c03c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c03e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c040:	697b      	ldr	r3, [r7, #20]
 800c042:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800c046:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c048:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800c04a:	4618      	mov	r0, r3
 800c04c:	3740      	adds	r7, #64	; 0x40
 800c04e:	46bd      	mov	sp, r7
 800c050:	bd80      	pop	{r7, pc}

0800c052 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c052:	b580      	push	{r7, lr}
 800c054:	b08e      	sub	sp, #56	; 0x38
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
 800c05a:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800c060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c062:	2b00      	cmp	r3, #0
 800c064:	d10a      	bne.n	800c07c <xQueueGiveFromISR+0x2a>
	__asm volatile
 800c066:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c06a:	f383 8811 	msr	BASEPRI, r3
 800c06e:	f3bf 8f6f 	isb	sy
 800c072:	f3bf 8f4f 	dsb	sy
 800c076:	623b      	str	r3, [r7, #32]
}
 800c078:	bf00      	nop
 800c07a:	e7fe      	b.n	800c07a <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c07c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c07e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c080:	2b00      	cmp	r3, #0
 800c082:	d00a      	beq.n	800c09a <xQueueGiveFromISR+0x48>
	__asm volatile
 800c084:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c088:	f383 8811 	msr	BASEPRI, r3
 800c08c:	f3bf 8f6f 	isb	sy
 800c090:	f3bf 8f4f 	dsb	sy
 800c094:	61fb      	str	r3, [r7, #28]
}
 800c096:	bf00      	nop
 800c098:	e7fe      	b.n	800c098 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800c09a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c09c:	681b      	ldr	r3, [r3, #0]
 800c09e:	2b00      	cmp	r3, #0
 800c0a0:	d103      	bne.n	800c0aa <xQueueGiveFromISR+0x58>
 800c0a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0a4:	689b      	ldr	r3, [r3, #8]
 800c0a6:	2b00      	cmp	r3, #0
 800c0a8:	d101      	bne.n	800c0ae <xQueueGiveFromISR+0x5c>
 800c0aa:	2301      	movs	r3, #1
 800c0ac:	e000      	b.n	800c0b0 <xQueueGiveFromISR+0x5e>
 800c0ae:	2300      	movs	r3, #0
 800c0b0:	2b00      	cmp	r3, #0
 800c0b2:	d10a      	bne.n	800c0ca <xQueueGiveFromISR+0x78>
	__asm volatile
 800c0b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0b8:	f383 8811 	msr	BASEPRI, r3
 800c0bc:	f3bf 8f6f 	isb	sy
 800c0c0:	f3bf 8f4f 	dsb	sy
 800c0c4:	61bb      	str	r3, [r7, #24]
}
 800c0c6:	bf00      	nop
 800c0c8:	e7fe      	b.n	800c0c8 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c0ca:	f002 fa9d 	bl	800e608 <vPortValidateInterruptPriority>
	__asm volatile
 800c0ce:	f3ef 8211 	mrs	r2, BASEPRI
 800c0d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d6:	f383 8811 	msr	BASEPRI, r3
 800c0da:	f3bf 8f6f 	isb	sy
 800c0de:	f3bf 8f4f 	dsb	sy
 800c0e2:	617a      	str	r2, [r7, #20]
 800c0e4:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800c0e6:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c0e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c0ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c0ee:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800c0f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c0f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c0f6:	429a      	cmp	r2, r3
 800c0f8:	d22b      	bcs.n	800c152 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c0fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0fc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c100:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c106:	1c5a      	adds	r2, r3, #1
 800c108:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c10a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c10c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c110:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c114:	d112      	bne.n	800c13c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c11a:	2b00      	cmp	r3, #0
 800c11c:	d016      	beq.n	800c14c <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c11e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c120:	3324      	adds	r3, #36	; 0x24
 800c122:	4618      	mov	r0, r3
 800c124:	f001 f966 	bl	800d3f4 <xTaskRemoveFromEventList>
 800c128:	4603      	mov	r3, r0
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d00e      	beq.n	800c14c <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c12e:	683b      	ldr	r3, [r7, #0]
 800c130:	2b00      	cmp	r3, #0
 800c132:	d00b      	beq.n	800c14c <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c134:	683b      	ldr	r3, [r7, #0]
 800c136:	2201      	movs	r2, #1
 800c138:	601a      	str	r2, [r3, #0]
 800c13a:	e007      	b.n	800c14c <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c13c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c140:	3301      	adds	r3, #1
 800c142:	b2db      	uxtb	r3, r3
 800c144:	b25a      	sxtb	r2, r3
 800c146:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c148:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c14c:	2301      	movs	r3, #1
 800c14e:	637b      	str	r3, [r7, #52]	; 0x34
 800c150:	e001      	b.n	800c156 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c152:	2300      	movs	r3, #0
 800c154:	637b      	str	r3, [r7, #52]	; 0x34
 800c156:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c158:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800c15a:	68fb      	ldr	r3, [r7, #12]
 800c15c:	f383 8811 	msr	BASEPRI, r3
}
 800c160:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c162:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c164:	4618      	mov	r0, r3
 800c166:	3738      	adds	r7, #56	; 0x38
 800c168:	46bd      	mov	sp, r7
 800c16a:	bd80      	pop	{r7, pc}

0800c16c <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c16c:	b580      	push	{r7, lr}
 800c16e:	b08c      	sub	sp, #48	; 0x30
 800c170:	af00      	add	r7, sp, #0
 800c172:	60f8      	str	r0, [r7, #12]
 800c174:	60b9      	str	r1, [r7, #8]
 800c176:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c178:	2300      	movs	r3, #0
 800c17a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c17c:	68fb      	ldr	r3, [r7, #12]
 800c17e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c180:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c182:	2b00      	cmp	r3, #0
 800c184:	d10a      	bne.n	800c19c <xQueueReceive+0x30>
	__asm volatile
 800c186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c18a:	f383 8811 	msr	BASEPRI, r3
 800c18e:	f3bf 8f6f 	isb	sy
 800c192:	f3bf 8f4f 	dsb	sy
 800c196:	623b      	str	r3, [r7, #32]
}
 800c198:	bf00      	nop
 800c19a:	e7fe      	b.n	800c19a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c19c:	68bb      	ldr	r3, [r7, #8]
 800c19e:	2b00      	cmp	r3, #0
 800c1a0:	d103      	bne.n	800c1aa <xQueueReceive+0x3e>
 800c1a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c1a6:	2b00      	cmp	r3, #0
 800c1a8:	d101      	bne.n	800c1ae <xQueueReceive+0x42>
 800c1aa:	2301      	movs	r3, #1
 800c1ac:	e000      	b.n	800c1b0 <xQueueReceive+0x44>
 800c1ae:	2300      	movs	r3, #0
 800c1b0:	2b00      	cmp	r3, #0
 800c1b2:	d10a      	bne.n	800c1ca <xQueueReceive+0x5e>
	__asm volatile
 800c1b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1b8:	f383 8811 	msr	BASEPRI, r3
 800c1bc:	f3bf 8f6f 	isb	sy
 800c1c0:	f3bf 8f4f 	dsb	sy
 800c1c4:	61fb      	str	r3, [r7, #28]
}
 800c1c6:	bf00      	nop
 800c1c8:	e7fe      	b.n	800c1c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c1ca:	f001 fae5 	bl	800d798 <xTaskGetSchedulerState>
 800c1ce:	4603      	mov	r3, r0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d102      	bne.n	800c1da <xQueueReceive+0x6e>
 800c1d4:	687b      	ldr	r3, [r7, #4]
 800c1d6:	2b00      	cmp	r3, #0
 800c1d8:	d101      	bne.n	800c1de <xQueueReceive+0x72>
 800c1da:	2301      	movs	r3, #1
 800c1dc:	e000      	b.n	800c1e0 <xQueueReceive+0x74>
 800c1de:	2300      	movs	r3, #0
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d10a      	bne.n	800c1fa <xQueueReceive+0x8e>
	__asm volatile
 800c1e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1e8:	f383 8811 	msr	BASEPRI, r3
 800c1ec:	f3bf 8f6f 	isb	sy
 800c1f0:	f3bf 8f4f 	dsb	sy
 800c1f4:	61bb      	str	r3, [r7, #24]
}
 800c1f6:	bf00      	nop
 800c1f8:	e7fe      	b.n	800c1f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c1fa:	f002 f923 	bl	800e444 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c1fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c200:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c202:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c206:	2b00      	cmp	r3, #0
 800c208:	d01f      	beq.n	800c24a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c20a:	68b9      	ldr	r1, [r7, #8]
 800c20c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c20e:	f000 fabe 	bl	800c78e <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c214:	1e5a      	subs	r2, r3, #1
 800c216:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c218:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c21a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c21c:	691b      	ldr	r3, [r3, #16]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d00f      	beq.n	800c242 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c222:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c224:	3310      	adds	r3, #16
 800c226:	4618      	mov	r0, r3
 800c228:	f001 f8e4 	bl	800d3f4 <xTaskRemoveFromEventList>
 800c22c:	4603      	mov	r3, r0
 800c22e:	2b00      	cmp	r3, #0
 800c230:	d007      	beq.n	800c242 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c232:	4b3d      	ldr	r3, [pc, #244]	; (800c328 <xQueueReceive+0x1bc>)
 800c234:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c238:	601a      	str	r2, [r3, #0]
 800c23a:	f3bf 8f4f 	dsb	sy
 800c23e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c242:	f002 f92f 	bl	800e4a4 <vPortExitCritical>
				return pdPASS;
 800c246:	2301      	movs	r3, #1
 800c248:	e069      	b.n	800c31e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c24a:	687b      	ldr	r3, [r7, #4]
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d103      	bne.n	800c258 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c250:	f002 f928 	bl	800e4a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c254:	2300      	movs	r3, #0
 800c256:	e062      	b.n	800c31e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c258:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c25a:	2b00      	cmp	r3, #0
 800c25c:	d106      	bne.n	800c26c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c25e:	f107 0310 	add.w	r3, r7, #16
 800c262:	4618      	mov	r0, r3
 800c264:	f001 f92a 	bl	800d4bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c268:	2301      	movs	r3, #1
 800c26a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c26c:	f002 f91a 	bl	800e4a4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c270:	f000 fe96 	bl	800cfa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c274:	f002 f8e6 	bl	800e444 <vPortEnterCritical>
 800c278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c27a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c27e:	b25b      	sxtb	r3, r3
 800c280:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c284:	d103      	bne.n	800c28e <xQueueReceive+0x122>
 800c286:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c288:	2200      	movs	r2, #0
 800c28a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c28e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c290:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c294:	b25b      	sxtb	r3, r3
 800c296:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c29a:	d103      	bne.n	800c2a4 <xQueueReceive+0x138>
 800c29c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c29e:	2200      	movs	r2, #0
 800c2a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c2a4:	f002 f8fe 	bl	800e4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c2a8:	1d3a      	adds	r2, r7, #4
 800c2aa:	f107 0310 	add.w	r3, r7, #16
 800c2ae:	4611      	mov	r1, r2
 800c2b0:	4618      	mov	r0, r3
 800c2b2:	f001 f919 	bl	800d4e8 <xTaskCheckForTimeOut>
 800c2b6:	4603      	mov	r3, r0
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d123      	bne.n	800c304 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c2bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2be:	f000 fade 	bl	800c87e <prvIsQueueEmpty>
 800c2c2:	4603      	mov	r3, r0
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d017      	beq.n	800c2f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c2c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2ca:	3324      	adds	r3, #36	; 0x24
 800c2cc:	687a      	ldr	r2, [r7, #4]
 800c2ce:	4611      	mov	r1, r2
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	f001 f83f 	bl	800d354 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c2d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2d8:	f000 fa7f 	bl	800c7da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c2dc:	f000 fe6e 	bl	800cfbc <xTaskResumeAll>
 800c2e0:	4603      	mov	r3, r0
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d189      	bne.n	800c1fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800c2e6:	4b10      	ldr	r3, [pc, #64]	; (800c328 <xQueueReceive+0x1bc>)
 800c2e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2ec:	601a      	str	r2, [r3, #0]
 800c2ee:	f3bf 8f4f 	dsb	sy
 800c2f2:	f3bf 8f6f 	isb	sy
 800c2f6:	e780      	b.n	800c1fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c2f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c2fa:	f000 fa6e 	bl	800c7da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c2fe:	f000 fe5d 	bl	800cfbc <xTaskResumeAll>
 800c302:	e77a      	b.n	800c1fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c304:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c306:	f000 fa68 	bl	800c7da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c30a:	f000 fe57 	bl	800cfbc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c30e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c310:	f000 fab5 	bl	800c87e <prvIsQueueEmpty>
 800c314:	4603      	mov	r3, r0
 800c316:	2b00      	cmp	r3, #0
 800c318:	f43f af6f 	beq.w	800c1fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c31c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c31e:	4618      	mov	r0, r3
 800c320:	3730      	adds	r7, #48	; 0x30
 800c322:	46bd      	mov	sp, r7
 800c324:	bd80      	pop	{r7, pc}
 800c326:	bf00      	nop
 800c328:	e000ed04 	.word	0xe000ed04

0800c32c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800c32c:	b580      	push	{r7, lr}
 800c32e:	b08e      	sub	sp, #56	; 0x38
 800c330:	af00      	add	r7, sp, #0
 800c332:	6078      	str	r0, [r7, #4]
 800c334:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800c336:	2300      	movs	r3, #0
 800c338:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800c33e:	2300      	movs	r3, #0
 800c340:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c344:	2b00      	cmp	r3, #0
 800c346:	d10a      	bne.n	800c35e <xQueueSemaphoreTake+0x32>
	__asm volatile
 800c348:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c34c:	f383 8811 	msr	BASEPRI, r3
 800c350:	f3bf 8f6f 	isb	sy
 800c354:	f3bf 8f4f 	dsb	sy
 800c358:	623b      	str	r3, [r7, #32]
}
 800c35a:	bf00      	nop
 800c35c:	e7fe      	b.n	800c35c <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800c35e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c360:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00a      	beq.n	800c37c <xQueueSemaphoreTake+0x50>
	__asm volatile
 800c366:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c36a:	f383 8811 	msr	BASEPRI, r3
 800c36e:	f3bf 8f6f 	isb	sy
 800c372:	f3bf 8f4f 	dsb	sy
 800c376:	61fb      	str	r3, [r7, #28]
}
 800c378:	bf00      	nop
 800c37a:	e7fe      	b.n	800c37a <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c37c:	f001 fa0c 	bl	800d798 <xTaskGetSchedulerState>
 800c380:	4603      	mov	r3, r0
 800c382:	2b00      	cmp	r3, #0
 800c384:	d102      	bne.n	800c38c <xQueueSemaphoreTake+0x60>
 800c386:	683b      	ldr	r3, [r7, #0]
 800c388:	2b00      	cmp	r3, #0
 800c38a:	d101      	bne.n	800c390 <xQueueSemaphoreTake+0x64>
 800c38c:	2301      	movs	r3, #1
 800c38e:	e000      	b.n	800c392 <xQueueSemaphoreTake+0x66>
 800c390:	2300      	movs	r3, #0
 800c392:	2b00      	cmp	r3, #0
 800c394:	d10a      	bne.n	800c3ac <xQueueSemaphoreTake+0x80>
	__asm volatile
 800c396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c39a:	f383 8811 	msr	BASEPRI, r3
 800c39e:	f3bf 8f6f 	isb	sy
 800c3a2:	f3bf 8f4f 	dsb	sy
 800c3a6:	61bb      	str	r3, [r7, #24]
}
 800c3a8:	bf00      	nop
 800c3aa:	e7fe      	b.n	800c3aa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c3ac:	f002 f84a 	bl	800e444 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800c3b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3b4:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800c3b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d024      	beq.n	800c406 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800c3bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c3be:	1e5a      	subs	r2, r3, #1
 800c3c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c2:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3c6:	681b      	ldr	r3, [r3, #0]
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d104      	bne.n	800c3d6 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800c3cc:	f001 fb5a 	bl	800da84 <pvTaskIncrementMutexHeldCount>
 800c3d0:	4602      	mov	r2, r0
 800c3d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d4:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3d8:	691b      	ldr	r3, [r3, #16]
 800c3da:	2b00      	cmp	r3, #0
 800c3dc:	d00f      	beq.n	800c3fe <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c3de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c3e0:	3310      	adds	r3, #16
 800c3e2:	4618      	mov	r0, r3
 800c3e4:	f001 f806 	bl	800d3f4 <xTaskRemoveFromEventList>
 800c3e8:	4603      	mov	r3, r0
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d007      	beq.n	800c3fe <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c3ee:	4b54      	ldr	r3, [pc, #336]	; (800c540 <xQueueSemaphoreTake+0x214>)
 800c3f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c3f4:	601a      	str	r2, [r3, #0]
 800c3f6:	f3bf 8f4f 	dsb	sy
 800c3fa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c3fe:	f002 f851 	bl	800e4a4 <vPortExitCritical>
				return pdPASS;
 800c402:	2301      	movs	r3, #1
 800c404:	e097      	b.n	800c536 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c406:	683b      	ldr	r3, [r7, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d111      	bne.n	800c430 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800c40c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c40e:	2b00      	cmp	r3, #0
 800c410:	d00a      	beq.n	800c428 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 800c412:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c416:	f383 8811 	msr	BASEPRI, r3
 800c41a:	f3bf 8f6f 	isb	sy
 800c41e:	f3bf 8f4f 	dsb	sy
 800c422:	617b      	str	r3, [r7, #20]
}
 800c424:	bf00      	nop
 800c426:	e7fe      	b.n	800c426 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800c428:	f002 f83c 	bl	800e4a4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c42c:	2300      	movs	r3, #0
 800c42e:	e082      	b.n	800c536 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c430:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c432:	2b00      	cmp	r3, #0
 800c434:	d106      	bne.n	800c444 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c436:	f107 030c 	add.w	r3, r7, #12
 800c43a:	4618      	mov	r0, r3
 800c43c:	f001 f83e 	bl	800d4bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c440:	2301      	movs	r3, #1
 800c442:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c444:	f002 f82e 	bl	800e4a4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c448:	f000 fdaa 	bl	800cfa0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c44c:	f001 fffa 	bl	800e444 <vPortEnterCritical>
 800c450:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c452:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c456:	b25b      	sxtb	r3, r3
 800c458:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c45c:	d103      	bne.n	800c466 <xQueueSemaphoreTake+0x13a>
 800c45e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c460:	2200      	movs	r2, #0
 800c462:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c468:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c46c:	b25b      	sxtb	r3, r3
 800c46e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c472:	d103      	bne.n	800c47c <xQueueSemaphoreTake+0x150>
 800c474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c476:	2200      	movs	r2, #0
 800c478:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c47c:	f002 f812 	bl	800e4a4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c480:	463a      	mov	r2, r7
 800c482:	f107 030c 	add.w	r3, r7, #12
 800c486:	4611      	mov	r1, r2
 800c488:	4618      	mov	r0, r3
 800c48a:	f001 f82d 	bl	800d4e8 <xTaskCheckForTimeOut>
 800c48e:	4603      	mov	r3, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	d132      	bne.n	800c4fa <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c494:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c496:	f000 f9f2 	bl	800c87e <prvIsQueueEmpty>
 800c49a:	4603      	mov	r3, r0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	d026      	beq.n	800c4ee <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c4a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	d109      	bne.n	800c4bc <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800c4a8:	f001 ffcc 	bl	800e444 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c4ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4ae:	689b      	ldr	r3, [r3, #8]
 800c4b0:	4618      	mov	r0, r3
 800c4b2:	f001 f98f 	bl	800d7d4 <xTaskPriorityInherit>
 800c4b6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800c4b8:	f001 fff4 	bl	800e4a4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c4bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c4be:	3324      	adds	r3, #36	; 0x24
 800c4c0:	683a      	ldr	r2, [r7, #0]
 800c4c2:	4611      	mov	r1, r2
 800c4c4:	4618      	mov	r0, r3
 800c4c6:	f000 ff45 	bl	800d354 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c4ca:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4cc:	f000 f985 	bl	800c7da <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c4d0:	f000 fd74 	bl	800cfbc <xTaskResumeAll>
 800c4d4:	4603      	mov	r3, r0
 800c4d6:	2b00      	cmp	r3, #0
 800c4d8:	f47f af68 	bne.w	800c3ac <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800c4dc:	4b18      	ldr	r3, [pc, #96]	; (800c540 <xQueueSemaphoreTake+0x214>)
 800c4de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c4e2:	601a      	str	r2, [r3, #0]
 800c4e4:	f3bf 8f4f 	dsb	sy
 800c4e8:	f3bf 8f6f 	isb	sy
 800c4ec:	e75e      	b.n	800c3ac <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800c4ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4f0:	f000 f973 	bl	800c7da <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c4f4:	f000 fd62 	bl	800cfbc <xTaskResumeAll>
 800c4f8:	e758      	b.n	800c3ac <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800c4fa:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c4fc:	f000 f96d 	bl	800c7da <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c500:	f000 fd5c 	bl	800cfbc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c504:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c506:	f000 f9ba 	bl	800c87e <prvIsQueueEmpty>
 800c50a:	4603      	mov	r3, r0
 800c50c:	2b00      	cmp	r3, #0
 800c50e:	f43f af4d 	beq.w	800c3ac <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800c512:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c514:	2b00      	cmp	r3, #0
 800c516:	d00d      	beq.n	800c534 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800c518:	f001 ff94 	bl	800e444 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800c51c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800c51e:	f000 f8b4 	bl	800c68a <prvGetDisinheritPriorityAfterTimeout>
 800c522:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800c524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c526:	689b      	ldr	r3, [r3, #8]
 800c528:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800c52a:	4618      	mov	r0, r3
 800c52c:	f001 fa28 	bl	800d980 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800c530:	f001 ffb8 	bl	800e4a4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c534:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c536:	4618      	mov	r0, r3
 800c538:	3738      	adds	r7, #56	; 0x38
 800c53a:	46bd      	mov	sp, r7
 800c53c:	bd80      	pop	{r7, pc}
 800c53e:	bf00      	nop
 800c540:	e000ed04 	.word	0xe000ed04

0800c544 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800c544:	b580      	push	{r7, lr}
 800c546:	b08e      	sub	sp, #56	; 0x38
 800c548:	af00      	add	r7, sp, #0
 800c54a:	60f8      	str	r0, [r7, #12]
 800c54c:	60b9      	str	r1, [r7, #8]
 800c54e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c550:	68fb      	ldr	r3, [r7, #12]
 800c552:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c554:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c556:	2b00      	cmp	r3, #0
 800c558:	d10a      	bne.n	800c570 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800c55a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c55e:	f383 8811 	msr	BASEPRI, r3
 800c562:	f3bf 8f6f 	isb	sy
 800c566:	f3bf 8f4f 	dsb	sy
 800c56a:	623b      	str	r3, [r7, #32]
}
 800c56c:	bf00      	nop
 800c56e:	e7fe      	b.n	800c56e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c570:	68bb      	ldr	r3, [r7, #8]
 800c572:	2b00      	cmp	r3, #0
 800c574:	d103      	bne.n	800c57e <xQueueReceiveFromISR+0x3a>
 800c576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c57a:	2b00      	cmp	r3, #0
 800c57c:	d101      	bne.n	800c582 <xQueueReceiveFromISR+0x3e>
 800c57e:	2301      	movs	r3, #1
 800c580:	e000      	b.n	800c584 <xQueueReceiveFromISR+0x40>
 800c582:	2300      	movs	r3, #0
 800c584:	2b00      	cmp	r3, #0
 800c586:	d10a      	bne.n	800c59e <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800c588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c58c:	f383 8811 	msr	BASEPRI, r3
 800c590:	f3bf 8f6f 	isb	sy
 800c594:	f3bf 8f4f 	dsb	sy
 800c598:	61fb      	str	r3, [r7, #28]
}
 800c59a:	bf00      	nop
 800c59c:	e7fe      	b.n	800c59c <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c59e:	f002 f833 	bl	800e608 <vPortValidateInterruptPriority>
	__asm volatile
 800c5a2:	f3ef 8211 	mrs	r2, BASEPRI
 800c5a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c5aa:	f383 8811 	msr	BASEPRI, r3
 800c5ae:	f3bf 8f6f 	isb	sy
 800c5b2:	f3bf 8f4f 	dsb	sy
 800c5b6:	61ba      	str	r2, [r7, #24]
 800c5b8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800c5ba:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c5bc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5c2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c5c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d02f      	beq.n	800c62a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800c5ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5cc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c5d0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c5d4:	68b9      	ldr	r1, [r7, #8]
 800c5d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c5d8:	f000 f8d9 	bl	800c78e <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c5dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c5de:	1e5a      	subs	r2, r3, #1
 800c5e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800c5e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800c5e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c5ec:	d112      	bne.n	800c614 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c5ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f0:	691b      	ldr	r3, [r3, #16]
 800c5f2:	2b00      	cmp	r3, #0
 800c5f4:	d016      	beq.n	800c624 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c5f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c5f8:	3310      	adds	r3, #16
 800c5fa:	4618      	mov	r0, r3
 800c5fc:	f000 fefa 	bl	800d3f4 <xTaskRemoveFromEventList>
 800c600:	4603      	mov	r3, r0
 800c602:	2b00      	cmp	r3, #0
 800c604:	d00e      	beq.n	800c624 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800c606:	687b      	ldr	r3, [r7, #4]
 800c608:	2b00      	cmp	r3, #0
 800c60a:	d00b      	beq.n	800c624 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800c60c:	687b      	ldr	r3, [r7, #4]
 800c60e:	2201      	movs	r2, #1
 800c610:	601a      	str	r2, [r3, #0]
 800c612:	e007      	b.n	800c624 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800c614:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800c618:	3301      	adds	r3, #1
 800c61a:	b2db      	uxtb	r3, r3
 800c61c:	b25a      	sxtb	r2, r3
 800c61e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c620:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800c624:	2301      	movs	r3, #1
 800c626:	637b      	str	r3, [r7, #52]	; 0x34
 800c628:	e001      	b.n	800c62e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800c62a:	2300      	movs	r3, #0
 800c62c:	637b      	str	r3, [r7, #52]	; 0x34
 800c62e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c630:	613b      	str	r3, [r7, #16]
	__asm volatile
 800c632:	693b      	ldr	r3, [r7, #16]
 800c634:	f383 8811 	msr	BASEPRI, r3
}
 800c638:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c63a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c63c:	4618      	mov	r0, r3
 800c63e:	3738      	adds	r7, #56	; 0x38
 800c640:	46bd      	mov	sp, r7
 800c642:	bd80      	pop	{r7, pc}

0800c644 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800c644:	b580      	push	{r7, lr}
 800c646:	b084      	sub	sp, #16
 800c648:	af00      	add	r7, sp, #0
 800c64a:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 800c64c:	687b      	ldr	r3, [r7, #4]
 800c64e:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2b00      	cmp	r3, #0
 800c654:	d10a      	bne.n	800c66c <vQueueDelete+0x28>
	__asm volatile
 800c656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c65a:	f383 8811 	msr	BASEPRI, r3
 800c65e:	f3bf 8f6f 	isb	sy
 800c662:	f3bf 8f4f 	dsb	sy
 800c666:	60bb      	str	r3, [r7, #8]
}
 800c668:	bf00      	nop
 800c66a:	e7fe      	b.n	800c66a <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 800c66c:	68f8      	ldr	r0, [r7, #12]
 800c66e:	f000 f95f 	bl	800c930 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800c672:	68fb      	ldr	r3, [r7, #12]
 800c674:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d102      	bne.n	800c682 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 800c67c:	68f8      	ldr	r0, [r7, #12]
 800c67e:	f002 f8cf 	bl	800e820 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800c682:	bf00      	nop
 800c684:	3710      	adds	r7, #16
 800c686:	46bd      	mov	sp, r7
 800c688:	bd80      	pop	{r7, pc}

0800c68a <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800c68a:	b480      	push	{r7}
 800c68c:	b085      	sub	sp, #20
 800c68e:	af00      	add	r7, sp, #0
 800c690:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800c692:	687b      	ldr	r3, [r7, #4]
 800c694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c696:	2b00      	cmp	r3, #0
 800c698:	d006      	beq.n	800c6a8 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800c69a:	687b      	ldr	r3, [r7, #4]
 800c69c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800c69e:	681b      	ldr	r3, [r3, #0]
 800c6a0:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800c6a4:	60fb      	str	r3, [r7, #12]
 800c6a6:	e001      	b.n	800c6ac <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800c6a8:	2300      	movs	r3, #0
 800c6aa:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
	}
 800c6ae:	4618      	mov	r0, r3
 800c6b0:	3714      	adds	r7, #20
 800c6b2:	46bd      	mov	sp, r7
 800c6b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6b8:	4770      	bx	lr

0800c6ba <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c6ba:	b580      	push	{r7, lr}
 800c6bc:	b086      	sub	sp, #24
 800c6be:	af00      	add	r7, sp, #0
 800c6c0:	60f8      	str	r0, [r7, #12]
 800c6c2:	60b9      	str	r1, [r7, #8]
 800c6c4:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c6c6:	2300      	movs	r3, #0
 800c6c8:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c6ce:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c6d0:	68fb      	ldr	r3, [r7, #12]
 800c6d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c6d4:	2b00      	cmp	r3, #0
 800c6d6:	d10d      	bne.n	800c6f4 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c6d8:	68fb      	ldr	r3, [r7, #12]
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	2b00      	cmp	r3, #0
 800c6de:	d14d      	bne.n	800c77c <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c6e0:	68fb      	ldr	r3, [r7, #12]
 800c6e2:	689b      	ldr	r3, [r3, #8]
 800c6e4:	4618      	mov	r0, r3
 800c6e6:	f001 f8dd 	bl	800d8a4 <xTaskPriorityDisinherit>
 800c6ea:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	2200      	movs	r2, #0
 800c6f0:	609a      	str	r2, [r3, #8]
 800c6f2:	e043      	b.n	800c77c <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c6f4:	687b      	ldr	r3, [r7, #4]
 800c6f6:	2b00      	cmp	r3, #0
 800c6f8:	d119      	bne.n	800c72e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c6fa:	68fb      	ldr	r3, [r7, #12]
 800c6fc:	6858      	ldr	r0, [r3, #4]
 800c6fe:	68fb      	ldr	r3, [r7, #12]
 800c700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c702:	461a      	mov	r2, r3
 800c704:	68b9      	ldr	r1, [r7, #8]
 800c706:	f002 f9d5 	bl	800eab4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c70a:	68fb      	ldr	r3, [r7, #12]
 800c70c:	685a      	ldr	r2, [r3, #4]
 800c70e:	68fb      	ldr	r3, [r7, #12]
 800c710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c712:	441a      	add	r2, r3
 800c714:	68fb      	ldr	r3, [r7, #12]
 800c716:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c718:	68fb      	ldr	r3, [r7, #12]
 800c71a:	685a      	ldr	r2, [r3, #4]
 800c71c:	68fb      	ldr	r3, [r7, #12]
 800c71e:	689b      	ldr	r3, [r3, #8]
 800c720:	429a      	cmp	r2, r3
 800c722:	d32b      	bcc.n	800c77c <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c724:	68fb      	ldr	r3, [r7, #12]
 800c726:	681a      	ldr	r2, [r3, #0]
 800c728:	68fb      	ldr	r3, [r7, #12]
 800c72a:	605a      	str	r2, [r3, #4]
 800c72c:	e026      	b.n	800c77c <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c72e:	68fb      	ldr	r3, [r7, #12]
 800c730:	68d8      	ldr	r0, [r3, #12]
 800c732:	68fb      	ldr	r3, [r7, #12]
 800c734:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c736:	461a      	mov	r2, r3
 800c738:	68b9      	ldr	r1, [r7, #8]
 800c73a:	f002 f9bb 	bl	800eab4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c73e:	68fb      	ldr	r3, [r7, #12]
 800c740:	68da      	ldr	r2, [r3, #12]
 800c742:	68fb      	ldr	r3, [r7, #12]
 800c744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c746:	425b      	negs	r3, r3
 800c748:	441a      	add	r2, r3
 800c74a:	68fb      	ldr	r3, [r7, #12]
 800c74c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c74e:	68fb      	ldr	r3, [r7, #12]
 800c750:	68da      	ldr	r2, [r3, #12]
 800c752:	68fb      	ldr	r3, [r7, #12]
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	429a      	cmp	r2, r3
 800c758:	d207      	bcs.n	800c76a <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c75a:	68fb      	ldr	r3, [r7, #12]
 800c75c:	689a      	ldr	r2, [r3, #8]
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c762:	425b      	negs	r3, r3
 800c764:	441a      	add	r2, r3
 800c766:	68fb      	ldr	r3, [r7, #12]
 800c768:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c76a:	687b      	ldr	r3, [r7, #4]
 800c76c:	2b02      	cmp	r3, #2
 800c76e:	d105      	bne.n	800c77c <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c770:	693b      	ldr	r3, [r7, #16]
 800c772:	2b00      	cmp	r3, #0
 800c774:	d002      	beq.n	800c77c <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c776:	693b      	ldr	r3, [r7, #16]
 800c778:	3b01      	subs	r3, #1
 800c77a:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c77c:	693b      	ldr	r3, [r7, #16]
 800c77e:	1c5a      	adds	r2, r3, #1
 800c780:	68fb      	ldr	r3, [r7, #12]
 800c782:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c784:	697b      	ldr	r3, [r7, #20]
}
 800c786:	4618      	mov	r0, r3
 800c788:	3718      	adds	r7, #24
 800c78a:	46bd      	mov	sp, r7
 800c78c:	bd80      	pop	{r7, pc}

0800c78e <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c78e:	b580      	push	{r7, lr}
 800c790:	b082      	sub	sp, #8
 800c792:	af00      	add	r7, sp, #0
 800c794:	6078      	str	r0, [r7, #4]
 800c796:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c798:	687b      	ldr	r3, [r7, #4]
 800c79a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c79c:	2b00      	cmp	r3, #0
 800c79e:	d018      	beq.n	800c7d2 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c7a0:	687b      	ldr	r3, [r7, #4]
 800c7a2:	68da      	ldr	r2, [r3, #12]
 800c7a4:	687b      	ldr	r3, [r7, #4]
 800c7a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7a8:	441a      	add	r2, r3
 800c7aa:	687b      	ldr	r3, [r7, #4]
 800c7ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c7ae:	687b      	ldr	r3, [r7, #4]
 800c7b0:	68da      	ldr	r2, [r3, #12]
 800c7b2:	687b      	ldr	r3, [r7, #4]
 800c7b4:	689b      	ldr	r3, [r3, #8]
 800c7b6:	429a      	cmp	r2, r3
 800c7b8:	d303      	bcc.n	800c7c2 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681a      	ldr	r2, [r3, #0]
 800c7be:	687b      	ldr	r3, [r7, #4]
 800c7c0:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c7c2:	687b      	ldr	r3, [r7, #4]
 800c7c4:	68d9      	ldr	r1, [r3, #12]
 800c7c6:	687b      	ldr	r3, [r7, #4]
 800c7c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c7ca:	461a      	mov	r2, r3
 800c7cc:	6838      	ldr	r0, [r7, #0]
 800c7ce:	f002 f971 	bl	800eab4 <memcpy>
	}
}
 800c7d2:	bf00      	nop
 800c7d4:	3708      	adds	r7, #8
 800c7d6:	46bd      	mov	sp, r7
 800c7d8:	bd80      	pop	{r7, pc}

0800c7da <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c7da:	b580      	push	{r7, lr}
 800c7dc:	b084      	sub	sp, #16
 800c7de:	af00      	add	r7, sp, #0
 800c7e0:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c7e2:	f001 fe2f 	bl	800e444 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c7ec:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c7ee:	e011      	b.n	800c814 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c7f4:	2b00      	cmp	r3, #0
 800c7f6:	d012      	beq.n	800c81e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	3324      	adds	r3, #36	; 0x24
 800c7fc:	4618      	mov	r0, r3
 800c7fe:	f000 fdf9 	bl	800d3f4 <xTaskRemoveFromEventList>
 800c802:	4603      	mov	r3, r0
 800c804:	2b00      	cmp	r3, #0
 800c806:	d001      	beq.n	800c80c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c808:	f000 fed0 	bl	800d5ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c80c:	7bfb      	ldrb	r3, [r7, #15]
 800c80e:	3b01      	subs	r3, #1
 800c810:	b2db      	uxtb	r3, r3
 800c812:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c814:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c818:	2b00      	cmp	r3, #0
 800c81a:	dce9      	bgt.n	800c7f0 <prvUnlockQueue+0x16>
 800c81c:	e000      	b.n	800c820 <prvUnlockQueue+0x46>
					break;
 800c81e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	22ff      	movs	r2, #255	; 0xff
 800c824:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c828:	f001 fe3c 	bl	800e4a4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c82c:	f001 fe0a 	bl	800e444 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c830:	687b      	ldr	r3, [r7, #4]
 800c832:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c836:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c838:	e011      	b.n	800c85e <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c83a:	687b      	ldr	r3, [r7, #4]
 800c83c:	691b      	ldr	r3, [r3, #16]
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d012      	beq.n	800c868 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c842:	687b      	ldr	r3, [r7, #4]
 800c844:	3310      	adds	r3, #16
 800c846:	4618      	mov	r0, r3
 800c848:	f000 fdd4 	bl	800d3f4 <xTaskRemoveFromEventList>
 800c84c:	4603      	mov	r3, r0
 800c84e:	2b00      	cmp	r3, #0
 800c850:	d001      	beq.n	800c856 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c852:	f000 feab 	bl	800d5ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c856:	7bbb      	ldrb	r3, [r7, #14]
 800c858:	3b01      	subs	r3, #1
 800c85a:	b2db      	uxtb	r3, r3
 800c85c:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c85e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c862:	2b00      	cmp	r3, #0
 800c864:	dce9      	bgt.n	800c83a <prvUnlockQueue+0x60>
 800c866:	e000      	b.n	800c86a <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c868:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c86a:	687b      	ldr	r3, [r7, #4]
 800c86c:	22ff      	movs	r2, #255	; 0xff
 800c86e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c872:	f001 fe17 	bl	800e4a4 <vPortExitCritical>
}
 800c876:	bf00      	nop
 800c878:	3710      	adds	r7, #16
 800c87a:	46bd      	mov	sp, r7
 800c87c:	bd80      	pop	{r7, pc}

0800c87e <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c87e:	b580      	push	{r7, lr}
 800c880:	b084      	sub	sp, #16
 800c882:	af00      	add	r7, sp, #0
 800c884:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c886:	f001 fddd 	bl	800e444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d102      	bne.n	800c898 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c892:	2301      	movs	r3, #1
 800c894:	60fb      	str	r3, [r7, #12]
 800c896:	e001      	b.n	800c89c <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c898:	2300      	movs	r3, #0
 800c89a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c89c:	f001 fe02 	bl	800e4a4 <vPortExitCritical>

	return xReturn;
 800c8a0:	68fb      	ldr	r3, [r7, #12]
}
 800c8a2:	4618      	mov	r0, r3
 800c8a4:	3710      	adds	r7, #16
 800c8a6:	46bd      	mov	sp, r7
 800c8a8:	bd80      	pop	{r7, pc}

0800c8aa <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c8aa:	b580      	push	{r7, lr}
 800c8ac:	b084      	sub	sp, #16
 800c8ae:	af00      	add	r7, sp, #0
 800c8b0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c8b2:	f001 fdc7 	bl	800e444 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c8b6:	687b      	ldr	r3, [r7, #4]
 800c8b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c8ba:	687b      	ldr	r3, [r7, #4]
 800c8bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	d102      	bne.n	800c8c8 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c8c2:	2301      	movs	r3, #1
 800c8c4:	60fb      	str	r3, [r7, #12]
 800c8c6:	e001      	b.n	800c8cc <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c8c8:	2300      	movs	r3, #0
 800c8ca:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c8cc:	f001 fdea 	bl	800e4a4 <vPortExitCritical>

	return xReturn;
 800c8d0:	68fb      	ldr	r3, [r7, #12]
}
 800c8d2:	4618      	mov	r0, r3
 800c8d4:	3710      	adds	r7, #16
 800c8d6:	46bd      	mov	sp, r7
 800c8d8:	bd80      	pop	{r7, pc}
	...

0800c8dc <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c8dc:	b480      	push	{r7}
 800c8de:	b085      	sub	sp, #20
 800c8e0:	af00      	add	r7, sp, #0
 800c8e2:	6078      	str	r0, [r7, #4]
 800c8e4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c8e6:	2300      	movs	r3, #0
 800c8e8:	60fb      	str	r3, [r7, #12]
 800c8ea:	e014      	b.n	800c916 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c8ec:	4a0f      	ldr	r2, [pc, #60]	; (800c92c <vQueueAddToRegistry+0x50>)
 800c8ee:	68fb      	ldr	r3, [r7, #12]
 800c8f0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c8f4:	2b00      	cmp	r3, #0
 800c8f6:	d10b      	bne.n	800c910 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c8f8:	490c      	ldr	r1, [pc, #48]	; (800c92c <vQueueAddToRegistry+0x50>)
 800c8fa:	68fb      	ldr	r3, [r7, #12]
 800c8fc:	683a      	ldr	r2, [r7, #0]
 800c8fe:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c902:	4a0a      	ldr	r2, [pc, #40]	; (800c92c <vQueueAddToRegistry+0x50>)
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	00db      	lsls	r3, r3, #3
 800c908:	4413      	add	r3, r2
 800c90a:	687a      	ldr	r2, [r7, #4]
 800c90c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c90e:	e006      	b.n	800c91e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	3301      	adds	r3, #1
 800c914:	60fb      	str	r3, [r7, #12]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	2b07      	cmp	r3, #7
 800c91a:	d9e7      	bls.n	800c8ec <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c91c:	bf00      	nop
 800c91e:	bf00      	nop
 800c920:	3714      	adds	r7, #20
 800c922:	46bd      	mov	sp, r7
 800c924:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c928:	4770      	bx	lr
 800c92a:	bf00      	nop
 800c92c:	200025b0 	.word	0x200025b0

0800c930 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800c930:	b480      	push	{r7}
 800c932:	b085      	sub	sp, #20
 800c934:	af00      	add	r7, sp, #0
 800c936:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c938:	2300      	movs	r3, #0
 800c93a:	60fb      	str	r3, [r7, #12]
 800c93c:	e016      	b.n	800c96c <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800c93e:	4a10      	ldr	r2, [pc, #64]	; (800c980 <vQueueUnregisterQueue+0x50>)
 800c940:	68fb      	ldr	r3, [r7, #12]
 800c942:	00db      	lsls	r3, r3, #3
 800c944:	4413      	add	r3, r2
 800c946:	685b      	ldr	r3, [r3, #4]
 800c948:	687a      	ldr	r2, [r7, #4]
 800c94a:	429a      	cmp	r2, r3
 800c94c:	d10b      	bne.n	800c966 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800c94e:	4a0c      	ldr	r2, [pc, #48]	; (800c980 <vQueueUnregisterQueue+0x50>)
 800c950:	68fb      	ldr	r3, [r7, #12]
 800c952:	2100      	movs	r1, #0
 800c954:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800c958:	4a09      	ldr	r2, [pc, #36]	; (800c980 <vQueueUnregisterQueue+0x50>)
 800c95a:	68fb      	ldr	r3, [r7, #12]
 800c95c:	00db      	lsls	r3, r3, #3
 800c95e:	4413      	add	r3, r2
 800c960:	2200      	movs	r2, #0
 800c962:	605a      	str	r2, [r3, #4]
				break;
 800c964:	e006      	b.n	800c974 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c966:	68fb      	ldr	r3, [r7, #12]
 800c968:	3301      	adds	r3, #1
 800c96a:	60fb      	str	r3, [r7, #12]
 800c96c:	68fb      	ldr	r3, [r7, #12]
 800c96e:	2b07      	cmp	r3, #7
 800c970:	d9e5      	bls.n	800c93e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800c972:	bf00      	nop
 800c974:	bf00      	nop
 800c976:	3714      	adds	r7, #20
 800c978:	46bd      	mov	sp, r7
 800c97a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c97e:	4770      	bx	lr
 800c980:	200025b0 	.word	0x200025b0

0800c984 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c984:	b580      	push	{r7, lr}
 800c986:	b086      	sub	sp, #24
 800c988:	af00      	add	r7, sp, #0
 800c98a:	60f8      	str	r0, [r7, #12]
 800c98c:	60b9      	str	r1, [r7, #8]
 800c98e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c990:	68fb      	ldr	r3, [r7, #12]
 800c992:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c994:	f001 fd56 	bl	800e444 <vPortEnterCritical>
 800c998:	697b      	ldr	r3, [r7, #20]
 800c99a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c99e:	b25b      	sxtb	r3, r3
 800c9a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9a4:	d103      	bne.n	800c9ae <vQueueWaitForMessageRestricted+0x2a>
 800c9a6:	697b      	ldr	r3, [r7, #20]
 800c9a8:	2200      	movs	r2, #0
 800c9aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c9ae:	697b      	ldr	r3, [r7, #20]
 800c9b0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c9b4:	b25b      	sxtb	r3, r3
 800c9b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800c9ba:	d103      	bne.n	800c9c4 <vQueueWaitForMessageRestricted+0x40>
 800c9bc:	697b      	ldr	r3, [r7, #20]
 800c9be:	2200      	movs	r2, #0
 800c9c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c9c4:	f001 fd6e 	bl	800e4a4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c9c8:	697b      	ldr	r3, [r7, #20]
 800c9ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c9cc:	2b00      	cmp	r3, #0
 800c9ce:	d106      	bne.n	800c9de <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c9d0:	697b      	ldr	r3, [r7, #20]
 800c9d2:	3324      	adds	r3, #36	; 0x24
 800c9d4:	687a      	ldr	r2, [r7, #4]
 800c9d6:	68b9      	ldr	r1, [r7, #8]
 800c9d8:	4618      	mov	r0, r3
 800c9da:	f000 fcdf 	bl	800d39c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c9de:	6978      	ldr	r0, [r7, #20]
 800c9e0:	f7ff fefb 	bl	800c7da <prvUnlockQueue>
	}
 800c9e4:	bf00      	nop
 800c9e6:	3718      	adds	r7, #24
 800c9e8:	46bd      	mov	sp, r7
 800c9ea:	bd80      	pop	{r7, pc}

0800c9ec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c9ec:	b580      	push	{r7, lr}
 800c9ee:	b08e      	sub	sp, #56	; 0x38
 800c9f0:	af04      	add	r7, sp, #16
 800c9f2:	60f8      	str	r0, [r7, #12]
 800c9f4:	60b9      	str	r1, [r7, #8]
 800c9f6:	607a      	str	r2, [r7, #4]
 800c9f8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c9fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c9fc:	2b00      	cmp	r3, #0
 800c9fe:	d10a      	bne.n	800ca16 <xTaskCreateStatic+0x2a>
	__asm volatile
 800ca00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca04:	f383 8811 	msr	BASEPRI, r3
 800ca08:	f3bf 8f6f 	isb	sy
 800ca0c:	f3bf 8f4f 	dsb	sy
 800ca10:	623b      	str	r3, [r7, #32]
}
 800ca12:	bf00      	nop
 800ca14:	e7fe      	b.n	800ca14 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ca16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d10a      	bne.n	800ca32 <xTaskCreateStatic+0x46>
	__asm volatile
 800ca1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	61fb      	str	r3, [r7, #28]
}
 800ca2e:	bf00      	nop
 800ca30:	e7fe      	b.n	800ca30 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ca32:	23bc      	movs	r3, #188	; 0xbc
 800ca34:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ca36:	693b      	ldr	r3, [r7, #16]
 800ca38:	2bbc      	cmp	r3, #188	; 0xbc
 800ca3a:	d00a      	beq.n	800ca52 <xTaskCreateStatic+0x66>
	__asm volatile
 800ca3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca40:	f383 8811 	msr	BASEPRI, r3
 800ca44:	f3bf 8f6f 	isb	sy
 800ca48:	f3bf 8f4f 	dsb	sy
 800ca4c:	61bb      	str	r3, [r7, #24]
}
 800ca4e:	bf00      	nop
 800ca50:	e7fe      	b.n	800ca50 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ca52:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ca54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d01e      	beq.n	800ca98 <xTaskCreateStatic+0xac>
 800ca5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d01b      	beq.n	800ca98 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ca60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ca62:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ca64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca66:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ca68:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ca6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca6c:	2202      	movs	r2, #2
 800ca6e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ca72:	2300      	movs	r3, #0
 800ca74:	9303      	str	r3, [sp, #12]
 800ca76:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ca78:	9302      	str	r3, [sp, #8]
 800ca7a:	f107 0314 	add.w	r3, r7, #20
 800ca7e:	9301      	str	r3, [sp, #4]
 800ca80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ca82:	9300      	str	r3, [sp, #0]
 800ca84:	683b      	ldr	r3, [r7, #0]
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	68b9      	ldr	r1, [r7, #8]
 800ca8a:	68f8      	ldr	r0, [r7, #12]
 800ca8c:	f000 f850 	bl	800cb30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ca90:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ca92:	f000 f8f3 	bl	800cc7c <prvAddNewTaskToReadyList>
 800ca96:	e001      	b.n	800ca9c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800ca98:	2300      	movs	r3, #0
 800ca9a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ca9c:	697b      	ldr	r3, [r7, #20]
	}
 800ca9e:	4618      	mov	r0, r3
 800caa0:	3728      	adds	r7, #40	; 0x28
 800caa2:	46bd      	mov	sp, r7
 800caa4:	bd80      	pop	{r7, pc}

0800caa6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800caa6:	b580      	push	{r7, lr}
 800caa8:	b08c      	sub	sp, #48	; 0x30
 800caaa:	af04      	add	r7, sp, #16
 800caac:	60f8      	str	r0, [r7, #12]
 800caae:	60b9      	str	r1, [r7, #8]
 800cab0:	603b      	str	r3, [r7, #0]
 800cab2:	4613      	mov	r3, r2
 800cab4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800cab6:	88fb      	ldrh	r3, [r7, #6]
 800cab8:	009b      	lsls	r3, r3, #2
 800caba:	4618      	mov	r0, r3
 800cabc:	f001 fde4 	bl	800e688 <pvPortMalloc>
 800cac0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800cac2:	697b      	ldr	r3, [r7, #20]
 800cac4:	2b00      	cmp	r3, #0
 800cac6:	d00e      	beq.n	800cae6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800cac8:	20bc      	movs	r0, #188	; 0xbc
 800caca:	f001 fddd 	bl	800e688 <pvPortMalloc>
 800cace:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800cad0:	69fb      	ldr	r3, [r7, #28]
 800cad2:	2b00      	cmp	r3, #0
 800cad4:	d003      	beq.n	800cade <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800cad6:	69fb      	ldr	r3, [r7, #28]
 800cad8:	697a      	ldr	r2, [r7, #20]
 800cada:	631a      	str	r2, [r3, #48]	; 0x30
 800cadc:	e005      	b.n	800caea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800cade:	6978      	ldr	r0, [r7, #20]
 800cae0:	f001 fe9e 	bl	800e820 <vPortFree>
 800cae4:	e001      	b.n	800caea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800cae6:	2300      	movs	r3, #0
 800cae8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800caea:	69fb      	ldr	r3, [r7, #28]
 800caec:	2b00      	cmp	r3, #0
 800caee:	d017      	beq.n	800cb20 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800caf0:	69fb      	ldr	r3, [r7, #28]
 800caf2:	2200      	movs	r2, #0
 800caf4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800caf8:	88fa      	ldrh	r2, [r7, #6]
 800cafa:	2300      	movs	r3, #0
 800cafc:	9303      	str	r3, [sp, #12]
 800cafe:	69fb      	ldr	r3, [r7, #28]
 800cb00:	9302      	str	r3, [sp, #8]
 800cb02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cb04:	9301      	str	r3, [sp, #4]
 800cb06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cb08:	9300      	str	r3, [sp, #0]
 800cb0a:	683b      	ldr	r3, [r7, #0]
 800cb0c:	68b9      	ldr	r1, [r7, #8]
 800cb0e:	68f8      	ldr	r0, [r7, #12]
 800cb10:	f000 f80e 	bl	800cb30 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800cb14:	69f8      	ldr	r0, [r7, #28]
 800cb16:	f000 f8b1 	bl	800cc7c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800cb1a:	2301      	movs	r3, #1
 800cb1c:	61bb      	str	r3, [r7, #24]
 800cb1e:	e002      	b.n	800cb26 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800cb20:	f04f 33ff 	mov.w	r3, #4294967295
 800cb24:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800cb26:	69bb      	ldr	r3, [r7, #24]
	}
 800cb28:	4618      	mov	r0, r3
 800cb2a:	3720      	adds	r7, #32
 800cb2c:	46bd      	mov	sp, r7
 800cb2e:	bd80      	pop	{r7, pc}

0800cb30 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800cb30:	b580      	push	{r7, lr}
 800cb32:	b088      	sub	sp, #32
 800cb34:	af00      	add	r7, sp, #0
 800cb36:	60f8      	str	r0, [r7, #12]
 800cb38:	60b9      	str	r1, [r7, #8]
 800cb3a:	607a      	str	r2, [r7, #4]
 800cb3c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800cb3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb40:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800cb42:	687b      	ldr	r3, [r7, #4]
 800cb44:	009b      	lsls	r3, r3, #2
 800cb46:	461a      	mov	r2, r3
 800cb48:	21a5      	movs	r1, #165	; 0xa5
 800cb4a:	f001 ffc1 	bl	800ead0 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800cb4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cb50:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cb52:	687b      	ldr	r3, [r7, #4]
 800cb54:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800cb58:	3b01      	subs	r3, #1
 800cb5a:	009b      	lsls	r3, r3, #2
 800cb5c:	4413      	add	r3, r2
 800cb5e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800cb60:	69bb      	ldr	r3, [r7, #24]
 800cb62:	f023 0307 	bic.w	r3, r3, #7
 800cb66:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800cb68:	69bb      	ldr	r3, [r7, #24]
 800cb6a:	f003 0307 	and.w	r3, r3, #7
 800cb6e:	2b00      	cmp	r3, #0
 800cb70:	d00a      	beq.n	800cb88 <prvInitialiseNewTask+0x58>
	__asm volatile
 800cb72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb76:	f383 8811 	msr	BASEPRI, r3
 800cb7a:	f3bf 8f6f 	isb	sy
 800cb7e:	f3bf 8f4f 	dsb	sy
 800cb82:	617b      	str	r3, [r7, #20]
}
 800cb84:	bf00      	nop
 800cb86:	e7fe      	b.n	800cb86 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800cb88:	68bb      	ldr	r3, [r7, #8]
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d01f      	beq.n	800cbce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cb8e:	2300      	movs	r3, #0
 800cb90:	61fb      	str	r3, [r7, #28]
 800cb92:	e012      	b.n	800cbba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800cb94:	68ba      	ldr	r2, [r7, #8]
 800cb96:	69fb      	ldr	r3, [r7, #28]
 800cb98:	4413      	add	r3, r2
 800cb9a:	7819      	ldrb	r1, [r3, #0]
 800cb9c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cb9e:	69fb      	ldr	r3, [r7, #28]
 800cba0:	4413      	add	r3, r2
 800cba2:	3334      	adds	r3, #52	; 0x34
 800cba4:	460a      	mov	r2, r1
 800cba6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800cba8:	68ba      	ldr	r2, [r7, #8]
 800cbaa:	69fb      	ldr	r3, [r7, #28]
 800cbac:	4413      	add	r3, r2
 800cbae:	781b      	ldrb	r3, [r3, #0]
 800cbb0:	2b00      	cmp	r3, #0
 800cbb2:	d006      	beq.n	800cbc2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800cbb4:	69fb      	ldr	r3, [r7, #28]
 800cbb6:	3301      	adds	r3, #1
 800cbb8:	61fb      	str	r3, [r7, #28]
 800cbba:	69fb      	ldr	r3, [r7, #28]
 800cbbc:	2b0f      	cmp	r3, #15
 800cbbe:	d9e9      	bls.n	800cb94 <prvInitialiseNewTask+0x64>
 800cbc0:	e000      	b.n	800cbc4 <prvInitialiseNewTask+0x94>
			{
				break;
 800cbc2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800cbc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800cbcc:	e003      	b.n	800cbd6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800cbce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbd0:	2200      	movs	r2, #0
 800cbd2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800cbd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cbd8:	2b37      	cmp	r3, #55	; 0x37
 800cbda:	d901      	bls.n	800cbe0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800cbdc:	2337      	movs	r3, #55	; 0x37
 800cbde:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800cbe0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbe4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800cbe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbe8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800cbea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800cbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbee:	2200      	movs	r2, #0
 800cbf0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800cbf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbf4:	3304      	adds	r3, #4
 800cbf6:	4618      	mov	r0, r3
 800cbf8:	f7fe fda0 	bl	800b73c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800cbfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cbfe:	3318      	adds	r3, #24
 800cc00:	4618      	mov	r0, r3
 800cc02:	f7fe fd9b 	bl	800b73c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800cc06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc08:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc0a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cc0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cc0e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800cc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc14:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800cc16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc1a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800cc1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc1e:	2200      	movs	r2, #0
 800cc20:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800cc24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc26:	2200      	movs	r2, #0
 800cc28:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800cc2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc2e:	3354      	adds	r3, #84	; 0x54
 800cc30:	2260      	movs	r2, #96	; 0x60
 800cc32:	2100      	movs	r1, #0
 800cc34:	4618      	mov	r0, r3
 800cc36:	f001 ff4b 	bl	800ead0 <memset>
 800cc3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc3c:	4a0c      	ldr	r2, [pc, #48]	; (800cc70 <prvInitialiseNewTask+0x140>)
 800cc3e:	659a      	str	r2, [r3, #88]	; 0x58
 800cc40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc42:	4a0c      	ldr	r2, [pc, #48]	; (800cc74 <prvInitialiseNewTask+0x144>)
 800cc44:	65da      	str	r2, [r3, #92]	; 0x5c
 800cc46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc48:	4a0b      	ldr	r2, [pc, #44]	; (800cc78 <prvInitialiseNewTask+0x148>)
 800cc4a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800cc4c:	683a      	ldr	r2, [r7, #0]
 800cc4e:	68f9      	ldr	r1, [r7, #12]
 800cc50:	69b8      	ldr	r0, [r7, #24]
 800cc52:	f001 facd 	bl	800e1f0 <pxPortInitialiseStack>
 800cc56:	4602      	mov	r2, r0
 800cc58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800cc5a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800cc5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc5e:	2b00      	cmp	r3, #0
 800cc60:	d002      	beq.n	800cc68 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800cc62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800cc64:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800cc66:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc68:	bf00      	nop
 800cc6a:	3720      	adds	r7, #32
 800cc6c:	46bd      	mov	sp, r7
 800cc6e:	bd80      	pop	{r7, pc}
 800cc70:	0801d5b4 	.word	0x0801d5b4
 800cc74:	0801d5d4 	.word	0x0801d5d4
 800cc78:	0801d594 	.word	0x0801d594

0800cc7c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800cc7c:	b580      	push	{r7, lr}
 800cc7e:	b082      	sub	sp, #8
 800cc80:	af00      	add	r7, sp, #0
 800cc82:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800cc84:	f001 fbde 	bl	800e444 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800cc88:	4b2d      	ldr	r3, [pc, #180]	; (800cd40 <prvAddNewTaskToReadyList+0xc4>)
 800cc8a:	681b      	ldr	r3, [r3, #0]
 800cc8c:	3301      	adds	r3, #1
 800cc8e:	4a2c      	ldr	r2, [pc, #176]	; (800cd40 <prvAddNewTaskToReadyList+0xc4>)
 800cc90:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800cc92:	4b2c      	ldr	r3, [pc, #176]	; (800cd44 <prvAddNewTaskToReadyList+0xc8>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	2b00      	cmp	r3, #0
 800cc98:	d109      	bne.n	800ccae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800cc9a:	4a2a      	ldr	r2, [pc, #168]	; (800cd44 <prvAddNewTaskToReadyList+0xc8>)
 800cc9c:	687b      	ldr	r3, [r7, #4]
 800cc9e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800cca0:	4b27      	ldr	r3, [pc, #156]	; (800cd40 <prvAddNewTaskToReadyList+0xc4>)
 800cca2:	681b      	ldr	r3, [r3, #0]
 800cca4:	2b01      	cmp	r3, #1
 800cca6:	d110      	bne.n	800ccca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800cca8:	f000 fca4 	bl	800d5f4 <prvInitialiseTaskLists>
 800ccac:	e00d      	b.n	800ccca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800ccae:	4b26      	ldr	r3, [pc, #152]	; (800cd48 <prvAddNewTaskToReadyList+0xcc>)
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	2b00      	cmp	r3, #0
 800ccb4:	d109      	bne.n	800ccca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800ccb6:	4b23      	ldr	r3, [pc, #140]	; (800cd44 <prvAddNewTaskToReadyList+0xc8>)
 800ccb8:	681b      	ldr	r3, [r3, #0]
 800ccba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccbc:	687b      	ldr	r3, [r7, #4]
 800ccbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccc0:	429a      	cmp	r2, r3
 800ccc2:	d802      	bhi.n	800ccca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800ccc4:	4a1f      	ldr	r2, [pc, #124]	; (800cd44 <prvAddNewTaskToReadyList+0xc8>)
 800ccc6:	687b      	ldr	r3, [r7, #4]
 800ccc8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800ccca:	4b20      	ldr	r3, [pc, #128]	; (800cd4c <prvAddNewTaskToReadyList+0xd0>)
 800cccc:	681b      	ldr	r3, [r3, #0]
 800ccce:	3301      	adds	r3, #1
 800ccd0:	4a1e      	ldr	r2, [pc, #120]	; (800cd4c <prvAddNewTaskToReadyList+0xd0>)
 800ccd2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ccd4:	4b1d      	ldr	r3, [pc, #116]	; (800cd4c <prvAddNewTaskToReadyList+0xd0>)
 800ccd6:	681a      	ldr	r2, [r3, #0]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cce0:	4b1b      	ldr	r3, [pc, #108]	; (800cd50 <prvAddNewTaskToReadyList+0xd4>)
 800cce2:	681b      	ldr	r3, [r3, #0]
 800cce4:	429a      	cmp	r2, r3
 800cce6:	d903      	bls.n	800ccf0 <prvAddNewTaskToReadyList+0x74>
 800cce8:	687b      	ldr	r3, [r7, #4]
 800ccea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800ccec:	4a18      	ldr	r2, [pc, #96]	; (800cd50 <prvAddNewTaskToReadyList+0xd4>)
 800ccee:	6013      	str	r3, [r2, #0]
 800ccf0:	687b      	ldr	r3, [r7, #4]
 800ccf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccf4:	4613      	mov	r3, r2
 800ccf6:	009b      	lsls	r3, r3, #2
 800ccf8:	4413      	add	r3, r2
 800ccfa:	009b      	lsls	r3, r3, #2
 800ccfc:	4a15      	ldr	r2, [pc, #84]	; (800cd54 <prvAddNewTaskToReadyList+0xd8>)
 800ccfe:	441a      	add	r2, r3
 800cd00:	687b      	ldr	r3, [r7, #4]
 800cd02:	3304      	adds	r3, #4
 800cd04:	4619      	mov	r1, r3
 800cd06:	4610      	mov	r0, r2
 800cd08:	f7fe fd25 	bl	800b756 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800cd0c:	f001 fbca 	bl	800e4a4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800cd10:	4b0d      	ldr	r3, [pc, #52]	; (800cd48 <prvAddNewTaskToReadyList+0xcc>)
 800cd12:	681b      	ldr	r3, [r3, #0]
 800cd14:	2b00      	cmp	r3, #0
 800cd16:	d00e      	beq.n	800cd36 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800cd18:	4b0a      	ldr	r3, [pc, #40]	; (800cd44 <prvAddNewTaskToReadyList+0xc8>)
 800cd1a:	681b      	ldr	r3, [r3, #0]
 800cd1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd22:	429a      	cmp	r2, r3
 800cd24:	d207      	bcs.n	800cd36 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800cd26:	4b0c      	ldr	r3, [pc, #48]	; (800cd58 <prvAddNewTaskToReadyList+0xdc>)
 800cd28:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cd2c:	601a      	str	r2, [r3, #0]
 800cd2e:	f3bf 8f4f 	dsb	sy
 800cd32:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd36:	bf00      	nop
 800cd38:	3708      	adds	r7, #8
 800cd3a:	46bd      	mov	sp, r7
 800cd3c:	bd80      	pop	{r7, pc}
 800cd3e:	bf00      	nop
 800cd40:	20002ac4 	.word	0x20002ac4
 800cd44:	200025f0 	.word	0x200025f0
 800cd48:	20002ad0 	.word	0x20002ad0
 800cd4c:	20002ae0 	.word	0x20002ae0
 800cd50:	20002acc 	.word	0x20002acc
 800cd54:	200025f4 	.word	0x200025f4
 800cd58:	e000ed04 	.word	0xe000ed04

0800cd5c <vTaskDelayUntil>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( TickType_t * const pxPreviousWakeTime, const TickType_t xTimeIncrement )
	{
 800cd5c:	b580      	push	{r7, lr}
 800cd5e:	b08a      	sub	sp, #40	; 0x28
 800cd60:	af00      	add	r7, sp, #0
 800cd62:	6078      	str	r0, [r7, #4]
 800cd64:	6039      	str	r1, [r7, #0]
	TickType_t xTimeToWake;
	BaseType_t xAlreadyYielded, xShouldDelay = pdFALSE;
 800cd66:	2300      	movs	r3, #0
 800cd68:	627b      	str	r3, [r7, #36]	; 0x24

		configASSERT( pxPreviousWakeTime );
 800cd6a:	687b      	ldr	r3, [r7, #4]
 800cd6c:	2b00      	cmp	r3, #0
 800cd6e:	d10a      	bne.n	800cd86 <vTaskDelayUntil+0x2a>
	__asm volatile
 800cd70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd74:	f383 8811 	msr	BASEPRI, r3
 800cd78:	f3bf 8f6f 	isb	sy
 800cd7c:	f3bf 8f4f 	dsb	sy
 800cd80:	617b      	str	r3, [r7, #20]
}
 800cd82:	bf00      	nop
 800cd84:	e7fe      	b.n	800cd84 <vTaskDelayUntil+0x28>
		configASSERT( ( xTimeIncrement > 0U ) );
 800cd86:	683b      	ldr	r3, [r7, #0]
 800cd88:	2b00      	cmp	r3, #0
 800cd8a:	d10a      	bne.n	800cda2 <vTaskDelayUntil+0x46>
	__asm volatile
 800cd8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cd90:	f383 8811 	msr	BASEPRI, r3
 800cd94:	f3bf 8f6f 	isb	sy
 800cd98:	f3bf 8f4f 	dsb	sy
 800cd9c:	613b      	str	r3, [r7, #16]
}
 800cd9e:	bf00      	nop
 800cda0:	e7fe      	b.n	800cda0 <vTaskDelayUntil+0x44>
		configASSERT( uxSchedulerSuspended == 0 );
 800cda2:	4b2a      	ldr	r3, [pc, #168]	; (800ce4c <vTaskDelayUntil+0xf0>)
 800cda4:	681b      	ldr	r3, [r3, #0]
 800cda6:	2b00      	cmp	r3, #0
 800cda8:	d00a      	beq.n	800cdc0 <vTaskDelayUntil+0x64>
	__asm volatile
 800cdaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdae:	f383 8811 	msr	BASEPRI, r3
 800cdb2:	f3bf 8f6f 	isb	sy
 800cdb6:	f3bf 8f4f 	dsb	sy
 800cdba:	60fb      	str	r3, [r7, #12]
}
 800cdbc:	bf00      	nop
 800cdbe:	e7fe      	b.n	800cdbe <vTaskDelayUntil+0x62>

		vTaskSuspendAll();
 800cdc0:	f000 f8ee 	bl	800cfa0 <vTaskSuspendAll>
		{
			/* Minor optimisation.  The tick count cannot change in this
			block. */
			const TickType_t xConstTickCount = xTickCount;
 800cdc4:	4b22      	ldr	r3, [pc, #136]	; (800ce50 <vTaskDelayUntil+0xf4>)
 800cdc6:	681b      	ldr	r3, [r3, #0]
 800cdc8:	623b      	str	r3, [r7, #32]

			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	683a      	ldr	r2, [r7, #0]
 800cdd0:	4413      	add	r3, r2
 800cdd2:	61fb      	str	r3, [r7, #28]

			if( xConstTickCount < *pxPreviousWakeTime )
 800cdd4:	687b      	ldr	r3, [r7, #4]
 800cdd6:	681b      	ldr	r3, [r3, #0]
 800cdd8:	6a3a      	ldr	r2, [r7, #32]
 800cdda:	429a      	cmp	r2, r3
 800cddc:	d20b      	bcs.n	800cdf6 <vTaskDelayUntil+0x9a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xConstTickCount ) )
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	69fa      	ldr	r2, [r7, #28]
 800cde4:	429a      	cmp	r2, r3
 800cde6:	d211      	bcs.n	800ce0c <vTaskDelayUntil+0xb0>
 800cde8:	69fa      	ldr	r2, [r7, #28]
 800cdea:	6a3b      	ldr	r3, [r7, #32]
 800cdec:	429a      	cmp	r2, r3
 800cdee:	d90d      	bls.n	800ce0c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800cdf0:	2301      	movs	r3, #1
 800cdf2:	627b      	str	r3, [r7, #36]	; 0x24
 800cdf4:	e00a      	b.n	800ce0c <vTaskDelayUntil+0xb0>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xConstTickCount ) )
 800cdf6:	687b      	ldr	r3, [r7, #4]
 800cdf8:	681b      	ldr	r3, [r3, #0]
 800cdfa:	69fa      	ldr	r2, [r7, #28]
 800cdfc:	429a      	cmp	r2, r3
 800cdfe:	d303      	bcc.n	800ce08 <vTaskDelayUntil+0xac>
 800ce00:	69fa      	ldr	r2, [r7, #28]
 800ce02:	6a3b      	ldr	r3, [r7, #32]
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d901      	bls.n	800ce0c <vTaskDelayUntil+0xb0>
				{
					xShouldDelay = pdTRUE;
 800ce08:	2301      	movs	r3, #1
 800ce0a:	627b      	str	r3, [r7, #36]	; 0x24
					mtCOVERAGE_TEST_MARKER();
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
 800ce0c:	687b      	ldr	r3, [r7, #4]
 800ce0e:	69fa      	ldr	r2, [r7, #28]
 800ce10:	601a      	str	r2, [r3, #0]

			if( xShouldDelay != pdFALSE )
 800ce12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d006      	beq.n	800ce26 <vTaskDelayUntil+0xca>
			{
				traceTASK_DELAY_UNTIL( xTimeToWake );

				/* prvAddCurrentTaskToDelayedList() needs the block time, not
				the time to wake, so subtract the current tick count. */
				prvAddCurrentTaskToDelayedList( xTimeToWake - xConstTickCount, pdFALSE );
 800ce18:	69fa      	ldr	r2, [r7, #28]
 800ce1a:	6a3b      	ldr	r3, [r7, #32]
 800ce1c:	1ad3      	subs	r3, r2, r3
 800ce1e:	2100      	movs	r1, #0
 800ce20:	4618      	mov	r0, r3
 800ce22:	f000 fe43 	bl	800daac <prvAddCurrentTaskToDelayedList>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		xAlreadyYielded = xTaskResumeAll();
 800ce26:	f000 f8c9 	bl	800cfbc <xTaskResumeAll>
 800ce2a:	61b8      	str	r0, [r7, #24]

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce2c:	69bb      	ldr	r3, [r7, #24]
 800ce2e:	2b00      	cmp	r3, #0
 800ce30:	d107      	bne.n	800ce42 <vTaskDelayUntil+0xe6>
		{
			portYIELD_WITHIN_API();
 800ce32:	4b08      	ldr	r3, [pc, #32]	; (800ce54 <vTaskDelayUntil+0xf8>)
 800ce34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ce38:	601a      	str	r2, [r3, #0]
 800ce3a:	f3bf 8f4f 	dsb	sy
 800ce3e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ce42:	bf00      	nop
 800ce44:	3728      	adds	r7, #40	; 0x28
 800ce46:	46bd      	mov	sp, r7
 800ce48:	bd80      	pop	{r7, pc}
 800ce4a:	bf00      	nop
 800ce4c:	20002aec 	.word	0x20002aec
 800ce50:	20002ac8 	.word	0x20002ac8
 800ce54:	e000ed04 	.word	0xe000ed04

0800ce58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b084      	sub	sp, #16
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800ce60:	2300      	movs	r3, #0
 800ce62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d017      	beq.n	800ce9a <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800ce6a:	4b13      	ldr	r3, [pc, #76]	; (800ceb8 <vTaskDelay+0x60>)
 800ce6c:	681b      	ldr	r3, [r3, #0]
 800ce6e:	2b00      	cmp	r3, #0
 800ce70:	d00a      	beq.n	800ce88 <vTaskDelay+0x30>
	__asm volatile
 800ce72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce76:	f383 8811 	msr	BASEPRI, r3
 800ce7a:	f3bf 8f6f 	isb	sy
 800ce7e:	f3bf 8f4f 	dsb	sy
 800ce82:	60bb      	str	r3, [r7, #8]
}
 800ce84:	bf00      	nop
 800ce86:	e7fe      	b.n	800ce86 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800ce88:	f000 f88a 	bl	800cfa0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800ce8c:	2100      	movs	r1, #0
 800ce8e:	6878      	ldr	r0, [r7, #4]
 800ce90:	f000 fe0c 	bl	800daac <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800ce94:	f000 f892 	bl	800cfbc <xTaskResumeAll>
 800ce98:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800ce9a:	68fb      	ldr	r3, [r7, #12]
 800ce9c:	2b00      	cmp	r3, #0
 800ce9e:	d107      	bne.n	800ceb0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800cea0:	4b06      	ldr	r3, [pc, #24]	; (800cebc <vTaskDelay+0x64>)
 800cea2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cea6:	601a      	str	r2, [r3, #0]
 800cea8:	f3bf 8f4f 	dsb	sy
 800ceac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800ceb0:	bf00      	nop
 800ceb2:	3710      	adds	r7, #16
 800ceb4:	46bd      	mov	sp, r7
 800ceb6:	bd80      	pop	{r7, pc}
 800ceb8:	20002aec 	.word	0x20002aec
 800cebc:	e000ed04 	.word	0xe000ed04

0800cec0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800cec0:	b580      	push	{r7, lr}
 800cec2:	b08a      	sub	sp, #40	; 0x28
 800cec4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800cec6:	2300      	movs	r3, #0
 800cec8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ceca:	2300      	movs	r3, #0
 800cecc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800cece:	463a      	mov	r2, r7
 800ced0:	1d39      	adds	r1, r7, #4
 800ced2:	f107 0308 	add.w	r3, r7, #8
 800ced6:	4618      	mov	r0, r3
 800ced8:	f7fe fbdc 	bl	800b694 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800cedc:	6839      	ldr	r1, [r7, #0]
 800cede:	687b      	ldr	r3, [r7, #4]
 800cee0:	68ba      	ldr	r2, [r7, #8]
 800cee2:	9202      	str	r2, [sp, #8]
 800cee4:	9301      	str	r3, [sp, #4]
 800cee6:	2300      	movs	r3, #0
 800cee8:	9300      	str	r3, [sp, #0]
 800ceea:	2300      	movs	r3, #0
 800ceec:	460a      	mov	r2, r1
 800ceee:	4924      	ldr	r1, [pc, #144]	; (800cf80 <vTaskStartScheduler+0xc0>)
 800cef0:	4824      	ldr	r0, [pc, #144]	; (800cf84 <vTaskStartScheduler+0xc4>)
 800cef2:	f7ff fd7b 	bl	800c9ec <xTaskCreateStatic>
 800cef6:	4603      	mov	r3, r0
 800cef8:	4a23      	ldr	r2, [pc, #140]	; (800cf88 <vTaskStartScheduler+0xc8>)
 800cefa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800cefc:	4b22      	ldr	r3, [pc, #136]	; (800cf88 <vTaskStartScheduler+0xc8>)
 800cefe:	681b      	ldr	r3, [r3, #0]
 800cf00:	2b00      	cmp	r3, #0
 800cf02:	d002      	beq.n	800cf0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800cf04:	2301      	movs	r3, #1
 800cf06:	617b      	str	r3, [r7, #20]
 800cf08:	e001      	b.n	800cf0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800cf0a:	2300      	movs	r3, #0
 800cf0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800cf0e:	697b      	ldr	r3, [r7, #20]
 800cf10:	2b01      	cmp	r3, #1
 800cf12:	d102      	bne.n	800cf1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800cf14:	f000 fe1e 	bl	800db54 <xTimerCreateTimerTask>
 800cf18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800cf1a:	697b      	ldr	r3, [r7, #20]
 800cf1c:	2b01      	cmp	r3, #1
 800cf1e:	d11b      	bne.n	800cf58 <vTaskStartScheduler+0x98>
	__asm volatile
 800cf20:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf24:	f383 8811 	msr	BASEPRI, r3
 800cf28:	f3bf 8f6f 	isb	sy
 800cf2c:	f3bf 8f4f 	dsb	sy
 800cf30:	613b      	str	r3, [r7, #16]
}
 800cf32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800cf34:	4b15      	ldr	r3, [pc, #84]	; (800cf8c <vTaskStartScheduler+0xcc>)
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	3354      	adds	r3, #84	; 0x54
 800cf3a:	4a15      	ldr	r2, [pc, #84]	; (800cf90 <vTaskStartScheduler+0xd0>)
 800cf3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800cf3e:	4b15      	ldr	r3, [pc, #84]	; (800cf94 <vTaskStartScheduler+0xd4>)
 800cf40:	f04f 32ff 	mov.w	r2, #4294967295
 800cf44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800cf46:	4b14      	ldr	r3, [pc, #80]	; (800cf98 <vTaskStartScheduler+0xd8>)
 800cf48:	2201      	movs	r2, #1
 800cf4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800cf4c:	4b13      	ldr	r3, [pc, #76]	; (800cf9c <vTaskStartScheduler+0xdc>)
 800cf4e:	2200      	movs	r2, #0
 800cf50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800cf52:	f001 f9d5 	bl	800e300 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800cf56:	e00e      	b.n	800cf76 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800cf58:	697b      	ldr	r3, [r7, #20]
 800cf5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800cf5e:	d10a      	bne.n	800cf76 <vTaskStartScheduler+0xb6>
	__asm volatile
 800cf60:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf64:	f383 8811 	msr	BASEPRI, r3
 800cf68:	f3bf 8f6f 	isb	sy
 800cf6c:	f3bf 8f4f 	dsb	sy
 800cf70:	60fb      	str	r3, [r7, #12]
}
 800cf72:	bf00      	nop
 800cf74:	e7fe      	b.n	800cf74 <vTaskStartScheduler+0xb4>
}
 800cf76:	bf00      	nop
 800cf78:	3718      	adds	r7, #24
 800cf7a:	46bd      	mov	sp, r7
 800cf7c:	bd80      	pop	{r7, pc}
 800cf7e:	bf00      	nop
 800cf80:	08010650 	.word	0x08010650
 800cf84:	0800d5c5 	.word	0x0800d5c5
 800cf88:	20002ae8 	.word	0x20002ae8
 800cf8c:	200025f0 	.word	0x200025f0
 800cf90:	200000ac 	.word	0x200000ac
 800cf94:	20002ae4 	.word	0x20002ae4
 800cf98:	20002ad0 	.word	0x20002ad0
 800cf9c:	20002ac8 	.word	0x20002ac8

0800cfa0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cfa0:	b480      	push	{r7}
 800cfa2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800cfa4:	4b04      	ldr	r3, [pc, #16]	; (800cfb8 <vTaskSuspendAll+0x18>)
 800cfa6:	681b      	ldr	r3, [r3, #0]
 800cfa8:	3301      	adds	r3, #1
 800cfaa:	4a03      	ldr	r2, [pc, #12]	; (800cfb8 <vTaskSuspendAll+0x18>)
 800cfac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800cfae:	bf00      	nop
 800cfb0:	46bd      	mov	sp, r7
 800cfb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfb6:	4770      	bx	lr
 800cfb8:	20002aec 	.word	0x20002aec

0800cfbc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800cfbc:	b580      	push	{r7, lr}
 800cfbe:	b084      	sub	sp, #16
 800cfc0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cfc2:	2300      	movs	r3, #0
 800cfc4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cfc6:	2300      	movs	r3, #0
 800cfc8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cfca:	4b42      	ldr	r3, [pc, #264]	; (800d0d4 <xTaskResumeAll+0x118>)
 800cfcc:	681b      	ldr	r3, [r3, #0]
 800cfce:	2b00      	cmp	r3, #0
 800cfd0:	d10a      	bne.n	800cfe8 <xTaskResumeAll+0x2c>
	__asm volatile
 800cfd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cfd6:	f383 8811 	msr	BASEPRI, r3
 800cfda:	f3bf 8f6f 	isb	sy
 800cfde:	f3bf 8f4f 	dsb	sy
 800cfe2:	603b      	str	r3, [r7, #0]
}
 800cfe4:	bf00      	nop
 800cfe6:	e7fe      	b.n	800cfe6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cfe8:	f001 fa2c 	bl	800e444 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cfec:	4b39      	ldr	r3, [pc, #228]	; (800d0d4 <xTaskResumeAll+0x118>)
 800cfee:	681b      	ldr	r3, [r3, #0]
 800cff0:	3b01      	subs	r3, #1
 800cff2:	4a38      	ldr	r2, [pc, #224]	; (800d0d4 <xTaskResumeAll+0x118>)
 800cff4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cff6:	4b37      	ldr	r3, [pc, #220]	; (800d0d4 <xTaskResumeAll+0x118>)
 800cff8:	681b      	ldr	r3, [r3, #0]
 800cffa:	2b00      	cmp	r3, #0
 800cffc:	d162      	bne.n	800d0c4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cffe:	4b36      	ldr	r3, [pc, #216]	; (800d0d8 <xTaskResumeAll+0x11c>)
 800d000:	681b      	ldr	r3, [r3, #0]
 800d002:	2b00      	cmp	r3, #0
 800d004:	d05e      	beq.n	800d0c4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d006:	e02f      	b.n	800d068 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d008:	4b34      	ldr	r3, [pc, #208]	; (800d0dc <xTaskResumeAll+0x120>)
 800d00a:	68db      	ldr	r3, [r3, #12]
 800d00c:	68db      	ldr	r3, [r3, #12]
 800d00e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d010:	68fb      	ldr	r3, [r7, #12]
 800d012:	3318      	adds	r3, #24
 800d014:	4618      	mov	r0, r3
 800d016:	f7fe fbfb 	bl	800b810 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	3304      	adds	r3, #4
 800d01e:	4618      	mov	r0, r3
 800d020:	f7fe fbf6 	bl	800b810 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d024:	68fb      	ldr	r3, [r7, #12]
 800d026:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d028:	4b2d      	ldr	r3, [pc, #180]	; (800d0e0 <xTaskResumeAll+0x124>)
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	429a      	cmp	r2, r3
 800d02e:	d903      	bls.n	800d038 <xTaskResumeAll+0x7c>
 800d030:	68fb      	ldr	r3, [r7, #12]
 800d032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d034:	4a2a      	ldr	r2, [pc, #168]	; (800d0e0 <xTaskResumeAll+0x124>)
 800d036:	6013      	str	r3, [r2, #0]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d03c:	4613      	mov	r3, r2
 800d03e:	009b      	lsls	r3, r3, #2
 800d040:	4413      	add	r3, r2
 800d042:	009b      	lsls	r3, r3, #2
 800d044:	4a27      	ldr	r2, [pc, #156]	; (800d0e4 <xTaskResumeAll+0x128>)
 800d046:	441a      	add	r2, r3
 800d048:	68fb      	ldr	r3, [r7, #12]
 800d04a:	3304      	adds	r3, #4
 800d04c:	4619      	mov	r1, r3
 800d04e:	4610      	mov	r0, r2
 800d050:	f7fe fb81 	bl	800b756 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d054:	68fb      	ldr	r3, [r7, #12]
 800d056:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d058:	4b23      	ldr	r3, [pc, #140]	; (800d0e8 <xTaskResumeAll+0x12c>)
 800d05a:	681b      	ldr	r3, [r3, #0]
 800d05c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d05e:	429a      	cmp	r2, r3
 800d060:	d302      	bcc.n	800d068 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800d062:	4b22      	ldr	r3, [pc, #136]	; (800d0ec <xTaskResumeAll+0x130>)
 800d064:	2201      	movs	r2, #1
 800d066:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d068:	4b1c      	ldr	r3, [pc, #112]	; (800d0dc <xTaskResumeAll+0x120>)
 800d06a:	681b      	ldr	r3, [r3, #0]
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	d1cb      	bne.n	800d008 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800d070:	68fb      	ldr	r3, [r7, #12]
 800d072:	2b00      	cmp	r3, #0
 800d074:	d001      	beq.n	800d07a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800d076:	f000 fb5f 	bl	800d738 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d07a:	4b1d      	ldr	r3, [pc, #116]	; (800d0f0 <xTaskResumeAll+0x134>)
 800d07c:	681b      	ldr	r3, [r3, #0]
 800d07e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	2b00      	cmp	r3, #0
 800d084:	d010      	beq.n	800d0a8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800d086:	f000 f847 	bl	800d118 <xTaskIncrementTick>
 800d08a:	4603      	mov	r3, r0
 800d08c:	2b00      	cmp	r3, #0
 800d08e:	d002      	beq.n	800d096 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800d090:	4b16      	ldr	r3, [pc, #88]	; (800d0ec <xTaskResumeAll+0x130>)
 800d092:	2201      	movs	r2, #1
 800d094:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	3b01      	subs	r3, #1
 800d09a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d09c:	687b      	ldr	r3, [r7, #4]
 800d09e:	2b00      	cmp	r3, #0
 800d0a0:	d1f1      	bne.n	800d086 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800d0a2:	4b13      	ldr	r3, [pc, #76]	; (800d0f0 <xTaskResumeAll+0x134>)
 800d0a4:	2200      	movs	r2, #0
 800d0a6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800d0a8:	4b10      	ldr	r3, [pc, #64]	; (800d0ec <xTaskResumeAll+0x130>)
 800d0aa:	681b      	ldr	r3, [r3, #0]
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d009      	beq.n	800d0c4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800d0b0:	2301      	movs	r3, #1
 800d0b2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800d0b4:	4b0f      	ldr	r3, [pc, #60]	; (800d0f4 <xTaskResumeAll+0x138>)
 800d0b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0ba:	601a      	str	r2, [r3, #0]
 800d0bc:	f3bf 8f4f 	dsb	sy
 800d0c0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800d0c4:	f001 f9ee 	bl	800e4a4 <vPortExitCritical>

	return xAlreadyYielded;
 800d0c8:	68bb      	ldr	r3, [r7, #8]
}
 800d0ca:	4618      	mov	r0, r3
 800d0cc:	3710      	adds	r7, #16
 800d0ce:	46bd      	mov	sp, r7
 800d0d0:	bd80      	pop	{r7, pc}
 800d0d2:	bf00      	nop
 800d0d4:	20002aec 	.word	0x20002aec
 800d0d8:	20002ac4 	.word	0x20002ac4
 800d0dc:	20002a84 	.word	0x20002a84
 800d0e0:	20002acc 	.word	0x20002acc
 800d0e4:	200025f4 	.word	0x200025f4
 800d0e8:	200025f0 	.word	0x200025f0
 800d0ec:	20002ad8 	.word	0x20002ad8
 800d0f0:	20002ad4 	.word	0x20002ad4
 800d0f4:	e000ed04 	.word	0xe000ed04

0800d0f8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800d0f8:	b480      	push	{r7}
 800d0fa:	b083      	sub	sp, #12
 800d0fc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800d0fe:	4b05      	ldr	r3, [pc, #20]	; (800d114 <xTaskGetTickCount+0x1c>)
 800d100:	681b      	ldr	r3, [r3, #0]
 800d102:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800d104:	687b      	ldr	r3, [r7, #4]
}
 800d106:	4618      	mov	r0, r3
 800d108:	370c      	adds	r7, #12
 800d10a:	46bd      	mov	sp, r7
 800d10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d110:	4770      	bx	lr
 800d112:	bf00      	nop
 800d114:	20002ac8 	.word	0x20002ac8

0800d118 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800d118:	b580      	push	{r7, lr}
 800d11a:	b086      	sub	sp, #24
 800d11c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800d11e:	2300      	movs	r3, #0
 800d120:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d122:	4b4f      	ldr	r3, [pc, #316]	; (800d260 <xTaskIncrementTick+0x148>)
 800d124:	681b      	ldr	r3, [r3, #0]
 800d126:	2b00      	cmp	r3, #0
 800d128:	f040 808f 	bne.w	800d24a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d12c:	4b4d      	ldr	r3, [pc, #308]	; (800d264 <xTaskIncrementTick+0x14c>)
 800d12e:	681b      	ldr	r3, [r3, #0]
 800d130:	3301      	adds	r3, #1
 800d132:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800d134:	4a4b      	ldr	r2, [pc, #300]	; (800d264 <xTaskIncrementTick+0x14c>)
 800d136:	693b      	ldr	r3, [r7, #16]
 800d138:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d13a:	693b      	ldr	r3, [r7, #16]
 800d13c:	2b00      	cmp	r3, #0
 800d13e:	d120      	bne.n	800d182 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 800d140:	4b49      	ldr	r3, [pc, #292]	; (800d268 <xTaskIncrementTick+0x150>)
 800d142:	681b      	ldr	r3, [r3, #0]
 800d144:	681b      	ldr	r3, [r3, #0]
 800d146:	2b00      	cmp	r3, #0
 800d148:	d00a      	beq.n	800d160 <xTaskIncrementTick+0x48>
	__asm volatile
 800d14a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d14e:	f383 8811 	msr	BASEPRI, r3
 800d152:	f3bf 8f6f 	isb	sy
 800d156:	f3bf 8f4f 	dsb	sy
 800d15a:	603b      	str	r3, [r7, #0]
}
 800d15c:	bf00      	nop
 800d15e:	e7fe      	b.n	800d15e <xTaskIncrementTick+0x46>
 800d160:	4b41      	ldr	r3, [pc, #260]	; (800d268 <xTaskIncrementTick+0x150>)
 800d162:	681b      	ldr	r3, [r3, #0]
 800d164:	60fb      	str	r3, [r7, #12]
 800d166:	4b41      	ldr	r3, [pc, #260]	; (800d26c <xTaskIncrementTick+0x154>)
 800d168:	681b      	ldr	r3, [r3, #0]
 800d16a:	4a3f      	ldr	r2, [pc, #252]	; (800d268 <xTaskIncrementTick+0x150>)
 800d16c:	6013      	str	r3, [r2, #0]
 800d16e:	4a3f      	ldr	r2, [pc, #252]	; (800d26c <xTaskIncrementTick+0x154>)
 800d170:	68fb      	ldr	r3, [r7, #12]
 800d172:	6013      	str	r3, [r2, #0]
 800d174:	4b3e      	ldr	r3, [pc, #248]	; (800d270 <xTaskIncrementTick+0x158>)
 800d176:	681b      	ldr	r3, [r3, #0]
 800d178:	3301      	adds	r3, #1
 800d17a:	4a3d      	ldr	r2, [pc, #244]	; (800d270 <xTaskIncrementTick+0x158>)
 800d17c:	6013      	str	r3, [r2, #0]
 800d17e:	f000 fadb 	bl	800d738 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d182:	4b3c      	ldr	r3, [pc, #240]	; (800d274 <xTaskIncrementTick+0x15c>)
 800d184:	681b      	ldr	r3, [r3, #0]
 800d186:	693a      	ldr	r2, [r7, #16]
 800d188:	429a      	cmp	r2, r3
 800d18a:	d349      	bcc.n	800d220 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d18c:	4b36      	ldr	r3, [pc, #216]	; (800d268 <xTaskIncrementTick+0x150>)
 800d18e:	681b      	ldr	r3, [r3, #0]
 800d190:	681b      	ldr	r3, [r3, #0]
 800d192:	2b00      	cmp	r3, #0
 800d194:	d104      	bne.n	800d1a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d196:	4b37      	ldr	r3, [pc, #220]	; (800d274 <xTaskIncrementTick+0x15c>)
 800d198:	f04f 32ff 	mov.w	r2, #4294967295
 800d19c:	601a      	str	r2, [r3, #0]
					break;
 800d19e:	e03f      	b.n	800d220 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d1a0:	4b31      	ldr	r3, [pc, #196]	; (800d268 <xTaskIncrementTick+0x150>)
 800d1a2:	681b      	ldr	r3, [r3, #0]
 800d1a4:	68db      	ldr	r3, [r3, #12]
 800d1a6:	68db      	ldr	r3, [r3, #12]
 800d1a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d1aa:	68bb      	ldr	r3, [r7, #8]
 800d1ac:	685b      	ldr	r3, [r3, #4]
 800d1ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800d1b0:	693a      	ldr	r2, [r7, #16]
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	429a      	cmp	r2, r3
 800d1b6:	d203      	bcs.n	800d1c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800d1b8:	4a2e      	ldr	r2, [pc, #184]	; (800d274 <xTaskIncrementTick+0x15c>)
 800d1ba:	687b      	ldr	r3, [r7, #4]
 800d1bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d1be:	e02f      	b.n	800d220 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d1c0:	68bb      	ldr	r3, [r7, #8]
 800d1c2:	3304      	adds	r3, #4
 800d1c4:	4618      	mov	r0, r3
 800d1c6:	f7fe fb23 	bl	800b810 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d1ca:	68bb      	ldr	r3, [r7, #8]
 800d1cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800d1ce:	2b00      	cmp	r3, #0
 800d1d0:	d004      	beq.n	800d1dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d1d2:	68bb      	ldr	r3, [r7, #8]
 800d1d4:	3318      	adds	r3, #24
 800d1d6:	4618      	mov	r0, r3
 800d1d8:	f7fe fb1a 	bl	800b810 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800d1dc:	68bb      	ldr	r3, [r7, #8]
 800d1de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1e0:	4b25      	ldr	r3, [pc, #148]	; (800d278 <xTaskIncrementTick+0x160>)
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d903      	bls.n	800d1f0 <xTaskIncrementTick+0xd8>
 800d1e8:	68bb      	ldr	r3, [r7, #8]
 800d1ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d1ec:	4a22      	ldr	r2, [pc, #136]	; (800d278 <xTaskIncrementTick+0x160>)
 800d1ee:	6013      	str	r3, [r2, #0]
 800d1f0:	68bb      	ldr	r3, [r7, #8]
 800d1f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d1f4:	4613      	mov	r3, r2
 800d1f6:	009b      	lsls	r3, r3, #2
 800d1f8:	4413      	add	r3, r2
 800d1fa:	009b      	lsls	r3, r3, #2
 800d1fc:	4a1f      	ldr	r2, [pc, #124]	; (800d27c <xTaskIncrementTick+0x164>)
 800d1fe:	441a      	add	r2, r3
 800d200:	68bb      	ldr	r3, [r7, #8]
 800d202:	3304      	adds	r3, #4
 800d204:	4619      	mov	r1, r3
 800d206:	4610      	mov	r0, r2
 800d208:	f7fe faa5 	bl	800b756 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d20c:	68bb      	ldr	r3, [r7, #8]
 800d20e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d210:	4b1b      	ldr	r3, [pc, #108]	; (800d280 <xTaskIncrementTick+0x168>)
 800d212:	681b      	ldr	r3, [r3, #0]
 800d214:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d216:	429a      	cmp	r2, r3
 800d218:	d3b8      	bcc.n	800d18c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800d21a:	2301      	movs	r3, #1
 800d21c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d21e:	e7b5      	b.n	800d18c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d220:	4b17      	ldr	r3, [pc, #92]	; (800d280 <xTaskIncrementTick+0x168>)
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d226:	4915      	ldr	r1, [pc, #84]	; (800d27c <xTaskIncrementTick+0x164>)
 800d228:	4613      	mov	r3, r2
 800d22a:	009b      	lsls	r3, r3, #2
 800d22c:	4413      	add	r3, r2
 800d22e:	009b      	lsls	r3, r3, #2
 800d230:	440b      	add	r3, r1
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	2b01      	cmp	r3, #1
 800d236:	d901      	bls.n	800d23c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800d238:	2301      	movs	r3, #1
 800d23a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800d23c:	4b11      	ldr	r3, [pc, #68]	; (800d284 <xTaskIncrementTick+0x16c>)
 800d23e:	681b      	ldr	r3, [r3, #0]
 800d240:	2b00      	cmp	r3, #0
 800d242:	d007      	beq.n	800d254 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800d244:	2301      	movs	r3, #1
 800d246:	617b      	str	r3, [r7, #20]
 800d248:	e004      	b.n	800d254 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800d24a:	4b0f      	ldr	r3, [pc, #60]	; (800d288 <xTaskIncrementTick+0x170>)
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	3301      	adds	r3, #1
 800d250:	4a0d      	ldr	r2, [pc, #52]	; (800d288 <xTaskIncrementTick+0x170>)
 800d252:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800d254:	697b      	ldr	r3, [r7, #20]
}
 800d256:	4618      	mov	r0, r3
 800d258:	3718      	adds	r7, #24
 800d25a:	46bd      	mov	sp, r7
 800d25c:	bd80      	pop	{r7, pc}
 800d25e:	bf00      	nop
 800d260:	20002aec 	.word	0x20002aec
 800d264:	20002ac8 	.word	0x20002ac8
 800d268:	20002a7c 	.word	0x20002a7c
 800d26c:	20002a80 	.word	0x20002a80
 800d270:	20002adc 	.word	0x20002adc
 800d274:	20002ae4 	.word	0x20002ae4
 800d278:	20002acc 	.word	0x20002acc
 800d27c:	200025f4 	.word	0x200025f4
 800d280:	200025f0 	.word	0x200025f0
 800d284:	20002ad8 	.word	0x20002ad8
 800d288:	20002ad4 	.word	0x20002ad4

0800d28c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800d28c:	b480      	push	{r7}
 800d28e:	b085      	sub	sp, #20
 800d290:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d292:	4b2a      	ldr	r3, [pc, #168]	; (800d33c <vTaskSwitchContext+0xb0>)
 800d294:	681b      	ldr	r3, [r3, #0]
 800d296:	2b00      	cmp	r3, #0
 800d298:	d003      	beq.n	800d2a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800d29a:	4b29      	ldr	r3, [pc, #164]	; (800d340 <vTaskSwitchContext+0xb4>)
 800d29c:	2201      	movs	r2, #1
 800d29e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800d2a0:	e046      	b.n	800d330 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800d2a2:	4b27      	ldr	r3, [pc, #156]	; (800d340 <vTaskSwitchContext+0xb4>)
 800d2a4:	2200      	movs	r2, #0
 800d2a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d2a8:	4b26      	ldr	r3, [pc, #152]	; (800d344 <vTaskSwitchContext+0xb8>)
 800d2aa:	681b      	ldr	r3, [r3, #0]
 800d2ac:	60fb      	str	r3, [r7, #12]
 800d2ae:	e010      	b.n	800d2d2 <vTaskSwitchContext+0x46>
 800d2b0:	68fb      	ldr	r3, [r7, #12]
 800d2b2:	2b00      	cmp	r3, #0
 800d2b4:	d10a      	bne.n	800d2cc <vTaskSwitchContext+0x40>
	__asm volatile
 800d2b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2ba:	f383 8811 	msr	BASEPRI, r3
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	f3bf 8f4f 	dsb	sy
 800d2c6:	607b      	str	r3, [r7, #4]
}
 800d2c8:	bf00      	nop
 800d2ca:	e7fe      	b.n	800d2ca <vTaskSwitchContext+0x3e>
 800d2cc:	68fb      	ldr	r3, [r7, #12]
 800d2ce:	3b01      	subs	r3, #1
 800d2d0:	60fb      	str	r3, [r7, #12]
 800d2d2:	491d      	ldr	r1, [pc, #116]	; (800d348 <vTaskSwitchContext+0xbc>)
 800d2d4:	68fa      	ldr	r2, [r7, #12]
 800d2d6:	4613      	mov	r3, r2
 800d2d8:	009b      	lsls	r3, r3, #2
 800d2da:	4413      	add	r3, r2
 800d2dc:	009b      	lsls	r3, r3, #2
 800d2de:	440b      	add	r3, r1
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	2b00      	cmp	r3, #0
 800d2e4:	d0e4      	beq.n	800d2b0 <vTaskSwitchContext+0x24>
 800d2e6:	68fa      	ldr	r2, [r7, #12]
 800d2e8:	4613      	mov	r3, r2
 800d2ea:	009b      	lsls	r3, r3, #2
 800d2ec:	4413      	add	r3, r2
 800d2ee:	009b      	lsls	r3, r3, #2
 800d2f0:	4a15      	ldr	r2, [pc, #84]	; (800d348 <vTaskSwitchContext+0xbc>)
 800d2f2:	4413      	add	r3, r2
 800d2f4:	60bb      	str	r3, [r7, #8]
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	685b      	ldr	r3, [r3, #4]
 800d2fa:	685a      	ldr	r2, [r3, #4]
 800d2fc:	68bb      	ldr	r3, [r7, #8]
 800d2fe:	605a      	str	r2, [r3, #4]
 800d300:	68bb      	ldr	r3, [r7, #8]
 800d302:	685a      	ldr	r2, [r3, #4]
 800d304:	68bb      	ldr	r3, [r7, #8]
 800d306:	3308      	adds	r3, #8
 800d308:	429a      	cmp	r2, r3
 800d30a:	d104      	bne.n	800d316 <vTaskSwitchContext+0x8a>
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	685b      	ldr	r3, [r3, #4]
 800d310:	685a      	ldr	r2, [r3, #4]
 800d312:	68bb      	ldr	r3, [r7, #8]
 800d314:	605a      	str	r2, [r3, #4]
 800d316:	68bb      	ldr	r3, [r7, #8]
 800d318:	685b      	ldr	r3, [r3, #4]
 800d31a:	68db      	ldr	r3, [r3, #12]
 800d31c:	4a0b      	ldr	r2, [pc, #44]	; (800d34c <vTaskSwitchContext+0xc0>)
 800d31e:	6013      	str	r3, [r2, #0]
 800d320:	4a08      	ldr	r2, [pc, #32]	; (800d344 <vTaskSwitchContext+0xb8>)
 800d322:	68fb      	ldr	r3, [r7, #12]
 800d324:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d326:	4b09      	ldr	r3, [pc, #36]	; (800d34c <vTaskSwitchContext+0xc0>)
 800d328:	681b      	ldr	r3, [r3, #0]
 800d32a:	3354      	adds	r3, #84	; 0x54
 800d32c:	4a08      	ldr	r2, [pc, #32]	; (800d350 <vTaskSwitchContext+0xc4>)
 800d32e:	6013      	str	r3, [r2, #0]
}
 800d330:	bf00      	nop
 800d332:	3714      	adds	r7, #20
 800d334:	46bd      	mov	sp, r7
 800d336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d33a:	4770      	bx	lr
 800d33c:	20002aec 	.word	0x20002aec
 800d340:	20002ad8 	.word	0x20002ad8
 800d344:	20002acc 	.word	0x20002acc
 800d348:	200025f4 	.word	0x200025f4
 800d34c:	200025f0 	.word	0x200025f0
 800d350:	200000ac 	.word	0x200000ac

0800d354 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800d354:	b580      	push	{r7, lr}
 800d356:	b084      	sub	sp, #16
 800d358:	af00      	add	r7, sp, #0
 800d35a:	6078      	str	r0, [r7, #4]
 800d35c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2b00      	cmp	r3, #0
 800d362:	d10a      	bne.n	800d37a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800d364:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d368:	f383 8811 	msr	BASEPRI, r3
 800d36c:	f3bf 8f6f 	isb	sy
 800d370:	f3bf 8f4f 	dsb	sy
 800d374:	60fb      	str	r3, [r7, #12]
}
 800d376:	bf00      	nop
 800d378:	e7fe      	b.n	800d378 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d37a:	4b07      	ldr	r3, [pc, #28]	; (800d398 <vTaskPlaceOnEventList+0x44>)
 800d37c:	681b      	ldr	r3, [r3, #0]
 800d37e:	3318      	adds	r3, #24
 800d380:	4619      	mov	r1, r3
 800d382:	6878      	ldr	r0, [r7, #4]
 800d384:	f7fe fa0b 	bl	800b79e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d388:	2101      	movs	r1, #1
 800d38a:	6838      	ldr	r0, [r7, #0]
 800d38c:	f000 fb8e 	bl	800daac <prvAddCurrentTaskToDelayedList>
}
 800d390:	bf00      	nop
 800d392:	3710      	adds	r7, #16
 800d394:	46bd      	mov	sp, r7
 800d396:	bd80      	pop	{r7, pc}
 800d398:	200025f0 	.word	0x200025f0

0800d39c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800d39c:	b580      	push	{r7, lr}
 800d39e:	b086      	sub	sp, #24
 800d3a0:	af00      	add	r7, sp, #0
 800d3a2:	60f8      	str	r0, [r7, #12]
 800d3a4:	60b9      	str	r1, [r7, #8]
 800d3a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800d3a8:	68fb      	ldr	r3, [r7, #12]
 800d3aa:	2b00      	cmp	r3, #0
 800d3ac:	d10a      	bne.n	800d3c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800d3ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3b2:	f383 8811 	msr	BASEPRI, r3
 800d3b6:	f3bf 8f6f 	isb	sy
 800d3ba:	f3bf 8f4f 	dsb	sy
 800d3be:	617b      	str	r3, [r7, #20]
}
 800d3c0:	bf00      	nop
 800d3c2:	e7fe      	b.n	800d3c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d3c4:	4b0a      	ldr	r3, [pc, #40]	; (800d3f0 <vTaskPlaceOnEventListRestricted+0x54>)
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	3318      	adds	r3, #24
 800d3ca:	4619      	mov	r1, r3
 800d3cc:	68f8      	ldr	r0, [r7, #12]
 800d3ce:	f7fe f9c2 	bl	800b756 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	2b00      	cmp	r3, #0
 800d3d6:	d002      	beq.n	800d3de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800d3d8:	f04f 33ff 	mov.w	r3, #4294967295
 800d3dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800d3de:	6879      	ldr	r1, [r7, #4]
 800d3e0:	68b8      	ldr	r0, [r7, #8]
 800d3e2:	f000 fb63 	bl	800daac <prvAddCurrentTaskToDelayedList>
	}
 800d3e6:	bf00      	nop
 800d3e8:	3718      	adds	r7, #24
 800d3ea:	46bd      	mov	sp, r7
 800d3ec:	bd80      	pop	{r7, pc}
 800d3ee:	bf00      	nop
 800d3f0:	200025f0 	.word	0x200025f0

0800d3f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800d3f4:	b580      	push	{r7, lr}
 800d3f6:	b086      	sub	sp, #24
 800d3f8:	af00      	add	r7, sp, #0
 800d3fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	68db      	ldr	r3, [r3, #12]
 800d400:	68db      	ldr	r3, [r3, #12]
 800d402:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800d404:	693b      	ldr	r3, [r7, #16]
 800d406:	2b00      	cmp	r3, #0
 800d408:	d10a      	bne.n	800d420 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800d40a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d40e:	f383 8811 	msr	BASEPRI, r3
 800d412:	f3bf 8f6f 	isb	sy
 800d416:	f3bf 8f4f 	dsb	sy
 800d41a:	60fb      	str	r3, [r7, #12]
}
 800d41c:	bf00      	nop
 800d41e:	e7fe      	b.n	800d41e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d420:	693b      	ldr	r3, [r7, #16]
 800d422:	3318      	adds	r3, #24
 800d424:	4618      	mov	r0, r3
 800d426:	f7fe f9f3 	bl	800b810 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d42a:	4b1e      	ldr	r3, [pc, #120]	; (800d4a4 <xTaskRemoveFromEventList+0xb0>)
 800d42c:	681b      	ldr	r3, [r3, #0]
 800d42e:	2b00      	cmp	r3, #0
 800d430:	d11d      	bne.n	800d46e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d432:	693b      	ldr	r3, [r7, #16]
 800d434:	3304      	adds	r3, #4
 800d436:	4618      	mov	r0, r3
 800d438:	f7fe f9ea 	bl	800b810 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d43c:	693b      	ldr	r3, [r7, #16]
 800d43e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d440:	4b19      	ldr	r3, [pc, #100]	; (800d4a8 <xTaskRemoveFromEventList+0xb4>)
 800d442:	681b      	ldr	r3, [r3, #0]
 800d444:	429a      	cmp	r2, r3
 800d446:	d903      	bls.n	800d450 <xTaskRemoveFromEventList+0x5c>
 800d448:	693b      	ldr	r3, [r7, #16]
 800d44a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d44c:	4a16      	ldr	r2, [pc, #88]	; (800d4a8 <xTaskRemoveFromEventList+0xb4>)
 800d44e:	6013      	str	r3, [r2, #0]
 800d450:	693b      	ldr	r3, [r7, #16]
 800d452:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d454:	4613      	mov	r3, r2
 800d456:	009b      	lsls	r3, r3, #2
 800d458:	4413      	add	r3, r2
 800d45a:	009b      	lsls	r3, r3, #2
 800d45c:	4a13      	ldr	r2, [pc, #76]	; (800d4ac <xTaskRemoveFromEventList+0xb8>)
 800d45e:	441a      	add	r2, r3
 800d460:	693b      	ldr	r3, [r7, #16]
 800d462:	3304      	adds	r3, #4
 800d464:	4619      	mov	r1, r3
 800d466:	4610      	mov	r0, r2
 800d468:	f7fe f975 	bl	800b756 <vListInsertEnd>
 800d46c:	e005      	b.n	800d47a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d46e:	693b      	ldr	r3, [r7, #16]
 800d470:	3318      	adds	r3, #24
 800d472:	4619      	mov	r1, r3
 800d474:	480e      	ldr	r0, [pc, #56]	; (800d4b0 <xTaskRemoveFromEventList+0xbc>)
 800d476:	f7fe f96e 	bl	800b756 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d47a:	693b      	ldr	r3, [r7, #16]
 800d47c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d47e:	4b0d      	ldr	r3, [pc, #52]	; (800d4b4 <xTaskRemoveFromEventList+0xc0>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d484:	429a      	cmp	r2, r3
 800d486:	d905      	bls.n	800d494 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800d488:	2301      	movs	r3, #1
 800d48a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800d48c:	4b0a      	ldr	r3, [pc, #40]	; (800d4b8 <xTaskRemoveFromEventList+0xc4>)
 800d48e:	2201      	movs	r2, #1
 800d490:	601a      	str	r2, [r3, #0]
 800d492:	e001      	b.n	800d498 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800d494:	2300      	movs	r3, #0
 800d496:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800d498:	697b      	ldr	r3, [r7, #20]
}
 800d49a:	4618      	mov	r0, r3
 800d49c:	3718      	adds	r7, #24
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	20002aec 	.word	0x20002aec
 800d4a8:	20002acc 	.word	0x20002acc
 800d4ac:	200025f4 	.word	0x200025f4
 800d4b0:	20002a84 	.word	0x20002a84
 800d4b4:	200025f0 	.word	0x200025f0
 800d4b8:	20002ad8 	.word	0x20002ad8

0800d4bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800d4bc:	b480      	push	{r7}
 800d4be:	b083      	sub	sp, #12
 800d4c0:	af00      	add	r7, sp, #0
 800d4c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d4c4:	4b06      	ldr	r3, [pc, #24]	; (800d4e0 <vTaskInternalSetTimeOutState+0x24>)
 800d4c6:	681a      	ldr	r2, [r3, #0]
 800d4c8:	687b      	ldr	r3, [r7, #4]
 800d4ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d4cc:	4b05      	ldr	r3, [pc, #20]	; (800d4e4 <vTaskInternalSetTimeOutState+0x28>)
 800d4ce:	681a      	ldr	r2, [r3, #0]
 800d4d0:	687b      	ldr	r3, [r7, #4]
 800d4d2:	605a      	str	r2, [r3, #4]
}
 800d4d4:	bf00      	nop
 800d4d6:	370c      	adds	r7, #12
 800d4d8:	46bd      	mov	sp, r7
 800d4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4de:	4770      	bx	lr
 800d4e0:	20002adc 	.word	0x20002adc
 800d4e4:	20002ac8 	.word	0x20002ac8

0800d4e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d4e8:	b580      	push	{r7, lr}
 800d4ea:	b088      	sub	sp, #32
 800d4ec:	af00      	add	r7, sp, #0
 800d4ee:	6078      	str	r0, [r7, #4]
 800d4f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d4f2:	687b      	ldr	r3, [r7, #4]
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d10a      	bne.n	800d50e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800d4f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4fc:	f383 8811 	msr	BASEPRI, r3
 800d500:	f3bf 8f6f 	isb	sy
 800d504:	f3bf 8f4f 	dsb	sy
 800d508:	613b      	str	r3, [r7, #16]
}
 800d50a:	bf00      	nop
 800d50c:	e7fe      	b.n	800d50c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	2b00      	cmp	r3, #0
 800d512:	d10a      	bne.n	800d52a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800d514:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d518:	f383 8811 	msr	BASEPRI, r3
 800d51c:	f3bf 8f6f 	isb	sy
 800d520:	f3bf 8f4f 	dsb	sy
 800d524:	60fb      	str	r3, [r7, #12]
}
 800d526:	bf00      	nop
 800d528:	e7fe      	b.n	800d528 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800d52a:	f000 ff8b 	bl	800e444 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d52e:	4b1d      	ldr	r3, [pc, #116]	; (800d5a4 <xTaskCheckForTimeOut+0xbc>)
 800d530:	681b      	ldr	r3, [r3, #0]
 800d532:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d534:	687b      	ldr	r3, [r7, #4]
 800d536:	685b      	ldr	r3, [r3, #4]
 800d538:	69ba      	ldr	r2, [r7, #24]
 800d53a:	1ad3      	subs	r3, r2, r3
 800d53c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d53e:	683b      	ldr	r3, [r7, #0]
 800d540:	681b      	ldr	r3, [r3, #0]
 800d542:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d546:	d102      	bne.n	800d54e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d548:	2300      	movs	r3, #0
 800d54a:	61fb      	str	r3, [r7, #28]
 800d54c:	e023      	b.n	800d596 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d54e:	687b      	ldr	r3, [r7, #4]
 800d550:	681a      	ldr	r2, [r3, #0]
 800d552:	4b15      	ldr	r3, [pc, #84]	; (800d5a8 <xTaskCheckForTimeOut+0xc0>)
 800d554:	681b      	ldr	r3, [r3, #0]
 800d556:	429a      	cmp	r2, r3
 800d558:	d007      	beq.n	800d56a <xTaskCheckForTimeOut+0x82>
 800d55a:	687b      	ldr	r3, [r7, #4]
 800d55c:	685b      	ldr	r3, [r3, #4]
 800d55e:	69ba      	ldr	r2, [r7, #24]
 800d560:	429a      	cmp	r2, r3
 800d562:	d302      	bcc.n	800d56a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d564:	2301      	movs	r3, #1
 800d566:	61fb      	str	r3, [r7, #28]
 800d568:	e015      	b.n	800d596 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	697a      	ldr	r2, [r7, #20]
 800d570:	429a      	cmp	r2, r3
 800d572:	d20b      	bcs.n	800d58c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d574:	683b      	ldr	r3, [r7, #0]
 800d576:	681a      	ldr	r2, [r3, #0]
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	1ad2      	subs	r2, r2, r3
 800d57c:	683b      	ldr	r3, [r7, #0]
 800d57e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d580:	6878      	ldr	r0, [r7, #4]
 800d582:	f7ff ff9b 	bl	800d4bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d586:	2300      	movs	r3, #0
 800d588:	61fb      	str	r3, [r7, #28]
 800d58a:	e004      	b.n	800d596 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800d58c:	683b      	ldr	r3, [r7, #0]
 800d58e:	2200      	movs	r2, #0
 800d590:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d592:	2301      	movs	r3, #1
 800d594:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d596:	f000 ff85 	bl	800e4a4 <vPortExitCritical>

	return xReturn;
 800d59a:	69fb      	ldr	r3, [r7, #28]
}
 800d59c:	4618      	mov	r0, r3
 800d59e:	3720      	adds	r7, #32
 800d5a0:	46bd      	mov	sp, r7
 800d5a2:	bd80      	pop	{r7, pc}
 800d5a4:	20002ac8 	.word	0x20002ac8
 800d5a8:	20002adc 	.word	0x20002adc

0800d5ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d5ac:	b480      	push	{r7}
 800d5ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d5b0:	4b03      	ldr	r3, [pc, #12]	; (800d5c0 <vTaskMissedYield+0x14>)
 800d5b2:	2201      	movs	r2, #1
 800d5b4:	601a      	str	r2, [r3, #0]
}
 800d5b6:	bf00      	nop
 800d5b8:	46bd      	mov	sp, r7
 800d5ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5be:	4770      	bx	lr
 800d5c0:	20002ad8 	.word	0x20002ad8

0800d5c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d5c4:	b580      	push	{r7, lr}
 800d5c6:	b082      	sub	sp, #8
 800d5c8:	af00      	add	r7, sp, #0
 800d5ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d5cc:	f000 f852 	bl	800d674 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d5d0:	4b06      	ldr	r3, [pc, #24]	; (800d5ec <prvIdleTask+0x28>)
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	2b01      	cmp	r3, #1
 800d5d6:	d9f9      	bls.n	800d5cc <prvIdleTask+0x8>
			{
				taskYIELD();
 800d5d8:	4b05      	ldr	r3, [pc, #20]	; (800d5f0 <prvIdleTask+0x2c>)
 800d5da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d5de:	601a      	str	r2, [r3, #0]
 800d5e0:	f3bf 8f4f 	dsb	sy
 800d5e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d5e8:	e7f0      	b.n	800d5cc <prvIdleTask+0x8>
 800d5ea:	bf00      	nop
 800d5ec:	200025f4 	.word	0x200025f4
 800d5f0:	e000ed04 	.word	0xe000ed04

0800d5f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d5f4:	b580      	push	{r7, lr}
 800d5f6:	b082      	sub	sp, #8
 800d5f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d5fa:	2300      	movs	r3, #0
 800d5fc:	607b      	str	r3, [r7, #4]
 800d5fe:	e00c      	b.n	800d61a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d600:	687a      	ldr	r2, [r7, #4]
 800d602:	4613      	mov	r3, r2
 800d604:	009b      	lsls	r3, r3, #2
 800d606:	4413      	add	r3, r2
 800d608:	009b      	lsls	r3, r3, #2
 800d60a:	4a12      	ldr	r2, [pc, #72]	; (800d654 <prvInitialiseTaskLists+0x60>)
 800d60c:	4413      	add	r3, r2
 800d60e:	4618      	mov	r0, r3
 800d610:	f7fe f874 	bl	800b6fc <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d614:	687b      	ldr	r3, [r7, #4]
 800d616:	3301      	adds	r3, #1
 800d618:	607b      	str	r3, [r7, #4]
 800d61a:	687b      	ldr	r3, [r7, #4]
 800d61c:	2b37      	cmp	r3, #55	; 0x37
 800d61e:	d9ef      	bls.n	800d600 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d620:	480d      	ldr	r0, [pc, #52]	; (800d658 <prvInitialiseTaskLists+0x64>)
 800d622:	f7fe f86b 	bl	800b6fc <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d626:	480d      	ldr	r0, [pc, #52]	; (800d65c <prvInitialiseTaskLists+0x68>)
 800d628:	f7fe f868 	bl	800b6fc <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d62c:	480c      	ldr	r0, [pc, #48]	; (800d660 <prvInitialiseTaskLists+0x6c>)
 800d62e:	f7fe f865 	bl	800b6fc <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d632:	480c      	ldr	r0, [pc, #48]	; (800d664 <prvInitialiseTaskLists+0x70>)
 800d634:	f7fe f862 	bl	800b6fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d638:	480b      	ldr	r0, [pc, #44]	; (800d668 <prvInitialiseTaskLists+0x74>)
 800d63a:	f7fe f85f 	bl	800b6fc <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d63e:	4b0b      	ldr	r3, [pc, #44]	; (800d66c <prvInitialiseTaskLists+0x78>)
 800d640:	4a05      	ldr	r2, [pc, #20]	; (800d658 <prvInitialiseTaskLists+0x64>)
 800d642:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d644:	4b0a      	ldr	r3, [pc, #40]	; (800d670 <prvInitialiseTaskLists+0x7c>)
 800d646:	4a05      	ldr	r2, [pc, #20]	; (800d65c <prvInitialiseTaskLists+0x68>)
 800d648:	601a      	str	r2, [r3, #0]
}
 800d64a:	bf00      	nop
 800d64c:	3708      	adds	r7, #8
 800d64e:	46bd      	mov	sp, r7
 800d650:	bd80      	pop	{r7, pc}
 800d652:	bf00      	nop
 800d654:	200025f4 	.word	0x200025f4
 800d658:	20002a54 	.word	0x20002a54
 800d65c:	20002a68 	.word	0x20002a68
 800d660:	20002a84 	.word	0x20002a84
 800d664:	20002a98 	.word	0x20002a98
 800d668:	20002ab0 	.word	0x20002ab0
 800d66c:	20002a7c 	.word	0x20002a7c
 800d670:	20002a80 	.word	0x20002a80

0800d674 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d674:	b580      	push	{r7, lr}
 800d676:	b082      	sub	sp, #8
 800d678:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d67a:	e019      	b.n	800d6b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d67c:	f000 fee2 	bl	800e444 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d680:	4b10      	ldr	r3, [pc, #64]	; (800d6c4 <prvCheckTasksWaitingTermination+0x50>)
 800d682:	68db      	ldr	r3, [r3, #12]
 800d684:	68db      	ldr	r3, [r3, #12]
 800d686:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d688:	687b      	ldr	r3, [r7, #4]
 800d68a:	3304      	adds	r3, #4
 800d68c:	4618      	mov	r0, r3
 800d68e:	f7fe f8bf 	bl	800b810 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d692:	4b0d      	ldr	r3, [pc, #52]	; (800d6c8 <prvCheckTasksWaitingTermination+0x54>)
 800d694:	681b      	ldr	r3, [r3, #0]
 800d696:	3b01      	subs	r3, #1
 800d698:	4a0b      	ldr	r2, [pc, #44]	; (800d6c8 <prvCheckTasksWaitingTermination+0x54>)
 800d69a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d69c:	4b0b      	ldr	r3, [pc, #44]	; (800d6cc <prvCheckTasksWaitingTermination+0x58>)
 800d69e:	681b      	ldr	r3, [r3, #0]
 800d6a0:	3b01      	subs	r3, #1
 800d6a2:	4a0a      	ldr	r2, [pc, #40]	; (800d6cc <prvCheckTasksWaitingTermination+0x58>)
 800d6a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d6a6:	f000 fefd 	bl	800e4a4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d6aa:	6878      	ldr	r0, [r7, #4]
 800d6ac:	f000 f810 	bl	800d6d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d6b0:	4b06      	ldr	r3, [pc, #24]	; (800d6cc <prvCheckTasksWaitingTermination+0x58>)
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	2b00      	cmp	r3, #0
 800d6b6:	d1e1      	bne.n	800d67c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d6b8:	bf00      	nop
 800d6ba:	bf00      	nop
 800d6bc:	3708      	adds	r7, #8
 800d6be:	46bd      	mov	sp, r7
 800d6c0:	bd80      	pop	{r7, pc}
 800d6c2:	bf00      	nop
 800d6c4:	20002a98 	.word	0x20002a98
 800d6c8:	20002ac4 	.word	0x20002ac4
 800d6cc:	20002aac 	.word	0x20002aac

0800d6d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d6d0:	b580      	push	{r7, lr}
 800d6d2:	b084      	sub	sp, #16
 800d6d4:	af00      	add	r7, sp, #0
 800d6d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800d6d8:	687b      	ldr	r3, [r7, #4]
 800d6da:	3354      	adds	r3, #84	; 0x54
 800d6dc:	4618      	mov	r0, r3
 800d6de:	f001 faa1 	bl	800ec24 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d6e8:	2b00      	cmp	r3, #0
 800d6ea:	d108      	bne.n	800d6fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d6ec:	687b      	ldr	r3, [r7, #4]
 800d6ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d6f0:	4618      	mov	r0, r3
 800d6f2:	f001 f895 	bl	800e820 <vPortFree>
				vPortFree( pxTCB );
 800d6f6:	6878      	ldr	r0, [r7, #4]
 800d6f8:	f001 f892 	bl	800e820 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d6fc:	e018      	b.n	800d730 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d6fe:	687b      	ldr	r3, [r7, #4]
 800d700:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d704:	2b01      	cmp	r3, #1
 800d706:	d103      	bne.n	800d710 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800d708:	6878      	ldr	r0, [r7, #4]
 800d70a:	f001 f889 	bl	800e820 <vPortFree>
	}
 800d70e:	e00f      	b.n	800d730 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d710:	687b      	ldr	r3, [r7, #4]
 800d712:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800d716:	2b02      	cmp	r3, #2
 800d718:	d00a      	beq.n	800d730 <prvDeleteTCB+0x60>
	__asm volatile
 800d71a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d71e:	f383 8811 	msr	BASEPRI, r3
 800d722:	f3bf 8f6f 	isb	sy
 800d726:	f3bf 8f4f 	dsb	sy
 800d72a:	60fb      	str	r3, [r7, #12]
}
 800d72c:	bf00      	nop
 800d72e:	e7fe      	b.n	800d72e <prvDeleteTCB+0x5e>
	}
 800d730:	bf00      	nop
 800d732:	3710      	adds	r7, #16
 800d734:	46bd      	mov	sp, r7
 800d736:	bd80      	pop	{r7, pc}

0800d738 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d738:	b480      	push	{r7}
 800d73a:	b083      	sub	sp, #12
 800d73c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d73e:	4b0c      	ldr	r3, [pc, #48]	; (800d770 <prvResetNextTaskUnblockTime+0x38>)
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	681b      	ldr	r3, [r3, #0]
 800d744:	2b00      	cmp	r3, #0
 800d746:	d104      	bne.n	800d752 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d748:	4b0a      	ldr	r3, [pc, #40]	; (800d774 <prvResetNextTaskUnblockTime+0x3c>)
 800d74a:	f04f 32ff 	mov.w	r2, #4294967295
 800d74e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d750:	e008      	b.n	800d764 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d752:	4b07      	ldr	r3, [pc, #28]	; (800d770 <prvResetNextTaskUnblockTime+0x38>)
 800d754:	681b      	ldr	r3, [r3, #0]
 800d756:	68db      	ldr	r3, [r3, #12]
 800d758:	68db      	ldr	r3, [r3, #12]
 800d75a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	685b      	ldr	r3, [r3, #4]
 800d760:	4a04      	ldr	r2, [pc, #16]	; (800d774 <prvResetNextTaskUnblockTime+0x3c>)
 800d762:	6013      	str	r3, [r2, #0]
}
 800d764:	bf00      	nop
 800d766:	370c      	adds	r7, #12
 800d768:	46bd      	mov	sp, r7
 800d76a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d76e:	4770      	bx	lr
 800d770:	20002a7c 	.word	0x20002a7c
 800d774:	20002ae4 	.word	0x20002ae4

0800d778 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 800d778:	b480      	push	{r7}
 800d77a:	b083      	sub	sp, #12
 800d77c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800d77e:	4b05      	ldr	r3, [pc, #20]	; (800d794 <xTaskGetCurrentTaskHandle+0x1c>)
 800d780:	681b      	ldr	r3, [r3, #0]
 800d782:	607b      	str	r3, [r7, #4]

		return xReturn;
 800d784:	687b      	ldr	r3, [r7, #4]
	}
 800d786:	4618      	mov	r0, r3
 800d788:	370c      	adds	r7, #12
 800d78a:	46bd      	mov	sp, r7
 800d78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d790:	4770      	bx	lr
 800d792:	bf00      	nop
 800d794:	200025f0 	.word	0x200025f0

0800d798 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d798:	b480      	push	{r7}
 800d79a:	b083      	sub	sp, #12
 800d79c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d79e:	4b0b      	ldr	r3, [pc, #44]	; (800d7cc <xTaskGetSchedulerState+0x34>)
 800d7a0:	681b      	ldr	r3, [r3, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d102      	bne.n	800d7ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	607b      	str	r3, [r7, #4]
 800d7aa:	e008      	b.n	800d7be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7ac:	4b08      	ldr	r3, [pc, #32]	; (800d7d0 <xTaskGetSchedulerState+0x38>)
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	d102      	bne.n	800d7ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d7b4:	2302      	movs	r3, #2
 800d7b6:	607b      	str	r3, [r7, #4]
 800d7b8:	e001      	b.n	800d7be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d7ba:	2300      	movs	r3, #0
 800d7bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d7be:	687b      	ldr	r3, [r7, #4]
	}
 800d7c0:	4618      	mov	r0, r3
 800d7c2:	370c      	adds	r7, #12
 800d7c4:	46bd      	mov	sp, r7
 800d7c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d7ca:	4770      	bx	lr
 800d7cc:	20002ad0 	.word	0x20002ad0
 800d7d0:	20002aec 	.word	0x20002aec

0800d7d4 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800d7d4:	b580      	push	{r7, lr}
 800d7d6:	b084      	sub	sp, #16
 800d7d8:	af00      	add	r7, sp, #0
 800d7da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800d7dc:	687b      	ldr	r3, [r7, #4]
 800d7de:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800d7e0:	2300      	movs	r3, #0
 800d7e2:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800d7e4:	687b      	ldr	r3, [r7, #4]
 800d7e6:	2b00      	cmp	r3, #0
 800d7e8:	d051      	beq.n	800d88e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800d7ea:	68bb      	ldr	r3, [r7, #8]
 800d7ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d7ee:	4b2a      	ldr	r3, [pc, #168]	; (800d898 <xTaskPriorityInherit+0xc4>)
 800d7f0:	681b      	ldr	r3, [r3, #0]
 800d7f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d7f4:	429a      	cmp	r2, r3
 800d7f6:	d241      	bcs.n	800d87c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800d7f8:	68bb      	ldr	r3, [r7, #8]
 800d7fa:	699b      	ldr	r3, [r3, #24]
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	db06      	blt.n	800d80e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d800:	4b25      	ldr	r3, [pc, #148]	; (800d898 <xTaskPriorityInherit+0xc4>)
 800d802:	681b      	ldr	r3, [r3, #0]
 800d804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d806:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d80a:	68bb      	ldr	r3, [r7, #8]
 800d80c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800d80e:	68bb      	ldr	r3, [r7, #8]
 800d810:	6959      	ldr	r1, [r3, #20]
 800d812:	68bb      	ldr	r3, [r7, #8]
 800d814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d816:	4613      	mov	r3, r2
 800d818:	009b      	lsls	r3, r3, #2
 800d81a:	4413      	add	r3, r2
 800d81c:	009b      	lsls	r3, r3, #2
 800d81e:	4a1f      	ldr	r2, [pc, #124]	; (800d89c <xTaskPriorityInherit+0xc8>)
 800d820:	4413      	add	r3, r2
 800d822:	4299      	cmp	r1, r3
 800d824:	d122      	bne.n	800d86c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	3304      	adds	r3, #4
 800d82a:	4618      	mov	r0, r3
 800d82c:	f7fd fff0 	bl	800b810 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d830:	4b19      	ldr	r3, [pc, #100]	; (800d898 <xTaskPriorityInherit+0xc4>)
 800d832:	681b      	ldr	r3, [r3, #0]
 800d834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d836:	68bb      	ldr	r3, [r7, #8]
 800d838:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800d83a:	68bb      	ldr	r3, [r7, #8]
 800d83c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d83e:	4b18      	ldr	r3, [pc, #96]	; (800d8a0 <xTaskPriorityInherit+0xcc>)
 800d840:	681b      	ldr	r3, [r3, #0]
 800d842:	429a      	cmp	r2, r3
 800d844:	d903      	bls.n	800d84e <xTaskPriorityInherit+0x7a>
 800d846:	68bb      	ldr	r3, [r7, #8]
 800d848:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d84a:	4a15      	ldr	r2, [pc, #84]	; (800d8a0 <xTaskPriorityInherit+0xcc>)
 800d84c:	6013      	str	r3, [r2, #0]
 800d84e:	68bb      	ldr	r3, [r7, #8]
 800d850:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d852:	4613      	mov	r3, r2
 800d854:	009b      	lsls	r3, r3, #2
 800d856:	4413      	add	r3, r2
 800d858:	009b      	lsls	r3, r3, #2
 800d85a:	4a10      	ldr	r2, [pc, #64]	; (800d89c <xTaskPriorityInherit+0xc8>)
 800d85c:	441a      	add	r2, r3
 800d85e:	68bb      	ldr	r3, [r7, #8]
 800d860:	3304      	adds	r3, #4
 800d862:	4619      	mov	r1, r3
 800d864:	4610      	mov	r0, r2
 800d866:	f7fd ff76 	bl	800b756 <vListInsertEnd>
 800d86a:	e004      	b.n	800d876 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800d86c:	4b0a      	ldr	r3, [pc, #40]	; (800d898 <xTaskPriorityInherit+0xc4>)
 800d86e:	681b      	ldr	r3, [r3, #0]
 800d870:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d872:	68bb      	ldr	r3, [r7, #8]
 800d874:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800d876:	2301      	movs	r3, #1
 800d878:	60fb      	str	r3, [r7, #12]
 800d87a:	e008      	b.n	800d88e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800d87c:	68bb      	ldr	r3, [r7, #8]
 800d87e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d880:	4b05      	ldr	r3, [pc, #20]	; (800d898 <xTaskPriorityInherit+0xc4>)
 800d882:	681b      	ldr	r3, [r3, #0]
 800d884:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d886:	429a      	cmp	r2, r3
 800d888:	d201      	bcs.n	800d88e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800d88a:	2301      	movs	r3, #1
 800d88c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d88e:	68fb      	ldr	r3, [r7, #12]
	}
 800d890:	4618      	mov	r0, r3
 800d892:	3710      	adds	r7, #16
 800d894:	46bd      	mov	sp, r7
 800d896:	bd80      	pop	{r7, pc}
 800d898:	200025f0 	.word	0x200025f0
 800d89c:	200025f4 	.word	0x200025f4
 800d8a0:	20002acc 	.word	0x20002acc

0800d8a4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b086      	sub	sp, #24
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d8b0:	2300      	movs	r3, #0
 800d8b2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d8b4:	687b      	ldr	r3, [r7, #4]
 800d8b6:	2b00      	cmp	r3, #0
 800d8b8:	d056      	beq.n	800d968 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d8ba:	4b2e      	ldr	r3, [pc, #184]	; (800d974 <xTaskPriorityDisinherit+0xd0>)
 800d8bc:	681b      	ldr	r3, [r3, #0]
 800d8be:	693a      	ldr	r2, [r7, #16]
 800d8c0:	429a      	cmp	r2, r3
 800d8c2:	d00a      	beq.n	800d8da <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800d8c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c8:	f383 8811 	msr	BASEPRI, r3
 800d8cc:	f3bf 8f6f 	isb	sy
 800d8d0:	f3bf 8f4f 	dsb	sy
 800d8d4:	60fb      	str	r3, [r7, #12]
}
 800d8d6:	bf00      	nop
 800d8d8:	e7fe      	b.n	800d8d8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800d8da:	693b      	ldr	r3, [r7, #16]
 800d8dc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d10a      	bne.n	800d8f8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800d8e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8e6:	f383 8811 	msr	BASEPRI, r3
 800d8ea:	f3bf 8f6f 	isb	sy
 800d8ee:	f3bf 8f4f 	dsb	sy
 800d8f2:	60bb      	str	r3, [r7, #8]
}
 800d8f4:	bf00      	nop
 800d8f6:	e7fe      	b.n	800d8f6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800d8f8:	693b      	ldr	r3, [r7, #16]
 800d8fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d8fc:	1e5a      	subs	r2, r3, #1
 800d8fe:	693b      	ldr	r3, [r7, #16]
 800d900:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d902:	693b      	ldr	r3, [r7, #16]
 800d904:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d906:	693b      	ldr	r3, [r7, #16]
 800d908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d90a:	429a      	cmp	r2, r3
 800d90c:	d02c      	beq.n	800d968 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d912:	2b00      	cmp	r3, #0
 800d914:	d128      	bne.n	800d968 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d916:	693b      	ldr	r3, [r7, #16]
 800d918:	3304      	adds	r3, #4
 800d91a:	4618      	mov	r0, r3
 800d91c:	f7fd ff78 	bl	800b810 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d920:	693b      	ldr	r3, [r7, #16]
 800d922:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d924:	693b      	ldr	r3, [r7, #16]
 800d926:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d928:	693b      	ldr	r3, [r7, #16]
 800d92a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d92c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d930:	693b      	ldr	r3, [r7, #16]
 800d932:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d934:	693b      	ldr	r3, [r7, #16]
 800d936:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d938:	4b0f      	ldr	r3, [pc, #60]	; (800d978 <xTaskPriorityDisinherit+0xd4>)
 800d93a:	681b      	ldr	r3, [r3, #0]
 800d93c:	429a      	cmp	r2, r3
 800d93e:	d903      	bls.n	800d948 <xTaskPriorityDisinherit+0xa4>
 800d940:	693b      	ldr	r3, [r7, #16]
 800d942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d944:	4a0c      	ldr	r2, [pc, #48]	; (800d978 <xTaskPriorityDisinherit+0xd4>)
 800d946:	6013      	str	r3, [r2, #0]
 800d948:	693b      	ldr	r3, [r7, #16]
 800d94a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d94c:	4613      	mov	r3, r2
 800d94e:	009b      	lsls	r3, r3, #2
 800d950:	4413      	add	r3, r2
 800d952:	009b      	lsls	r3, r3, #2
 800d954:	4a09      	ldr	r2, [pc, #36]	; (800d97c <xTaskPriorityDisinherit+0xd8>)
 800d956:	441a      	add	r2, r3
 800d958:	693b      	ldr	r3, [r7, #16]
 800d95a:	3304      	adds	r3, #4
 800d95c:	4619      	mov	r1, r3
 800d95e:	4610      	mov	r0, r2
 800d960:	f7fd fef9 	bl	800b756 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d964:	2301      	movs	r3, #1
 800d966:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d968:	697b      	ldr	r3, [r7, #20]
	}
 800d96a:	4618      	mov	r0, r3
 800d96c:	3718      	adds	r7, #24
 800d96e:	46bd      	mov	sp, r7
 800d970:	bd80      	pop	{r7, pc}
 800d972:	bf00      	nop
 800d974:	200025f0 	.word	0x200025f0
 800d978:	20002acc 	.word	0x20002acc
 800d97c:	200025f4 	.word	0x200025f4

0800d980 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800d980:	b580      	push	{r7, lr}
 800d982:	b088      	sub	sp, #32
 800d984:	af00      	add	r7, sp, #0
 800d986:	6078      	str	r0, [r7, #4]
 800d988:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800d98a:	687b      	ldr	r3, [r7, #4]
 800d98c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800d98e:	2301      	movs	r3, #1
 800d990:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	2b00      	cmp	r3, #0
 800d996:	d06a      	beq.n	800da6e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800d998:	69bb      	ldr	r3, [r7, #24]
 800d99a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	d10a      	bne.n	800d9b6 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800d9a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9a4:	f383 8811 	msr	BASEPRI, r3
 800d9a8:	f3bf 8f6f 	isb	sy
 800d9ac:	f3bf 8f4f 	dsb	sy
 800d9b0:	60fb      	str	r3, [r7, #12]
}
 800d9b2:	bf00      	nop
 800d9b4:	e7fe      	b.n	800d9b4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800d9b6:	69bb      	ldr	r3, [r7, #24]
 800d9b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9ba:	683a      	ldr	r2, [r7, #0]
 800d9bc:	429a      	cmp	r2, r3
 800d9be:	d902      	bls.n	800d9c6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800d9c0:	683b      	ldr	r3, [r7, #0]
 800d9c2:	61fb      	str	r3, [r7, #28]
 800d9c4:	e002      	b.n	800d9cc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800d9c6:	69bb      	ldr	r3, [r7, #24]
 800d9c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d9ca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800d9cc:	69bb      	ldr	r3, [r7, #24]
 800d9ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d9d0:	69fa      	ldr	r2, [r7, #28]
 800d9d2:	429a      	cmp	r2, r3
 800d9d4:	d04b      	beq.n	800da6e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800d9d6:	69bb      	ldr	r3, [r7, #24]
 800d9d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d9da:	697a      	ldr	r2, [r7, #20]
 800d9dc:	429a      	cmp	r2, r3
 800d9de:	d146      	bne.n	800da6e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800d9e0:	4b25      	ldr	r3, [pc, #148]	; (800da78 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 800d9e2:	681b      	ldr	r3, [r3, #0]
 800d9e4:	69ba      	ldr	r2, [r7, #24]
 800d9e6:	429a      	cmp	r2, r3
 800d9e8:	d10a      	bne.n	800da00 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800d9ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d9ee:	f383 8811 	msr	BASEPRI, r3
 800d9f2:	f3bf 8f6f 	isb	sy
 800d9f6:	f3bf 8f4f 	dsb	sy
 800d9fa:	60bb      	str	r3, [r7, #8]
}
 800d9fc:	bf00      	nop
 800d9fe:	e7fe      	b.n	800d9fe <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800da00:	69bb      	ldr	r3, [r7, #24]
 800da02:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da04:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800da06:	69bb      	ldr	r3, [r7, #24]
 800da08:	69fa      	ldr	r2, [r7, #28]
 800da0a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800da0c:	69bb      	ldr	r3, [r7, #24]
 800da0e:	699b      	ldr	r3, [r3, #24]
 800da10:	2b00      	cmp	r3, #0
 800da12:	db04      	blt.n	800da1e <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800da14:	69fb      	ldr	r3, [r7, #28]
 800da16:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800da1e:	69bb      	ldr	r3, [r7, #24]
 800da20:	6959      	ldr	r1, [r3, #20]
 800da22:	693a      	ldr	r2, [r7, #16]
 800da24:	4613      	mov	r3, r2
 800da26:	009b      	lsls	r3, r3, #2
 800da28:	4413      	add	r3, r2
 800da2a:	009b      	lsls	r3, r3, #2
 800da2c:	4a13      	ldr	r2, [pc, #76]	; (800da7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800da2e:	4413      	add	r3, r2
 800da30:	4299      	cmp	r1, r3
 800da32:	d11c      	bne.n	800da6e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800da34:	69bb      	ldr	r3, [r7, #24]
 800da36:	3304      	adds	r3, #4
 800da38:	4618      	mov	r0, r3
 800da3a:	f7fd fee9 	bl	800b810 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800da3e:	69bb      	ldr	r3, [r7, #24]
 800da40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da42:	4b0f      	ldr	r3, [pc, #60]	; (800da80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	429a      	cmp	r2, r3
 800da48:	d903      	bls.n	800da52 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 800da4a:	69bb      	ldr	r3, [r7, #24]
 800da4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800da4e:	4a0c      	ldr	r2, [pc, #48]	; (800da80 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800da50:	6013      	str	r3, [r2, #0]
 800da52:	69bb      	ldr	r3, [r7, #24]
 800da54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800da56:	4613      	mov	r3, r2
 800da58:	009b      	lsls	r3, r3, #2
 800da5a:	4413      	add	r3, r2
 800da5c:	009b      	lsls	r3, r3, #2
 800da5e:	4a07      	ldr	r2, [pc, #28]	; (800da7c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800da60:	441a      	add	r2, r3
 800da62:	69bb      	ldr	r3, [r7, #24]
 800da64:	3304      	adds	r3, #4
 800da66:	4619      	mov	r1, r3
 800da68:	4610      	mov	r0, r2
 800da6a:	f7fd fe74 	bl	800b756 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800da6e:	bf00      	nop
 800da70:	3720      	adds	r7, #32
 800da72:	46bd      	mov	sp, r7
 800da74:	bd80      	pop	{r7, pc}
 800da76:	bf00      	nop
 800da78:	200025f0 	.word	0x200025f0
 800da7c:	200025f4 	.word	0x200025f4
 800da80:	20002acc 	.word	0x20002acc

0800da84 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800da84:	b480      	push	{r7}
 800da86:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800da88:	4b07      	ldr	r3, [pc, #28]	; (800daa8 <pvTaskIncrementMutexHeldCount+0x24>)
 800da8a:	681b      	ldr	r3, [r3, #0]
 800da8c:	2b00      	cmp	r3, #0
 800da8e:	d004      	beq.n	800da9a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800da90:	4b05      	ldr	r3, [pc, #20]	; (800daa8 <pvTaskIncrementMutexHeldCount+0x24>)
 800da92:	681b      	ldr	r3, [r3, #0]
 800da94:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800da96:	3201      	adds	r2, #1
 800da98:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800da9a:	4b03      	ldr	r3, [pc, #12]	; (800daa8 <pvTaskIncrementMutexHeldCount+0x24>)
 800da9c:	681b      	ldr	r3, [r3, #0]
	}
 800da9e:	4618      	mov	r0, r3
 800daa0:	46bd      	mov	sp, r7
 800daa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800daa6:	4770      	bx	lr
 800daa8:	200025f0 	.word	0x200025f0

0800daac <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800daac:	b580      	push	{r7, lr}
 800daae:	b084      	sub	sp, #16
 800dab0:	af00      	add	r7, sp, #0
 800dab2:	6078      	str	r0, [r7, #4]
 800dab4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800dab6:	4b21      	ldr	r3, [pc, #132]	; (800db3c <prvAddCurrentTaskToDelayedList+0x90>)
 800dab8:	681b      	ldr	r3, [r3, #0]
 800daba:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dabc:	4b20      	ldr	r3, [pc, #128]	; (800db40 <prvAddCurrentTaskToDelayedList+0x94>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	3304      	adds	r3, #4
 800dac2:	4618      	mov	r0, r3
 800dac4:	f7fd fea4 	bl	800b810 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800dac8:	687b      	ldr	r3, [r7, #4]
 800daca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800dace:	d10a      	bne.n	800dae6 <prvAddCurrentTaskToDelayedList+0x3a>
 800dad0:	683b      	ldr	r3, [r7, #0]
 800dad2:	2b00      	cmp	r3, #0
 800dad4:	d007      	beq.n	800dae6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dad6:	4b1a      	ldr	r3, [pc, #104]	; (800db40 <prvAddCurrentTaskToDelayedList+0x94>)
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	3304      	adds	r3, #4
 800dadc:	4619      	mov	r1, r3
 800dade:	4819      	ldr	r0, [pc, #100]	; (800db44 <prvAddCurrentTaskToDelayedList+0x98>)
 800dae0:	f7fd fe39 	bl	800b756 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800dae4:	e026      	b.n	800db34 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dae6:	68fa      	ldr	r2, [r7, #12]
 800dae8:	687b      	ldr	r3, [r7, #4]
 800daea:	4413      	add	r3, r2
 800daec:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800daee:	4b14      	ldr	r3, [pc, #80]	; (800db40 <prvAddCurrentTaskToDelayedList+0x94>)
 800daf0:	681b      	ldr	r3, [r3, #0]
 800daf2:	68ba      	ldr	r2, [r7, #8]
 800daf4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800daf6:	68ba      	ldr	r2, [r7, #8]
 800daf8:	68fb      	ldr	r3, [r7, #12]
 800dafa:	429a      	cmp	r2, r3
 800dafc:	d209      	bcs.n	800db12 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dafe:	4b12      	ldr	r3, [pc, #72]	; (800db48 <prvAddCurrentTaskToDelayedList+0x9c>)
 800db00:	681a      	ldr	r2, [r3, #0]
 800db02:	4b0f      	ldr	r3, [pc, #60]	; (800db40 <prvAddCurrentTaskToDelayedList+0x94>)
 800db04:	681b      	ldr	r3, [r3, #0]
 800db06:	3304      	adds	r3, #4
 800db08:	4619      	mov	r1, r3
 800db0a:	4610      	mov	r0, r2
 800db0c:	f7fd fe47 	bl	800b79e <vListInsert>
}
 800db10:	e010      	b.n	800db34 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800db12:	4b0e      	ldr	r3, [pc, #56]	; (800db4c <prvAddCurrentTaskToDelayedList+0xa0>)
 800db14:	681a      	ldr	r2, [r3, #0]
 800db16:	4b0a      	ldr	r3, [pc, #40]	; (800db40 <prvAddCurrentTaskToDelayedList+0x94>)
 800db18:	681b      	ldr	r3, [r3, #0]
 800db1a:	3304      	adds	r3, #4
 800db1c:	4619      	mov	r1, r3
 800db1e:	4610      	mov	r0, r2
 800db20:	f7fd fe3d 	bl	800b79e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800db24:	4b0a      	ldr	r3, [pc, #40]	; (800db50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db26:	681b      	ldr	r3, [r3, #0]
 800db28:	68ba      	ldr	r2, [r7, #8]
 800db2a:	429a      	cmp	r2, r3
 800db2c:	d202      	bcs.n	800db34 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800db2e:	4a08      	ldr	r2, [pc, #32]	; (800db50 <prvAddCurrentTaskToDelayedList+0xa4>)
 800db30:	68bb      	ldr	r3, [r7, #8]
 800db32:	6013      	str	r3, [r2, #0]
}
 800db34:	bf00      	nop
 800db36:	3710      	adds	r7, #16
 800db38:	46bd      	mov	sp, r7
 800db3a:	bd80      	pop	{r7, pc}
 800db3c:	20002ac8 	.word	0x20002ac8
 800db40:	200025f0 	.word	0x200025f0
 800db44:	20002ab0 	.word	0x20002ab0
 800db48:	20002a80 	.word	0x20002a80
 800db4c:	20002a7c 	.word	0x20002a7c
 800db50:	20002ae4 	.word	0x20002ae4

0800db54 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800db54:	b580      	push	{r7, lr}
 800db56:	b08a      	sub	sp, #40	; 0x28
 800db58:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800db5a:	2300      	movs	r3, #0
 800db5c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800db5e:	f000 fb07 	bl	800e170 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800db62:	4b1c      	ldr	r3, [pc, #112]	; (800dbd4 <xTimerCreateTimerTask+0x80>)
 800db64:	681b      	ldr	r3, [r3, #0]
 800db66:	2b00      	cmp	r3, #0
 800db68:	d021      	beq.n	800dbae <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800db6a:	2300      	movs	r3, #0
 800db6c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800db6e:	2300      	movs	r3, #0
 800db70:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800db72:	1d3a      	adds	r2, r7, #4
 800db74:	f107 0108 	add.w	r1, r7, #8
 800db78:	f107 030c 	add.w	r3, r7, #12
 800db7c:	4618      	mov	r0, r3
 800db7e:	f7fd fda3 	bl	800b6c8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800db82:	6879      	ldr	r1, [r7, #4]
 800db84:	68bb      	ldr	r3, [r7, #8]
 800db86:	68fa      	ldr	r2, [r7, #12]
 800db88:	9202      	str	r2, [sp, #8]
 800db8a:	9301      	str	r3, [sp, #4]
 800db8c:	2302      	movs	r3, #2
 800db8e:	9300      	str	r3, [sp, #0]
 800db90:	2300      	movs	r3, #0
 800db92:	460a      	mov	r2, r1
 800db94:	4910      	ldr	r1, [pc, #64]	; (800dbd8 <xTimerCreateTimerTask+0x84>)
 800db96:	4811      	ldr	r0, [pc, #68]	; (800dbdc <xTimerCreateTimerTask+0x88>)
 800db98:	f7fe ff28 	bl	800c9ec <xTaskCreateStatic>
 800db9c:	4603      	mov	r3, r0
 800db9e:	4a10      	ldr	r2, [pc, #64]	; (800dbe0 <xTimerCreateTimerTask+0x8c>)
 800dba0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800dba2:	4b0f      	ldr	r3, [pc, #60]	; (800dbe0 <xTimerCreateTimerTask+0x8c>)
 800dba4:	681b      	ldr	r3, [r3, #0]
 800dba6:	2b00      	cmp	r3, #0
 800dba8:	d001      	beq.n	800dbae <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800dbaa:	2301      	movs	r3, #1
 800dbac:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800dbae:	697b      	ldr	r3, [r7, #20]
 800dbb0:	2b00      	cmp	r3, #0
 800dbb2:	d10a      	bne.n	800dbca <xTimerCreateTimerTask+0x76>
	__asm volatile
 800dbb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbb8:	f383 8811 	msr	BASEPRI, r3
 800dbbc:	f3bf 8f6f 	isb	sy
 800dbc0:	f3bf 8f4f 	dsb	sy
 800dbc4:	613b      	str	r3, [r7, #16]
}
 800dbc6:	bf00      	nop
 800dbc8:	e7fe      	b.n	800dbc8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800dbca:	697b      	ldr	r3, [r7, #20]
}
 800dbcc:	4618      	mov	r0, r3
 800dbce:	3718      	adds	r7, #24
 800dbd0:	46bd      	mov	sp, r7
 800dbd2:	bd80      	pop	{r7, pc}
 800dbd4:	20002b20 	.word	0x20002b20
 800dbd8:	08010658 	.word	0x08010658
 800dbdc:	0800dd19 	.word	0x0800dd19
 800dbe0:	20002b24 	.word	0x20002b24

0800dbe4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800dbe4:	b580      	push	{r7, lr}
 800dbe6:	b08a      	sub	sp, #40	; 0x28
 800dbe8:	af00      	add	r7, sp, #0
 800dbea:	60f8      	str	r0, [r7, #12]
 800dbec:	60b9      	str	r1, [r7, #8]
 800dbee:	607a      	str	r2, [r7, #4]
 800dbf0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800dbf2:	2300      	movs	r3, #0
 800dbf4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800dbf6:	68fb      	ldr	r3, [r7, #12]
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	d10a      	bne.n	800dc12 <xTimerGenericCommand+0x2e>
	__asm volatile
 800dbfc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc00:	f383 8811 	msr	BASEPRI, r3
 800dc04:	f3bf 8f6f 	isb	sy
 800dc08:	f3bf 8f4f 	dsb	sy
 800dc0c:	623b      	str	r3, [r7, #32]
}
 800dc0e:	bf00      	nop
 800dc10:	e7fe      	b.n	800dc10 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800dc12:	4b1a      	ldr	r3, [pc, #104]	; (800dc7c <xTimerGenericCommand+0x98>)
 800dc14:	681b      	ldr	r3, [r3, #0]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	d02a      	beq.n	800dc70 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800dc1a:	68bb      	ldr	r3, [r7, #8]
 800dc1c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800dc1e:	687b      	ldr	r3, [r7, #4]
 800dc20:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800dc22:	68fb      	ldr	r3, [r7, #12]
 800dc24:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800dc26:	68bb      	ldr	r3, [r7, #8]
 800dc28:	2b05      	cmp	r3, #5
 800dc2a:	dc18      	bgt.n	800dc5e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800dc2c:	f7ff fdb4 	bl	800d798 <xTaskGetSchedulerState>
 800dc30:	4603      	mov	r3, r0
 800dc32:	2b02      	cmp	r3, #2
 800dc34:	d109      	bne.n	800dc4a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800dc36:	4b11      	ldr	r3, [pc, #68]	; (800dc7c <xTimerGenericCommand+0x98>)
 800dc38:	6818      	ldr	r0, [r3, #0]
 800dc3a:	f107 0110 	add.w	r1, r7, #16
 800dc3e:	2300      	movs	r3, #0
 800dc40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dc42:	f7fe f86d 	bl	800bd20 <xQueueGenericSend>
 800dc46:	6278      	str	r0, [r7, #36]	; 0x24
 800dc48:	e012      	b.n	800dc70 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800dc4a:	4b0c      	ldr	r3, [pc, #48]	; (800dc7c <xTimerGenericCommand+0x98>)
 800dc4c:	6818      	ldr	r0, [r3, #0]
 800dc4e:	f107 0110 	add.w	r1, r7, #16
 800dc52:	2300      	movs	r3, #0
 800dc54:	2200      	movs	r2, #0
 800dc56:	f7fe f863 	bl	800bd20 <xQueueGenericSend>
 800dc5a:	6278      	str	r0, [r7, #36]	; 0x24
 800dc5c:	e008      	b.n	800dc70 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800dc5e:	4b07      	ldr	r3, [pc, #28]	; (800dc7c <xTimerGenericCommand+0x98>)
 800dc60:	6818      	ldr	r0, [r3, #0]
 800dc62:	f107 0110 	add.w	r1, r7, #16
 800dc66:	2300      	movs	r3, #0
 800dc68:	683a      	ldr	r2, [r7, #0]
 800dc6a:	f7fe f957 	bl	800bf1c <xQueueGenericSendFromISR>
 800dc6e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800dc70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800dc72:	4618      	mov	r0, r3
 800dc74:	3728      	adds	r7, #40	; 0x28
 800dc76:	46bd      	mov	sp, r7
 800dc78:	bd80      	pop	{r7, pc}
 800dc7a:	bf00      	nop
 800dc7c:	20002b20 	.word	0x20002b20

0800dc80 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800dc80:	b580      	push	{r7, lr}
 800dc82:	b088      	sub	sp, #32
 800dc84:	af02      	add	r7, sp, #8
 800dc86:	6078      	str	r0, [r7, #4]
 800dc88:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800dc8a:	4b22      	ldr	r3, [pc, #136]	; (800dd14 <prvProcessExpiredTimer+0x94>)
 800dc8c:	681b      	ldr	r3, [r3, #0]
 800dc8e:	68db      	ldr	r3, [r3, #12]
 800dc90:	68db      	ldr	r3, [r3, #12]
 800dc92:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800dc94:	697b      	ldr	r3, [r7, #20]
 800dc96:	3304      	adds	r3, #4
 800dc98:	4618      	mov	r0, r3
 800dc9a:	f7fd fdb9 	bl	800b810 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dc9e:	697b      	ldr	r3, [r7, #20]
 800dca0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dca4:	f003 0304 	and.w	r3, r3, #4
 800dca8:	2b00      	cmp	r3, #0
 800dcaa:	d022      	beq.n	800dcf2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800dcac:	697b      	ldr	r3, [r7, #20]
 800dcae:	699a      	ldr	r2, [r3, #24]
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	18d1      	adds	r1, r2, r3
 800dcb4:	687b      	ldr	r3, [r7, #4]
 800dcb6:	683a      	ldr	r2, [r7, #0]
 800dcb8:	6978      	ldr	r0, [r7, #20]
 800dcba:	f000 f8d1 	bl	800de60 <prvInsertTimerInActiveList>
 800dcbe:	4603      	mov	r3, r0
 800dcc0:	2b00      	cmp	r3, #0
 800dcc2:	d01f      	beq.n	800dd04 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	9300      	str	r3, [sp, #0]
 800dcc8:	2300      	movs	r3, #0
 800dcca:	687a      	ldr	r2, [r7, #4]
 800dccc:	2100      	movs	r1, #0
 800dcce:	6978      	ldr	r0, [r7, #20]
 800dcd0:	f7ff ff88 	bl	800dbe4 <xTimerGenericCommand>
 800dcd4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800dcd6:	693b      	ldr	r3, [r7, #16]
 800dcd8:	2b00      	cmp	r3, #0
 800dcda:	d113      	bne.n	800dd04 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800dcdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dce0:	f383 8811 	msr	BASEPRI, r3
 800dce4:	f3bf 8f6f 	isb	sy
 800dce8:	f3bf 8f4f 	dsb	sy
 800dcec:	60fb      	str	r3, [r7, #12]
}
 800dcee:	bf00      	nop
 800dcf0:	e7fe      	b.n	800dcf0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dcf2:	697b      	ldr	r3, [r7, #20]
 800dcf4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dcf8:	f023 0301 	bic.w	r3, r3, #1
 800dcfc:	b2da      	uxtb	r2, r3
 800dcfe:	697b      	ldr	r3, [r7, #20]
 800dd00:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dd04:	697b      	ldr	r3, [r7, #20]
 800dd06:	6a1b      	ldr	r3, [r3, #32]
 800dd08:	6978      	ldr	r0, [r7, #20]
 800dd0a:	4798      	blx	r3
}
 800dd0c:	bf00      	nop
 800dd0e:	3718      	adds	r7, #24
 800dd10:	46bd      	mov	sp, r7
 800dd12:	bd80      	pop	{r7, pc}
 800dd14:	20002b18 	.word	0x20002b18

0800dd18 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800dd18:	b580      	push	{r7, lr}
 800dd1a:	b084      	sub	sp, #16
 800dd1c:	af00      	add	r7, sp, #0
 800dd1e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd20:	f107 0308 	add.w	r3, r7, #8
 800dd24:	4618      	mov	r0, r3
 800dd26:	f000 f857 	bl	800ddd8 <prvGetNextExpireTime>
 800dd2a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800dd2c:	68bb      	ldr	r3, [r7, #8]
 800dd2e:	4619      	mov	r1, r3
 800dd30:	68f8      	ldr	r0, [r7, #12]
 800dd32:	f000 f803 	bl	800dd3c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800dd36:	f000 f8d5 	bl	800dee4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800dd3a:	e7f1      	b.n	800dd20 <prvTimerTask+0x8>

0800dd3c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800dd3c:	b580      	push	{r7, lr}
 800dd3e:	b084      	sub	sp, #16
 800dd40:	af00      	add	r7, sp, #0
 800dd42:	6078      	str	r0, [r7, #4]
 800dd44:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800dd46:	f7ff f92b 	bl	800cfa0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800dd4a:	f107 0308 	add.w	r3, r7, #8
 800dd4e:	4618      	mov	r0, r3
 800dd50:	f000 f866 	bl	800de20 <prvSampleTimeNow>
 800dd54:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800dd56:	68bb      	ldr	r3, [r7, #8]
 800dd58:	2b00      	cmp	r3, #0
 800dd5a:	d130      	bne.n	800ddbe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800dd5c:	683b      	ldr	r3, [r7, #0]
 800dd5e:	2b00      	cmp	r3, #0
 800dd60:	d10a      	bne.n	800dd78 <prvProcessTimerOrBlockTask+0x3c>
 800dd62:	687a      	ldr	r2, [r7, #4]
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	429a      	cmp	r2, r3
 800dd68:	d806      	bhi.n	800dd78 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800dd6a:	f7ff f927 	bl	800cfbc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800dd6e:	68f9      	ldr	r1, [r7, #12]
 800dd70:	6878      	ldr	r0, [r7, #4]
 800dd72:	f7ff ff85 	bl	800dc80 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800dd76:	e024      	b.n	800ddc2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800dd78:	683b      	ldr	r3, [r7, #0]
 800dd7a:	2b00      	cmp	r3, #0
 800dd7c:	d008      	beq.n	800dd90 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800dd7e:	4b13      	ldr	r3, [pc, #76]	; (800ddcc <prvProcessTimerOrBlockTask+0x90>)
 800dd80:	681b      	ldr	r3, [r3, #0]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	2b00      	cmp	r3, #0
 800dd86:	d101      	bne.n	800dd8c <prvProcessTimerOrBlockTask+0x50>
 800dd88:	2301      	movs	r3, #1
 800dd8a:	e000      	b.n	800dd8e <prvProcessTimerOrBlockTask+0x52>
 800dd8c:	2300      	movs	r3, #0
 800dd8e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800dd90:	4b0f      	ldr	r3, [pc, #60]	; (800ddd0 <prvProcessTimerOrBlockTask+0x94>)
 800dd92:	6818      	ldr	r0, [r3, #0]
 800dd94:	687a      	ldr	r2, [r7, #4]
 800dd96:	68fb      	ldr	r3, [r7, #12]
 800dd98:	1ad3      	subs	r3, r2, r3
 800dd9a:	683a      	ldr	r2, [r7, #0]
 800dd9c:	4619      	mov	r1, r3
 800dd9e:	f7fe fdf1 	bl	800c984 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800dda2:	f7ff f90b 	bl	800cfbc <xTaskResumeAll>
 800dda6:	4603      	mov	r3, r0
 800dda8:	2b00      	cmp	r3, #0
 800ddaa:	d10a      	bne.n	800ddc2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ddac:	4b09      	ldr	r3, [pc, #36]	; (800ddd4 <prvProcessTimerOrBlockTask+0x98>)
 800ddae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ddb2:	601a      	str	r2, [r3, #0]
 800ddb4:	f3bf 8f4f 	dsb	sy
 800ddb8:	f3bf 8f6f 	isb	sy
}
 800ddbc:	e001      	b.n	800ddc2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ddbe:	f7ff f8fd 	bl	800cfbc <xTaskResumeAll>
}
 800ddc2:	bf00      	nop
 800ddc4:	3710      	adds	r7, #16
 800ddc6:	46bd      	mov	sp, r7
 800ddc8:	bd80      	pop	{r7, pc}
 800ddca:	bf00      	nop
 800ddcc:	20002b1c 	.word	0x20002b1c
 800ddd0:	20002b20 	.word	0x20002b20
 800ddd4:	e000ed04 	.word	0xe000ed04

0800ddd8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ddd8:	b480      	push	{r7}
 800ddda:	b085      	sub	sp, #20
 800dddc:	af00      	add	r7, sp, #0
 800ddde:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800dde0:	4b0e      	ldr	r3, [pc, #56]	; (800de1c <prvGetNextExpireTime+0x44>)
 800dde2:	681b      	ldr	r3, [r3, #0]
 800dde4:	681b      	ldr	r3, [r3, #0]
 800dde6:	2b00      	cmp	r3, #0
 800dde8:	d101      	bne.n	800ddee <prvGetNextExpireTime+0x16>
 800ddea:	2201      	movs	r2, #1
 800ddec:	e000      	b.n	800ddf0 <prvGetNextExpireTime+0x18>
 800ddee:	2200      	movs	r2, #0
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ddf4:	687b      	ldr	r3, [r7, #4]
 800ddf6:	681b      	ldr	r3, [r3, #0]
 800ddf8:	2b00      	cmp	r3, #0
 800ddfa:	d105      	bne.n	800de08 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ddfc:	4b07      	ldr	r3, [pc, #28]	; (800de1c <prvGetNextExpireTime+0x44>)
 800ddfe:	681b      	ldr	r3, [r3, #0]
 800de00:	68db      	ldr	r3, [r3, #12]
 800de02:	681b      	ldr	r3, [r3, #0]
 800de04:	60fb      	str	r3, [r7, #12]
 800de06:	e001      	b.n	800de0c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800de08:	2300      	movs	r3, #0
 800de0a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800de0c:	68fb      	ldr	r3, [r7, #12]
}
 800de0e:	4618      	mov	r0, r3
 800de10:	3714      	adds	r7, #20
 800de12:	46bd      	mov	sp, r7
 800de14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	20002b18 	.word	0x20002b18

0800de20 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800de20:	b580      	push	{r7, lr}
 800de22:	b084      	sub	sp, #16
 800de24:	af00      	add	r7, sp, #0
 800de26:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800de28:	f7ff f966 	bl	800d0f8 <xTaskGetTickCount>
 800de2c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800de2e:	4b0b      	ldr	r3, [pc, #44]	; (800de5c <prvSampleTimeNow+0x3c>)
 800de30:	681b      	ldr	r3, [r3, #0]
 800de32:	68fa      	ldr	r2, [r7, #12]
 800de34:	429a      	cmp	r2, r3
 800de36:	d205      	bcs.n	800de44 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800de38:	f000 f936 	bl	800e0a8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800de3c:	687b      	ldr	r3, [r7, #4]
 800de3e:	2201      	movs	r2, #1
 800de40:	601a      	str	r2, [r3, #0]
 800de42:	e002      	b.n	800de4a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800de44:	687b      	ldr	r3, [r7, #4]
 800de46:	2200      	movs	r2, #0
 800de48:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800de4a:	4a04      	ldr	r2, [pc, #16]	; (800de5c <prvSampleTimeNow+0x3c>)
 800de4c:	68fb      	ldr	r3, [r7, #12]
 800de4e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800de50:	68fb      	ldr	r3, [r7, #12]
}
 800de52:	4618      	mov	r0, r3
 800de54:	3710      	adds	r7, #16
 800de56:	46bd      	mov	sp, r7
 800de58:	bd80      	pop	{r7, pc}
 800de5a:	bf00      	nop
 800de5c:	20002b28 	.word	0x20002b28

0800de60 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800de60:	b580      	push	{r7, lr}
 800de62:	b086      	sub	sp, #24
 800de64:	af00      	add	r7, sp, #0
 800de66:	60f8      	str	r0, [r7, #12]
 800de68:	60b9      	str	r1, [r7, #8]
 800de6a:	607a      	str	r2, [r7, #4]
 800de6c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800de6e:	2300      	movs	r3, #0
 800de70:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800de72:	68fb      	ldr	r3, [r7, #12]
 800de74:	68ba      	ldr	r2, [r7, #8]
 800de76:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800de78:	68fb      	ldr	r3, [r7, #12]
 800de7a:	68fa      	ldr	r2, [r7, #12]
 800de7c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800de7e:	68ba      	ldr	r2, [r7, #8]
 800de80:	687b      	ldr	r3, [r7, #4]
 800de82:	429a      	cmp	r2, r3
 800de84:	d812      	bhi.n	800deac <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de86:	687a      	ldr	r2, [r7, #4]
 800de88:	683b      	ldr	r3, [r7, #0]
 800de8a:	1ad2      	subs	r2, r2, r3
 800de8c:	68fb      	ldr	r3, [r7, #12]
 800de8e:	699b      	ldr	r3, [r3, #24]
 800de90:	429a      	cmp	r2, r3
 800de92:	d302      	bcc.n	800de9a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800de94:	2301      	movs	r3, #1
 800de96:	617b      	str	r3, [r7, #20]
 800de98:	e01b      	b.n	800ded2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800de9a:	4b10      	ldr	r3, [pc, #64]	; (800dedc <prvInsertTimerInActiveList+0x7c>)
 800de9c:	681a      	ldr	r2, [r3, #0]
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	3304      	adds	r3, #4
 800dea2:	4619      	mov	r1, r3
 800dea4:	4610      	mov	r0, r2
 800dea6:	f7fd fc7a 	bl	800b79e <vListInsert>
 800deaa:	e012      	b.n	800ded2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800deac:	687a      	ldr	r2, [r7, #4]
 800deae:	683b      	ldr	r3, [r7, #0]
 800deb0:	429a      	cmp	r2, r3
 800deb2:	d206      	bcs.n	800dec2 <prvInsertTimerInActiveList+0x62>
 800deb4:	68ba      	ldr	r2, [r7, #8]
 800deb6:	683b      	ldr	r3, [r7, #0]
 800deb8:	429a      	cmp	r2, r3
 800deba:	d302      	bcc.n	800dec2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800debc:	2301      	movs	r3, #1
 800debe:	617b      	str	r3, [r7, #20]
 800dec0:	e007      	b.n	800ded2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800dec2:	4b07      	ldr	r3, [pc, #28]	; (800dee0 <prvInsertTimerInActiveList+0x80>)
 800dec4:	681a      	ldr	r2, [r3, #0]
 800dec6:	68fb      	ldr	r3, [r7, #12]
 800dec8:	3304      	adds	r3, #4
 800deca:	4619      	mov	r1, r3
 800decc:	4610      	mov	r0, r2
 800dece:	f7fd fc66 	bl	800b79e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ded2:	697b      	ldr	r3, [r7, #20]
}
 800ded4:	4618      	mov	r0, r3
 800ded6:	3718      	adds	r7, #24
 800ded8:	46bd      	mov	sp, r7
 800deda:	bd80      	pop	{r7, pc}
 800dedc:	20002b1c 	.word	0x20002b1c
 800dee0:	20002b18 	.word	0x20002b18

0800dee4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b08e      	sub	sp, #56	; 0x38
 800dee8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800deea:	e0ca      	b.n	800e082 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	da18      	bge.n	800df24 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800def2:	1d3b      	adds	r3, r7, #4
 800def4:	3304      	adds	r3, #4
 800def6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800def8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800defa:	2b00      	cmp	r3, #0
 800defc:	d10a      	bne.n	800df14 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800defe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df02:	f383 8811 	msr	BASEPRI, r3
 800df06:	f3bf 8f6f 	isb	sy
 800df0a:	f3bf 8f4f 	dsb	sy
 800df0e:	61fb      	str	r3, [r7, #28]
}
 800df10:	bf00      	nop
 800df12:	e7fe      	b.n	800df12 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800df14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df1a:	6850      	ldr	r0, [r2, #4]
 800df1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df1e:	6892      	ldr	r2, [r2, #8]
 800df20:	4611      	mov	r1, r2
 800df22:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800df24:	687b      	ldr	r3, [r7, #4]
 800df26:	2b00      	cmp	r3, #0
 800df28:	f2c0 80aa 	blt.w	800e080 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800df2c:	68fb      	ldr	r3, [r7, #12]
 800df2e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800df30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df32:	695b      	ldr	r3, [r3, #20]
 800df34:	2b00      	cmp	r3, #0
 800df36:	d004      	beq.n	800df42 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800df38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df3a:	3304      	adds	r3, #4
 800df3c:	4618      	mov	r0, r3
 800df3e:	f7fd fc67 	bl	800b810 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800df42:	463b      	mov	r3, r7
 800df44:	4618      	mov	r0, r3
 800df46:	f7ff ff6b 	bl	800de20 <prvSampleTimeNow>
 800df4a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800df4c:	687b      	ldr	r3, [r7, #4]
 800df4e:	2b09      	cmp	r3, #9
 800df50:	f200 8097 	bhi.w	800e082 <prvProcessReceivedCommands+0x19e>
 800df54:	a201      	add	r2, pc, #4	; (adr r2, 800df5c <prvProcessReceivedCommands+0x78>)
 800df56:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800df5a:	bf00      	nop
 800df5c:	0800df85 	.word	0x0800df85
 800df60:	0800df85 	.word	0x0800df85
 800df64:	0800df85 	.word	0x0800df85
 800df68:	0800dff9 	.word	0x0800dff9
 800df6c:	0800e00d 	.word	0x0800e00d
 800df70:	0800e057 	.word	0x0800e057
 800df74:	0800df85 	.word	0x0800df85
 800df78:	0800df85 	.word	0x0800df85
 800df7c:	0800dff9 	.word	0x0800dff9
 800df80:	0800e00d 	.word	0x0800e00d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800df84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df86:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800df8a:	f043 0301 	orr.w	r3, r3, #1
 800df8e:	b2da      	uxtb	r2, r3
 800df90:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df92:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800df96:	68ba      	ldr	r2, [r7, #8]
 800df98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800df9a:	699b      	ldr	r3, [r3, #24]
 800df9c:	18d1      	adds	r1, r2, r3
 800df9e:	68bb      	ldr	r3, [r7, #8]
 800dfa0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfa2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfa4:	f7ff ff5c 	bl	800de60 <prvInsertTimerInActiveList>
 800dfa8:	4603      	mov	r3, r0
 800dfaa:	2b00      	cmp	r3, #0
 800dfac:	d069      	beq.n	800e082 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800dfae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb0:	6a1b      	ldr	r3, [r3, #32]
 800dfb2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfb4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800dfb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfb8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dfbc:	f003 0304 	and.w	r3, r3, #4
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d05e      	beq.n	800e082 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800dfc4:	68ba      	ldr	r2, [r7, #8]
 800dfc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dfc8:	699b      	ldr	r3, [r3, #24]
 800dfca:	441a      	add	r2, r3
 800dfcc:	2300      	movs	r3, #0
 800dfce:	9300      	str	r3, [sp, #0]
 800dfd0:	2300      	movs	r3, #0
 800dfd2:	2100      	movs	r1, #0
 800dfd4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800dfd6:	f7ff fe05 	bl	800dbe4 <xTimerGenericCommand>
 800dfda:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800dfdc:	6a3b      	ldr	r3, [r7, #32]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d14f      	bne.n	800e082 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800dfe2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	61bb      	str	r3, [r7, #24]
}
 800dff4:	bf00      	nop
 800dff6:	e7fe      	b.n	800dff6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800dff8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dffa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800dffe:	f023 0301 	bic.w	r3, r3, #1
 800e002:	b2da      	uxtb	r2, r3
 800e004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e006:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800e00a:	e03a      	b.n	800e082 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800e00c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e00e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e012:	f043 0301 	orr.w	r3, r3, #1
 800e016:	b2da      	uxtb	r2, r3
 800e018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e01a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800e01e:	68ba      	ldr	r2, [r7, #8]
 800e020:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e022:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800e024:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e026:	699b      	ldr	r3, [r3, #24]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d10a      	bne.n	800e042 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800e02c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e030:	f383 8811 	msr	BASEPRI, r3
 800e034:	f3bf 8f6f 	isb	sy
 800e038:	f3bf 8f4f 	dsb	sy
 800e03c:	617b      	str	r3, [r7, #20]
}
 800e03e:	bf00      	nop
 800e040:	e7fe      	b.n	800e040 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800e042:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e044:	699a      	ldr	r2, [r3, #24]
 800e046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e048:	18d1      	adds	r1, r2, r3
 800e04a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e04c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e04e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e050:	f7ff ff06 	bl	800de60 <prvInsertTimerInActiveList>
					break;
 800e054:	e015      	b.n	800e082 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800e056:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e05c:	f003 0302 	and.w	r3, r3, #2
 800e060:	2b00      	cmp	r3, #0
 800e062:	d103      	bne.n	800e06c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800e064:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e066:	f000 fbdb 	bl	800e820 <vPortFree>
 800e06a:	e00a      	b.n	800e082 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800e06c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e06e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e072:	f023 0301 	bic.w	r3, r3, #1
 800e076:	b2da      	uxtb	r2, r3
 800e078:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e07a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800e07e:	e000      	b.n	800e082 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800e080:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800e082:	4b08      	ldr	r3, [pc, #32]	; (800e0a4 <prvProcessReceivedCommands+0x1c0>)
 800e084:	681b      	ldr	r3, [r3, #0]
 800e086:	1d39      	adds	r1, r7, #4
 800e088:	2200      	movs	r2, #0
 800e08a:	4618      	mov	r0, r3
 800e08c:	f7fe f86e 	bl	800c16c <xQueueReceive>
 800e090:	4603      	mov	r3, r0
 800e092:	2b00      	cmp	r3, #0
 800e094:	f47f af2a 	bne.w	800deec <prvProcessReceivedCommands+0x8>
	}
}
 800e098:	bf00      	nop
 800e09a:	bf00      	nop
 800e09c:	3730      	adds	r7, #48	; 0x30
 800e09e:	46bd      	mov	sp, r7
 800e0a0:	bd80      	pop	{r7, pc}
 800e0a2:	bf00      	nop
 800e0a4:	20002b20 	.word	0x20002b20

0800e0a8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800e0a8:	b580      	push	{r7, lr}
 800e0aa:	b088      	sub	sp, #32
 800e0ac:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e0ae:	e048      	b.n	800e142 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e0b0:	4b2d      	ldr	r3, [pc, #180]	; (800e168 <prvSwitchTimerLists+0xc0>)
 800e0b2:	681b      	ldr	r3, [r3, #0]
 800e0b4:	68db      	ldr	r3, [r3, #12]
 800e0b6:	681b      	ldr	r3, [r3, #0]
 800e0b8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ba:	4b2b      	ldr	r3, [pc, #172]	; (800e168 <prvSwitchTimerLists+0xc0>)
 800e0bc:	681b      	ldr	r3, [r3, #0]
 800e0be:	68db      	ldr	r3, [r3, #12]
 800e0c0:	68db      	ldr	r3, [r3, #12]
 800e0c2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e0c4:	68fb      	ldr	r3, [r7, #12]
 800e0c6:	3304      	adds	r3, #4
 800e0c8:	4618      	mov	r0, r3
 800e0ca:	f7fd fba1 	bl	800b810 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e0ce:	68fb      	ldr	r3, [r7, #12]
 800e0d0:	6a1b      	ldr	r3, [r3, #32]
 800e0d2:	68f8      	ldr	r0, [r7, #12]
 800e0d4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e0d6:	68fb      	ldr	r3, [r7, #12]
 800e0d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800e0dc:	f003 0304 	and.w	r3, r3, #4
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d02e      	beq.n	800e142 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	699b      	ldr	r3, [r3, #24]
 800e0e8:	693a      	ldr	r2, [r7, #16]
 800e0ea:	4413      	add	r3, r2
 800e0ec:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800e0ee:	68ba      	ldr	r2, [r7, #8]
 800e0f0:	693b      	ldr	r3, [r7, #16]
 800e0f2:	429a      	cmp	r2, r3
 800e0f4:	d90e      	bls.n	800e114 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	68ba      	ldr	r2, [r7, #8]
 800e0fa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e0fc:	68fb      	ldr	r3, [r7, #12]
 800e0fe:	68fa      	ldr	r2, [r7, #12]
 800e100:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e102:	4b19      	ldr	r3, [pc, #100]	; (800e168 <prvSwitchTimerLists+0xc0>)
 800e104:	681a      	ldr	r2, [r3, #0]
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	3304      	adds	r3, #4
 800e10a:	4619      	mov	r1, r3
 800e10c:	4610      	mov	r0, r2
 800e10e:	f7fd fb46 	bl	800b79e <vListInsert>
 800e112:	e016      	b.n	800e142 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e114:	2300      	movs	r3, #0
 800e116:	9300      	str	r3, [sp, #0]
 800e118:	2300      	movs	r3, #0
 800e11a:	693a      	ldr	r2, [r7, #16]
 800e11c:	2100      	movs	r1, #0
 800e11e:	68f8      	ldr	r0, [r7, #12]
 800e120:	f7ff fd60 	bl	800dbe4 <xTimerGenericCommand>
 800e124:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800e126:	687b      	ldr	r3, [r7, #4]
 800e128:	2b00      	cmp	r3, #0
 800e12a:	d10a      	bne.n	800e142 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800e12c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e130:	f383 8811 	msr	BASEPRI, r3
 800e134:	f3bf 8f6f 	isb	sy
 800e138:	f3bf 8f4f 	dsb	sy
 800e13c:	603b      	str	r3, [r7, #0]
}
 800e13e:	bf00      	nop
 800e140:	e7fe      	b.n	800e140 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e142:	4b09      	ldr	r3, [pc, #36]	; (800e168 <prvSwitchTimerLists+0xc0>)
 800e144:	681b      	ldr	r3, [r3, #0]
 800e146:	681b      	ldr	r3, [r3, #0]
 800e148:	2b00      	cmp	r3, #0
 800e14a:	d1b1      	bne.n	800e0b0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800e14c:	4b06      	ldr	r3, [pc, #24]	; (800e168 <prvSwitchTimerLists+0xc0>)
 800e14e:	681b      	ldr	r3, [r3, #0]
 800e150:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800e152:	4b06      	ldr	r3, [pc, #24]	; (800e16c <prvSwitchTimerLists+0xc4>)
 800e154:	681b      	ldr	r3, [r3, #0]
 800e156:	4a04      	ldr	r2, [pc, #16]	; (800e168 <prvSwitchTimerLists+0xc0>)
 800e158:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e15a:	4a04      	ldr	r2, [pc, #16]	; (800e16c <prvSwitchTimerLists+0xc4>)
 800e15c:	697b      	ldr	r3, [r7, #20]
 800e15e:	6013      	str	r3, [r2, #0]
}
 800e160:	bf00      	nop
 800e162:	3718      	adds	r7, #24
 800e164:	46bd      	mov	sp, r7
 800e166:	bd80      	pop	{r7, pc}
 800e168:	20002b18 	.word	0x20002b18
 800e16c:	20002b1c 	.word	0x20002b1c

0800e170 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e170:	b580      	push	{r7, lr}
 800e172:	b082      	sub	sp, #8
 800e174:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800e176:	f000 f965 	bl	800e444 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800e17a:	4b15      	ldr	r3, [pc, #84]	; (800e1d0 <prvCheckForValidListAndQueue+0x60>)
 800e17c:	681b      	ldr	r3, [r3, #0]
 800e17e:	2b00      	cmp	r3, #0
 800e180:	d120      	bne.n	800e1c4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800e182:	4814      	ldr	r0, [pc, #80]	; (800e1d4 <prvCheckForValidListAndQueue+0x64>)
 800e184:	f7fd faba 	bl	800b6fc <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e188:	4813      	ldr	r0, [pc, #76]	; (800e1d8 <prvCheckForValidListAndQueue+0x68>)
 800e18a:	f7fd fab7 	bl	800b6fc <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e18e:	4b13      	ldr	r3, [pc, #76]	; (800e1dc <prvCheckForValidListAndQueue+0x6c>)
 800e190:	4a10      	ldr	r2, [pc, #64]	; (800e1d4 <prvCheckForValidListAndQueue+0x64>)
 800e192:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800e194:	4b12      	ldr	r3, [pc, #72]	; (800e1e0 <prvCheckForValidListAndQueue+0x70>)
 800e196:	4a10      	ldr	r2, [pc, #64]	; (800e1d8 <prvCheckForValidListAndQueue+0x68>)
 800e198:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e19a:	2300      	movs	r3, #0
 800e19c:	9300      	str	r3, [sp, #0]
 800e19e:	4b11      	ldr	r3, [pc, #68]	; (800e1e4 <prvCheckForValidListAndQueue+0x74>)
 800e1a0:	4a11      	ldr	r2, [pc, #68]	; (800e1e8 <prvCheckForValidListAndQueue+0x78>)
 800e1a2:	2110      	movs	r1, #16
 800e1a4:	200a      	movs	r0, #10
 800e1a6:	f7fd fbc5 	bl	800b934 <xQueueGenericCreateStatic>
 800e1aa:	4603      	mov	r3, r0
 800e1ac:	4a08      	ldr	r2, [pc, #32]	; (800e1d0 <prvCheckForValidListAndQueue+0x60>)
 800e1ae:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e1b0:	4b07      	ldr	r3, [pc, #28]	; (800e1d0 <prvCheckForValidListAndQueue+0x60>)
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	2b00      	cmp	r3, #0
 800e1b6:	d005      	beq.n	800e1c4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e1b8:	4b05      	ldr	r3, [pc, #20]	; (800e1d0 <prvCheckForValidListAndQueue+0x60>)
 800e1ba:	681b      	ldr	r3, [r3, #0]
 800e1bc:	490b      	ldr	r1, [pc, #44]	; (800e1ec <prvCheckForValidListAndQueue+0x7c>)
 800e1be:	4618      	mov	r0, r3
 800e1c0:	f7fe fb8c 	bl	800c8dc <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1c4:	f000 f96e 	bl	800e4a4 <vPortExitCritical>
}
 800e1c8:	bf00      	nop
 800e1ca:	46bd      	mov	sp, r7
 800e1cc:	bd80      	pop	{r7, pc}
 800e1ce:	bf00      	nop
 800e1d0:	20002b20 	.word	0x20002b20
 800e1d4:	20002af0 	.word	0x20002af0
 800e1d8:	20002b04 	.word	0x20002b04
 800e1dc:	20002b18 	.word	0x20002b18
 800e1e0:	20002b1c 	.word	0x20002b1c
 800e1e4:	20002bcc 	.word	0x20002bcc
 800e1e8:	20002b2c 	.word	0x20002b2c
 800e1ec:	08010660 	.word	0x08010660

0800e1f0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800e1f0:	b480      	push	{r7}
 800e1f2:	b085      	sub	sp, #20
 800e1f4:	af00      	add	r7, sp, #0
 800e1f6:	60f8      	str	r0, [r7, #12]
 800e1f8:	60b9      	str	r1, [r7, #8]
 800e1fa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	3b04      	subs	r3, #4
 800e200:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e208:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	3b04      	subs	r3, #4
 800e20e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800e210:	68bb      	ldr	r3, [r7, #8]
 800e212:	f023 0201 	bic.w	r2, r3, #1
 800e216:	68fb      	ldr	r3, [r7, #12]
 800e218:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	3b04      	subs	r3, #4
 800e21e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800e220:	4a0c      	ldr	r2, [pc, #48]	; (800e254 <pxPortInitialiseStack+0x64>)
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800e226:	68fb      	ldr	r3, [r7, #12]
 800e228:	3b14      	subs	r3, #20
 800e22a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800e22c:	687a      	ldr	r2, [r7, #4]
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800e232:	68fb      	ldr	r3, [r7, #12]
 800e234:	3b04      	subs	r3, #4
 800e236:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800e238:	68fb      	ldr	r3, [r7, #12]
 800e23a:	f06f 0202 	mvn.w	r2, #2
 800e23e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800e240:	68fb      	ldr	r3, [r7, #12]
 800e242:	3b20      	subs	r3, #32
 800e244:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800e246:	68fb      	ldr	r3, [r7, #12]
}
 800e248:	4618      	mov	r0, r3
 800e24a:	3714      	adds	r7, #20
 800e24c:	46bd      	mov	sp, r7
 800e24e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e252:	4770      	bx	lr
 800e254:	0800e259 	.word	0x0800e259

0800e258 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800e258:	b480      	push	{r7}
 800e25a:	b085      	sub	sp, #20
 800e25c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800e25e:	2300      	movs	r3, #0
 800e260:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800e262:	4b12      	ldr	r3, [pc, #72]	; (800e2ac <prvTaskExitError+0x54>)
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	f1b3 3fff 	cmp.w	r3, #4294967295
 800e26a:	d00a      	beq.n	800e282 <prvTaskExitError+0x2a>
	__asm volatile
 800e26c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e270:	f383 8811 	msr	BASEPRI, r3
 800e274:	f3bf 8f6f 	isb	sy
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	60fb      	str	r3, [r7, #12]
}
 800e27e:	bf00      	nop
 800e280:	e7fe      	b.n	800e280 <prvTaskExitError+0x28>
	__asm volatile
 800e282:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e286:	f383 8811 	msr	BASEPRI, r3
 800e28a:	f3bf 8f6f 	isb	sy
 800e28e:	f3bf 8f4f 	dsb	sy
 800e292:	60bb      	str	r3, [r7, #8]
}
 800e294:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800e296:	bf00      	nop
 800e298:	687b      	ldr	r3, [r7, #4]
 800e29a:	2b00      	cmp	r3, #0
 800e29c:	d0fc      	beq.n	800e298 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800e29e:	bf00      	nop
 800e2a0:	bf00      	nop
 800e2a2:	3714      	adds	r7, #20
 800e2a4:	46bd      	mov	sp, r7
 800e2a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2aa:	4770      	bx	lr
 800e2ac:	200000a8 	.word	0x200000a8

0800e2b0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800e2b0:	4b07      	ldr	r3, [pc, #28]	; (800e2d0 <pxCurrentTCBConst2>)
 800e2b2:	6819      	ldr	r1, [r3, #0]
 800e2b4:	6808      	ldr	r0, [r1, #0]
 800e2b6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2ba:	f380 8809 	msr	PSP, r0
 800e2be:	f3bf 8f6f 	isb	sy
 800e2c2:	f04f 0000 	mov.w	r0, #0
 800e2c6:	f380 8811 	msr	BASEPRI, r0
 800e2ca:	4770      	bx	lr
 800e2cc:	f3af 8000 	nop.w

0800e2d0 <pxCurrentTCBConst2>:
 800e2d0:	200025f0 	.word	0x200025f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800e2d4:	bf00      	nop
 800e2d6:	bf00      	nop

0800e2d8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800e2d8:	4808      	ldr	r0, [pc, #32]	; (800e2fc <prvPortStartFirstTask+0x24>)
 800e2da:	6800      	ldr	r0, [r0, #0]
 800e2dc:	6800      	ldr	r0, [r0, #0]
 800e2de:	f380 8808 	msr	MSP, r0
 800e2e2:	f04f 0000 	mov.w	r0, #0
 800e2e6:	f380 8814 	msr	CONTROL, r0
 800e2ea:	b662      	cpsie	i
 800e2ec:	b661      	cpsie	f
 800e2ee:	f3bf 8f4f 	dsb	sy
 800e2f2:	f3bf 8f6f 	isb	sy
 800e2f6:	df00      	svc	0
 800e2f8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800e2fa:	bf00      	nop
 800e2fc:	e000ed08 	.word	0xe000ed08

0800e300 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800e300:	b580      	push	{r7, lr}
 800e302:	b086      	sub	sp, #24
 800e304:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e306:	4b46      	ldr	r3, [pc, #280]	; (800e420 <xPortStartScheduler+0x120>)
 800e308:	681b      	ldr	r3, [r3, #0]
 800e30a:	4a46      	ldr	r2, [pc, #280]	; (800e424 <xPortStartScheduler+0x124>)
 800e30c:	4293      	cmp	r3, r2
 800e30e:	d10a      	bne.n	800e326 <xPortStartScheduler+0x26>
	__asm volatile
 800e310:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
 800e320:	613b      	str	r3, [r7, #16]
}
 800e322:	bf00      	nop
 800e324:	e7fe      	b.n	800e324 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e326:	4b3e      	ldr	r3, [pc, #248]	; (800e420 <xPortStartScheduler+0x120>)
 800e328:	681b      	ldr	r3, [r3, #0]
 800e32a:	4a3f      	ldr	r2, [pc, #252]	; (800e428 <xPortStartScheduler+0x128>)
 800e32c:	4293      	cmp	r3, r2
 800e32e:	d10a      	bne.n	800e346 <xPortStartScheduler+0x46>
	__asm volatile
 800e330:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e334:	f383 8811 	msr	BASEPRI, r3
 800e338:	f3bf 8f6f 	isb	sy
 800e33c:	f3bf 8f4f 	dsb	sy
 800e340:	60fb      	str	r3, [r7, #12]
}
 800e342:	bf00      	nop
 800e344:	e7fe      	b.n	800e344 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800e346:	4b39      	ldr	r3, [pc, #228]	; (800e42c <xPortStartScheduler+0x12c>)
 800e348:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e34a:	697b      	ldr	r3, [r7, #20]
 800e34c:	781b      	ldrb	r3, [r3, #0]
 800e34e:	b2db      	uxtb	r3, r3
 800e350:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e352:	697b      	ldr	r3, [r7, #20]
 800e354:	22ff      	movs	r2, #255	; 0xff
 800e356:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e358:	697b      	ldr	r3, [r7, #20]
 800e35a:	781b      	ldrb	r3, [r3, #0]
 800e35c:	b2db      	uxtb	r3, r3
 800e35e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e360:	78fb      	ldrb	r3, [r7, #3]
 800e362:	b2db      	uxtb	r3, r3
 800e364:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800e368:	b2da      	uxtb	r2, r3
 800e36a:	4b31      	ldr	r3, [pc, #196]	; (800e430 <xPortStartScheduler+0x130>)
 800e36c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e36e:	4b31      	ldr	r3, [pc, #196]	; (800e434 <xPortStartScheduler+0x134>)
 800e370:	2207      	movs	r2, #7
 800e372:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e374:	e009      	b.n	800e38a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800e376:	4b2f      	ldr	r3, [pc, #188]	; (800e434 <xPortStartScheduler+0x134>)
 800e378:	681b      	ldr	r3, [r3, #0]
 800e37a:	3b01      	subs	r3, #1
 800e37c:	4a2d      	ldr	r2, [pc, #180]	; (800e434 <xPortStartScheduler+0x134>)
 800e37e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e380:	78fb      	ldrb	r3, [r7, #3]
 800e382:	b2db      	uxtb	r3, r3
 800e384:	005b      	lsls	r3, r3, #1
 800e386:	b2db      	uxtb	r3, r3
 800e388:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e38a:	78fb      	ldrb	r3, [r7, #3]
 800e38c:	b2db      	uxtb	r3, r3
 800e38e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e392:	2b80      	cmp	r3, #128	; 0x80
 800e394:	d0ef      	beq.n	800e376 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e396:	4b27      	ldr	r3, [pc, #156]	; (800e434 <xPortStartScheduler+0x134>)
 800e398:	681b      	ldr	r3, [r3, #0]
 800e39a:	f1c3 0307 	rsb	r3, r3, #7
 800e39e:	2b04      	cmp	r3, #4
 800e3a0:	d00a      	beq.n	800e3b8 <xPortStartScheduler+0xb8>
	__asm volatile
 800e3a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e3a6:	f383 8811 	msr	BASEPRI, r3
 800e3aa:	f3bf 8f6f 	isb	sy
 800e3ae:	f3bf 8f4f 	dsb	sy
 800e3b2:	60bb      	str	r3, [r7, #8]
}
 800e3b4:	bf00      	nop
 800e3b6:	e7fe      	b.n	800e3b6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800e3b8:	4b1e      	ldr	r3, [pc, #120]	; (800e434 <xPortStartScheduler+0x134>)
 800e3ba:	681b      	ldr	r3, [r3, #0]
 800e3bc:	021b      	lsls	r3, r3, #8
 800e3be:	4a1d      	ldr	r2, [pc, #116]	; (800e434 <xPortStartScheduler+0x134>)
 800e3c0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e3c2:	4b1c      	ldr	r3, [pc, #112]	; (800e434 <xPortStartScheduler+0x134>)
 800e3c4:	681b      	ldr	r3, [r3, #0]
 800e3c6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800e3ca:	4a1a      	ldr	r2, [pc, #104]	; (800e434 <xPortStartScheduler+0x134>)
 800e3cc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e3ce:	687b      	ldr	r3, [r7, #4]
 800e3d0:	b2da      	uxtb	r2, r3
 800e3d2:	697b      	ldr	r3, [r7, #20]
 800e3d4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e3d6:	4b18      	ldr	r3, [pc, #96]	; (800e438 <xPortStartScheduler+0x138>)
 800e3d8:	681b      	ldr	r3, [r3, #0]
 800e3da:	4a17      	ldr	r2, [pc, #92]	; (800e438 <xPortStartScheduler+0x138>)
 800e3dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800e3e0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e3e2:	4b15      	ldr	r3, [pc, #84]	; (800e438 <xPortStartScheduler+0x138>)
 800e3e4:	681b      	ldr	r3, [r3, #0]
 800e3e6:	4a14      	ldr	r2, [pc, #80]	; (800e438 <xPortStartScheduler+0x138>)
 800e3e8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800e3ec:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800e3ee:	f000 f8dd 	bl	800e5ac <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800e3f2:	4b12      	ldr	r3, [pc, #72]	; (800e43c <xPortStartScheduler+0x13c>)
 800e3f4:	2200      	movs	r2, #0
 800e3f6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800e3f8:	f000 f8fc 	bl	800e5f4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e3fc:	4b10      	ldr	r3, [pc, #64]	; (800e440 <xPortStartScheduler+0x140>)
 800e3fe:	681b      	ldr	r3, [r3, #0]
 800e400:	4a0f      	ldr	r2, [pc, #60]	; (800e440 <xPortStartScheduler+0x140>)
 800e402:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800e406:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800e408:	f7ff ff66 	bl	800e2d8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800e40c:	f7fe ff3e 	bl	800d28c <vTaskSwitchContext>
	prvTaskExitError();
 800e410:	f7ff ff22 	bl	800e258 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800e414:	2300      	movs	r3, #0
}
 800e416:	4618      	mov	r0, r3
 800e418:	3718      	adds	r7, #24
 800e41a:	46bd      	mov	sp, r7
 800e41c:	bd80      	pop	{r7, pc}
 800e41e:	bf00      	nop
 800e420:	e000ed00 	.word	0xe000ed00
 800e424:	410fc271 	.word	0x410fc271
 800e428:	410fc270 	.word	0x410fc270
 800e42c:	e000e400 	.word	0xe000e400
 800e430:	20002c1c 	.word	0x20002c1c
 800e434:	20002c20 	.word	0x20002c20
 800e438:	e000ed20 	.word	0xe000ed20
 800e43c:	200000a8 	.word	0x200000a8
 800e440:	e000ef34 	.word	0xe000ef34

0800e444 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800e444:	b480      	push	{r7}
 800e446:	b083      	sub	sp, #12
 800e448:	af00      	add	r7, sp, #0
	__asm volatile
 800e44a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	607b      	str	r3, [r7, #4]
}
 800e45c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800e45e:	4b0f      	ldr	r3, [pc, #60]	; (800e49c <vPortEnterCritical+0x58>)
 800e460:	681b      	ldr	r3, [r3, #0]
 800e462:	3301      	adds	r3, #1
 800e464:	4a0d      	ldr	r2, [pc, #52]	; (800e49c <vPortEnterCritical+0x58>)
 800e466:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800e468:	4b0c      	ldr	r3, [pc, #48]	; (800e49c <vPortEnterCritical+0x58>)
 800e46a:	681b      	ldr	r3, [r3, #0]
 800e46c:	2b01      	cmp	r3, #1
 800e46e:	d10f      	bne.n	800e490 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800e470:	4b0b      	ldr	r3, [pc, #44]	; (800e4a0 <vPortEnterCritical+0x5c>)
 800e472:	681b      	ldr	r3, [r3, #0]
 800e474:	b2db      	uxtb	r3, r3
 800e476:	2b00      	cmp	r3, #0
 800e478:	d00a      	beq.n	800e490 <vPortEnterCritical+0x4c>
	__asm volatile
 800e47a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e47e:	f383 8811 	msr	BASEPRI, r3
 800e482:	f3bf 8f6f 	isb	sy
 800e486:	f3bf 8f4f 	dsb	sy
 800e48a:	603b      	str	r3, [r7, #0]
}
 800e48c:	bf00      	nop
 800e48e:	e7fe      	b.n	800e48e <vPortEnterCritical+0x4a>
	}
}
 800e490:	bf00      	nop
 800e492:	370c      	adds	r7, #12
 800e494:	46bd      	mov	sp, r7
 800e496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e49a:	4770      	bx	lr
 800e49c:	200000a8 	.word	0x200000a8
 800e4a0:	e000ed04 	.word	0xe000ed04

0800e4a4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800e4a4:	b480      	push	{r7}
 800e4a6:	b083      	sub	sp, #12
 800e4a8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800e4aa:	4b12      	ldr	r3, [pc, #72]	; (800e4f4 <vPortExitCritical+0x50>)
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d10a      	bne.n	800e4c8 <vPortExitCritical+0x24>
	__asm volatile
 800e4b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4b6:	f383 8811 	msr	BASEPRI, r3
 800e4ba:	f3bf 8f6f 	isb	sy
 800e4be:	f3bf 8f4f 	dsb	sy
 800e4c2:	607b      	str	r3, [r7, #4]
}
 800e4c4:	bf00      	nop
 800e4c6:	e7fe      	b.n	800e4c6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800e4c8:	4b0a      	ldr	r3, [pc, #40]	; (800e4f4 <vPortExitCritical+0x50>)
 800e4ca:	681b      	ldr	r3, [r3, #0]
 800e4cc:	3b01      	subs	r3, #1
 800e4ce:	4a09      	ldr	r2, [pc, #36]	; (800e4f4 <vPortExitCritical+0x50>)
 800e4d0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e4d2:	4b08      	ldr	r3, [pc, #32]	; (800e4f4 <vPortExitCritical+0x50>)
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	2b00      	cmp	r3, #0
 800e4d8:	d105      	bne.n	800e4e6 <vPortExitCritical+0x42>
 800e4da:	2300      	movs	r3, #0
 800e4dc:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e4de:	683b      	ldr	r3, [r7, #0]
 800e4e0:	f383 8811 	msr	BASEPRI, r3
}
 800e4e4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800e4e6:	bf00      	nop
 800e4e8:	370c      	adds	r7, #12
 800e4ea:	46bd      	mov	sp, r7
 800e4ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e4f0:	4770      	bx	lr
 800e4f2:	bf00      	nop
 800e4f4:	200000a8 	.word	0x200000a8
	...

0800e500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800e500:	f3ef 8009 	mrs	r0, PSP
 800e504:	f3bf 8f6f 	isb	sy
 800e508:	4b15      	ldr	r3, [pc, #84]	; (800e560 <pxCurrentTCBConst>)
 800e50a:	681a      	ldr	r2, [r3, #0]
 800e50c:	f01e 0f10 	tst.w	lr, #16
 800e510:	bf08      	it	eq
 800e512:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e516:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e51a:	6010      	str	r0, [r2, #0]
 800e51c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e520:	f04f 0050 	mov.w	r0, #80	; 0x50
 800e524:	f380 8811 	msr	BASEPRI, r0
 800e528:	f3bf 8f4f 	dsb	sy
 800e52c:	f3bf 8f6f 	isb	sy
 800e530:	f7fe feac 	bl	800d28c <vTaskSwitchContext>
 800e534:	f04f 0000 	mov.w	r0, #0
 800e538:	f380 8811 	msr	BASEPRI, r0
 800e53c:	bc09      	pop	{r0, r3}
 800e53e:	6819      	ldr	r1, [r3, #0]
 800e540:	6808      	ldr	r0, [r1, #0]
 800e542:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e546:	f01e 0f10 	tst.w	lr, #16
 800e54a:	bf08      	it	eq
 800e54c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e550:	f380 8809 	msr	PSP, r0
 800e554:	f3bf 8f6f 	isb	sy
 800e558:	4770      	bx	lr
 800e55a:	bf00      	nop
 800e55c:	f3af 8000 	nop.w

0800e560 <pxCurrentTCBConst>:
 800e560:	200025f0 	.word	0x200025f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800e564:	bf00      	nop
 800e566:	bf00      	nop

0800e568 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800e568:	b580      	push	{r7, lr}
 800e56a:	b082      	sub	sp, #8
 800e56c:	af00      	add	r7, sp, #0
	__asm volatile
 800e56e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e572:	f383 8811 	msr	BASEPRI, r3
 800e576:	f3bf 8f6f 	isb	sy
 800e57a:	f3bf 8f4f 	dsb	sy
 800e57e:	607b      	str	r3, [r7, #4]
}
 800e580:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800e582:	f7fe fdc9 	bl	800d118 <xTaskIncrementTick>
 800e586:	4603      	mov	r3, r0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	d003      	beq.n	800e594 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e58c:	4b06      	ldr	r3, [pc, #24]	; (800e5a8 <xPortSysTickHandler+0x40>)
 800e58e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e592:	601a      	str	r2, [r3, #0]
 800e594:	2300      	movs	r3, #0
 800e596:	603b      	str	r3, [r7, #0]
	__asm volatile
 800e598:	683b      	ldr	r3, [r7, #0]
 800e59a:	f383 8811 	msr	BASEPRI, r3
}
 800e59e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800e5a0:	bf00      	nop
 800e5a2:	3708      	adds	r7, #8
 800e5a4:	46bd      	mov	sp, r7
 800e5a6:	bd80      	pop	{r7, pc}
 800e5a8:	e000ed04 	.word	0xe000ed04

0800e5ac <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800e5ac:	b480      	push	{r7}
 800e5ae:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e5b0:	4b0b      	ldr	r3, [pc, #44]	; (800e5e0 <vPortSetupTimerInterrupt+0x34>)
 800e5b2:	2200      	movs	r2, #0
 800e5b4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e5b6:	4b0b      	ldr	r3, [pc, #44]	; (800e5e4 <vPortSetupTimerInterrupt+0x38>)
 800e5b8:	2200      	movs	r2, #0
 800e5ba:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e5bc:	4b0a      	ldr	r3, [pc, #40]	; (800e5e8 <vPortSetupTimerInterrupt+0x3c>)
 800e5be:	681b      	ldr	r3, [r3, #0]
 800e5c0:	4a0a      	ldr	r2, [pc, #40]	; (800e5ec <vPortSetupTimerInterrupt+0x40>)
 800e5c2:	fba2 2303 	umull	r2, r3, r2, r3
 800e5c6:	099b      	lsrs	r3, r3, #6
 800e5c8:	4a09      	ldr	r2, [pc, #36]	; (800e5f0 <vPortSetupTimerInterrupt+0x44>)
 800e5ca:	3b01      	subs	r3, #1
 800e5cc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e5ce:	4b04      	ldr	r3, [pc, #16]	; (800e5e0 <vPortSetupTimerInterrupt+0x34>)
 800e5d0:	2207      	movs	r2, #7
 800e5d2:	601a      	str	r2, [r3, #0]
}
 800e5d4:	bf00      	nop
 800e5d6:	46bd      	mov	sp, r7
 800e5d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5dc:	4770      	bx	lr
 800e5de:	bf00      	nop
 800e5e0:	e000e010 	.word	0xe000e010
 800e5e4:	e000e018 	.word	0xe000e018
 800e5e8:	2000009c 	.word	0x2000009c
 800e5ec:	10624dd3 	.word	0x10624dd3
 800e5f0:	e000e014 	.word	0xe000e014

0800e5f4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800e5f4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800e604 <vPortEnableVFP+0x10>
 800e5f8:	6801      	ldr	r1, [r0, #0]
 800e5fa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800e5fe:	6001      	str	r1, [r0, #0]
 800e600:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800e602:	bf00      	nop
 800e604:	e000ed88 	.word	0xe000ed88

0800e608 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800e608:	b480      	push	{r7}
 800e60a:	b085      	sub	sp, #20
 800e60c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e60e:	f3ef 8305 	mrs	r3, IPSR
 800e612:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e614:	68fb      	ldr	r3, [r7, #12]
 800e616:	2b0f      	cmp	r3, #15
 800e618:	d914      	bls.n	800e644 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e61a:	4a17      	ldr	r2, [pc, #92]	; (800e678 <vPortValidateInterruptPriority+0x70>)
 800e61c:	68fb      	ldr	r3, [r7, #12]
 800e61e:	4413      	add	r3, r2
 800e620:	781b      	ldrb	r3, [r3, #0]
 800e622:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e624:	4b15      	ldr	r3, [pc, #84]	; (800e67c <vPortValidateInterruptPriority+0x74>)
 800e626:	781b      	ldrb	r3, [r3, #0]
 800e628:	7afa      	ldrb	r2, [r7, #11]
 800e62a:	429a      	cmp	r2, r3
 800e62c:	d20a      	bcs.n	800e644 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800e62e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e632:	f383 8811 	msr	BASEPRI, r3
 800e636:	f3bf 8f6f 	isb	sy
 800e63a:	f3bf 8f4f 	dsb	sy
 800e63e:	607b      	str	r3, [r7, #4]
}
 800e640:	bf00      	nop
 800e642:	e7fe      	b.n	800e642 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e644:	4b0e      	ldr	r3, [pc, #56]	; (800e680 <vPortValidateInterruptPriority+0x78>)
 800e646:	681b      	ldr	r3, [r3, #0]
 800e648:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800e64c:	4b0d      	ldr	r3, [pc, #52]	; (800e684 <vPortValidateInterruptPriority+0x7c>)
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	429a      	cmp	r2, r3
 800e652:	d90a      	bls.n	800e66a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800e654:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e658:	f383 8811 	msr	BASEPRI, r3
 800e65c:	f3bf 8f6f 	isb	sy
 800e660:	f3bf 8f4f 	dsb	sy
 800e664:	603b      	str	r3, [r7, #0]
}
 800e666:	bf00      	nop
 800e668:	e7fe      	b.n	800e668 <vPortValidateInterruptPriority+0x60>
	}
 800e66a:	bf00      	nop
 800e66c:	3714      	adds	r7, #20
 800e66e:	46bd      	mov	sp, r7
 800e670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e674:	4770      	bx	lr
 800e676:	bf00      	nop
 800e678:	e000e3f0 	.word	0xe000e3f0
 800e67c:	20002c1c 	.word	0x20002c1c
 800e680:	e000ed0c 	.word	0xe000ed0c
 800e684:	20002c20 	.word	0x20002c20

0800e688 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b08a      	sub	sp, #40	; 0x28
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800e690:	2300      	movs	r3, #0
 800e692:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800e694:	f7fe fc84 	bl	800cfa0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800e698:	4b5b      	ldr	r3, [pc, #364]	; (800e808 <pvPortMalloc+0x180>)
 800e69a:	681b      	ldr	r3, [r3, #0]
 800e69c:	2b00      	cmp	r3, #0
 800e69e:	d101      	bne.n	800e6a4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800e6a0:	f000 f920 	bl	800e8e4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800e6a4:	4b59      	ldr	r3, [pc, #356]	; (800e80c <pvPortMalloc+0x184>)
 800e6a6:	681a      	ldr	r2, [r3, #0]
 800e6a8:	687b      	ldr	r3, [r7, #4]
 800e6aa:	4013      	ands	r3, r2
 800e6ac:	2b00      	cmp	r3, #0
 800e6ae:	f040 8093 	bne.w	800e7d8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800e6b2:	687b      	ldr	r3, [r7, #4]
 800e6b4:	2b00      	cmp	r3, #0
 800e6b6:	d01d      	beq.n	800e6f4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800e6b8:	2208      	movs	r2, #8
 800e6ba:	687b      	ldr	r3, [r7, #4]
 800e6bc:	4413      	add	r3, r2
 800e6be:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800e6c0:	687b      	ldr	r3, [r7, #4]
 800e6c2:	f003 0307 	and.w	r3, r3, #7
 800e6c6:	2b00      	cmp	r3, #0
 800e6c8:	d014      	beq.n	800e6f4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800e6ca:	687b      	ldr	r3, [r7, #4]
 800e6cc:	f023 0307 	bic.w	r3, r3, #7
 800e6d0:	3308      	adds	r3, #8
 800e6d2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	f003 0307 	and.w	r3, r3, #7
 800e6da:	2b00      	cmp	r3, #0
 800e6dc:	d00a      	beq.n	800e6f4 <pvPortMalloc+0x6c>
	__asm volatile
 800e6de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e6e2:	f383 8811 	msr	BASEPRI, r3
 800e6e6:	f3bf 8f6f 	isb	sy
 800e6ea:	f3bf 8f4f 	dsb	sy
 800e6ee:	617b      	str	r3, [r7, #20]
}
 800e6f0:	bf00      	nop
 800e6f2:	e7fe      	b.n	800e6f2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	2b00      	cmp	r3, #0
 800e6f8:	d06e      	beq.n	800e7d8 <pvPortMalloc+0x150>
 800e6fa:	4b45      	ldr	r3, [pc, #276]	; (800e810 <pvPortMalloc+0x188>)
 800e6fc:	681b      	ldr	r3, [r3, #0]
 800e6fe:	687a      	ldr	r2, [r7, #4]
 800e700:	429a      	cmp	r2, r3
 800e702:	d869      	bhi.n	800e7d8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800e704:	4b43      	ldr	r3, [pc, #268]	; (800e814 <pvPortMalloc+0x18c>)
 800e706:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800e708:	4b42      	ldr	r3, [pc, #264]	; (800e814 <pvPortMalloc+0x18c>)
 800e70a:	681b      	ldr	r3, [r3, #0]
 800e70c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e70e:	e004      	b.n	800e71a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800e710:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e712:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800e714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800e71a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e71c:	685b      	ldr	r3, [r3, #4]
 800e71e:	687a      	ldr	r2, [r7, #4]
 800e720:	429a      	cmp	r2, r3
 800e722:	d903      	bls.n	800e72c <pvPortMalloc+0xa4>
 800e724:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e726:	681b      	ldr	r3, [r3, #0]
 800e728:	2b00      	cmp	r3, #0
 800e72a:	d1f1      	bne.n	800e710 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800e72c:	4b36      	ldr	r3, [pc, #216]	; (800e808 <pvPortMalloc+0x180>)
 800e72e:	681b      	ldr	r3, [r3, #0]
 800e730:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e732:	429a      	cmp	r2, r3
 800e734:	d050      	beq.n	800e7d8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800e736:	6a3b      	ldr	r3, [r7, #32]
 800e738:	681b      	ldr	r3, [r3, #0]
 800e73a:	2208      	movs	r2, #8
 800e73c:	4413      	add	r3, r2
 800e73e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800e740:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e742:	681a      	ldr	r2, [r3, #0]
 800e744:	6a3b      	ldr	r3, [r7, #32]
 800e746:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800e748:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e74a:	685a      	ldr	r2, [r3, #4]
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	1ad2      	subs	r2, r2, r3
 800e750:	2308      	movs	r3, #8
 800e752:	005b      	lsls	r3, r3, #1
 800e754:	429a      	cmp	r2, r3
 800e756:	d91f      	bls.n	800e798 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e758:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e75a:	687b      	ldr	r3, [r7, #4]
 800e75c:	4413      	add	r3, r2
 800e75e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e760:	69bb      	ldr	r3, [r7, #24]
 800e762:	f003 0307 	and.w	r3, r3, #7
 800e766:	2b00      	cmp	r3, #0
 800e768:	d00a      	beq.n	800e780 <pvPortMalloc+0xf8>
	__asm volatile
 800e76a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e76e:	f383 8811 	msr	BASEPRI, r3
 800e772:	f3bf 8f6f 	isb	sy
 800e776:	f3bf 8f4f 	dsb	sy
 800e77a:	613b      	str	r3, [r7, #16]
}
 800e77c:	bf00      	nop
 800e77e:	e7fe      	b.n	800e77e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e780:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e782:	685a      	ldr	r2, [r3, #4]
 800e784:	687b      	ldr	r3, [r7, #4]
 800e786:	1ad2      	subs	r2, r2, r3
 800e788:	69bb      	ldr	r3, [r7, #24]
 800e78a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e78c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e78e:	687a      	ldr	r2, [r7, #4]
 800e790:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e792:	69b8      	ldr	r0, [r7, #24]
 800e794:	f000 f908 	bl	800e9a8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e798:	4b1d      	ldr	r3, [pc, #116]	; (800e810 <pvPortMalloc+0x188>)
 800e79a:	681a      	ldr	r2, [r3, #0]
 800e79c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e79e:	685b      	ldr	r3, [r3, #4]
 800e7a0:	1ad3      	subs	r3, r2, r3
 800e7a2:	4a1b      	ldr	r2, [pc, #108]	; (800e810 <pvPortMalloc+0x188>)
 800e7a4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e7a6:	4b1a      	ldr	r3, [pc, #104]	; (800e810 <pvPortMalloc+0x188>)
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	4b1b      	ldr	r3, [pc, #108]	; (800e818 <pvPortMalloc+0x190>)
 800e7ac:	681b      	ldr	r3, [r3, #0]
 800e7ae:	429a      	cmp	r2, r3
 800e7b0:	d203      	bcs.n	800e7ba <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e7b2:	4b17      	ldr	r3, [pc, #92]	; (800e810 <pvPortMalloc+0x188>)
 800e7b4:	681b      	ldr	r3, [r3, #0]
 800e7b6:	4a18      	ldr	r2, [pc, #96]	; (800e818 <pvPortMalloc+0x190>)
 800e7b8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e7ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7bc:	685a      	ldr	r2, [r3, #4]
 800e7be:	4b13      	ldr	r3, [pc, #76]	; (800e80c <pvPortMalloc+0x184>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	431a      	orrs	r2, r3
 800e7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7c6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e7c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e7ca:	2200      	movs	r2, #0
 800e7cc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800e7ce:	4b13      	ldr	r3, [pc, #76]	; (800e81c <pvPortMalloc+0x194>)
 800e7d0:	681b      	ldr	r3, [r3, #0]
 800e7d2:	3301      	adds	r3, #1
 800e7d4:	4a11      	ldr	r2, [pc, #68]	; (800e81c <pvPortMalloc+0x194>)
 800e7d6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e7d8:	f7fe fbf0 	bl	800cfbc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e7dc:	69fb      	ldr	r3, [r7, #28]
 800e7de:	f003 0307 	and.w	r3, r3, #7
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d00a      	beq.n	800e7fc <pvPortMalloc+0x174>
	__asm volatile
 800e7e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7ea:	f383 8811 	msr	BASEPRI, r3
 800e7ee:	f3bf 8f6f 	isb	sy
 800e7f2:	f3bf 8f4f 	dsb	sy
 800e7f6:	60fb      	str	r3, [r7, #12]
}
 800e7f8:	bf00      	nop
 800e7fa:	e7fe      	b.n	800e7fa <pvPortMalloc+0x172>
	return pvReturn;
 800e7fc:	69fb      	ldr	r3, [r7, #28]
}
 800e7fe:	4618      	mov	r0, r3
 800e800:	3728      	adds	r7, #40	; 0x28
 800e802:	46bd      	mov	sp, r7
 800e804:	bd80      	pop	{r7, pc}
 800e806:	bf00      	nop
 800e808:	20004c2c 	.word	0x20004c2c
 800e80c:	20004c40 	.word	0x20004c40
 800e810:	20004c30 	.word	0x20004c30
 800e814:	20004c24 	.word	0x20004c24
 800e818:	20004c34 	.word	0x20004c34
 800e81c:	20004c38 	.word	0x20004c38

0800e820 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e820:	b580      	push	{r7, lr}
 800e822:	b086      	sub	sp, #24
 800e824:	af00      	add	r7, sp, #0
 800e826:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2b00      	cmp	r3, #0
 800e830:	d04d      	beq.n	800e8ce <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e832:	2308      	movs	r3, #8
 800e834:	425b      	negs	r3, r3
 800e836:	697a      	ldr	r2, [r7, #20]
 800e838:	4413      	add	r3, r2
 800e83a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e83c:	697b      	ldr	r3, [r7, #20]
 800e83e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e840:	693b      	ldr	r3, [r7, #16]
 800e842:	685a      	ldr	r2, [r3, #4]
 800e844:	4b24      	ldr	r3, [pc, #144]	; (800e8d8 <vPortFree+0xb8>)
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	4013      	ands	r3, r2
 800e84a:	2b00      	cmp	r3, #0
 800e84c:	d10a      	bne.n	800e864 <vPortFree+0x44>
	__asm volatile
 800e84e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e852:	f383 8811 	msr	BASEPRI, r3
 800e856:	f3bf 8f6f 	isb	sy
 800e85a:	f3bf 8f4f 	dsb	sy
 800e85e:	60fb      	str	r3, [r7, #12]
}
 800e860:	bf00      	nop
 800e862:	e7fe      	b.n	800e862 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e864:	693b      	ldr	r3, [r7, #16]
 800e866:	681b      	ldr	r3, [r3, #0]
 800e868:	2b00      	cmp	r3, #0
 800e86a:	d00a      	beq.n	800e882 <vPortFree+0x62>
	__asm volatile
 800e86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e870:	f383 8811 	msr	BASEPRI, r3
 800e874:	f3bf 8f6f 	isb	sy
 800e878:	f3bf 8f4f 	dsb	sy
 800e87c:	60bb      	str	r3, [r7, #8]
}
 800e87e:	bf00      	nop
 800e880:	e7fe      	b.n	800e880 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e882:	693b      	ldr	r3, [r7, #16]
 800e884:	685a      	ldr	r2, [r3, #4]
 800e886:	4b14      	ldr	r3, [pc, #80]	; (800e8d8 <vPortFree+0xb8>)
 800e888:	681b      	ldr	r3, [r3, #0]
 800e88a:	4013      	ands	r3, r2
 800e88c:	2b00      	cmp	r3, #0
 800e88e:	d01e      	beq.n	800e8ce <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e890:	693b      	ldr	r3, [r7, #16]
 800e892:	681b      	ldr	r3, [r3, #0]
 800e894:	2b00      	cmp	r3, #0
 800e896:	d11a      	bne.n	800e8ce <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e898:	693b      	ldr	r3, [r7, #16]
 800e89a:	685a      	ldr	r2, [r3, #4]
 800e89c:	4b0e      	ldr	r3, [pc, #56]	; (800e8d8 <vPortFree+0xb8>)
 800e89e:	681b      	ldr	r3, [r3, #0]
 800e8a0:	43db      	mvns	r3, r3
 800e8a2:	401a      	ands	r2, r3
 800e8a4:	693b      	ldr	r3, [r7, #16]
 800e8a6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e8a8:	f7fe fb7a 	bl	800cfa0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e8ac:	693b      	ldr	r3, [r7, #16]
 800e8ae:	685a      	ldr	r2, [r3, #4]
 800e8b0:	4b0a      	ldr	r3, [pc, #40]	; (800e8dc <vPortFree+0xbc>)
 800e8b2:	681b      	ldr	r3, [r3, #0]
 800e8b4:	4413      	add	r3, r2
 800e8b6:	4a09      	ldr	r2, [pc, #36]	; (800e8dc <vPortFree+0xbc>)
 800e8b8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e8ba:	6938      	ldr	r0, [r7, #16]
 800e8bc:	f000 f874 	bl	800e9a8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800e8c0:	4b07      	ldr	r3, [pc, #28]	; (800e8e0 <vPortFree+0xc0>)
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	3301      	adds	r3, #1
 800e8c6:	4a06      	ldr	r2, [pc, #24]	; (800e8e0 <vPortFree+0xc0>)
 800e8c8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800e8ca:	f7fe fb77 	bl	800cfbc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e8ce:	bf00      	nop
 800e8d0:	3718      	adds	r7, #24
 800e8d2:	46bd      	mov	sp, r7
 800e8d4:	bd80      	pop	{r7, pc}
 800e8d6:	bf00      	nop
 800e8d8:	20004c40 	.word	0x20004c40
 800e8dc:	20004c30 	.word	0x20004c30
 800e8e0:	20004c3c 	.word	0x20004c3c

0800e8e4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e8e4:	b480      	push	{r7}
 800e8e6:	b085      	sub	sp, #20
 800e8e8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e8ea:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e8ee:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e8f0:	4b27      	ldr	r3, [pc, #156]	; (800e990 <prvHeapInit+0xac>)
 800e8f2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f003 0307 	and.w	r3, r3, #7
 800e8fa:	2b00      	cmp	r3, #0
 800e8fc:	d00c      	beq.n	800e918 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e8fe:	68fb      	ldr	r3, [r7, #12]
 800e900:	3307      	adds	r3, #7
 800e902:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e904:	68fb      	ldr	r3, [r7, #12]
 800e906:	f023 0307 	bic.w	r3, r3, #7
 800e90a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e90c:	68ba      	ldr	r2, [r7, #8]
 800e90e:	68fb      	ldr	r3, [r7, #12]
 800e910:	1ad3      	subs	r3, r2, r3
 800e912:	4a1f      	ldr	r2, [pc, #124]	; (800e990 <prvHeapInit+0xac>)
 800e914:	4413      	add	r3, r2
 800e916:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e918:	68fb      	ldr	r3, [r7, #12]
 800e91a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e91c:	4a1d      	ldr	r2, [pc, #116]	; (800e994 <prvHeapInit+0xb0>)
 800e91e:	687b      	ldr	r3, [r7, #4]
 800e920:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e922:	4b1c      	ldr	r3, [pc, #112]	; (800e994 <prvHeapInit+0xb0>)
 800e924:	2200      	movs	r2, #0
 800e926:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e928:	687b      	ldr	r3, [r7, #4]
 800e92a:	68ba      	ldr	r2, [r7, #8]
 800e92c:	4413      	add	r3, r2
 800e92e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e930:	2208      	movs	r2, #8
 800e932:	68fb      	ldr	r3, [r7, #12]
 800e934:	1a9b      	subs	r3, r3, r2
 800e936:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e938:	68fb      	ldr	r3, [r7, #12]
 800e93a:	f023 0307 	bic.w	r3, r3, #7
 800e93e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e940:	68fb      	ldr	r3, [r7, #12]
 800e942:	4a15      	ldr	r2, [pc, #84]	; (800e998 <prvHeapInit+0xb4>)
 800e944:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e946:	4b14      	ldr	r3, [pc, #80]	; (800e998 <prvHeapInit+0xb4>)
 800e948:	681b      	ldr	r3, [r3, #0]
 800e94a:	2200      	movs	r2, #0
 800e94c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e94e:	4b12      	ldr	r3, [pc, #72]	; (800e998 <prvHeapInit+0xb4>)
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	2200      	movs	r2, #0
 800e954:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e956:	687b      	ldr	r3, [r7, #4]
 800e958:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e95a:	683b      	ldr	r3, [r7, #0]
 800e95c:	68fa      	ldr	r2, [r7, #12]
 800e95e:	1ad2      	subs	r2, r2, r3
 800e960:	683b      	ldr	r3, [r7, #0]
 800e962:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e964:	4b0c      	ldr	r3, [pc, #48]	; (800e998 <prvHeapInit+0xb4>)
 800e966:	681a      	ldr	r2, [r3, #0]
 800e968:	683b      	ldr	r3, [r7, #0]
 800e96a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e96c:	683b      	ldr	r3, [r7, #0]
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	4a0a      	ldr	r2, [pc, #40]	; (800e99c <prvHeapInit+0xb8>)
 800e972:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e974:	683b      	ldr	r3, [r7, #0]
 800e976:	685b      	ldr	r3, [r3, #4]
 800e978:	4a09      	ldr	r2, [pc, #36]	; (800e9a0 <prvHeapInit+0xbc>)
 800e97a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e97c:	4b09      	ldr	r3, [pc, #36]	; (800e9a4 <prvHeapInit+0xc0>)
 800e97e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e982:	601a      	str	r2, [r3, #0]
}
 800e984:	bf00      	nop
 800e986:	3714      	adds	r7, #20
 800e988:	46bd      	mov	sp, r7
 800e98a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e98e:	4770      	bx	lr
 800e990:	20002c24 	.word	0x20002c24
 800e994:	20004c24 	.word	0x20004c24
 800e998:	20004c2c 	.word	0x20004c2c
 800e99c:	20004c34 	.word	0x20004c34
 800e9a0:	20004c30 	.word	0x20004c30
 800e9a4:	20004c40 	.word	0x20004c40

0800e9a8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e9a8:	b480      	push	{r7}
 800e9aa:	b085      	sub	sp, #20
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e9b0:	4b28      	ldr	r3, [pc, #160]	; (800ea54 <prvInsertBlockIntoFreeList+0xac>)
 800e9b2:	60fb      	str	r3, [r7, #12]
 800e9b4:	e002      	b.n	800e9bc <prvInsertBlockIntoFreeList+0x14>
 800e9b6:	68fb      	ldr	r3, [r7, #12]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	60fb      	str	r3, [r7, #12]
 800e9bc:	68fb      	ldr	r3, [r7, #12]
 800e9be:	681b      	ldr	r3, [r3, #0]
 800e9c0:	687a      	ldr	r2, [r7, #4]
 800e9c2:	429a      	cmp	r2, r3
 800e9c4:	d8f7      	bhi.n	800e9b6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e9c6:	68fb      	ldr	r3, [r7, #12]
 800e9c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e9ca:	68fb      	ldr	r3, [r7, #12]
 800e9cc:	685b      	ldr	r3, [r3, #4]
 800e9ce:	68ba      	ldr	r2, [r7, #8]
 800e9d0:	4413      	add	r3, r2
 800e9d2:	687a      	ldr	r2, [r7, #4]
 800e9d4:	429a      	cmp	r2, r3
 800e9d6:	d108      	bne.n	800e9ea <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e9d8:	68fb      	ldr	r3, [r7, #12]
 800e9da:	685a      	ldr	r2, [r3, #4]
 800e9dc:	687b      	ldr	r3, [r7, #4]
 800e9de:	685b      	ldr	r3, [r3, #4]
 800e9e0:	441a      	add	r2, r3
 800e9e2:	68fb      	ldr	r3, [r7, #12]
 800e9e4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e9e6:	68fb      	ldr	r3, [r7, #12]
 800e9e8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e9ea:	687b      	ldr	r3, [r7, #4]
 800e9ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e9ee:	687b      	ldr	r3, [r7, #4]
 800e9f0:	685b      	ldr	r3, [r3, #4]
 800e9f2:	68ba      	ldr	r2, [r7, #8]
 800e9f4:	441a      	add	r2, r3
 800e9f6:	68fb      	ldr	r3, [r7, #12]
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	429a      	cmp	r2, r3
 800e9fc:	d118      	bne.n	800ea30 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e9fe:	68fb      	ldr	r3, [r7, #12]
 800ea00:	681a      	ldr	r2, [r3, #0]
 800ea02:	4b15      	ldr	r3, [pc, #84]	; (800ea58 <prvInsertBlockIntoFreeList+0xb0>)
 800ea04:	681b      	ldr	r3, [r3, #0]
 800ea06:	429a      	cmp	r2, r3
 800ea08:	d00d      	beq.n	800ea26 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ea0a:	687b      	ldr	r3, [r7, #4]
 800ea0c:	685a      	ldr	r2, [r3, #4]
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	685b      	ldr	r3, [r3, #4]
 800ea14:	441a      	add	r2, r3
 800ea16:	687b      	ldr	r3, [r7, #4]
 800ea18:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ea1a:	68fb      	ldr	r3, [r7, #12]
 800ea1c:	681b      	ldr	r3, [r3, #0]
 800ea1e:	681a      	ldr	r2, [r3, #0]
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	601a      	str	r2, [r3, #0]
 800ea24:	e008      	b.n	800ea38 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ea26:	4b0c      	ldr	r3, [pc, #48]	; (800ea58 <prvInsertBlockIntoFreeList+0xb0>)
 800ea28:	681a      	ldr	r2, [r3, #0]
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	601a      	str	r2, [r3, #0]
 800ea2e:	e003      	b.n	800ea38 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ea30:	68fb      	ldr	r3, [r7, #12]
 800ea32:	681a      	ldr	r2, [r3, #0]
 800ea34:	687b      	ldr	r3, [r7, #4]
 800ea36:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ea38:	68fa      	ldr	r2, [r7, #12]
 800ea3a:	687b      	ldr	r3, [r7, #4]
 800ea3c:	429a      	cmp	r2, r3
 800ea3e:	d002      	beq.n	800ea46 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ea40:	68fb      	ldr	r3, [r7, #12]
 800ea42:	687a      	ldr	r2, [r7, #4]
 800ea44:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ea46:	bf00      	nop
 800ea48:	3714      	adds	r7, #20
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea50:	4770      	bx	lr
 800ea52:	bf00      	nop
 800ea54:	20004c24 	.word	0x20004c24
 800ea58:	20004c2c 	.word	0x20004c2c

0800ea5c <__errno>:
 800ea5c:	4b01      	ldr	r3, [pc, #4]	; (800ea64 <__errno+0x8>)
 800ea5e:	6818      	ldr	r0, [r3, #0]
 800ea60:	4770      	bx	lr
 800ea62:	bf00      	nop
 800ea64:	200000ac 	.word	0x200000ac

0800ea68 <__libc_init_array>:
 800ea68:	b570      	push	{r4, r5, r6, lr}
 800ea6a:	4d0d      	ldr	r5, [pc, #52]	; (800eaa0 <__libc_init_array+0x38>)
 800ea6c:	4c0d      	ldr	r4, [pc, #52]	; (800eaa4 <__libc_init_array+0x3c>)
 800ea6e:	1b64      	subs	r4, r4, r5
 800ea70:	10a4      	asrs	r4, r4, #2
 800ea72:	2600      	movs	r6, #0
 800ea74:	42a6      	cmp	r6, r4
 800ea76:	d109      	bne.n	800ea8c <__libc_init_array+0x24>
 800ea78:	4d0b      	ldr	r5, [pc, #44]	; (800eaa8 <__libc_init_array+0x40>)
 800ea7a:	4c0c      	ldr	r4, [pc, #48]	; (800eaac <__libc_init_array+0x44>)
 800ea7c:	f001 fd42 	bl	8010504 <_init>
 800ea80:	1b64      	subs	r4, r4, r5
 800ea82:	10a4      	asrs	r4, r4, #2
 800ea84:	2600      	movs	r6, #0
 800ea86:	42a6      	cmp	r6, r4
 800ea88:	d105      	bne.n	800ea96 <__libc_init_array+0x2e>
 800ea8a:	bd70      	pop	{r4, r5, r6, pc}
 800ea8c:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea90:	4798      	blx	r3
 800ea92:	3601      	adds	r6, #1
 800ea94:	e7ee      	b.n	800ea74 <__libc_init_array+0xc>
 800ea96:	f855 3b04 	ldr.w	r3, [r5], #4
 800ea9a:	4798      	blx	r3
 800ea9c:	3601      	adds	r6, #1
 800ea9e:	e7f2      	b.n	800ea86 <__libc_init_array+0x1e>
 800eaa0:	0801d808 	.word	0x0801d808
 800eaa4:	0801d808 	.word	0x0801d808
 800eaa8:	0801d808 	.word	0x0801d808
 800eaac:	0801d80c 	.word	0x0801d80c

0800eab0 <__retarget_lock_acquire_recursive>:
 800eab0:	4770      	bx	lr

0800eab2 <__retarget_lock_release_recursive>:
 800eab2:	4770      	bx	lr

0800eab4 <memcpy>:
 800eab4:	440a      	add	r2, r1
 800eab6:	4291      	cmp	r1, r2
 800eab8:	f100 33ff 	add.w	r3, r0, #4294967295
 800eabc:	d100      	bne.n	800eac0 <memcpy+0xc>
 800eabe:	4770      	bx	lr
 800eac0:	b510      	push	{r4, lr}
 800eac2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800eac6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800eaca:	4291      	cmp	r1, r2
 800eacc:	d1f9      	bne.n	800eac2 <memcpy+0xe>
 800eace:	bd10      	pop	{r4, pc}

0800ead0 <memset>:
 800ead0:	4402      	add	r2, r0
 800ead2:	4603      	mov	r3, r0
 800ead4:	4293      	cmp	r3, r2
 800ead6:	d100      	bne.n	800eada <memset+0xa>
 800ead8:	4770      	bx	lr
 800eada:	f803 1b01 	strb.w	r1, [r3], #1
 800eade:	e7f9      	b.n	800ead4 <memset+0x4>

0800eae0 <sbrk_aligned>:
 800eae0:	b570      	push	{r4, r5, r6, lr}
 800eae2:	4e0e      	ldr	r6, [pc, #56]	; (800eb1c <sbrk_aligned+0x3c>)
 800eae4:	460c      	mov	r4, r1
 800eae6:	6831      	ldr	r1, [r6, #0]
 800eae8:	4605      	mov	r5, r0
 800eaea:	b911      	cbnz	r1, 800eaf2 <sbrk_aligned+0x12>
 800eaec:	f000 f8f6 	bl	800ecdc <_sbrk_r>
 800eaf0:	6030      	str	r0, [r6, #0]
 800eaf2:	4621      	mov	r1, r4
 800eaf4:	4628      	mov	r0, r5
 800eaf6:	f000 f8f1 	bl	800ecdc <_sbrk_r>
 800eafa:	1c43      	adds	r3, r0, #1
 800eafc:	d00a      	beq.n	800eb14 <sbrk_aligned+0x34>
 800eafe:	1cc4      	adds	r4, r0, #3
 800eb00:	f024 0403 	bic.w	r4, r4, #3
 800eb04:	42a0      	cmp	r0, r4
 800eb06:	d007      	beq.n	800eb18 <sbrk_aligned+0x38>
 800eb08:	1a21      	subs	r1, r4, r0
 800eb0a:	4628      	mov	r0, r5
 800eb0c:	f000 f8e6 	bl	800ecdc <_sbrk_r>
 800eb10:	3001      	adds	r0, #1
 800eb12:	d101      	bne.n	800eb18 <sbrk_aligned+0x38>
 800eb14:	f04f 34ff 	mov.w	r4, #4294967295
 800eb18:	4620      	mov	r0, r4
 800eb1a:	bd70      	pop	{r4, r5, r6, pc}
 800eb1c:	20004c4c 	.word	0x20004c4c

0800eb20 <_malloc_r>:
 800eb20:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb24:	1ccd      	adds	r5, r1, #3
 800eb26:	f025 0503 	bic.w	r5, r5, #3
 800eb2a:	3508      	adds	r5, #8
 800eb2c:	2d0c      	cmp	r5, #12
 800eb2e:	bf38      	it	cc
 800eb30:	250c      	movcc	r5, #12
 800eb32:	2d00      	cmp	r5, #0
 800eb34:	4607      	mov	r7, r0
 800eb36:	db01      	blt.n	800eb3c <_malloc_r+0x1c>
 800eb38:	42a9      	cmp	r1, r5
 800eb3a:	d905      	bls.n	800eb48 <_malloc_r+0x28>
 800eb3c:	230c      	movs	r3, #12
 800eb3e:	603b      	str	r3, [r7, #0]
 800eb40:	2600      	movs	r6, #0
 800eb42:	4630      	mov	r0, r6
 800eb44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb48:	4e2e      	ldr	r6, [pc, #184]	; (800ec04 <_malloc_r+0xe4>)
 800eb4a:	f000 f8f7 	bl	800ed3c <__malloc_lock>
 800eb4e:	6833      	ldr	r3, [r6, #0]
 800eb50:	461c      	mov	r4, r3
 800eb52:	bb34      	cbnz	r4, 800eba2 <_malloc_r+0x82>
 800eb54:	4629      	mov	r1, r5
 800eb56:	4638      	mov	r0, r7
 800eb58:	f7ff ffc2 	bl	800eae0 <sbrk_aligned>
 800eb5c:	1c43      	adds	r3, r0, #1
 800eb5e:	4604      	mov	r4, r0
 800eb60:	d14d      	bne.n	800ebfe <_malloc_r+0xde>
 800eb62:	6834      	ldr	r4, [r6, #0]
 800eb64:	4626      	mov	r6, r4
 800eb66:	2e00      	cmp	r6, #0
 800eb68:	d140      	bne.n	800ebec <_malloc_r+0xcc>
 800eb6a:	6823      	ldr	r3, [r4, #0]
 800eb6c:	4631      	mov	r1, r6
 800eb6e:	4638      	mov	r0, r7
 800eb70:	eb04 0803 	add.w	r8, r4, r3
 800eb74:	f000 f8b2 	bl	800ecdc <_sbrk_r>
 800eb78:	4580      	cmp	r8, r0
 800eb7a:	d13a      	bne.n	800ebf2 <_malloc_r+0xd2>
 800eb7c:	6821      	ldr	r1, [r4, #0]
 800eb7e:	3503      	adds	r5, #3
 800eb80:	1a6d      	subs	r5, r5, r1
 800eb82:	f025 0503 	bic.w	r5, r5, #3
 800eb86:	3508      	adds	r5, #8
 800eb88:	2d0c      	cmp	r5, #12
 800eb8a:	bf38      	it	cc
 800eb8c:	250c      	movcc	r5, #12
 800eb8e:	4629      	mov	r1, r5
 800eb90:	4638      	mov	r0, r7
 800eb92:	f7ff ffa5 	bl	800eae0 <sbrk_aligned>
 800eb96:	3001      	adds	r0, #1
 800eb98:	d02b      	beq.n	800ebf2 <_malloc_r+0xd2>
 800eb9a:	6823      	ldr	r3, [r4, #0]
 800eb9c:	442b      	add	r3, r5
 800eb9e:	6023      	str	r3, [r4, #0]
 800eba0:	e00e      	b.n	800ebc0 <_malloc_r+0xa0>
 800eba2:	6822      	ldr	r2, [r4, #0]
 800eba4:	1b52      	subs	r2, r2, r5
 800eba6:	d41e      	bmi.n	800ebe6 <_malloc_r+0xc6>
 800eba8:	2a0b      	cmp	r2, #11
 800ebaa:	d916      	bls.n	800ebda <_malloc_r+0xba>
 800ebac:	1961      	adds	r1, r4, r5
 800ebae:	42a3      	cmp	r3, r4
 800ebb0:	6025      	str	r5, [r4, #0]
 800ebb2:	bf18      	it	ne
 800ebb4:	6059      	strne	r1, [r3, #4]
 800ebb6:	6863      	ldr	r3, [r4, #4]
 800ebb8:	bf08      	it	eq
 800ebba:	6031      	streq	r1, [r6, #0]
 800ebbc:	5162      	str	r2, [r4, r5]
 800ebbe:	604b      	str	r3, [r1, #4]
 800ebc0:	4638      	mov	r0, r7
 800ebc2:	f104 060b 	add.w	r6, r4, #11
 800ebc6:	f000 f8bf 	bl	800ed48 <__malloc_unlock>
 800ebca:	f026 0607 	bic.w	r6, r6, #7
 800ebce:	1d23      	adds	r3, r4, #4
 800ebd0:	1af2      	subs	r2, r6, r3
 800ebd2:	d0b6      	beq.n	800eb42 <_malloc_r+0x22>
 800ebd4:	1b9b      	subs	r3, r3, r6
 800ebd6:	50a3      	str	r3, [r4, r2]
 800ebd8:	e7b3      	b.n	800eb42 <_malloc_r+0x22>
 800ebda:	6862      	ldr	r2, [r4, #4]
 800ebdc:	42a3      	cmp	r3, r4
 800ebde:	bf0c      	ite	eq
 800ebe0:	6032      	streq	r2, [r6, #0]
 800ebe2:	605a      	strne	r2, [r3, #4]
 800ebe4:	e7ec      	b.n	800ebc0 <_malloc_r+0xa0>
 800ebe6:	4623      	mov	r3, r4
 800ebe8:	6864      	ldr	r4, [r4, #4]
 800ebea:	e7b2      	b.n	800eb52 <_malloc_r+0x32>
 800ebec:	4634      	mov	r4, r6
 800ebee:	6876      	ldr	r6, [r6, #4]
 800ebf0:	e7b9      	b.n	800eb66 <_malloc_r+0x46>
 800ebf2:	230c      	movs	r3, #12
 800ebf4:	603b      	str	r3, [r7, #0]
 800ebf6:	4638      	mov	r0, r7
 800ebf8:	f000 f8a6 	bl	800ed48 <__malloc_unlock>
 800ebfc:	e7a1      	b.n	800eb42 <_malloc_r+0x22>
 800ebfe:	6025      	str	r5, [r4, #0]
 800ec00:	e7de      	b.n	800ebc0 <_malloc_r+0xa0>
 800ec02:	bf00      	nop
 800ec04:	20004c48 	.word	0x20004c48

0800ec08 <cleanup_glue>:
 800ec08:	b538      	push	{r3, r4, r5, lr}
 800ec0a:	460c      	mov	r4, r1
 800ec0c:	6809      	ldr	r1, [r1, #0]
 800ec0e:	4605      	mov	r5, r0
 800ec10:	b109      	cbz	r1, 800ec16 <cleanup_glue+0xe>
 800ec12:	f7ff fff9 	bl	800ec08 <cleanup_glue>
 800ec16:	4621      	mov	r1, r4
 800ec18:	4628      	mov	r0, r5
 800ec1a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ec1e:	f000 b899 	b.w	800ed54 <_free_r>
	...

0800ec24 <_reclaim_reent>:
 800ec24:	4b2c      	ldr	r3, [pc, #176]	; (800ecd8 <_reclaim_reent+0xb4>)
 800ec26:	681b      	ldr	r3, [r3, #0]
 800ec28:	4283      	cmp	r3, r0
 800ec2a:	b570      	push	{r4, r5, r6, lr}
 800ec2c:	4604      	mov	r4, r0
 800ec2e:	d051      	beq.n	800ecd4 <_reclaim_reent+0xb0>
 800ec30:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800ec32:	b143      	cbz	r3, 800ec46 <_reclaim_reent+0x22>
 800ec34:	68db      	ldr	r3, [r3, #12]
 800ec36:	2b00      	cmp	r3, #0
 800ec38:	d14a      	bne.n	800ecd0 <_reclaim_reent+0xac>
 800ec3a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ec3c:	6819      	ldr	r1, [r3, #0]
 800ec3e:	b111      	cbz	r1, 800ec46 <_reclaim_reent+0x22>
 800ec40:	4620      	mov	r0, r4
 800ec42:	f000 f887 	bl	800ed54 <_free_r>
 800ec46:	6961      	ldr	r1, [r4, #20]
 800ec48:	b111      	cbz	r1, 800ec50 <_reclaim_reent+0x2c>
 800ec4a:	4620      	mov	r0, r4
 800ec4c:	f000 f882 	bl	800ed54 <_free_r>
 800ec50:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800ec52:	b111      	cbz	r1, 800ec5a <_reclaim_reent+0x36>
 800ec54:	4620      	mov	r0, r4
 800ec56:	f000 f87d 	bl	800ed54 <_free_r>
 800ec5a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800ec5c:	b111      	cbz	r1, 800ec64 <_reclaim_reent+0x40>
 800ec5e:	4620      	mov	r0, r4
 800ec60:	f000 f878 	bl	800ed54 <_free_r>
 800ec64:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800ec66:	b111      	cbz	r1, 800ec6e <_reclaim_reent+0x4a>
 800ec68:	4620      	mov	r0, r4
 800ec6a:	f000 f873 	bl	800ed54 <_free_r>
 800ec6e:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800ec70:	b111      	cbz	r1, 800ec78 <_reclaim_reent+0x54>
 800ec72:	4620      	mov	r0, r4
 800ec74:	f000 f86e 	bl	800ed54 <_free_r>
 800ec78:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800ec7a:	b111      	cbz	r1, 800ec82 <_reclaim_reent+0x5e>
 800ec7c:	4620      	mov	r0, r4
 800ec7e:	f000 f869 	bl	800ed54 <_free_r>
 800ec82:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800ec84:	b111      	cbz	r1, 800ec8c <_reclaim_reent+0x68>
 800ec86:	4620      	mov	r0, r4
 800ec88:	f000 f864 	bl	800ed54 <_free_r>
 800ec8c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ec8e:	b111      	cbz	r1, 800ec96 <_reclaim_reent+0x72>
 800ec90:	4620      	mov	r0, r4
 800ec92:	f000 f85f 	bl	800ed54 <_free_r>
 800ec96:	69a3      	ldr	r3, [r4, #24]
 800ec98:	b1e3      	cbz	r3, 800ecd4 <_reclaim_reent+0xb0>
 800ec9a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800ec9c:	4620      	mov	r0, r4
 800ec9e:	4798      	blx	r3
 800eca0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800eca2:	b1b9      	cbz	r1, 800ecd4 <_reclaim_reent+0xb0>
 800eca4:	4620      	mov	r0, r4
 800eca6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ecaa:	f7ff bfad 	b.w	800ec08 <cleanup_glue>
 800ecae:	5949      	ldr	r1, [r1, r5]
 800ecb0:	b941      	cbnz	r1, 800ecc4 <_reclaim_reent+0xa0>
 800ecb2:	3504      	adds	r5, #4
 800ecb4:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ecb6:	2d80      	cmp	r5, #128	; 0x80
 800ecb8:	68d9      	ldr	r1, [r3, #12]
 800ecba:	d1f8      	bne.n	800ecae <_reclaim_reent+0x8a>
 800ecbc:	4620      	mov	r0, r4
 800ecbe:	f000 f849 	bl	800ed54 <_free_r>
 800ecc2:	e7ba      	b.n	800ec3a <_reclaim_reent+0x16>
 800ecc4:	680e      	ldr	r6, [r1, #0]
 800ecc6:	4620      	mov	r0, r4
 800ecc8:	f000 f844 	bl	800ed54 <_free_r>
 800eccc:	4631      	mov	r1, r6
 800ecce:	e7ef      	b.n	800ecb0 <_reclaim_reent+0x8c>
 800ecd0:	2500      	movs	r5, #0
 800ecd2:	e7ef      	b.n	800ecb4 <_reclaim_reent+0x90>
 800ecd4:	bd70      	pop	{r4, r5, r6, pc}
 800ecd6:	bf00      	nop
 800ecd8:	200000ac 	.word	0x200000ac

0800ecdc <_sbrk_r>:
 800ecdc:	b538      	push	{r3, r4, r5, lr}
 800ecde:	4d06      	ldr	r5, [pc, #24]	; (800ecf8 <_sbrk_r+0x1c>)
 800ece0:	2300      	movs	r3, #0
 800ece2:	4604      	mov	r4, r0
 800ece4:	4608      	mov	r0, r1
 800ece6:	602b      	str	r3, [r5, #0]
 800ece8:	f7f6 fb62 	bl	80053b0 <_sbrk>
 800ecec:	1c43      	adds	r3, r0, #1
 800ecee:	d102      	bne.n	800ecf6 <_sbrk_r+0x1a>
 800ecf0:	682b      	ldr	r3, [r5, #0]
 800ecf2:	b103      	cbz	r3, 800ecf6 <_sbrk_r+0x1a>
 800ecf4:	6023      	str	r3, [r4, #0]
 800ecf6:	bd38      	pop	{r3, r4, r5, pc}
 800ecf8:	20004c50 	.word	0x20004c50

0800ecfc <siprintf>:
 800ecfc:	b40e      	push	{r1, r2, r3}
 800ecfe:	b500      	push	{lr}
 800ed00:	b09c      	sub	sp, #112	; 0x70
 800ed02:	ab1d      	add	r3, sp, #116	; 0x74
 800ed04:	9002      	str	r0, [sp, #8]
 800ed06:	9006      	str	r0, [sp, #24]
 800ed08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ed0c:	4809      	ldr	r0, [pc, #36]	; (800ed34 <siprintf+0x38>)
 800ed0e:	9107      	str	r1, [sp, #28]
 800ed10:	9104      	str	r1, [sp, #16]
 800ed12:	4909      	ldr	r1, [pc, #36]	; (800ed38 <siprintf+0x3c>)
 800ed14:	f853 2b04 	ldr.w	r2, [r3], #4
 800ed18:	9105      	str	r1, [sp, #20]
 800ed1a:	6800      	ldr	r0, [r0, #0]
 800ed1c:	9301      	str	r3, [sp, #4]
 800ed1e:	a902      	add	r1, sp, #8
 800ed20:	f000 f8c0 	bl	800eea4 <_svfiprintf_r>
 800ed24:	9b02      	ldr	r3, [sp, #8]
 800ed26:	2200      	movs	r2, #0
 800ed28:	701a      	strb	r2, [r3, #0]
 800ed2a:	b01c      	add	sp, #112	; 0x70
 800ed2c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ed30:	b003      	add	sp, #12
 800ed32:	4770      	bx	lr
 800ed34:	200000ac 	.word	0x200000ac
 800ed38:	ffff0208 	.word	0xffff0208

0800ed3c <__malloc_lock>:
 800ed3c:	4801      	ldr	r0, [pc, #4]	; (800ed44 <__malloc_lock+0x8>)
 800ed3e:	f7ff beb7 	b.w	800eab0 <__retarget_lock_acquire_recursive>
 800ed42:	bf00      	nop
 800ed44:	20004c44 	.word	0x20004c44

0800ed48 <__malloc_unlock>:
 800ed48:	4801      	ldr	r0, [pc, #4]	; (800ed50 <__malloc_unlock+0x8>)
 800ed4a:	f7ff beb2 	b.w	800eab2 <__retarget_lock_release_recursive>
 800ed4e:	bf00      	nop
 800ed50:	20004c44 	.word	0x20004c44

0800ed54 <_free_r>:
 800ed54:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ed56:	2900      	cmp	r1, #0
 800ed58:	d044      	beq.n	800ede4 <_free_r+0x90>
 800ed5a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ed5e:	9001      	str	r0, [sp, #4]
 800ed60:	2b00      	cmp	r3, #0
 800ed62:	f1a1 0404 	sub.w	r4, r1, #4
 800ed66:	bfb8      	it	lt
 800ed68:	18e4      	addlt	r4, r4, r3
 800ed6a:	f7ff ffe7 	bl	800ed3c <__malloc_lock>
 800ed6e:	4a1e      	ldr	r2, [pc, #120]	; (800ede8 <_free_r+0x94>)
 800ed70:	9801      	ldr	r0, [sp, #4]
 800ed72:	6813      	ldr	r3, [r2, #0]
 800ed74:	b933      	cbnz	r3, 800ed84 <_free_r+0x30>
 800ed76:	6063      	str	r3, [r4, #4]
 800ed78:	6014      	str	r4, [r2, #0]
 800ed7a:	b003      	add	sp, #12
 800ed7c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ed80:	f7ff bfe2 	b.w	800ed48 <__malloc_unlock>
 800ed84:	42a3      	cmp	r3, r4
 800ed86:	d908      	bls.n	800ed9a <_free_r+0x46>
 800ed88:	6825      	ldr	r5, [r4, #0]
 800ed8a:	1961      	adds	r1, r4, r5
 800ed8c:	428b      	cmp	r3, r1
 800ed8e:	bf01      	itttt	eq
 800ed90:	6819      	ldreq	r1, [r3, #0]
 800ed92:	685b      	ldreq	r3, [r3, #4]
 800ed94:	1949      	addeq	r1, r1, r5
 800ed96:	6021      	streq	r1, [r4, #0]
 800ed98:	e7ed      	b.n	800ed76 <_free_r+0x22>
 800ed9a:	461a      	mov	r2, r3
 800ed9c:	685b      	ldr	r3, [r3, #4]
 800ed9e:	b10b      	cbz	r3, 800eda4 <_free_r+0x50>
 800eda0:	42a3      	cmp	r3, r4
 800eda2:	d9fa      	bls.n	800ed9a <_free_r+0x46>
 800eda4:	6811      	ldr	r1, [r2, #0]
 800eda6:	1855      	adds	r5, r2, r1
 800eda8:	42a5      	cmp	r5, r4
 800edaa:	d10b      	bne.n	800edc4 <_free_r+0x70>
 800edac:	6824      	ldr	r4, [r4, #0]
 800edae:	4421      	add	r1, r4
 800edb0:	1854      	adds	r4, r2, r1
 800edb2:	42a3      	cmp	r3, r4
 800edb4:	6011      	str	r1, [r2, #0]
 800edb6:	d1e0      	bne.n	800ed7a <_free_r+0x26>
 800edb8:	681c      	ldr	r4, [r3, #0]
 800edba:	685b      	ldr	r3, [r3, #4]
 800edbc:	6053      	str	r3, [r2, #4]
 800edbe:	4421      	add	r1, r4
 800edc0:	6011      	str	r1, [r2, #0]
 800edc2:	e7da      	b.n	800ed7a <_free_r+0x26>
 800edc4:	d902      	bls.n	800edcc <_free_r+0x78>
 800edc6:	230c      	movs	r3, #12
 800edc8:	6003      	str	r3, [r0, #0]
 800edca:	e7d6      	b.n	800ed7a <_free_r+0x26>
 800edcc:	6825      	ldr	r5, [r4, #0]
 800edce:	1961      	adds	r1, r4, r5
 800edd0:	428b      	cmp	r3, r1
 800edd2:	bf04      	itt	eq
 800edd4:	6819      	ldreq	r1, [r3, #0]
 800edd6:	685b      	ldreq	r3, [r3, #4]
 800edd8:	6063      	str	r3, [r4, #4]
 800edda:	bf04      	itt	eq
 800eddc:	1949      	addeq	r1, r1, r5
 800edde:	6021      	streq	r1, [r4, #0]
 800ede0:	6054      	str	r4, [r2, #4]
 800ede2:	e7ca      	b.n	800ed7a <_free_r+0x26>
 800ede4:	b003      	add	sp, #12
 800ede6:	bd30      	pop	{r4, r5, pc}
 800ede8:	20004c48 	.word	0x20004c48

0800edec <__ssputs_r>:
 800edec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edf0:	688e      	ldr	r6, [r1, #8]
 800edf2:	429e      	cmp	r6, r3
 800edf4:	4682      	mov	sl, r0
 800edf6:	460c      	mov	r4, r1
 800edf8:	4690      	mov	r8, r2
 800edfa:	461f      	mov	r7, r3
 800edfc:	d838      	bhi.n	800ee70 <__ssputs_r+0x84>
 800edfe:	898a      	ldrh	r2, [r1, #12]
 800ee00:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ee04:	d032      	beq.n	800ee6c <__ssputs_r+0x80>
 800ee06:	6825      	ldr	r5, [r4, #0]
 800ee08:	6909      	ldr	r1, [r1, #16]
 800ee0a:	eba5 0901 	sub.w	r9, r5, r1
 800ee0e:	6965      	ldr	r5, [r4, #20]
 800ee10:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ee14:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ee18:	3301      	adds	r3, #1
 800ee1a:	444b      	add	r3, r9
 800ee1c:	106d      	asrs	r5, r5, #1
 800ee1e:	429d      	cmp	r5, r3
 800ee20:	bf38      	it	cc
 800ee22:	461d      	movcc	r5, r3
 800ee24:	0553      	lsls	r3, r2, #21
 800ee26:	d531      	bpl.n	800ee8c <__ssputs_r+0xa0>
 800ee28:	4629      	mov	r1, r5
 800ee2a:	f7ff fe79 	bl	800eb20 <_malloc_r>
 800ee2e:	4606      	mov	r6, r0
 800ee30:	b950      	cbnz	r0, 800ee48 <__ssputs_r+0x5c>
 800ee32:	230c      	movs	r3, #12
 800ee34:	f8ca 3000 	str.w	r3, [sl]
 800ee38:	89a3      	ldrh	r3, [r4, #12]
 800ee3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ee3e:	81a3      	strh	r3, [r4, #12]
 800ee40:	f04f 30ff 	mov.w	r0, #4294967295
 800ee44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee48:	6921      	ldr	r1, [r4, #16]
 800ee4a:	464a      	mov	r2, r9
 800ee4c:	f7ff fe32 	bl	800eab4 <memcpy>
 800ee50:	89a3      	ldrh	r3, [r4, #12]
 800ee52:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ee56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ee5a:	81a3      	strh	r3, [r4, #12]
 800ee5c:	6126      	str	r6, [r4, #16]
 800ee5e:	6165      	str	r5, [r4, #20]
 800ee60:	444e      	add	r6, r9
 800ee62:	eba5 0509 	sub.w	r5, r5, r9
 800ee66:	6026      	str	r6, [r4, #0]
 800ee68:	60a5      	str	r5, [r4, #8]
 800ee6a:	463e      	mov	r6, r7
 800ee6c:	42be      	cmp	r6, r7
 800ee6e:	d900      	bls.n	800ee72 <__ssputs_r+0x86>
 800ee70:	463e      	mov	r6, r7
 800ee72:	6820      	ldr	r0, [r4, #0]
 800ee74:	4632      	mov	r2, r6
 800ee76:	4641      	mov	r1, r8
 800ee78:	f000 faa8 	bl	800f3cc <memmove>
 800ee7c:	68a3      	ldr	r3, [r4, #8]
 800ee7e:	1b9b      	subs	r3, r3, r6
 800ee80:	60a3      	str	r3, [r4, #8]
 800ee82:	6823      	ldr	r3, [r4, #0]
 800ee84:	4433      	add	r3, r6
 800ee86:	6023      	str	r3, [r4, #0]
 800ee88:	2000      	movs	r0, #0
 800ee8a:	e7db      	b.n	800ee44 <__ssputs_r+0x58>
 800ee8c:	462a      	mov	r2, r5
 800ee8e:	f000 fab7 	bl	800f400 <_realloc_r>
 800ee92:	4606      	mov	r6, r0
 800ee94:	2800      	cmp	r0, #0
 800ee96:	d1e1      	bne.n	800ee5c <__ssputs_r+0x70>
 800ee98:	6921      	ldr	r1, [r4, #16]
 800ee9a:	4650      	mov	r0, sl
 800ee9c:	f7ff ff5a 	bl	800ed54 <_free_r>
 800eea0:	e7c7      	b.n	800ee32 <__ssputs_r+0x46>
	...

0800eea4 <_svfiprintf_r>:
 800eea4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eea8:	4698      	mov	r8, r3
 800eeaa:	898b      	ldrh	r3, [r1, #12]
 800eeac:	061b      	lsls	r3, r3, #24
 800eeae:	b09d      	sub	sp, #116	; 0x74
 800eeb0:	4607      	mov	r7, r0
 800eeb2:	460d      	mov	r5, r1
 800eeb4:	4614      	mov	r4, r2
 800eeb6:	d50e      	bpl.n	800eed6 <_svfiprintf_r+0x32>
 800eeb8:	690b      	ldr	r3, [r1, #16]
 800eeba:	b963      	cbnz	r3, 800eed6 <_svfiprintf_r+0x32>
 800eebc:	2140      	movs	r1, #64	; 0x40
 800eebe:	f7ff fe2f 	bl	800eb20 <_malloc_r>
 800eec2:	6028      	str	r0, [r5, #0]
 800eec4:	6128      	str	r0, [r5, #16]
 800eec6:	b920      	cbnz	r0, 800eed2 <_svfiprintf_r+0x2e>
 800eec8:	230c      	movs	r3, #12
 800eeca:	603b      	str	r3, [r7, #0]
 800eecc:	f04f 30ff 	mov.w	r0, #4294967295
 800eed0:	e0d1      	b.n	800f076 <_svfiprintf_r+0x1d2>
 800eed2:	2340      	movs	r3, #64	; 0x40
 800eed4:	616b      	str	r3, [r5, #20]
 800eed6:	2300      	movs	r3, #0
 800eed8:	9309      	str	r3, [sp, #36]	; 0x24
 800eeda:	2320      	movs	r3, #32
 800eedc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800eee0:	f8cd 800c 	str.w	r8, [sp, #12]
 800eee4:	2330      	movs	r3, #48	; 0x30
 800eee6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800f090 <_svfiprintf_r+0x1ec>
 800eeea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800eeee:	f04f 0901 	mov.w	r9, #1
 800eef2:	4623      	mov	r3, r4
 800eef4:	469a      	mov	sl, r3
 800eef6:	f813 2b01 	ldrb.w	r2, [r3], #1
 800eefa:	b10a      	cbz	r2, 800ef00 <_svfiprintf_r+0x5c>
 800eefc:	2a25      	cmp	r2, #37	; 0x25
 800eefe:	d1f9      	bne.n	800eef4 <_svfiprintf_r+0x50>
 800ef00:	ebba 0b04 	subs.w	fp, sl, r4
 800ef04:	d00b      	beq.n	800ef1e <_svfiprintf_r+0x7a>
 800ef06:	465b      	mov	r3, fp
 800ef08:	4622      	mov	r2, r4
 800ef0a:	4629      	mov	r1, r5
 800ef0c:	4638      	mov	r0, r7
 800ef0e:	f7ff ff6d 	bl	800edec <__ssputs_r>
 800ef12:	3001      	adds	r0, #1
 800ef14:	f000 80aa 	beq.w	800f06c <_svfiprintf_r+0x1c8>
 800ef18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ef1a:	445a      	add	r2, fp
 800ef1c:	9209      	str	r2, [sp, #36]	; 0x24
 800ef1e:	f89a 3000 	ldrb.w	r3, [sl]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	f000 80a2 	beq.w	800f06c <_svfiprintf_r+0x1c8>
 800ef28:	2300      	movs	r3, #0
 800ef2a:	f04f 32ff 	mov.w	r2, #4294967295
 800ef2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ef32:	f10a 0a01 	add.w	sl, sl, #1
 800ef36:	9304      	str	r3, [sp, #16]
 800ef38:	9307      	str	r3, [sp, #28]
 800ef3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ef3e:	931a      	str	r3, [sp, #104]	; 0x68
 800ef40:	4654      	mov	r4, sl
 800ef42:	2205      	movs	r2, #5
 800ef44:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ef48:	4851      	ldr	r0, [pc, #324]	; (800f090 <_svfiprintf_r+0x1ec>)
 800ef4a:	f7f1 f949 	bl	80001e0 <memchr>
 800ef4e:	9a04      	ldr	r2, [sp, #16]
 800ef50:	b9d8      	cbnz	r0, 800ef8a <_svfiprintf_r+0xe6>
 800ef52:	06d0      	lsls	r0, r2, #27
 800ef54:	bf44      	itt	mi
 800ef56:	2320      	movmi	r3, #32
 800ef58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef5c:	0711      	lsls	r1, r2, #28
 800ef5e:	bf44      	itt	mi
 800ef60:	232b      	movmi	r3, #43	; 0x2b
 800ef62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ef66:	f89a 3000 	ldrb.w	r3, [sl]
 800ef6a:	2b2a      	cmp	r3, #42	; 0x2a
 800ef6c:	d015      	beq.n	800ef9a <_svfiprintf_r+0xf6>
 800ef6e:	9a07      	ldr	r2, [sp, #28]
 800ef70:	4654      	mov	r4, sl
 800ef72:	2000      	movs	r0, #0
 800ef74:	f04f 0c0a 	mov.w	ip, #10
 800ef78:	4621      	mov	r1, r4
 800ef7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ef7e:	3b30      	subs	r3, #48	; 0x30
 800ef80:	2b09      	cmp	r3, #9
 800ef82:	d94e      	bls.n	800f022 <_svfiprintf_r+0x17e>
 800ef84:	b1b0      	cbz	r0, 800efb4 <_svfiprintf_r+0x110>
 800ef86:	9207      	str	r2, [sp, #28]
 800ef88:	e014      	b.n	800efb4 <_svfiprintf_r+0x110>
 800ef8a:	eba0 0308 	sub.w	r3, r0, r8
 800ef8e:	fa09 f303 	lsl.w	r3, r9, r3
 800ef92:	4313      	orrs	r3, r2
 800ef94:	9304      	str	r3, [sp, #16]
 800ef96:	46a2      	mov	sl, r4
 800ef98:	e7d2      	b.n	800ef40 <_svfiprintf_r+0x9c>
 800ef9a:	9b03      	ldr	r3, [sp, #12]
 800ef9c:	1d19      	adds	r1, r3, #4
 800ef9e:	681b      	ldr	r3, [r3, #0]
 800efa0:	9103      	str	r1, [sp, #12]
 800efa2:	2b00      	cmp	r3, #0
 800efa4:	bfbb      	ittet	lt
 800efa6:	425b      	neglt	r3, r3
 800efa8:	f042 0202 	orrlt.w	r2, r2, #2
 800efac:	9307      	strge	r3, [sp, #28]
 800efae:	9307      	strlt	r3, [sp, #28]
 800efb0:	bfb8      	it	lt
 800efb2:	9204      	strlt	r2, [sp, #16]
 800efb4:	7823      	ldrb	r3, [r4, #0]
 800efb6:	2b2e      	cmp	r3, #46	; 0x2e
 800efb8:	d10c      	bne.n	800efd4 <_svfiprintf_r+0x130>
 800efba:	7863      	ldrb	r3, [r4, #1]
 800efbc:	2b2a      	cmp	r3, #42	; 0x2a
 800efbe:	d135      	bne.n	800f02c <_svfiprintf_r+0x188>
 800efc0:	9b03      	ldr	r3, [sp, #12]
 800efc2:	1d1a      	adds	r2, r3, #4
 800efc4:	681b      	ldr	r3, [r3, #0]
 800efc6:	9203      	str	r2, [sp, #12]
 800efc8:	2b00      	cmp	r3, #0
 800efca:	bfb8      	it	lt
 800efcc:	f04f 33ff 	movlt.w	r3, #4294967295
 800efd0:	3402      	adds	r4, #2
 800efd2:	9305      	str	r3, [sp, #20]
 800efd4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800f0a0 <_svfiprintf_r+0x1fc>
 800efd8:	7821      	ldrb	r1, [r4, #0]
 800efda:	2203      	movs	r2, #3
 800efdc:	4650      	mov	r0, sl
 800efde:	f7f1 f8ff 	bl	80001e0 <memchr>
 800efe2:	b140      	cbz	r0, 800eff6 <_svfiprintf_r+0x152>
 800efe4:	2340      	movs	r3, #64	; 0x40
 800efe6:	eba0 000a 	sub.w	r0, r0, sl
 800efea:	fa03 f000 	lsl.w	r0, r3, r0
 800efee:	9b04      	ldr	r3, [sp, #16]
 800eff0:	4303      	orrs	r3, r0
 800eff2:	3401      	adds	r4, #1
 800eff4:	9304      	str	r3, [sp, #16]
 800eff6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800effa:	4826      	ldr	r0, [pc, #152]	; (800f094 <_svfiprintf_r+0x1f0>)
 800effc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800f000:	2206      	movs	r2, #6
 800f002:	f7f1 f8ed 	bl	80001e0 <memchr>
 800f006:	2800      	cmp	r0, #0
 800f008:	d038      	beq.n	800f07c <_svfiprintf_r+0x1d8>
 800f00a:	4b23      	ldr	r3, [pc, #140]	; (800f098 <_svfiprintf_r+0x1f4>)
 800f00c:	bb1b      	cbnz	r3, 800f056 <_svfiprintf_r+0x1b2>
 800f00e:	9b03      	ldr	r3, [sp, #12]
 800f010:	3307      	adds	r3, #7
 800f012:	f023 0307 	bic.w	r3, r3, #7
 800f016:	3308      	adds	r3, #8
 800f018:	9303      	str	r3, [sp, #12]
 800f01a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f01c:	4433      	add	r3, r6
 800f01e:	9309      	str	r3, [sp, #36]	; 0x24
 800f020:	e767      	b.n	800eef2 <_svfiprintf_r+0x4e>
 800f022:	fb0c 3202 	mla	r2, ip, r2, r3
 800f026:	460c      	mov	r4, r1
 800f028:	2001      	movs	r0, #1
 800f02a:	e7a5      	b.n	800ef78 <_svfiprintf_r+0xd4>
 800f02c:	2300      	movs	r3, #0
 800f02e:	3401      	adds	r4, #1
 800f030:	9305      	str	r3, [sp, #20]
 800f032:	4619      	mov	r1, r3
 800f034:	f04f 0c0a 	mov.w	ip, #10
 800f038:	4620      	mov	r0, r4
 800f03a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f03e:	3a30      	subs	r2, #48	; 0x30
 800f040:	2a09      	cmp	r2, #9
 800f042:	d903      	bls.n	800f04c <_svfiprintf_r+0x1a8>
 800f044:	2b00      	cmp	r3, #0
 800f046:	d0c5      	beq.n	800efd4 <_svfiprintf_r+0x130>
 800f048:	9105      	str	r1, [sp, #20]
 800f04a:	e7c3      	b.n	800efd4 <_svfiprintf_r+0x130>
 800f04c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f050:	4604      	mov	r4, r0
 800f052:	2301      	movs	r3, #1
 800f054:	e7f0      	b.n	800f038 <_svfiprintf_r+0x194>
 800f056:	ab03      	add	r3, sp, #12
 800f058:	9300      	str	r3, [sp, #0]
 800f05a:	462a      	mov	r2, r5
 800f05c:	4b0f      	ldr	r3, [pc, #60]	; (800f09c <_svfiprintf_r+0x1f8>)
 800f05e:	a904      	add	r1, sp, #16
 800f060:	4638      	mov	r0, r7
 800f062:	f3af 8000 	nop.w
 800f066:	1c42      	adds	r2, r0, #1
 800f068:	4606      	mov	r6, r0
 800f06a:	d1d6      	bne.n	800f01a <_svfiprintf_r+0x176>
 800f06c:	89ab      	ldrh	r3, [r5, #12]
 800f06e:	065b      	lsls	r3, r3, #25
 800f070:	f53f af2c 	bmi.w	800eecc <_svfiprintf_r+0x28>
 800f074:	9809      	ldr	r0, [sp, #36]	; 0x24
 800f076:	b01d      	add	sp, #116	; 0x74
 800f078:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f07c:	ab03      	add	r3, sp, #12
 800f07e:	9300      	str	r3, [sp, #0]
 800f080:	462a      	mov	r2, r5
 800f082:	4b06      	ldr	r3, [pc, #24]	; (800f09c <_svfiprintf_r+0x1f8>)
 800f084:	a904      	add	r1, sp, #16
 800f086:	4638      	mov	r0, r7
 800f088:	f000 f87a 	bl	800f180 <_printf_i>
 800f08c:	e7eb      	b.n	800f066 <_svfiprintf_r+0x1c2>
 800f08e:	bf00      	nop
 800f090:	0801d5f4 	.word	0x0801d5f4
 800f094:	0801d5fe 	.word	0x0801d5fe
 800f098:	00000000 	.word	0x00000000
 800f09c:	0800eded 	.word	0x0800eded
 800f0a0:	0801d5fa 	.word	0x0801d5fa

0800f0a4 <_printf_common>:
 800f0a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0a8:	4616      	mov	r6, r2
 800f0aa:	4699      	mov	r9, r3
 800f0ac:	688a      	ldr	r2, [r1, #8]
 800f0ae:	690b      	ldr	r3, [r1, #16]
 800f0b0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800f0b4:	4293      	cmp	r3, r2
 800f0b6:	bfb8      	it	lt
 800f0b8:	4613      	movlt	r3, r2
 800f0ba:	6033      	str	r3, [r6, #0]
 800f0bc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800f0c0:	4607      	mov	r7, r0
 800f0c2:	460c      	mov	r4, r1
 800f0c4:	b10a      	cbz	r2, 800f0ca <_printf_common+0x26>
 800f0c6:	3301      	adds	r3, #1
 800f0c8:	6033      	str	r3, [r6, #0]
 800f0ca:	6823      	ldr	r3, [r4, #0]
 800f0cc:	0699      	lsls	r1, r3, #26
 800f0ce:	bf42      	ittt	mi
 800f0d0:	6833      	ldrmi	r3, [r6, #0]
 800f0d2:	3302      	addmi	r3, #2
 800f0d4:	6033      	strmi	r3, [r6, #0]
 800f0d6:	6825      	ldr	r5, [r4, #0]
 800f0d8:	f015 0506 	ands.w	r5, r5, #6
 800f0dc:	d106      	bne.n	800f0ec <_printf_common+0x48>
 800f0de:	f104 0a19 	add.w	sl, r4, #25
 800f0e2:	68e3      	ldr	r3, [r4, #12]
 800f0e4:	6832      	ldr	r2, [r6, #0]
 800f0e6:	1a9b      	subs	r3, r3, r2
 800f0e8:	42ab      	cmp	r3, r5
 800f0ea:	dc26      	bgt.n	800f13a <_printf_common+0x96>
 800f0ec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800f0f0:	1e13      	subs	r3, r2, #0
 800f0f2:	6822      	ldr	r2, [r4, #0]
 800f0f4:	bf18      	it	ne
 800f0f6:	2301      	movne	r3, #1
 800f0f8:	0692      	lsls	r2, r2, #26
 800f0fa:	d42b      	bmi.n	800f154 <_printf_common+0xb0>
 800f0fc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800f100:	4649      	mov	r1, r9
 800f102:	4638      	mov	r0, r7
 800f104:	47c0      	blx	r8
 800f106:	3001      	adds	r0, #1
 800f108:	d01e      	beq.n	800f148 <_printf_common+0xa4>
 800f10a:	6823      	ldr	r3, [r4, #0]
 800f10c:	68e5      	ldr	r5, [r4, #12]
 800f10e:	6832      	ldr	r2, [r6, #0]
 800f110:	f003 0306 	and.w	r3, r3, #6
 800f114:	2b04      	cmp	r3, #4
 800f116:	bf08      	it	eq
 800f118:	1aad      	subeq	r5, r5, r2
 800f11a:	68a3      	ldr	r3, [r4, #8]
 800f11c:	6922      	ldr	r2, [r4, #16]
 800f11e:	bf0c      	ite	eq
 800f120:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800f124:	2500      	movne	r5, #0
 800f126:	4293      	cmp	r3, r2
 800f128:	bfc4      	itt	gt
 800f12a:	1a9b      	subgt	r3, r3, r2
 800f12c:	18ed      	addgt	r5, r5, r3
 800f12e:	2600      	movs	r6, #0
 800f130:	341a      	adds	r4, #26
 800f132:	42b5      	cmp	r5, r6
 800f134:	d11a      	bne.n	800f16c <_printf_common+0xc8>
 800f136:	2000      	movs	r0, #0
 800f138:	e008      	b.n	800f14c <_printf_common+0xa8>
 800f13a:	2301      	movs	r3, #1
 800f13c:	4652      	mov	r2, sl
 800f13e:	4649      	mov	r1, r9
 800f140:	4638      	mov	r0, r7
 800f142:	47c0      	blx	r8
 800f144:	3001      	adds	r0, #1
 800f146:	d103      	bne.n	800f150 <_printf_common+0xac>
 800f148:	f04f 30ff 	mov.w	r0, #4294967295
 800f14c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f150:	3501      	adds	r5, #1
 800f152:	e7c6      	b.n	800f0e2 <_printf_common+0x3e>
 800f154:	18e1      	adds	r1, r4, r3
 800f156:	1c5a      	adds	r2, r3, #1
 800f158:	2030      	movs	r0, #48	; 0x30
 800f15a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800f15e:	4422      	add	r2, r4
 800f160:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800f164:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800f168:	3302      	adds	r3, #2
 800f16a:	e7c7      	b.n	800f0fc <_printf_common+0x58>
 800f16c:	2301      	movs	r3, #1
 800f16e:	4622      	mov	r2, r4
 800f170:	4649      	mov	r1, r9
 800f172:	4638      	mov	r0, r7
 800f174:	47c0      	blx	r8
 800f176:	3001      	adds	r0, #1
 800f178:	d0e6      	beq.n	800f148 <_printf_common+0xa4>
 800f17a:	3601      	adds	r6, #1
 800f17c:	e7d9      	b.n	800f132 <_printf_common+0x8e>
	...

0800f180 <_printf_i>:
 800f180:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800f184:	7e0f      	ldrb	r7, [r1, #24]
 800f186:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800f188:	2f78      	cmp	r7, #120	; 0x78
 800f18a:	4691      	mov	r9, r2
 800f18c:	4680      	mov	r8, r0
 800f18e:	460c      	mov	r4, r1
 800f190:	469a      	mov	sl, r3
 800f192:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800f196:	d807      	bhi.n	800f1a8 <_printf_i+0x28>
 800f198:	2f62      	cmp	r7, #98	; 0x62
 800f19a:	d80a      	bhi.n	800f1b2 <_printf_i+0x32>
 800f19c:	2f00      	cmp	r7, #0
 800f19e:	f000 80d8 	beq.w	800f352 <_printf_i+0x1d2>
 800f1a2:	2f58      	cmp	r7, #88	; 0x58
 800f1a4:	f000 80a3 	beq.w	800f2ee <_printf_i+0x16e>
 800f1a8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f1ac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800f1b0:	e03a      	b.n	800f228 <_printf_i+0xa8>
 800f1b2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800f1b6:	2b15      	cmp	r3, #21
 800f1b8:	d8f6      	bhi.n	800f1a8 <_printf_i+0x28>
 800f1ba:	a101      	add	r1, pc, #4	; (adr r1, 800f1c0 <_printf_i+0x40>)
 800f1bc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800f1c0:	0800f219 	.word	0x0800f219
 800f1c4:	0800f22d 	.word	0x0800f22d
 800f1c8:	0800f1a9 	.word	0x0800f1a9
 800f1cc:	0800f1a9 	.word	0x0800f1a9
 800f1d0:	0800f1a9 	.word	0x0800f1a9
 800f1d4:	0800f1a9 	.word	0x0800f1a9
 800f1d8:	0800f22d 	.word	0x0800f22d
 800f1dc:	0800f1a9 	.word	0x0800f1a9
 800f1e0:	0800f1a9 	.word	0x0800f1a9
 800f1e4:	0800f1a9 	.word	0x0800f1a9
 800f1e8:	0800f1a9 	.word	0x0800f1a9
 800f1ec:	0800f339 	.word	0x0800f339
 800f1f0:	0800f25d 	.word	0x0800f25d
 800f1f4:	0800f31b 	.word	0x0800f31b
 800f1f8:	0800f1a9 	.word	0x0800f1a9
 800f1fc:	0800f1a9 	.word	0x0800f1a9
 800f200:	0800f35b 	.word	0x0800f35b
 800f204:	0800f1a9 	.word	0x0800f1a9
 800f208:	0800f25d 	.word	0x0800f25d
 800f20c:	0800f1a9 	.word	0x0800f1a9
 800f210:	0800f1a9 	.word	0x0800f1a9
 800f214:	0800f323 	.word	0x0800f323
 800f218:	682b      	ldr	r3, [r5, #0]
 800f21a:	1d1a      	adds	r2, r3, #4
 800f21c:	681b      	ldr	r3, [r3, #0]
 800f21e:	602a      	str	r2, [r5, #0]
 800f220:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800f224:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800f228:	2301      	movs	r3, #1
 800f22a:	e0a3      	b.n	800f374 <_printf_i+0x1f4>
 800f22c:	6820      	ldr	r0, [r4, #0]
 800f22e:	6829      	ldr	r1, [r5, #0]
 800f230:	0606      	lsls	r6, r0, #24
 800f232:	f101 0304 	add.w	r3, r1, #4
 800f236:	d50a      	bpl.n	800f24e <_printf_i+0xce>
 800f238:	680e      	ldr	r6, [r1, #0]
 800f23a:	602b      	str	r3, [r5, #0]
 800f23c:	2e00      	cmp	r6, #0
 800f23e:	da03      	bge.n	800f248 <_printf_i+0xc8>
 800f240:	232d      	movs	r3, #45	; 0x2d
 800f242:	4276      	negs	r6, r6
 800f244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f248:	485e      	ldr	r0, [pc, #376]	; (800f3c4 <_printf_i+0x244>)
 800f24a:	230a      	movs	r3, #10
 800f24c:	e019      	b.n	800f282 <_printf_i+0x102>
 800f24e:	680e      	ldr	r6, [r1, #0]
 800f250:	602b      	str	r3, [r5, #0]
 800f252:	f010 0f40 	tst.w	r0, #64	; 0x40
 800f256:	bf18      	it	ne
 800f258:	b236      	sxthne	r6, r6
 800f25a:	e7ef      	b.n	800f23c <_printf_i+0xbc>
 800f25c:	682b      	ldr	r3, [r5, #0]
 800f25e:	6820      	ldr	r0, [r4, #0]
 800f260:	1d19      	adds	r1, r3, #4
 800f262:	6029      	str	r1, [r5, #0]
 800f264:	0601      	lsls	r1, r0, #24
 800f266:	d501      	bpl.n	800f26c <_printf_i+0xec>
 800f268:	681e      	ldr	r6, [r3, #0]
 800f26a:	e002      	b.n	800f272 <_printf_i+0xf2>
 800f26c:	0646      	lsls	r6, r0, #25
 800f26e:	d5fb      	bpl.n	800f268 <_printf_i+0xe8>
 800f270:	881e      	ldrh	r6, [r3, #0]
 800f272:	4854      	ldr	r0, [pc, #336]	; (800f3c4 <_printf_i+0x244>)
 800f274:	2f6f      	cmp	r7, #111	; 0x6f
 800f276:	bf0c      	ite	eq
 800f278:	2308      	moveq	r3, #8
 800f27a:	230a      	movne	r3, #10
 800f27c:	2100      	movs	r1, #0
 800f27e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800f282:	6865      	ldr	r5, [r4, #4]
 800f284:	60a5      	str	r5, [r4, #8]
 800f286:	2d00      	cmp	r5, #0
 800f288:	bfa2      	ittt	ge
 800f28a:	6821      	ldrge	r1, [r4, #0]
 800f28c:	f021 0104 	bicge.w	r1, r1, #4
 800f290:	6021      	strge	r1, [r4, #0]
 800f292:	b90e      	cbnz	r6, 800f298 <_printf_i+0x118>
 800f294:	2d00      	cmp	r5, #0
 800f296:	d04d      	beq.n	800f334 <_printf_i+0x1b4>
 800f298:	4615      	mov	r5, r2
 800f29a:	fbb6 f1f3 	udiv	r1, r6, r3
 800f29e:	fb03 6711 	mls	r7, r3, r1, r6
 800f2a2:	5dc7      	ldrb	r7, [r0, r7]
 800f2a4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800f2a8:	4637      	mov	r7, r6
 800f2aa:	42bb      	cmp	r3, r7
 800f2ac:	460e      	mov	r6, r1
 800f2ae:	d9f4      	bls.n	800f29a <_printf_i+0x11a>
 800f2b0:	2b08      	cmp	r3, #8
 800f2b2:	d10b      	bne.n	800f2cc <_printf_i+0x14c>
 800f2b4:	6823      	ldr	r3, [r4, #0]
 800f2b6:	07de      	lsls	r6, r3, #31
 800f2b8:	d508      	bpl.n	800f2cc <_printf_i+0x14c>
 800f2ba:	6923      	ldr	r3, [r4, #16]
 800f2bc:	6861      	ldr	r1, [r4, #4]
 800f2be:	4299      	cmp	r1, r3
 800f2c0:	bfde      	ittt	le
 800f2c2:	2330      	movle	r3, #48	; 0x30
 800f2c4:	f805 3c01 	strble.w	r3, [r5, #-1]
 800f2c8:	f105 35ff 	addle.w	r5, r5, #4294967295
 800f2cc:	1b52      	subs	r2, r2, r5
 800f2ce:	6122      	str	r2, [r4, #16]
 800f2d0:	f8cd a000 	str.w	sl, [sp]
 800f2d4:	464b      	mov	r3, r9
 800f2d6:	aa03      	add	r2, sp, #12
 800f2d8:	4621      	mov	r1, r4
 800f2da:	4640      	mov	r0, r8
 800f2dc:	f7ff fee2 	bl	800f0a4 <_printf_common>
 800f2e0:	3001      	adds	r0, #1
 800f2e2:	d14c      	bne.n	800f37e <_printf_i+0x1fe>
 800f2e4:	f04f 30ff 	mov.w	r0, #4294967295
 800f2e8:	b004      	add	sp, #16
 800f2ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f2ee:	4835      	ldr	r0, [pc, #212]	; (800f3c4 <_printf_i+0x244>)
 800f2f0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800f2f4:	6829      	ldr	r1, [r5, #0]
 800f2f6:	6823      	ldr	r3, [r4, #0]
 800f2f8:	f851 6b04 	ldr.w	r6, [r1], #4
 800f2fc:	6029      	str	r1, [r5, #0]
 800f2fe:	061d      	lsls	r5, r3, #24
 800f300:	d514      	bpl.n	800f32c <_printf_i+0x1ac>
 800f302:	07df      	lsls	r7, r3, #31
 800f304:	bf44      	itt	mi
 800f306:	f043 0320 	orrmi.w	r3, r3, #32
 800f30a:	6023      	strmi	r3, [r4, #0]
 800f30c:	b91e      	cbnz	r6, 800f316 <_printf_i+0x196>
 800f30e:	6823      	ldr	r3, [r4, #0]
 800f310:	f023 0320 	bic.w	r3, r3, #32
 800f314:	6023      	str	r3, [r4, #0]
 800f316:	2310      	movs	r3, #16
 800f318:	e7b0      	b.n	800f27c <_printf_i+0xfc>
 800f31a:	6823      	ldr	r3, [r4, #0]
 800f31c:	f043 0320 	orr.w	r3, r3, #32
 800f320:	6023      	str	r3, [r4, #0]
 800f322:	2378      	movs	r3, #120	; 0x78
 800f324:	4828      	ldr	r0, [pc, #160]	; (800f3c8 <_printf_i+0x248>)
 800f326:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800f32a:	e7e3      	b.n	800f2f4 <_printf_i+0x174>
 800f32c:	0659      	lsls	r1, r3, #25
 800f32e:	bf48      	it	mi
 800f330:	b2b6      	uxthmi	r6, r6
 800f332:	e7e6      	b.n	800f302 <_printf_i+0x182>
 800f334:	4615      	mov	r5, r2
 800f336:	e7bb      	b.n	800f2b0 <_printf_i+0x130>
 800f338:	682b      	ldr	r3, [r5, #0]
 800f33a:	6826      	ldr	r6, [r4, #0]
 800f33c:	6961      	ldr	r1, [r4, #20]
 800f33e:	1d18      	adds	r0, r3, #4
 800f340:	6028      	str	r0, [r5, #0]
 800f342:	0635      	lsls	r5, r6, #24
 800f344:	681b      	ldr	r3, [r3, #0]
 800f346:	d501      	bpl.n	800f34c <_printf_i+0x1cc>
 800f348:	6019      	str	r1, [r3, #0]
 800f34a:	e002      	b.n	800f352 <_printf_i+0x1d2>
 800f34c:	0670      	lsls	r0, r6, #25
 800f34e:	d5fb      	bpl.n	800f348 <_printf_i+0x1c8>
 800f350:	8019      	strh	r1, [r3, #0]
 800f352:	2300      	movs	r3, #0
 800f354:	6123      	str	r3, [r4, #16]
 800f356:	4615      	mov	r5, r2
 800f358:	e7ba      	b.n	800f2d0 <_printf_i+0x150>
 800f35a:	682b      	ldr	r3, [r5, #0]
 800f35c:	1d1a      	adds	r2, r3, #4
 800f35e:	602a      	str	r2, [r5, #0]
 800f360:	681d      	ldr	r5, [r3, #0]
 800f362:	6862      	ldr	r2, [r4, #4]
 800f364:	2100      	movs	r1, #0
 800f366:	4628      	mov	r0, r5
 800f368:	f7f0 ff3a 	bl	80001e0 <memchr>
 800f36c:	b108      	cbz	r0, 800f372 <_printf_i+0x1f2>
 800f36e:	1b40      	subs	r0, r0, r5
 800f370:	6060      	str	r0, [r4, #4]
 800f372:	6863      	ldr	r3, [r4, #4]
 800f374:	6123      	str	r3, [r4, #16]
 800f376:	2300      	movs	r3, #0
 800f378:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800f37c:	e7a8      	b.n	800f2d0 <_printf_i+0x150>
 800f37e:	6923      	ldr	r3, [r4, #16]
 800f380:	462a      	mov	r2, r5
 800f382:	4649      	mov	r1, r9
 800f384:	4640      	mov	r0, r8
 800f386:	47d0      	blx	sl
 800f388:	3001      	adds	r0, #1
 800f38a:	d0ab      	beq.n	800f2e4 <_printf_i+0x164>
 800f38c:	6823      	ldr	r3, [r4, #0]
 800f38e:	079b      	lsls	r3, r3, #30
 800f390:	d413      	bmi.n	800f3ba <_printf_i+0x23a>
 800f392:	68e0      	ldr	r0, [r4, #12]
 800f394:	9b03      	ldr	r3, [sp, #12]
 800f396:	4298      	cmp	r0, r3
 800f398:	bfb8      	it	lt
 800f39a:	4618      	movlt	r0, r3
 800f39c:	e7a4      	b.n	800f2e8 <_printf_i+0x168>
 800f39e:	2301      	movs	r3, #1
 800f3a0:	4632      	mov	r2, r6
 800f3a2:	4649      	mov	r1, r9
 800f3a4:	4640      	mov	r0, r8
 800f3a6:	47d0      	blx	sl
 800f3a8:	3001      	adds	r0, #1
 800f3aa:	d09b      	beq.n	800f2e4 <_printf_i+0x164>
 800f3ac:	3501      	adds	r5, #1
 800f3ae:	68e3      	ldr	r3, [r4, #12]
 800f3b0:	9903      	ldr	r1, [sp, #12]
 800f3b2:	1a5b      	subs	r3, r3, r1
 800f3b4:	42ab      	cmp	r3, r5
 800f3b6:	dcf2      	bgt.n	800f39e <_printf_i+0x21e>
 800f3b8:	e7eb      	b.n	800f392 <_printf_i+0x212>
 800f3ba:	2500      	movs	r5, #0
 800f3bc:	f104 0619 	add.w	r6, r4, #25
 800f3c0:	e7f5      	b.n	800f3ae <_printf_i+0x22e>
 800f3c2:	bf00      	nop
 800f3c4:	0801d605 	.word	0x0801d605
 800f3c8:	0801d616 	.word	0x0801d616

0800f3cc <memmove>:
 800f3cc:	4288      	cmp	r0, r1
 800f3ce:	b510      	push	{r4, lr}
 800f3d0:	eb01 0402 	add.w	r4, r1, r2
 800f3d4:	d902      	bls.n	800f3dc <memmove+0x10>
 800f3d6:	4284      	cmp	r4, r0
 800f3d8:	4623      	mov	r3, r4
 800f3da:	d807      	bhi.n	800f3ec <memmove+0x20>
 800f3dc:	1e43      	subs	r3, r0, #1
 800f3de:	42a1      	cmp	r1, r4
 800f3e0:	d008      	beq.n	800f3f4 <memmove+0x28>
 800f3e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f3ea:	e7f8      	b.n	800f3de <memmove+0x12>
 800f3ec:	4402      	add	r2, r0
 800f3ee:	4601      	mov	r1, r0
 800f3f0:	428a      	cmp	r2, r1
 800f3f2:	d100      	bne.n	800f3f6 <memmove+0x2a>
 800f3f4:	bd10      	pop	{r4, pc}
 800f3f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f3fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f3fe:	e7f7      	b.n	800f3f0 <memmove+0x24>

0800f400 <_realloc_r>:
 800f400:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f404:	4680      	mov	r8, r0
 800f406:	4614      	mov	r4, r2
 800f408:	460e      	mov	r6, r1
 800f40a:	b921      	cbnz	r1, 800f416 <_realloc_r+0x16>
 800f40c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f410:	4611      	mov	r1, r2
 800f412:	f7ff bb85 	b.w	800eb20 <_malloc_r>
 800f416:	b92a      	cbnz	r2, 800f424 <_realloc_r+0x24>
 800f418:	f7ff fc9c 	bl	800ed54 <_free_r>
 800f41c:	4625      	mov	r5, r4
 800f41e:	4628      	mov	r0, r5
 800f420:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f424:	f000 f81b 	bl	800f45e <_malloc_usable_size_r>
 800f428:	4284      	cmp	r4, r0
 800f42a:	4607      	mov	r7, r0
 800f42c:	d802      	bhi.n	800f434 <_realloc_r+0x34>
 800f42e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f432:	d812      	bhi.n	800f45a <_realloc_r+0x5a>
 800f434:	4621      	mov	r1, r4
 800f436:	4640      	mov	r0, r8
 800f438:	f7ff fb72 	bl	800eb20 <_malloc_r>
 800f43c:	4605      	mov	r5, r0
 800f43e:	2800      	cmp	r0, #0
 800f440:	d0ed      	beq.n	800f41e <_realloc_r+0x1e>
 800f442:	42bc      	cmp	r4, r7
 800f444:	4622      	mov	r2, r4
 800f446:	4631      	mov	r1, r6
 800f448:	bf28      	it	cs
 800f44a:	463a      	movcs	r2, r7
 800f44c:	f7ff fb32 	bl	800eab4 <memcpy>
 800f450:	4631      	mov	r1, r6
 800f452:	4640      	mov	r0, r8
 800f454:	f7ff fc7e 	bl	800ed54 <_free_r>
 800f458:	e7e1      	b.n	800f41e <_realloc_r+0x1e>
 800f45a:	4635      	mov	r5, r6
 800f45c:	e7df      	b.n	800f41e <_realloc_r+0x1e>

0800f45e <_malloc_usable_size_r>:
 800f45e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f462:	1f18      	subs	r0, r3, #4
 800f464:	2b00      	cmp	r3, #0
 800f466:	bfbc      	itt	lt
 800f468:	580b      	ldrlt	r3, [r1, r0]
 800f46a:	18c0      	addlt	r0, r0, r3
 800f46c:	4770      	bx	lr
	...

0800f470 <sin>:
 800f470:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f472:	ec53 2b10 	vmov	r2, r3, d0
 800f476:	4828      	ldr	r0, [pc, #160]	; (800f518 <sin+0xa8>)
 800f478:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800f47c:	4281      	cmp	r1, r0
 800f47e:	dc07      	bgt.n	800f490 <sin+0x20>
 800f480:	ed9f 1b23 	vldr	d1, [pc, #140]	; 800f510 <sin+0xa0>
 800f484:	2000      	movs	r0, #0
 800f486:	b005      	add	sp, #20
 800f488:	f85d eb04 	ldr.w	lr, [sp], #4
 800f48c:	f000 be6c 	b.w	8010168 <__kernel_sin>
 800f490:	4822      	ldr	r0, [pc, #136]	; (800f51c <sin+0xac>)
 800f492:	4281      	cmp	r1, r0
 800f494:	dd09      	ble.n	800f4aa <sin+0x3a>
 800f496:	ee10 0a10 	vmov	r0, s0
 800f49a:	4619      	mov	r1, r3
 800f49c:	f7f0 fef4 	bl	8000288 <__aeabi_dsub>
 800f4a0:	ec41 0b10 	vmov	d0, r0, r1
 800f4a4:	b005      	add	sp, #20
 800f4a6:	f85d fb04 	ldr.w	pc, [sp], #4
 800f4aa:	4668      	mov	r0, sp
 800f4ac:	f000 f838 	bl	800f520 <__ieee754_rem_pio2>
 800f4b0:	f000 0003 	and.w	r0, r0, #3
 800f4b4:	2801      	cmp	r0, #1
 800f4b6:	d00c      	beq.n	800f4d2 <sin+0x62>
 800f4b8:	2802      	cmp	r0, #2
 800f4ba:	d011      	beq.n	800f4e0 <sin+0x70>
 800f4bc:	b9f0      	cbnz	r0, 800f4fc <sin+0x8c>
 800f4be:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f4c2:	ed9d 0b00 	vldr	d0, [sp]
 800f4c6:	2001      	movs	r0, #1
 800f4c8:	f000 fe4e 	bl	8010168 <__kernel_sin>
 800f4cc:	ec51 0b10 	vmov	r0, r1, d0
 800f4d0:	e7e6      	b.n	800f4a0 <sin+0x30>
 800f4d2:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f4d6:	ed9d 0b00 	vldr	d0, [sp]
 800f4da:	f000 fa2d 	bl	800f938 <__kernel_cos>
 800f4de:	e7f5      	b.n	800f4cc <sin+0x5c>
 800f4e0:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f4e4:	ed9d 0b00 	vldr	d0, [sp]
 800f4e8:	2001      	movs	r0, #1
 800f4ea:	f000 fe3d 	bl	8010168 <__kernel_sin>
 800f4ee:	ec53 2b10 	vmov	r2, r3, d0
 800f4f2:	ee10 0a10 	vmov	r0, s0
 800f4f6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800f4fa:	e7d1      	b.n	800f4a0 <sin+0x30>
 800f4fc:	ed9d 1b02 	vldr	d1, [sp, #8]
 800f500:	ed9d 0b00 	vldr	d0, [sp]
 800f504:	f000 fa18 	bl	800f938 <__kernel_cos>
 800f508:	e7f1      	b.n	800f4ee <sin+0x7e>
 800f50a:	bf00      	nop
 800f50c:	f3af 8000 	nop.w
	...
 800f518:	3fe921fb 	.word	0x3fe921fb
 800f51c:	7fefffff 	.word	0x7fefffff

0800f520 <__ieee754_rem_pio2>:
 800f520:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f524:	ed2d 8b02 	vpush	{d8}
 800f528:	ec55 4b10 	vmov	r4, r5, d0
 800f52c:	4bca      	ldr	r3, [pc, #808]	; (800f858 <__ieee754_rem_pio2+0x338>)
 800f52e:	b08b      	sub	sp, #44	; 0x2c
 800f530:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800f534:	4598      	cmp	r8, r3
 800f536:	4682      	mov	sl, r0
 800f538:	9502      	str	r5, [sp, #8]
 800f53a:	dc08      	bgt.n	800f54e <__ieee754_rem_pio2+0x2e>
 800f53c:	2200      	movs	r2, #0
 800f53e:	2300      	movs	r3, #0
 800f540:	ed80 0b00 	vstr	d0, [r0]
 800f544:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800f548:	f04f 0b00 	mov.w	fp, #0
 800f54c:	e028      	b.n	800f5a0 <__ieee754_rem_pio2+0x80>
 800f54e:	4bc3      	ldr	r3, [pc, #780]	; (800f85c <__ieee754_rem_pio2+0x33c>)
 800f550:	4598      	cmp	r8, r3
 800f552:	dc78      	bgt.n	800f646 <__ieee754_rem_pio2+0x126>
 800f554:	9b02      	ldr	r3, [sp, #8]
 800f556:	4ec2      	ldr	r6, [pc, #776]	; (800f860 <__ieee754_rem_pio2+0x340>)
 800f558:	2b00      	cmp	r3, #0
 800f55a:	ee10 0a10 	vmov	r0, s0
 800f55e:	a3b0      	add	r3, pc, #704	; (adr r3, 800f820 <__ieee754_rem_pio2+0x300>)
 800f560:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f564:	4629      	mov	r1, r5
 800f566:	dd39      	ble.n	800f5dc <__ieee754_rem_pio2+0xbc>
 800f568:	f7f0 fe8e 	bl	8000288 <__aeabi_dsub>
 800f56c:	45b0      	cmp	r8, r6
 800f56e:	4604      	mov	r4, r0
 800f570:	460d      	mov	r5, r1
 800f572:	d01b      	beq.n	800f5ac <__ieee754_rem_pio2+0x8c>
 800f574:	a3ac      	add	r3, pc, #688	; (adr r3, 800f828 <__ieee754_rem_pio2+0x308>)
 800f576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f57a:	f7f0 fe85 	bl	8000288 <__aeabi_dsub>
 800f57e:	4602      	mov	r2, r0
 800f580:	460b      	mov	r3, r1
 800f582:	e9ca 2300 	strd	r2, r3, [sl]
 800f586:	4620      	mov	r0, r4
 800f588:	4629      	mov	r1, r5
 800f58a:	f7f0 fe7d 	bl	8000288 <__aeabi_dsub>
 800f58e:	a3a6      	add	r3, pc, #664	; (adr r3, 800f828 <__ieee754_rem_pio2+0x308>)
 800f590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f594:	f7f0 fe78 	bl	8000288 <__aeabi_dsub>
 800f598:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f59c:	f04f 0b01 	mov.w	fp, #1
 800f5a0:	4658      	mov	r0, fp
 800f5a2:	b00b      	add	sp, #44	; 0x2c
 800f5a4:	ecbd 8b02 	vpop	{d8}
 800f5a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f5ac:	a3a0      	add	r3, pc, #640	; (adr r3, 800f830 <__ieee754_rem_pio2+0x310>)
 800f5ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5b2:	f7f0 fe69 	bl	8000288 <__aeabi_dsub>
 800f5b6:	a3a0      	add	r3, pc, #640	; (adr r3, 800f838 <__ieee754_rem_pio2+0x318>)
 800f5b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5bc:	4604      	mov	r4, r0
 800f5be:	460d      	mov	r5, r1
 800f5c0:	f7f0 fe62 	bl	8000288 <__aeabi_dsub>
 800f5c4:	4602      	mov	r2, r0
 800f5c6:	460b      	mov	r3, r1
 800f5c8:	e9ca 2300 	strd	r2, r3, [sl]
 800f5cc:	4620      	mov	r0, r4
 800f5ce:	4629      	mov	r1, r5
 800f5d0:	f7f0 fe5a 	bl	8000288 <__aeabi_dsub>
 800f5d4:	a398      	add	r3, pc, #608	; (adr r3, 800f838 <__ieee754_rem_pio2+0x318>)
 800f5d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5da:	e7db      	b.n	800f594 <__ieee754_rem_pio2+0x74>
 800f5dc:	f7f0 fe56 	bl	800028c <__adddf3>
 800f5e0:	45b0      	cmp	r8, r6
 800f5e2:	4604      	mov	r4, r0
 800f5e4:	460d      	mov	r5, r1
 800f5e6:	d016      	beq.n	800f616 <__ieee754_rem_pio2+0xf6>
 800f5e8:	a38f      	add	r3, pc, #572	; (adr r3, 800f828 <__ieee754_rem_pio2+0x308>)
 800f5ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f5ee:	f7f0 fe4d 	bl	800028c <__adddf3>
 800f5f2:	4602      	mov	r2, r0
 800f5f4:	460b      	mov	r3, r1
 800f5f6:	e9ca 2300 	strd	r2, r3, [sl]
 800f5fa:	4620      	mov	r0, r4
 800f5fc:	4629      	mov	r1, r5
 800f5fe:	f7f0 fe43 	bl	8000288 <__aeabi_dsub>
 800f602:	a389      	add	r3, pc, #548	; (adr r3, 800f828 <__ieee754_rem_pio2+0x308>)
 800f604:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f608:	f7f0 fe40 	bl	800028c <__adddf3>
 800f60c:	f04f 3bff 	mov.w	fp, #4294967295
 800f610:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f614:	e7c4      	b.n	800f5a0 <__ieee754_rem_pio2+0x80>
 800f616:	a386      	add	r3, pc, #536	; (adr r3, 800f830 <__ieee754_rem_pio2+0x310>)
 800f618:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f61c:	f7f0 fe36 	bl	800028c <__adddf3>
 800f620:	a385      	add	r3, pc, #532	; (adr r3, 800f838 <__ieee754_rem_pio2+0x318>)
 800f622:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f626:	4604      	mov	r4, r0
 800f628:	460d      	mov	r5, r1
 800f62a:	f7f0 fe2f 	bl	800028c <__adddf3>
 800f62e:	4602      	mov	r2, r0
 800f630:	460b      	mov	r3, r1
 800f632:	e9ca 2300 	strd	r2, r3, [sl]
 800f636:	4620      	mov	r0, r4
 800f638:	4629      	mov	r1, r5
 800f63a:	f7f0 fe25 	bl	8000288 <__aeabi_dsub>
 800f63e:	a37e      	add	r3, pc, #504	; (adr r3, 800f838 <__ieee754_rem_pio2+0x318>)
 800f640:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f644:	e7e0      	b.n	800f608 <__ieee754_rem_pio2+0xe8>
 800f646:	4b87      	ldr	r3, [pc, #540]	; (800f864 <__ieee754_rem_pio2+0x344>)
 800f648:	4598      	cmp	r8, r3
 800f64a:	f300 80d9 	bgt.w	800f800 <__ieee754_rem_pio2+0x2e0>
 800f64e:	f000 fe49 	bl	80102e4 <fabs>
 800f652:	ec55 4b10 	vmov	r4, r5, d0
 800f656:	ee10 0a10 	vmov	r0, s0
 800f65a:	a379      	add	r3, pc, #484	; (adr r3, 800f840 <__ieee754_rem_pio2+0x320>)
 800f65c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f660:	4629      	mov	r1, r5
 800f662:	f7f0 ffc9 	bl	80005f8 <__aeabi_dmul>
 800f666:	4b80      	ldr	r3, [pc, #512]	; (800f868 <__ieee754_rem_pio2+0x348>)
 800f668:	2200      	movs	r2, #0
 800f66a:	f7f0 fe0f 	bl	800028c <__adddf3>
 800f66e:	f7f1 fa5d 	bl	8000b2c <__aeabi_d2iz>
 800f672:	4683      	mov	fp, r0
 800f674:	f7f0 ff56 	bl	8000524 <__aeabi_i2d>
 800f678:	4602      	mov	r2, r0
 800f67a:	460b      	mov	r3, r1
 800f67c:	ec43 2b18 	vmov	d8, r2, r3
 800f680:	a367      	add	r3, pc, #412	; (adr r3, 800f820 <__ieee754_rem_pio2+0x300>)
 800f682:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f686:	f7f0 ffb7 	bl	80005f8 <__aeabi_dmul>
 800f68a:	4602      	mov	r2, r0
 800f68c:	460b      	mov	r3, r1
 800f68e:	4620      	mov	r0, r4
 800f690:	4629      	mov	r1, r5
 800f692:	f7f0 fdf9 	bl	8000288 <__aeabi_dsub>
 800f696:	a364      	add	r3, pc, #400	; (adr r3, 800f828 <__ieee754_rem_pio2+0x308>)
 800f698:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f69c:	4606      	mov	r6, r0
 800f69e:	460f      	mov	r7, r1
 800f6a0:	ec51 0b18 	vmov	r0, r1, d8
 800f6a4:	f7f0 ffa8 	bl	80005f8 <__aeabi_dmul>
 800f6a8:	f1bb 0f1f 	cmp.w	fp, #31
 800f6ac:	4604      	mov	r4, r0
 800f6ae:	460d      	mov	r5, r1
 800f6b0:	dc0d      	bgt.n	800f6ce <__ieee754_rem_pio2+0x1ae>
 800f6b2:	4b6e      	ldr	r3, [pc, #440]	; (800f86c <__ieee754_rem_pio2+0x34c>)
 800f6b4:	f10b 32ff 	add.w	r2, fp, #4294967295
 800f6b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800f6bc:	4543      	cmp	r3, r8
 800f6be:	d006      	beq.n	800f6ce <__ieee754_rem_pio2+0x1ae>
 800f6c0:	4622      	mov	r2, r4
 800f6c2:	462b      	mov	r3, r5
 800f6c4:	4630      	mov	r0, r6
 800f6c6:	4639      	mov	r1, r7
 800f6c8:	f7f0 fdde 	bl	8000288 <__aeabi_dsub>
 800f6cc:	e00f      	b.n	800f6ee <__ieee754_rem_pio2+0x1ce>
 800f6ce:	462b      	mov	r3, r5
 800f6d0:	4622      	mov	r2, r4
 800f6d2:	4630      	mov	r0, r6
 800f6d4:	4639      	mov	r1, r7
 800f6d6:	f7f0 fdd7 	bl	8000288 <__aeabi_dsub>
 800f6da:	ea4f 5328 	mov.w	r3, r8, asr #20
 800f6de:	9303      	str	r3, [sp, #12]
 800f6e0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f6e4:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 800f6e8:	f1b8 0f10 	cmp.w	r8, #16
 800f6ec:	dc02      	bgt.n	800f6f4 <__ieee754_rem_pio2+0x1d4>
 800f6ee:	e9ca 0100 	strd	r0, r1, [sl]
 800f6f2:	e039      	b.n	800f768 <__ieee754_rem_pio2+0x248>
 800f6f4:	a34e      	add	r3, pc, #312	; (adr r3, 800f830 <__ieee754_rem_pio2+0x310>)
 800f6f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6fa:	ec51 0b18 	vmov	r0, r1, d8
 800f6fe:	f7f0 ff7b 	bl	80005f8 <__aeabi_dmul>
 800f702:	4604      	mov	r4, r0
 800f704:	460d      	mov	r5, r1
 800f706:	4602      	mov	r2, r0
 800f708:	460b      	mov	r3, r1
 800f70a:	4630      	mov	r0, r6
 800f70c:	4639      	mov	r1, r7
 800f70e:	f7f0 fdbb 	bl	8000288 <__aeabi_dsub>
 800f712:	4602      	mov	r2, r0
 800f714:	460b      	mov	r3, r1
 800f716:	4680      	mov	r8, r0
 800f718:	4689      	mov	r9, r1
 800f71a:	4630      	mov	r0, r6
 800f71c:	4639      	mov	r1, r7
 800f71e:	f7f0 fdb3 	bl	8000288 <__aeabi_dsub>
 800f722:	4622      	mov	r2, r4
 800f724:	462b      	mov	r3, r5
 800f726:	f7f0 fdaf 	bl	8000288 <__aeabi_dsub>
 800f72a:	a343      	add	r3, pc, #268	; (adr r3, 800f838 <__ieee754_rem_pio2+0x318>)
 800f72c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f730:	4604      	mov	r4, r0
 800f732:	460d      	mov	r5, r1
 800f734:	ec51 0b18 	vmov	r0, r1, d8
 800f738:	f7f0 ff5e 	bl	80005f8 <__aeabi_dmul>
 800f73c:	4622      	mov	r2, r4
 800f73e:	462b      	mov	r3, r5
 800f740:	f7f0 fda2 	bl	8000288 <__aeabi_dsub>
 800f744:	4602      	mov	r2, r0
 800f746:	460b      	mov	r3, r1
 800f748:	4604      	mov	r4, r0
 800f74a:	460d      	mov	r5, r1
 800f74c:	4640      	mov	r0, r8
 800f74e:	4649      	mov	r1, r9
 800f750:	f7f0 fd9a 	bl	8000288 <__aeabi_dsub>
 800f754:	9a03      	ldr	r2, [sp, #12]
 800f756:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800f75a:	1ad3      	subs	r3, r2, r3
 800f75c:	2b31      	cmp	r3, #49	; 0x31
 800f75e:	dc24      	bgt.n	800f7aa <__ieee754_rem_pio2+0x28a>
 800f760:	e9ca 0100 	strd	r0, r1, [sl]
 800f764:	4646      	mov	r6, r8
 800f766:	464f      	mov	r7, r9
 800f768:	e9da 8900 	ldrd	r8, r9, [sl]
 800f76c:	4630      	mov	r0, r6
 800f76e:	4642      	mov	r2, r8
 800f770:	464b      	mov	r3, r9
 800f772:	4639      	mov	r1, r7
 800f774:	f7f0 fd88 	bl	8000288 <__aeabi_dsub>
 800f778:	462b      	mov	r3, r5
 800f77a:	4622      	mov	r2, r4
 800f77c:	f7f0 fd84 	bl	8000288 <__aeabi_dsub>
 800f780:	9b02      	ldr	r3, [sp, #8]
 800f782:	2b00      	cmp	r3, #0
 800f784:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f788:	f6bf af0a 	bge.w	800f5a0 <__ieee754_rem_pio2+0x80>
 800f78c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800f790:	f8ca 3004 	str.w	r3, [sl, #4]
 800f794:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f798:	f8ca 8000 	str.w	r8, [sl]
 800f79c:	f8ca 0008 	str.w	r0, [sl, #8]
 800f7a0:	f8ca 300c 	str.w	r3, [sl, #12]
 800f7a4:	f1cb 0b00 	rsb	fp, fp, #0
 800f7a8:	e6fa      	b.n	800f5a0 <__ieee754_rem_pio2+0x80>
 800f7aa:	a327      	add	r3, pc, #156	; (adr r3, 800f848 <__ieee754_rem_pio2+0x328>)
 800f7ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7b0:	ec51 0b18 	vmov	r0, r1, d8
 800f7b4:	f7f0 ff20 	bl	80005f8 <__aeabi_dmul>
 800f7b8:	4604      	mov	r4, r0
 800f7ba:	460d      	mov	r5, r1
 800f7bc:	4602      	mov	r2, r0
 800f7be:	460b      	mov	r3, r1
 800f7c0:	4640      	mov	r0, r8
 800f7c2:	4649      	mov	r1, r9
 800f7c4:	f7f0 fd60 	bl	8000288 <__aeabi_dsub>
 800f7c8:	4602      	mov	r2, r0
 800f7ca:	460b      	mov	r3, r1
 800f7cc:	4606      	mov	r6, r0
 800f7ce:	460f      	mov	r7, r1
 800f7d0:	4640      	mov	r0, r8
 800f7d2:	4649      	mov	r1, r9
 800f7d4:	f7f0 fd58 	bl	8000288 <__aeabi_dsub>
 800f7d8:	4622      	mov	r2, r4
 800f7da:	462b      	mov	r3, r5
 800f7dc:	f7f0 fd54 	bl	8000288 <__aeabi_dsub>
 800f7e0:	a31b      	add	r3, pc, #108	; (adr r3, 800f850 <__ieee754_rem_pio2+0x330>)
 800f7e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f7e6:	4604      	mov	r4, r0
 800f7e8:	460d      	mov	r5, r1
 800f7ea:	ec51 0b18 	vmov	r0, r1, d8
 800f7ee:	f7f0 ff03 	bl	80005f8 <__aeabi_dmul>
 800f7f2:	4622      	mov	r2, r4
 800f7f4:	462b      	mov	r3, r5
 800f7f6:	f7f0 fd47 	bl	8000288 <__aeabi_dsub>
 800f7fa:	4604      	mov	r4, r0
 800f7fc:	460d      	mov	r5, r1
 800f7fe:	e75f      	b.n	800f6c0 <__ieee754_rem_pio2+0x1a0>
 800f800:	4b1b      	ldr	r3, [pc, #108]	; (800f870 <__ieee754_rem_pio2+0x350>)
 800f802:	4598      	cmp	r8, r3
 800f804:	dd36      	ble.n	800f874 <__ieee754_rem_pio2+0x354>
 800f806:	ee10 2a10 	vmov	r2, s0
 800f80a:	462b      	mov	r3, r5
 800f80c:	4620      	mov	r0, r4
 800f80e:	4629      	mov	r1, r5
 800f810:	f7f0 fd3a 	bl	8000288 <__aeabi_dsub>
 800f814:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800f818:	e9ca 0100 	strd	r0, r1, [sl]
 800f81c:	e694      	b.n	800f548 <__ieee754_rem_pio2+0x28>
 800f81e:	bf00      	nop
 800f820:	54400000 	.word	0x54400000
 800f824:	3ff921fb 	.word	0x3ff921fb
 800f828:	1a626331 	.word	0x1a626331
 800f82c:	3dd0b461 	.word	0x3dd0b461
 800f830:	1a600000 	.word	0x1a600000
 800f834:	3dd0b461 	.word	0x3dd0b461
 800f838:	2e037073 	.word	0x2e037073
 800f83c:	3ba3198a 	.word	0x3ba3198a
 800f840:	6dc9c883 	.word	0x6dc9c883
 800f844:	3fe45f30 	.word	0x3fe45f30
 800f848:	2e000000 	.word	0x2e000000
 800f84c:	3ba3198a 	.word	0x3ba3198a
 800f850:	252049c1 	.word	0x252049c1
 800f854:	397b839a 	.word	0x397b839a
 800f858:	3fe921fb 	.word	0x3fe921fb
 800f85c:	4002d97b 	.word	0x4002d97b
 800f860:	3ff921fb 	.word	0x3ff921fb
 800f864:	413921fb 	.word	0x413921fb
 800f868:	3fe00000 	.word	0x3fe00000
 800f86c:	0801d628 	.word	0x0801d628
 800f870:	7fefffff 	.word	0x7fefffff
 800f874:	ea4f 5428 	mov.w	r4, r8, asr #20
 800f878:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 800f87c:	ee10 0a10 	vmov	r0, s0
 800f880:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800f884:	ee10 6a10 	vmov	r6, s0
 800f888:	460f      	mov	r7, r1
 800f88a:	f7f1 f94f 	bl	8000b2c <__aeabi_d2iz>
 800f88e:	f7f0 fe49 	bl	8000524 <__aeabi_i2d>
 800f892:	4602      	mov	r2, r0
 800f894:	460b      	mov	r3, r1
 800f896:	4630      	mov	r0, r6
 800f898:	4639      	mov	r1, r7
 800f89a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800f89e:	f7f0 fcf3 	bl	8000288 <__aeabi_dsub>
 800f8a2:	4b23      	ldr	r3, [pc, #140]	; (800f930 <__ieee754_rem_pio2+0x410>)
 800f8a4:	2200      	movs	r2, #0
 800f8a6:	f7f0 fea7 	bl	80005f8 <__aeabi_dmul>
 800f8aa:	460f      	mov	r7, r1
 800f8ac:	4606      	mov	r6, r0
 800f8ae:	f7f1 f93d 	bl	8000b2c <__aeabi_d2iz>
 800f8b2:	f7f0 fe37 	bl	8000524 <__aeabi_i2d>
 800f8b6:	4602      	mov	r2, r0
 800f8b8:	460b      	mov	r3, r1
 800f8ba:	4630      	mov	r0, r6
 800f8bc:	4639      	mov	r1, r7
 800f8be:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800f8c2:	f7f0 fce1 	bl	8000288 <__aeabi_dsub>
 800f8c6:	4b1a      	ldr	r3, [pc, #104]	; (800f930 <__ieee754_rem_pio2+0x410>)
 800f8c8:	2200      	movs	r2, #0
 800f8ca:	f7f0 fe95 	bl	80005f8 <__aeabi_dmul>
 800f8ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800f8d2:	ad04      	add	r5, sp, #16
 800f8d4:	f04f 0803 	mov.w	r8, #3
 800f8d8:	46a9      	mov	r9, r5
 800f8da:	2600      	movs	r6, #0
 800f8dc:	2700      	movs	r7, #0
 800f8de:	4632      	mov	r2, r6
 800f8e0:	463b      	mov	r3, r7
 800f8e2:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800f8e6:	46c3      	mov	fp, r8
 800f8e8:	3d08      	subs	r5, #8
 800f8ea:	f108 38ff 	add.w	r8, r8, #4294967295
 800f8ee:	f7f1 f8eb 	bl	8000ac8 <__aeabi_dcmpeq>
 800f8f2:	2800      	cmp	r0, #0
 800f8f4:	d1f3      	bne.n	800f8de <__ieee754_rem_pio2+0x3be>
 800f8f6:	4b0f      	ldr	r3, [pc, #60]	; (800f934 <__ieee754_rem_pio2+0x414>)
 800f8f8:	9301      	str	r3, [sp, #4]
 800f8fa:	2302      	movs	r3, #2
 800f8fc:	9300      	str	r3, [sp, #0]
 800f8fe:	4622      	mov	r2, r4
 800f900:	465b      	mov	r3, fp
 800f902:	4651      	mov	r1, sl
 800f904:	4648      	mov	r0, r9
 800f906:	f000 f8df 	bl	800fac8 <__kernel_rem_pio2>
 800f90a:	9b02      	ldr	r3, [sp, #8]
 800f90c:	2b00      	cmp	r3, #0
 800f90e:	4683      	mov	fp, r0
 800f910:	f6bf ae46 	bge.w	800f5a0 <__ieee754_rem_pio2+0x80>
 800f914:	e9da 2100 	ldrd	r2, r1, [sl]
 800f918:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f91c:	e9ca 2300 	strd	r2, r3, [sl]
 800f920:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 800f924:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800f928:	e9ca 2302 	strd	r2, r3, [sl, #8]
 800f92c:	e73a      	b.n	800f7a4 <__ieee754_rem_pio2+0x284>
 800f92e:	bf00      	nop
 800f930:	41700000 	.word	0x41700000
 800f934:	0801d6a8 	.word	0x0801d6a8

0800f938 <__kernel_cos>:
 800f938:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f93c:	ec57 6b10 	vmov	r6, r7, d0
 800f940:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 800f944:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 800f948:	ed8d 1b00 	vstr	d1, [sp]
 800f94c:	da07      	bge.n	800f95e <__kernel_cos+0x26>
 800f94e:	ee10 0a10 	vmov	r0, s0
 800f952:	4639      	mov	r1, r7
 800f954:	f7f1 f8ea 	bl	8000b2c <__aeabi_d2iz>
 800f958:	2800      	cmp	r0, #0
 800f95a:	f000 8088 	beq.w	800fa6e <__kernel_cos+0x136>
 800f95e:	4632      	mov	r2, r6
 800f960:	463b      	mov	r3, r7
 800f962:	4630      	mov	r0, r6
 800f964:	4639      	mov	r1, r7
 800f966:	f7f0 fe47 	bl	80005f8 <__aeabi_dmul>
 800f96a:	4b51      	ldr	r3, [pc, #324]	; (800fab0 <__kernel_cos+0x178>)
 800f96c:	2200      	movs	r2, #0
 800f96e:	4604      	mov	r4, r0
 800f970:	460d      	mov	r5, r1
 800f972:	f7f0 fe41 	bl	80005f8 <__aeabi_dmul>
 800f976:	a340      	add	r3, pc, #256	; (adr r3, 800fa78 <__kernel_cos+0x140>)
 800f978:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f97c:	4682      	mov	sl, r0
 800f97e:	468b      	mov	fp, r1
 800f980:	4620      	mov	r0, r4
 800f982:	4629      	mov	r1, r5
 800f984:	f7f0 fe38 	bl	80005f8 <__aeabi_dmul>
 800f988:	a33d      	add	r3, pc, #244	; (adr r3, 800fa80 <__kernel_cos+0x148>)
 800f98a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f98e:	f7f0 fc7d 	bl	800028c <__adddf3>
 800f992:	4622      	mov	r2, r4
 800f994:	462b      	mov	r3, r5
 800f996:	f7f0 fe2f 	bl	80005f8 <__aeabi_dmul>
 800f99a:	a33b      	add	r3, pc, #236	; (adr r3, 800fa88 <__kernel_cos+0x150>)
 800f99c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9a0:	f7f0 fc72 	bl	8000288 <__aeabi_dsub>
 800f9a4:	4622      	mov	r2, r4
 800f9a6:	462b      	mov	r3, r5
 800f9a8:	f7f0 fe26 	bl	80005f8 <__aeabi_dmul>
 800f9ac:	a338      	add	r3, pc, #224	; (adr r3, 800fa90 <__kernel_cos+0x158>)
 800f9ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9b2:	f7f0 fc6b 	bl	800028c <__adddf3>
 800f9b6:	4622      	mov	r2, r4
 800f9b8:	462b      	mov	r3, r5
 800f9ba:	f7f0 fe1d 	bl	80005f8 <__aeabi_dmul>
 800f9be:	a336      	add	r3, pc, #216	; (adr r3, 800fa98 <__kernel_cos+0x160>)
 800f9c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9c4:	f7f0 fc60 	bl	8000288 <__aeabi_dsub>
 800f9c8:	4622      	mov	r2, r4
 800f9ca:	462b      	mov	r3, r5
 800f9cc:	f7f0 fe14 	bl	80005f8 <__aeabi_dmul>
 800f9d0:	a333      	add	r3, pc, #204	; (adr r3, 800faa0 <__kernel_cos+0x168>)
 800f9d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f9d6:	f7f0 fc59 	bl	800028c <__adddf3>
 800f9da:	4622      	mov	r2, r4
 800f9dc:	462b      	mov	r3, r5
 800f9de:	f7f0 fe0b 	bl	80005f8 <__aeabi_dmul>
 800f9e2:	4622      	mov	r2, r4
 800f9e4:	462b      	mov	r3, r5
 800f9e6:	f7f0 fe07 	bl	80005f8 <__aeabi_dmul>
 800f9ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f9ee:	4604      	mov	r4, r0
 800f9f0:	460d      	mov	r5, r1
 800f9f2:	4630      	mov	r0, r6
 800f9f4:	4639      	mov	r1, r7
 800f9f6:	f7f0 fdff 	bl	80005f8 <__aeabi_dmul>
 800f9fa:	460b      	mov	r3, r1
 800f9fc:	4602      	mov	r2, r0
 800f9fe:	4629      	mov	r1, r5
 800fa00:	4620      	mov	r0, r4
 800fa02:	f7f0 fc41 	bl	8000288 <__aeabi_dsub>
 800fa06:	4b2b      	ldr	r3, [pc, #172]	; (800fab4 <__kernel_cos+0x17c>)
 800fa08:	4598      	cmp	r8, r3
 800fa0a:	4606      	mov	r6, r0
 800fa0c:	460f      	mov	r7, r1
 800fa0e:	dc10      	bgt.n	800fa32 <__kernel_cos+0xfa>
 800fa10:	4602      	mov	r2, r0
 800fa12:	460b      	mov	r3, r1
 800fa14:	4650      	mov	r0, sl
 800fa16:	4659      	mov	r1, fp
 800fa18:	f7f0 fc36 	bl	8000288 <__aeabi_dsub>
 800fa1c:	460b      	mov	r3, r1
 800fa1e:	4926      	ldr	r1, [pc, #152]	; (800fab8 <__kernel_cos+0x180>)
 800fa20:	4602      	mov	r2, r0
 800fa22:	2000      	movs	r0, #0
 800fa24:	f7f0 fc30 	bl	8000288 <__aeabi_dsub>
 800fa28:	ec41 0b10 	vmov	d0, r0, r1
 800fa2c:	b003      	add	sp, #12
 800fa2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa32:	4b22      	ldr	r3, [pc, #136]	; (800fabc <__kernel_cos+0x184>)
 800fa34:	4920      	ldr	r1, [pc, #128]	; (800fab8 <__kernel_cos+0x180>)
 800fa36:	4598      	cmp	r8, r3
 800fa38:	bfcc      	ite	gt
 800fa3a:	4d21      	ldrgt	r5, [pc, #132]	; (800fac0 <__kernel_cos+0x188>)
 800fa3c:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 800fa40:	2400      	movs	r4, #0
 800fa42:	4622      	mov	r2, r4
 800fa44:	462b      	mov	r3, r5
 800fa46:	2000      	movs	r0, #0
 800fa48:	f7f0 fc1e 	bl	8000288 <__aeabi_dsub>
 800fa4c:	4622      	mov	r2, r4
 800fa4e:	4680      	mov	r8, r0
 800fa50:	4689      	mov	r9, r1
 800fa52:	462b      	mov	r3, r5
 800fa54:	4650      	mov	r0, sl
 800fa56:	4659      	mov	r1, fp
 800fa58:	f7f0 fc16 	bl	8000288 <__aeabi_dsub>
 800fa5c:	4632      	mov	r2, r6
 800fa5e:	463b      	mov	r3, r7
 800fa60:	f7f0 fc12 	bl	8000288 <__aeabi_dsub>
 800fa64:	4602      	mov	r2, r0
 800fa66:	460b      	mov	r3, r1
 800fa68:	4640      	mov	r0, r8
 800fa6a:	4649      	mov	r1, r9
 800fa6c:	e7da      	b.n	800fa24 <__kernel_cos+0xec>
 800fa6e:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 800faa8 <__kernel_cos+0x170>
 800fa72:	e7db      	b.n	800fa2c <__kernel_cos+0xf4>
 800fa74:	f3af 8000 	nop.w
 800fa78:	be8838d4 	.word	0xbe8838d4
 800fa7c:	bda8fae9 	.word	0xbda8fae9
 800fa80:	bdb4b1c4 	.word	0xbdb4b1c4
 800fa84:	3e21ee9e 	.word	0x3e21ee9e
 800fa88:	809c52ad 	.word	0x809c52ad
 800fa8c:	3e927e4f 	.word	0x3e927e4f
 800fa90:	19cb1590 	.word	0x19cb1590
 800fa94:	3efa01a0 	.word	0x3efa01a0
 800fa98:	16c15177 	.word	0x16c15177
 800fa9c:	3f56c16c 	.word	0x3f56c16c
 800faa0:	5555554c 	.word	0x5555554c
 800faa4:	3fa55555 	.word	0x3fa55555
 800faa8:	00000000 	.word	0x00000000
 800faac:	3ff00000 	.word	0x3ff00000
 800fab0:	3fe00000 	.word	0x3fe00000
 800fab4:	3fd33332 	.word	0x3fd33332
 800fab8:	3ff00000 	.word	0x3ff00000
 800fabc:	3fe90000 	.word	0x3fe90000
 800fac0:	3fd20000 	.word	0x3fd20000
 800fac4:	00000000 	.word	0x00000000

0800fac8 <__kernel_rem_pio2>:
 800fac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800facc:	ed2d 8b02 	vpush	{d8}
 800fad0:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800fad4:	f112 0f14 	cmn.w	r2, #20
 800fad8:	9308      	str	r3, [sp, #32]
 800fada:	9101      	str	r1, [sp, #4]
 800fadc:	4bc4      	ldr	r3, [pc, #784]	; (800fdf0 <__kernel_rem_pio2+0x328>)
 800fade:	99a6      	ldr	r1, [sp, #664]	; 0x298
 800fae0:	900b      	str	r0, [sp, #44]	; 0x2c
 800fae2:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800fae6:	9302      	str	r3, [sp, #8]
 800fae8:	9b08      	ldr	r3, [sp, #32]
 800faea:	f103 33ff 	add.w	r3, r3, #4294967295
 800faee:	bfa8      	it	ge
 800faf0:	1ed4      	subge	r4, r2, #3
 800faf2:	9306      	str	r3, [sp, #24]
 800faf4:	bfb2      	itee	lt
 800faf6:	2400      	movlt	r4, #0
 800faf8:	2318      	movge	r3, #24
 800fafa:	fb94 f4f3 	sdivge	r4, r4, r3
 800fafe:	f06f 0317 	mvn.w	r3, #23
 800fb02:	fb04 3303 	mla	r3, r4, r3, r3
 800fb06:	eb03 0a02 	add.w	sl, r3, r2
 800fb0a:	9b02      	ldr	r3, [sp, #8]
 800fb0c:	9a06      	ldr	r2, [sp, #24]
 800fb0e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 800fde0 <__kernel_rem_pio2+0x318>
 800fb12:	eb03 0802 	add.w	r8, r3, r2
 800fb16:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fb18:	1aa7      	subs	r7, r4, r2
 800fb1a:	ae22      	add	r6, sp, #136	; 0x88
 800fb1c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800fb20:	2500      	movs	r5, #0
 800fb22:	4545      	cmp	r5, r8
 800fb24:	dd13      	ble.n	800fb4e <__kernel_rem_pio2+0x86>
 800fb26:	9b08      	ldr	r3, [sp, #32]
 800fb28:	ed9f 8bad 	vldr	d8, [pc, #692]	; 800fde0 <__kernel_rem_pio2+0x318>
 800fb2c:	aa22      	add	r2, sp, #136	; 0x88
 800fb2e:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800fb32:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 800fb36:	f04f 0800 	mov.w	r8, #0
 800fb3a:	9b02      	ldr	r3, [sp, #8]
 800fb3c:	4598      	cmp	r8, r3
 800fb3e:	dc2f      	bgt.n	800fba0 <__kernel_rem_pio2+0xd8>
 800fb40:	ed8d 8b04 	vstr	d8, [sp, #16]
 800fb44:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800fb48:	462f      	mov	r7, r5
 800fb4a:	2600      	movs	r6, #0
 800fb4c:	e01b      	b.n	800fb86 <__kernel_rem_pio2+0xbe>
 800fb4e:	42ef      	cmn	r7, r5
 800fb50:	d407      	bmi.n	800fb62 <__kernel_rem_pio2+0x9a>
 800fb52:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800fb56:	f7f0 fce5 	bl	8000524 <__aeabi_i2d>
 800fb5a:	e8e6 0102 	strd	r0, r1, [r6], #8
 800fb5e:	3501      	adds	r5, #1
 800fb60:	e7df      	b.n	800fb22 <__kernel_rem_pio2+0x5a>
 800fb62:	ec51 0b18 	vmov	r0, r1, d8
 800fb66:	e7f8      	b.n	800fb5a <__kernel_rem_pio2+0x92>
 800fb68:	e9d7 2300 	ldrd	r2, r3, [r7]
 800fb6c:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 800fb70:	f7f0 fd42 	bl	80005f8 <__aeabi_dmul>
 800fb74:	4602      	mov	r2, r0
 800fb76:	460b      	mov	r3, r1
 800fb78:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800fb7c:	f7f0 fb86 	bl	800028c <__adddf3>
 800fb80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800fb84:	3601      	adds	r6, #1
 800fb86:	9b06      	ldr	r3, [sp, #24]
 800fb88:	429e      	cmp	r6, r3
 800fb8a:	f1a7 0708 	sub.w	r7, r7, #8
 800fb8e:	ddeb      	ble.n	800fb68 <__kernel_rem_pio2+0xa0>
 800fb90:	ed9d 7b04 	vldr	d7, [sp, #16]
 800fb94:	f108 0801 	add.w	r8, r8, #1
 800fb98:	ecab 7b02 	vstmia	fp!, {d7}
 800fb9c:	3508      	adds	r5, #8
 800fb9e:	e7cc      	b.n	800fb3a <__kernel_rem_pio2+0x72>
 800fba0:	9b02      	ldr	r3, [sp, #8]
 800fba2:	aa0e      	add	r2, sp, #56	; 0x38
 800fba4:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fba8:	930d      	str	r3, [sp, #52]	; 0x34
 800fbaa:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800fbac:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fbb0:	9c02      	ldr	r4, [sp, #8]
 800fbb2:	930c      	str	r3, [sp, #48]	; 0x30
 800fbb4:	00e3      	lsls	r3, r4, #3
 800fbb6:	930a      	str	r3, [sp, #40]	; 0x28
 800fbb8:	ab9a      	add	r3, sp, #616	; 0x268
 800fbba:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800fbbe:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 800fbc2:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 800fbc6:	ab72      	add	r3, sp, #456	; 0x1c8
 800fbc8:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800fbcc:	46c3      	mov	fp, r8
 800fbce:	46a1      	mov	r9, r4
 800fbd0:	f1b9 0f00 	cmp.w	r9, #0
 800fbd4:	f1a5 0508 	sub.w	r5, r5, #8
 800fbd8:	dc77      	bgt.n	800fcca <__kernel_rem_pio2+0x202>
 800fbda:	ec47 6b10 	vmov	d0, r6, r7
 800fbde:	4650      	mov	r0, sl
 800fbe0:	f000 fc0a 	bl	80103f8 <scalbn>
 800fbe4:	ec57 6b10 	vmov	r6, r7, d0
 800fbe8:	2200      	movs	r2, #0
 800fbea:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800fbee:	ee10 0a10 	vmov	r0, s0
 800fbf2:	4639      	mov	r1, r7
 800fbf4:	f7f0 fd00 	bl	80005f8 <__aeabi_dmul>
 800fbf8:	ec41 0b10 	vmov	d0, r0, r1
 800fbfc:	f000 fb7c 	bl	80102f8 <floor>
 800fc00:	4b7c      	ldr	r3, [pc, #496]	; (800fdf4 <__kernel_rem_pio2+0x32c>)
 800fc02:	ec51 0b10 	vmov	r0, r1, d0
 800fc06:	2200      	movs	r2, #0
 800fc08:	f7f0 fcf6 	bl	80005f8 <__aeabi_dmul>
 800fc0c:	4602      	mov	r2, r0
 800fc0e:	460b      	mov	r3, r1
 800fc10:	4630      	mov	r0, r6
 800fc12:	4639      	mov	r1, r7
 800fc14:	f7f0 fb38 	bl	8000288 <__aeabi_dsub>
 800fc18:	460f      	mov	r7, r1
 800fc1a:	4606      	mov	r6, r0
 800fc1c:	f7f0 ff86 	bl	8000b2c <__aeabi_d2iz>
 800fc20:	9004      	str	r0, [sp, #16]
 800fc22:	f7f0 fc7f 	bl	8000524 <__aeabi_i2d>
 800fc26:	4602      	mov	r2, r0
 800fc28:	460b      	mov	r3, r1
 800fc2a:	4630      	mov	r0, r6
 800fc2c:	4639      	mov	r1, r7
 800fc2e:	f7f0 fb2b 	bl	8000288 <__aeabi_dsub>
 800fc32:	f1ba 0f00 	cmp.w	sl, #0
 800fc36:	4606      	mov	r6, r0
 800fc38:	460f      	mov	r7, r1
 800fc3a:	dd6d      	ble.n	800fd18 <__kernel_rem_pio2+0x250>
 800fc3c:	1e62      	subs	r2, r4, #1
 800fc3e:	ab0e      	add	r3, sp, #56	; 0x38
 800fc40:	9d04      	ldr	r5, [sp, #16]
 800fc42:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800fc46:	f1ca 0118 	rsb	r1, sl, #24
 800fc4a:	fa40 f301 	asr.w	r3, r0, r1
 800fc4e:	441d      	add	r5, r3
 800fc50:	408b      	lsls	r3, r1
 800fc52:	1ac0      	subs	r0, r0, r3
 800fc54:	ab0e      	add	r3, sp, #56	; 0x38
 800fc56:	9504      	str	r5, [sp, #16]
 800fc58:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 800fc5c:	f1ca 0317 	rsb	r3, sl, #23
 800fc60:	fa40 fb03 	asr.w	fp, r0, r3
 800fc64:	f1bb 0f00 	cmp.w	fp, #0
 800fc68:	dd65      	ble.n	800fd36 <__kernel_rem_pio2+0x26e>
 800fc6a:	9b04      	ldr	r3, [sp, #16]
 800fc6c:	2200      	movs	r2, #0
 800fc6e:	3301      	adds	r3, #1
 800fc70:	9304      	str	r3, [sp, #16]
 800fc72:	4615      	mov	r5, r2
 800fc74:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 800fc78:	4294      	cmp	r4, r2
 800fc7a:	f300 809c 	bgt.w	800fdb6 <__kernel_rem_pio2+0x2ee>
 800fc7e:	f1ba 0f00 	cmp.w	sl, #0
 800fc82:	dd07      	ble.n	800fc94 <__kernel_rem_pio2+0x1cc>
 800fc84:	f1ba 0f01 	cmp.w	sl, #1
 800fc88:	f000 80c0 	beq.w	800fe0c <__kernel_rem_pio2+0x344>
 800fc8c:	f1ba 0f02 	cmp.w	sl, #2
 800fc90:	f000 80c6 	beq.w	800fe20 <__kernel_rem_pio2+0x358>
 800fc94:	f1bb 0f02 	cmp.w	fp, #2
 800fc98:	d14d      	bne.n	800fd36 <__kernel_rem_pio2+0x26e>
 800fc9a:	4632      	mov	r2, r6
 800fc9c:	463b      	mov	r3, r7
 800fc9e:	4956      	ldr	r1, [pc, #344]	; (800fdf8 <__kernel_rem_pio2+0x330>)
 800fca0:	2000      	movs	r0, #0
 800fca2:	f7f0 faf1 	bl	8000288 <__aeabi_dsub>
 800fca6:	4606      	mov	r6, r0
 800fca8:	460f      	mov	r7, r1
 800fcaa:	2d00      	cmp	r5, #0
 800fcac:	d043      	beq.n	800fd36 <__kernel_rem_pio2+0x26e>
 800fcae:	4650      	mov	r0, sl
 800fcb0:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 800fde8 <__kernel_rem_pio2+0x320>
 800fcb4:	f000 fba0 	bl	80103f8 <scalbn>
 800fcb8:	4630      	mov	r0, r6
 800fcba:	4639      	mov	r1, r7
 800fcbc:	ec53 2b10 	vmov	r2, r3, d0
 800fcc0:	f7f0 fae2 	bl	8000288 <__aeabi_dsub>
 800fcc4:	4606      	mov	r6, r0
 800fcc6:	460f      	mov	r7, r1
 800fcc8:	e035      	b.n	800fd36 <__kernel_rem_pio2+0x26e>
 800fcca:	4b4c      	ldr	r3, [pc, #304]	; (800fdfc <__kernel_rem_pio2+0x334>)
 800fccc:	2200      	movs	r2, #0
 800fcce:	4630      	mov	r0, r6
 800fcd0:	4639      	mov	r1, r7
 800fcd2:	f7f0 fc91 	bl	80005f8 <__aeabi_dmul>
 800fcd6:	f7f0 ff29 	bl	8000b2c <__aeabi_d2iz>
 800fcda:	f7f0 fc23 	bl	8000524 <__aeabi_i2d>
 800fcde:	4602      	mov	r2, r0
 800fce0:	460b      	mov	r3, r1
 800fce2:	ec43 2b18 	vmov	d8, r2, r3
 800fce6:	4b46      	ldr	r3, [pc, #280]	; (800fe00 <__kernel_rem_pio2+0x338>)
 800fce8:	2200      	movs	r2, #0
 800fcea:	f7f0 fc85 	bl	80005f8 <__aeabi_dmul>
 800fcee:	4602      	mov	r2, r0
 800fcf0:	460b      	mov	r3, r1
 800fcf2:	4630      	mov	r0, r6
 800fcf4:	4639      	mov	r1, r7
 800fcf6:	f7f0 fac7 	bl	8000288 <__aeabi_dsub>
 800fcfa:	f7f0 ff17 	bl	8000b2c <__aeabi_d2iz>
 800fcfe:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fd02:	f84b 0b04 	str.w	r0, [fp], #4
 800fd06:	ec51 0b18 	vmov	r0, r1, d8
 800fd0a:	f7f0 fabf 	bl	800028c <__adddf3>
 800fd0e:	f109 39ff 	add.w	r9, r9, #4294967295
 800fd12:	4606      	mov	r6, r0
 800fd14:	460f      	mov	r7, r1
 800fd16:	e75b      	b.n	800fbd0 <__kernel_rem_pio2+0x108>
 800fd18:	d106      	bne.n	800fd28 <__kernel_rem_pio2+0x260>
 800fd1a:	1e63      	subs	r3, r4, #1
 800fd1c:	aa0e      	add	r2, sp, #56	; 0x38
 800fd1e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800fd22:	ea4f 5be0 	mov.w	fp, r0, asr #23
 800fd26:	e79d      	b.n	800fc64 <__kernel_rem_pio2+0x19c>
 800fd28:	4b36      	ldr	r3, [pc, #216]	; (800fe04 <__kernel_rem_pio2+0x33c>)
 800fd2a:	2200      	movs	r2, #0
 800fd2c:	f7f0 feea 	bl	8000b04 <__aeabi_dcmpge>
 800fd30:	2800      	cmp	r0, #0
 800fd32:	d13d      	bne.n	800fdb0 <__kernel_rem_pio2+0x2e8>
 800fd34:	4683      	mov	fp, r0
 800fd36:	2200      	movs	r2, #0
 800fd38:	2300      	movs	r3, #0
 800fd3a:	4630      	mov	r0, r6
 800fd3c:	4639      	mov	r1, r7
 800fd3e:	f7f0 fec3 	bl	8000ac8 <__aeabi_dcmpeq>
 800fd42:	2800      	cmp	r0, #0
 800fd44:	f000 80c0 	beq.w	800fec8 <__kernel_rem_pio2+0x400>
 800fd48:	1e65      	subs	r5, r4, #1
 800fd4a:	462b      	mov	r3, r5
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	9902      	ldr	r1, [sp, #8]
 800fd50:	428b      	cmp	r3, r1
 800fd52:	da6c      	bge.n	800fe2e <__kernel_rem_pio2+0x366>
 800fd54:	2a00      	cmp	r2, #0
 800fd56:	f000 8089 	beq.w	800fe6c <__kernel_rem_pio2+0x3a4>
 800fd5a:	ab0e      	add	r3, sp, #56	; 0x38
 800fd5c:	f1aa 0a18 	sub.w	sl, sl, #24
 800fd60:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 800fd64:	2b00      	cmp	r3, #0
 800fd66:	f000 80ad 	beq.w	800fec4 <__kernel_rem_pio2+0x3fc>
 800fd6a:	4650      	mov	r0, sl
 800fd6c:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 800fde8 <__kernel_rem_pio2+0x320>
 800fd70:	f000 fb42 	bl	80103f8 <scalbn>
 800fd74:	ab9a      	add	r3, sp, #616	; 0x268
 800fd76:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800fd7a:	ec57 6b10 	vmov	r6, r7, d0
 800fd7e:	00ec      	lsls	r4, r5, #3
 800fd80:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 800fd84:	46aa      	mov	sl, r5
 800fd86:	f1ba 0f00 	cmp.w	sl, #0
 800fd8a:	f280 80d6 	bge.w	800ff3a <__kernel_rem_pio2+0x472>
 800fd8e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 800fde0 <__kernel_rem_pio2+0x318>
 800fd92:	462e      	mov	r6, r5
 800fd94:	2e00      	cmp	r6, #0
 800fd96:	f2c0 8104 	blt.w	800ffa2 <__kernel_rem_pio2+0x4da>
 800fd9a:	ab72      	add	r3, sp, #456	; 0x1c8
 800fd9c:	ed8d 8b06 	vstr	d8, [sp, #24]
 800fda0:	f8df a064 	ldr.w	sl, [pc, #100]	; 800fe08 <__kernel_rem_pio2+0x340>
 800fda4:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 800fda8:	f04f 0800 	mov.w	r8, #0
 800fdac:	1baf      	subs	r7, r5, r6
 800fdae:	e0ea      	b.n	800ff86 <__kernel_rem_pio2+0x4be>
 800fdb0:	f04f 0b02 	mov.w	fp, #2
 800fdb4:	e759      	b.n	800fc6a <__kernel_rem_pio2+0x1a2>
 800fdb6:	f8d8 3000 	ldr.w	r3, [r8]
 800fdba:	b955      	cbnz	r5, 800fdd2 <__kernel_rem_pio2+0x30a>
 800fdbc:	b123      	cbz	r3, 800fdc8 <__kernel_rem_pio2+0x300>
 800fdbe:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 800fdc2:	f8c8 3000 	str.w	r3, [r8]
 800fdc6:	2301      	movs	r3, #1
 800fdc8:	3201      	adds	r2, #1
 800fdca:	f108 0804 	add.w	r8, r8, #4
 800fdce:	461d      	mov	r5, r3
 800fdd0:	e752      	b.n	800fc78 <__kernel_rem_pio2+0x1b0>
 800fdd2:	1acb      	subs	r3, r1, r3
 800fdd4:	f8c8 3000 	str.w	r3, [r8]
 800fdd8:	462b      	mov	r3, r5
 800fdda:	e7f5      	b.n	800fdc8 <__kernel_rem_pio2+0x300>
 800fddc:	f3af 8000 	nop.w
	...
 800fdec:	3ff00000 	.word	0x3ff00000
 800fdf0:	0801d7f0 	.word	0x0801d7f0
 800fdf4:	40200000 	.word	0x40200000
 800fdf8:	3ff00000 	.word	0x3ff00000
 800fdfc:	3e700000 	.word	0x3e700000
 800fe00:	41700000 	.word	0x41700000
 800fe04:	3fe00000 	.word	0x3fe00000
 800fe08:	0801d7b0 	.word	0x0801d7b0
 800fe0c:	1e62      	subs	r2, r4, #1
 800fe0e:	ab0e      	add	r3, sp, #56	; 0x38
 800fe10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe14:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800fe18:	a90e      	add	r1, sp, #56	; 0x38
 800fe1a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 800fe1e:	e739      	b.n	800fc94 <__kernel_rem_pio2+0x1cc>
 800fe20:	1e62      	subs	r2, r4, #1
 800fe22:	ab0e      	add	r3, sp, #56	; 0x38
 800fe24:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800fe28:	f3c3 0315 	ubfx	r3, r3, #0, #22
 800fe2c:	e7f4      	b.n	800fe18 <__kernel_rem_pio2+0x350>
 800fe2e:	a90e      	add	r1, sp, #56	; 0x38
 800fe30:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 800fe34:	3b01      	subs	r3, #1
 800fe36:	430a      	orrs	r2, r1
 800fe38:	e789      	b.n	800fd4e <__kernel_rem_pio2+0x286>
 800fe3a:	3301      	adds	r3, #1
 800fe3c:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800fe40:	2900      	cmp	r1, #0
 800fe42:	d0fa      	beq.n	800fe3a <__kernel_rem_pio2+0x372>
 800fe44:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800fe46:	f502 721a 	add.w	r2, r2, #616	; 0x268
 800fe4a:	446a      	add	r2, sp
 800fe4c:	3a98      	subs	r2, #152	; 0x98
 800fe4e:	920a      	str	r2, [sp, #40]	; 0x28
 800fe50:	9a08      	ldr	r2, [sp, #32]
 800fe52:	18e3      	adds	r3, r4, r3
 800fe54:	18a5      	adds	r5, r4, r2
 800fe56:	aa22      	add	r2, sp, #136	; 0x88
 800fe58:	f104 0801 	add.w	r8, r4, #1
 800fe5c:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 800fe60:	9304      	str	r3, [sp, #16]
 800fe62:	9b04      	ldr	r3, [sp, #16]
 800fe64:	4543      	cmp	r3, r8
 800fe66:	da04      	bge.n	800fe72 <__kernel_rem_pio2+0x3aa>
 800fe68:	461c      	mov	r4, r3
 800fe6a:	e6a3      	b.n	800fbb4 <__kernel_rem_pio2+0xec>
 800fe6c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800fe6e:	2301      	movs	r3, #1
 800fe70:	e7e4      	b.n	800fe3c <__kernel_rem_pio2+0x374>
 800fe72:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800fe74:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800fe78:	f7f0 fb54 	bl	8000524 <__aeabi_i2d>
 800fe7c:	e8e5 0102 	strd	r0, r1, [r5], #8
 800fe80:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800fe82:	46ab      	mov	fp, r5
 800fe84:	461c      	mov	r4, r3
 800fe86:	f04f 0900 	mov.w	r9, #0
 800fe8a:	2600      	movs	r6, #0
 800fe8c:	2700      	movs	r7, #0
 800fe8e:	9b06      	ldr	r3, [sp, #24]
 800fe90:	4599      	cmp	r9, r3
 800fe92:	dd06      	ble.n	800fea2 <__kernel_rem_pio2+0x3da>
 800fe94:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800fe96:	e8e3 6702 	strd	r6, r7, [r3], #8
 800fe9a:	f108 0801 	add.w	r8, r8, #1
 800fe9e:	930a      	str	r3, [sp, #40]	; 0x28
 800fea0:	e7df      	b.n	800fe62 <__kernel_rem_pio2+0x39a>
 800fea2:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 800fea6:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 800feaa:	f7f0 fba5 	bl	80005f8 <__aeabi_dmul>
 800feae:	4602      	mov	r2, r0
 800feb0:	460b      	mov	r3, r1
 800feb2:	4630      	mov	r0, r6
 800feb4:	4639      	mov	r1, r7
 800feb6:	f7f0 f9e9 	bl	800028c <__adddf3>
 800feba:	f109 0901 	add.w	r9, r9, #1
 800febe:	4606      	mov	r6, r0
 800fec0:	460f      	mov	r7, r1
 800fec2:	e7e4      	b.n	800fe8e <__kernel_rem_pio2+0x3c6>
 800fec4:	3d01      	subs	r5, #1
 800fec6:	e748      	b.n	800fd5a <__kernel_rem_pio2+0x292>
 800fec8:	ec47 6b10 	vmov	d0, r6, r7
 800fecc:	f1ca 0000 	rsb	r0, sl, #0
 800fed0:	f000 fa92 	bl	80103f8 <scalbn>
 800fed4:	ec57 6b10 	vmov	r6, r7, d0
 800fed8:	4ba0      	ldr	r3, [pc, #640]	; (801015c <__kernel_rem_pio2+0x694>)
 800feda:	ee10 0a10 	vmov	r0, s0
 800fede:	2200      	movs	r2, #0
 800fee0:	4639      	mov	r1, r7
 800fee2:	f7f0 fe0f 	bl	8000b04 <__aeabi_dcmpge>
 800fee6:	b1f8      	cbz	r0, 800ff28 <__kernel_rem_pio2+0x460>
 800fee8:	4b9d      	ldr	r3, [pc, #628]	; (8010160 <__kernel_rem_pio2+0x698>)
 800feea:	2200      	movs	r2, #0
 800feec:	4630      	mov	r0, r6
 800feee:	4639      	mov	r1, r7
 800fef0:	f7f0 fb82 	bl	80005f8 <__aeabi_dmul>
 800fef4:	f7f0 fe1a 	bl	8000b2c <__aeabi_d2iz>
 800fef8:	4680      	mov	r8, r0
 800fefa:	f7f0 fb13 	bl	8000524 <__aeabi_i2d>
 800fefe:	4b97      	ldr	r3, [pc, #604]	; (801015c <__kernel_rem_pio2+0x694>)
 800ff00:	2200      	movs	r2, #0
 800ff02:	f7f0 fb79 	bl	80005f8 <__aeabi_dmul>
 800ff06:	460b      	mov	r3, r1
 800ff08:	4602      	mov	r2, r0
 800ff0a:	4639      	mov	r1, r7
 800ff0c:	4630      	mov	r0, r6
 800ff0e:	f7f0 f9bb 	bl	8000288 <__aeabi_dsub>
 800ff12:	f7f0 fe0b 	bl	8000b2c <__aeabi_d2iz>
 800ff16:	1c65      	adds	r5, r4, #1
 800ff18:	ab0e      	add	r3, sp, #56	; 0x38
 800ff1a:	f10a 0a18 	add.w	sl, sl, #24
 800ff1e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ff22:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 800ff26:	e720      	b.n	800fd6a <__kernel_rem_pio2+0x2a2>
 800ff28:	4630      	mov	r0, r6
 800ff2a:	4639      	mov	r1, r7
 800ff2c:	f7f0 fdfe 	bl	8000b2c <__aeabi_d2iz>
 800ff30:	ab0e      	add	r3, sp, #56	; 0x38
 800ff32:	4625      	mov	r5, r4
 800ff34:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 800ff38:	e717      	b.n	800fd6a <__kernel_rem_pio2+0x2a2>
 800ff3a:	ab0e      	add	r3, sp, #56	; 0x38
 800ff3c:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 800ff40:	f7f0 faf0 	bl	8000524 <__aeabi_i2d>
 800ff44:	4632      	mov	r2, r6
 800ff46:	463b      	mov	r3, r7
 800ff48:	f7f0 fb56 	bl	80005f8 <__aeabi_dmul>
 800ff4c:	4b84      	ldr	r3, [pc, #528]	; (8010160 <__kernel_rem_pio2+0x698>)
 800ff4e:	e968 0102 	strd	r0, r1, [r8, #-8]!
 800ff52:	2200      	movs	r2, #0
 800ff54:	4630      	mov	r0, r6
 800ff56:	4639      	mov	r1, r7
 800ff58:	f7f0 fb4e 	bl	80005f8 <__aeabi_dmul>
 800ff5c:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ff60:	4606      	mov	r6, r0
 800ff62:	460f      	mov	r7, r1
 800ff64:	e70f      	b.n	800fd86 <__kernel_rem_pio2+0x2be>
 800ff66:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 800ff6a:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 800ff6e:	f7f0 fb43 	bl	80005f8 <__aeabi_dmul>
 800ff72:	4602      	mov	r2, r0
 800ff74:	460b      	mov	r3, r1
 800ff76:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ff7a:	f7f0 f987 	bl	800028c <__adddf3>
 800ff7e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ff82:	f108 0801 	add.w	r8, r8, #1
 800ff86:	9b02      	ldr	r3, [sp, #8]
 800ff88:	4598      	cmp	r8, r3
 800ff8a:	dc01      	bgt.n	800ff90 <__kernel_rem_pio2+0x4c8>
 800ff8c:	45b8      	cmp	r8, r7
 800ff8e:	ddea      	ble.n	800ff66 <__kernel_rem_pio2+0x49e>
 800ff90:	ed9d 7b06 	vldr	d7, [sp, #24]
 800ff94:	ab4a      	add	r3, sp, #296	; 0x128
 800ff96:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 800ff9a:	ed87 7b00 	vstr	d7, [r7]
 800ff9e:	3e01      	subs	r6, #1
 800ffa0:	e6f8      	b.n	800fd94 <__kernel_rem_pio2+0x2cc>
 800ffa2:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ffa4:	2b02      	cmp	r3, #2
 800ffa6:	dc0b      	bgt.n	800ffc0 <__kernel_rem_pio2+0x4f8>
 800ffa8:	2b00      	cmp	r3, #0
 800ffaa:	dc35      	bgt.n	8010018 <__kernel_rem_pio2+0x550>
 800ffac:	d059      	beq.n	8010062 <__kernel_rem_pio2+0x59a>
 800ffae:	9b04      	ldr	r3, [sp, #16]
 800ffb0:	f003 0007 	and.w	r0, r3, #7
 800ffb4:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 800ffb8:	ecbd 8b02 	vpop	{d8}
 800ffbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ffc0:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 800ffc2:	2b03      	cmp	r3, #3
 800ffc4:	d1f3      	bne.n	800ffae <__kernel_rem_pio2+0x4e6>
 800ffc6:	ab4a      	add	r3, sp, #296	; 0x128
 800ffc8:	4423      	add	r3, r4
 800ffca:	9306      	str	r3, [sp, #24]
 800ffcc:	461c      	mov	r4, r3
 800ffce:	469a      	mov	sl, r3
 800ffd0:	9502      	str	r5, [sp, #8]
 800ffd2:	9b02      	ldr	r3, [sp, #8]
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	f1aa 0a08 	sub.w	sl, sl, #8
 800ffda:	dc6b      	bgt.n	80100b4 <__kernel_rem_pio2+0x5ec>
 800ffdc:	46aa      	mov	sl, r5
 800ffde:	f1ba 0f01 	cmp.w	sl, #1
 800ffe2:	f1a4 0408 	sub.w	r4, r4, #8
 800ffe6:	f300 8085 	bgt.w	80100f4 <__kernel_rem_pio2+0x62c>
 800ffea:	9c06      	ldr	r4, [sp, #24]
 800ffec:	2000      	movs	r0, #0
 800ffee:	3408      	adds	r4, #8
 800fff0:	2100      	movs	r1, #0
 800fff2:	2d01      	cmp	r5, #1
 800fff4:	f300 809d 	bgt.w	8010132 <__kernel_rem_pio2+0x66a>
 800fff8:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 800fffc:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8010000:	f1bb 0f00 	cmp.w	fp, #0
 8010004:	f040 809b 	bne.w	801013e <__kernel_rem_pio2+0x676>
 8010008:	9b01      	ldr	r3, [sp, #4]
 801000a:	e9c3 5600 	strd	r5, r6, [r3]
 801000e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8010012:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8010016:	e7ca      	b.n	800ffae <__kernel_rem_pio2+0x4e6>
 8010018:	3408      	adds	r4, #8
 801001a:	ab4a      	add	r3, sp, #296	; 0x128
 801001c:	441c      	add	r4, r3
 801001e:	462e      	mov	r6, r5
 8010020:	2000      	movs	r0, #0
 8010022:	2100      	movs	r1, #0
 8010024:	2e00      	cmp	r6, #0
 8010026:	da36      	bge.n	8010096 <__kernel_rem_pio2+0x5ce>
 8010028:	f1bb 0f00 	cmp.w	fp, #0
 801002c:	d039      	beq.n	80100a2 <__kernel_rem_pio2+0x5da>
 801002e:	4602      	mov	r2, r0
 8010030:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010034:	9c01      	ldr	r4, [sp, #4]
 8010036:	e9c4 2300 	strd	r2, r3, [r4]
 801003a:	4602      	mov	r2, r0
 801003c:	460b      	mov	r3, r1
 801003e:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8010042:	f7f0 f921 	bl	8000288 <__aeabi_dsub>
 8010046:	ae4c      	add	r6, sp, #304	; 0x130
 8010048:	2401      	movs	r4, #1
 801004a:	42a5      	cmp	r5, r4
 801004c:	da2c      	bge.n	80100a8 <__kernel_rem_pio2+0x5e0>
 801004e:	f1bb 0f00 	cmp.w	fp, #0
 8010052:	d002      	beq.n	801005a <__kernel_rem_pio2+0x592>
 8010054:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010058:	4619      	mov	r1, r3
 801005a:	9b01      	ldr	r3, [sp, #4]
 801005c:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8010060:	e7a5      	b.n	800ffae <__kernel_rem_pio2+0x4e6>
 8010062:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8010066:	eb0d 0403 	add.w	r4, sp, r3
 801006a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 801006e:	2000      	movs	r0, #0
 8010070:	2100      	movs	r1, #0
 8010072:	2d00      	cmp	r5, #0
 8010074:	da09      	bge.n	801008a <__kernel_rem_pio2+0x5c2>
 8010076:	f1bb 0f00 	cmp.w	fp, #0
 801007a:	d002      	beq.n	8010082 <__kernel_rem_pio2+0x5ba>
 801007c:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010080:	4619      	mov	r1, r3
 8010082:	9b01      	ldr	r3, [sp, #4]
 8010084:	e9c3 0100 	strd	r0, r1, [r3]
 8010088:	e791      	b.n	800ffae <__kernel_rem_pio2+0x4e6>
 801008a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801008e:	f7f0 f8fd 	bl	800028c <__adddf3>
 8010092:	3d01      	subs	r5, #1
 8010094:	e7ed      	b.n	8010072 <__kernel_rem_pio2+0x5aa>
 8010096:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 801009a:	f7f0 f8f7 	bl	800028c <__adddf3>
 801009e:	3e01      	subs	r6, #1
 80100a0:	e7c0      	b.n	8010024 <__kernel_rem_pio2+0x55c>
 80100a2:	4602      	mov	r2, r0
 80100a4:	460b      	mov	r3, r1
 80100a6:	e7c5      	b.n	8010034 <__kernel_rem_pio2+0x56c>
 80100a8:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 80100ac:	f7f0 f8ee 	bl	800028c <__adddf3>
 80100b0:	3401      	adds	r4, #1
 80100b2:	e7ca      	b.n	801004a <__kernel_rem_pio2+0x582>
 80100b4:	e9da 8900 	ldrd	r8, r9, [sl]
 80100b8:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 80100bc:	9b02      	ldr	r3, [sp, #8]
 80100be:	3b01      	subs	r3, #1
 80100c0:	9302      	str	r3, [sp, #8]
 80100c2:	4632      	mov	r2, r6
 80100c4:	463b      	mov	r3, r7
 80100c6:	4640      	mov	r0, r8
 80100c8:	4649      	mov	r1, r9
 80100ca:	f7f0 f8df 	bl	800028c <__adddf3>
 80100ce:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80100d2:	4602      	mov	r2, r0
 80100d4:	460b      	mov	r3, r1
 80100d6:	4640      	mov	r0, r8
 80100d8:	4649      	mov	r1, r9
 80100da:	f7f0 f8d5 	bl	8000288 <__aeabi_dsub>
 80100de:	4632      	mov	r2, r6
 80100e0:	463b      	mov	r3, r7
 80100e2:	f7f0 f8d3 	bl	800028c <__adddf3>
 80100e6:	ed9d 7b08 	vldr	d7, [sp, #32]
 80100ea:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80100ee:	ed8a 7b00 	vstr	d7, [sl]
 80100f2:	e76e      	b.n	800ffd2 <__kernel_rem_pio2+0x50a>
 80100f4:	e9d4 8900 	ldrd	r8, r9, [r4]
 80100f8:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 80100fc:	4640      	mov	r0, r8
 80100fe:	4632      	mov	r2, r6
 8010100:	463b      	mov	r3, r7
 8010102:	4649      	mov	r1, r9
 8010104:	f7f0 f8c2 	bl	800028c <__adddf3>
 8010108:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801010c:	4602      	mov	r2, r0
 801010e:	460b      	mov	r3, r1
 8010110:	4640      	mov	r0, r8
 8010112:	4649      	mov	r1, r9
 8010114:	f7f0 f8b8 	bl	8000288 <__aeabi_dsub>
 8010118:	4632      	mov	r2, r6
 801011a:	463b      	mov	r3, r7
 801011c:	f7f0 f8b6 	bl	800028c <__adddf3>
 8010120:	ed9d 7b02 	vldr	d7, [sp, #8]
 8010124:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8010128:	ed84 7b00 	vstr	d7, [r4]
 801012c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8010130:	e755      	b.n	800ffde <__kernel_rem_pio2+0x516>
 8010132:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8010136:	f7f0 f8a9 	bl	800028c <__adddf3>
 801013a:	3d01      	subs	r5, #1
 801013c:	e759      	b.n	800fff2 <__kernel_rem_pio2+0x52a>
 801013e:	9b01      	ldr	r3, [sp, #4]
 8010140:	9a01      	ldr	r2, [sp, #4]
 8010142:	601d      	str	r5, [r3, #0]
 8010144:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8010148:	605c      	str	r4, [r3, #4]
 801014a:	609f      	str	r7, [r3, #8]
 801014c:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8010150:	60d3      	str	r3, [r2, #12]
 8010152:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8010156:	6110      	str	r0, [r2, #16]
 8010158:	6153      	str	r3, [r2, #20]
 801015a:	e728      	b.n	800ffae <__kernel_rem_pio2+0x4e6>
 801015c:	41700000 	.word	0x41700000
 8010160:	3e700000 	.word	0x3e700000
 8010164:	00000000 	.word	0x00000000

08010168 <__kernel_sin>:
 8010168:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801016c:	ed2d 8b04 	vpush	{d8-d9}
 8010170:	eeb0 8a41 	vmov.f32	s16, s2
 8010174:	eef0 8a61 	vmov.f32	s17, s3
 8010178:	ec55 4b10 	vmov	r4, r5, d0
 801017c:	b083      	sub	sp, #12
 801017e:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8010182:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8010186:	9001      	str	r0, [sp, #4]
 8010188:	da06      	bge.n	8010198 <__kernel_sin+0x30>
 801018a:	ee10 0a10 	vmov	r0, s0
 801018e:	4629      	mov	r1, r5
 8010190:	f7f0 fccc 	bl	8000b2c <__aeabi_d2iz>
 8010194:	2800      	cmp	r0, #0
 8010196:	d051      	beq.n	801023c <__kernel_sin+0xd4>
 8010198:	4622      	mov	r2, r4
 801019a:	462b      	mov	r3, r5
 801019c:	4620      	mov	r0, r4
 801019e:	4629      	mov	r1, r5
 80101a0:	f7f0 fa2a 	bl	80005f8 <__aeabi_dmul>
 80101a4:	4682      	mov	sl, r0
 80101a6:	468b      	mov	fp, r1
 80101a8:	4602      	mov	r2, r0
 80101aa:	460b      	mov	r3, r1
 80101ac:	4620      	mov	r0, r4
 80101ae:	4629      	mov	r1, r5
 80101b0:	f7f0 fa22 	bl	80005f8 <__aeabi_dmul>
 80101b4:	a341      	add	r3, pc, #260	; (adr r3, 80102bc <__kernel_sin+0x154>)
 80101b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101ba:	4680      	mov	r8, r0
 80101bc:	4689      	mov	r9, r1
 80101be:	4650      	mov	r0, sl
 80101c0:	4659      	mov	r1, fp
 80101c2:	f7f0 fa19 	bl	80005f8 <__aeabi_dmul>
 80101c6:	a33f      	add	r3, pc, #252	; (adr r3, 80102c4 <__kernel_sin+0x15c>)
 80101c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101cc:	f7f0 f85c 	bl	8000288 <__aeabi_dsub>
 80101d0:	4652      	mov	r2, sl
 80101d2:	465b      	mov	r3, fp
 80101d4:	f7f0 fa10 	bl	80005f8 <__aeabi_dmul>
 80101d8:	a33c      	add	r3, pc, #240	; (adr r3, 80102cc <__kernel_sin+0x164>)
 80101da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101de:	f7f0 f855 	bl	800028c <__adddf3>
 80101e2:	4652      	mov	r2, sl
 80101e4:	465b      	mov	r3, fp
 80101e6:	f7f0 fa07 	bl	80005f8 <__aeabi_dmul>
 80101ea:	a33a      	add	r3, pc, #232	; (adr r3, 80102d4 <__kernel_sin+0x16c>)
 80101ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80101f0:	f7f0 f84a 	bl	8000288 <__aeabi_dsub>
 80101f4:	4652      	mov	r2, sl
 80101f6:	465b      	mov	r3, fp
 80101f8:	f7f0 f9fe 	bl	80005f8 <__aeabi_dmul>
 80101fc:	a337      	add	r3, pc, #220	; (adr r3, 80102dc <__kernel_sin+0x174>)
 80101fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010202:	f7f0 f843 	bl	800028c <__adddf3>
 8010206:	9b01      	ldr	r3, [sp, #4]
 8010208:	4606      	mov	r6, r0
 801020a:	460f      	mov	r7, r1
 801020c:	b9eb      	cbnz	r3, 801024a <__kernel_sin+0xe2>
 801020e:	4602      	mov	r2, r0
 8010210:	460b      	mov	r3, r1
 8010212:	4650      	mov	r0, sl
 8010214:	4659      	mov	r1, fp
 8010216:	f7f0 f9ef 	bl	80005f8 <__aeabi_dmul>
 801021a:	a325      	add	r3, pc, #148	; (adr r3, 80102b0 <__kernel_sin+0x148>)
 801021c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010220:	f7f0 f832 	bl	8000288 <__aeabi_dsub>
 8010224:	4642      	mov	r2, r8
 8010226:	464b      	mov	r3, r9
 8010228:	f7f0 f9e6 	bl	80005f8 <__aeabi_dmul>
 801022c:	4602      	mov	r2, r0
 801022e:	460b      	mov	r3, r1
 8010230:	4620      	mov	r0, r4
 8010232:	4629      	mov	r1, r5
 8010234:	f7f0 f82a 	bl	800028c <__adddf3>
 8010238:	4604      	mov	r4, r0
 801023a:	460d      	mov	r5, r1
 801023c:	ec45 4b10 	vmov	d0, r4, r5
 8010240:	b003      	add	sp, #12
 8010242:	ecbd 8b04 	vpop	{d8-d9}
 8010246:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801024a:	4b1b      	ldr	r3, [pc, #108]	; (80102b8 <__kernel_sin+0x150>)
 801024c:	ec51 0b18 	vmov	r0, r1, d8
 8010250:	2200      	movs	r2, #0
 8010252:	f7f0 f9d1 	bl	80005f8 <__aeabi_dmul>
 8010256:	4632      	mov	r2, r6
 8010258:	ec41 0b19 	vmov	d9, r0, r1
 801025c:	463b      	mov	r3, r7
 801025e:	4640      	mov	r0, r8
 8010260:	4649      	mov	r1, r9
 8010262:	f7f0 f9c9 	bl	80005f8 <__aeabi_dmul>
 8010266:	4602      	mov	r2, r0
 8010268:	460b      	mov	r3, r1
 801026a:	ec51 0b19 	vmov	r0, r1, d9
 801026e:	f7f0 f80b 	bl	8000288 <__aeabi_dsub>
 8010272:	4652      	mov	r2, sl
 8010274:	465b      	mov	r3, fp
 8010276:	f7f0 f9bf 	bl	80005f8 <__aeabi_dmul>
 801027a:	ec53 2b18 	vmov	r2, r3, d8
 801027e:	f7f0 f803 	bl	8000288 <__aeabi_dsub>
 8010282:	a30b      	add	r3, pc, #44	; (adr r3, 80102b0 <__kernel_sin+0x148>)
 8010284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010288:	4606      	mov	r6, r0
 801028a:	460f      	mov	r7, r1
 801028c:	4640      	mov	r0, r8
 801028e:	4649      	mov	r1, r9
 8010290:	f7f0 f9b2 	bl	80005f8 <__aeabi_dmul>
 8010294:	4602      	mov	r2, r0
 8010296:	460b      	mov	r3, r1
 8010298:	4630      	mov	r0, r6
 801029a:	4639      	mov	r1, r7
 801029c:	f7ef fff6 	bl	800028c <__adddf3>
 80102a0:	4602      	mov	r2, r0
 80102a2:	460b      	mov	r3, r1
 80102a4:	4620      	mov	r0, r4
 80102a6:	4629      	mov	r1, r5
 80102a8:	f7ef ffee 	bl	8000288 <__aeabi_dsub>
 80102ac:	e7c4      	b.n	8010238 <__kernel_sin+0xd0>
 80102ae:	bf00      	nop
 80102b0:	55555549 	.word	0x55555549
 80102b4:	3fc55555 	.word	0x3fc55555
 80102b8:	3fe00000 	.word	0x3fe00000
 80102bc:	5acfd57c 	.word	0x5acfd57c
 80102c0:	3de5d93a 	.word	0x3de5d93a
 80102c4:	8a2b9ceb 	.word	0x8a2b9ceb
 80102c8:	3e5ae5e6 	.word	0x3e5ae5e6
 80102cc:	57b1fe7d 	.word	0x57b1fe7d
 80102d0:	3ec71de3 	.word	0x3ec71de3
 80102d4:	19c161d5 	.word	0x19c161d5
 80102d8:	3f2a01a0 	.word	0x3f2a01a0
 80102dc:	1110f8a6 	.word	0x1110f8a6
 80102e0:	3f811111 	.word	0x3f811111

080102e4 <fabs>:
 80102e4:	ec51 0b10 	vmov	r0, r1, d0
 80102e8:	ee10 2a10 	vmov	r2, s0
 80102ec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80102f0:	ec43 2b10 	vmov	d0, r2, r3
 80102f4:	4770      	bx	lr
	...

080102f8 <floor>:
 80102f8:	ec51 0b10 	vmov	r0, r1, d0
 80102fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010300:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8010304:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8010308:	2e13      	cmp	r6, #19
 801030a:	ee10 5a10 	vmov	r5, s0
 801030e:	ee10 8a10 	vmov	r8, s0
 8010312:	460c      	mov	r4, r1
 8010314:	dc32      	bgt.n	801037c <floor+0x84>
 8010316:	2e00      	cmp	r6, #0
 8010318:	da14      	bge.n	8010344 <floor+0x4c>
 801031a:	a333      	add	r3, pc, #204	; (adr r3, 80103e8 <floor+0xf0>)
 801031c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010320:	f7ef ffb4 	bl	800028c <__adddf3>
 8010324:	2200      	movs	r2, #0
 8010326:	2300      	movs	r3, #0
 8010328:	f7f0 fbf6 	bl	8000b18 <__aeabi_dcmpgt>
 801032c:	b138      	cbz	r0, 801033e <floor+0x46>
 801032e:	2c00      	cmp	r4, #0
 8010330:	da57      	bge.n	80103e2 <floor+0xea>
 8010332:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8010336:	431d      	orrs	r5, r3
 8010338:	d001      	beq.n	801033e <floor+0x46>
 801033a:	4c2d      	ldr	r4, [pc, #180]	; (80103f0 <floor+0xf8>)
 801033c:	2500      	movs	r5, #0
 801033e:	4621      	mov	r1, r4
 8010340:	4628      	mov	r0, r5
 8010342:	e025      	b.n	8010390 <floor+0x98>
 8010344:	4f2b      	ldr	r7, [pc, #172]	; (80103f4 <floor+0xfc>)
 8010346:	4137      	asrs	r7, r6
 8010348:	ea01 0307 	and.w	r3, r1, r7
 801034c:	4303      	orrs	r3, r0
 801034e:	d01f      	beq.n	8010390 <floor+0x98>
 8010350:	a325      	add	r3, pc, #148	; (adr r3, 80103e8 <floor+0xf0>)
 8010352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010356:	f7ef ff99 	bl	800028c <__adddf3>
 801035a:	2200      	movs	r2, #0
 801035c:	2300      	movs	r3, #0
 801035e:	f7f0 fbdb 	bl	8000b18 <__aeabi_dcmpgt>
 8010362:	2800      	cmp	r0, #0
 8010364:	d0eb      	beq.n	801033e <floor+0x46>
 8010366:	2c00      	cmp	r4, #0
 8010368:	bfbe      	ittt	lt
 801036a:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 801036e:	fa43 f606 	asrlt.w	r6, r3, r6
 8010372:	19a4      	addlt	r4, r4, r6
 8010374:	ea24 0407 	bic.w	r4, r4, r7
 8010378:	2500      	movs	r5, #0
 801037a:	e7e0      	b.n	801033e <floor+0x46>
 801037c:	2e33      	cmp	r6, #51	; 0x33
 801037e:	dd0b      	ble.n	8010398 <floor+0xa0>
 8010380:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8010384:	d104      	bne.n	8010390 <floor+0x98>
 8010386:	ee10 2a10 	vmov	r2, s0
 801038a:	460b      	mov	r3, r1
 801038c:	f7ef ff7e 	bl	800028c <__adddf3>
 8010390:	ec41 0b10 	vmov	d0, r0, r1
 8010394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010398:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 801039c:	f04f 33ff 	mov.w	r3, #4294967295
 80103a0:	fa23 f707 	lsr.w	r7, r3, r7
 80103a4:	4207      	tst	r7, r0
 80103a6:	d0f3      	beq.n	8010390 <floor+0x98>
 80103a8:	a30f      	add	r3, pc, #60	; (adr r3, 80103e8 <floor+0xf0>)
 80103aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80103ae:	f7ef ff6d 	bl	800028c <__adddf3>
 80103b2:	2200      	movs	r2, #0
 80103b4:	2300      	movs	r3, #0
 80103b6:	f7f0 fbaf 	bl	8000b18 <__aeabi_dcmpgt>
 80103ba:	2800      	cmp	r0, #0
 80103bc:	d0bf      	beq.n	801033e <floor+0x46>
 80103be:	2c00      	cmp	r4, #0
 80103c0:	da02      	bge.n	80103c8 <floor+0xd0>
 80103c2:	2e14      	cmp	r6, #20
 80103c4:	d103      	bne.n	80103ce <floor+0xd6>
 80103c6:	3401      	adds	r4, #1
 80103c8:	ea25 0507 	bic.w	r5, r5, r7
 80103cc:	e7b7      	b.n	801033e <floor+0x46>
 80103ce:	2301      	movs	r3, #1
 80103d0:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80103d4:	fa03 f606 	lsl.w	r6, r3, r6
 80103d8:	4435      	add	r5, r6
 80103da:	4545      	cmp	r5, r8
 80103dc:	bf38      	it	cc
 80103de:	18e4      	addcc	r4, r4, r3
 80103e0:	e7f2      	b.n	80103c8 <floor+0xd0>
 80103e2:	2500      	movs	r5, #0
 80103e4:	462c      	mov	r4, r5
 80103e6:	e7aa      	b.n	801033e <floor+0x46>
 80103e8:	8800759c 	.word	0x8800759c
 80103ec:	7e37e43c 	.word	0x7e37e43c
 80103f0:	bff00000 	.word	0xbff00000
 80103f4:	000fffff 	.word	0x000fffff

080103f8 <scalbn>:
 80103f8:	b570      	push	{r4, r5, r6, lr}
 80103fa:	ec55 4b10 	vmov	r4, r5, d0
 80103fe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8010402:	4606      	mov	r6, r0
 8010404:	462b      	mov	r3, r5
 8010406:	b99a      	cbnz	r2, 8010430 <scalbn+0x38>
 8010408:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 801040c:	4323      	orrs	r3, r4
 801040e:	d036      	beq.n	801047e <scalbn+0x86>
 8010410:	4b39      	ldr	r3, [pc, #228]	; (80104f8 <scalbn+0x100>)
 8010412:	4629      	mov	r1, r5
 8010414:	ee10 0a10 	vmov	r0, s0
 8010418:	2200      	movs	r2, #0
 801041a:	f7f0 f8ed 	bl	80005f8 <__aeabi_dmul>
 801041e:	4b37      	ldr	r3, [pc, #220]	; (80104fc <scalbn+0x104>)
 8010420:	429e      	cmp	r6, r3
 8010422:	4604      	mov	r4, r0
 8010424:	460d      	mov	r5, r1
 8010426:	da10      	bge.n	801044a <scalbn+0x52>
 8010428:	a32b      	add	r3, pc, #172	; (adr r3, 80104d8 <scalbn+0xe0>)
 801042a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042e:	e03a      	b.n	80104a6 <scalbn+0xae>
 8010430:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8010434:	428a      	cmp	r2, r1
 8010436:	d10c      	bne.n	8010452 <scalbn+0x5a>
 8010438:	ee10 2a10 	vmov	r2, s0
 801043c:	4620      	mov	r0, r4
 801043e:	4629      	mov	r1, r5
 8010440:	f7ef ff24 	bl	800028c <__adddf3>
 8010444:	4604      	mov	r4, r0
 8010446:	460d      	mov	r5, r1
 8010448:	e019      	b.n	801047e <scalbn+0x86>
 801044a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 801044e:	460b      	mov	r3, r1
 8010450:	3a36      	subs	r2, #54	; 0x36
 8010452:	4432      	add	r2, r6
 8010454:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8010458:	428a      	cmp	r2, r1
 801045a:	dd08      	ble.n	801046e <scalbn+0x76>
 801045c:	2d00      	cmp	r5, #0
 801045e:	a120      	add	r1, pc, #128	; (adr r1, 80104e0 <scalbn+0xe8>)
 8010460:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010464:	da1c      	bge.n	80104a0 <scalbn+0xa8>
 8010466:	a120      	add	r1, pc, #128	; (adr r1, 80104e8 <scalbn+0xf0>)
 8010468:	e9d1 0100 	ldrd	r0, r1, [r1]
 801046c:	e018      	b.n	80104a0 <scalbn+0xa8>
 801046e:	2a00      	cmp	r2, #0
 8010470:	dd08      	ble.n	8010484 <scalbn+0x8c>
 8010472:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8010476:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 801047a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 801047e:	ec45 4b10 	vmov	d0, r4, r5
 8010482:	bd70      	pop	{r4, r5, r6, pc}
 8010484:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8010488:	da19      	bge.n	80104be <scalbn+0xc6>
 801048a:	f24c 3350 	movw	r3, #50000	; 0xc350
 801048e:	429e      	cmp	r6, r3
 8010490:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8010494:	dd0a      	ble.n	80104ac <scalbn+0xb4>
 8010496:	a112      	add	r1, pc, #72	; (adr r1, 80104e0 <scalbn+0xe8>)
 8010498:	e9d1 0100 	ldrd	r0, r1, [r1]
 801049c:	2b00      	cmp	r3, #0
 801049e:	d1e2      	bne.n	8010466 <scalbn+0x6e>
 80104a0:	a30f      	add	r3, pc, #60	; (adr r3, 80104e0 <scalbn+0xe8>)
 80104a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80104a6:	f7f0 f8a7 	bl	80005f8 <__aeabi_dmul>
 80104aa:	e7cb      	b.n	8010444 <scalbn+0x4c>
 80104ac:	a10a      	add	r1, pc, #40	; (adr r1, 80104d8 <scalbn+0xe0>)
 80104ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d0b8      	beq.n	8010428 <scalbn+0x30>
 80104b6:	a10e      	add	r1, pc, #56	; (adr r1, 80104f0 <scalbn+0xf8>)
 80104b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80104bc:	e7b4      	b.n	8010428 <scalbn+0x30>
 80104be:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80104c2:	3236      	adds	r2, #54	; 0x36
 80104c4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80104c8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 80104cc:	4620      	mov	r0, r4
 80104ce:	4b0c      	ldr	r3, [pc, #48]	; (8010500 <scalbn+0x108>)
 80104d0:	2200      	movs	r2, #0
 80104d2:	e7e8      	b.n	80104a6 <scalbn+0xae>
 80104d4:	f3af 8000 	nop.w
 80104d8:	c2f8f359 	.word	0xc2f8f359
 80104dc:	01a56e1f 	.word	0x01a56e1f
 80104e0:	8800759c 	.word	0x8800759c
 80104e4:	7e37e43c 	.word	0x7e37e43c
 80104e8:	8800759c 	.word	0x8800759c
 80104ec:	fe37e43c 	.word	0xfe37e43c
 80104f0:	c2f8f359 	.word	0xc2f8f359
 80104f4:	81a56e1f 	.word	0x81a56e1f
 80104f8:	43500000 	.word	0x43500000
 80104fc:	ffff3cb0 	.word	0xffff3cb0
 8010500:	3c900000 	.word	0x3c900000

08010504 <_init>:
 8010504:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010506:	bf00      	nop
 8010508:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801050a:	bc08      	pop	{r3}
 801050c:	469e      	mov	lr, r3
 801050e:	4770      	bx	lr

08010510 <_fini>:
 8010510:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010512:	bf00      	nop
 8010514:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010516:	bc08      	pop	{r3}
 8010518:	469e      	mov	lr, r3
 801051a:	4770      	bx	lr
